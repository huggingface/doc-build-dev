import{S as J$t,i as Y$t,s as K$t,e as a,k as l,w as F,t as o,M as Z$t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as ekt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as mXr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function okt(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,y6,_f,De,We,hi,yn,L6,Ln,xn,x6,pi,$n,$6,_i,uf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),y6=o(")."),_f=l(),De=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),L6=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),x6=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),$6=o(` attribute is set to the same class you use when registering the model (here
`),_i=a("code"),uf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var U$=s(p);m=r(U$,"NewModelConfig"),U$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ui=s(d);h=r(ui,"PretrainedConfig"),ui.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var J$=s(fi);pf=r(J$,"model_type"),J$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var Y$=s(mi);gi=r(Y$,'"new-model"'),Y$.forEach(t),y6=r(Ae,")."),Ae.forEach(t),_f=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),L6=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var K$=s(Ln);xn=r(K$,"PreTrainedModel"),K$.forEach(t),x6=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),$6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),_i=n(Eo,"CODE",{});var Z$=s(_i);uf=r(Z$,"NewModelConfig"),Z$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,y6),b(Qe,_f,Ae),b(Qe,De,Ae),e(De,We),e(De,hi),e(hi,yn),e(De,L6),e(De,Ln),e(Ln,xn),e(De,x6),e(De,pi),e(pi,$n),e(De,$6),e(De,_i),e(_i,uf),e(De,Ca)},d(Qe){Qe&&t(g),Qe&&t(_f),Qe&&t(De)}}}function rkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function akt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function nkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function skt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function lkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ikt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ckt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _kt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ukt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ekt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ckt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Akt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ykt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $kt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Skt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ikt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Okt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ukt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ykt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ESt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ASt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ySt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ISt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function USt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KSt(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,y6,_f,De,We,hi,yn,L6,Ln,xn,x6,pi,$n,$6,_i,uf,Ca,Qe,Ae,U$,ui,J$,Y$,Eo,wa,K$,bf,Z$,wOe,hqe,bi,vf,hoe,k6,AOe,poe,yOe,pqe,kn,LOe,_oe,xOe,$Oe,uoe,kOe,SOe,_qe,S6,uqe,ek,ROe,bqe,Ff,vqe,vi,Tf,boe,R6,POe,voe,BOe,Fqe,Co,P6,IOe,B6,NOe,ok,qOe,jOe,DOe,I6,GOe,Foe,OOe,VOe,XOe,Er,N6,zOe,Toe,WOe,QOe,Fi,HOe,Moe,UOe,JOe,Eoe,YOe,KOe,ZOe,A,Mf,Coe,eVe,oVe,rk,rVe,tVe,aVe,Ef,woe,nVe,sVe,tk,lVe,iVe,dVe,Cf,Aoe,cVe,fVe,ak,mVe,gVe,hVe,wf,yoe,pVe,_Ve,nk,uVe,bVe,vVe,Af,Loe,FVe,TVe,sk,MVe,EVe,CVe,yf,xoe,wVe,AVe,lk,yVe,LVe,xVe,Lf,$oe,$Ve,kVe,ik,SVe,RVe,PVe,xf,koe,BVe,IVe,dk,NVe,qVe,jVe,$f,Soe,DVe,GVe,ck,OVe,VVe,XVe,kf,Roe,zVe,WVe,fk,QVe,HVe,UVe,Sf,Poe,JVe,YVe,mk,KVe,ZVe,eXe,Rf,Boe,oXe,rXe,gk,tXe,aXe,nXe,Pf,Ioe,sXe,lXe,hk,iXe,dXe,cXe,Bf,Noe,fXe,mXe,pk,gXe,hXe,pXe,If,qoe,_Xe,uXe,_k,bXe,vXe,FXe,Nf,joe,TXe,MXe,uk,EXe,CXe,wXe,qf,Doe,AXe,yXe,bk,LXe,xXe,$Xe,jf,Goe,kXe,SXe,vk,RXe,PXe,BXe,Df,Ooe,IXe,NXe,Fk,qXe,jXe,DXe,Gf,Voe,GXe,OXe,Tk,VXe,XXe,zXe,Of,Xoe,WXe,QXe,Mk,HXe,UXe,JXe,Vf,zoe,YXe,KXe,Ek,ZXe,eze,oze,Xf,Woe,rze,tze,Ck,aze,nze,sze,zf,Qoe,lze,ize,wk,dze,cze,fze,Wf,Hoe,mze,gze,Ak,hze,pze,_ze,Qf,Uoe,uze,bze,yk,vze,Fze,Tze,Hf,Joe,Mze,Eze,Lk,Cze,wze,Aze,Uf,Yoe,yze,Lze,xk,xze,$ze,kze,Jf,Koe,Sze,Rze,$k,Pze,Bze,Ize,Yf,Zoe,Nze,qze,kk,jze,Dze,Gze,Kf,ere,Oze,Vze,Sk,Xze,zze,Wze,Zf,ore,Qze,Hze,Rk,Uze,Jze,Yze,em,rre,Kze,Zze,Pk,eWe,oWe,rWe,om,tre,tWe,aWe,Bk,nWe,sWe,lWe,rm,are,iWe,dWe,Ik,cWe,fWe,mWe,tm,nre,gWe,hWe,Nk,pWe,_We,uWe,am,sre,bWe,vWe,qk,FWe,TWe,MWe,nm,lre,EWe,CWe,jk,wWe,AWe,yWe,sm,ire,LWe,xWe,Dk,$We,kWe,SWe,lm,dre,RWe,PWe,Gk,BWe,IWe,NWe,im,cre,qWe,jWe,Ok,DWe,GWe,OWe,dm,fre,VWe,XWe,Vk,zWe,WWe,QWe,cm,mre,HWe,UWe,Xk,JWe,YWe,KWe,fm,gre,ZWe,eQe,zk,oQe,rQe,tQe,mm,hre,aQe,nQe,Wk,sQe,lQe,iQe,gm,pre,dQe,cQe,Qk,fQe,mQe,gQe,hm,_re,hQe,pQe,Hk,_Qe,uQe,bQe,pm,ure,vQe,FQe,Uk,TQe,MQe,EQe,_m,bre,CQe,wQe,Jk,AQe,yQe,LQe,um,vre,xQe,$Qe,Yk,kQe,SQe,RQe,bm,Fre,PQe,BQe,Kk,IQe,NQe,qQe,vm,Tre,jQe,DQe,Zk,GQe,OQe,VQe,Fm,Mre,XQe,zQe,eS,WQe,QQe,HQe,Tm,Ere,UQe,JQe,oS,YQe,KQe,ZQe,Mm,Cre,eHe,oHe,rS,rHe,tHe,aHe,Em,wre,nHe,sHe,tS,lHe,iHe,dHe,Cm,Are,cHe,fHe,aS,mHe,gHe,hHe,wm,yre,pHe,_He,nS,uHe,bHe,vHe,Am,Lre,FHe,THe,sS,MHe,EHe,CHe,ym,xre,wHe,AHe,lS,yHe,LHe,xHe,Lm,$re,$He,kHe,iS,SHe,RHe,PHe,xm,kre,BHe,IHe,dS,NHe,qHe,jHe,$m,Sre,DHe,GHe,cS,OHe,VHe,XHe,km,Rre,zHe,WHe,fS,QHe,HHe,UHe,Sm,Pre,JHe,YHe,mS,KHe,ZHe,eUe,Rm,Bre,oUe,rUe,gS,tUe,aUe,nUe,Pm,Ire,sUe,lUe,hS,iUe,dUe,cUe,Bm,Nre,fUe,mUe,pS,gUe,hUe,pUe,Im,qre,_Ue,uUe,_S,bUe,vUe,FUe,Nm,jre,TUe,MUe,uS,EUe,CUe,wUe,qm,Dre,AUe,yUe,bS,LUe,xUe,$Ue,jm,Gre,kUe,SUe,vS,RUe,PUe,BUe,Dm,Ore,IUe,NUe,FS,qUe,jUe,DUe,Gm,Vre,GUe,OUe,TS,VUe,XUe,zUe,Om,Xre,WUe,QUe,MS,HUe,UUe,JUe,Vm,zre,YUe,KUe,ES,ZUe,eJe,oJe,Xm,Wre,rJe,tJe,CS,aJe,nJe,sJe,zm,Qre,lJe,iJe,wS,dJe,cJe,fJe,Wm,Hre,mJe,gJe,AS,hJe,pJe,_Je,Qm,Ure,uJe,bJe,yS,vJe,FJe,TJe,Hm,Jre,MJe,EJe,LS,CJe,wJe,AJe,Um,Yre,yJe,LJe,xS,xJe,$Je,kJe,Jm,Kre,SJe,RJe,$S,PJe,BJe,IJe,Ym,Zre,NJe,qJe,kS,jJe,DJe,GJe,Km,ete,OJe,VJe,SS,XJe,zJe,WJe,Zm,ote,QJe,HJe,RS,UJe,JJe,YJe,eg,rte,KJe,ZJe,PS,eYe,oYe,rYe,og,tte,tYe,aYe,BS,nYe,sYe,lYe,rg,ate,iYe,dYe,IS,cYe,fYe,mYe,tg,nte,gYe,hYe,NS,pYe,_Ye,uYe,ag,ste,bYe,vYe,qS,FYe,TYe,MYe,ng,lte,EYe,CYe,jS,wYe,AYe,yYe,sg,ite,LYe,xYe,DS,$Ye,kYe,SYe,lg,dte,RYe,PYe,GS,BYe,IYe,NYe,ig,cte,qYe,jYe,OS,DYe,GYe,OYe,dg,fte,VYe,XYe,VS,zYe,WYe,QYe,cg,mte,HYe,UYe,XS,JYe,YYe,KYe,fg,gte,ZYe,eKe,zS,oKe,rKe,tKe,mg,hte,aKe,nKe,WS,sKe,lKe,iKe,gg,pte,dKe,cKe,QS,fKe,mKe,gKe,hg,_te,hKe,pKe,HS,_Ke,uKe,bKe,pg,ute,vKe,FKe,US,TKe,MKe,EKe,_g,bte,CKe,wKe,JS,AKe,yKe,LKe,ug,vte,xKe,$Ke,YS,kKe,SKe,RKe,bg,Fte,PKe,BKe,KS,IKe,NKe,qKe,vg,Tte,jKe,DKe,ZS,GKe,OKe,VKe,Fg,Mte,XKe,zKe,eR,WKe,QKe,HKe,Tg,Ete,UKe,JKe,oR,YKe,KKe,ZKe,Mg,Cte,eZe,oZe,rR,rZe,tZe,aZe,Eg,nZe,Cg,q6,sZe,wte,lZe,Tqe,Ti,wg,Ate,j6,iZe,yte,dZe,Mqe,wo,D6,cZe,G6,fZe,tR,mZe,gZe,hZe,O6,pZe,Lte,_Ze,uZe,bZe,Cr,V6,vZe,xte,FZe,TZe,Aa,MZe,$te,EZe,CZe,kte,wZe,AZe,Ste,yZe,LZe,xZe,k,Sn,Rte,$Ze,kZe,aR,SZe,RZe,nR,PZe,BZe,IZe,Rn,Pte,NZe,qZe,sR,jZe,DZe,lR,GZe,OZe,VZe,Pn,Bte,XZe,zZe,iR,WZe,QZe,dR,HZe,UZe,JZe,Ag,Ite,YZe,KZe,cR,ZZe,eeo,oeo,Bn,Nte,reo,teo,fR,aeo,neo,mR,seo,leo,ieo,yg,qte,deo,ceo,gR,feo,meo,geo,Lg,jte,heo,peo,hR,_eo,ueo,beo,xg,Dte,veo,Feo,pR,Teo,Meo,Eeo,In,Gte,Ceo,weo,_R,Aeo,yeo,uR,Leo,xeo,$eo,Nn,Ote,keo,Seo,bR,Reo,Peo,vR,Beo,Ieo,Neo,qn,Vte,qeo,jeo,FR,Deo,Geo,TR,Oeo,Veo,Xeo,$g,Xte,zeo,Weo,MR,Qeo,Heo,Ueo,kg,zte,Jeo,Yeo,ER,Keo,Zeo,eoo,jn,Wte,ooo,roo,CR,too,aoo,wR,noo,soo,loo,Sg,Qte,ioo,doo,AR,coo,foo,moo,Dn,Hte,goo,hoo,yR,poo,_oo,LR,uoo,boo,voo,Gn,Ute,Foo,Too,xR,Moo,Eoo,$R,Coo,woo,Aoo,On,Jte,yoo,Loo,kR,xoo,$oo,SR,koo,Soo,Roo,Rg,Yte,Poo,Boo,RR,Ioo,Noo,qoo,Vn,Kte,joo,Doo,PR,Goo,Ooo,BR,Voo,Xoo,zoo,Xn,Zte,Woo,Qoo,IR,Hoo,Uoo,NR,Joo,Yoo,Koo,zn,eae,Zoo,ero,qR,oro,rro,jR,tro,aro,nro,Wn,oae,sro,lro,DR,iro,dro,GR,cro,fro,mro,Qn,rae,gro,hro,OR,pro,_ro,VR,uro,bro,vro,Hn,tae,Fro,Tro,XR,Mro,Ero,zR,Cro,wro,Aro,Pg,aae,yro,Lro,WR,xro,$ro,kro,Un,nae,Sro,Rro,QR,Pro,Bro,HR,Iro,Nro,qro,Bg,sae,jro,Dro,UR,Gro,Oro,Vro,Jn,lae,Xro,zro,JR,Wro,Qro,YR,Hro,Uro,Jro,Yn,iae,Yro,Kro,KR,Zro,eto,ZR,oto,rto,tto,Kn,dae,ato,nto,eP,sto,lto,oP,ito,dto,cto,Ig,cae,fto,mto,rP,gto,hto,pto,Zn,fae,_to,uto,tP,bto,vto,aP,Fto,Tto,Mto,es,mae,Eto,Cto,nP,wto,Ato,sP,yto,Lto,xto,Ng,gae,$to,kto,lP,Sto,Rto,Pto,os,hae,Bto,Ito,iP,Nto,qto,dP,jto,Dto,Gto,rs,pae,Oto,Vto,cP,Xto,zto,fP,Wto,Qto,Hto,ts,_ae,Uto,Jto,mP,Yto,Kto,gP,Zto,eao,oao,as,uae,rao,tao,hP,aao,nao,pP,sao,lao,iao,ns,bae,dao,cao,_P,fao,mao,uP,gao,hao,pao,ss,vae,_ao,uao,bP,bao,vao,vP,Fao,Tao,Mao,ls,Fae,Eao,Cao,FP,wao,Aao,TP,yao,Lao,xao,qg,Tae,$ao,kao,MP,Sao,Rao,Pao,is,Mae,Bao,Iao,EP,Nao,qao,CP,jao,Dao,Gao,jg,Eae,Oao,Vao,wP,Xao,zao,Wao,Dg,Cae,Qao,Hao,AP,Uao,Jao,Yao,ds,wae,Kao,Zao,yP,eno,ono,LP,rno,tno,ano,cs,Aae,nno,sno,xP,lno,ino,$P,dno,cno,fno,fs,yae,mno,gno,kP,hno,pno,SP,_no,uno,bno,Gg,Lae,vno,Fno,RP,Tno,Mno,Eno,ms,xae,Cno,wno,PP,Ano,yno,BP,Lno,xno,$no,gs,$ae,kno,Sno,IP,Rno,Pno,NP,Bno,Ino,Nno,hs,kae,qno,jno,qP,Dno,Gno,jP,Ono,Vno,Xno,ps,Sae,zno,Wno,DP,Qno,Hno,GP,Uno,Jno,Yno,_s,Rae,Kno,Zno,OP,eso,oso,VP,rso,tso,aso,Og,Pae,nso,sso,XP,lso,iso,dso,us,Bae,cso,fso,zP,mso,gso,WP,hso,pso,_so,Vg,Iae,uso,bso,QP,vso,Fso,Tso,Xg,Nae,Mso,Eso,HP,Cso,wso,Aso,zg,qae,yso,Lso,UP,xso,$so,kso,Wg,jae,Sso,Rso,JP,Pso,Bso,Iso,bs,Dae,Nso,qso,YP,jso,Dso,KP,Gso,Oso,Vso,Qg,Gae,Xso,zso,ZP,Wso,Qso,Hso,vs,Oae,Uso,Jso,eB,Yso,Kso,oB,Zso,elo,olo,Fs,Vae,rlo,tlo,rB,alo,nlo,tB,slo,llo,ilo,Ts,Xae,dlo,clo,aB,flo,mlo,nB,glo,hlo,plo,Ms,zae,_lo,ulo,sB,blo,vlo,lB,Flo,Tlo,Mlo,Es,Wae,Elo,Clo,iB,wlo,Alo,dB,ylo,Llo,xlo,Cs,Qae,$lo,klo,cB,Slo,Rlo,fB,Plo,Blo,Ilo,Hg,Hae,Nlo,qlo,mB,jlo,Dlo,Glo,Ug,Uae,Olo,Vlo,gB,Xlo,zlo,Wlo,ws,Jae,Qlo,Hlo,hB,Ulo,Jlo,pB,Ylo,Klo,Zlo,As,Yae,eio,oio,_B,rio,tio,uB,aio,nio,sio,ys,Kae,lio,iio,bB,dio,cio,vB,fio,mio,gio,Jg,Zae,hio,pio,FB,_io,uio,bio,Yg,ene,vio,Fio,TB,Tio,Mio,Eio,Kg,one,Cio,wio,MB,Aio,yio,Lio,Ls,rne,xio,$io,EB,kio,Sio,CB,Rio,Pio,Bio,Zg,tne,Iio,Nio,wB,qio,jio,Dio,eh,ane,Gio,Oio,AB,Vio,Xio,zio,oh,nne,Wio,Qio,yB,Hio,Uio,Jio,xs,sne,Yio,Kio,LB,Zio,edo,xB,odo,rdo,tdo,rh,lne,ado,ndo,$B,sdo,ldo,ido,th,ine,ddo,cdo,kB,fdo,mdo,gdo,$s,dne,hdo,pdo,SB,_do,udo,RB,bdo,vdo,Fdo,ks,cne,Tdo,Mdo,PB,Edo,Cdo,BB,wdo,Ado,ydo,Ss,fne,Ldo,xdo,IB,$do,kdo,NB,Sdo,Rdo,Pdo,Rs,mne,Bdo,Ido,qB,Ndo,qdo,jB,jdo,Ddo,Gdo,ah,Odo,nh,X6,Vdo,gne,Xdo,Eqe,Mi,sh,hne,z6,zdo,pne,Wdo,Cqe,Ao,W6,Qdo,Q6,Hdo,DB,Udo,Jdo,Ydo,H6,Kdo,_ne,Zdo,eco,oco,He,U6,rco,une,tco,aco,ya,nco,bne,sco,lco,vne,ico,dco,Fne,cco,fco,mco,Y,lh,Tne,gco,hco,GB,pco,_co,uco,ih,Mne,bco,vco,OB,Fco,Tco,Mco,dh,Ene,Eco,Cco,VB,wco,Aco,yco,ch,Cne,Lco,xco,XB,$co,kco,Sco,fh,wne,Rco,Pco,zB,Bco,Ico,Nco,mh,Ane,qco,jco,WB,Dco,Gco,Oco,gh,yne,Vco,Xco,QB,zco,Wco,Qco,hh,Lne,Hco,Uco,HB,Jco,Yco,Kco,ph,xne,Zco,efo,UB,ofo,rfo,tfo,_h,$ne,afo,nfo,JB,sfo,lfo,ifo,uh,kne,dfo,cfo,YB,ffo,mfo,gfo,bh,Sne,hfo,pfo,KB,_fo,ufo,bfo,vh,Rne,vfo,Ffo,ZB,Tfo,Mfo,Efo,Fh,Pne,Cfo,wfo,eI,Afo,yfo,Lfo,Th,Bne,xfo,$fo,oI,kfo,Sfo,Rfo,Mh,Ine,Pfo,Bfo,rI,Ifo,Nfo,qfo,Eh,Nne,jfo,Dfo,tI,Gfo,Ofo,Vfo,Ch,qne,Xfo,zfo,aI,Wfo,Qfo,Hfo,wh,jne,Ufo,Jfo,nI,Yfo,Kfo,Zfo,Ah,Dne,emo,omo,sI,rmo,tmo,amo,yh,Gne,nmo,smo,lI,lmo,imo,dmo,Lh,One,cmo,fmo,iI,mmo,gmo,hmo,xh,Vne,pmo,_mo,dI,umo,bmo,vmo,$h,Xne,Fmo,Tmo,cI,Mmo,Emo,Cmo,kh,zne,wmo,Amo,fI,ymo,Lmo,xmo,Sh,Wne,$mo,kmo,mI,Smo,Rmo,Pmo,Rh,Qne,Bmo,Imo,gI,Nmo,qmo,jmo,Ph,Hne,Dmo,Gmo,hI,Omo,Vmo,Xmo,Bh,Une,zmo,Wmo,pI,Qmo,Hmo,Umo,Ih,Jmo,Nh,Ymo,qh,J6,Kmo,Jne,Zmo,wqe,Ei,jh,Yne,Y6,ego,Kne,ogo,Aqe,yo,K6,rgo,Z6,tgo,_I,ago,ngo,sgo,eA,lgo,Zne,igo,dgo,cgo,Ue,oA,fgo,ese,mgo,ggo,Ci,hgo,ose,pgo,_go,rse,ugo,bgo,vgo,he,Dh,tse,Fgo,Tgo,uI,Mgo,Ego,Cgo,Gh,ase,wgo,Ago,nse,ygo,Lgo,xgo,Oh,sse,$go,kgo,bI,Sgo,Rgo,Pgo,Vh,lse,Bgo,Igo,vI,Ngo,qgo,jgo,Xh,ise,Dgo,Ggo,FI,Ogo,Vgo,Xgo,zh,dse,zgo,Wgo,TI,Qgo,Hgo,Ugo,Wh,cse,Jgo,Ygo,MI,Kgo,Zgo,eho,Qh,fse,oho,rho,EI,tho,aho,nho,Hh,mse,sho,lho,CI,iho,dho,cho,Uh,gse,fho,mho,wI,gho,hho,pho,Jh,hse,_ho,uho,AI,bho,vho,Fho,Yh,pse,Tho,Mho,yI,Eho,Cho,who,Kh,_se,Aho,yho,LI,Lho,xho,$ho,Zh,use,kho,Sho,xI,Rho,Pho,Bho,ep,bse,Iho,Nho,$I,qho,jho,Dho,op,vse,Gho,Oho,kI,Vho,Xho,zho,rp,Fse,Who,Qho,SI,Hho,Uho,Jho,tp,Yho,ap,Kho,np,rA,Zho,Tse,epo,yqe,wi,sp,Mse,tA,opo,Ese,rpo,Lqe,Lo,aA,tpo,Ai,apo,RI,npo,spo,PI,lpo,ipo,dpo,nA,cpo,Cse,fpo,mpo,gpo,tt,sA,hpo,wse,ppo,_po,yi,upo,Ase,bpo,vpo,BI,Fpo,Tpo,Mpo,lp,Epo,Je,lA,Cpo,yse,wpo,Apo,La,ypo,Lse,Lpo,xpo,xse,$po,kpo,$se,Spo,Rpo,Ppo,x,ip,kse,Bpo,Ipo,II,Npo,qpo,jpo,dp,Sse,Dpo,Gpo,NI,Opo,Vpo,Xpo,cp,Rse,zpo,Wpo,qI,Qpo,Hpo,Upo,fp,Pse,Jpo,Ypo,jI,Kpo,Zpo,e_o,mp,Bse,o_o,r_o,DI,t_o,a_o,n_o,gp,Ise,s_o,l_o,GI,i_o,d_o,c_o,hp,Nse,f_o,m_o,OI,g_o,h_o,p_o,pp,qse,__o,u_o,VI,b_o,v_o,F_o,_p,jse,T_o,M_o,XI,E_o,C_o,w_o,up,Dse,A_o,y_o,zI,L_o,x_o,$_o,bp,Gse,k_o,S_o,WI,R_o,P_o,B_o,vp,Ose,I_o,N_o,QI,q_o,j_o,D_o,Fp,Vse,G_o,O_o,HI,V_o,X_o,z_o,Tp,Xse,W_o,Q_o,UI,H_o,U_o,J_o,Mp,zse,Y_o,K_o,JI,Z_o,euo,ouo,Ep,Wse,ruo,tuo,YI,auo,nuo,suo,Cp,Qse,luo,iuo,KI,duo,cuo,fuo,wp,Hse,muo,guo,ZI,huo,puo,_uo,Ap,Use,uuo,buo,eN,vuo,Fuo,Tuo,yp,Jse,Muo,Euo,oN,Cuo,wuo,Auo,Lp,Yse,yuo,Luo,rN,xuo,$uo,kuo,xp,Kse,Suo,Ruo,tN,Puo,Buo,Iuo,$p,Zse,Nuo,quo,aN,juo,Duo,Guo,kp,ele,Ouo,Vuo,nN,Xuo,zuo,Wuo,Sp,ole,Quo,Huo,sN,Uuo,Juo,Yuo,Rp,rle,Kuo,Zuo,lN,e1o,o1o,r1o,Pp,tle,t1o,a1o,iN,n1o,s1o,l1o,Bp,ale,i1o,d1o,dN,c1o,f1o,m1o,Ip,nle,g1o,h1o,cN,p1o,_1o,u1o,Np,sle,b1o,v1o,fN,F1o,T1o,M1o,qp,lle,E1o,C1o,mN,w1o,A1o,y1o,jp,ile,L1o,x1o,gN,$1o,k1o,S1o,Ps,dle,R1o,P1o,hN,B1o,I1o,pN,N1o,q1o,j1o,Dp,cle,D1o,G1o,_N,O1o,V1o,X1o,Gp,fle,z1o,W1o,uN,Q1o,H1o,U1o,Op,mle,J1o,Y1o,bN,K1o,Z1o,ebo,Vp,gle,obo,rbo,vN,tbo,abo,nbo,Xp,hle,sbo,lbo,FN,ibo,dbo,cbo,zp,ple,fbo,mbo,TN,gbo,hbo,pbo,Wp,_le,_bo,ubo,MN,bbo,vbo,Fbo,Qp,ule,Tbo,Mbo,EN,Ebo,Cbo,wbo,Hp,ble,Abo,ybo,CN,Lbo,xbo,$bo,Up,vle,kbo,Sbo,wN,Rbo,Pbo,Bbo,Jp,Fle,Ibo,Nbo,AN,qbo,jbo,Dbo,Yp,Tle,Gbo,Obo,yN,Vbo,Xbo,zbo,Kp,Mle,Wbo,Qbo,LN,Hbo,Ubo,Jbo,Zp,Ele,Ybo,Kbo,xN,Zbo,e2o,o2o,e_,Cle,r2o,t2o,$N,a2o,n2o,s2o,o_,wle,l2o,i2o,kN,d2o,c2o,f2o,r_,Ale,m2o,g2o,SN,h2o,p2o,_2o,t_,yle,u2o,b2o,RN,v2o,F2o,T2o,a_,Lle,M2o,E2o,PN,C2o,w2o,A2o,n_,xle,y2o,L2o,BN,x2o,$2o,k2o,s_,$le,S2o,R2o,IN,P2o,B2o,I2o,l_,kle,N2o,q2o,NN,j2o,D2o,G2o,i_,Sle,O2o,V2o,qN,X2o,z2o,W2o,d_,Rle,Q2o,H2o,jN,U2o,J2o,Y2o,c_,Ple,K2o,Z2o,DN,e4o,o4o,r4o,f_,Ble,t4o,a4o,GN,n4o,s4o,l4o,m_,Ile,i4o,d4o,ON,c4o,f4o,m4o,g_,Nle,g4o,h4o,VN,p4o,_4o,u4o,h_,qle,b4o,v4o,XN,F4o,T4o,M4o,p_,jle,E4o,C4o,zN,w4o,A4o,y4o,__,Dle,L4o,x4o,WN,$4o,k4o,S4o,u_,Gle,R4o,P4o,QN,B4o,I4o,N4o,b_,Ole,q4o,j4o,HN,D4o,G4o,O4o,v_,Vle,V4o,X4o,UN,z4o,W4o,Q4o,F_,Xle,H4o,U4o,JN,J4o,Y4o,K4o,T_,zle,Z4o,e5o,YN,o5o,r5o,t5o,M_,Wle,a5o,n5o,KN,s5o,l5o,i5o,E_,Qle,d5o,c5o,ZN,f5o,m5o,g5o,C_,Hle,h5o,p5o,eq,_5o,u5o,b5o,w_,Ule,v5o,F5o,oq,T5o,M5o,E5o,A_,Jle,C5o,w5o,rq,A5o,y5o,L5o,y_,Yle,x5o,$5o,tq,k5o,S5o,R5o,L_,Kle,P5o,B5o,aq,I5o,N5o,q5o,x_,Zle,j5o,D5o,nq,G5o,O5o,V5o,$_,eie,X5o,z5o,sq,W5o,Q5o,H5o,k_,oie,U5o,J5o,lq,Y5o,K5o,Z5o,S_,rie,evo,ovo,iq,rvo,tvo,avo,R_,tie,nvo,svo,dq,lvo,ivo,dvo,P_,aie,cvo,fvo,cq,mvo,gvo,hvo,B_,nie,pvo,_vo,fq,uvo,bvo,vvo,I_,sie,Fvo,Tvo,mq,Mvo,Evo,Cvo,N_,lie,wvo,Avo,gq,yvo,Lvo,xvo,q_,iie,$vo,kvo,hq,Svo,Rvo,Pvo,j_,die,Bvo,Ivo,pq,Nvo,qvo,jvo,D_,cie,Dvo,Gvo,_q,Ovo,Vvo,Xvo,G_,fie,zvo,Wvo,uq,Qvo,Hvo,Uvo,O_,mie,Jvo,Yvo,bq,Kvo,Zvo,eFo,V_,gie,oFo,rFo,vq,tFo,aFo,nFo,X_,hie,sFo,lFo,Fq,iFo,dFo,cFo,z_,pie,fFo,mFo,Tq,gFo,hFo,pFo,W_,_ie,_Fo,uFo,Mq,bFo,vFo,FFo,Q_,uie,TFo,MFo,Eq,EFo,CFo,wFo,H_,bie,AFo,yFo,Cq,LFo,xFo,$Fo,U_,vie,kFo,SFo,wq,RFo,PFo,BFo,J_,Fie,IFo,NFo,Aq,qFo,jFo,DFo,Y_,Tie,GFo,OFo,yq,VFo,XFo,zFo,K_,Mie,WFo,QFo,Lq,HFo,UFo,JFo,Z_,Eie,YFo,KFo,xq,ZFo,eTo,oTo,eu,Cie,rTo,tTo,$q,aTo,nTo,sTo,ou,lTo,wie,iTo,dTo,Aie,cTo,fTo,ru,xqe,Li,tu,yie,iA,mTo,Lie,gTo,$qe,xo,dA,hTo,xi,pTo,kq,_To,uTo,Sq,bTo,vTo,FTo,cA,TTo,xie,MTo,ETo,CTo,at,fA,wTo,$ie,ATo,yTo,$i,LTo,kie,xTo,$To,Rq,kTo,STo,RTo,au,PTo,Ye,mA,BTo,Sie,ITo,NTo,xa,qTo,Rie,jTo,DTo,Pie,GTo,OTo,Bie,VTo,XTo,zTo,G,nu,Iie,WTo,QTo,Pq,HTo,UTo,JTo,su,Nie,YTo,KTo,Bq,ZTo,e7o,o7o,lu,qie,r7o,t7o,Iq,a7o,n7o,s7o,iu,jie,l7o,i7o,Nq,d7o,c7o,f7o,du,Die,m7o,g7o,qq,h7o,p7o,_7o,cu,Gie,u7o,b7o,jq,v7o,F7o,T7o,fu,Oie,M7o,E7o,Dq,C7o,w7o,A7o,mu,Vie,y7o,L7o,Gq,x7o,$7o,k7o,gu,Xie,S7o,R7o,Oq,P7o,B7o,I7o,hu,zie,N7o,q7o,Vq,j7o,D7o,G7o,pu,Wie,O7o,V7o,Xq,X7o,z7o,W7o,_u,Qie,Q7o,H7o,zq,U7o,J7o,Y7o,uu,Hie,K7o,Z7o,Wq,e9o,o9o,r9o,bu,Uie,t9o,a9o,Qq,n9o,s9o,l9o,vu,Jie,i9o,d9o,Hq,c9o,f9o,m9o,Fu,Yie,g9o,h9o,Uq,p9o,_9o,u9o,Tu,Kie,b9o,v9o,Jq,F9o,T9o,M9o,Mu,Zie,E9o,C9o,Yq,w9o,A9o,y9o,Eu,ede,L9o,x9o,Kq,$9o,k9o,S9o,Cu,ode,R9o,P9o,Zq,B9o,I9o,N9o,wu,rde,q9o,j9o,ej,D9o,G9o,O9o,Au,tde,V9o,X9o,oj,z9o,W9o,Q9o,yu,ade,H9o,U9o,rj,J9o,Y9o,K9o,Lu,nde,Z9o,eMo,tj,oMo,rMo,tMo,xu,sde,aMo,nMo,aj,sMo,lMo,iMo,$u,lde,dMo,cMo,nj,fMo,mMo,gMo,ku,ide,hMo,pMo,sj,_Mo,uMo,bMo,Su,dde,vMo,FMo,lj,TMo,MMo,EMo,Ru,cde,CMo,wMo,ij,AMo,yMo,LMo,Pu,fde,xMo,$Mo,dj,kMo,SMo,RMo,Bu,mde,PMo,BMo,cj,IMo,NMo,qMo,Iu,gde,jMo,DMo,fj,GMo,OMo,VMo,Nu,hde,XMo,zMo,mj,WMo,QMo,HMo,qu,pde,UMo,JMo,gj,YMo,KMo,ZMo,ju,_de,eEo,oEo,hj,rEo,tEo,aEo,Du,ude,nEo,sEo,pj,lEo,iEo,dEo,Gu,bde,cEo,fEo,_j,mEo,gEo,hEo,Ou,vde,pEo,_Eo,uj,uEo,bEo,vEo,Vu,Fde,FEo,TEo,bj,MEo,EEo,CEo,Xu,Tde,wEo,AEo,vj,yEo,LEo,xEo,zu,Mde,$Eo,kEo,Fj,SEo,REo,PEo,Wu,Ede,BEo,IEo,Tj,NEo,qEo,jEo,Qu,DEo,Cde,GEo,OEo,wde,VEo,XEo,Hu,kqe,ki,Uu,Ade,gA,zEo,yde,WEo,Sqe,$o,hA,QEo,Si,HEo,Mj,UEo,JEo,Ej,YEo,KEo,ZEo,pA,eCo,Lde,oCo,rCo,tCo,nt,_A,aCo,xde,nCo,sCo,Ri,lCo,$de,iCo,dCo,Cj,cCo,fCo,mCo,Ju,gCo,Ke,uA,hCo,kde,pCo,_Co,$a,uCo,Sde,bCo,vCo,Rde,FCo,TCo,Pde,MCo,ECo,CCo,z,Yu,Bde,wCo,ACo,wj,yCo,LCo,xCo,Ku,Ide,$Co,kCo,Aj,SCo,RCo,PCo,Zu,Nde,BCo,ICo,yj,NCo,qCo,jCo,e1,qde,DCo,GCo,Lj,OCo,VCo,XCo,o1,jde,zCo,WCo,xj,QCo,HCo,UCo,r1,Dde,JCo,YCo,$j,KCo,ZCo,e3o,t1,Gde,o3o,r3o,kj,t3o,a3o,n3o,a1,Ode,s3o,l3o,Sj,i3o,d3o,c3o,n1,Vde,f3o,m3o,Rj,g3o,h3o,p3o,s1,Xde,_3o,u3o,Pj,b3o,v3o,F3o,l1,zde,T3o,M3o,Bj,E3o,C3o,w3o,i1,Wde,A3o,y3o,Ij,L3o,x3o,$3o,d1,Qde,k3o,S3o,Nj,R3o,P3o,B3o,c1,Hde,I3o,N3o,qj,q3o,j3o,D3o,f1,Ude,G3o,O3o,jj,V3o,X3o,z3o,m1,Jde,W3o,Q3o,Dj,H3o,U3o,J3o,g1,Yde,Y3o,K3o,Gj,Z3o,ewo,owo,h1,Kde,rwo,two,Oj,awo,nwo,swo,p1,Zde,lwo,iwo,Vj,dwo,cwo,fwo,_1,ece,mwo,gwo,Xj,hwo,pwo,_wo,u1,oce,uwo,bwo,zj,vwo,Fwo,Two,b1,rce,Mwo,Ewo,Wj,Cwo,wwo,Awo,v1,tce,ywo,Lwo,Qj,xwo,$wo,kwo,F1,ace,Swo,Rwo,Hj,Pwo,Bwo,Iwo,T1,nce,Nwo,qwo,Uj,jwo,Dwo,Gwo,M1,sce,Owo,Vwo,Jj,Xwo,zwo,Wwo,E1,lce,Qwo,Hwo,Yj,Uwo,Jwo,Ywo,C1,ice,Kwo,Zwo,Kj,e0o,o0o,r0o,w1,dce,t0o,a0o,Zj,n0o,s0o,l0o,A1,cce,i0o,d0o,eD,c0o,f0o,m0o,y1,fce,g0o,h0o,oD,p0o,_0o,u0o,L1,mce,b0o,v0o,rD,F0o,T0o,M0o,x1,gce,E0o,C0o,tD,w0o,A0o,y0o,$1,hce,L0o,x0o,aD,$0o,k0o,S0o,k1,pce,R0o,P0o,nD,B0o,I0o,N0o,S1,_ce,q0o,j0o,sD,D0o,G0o,O0o,R1,uce,V0o,X0o,lD,z0o,W0o,Q0o,P1,H0o,bce,U0o,J0o,vce,Y0o,K0o,B1,Rqe,Pi,I1,Fce,bA,Z0o,Tce,e6o,Pqe,ko,vA,o6o,Bi,r6o,iD,t6o,a6o,dD,n6o,s6o,l6o,FA,i6o,Mce,d6o,c6o,f6o,st,TA,m6o,Ece,g6o,h6o,Ii,p6o,Cce,_6o,u6o,cD,b6o,v6o,F6o,N1,T6o,Ze,MA,M6o,wce,E6o,C6o,ka,w6o,Ace,A6o,y6o,yce,L6o,x6o,Lce,$6o,k6o,S6o,Q,q1,xce,R6o,P6o,fD,B6o,I6o,N6o,j1,$ce,q6o,j6o,mD,D6o,G6o,O6o,D1,kce,V6o,X6o,gD,z6o,W6o,Q6o,G1,Sce,H6o,U6o,hD,J6o,Y6o,K6o,O1,Rce,Z6o,eAo,pD,oAo,rAo,tAo,V1,Pce,aAo,nAo,_D,sAo,lAo,iAo,X1,Bce,dAo,cAo,uD,fAo,mAo,gAo,z1,Ice,hAo,pAo,bD,_Ao,uAo,bAo,W1,Nce,vAo,FAo,vD,TAo,MAo,EAo,Q1,qce,CAo,wAo,FD,AAo,yAo,LAo,H1,jce,xAo,$Ao,TD,kAo,SAo,RAo,U1,Dce,PAo,BAo,MD,IAo,NAo,qAo,J1,Gce,jAo,DAo,ED,GAo,OAo,VAo,Y1,Oce,XAo,zAo,CD,WAo,QAo,HAo,K1,Vce,UAo,JAo,wD,YAo,KAo,ZAo,Z1,Xce,eyo,oyo,AD,ryo,tyo,ayo,eb,zce,nyo,syo,yD,lyo,iyo,dyo,ob,Wce,cyo,fyo,LD,myo,gyo,hyo,rb,Qce,pyo,_yo,xD,uyo,byo,vyo,tb,Hce,Fyo,Tyo,$D,Myo,Eyo,Cyo,ab,Uce,wyo,Ayo,kD,yyo,Lyo,xyo,nb,Jce,$yo,kyo,SD,Syo,Ryo,Pyo,sb,Yce,Byo,Iyo,RD,Nyo,qyo,jyo,lb,Kce,Dyo,Gyo,PD,Oyo,Vyo,Xyo,ib,Zce,zyo,Wyo,BD,Qyo,Hyo,Uyo,db,efe,Jyo,Yyo,ID,Kyo,Zyo,eLo,cb,ofe,oLo,rLo,ND,tLo,aLo,nLo,fb,rfe,sLo,lLo,qD,iLo,dLo,cLo,mb,tfe,fLo,mLo,jD,gLo,hLo,pLo,gb,afe,_Lo,uLo,DD,bLo,vLo,FLo,hb,nfe,TLo,MLo,sfe,ELo,CLo,wLo,pb,lfe,ALo,yLo,GD,LLo,xLo,$Lo,_b,ife,kLo,SLo,OD,RLo,PLo,BLo,ub,dfe,ILo,NLo,VD,qLo,jLo,DLo,bb,cfe,GLo,OLo,XD,VLo,XLo,zLo,vb,WLo,ffe,QLo,HLo,mfe,ULo,JLo,Fb,Bqe,Ni,Tb,gfe,EA,YLo,hfe,KLo,Iqe,So,CA,ZLo,qi,e8o,zD,o8o,r8o,WD,t8o,a8o,n8o,wA,s8o,pfe,l8o,i8o,d8o,lt,AA,c8o,_fe,f8o,m8o,ji,g8o,ufe,h8o,p8o,QD,_8o,u8o,b8o,Mb,v8o,eo,yA,F8o,bfe,T8o,M8o,Sa,E8o,vfe,C8o,w8o,Ffe,A8o,y8o,Tfe,L8o,x8o,$8o,_e,Eb,Mfe,k8o,S8o,HD,R8o,P8o,B8o,Cb,Efe,I8o,N8o,UD,q8o,j8o,D8o,wb,Cfe,G8o,O8o,JD,V8o,X8o,z8o,Ab,wfe,W8o,Q8o,YD,H8o,U8o,J8o,yb,Afe,Y8o,K8o,KD,Z8o,exo,oxo,Lb,yfe,rxo,txo,ZD,axo,nxo,sxo,xb,Lfe,lxo,ixo,eG,dxo,cxo,fxo,$b,xfe,mxo,gxo,oG,hxo,pxo,_xo,kb,$fe,uxo,bxo,rG,vxo,Fxo,Txo,Sb,kfe,Mxo,Exo,tG,Cxo,wxo,Axo,Rb,Sfe,yxo,Lxo,aG,xxo,$xo,kxo,Pb,Rfe,Sxo,Rxo,nG,Pxo,Bxo,Ixo,Bb,Pfe,Nxo,qxo,sG,jxo,Dxo,Gxo,Ib,Bfe,Oxo,Vxo,lG,Xxo,zxo,Wxo,Nb,Ife,Qxo,Hxo,iG,Uxo,Jxo,Yxo,qb,Nfe,Kxo,Zxo,dG,e$o,o$o,r$o,jb,t$o,qfe,a$o,n$o,jfe,s$o,l$o,Db,Nqe,Di,Gb,Dfe,LA,i$o,Gfe,d$o,qqe,Ro,xA,c$o,Gi,f$o,cG,m$o,g$o,fG,h$o,p$o,_$o,$A,u$o,Ofe,b$o,v$o,F$o,it,kA,T$o,Vfe,M$o,E$o,Oi,C$o,Xfe,w$o,A$o,mG,y$o,L$o,x$o,Ob,$$o,oo,SA,k$o,zfe,S$o,R$o,Ra,P$o,Wfe,B$o,I$o,Qfe,N$o,q$o,Hfe,j$o,D$o,G$o,N,Vb,Ufe,O$o,V$o,gG,X$o,z$o,W$o,Xb,Jfe,Q$o,H$o,hG,U$o,J$o,Y$o,zb,Yfe,K$o,Z$o,pG,eko,oko,rko,Wb,Kfe,tko,ako,_G,nko,sko,lko,Qb,Zfe,iko,dko,uG,cko,fko,mko,Hb,eme,gko,hko,bG,pko,_ko,uko,Ub,ome,bko,vko,vG,Fko,Tko,Mko,Jb,rme,Eko,Cko,FG,wko,Ako,yko,Yb,tme,Lko,xko,TG,$ko,kko,Sko,Kb,ame,Rko,Pko,MG,Bko,Iko,Nko,Zb,nme,qko,jko,EG,Dko,Gko,Oko,e2,sme,Vko,Xko,CG,zko,Wko,Qko,o2,lme,Hko,Uko,wG,Jko,Yko,Kko,r2,ime,Zko,eSo,AG,oSo,rSo,tSo,t2,dme,aSo,nSo,yG,sSo,lSo,iSo,a2,cme,dSo,cSo,LG,fSo,mSo,gSo,n2,fme,hSo,pSo,xG,_So,uSo,bSo,s2,mme,vSo,FSo,$G,TSo,MSo,ESo,l2,gme,CSo,wSo,kG,ASo,ySo,LSo,i2,hme,xSo,$So,SG,kSo,SSo,RSo,d2,pme,PSo,BSo,RG,ISo,NSo,qSo,c2,_me,jSo,DSo,PG,GSo,OSo,VSo,f2,ume,XSo,zSo,BG,WSo,QSo,HSo,m2,bme,USo,JSo,IG,YSo,KSo,ZSo,g2,vme,eRo,oRo,NG,rRo,tRo,aRo,h2,Fme,nRo,sRo,qG,lRo,iRo,dRo,p2,Tme,cRo,fRo,jG,mRo,gRo,hRo,_2,Mme,pRo,_Ro,DG,uRo,bRo,vRo,u2,Eme,FRo,TRo,GG,MRo,ERo,CRo,b2,Cme,wRo,ARo,OG,yRo,LRo,xRo,v2,wme,$Ro,kRo,VG,SRo,RRo,PRo,F2,Ame,BRo,IRo,XG,NRo,qRo,jRo,T2,yme,DRo,GRo,zG,ORo,VRo,XRo,M2,Lme,zRo,WRo,WG,QRo,HRo,URo,E2,xme,JRo,YRo,QG,KRo,ZRo,ePo,C2,$me,oPo,rPo,HG,tPo,aPo,nPo,w2,kme,sPo,lPo,UG,iPo,dPo,cPo,A2,Sme,fPo,mPo,JG,gPo,hPo,pPo,y2,Rme,_Po,uPo,YG,bPo,vPo,FPo,L2,Pme,TPo,MPo,KG,EPo,CPo,wPo,x2,Bme,APo,yPo,ZG,LPo,xPo,$Po,$2,Ime,kPo,SPo,eO,RPo,PPo,BPo,k2,Nme,IPo,NPo,oO,qPo,jPo,DPo,S2,qme,GPo,OPo,rO,VPo,XPo,zPo,R2,jme,WPo,QPo,tO,HPo,UPo,JPo,P2,Dme,YPo,KPo,aO,ZPo,eBo,oBo,B2,Gme,rBo,tBo,nO,aBo,nBo,sBo,I2,lBo,Ome,iBo,dBo,Vme,cBo,fBo,N2,jqe,Vi,q2,Xme,RA,mBo,zme,gBo,Dqe,Po,PA,hBo,Xi,pBo,sO,_Bo,uBo,lO,bBo,vBo,FBo,BA,TBo,Wme,MBo,EBo,CBo,dt,IA,wBo,Qme,ABo,yBo,zi,LBo,Hme,xBo,$Bo,iO,kBo,SBo,RBo,j2,PBo,ro,NA,BBo,Ume,IBo,NBo,Pa,qBo,Jme,jBo,DBo,Yme,GBo,OBo,Kme,VBo,XBo,zBo,K,D2,Zme,WBo,QBo,dO,HBo,UBo,JBo,G2,ege,YBo,KBo,cO,ZBo,eIo,oIo,O2,oge,rIo,tIo,fO,aIo,nIo,sIo,V2,rge,lIo,iIo,mO,dIo,cIo,fIo,X2,tge,mIo,gIo,gO,hIo,pIo,_Io,z2,age,uIo,bIo,hO,vIo,FIo,TIo,W2,nge,MIo,EIo,pO,CIo,wIo,AIo,Q2,sge,yIo,LIo,_O,xIo,$Io,kIo,H2,lge,SIo,RIo,uO,PIo,BIo,IIo,U2,ige,NIo,qIo,bO,jIo,DIo,GIo,J2,dge,OIo,VIo,vO,XIo,zIo,WIo,Y2,cge,QIo,HIo,FO,UIo,JIo,YIo,K2,fge,KIo,ZIo,TO,eNo,oNo,rNo,Z2,mge,tNo,aNo,MO,nNo,sNo,lNo,e4,gge,iNo,dNo,EO,cNo,fNo,mNo,o4,hge,gNo,hNo,CO,pNo,_No,uNo,r4,pge,bNo,vNo,wO,FNo,TNo,MNo,t4,_ge,ENo,CNo,AO,wNo,ANo,yNo,a4,uge,LNo,xNo,yO,$No,kNo,SNo,n4,bge,RNo,PNo,LO,BNo,INo,NNo,s4,vge,qNo,jNo,xO,DNo,GNo,ONo,l4,Fge,VNo,XNo,$O,zNo,WNo,QNo,i4,Tge,HNo,UNo,kO,JNo,YNo,KNo,d4,Mge,ZNo,eqo,SO,oqo,rqo,tqo,c4,Ege,aqo,nqo,RO,sqo,lqo,iqo,f4,Cge,dqo,cqo,PO,fqo,mqo,gqo,m4,wge,hqo,pqo,BO,_qo,uqo,bqo,g4,Age,vqo,Fqo,IO,Tqo,Mqo,Eqo,h4,yge,Cqo,wqo,NO,Aqo,yqo,Lqo,p4,xqo,Lge,$qo,kqo,xge,Sqo,Rqo,_4,Gqe,Wi,u4,$ge,qA,Pqo,kge,Bqo,Oqe,Bo,jA,Iqo,Qi,Nqo,qO,qqo,jqo,jO,Dqo,Gqo,Oqo,DA,Vqo,Sge,Xqo,zqo,Wqo,ct,GA,Qqo,Rge,Hqo,Uqo,Hi,Jqo,Pge,Yqo,Kqo,DO,Zqo,ejo,ojo,b4,rjo,to,OA,tjo,Bge,ajo,njo,Ba,sjo,Ige,ljo,ijo,Nge,djo,cjo,qge,fjo,mjo,gjo,Yr,v4,jge,hjo,pjo,GO,_jo,ujo,bjo,F4,Dge,vjo,Fjo,OO,Tjo,Mjo,Ejo,T4,Gge,Cjo,wjo,VO,Ajo,yjo,Ljo,M4,Oge,xjo,$jo,XO,kjo,Sjo,Rjo,E4,Vge,Pjo,Bjo,zO,Ijo,Njo,qjo,C4,jjo,Xge,Djo,Gjo,zge,Ojo,Vjo,w4,Vqe,Ui,A4,Wge,VA,Xjo,Qge,zjo,Xqe,Io,XA,Wjo,Ji,Qjo,WO,Hjo,Ujo,QO,Jjo,Yjo,Kjo,zA,Zjo,Hge,eDo,oDo,rDo,ft,WA,tDo,Uge,aDo,nDo,Yi,sDo,Jge,lDo,iDo,HO,dDo,cDo,fDo,y4,mDo,ao,QA,gDo,Yge,hDo,pDo,Ia,_Do,Kge,uDo,bDo,Zge,vDo,FDo,ehe,TDo,MDo,EDo,H,L4,ohe,CDo,wDo,UO,ADo,yDo,LDo,x4,rhe,xDo,$Do,JO,kDo,SDo,RDo,$4,the,PDo,BDo,YO,IDo,NDo,qDo,k4,ahe,jDo,DDo,KO,GDo,ODo,VDo,S4,nhe,XDo,zDo,ZO,WDo,QDo,HDo,R4,she,UDo,JDo,eV,YDo,KDo,ZDo,P4,lhe,eGo,oGo,oV,rGo,tGo,aGo,B4,ihe,nGo,sGo,rV,lGo,iGo,dGo,I4,dhe,cGo,fGo,tV,mGo,gGo,hGo,N4,che,pGo,_Go,aV,uGo,bGo,vGo,q4,fhe,FGo,TGo,nV,MGo,EGo,CGo,j4,mhe,wGo,AGo,sV,yGo,LGo,xGo,D4,ghe,$Go,kGo,lV,SGo,RGo,PGo,G4,hhe,BGo,IGo,iV,NGo,qGo,jGo,O4,phe,DGo,GGo,dV,OGo,VGo,XGo,V4,_he,zGo,WGo,cV,QGo,HGo,UGo,X4,uhe,JGo,YGo,fV,KGo,ZGo,eOo,z4,bhe,oOo,rOo,mV,tOo,aOo,nOo,W4,vhe,sOo,lOo,gV,iOo,dOo,cOo,Q4,Fhe,fOo,mOo,hV,gOo,hOo,pOo,H4,The,_Oo,uOo,pV,bOo,vOo,FOo,U4,Mhe,TOo,MOo,_V,EOo,COo,wOo,J4,Ehe,AOo,yOo,uV,LOo,xOo,$Oo,Y4,Che,kOo,SOo,bV,ROo,POo,BOo,K4,whe,IOo,NOo,vV,qOo,jOo,DOo,Z4,Ahe,GOo,OOo,FV,VOo,XOo,zOo,e5,yhe,WOo,QOo,TV,HOo,UOo,JOo,o5,Lhe,YOo,KOo,MV,ZOo,eVo,oVo,r5,xhe,rVo,tVo,EV,aVo,nVo,sVo,t5,$he,lVo,iVo,CV,dVo,cVo,fVo,a5,khe,mVo,gVo,wV,hVo,pVo,_Vo,n5,She,uVo,bVo,AV,vVo,FVo,TVo,s5,Rhe,MVo,EVo,yV,CVo,wVo,AVo,l5,Phe,yVo,LVo,LV,xVo,$Vo,kVo,i5,SVo,Bhe,RVo,PVo,Ihe,BVo,IVo,d5,zqe,Ki,c5,Nhe,HA,NVo,qhe,qVo,Wqe,No,UA,jVo,Zi,DVo,xV,GVo,OVo,$V,VVo,XVo,zVo,JA,WVo,jhe,QVo,HVo,UVo,mt,YA,JVo,Dhe,YVo,KVo,ed,ZVo,Ghe,eXo,oXo,kV,rXo,tXo,aXo,f5,nXo,no,KA,sXo,Ohe,lXo,iXo,Na,dXo,Vhe,cXo,fXo,Xhe,mXo,gXo,zhe,hXo,pXo,_Xo,V,m5,Whe,uXo,bXo,SV,vXo,FXo,TXo,g5,Qhe,MXo,EXo,RV,CXo,wXo,AXo,h5,Hhe,yXo,LXo,PV,xXo,$Xo,kXo,p5,Uhe,SXo,RXo,BV,PXo,BXo,IXo,_5,Jhe,NXo,qXo,IV,jXo,DXo,GXo,u5,Yhe,OXo,VXo,NV,XXo,zXo,WXo,b5,Khe,QXo,HXo,qV,UXo,JXo,YXo,v5,Zhe,KXo,ZXo,jV,ezo,ozo,rzo,F5,epe,tzo,azo,DV,nzo,szo,lzo,T5,ope,izo,dzo,GV,czo,fzo,mzo,M5,rpe,gzo,hzo,OV,pzo,_zo,uzo,E5,tpe,bzo,vzo,VV,Fzo,Tzo,Mzo,C5,ape,Ezo,Czo,XV,wzo,Azo,yzo,w5,npe,Lzo,xzo,zV,$zo,kzo,Szo,A5,spe,Rzo,Pzo,WV,Bzo,Izo,Nzo,y5,lpe,qzo,jzo,QV,Dzo,Gzo,Ozo,L5,ipe,Vzo,Xzo,HV,zzo,Wzo,Qzo,x5,dpe,Hzo,Uzo,UV,Jzo,Yzo,Kzo,$5,cpe,Zzo,eWo,JV,oWo,rWo,tWo,k5,fpe,aWo,nWo,YV,sWo,lWo,iWo,S5,mpe,dWo,cWo,KV,fWo,mWo,gWo,R5,gpe,hWo,pWo,ZV,_Wo,uWo,bWo,P5,hpe,vWo,FWo,eX,TWo,MWo,EWo,B5,ppe,CWo,wWo,oX,AWo,yWo,LWo,I5,_pe,xWo,$Wo,rX,kWo,SWo,RWo,N5,upe,PWo,BWo,tX,IWo,NWo,qWo,q5,bpe,jWo,DWo,aX,GWo,OWo,VWo,j5,vpe,XWo,zWo,nX,WWo,QWo,HWo,D5,Fpe,UWo,JWo,sX,YWo,KWo,ZWo,G5,Tpe,eQo,oQo,lX,rQo,tQo,aQo,O5,Mpe,nQo,sQo,iX,lQo,iQo,dQo,V5,Epe,cQo,fQo,dX,mQo,gQo,hQo,X5,Cpe,pQo,_Qo,cX,uQo,bQo,vQo,z5,wpe,FQo,TQo,fX,MQo,EQo,CQo,W5,Ape,wQo,AQo,mX,yQo,LQo,xQo,Q5,ype,$Qo,kQo,gX,SQo,RQo,PQo,H5,Lpe,BQo,IQo,hX,NQo,qQo,jQo,U5,xpe,DQo,GQo,pX,OQo,VQo,XQo,J5,$pe,zQo,WQo,_X,QQo,HQo,UQo,Y5,kpe,JQo,YQo,uX,KQo,ZQo,eHo,K5,oHo,Spe,rHo,tHo,Rpe,aHo,nHo,Z5,Qqe,od,ev,Ppe,ZA,sHo,Bpe,lHo,Hqe,qo,ey,iHo,rd,dHo,bX,cHo,fHo,vX,mHo,gHo,hHo,oy,pHo,Ipe,_Ho,uHo,bHo,gt,ry,vHo,Npe,FHo,THo,td,MHo,qpe,EHo,CHo,FX,wHo,AHo,yHo,ov,LHo,so,ty,xHo,jpe,$Ho,kHo,qa,SHo,Dpe,RHo,PHo,Gpe,BHo,IHo,Ope,NHo,qHo,jHo,Vpe,rv,Xpe,DHo,GHo,TX,OHo,VHo,XHo,tv,zHo,zpe,WHo,QHo,Wpe,HHo,UHo,av,Uqe,ad,nv,Qpe,ay,JHo,Hpe,YHo,Jqe,jo,ny,KHo,nd,ZHo,MX,eUo,oUo,EX,rUo,tUo,aUo,sy,nUo,Upe,sUo,lUo,iUo,ht,ly,dUo,Jpe,cUo,fUo,sd,mUo,Ype,gUo,hUo,CX,pUo,_Uo,uUo,sv,bUo,lo,iy,vUo,Kpe,FUo,TUo,ja,MUo,Zpe,EUo,CUo,e_e,wUo,AUo,o_e,yUo,LUo,xUo,Fe,lv,r_e,$Uo,kUo,wX,SUo,RUo,PUo,iv,t_e,BUo,IUo,AX,NUo,qUo,jUo,dv,a_e,DUo,GUo,yX,OUo,VUo,XUo,cv,n_e,zUo,WUo,LX,QUo,HUo,UUo,Bs,s_e,JUo,YUo,xX,KUo,ZUo,$X,eJo,oJo,rJo,fv,l_e,tJo,aJo,kX,nJo,sJo,lJo,pt,i_e,iJo,dJo,SX,cJo,fJo,RX,mJo,gJo,PX,hJo,pJo,_Jo,mv,d_e,uJo,bJo,BX,vJo,FJo,TJo,gv,c_e,MJo,EJo,IX,CJo,wJo,AJo,hv,f_e,yJo,LJo,NX,xJo,$Jo,kJo,pv,m_e,SJo,RJo,qX,PJo,BJo,IJo,_v,g_e,NJo,qJo,jX,jJo,DJo,GJo,uv,h_e,OJo,VJo,DX,XJo,zJo,WJo,bv,p_e,QJo,HJo,GX,UJo,JJo,YJo,vv,KJo,__e,ZJo,eYo,u_e,oYo,rYo,Fv,Yqe,ld,Tv,b_e,dy,tYo,v_e,aYo,Kqe,Do,cy,nYo,id,sYo,OX,lYo,iYo,VX,dYo,cYo,fYo,fy,mYo,F_e,gYo,hYo,pYo,_t,my,_Yo,T_e,uYo,bYo,dd,vYo,M_e,FYo,TYo,XX,MYo,EYo,CYo,Mv,wYo,io,gy,AYo,E_e,yYo,LYo,Da,xYo,C_e,$Yo,kYo,w_e,SYo,RYo,A_e,PYo,BYo,IYo,y_e,Ev,L_e,NYo,qYo,zX,jYo,DYo,GYo,Cv,OYo,x_e,VYo,XYo,$_e,zYo,WYo,wv,Zqe,cd,Av,k_e,hy,QYo,S_e,HYo,eje,Go,py,UYo,fd,JYo,WX,YYo,KYo,QX,ZYo,eKo,oKo,_y,rKo,R_e,tKo,aKo,nKo,ut,uy,sKo,P_e,lKo,iKo,md,dKo,B_e,cKo,fKo,HX,mKo,gKo,hKo,yv,pKo,co,by,_Ko,I_e,uKo,bKo,Ga,vKo,N_e,FKo,TKo,q_e,MKo,EKo,j_e,CKo,wKo,AKo,Se,Lv,D_e,yKo,LKo,UX,xKo,$Ko,kKo,xv,G_e,SKo,RKo,JX,PKo,BKo,IKo,$v,O_e,NKo,qKo,YX,jKo,DKo,GKo,kv,V_e,OKo,VKo,KX,XKo,zKo,WKo,Sv,X_e,QKo,HKo,ZX,UKo,JKo,YKo,Rv,z_e,KKo,ZKo,ez,eZo,oZo,rZo,Pv,W_e,tZo,aZo,oz,nZo,sZo,lZo,Bv,Q_e,iZo,dZo,rz,cZo,fZo,mZo,Iv,H_e,gZo,hZo,tz,pZo,_Zo,uZo,Nv,bZo,U_e,vZo,FZo,J_e,TZo,MZo,qv,oje,gd,jv,Y_e,vy,EZo,K_e,CZo,rje,Oo,Fy,wZo,hd,AZo,az,yZo,LZo,nz,xZo,$Zo,kZo,Ty,SZo,Z_e,RZo,PZo,BZo,bt,My,IZo,eue,NZo,qZo,pd,jZo,oue,DZo,GZo,sz,OZo,VZo,XZo,Dv,zZo,fo,Ey,WZo,rue,QZo,HZo,Oa,UZo,tue,JZo,YZo,aue,KZo,ZZo,nue,eer,oer,rer,Kr,Gv,sue,ter,aer,lz,ner,ser,ler,Ov,lue,ier,der,iz,cer,fer,mer,Vv,iue,ger,her,dz,per,_er,uer,Xv,due,ber,ver,cz,Fer,Ter,Mer,zv,cue,Eer,Cer,fz,wer,Aer,yer,Wv,Ler,fue,xer,$er,mue,ker,Ser,Qv,tje,_d,Hv,gue,Cy,Rer,hue,Per,aje,Vo,wy,Ber,ud,Ier,mz,Ner,qer,gz,jer,Der,Ger,Ay,Oer,pue,Ver,Xer,zer,vt,yy,Wer,_ue,Qer,Her,bd,Uer,uue,Jer,Yer,hz,Ker,Zer,eor,Uv,oor,mo,Ly,ror,bue,tor,aor,Va,nor,vue,sor,lor,Fue,ior,dor,Tue,cor,mor,gor,Re,Jv,Mue,hor,por,pz,_or,uor,bor,Yv,Eue,vor,For,_z,Tor,Mor,Eor,Kv,Cue,Cor,wor,uz,Aor,yor,Lor,Zv,wue,xor,$or,bz,kor,Sor,Ror,eF,Aue,Por,Bor,vz,Ior,Nor,qor,oF,yue,jor,Dor,Fz,Gor,Oor,Vor,rF,Lue,Xor,zor,Tz,Wor,Qor,Hor,tF,xue,Uor,Jor,Mz,Yor,Kor,Zor,aF,$ue,err,orr,Ez,rrr,trr,arr,nF,nrr,kue,srr,lrr,Sue,irr,drr,sF,nje,vd,lF,Rue,xy,crr,Pue,frr,sje,Xo,$y,mrr,Fd,grr,Cz,hrr,prr,wz,_rr,urr,brr,ky,vrr,Bue,Frr,Trr,Mrr,Ft,Sy,Err,Iue,Crr,wrr,Td,Arr,Nue,yrr,Lrr,Az,xrr,$rr,krr,iF,Srr,go,Ry,Rrr,que,Prr,Brr,Xa,Irr,jue,Nrr,qrr,Due,jrr,Drr,Gue,Grr,Orr,Vrr,Py,dF,Oue,Xrr,zrr,yz,Wrr,Qrr,Hrr,cF,Vue,Urr,Jrr,Lz,Yrr,Krr,Zrr,fF,etr,Xue,otr,rtr,zue,ttr,atr,mF,lje,Md,gF,Wue,By,ntr,Que,str,ije,zo,Iy,ltr,Ed,itr,xz,dtr,ctr,$z,ftr,mtr,gtr,Ny,htr,Hue,ptr,_tr,utr,Tt,qy,btr,Uue,vtr,Ftr,Cd,Ttr,Jue,Mtr,Etr,kz,Ctr,wtr,Atr,hF,ytr,ho,jy,Ltr,Yue,xtr,$tr,za,ktr,Kue,Str,Rtr,Zue,Ptr,Btr,e1e,Itr,Ntr,qtr,Zr,pF,o1e,jtr,Dtr,Sz,Gtr,Otr,Vtr,_F,r1e,Xtr,ztr,Rz,Wtr,Qtr,Htr,uF,t1e,Utr,Jtr,Pz,Ytr,Ktr,Ztr,bF,a1e,ear,oar,Bz,rar,tar,aar,vF,n1e,nar,sar,Iz,lar,iar,dar,FF,car,s1e,far,mar,l1e,gar,har,TF,dje,wd,MF,i1e,Dy,par,d1e,_ar,cje,Wo,Gy,uar,Ad,bar,Nz,Far,Tar,qz,Mar,Ear,Car,Oy,war,c1e,Aar,yar,Lar,Mt,Vy,xar,f1e,$ar,kar,yd,Sar,m1e,Rar,Par,jz,Bar,Iar,Nar,EF,qar,po,Xy,jar,g1e,Dar,Gar,Wa,Oar,h1e,Var,Xar,p1e,zar,War,_1e,Qar,Har,Uar,Ld,CF,u1e,Jar,Yar,Dz,Kar,Zar,enr,wF,b1e,onr,rnr,Gz,tnr,anr,nnr,AF,v1e,snr,lnr,Oz,inr,dnr,cnr,yF,fnr,F1e,mnr,gnr,T1e,hnr,pnr,LF,fje,xd,xF,M1e,zy,_nr,E1e,unr,mje,Qo,Wy,bnr,$d,vnr,Vz,Fnr,Tnr,Xz,Mnr,Enr,Cnr,Qy,wnr,C1e,Anr,ynr,Lnr,Et,Hy,xnr,w1e,$nr,knr,kd,Snr,A1e,Rnr,Pnr,zz,Bnr,Inr,Nnr,$F,qnr,_o,Uy,jnr,y1e,Dnr,Gnr,Qa,Onr,L1e,Vnr,Xnr,x1e,znr,Wnr,$1e,Qnr,Hnr,Unr,Jy,kF,k1e,Jnr,Ynr,Wz,Knr,Znr,esr,SF,S1e,osr,rsr,Qz,tsr,asr,nsr,RF,ssr,R1e,lsr,isr,P1e,dsr,csr,PF,gje,Sd,BF,B1e,Yy,fsr,I1e,msr,hje,Ho,Ky,gsr,Rd,hsr,Hz,psr,_sr,Uz,usr,bsr,vsr,Zy,Fsr,N1e,Tsr,Msr,Esr,Ct,eL,Csr,q1e,wsr,Asr,Pd,ysr,j1e,Lsr,xsr,Jz,$sr,ksr,Ssr,IF,Rsr,uo,oL,Psr,D1e,Bsr,Isr,Ha,Nsr,G1e,qsr,jsr,O1e,Dsr,Gsr,V1e,Osr,Vsr,Xsr,X1e,NF,z1e,zsr,Wsr,Yz,Qsr,Hsr,Usr,qF,Jsr,W1e,Ysr,Ksr,Q1e,Zsr,elr,jF,pje,Bd,DF,H1e,rL,olr,U1e,rlr,_je,Uo,tL,tlr,Id,alr,Kz,nlr,slr,Zz,llr,ilr,dlr,aL,clr,J1e,flr,mlr,glr,wt,nL,hlr,Y1e,plr,_lr,Nd,ulr,K1e,blr,vlr,eW,Flr,Tlr,Mlr,GF,Elr,bo,sL,Clr,Z1e,wlr,Alr,Ua,ylr,ebe,Llr,xlr,obe,$lr,klr,rbe,Slr,Rlr,Plr,Ja,OF,tbe,Blr,Ilr,oW,Nlr,qlr,jlr,VF,abe,Dlr,Glr,rW,Olr,Vlr,Xlr,XF,nbe,zlr,Wlr,tW,Qlr,Hlr,Ulr,zF,sbe,Jlr,Ylr,aW,Klr,Zlr,eir,WF,oir,lbe,rir,tir,ibe,air,nir,QF,uje,qd,HF,dbe,lL,sir,cbe,lir,bje,Jo,iL,iir,jd,dir,nW,cir,fir,sW,mir,gir,hir,dL,pir,fbe,_ir,uir,bir,At,cL,vir,mbe,Fir,Tir,Dd,Mir,gbe,Eir,Cir,lW,wir,Air,yir,UF,Lir,vo,fL,xir,hbe,$ir,kir,Ya,Sir,pbe,Rir,Pir,_be,Bir,Iir,ube,Nir,qir,jir,bbe,JF,vbe,Dir,Gir,iW,Oir,Vir,Xir,YF,zir,Fbe,Wir,Qir,Tbe,Hir,Uir,KF,vje,Gd,ZF,Mbe,mL,Jir,Ebe,Yir,Fje,Yo,gL,Kir,Od,Zir,dW,edr,odr,cW,rdr,tdr,adr,hL,ndr,Cbe,sdr,ldr,idr,yt,pL,ddr,wbe,cdr,fdr,Vd,mdr,Abe,gdr,hdr,fW,pdr,_dr,udr,eT,bdr,wr,_L,vdr,ybe,Fdr,Tdr,Ka,Mdr,Lbe,Edr,Cdr,xbe,wdr,Adr,$be,ydr,Ldr,xdr,q,oT,kbe,$dr,kdr,mW,Sdr,Rdr,Pdr,rT,Sbe,Bdr,Idr,gW,Ndr,qdr,jdr,tT,Rbe,Ddr,Gdr,hW,Odr,Vdr,Xdr,aT,Pbe,zdr,Wdr,pW,Qdr,Hdr,Udr,nT,Bbe,Jdr,Ydr,_W,Kdr,Zdr,ecr,sT,Ibe,ocr,rcr,uW,tcr,acr,ncr,lT,Nbe,scr,lcr,bW,icr,dcr,ccr,iT,qbe,fcr,mcr,vW,gcr,hcr,pcr,dT,jbe,_cr,ucr,FW,bcr,vcr,Fcr,cT,Dbe,Tcr,Mcr,TW,Ecr,Ccr,wcr,fT,Gbe,Acr,ycr,MW,Lcr,xcr,$cr,mT,Obe,kcr,Scr,EW,Rcr,Pcr,Bcr,gT,Vbe,Icr,Ncr,CW,qcr,jcr,Dcr,hT,Xbe,Gcr,Ocr,wW,Vcr,Xcr,zcr,pT,zbe,Wcr,Qcr,AW,Hcr,Ucr,Jcr,_T,Wbe,Ycr,Kcr,yW,Zcr,efr,ofr,uT,Qbe,rfr,tfr,LW,afr,nfr,sfr,Is,Hbe,lfr,ifr,xW,dfr,cfr,$W,ffr,mfr,gfr,bT,Ube,hfr,pfr,kW,_fr,ufr,bfr,vT,Jbe,vfr,Ffr,SW,Tfr,Mfr,Efr,FT,Ybe,Cfr,wfr,RW,Afr,yfr,Lfr,TT,Kbe,xfr,$fr,PW,kfr,Sfr,Rfr,MT,Zbe,Pfr,Bfr,BW,Ifr,Nfr,qfr,ET,e2e,jfr,Dfr,IW,Gfr,Ofr,Vfr,CT,o2e,Xfr,zfr,NW,Wfr,Qfr,Hfr,wT,r2e,Ufr,Jfr,qW,Yfr,Kfr,Zfr,AT,t2e,emr,omr,jW,rmr,tmr,amr,yT,a2e,nmr,smr,DW,lmr,imr,dmr,LT,n2e,cmr,fmr,GW,mmr,gmr,hmr,xT,s2e,pmr,_mr,OW,umr,bmr,vmr,$T,l2e,Fmr,Tmr,VW,Mmr,Emr,Cmr,kT,i2e,wmr,Amr,XW,ymr,Lmr,xmr,ST,d2e,$mr,kmr,zW,Smr,Rmr,Pmr,RT,c2e,Bmr,Imr,WW,Nmr,qmr,jmr,PT,f2e,Dmr,Gmr,QW,Omr,Vmr,Xmr,BT,m2e,zmr,Wmr,HW,Qmr,Hmr,Umr,IT,g2e,Jmr,Ymr,UW,Kmr,Zmr,egr,NT,h2e,ogr,rgr,JW,tgr,agr,ngr,qT,p2e,sgr,lgr,YW,igr,dgr,cgr,jT,_2e,fgr,mgr,KW,ggr,hgr,pgr,DT,u2e,_gr,ugr,ZW,bgr,vgr,Fgr,GT,b2e,Tgr,Mgr,eQ,Egr,Cgr,wgr,OT,v2e,Agr,ygr,oQ,Lgr,xgr,$gr,VT,F2e,kgr,Sgr,rQ,Rgr,Pgr,Bgr,XT,T2e,Igr,Ngr,tQ,qgr,jgr,Dgr,zT,M2e,Ggr,Ogr,aQ,Vgr,Xgr,zgr,WT,E2e,Wgr,Qgr,nQ,Hgr,Ugr,Jgr,QT,Tje,Xd,HT,C2e,uL,Ygr,w2e,Kgr,Mje,Ko,bL,Zgr,zd,ehr,sQ,ohr,rhr,lQ,thr,ahr,nhr,vL,shr,A2e,lhr,ihr,dhr,Lt,FL,chr,y2e,fhr,mhr,Wd,ghr,L2e,hhr,phr,iQ,_hr,uhr,bhr,UT,vhr,Ar,TL,Fhr,x2e,Thr,Mhr,Za,Ehr,$2e,Chr,whr,k2e,Ahr,yhr,S2e,Lhr,xhr,$hr,se,JT,R2e,khr,Shr,dQ,Rhr,Phr,Bhr,YT,P2e,Ihr,Nhr,cQ,qhr,jhr,Dhr,KT,B2e,Ghr,Ohr,fQ,Vhr,Xhr,zhr,ZT,I2e,Whr,Qhr,mQ,Hhr,Uhr,Jhr,e7,N2e,Yhr,Khr,gQ,Zhr,epr,opr,o7,q2e,rpr,tpr,hQ,apr,npr,spr,r7,j2e,lpr,ipr,pQ,dpr,cpr,fpr,t7,D2e,mpr,gpr,_Q,hpr,ppr,_pr,a7,G2e,upr,bpr,uQ,vpr,Fpr,Tpr,n7,O2e,Mpr,Epr,bQ,Cpr,wpr,Apr,s7,V2e,ypr,Lpr,vQ,xpr,$pr,kpr,l7,X2e,Spr,Rpr,FQ,Ppr,Bpr,Ipr,i7,z2e,Npr,qpr,TQ,jpr,Dpr,Gpr,d7,W2e,Opr,Vpr,MQ,Xpr,zpr,Wpr,c7,Q2e,Qpr,Hpr,EQ,Upr,Jpr,Ypr,f7,H2e,Kpr,Zpr,CQ,e_r,o_r,r_r,m7,U2e,t_r,a_r,wQ,n_r,s_r,l_r,g7,J2e,i_r,d_r,AQ,c_r,f_r,m_r,h7,Y2e,g_r,h_r,yQ,p_r,__r,u_r,p7,K2e,b_r,v_r,LQ,F_r,T_r,M_r,_7,Z2e,E_r,C_r,xQ,w_r,A_r,y_r,u7,e4e,L_r,x_r,$Q,$_r,k_r,S_r,b7,o4e,R_r,P_r,kQ,B_r,I_r,N_r,v7,Eje,Qd,F7,r4e,ML,q_r,t4e,j_r,Cje,Zo,EL,D_r,Hd,G_r,SQ,O_r,V_r,RQ,X_r,z_r,W_r,CL,Q_r,a4e,H_r,U_r,J_r,xt,wL,Y_r,n4e,K_r,Z_r,Ud,eur,s4e,our,rur,PQ,tur,aur,nur,T7,sur,yr,AL,lur,l4e,iur,dur,en,cur,i4e,fur,mur,d4e,gur,hur,c4e,pur,_ur,uur,Te,M7,f4e,bur,vur,BQ,Fur,Tur,Mur,E7,m4e,Eur,Cur,IQ,wur,Aur,yur,C7,g4e,Lur,xur,NQ,$ur,kur,Sur,w7,h4e,Rur,Pur,qQ,Bur,Iur,Nur,A7,p4e,qur,jur,jQ,Dur,Gur,Our,y7,_4e,Vur,Xur,DQ,zur,Wur,Qur,L7,u4e,Hur,Uur,GQ,Jur,Yur,Kur,x7,b4e,Zur,e1r,OQ,o1r,r1r,t1r,$7,v4e,a1r,n1r,VQ,s1r,l1r,i1r,k7,F4e,d1r,c1r,XQ,f1r,m1r,g1r,S7,T4e,h1r,p1r,zQ,_1r,u1r,b1r,R7,M4e,v1r,F1r,WQ,T1r,M1r,E1r,P7,E4e,C1r,w1r,QQ,A1r,y1r,L1r,B7,wje,Jd,I7,C4e,yL,x1r,w4e,$1r,Aje,er,LL,k1r,Yd,S1r,HQ,R1r,P1r,UQ,B1r,I1r,N1r,xL,q1r,A4e,j1r,D1r,G1r,$t,$L,O1r,y4e,V1r,X1r,Kd,z1r,L4e,W1r,Q1r,JQ,H1r,U1r,J1r,N7,Y1r,Lr,kL,K1r,x4e,Z1r,ebr,on,obr,$4e,rbr,tbr,k4e,abr,nbr,S4e,sbr,lbr,ibr,rn,q7,R4e,dbr,cbr,YQ,fbr,mbr,gbr,j7,P4e,hbr,pbr,KQ,_br,ubr,bbr,D7,B4e,vbr,Fbr,ZQ,Tbr,Mbr,Ebr,G7,I4e,Cbr,wbr,eH,Abr,ybr,Lbr,O7,yje,Zd,V7,N4e,SL,xbr,q4e,$br,Lje,or,RL,kbr,ec,Sbr,oH,Rbr,Pbr,rH,Bbr,Ibr,Nbr,PL,qbr,j4e,jbr,Dbr,Gbr,kt,BL,Obr,D4e,Vbr,Xbr,oc,zbr,G4e,Wbr,Qbr,tH,Hbr,Ubr,Jbr,X7,Ybr,xr,IL,Kbr,O4e,Zbr,e2r,tn,o2r,V4e,r2r,t2r,X4e,a2r,n2r,z4e,s2r,l2r,i2r,ie,z7,W4e,d2r,c2r,aH,f2r,m2r,g2r,W7,Q4e,h2r,p2r,nH,_2r,u2r,b2r,Q7,H4e,v2r,F2r,sH,T2r,M2r,E2r,H7,U4e,C2r,w2r,lH,A2r,y2r,L2r,U7,J4e,x2r,$2r,iH,k2r,S2r,R2r,J7,Y4e,P2r,B2r,dH,I2r,N2r,q2r,Y7,K4e,j2r,D2r,cH,G2r,O2r,V2r,K7,Z4e,X2r,z2r,fH,W2r,Q2r,H2r,Z7,e5e,U2r,J2r,mH,Y2r,K2r,Z2r,e9,o5e,e4r,o4r,gH,r4r,t4r,a4r,o9,r5e,n4r,s4r,hH,l4r,i4r,d4r,r9,t5e,c4r,f4r,pH,m4r,g4r,h4r,t9,a5e,p4r,_4r,_H,u4r,b4r,v4r,a9,n5e,F4r,T4r,uH,M4r,E4r,C4r,n9,s5e,w4r,A4r,bH,y4r,L4r,x4r,s9,l5e,$4r,k4r,vH,S4r,R4r,P4r,l9,i5e,B4r,I4r,FH,N4r,q4r,j4r,i9,d5e,D4r,G4r,TH,O4r,V4r,X4r,d9,c5e,z4r,W4r,MH,Q4r,H4r,U4r,c9,f5e,J4r,Y4r,EH,K4r,Z4r,e5r,f9,xje,rc,m9,m5e,NL,o5r,g5e,r5r,$je,rr,qL,t5r,tc,a5r,CH,n5r,s5r,wH,l5r,i5r,d5r,jL,c5r,h5e,f5r,m5r,g5r,St,DL,h5r,p5e,p5r,_5r,ac,u5r,_5e,b5r,v5r,AH,F5r,T5r,M5r,g9,E5r,$r,GL,C5r,u5e,w5r,A5r,an,y5r,b5e,L5r,x5r,v5e,$5r,k5r,F5e,S5r,R5r,P5r,ye,h9,T5e,B5r,I5r,yH,N5r,q5r,j5r,p9,M5e,D5r,G5r,LH,O5r,V5r,X5r,_9,E5e,z5r,W5r,xH,Q5r,H5r,U5r,u9,C5e,J5r,Y5r,$H,K5r,Z5r,evr,b9,w5e,ovr,rvr,kH,tvr,avr,nvr,v9,A5e,svr,lvr,SH,ivr,dvr,cvr,F9,y5e,fvr,mvr,RH,gvr,hvr,pvr,T9,L5e,_vr,uvr,PH,bvr,vvr,Fvr,M9,x5e,Tvr,Mvr,BH,Evr,Cvr,wvr,E9,$5e,Avr,yvr,IH,Lvr,xvr,$vr,C9,kje,nc,w9,k5e,OL,kvr,S5e,Svr,Sje,tr,VL,Rvr,sc,Pvr,NH,Bvr,Ivr,qH,Nvr,qvr,jvr,XL,Dvr,R5e,Gvr,Ovr,Vvr,Rt,zL,Xvr,P5e,zvr,Wvr,lc,Qvr,B5e,Hvr,Uvr,jH,Jvr,Yvr,Kvr,A9,Zvr,kr,WL,eFr,I5e,oFr,rFr,nn,tFr,N5e,aFr,nFr,q5e,sFr,lFr,j5e,iFr,dFr,cFr,oe,y9,D5e,fFr,mFr,DH,gFr,hFr,pFr,L9,G5e,_Fr,uFr,GH,bFr,vFr,FFr,x9,O5e,TFr,MFr,OH,EFr,CFr,wFr,$9,V5e,AFr,yFr,VH,LFr,xFr,$Fr,k9,X5e,kFr,SFr,XH,RFr,PFr,BFr,S9,z5e,IFr,NFr,zH,qFr,jFr,DFr,R9,W5e,GFr,OFr,WH,VFr,XFr,zFr,P9,Q5e,WFr,QFr,QH,HFr,UFr,JFr,B9,H5e,YFr,KFr,HH,ZFr,eTr,oTr,I9,U5e,rTr,tTr,UH,aTr,nTr,sTr,N9,J5e,lTr,iTr,JH,dTr,cTr,fTr,q9,Y5e,mTr,gTr,YH,hTr,pTr,_Tr,j9,K5e,uTr,bTr,KH,vTr,FTr,TTr,D9,Z5e,MTr,ETr,ZH,CTr,wTr,ATr,G9,eve,yTr,LTr,eU,xTr,$Tr,kTr,O9,ove,STr,RTr,oU,PTr,BTr,ITr,V9,rve,NTr,qTr,rU,jTr,DTr,GTr,X9,tve,OTr,VTr,tU,XTr,zTr,WTr,z9,ave,QTr,HTr,aU,UTr,JTr,YTr,W9,nve,KTr,ZTr,nU,e7r,o7r,r7r,Q9,sve,t7r,a7r,sU,n7r,s7r,l7r,H9,lve,i7r,d7r,lU,c7r,f7r,m7r,U9,ive,g7r,h7r,iU,p7r,_7r,u7r,J9,dve,b7r,v7r,dU,F7r,T7r,M7r,Y9,cve,E7r,C7r,cU,w7r,A7r,y7r,K9,fve,L7r,x7r,fU,$7r,k7r,S7r,Z9,Rje,ic,eM,mve,QL,R7r,gve,P7r,Pje,ar,HL,B7r,dc,I7r,mU,N7r,q7r,gU,j7r,D7r,G7r,UL,O7r,hve,V7r,X7r,z7r,Pt,JL,W7r,pve,Q7r,H7r,cc,U7r,_ve,J7r,Y7r,hU,K7r,Z7r,e9r,oM,o9r,Sr,YL,r9r,uve,t9r,a9r,sn,n9r,bve,s9r,l9r,vve,i9r,d9r,Fve,c9r,f9r,m9r,pe,rM,Tve,g9r,h9r,pU,p9r,_9r,u9r,tM,Mve,b9r,v9r,_U,F9r,T9r,M9r,aM,Eve,E9r,C9r,uU,w9r,A9r,y9r,nM,Cve,L9r,x9r,bU,$9r,k9r,S9r,sM,wve,R9r,P9r,vU,B9r,I9r,N9r,lM,Ave,q9r,j9r,FU,D9r,G9r,O9r,iM,yve,V9r,X9r,TU,z9r,W9r,Q9r,dM,Lve,H9r,U9r,MU,J9r,Y9r,K9r,cM,xve,Z9r,eMr,EU,oMr,rMr,tMr,fM,$ve,aMr,nMr,CU,sMr,lMr,iMr,mM,kve,dMr,cMr,wU,fMr,mMr,gMr,gM,Sve,hMr,pMr,AU,_Mr,uMr,bMr,hM,Rve,vMr,FMr,yU,TMr,MMr,EMr,pM,Pve,CMr,wMr,LU,AMr,yMr,LMr,_M,Bve,xMr,$Mr,xU,kMr,SMr,RMr,uM,Ive,PMr,BMr,$U,IMr,NMr,qMr,bM,Nve,jMr,DMr,kU,GMr,OMr,VMr,vM,Bje,fc,FM,qve,KL,XMr,jve,zMr,Ije,nr,ZL,WMr,mc,QMr,SU,HMr,UMr,RU,JMr,YMr,KMr,e8,ZMr,Dve,eEr,oEr,rEr,Bt,o8,tEr,Gve,aEr,nEr,gc,sEr,Ove,lEr,iEr,PU,dEr,cEr,fEr,TM,mEr,Rr,r8,gEr,Vve,hEr,pEr,ln,_Er,Xve,uEr,bEr,zve,vEr,FEr,Wve,TEr,MEr,EEr,t8,MM,Qve,CEr,wEr,BU,AEr,yEr,LEr,EM,Hve,xEr,$Er,IU,kEr,SEr,REr,CM,Nje,hc,wM,Uve,a8,PEr,Jve,BEr,qje,sr,n8,IEr,pc,NEr,NU,qEr,jEr,qU,DEr,GEr,OEr,s8,VEr,Yve,XEr,zEr,WEr,It,l8,QEr,Kve,HEr,UEr,_c,JEr,Zve,YEr,KEr,jU,ZEr,eCr,oCr,AM,rCr,Pr,i8,tCr,eFe,aCr,nCr,dn,sCr,oFe,lCr,iCr,rFe,dCr,cCr,tFe,fCr,mCr,gCr,aFe,yM,nFe,hCr,pCr,DU,_Cr,uCr,bCr,LM,jje,uc,xM,sFe,d8,vCr,lFe,FCr,Dje,lr,c8,TCr,bc,MCr,GU,ECr,CCr,OU,wCr,ACr,yCr,f8,LCr,iFe,xCr,$Cr,kCr,Nt,m8,SCr,dFe,RCr,PCr,vc,BCr,cFe,ICr,NCr,VU,qCr,jCr,DCr,$M,GCr,Br,g8,OCr,fFe,VCr,XCr,cn,zCr,mFe,WCr,QCr,gFe,HCr,UCr,hFe,JCr,YCr,KCr,de,kM,pFe,ZCr,e3r,XU,o3r,r3r,t3r,SM,_Fe,a3r,n3r,zU,s3r,l3r,i3r,RM,uFe,d3r,c3r,WU,f3r,m3r,g3r,PM,bFe,h3r,p3r,QU,_3r,u3r,b3r,BM,vFe,v3r,F3r,HU,T3r,M3r,E3r,IM,FFe,C3r,w3r,UU,A3r,y3r,L3r,NM,TFe,x3r,$3r,JU,k3r,S3r,R3r,qM,MFe,P3r,B3r,YU,I3r,N3r,q3r,jM,EFe,j3r,D3r,KU,G3r,O3r,V3r,DM,CFe,X3r,z3r,ZU,W3r,Q3r,H3r,GM,wFe,U3r,J3r,eJ,Y3r,K3r,Z3r,OM,AFe,ewr,owr,oJ,rwr,twr,awr,VM,yFe,nwr,swr,rJ,lwr,iwr,dwr,XM,LFe,cwr,fwr,tJ,mwr,gwr,hwr,zM,xFe,pwr,_wr,aJ,uwr,bwr,vwr,WM,$Fe,Fwr,Twr,nJ,Mwr,Ewr,Cwr,QM,kFe,wwr,Awr,sJ,ywr,Lwr,xwr,HM,SFe,$wr,kwr,lJ,Swr,Rwr,Pwr,UM,RFe,Bwr,Iwr,iJ,Nwr,qwr,jwr,JM,PFe,Dwr,Gwr,dJ,Owr,Vwr,Xwr,YM,Gje,Fc,KM,BFe,h8,zwr,IFe,Wwr,Oje,ir,p8,Qwr,Tc,Hwr,cJ,Uwr,Jwr,fJ,Ywr,Kwr,Zwr,_8,e0r,NFe,o0r,r0r,t0r,qt,u8,a0r,qFe,n0r,s0r,Mc,l0r,jFe,i0r,d0r,mJ,c0r,f0r,m0r,ZM,g0r,Ir,b8,h0r,DFe,p0r,_0r,fn,u0r,GFe,b0r,v0r,OFe,F0r,T0r,VFe,M0r,E0r,C0r,ce,eE,XFe,w0r,A0r,gJ,y0r,L0r,x0r,oE,zFe,$0r,k0r,hJ,S0r,R0r,P0r,rE,WFe,B0r,I0r,pJ,N0r,q0r,j0r,tE,QFe,D0r,G0r,_J,O0r,V0r,X0r,aE,HFe,z0r,W0r,uJ,Q0r,H0r,U0r,nE,UFe,J0r,Y0r,bJ,K0r,Z0r,e6r,sE,JFe,o6r,r6r,vJ,t6r,a6r,n6r,lE,YFe,s6r,l6r,FJ,i6r,d6r,c6r,iE,KFe,f6r,m6r,TJ,g6r,h6r,p6r,dE,ZFe,_6r,u6r,MJ,b6r,v6r,F6r,cE,eTe,T6r,M6r,EJ,E6r,C6r,w6r,fE,oTe,A6r,y6r,CJ,L6r,x6r,$6r,mE,rTe,k6r,S6r,wJ,R6r,P6r,B6r,gE,tTe,I6r,N6r,AJ,q6r,j6r,D6r,hE,aTe,G6r,O6r,yJ,V6r,X6r,z6r,pE,nTe,W6r,Q6r,LJ,H6r,U6r,J6r,_E,sTe,Y6r,K6r,xJ,Z6r,eAr,oAr,uE,lTe,rAr,tAr,$J,aAr,nAr,sAr,bE,iTe,lAr,iAr,kJ,dAr,cAr,fAr,vE,dTe,mAr,gAr,SJ,hAr,pAr,_Ar,FE,Vje,Ec,TE,cTe,v8,uAr,fTe,bAr,Xje,dr,F8,vAr,Cc,FAr,RJ,TAr,MAr,PJ,EAr,CAr,wAr,T8,AAr,mTe,yAr,LAr,xAr,jt,M8,$Ar,gTe,kAr,SAr,wc,RAr,hTe,PAr,BAr,BJ,IAr,NAr,qAr,ME,jAr,Nr,E8,DAr,pTe,GAr,OAr,mn,VAr,_Te,XAr,zAr,uTe,WAr,QAr,bTe,HAr,UAr,JAr,vTe,EE,FTe,YAr,KAr,IJ,ZAr,eyr,oyr,CE,zje,Ac,wE,TTe,C8,ryr,MTe,tyr,Wje,cr,w8,ayr,yc,nyr,NJ,syr,lyr,qJ,iyr,dyr,cyr,A8,fyr,ETe,myr,gyr,hyr,Dt,y8,pyr,CTe,_yr,uyr,Lc,byr,wTe,vyr,Fyr,jJ,Tyr,Myr,Eyr,AE,Cyr,qr,L8,wyr,ATe,Ayr,yyr,gn,Lyr,yTe,xyr,$yr,LTe,kyr,Syr,xTe,Ryr,Pyr,Byr,$Te,yE,kTe,Iyr,Nyr,DJ,qyr,jyr,Dyr,LE,Qje,xc,xE,STe,x8,Gyr,RTe,Oyr,Hje,fr,$8,Vyr,$c,Xyr,GJ,zyr,Wyr,OJ,Qyr,Hyr,Uyr,k8,Jyr,PTe,Yyr,Kyr,Zyr,Gt,S8,eLr,BTe,oLr,rLr,kc,tLr,ITe,aLr,nLr,VJ,sLr,lLr,iLr,$E,dLr,jr,R8,cLr,NTe,fLr,mLr,hn,gLr,qTe,hLr,pLr,jTe,_Lr,uLr,DTe,bLr,vLr,FLr,re,kE,GTe,TLr,MLr,XJ,ELr,CLr,wLr,SE,OTe,ALr,yLr,zJ,LLr,xLr,$Lr,RE,VTe,kLr,SLr,WJ,RLr,PLr,BLr,PE,XTe,ILr,NLr,QJ,qLr,jLr,DLr,BE,zTe,GLr,OLr,HJ,VLr,XLr,zLr,IE,WTe,WLr,QLr,UJ,HLr,ULr,JLr,NE,QTe,YLr,KLr,JJ,ZLr,e8r,o8r,qE,HTe,r8r,t8r,YJ,a8r,n8r,s8r,jE,UTe,l8r,i8r,KJ,d8r,c8r,f8r,DE,JTe,m8r,g8r,ZJ,h8r,p8r,_8r,GE,YTe,u8r,b8r,eY,v8r,F8r,T8r,OE,KTe,M8r,E8r,oY,C8r,w8r,A8r,VE,ZTe,y8r,L8r,rY,x8r,$8r,k8r,XE,e7e,S8r,R8r,tY,P8r,B8r,I8r,zE,o7e,N8r,q8r,aY,j8r,D8r,G8r,WE,r7e,O8r,V8r,nY,X8r,z8r,W8r,QE,t7e,Q8r,H8r,sY,U8r,J8r,Y8r,HE,a7e,K8r,Z8r,lY,exr,oxr,rxr,UE,n7e,txr,axr,iY,nxr,sxr,lxr,JE,s7e,ixr,dxr,dY,cxr,fxr,mxr,YE,l7e,gxr,hxr,cY,pxr,_xr,uxr,KE,i7e,bxr,vxr,fY,Fxr,Txr,Mxr,ZE,d7e,Exr,Cxr,mY,wxr,Axr,yxr,eC,c7e,Lxr,xxr,gY,$xr,kxr,Sxr,oC,f7e,Rxr,Pxr,hY,Bxr,Ixr,Nxr,rC,m7e,qxr,jxr,pY,Dxr,Gxr,Oxr,tC,Uje,Sc,aC,g7e,P8,Vxr,h7e,Xxr,Jje,mr,B8,zxr,Rc,Wxr,_Y,Qxr,Hxr,uY,Uxr,Jxr,Yxr,I8,Kxr,p7e,Zxr,e$r,o$r,Ot,N8,r$r,_7e,t$r,a$r,Pc,n$r,u7e,s$r,l$r,bY,i$r,d$r,c$r,nC,f$r,Dr,q8,m$r,b7e,g$r,h$r,pn,p$r,v7e,_$r,u$r,F7e,b$r,v$r,T7e,F$r,T$r,M$r,Le,sC,M7e,E$r,C$r,vY,w$r,A$r,y$r,lC,E7e,L$r,x$r,FY,$$r,k$r,S$r,iC,C7e,R$r,P$r,TY,B$r,I$r,N$r,dC,w7e,q$r,j$r,MY,D$r,G$r,O$r,cC,A7e,V$r,X$r,EY,z$r,W$r,Q$r,fC,y7e,H$r,U$r,CY,J$r,Y$r,K$r,mC,L7e,Z$r,ekr,wY,okr,rkr,tkr,gC,x7e,akr,nkr,AY,skr,lkr,ikr,hC,$7e,dkr,ckr,yY,fkr,mkr,gkr,pC,k7e,hkr,pkr,LY,_kr,ukr,bkr,_C,Yje,Bc,uC,S7e,j8,vkr,R7e,Fkr,Kje,gr,D8,Tkr,Ic,Mkr,xY,Ekr,Ckr,$Y,wkr,Akr,ykr,G8,Lkr,P7e,xkr,$kr,kkr,Vt,O8,Skr,B7e,Rkr,Pkr,Nc,Bkr,I7e,Ikr,Nkr,kY,qkr,jkr,Dkr,bC,Gkr,Gr,V8,Okr,N7e,Vkr,Xkr,_n,zkr,q7e,Wkr,Qkr,j7e,Hkr,Ukr,D7e,Jkr,Ykr,Kkr,Ee,vC,G7e,Zkr,eSr,SY,oSr,rSr,tSr,FC,O7e,aSr,nSr,RY,sSr,lSr,iSr,TC,V7e,dSr,cSr,PY,fSr,mSr,gSr,MC,X7e,hSr,pSr,BY,_Sr,uSr,bSr,EC,z7e,vSr,FSr,IY,TSr,MSr,ESr,CC,W7e,CSr,wSr,NY,ASr,ySr,LSr,wC,Q7e,xSr,$Sr,qY,kSr,SSr,RSr,AC,H7e,PSr,BSr,jY,ISr,NSr,qSr,yC,U7e,jSr,DSr,DY,GSr,OSr,VSr,LC,J7e,XSr,zSr,GY,WSr,QSr,HSr,xC,Y7e,USr,JSr,OY,YSr,KSr,ZSr,$C,K7e,eRr,oRr,VY,rRr,tRr,aRr,kC,Zje,qc,SC,Z7e,X8,nRr,e9e,sRr,eDe,hr,z8,lRr,jc,iRr,XY,dRr,cRr,zY,fRr,mRr,gRr,W8,hRr,o9e,pRr,_Rr,uRr,Xt,Q8,bRr,r9e,vRr,FRr,Dc,TRr,t9e,MRr,ERr,WY,CRr,wRr,ARr,RC,yRr,Or,H8,LRr,a9e,xRr,$Rr,un,kRr,n9e,SRr,RRr,s9e,PRr,BRr,l9e,IRr,NRr,qRr,xe,PC,i9e,jRr,DRr,QY,GRr,ORr,VRr,BC,d9e,XRr,zRr,HY,WRr,QRr,HRr,IC,c9e,URr,JRr,UY,YRr,KRr,ZRr,NC,f9e,ePr,oPr,JY,rPr,tPr,aPr,qC,m9e,nPr,sPr,YY,lPr,iPr,dPr,jC,g9e,cPr,fPr,KY,mPr,gPr,hPr,DC,h9e,pPr,_Pr,ZY,uPr,bPr,vPr,GC,p9e,FPr,TPr,eK,MPr,EPr,CPr,OC,_9e,wPr,APr,oK,yPr,LPr,xPr,VC,u9e,$Pr,kPr,rK,SPr,RPr,PPr,XC,oDe,Gc,zC,b9e,U8,BPr,v9e,IPr,rDe,pr,J8,NPr,Oc,qPr,tK,jPr,DPr,aK,GPr,OPr,VPr,Y8,XPr,F9e,zPr,WPr,QPr,zt,K8,HPr,T9e,UPr,JPr,Vc,YPr,M9e,KPr,ZPr,nK,eBr,oBr,rBr,WC,tBr,Vr,Z8,aBr,E9e,nBr,sBr,bn,lBr,C9e,iBr,dBr,w9e,cBr,fBr,A9e,mBr,gBr,hBr,Pe,QC,y9e,pBr,_Br,sK,uBr,bBr,vBr,HC,L9e,FBr,TBr,lK,MBr,EBr,CBr,UC,x9e,wBr,ABr,iK,yBr,LBr,xBr,JC,$9e,$Br,kBr,dK,SBr,RBr,PBr,YC,k9e,BBr,IBr,cK,NBr,qBr,jBr,KC,S9e,DBr,GBr,fK,OBr,VBr,XBr,ZC,R9e,zBr,WBr,mK,QBr,HBr,UBr,e3,P9e,JBr,YBr,gK,KBr,ZBr,eIr,o3,B9e,oIr,rIr,hK,tIr,aIr,nIr,r3,tDe,Xc,t3,I9e,ex,sIr,N9e,lIr,aDe,_r,ox,iIr,zc,dIr,pK,cIr,fIr,_K,mIr,gIr,hIr,rx,pIr,q9e,_Ir,uIr,bIr,Wt,tx,vIr,j9e,FIr,TIr,Wc,MIr,D9e,EIr,CIr,uK,wIr,AIr,yIr,a3,LIr,Xr,ax,xIr,G9e,$Ir,kIr,vn,SIr,O9e,RIr,PIr,V9e,BIr,IIr,X9e,NIr,qIr,jIr,$e,n3,z9e,DIr,GIr,bK,OIr,VIr,XIr,s3,W9e,zIr,WIr,vK,QIr,HIr,UIr,l3,Q9e,JIr,YIr,FK,KIr,ZIr,eNr,i3,H9e,oNr,rNr,TK,tNr,aNr,nNr,d3,U9e,sNr,lNr,MK,iNr,dNr,cNr,c3,J9e,fNr,mNr,EK,gNr,hNr,pNr,f3,Y9e,_Nr,uNr,CK,bNr,vNr,FNr,m3,K9e,TNr,MNr,wK,ENr,CNr,wNr,g3,Z9e,ANr,yNr,AK,LNr,xNr,$Nr,h3,eMe,kNr,SNr,yK,RNr,PNr,BNr,p3,nDe,Qc,_3,oMe,nx,INr,rMe,NNr,sDe,ur,sx,qNr,Hc,jNr,LK,DNr,GNr,xK,ONr,VNr,XNr,lx,zNr,tMe,WNr,QNr,HNr,Qt,ix,UNr,aMe,JNr,YNr,Uc,KNr,nMe,ZNr,eqr,$K,oqr,rqr,tqr,u3,aqr,zr,dx,nqr,sMe,sqr,lqr,Fn,iqr,lMe,dqr,cqr,iMe,fqr,mqr,dMe,gqr,hqr,pqr,ke,b3,cMe,_qr,uqr,kK,bqr,vqr,Fqr,v3,fMe,Tqr,Mqr,SK,Eqr,Cqr,wqr,F3,mMe,Aqr,yqr,RK,Lqr,xqr,$qr,T3,gMe,kqr,Sqr,PK,Rqr,Pqr,Bqr,M3,hMe,Iqr,Nqr,BK,qqr,jqr,Dqr,E3,pMe,Gqr,Oqr,IK,Vqr,Xqr,zqr,C3,_Me,Wqr,Qqr,NK,Hqr,Uqr,Jqr,w3,uMe,Yqr,Kqr,qK,Zqr,ejr,ojr,A3,bMe,rjr,tjr,jK,ajr,njr,sjr,y3,vMe,ljr,ijr,DK,djr,cjr,fjr,L3,lDe,Jc,x3,FMe,cx,mjr,TMe,gjr,iDe,br,fx,hjr,Yc,pjr,GK,_jr,ujr,OK,bjr,vjr,Fjr,mx,Tjr,MMe,Mjr,Ejr,Cjr,Ht,gx,wjr,EMe,Ajr,yjr,Kc,Ljr,CMe,xjr,$jr,VK,kjr,Sjr,Rjr,$3,Pjr,Wr,hx,Bjr,wMe,Ijr,Njr,Tn,qjr,AMe,jjr,Djr,yMe,Gjr,Ojr,LMe,Vjr,Xjr,zjr,Ge,k3,xMe,Wjr,Qjr,XK,Hjr,Ujr,Jjr,S3,$Me,Yjr,Kjr,zK,Zjr,eDr,oDr,R3,kMe,rDr,tDr,WK,aDr,nDr,sDr,P3,SMe,lDr,iDr,QK,dDr,cDr,fDr,B3,RMe,mDr,gDr,HK,hDr,pDr,_Dr,I3,PMe,uDr,bDr,UK,vDr,FDr,TDr,N3,BMe,MDr,EDr,JK,CDr,wDr,ADr,q3,IMe,yDr,LDr,YK,xDr,$Dr,kDr,j3,dDe,Zc,D3,NMe,px,SDr,qMe,RDr,cDe,vr,_x,PDr,ef,BDr,KK,IDr,NDr,ZK,qDr,jDr,DDr,ux,GDr,jMe,ODr,VDr,XDr,Ut,bx,zDr,DMe,WDr,QDr,of,HDr,GMe,UDr,JDr,eZ,YDr,KDr,ZDr,G3,eGr,Qr,vx,oGr,OMe,rGr,tGr,Mn,aGr,VMe,nGr,sGr,XMe,lGr,iGr,zMe,dGr,cGr,fGr,Oe,O3,WMe,mGr,gGr,oZ,hGr,pGr,_Gr,V3,QMe,uGr,bGr,rZ,vGr,FGr,TGr,X3,HMe,MGr,EGr,tZ,CGr,wGr,AGr,z3,UMe,yGr,LGr,aZ,xGr,$Gr,kGr,W3,JMe,SGr,RGr,nZ,PGr,BGr,IGr,Q3,YMe,NGr,qGr,sZ,jGr,DGr,GGr,H3,KMe,OGr,VGr,lZ,XGr,zGr,WGr,U3,ZMe,QGr,HGr,iZ,UGr,JGr,YGr,J3,fDe,rf,Y3,eEe,Fx,KGr,oEe,ZGr,mDe,Fr,Tx,eOr,tf,oOr,dZ,rOr,tOr,cZ,aOr,nOr,sOr,Mx,lOr,rEe,iOr,dOr,cOr,Jt,Ex,fOr,tEe,mOr,gOr,af,hOr,aEe,pOr,_Or,fZ,uOr,bOr,vOr,K3,FOr,Hr,Cx,TOr,nEe,MOr,EOr,En,COr,sEe,wOr,AOr,lEe,yOr,LOr,iEe,xOr,$Or,kOr,dEe,Z3,cEe,SOr,ROr,mZ,POr,BOr,IOr,ew,gDe,nf,ow,fEe,wx,NOr,mEe,qOr,hDe,Tr,Ax,jOr,sf,DOr,gZ,GOr,OOr,hZ,VOr,XOr,zOr,yx,WOr,gEe,QOr,HOr,UOr,Yt,Lx,JOr,hEe,YOr,KOr,lf,ZOr,pEe,eVr,oVr,pZ,rVr,tVr,aVr,rw,nVr,Ur,xx,sVr,_Ee,lVr,iVr,Cn,dVr,uEe,cVr,fVr,bEe,mVr,gVr,vEe,hVr,pVr,_Vr,$x,tw,FEe,uVr,bVr,_Z,vVr,FVr,TVr,aw,TEe,MVr,EVr,uZ,CVr,wVr,AVr,nw,pDe,df,sw,MEe,kx,yVr,EEe,LVr,_De,Mr,Sx,xVr,cf,$Vr,bZ,kVr,SVr,vZ,RVr,PVr,BVr,Rx,IVr,CEe,NVr,qVr,jVr,Kt,Px,DVr,wEe,GVr,OVr,ff,VVr,AEe,XVr,zVr,FZ,WVr,QVr,HVr,lw,UVr,Jr,Bx,JVr,yEe,YVr,KVr,wn,ZVr,LEe,eXr,oXr,xEe,rXr,tXr,$Ee,aXr,nXr,sXr,kEe,iw,SEe,lXr,iXr,TZ,dXr,cXr,fXr,dw,uDe;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),k6=new te({}),S6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new mXr({props:{warning:!0,$$slots:{default:[okt]},$$scope:{ctx:L}}}),R6=new te({}),P6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/configuration_auto.py#L584"}}),N6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/configuration_auto.py#L607"}}),Eg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[rkt]},$$scope:{ctx:L}}}),q6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/configuration_auto.py#L730"}}),j6=new te({}),D6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/tokenization_auto.py#L390"}}),V6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17495/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/tokenization_auto.py#L404"}}),ah=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[tkt]},$$scope:{ctx:L}}}),X6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/tokenization_auto.py#L603"}}),z6=new te({}),W6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),U6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17495/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/feature_extraction_auto.py#L204"}}),Ih=new mXr({props:{$$slots:{default:[akt]},$$scope:{ctx:L}}}),Nh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[nkt]},$$scope:{ctx:L}}}),J6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/feature_extraction_auto.py#L331"}}),Y6=new te({}),K6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/processing_auto.py#L88"}}),oA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/processing_auto.py#L102"}}),tp=new mXr({props:{$$slots:{default:[skt]},$$scope:{ctx:L}}}),ap=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[lkt]},$$scope:{ctx:L}}}),rA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/processing_auto.py#L255"}}),tA=new te({}),aA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L736"}}),sA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),lp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[ikt]},$$scope:{ctx:L}}}),lA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),ru=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[dkt]},$$scope:{ctx:L}}}),iA=new te({}),dA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L743"}}),fA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),au=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[ckt]},$$scope:{ctx:L}}}),mA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),Hu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[fkt]},$$scope:{ctx:L}}}),gA=new te({}),hA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L758"}}),_A=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),Ju=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[mkt]},$$scope:{ctx:L}}}),uA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),B1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[gkt]},$$scope:{ctx:L}}}),bA=new te({}),vA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L765"}}),TA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),N1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[hkt]},$$scope:{ctx:L}}}),MA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),Fb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[pkt]},$$scope:{ctx:L}}}),EA=new te({}),CA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L772"}}),AA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),Mb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[_kt]},$$scope:{ctx:L}}}),yA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),Db=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ukt]},$$scope:{ctx:L}}}),LA=new te({}),xA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L781"}}),kA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),Ob=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[bkt]},$$scope:{ctx:L}}}),SA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),N2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[vkt]},$$scope:{ctx:L}}}),RA=new te({}),PA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L815"}}),IA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),j2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Fkt]},$$scope:{ctx:L}}}),NA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),_4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Tkt]},$$scope:{ctx:L}}}),qA=new te({}),jA=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L822"}}),GA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),b4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Mkt]},$$scope:{ctx:L}}}),OA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),w4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Ekt]},$$scope:{ctx:L}}}),VA=new te({}),XA=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L808"}}),WA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),y4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Ckt]},$$scope:{ctx:L}}}),QA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),d5=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[wkt]},$$scope:{ctx:L}}}),HA=new te({}),UA=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L790"}}),YA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),f5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Akt]},$$scope:{ctx:L}}}),KA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ykt]},$$scope:{ctx:L}}}),ZA=new te({}),ey=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L797"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),ov=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Lkt]},$$scope:{ctx:L}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),av=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[xkt]},$$scope:{ctx:L}}}),ay=new te({}),ny=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L831"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17495/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17495/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17495/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),sv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[$kt]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),Fv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[kkt]},$$scope:{ctx:L}}}),dy=new te({}),cy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L870"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),Mv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Skt]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),wv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Rkt]},$$scope:{ctx:L}}}),hy=new te({}),py=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L877"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),yv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Pkt]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),qv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Bkt]},$$scope:{ctx:L}}}),vy=new te({}),Fy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L900"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),Dv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Ikt]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),Qv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Nkt]},$$scope:{ctx:L}}}),Cy=new te({}),wy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L884"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),Uv=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[qkt]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),sF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),xy=new te({}),$y=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L891"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),iF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Dkt]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),mF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Gkt]},$$scope:{ctx:L}}}),By=new te({}),Iy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L909"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),hF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Okt]},$$scope:{ctx:L}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Vkt]},$$scope:{ctx:L}}}),Dy=new te({}),Gy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L916"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Xkt]},$$scope:{ctx:L}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),LF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[zkt]},$$scope:{ctx:L}}}),zy=new te({}),Wy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L863"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),$F=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Wkt]},$$scope:{ctx:L}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Qkt]},$$scope:{ctx:L}}}),Yy=new te({}),Ky=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L838"}}),eL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Hkt]},$$scope:{ctx:L}}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),rL=new te({}),tL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L845"}}),nL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),QF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Ykt]},$$scope:{ctx:L}}}),lL=new te({}),iL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_auto.py#L854"}}),cL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),UF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Kkt]},$$scope:{ctx:L}}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Zkt]},$$scope:{ctx:L}}}),mL=new te({}),gL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),pL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[eSt]},$$scope:{ctx:L}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),QT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[oSt]},$$scope:{ctx:L}}}),uL=new te({}),bL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),FL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),UT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[rSt]},$$scope:{ctx:L}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),v7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),ML=new te({}),EL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),wL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),T7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),B7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[nSt]},$$scope:{ctx:L}}}),yL=new te({}),LL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),$L=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),N7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),O7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),SL=new te({}),RL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),BL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),X7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[iSt]},$$scope:{ctx:L}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),f9=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[dSt]},$$scope:{ctx:L}}}),NL=new te({}),qL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),DL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),g9=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[cSt]},$$scope:{ctx:L}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),C9=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[fSt]},$$scope:{ctx:L}}}),OL=new te({}),VL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),zL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),A9=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[mSt]},$$scope:{ctx:L}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),Z9=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[gSt]},$$scope:{ctx:L}}}),QL=new te({}),HL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),JL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),oM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[hSt]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),vM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[pSt]},$$scope:{ctx:L}}}),KL=new te({}),ZL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),o8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),TM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[_St]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),CM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[uSt]},$$scope:{ctx:L}}}),a8=new te({}),n8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),l8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),AM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[bSt]},$$scope:{ctx:L}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),LM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[vSt]},$$scope:{ctx:L}}}),d8=new te({}),c8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),m8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),$M=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[FSt]},$$scope:{ctx:L}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),YM=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[TSt]},$$scope:{ctx:L}}}),h8=new te({}),p8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),u8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),ZM=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[MSt]},$$scope:{ctx:L}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),FE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ESt]},$$scope:{ctx:L}}}),v8=new te({}),F8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),M8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),ME=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[CSt]},$$scope:{ctx:L}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),CE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[wSt]},$$scope:{ctx:L}}}),C8=new te({}),w8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),AE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[ASt]},$$scope:{ctx:L}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[ySt]},$$scope:{ctx:L}}}),x8=new te({}),$8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),S8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),$E=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[LSt]},$$scope:{ctx:L}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[xSt]},$$scope:{ctx:L}}}),P8=new te({}),B8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),N8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),nC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[$St]},$$scope:{ctx:L}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),_C=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[kSt]},$$scope:{ctx:L}}}),j8=new te({}),D8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),O8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),bC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[SSt]},$$scope:{ctx:L}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),kC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[RSt]},$$scope:{ctx:L}}}),X8=new te({}),z8=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),RC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[PSt]},$$scope:{ctx:L}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),XC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[BSt]},$$scope:{ctx:L}}}),U8=new te({}),J8=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),K8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),WC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ISt]},$$scope:{ctx:L}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),r3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[NSt]},$$scope:{ctx:L}}}),ex=new te({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),a3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[qSt]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),p3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[jSt]},$$scope:{ctx:L}}}),nx=new te({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),u3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[DSt]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),L3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[GSt]},$$scope:{ctx:L}}}),cx=new te({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),$3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[OSt]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),j3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[VSt]},$$scope:{ctx:L}}}),px=new te({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),G3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[XSt]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[zSt]},$$scope:{ctx:L}}}),Fx=new te({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),K3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[WSt]},$$scope:{ctx:L}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),ew=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[QSt]},$$scope:{ctx:L}}}),wx=new te({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17495/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),rw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[HSt]},$$scope:{ctx:L}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[USt]},$$scope:{ctx:L}}}),kx=new te({}),Sx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),Px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17495/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17495/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L389"}}),lw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[JSt]},$$scope:{ctx:L}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17495/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17495/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17495/src/transformers/models/auto/auto_factory.py#L417"}}),dw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[YSt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),y6=o("from_pretrained()"),_f=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),L6=o("AutoConfig"),Ln=o(", "),xn=a("a"),x6=o("AutoModel"),pi=o(`, and
`),$n=a("a"),$6=o("AutoTokenizer"),_i=o(" will directly create a class of the relevant architecture. For instance"),uf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),U$=o("will create a model that is an instance of "),ui=a("a"),J$=o("BertModel"),Y$=o("."),Eo=l(),wa=a("p"),K$=o("There is one class of "),bf=a("code"),Z$=o("AutoModel"),wOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),hqe=l(),bi=a("h2"),vf=a("a"),hoe=a("span"),F(k6.$$.fragment),AOe=l(),poe=a("span"),yOe=o("Extending the Auto Classes"),pqe=l(),kn=a("p"),LOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),_oe=a("code"),xOe=o("NewModel"),$Oe=o(", make sure you have a "),uoe=a("code"),kOe=o("NewModelConfig"),SOe=o(` then you can add those to the auto
classes like this:`),_qe=l(),F(S6.$$.fragment),uqe=l(),ek=a("p"),ROe=o("You will then be able to use the auto classes like you would usually do!"),bqe=l(),F(Ff.$$.fragment),vqe=l(),vi=a("h2"),Tf=a("a"),boe=a("span"),F(R6.$$.fragment),POe=l(),voe=a("span"),BOe=o("AutoConfig"),Fqe=l(),Co=a("div"),F(P6.$$.fragment),IOe=l(),B6=a("p"),NOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),ok=a("a"),qOe=o("from_pretrained()"),jOe=o(" class method."),DOe=l(),I6=a("p"),GOe=o("This class cannot be instantiated directly using "),Foe=a("code"),OOe=o("__init__()"),VOe=o(" (throws an error)."),XOe=l(),Er=a("div"),F(N6.$$.fragment),zOe=l(),Toe=a("p"),WOe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),QOe=l(),Fi=a("p"),HOe=o("The configuration class to instantiate is selected based on the "),Moe=a("code"),UOe=o("model_type"),JOe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Eoe=a("code"),YOe=o("pretrained_model_name_or_path"),KOe=o(":"),ZOe=l(),A=a("ul"),Mf=a("li"),Coe=a("strong"),eVe=o("albert"),oVe=o(" \u2014 "),rk=a("a"),rVe=o("AlbertConfig"),tVe=o(" (ALBERT model)"),aVe=l(),Ef=a("li"),woe=a("strong"),nVe=o("bart"),sVe=o(" \u2014 "),tk=a("a"),lVe=o("BartConfig"),iVe=o(" (BART model)"),dVe=l(),Cf=a("li"),Aoe=a("strong"),cVe=o("beit"),fVe=o(" \u2014 "),ak=a("a"),mVe=o("BeitConfig"),gVe=o(" (BEiT model)"),hVe=l(),wf=a("li"),yoe=a("strong"),pVe=o("bert"),_Ve=o(" \u2014 "),nk=a("a"),uVe=o("BertConfig"),bVe=o(" (BERT model)"),vVe=l(),Af=a("li"),Loe=a("strong"),FVe=o("bert-generation"),TVe=o(" \u2014 "),sk=a("a"),MVe=o("BertGenerationConfig"),EVe=o(" (Bert Generation model)"),CVe=l(),yf=a("li"),xoe=a("strong"),wVe=o("big_bird"),AVe=o(" \u2014 "),lk=a("a"),yVe=o("BigBirdConfig"),LVe=o(" (BigBird model)"),xVe=l(),Lf=a("li"),$oe=a("strong"),$Ve=o("bigbird_pegasus"),kVe=o(" \u2014 "),ik=a("a"),SVe=o("BigBirdPegasusConfig"),RVe=o(" (BigBirdPegasus model)"),PVe=l(),xf=a("li"),koe=a("strong"),BVe=o("blenderbot"),IVe=o(" \u2014 "),dk=a("a"),NVe=o("BlenderbotConfig"),qVe=o(" (Blenderbot model)"),jVe=l(),$f=a("li"),Soe=a("strong"),DVe=o("blenderbot-small"),GVe=o(" \u2014 "),ck=a("a"),OVe=o("BlenderbotSmallConfig"),VVe=o(" (BlenderbotSmall model)"),XVe=l(),kf=a("li"),Roe=a("strong"),zVe=o("camembert"),WVe=o(" \u2014 "),fk=a("a"),QVe=o("CamembertConfig"),HVe=o(" (CamemBERT model)"),UVe=l(),Sf=a("li"),Poe=a("strong"),JVe=o("canine"),YVe=o(" \u2014 "),mk=a("a"),KVe=o("CanineConfig"),ZVe=o(" (Canine model)"),eXe=l(),Rf=a("li"),Boe=a("strong"),oXe=o("clip"),rXe=o(" \u2014 "),gk=a("a"),tXe=o("CLIPConfig"),aXe=o(" (CLIP model)"),nXe=l(),Pf=a("li"),Ioe=a("strong"),sXe=o("convbert"),lXe=o(" \u2014 "),hk=a("a"),iXe=o("ConvBertConfig"),dXe=o(" (ConvBERT model)"),cXe=l(),Bf=a("li"),Noe=a("strong"),fXe=o("convnext"),mXe=o(" \u2014 "),pk=a("a"),gXe=o("ConvNextConfig"),hXe=o(" (ConvNext model)"),pXe=l(),If=a("li"),qoe=a("strong"),_Xe=o("ctrl"),uXe=o(" \u2014 "),_k=a("a"),bXe=o("CTRLConfig"),vXe=o(" (CTRL model)"),FXe=l(),Nf=a("li"),joe=a("strong"),TXe=o("cvt"),MXe=o(" \u2014 "),uk=a("a"),EXe=o("CvtConfig"),CXe=o(" (CvT model)"),wXe=l(),qf=a("li"),Doe=a("strong"),AXe=o("data2vec-audio"),yXe=o(" \u2014 "),bk=a("a"),LXe=o("Data2VecAudioConfig"),xXe=o(" (Data2VecAudio model)"),$Xe=l(),jf=a("li"),Goe=a("strong"),kXe=o("data2vec-text"),SXe=o(" \u2014 "),vk=a("a"),RXe=o("Data2VecTextConfig"),PXe=o(" (Data2VecText model)"),BXe=l(),Df=a("li"),Ooe=a("strong"),IXe=o("data2vec-vision"),NXe=o(" \u2014 "),Fk=a("a"),qXe=o("Data2VecVisionConfig"),jXe=o(" (Data2VecVision model)"),DXe=l(),Gf=a("li"),Voe=a("strong"),GXe=o("deberta"),OXe=o(" \u2014 "),Tk=a("a"),VXe=o("DebertaConfig"),XXe=o(" (DeBERTa model)"),zXe=l(),Of=a("li"),Xoe=a("strong"),WXe=o("deberta-v2"),QXe=o(" \u2014 "),Mk=a("a"),HXe=o("DebertaV2Config"),UXe=o(" (DeBERTa-v2 model)"),JXe=l(),Vf=a("li"),zoe=a("strong"),YXe=o("decision_transformer"),KXe=o(" \u2014 "),Ek=a("a"),ZXe=o("DecisionTransformerConfig"),eze=o(" (Decision Transformer model)"),oze=l(),Xf=a("li"),Woe=a("strong"),rze=o("deit"),tze=o(" \u2014 "),Ck=a("a"),aze=o("DeiTConfig"),nze=o(" (DeiT model)"),sze=l(),zf=a("li"),Qoe=a("strong"),lze=o("detr"),ize=o(" \u2014 "),wk=a("a"),dze=o("DetrConfig"),cze=o(" (DETR model)"),fze=l(),Wf=a("li"),Hoe=a("strong"),mze=o("distilbert"),gze=o(" \u2014 "),Ak=a("a"),hze=o("DistilBertConfig"),pze=o(" (DistilBERT model)"),_ze=l(),Qf=a("li"),Uoe=a("strong"),uze=o("dpr"),bze=o(" \u2014 "),yk=a("a"),vze=o("DPRConfig"),Fze=o(" (DPR model)"),Tze=l(),Hf=a("li"),Joe=a("strong"),Mze=o("dpt"),Eze=o(" \u2014 "),Lk=a("a"),Cze=o("DPTConfig"),wze=o(" (DPT model)"),Aze=l(),Uf=a("li"),Yoe=a("strong"),yze=o("electra"),Lze=o(" \u2014 "),xk=a("a"),xze=o("ElectraConfig"),$ze=o(" (ELECTRA model)"),kze=l(),Jf=a("li"),Koe=a("strong"),Sze=o("encoder-decoder"),Rze=o(" \u2014 "),$k=a("a"),Pze=o("EncoderDecoderConfig"),Bze=o(" (Encoder decoder model)"),Ize=l(),Yf=a("li"),Zoe=a("strong"),Nze=o("flaubert"),qze=o(" \u2014 "),kk=a("a"),jze=o("FlaubertConfig"),Dze=o(" (FlauBERT model)"),Gze=l(),Kf=a("li"),ere=a("strong"),Oze=o("flava"),Vze=o(" \u2014 "),Sk=a("a"),Xze=o("FlavaConfig"),zze=o(" (Flava model)"),Wze=l(),Zf=a("li"),ore=a("strong"),Qze=o("fnet"),Hze=o(" \u2014 "),Rk=a("a"),Uze=o("FNetConfig"),Jze=o(" (FNet model)"),Yze=l(),em=a("li"),rre=a("strong"),Kze=o("fsmt"),Zze=o(" \u2014 "),Pk=a("a"),eWe=o("FSMTConfig"),oWe=o(" (FairSeq Machine-Translation model)"),rWe=l(),om=a("li"),tre=a("strong"),tWe=o("funnel"),aWe=o(" \u2014 "),Bk=a("a"),nWe=o("FunnelConfig"),sWe=o(" (Funnel Transformer model)"),lWe=l(),rm=a("li"),are=a("strong"),iWe=o("glpn"),dWe=o(" \u2014 "),Ik=a("a"),cWe=o("GLPNConfig"),fWe=o(" (GLPN model)"),mWe=l(),tm=a("li"),nre=a("strong"),gWe=o("gpt2"),hWe=o(" \u2014 "),Nk=a("a"),pWe=o("GPT2Config"),_We=o(" (OpenAI GPT-2 model)"),uWe=l(),am=a("li"),sre=a("strong"),bWe=o("gpt_neo"),vWe=o(" \u2014 "),qk=a("a"),FWe=o("GPTNeoConfig"),TWe=o(" (GPT Neo model)"),MWe=l(),nm=a("li"),lre=a("strong"),EWe=o("gpt_neox"),CWe=o(" \u2014 "),jk=a("a"),wWe=o("GPTNeoXConfig"),AWe=o(" (GPT NeoX model)"),yWe=l(),sm=a("li"),ire=a("strong"),LWe=o("gptj"),xWe=o(" \u2014 "),Dk=a("a"),$We=o("GPTJConfig"),kWe=o(" (GPT-J model)"),SWe=l(),lm=a("li"),dre=a("strong"),RWe=o("hubert"),PWe=o(" \u2014 "),Gk=a("a"),BWe=o("HubertConfig"),IWe=o(" (Hubert model)"),NWe=l(),im=a("li"),cre=a("strong"),qWe=o("ibert"),jWe=o(" \u2014 "),Ok=a("a"),DWe=o("IBertConfig"),GWe=o(" (I-BERT model)"),OWe=l(),dm=a("li"),fre=a("strong"),VWe=o("imagegpt"),XWe=o(" \u2014 "),Vk=a("a"),zWe=o("ImageGPTConfig"),WWe=o(" (ImageGPT model)"),QWe=l(),cm=a("li"),mre=a("strong"),HWe=o("layoutlm"),UWe=o(" \u2014 "),Xk=a("a"),JWe=o("LayoutLMConfig"),YWe=o(" (LayoutLM model)"),KWe=l(),fm=a("li"),gre=a("strong"),ZWe=o("layoutlmv2"),eQe=o(" \u2014 "),zk=a("a"),oQe=o("LayoutLMv2Config"),rQe=o(" (LayoutLMv2 model)"),tQe=l(),mm=a("li"),hre=a("strong"),aQe=o("layoutlmv3"),nQe=o(" \u2014 "),Wk=a("a"),sQe=o("LayoutLMv3Config"),lQe=o(" (LayoutLMv3 model)"),iQe=l(),gm=a("li"),pre=a("strong"),dQe=o("led"),cQe=o(" \u2014 "),Qk=a("a"),fQe=o("LEDConfig"),mQe=o(" (LED model)"),gQe=l(),hm=a("li"),_re=a("strong"),hQe=o("longformer"),pQe=o(" \u2014 "),Hk=a("a"),_Qe=o("LongformerConfig"),uQe=o(" (Longformer model)"),bQe=l(),pm=a("li"),ure=a("strong"),vQe=o("luke"),FQe=o(" \u2014 "),Uk=a("a"),TQe=o("LukeConfig"),MQe=o(" (LUKE model)"),EQe=l(),_m=a("li"),bre=a("strong"),CQe=o("lxmert"),wQe=o(" \u2014 "),Jk=a("a"),AQe=o("LxmertConfig"),yQe=o(" (LXMERT model)"),LQe=l(),um=a("li"),vre=a("strong"),xQe=o("m2m_100"),$Qe=o(" \u2014 "),Yk=a("a"),kQe=o("M2M100Config"),SQe=o(" (M2M100 model)"),RQe=l(),bm=a("li"),Fre=a("strong"),PQe=o("marian"),BQe=o(" \u2014 "),Kk=a("a"),IQe=o("MarianConfig"),NQe=o(" (Marian model)"),qQe=l(),vm=a("li"),Tre=a("strong"),jQe=o("maskformer"),DQe=o(" \u2014 "),Zk=a("a"),GQe=o("MaskFormerConfig"),OQe=o(" (MaskFormer model)"),VQe=l(),Fm=a("li"),Mre=a("strong"),XQe=o("mbart"),zQe=o(" \u2014 "),eS=a("a"),WQe=o("MBartConfig"),QQe=o(" (mBART model)"),HQe=l(),Tm=a("li"),Ere=a("strong"),UQe=o("megatron-bert"),JQe=o(" \u2014 "),oS=a("a"),YQe=o("MegatronBertConfig"),KQe=o(" (MegatronBert model)"),ZQe=l(),Mm=a("li"),Cre=a("strong"),eHe=o("mobilebert"),oHe=o(" \u2014 "),rS=a("a"),rHe=o("MobileBertConfig"),tHe=o(" (MobileBERT model)"),aHe=l(),Em=a("li"),wre=a("strong"),nHe=o("mpnet"),sHe=o(" \u2014 "),tS=a("a"),lHe=o("MPNetConfig"),iHe=o(" (MPNet model)"),dHe=l(),Cm=a("li"),Are=a("strong"),cHe=o("mt5"),fHe=o(" \u2014 "),aS=a("a"),mHe=o("MT5Config"),gHe=o(" (mT5 model)"),hHe=l(),wm=a("li"),yre=a("strong"),pHe=o("nystromformer"),_He=o(" \u2014 "),nS=a("a"),uHe=o("NystromformerConfig"),bHe=o(" (Nystromformer model)"),vHe=l(),Am=a("li"),Lre=a("strong"),FHe=o("openai-gpt"),THe=o(" \u2014 "),sS=a("a"),MHe=o("OpenAIGPTConfig"),EHe=o(" (OpenAI GPT model)"),CHe=l(),ym=a("li"),xre=a("strong"),wHe=o("opt"),AHe=o(" \u2014 "),lS=a("a"),yHe=o("OPTConfig"),LHe=o(" (OPT model)"),xHe=l(),Lm=a("li"),$re=a("strong"),$He=o("pegasus"),kHe=o(" \u2014 "),iS=a("a"),SHe=o("PegasusConfig"),RHe=o(" (Pegasus model)"),PHe=l(),xm=a("li"),kre=a("strong"),BHe=o("perceiver"),IHe=o(" \u2014 "),dS=a("a"),NHe=o("PerceiverConfig"),qHe=o(" (Perceiver model)"),jHe=l(),$m=a("li"),Sre=a("strong"),DHe=o("plbart"),GHe=o(" \u2014 "),cS=a("a"),OHe=o("PLBartConfig"),VHe=o(" (PLBart model)"),XHe=l(),km=a("li"),Rre=a("strong"),zHe=o("poolformer"),WHe=o(" \u2014 "),fS=a("a"),QHe=o("PoolFormerConfig"),HHe=o(" (PoolFormer model)"),UHe=l(),Sm=a("li"),Pre=a("strong"),JHe=o("prophetnet"),YHe=o(" \u2014 "),mS=a("a"),KHe=o("ProphetNetConfig"),ZHe=o(" (ProphetNet model)"),eUe=l(),Rm=a("li"),Bre=a("strong"),oUe=o("qdqbert"),rUe=o(" \u2014 "),gS=a("a"),tUe=o("QDQBertConfig"),aUe=o(" (QDQBert model)"),nUe=l(),Pm=a("li"),Ire=a("strong"),sUe=o("rag"),lUe=o(" \u2014 "),hS=a("a"),iUe=o("RagConfig"),dUe=o(" (RAG model)"),cUe=l(),Bm=a("li"),Nre=a("strong"),fUe=o("realm"),mUe=o(" \u2014 "),pS=a("a"),gUe=o("RealmConfig"),hUe=o(" (Realm model)"),pUe=l(),Im=a("li"),qre=a("strong"),_Ue=o("reformer"),uUe=o(" \u2014 "),_S=a("a"),bUe=o("ReformerConfig"),vUe=o(" (Reformer model)"),FUe=l(),Nm=a("li"),jre=a("strong"),TUe=o("regnet"),MUe=o(" \u2014 "),uS=a("a"),EUe=o("RegNetConfig"),CUe=o(" (RegNet model)"),wUe=l(),qm=a("li"),Dre=a("strong"),AUe=o("rembert"),yUe=o(" \u2014 "),bS=a("a"),LUe=o("RemBertConfig"),xUe=o(" (RemBERT model)"),$Ue=l(),jm=a("li"),Gre=a("strong"),kUe=o("resnet"),SUe=o(" \u2014 "),vS=a("a"),RUe=o("ResNetConfig"),PUe=o(" (ResNet model)"),BUe=l(),Dm=a("li"),Ore=a("strong"),IUe=o("retribert"),NUe=o(" \u2014 "),FS=a("a"),qUe=o("RetriBertConfig"),jUe=o(" (RetriBERT model)"),DUe=l(),Gm=a("li"),Vre=a("strong"),GUe=o("roberta"),OUe=o(" \u2014 "),TS=a("a"),VUe=o("RobertaConfig"),XUe=o(" (RoBERTa model)"),zUe=l(),Om=a("li"),Xre=a("strong"),WUe=o("roformer"),QUe=o(" \u2014 "),MS=a("a"),HUe=o("RoFormerConfig"),UUe=o(" (RoFormer model)"),JUe=l(),Vm=a("li"),zre=a("strong"),YUe=o("segformer"),KUe=o(" \u2014 "),ES=a("a"),ZUe=o("SegformerConfig"),eJe=o(" (SegFormer model)"),oJe=l(),Xm=a("li"),Wre=a("strong"),rJe=o("sew"),tJe=o(" \u2014 "),CS=a("a"),aJe=o("SEWConfig"),nJe=o(" (SEW model)"),sJe=l(),zm=a("li"),Qre=a("strong"),lJe=o("sew-d"),iJe=o(" \u2014 "),wS=a("a"),dJe=o("SEWDConfig"),cJe=o(" (SEW-D model)"),fJe=l(),Wm=a("li"),Hre=a("strong"),mJe=o("speech-encoder-decoder"),gJe=o(" \u2014 "),AS=a("a"),hJe=o("SpeechEncoderDecoderConfig"),pJe=o(" (Speech Encoder decoder model)"),_Je=l(),Qm=a("li"),Ure=a("strong"),uJe=o("speech_to_text"),bJe=o(" \u2014 "),yS=a("a"),vJe=o("Speech2TextConfig"),FJe=o(" (Speech2Text model)"),TJe=l(),Hm=a("li"),Jre=a("strong"),MJe=o("speech_to_text_2"),EJe=o(" \u2014 "),LS=a("a"),CJe=o("Speech2Text2Config"),wJe=o(" (Speech2Text2 model)"),AJe=l(),Um=a("li"),Yre=a("strong"),yJe=o("splinter"),LJe=o(" \u2014 "),xS=a("a"),xJe=o("SplinterConfig"),$Je=o(" (Splinter model)"),kJe=l(),Jm=a("li"),Kre=a("strong"),SJe=o("squeezebert"),RJe=o(" \u2014 "),$S=a("a"),PJe=o("SqueezeBertConfig"),BJe=o(" (SqueezeBERT model)"),IJe=l(),Ym=a("li"),Zre=a("strong"),NJe=o("swin"),qJe=o(" \u2014 "),kS=a("a"),jJe=o("SwinConfig"),DJe=o(" (Swin model)"),GJe=l(),Km=a("li"),ete=a("strong"),OJe=o("t5"),VJe=o(" \u2014 "),SS=a("a"),XJe=o("T5Config"),zJe=o(" (T5 model)"),WJe=l(),Zm=a("li"),ote=a("strong"),QJe=o("tapas"),HJe=o(" \u2014 "),RS=a("a"),UJe=o("TapasConfig"),JJe=o(" (TAPAS model)"),YJe=l(),eg=a("li"),rte=a("strong"),KJe=o("trajectory_transformer"),ZJe=o(" \u2014 "),PS=a("a"),eYe=o("TrajectoryTransformerConfig"),oYe=o(" (Trajectory Transformer model)"),rYe=l(),og=a("li"),tte=a("strong"),tYe=o("transfo-xl"),aYe=o(" \u2014 "),BS=a("a"),nYe=o("TransfoXLConfig"),sYe=o(" (Transformer-XL model)"),lYe=l(),rg=a("li"),ate=a("strong"),iYe=o("trocr"),dYe=o(" \u2014 "),IS=a("a"),cYe=o("TrOCRConfig"),fYe=o(" (TrOCR model)"),mYe=l(),tg=a("li"),nte=a("strong"),gYe=o("unispeech"),hYe=o(" \u2014 "),NS=a("a"),pYe=o("UniSpeechConfig"),_Ye=o(" (UniSpeech model)"),uYe=l(),ag=a("li"),ste=a("strong"),bYe=o("unispeech-sat"),vYe=o(" \u2014 "),qS=a("a"),FYe=o("UniSpeechSatConfig"),TYe=o(" (UniSpeechSat model)"),MYe=l(),ng=a("li"),lte=a("strong"),EYe=o("van"),CYe=o(" \u2014 "),jS=a("a"),wYe=o("VanConfig"),AYe=o(" (VAN model)"),yYe=l(),sg=a("li"),ite=a("strong"),LYe=o("vilt"),xYe=o(" \u2014 "),DS=a("a"),$Ye=o("ViltConfig"),kYe=o(" (ViLT model)"),SYe=l(),lg=a("li"),dte=a("strong"),RYe=o("vision-encoder-decoder"),PYe=o(" \u2014 "),GS=a("a"),BYe=o("VisionEncoderDecoderConfig"),IYe=o(" (Vision Encoder decoder model)"),NYe=l(),ig=a("li"),cte=a("strong"),qYe=o("vision-text-dual-encoder"),jYe=o(" \u2014 "),OS=a("a"),DYe=o("VisionTextDualEncoderConfig"),GYe=o(" (VisionTextDualEncoder model)"),OYe=l(),dg=a("li"),fte=a("strong"),VYe=o("visual_bert"),XYe=o(" \u2014 "),VS=a("a"),zYe=o("VisualBertConfig"),WYe=o(" (VisualBert model)"),QYe=l(),cg=a("li"),mte=a("strong"),HYe=o("vit"),UYe=o(" \u2014 "),XS=a("a"),JYe=o("ViTConfig"),YYe=o(" (ViT model)"),KYe=l(),fg=a("li"),gte=a("strong"),ZYe=o("vit_mae"),eKe=o(" \u2014 "),zS=a("a"),oKe=o("ViTMAEConfig"),rKe=o(" (ViTMAE model)"),tKe=l(),mg=a("li"),hte=a("strong"),aKe=o("wav2vec2"),nKe=o(" \u2014 "),WS=a("a"),sKe=o("Wav2Vec2Config"),lKe=o(" (Wav2Vec2 model)"),iKe=l(),gg=a("li"),pte=a("strong"),dKe=o("wav2vec2-conformer"),cKe=o(" \u2014 "),QS=a("a"),fKe=o("Wav2Vec2ConformerConfig"),mKe=o(" (Wav2Vec2-Conformer model)"),gKe=l(),hg=a("li"),_te=a("strong"),hKe=o("wavlm"),pKe=o(" \u2014 "),HS=a("a"),_Ke=o("WavLMConfig"),uKe=o(" (WavLM model)"),bKe=l(),pg=a("li"),ute=a("strong"),vKe=o("xglm"),FKe=o(" \u2014 "),US=a("a"),TKe=o("XGLMConfig"),MKe=o(" (XGLM model)"),EKe=l(),_g=a("li"),bte=a("strong"),CKe=o("xlm"),wKe=o(" \u2014 "),JS=a("a"),AKe=o("XLMConfig"),yKe=o(" (XLM model)"),LKe=l(),ug=a("li"),vte=a("strong"),xKe=o("xlm-prophetnet"),$Ke=o(" \u2014 "),YS=a("a"),kKe=o("XLMProphetNetConfig"),SKe=o(" (XLMProphetNet model)"),RKe=l(),bg=a("li"),Fte=a("strong"),PKe=o("xlm-roberta"),BKe=o(" \u2014 "),KS=a("a"),IKe=o("XLMRobertaConfig"),NKe=o(" (XLM-RoBERTa model)"),qKe=l(),vg=a("li"),Tte=a("strong"),jKe=o("xlm-roberta-xl"),DKe=o(" \u2014 "),ZS=a("a"),GKe=o("XLMRobertaXLConfig"),OKe=o(" (XLM-RoBERTa-XL model)"),VKe=l(),Fg=a("li"),Mte=a("strong"),XKe=o("xlnet"),zKe=o(" \u2014 "),eR=a("a"),WKe=o("XLNetConfig"),QKe=o(" (XLNet model)"),HKe=l(),Tg=a("li"),Ete=a("strong"),UKe=o("yolos"),JKe=o(" \u2014 "),oR=a("a"),YKe=o("YolosConfig"),KKe=o(" (YOLOS model)"),ZKe=l(),Mg=a("li"),Cte=a("strong"),eZe=o("yoso"),oZe=o(" \u2014 "),rR=a("a"),rZe=o("YosoConfig"),tZe=o(" (YOSO model)"),aZe=l(),F(Eg.$$.fragment),nZe=l(),Cg=a("div"),F(q6.$$.fragment),sZe=l(),wte=a("p"),lZe=o("Register a new configuration for this class."),Tqe=l(),Ti=a("h2"),wg=a("a"),Ate=a("span"),F(j6.$$.fragment),iZe=l(),yte=a("span"),dZe=o("AutoTokenizer"),Mqe=l(),wo=a("div"),F(D6.$$.fragment),cZe=l(),G6=a("p"),fZe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tR=a("a"),mZe=o("AutoTokenizer.from_pretrained()"),gZe=o(" class method."),hZe=l(),O6=a("p"),pZe=o("This class cannot be instantiated directly using "),Lte=a("code"),_Ze=o("__init__()"),uZe=o(" (throws an error)."),bZe=l(),Cr=a("div"),F(V6.$$.fragment),vZe=l(),xte=a("p"),FZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),TZe=l(),Aa=a("p"),MZe=o("The tokenizer class to instantiate is selected based on the "),$te=a("code"),EZe=o("model_type"),CZe=o(` property of the config object (either
passed as an argument or loaded from `),kte=a("code"),wZe=o("pretrained_model_name_or_path"),AZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ste=a("code"),yZe=o("pretrained_model_name_or_path"),LZe=o(":"),xZe=l(),k=a("ul"),Sn=a("li"),Rte=a("strong"),$Ze=o("albert"),kZe=o(" \u2014 "),aR=a("a"),SZe=o("AlbertTokenizer"),RZe=o(" or "),nR=a("a"),PZe=o("AlbertTokenizerFast"),BZe=o(" (ALBERT model)"),IZe=l(),Rn=a("li"),Pte=a("strong"),NZe=o("bart"),qZe=o(" \u2014 "),sR=a("a"),jZe=o("BartTokenizer"),DZe=o(" or "),lR=a("a"),GZe=o("BartTokenizerFast"),OZe=o(" (BART model)"),VZe=l(),Pn=a("li"),Bte=a("strong"),XZe=o("barthez"),zZe=o(" \u2014 "),iR=a("a"),WZe=o("BarthezTokenizer"),QZe=o(" or "),dR=a("a"),HZe=o("BarthezTokenizerFast"),UZe=o(" (BARThez model)"),JZe=l(),Ag=a("li"),Ite=a("strong"),YZe=o("bartpho"),KZe=o(" \u2014 "),cR=a("a"),ZZe=o("BartphoTokenizer"),eeo=o(" (BARTpho model)"),oeo=l(),Bn=a("li"),Nte=a("strong"),reo=o("bert"),teo=o(" \u2014 "),fR=a("a"),aeo=o("BertTokenizer"),neo=o(" or "),mR=a("a"),seo=o("BertTokenizerFast"),leo=o(" (BERT model)"),ieo=l(),yg=a("li"),qte=a("strong"),deo=o("bert-generation"),ceo=o(" \u2014 "),gR=a("a"),feo=o("BertGenerationTokenizer"),meo=o(" (Bert Generation model)"),geo=l(),Lg=a("li"),jte=a("strong"),heo=o("bert-japanese"),peo=o(" \u2014 "),hR=a("a"),_eo=o("BertJapaneseTokenizer"),ueo=o(" (BertJapanese model)"),beo=l(),xg=a("li"),Dte=a("strong"),veo=o("bertweet"),Feo=o(" \u2014 "),pR=a("a"),Teo=o("BertweetTokenizer"),Meo=o(" (Bertweet model)"),Eeo=l(),In=a("li"),Gte=a("strong"),Ceo=o("big_bird"),weo=o(" \u2014 "),_R=a("a"),Aeo=o("BigBirdTokenizer"),yeo=o(" or "),uR=a("a"),Leo=o("BigBirdTokenizerFast"),xeo=o(" (BigBird model)"),$eo=l(),Nn=a("li"),Ote=a("strong"),keo=o("bigbird_pegasus"),Seo=o(" \u2014 "),bR=a("a"),Reo=o("PegasusTokenizer"),Peo=o(" or "),vR=a("a"),Beo=o("PegasusTokenizerFast"),Ieo=o(" (BigBirdPegasus model)"),Neo=l(),qn=a("li"),Vte=a("strong"),qeo=o("blenderbot"),jeo=o(" \u2014 "),FR=a("a"),Deo=o("BlenderbotTokenizer"),Geo=o(" or "),TR=a("a"),Oeo=o("BlenderbotTokenizerFast"),Veo=o(" (Blenderbot model)"),Xeo=l(),$g=a("li"),Xte=a("strong"),zeo=o("blenderbot-small"),Weo=o(" \u2014 "),MR=a("a"),Qeo=o("BlenderbotSmallTokenizer"),Heo=o(" (BlenderbotSmall model)"),Ueo=l(),kg=a("li"),zte=a("strong"),Jeo=o("byt5"),Yeo=o(" \u2014 "),ER=a("a"),Keo=o("ByT5Tokenizer"),Zeo=o(" (ByT5 model)"),eoo=l(),jn=a("li"),Wte=a("strong"),ooo=o("camembert"),roo=o(" \u2014 "),CR=a("a"),too=o("CamembertTokenizer"),aoo=o(" or "),wR=a("a"),noo=o("CamembertTokenizerFast"),soo=o(" (CamemBERT model)"),loo=l(),Sg=a("li"),Qte=a("strong"),ioo=o("canine"),doo=o(" \u2014 "),AR=a("a"),coo=o("CanineTokenizer"),foo=o(" (Canine model)"),moo=l(),Dn=a("li"),Hte=a("strong"),goo=o("clip"),hoo=o(" \u2014 "),yR=a("a"),poo=o("CLIPTokenizer"),_oo=o(" or "),LR=a("a"),uoo=o("CLIPTokenizerFast"),boo=o(" (CLIP model)"),voo=l(),Gn=a("li"),Ute=a("strong"),Foo=o("convbert"),Too=o(" \u2014 "),xR=a("a"),Moo=o("ConvBertTokenizer"),Eoo=o(" or "),$R=a("a"),Coo=o("ConvBertTokenizerFast"),woo=o(" (ConvBERT model)"),Aoo=l(),On=a("li"),Jte=a("strong"),yoo=o("cpm"),Loo=o(" \u2014 "),kR=a("a"),xoo=o("CpmTokenizer"),$oo=o(" or "),SR=a("a"),koo=o("CpmTokenizerFast"),Soo=o(" (CPM model)"),Roo=l(),Rg=a("li"),Yte=a("strong"),Poo=o("ctrl"),Boo=o(" \u2014 "),RR=a("a"),Ioo=o("CTRLTokenizer"),Noo=o(" (CTRL model)"),qoo=l(),Vn=a("li"),Kte=a("strong"),joo=o("data2vec-text"),Doo=o(" \u2014 "),PR=a("a"),Goo=o("RobertaTokenizer"),Ooo=o(" or "),BR=a("a"),Voo=o("RobertaTokenizerFast"),Xoo=o(" (Data2VecText model)"),zoo=l(),Xn=a("li"),Zte=a("strong"),Woo=o("deberta"),Qoo=o(" \u2014 "),IR=a("a"),Hoo=o("DebertaTokenizer"),Uoo=o(" or "),NR=a("a"),Joo=o("DebertaTokenizerFast"),Yoo=o(" (DeBERTa model)"),Koo=l(),zn=a("li"),eae=a("strong"),Zoo=o("deberta-v2"),ero=o(" \u2014 "),qR=a("a"),oro=o("DebertaV2Tokenizer"),rro=o(" or "),jR=a("a"),tro=o("DebertaV2TokenizerFast"),aro=o(" (DeBERTa-v2 model)"),nro=l(),Wn=a("li"),oae=a("strong"),sro=o("distilbert"),lro=o(" \u2014 "),DR=a("a"),iro=o("DistilBertTokenizer"),dro=o(" or "),GR=a("a"),cro=o("DistilBertTokenizerFast"),fro=o(" (DistilBERT model)"),mro=l(),Qn=a("li"),rae=a("strong"),gro=o("dpr"),hro=o(" \u2014 "),OR=a("a"),pro=o("DPRQuestionEncoderTokenizer"),_ro=o(" or "),VR=a("a"),uro=o("DPRQuestionEncoderTokenizerFast"),bro=o(" (DPR model)"),vro=l(),Hn=a("li"),tae=a("strong"),Fro=o("electra"),Tro=o(" \u2014 "),XR=a("a"),Mro=o("ElectraTokenizer"),Ero=o(" or "),zR=a("a"),Cro=o("ElectraTokenizerFast"),wro=o(" (ELECTRA model)"),Aro=l(),Pg=a("li"),aae=a("strong"),yro=o("flaubert"),Lro=o(" \u2014 "),WR=a("a"),xro=o("FlaubertTokenizer"),$ro=o(" (FlauBERT model)"),kro=l(),Un=a("li"),nae=a("strong"),Sro=o("fnet"),Rro=o(" \u2014 "),QR=a("a"),Pro=o("FNetTokenizer"),Bro=o(" or "),HR=a("a"),Iro=o("FNetTokenizerFast"),Nro=o(" (FNet model)"),qro=l(),Bg=a("li"),sae=a("strong"),jro=o("fsmt"),Dro=o(" \u2014 "),UR=a("a"),Gro=o("FSMTTokenizer"),Oro=o(" (FairSeq Machine-Translation model)"),Vro=l(),Jn=a("li"),lae=a("strong"),Xro=o("funnel"),zro=o(" \u2014 "),JR=a("a"),Wro=o("FunnelTokenizer"),Qro=o(" or "),YR=a("a"),Hro=o("FunnelTokenizerFast"),Uro=o(" (Funnel Transformer model)"),Jro=l(),Yn=a("li"),iae=a("strong"),Yro=o("gpt2"),Kro=o(" \u2014 "),KR=a("a"),Zro=o("GPT2Tokenizer"),eto=o(" or "),ZR=a("a"),oto=o("GPT2TokenizerFast"),rto=o(" (OpenAI GPT-2 model)"),tto=l(),Kn=a("li"),dae=a("strong"),ato=o("gpt_neo"),nto=o(" \u2014 "),eP=a("a"),sto=o("GPT2Tokenizer"),lto=o(" or "),oP=a("a"),ito=o("GPT2TokenizerFast"),dto=o(" (GPT Neo model)"),cto=l(),Ig=a("li"),cae=a("strong"),fto=o("gpt_neox"),mto=o(" \u2014 "),rP=a("a"),gto=o("GPTNeoXTokenizerFast"),hto=o(" (GPT NeoX model)"),pto=l(),Zn=a("li"),fae=a("strong"),_to=o("gptj"),uto=o(" \u2014 "),tP=a("a"),bto=o("GPT2Tokenizer"),vto=o(" or "),aP=a("a"),Fto=o("GPT2TokenizerFast"),Tto=o(" (GPT-J model)"),Mto=l(),es=a("li"),mae=a("strong"),Eto=o("herbert"),Cto=o(" \u2014 "),nP=a("a"),wto=o("HerbertTokenizer"),Ato=o(" or "),sP=a("a"),yto=o("HerbertTokenizerFast"),Lto=o(" (HerBERT model)"),xto=l(),Ng=a("li"),gae=a("strong"),$to=o("hubert"),kto=o(" \u2014 "),lP=a("a"),Sto=o("Wav2Vec2CTCTokenizer"),Rto=o(" (Hubert model)"),Pto=l(),os=a("li"),hae=a("strong"),Bto=o("ibert"),Ito=o(" \u2014 "),iP=a("a"),Nto=o("RobertaTokenizer"),qto=o(" or "),dP=a("a"),jto=o("RobertaTokenizerFast"),Dto=o(" (I-BERT model)"),Gto=l(),rs=a("li"),pae=a("strong"),Oto=o("layoutlm"),Vto=o(" \u2014 "),cP=a("a"),Xto=o("LayoutLMTokenizer"),zto=o(" or "),fP=a("a"),Wto=o("LayoutLMTokenizerFast"),Qto=o(" (LayoutLM model)"),Hto=l(),ts=a("li"),_ae=a("strong"),Uto=o("layoutlmv2"),Jto=o(" \u2014 "),mP=a("a"),Yto=o("LayoutLMv2Tokenizer"),Kto=o(" or "),gP=a("a"),Zto=o("LayoutLMv2TokenizerFast"),eao=o(" (LayoutLMv2 model)"),oao=l(),as=a("li"),uae=a("strong"),rao=o("layoutlmv3"),tao=o(" \u2014 "),hP=a("a"),aao=o("LayoutLMv3Tokenizer"),nao=o(" or "),pP=a("a"),sao=o("LayoutLMv3TokenizerFast"),lao=o(" (LayoutLMv3 model)"),iao=l(),ns=a("li"),bae=a("strong"),dao=o("layoutxlm"),cao=o(" \u2014 "),_P=a("a"),fao=o("LayoutXLMTokenizer"),mao=o(" or "),uP=a("a"),gao=o("LayoutXLMTokenizerFast"),hao=o(" (LayoutXLM model)"),pao=l(),ss=a("li"),vae=a("strong"),_ao=o("led"),uao=o(" \u2014 "),bP=a("a"),bao=o("LEDTokenizer"),vao=o(" or "),vP=a("a"),Fao=o("LEDTokenizerFast"),Tao=o(" (LED model)"),Mao=l(),ls=a("li"),Fae=a("strong"),Eao=o("longformer"),Cao=o(" \u2014 "),FP=a("a"),wao=o("LongformerTokenizer"),Aao=o(" or "),TP=a("a"),yao=o("LongformerTokenizerFast"),Lao=o(" (Longformer model)"),xao=l(),qg=a("li"),Tae=a("strong"),$ao=o("luke"),kao=o(" \u2014 "),MP=a("a"),Sao=o("LukeTokenizer"),Rao=o(" (LUKE model)"),Pao=l(),is=a("li"),Mae=a("strong"),Bao=o("lxmert"),Iao=o(" \u2014 "),EP=a("a"),Nao=o("LxmertTokenizer"),qao=o(" or "),CP=a("a"),jao=o("LxmertTokenizerFast"),Dao=o(" (LXMERT model)"),Gao=l(),jg=a("li"),Eae=a("strong"),Oao=o("m2m_100"),Vao=o(" \u2014 "),wP=a("a"),Xao=o("M2M100Tokenizer"),zao=o(" (M2M100 model)"),Wao=l(),Dg=a("li"),Cae=a("strong"),Qao=o("marian"),Hao=o(" \u2014 "),AP=a("a"),Uao=o("MarianTokenizer"),Jao=o(" (Marian model)"),Yao=l(),ds=a("li"),wae=a("strong"),Kao=o("mbart"),Zao=o(" \u2014 "),yP=a("a"),eno=o("MBartTokenizer"),ono=o(" or "),LP=a("a"),rno=o("MBartTokenizerFast"),tno=o(" (mBART model)"),ano=l(),cs=a("li"),Aae=a("strong"),nno=o("mbart50"),sno=o(" \u2014 "),xP=a("a"),lno=o("MBart50Tokenizer"),ino=o(" or "),$P=a("a"),dno=o("MBart50TokenizerFast"),cno=o(" (mBART-50 model)"),fno=l(),fs=a("li"),yae=a("strong"),mno=o("megatron-bert"),gno=o(" \u2014 "),kP=a("a"),hno=o("BertTokenizer"),pno=o(" or "),SP=a("a"),_no=o("BertTokenizerFast"),uno=o(" (MegatronBert model)"),bno=l(),Gg=a("li"),Lae=a("strong"),vno=o("mluke"),Fno=o(" \u2014 "),RP=a("a"),Tno=o("MLukeTokenizer"),Mno=o(" (mLUKE model)"),Eno=l(),ms=a("li"),xae=a("strong"),Cno=o("mobilebert"),wno=o(" \u2014 "),PP=a("a"),Ano=o("MobileBertTokenizer"),yno=o(" or "),BP=a("a"),Lno=o("MobileBertTokenizerFast"),xno=o(" (MobileBERT model)"),$no=l(),gs=a("li"),$ae=a("strong"),kno=o("mpnet"),Sno=o(" \u2014 "),IP=a("a"),Rno=o("MPNetTokenizer"),Pno=o(" or "),NP=a("a"),Bno=o("MPNetTokenizerFast"),Ino=o(" (MPNet model)"),Nno=l(),hs=a("li"),kae=a("strong"),qno=o("mt5"),jno=o(" \u2014 "),qP=a("a"),Dno=o("MT5Tokenizer"),Gno=o(" or "),jP=a("a"),Ono=o("MT5TokenizerFast"),Vno=o(" (mT5 model)"),Xno=l(),ps=a("li"),Sae=a("strong"),zno=o("nystromformer"),Wno=o(" \u2014 "),DP=a("a"),Qno=o("AlbertTokenizer"),Hno=o(" or "),GP=a("a"),Uno=o("AlbertTokenizerFast"),Jno=o(" (Nystromformer model)"),Yno=l(),_s=a("li"),Rae=a("strong"),Kno=o("openai-gpt"),Zno=o(" \u2014 "),OP=a("a"),eso=o("OpenAIGPTTokenizer"),oso=o(" or "),VP=a("a"),rso=o("OpenAIGPTTokenizerFast"),tso=o(" (OpenAI GPT model)"),aso=l(),Og=a("li"),Pae=a("strong"),nso=o("opt"),sso=o(" \u2014 "),XP=a("a"),lso=o("GPT2Tokenizer"),iso=o(" (OPT model)"),dso=l(),us=a("li"),Bae=a("strong"),cso=o("pegasus"),fso=o(" \u2014 "),zP=a("a"),mso=o("PegasusTokenizer"),gso=o(" or "),WP=a("a"),hso=o("PegasusTokenizerFast"),pso=o(" (Pegasus model)"),_so=l(),Vg=a("li"),Iae=a("strong"),uso=o("perceiver"),bso=o(" \u2014 "),QP=a("a"),vso=o("PerceiverTokenizer"),Fso=o(" (Perceiver model)"),Tso=l(),Xg=a("li"),Nae=a("strong"),Mso=o("phobert"),Eso=o(" \u2014 "),HP=a("a"),Cso=o("PhobertTokenizer"),wso=o(" (PhoBERT model)"),Aso=l(),zg=a("li"),qae=a("strong"),yso=o("plbart"),Lso=o(" \u2014 "),UP=a("a"),xso=o("PLBartTokenizer"),$so=o(" (PLBart model)"),kso=l(),Wg=a("li"),jae=a("strong"),Sso=o("prophetnet"),Rso=o(" \u2014 "),JP=a("a"),Pso=o("ProphetNetTokenizer"),Bso=o(" (ProphetNet model)"),Iso=l(),bs=a("li"),Dae=a("strong"),Nso=o("qdqbert"),qso=o(" \u2014 "),YP=a("a"),jso=o("BertTokenizer"),Dso=o(" or "),KP=a("a"),Gso=o("BertTokenizerFast"),Oso=o(" (QDQBert model)"),Vso=l(),Qg=a("li"),Gae=a("strong"),Xso=o("rag"),zso=o(" \u2014 "),ZP=a("a"),Wso=o("RagTokenizer"),Qso=o(" (RAG model)"),Hso=l(),vs=a("li"),Oae=a("strong"),Uso=o("realm"),Jso=o(" \u2014 "),eB=a("a"),Yso=o("RealmTokenizer"),Kso=o(" or "),oB=a("a"),Zso=o("RealmTokenizerFast"),elo=o(" (Realm model)"),olo=l(),Fs=a("li"),Vae=a("strong"),rlo=o("reformer"),tlo=o(" \u2014 "),rB=a("a"),alo=o("ReformerTokenizer"),nlo=o(" or "),tB=a("a"),slo=o("ReformerTokenizerFast"),llo=o(" (Reformer model)"),ilo=l(),Ts=a("li"),Xae=a("strong"),dlo=o("rembert"),clo=o(" \u2014 "),aB=a("a"),flo=o("RemBertTokenizer"),mlo=o(" or "),nB=a("a"),glo=o("RemBertTokenizerFast"),hlo=o(" (RemBERT model)"),plo=l(),Ms=a("li"),zae=a("strong"),_lo=o("retribert"),ulo=o(" \u2014 "),sB=a("a"),blo=o("RetriBertTokenizer"),vlo=o(" or "),lB=a("a"),Flo=o("RetriBertTokenizerFast"),Tlo=o(" (RetriBERT model)"),Mlo=l(),Es=a("li"),Wae=a("strong"),Elo=o("roberta"),Clo=o(" \u2014 "),iB=a("a"),wlo=o("RobertaTokenizer"),Alo=o(" or "),dB=a("a"),ylo=o("RobertaTokenizerFast"),Llo=o(" (RoBERTa model)"),xlo=l(),Cs=a("li"),Qae=a("strong"),$lo=o("roformer"),klo=o(" \u2014 "),cB=a("a"),Slo=o("RoFormerTokenizer"),Rlo=o(" or "),fB=a("a"),Plo=o("RoFormerTokenizerFast"),Blo=o(" (RoFormer model)"),Ilo=l(),Hg=a("li"),Hae=a("strong"),Nlo=o("speech_to_text"),qlo=o(" \u2014 "),mB=a("a"),jlo=o("Speech2TextTokenizer"),Dlo=o(" (Speech2Text model)"),Glo=l(),Ug=a("li"),Uae=a("strong"),Olo=o("speech_to_text_2"),Vlo=o(" \u2014 "),gB=a("a"),Xlo=o("Speech2Text2Tokenizer"),zlo=o(" (Speech2Text2 model)"),Wlo=l(),ws=a("li"),Jae=a("strong"),Qlo=o("splinter"),Hlo=o(" \u2014 "),hB=a("a"),Ulo=o("SplinterTokenizer"),Jlo=o(" or "),pB=a("a"),Ylo=o("SplinterTokenizerFast"),Klo=o(" (Splinter model)"),Zlo=l(),As=a("li"),Yae=a("strong"),eio=o("squeezebert"),oio=o(" \u2014 "),_B=a("a"),rio=o("SqueezeBertTokenizer"),tio=o(" or "),uB=a("a"),aio=o("SqueezeBertTokenizerFast"),nio=o(" (SqueezeBERT model)"),sio=l(),ys=a("li"),Kae=a("strong"),lio=o("t5"),iio=o(" \u2014 "),bB=a("a"),dio=o("T5Tokenizer"),cio=o(" or "),vB=a("a"),fio=o("T5TokenizerFast"),mio=o(" (T5 model)"),gio=l(),Jg=a("li"),Zae=a("strong"),hio=o("tapas"),pio=o(" \u2014 "),FB=a("a"),_io=o("TapasTokenizer"),uio=o(" (TAPAS model)"),bio=l(),Yg=a("li"),ene=a("strong"),vio=o("tapex"),Fio=o(" \u2014 "),TB=a("a"),Tio=o("TapexTokenizer"),Mio=o(" (TAPEX model)"),Eio=l(),Kg=a("li"),one=a("strong"),Cio=o("transfo-xl"),wio=o(" \u2014 "),MB=a("a"),Aio=o("TransfoXLTokenizer"),yio=o(" (Transformer-XL model)"),Lio=l(),Ls=a("li"),rne=a("strong"),xio=o("visual_bert"),$io=o(" \u2014 "),EB=a("a"),kio=o("BertTokenizer"),Sio=o(" or "),CB=a("a"),Rio=o("BertTokenizerFast"),Pio=o(" (VisualBert model)"),Bio=l(),Zg=a("li"),tne=a("strong"),Iio=o("wav2vec2"),Nio=o(" \u2014 "),wB=a("a"),qio=o("Wav2Vec2CTCTokenizer"),jio=o(" (Wav2Vec2 model)"),Dio=l(),eh=a("li"),ane=a("strong"),Gio=o("wav2vec2-conformer"),Oio=o(" \u2014 "),AB=a("a"),Vio=o("Wav2Vec2CTCTokenizer"),Xio=o(" (Wav2Vec2-Conformer model)"),zio=l(),oh=a("li"),nne=a("strong"),Wio=o("wav2vec2_phoneme"),Qio=o(" \u2014 "),yB=a("a"),Hio=o("Wav2Vec2PhonemeCTCTokenizer"),Uio=o(" (Wav2Vec2Phoneme model)"),Jio=l(),xs=a("li"),sne=a("strong"),Yio=o("xglm"),Kio=o(" \u2014 "),LB=a("a"),Zio=o("XGLMTokenizer"),edo=o(" or "),xB=a("a"),odo=o("XGLMTokenizerFast"),rdo=o(" (XGLM model)"),tdo=l(),rh=a("li"),lne=a("strong"),ado=o("xlm"),ndo=o(" \u2014 "),$B=a("a"),sdo=o("XLMTokenizer"),ldo=o(" (XLM model)"),ido=l(),th=a("li"),ine=a("strong"),ddo=o("xlm-prophetnet"),cdo=o(" \u2014 "),kB=a("a"),fdo=o("XLMProphetNetTokenizer"),mdo=o(" (XLMProphetNet model)"),gdo=l(),$s=a("li"),dne=a("strong"),hdo=o("xlm-roberta"),pdo=o(" \u2014 "),SB=a("a"),_do=o("XLMRobertaTokenizer"),udo=o(" or "),RB=a("a"),bdo=o("XLMRobertaTokenizerFast"),vdo=o(" (XLM-RoBERTa model)"),Fdo=l(),ks=a("li"),cne=a("strong"),Tdo=o("xlm-roberta-xl"),Mdo=o(" \u2014 "),PB=a("a"),Edo=o("RobertaTokenizer"),Cdo=o(" or "),BB=a("a"),wdo=o("RobertaTokenizerFast"),Ado=o(" (XLM-RoBERTa-XL model)"),ydo=l(),Ss=a("li"),fne=a("strong"),Ldo=o("xlnet"),xdo=o(" \u2014 "),IB=a("a"),$do=o("XLNetTokenizer"),kdo=o(" or "),NB=a("a"),Sdo=o("XLNetTokenizerFast"),Rdo=o(" (XLNet model)"),Pdo=l(),Rs=a("li"),mne=a("strong"),Bdo=o("yoso"),Ido=o(" \u2014 "),qB=a("a"),Ndo=o("AlbertTokenizer"),qdo=o(" or "),jB=a("a"),jdo=o("AlbertTokenizerFast"),Ddo=o(" (YOSO model)"),Gdo=l(),F(ah.$$.fragment),Odo=l(),nh=a("div"),F(X6.$$.fragment),Vdo=l(),gne=a("p"),Xdo=o("Register a new tokenizer in this mapping."),Eqe=l(),Mi=a("h2"),sh=a("a"),hne=a("span"),F(z6.$$.fragment),zdo=l(),pne=a("span"),Wdo=o("AutoFeatureExtractor"),Cqe=l(),Ao=a("div"),F(W6.$$.fragment),Qdo=l(),Q6=a("p"),Hdo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),DB=a("a"),Udo=o("AutoFeatureExtractor.from_pretrained()"),Jdo=o(" class method."),Ydo=l(),H6=a("p"),Kdo=o("This class cannot be instantiated directly using "),_ne=a("code"),Zdo=o("__init__()"),eco=o(" (throws an error)."),oco=l(),He=a("div"),F(U6.$$.fragment),rco=l(),une=a("p"),tco=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),aco=l(),ya=a("p"),nco=o("The feature extractor class to instantiate is selected based on the "),bne=a("code"),sco=o("model_type"),lco=o(` property of the config object
(either passed as an argument or loaded from `),vne=a("code"),ico=o("pretrained_model_name_or_path"),dco=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Fne=a("code"),cco=o("pretrained_model_name_or_path"),fco=o(":"),mco=l(),Y=a("ul"),lh=a("li"),Tne=a("strong"),gco=o("beit"),hco=o(" \u2014 "),GB=a("a"),pco=o("BeitFeatureExtractor"),_co=o(" (BEiT model)"),uco=l(),ih=a("li"),Mne=a("strong"),bco=o("clip"),vco=o(" \u2014 "),OB=a("a"),Fco=o("CLIPFeatureExtractor"),Tco=o(" (CLIP model)"),Mco=l(),dh=a("li"),Ene=a("strong"),Eco=o("convnext"),Cco=o(" \u2014 "),VB=a("a"),wco=o("ConvNextFeatureExtractor"),Aco=o(" (ConvNext model)"),yco=l(),ch=a("li"),Cne=a("strong"),Lco=o("cvt"),xco=o(" \u2014 "),XB=a("a"),$co=o("ConvNextFeatureExtractor"),kco=o(" (CvT model)"),Sco=l(),fh=a("li"),wne=a("strong"),Rco=o("data2vec-audio"),Pco=o(" \u2014 "),zB=a("a"),Bco=o("Wav2Vec2FeatureExtractor"),Ico=o(" (Data2VecAudio model)"),Nco=l(),mh=a("li"),Ane=a("strong"),qco=o("data2vec-vision"),jco=o(" \u2014 "),WB=a("a"),Dco=o("BeitFeatureExtractor"),Gco=o(" (Data2VecVision model)"),Oco=l(),gh=a("li"),yne=a("strong"),Vco=o("deit"),Xco=o(" \u2014 "),QB=a("a"),zco=o("DeiTFeatureExtractor"),Wco=o(" (DeiT model)"),Qco=l(),hh=a("li"),Lne=a("strong"),Hco=o("detr"),Uco=o(" \u2014 "),HB=a("a"),Jco=o("DetrFeatureExtractor"),Yco=o(" (DETR model)"),Kco=l(),ph=a("li"),xne=a("strong"),Zco=o("dpt"),efo=o(" \u2014 "),UB=a("a"),ofo=o("DPTFeatureExtractor"),rfo=o(" (DPT model)"),tfo=l(),_h=a("li"),$ne=a("strong"),afo=o("flava"),nfo=o(" \u2014 "),JB=a("a"),sfo=o("FlavaFeatureExtractor"),lfo=o(" (Flava model)"),ifo=l(),uh=a("li"),kne=a("strong"),dfo=o("glpn"),cfo=o(" \u2014 "),YB=a("a"),ffo=o("GLPNFeatureExtractor"),mfo=o(" (GLPN model)"),gfo=l(),bh=a("li"),Sne=a("strong"),hfo=o("hubert"),pfo=o(" \u2014 "),KB=a("a"),_fo=o("Wav2Vec2FeatureExtractor"),ufo=o(" (Hubert model)"),bfo=l(),vh=a("li"),Rne=a("strong"),vfo=o("imagegpt"),Ffo=o(" \u2014 "),ZB=a("a"),Tfo=o("ImageGPTFeatureExtractor"),Mfo=o(" (ImageGPT model)"),Efo=l(),Fh=a("li"),Pne=a("strong"),Cfo=o("layoutlmv2"),wfo=o(" \u2014 "),eI=a("a"),Afo=o("LayoutLMv2FeatureExtractor"),yfo=o(" (LayoutLMv2 model)"),Lfo=l(),Th=a("li"),Bne=a("strong"),xfo=o("layoutlmv3"),$fo=o(" \u2014 "),oI=a("a"),kfo=o("LayoutLMv3FeatureExtractor"),Sfo=o(" (LayoutLMv3 model)"),Rfo=l(),Mh=a("li"),Ine=a("strong"),Pfo=o("maskformer"),Bfo=o(" \u2014 "),rI=a("a"),Ifo=o("MaskFormerFeatureExtractor"),Nfo=o(" (MaskFormer model)"),qfo=l(),Eh=a("li"),Nne=a("strong"),jfo=o("perceiver"),Dfo=o(" \u2014 "),tI=a("a"),Gfo=o("PerceiverFeatureExtractor"),Ofo=o(" (Perceiver model)"),Vfo=l(),Ch=a("li"),qne=a("strong"),Xfo=o("poolformer"),zfo=o(" \u2014 "),aI=a("a"),Wfo=o("PoolFormerFeatureExtractor"),Qfo=o(" (PoolFormer model)"),Hfo=l(),wh=a("li"),jne=a("strong"),Ufo=o("regnet"),Jfo=o(" \u2014 "),nI=a("a"),Yfo=o("ConvNextFeatureExtractor"),Kfo=o(" (RegNet model)"),Zfo=l(),Ah=a("li"),Dne=a("strong"),emo=o("resnet"),omo=o(" \u2014 "),sI=a("a"),rmo=o("ConvNextFeatureExtractor"),tmo=o(" (ResNet model)"),amo=l(),yh=a("li"),Gne=a("strong"),nmo=o("segformer"),smo=o(" \u2014 "),lI=a("a"),lmo=o("SegformerFeatureExtractor"),imo=o(" (SegFormer model)"),dmo=l(),Lh=a("li"),One=a("strong"),cmo=o("speech_to_text"),fmo=o(" \u2014 "),iI=a("a"),mmo=o("Speech2TextFeatureExtractor"),gmo=o(" (Speech2Text model)"),hmo=l(),xh=a("li"),Vne=a("strong"),pmo=o("swin"),_mo=o(" \u2014 "),dI=a("a"),umo=o("ViTFeatureExtractor"),bmo=o(" (Swin model)"),vmo=l(),$h=a("li"),Xne=a("strong"),Fmo=o("van"),Tmo=o(" \u2014 "),cI=a("a"),Mmo=o("ConvNextFeatureExtractor"),Emo=o(" (VAN model)"),Cmo=l(),kh=a("li"),zne=a("strong"),wmo=o("vit"),Amo=o(" \u2014 "),fI=a("a"),ymo=o("ViTFeatureExtractor"),Lmo=o(" (ViT model)"),xmo=l(),Sh=a("li"),Wne=a("strong"),$mo=o("vit_mae"),kmo=o(" \u2014 "),mI=a("a"),Smo=o("ViTFeatureExtractor"),Rmo=o(" (ViTMAE model)"),Pmo=l(),Rh=a("li"),Qne=a("strong"),Bmo=o("wav2vec2"),Imo=o(" \u2014 "),gI=a("a"),Nmo=o("Wav2Vec2FeatureExtractor"),qmo=o(" (Wav2Vec2 model)"),jmo=l(),Ph=a("li"),Hne=a("strong"),Dmo=o("wav2vec2-conformer"),Gmo=o(" \u2014 "),hI=a("a"),Omo=o("Wav2Vec2FeatureExtractor"),Vmo=o(" (Wav2Vec2-Conformer model)"),Xmo=l(),Bh=a("li"),Une=a("strong"),zmo=o("yolos"),Wmo=o(" \u2014 "),pI=a("a"),Qmo=o("YolosFeatureExtractor"),Hmo=o(" (YOLOS model)"),Umo=l(),F(Ih.$$.fragment),Jmo=l(),F(Nh.$$.fragment),Ymo=l(),qh=a("div"),F(J6.$$.fragment),Kmo=l(),Jne=a("p"),Zmo=o("Register a new feature extractor for this class."),wqe=l(),Ei=a("h2"),jh=a("a"),Yne=a("span"),F(Y6.$$.fragment),ego=l(),Kne=a("span"),ogo=o("AutoProcessor"),Aqe=l(),yo=a("div"),F(K6.$$.fragment),rgo=l(),Z6=a("p"),tgo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),_I=a("a"),ago=o("AutoProcessor.from_pretrained()"),ngo=o(" class method."),sgo=l(),eA=a("p"),lgo=o("This class cannot be instantiated directly using "),Zne=a("code"),igo=o("__init__()"),dgo=o(" (throws an error)."),cgo=l(),Ue=a("div"),F(oA.$$.fragment),fgo=l(),ese=a("p"),mgo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ggo=l(),Ci=a("p"),hgo=o("The processor class to instantiate is selected based on the "),ose=a("code"),pgo=o("model_type"),_go=o(` property of the config object (either
passed as an argument or loaded from `),rse=a("code"),ugo=o("pretrained_model_name_or_path"),bgo=o(" if possible):"),vgo=l(),he=a("ul"),Dh=a("li"),tse=a("strong"),Fgo=o("clip"),Tgo=o(" \u2014 "),uI=a("a"),Mgo=o("CLIPProcessor"),Ego=o(" (CLIP model)"),Cgo=l(),Gh=a("li"),ase=a("strong"),wgo=o("flava"),Ago=o(" \u2014 "),nse=a("code"),ygo=o("FLAVAProcessor"),Lgo=o(" (Flava model)"),xgo=l(),Oh=a("li"),sse=a("strong"),$go=o("layoutlmv2"),kgo=o(" \u2014 "),bI=a("a"),Sgo=o("LayoutLMv2Processor"),Rgo=o(" (LayoutLMv2 model)"),Pgo=l(),Vh=a("li"),lse=a("strong"),Bgo=o("layoutlmv3"),Igo=o(" \u2014 "),vI=a("a"),Ngo=o("LayoutLMv3Processor"),qgo=o(" (LayoutLMv3 model)"),jgo=l(),Xh=a("li"),ise=a("strong"),Dgo=o("layoutxlm"),Ggo=o(" \u2014 "),FI=a("a"),Ogo=o("LayoutXLMProcessor"),Vgo=o(" (LayoutXLM model)"),Xgo=l(),zh=a("li"),dse=a("strong"),zgo=o("sew"),Wgo=o(" \u2014 "),TI=a("a"),Qgo=o("Wav2Vec2Processor"),Hgo=o(" (SEW model)"),Ugo=l(),Wh=a("li"),cse=a("strong"),Jgo=o("sew-d"),Ygo=o(" \u2014 "),MI=a("a"),Kgo=o("Wav2Vec2Processor"),Zgo=o(" (SEW-D model)"),eho=l(),Qh=a("li"),fse=a("strong"),oho=o("speech_to_text"),rho=o(" \u2014 "),EI=a("a"),tho=o("Speech2TextProcessor"),aho=o(" (Speech2Text model)"),nho=l(),Hh=a("li"),mse=a("strong"),sho=o("speech_to_text_2"),lho=o(" \u2014 "),CI=a("a"),iho=o("Speech2Text2Processor"),dho=o(" (Speech2Text2 model)"),cho=l(),Uh=a("li"),gse=a("strong"),fho=o("trocr"),mho=o(" \u2014 "),wI=a("a"),gho=o("TrOCRProcessor"),hho=o(" (TrOCR model)"),pho=l(),Jh=a("li"),hse=a("strong"),_ho=o("unispeech"),uho=o(" \u2014 "),AI=a("a"),bho=o("Wav2Vec2Processor"),vho=o(" (UniSpeech model)"),Fho=l(),Yh=a("li"),pse=a("strong"),Tho=o("unispeech-sat"),Mho=o(" \u2014 "),yI=a("a"),Eho=o("Wav2Vec2Processor"),Cho=o(" (UniSpeechSat model)"),who=l(),Kh=a("li"),_se=a("strong"),Aho=o("vilt"),yho=o(" \u2014 "),LI=a("a"),Lho=o("ViltProcessor"),xho=o(" (ViLT model)"),$ho=l(),Zh=a("li"),use=a("strong"),kho=o("vision-text-dual-encoder"),Sho=o(" \u2014 "),xI=a("a"),Rho=o("VisionTextDualEncoderProcessor"),Pho=o(" (VisionTextDualEncoder model)"),Bho=l(),ep=a("li"),bse=a("strong"),Iho=o("wav2vec2"),Nho=o(" \u2014 "),$I=a("a"),qho=o("Wav2Vec2Processor"),jho=o(" (Wav2Vec2 model)"),Dho=l(),op=a("li"),vse=a("strong"),Gho=o("wav2vec2-conformer"),Oho=o(" \u2014 "),kI=a("a"),Vho=o("Wav2Vec2Processor"),Xho=o(" (Wav2Vec2-Conformer model)"),zho=l(),rp=a("li"),Fse=a("strong"),Who=o("wavlm"),Qho=o(" \u2014 "),SI=a("a"),Hho=o("Wav2Vec2Processor"),Uho=o(" (WavLM model)"),Jho=l(),F(tp.$$.fragment),Yho=l(),F(ap.$$.fragment),Kho=l(),np=a("div"),F(rA.$$.fragment),Zho=l(),Tse=a("p"),epo=o("Register a new processor for this class."),yqe=l(),wi=a("h2"),sp=a("a"),Mse=a("span"),F(tA.$$.fragment),opo=l(),Ese=a("span"),rpo=o("AutoModel"),Lqe=l(),Lo=a("div"),F(aA.$$.fragment),tpo=l(),Ai=a("p"),apo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),RI=a("a"),npo=o("from_pretrained()"),spo=o(" class method or the "),PI=a("a"),lpo=o("from_config()"),ipo=o(` class
method.`),dpo=l(),nA=a("p"),cpo=o("This class cannot be instantiated directly using "),Cse=a("code"),fpo=o("__init__()"),mpo=o(" (throws an error)."),gpo=l(),tt=a("div"),F(sA.$$.fragment),hpo=l(),wse=a("p"),ppo=o("Instantiates one of the base model classes of the library from a configuration."),_po=l(),yi=a("p"),upo=o(`Note:
Loading a model from its configuration file does `),Ase=a("strong"),bpo=o("not"),vpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BI=a("a"),Fpo=o("from_pretrained()"),Tpo=o(" to load the model weights."),Mpo=l(),F(lp.$$.fragment),Epo=l(),Je=a("div"),F(lA.$$.fragment),Cpo=l(),yse=a("p"),wpo=o("Instantiate one of the base model classes of the library from a pretrained model."),Apo=l(),La=a("p"),ypo=o("The model class to instantiate is selected based on the "),Lse=a("code"),Lpo=o("model_type"),xpo=o(` property of the config object (either
passed as an argument or loaded from `),xse=a("code"),$po=o("pretrained_model_name_or_path"),kpo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$se=a("code"),Spo=o("pretrained_model_name_or_path"),Rpo=o(":"),Ppo=l(),x=a("ul"),ip=a("li"),kse=a("strong"),Bpo=o("albert"),Ipo=o(" \u2014 "),II=a("a"),Npo=o("AlbertModel"),qpo=o(" (ALBERT model)"),jpo=l(),dp=a("li"),Sse=a("strong"),Dpo=o("bart"),Gpo=o(" \u2014 "),NI=a("a"),Opo=o("BartModel"),Vpo=o(" (BART model)"),Xpo=l(),cp=a("li"),Rse=a("strong"),zpo=o("beit"),Wpo=o(" \u2014 "),qI=a("a"),Qpo=o("BeitModel"),Hpo=o(" (BEiT model)"),Upo=l(),fp=a("li"),Pse=a("strong"),Jpo=o("bert"),Ypo=o(" \u2014 "),jI=a("a"),Kpo=o("BertModel"),Zpo=o(" (BERT model)"),e_o=l(),mp=a("li"),Bse=a("strong"),o_o=o("bert-generation"),r_o=o(" \u2014 "),DI=a("a"),t_o=o("BertGenerationEncoder"),a_o=o(" (Bert Generation model)"),n_o=l(),gp=a("li"),Ise=a("strong"),s_o=o("big_bird"),l_o=o(" \u2014 "),GI=a("a"),i_o=o("BigBirdModel"),d_o=o(" (BigBird model)"),c_o=l(),hp=a("li"),Nse=a("strong"),f_o=o("bigbird_pegasus"),m_o=o(" \u2014 "),OI=a("a"),g_o=o("BigBirdPegasusModel"),h_o=o(" (BigBirdPegasus model)"),p_o=l(),pp=a("li"),qse=a("strong"),__o=o("blenderbot"),u_o=o(" \u2014 "),VI=a("a"),b_o=o("BlenderbotModel"),v_o=o(" (Blenderbot model)"),F_o=l(),_p=a("li"),jse=a("strong"),T_o=o("blenderbot-small"),M_o=o(" \u2014 "),XI=a("a"),E_o=o("BlenderbotSmallModel"),C_o=o(" (BlenderbotSmall model)"),w_o=l(),up=a("li"),Dse=a("strong"),A_o=o("camembert"),y_o=o(" \u2014 "),zI=a("a"),L_o=o("CamembertModel"),x_o=o(" (CamemBERT model)"),$_o=l(),bp=a("li"),Gse=a("strong"),k_o=o("canine"),S_o=o(" \u2014 "),WI=a("a"),R_o=o("CanineModel"),P_o=o(" (Canine model)"),B_o=l(),vp=a("li"),Ose=a("strong"),I_o=o("clip"),N_o=o(" \u2014 "),QI=a("a"),q_o=o("CLIPModel"),j_o=o(" (CLIP model)"),D_o=l(),Fp=a("li"),Vse=a("strong"),G_o=o("convbert"),O_o=o(" \u2014 "),HI=a("a"),V_o=o("ConvBertModel"),X_o=o(" (ConvBERT model)"),z_o=l(),Tp=a("li"),Xse=a("strong"),W_o=o("convnext"),Q_o=o(" \u2014 "),UI=a("a"),H_o=o("ConvNextModel"),U_o=o(" (ConvNext model)"),J_o=l(),Mp=a("li"),zse=a("strong"),Y_o=o("ctrl"),K_o=o(" \u2014 "),JI=a("a"),Z_o=o("CTRLModel"),euo=o(" (CTRL model)"),ouo=l(),Ep=a("li"),Wse=a("strong"),ruo=o("cvt"),tuo=o(" \u2014 "),YI=a("a"),auo=o("CvtModel"),nuo=o(" (CvT model)"),suo=l(),Cp=a("li"),Qse=a("strong"),luo=o("data2vec-audio"),iuo=o(" \u2014 "),KI=a("a"),duo=o("Data2VecAudioModel"),cuo=o(" (Data2VecAudio model)"),fuo=l(),wp=a("li"),Hse=a("strong"),muo=o("data2vec-text"),guo=o(" \u2014 "),ZI=a("a"),huo=o("Data2VecTextModel"),puo=o(" (Data2VecText model)"),_uo=l(),Ap=a("li"),Use=a("strong"),uuo=o("data2vec-vision"),buo=o(" \u2014 "),eN=a("a"),vuo=o("Data2VecVisionModel"),Fuo=o(" (Data2VecVision model)"),Tuo=l(),yp=a("li"),Jse=a("strong"),Muo=o("deberta"),Euo=o(" \u2014 "),oN=a("a"),Cuo=o("DebertaModel"),wuo=o(" (DeBERTa model)"),Auo=l(),Lp=a("li"),Yse=a("strong"),yuo=o("deberta-v2"),Luo=o(" \u2014 "),rN=a("a"),xuo=o("DebertaV2Model"),$uo=o(" (DeBERTa-v2 model)"),kuo=l(),xp=a("li"),Kse=a("strong"),Suo=o("decision_transformer"),Ruo=o(" \u2014 "),tN=a("a"),Puo=o("DecisionTransformerModel"),Buo=o(" (Decision Transformer model)"),Iuo=l(),$p=a("li"),Zse=a("strong"),Nuo=o("deit"),quo=o(" \u2014 "),aN=a("a"),juo=o("DeiTModel"),Duo=o(" (DeiT model)"),Guo=l(),kp=a("li"),ele=a("strong"),Ouo=o("detr"),Vuo=o(" \u2014 "),nN=a("a"),Xuo=o("DetrModel"),zuo=o(" (DETR model)"),Wuo=l(),Sp=a("li"),ole=a("strong"),Quo=o("distilbert"),Huo=o(" \u2014 "),sN=a("a"),Uuo=o("DistilBertModel"),Juo=o(" (DistilBERT model)"),Yuo=l(),Rp=a("li"),rle=a("strong"),Kuo=o("dpr"),Zuo=o(" \u2014 "),lN=a("a"),e1o=o("DPRQuestionEncoder"),o1o=o(" (DPR model)"),r1o=l(),Pp=a("li"),tle=a("strong"),t1o=o("dpt"),a1o=o(" \u2014 "),iN=a("a"),n1o=o("DPTModel"),s1o=o(" (DPT model)"),l1o=l(),Bp=a("li"),ale=a("strong"),i1o=o("electra"),d1o=o(" \u2014 "),dN=a("a"),c1o=o("ElectraModel"),f1o=o(" (ELECTRA model)"),m1o=l(),Ip=a("li"),nle=a("strong"),g1o=o("flaubert"),h1o=o(" \u2014 "),cN=a("a"),p1o=o("FlaubertModel"),_1o=o(" (FlauBERT model)"),u1o=l(),Np=a("li"),sle=a("strong"),b1o=o("flava"),v1o=o(" \u2014 "),fN=a("a"),F1o=o("FlavaModel"),T1o=o(" (Flava model)"),M1o=l(),qp=a("li"),lle=a("strong"),E1o=o("fnet"),C1o=o(" \u2014 "),mN=a("a"),w1o=o("FNetModel"),A1o=o(" (FNet model)"),y1o=l(),jp=a("li"),ile=a("strong"),L1o=o("fsmt"),x1o=o(" \u2014 "),gN=a("a"),$1o=o("FSMTModel"),k1o=o(" (FairSeq Machine-Translation model)"),S1o=l(),Ps=a("li"),dle=a("strong"),R1o=o("funnel"),P1o=o(" \u2014 "),hN=a("a"),B1o=o("FunnelModel"),I1o=o(" or "),pN=a("a"),N1o=o("FunnelBaseModel"),q1o=o(" (Funnel Transformer model)"),j1o=l(),Dp=a("li"),cle=a("strong"),D1o=o("glpn"),G1o=o(" \u2014 "),_N=a("a"),O1o=o("GLPNModel"),V1o=o(" (GLPN model)"),X1o=l(),Gp=a("li"),fle=a("strong"),z1o=o("gpt2"),W1o=o(" \u2014 "),uN=a("a"),Q1o=o("GPT2Model"),H1o=o(" (OpenAI GPT-2 model)"),U1o=l(),Op=a("li"),mle=a("strong"),J1o=o("gpt_neo"),Y1o=o(" \u2014 "),bN=a("a"),K1o=o("GPTNeoModel"),Z1o=o(" (GPT Neo model)"),ebo=l(),Vp=a("li"),gle=a("strong"),obo=o("gpt_neox"),rbo=o(" \u2014 "),vN=a("a"),tbo=o("GPTNeoXModel"),abo=o(" (GPT NeoX model)"),nbo=l(),Xp=a("li"),hle=a("strong"),sbo=o("gptj"),lbo=o(" \u2014 "),FN=a("a"),ibo=o("GPTJModel"),dbo=o(" (GPT-J model)"),cbo=l(),zp=a("li"),ple=a("strong"),fbo=o("hubert"),mbo=o(" \u2014 "),TN=a("a"),gbo=o("HubertModel"),hbo=o(" (Hubert model)"),pbo=l(),Wp=a("li"),_le=a("strong"),_bo=o("ibert"),ubo=o(" \u2014 "),MN=a("a"),bbo=o("IBertModel"),vbo=o(" (I-BERT model)"),Fbo=l(),Qp=a("li"),ule=a("strong"),Tbo=o("imagegpt"),Mbo=o(" \u2014 "),EN=a("a"),Ebo=o("ImageGPTModel"),Cbo=o(" (ImageGPT model)"),wbo=l(),Hp=a("li"),ble=a("strong"),Abo=o("layoutlm"),ybo=o(" \u2014 "),CN=a("a"),Lbo=o("LayoutLMModel"),xbo=o(" (LayoutLM model)"),$bo=l(),Up=a("li"),vle=a("strong"),kbo=o("layoutlmv2"),Sbo=o(" \u2014 "),wN=a("a"),Rbo=o("LayoutLMv2Model"),Pbo=o(" (LayoutLMv2 model)"),Bbo=l(),Jp=a("li"),Fle=a("strong"),Ibo=o("layoutlmv3"),Nbo=o(" \u2014 "),AN=a("a"),qbo=o("LayoutLMv3Model"),jbo=o(" (LayoutLMv3 model)"),Dbo=l(),Yp=a("li"),Tle=a("strong"),Gbo=o("led"),Obo=o(" \u2014 "),yN=a("a"),Vbo=o("LEDModel"),Xbo=o(" (LED model)"),zbo=l(),Kp=a("li"),Mle=a("strong"),Wbo=o("longformer"),Qbo=o(" \u2014 "),LN=a("a"),Hbo=o("LongformerModel"),Ubo=o(" (Longformer model)"),Jbo=l(),Zp=a("li"),Ele=a("strong"),Ybo=o("luke"),Kbo=o(" \u2014 "),xN=a("a"),Zbo=o("LukeModel"),e2o=o(" (LUKE model)"),o2o=l(),e_=a("li"),Cle=a("strong"),r2o=o("lxmert"),t2o=o(" \u2014 "),$N=a("a"),a2o=o("LxmertModel"),n2o=o(" (LXMERT model)"),s2o=l(),o_=a("li"),wle=a("strong"),l2o=o("m2m_100"),i2o=o(" \u2014 "),kN=a("a"),d2o=o("M2M100Model"),c2o=o(" (M2M100 model)"),f2o=l(),r_=a("li"),Ale=a("strong"),m2o=o("marian"),g2o=o(" \u2014 "),SN=a("a"),h2o=o("MarianModel"),p2o=o(" (Marian model)"),_2o=l(),t_=a("li"),yle=a("strong"),u2o=o("maskformer"),b2o=o(" \u2014 "),RN=a("a"),v2o=o("MaskFormerModel"),F2o=o(" (MaskFormer model)"),T2o=l(),a_=a("li"),Lle=a("strong"),M2o=o("mbart"),E2o=o(" \u2014 "),PN=a("a"),C2o=o("MBartModel"),w2o=o(" (mBART model)"),A2o=l(),n_=a("li"),xle=a("strong"),y2o=o("megatron-bert"),L2o=o(" \u2014 "),BN=a("a"),x2o=o("MegatronBertModel"),$2o=o(" (MegatronBert model)"),k2o=l(),s_=a("li"),$le=a("strong"),S2o=o("mobilebert"),R2o=o(" \u2014 "),IN=a("a"),P2o=o("MobileBertModel"),B2o=o(" (MobileBERT model)"),I2o=l(),l_=a("li"),kle=a("strong"),N2o=o("mpnet"),q2o=o(" \u2014 "),NN=a("a"),j2o=o("MPNetModel"),D2o=o(" (MPNet model)"),G2o=l(),i_=a("li"),Sle=a("strong"),O2o=o("mt5"),V2o=o(" \u2014 "),qN=a("a"),X2o=o("MT5Model"),z2o=o(" (mT5 model)"),W2o=l(),d_=a("li"),Rle=a("strong"),Q2o=o("nystromformer"),H2o=o(" \u2014 "),jN=a("a"),U2o=o("NystromformerModel"),J2o=o(" (Nystromformer model)"),Y2o=l(),c_=a("li"),Ple=a("strong"),K2o=o("openai-gpt"),Z2o=o(" \u2014 "),DN=a("a"),e4o=o("OpenAIGPTModel"),o4o=o(" (OpenAI GPT model)"),r4o=l(),f_=a("li"),Ble=a("strong"),t4o=o("opt"),a4o=o(" \u2014 "),GN=a("a"),n4o=o("OPTModel"),s4o=o(" (OPT model)"),l4o=l(),m_=a("li"),Ile=a("strong"),i4o=o("pegasus"),d4o=o(" \u2014 "),ON=a("a"),c4o=o("PegasusModel"),f4o=o(" (Pegasus model)"),m4o=l(),g_=a("li"),Nle=a("strong"),g4o=o("perceiver"),h4o=o(" \u2014 "),VN=a("a"),p4o=o("PerceiverModel"),_4o=o(" (Perceiver model)"),u4o=l(),h_=a("li"),qle=a("strong"),b4o=o("plbart"),v4o=o(" \u2014 "),XN=a("a"),F4o=o("PLBartModel"),T4o=o(" (PLBart model)"),M4o=l(),p_=a("li"),jle=a("strong"),E4o=o("poolformer"),C4o=o(" \u2014 "),zN=a("a"),w4o=o("PoolFormerModel"),A4o=o(" (PoolFormer model)"),y4o=l(),__=a("li"),Dle=a("strong"),L4o=o("prophetnet"),x4o=o(" \u2014 "),WN=a("a"),$4o=o("ProphetNetModel"),k4o=o(" (ProphetNet model)"),S4o=l(),u_=a("li"),Gle=a("strong"),R4o=o("qdqbert"),P4o=o(" \u2014 "),QN=a("a"),B4o=o("QDQBertModel"),I4o=o(" (QDQBert model)"),N4o=l(),b_=a("li"),Ole=a("strong"),q4o=o("reformer"),j4o=o(" \u2014 "),HN=a("a"),D4o=o("ReformerModel"),G4o=o(" (Reformer model)"),O4o=l(),v_=a("li"),Vle=a("strong"),V4o=o("regnet"),X4o=o(" \u2014 "),UN=a("a"),z4o=o("RegNetModel"),W4o=o(" (RegNet model)"),Q4o=l(),F_=a("li"),Xle=a("strong"),H4o=o("rembert"),U4o=o(" \u2014 "),JN=a("a"),J4o=o("RemBertModel"),Y4o=o(" (RemBERT model)"),K4o=l(),T_=a("li"),zle=a("strong"),Z4o=o("resnet"),e5o=o(" \u2014 "),YN=a("a"),o5o=o("ResNetModel"),r5o=o(" (ResNet model)"),t5o=l(),M_=a("li"),Wle=a("strong"),a5o=o("retribert"),n5o=o(" \u2014 "),KN=a("a"),s5o=o("RetriBertModel"),l5o=o(" (RetriBERT model)"),i5o=l(),E_=a("li"),Qle=a("strong"),d5o=o("roberta"),c5o=o(" \u2014 "),ZN=a("a"),f5o=o("RobertaModel"),m5o=o(" (RoBERTa model)"),g5o=l(),C_=a("li"),Hle=a("strong"),h5o=o("roformer"),p5o=o(" \u2014 "),eq=a("a"),_5o=o("RoFormerModel"),u5o=o(" (RoFormer model)"),b5o=l(),w_=a("li"),Ule=a("strong"),v5o=o("segformer"),F5o=o(" \u2014 "),oq=a("a"),T5o=o("SegformerModel"),M5o=o(" (SegFormer model)"),E5o=l(),A_=a("li"),Jle=a("strong"),C5o=o("sew"),w5o=o(" \u2014 "),rq=a("a"),A5o=o("SEWModel"),y5o=o(" (SEW model)"),L5o=l(),y_=a("li"),Yle=a("strong"),x5o=o("sew-d"),$5o=o(" \u2014 "),tq=a("a"),k5o=o("SEWDModel"),S5o=o(" (SEW-D model)"),R5o=l(),L_=a("li"),Kle=a("strong"),P5o=o("speech_to_text"),B5o=o(" \u2014 "),aq=a("a"),I5o=o("Speech2TextModel"),N5o=o(" (Speech2Text model)"),q5o=l(),x_=a("li"),Zle=a("strong"),j5o=o("splinter"),D5o=o(" \u2014 "),nq=a("a"),G5o=o("SplinterModel"),O5o=o(" (Splinter model)"),V5o=l(),$_=a("li"),eie=a("strong"),X5o=o("squeezebert"),z5o=o(" \u2014 "),sq=a("a"),W5o=o("SqueezeBertModel"),Q5o=o(" (SqueezeBERT model)"),H5o=l(),k_=a("li"),oie=a("strong"),U5o=o("swin"),J5o=o(" \u2014 "),lq=a("a"),Y5o=o("SwinModel"),K5o=o(" (Swin model)"),Z5o=l(),S_=a("li"),rie=a("strong"),evo=o("t5"),ovo=o(" \u2014 "),iq=a("a"),rvo=o("T5Model"),tvo=o(" (T5 model)"),avo=l(),R_=a("li"),tie=a("strong"),nvo=o("tapas"),svo=o(" \u2014 "),dq=a("a"),lvo=o("TapasModel"),ivo=o(" (TAPAS model)"),dvo=l(),P_=a("li"),aie=a("strong"),cvo=o("trajectory_transformer"),fvo=o(" \u2014 "),cq=a("a"),mvo=o("TrajectoryTransformerModel"),gvo=o(" (Trajectory Transformer model)"),hvo=l(),B_=a("li"),nie=a("strong"),pvo=o("transfo-xl"),_vo=o(" \u2014 "),fq=a("a"),uvo=o("TransfoXLModel"),bvo=o(" (Transformer-XL model)"),vvo=l(),I_=a("li"),sie=a("strong"),Fvo=o("unispeech"),Tvo=o(" \u2014 "),mq=a("a"),Mvo=o("UniSpeechModel"),Evo=o(" (UniSpeech model)"),Cvo=l(),N_=a("li"),lie=a("strong"),wvo=o("unispeech-sat"),Avo=o(" \u2014 "),gq=a("a"),yvo=o("UniSpeechSatModel"),Lvo=o(" (UniSpeechSat model)"),xvo=l(),q_=a("li"),iie=a("strong"),$vo=o("van"),kvo=o(" \u2014 "),hq=a("a"),Svo=o("VanModel"),Rvo=o(" (VAN model)"),Pvo=l(),j_=a("li"),die=a("strong"),Bvo=o("vilt"),Ivo=o(" \u2014 "),pq=a("a"),Nvo=o("ViltModel"),qvo=o(" (ViLT model)"),jvo=l(),D_=a("li"),cie=a("strong"),Dvo=o("vision-text-dual-encoder"),Gvo=o(" \u2014 "),_q=a("a"),Ovo=o("VisionTextDualEncoderModel"),Vvo=o(" (VisionTextDualEncoder model)"),Xvo=l(),G_=a("li"),fie=a("strong"),zvo=o("visual_bert"),Wvo=o(" \u2014 "),uq=a("a"),Qvo=o("VisualBertModel"),Hvo=o(" (VisualBert model)"),Uvo=l(),O_=a("li"),mie=a("strong"),Jvo=o("vit"),Yvo=o(" \u2014 "),bq=a("a"),Kvo=o("ViTModel"),Zvo=o(" (ViT model)"),eFo=l(),V_=a("li"),gie=a("strong"),oFo=o("vit_mae"),rFo=o(" \u2014 "),vq=a("a"),tFo=o("ViTMAEModel"),aFo=o(" (ViTMAE model)"),nFo=l(),X_=a("li"),hie=a("strong"),sFo=o("wav2vec2"),lFo=o(" \u2014 "),Fq=a("a"),iFo=o("Wav2Vec2Model"),dFo=o(" (Wav2Vec2 model)"),cFo=l(),z_=a("li"),pie=a("strong"),fFo=o("wav2vec2-conformer"),mFo=o(" \u2014 "),Tq=a("a"),gFo=o("Wav2Vec2ConformerModel"),hFo=o(" (Wav2Vec2-Conformer model)"),pFo=l(),W_=a("li"),_ie=a("strong"),_Fo=o("wavlm"),uFo=o(" \u2014 "),Mq=a("a"),bFo=o("WavLMModel"),vFo=o(" (WavLM model)"),FFo=l(),Q_=a("li"),uie=a("strong"),TFo=o("xglm"),MFo=o(" \u2014 "),Eq=a("a"),EFo=o("XGLMModel"),CFo=o(" (XGLM model)"),wFo=l(),H_=a("li"),bie=a("strong"),AFo=o("xlm"),yFo=o(" \u2014 "),Cq=a("a"),LFo=o("XLMModel"),xFo=o(" (XLM model)"),$Fo=l(),U_=a("li"),vie=a("strong"),kFo=o("xlm-prophetnet"),SFo=o(" \u2014 "),wq=a("a"),RFo=o("XLMProphetNetModel"),PFo=o(" (XLMProphetNet model)"),BFo=l(),J_=a("li"),Fie=a("strong"),IFo=o("xlm-roberta"),NFo=o(" \u2014 "),Aq=a("a"),qFo=o("XLMRobertaModel"),jFo=o(" (XLM-RoBERTa model)"),DFo=l(),Y_=a("li"),Tie=a("strong"),GFo=o("xlm-roberta-xl"),OFo=o(" \u2014 "),yq=a("a"),VFo=o("XLMRobertaXLModel"),XFo=o(" (XLM-RoBERTa-XL model)"),zFo=l(),K_=a("li"),Mie=a("strong"),WFo=o("xlnet"),QFo=o(" \u2014 "),Lq=a("a"),HFo=o("XLNetModel"),UFo=o(" (XLNet model)"),JFo=l(),Z_=a("li"),Eie=a("strong"),YFo=o("yolos"),KFo=o(" \u2014 "),xq=a("a"),ZFo=o("YolosModel"),eTo=o(" (YOLOS model)"),oTo=l(),eu=a("li"),Cie=a("strong"),rTo=o("yoso"),tTo=o(" \u2014 "),$q=a("a"),aTo=o("YosoModel"),nTo=o(" (YOSO model)"),sTo=l(),ou=a("p"),lTo=o("The model is set in evaluation mode by default using "),wie=a("code"),iTo=o("model.eval()"),dTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aie=a("code"),cTo=o("model.train()"),fTo=l(),F(ru.$$.fragment),xqe=l(),Li=a("h2"),tu=a("a"),yie=a("span"),F(iA.$$.fragment),mTo=l(),Lie=a("span"),gTo=o("AutoModelForPreTraining"),$qe=l(),xo=a("div"),F(dA.$$.fragment),hTo=l(),xi=a("p"),pTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kq=a("a"),_To=o("from_pretrained()"),uTo=o(" class method or the "),Sq=a("a"),bTo=o("from_config()"),vTo=o(` class
method.`),FTo=l(),cA=a("p"),TTo=o("This class cannot be instantiated directly using "),xie=a("code"),MTo=o("__init__()"),ETo=o(" (throws an error)."),CTo=l(),at=a("div"),F(fA.$$.fragment),wTo=l(),$ie=a("p"),ATo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yTo=l(),$i=a("p"),LTo=o(`Note:
Loading a model from its configuration file does `),kie=a("strong"),xTo=o("not"),$To=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rq=a("a"),kTo=o("from_pretrained()"),STo=o(" to load the model weights."),RTo=l(),F(au.$$.fragment),PTo=l(),Ye=a("div"),F(mA.$$.fragment),BTo=l(),Sie=a("p"),ITo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),NTo=l(),xa=a("p"),qTo=o("The model class to instantiate is selected based on the "),Rie=a("code"),jTo=o("model_type"),DTo=o(` property of the config object (either
passed as an argument or loaded from `),Pie=a("code"),GTo=o("pretrained_model_name_or_path"),OTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bie=a("code"),VTo=o("pretrained_model_name_or_path"),XTo=o(":"),zTo=l(),G=a("ul"),nu=a("li"),Iie=a("strong"),WTo=o("albert"),QTo=o(" \u2014 "),Pq=a("a"),HTo=o("AlbertForPreTraining"),UTo=o(" (ALBERT model)"),JTo=l(),su=a("li"),Nie=a("strong"),YTo=o("bart"),KTo=o(" \u2014 "),Bq=a("a"),ZTo=o("BartForConditionalGeneration"),e7o=o(" (BART model)"),o7o=l(),lu=a("li"),qie=a("strong"),r7o=o("bert"),t7o=o(" \u2014 "),Iq=a("a"),a7o=o("BertForPreTraining"),n7o=o(" (BERT model)"),s7o=l(),iu=a("li"),jie=a("strong"),l7o=o("big_bird"),i7o=o(" \u2014 "),Nq=a("a"),d7o=o("BigBirdForPreTraining"),c7o=o(" (BigBird model)"),f7o=l(),du=a("li"),Die=a("strong"),m7o=o("camembert"),g7o=o(" \u2014 "),qq=a("a"),h7o=o("CamembertForMaskedLM"),p7o=o(" (CamemBERT model)"),_7o=l(),cu=a("li"),Gie=a("strong"),u7o=o("ctrl"),b7o=o(" \u2014 "),jq=a("a"),v7o=o("CTRLLMHeadModel"),F7o=o(" (CTRL model)"),T7o=l(),fu=a("li"),Oie=a("strong"),M7o=o("data2vec-text"),E7o=o(" \u2014 "),Dq=a("a"),C7o=o("Data2VecTextForMaskedLM"),w7o=o(" (Data2VecText model)"),A7o=l(),mu=a("li"),Vie=a("strong"),y7o=o("deberta"),L7o=o(" \u2014 "),Gq=a("a"),x7o=o("DebertaForMaskedLM"),$7o=o(" (DeBERTa model)"),k7o=l(),gu=a("li"),Xie=a("strong"),S7o=o("deberta-v2"),R7o=o(" \u2014 "),Oq=a("a"),P7o=o("DebertaV2ForMaskedLM"),B7o=o(" (DeBERTa-v2 model)"),I7o=l(),hu=a("li"),zie=a("strong"),N7o=o("distilbert"),q7o=o(" \u2014 "),Vq=a("a"),j7o=o("DistilBertForMaskedLM"),D7o=o(" (DistilBERT model)"),G7o=l(),pu=a("li"),Wie=a("strong"),O7o=o("electra"),V7o=o(" \u2014 "),Xq=a("a"),X7o=o("ElectraForPreTraining"),z7o=o(" (ELECTRA model)"),W7o=l(),_u=a("li"),Qie=a("strong"),Q7o=o("flaubert"),H7o=o(" \u2014 "),zq=a("a"),U7o=o("FlaubertWithLMHeadModel"),J7o=o(" (FlauBERT model)"),Y7o=l(),uu=a("li"),Hie=a("strong"),K7o=o("flava"),Z7o=o(" \u2014 "),Wq=a("a"),e9o=o("FlavaForPreTraining"),o9o=o(" (Flava model)"),r9o=l(),bu=a("li"),Uie=a("strong"),t9o=o("fnet"),a9o=o(" \u2014 "),Qq=a("a"),n9o=o("FNetForPreTraining"),s9o=o(" (FNet model)"),l9o=l(),vu=a("li"),Jie=a("strong"),i9o=o("fsmt"),d9o=o(" \u2014 "),Hq=a("a"),c9o=o("FSMTForConditionalGeneration"),f9o=o(" (FairSeq Machine-Translation model)"),m9o=l(),Fu=a("li"),Yie=a("strong"),g9o=o("funnel"),h9o=o(" \u2014 "),Uq=a("a"),p9o=o("FunnelForPreTraining"),_9o=o(" (Funnel Transformer model)"),u9o=l(),Tu=a("li"),Kie=a("strong"),b9o=o("gpt2"),v9o=o(" \u2014 "),Jq=a("a"),F9o=o("GPT2LMHeadModel"),T9o=o(" (OpenAI GPT-2 model)"),M9o=l(),Mu=a("li"),Zie=a("strong"),E9o=o("ibert"),C9o=o(" \u2014 "),Yq=a("a"),w9o=o("IBertForMaskedLM"),A9o=o(" (I-BERT model)"),y9o=l(),Eu=a("li"),ede=a("strong"),L9o=o("layoutlm"),x9o=o(" \u2014 "),Kq=a("a"),$9o=o("LayoutLMForMaskedLM"),k9o=o(" (LayoutLM model)"),S9o=l(),Cu=a("li"),ode=a("strong"),R9o=o("longformer"),P9o=o(" \u2014 "),Zq=a("a"),B9o=o("LongformerForMaskedLM"),I9o=o(" (Longformer model)"),N9o=l(),wu=a("li"),rde=a("strong"),q9o=o("lxmert"),j9o=o(" \u2014 "),ej=a("a"),D9o=o("LxmertForPreTraining"),G9o=o(" (LXMERT model)"),O9o=l(),Au=a("li"),tde=a("strong"),V9o=o("megatron-bert"),X9o=o(" \u2014 "),oj=a("a"),z9o=o("MegatronBertForPreTraining"),W9o=o(" (MegatronBert model)"),Q9o=l(),yu=a("li"),ade=a("strong"),H9o=o("mobilebert"),U9o=o(" \u2014 "),rj=a("a"),J9o=o("MobileBertForPreTraining"),Y9o=o(" (MobileBERT model)"),K9o=l(),Lu=a("li"),nde=a("strong"),Z9o=o("mpnet"),eMo=o(" \u2014 "),tj=a("a"),oMo=o("MPNetForMaskedLM"),rMo=o(" (MPNet model)"),tMo=l(),xu=a("li"),sde=a("strong"),aMo=o("openai-gpt"),nMo=o(" \u2014 "),aj=a("a"),sMo=o("OpenAIGPTLMHeadModel"),lMo=o(" (OpenAI GPT model)"),iMo=l(),$u=a("li"),lde=a("strong"),dMo=o("retribert"),cMo=o(" \u2014 "),nj=a("a"),fMo=o("RetriBertModel"),mMo=o(" (RetriBERT model)"),gMo=l(),ku=a("li"),ide=a("strong"),hMo=o("roberta"),pMo=o(" \u2014 "),sj=a("a"),_Mo=o("RobertaForMaskedLM"),uMo=o(" (RoBERTa model)"),bMo=l(),Su=a("li"),dde=a("strong"),vMo=o("splinter"),FMo=o(" \u2014 "),lj=a("a"),TMo=o("SplinterForPreTraining"),MMo=o(" (Splinter model)"),EMo=l(),Ru=a("li"),cde=a("strong"),CMo=o("squeezebert"),wMo=o(" \u2014 "),ij=a("a"),AMo=o("SqueezeBertForMaskedLM"),yMo=o(" (SqueezeBERT model)"),LMo=l(),Pu=a("li"),fde=a("strong"),xMo=o("t5"),$Mo=o(" \u2014 "),dj=a("a"),kMo=o("T5ForConditionalGeneration"),SMo=o(" (T5 model)"),RMo=l(),Bu=a("li"),mde=a("strong"),PMo=o("tapas"),BMo=o(" \u2014 "),cj=a("a"),IMo=o("TapasForMaskedLM"),NMo=o(" (TAPAS model)"),qMo=l(),Iu=a("li"),gde=a("strong"),jMo=o("transfo-xl"),DMo=o(" \u2014 "),fj=a("a"),GMo=o("TransfoXLLMHeadModel"),OMo=o(" (Transformer-XL model)"),VMo=l(),Nu=a("li"),hde=a("strong"),XMo=o("unispeech"),zMo=o(" \u2014 "),mj=a("a"),WMo=o("UniSpeechForPreTraining"),QMo=o(" (UniSpeech model)"),HMo=l(),qu=a("li"),pde=a("strong"),UMo=o("unispeech-sat"),JMo=o(" \u2014 "),gj=a("a"),YMo=o("UniSpeechSatForPreTraining"),KMo=o(" (UniSpeechSat model)"),ZMo=l(),ju=a("li"),_de=a("strong"),eEo=o("visual_bert"),oEo=o(" \u2014 "),hj=a("a"),rEo=o("VisualBertForPreTraining"),tEo=o(" (VisualBert model)"),aEo=l(),Du=a("li"),ude=a("strong"),nEo=o("vit_mae"),sEo=o(" \u2014 "),pj=a("a"),lEo=o("ViTMAEForPreTraining"),iEo=o(" (ViTMAE model)"),dEo=l(),Gu=a("li"),bde=a("strong"),cEo=o("wav2vec2"),fEo=o(" \u2014 "),_j=a("a"),mEo=o("Wav2Vec2ForPreTraining"),gEo=o(" (Wav2Vec2 model)"),hEo=l(),Ou=a("li"),vde=a("strong"),pEo=o("wav2vec2-conformer"),_Eo=o(" \u2014 "),uj=a("a"),uEo=o("Wav2Vec2ConformerForPreTraining"),bEo=o(" (Wav2Vec2-Conformer model)"),vEo=l(),Vu=a("li"),Fde=a("strong"),FEo=o("xlm"),TEo=o(" \u2014 "),bj=a("a"),MEo=o("XLMWithLMHeadModel"),EEo=o(" (XLM model)"),CEo=l(),Xu=a("li"),Tde=a("strong"),wEo=o("xlm-roberta"),AEo=o(" \u2014 "),vj=a("a"),yEo=o("XLMRobertaForMaskedLM"),LEo=o(" (XLM-RoBERTa model)"),xEo=l(),zu=a("li"),Mde=a("strong"),$Eo=o("xlm-roberta-xl"),kEo=o(" \u2014 "),Fj=a("a"),SEo=o("XLMRobertaXLForMaskedLM"),REo=o(" (XLM-RoBERTa-XL model)"),PEo=l(),Wu=a("li"),Ede=a("strong"),BEo=o("xlnet"),IEo=o(" \u2014 "),Tj=a("a"),NEo=o("XLNetLMHeadModel"),qEo=o(" (XLNet model)"),jEo=l(),Qu=a("p"),DEo=o("The model is set in evaluation mode by default using "),Cde=a("code"),GEo=o("model.eval()"),OEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wde=a("code"),VEo=o("model.train()"),XEo=l(),F(Hu.$$.fragment),kqe=l(),ki=a("h2"),Uu=a("a"),Ade=a("span"),F(gA.$$.fragment),zEo=l(),yde=a("span"),WEo=o("AutoModelForCausalLM"),Sqe=l(),$o=a("div"),F(hA.$$.fragment),QEo=l(),Si=a("p"),HEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Mj=a("a"),UEo=o("from_pretrained()"),JEo=o(" class method or the "),Ej=a("a"),YEo=o("from_config()"),KEo=o(` class
method.`),ZEo=l(),pA=a("p"),eCo=o("This class cannot be instantiated directly using "),Lde=a("code"),oCo=o("__init__()"),rCo=o(" (throws an error)."),tCo=l(),nt=a("div"),F(_A.$$.fragment),aCo=l(),xde=a("p"),nCo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),sCo=l(),Ri=a("p"),lCo=o(`Note:
Loading a model from its configuration file does `),$de=a("strong"),iCo=o("not"),dCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=a("a"),cCo=o("from_pretrained()"),fCo=o(" to load the model weights."),mCo=l(),F(Ju.$$.fragment),gCo=l(),Ke=a("div"),F(uA.$$.fragment),hCo=l(),kde=a("p"),pCo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_Co=l(),$a=a("p"),uCo=o("The model class to instantiate is selected based on the "),Sde=a("code"),bCo=o("model_type"),vCo=o(` property of the config object (either
passed as an argument or loaded from `),Rde=a("code"),FCo=o("pretrained_model_name_or_path"),TCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pde=a("code"),MCo=o("pretrained_model_name_or_path"),ECo=o(":"),CCo=l(),z=a("ul"),Yu=a("li"),Bde=a("strong"),wCo=o("bart"),ACo=o(" \u2014 "),wj=a("a"),yCo=o("BartForCausalLM"),LCo=o(" (BART model)"),xCo=l(),Ku=a("li"),Ide=a("strong"),$Co=o("bert"),kCo=o(" \u2014 "),Aj=a("a"),SCo=o("BertLMHeadModel"),RCo=o(" (BERT model)"),PCo=l(),Zu=a("li"),Nde=a("strong"),BCo=o("bert-generation"),ICo=o(" \u2014 "),yj=a("a"),NCo=o("BertGenerationDecoder"),qCo=o(" (Bert Generation model)"),jCo=l(),e1=a("li"),qde=a("strong"),DCo=o("big_bird"),GCo=o(" \u2014 "),Lj=a("a"),OCo=o("BigBirdForCausalLM"),VCo=o(" (BigBird model)"),XCo=l(),o1=a("li"),jde=a("strong"),zCo=o("bigbird_pegasus"),WCo=o(" \u2014 "),xj=a("a"),QCo=o("BigBirdPegasusForCausalLM"),HCo=o(" (BigBirdPegasus model)"),UCo=l(),r1=a("li"),Dde=a("strong"),JCo=o("blenderbot"),YCo=o(" \u2014 "),$j=a("a"),KCo=o("BlenderbotForCausalLM"),ZCo=o(" (Blenderbot model)"),e3o=l(),t1=a("li"),Gde=a("strong"),o3o=o("blenderbot-small"),r3o=o(" \u2014 "),kj=a("a"),t3o=o("BlenderbotSmallForCausalLM"),a3o=o(" (BlenderbotSmall model)"),n3o=l(),a1=a("li"),Ode=a("strong"),s3o=o("camembert"),l3o=o(" \u2014 "),Sj=a("a"),i3o=o("CamembertForCausalLM"),d3o=o(" (CamemBERT model)"),c3o=l(),n1=a("li"),Vde=a("strong"),f3o=o("ctrl"),m3o=o(" \u2014 "),Rj=a("a"),g3o=o("CTRLLMHeadModel"),h3o=o(" (CTRL model)"),p3o=l(),s1=a("li"),Xde=a("strong"),_3o=o("data2vec-text"),u3o=o(" \u2014 "),Pj=a("a"),b3o=o("Data2VecTextForCausalLM"),v3o=o(" (Data2VecText model)"),F3o=l(),l1=a("li"),zde=a("strong"),T3o=o("electra"),M3o=o(" \u2014 "),Bj=a("a"),E3o=o("ElectraForCausalLM"),C3o=o(" (ELECTRA model)"),w3o=l(),i1=a("li"),Wde=a("strong"),A3o=o("gpt2"),y3o=o(" \u2014 "),Ij=a("a"),L3o=o("GPT2LMHeadModel"),x3o=o(" (OpenAI GPT-2 model)"),$3o=l(),d1=a("li"),Qde=a("strong"),k3o=o("gpt_neo"),S3o=o(" \u2014 "),Nj=a("a"),R3o=o("GPTNeoForCausalLM"),P3o=o(" (GPT Neo model)"),B3o=l(),c1=a("li"),Hde=a("strong"),I3o=o("gpt_neox"),N3o=o(" \u2014 "),qj=a("a"),q3o=o("GPTNeoXForCausalLM"),j3o=o(" (GPT NeoX model)"),D3o=l(),f1=a("li"),Ude=a("strong"),G3o=o("gptj"),O3o=o(" \u2014 "),jj=a("a"),V3o=o("GPTJForCausalLM"),X3o=o(" (GPT-J model)"),z3o=l(),m1=a("li"),Jde=a("strong"),W3o=o("marian"),Q3o=o(" \u2014 "),Dj=a("a"),H3o=o("MarianForCausalLM"),U3o=o(" (Marian model)"),J3o=l(),g1=a("li"),Yde=a("strong"),Y3o=o("mbart"),K3o=o(" \u2014 "),Gj=a("a"),Z3o=o("MBartForCausalLM"),ewo=o(" (mBART model)"),owo=l(),h1=a("li"),Kde=a("strong"),rwo=o("megatron-bert"),two=o(" \u2014 "),Oj=a("a"),awo=o("MegatronBertForCausalLM"),nwo=o(" (MegatronBert model)"),swo=l(),p1=a("li"),Zde=a("strong"),lwo=o("openai-gpt"),iwo=o(" \u2014 "),Vj=a("a"),dwo=o("OpenAIGPTLMHeadModel"),cwo=o(" (OpenAI GPT model)"),fwo=l(),_1=a("li"),ece=a("strong"),mwo=o("opt"),gwo=o(" \u2014 "),Xj=a("a"),hwo=o("OPTForCausalLM"),pwo=o(" (OPT model)"),_wo=l(),u1=a("li"),oce=a("strong"),uwo=o("pegasus"),bwo=o(" \u2014 "),zj=a("a"),vwo=o("PegasusForCausalLM"),Fwo=o(" (Pegasus model)"),Two=l(),b1=a("li"),rce=a("strong"),Mwo=o("plbart"),Ewo=o(" \u2014 "),Wj=a("a"),Cwo=o("PLBartForCausalLM"),wwo=o(" (PLBart model)"),Awo=l(),v1=a("li"),tce=a("strong"),ywo=o("prophetnet"),Lwo=o(" \u2014 "),Qj=a("a"),xwo=o("ProphetNetForCausalLM"),$wo=o(" (ProphetNet model)"),kwo=l(),F1=a("li"),ace=a("strong"),Swo=o("qdqbert"),Rwo=o(" \u2014 "),Hj=a("a"),Pwo=o("QDQBertLMHeadModel"),Bwo=o(" (QDQBert model)"),Iwo=l(),T1=a("li"),nce=a("strong"),Nwo=o("reformer"),qwo=o(" \u2014 "),Uj=a("a"),jwo=o("ReformerModelWithLMHead"),Dwo=o(" (Reformer model)"),Gwo=l(),M1=a("li"),sce=a("strong"),Owo=o("rembert"),Vwo=o(" \u2014 "),Jj=a("a"),Xwo=o("RemBertForCausalLM"),zwo=o(" (RemBERT model)"),Wwo=l(),E1=a("li"),lce=a("strong"),Qwo=o("roberta"),Hwo=o(" \u2014 "),Yj=a("a"),Uwo=o("RobertaForCausalLM"),Jwo=o(" (RoBERTa model)"),Ywo=l(),C1=a("li"),ice=a("strong"),Kwo=o("roformer"),Zwo=o(" \u2014 "),Kj=a("a"),e0o=o("RoFormerForCausalLM"),o0o=o(" (RoFormer model)"),r0o=l(),w1=a("li"),dce=a("strong"),t0o=o("speech_to_text_2"),a0o=o(" \u2014 "),Zj=a("a"),n0o=o("Speech2Text2ForCausalLM"),s0o=o(" (Speech2Text2 model)"),l0o=l(),A1=a("li"),cce=a("strong"),i0o=o("transfo-xl"),d0o=o(" \u2014 "),eD=a("a"),c0o=o("TransfoXLLMHeadModel"),f0o=o(" (Transformer-XL model)"),m0o=l(),y1=a("li"),fce=a("strong"),g0o=o("trocr"),h0o=o(" \u2014 "),oD=a("a"),p0o=o("TrOCRForCausalLM"),_0o=o(" (TrOCR model)"),u0o=l(),L1=a("li"),mce=a("strong"),b0o=o("xglm"),v0o=o(" \u2014 "),rD=a("a"),F0o=o("XGLMForCausalLM"),T0o=o(" (XGLM model)"),M0o=l(),x1=a("li"),gce=a("strong"),E0o=o("xlm"),C0o=o(" \u2014 "),tD=a("a"),w0o=o("XLMWithLMHeadModel"),A0o=o(" (XLM model)"),y0o=l(),$1=a("li"),hce=a("strong"),L0o=o("xlm-prophetnet"),x0o=o(" \u2014 "),aD=a("a"),$0o=o("XLMProphetNetForCausalLM"),k0o=o(" (XLMProphetNet model)"),S0o=l(),k1=a("li"),pce=a("strong"),R0o=o("xlm-roberta"),P0o=o(" \u2014 "),nD=a("a"),B0o=o("XLMRobertaForCausalLM"),I0o=o(" (XLM-RoBERTa model)"),N0o=l(),S1=a("li"),_ce=a("strong"),q0o=o("xlm-roberta-xl"),j0o=o(" \u2014 "),sD=a("a"),D0o=o("XLMRobertaXLForCausalLM"),G0o=o(" (XLM-RoBERTa-XL model)"),O0o=l(),R1=a("li"),uce=a("strong"),V0o=o("xlnet"),X0o=o(" \u2014 "),lD=a("a"),z0o=o("XLNetLMHeadModel"),W0o=o(" (XLNet model)"),Q0o=l(),P1=a("p"),H0o=o("The model is set in evaluation mode by default using "),bce=a("code"),U0o=o("model.eval()"),J0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vce=a("code"),Y0o=o("model.train()"),K0o=l(),F(B1.$$.fragment),Rqe=l(),Pi=a("h2"),I1=a("a"),Fce=a("span"),F(bA.$$.fragment),Z0o=l(),Tce=a("span"),e6o=o("AutoModelForMaskedLM"),Pqe=l(),ko=a("div"),F(vA.$$.fragment),o6o=l(),Bi=a("p"),r6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iD=a("a"),t6o=o("from_pretrained()"),a6o=o(" class method or the "),dD=a("a"),n6o=o("from_config()"),s6o=o(` class
method.`),l6o=l(),FA=a("p"),i6o=o("This class cannot be instantiated directly using "),Mce=a("code"),d6o=o("__init__()"),c6o=o(" (throws an error)."),f6o=l(),st=a("div"),F(TA.$$.fragment),m6o=l(),Ece=a("p"),g6o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),h6o=l(),Ii=a("p"),p6o=o(`Note:
Loading a model from its configuration file does `),Cce=a("strong"),_6o=o("not"),u6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cD=a("a"),b6o=o("from_pretrained()"),v6o=o(" to load the model weights."),F6o=l(),F(N1.$$.fragment),T6o=l(),Ze=a("div"),F(MA.$$.fragment),M6o=l(),wce=a("p"),E6o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),C6o=l(),ka=a("p"),w6o=o("The model class to instantiate is selected based on the "),Ace=a("code"),A6o=o("model_type"),y6o=o(` property of the config object (either
passed as an argument or loaded from `),yce=a("code"),L6o=o("pretrained_model_name_or_path"),x6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lce=a("code"),$6o=o("pretrained_model_name_or_path"),k6o=o(":"),S6o=l(),Q=a("ul"),q1=a("li"),xce=a("strong"),R6o=o("albert"),P6o=o(" \u2014 "),fD=a("a"),B6o=o("AlbertForMaskedLM"),I6o=o(" (ALBERT model)"),N6o=l(),j1=a("li"),$ce=a("strong"),q6o=o("bart"),j6o=o(" \u2014 "),mD=a("a"),D6o=o("BartForConditionalGeneration"),G6o=o(" (BART model)"),O6o=l(),D1=a("li"),kce=a("strong"),V6o=o("bert"),X6o=o(" \u2014 "),gD=a("a"),z6o=o("BertForMaskedLM"),W6o=o(" (BERT model)"),Q6o=l(),G1=a("li"),Sce=a("strong"),H6o=o("big_bird"),U6o=o(" \u2014 "),hD=a("a"),J6o=o("BigBirdForMaskedLM"),Y6o=o(" (BigBird model)"),K6o=l(),O1=a("li"),Rce=a("strong"),Z6o=o("camembert"),eAo=o(" \u2014 "),pD=a("a"),oAo=o("CamembertForMaskedLM"),rAo=o(" (CamemBERT model)"),tAo=l(),V1=a("li"),Pce=a("strong"),aAo=o("convbert"),nAo=o(" \u2014 "),_D=a("a"),sAo=o("ConvBertForMaskedLM"),lAo=o(" (ConvBERT model)"),iAo=l(),X1=a("li"),Bce=a("strong"),dAo=o("data2vec-text"),cAo=o(" \u2014 "),uD=a("a"),fAo=o("Data2VecTextForMaskedLM"),mAo=o(" (Data2VecText model)"),gAo=l(),z1=a("li"),Ice=a("strong"),hAo=o("deberta"),pAo=o(" \u2014 "),bD=a("a"),_Ao=o("DebertaForMaskedLM"),uAo=o(" (DeBERTa model)"),bAo=l(),W1=a("li"),Nce=a("strong"),vAo=o("deberta-v2"),FAo=o(" \u2014 "),vD=a("a"),TAo=o("DebertaV2ForMaskedLM"),MAo=o(" (DeBERTa-v2 model)"),EAo=l(),Q1=a("li"),qce=a("strong"),CAo=o("distilbert"),wAo=o(" \u2014 "),FD=a("a"),AAo=o("DistilBertForMaskedLM"),yAo=o(" (DistilBERT model)"),LAo=l(),H1=a("li"),jce=a("strong"),xAo=o("electra"),$Ao=o(" \u2014 "),TD=a("a"),kAo=o("ElectraForMaskedLM"),SAo=o(" (ELECTRA model)"),RAo=l(),U1=a("li"),Dce=a("strong"),PAo=o("flaubert"),BAo=o(" \u2014 "),MD=a("a"),IAo=o("FlaubertWithLMHeadModel"),NAo=o(" (FlauBERT model)"),qAo=l(),J1=a("li"),Gce=a("strong"),jAo=o("fnet"),DAo=o(" \u2014 "),ED=a("a"),GAo=o("FNetForMaskedLM"),OAo=o(" (FNet model)"),VAo=l(),Y1=a("li"),Oce=a("strong"),XAo=o("funnel"),zAo=o(" \u2014 "),CD=a("a"),WAo=o("FunnelForMaskedLM"),QAo=o(" (Funnel Transformer model)"),HAo=l(),K1=a("li"),Vce=a("strong"),UAo=o("ibert"),JAo=o(" \u2014 "),wD=a("a"),YAo=o("IBertForMaskedLM"),KAo=o(" (I-BERT model)"),ZAo=l(),Z1=a("li"),Xce=a("strong"),eyo=o("layoutlm"),oyo=o(" \u2014 "),AD=a("a"),ryo=o("LayoutLMForMaskedLM"),tyo=o(" (LayoutLM model)"),ayo=l(),eb=a("li"),zce=a("strong"),nyo=o("longformer"),syo=o(" \u2014 "),yD=a("a"),lyo=o("LongformerForMaskedLM"),iyo=o(" (Longformer model)"),dyo=l(),ob=a("li"),Wce=a("strong"),cyo=o("mbart"),fyo=o(" \u2014 "),LD=a("a"),myo=o("MBartForConditionalGeneration"),gyo=o(" (mBART model)"),hyo=l(),rb=a("li"),Qce=a("strong"),pyo=o("megatron-bert"),_yo=o(" \u2014 "),xD=a("a"),uyo=o("MegatronBertForMaskedLM"),byo=o(" (MegatronBert model)"),vyo=l(),tb=a("li"),Hce=a("strong"),Fyo=o("mobilebert"),Tyo=o(" \u2014 "),$D=a("a"),Myo=o("MobileBertForMaskedLM"),Eyo=o(" (MobileBERT model)"),Cyo=l(),ab=a("li"),Uce=a("strong"),wyo=o("mpnet"),Ayo=o(" \u2014 "),kD=a("a"),yyo=o("MPNetForMaskedLM"),Lyo=o(" (MPNet model)"),xyo=l(),nb=a("li"),Jce=a("strong"),$yo=o("nystromformer"),kyo=o(" \u2014 "),SD=a("a"),Syo=o("NystromformerForMaskedLM"),Ryo=o(" (Nystromformer model)"),Pyo=l(),sb=a("li"),Yce=a("strong"),Byo=o("perceiver"),Iyo=o(" \u2014 "),RD=a("a"),Nyo=o("PerceiverForMaskedLM"),qyo=o(" (Perceiver model)"),jyo=l(),lb=a("li"),Kce=a("strong"),Dyo=o("qdqbert"),Gyo=o(" \u2014 "),PD=a("a"),Oyo=o("QDQBertForMaskedLM"),Vyo=o(" (QDQBert model)"),Xyo=l(),ib=a("li"),Zce=a("strong"),zyo=o("reformer"),Wyo=o(" \u2014 "),BD=a("a"),Qyo=o("ReformerForMaskedLM"),Hyo=o(" (Reformer model)"),Uyo=l(),db=a("li"),efe=a("strong"),Jyo=o("rembert"),Yyo=o(" \u2014 "),ID=a("a"),Kyo=o("RemBertForMaskedLM"),Zyo=o(" (RemBERT model)"),eLo=l(),cb=a("li"),ofe=a("strong"),oLo=o("roberta"),rLo=o(" \u2014 "),ND=a("a"),tLo=o("RobertaForMaskedLM"),aLo=o(" (RoBERTa model)"),nLo=l(),fb=a("li"),rfe=a("strong"),sLo=o("roformer"),lLo=o(" \u2014 "),qD=a("a"),iLo=o("RoFormerForMaskedLM"),dLo=o(" (RoFormer model)"),cLo=l(),mb=a("li"),tfe=a("strong"),fLo=o("squeezebert"),mLo=o(" \u2014 "),jD=a("a"),gLo=o("SqueezeBertForMaskedLM"),hLo=o(" (SqueezeBERT model)"),pLo=l(),gb=a("li"),afe=a("strong"),_Lo=o("tapas"),uLo=o(" \u2014 "),DD=a("a"),bLo=o("TapasForMaskedLM"),vLo=o(" (TAPAS model)"),FLo=l(),hb=a("li"),nfe=a("strong"),TLo=o("wav2vec2"),MLo=o(" \u2014 "),sfe=a("code"),ELo=o("Wav2Vec2ForMaskedLM"),CLo=o(" (Wav2Vec2 model)"),wLo=l(),pb=a("li"),lfe=a("strong"),ALo=o("xlm"),yLo=o(" \u2014 "),GD=a("a"),LLo=o("XLMWithLMHeadModel"),xLo=o(" (XLM model)"),$Lo=l(),_b=a("li"),ife=a("strong"),kLo=o("xlm-roberta"),SLo=o(" \u2014 "),OD=a("a"),RLo=o("XLMRobertaForMaskedLM"),PLo=o(" (XLM-RoBERTa model)"),BLo=l(),ub=a("li"),dfe=a("strong"),ILo=o("xlm-roberta-xl"),NLo=o(" \u2014 "),VD=a("a"),qLo=o("XLMRobertaXLForMaskedLM"),jLo=o(" (XLM-RoBERTa-XL model)"),DLo=l(),bb=a("li"),cfe=a("strong"),GLo=o("yoso"),OLo=o(" \u2014 "),XD=a("a"),VLo=o("YosoForMaskedLM"),XLo=o(" (YOSO model)"),zLo=l(),vb=a("p"),WLo=o("The model is set in evaluation mode by default using "),ffe=a("code"),QLo=o("model.eval()"),HLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mfe=a("code"),ULo=o("model.train()"),JLo=l(),F(Fb.$$.fragment),Bqe=l(),Ni=a("h2"),Tb=a("a"),gfe=a("span"),F(EA.$$.fragment),YLo=l(),hfe=a("span"),KLo=o("AutoModelForSeq2SeqLM"),Iqe=l(),So=a("div"),F(CA.$$.fragment),ZLo=l(),qi=a("p"),e8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zD=a("a"),o8o=o("from_pretrained()"),r8o=o(" class method or the "),WD=a("a"),t8o=o("from_config()"),a8o=o(` class
method.`),n8o=l(),wA=a("p"),s8o=o("This class cannot be instantiated directly using "),pfe=a("code"),l8o=o("__init__()"),i8o=o(" (throws an error)."),d8o=l(),lt=a("div"),F(AA.$$.fragment),c8o=l(),_fe=a("p"),f8o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),m8o=l(),ji=a("p"),g8o=o(`Note:
Loading a model from its configuration file does `),ufe=a("strong"),h8o=o("not"),p8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QD=a("a"),_8o=o("from_pretrained()"),u8o=o(" to load the model weights."),b8o=l(),F(Mb.$$.fragment),v8o=l(),eo=a("div"),F(yA.$$.fragment),F8o=l(),bfe=a("p"),T8o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),M8o=l(),Sa=a("p"),E8o=o("The model class to instantiate is selected based on the "),vfe=a("code"),C8o=o("model_type"),w8o=o(` property of the config object (either
passed as an argument or loaded from `),Ffe=a("code"),A8o=o("pretrained_model_name_or_path"),y8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tfe=a("code"),L8o=o("pretrained_model_name_or_path"),x8o=o(":"),$8o=l(),_e=a("ul"),Eb=a("li"),Mfe=a("strong"),k8o=o("bart"),S8o=o(" \u2014 "),HD=a("a"),R8o=o("BartForConditionalGeneration"),P8o=o(" (BART model)"),B8o=l(),Cb=a("li"),Efe=a("strong"),I8o=o("bigbird_pegasus"),N8o=o(" \u2014 "),UD=a("a"),q8o=o("BigBirdPegasusForConditionalGeneration"),j8o=o(" (BigBirdPegasus model)"),D8o=l(),wb=a("li"),Cfe=a("strong"),G8o=o("blenderbot"),O8o=o(" \u2014 "),JD=a("a"),V8o=o("BlenderbotForConditionalGeneration"),X8o=o(" (Blenderbot model)"),z8o=l(),Ab=a("li"),wfe=a("strong"),W8o=o("blenderbot-small"),Q8o=o(" \u2014 "),YD=a("a"),H8o=o("BlenderbotSmallForConditionalGeneration"),U8o=o(" (BlenderbotSmall model)"),J8o=l(),yb=a("li"),Afe=a("strong"),Y8o=o("encoder-decoder"),K8o=o(" \u2014 "),KD=a("a"),Z8o=o("EncoderDecoderModel"),exo=o(" (Encoder decoder model)"),oxo=l(),Lb=a("li"),yfe=a("strong"),rxo=o("fsmt"),txo=o(" \u2014 "),ZD=a("a"),axo=o("FSMTForConditionalGeneration"),nxo=o(" (FairSeq Machine-Translation model)"),sxo=l(),xb=a("li"),Lfe=a("strong"),lxo=o("led"),ixo=o(" \u2014 "),eG=a("a"),dxo=o("LEDForConditionalGeneration"),cxo=o(" (LED model)"),fxo=l(),$b=a("li"),xfe=a("strong"),mxo=o("m2m_100"),gxo=o(" \u2014 "),oG=a("a"),hxo=o("M2M100ForConditionalGeneration"),pxo=o(" (M2M100 model)"),_xo=l(),kb=a("li"),$fe=a("strong"),uxo=o("marian"),bxo=o(" \u2014 "),rG=a("a"),vxo=o("MarianMTModel"),Fxo=o(" (Marian model)"),Txo=l(),Sb=a("li"),kfe=a("strong"),Mxo=o("mbart"),Exo=o(" \u2014 "),tG=a("a"),Cxo=o("MBartForConditionalGeneration"),wxo=o(" (mBART model)"),Axo=l(),Rb=a("li"),Sfe=a("strong"),yxo=o("mt5"),Lxo=o(" \u2014 "),aG=a("a"),xxo=o("MT5ForConditionalGeneration"),$xo=o(" (mT5 model)"),kxo=l(),Pb=a("li"),Rfe=a("strong"),Sxo=o("pegasus"),Rxo=o(" \u2014 "),nG=a("a"),Pxo=o("PegasusForConditionalGeneration"),Bxo=o(" (Pegasus model)"),Ixo=l(),Bb=a("li"),Pfe=a("strong"),Nxo=o("plbart"),qxo=o(" \u2014 "),sG=a("a"),jxo=o("PLBartForConditionalGeneration"),Dxo=o(" (PLBart model)"),Gxo=l(),Ib=a("li"),Bfe=a("strong"),Oxo=o("prophetnet"),Vxo=o(" \u2014 "),lG=a("a"),Xxo=o("ProphetNetForConditionalGeneration"),zxo=o(" (ProphetNet model)"),Wxo=l(),Nb=a("li"),Ife=a("strong"),Qxo=o("t5"),Hxo=o(" \u2014 "),iG=a("a"),Uxo=o("T5ForConditionalGeneration"),Jxo=o(" (T5 model)"),Yxo=l(),qb=a("li"),Nfe=a("strong"),Kxo=o("xlm-prophetnet"),Zxo=o(" \u2014 "),dG=a("a"),e$o=o("XLMProphetNetForConditionalGeneration"),o$o=o(" (XLMProphetNet model)"),r$o=l(),jb=a("p"),t$o=o("The model is set in evaluation mode by default using "),qfe=a("code"),a$o=o("model.eval()"),n$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jfe=a("code"),s$o=o("model.train()"),l$o=l(),F(Db.$$.fragment),Nqe=l(),Di=a("h2"),Gb=a("a"),Dfe=a("span"),F(LA.$$.fragment),i$o=l(),Gfe=a("span"),d$o=o("AutoModelForSequenceClassification"),qqe=l(),Ro=a("div"),F(xA.$$.fragment),c$o=l(),Gi=a("p"),f$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cG=a("a"),m$o=o("from_pretrained()"),g$o=o(" class method or the "),fG=a("a"),h$o=o("from_config()"),p$o=o(` class
method.`),_$o=l(),$A=a("p"),u$o=o("This class cannot be instantiated directly using "),Ofe=a("code"),b$o=o("__init__()"),v$o=o(" (throws an error)."),F$o=l(),it=a("div"),F(kA.$$.fragment),T$o=l(),Vfe=a("p"),M$o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),E$o=l(),Oi=a("p"),C$o=o(`Note:
Loading a model from its configuration file does `),Xfe=a("strong"),w$o=o("not"),A$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mG=a("a"),y$o=o("from_pretrained()"),L$o=o(" to load the model weights."),x$o=l(),F(Ob.$$.fragment),$$o=l(),oo=a("div"),F(SA.$$.fragment),k$o=l(),zfe=a("p"),S$o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),R$o=l(),Ra=a("p"),P$o=o("The model class to instantiate is selected based on the "),Wfe=a("code"),B$o=o("model_type"),I$o=o(` property of the config object (either
passed as an argument or loaded from `),Qfe=a("code"),N$o=o("pretrained_model_name_or_path"),q$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hfe=a("code"),j$o=o("pretrained_model_name_or_path"),D$o=o(":"),G$o=l(),N=a("ul"),Vb=a("li"),Ufe=a("strong"),O$o=o("albert"),V$o=o(" \u2014 "),gG=a("a"),X$o=o("AlbertForSequenceClassification"),z$o=o(" (ALBERT model)"),W$o=l(),Xb=a("li"),Jfe=a("strong"),Q$o=o("bart"),H$o=o(" \u2014 "),hG=a("a"),U$o=o("BartForSequenceClassification"),J$o=o(" (BART model)"),Y$o=l(),zb=a("li"),Yfe=a("strong"),K$o=o("bert"),Z$o=o(" \u2014 "),pG=a("a"),eko=o("BertForSequenceClassification"),oko=o(" (BERT model)"),rko=l(),Wb=a("li"),Kfe=a("strong"),tko=o("big_bird"),ako=o(" \u2014 "),_G=a("a"),nko=o("BigBirdForSequenceClassification"),sko=o(" (BigBird model)"),lko=l(),Qb=a("li"),Zfe=a("strong"),iko=o("bigbird_pegasus"),dko=o(" \u2014 "),uG=a("a"),cko=o("BigBirdPegasusForSequenceClassification"),fko=o(" (BigBirdPegasus model)"),mko=l(),Hb=a("li"),eme=a("strong"),gko=o("camembert"),hko=o(" \u2014 "),bG=a("a"),pko=o("CamembertForSequenceClassification"),_ko=o(" (CamemBERT model)"),uko=l(),Ub=a("li"),ome=a("strong"),bko=o("canine"),vko=o(" \u2014 "),vG=a("a"),Fko=o("CanineForSequenceClassification"),Tko=o(" (Canine model)"),Mko=l(),Jb=a("li"),rme=a("strong"),Eko=o("convbert"),Cko=o(" \u2014 "),FG=a("a"),wko=o("ConvBertForSequenceClassification"),Ako=o(" (ConvBERT model)"),yko=l(),Yb=a("li"),tme=a("strong"),Lko=o("ctrl"),xko=o(" \u2014 "),TG=a("a"),$ko=o("CTRLForSequenceClassification"),kko=o(" (CTRL model)"),Sko=l(),Kb=a("li"),ame=a("strong"),Rko=o("data2vec-text"),Pko=o(" \u2014 "),MG=a("a"),Bko=o("Data2VecTextForSequenceClassification"),Iko=o(" (Data2VecText model)"),Nko=l(),Zb=a("li"),nme=a("strong"),qko=o("deberta"),jko=o(" \u2014 "),EG=a("a"),Dko=o("DebertaForSequenceClassification"),Gko=o(" (DeBERTa model)"),Oko=l(),e2=a("li"),sme=a("strong"),Vko=o("deberta-v2"),Xko=o(" \u2014 "),CG=a("a"),zko=o("DebertaV2ForSequenceClassification"),Wko=o(" (DeBERTa-v2 model)"),Qko=l(),o2=a("li"),lme=a("strong"),Hko=o("distilbert"),Uko=o(" \u2014 "),wG=a("a"),Jko=o("DistilBertForSequenceClassification"),Yko=o(" (DistilBERT model)"),Kko=l(),r2=a("li"),ime=a("strong"),Zko=o("electra"),eSo=o(" \u2014 "),AG=a("a"),oSo=o("ElectraForSequenceClassification"),rSo=o(" (ELECTRA model)"),tSo=l(),t2=a("li"),dme=a("strong"),aSo=o("flaubert"),nSo=o(" \u2014 "),yG=a("a"),sSo=o("FlaubertForSequenceClassification"),lSo=o(" (FlauBERT model)"),iSo=l(),a2=a("li"),cme=a("strong"),dSo=o("fnet"),cSo=o(" \u2014 "),LG=a("a"),fSo=o("FNetForSequenceClassification"),mSo=o(" (FNet model)"),gSo=l(),n2=a("li"),fme=a("strong"),hSo=o("funnel"),pSo=o(" \u2014 "),xG=a("a"),_So=o("FunnelForSequenceClassification"),uSo=o(" (Funnel Transformer model)"),bSo=l(),s2=a("li"),mme=a("strong"),vSo=o("gpt2"),FSo=o(" \u2014 "),$G=a("a"),TSo=o("GPT2ForSequenceClassification"),MSo=o(" (OpenAI GPT-2 model)"),ESo=l(),l2=a("li"),gme=a("strong"),CSo=o("gpt_neo"),wSo=o(" \u2014 "),kG=a("a"),ASo=o("GPTNeoForSequenceClassification"),ySo=o(" (GPT Neo model)"),LSo=l(),i2=a("li"),hme=a("strong"),xSo=o("gptj"),$So=o(" \u2014 "),SG=a("a"),kSo=o("GPTJForSequenceClassification"),SSo=o(" (GPT-J model)"),RSo=l(),d2=a("li"),pme=a("strong"),PSo=o("ibert"),BSo=o(" \u2014 "),RG=a("a"),ISo=o("IBertForSequenceClassification"),NSo=o(" (I-BERT model)"),qSo=l(),c2=a("li"),_me=a("strong"),jSo=o("layoutlm"),DSo=o(" \u2014 "),PG=a("a"),GSo=o("LayoutLMForSequenceClassification"),OSo=o(" (LayoutLM model)"),VSo=l(),f2=a("li"),ume=a("strong"),XSo=o("layoutlmv2"),zSo=o(" \u2014 "),BG=a("a"),WSo=o("LayoutLMv2ForSequenceClassification"),QSo=o(" (LayoutLMv2 model)"),HSo=l(),m2=a("li"),bme=a("strong"),USo=o("layoutlmv3"),JSo=o(" \u2014 "),IG=a("a"),YSo=o("LayoutLMv3ForSequenceClassification"),KSo=o(" (LayoutLMv3 model)"),ZSo=l(),g2=a("li"),vme=a("strong"),eRo=o("led"),oRo=o(" \u2014 "),NG=a("a"),rRo=o("LEDForSequenceClassification"),tRo=o(" (LED model)"),aRo=l(),h2=a("li"),Fme=a("strong"),nRo=o("longformer"),sRo=o(" \u2014 "),qG=a("a"),lRo=o("LongformerForSequenceClassification"),iRo=o(" (Longformer model)"),dRo=l(),p2=a("li"),Tme=a("strong"),cRo=o("mbart"),fRo=o(" \u2014 "),jG=a("a"),mRo=o("MBartForSequenceClassification"),gRo=o(" (mBART model)"),hRo=l(),_2=a("li"),Mme=a("strong"),pRo=o("megatron-bert"),_Ro=o(" \u2014 "),DG=a("a"),uRo=o("MegatronBertForSequenceClassification"),bRo=o(" (MegatronBert model)"),vRo=l(),u2=a("li"),Eme=a("strong"),FRo=o("mobilebert"),TRo=o(" \u2014 "),GG=a("a"),MRo=o("MobileBertForSequenceClassification"),ERo=o(" (MobileBERT model)"),CRo=l(),b2=a("li"),Cme=a("strong"),wRo=o("mpnet"),ARo=o(" \u2014 "),OG=a("a"),yRo=o("MPNetForSequenceClassification"),LRo=o(" (MPNet model)"),xRo=l(),v2=a("li"),wme=a("strong"),$Ro=o("nystromformer"),kRo=o(" \u2014 "),VG=a("a"),SRo=o("NystromformerForSequenceClassification"),RRo=o(" (Nystromformer model)"),PRo=l(),F2=a("li"),Ame=a("strong"),BRo=o("openai-gpt"),IRo=o(" \u2014 "),XG=a("a"),NRo=o("OpenAIGPTForSequenceClassification"),qRo=o(" (OpenAI GPT model)"),jRo=l(),T2=a("li"),yme=a("strong"),DRo=o("perceiver"),GRo=o(" \u2014 "),zG=a("a"),ORo=o("PerceiverForSequenceClassification"),VRo=o(" (Perceiver model)"),XRo=l(),M2=a("li"),Lme=a("strong"),zRo=o("plbart"),WRo=o(" \u2014 "),WG=a("a"),QRo=o("PLBartForSequenceClassification"),HRo=o(" (PLBart model)"),URo=l(),E2=a("li"),xme=a("strong"),JRo=o("qdqbert"),YRo=o(" \u2014 "),QG=a("a"),KRo=o("QDQBertForSequenceClassification"),ZRo=o(" (QDQBert model)"),ePo=l(),C2=a("li"),$me=a("strong"),oPo=o("reformer"),rPo=o(" \u2014 "),HG=a("a"),tPo=o("ReformerForSequenceClassification"),aPo=o(" (Reformer model)"),nPo=l(),w2=a("li"),kme=a("strong"),sPo=o("rembert"),lPo=o(" \u2014 "),UG=a("a"),iPo=o("RemBertForSequenceClassification"),dPo=o(" (RemBERT model)"),cPo=l(),A2=a("li"),Sme=a("strong"),fPo=o("roberta"),mPo=o(" \u2014 "),JG=a("a"),gPo=o("RobertaForSequenceClassification"),hPo=o(" (RoBERTa model)"),pPo=l(),y2=a("li"),Rme=a("strong"),_Po=o("roformer"),uPo=o(" \u2014 "),YG=a("a"),bPo=o("RoFormerForSequenceClassification"),vPo=o(" (RoFormer model)"),FPo=l(),L2=a("li"),Pme=a("strong"),TPo=o("squeezebert"),MPo=o(" \u2014 "),KG=a("a"),EPo=o("SqueezeBertForSequenceClassification"),CPo=o(" (SqueezeBERT model)"),wPo=l(),x2=a("li"),Bme=a("strong"),APo=o("tapas"),yPo=o(" \u2014 "),ZG=a("a"),LPo=o("TapasForSequenceClassification"),xPo=o(" (TAPAS model)"),$Po=l(),$2=a("li"),Ime=a("strong"),kPo=o("transfo-xl"),SPo=o(" \u2014 "),eO=a("a"),RPo=o("TransfoXLForSequenceClassification"),PPo=o(" (Transformer-XL model)"),BPo=l(),k2=a("li"),Nme=a("strong"),IPo=o("xlm"),NPo=o(" \u2014 "),oO=a("a"),qPo=o("XLMForSequenceClassification"),jPo=o(" (XLM model)"),DPo=l(),S2=a("li"),qme=a("strong"),GPo=o("xlm-roberta"),OPo=o(" \u2014 "),rO=a("a"),VPo=o("XLMRobertaForSequenceClassification"),XPo=o(" (XLM-RoBERTa model)"),zPo=l(),R2=a("li"),jme=a("strong"),WPo=o("xlm-roberta-xl"),QPo=o(" \u2014 "),tO=a("a"),HPo=o("XLMRobertaXLForSequenceClassification"),UPo=o(" (XLM-RoBERTa-XL model)"),JPo=l(),P2=a("li"),Dme=a("strong"),YPo=o("xlnet"),KPo=o(" \u2014 "),aO=a("a"),ZPo=o("XLNetForSequenceClassification"),eBo=o(" (XLNet model)"),oBo=l(),B2=a("li"),Gme=a("strong"),rBo=o("yoso"),tBo=o(" \u2014 "),nO=a("a"),aBo=o("YosoForSequenceClassification"),nBo=o(" (YOSO model)"),sBo=l(),I2=a("p"),lBo=o("The model is set in evaluation mode by default using "),Ome=a("code"),iBo=o("model.eval()"),dBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vme=a("code"),cBo=o("model.train()"),fBo=l(),F(N2.$$.fragment),jqe=l(),Vi=a("h2"),q2=a("a"),Xme=a("span"),F(RA.$$.fragment),mBo=l(),zme=a("span"),gBo=o("AutoModelForMultipleChoice"),Dqe=l(),Po=a("div"),F(PA.$$.fragment),hBo=l(),Xi=a("p"),pBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sO=a("a"),_Bo=o("from_pretrained()"),uBo=o(" class method or the "),lO=a("a"),bBo=o("from_config()"),vBo=o(` class
method.`),FBo=l(),BA=a("p"),TBo=o("This class cannot be instantiated directly using "),Wme=a("code"),MBo=o("__init__()"),EBo=o(" (throws an error)."),CBo=l(),dt=a("div"),F(IA.$$.fragment),wBo=l(),Qme=a("p"),ABo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),yBo=l(),zi=a("p"),LBo=o(`Note:
Loading a model from its configuration file does `),Hme=a("strong"),xBo=o("not"),$Bo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=a("a"),kBo=o("from_pretrained()"),SBo=o(" to load the model weights."),RBo=l(),F(j2.$$.fragment),PBo=l(),ro=a("div"),F(NA.$$.fragment),BBo=l(),Ume=a("p"),IBo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NBo=l(),Pa=a("p"),qBo=o("The model class to instantiate is selected based on the "),Jme=a("code"),jBo=o("model_type"),DBo=o(` property of the config object (either
passed as an argument or loaded from `),Yme=a("code"),GBo=o("pretrained_model_name_or_path"),OBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kme=a("code"),VBo=o("pretrained_model_name_or_path"),XBo=o(":"),zBo=l(),K=a("ul"),D2=a("li"),Zme=a("strong"),WBo=o("albert"),QBo=o(" \u2014 "),dO=a("a"),HBo=o("AlbertForMultipleChoice"),UBo=o(" (ALBERT model)"),JBo=l(),G2=a("li"),ege=a("strong"),YBo=o("bert"),KBo=o(" \u2014 "),cO=a("a"),ZBo=o("BertForMultipleChoice"),eIo=o(" (BERT model)"),oIo=l(),O2=a("li"),oge=a("strong"),rIo=o("big_bird"),tIo=o(" \u2014 "),fO=a("a"),aIo=o("BigBirdForMultipleChoice"),nIo=o(" (BigBird model)"),sIo=l(),V2=a("li"),rge=a("strong"),lIo=o("camembert"),iIo=o(" \u2014 "),mO=a("a"),dIo=o("CamembertForMultipleChoice"),cIo=o(" (CamemBERT model)"),fIo=l(),X2=a("li"),tge=a("strong"),mIo=o("canine"),gIo=o(" \u2014 "),gO=a("a"),hIo=o("CanineForMultipleChoice"),pIo=o(" (Canine model)"),_Io=l(),z2=a("li"),age=a("strong"),uIo=o("convbert"),bIo=o(" \u2014 "),hO=a("a"),vIo=o("ConvBertForMultipleChoice"),FIo=o(" (ConvBERT model)"),TIo=l(),W2=a("li"),nge=a("strong"),MIo=o("data2vec-text"),EIo=o(" \u2014 "),pO=a("a"),CIo=o("Data2VecTextForMultipleChoice"),wIo=o(" (Data2VecText model)"),AIo=l(),Q2=a("li"),sge=a("strong"),yIo=o("deberta-v2"),LIo=o(" \u2014 "),_O=a("a"),xIo=o("DebertaV2ForMultipleChoice"),$Io=o(" (DeBERTa-v2 model)"),kIo=l(),H2=a("li"),lge=a("strong"),SIo=o("distilbert"),RIo=o(" \u2014 "),uO=a("a"),PIo=o("DistilBertForMultipleChoice"),BIo=o(" (DistilBERT model)"),IIo=l(),U2=a("li"),ige=a("strong"),NIo=o("electra"),qIo=o(" \u2014 "),bO=a("a"),jIo=o("ElectraForMultipleChoice"),DIo=o(" (ELECTRA model)"),GIo=l(),J2=a("li"),dge=a("strong"),OIo=o("flaubert"),VIo=o(" \u2014 "),vO=a("a"),XIo=o("FlaubertForMultipleChoice"),zIo=o(" (FlauBERT model)"),WIo=l(),Y2=a("li"),cge=a("strong"),QIo=o("fnet"),HIo=o(" \u2014 "),FO=a("a"),UIo=o("FNetForMultipleChoice"),JIo=o(" (FNet model)"),YIo=l(),K2=a("li"),fge=a("strong"),KIo=o("funnel"),ZIo=o(" \u2014 "),TO=a("a"),eNo=o("FunnelForMultipleChoice"),oNo=o(" (Funnel Transformer model)"),rNo=l(),Z2=a("li"),mge=a("strong"),tNo=o("ibert"),aNo=o(" \u2014 "),MO=a("a"),nNo=o("IBertForMultipleChoice"),sNo=o(" (I-BERT model)"),lNo=l(),e4=a("li"),gge=a("strong"),iNo=o("longformer"),dNo=o(" \u2014 "),EO=a("a"),cNo=o("LongformerForMultipleChoice"),fNo=o(" (Longformer model)"),mNo=l(),o4=a("li"),hge=a("strong"),gNo=o("megatron-bert"),hNo=o(" \u2014 "),CO=a("a"),pNo=o("MegatronBertForMultipleChoice"),_No=o(" (MegatronBert model)"),uNo=l(),r4=a("li"),pge=a("strong"),bNo=o("mobilebert"),vNo=o(" \u2014 "),wO=a("a"),FNo=o("MobileBertForMultipleChoice"),TNo=o(" (MobileBERT model)"),MNo=l(),t4=a("li"),_ge=a("strong"),ENo=o("mpnet"),CNo=o(" \u2014 "),AO=a("a"),wNo=o("MPNetForMultipleChoice"),ANo=o(" (MPNet model)"),yNo=l(),a4=a("li"),uge=a("strong"),LNo=o("nystromformer"),xNo=o(" \u2014 "),yO=a("a"),$No=o("NystromformerForMultipleChoice"),kNo=o(" (Nystromformer model)"),SNo=l(),n4=a("li"),bge=a("strong"),RNo=o("qdqbert"),PNo=o(" \u2014 "),LO=a("a"),BNo=o("QDQBertForMultipleChoice"),INo=o(" (QDQBert model)"),NNo=l(),s4=a("li"),vge=a("strong"),qNo=o("rembert"),jNo=o(" \u2014 "),xO=a("a"),DNo=o("RemBertForMultipleChoice"),GNo=o(" (RemBERT model)"),ONo=l(),l4=a("li"),Fge=a("strong"),VNo=o("roberta"),XNo=o(" \u2014 "),$O=a("a"),zNo=o("RobertaForMultipleChoice"),WNo=o(" (RoBERTa model)"),QNo=l(),i4=a("li"),Tge=a("strong"),HNo=o("roformer"),UNo=o(" \u2014 "),kO=a("a"),JNo=o("RoFormerForMultipleChoice"),YNo=o(" (RoFormer model)"),KNo=l(),d4=a("li"),Mge=a("strong"),ZNo=o("squeezebert"),eqo=o(" \u2014 "),SO=a("a"),oqo=o("SqueezeBertForMultipleChoice"),rqo=o(" (SqueezeBERT model)"),tqo=l(),c4=a("li"),Ege=a("strong"),aqo=o("xlm"),nqo=o(" \u2014 "),RO=a("a"),sqo=o("XLMForMultipleChoice"),lqo=o(" (XLM model)"),iqo=l(),f4=a("li"),Cge=a("strong"),dqo=o("xlm-roberta"),cqo=o(" \u2014 "),PO=a("a"),fqo=o("XLMRobertaForMultipleChoice"),mqo=o(" (XLM-RoBERTa model)"),gqo=l(),m4=a("li"),wge=a("strong"),hqo=o("xlm-roberta-xl"),pqo=o(" \u2014 "),BO=a("a"),_qo=o("XLMRobertaXLForMultipleChoice"),uqo=o(" (XLM-RoBERTa-XL model)"),bqo=l(),g4=a("li"),Age=a("strong"),vqo=o("xlnet"),Fqo=o(" \u2014 "),IO=a("a"),Tqo=o("XLNetForMultipleChoice"),Mqo=o(" (XLNet model)"),Eqo=l(),h4=a("li"),yge=a("strong"),Cqo=o("yoso"),wqo=o(" \u2014 "),NO=a("a"),Aqo=o("YosoForMultipleChoice"),yqo=o(" (YOSO model)"),Lqo=l(),p4=a("p"),xqo=o("The model is set in evaluation mode by default using "),Lge=a("code"),$qo=o("model.eval()"),kqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xge=a("code"),Sqo=o("model.train()"),Rqo=l(),F(_4.$$.fragment),Gqe=l(),Wi=a("h2"),u4=a("a"),$ge=a("span"),F(qA.$$.fragment),Pqo=l(),kge=a("span"),Bqo=o("AutoModelForNextSentencePrediction"),Oqe=l(),Bo=a("div"),F(jA.$$.fragment),Iqo=l(),Qi=a("p"),Nqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qO=a("a"),qqo=o("from_pretrained()"),jqo=o(" class method or the "),jO=a("a"),Dqo=o("from_config()"),Gqo=o(` class
method.`),Oqo=l(),DA=a("p"),Vqo=o("This class cannot be instantiated directly using "),Sge=a("code"),Xqo=o("__init__()"),zqo=o(" (throws an error)."),Wqo=l(),ct=a("div"),F(GA.$$.fragment),Qqo=l(),Rge=a("p"),Hqo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Uqo=l(),Hi=a("p"),Jqo=o(`Note:
Loading a model from its configuration file does `),Pge=a("strong"),Yqo=o("not"),Kqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=a("a"),Zqo=o("from_pretrained()"),ejo=o(" to load the model weights."),ojo=l(),F(b4.$$.fragment),rjo=l(),to=a("div"),F(OA.$$.fragment),tjo=l(),Bge=a("p"),ajo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),njo=l(),Ba=a("p"),sjo=o("The model class to instantiate is selected based on the "),Ige=a("code"),ljo=o("model_type"),ijo=o(` property of the config object (either
passed as an argument or loaded from `),Nge=a("code"),djo=o("pretrained_model_name_or_path"),cjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=a("code"),fjo=o("pretrained_model_name_or_path"),mjo=o(":"),gjo=l(),Yr=a("ul"),v4=a("li"),jge=a("strong"),hjo=o("bert"),pjo=o(" \u2014 "),GO=a("a"),_jo=o("BertForNextSentencePrediction"),ujo=o(" (BERT model)"),bjo=l(),F4=a("li"),Dge=a("strong"),vjo=o("fnet"),Fjo=o(" \u2014 "),OO=a("a"),Tjo=o("FNetForNextSentencePrediction"),Mjo=o(" (FNet model)"),Ejo=l(),T4=a("li"),Gge=a("strong"),Cjo=o("megatron-bert"),wjo=o(" \u2014 "),VO=a("a"),Ajo=o("MegatronBertForNextSentencePrediction"),yjo=o(" (MegatronBert model)"),Ljo=l(),M4=a("li"),Oge=a("strong"),xjo=o("mobilebert"),$jo=o(" \u2014 "),XO=a("a"),kjo=o("MobileBertForNextSentencePrediction"),Sjo=o(" (MobileBERT model)"),Rjo=l(),E4=a("li"),Vge=a("strong"),Pjo=o("qdqbert"),Bjo=o(" \u2014 "),zO=a("a"),Ijo=o("QDQBertForNextSentencePrediction"),Njo=o(" (QDQBert model)"),qjo=l(),C4=a("p"),jjo=o("The model is set in evaluation mode by default using "),Xge=a("code"),Djo=o("model.eval()"),Gjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=a("code"),Ojo=o("model.train()"),Vjo=l(),F(w4.$$.fragment),Vqe=l(),Ui=a("h2"),A4=a("a"),Wge=a("span"),F(VA.$$.fragment),Xjo=l(),Qge=a("span"),zjo=o("AutoModelForTokenClassification"),Xqe=l(),Io=a("div"),F(XA.$$.fragment),Wjo=l(),Ji=a("p"),Qjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),WO=a("a"),Hjo=o("from_pretrained()"),Ujo=o(" class method or the "),QO=a("a"),Jjo=o("from_config()"),Yjo=o(` class
method.`),Kjo=l(),zA=a("p"),Zjo=o("This class cannot be instantiated directly using "),Hge=a("code"),eDo=o("__init__()"),oDo=o(" (throws an error)."),rDo=l(),ft=a("div"),F(WA.$$.fragment),tDo=l(),Uge=a("p"),aDo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nDo=l(),Yi=a("p"),sDo=o(`Note:
Loading a model from its configuration file does `),Jge=a("strong"),lDo=o("not"),iDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=a("a"),dDo=o("from_pretrained()"),cDo=o(" to load the model weights."),fDo=l(),F(y4.$$.fragment),mDo=l(),ao=a("div"),F(QA.$$.fragment),gDo=l(),Yge=a("p"),hDo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pDo=l(),Ia=a("p"),_Do=o("The model class to instantiate is selected based on the "),Kge=a("code"),uDo=o("model_type"),bDo=o(` property of the config object (either
passed as an argument or loaded from `),Zge=a("code"),vDo=o("pretrained_model_name_or_path"),FDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=a("code"),TDo=o("pretrained_model_name_or_path"),MDo=o(":"),EDo=l(),H=a("ul"),L4=a("li"),ohe=a("strong"),CDo=o("albert"),wDo=o(" \u2014 "),UO=a("a"),ADo=o("AlbertForTokenClassification"),yDo=o(" (ALBERT model)"),LDo=l(),x4=a("li"),rhe=a("strong"),xDo=o("bert"),$Do=o(" \u2014 "),JO=a("a"),kDo=o("BertForTokenClassification"),SDo=o(" (BERT model)"),RDo=l(),$4=a("li"),the=a("strong"),PDo=o("big_bird"),BDo=o(" \u2014 "),YO=a("a"),IDo=o("BigBirdForTokenClassification"),NDo=o(" (BigBird model)"),qDo=l(),k4=a("li"),ahe=a("strong"),jDo=o("camembert"),DDo=o(" \u2014 "),KO=a("a"),GDo=o("CamembertForTokenClassification"),ODo=o(" (CamemBERT model)"),VDo=l(),S4=a("li"),nhe=a("strong"),XDo=o("canine"),zDo=o(" \u2014 "),ZO=a("a"),WDo=o("CanineForTokenClassification"),QDo=o(" (Canine model)"),HDo=l(),R4=a("li"),she=a("strong"),UDo=o("convbert"),JDo=o(" \u2014 "),eV=a("a"),YDo=o("ConvBertForTokenClassification"),KDo=o(" (ConvBERT model)"),ZDo=l(),P4=a("li"),lhe=a("strong"),eGo=o("data2vec-text"),oGo=o(" \u2014 "),oV=a("a"),rGo=o("Data2VecTextForTokenClassification"),tGo=o(" (Data2VecText model)"),aGo=l(),B4=a("li"),ihe=a("strong"),nGo=o("deberta"),sGo=o(" \u2014 "),rV=a("a"),lGo=o("DebertaForTokenClassification"),iGo=o(" (DeBERTa model)"),dGo=l(),I4=a("li"),dhe=a("strong"),cGo=o("deberta-v2"),fGo=o(" \u2014 "),tV=a("a"),mGo=o("DebertaV2ForTokenClassification"),gGo=o(" (DeBERTa-v2 model)"),hGo=l(),N4=a("li"),che=a("strong"),pGo=o("distilbert"),_Go=o(" \u2014 "),aV=a("a"),uGo=o("DistilBertForTokenClassification"),bGo=o(" (DistilBERT model)"),vGo=l(),q4=a("li"),fhe=a("strong"),FGo=o("electra"),TGo=o(" \u2014 "),nV=a("a"),MGo=o("ElectraForTokenClassification"),EGo=o(" (ELECTRA model)"),CGo=l(),j4=a("li"),mhe=a("strong"),wGo=o("flaubert"),AGo=o(" \u2014 "),sV=a("a"),yGo=o("FlaubertForTokenClassification"),LGo=o(" (FlauBERT model)"),xGo=l(),D4=a("li"),ghe=a("strong"),$Go=o("fnet"),kGo=o(" \u2014 "),lV=a("a"),SGo=o("FNetForTokenClassification"),RGo=o(" (FNet model)"),PGo=l(),G4=a("li"),hhe=a("strong"),BGo=o("funnel"),IGo=o(" \u2014 "),iV=a("a"),NGo=o("FunnelForTokenClassification"),qGo=o(" (Funnel Transformer model)"),jGo=l(),O4=a("li"),phe=a("strong"),DGo=o("gpt2"),GGo=o(" \u2014 "),dV=a("a"),OGo=o("GPT2ForTokenClassification"),VGo=o(" (OpenAI GPT-2 model)"),XGo=l(),V4=a("li"),_he=a("strong"),zGo=o("ibert"),WGo=o(" \u2014 "),cV=a("a"),QGo=o("IBertForTokenClassification"),HGo=o(" (I-BERT model)"),UGo=l(),X4=a("li"),uhe=a("strong"),JGo=o("layoutlm"),YGo=o(" \u2014 "),fV=a("a"),KGo=o("LayoutLMForTokenClassification"),ZGo=o(" (LayoutLM model)"),eOo=l(),z4=a("li"),bhe=a("strong"),oOo=o("layoutlmv2"),rOo=o(" \u2014 "),mV=a("a"),tOo=o("LayoutLMv2ForTokenClassification"),aOo=o(" (LayoutLMv2 model)"),nOo=l(),W4=a("li"),vhe=a("strong"),sOo=o("layoutlmv3"),lOo=o(" \u2014 "),gV=a("a"),iOo=o("LayoutLMv3ForTokenClassification"),dOo=o(" (LayoutLMv3 model)"),cOo=l(),Q4=a("li"),Fhe=a("strong"),fOo=o("longformer"),mOo=o(" \u2014 "),hV=a("a"),gOo=o("LongformerForTokenClassification"),hOo=o(" (Longformer model)"),pOo=l(),H4=a("li"),The=a("strong"),_Oo=o("megatron-bert"),uOo=o(" \u2014 "),pV=a("a"),bOo=o("MegatronBertForTokenClassification"),vOo=o(" (MegatronBert model)"),FOo=l(),U4=a("li"),Mhe=a("strong"),TOo=o("mobilebert"),MOo=o(" \u2014 "),_V=a("a"),EOo=o("MobileBertForTokenClassification"),COo=o(" (MobileBERT model)"),wOo=l(),J4=a("li"),Ehe=a("strong"),AOo=o("mpnet"),yOo=o(" \u2014 "),uV=a("a"),LOo=o("MPNetForTokenClassification"),xOo=o(" (MPNet model)"),$Oo=l(),Y4=a("li"),Che=a("strong"),kOo=o("nystromformer"),SOo=o(" \u2014 "),bV=a("a"),ROo=o("NystromformerForTokenClassification"),POo=o(" (Nystromformer model)"),BOo=l(),K4=a("li"),whe=a("strong"),IOo=o("qdqbert"),NOo=o(" \u2014 "),vV=a("a"),qOo=o("QDQBertForTokenClassification"),jOo=o(" (QDQBert model)"),DOo=l(),Z4=a("li"),Ahe=a("strong"),GOo=o("rembert"),OOo=o(" \u2014 "),FV=a("a"),VOo=o("RemBertForTokenClassification"),XOo=o(" (RemBERT model)"),zOo=l(),e5=a("li"),yhe=a("strong"),WOo=o("roberta"),QOo=o(" \u2014 "),TV=a("a"),HOo=o("RobertaForTokenClassification"),UOo=o(" (RoBERTa model)"),JOo=l(),o5=a("li"),Lhe=a("strong"),YOo=o("roformer"),KOo=o(" \u2014 "),MV=a("a"),ZOo=o("RoFormerForTokenClassification"),eVo=o(" (RoFormer model)"),oVo=l(),r5=a("li"),xhe=a("strong"),rVo=o("squeezebert"),tVo=o(" \u2014 "),EV=a("a"),aVo=o("SqueezeBertForTokenClassification"),nVo=o(" (SqueezeBERT model)"),sVo=l(),t5=a("li"),$he=a("strong"),lVo=o("xlm"),iVo=o(" \u2014 "),CV=a("a"),dVo=o("XLMForTokenClassification"),cVo=o(" (XLM model)"),fVo=l(),a5=a("li"),khe=a("strong"),mVo=o("xlm-roberta"),gVo=o(" \u2014 "),wV=a("a"),hVo=o("XLMRobertaForTokenClassification"),pVo=o(" (XLM-RoBERTa model)"),_Vo=l(),n5=a("li"),She=a("strong"),uVo=o("xlm-roberta-xl"),bVo=o(" \u2014 "),AV=a("a"),vVo=o("XLMRobertaXLForTokenClassification"),FVo=o(" (XLM-RoBERTa-XL model)"),TVo=l(),s5=a("li"),Rhe=a("strong"),MVo=o("xlnet"),EVo=o(" \u2014 "),yV=a("a"),CVo=o("XLNetForTokenClassification"),wVo=o(" (XLNet model)"),AVo=l(),l5=a("li"),Phe=a("strong"),yVo=o("yoso"),LVo=o(" \u2014 "),LV=a("a"),xVo=o("YosoForTokenClassification"),$Vo=o(" (YOSO model)"),kVo=l(),i5=a("p"),SVo=o("The model is set in evaluation mode by default using "),Bhe=a("code"),RVo=o("model.eval()"),PVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ihe=a("code"),BVo=o("model.train()"),IVo=l(),F(d5.$$.fragment),zqe=l(),Ki=a("h2"),c5=a("a"),Nhe=a("span"),F(HA.$$.fragment),NVo=l(),qhe=a("span"),qVo=o("AutoModelForQuestionAnswering"),Wqe=l(),No=a("div"),F(UA.$$.fragment),jVo=l(),Zi=a("p"),DVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xV=a("a"),GVo=o("from_pretrained()"),OVo=o(" class method or the "),$V=a("a"),VVo=o("from_config()"),XVo=o(` class
method.`),zVo=l(),JA=a("p"),WVo=o("This class cannot be instantiated directly using "),jhe=a("code"),QVo=o("__init__()"),HVo=o(" (throws an error)."),UVo=l(),mt=a("div"),F(YA.$$.fragment),JVo=l(),Dhe=a("p"),YVo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),KVo=l(),ed=a("p"),ZVo=o(`Note:
Loading a model from its configuration file does `),Ghe=a("strong"),eXo=o("not"),oXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=a("a"),rXo=o("from_pretrained()"),tXo=o(" to load the model weights."),aXo=l(),F(f5.$$.fragment),nXo=l(),no=a("div"),F(KA.$$.fragment),sXo=l(),Ohe=a("p"),lXo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iXo=l(),Na=a("p"),dXo=o("The model class to instantiate is selected based on the "),Vhe=a("code"),cXo=o("model_type"),fXo=o(` property of the config object (either
passed as an argument or loaded from `),Xhe=a("code"),mXo=o("pretrained_model_name_or_path"),gXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zhe=a("code"),hXo=o("pretrained_model_name_or_path"),pXo=o(":"),_Xo=l(),V=a("ul"),m5=a("li"),Whe=a("strong"),uXo=o("albert"),bXo=o(" \u2014 "),SV=a("a"),vXo=o("AlbertForQuestionAnswering"),FXo=o(" (ALBERT model)"),TXo=l(),g5=a("li"),Qhe=a("strong"),MXo=o("bart"),EXo=o(" \u2014 "),RV=a("a"),CXo=o("BartForQuestionAnswering"),wXo=o(" (BART model)"),AXo=l(),h5=a("li"),Hhe=a("strong"),yXo=o("bert"),LXo=o(" \u2014 "),PV=a("a"),xXo=o("BertForQuestionAnswering"),$Xo=o(" (BERT model)"),kXo=l(),p5=a("li"),Uhe=a("strong"),SXo=o("big_bird"),RXo=o(" \u2014 "),BV=a("a"),PXo=o("BigBirdForQuestionAnswering"),BXo=o(" (BigBird model)"),IXo=l(),_5=a("li"),Jhe=a("strong"),NXo=o("bigbird_pegasus"),qXo=o(" \u2014 "),IV=a("a"),jXo=o("BigBirdPegasusForQuestionAnswering"),DXo=o(" (BigBirdPegasus model)"),GXo=l(),u5=a("li"),Yhe=a("strong"),OXo=o("camembert"),VXo=o(" \u2014 "),NV=a("a"),XXo=o("CamembertForQuestionAnswering"),zXo=o(" (CamemBERT model)"),WXo=l(),b5=a("li"),Khe=a("strong"),QXo=o("canine"),HXo=o(" \u2014 "),qV=a("a"),UXo=o("CanineForQuestionAnswering"),JXo=o(" (Canine model)"),YXo=l(),v5=a("li"),Zhe=a("strong"),KXo=o("convbert"),ZXo=o(" \u2014 "),jV=a("a"),ezo=o("ConvBertForQuestionAnswering"),ozo=o(" (ConvBERT model)"),rzo=l(),F5=a("li"),epe=a("strong"),tzo=o("data2vec-text"),azo=o(" \u2014 "),DV=a("a"),nzo=o("Data2VecTextForQuestionAnswering"),szo=o(" (Data2VecText model)"),lzo=l(),T5=a("li"),ope=a("strong"),izo=o("deberta"),dzo=o(" \u2014 "),GV=a("a"),czo=o("DebertaForQuestionAnswering"),fzo=o(" (DeBERTa model)"),mzo=l(),M5=a("li"),rpe=a("strong"),gzo=o("deberta-v2"),hzo=o(" \u2014 "),OV=a("a"),pzo=o("DebertaV2ForQuestionAnswering"),_zo=o(" (DeBERTa-v2 model)"),uzo=l(),E5=a("li"),tpe=a("strong"),bzo=o("distilbert"),vzo=o(" \u2014 "),VV=a("a"),Fzo=o("DistilBertForQuestionAnswering"),Tzo=o(" (DistilBERT model)"),Mzo=l(),C5=a("li"),ape=a("strong"),Ezo=o("electra"),Czo=o(" \u2014 "),XV=a("a"),wzo=o("ElectraForQuestionAnswering"),Azo=o(" (ELECTRA model)"),yzo=l(),w5=a("li"),npe=a("strong"),Lzo=o("flaubert"),xzo=o(" \u2014 "),zV=a("a"),$zo=o("FlaubertForQuestionAnsweringSimple"),kzo=o(" (FlauBERT model)"),Szo=l(),A5=a("li"),spe=a("strong"),Rzo=o("fnet"),Pzo=o(" \u2014 "),WV=a("a"),Bzo=o("FNetForQuestionAnswering"),Izo=o(" (FNet model)"),Nzo=l(),y5=a("li"),lpe=a("strong"),qzo=o("funnel"),jzo=o(" \u2014 "),QV=a("a"),Dzo=o("FunnelForQuestionAnswering"),Gzo=o(" (Funnel Transformer model)"),Ozo=l(),L5=a("li"),ipe=a("strong"),Vzo=o("gptj"),Xzo=o(" \u2014 "),HV=a("a"),zzo=o("GPTJForQuestionAnswering"),Wzo=o(" (GPT-J model)"),Qzo=l(),x5=a("li"),dpe=a("strong"),Hzo=o("ibert"),Uzo=o(" \u2014 "),UV=a("a"),Jzo=o("IBertForQuestionAnswering"),Yzo=o(" (I-BERT model)"),Kzo=l(),$5=a("li"),cpe=a("strong"),Zzo=o("layoutlmv2"),eWo=o(" \u2014 "),JV=a("a"),oWo=o("LayoutLMv2ForQuestionAnswering"),rWo=o(" (LayoutLMv2 model)"),tWo=l(),k5=a("li"),fpe=a("strong"),aWo=o("layoutlmv3"),nWo=o(" \u2014 "),YV=a("a"),sWo=o("LayoutLMv3ForQuestionAnswering"),lWo=o(" (LayoutLMv3 model)"),iWo=l(),S5=a("li"),mpe=a("strong"),dWo=o("led"),cWo=o(" \u2014 "),KV=a("a"),fWo=o("LEDForQuestionAnswering"),mWo=o(" (LED model)"),gWo=l(),R5=a("li"),gpe=a("strong"),hWo=o("longformer"),pWo=o(" \u2014 "),ZV=a("a"),_Wo=o("LongformerForQuestionAnswering"),uWo=o(" (Longformer model)"),bWo=l(),P5=a("li"),hpe=a("strong"),vWo=o("lxmert"),FWo=o(" \u2014 "),eX=a("a"),TWo=o("LxmertForQuestionAnswering"),MWo=o(" (LXMERT model)"),EWo=l(),B5=a("li"),ppe=a("strong"),CWo=o("mbart"),wWo=o(" \u2014 "),oX=a("a"),AWo=o("MBartForQuestionAnswering"),yWo=o(" (mBART model)"),LWo=l(),I5=a("li"),_pe=a("strong"),xWo=o("megatron-bert"),$Wo=o(" \u2014 "),rX=a("a"),kWo=o("MegatronBertForQuestionAnswering"),SWo=o(" (MegatronBert model)"),RWo=l(),N5=a("li"),upe=a("strong"),PWo=o("mobilebert"),BWo=o(" \u2014 "),tX=a("a"),IWo=o("MobileBertForQuestionAnswering"),NWo=o(" (MobileBERT model)"),qWo=l(),q5=a("li"),bpe=a("strong"),jWo=o("mpnet"),DWo=o(" \u2014 "),aX=a("a"),GWo=o("MPNetForQuestionAnswering"),OWo=o(" (MPNet model)"),VWo=l(),j5=a("li"),vpe=a("strong"),XWo=o("nystromformer"),zWo=o(" \u2014 "),nX=a("a"),WWo=o("NystromformerForQuestionAnswering"),QWo=o(" (Nystromformer model)"),HWo=l(),D5=a("li"),Fpe=a("strong"),UWo=o("qdqbert"),JWo=o(" \u2014 "),sX=a("a"),YWo=o("QDQBertForQuestionAnswering"),KWo=o(" (QDQBert model)"),ZWo=l(),G5=a("li"),Tpe=a("strong"),eQo=o("reformer"),oQo=o(" \u2014 "),lX=a("a"),rQo=o("ReformerForQuestionAnswering"),tQo=o(" (Reformer model)"),aQo=l(),O5=a("li"),Mpe=a("strong"),nQo=o("rembert"),sQo=o(" \u2014 "),iX=a("a"),lQo=o("RemBertForQuestionAnswering"),iQo=o(" (RemBERT model)"),dQo=l(),V5=a("li"),Epe=a("strong"),cQo=o("roberta"),fQo=o(" \u2014 "),dX=a("a"),mQo=o("RobertaForQuestionAnswering"),gQo=o(" (RoBERTa model)"),hQo=l(),X5=a("li"),Cpe=a("strong"),pQo=o("roformer"),_Qo=o(" \u2014 "),cX=a("a"),uQo=o("RoFormerForQuestionAnswering"),bQo=o(" (RoFormer model)"),vQo=l(),z5=a("li"),wpe=a("strong"),FQo=o("splinter"),TQo=o(" \u2014 "),fX=a("a"),MQo=o("SplinterForQuestionAnswering"),EQo=o(" (Splinter model)"),CQo=l(),W5=a("li"),Ape=a("strong"),wQo=o("squeezebert"),AQo=o(" \u2014 "),mX=a("a"),yQo=o("SqueezeBertForQuestionAnswering"),LQo=o(" (SqueezeBERT model)"),xQo=l(),Q5=a("li"),ype=a("strong"),$Qo=o("xlm"),kQo=o(" \u2014 "),gX=a("a"),SQo=o("XLMForQuestionAnsweringSimple"),RQo=o(" (XLM model)"),PQo=l(),H5=a("li"),Lpe=a("strong"),BQo=o("xlm-roberta"),IQo=o(" \u2014 "),hX=a("a"),NQo=o("XLMRobertaForQuestionAnswering"),qQo=o(" (XLM-RoBERTa model)"),jQo=l(),U5=a("li"),xpe=a("strong"),DQo=o("xlm-roberta-xl"),GQo=o(" \u2014 "),pX=a("a"),OQo=o("XLMRobertaXLForQuestionAnswering"),VQo=o(" (XLM-RoBERTa-XL model)"),XQo=l(),J5=a("li"),$pe=a("strong"),zQo=o("xlnet"),WQo=o(" \u2014 "),_X=a("a"),QQo=o("XLNetForQuestionAnsweringSimple"),HQo=o(" (XLNet model)"),UQo=l(),Y5=a("li"),kpe=a("strong"),JQo=o("yoso"),YQo=o(" \u2014 "),uX=a("a"),KQo=o("YosoForQuestionAnswering"),ZQo=o(" (YOSO model)"),eHo=l(),K5=a("p"),oHo=o("The model is set in evaluation mode by default using "),Spe=a("code"),rHo=o("model.eval()"),tHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=a("code"),aHo=o("model.train()"),nHo=l(),F(Z5.$$.fragment),Qqe=l(),od=a("h2"),ev=a("a"),Ppe=a("span"),F(ZA.$$.fragment),sHo=l(),Bpe=a("span"),lHo=o("AutoModelForTableQuestionAnswering"),Hqe=l(),qo=a("div"),F(ey.$$.fragment),iHo=l(),rd=a("p"),dHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bX=a("a"),cHo=o("from_pretrained()"),fHo=o(" class method or the "),vX=a("a"),mHo=o("from_config()"),gHo=o(` class
method.`),hHo=l(),oy=a("p"),pHo=o("This class cannot be instantiated directly using "),Ipe=a("code"),_Ho=o("__init__()"),uHo=o(" (throws an error)."),bHo=l(),gt=a("div"),F(ry.$$.fragment),vHo=l(),Npe=a("p"),FHo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),THo=l(),td=a("p"),MHo=o(`Note:
Loading a model from its configuration file does `),qpe=a("strong"),EHo=o("not"),CHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),wHo=o("from_pretrained()"),AHo=o(" to load the model weights."),yHo=l(),F(ov.$$.fragment),LHo=l(),so=a("div"),F(ty.$$.fragment),xHo=l(),jpe=a("p"),$Ho=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),kHo=l(),qa=a("p"),SHo=o("The model class to instantiate is selected based on the "),Dpe=a("code"),RHo=o("model_type"),PHo=o(` property of the config object (either
passed as an argument or loaded from `),Gpe=a("code"),BHo=o("pretrained_model_name_or_path"),IHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=a("code"),NHo=o("pretrained_model_name_or_path"),qHo=o(":"),jHo=l(),Vpe=a("ul"),rv=a("li"),Xpe=a("strong"),DHo=o("tapas"),GHo=o(" \u2014 "),TX=a("a"),OHo=o("TapasForQuestionAnswering"),VHo=o(" (TAPAS model)"),XHo=l(),tv=a("p"),zHo=o("The model is set in evaluation mode by default using "),zpe=a("code"),WHo=o("model.eval()"),QHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=a("code"),HHo=o("model.train()"),UHo=l(),F(av.$$.fragment),Uqe=l(),ad=a("h2"),nv=a("a"),Qpe=a("span"),F(ay.$$.fragment),JHo=l(),Hpe=a("span"),YHo=o("AutoModelForImageClassification"),Jqe=l(),jo=a("div"),F(ny.$$.fragment),KHo=l(),nd=a("p"),ZHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),MX=a("a"),eUo=o("from_pretrained()"),oUo=o(" class method or the "),EX=a("a"),rUo=o("from_config()"),tUo=o(` class
method.`),aUo=l(),sy=a("p"),nUo=o("This class cannot be instantiated directly using "),Upe=a("code"),sUo=o("__init__()"),lUo=o(" (throws an error)."),iUo=l(),ht=a("div"),F(ly.$$.fragment),dUo=l(),Jpe=a("p"),cUo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fUo=l(),sd=a("p"),mUo=o(`Note:
Loading a model from its configuration file does `),Ype=a("strong"),gUo=o("not"),hUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=a("a"),pUo=o("from_pretrained()"),_Uo=o(" to load the model weights."),uUo=l(),F(sv.$$.fragment),bUo=l(),lo=a("div"),F(iy.$$.fragment),vUo=l(),Kpe=a("p"),FUo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),TUo=l(),ja=a("p"),MUo=o("The model class to instantiate is selected based on the "),Zpe=a("code"),EUo=o("model_type"),CUo=o(` property of the config object (either
passed as an argument or loaded from `),e_e=a("code"),wUo=o("pretrained_model_name_or_path"),AUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=a("code"),yUo=o("pretrained_model_name_or_path"),LUo=o(":"),xUo=l(),Fe=a("ul"),lv=a("li"),r_e=a("strong"),$Uo=o("beit"),kUo=o(" \u2014 "),wX=a("a"),SUo=o("BeitForImageClassification"),RUo=o(" (BEiT model)"),PUo=l(),iv=a("li"),t_e=a("strong"),BUo=o("convnext"),IUo=o(" \u2014 "),AX=a("a"),NUo=o("ConvNextForImageClassification"),qUo=o(" (ConvNext model)"),jUo=l(),dv=a("li"),a_e=a("strong"),DUo=o("cvt"),GUo=o(" \u2014 "),yX=a("a"),OUo=o("CvtForImageClassification"),VUo=o(" (CvT model)"),XUo=l(),cv=a("li"),n_e=a("strong"),zUo=o("data2vec-vision"),WUo=o(" \u2014 "),LX=a("a"),QUo=o("Data2VecVisionForImageClassification"),HUo=o(" (Data2VecVision model)"),UUo=l(),Bs=a("li"),s_e=a("strong"),JUo=o("deit"),YUo=o(" \u2014 "),xX=a("a"),KUo=o("DeiTForImageClassification"),ZUo=o(" or "),$X=a("a"),eJo=o("DeiTForImageClassificationWithTeacher"),oJo=o(" (DeiT model)"),rJo=l(),fv=a("li"),l_e=a("strong"),tJo=o("imagegpt"),aJo=o(" \u2014 "),kX=a("a"),nJo=o("ImageGPTForImageClassification"),sJo=o(" (ImageGPT model)"),lJo=l(),pt=a("li"),i_e=a("strong"),iJo=o("perceiver"),dJo=o(" \u2014 "),SX=a("a"),cJo=o("PerceiverForImageClassificationLearned"),fJo=o(" or "),RX=a("a"),mJo=o("PerceiverForImageClassificationFourier"),gJo=o(" or "),PX=a("a"),hJo=o("PerceiverForImageClassificationConvProcessing"),pJo=o(" (Perceiver model)"),_Jo=l(),mv=a("li"),d_e=a("strong"),uJo=o("poolformer"),bJo=o(" \u2014 "),BX=a("a"),vJo=o("PoolFormerForImageClassification"),FJo=o(" (PoolFormer model)"),TJo=l(),gv=a("li"),c_e=a("strong"),MJo=o("regnet"),EJo=o(" \u2014 "),IX=a("a"),CJo=o("RegNetForImageClassification"),wJo=o(" (RegNet model)"),AJo=l(),hv=a("li"),f_e=a("strong"),yJo=o("resnet"),LJo=o(" \u2014 "),NX=a("a"),xJo=o("ResNetForImageClassification"),$Jo=o(" (ResNet model)"),kJo=l(),pv=a("li"),m_e=a("strong"),SJo=o("segformer"),RJo=o(" \u2014 "),qX=a("a"),PJo=o("SegformerForImageClassification"),BJo=o(" (SegFormer model)"),IJo=l(),_v=a("li"),g_e=a("strong"),NJo=o("swin"),qJo=o(" \u2014 "),jX=a("a"),jJo=o("SwinForImageClassification"),DJo=o(" (Swin model)"),GJo=l(),uv=a("li"),h_e=a("strong"),OJo=o("van"),VJo=o(" \u2014 "),DX=a("a"),XJo=o("VanForImageClassification"),zJo=o(" (VAN model)"),WJo=l(),bv=a("li"),p_e=a("strong"),QJo=o("vit"),HJo=o(" \u2014 "),GX=a("a"),UJo=o("ViTForImageClassification"),JJo=o(" (ViT model)"),YJo=l(),vv=a("p"),KJo=o("The model is set in evaluation mode by default using "),__e=a("code"),ZJo=o("model.eval()"),eYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u_e=a("code"),oYo=o("model.train()"),rYo=l(),F(Fv.$$.fragment),Yqe=l(),ld=a("h2"),Tv=a("a"),b_e=a("span"),F(dy.$$.fragment),tYo=l(),v_e=a("span"),aYo=o("AutoModelForVision2Seq"),Kqe=l(),Do=a("div"),F(cy.$$.fragment),nYo=l(),id=a("p"),sYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OX=a("a"),lYo=o("from_pretrained()"),iYo=o(" class method or the "),VX=a("a"),dYo=o("from_config()"),cYo=o(` class
method.`),fYo=l(),fy=a("p"),mYo=o("This class cannot be instantiated directly using "),F_e=a("code"),gYo=o("__init__()"),hYo=o(" (throws an error)."),pYo=l(),_t=a("div"),F(my.$$.fragment),_Yo=l(),T_e=a("p"),uYo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bYo=l(),dd=a("p"),vYo=o(`Note:
Loading a model from its configuration file does `),M_e=a("strong"),FYo=o("not"),TYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),MYo=o("from_pretrained()"),EYo=o(" to load the model weights."),CYo=l(),F(Mv.$$.fragment),wYo=l(),io=a("div"),F(gy.$$.fragment),AYo=l(),E_e=a("p"),yYo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),LYo=l(),Da=a("p"),xYo=o("The model class to instantiate is selected based on the "),C_e=a("code"),$Yo=o("model_type"),kYo=o(` property of the config object (either
passed as an argument or loaded from `),w_e=a("code"),SYo=o("pretrained_model_name_or_path"),RYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A_e=a("code"),PYo=o("pretrained_model_name_or_path"),BYo=o(":"),IYo=l(),y_e=a("ul"),Ev=a("li"),L_e=a("strong"),NYo=o("vision-encoder-decoder"),qYo=o(" \u2014 "),zX=a("a"),jYo=o("VisionEncoderDecoderModel"),DYo=o(" (Vision Encoder decoder model)"),GYo=l(),Cv=a("p"),OYo=o("The model is set in evaluation mode by default using "),x_e=a("code"),VYo=o("model.eval()"),XYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$_e=a("code"),zYo=o("model.train()"),WYo=l(),F(wv.$$.fragment),Zqe=l(),cd=a("h2"),Av=a("a"),k_e=a("span"),F(hy.$$.fragment),QYo=l(),S_e=a("span"),HYo=o("AutoModelForAudioClassification"),eje=l(),Go=a("div"),F(py.$$.fragment),UYo=l(),fd=a("p"),JYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),WX=a("a"),YYo=o("from_pretrained()"),KYo=o(" class method or the "),QX=a("a"),ZYo=o("from_config()"),eKo=o(` class
method.`),oKo=l(),_y=a("p"),rKo=o("This class cannot be instantiated directly using "),R_e=a("code"),tKo=o("__init__()"),aKo=o(" (throws an error)."),nKo=l(),ut=a("div"),F(uy.$$.fragment),sKo=l(),P_e=a("p"),lKo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),iKo=l(),md=a("p"),dKo=o(`Note:
Loading a model from its configuration file does `),B_e=a("strong"),cKo=o("not"),fKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=a("a"),mKo=o("from_pretrained()"),gKo=o(" to load the model weights."),hKo=l(),F(yv.$$.fragment),pKo=l(),co=a("div"),F(by.$$.fragment),_Ko=l(),I_e=a("p"),uKo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),bKo=l(),Ga=a("p"),vKo=o("The model class to instantiate is selected based on the "),N_e=a("code"),FKo=o("model_type"),TKo=o(` property of the config object (either
passed as an argument or loaded from `),q_e=a("code"),MKo=o("pretrained_model_name_or_path"),EKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j_e=a("code"),CKo=o("pretrained_model_name_or_path"),wKo=o(":"),AKo=l(),Se=a("ul"),Lv=a("li"),D_e=a("strong"),yKo=o("data2vec-audio"),LKo=o(" \u2014 "),UX=a("a"),xKo=o("Data2VecAudioForSequenceClassification"),$Ko=o(" (Data2VecAudio model)"),kKo=l(),xv=a("li"),G_e=a("strong"),SKo=o("hubert"),RKo=o(" \u2014 "),JX=a("a"),PKo=o("HubertForSequenceClassification"),BKo=o(" (Hubert model)"),IKo=l(),$v=a("li"),O_e=a("strong"),NKo=o("sew"),qKo=o(" \u2014 "),YX=a("a"),jKo=o("SEWForSequenceClassification"),DKo=o(" (SEW model)"),GKo=l(),kv=a("li"),V_e=a("strong"),OKo=o("sew-d"),VKo=o(" \u2014 "),KX=a("a"),XKo=o("SEWDForSequenceClassification"),zKo=o(" (SEW-D model)"),WKo=l(),Sv=a("li"),X_e=a("strong"),QKo=o("unispeech"),HKo=o(" \u2014 "),ZX=a("a"),UKo=o("UniSpeechForSequenceClassification"),JKo=o(" (UniSpeech model)"),YKo=l(),Rv=a("li"),z_e=a("strong"),KKo=o("unispeech-sat"),ZKo=o(" \u2014 "),ez=a("a"),eZo=o("UniSpeechSatForSequenceClassification"),oZo=o(" (UniSpeechSat model)"),rZo=l(),Pv=a("li"),W_e=a("strong"),tZo=o("wav2vec2"),aZo=o(" \u2014 "),oz=a("a"),nZo=o("Wav2Vec2ForSequenceClassification"),sZo=o(" (Wav2Vec2 model)"),lZo=l(),Bv=a("li"),Q_e=a("strong"),iZo=o("wav2vec2-conformer"),dZo=o(" \u2014 "),rz=a("a"),cZo=o("Wav2Vec2ConformerForSequenceClassification"),fZo=o(" (Wav2Vec2-Conformer model)"),mZo=l(),Iv=a("li"),H_e=a("strong"),gZo=o("wavlm"),hZo=o(" \u2014 "),tz=a("a"),pZo=o("WavLMForSequenceClassification"),_Zo=o(" (WavLM model)"),uZo=l(),Nv=a("p"),bZo=o("The model is set in evaluation mode by default using "),U_e=a("code"),vZo=o("model.eval()"),FZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J_e=a("code"),TZo=o("model.train()"),MZo=l(),F(qv.$$.fragment),oje=l(),gd=a("h2"),jv=a("a"),Y_e=a("span"),F(vy.$$.fragment),EZo=l(),K_e=a("span"),CZo=o("AutoModelForAudioFrameClassification"),rje=l(),Oo=a("div"),F(Fy.$$.fragment),wZo=l(),hd=a("p"),AZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),az=a("a"),yZo=o("from_pretrained()"),LZo=o(" class method or the "),nz=a("a"),xZo=o("from_config()"),$Zo=o(` class
method.`),kZo=l(),Ty=a("p"),SZo=o("This class cannot be instantiated directly using "),Z_e=a("code"),RZo=o("__init__()"),PZo=o(" (throws an error)."),BZo=l(),bt=a("div"),F(My.$$.fragment),IZo=l(),eue=a("p"),NZo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),qZo=l(),pd=a("p"),jZo=o(`Note:
Loading a model from its configuration file does `),oue=a("strong"),DZo=o("not"),GZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=a("a"),OZo=o("from_pretrained()"),VZo=o(" to load the model weights."),XZo=l(),F(Dv.$$.fragment),zZo=l(),fo=a("div"),F(Ey.$$.fragment),WZo=l(),rue=a("p"),QZo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),HZo=l(),Oa=a("p"),UZo=o("The model class to instantiate is selected based on the "),tue=a("code"),JZo=o("model_type"),YZo=o(` property of the config object (either
passed as an argument or loaded from `),aue=a("code"),KZo=o("pretrained_model_name_or_path"),ZZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=a("code"),eer=o("pretrained_model_name_or_path"),oer=o(":"),rer=l(),Kr=a("ul"),Gv=a("li"),sue=a("strong"),ter=o("data2vec-audio"),aer=o(" \u2014 "),lz=a("a"),ner=o("Data2VecAudioForAudioFrameClassification"),ser=o(" (Data2VecAudio model)"),ler=l(),Ov=a("li"),lue=a("strong"),ier=o("unispeech-sat"),der=o(" \u2014 "),iz=a("a"),cer=o("UniSpeechSatForAudioFrameClassification"),fer=o(" (UniSpeechSat model)"),mer=l(),Vv=a("li"),iue=a("strong"),ger=o("wav2vec2"),her=o(" \u2014 "),dz=a("a"),per=o("Wav2Vec2ForAudioFrameClassification"),_er=o(" (Wav2Vec2 model)"),uer=l(),Xv=a("li"),due=a("strong"),ber=o("wav2vec2-conformer"),ver=o(" \u2014 "),cz=a("a"),Fer=o("Wav2Vec2ConformerForAudioFrameClassification"),Ter=o(" (Wav2Vec2-Conformer model)"),Mer=l(),zv=a("li"),cue=a("strong"),Eer=o("wavlm"),Cer=o(" \u2014 "),fz=a("a"),wer=o("WavLMForAudioFrameClassification"),Aer=o(" (WavLM model)"),yer=l(),Wv=a("p"),Ler=o("The model is set in evaluation mode by default using "),fue=a("code"),xer=o("model.eval()"),$er=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mue=a("code"),ker=o("model.train()"),Ser=l(),F(Qv.$$.fragment),tje=l(),_d=a("h2"),Hv=a("a"),gue=a("span"),F(Cy.$$.fragment),Rer=l(),hue=a("span"),Per=o("AutoModelForCTC"),aje=l(),Vo=a("div"),F(wy.$$.fragment),Ber=l(),ud=a("p"),Ier=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mz=a("a"),Ner=o("from_pretrained()"),qer=o(" class method or the "),gz=a("a"),jer=o("from_config()"),Der=o(` class
method.`),Ger=l(),Ay=a("p"),Oer=o("This class cannot be instantiated directly using "),pue=a("code"),Ver=o("__init__()"),Xer=o(" (throws an error)."),zer=l(),vt=a("div"),F(yy.$$.fragment),Wer=l(),_ue=a("p"),Qer=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Her=l(),bd=a("p"),Uer=o(`Note:
Loading a model from its configuration file does `),uue=a("strong"),Jer=o("not"),Yer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=a("a"),Ker=o("from_pretrained()"),Zer=o(" to load the model weights."),eor=l(),F(Uv.$$.fragment),oor=l(),mo=a("div"),F(Ly.$$.fragment),ror=l(),bue=a("p"),tor=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),aor=l(),Va=a("p"),nor=o("The model class to instantiate is selected based on the "),vue=a("code"),sor=o("model_type"),lor=o(` property of the config object (either
passed as an argument or loaded from `),Fue=a("code"),ior=o("pretrained_model_name_or_path"),dor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=a("code"),cor=o("pretrained_model_name_or_path"),mor=o(":"),gor=l(),Re=a("ul"),Jv=a("li"),Mue=a("strong"),hor=o("data2vec-audio"),por=o(" \u2014 "),pz=a("a"),_or=o("Data2VecAudioForCTC"),uor=o(" (Data2VecAudio model)"),bor=l(),Yv=a("li"),Eue=a("strong"),vor=o("hubert"),For=o(" \u2014 "),_z=a("a"),Tor=o("HubertForCTC"),Mor=o(" (Hubert model)"),Eor=l(),Kv=a("li"),Cue=a("strong"),Cor=o("sew"),wor=o(" \u2014 "),uz=a("a"),Aor=o("SEWForCTC"),yor=o(" (SEW model)"),Lor=l(),Zv=a("li"),wue=a("strong"),xor=o("sew-d"),$or=o(" \u2014 "),bz=a("a"),kor=o("SEWDForCTC"),Sor=o(" (SEW-D model)"),Ror=l(),eF=a("li"),Aue=a("strong"),Por=o("unispeech"),Bor=o(" \u2014 "),vz=a("a"),Ior=o("UniSpeechForCTC"),Nor=o(" (UniSpeech model)"),qor=l(),oF=a("li"),yue=a("strong"),jor=o("unispeech-sat"),Dor=o(" \u2014 "),Fz=a("a"),Gor=o("UniSpeechSatForCTC"),Oor=o(" (UniSpeechSat model)"),Vor=l(),rF=a("li"),Lue=a("strong"),Xor=o("wav2vec2"),zor=o(" \u2014 "),Tz=a("a"),Wor=o("Wav2Vec2ForCTC"),Qor=o(" (Wav2Vec2 model)"),Hor=l(),tF=a("li"),xue=a("strong"),Uor=o("wav2vec2-conformer"),Jor=o(" \u2014 "),Mz=a("a"),Yor=o("Wav2Vec2ConformerForCTC"),Kor=o(" (Wav2Vec2-Conformer model)"),Zor=l(),aF=a("li"),$ue=a("strong"),err=o("wavlm"),orr=o(" \u2014 "),Ez=a("a"),rrr=o("WavLMForCTC"),trr=o(" (WavLM model)"),arr=l(),nF=a("p"),nrr=o("The model is set in evaluation mode by default using "),kue=a("code"),srr=o("model.eval()"),lrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=a("code"),irr=o("model.train()"),drr=l(),F(sF.$$.fragment),nje=l(),vd=a("h2"),lF=a("a"),Rue=a("span"),F(xy.$$.fragment),crr=l(),Pue=a("span"),frr=o("AutoModelForSpeechSeq2Seq"),sje=l(),Xo=a("div"),F($y.$$.fragment),mrr=l(),Fd=a("p"),grr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Cz=a("a"),hrr=o("from_pretrained()"),prr=o(" class method or the "),wz=a("a"),_rr=o("from_config()"),urr=o(` class
method.`),brr=l(),ky=a("p"),vrr=o("This class cannot be instantiated directly using "),Bue=a("code"),Frr=o("__init__()"),Trr=o(" (throws an error)."),Mrr=l(),Ft=a("div"),F(Sy.$$.fragment),Err=l(),Iue=a("p"),Crr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),wrr=l(),Td=a("p"),Arr=o(`Note:
Loading a model from its configuration file does `),Nue=a("strong"),yrr=o("not"),Lrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=a("a"),xrr=o("from_pretrained()"),$rr=o(" to load the model weights."),krr=l(),F(iF.$$.fragment),Srr=l(),go=a("div"),F(Ry.$$.fragment),Rrr=l(),que=a("p"),Prr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Brr=l(),Xa=a("p"),Irr=o("The model class to instantiate is selected based on the "),jue=a("code"),Nrr=o("model_type"),qrr=o(` property of the config object (either
passed as an argument or loaded from `),Due=a("code"),jrr=o("pretrained_model_name_or_path"),Drr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=a("code"),Grr=o("pretrained_model_name_or_path"),Orr=o(":"),Vrr=l(),Py=a("ul"),dF=a("li"),Oue=a("strong"),Xrr=o("speech-encoder-decoder"),zrr=o(" \u2014 "),yz=a("a"),Wrr=o("SpeechEncoderDecoderModel"),Qrr=o(" (Speech Encoder decoder model)"),Hrr=l(),cF=a("li"),Vue=a("strong"),Urr=o("speech_to_text"),Jrr=o(" \u2014 "),Lz=a("a"),Yrr=o("Speech2TextForConditionalGeneration"),Krr=o(" (Speech2Text model)"),Zrr=l(),fF=a("p"),etr=o("The model is set in evaluation mode by default using "),Xue=a("code"),otr=o("model.eval()"),rtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=a("code"),ttr=o("model.train()"),atr=l(),F(mF.$$.fragment),lje=l(),Md=a("h2"),gF=a("a"),Wue=a("span"),F(By.$$.fragment),ntr=l(),Que=a("span"),str=o("AutoModelForAudioXVector"),ije=l(),zo=a("div"),F(Iy.$$.fragment),ltr=l(),Ed=a("p"),itr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),xz=a("a"),dtr=o("from_pretrained()"),ctr=o(" class method or the "),$z=a("a"),ftr=o("from_config()"),mtr=o(` class
method.`),gtr=l(),Ny=a("p"),htr=o("This class cannot be instantiated directly using "),Hue=a("code"),ptr=o("__init__()"),_tr=o(" (throws an error)."),utr=l(),Tt=a("div"),F(qy.$$.fragment),btr=l(),Uue=a("p"),vtr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Ftr=l(),Cd=a("p"),Ttr=o(`Note:
Loading a model from its configuration file does `),Jue=a("strong"),Mtr=o("not"),Etr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=a("a"),Ctr=o("from_pretrained()"),wtr=o(" to load the model weights."),Atr=l(),F(hF.$$.fragment),ytr=l(),ho=a("div"),F(jy.$$.fragment),Ltr=l(),Yue=a("p"),xtr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),$tr=l(),za=a("p"),ktr=o("The model class to instantiate is selected based on the "),Kue=a("code"),Str=o("model_type"),Rtr=o(` property of the config object (either
passed as an argument or loaded from `),Zue=a("code"),Ptr=o("pretrained_model_name_or_path"),Btr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=a("code"),Itr=o("pretrained_model_name_or_path"),Ntr=o(":"),qtr=l(),Zr=a("ul"),pF=a("li"),o1e=a("strong"),jtr=o("data2vec-audio"),Dtr=o(" \u2014 "),Sz=a("a"),Gtr=o("Data2VecAudioForXVector"),Otr=o(" (Data2VecAudio model)"),Vtr=l(),_F=a("li"),r1e=a("strong"),Xtr=o("unispeech-sat"),ztr=o(" \u2014 "),Rz=a("a"),Wtr=o("UniSpeechSatForXVector"),Qtr=o(" (UniSpeechSat model)"),Htr=l(),uF=a("li"),t1e=a("strong"),Utr=o("wav2vec2"),Jtr=o(" \u2014 "),Pz=a("a"),Ytr=o("Wav2Vec2ForXVector"),Ktr=o(" (Wav2Vec2 model)"),Ztr=l(),bF=a("li"),a1e=a("strong"),ear=o("wav2vec2-conformer"),oar=o(" \u2014 "),Bz=a("a"),rar=o("Wav2Vec2ConformerForXVector"),tar=o(" (Wav2Vec2-Conformer model)"),aar=l(),vF=a("li"),n1e=a("strong"),nar=o("wavlm"),sar=o(" \u2014 "),Iz=a("a"),lar=o("WavLMForXVector"),iar=o(" (WavLM model)"),dar=l(),FF=a("p"),car=o("The model is set in evaluation mode by default using "),s1e=a("code"),far=o("model.eval()"),mar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l1e=a("code"),gar=o("model.train()"),har=l(),F(TF.$$.fragment),dje=l(),wd=a("h2"),MF=a("a"),i1e=a("span"),F(Dy.$$.fragment),par=l(),d1e=a("span"),_ar=o("AutoModelForMaskedImageModeling"),cje=l(),Wo=a("div"),F(Gy.$$.fragment),uar=l(),Ad=a("p"),bar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Nz=a("a"),Far=o("from_pretrained()"),Tar=o(" class method or the "),qz=a("a"),Mar=o("from_config()"),Ear=o(` class
method.`),Car=l(),Oy=a("p"),war=o("This class cannot be instantiated directly using "),c1e=a("code"),Aar=o("__init__()"),yar=o(" (throws an error)."),Lar=l(),Mt=a("div"),F(Vy.$$.fragment),xar=l(),f1e=a("p"),$ar=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),kar=l(),yd=a("p"),Sar=o(`Note:
Loading a model from its configuration file does `),m1e=a("strong"),Rar=o("not"),Par=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=a("a"),Bar=o("from_pretrained()"),Iar=o(" to load the model weights."),Nar=l(),F(EF.$$.fragment),qar=l(),po=a("div"),F(Xy.$$.fragment),jar=l(),g1e=a("p"),Dar=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Gar=l(),Wa=a("p"),Oar=o("The model class to instantiate is selected based on the "),h1e=a("code"),Var=o("model_type"),Xar=o(` property of the config object (either
passed as an argument or loaded from `),p1e=a("code"),zar=o("pretrained_model_name_or_path"),War=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=a("code"),Qar=o("pretrained_model_name_or_path"),Har=o(":"),Uar=l(),Ld=a("ul"),CF=a("li"),u1e=a("strong"),Jar=o("deit"),Yar=o(" \u2014 "),Dz=a("a"),Kar=o("DeiTForMaskedImageModeling"),Zar=o(" (DeiT model)"),enr=l(),wF=a("li"),b1e=a("strong"),onr=o("swin"),rnr=o(" \u2014 "),Gz=a("a"),tnr=o("SwinForMaskedImageModeling"),anr=o(" (Swin model)"),nnr=l(),AF=a("li"),v1e=a("strong"),snr=o("vit"),lnr=o(" \u2014 "),Oz=a("a"),inr=o("ViTForMaskedImageModeling"),dnr=o(" (ViT model)"),cnr=l(),yF=a("p"),fnr=o("The model is set in evaluation mode by default using "),F1e=a("code"),mnr=o("model.eval()"),gnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T1e=a("code"),hnr=o("model.train()"),pnr=l(),F(LF.$$.fragment),fje=l(),xd=a("h2"),xF=a("a"),M1e=a("span"),F(zy.$$.fragment),_nr=l(),E1e=a("span"),unr=o("AutoModelForObjectDetection"),mje=l(),Qo=a("div"),F(Wy.$$.fragment),bnr=l(),$d=a("p"),vnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Vz=a("a"),Fnr=o("from_pretrained()"),Tnr=o(" class method or the "),Xz=a("a"),Mnr=o("from_config()"),Enr=o(` class
method.`),Cnr=l(),Qy=a("p"),wnr=o("This class cannot be instantiated directly using "),C1e=a("code"),Anr=o("__init__()"),ynr=o(" (throws an error)."),Lnr=l(),Et=a("div"),F(Hy.$$.fragment),xnr=l(),w1e=a("p"),$nr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),knr=l(),kd=a("p"),Snr=o(`Note:
Loading a model from its configuration file does `),A1e=a("strong"),Rnr=o("not"),Pnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=a("a"),Bnr=o("from_pretrained()"),Inr=o(" to load the model weights."),Nnr=l(),F($F.$$.fragment),qnr=l(),_o=a("div"),F(Uy.$$.fragment),jnr=l(),y1e=a("p"),Dnr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Gnr=l(),Qa=a("p"),Onr=o("The model class to instantiate is selected based on the "),L1e=a("code"),Vnr=o("model_type"),Xnr=o(` property of the config object (either
passed as an argument or loaded from `),x1e=a("code"),znr=o("pretrained_model_name_or_path"),Wnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=a("code"),Qnr=o("pretrained_model_name_or_path"),Hnr=o(":"),Unr=l(),Jy=a("ul"),kF=a("li"),k1e=a("strong"),Jnr=o("detr"),Ynr=o(" \u2014 "),Wz=a("a"),Knr=o("DetrForObjectDetection"),Znr=o(" (DETR model)"),esr=l(),SF=a("li"),S1e=a("strong"),osr=o("yolos"),rsr=o(" \u2014 "),Qz=a("a"),tsr=o("YolosForObjectDetection"),asr=o(" (YOLOS model)"),nsr=l(),RF=a("p"),ssr=o("The model is set in evaluation mode by default using "),R1e=a("code"),lsr=o("model.eval()"),isr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=a("code"),dsr=o("model.train()"),csr=l(),F(PF.$$.fragment),gje=l(),Sd=a("h2"),BF=a("a"),B1e=a("span"),F(Yy.$$.fragment),fsr=l(),I1e=a("span"),msr=o("AutoModelForImageSegmentation"),hje=l(),Ho=a("div"),F(Ky.$$.fragment),gsr=l(),Rd=a("p"),hsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Hz=a("a"),psr=o("from_pretrained()"),_sr=o(" class method or the "),Uz=a("a"),usr=o("from_config()"),bsr=o(` class
method.`),vsr=l(),Zy=a("p"),Fsr=o("This class cannot be instantiated directly using "),N1e=a("code"),Tsr=o("__init__()"),Msr=o(" (throws an error)."),Esr=l(),Ct=a("div"),F(eL.$$.fragment),Csr=l(),q1e=a("p"),wsr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Asr=l(),Pd=a("p"),ysr=o(`Note:
Loading a model from its configuration file does `),j1e=a("strong"),Lsr=o("not"),xsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),$sr=o("from_pretrained()"),ksr=o(" to load the model weights."),Ssr=l(),F(IF.$$.fragment),Rsr=l(),uo=a("div"),F(oL.$$.fragment),Psr=l(),D1e=a("p"),Bsr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Isr=l(),Ha=a("p"),Nsr=o("The model class to instantiate is selected based on the "),G1e=a("code"),qsr=o("model_type"),jsr=o(` property of the config object (either
passed as an argument or loaded from `),O1e=a("code"),Dsr=o("pretrained_model_name_or_path"),Gsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=a("code"),Osr=o("pretrained_model_name_or_path"),Vsr=o(":"),Xsr=l(),X1e=a("ul"),NF=a("li"),z1e=a("strong"),zsr=o("detr"),Wsr=o(" \u2014 "),Yz=a("a"),Qsr=o("DetrForSegmentation"),Hsr=o(" (DETR model)"),Usr=l(),qF=a("p"),Jsr=o("The model is set in evaluation mode by default using "),W1e=a("code"),Ysr=o("model.eval()"),Ksr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q1e=a("code"),Zsr=o("model.train()"),elr=l(),F(jF.$$.fragment),pje=l(),Bd=a("h2"),DF=a("a"),H1e=a("span"),F(rL.$$.fragment),olr=l(),U1e=a("span"),rlr=o("AutoModelForSemanticSegmentation"),_je=l(),Uo=a("div"),F(tL.$$.fragment),tlr=l(),Id=a("p"),alr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Kz=a("a"),nlr=o("from_pretrained()"),slr=o(" class method or the "),Zz=a("a"),llr=o("from_config()"),ilr=o(` class
method.`),dlr=l(),aL=a("p"),clr=o("This class cannot be instantiated directly using "),J1e=a("code"),flr=o("__init__()"),mlr=o(" (throws an error)."),glr=l(),wt=a("div"),F(nL.$$.fragment),hlr=l(),Y1e=a("p"),plr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),_lr=l(),Nd=a("p"),ulr=o(`Note:
Loading a model from its configuration file does `),K1e=a("strong"),blr=o("not"),vlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=a("a"),Flr=o("from_pretrained()"),Tlr=o(" to load the model weights."),Mlr=l(),F(GF.$$.fragment),Elr=l(),bo=a("div"),F(sL.$$.fragment),Clr=l(),Z1e=a("p"),wlr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Alr=l(),Ua=a("p"),ylr=o("The model class to instantiate is selected based on the "),ebe=a("code"),Llr=o("model_type"),xlr=o(` property of the config object (either
passed as an argument or loaded from `),obe=a("code"),$lr=o("pretrained_model_name_or_path"),klr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=a("code"),Slr=o("pretrained_model_name_or_path"),Rlr=o(":"),Plr=l(),Ja=a("ul"),OF=a("li"),tbe=a("strong"),Blr=o("beit"),Ilr=o(" \u2014 "),oW=a("a"),Nlr=o("BeitForSemanticSegmentation"),qlr=o(" (BEiT model)"),jlr=l(),VF=a("li"),abe=a("strong"),Dlr=o("data2vec-vision"),Glr=o(" \u2014 "),rW=a("a"),Olr=o("Data2VecVisionForSemanticSegmentation"),Vlr=o(" (Data2VecVision model)"),Xlr=l(),XF=a("li"),nbe=a("strong"),zlr=o("dpt"),Wlr=o(" \u2014 "),tW=a("a"),Qlr=o("DPTForSemanticSegmentation"),Hlr=o(" (DPT model)"),Ulr=l(),zF=a("li"),sbe=a("strong"),Jlr=o("segformer"),Ylr=o(" \u2014 "),aW=a("a"),Klr=o("SegformerForSemanticSegmentation"),Zlr=o(" (SegFormer model)"),eir=l(),WF=a("p"),oir=o("The model is set in evaluation mode by default using "),lbe=a("code"),rir=o("model.eval()"),tir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ibe=a("code"),air=o("model.train()"),nir=l(),F(QF.$$.fragment),uje=l(),qd=a("h2"),HF=a("a"),dbe=a("span"),F(lL.$$.fragment),sir=l(),cbe=a("span"),lir=o("AutoModelForInstanceSegmentation"),bje=l(),Jo=a("div"),F(iL.$$.fragment),iir=l(),jd=a("p"),dir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),nW=a("a"),cir=o("from_pretrained()"),fir=o(" class method or the "),sW=a("a"),mir=o("from_config()"),gir=o(` class
method.`),hir=l(),dL=a("p"),pir=o("This class cannot be instantiated directly using "),fbe=a("code"),_ir=o("__init__()"),uir=o(" (throws an error)."),bir=l(),At=a("div"),F(cL.$$.fragment),vir=l(),mbe=a("p"),Fir=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Tir=l(),Dd=a("p"),Mir=o(`Note:
Loading a model from its configuration file does `),gbe=a("strong"),Eir=o("not"),Cir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),wir=o("from_pretrained()"),Air=o(" to load the model weights."),yir=l(),F(UF.$$.fragment),Lir=l(),vo=a("div"),F(fL.$$.fragment),xir=l(),hbe=a("p"),$ir=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),kir=l(),Ya=a("p"),Sir=o("The model class to instantiate is selected based on the "),pbe=a("code"),Rir=o("model_type"),Pir=o(` property of the config object (either
passed as an argument or loaded from `),_be=a("code"),Bir=o("pretrained_model_name_or_path"),Iir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=a("code"),Nir=o("pretrained_model_name_or_path"),qir=o(":"),jir=l(),bbe=a("ul"),JF=a("li"),vbe=a("strong"),Dir=o("maskformer"),Gir=o(" \u2014 "),iW=a("a"),Oir=o("MaskFormerForInstanceSegmentation"),Vir=o(" (MaskFormer model)"),Xir=l(),YF=a("p"),zir=o("The model is set in evaluation mode by default using "),Fbe=a("code"),Wir=o("model.eval()"),Qir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tbe=a("code"),Hir=o("model.train()"),Uir=l(),F(KF.$$.fragment),vje=l(),Gd=a("h2"),ZF=a("a"),Mbe=a("span"),F(mL.$$.fragment),Jir=l(),Ebe=a("span"),Yir=o("TFAutoModel"),Fje=l(),Yo=a("div"),F(gL.$$.fragment),Kir=l(),Od=a("p"),Zir=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dW=a("a"),edr=o("from_pretrained()"),odr=o(" class method or the "),cW=a("a"),rdr=o("from_config()"),tdr=o(` class
method.`),adr=l(),hL=a("p"),ndr=o("This class cannot be instantiated directly using "),Cbe=a("code"),sdr=o("__init__()"),ldr=o(" (throws an error)."),idr=l(),yt=a("div"),F(pL.$$.fragment),ddr=l(),wbe=a("p"),cdr=o("Instantiates one of the base model classes of the library from a configuration."),fdr=l(),Vd=a("p"),mdr=o(`Note:
Loading a model from its configuration file does `),Abe=a("strong"),gdr=o("not"),hdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),pdr=o("from_pretrained()"),_dr=o(" to load the model weights."),udr=l(),F(eT.$$.fragment),bdr=l(),wr=a("div"),F(_L.$$.fragment),vdr=l(),ybe=a("p"),Fdr=o("Instantiate one of the base model classes of the library from a pretrained model."),Tdr=l(),Ka=a("p"),Mdr=o("The model class to instantiate is selected based on the "),Lbe=a("code"),Edr=o("model_type"),Cdr=o(` property of the config object (either
passed as an argument or loaded from `),xbe=a("code"),wdr=o("pretrained_model_name_or_path"),Adr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=a("code"),ydr=o("pretrained_model_name_or_path"),Ldr=o(":"),xdr=l(),q=a("ul"),oT=a("li"),kbe=a("strong"),$dr=o("albert"),kdr=o(" \u2014 "),mW=a("a"),Sdr=o("TFAlbertModel"),Rdr=o(" (ALBERT model)"),Pdr=l(),rT=a("li"),Sbe=a("strong"),Bdr=o("bart"),Idr=o(" \u2014 "),gW=a("a"),Ndr=o("TFBartModel"),qdr=o(" (BART model)"),jdr=l(),tT=a("li"),Rbe=a("strong"),Ddr=o("bert"),Gdr=o(" \u2014 "),hW=a("a"),Odr=o("TFBertModel"),Vdr=o(" (BERT model)"),Xdr=l(),aT=a("li"),Pbe=a("strong"),zdr=o("blenderbot"),Wdr=o(" \u2014 "),pW=a("a"),Qdr=o("TFBlenderbotModel"),Hdr=o(" (Blenderbot model)"),Udr=l(),nT=a("li"),Bbe=a("strong"),Jdr=o("blenderbot-small"),Ydr=o(" \u2014 "),_W=a("a"),Kdr=o("TFBlenderbotSmallModel"),Zdr=o(" (BlenderbotSmall model)"),ecr=l(),sT=a("li"),Ibe=a("strong"),ocr=o("camembert"),rcr=o(" \u2014 "),uW=a("a"),tcr=o("TFCamembertModel"),acr=o(" (CamemBERT model)"),ncr=l(),lT=a("li"),Nbe=a("strong"),scr=o("clip"),lcr=o(" \u2014 "),bW=a("a"),icr=o("TFCLIPModel"),dcr=o(" (CLIP model)"),ccr=l(),iT=a("li"),qbe=a("strong"),fcr=o("convbert"),mcr=o(" \u2014 "),vW=a("a"),gcr=o("TFConvBertModel"),hcr=o(" (ConvBERT model)"),pcr=l(),dT=a("li"),jbe=a("strong"),_cr=o("convnext"),ucr=o(" \u2014 "),FW=a("a"),bcr=o("TFConvNextModel"),vcr=o(" (ConvNext model)"),Fcr=l(),cT=a("li"),Dbe=a("strong"),Tcr=o("ctrl"),Mcr=o(" \u2014 "),TW=a("a"),Ecr=o("TFCTRLModel"),Ccr=o(" (CTRL model)"),wcr=l(),fT=a("li"),Gbe=a("strong"),Acr=o("data2vec-vision"),ycr=o(" \u2014 "),MW=a("a"),Lcr=o("TFData2VecVisionModel"),xcr=o(" (Data2VecVision model)"),$cr=l(),mT=a("li"),Obe=a("strong"),kcr=o("deberta"),Scr=o(" \u2014 "),EW=a("a"),Rcr=o("TFDebertaModel"),Pcr=o(" (DeBERTa model)"),Bcr=l(),gT=a("li"),Vbe=a("strong"),Icr=o("deberta-v2"),Ncr=o(" \u2014 "),CW=a("a"),qcr=o("TFDebertaV2Model"),jcr=o(" (DeBERTa-v2 model)"),Dcr=l(),hT=a("li"),Xbe=a("strong"),Gcr=o("distilbert"),Ocr=o(" \u2014 "),wW=a("a"),Vcr=o("TFDistilBertModel"),Xcr=o(" (DistilBERT model)"),zcr=l(),pT=a("li"),zbe=a("strong"),Wcr=o("dpr"),Qcr=o(" \u2014 "),AW=a("a"),Hcr=o("TFDPRQuestionEncoder"),Ucr=o(" (DPR model)"),Jcr=l(),_T=a("li"),Wbe=a("strong"),Ycr=o("electra"),Kcr=o(" \u2014 "),yW=a("a"),Zcr=o("TFElectraModel"),efr=o(" (ELECTRA model)"),ofr=l(),uT=a("li"),Qbe=a("strong"),rfr=o("flaubert"),tfr=o(" \u2014 "),LW=a("a"),afr=o("TFFlaubertModel"),nfr=o(" (FlauBERT model)"),sfr=l(),Is=a("li"),Hbe=a("strong"),lfr=o("funnel"),ifr=o(" \u2014 "),xW=a("a"),dfr=o("TFFunnelModel"),cfr=o(" or "),$W=a("a"),ffr=o("TFFunnelBaseModel"),mfr=o(" (Funnel Transformer model)"),gfr=l(),bT=a("li"),Ube=a("strong"),hfr=o("gpt2"),pfr=o(" \u2014 "),kW=a("a"),_fr=o("TFGPT2Model"),ufr=o(" (OpenAI GPT-2 model)"),bfr=l(),vT=a("li"),Jbe=a("strong"),vfr=o("gptj"),Ffr=o(" \u2014 "),SW=a("a"),Tfr=o("TFGPTJModel"),Mfr=o(" (GPT-J model)"),Efr=l(),FT=a("li"),Ybe=a("strong"),Cfr=o("hubert"),wfr=o(" \u2014 "),RW=a("a"),Afr=o("TFHubertModel"),yfr=o(" (Hubert model)"),Lfr=l(),TT=a("li"),Kbe=a("strong"),xfr=o("layoutlm"),$fr=o(" \u2014 "),PW=a("a"),kfr=o("TFLayoutLMModel"),Sfr=o(" (LayoutLM model)"),Rfr=l(),MT=a("li"),Zbe=a("strong"),Pfr=o("led"),Bfr=o(" \u2014 "),BW=a("a"),Ifr=o("TFLEDModel"),Nfr=o(" (LED model)"),qfr=l(),ET=a("li"),e2e=a("strong"),jfr=o("longformer"),Dfr=o(" \u2014 "),IW=a("a"),Gfr=o("TFLongformerModel"),Ofr=o(" (Longformer model)"),Vfr=l(),CT=a("li"),o2e=a("strong"),Xfr=o("lxmert"),zfr=o(" \u2014 "),NW=a("a"),Wfr=o("TFLxmertModel"),Qfr=o(" (LXMERT model)"),Hfr=l(),wT=a("li"),r2e=a("strong"),Ufr=o("marian"),Jfr=o(" \u2014 "),qW=a("a"),Yfr=o("TFMarianModel"),Kfr=o(" (Marian model)"),Zfr=l(),AT=a("li"),t2e=a("strong"),emr=o("mbart"),omr=o(" \u2014 "),jW=a("a"),rmr=o("TFMBartModel"),tmr=o(" (mBART model)"),amr=l(),yT=a("li"),a2e=a("strong"),nmr=o("mobilebert"),smr=o(" \u2014 "),DW=a("a"),lmr=o("TFMobileBertModel"),imr=o(" (MobileBERT model)"),dmr=l(),LT=a("li"),n2e=a("strong"),cmr=o("mpnet"),fmr=o(" \u2014 "),GW=a("a"),mmr=o("TFMPNetModel"),gmr=o(" (MPNet model)"),hmr=l(),xT=a("li"),s2e=a("strong"),pmr=o("mt5"),_mr=o(" \u2014 "),OW=a("a"),umr=o("TFMT5Model"),bmr=o(" (mT5 model)"),vmr=l(),$T=a("li"),l2e=a("strong"),Fmr=o("openai-gpt"),Tmr=o(" \u2014 "),VW=a("a"),Mmr=o("TFOpenAIGPTModel"),Emr=o(" (OpenAI GPT model)"),Cmr=l(),kT=a("li"),i2e=a("strong"),wmr=o("opt"),Amr=o(" \u2014 "),XW=a("a"),ymr=o("TFOPTModel"),Lmr=o(" (OPT model)"),xmr=l(),ST=a("li"),d2e=a("strong"),$mr=o("pegasus"),kmr=o(" \u2014 "),zW=a("a"),Smr=o("TFPegasusModel"),Rmr=o(" (Pegasus model)"),Pmr=l(),RT=a("li"),c2e=a("strong"),Bmr=o("rembert"),Imr=o(" \u2014 "),WW=a("a"),Nmr=o("TFRemBertModel"),qmr=o(" (RemBERT model)"),jmr=l(),PT=a("li"),f2e=a("strong"),Dmr=o("roberta"),Gmr=o(" \u2014 "),QW=a("a"),Omr=o("TFRobertaModel"),Vmr=o(" (RoBERTa model)"),Xmr=l(),BT=a("li"),m2e=a("strong"),zmr=o("roformer"),Wmr=o(" \u2014 "),HW=a("a"),Qmr=o("TFRoFormerModel"),Hmr=o(" (RoFormer model)"),Umr=l(),IT=a("li"),g2e=a("strong"),Jmr=o("speech_to_text"),Ymr=o(" \u2014 "),UW=a("a"),Kmr=o("TFSpeech2TextModel"),Zmr=o(" (Speech2Text model)"),egr=l(),NT=a("li"),h2e=a("strong"),ogr=o("swin"),rgr=o(" \u2014 "),JW=a("a"),tgr=o("TFSwinModel"),agr=o(" (Swin model)"),ngr=l(),qT=a("li"),p2e=a("strong"),sgr=o("t5"),lgr=o(" \u2014 "),YW=a("a"),igr=o("TFT5Model"),dgr=o(" (T5 model)"),cgr=l(),jT=a("li"),_2e=a("strong"),fgr=o("tapas"),mgr=o(" \u2014 "),KW=a("a"),ggr=o("TFTapasModel"),hgr=o(" (TAPAS model)"),pgr=l(),DT=a("li"),u2e=a("strong"),_gr=o("transfo-xl"),ugr=o(" \u2014 "),ZW=a("a"),bgr=o("TFTransfoXLModel"),vgr=o(" (Transformer-XL model)"),Fgr=l(),GT=a("li"),b2e=a("strong"),Tgr=o("vit"),Mgr=o(" \u2014 "),eQ=a("a"),Egr=o("TFViTModel"),Cgr=o(" (ViT model)"),wgr=l(),OT=a("li"),v2e=a("strong"),Agr=o("vit_mae"),ygr=o(" \u2014 "),oQ=a("a"),Lgr=o("TFViTMAEModel"),xgr=o(" (ViTMAE model)"),$gr=l(),VT=a("li"),F2e=a("strong"),kgr=o("wav2vec2"),Sgr=o(" \u2014 "),rQ=a("a"),Rgr=o("TFWav2Vec2Model"),Pgr=o(" (Wav2Vec2 model)"),Bgr=l(),XT=a("li"),T2e=a("strong"),Igr=o("xlm"),Ngr=o(" \u2014 "),tQ=a("a"),qgr=o("TFXLMModel"),jgr=o(" (XLM model)"),Dgr=l(),zT=a("li"),M2e=a("strong"),Ggr=o("xlm-roberta"),Ogr=o(" \u2014 "),aQ=a("a"),Vgr=o("TFXLMRobertaModel"),Xgr=o(" (XLM-RoBERTa model)"),zgr=l(),WT=a("li"),E2e=a("strong"),Wgr=o("xlnet"),Qgr=o(" \u2014 "),nQ=a("a"),Hgr=o("TFXLNetModel"),Ugr=o(" (XLNet model)"),Jgr=l(),F(QT.$$.fragment),Tje=l(),Xd=a("h2"),HT=a("a"),C2e=a("span"),F(uL.$$.fragment),Ygr=l(),w2e=a("span"),Kgr=o("TFAutoModelForPreTraining"),Mje=l(),Ko=a("div"),F(bL.$$.fragment),Zgr=l(),zd=a("p"),ehr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),sQ=a("a"),ohr=o("from_pretrained()"),rhr=o(" class method or the "),lQ=a("a"),thr=o("from_config()"),ahr=o(` class
method.`),nhr=l(),vL=a("p"),shr=o("This class cannot be instantiated directly using "),A2e=a("code"),lhr=o("__init__()"),ihr=o(" (throws an error)."),dhr=l(),Lt=a("div"),F(FL.$$.fragment),chr=l(),y2e=a("p"),fhr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mhr=l(),Wd=a("p"),ghr=o(`Note:
Loading a model from its configuration file does `),L2e=a("strong"),hhr=o("not"),phr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=a("a"),_hr=o("from_pretrained()"),uhr=o(" to load the model weights."),bhr=l(),F(UT.$$.fragment),vhr=l(),Ar=a("div"),F(TL.$$.fragment),Fhr=l(),x2e=a("p"),Thr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Mhr=l(),Za=a("p"),Ehr=o("The model class to instantiate is selected based on the "),$2e=a("code"),Chr=o("model_type"),whr=o(` property of the config object (either
passed as an argument or loaded from `),k2e=a("code"),Ahr=o("pretrained_model_name_or_path"),yhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S2e=a("code"),Lhr=o("pretrained_model_name_or_path"),xhr=o(":"),$hr=l(),se=a("ul"),JT=a("li"),R2e=a("strong"),khr=o("albert"),Shr=o(" \u2014 "),dQ=a("a"),Rhr=o("TFAlbertForPreTraining"),Phr=o(" (ALBERT model)"),Bhr=l(),YT=a("li"),P2e=a("strong"),Ihr=o("bart"),Nhr=o(" \u2014 "),cQ=a("a"),qhr=o("TFBartForConditionalGeneration"),jhr=o(" (BART model)"),Dhr=l(),KT=a("li"),B2e=a("strong"),Ghr=o("bert"),Ohr=o(" \u2014 "),fQ=a("a"),Vhr=o("TFBertForPreTraining"),Xhr=o(" (BERT model)"),zhr=l(),ZT=a("li"),I2e=a("strong"),Whr=o("camembert"),Qhr=o(" \u2014 "),mQ=a("a"),Hhr=o("TFCamembertForMaskedLM"),Uhr=o(" (CamemBERT model)"),Jhr=l(),e7=a("li"),N2e=a("strong"),Yhr=o("ctrl"),Khr=o(" \u2014 "),gQ=a("a"),Zhr=o("TFCTRLLMHeadModel"),epr=o(" (CTRL model)"),opr=l(),o7=a("li"),q2e=a("strong"),rpr=o("distilbert"),tpr=o(" \u2014 "),hQ=a("a"),apr=o("TFDistilBertForMaskedLM"),npr=o(" (DistilBERT model)"),spr=l(),r7=a("li"),j2e=a("strong"),lpr=o("electra"),ipr=o(" \u2014 "),pQ=a("a"),dpr=o("TFElectraForPreTraining"),cpr=o(" (ELECTRA model)"),fpr=l(),t7=a("li"),D2e=a("strong"),mpr=o("flaubert"),gpr=o(" \u2014 "),_Q=a("a"),hpr=o("TFFlaubertWithLMHeadModel"),ppr=o(" (FlauBERT model)"),_pr=l(),a7=a("li"),G2e=a("strong"),upr=o("funnel"),bpr=o(" \u2014 "),uQ=a("a"),vpr=o("TFFunnelForPreTraining"),Fpr=o(" (Funnel Transformer model)"),Tpr=l(),n7=a("li"),O2e=a("strong"),Mpr=o("gpt2"),Epr=o(" \u2014 "),bQ=a("a"),Cpr=o("TFGPT2LMHeadModel"),wpr=o(" (OpenAI GPT-2 model)"),Apr=l(),s7=a("li"),V2e=a("strong"),ypr=o("layoutlm"),Lpr=o(" \u2014 "),vQ=a("a"),xpr=o("TFLayoutLMForMaskedLM"),$pr=o(" (LayoutLM model)"),kpr=l(),l7=a("li"),X2e=a("strong"),Spr=o("lxmert"),Rpr=o(" \u2014 "),FQ=a("a"),Ppr=o("TFLxmertForPreTraining"),Bpr=o(" (LXMERT model)"),Ipr=l(),i7=a("li"),z2e=a("strong"),Npr=o("mobilebert"),qpr=o(" \u2014 "),TQ=a("a"),jpr=o("TFMobileBertForPreTraining"),Dpr=o(" (MobileBERT model)"),Gpr=l(),d7=a("li"),W2e=a("strong"),Opr=o("mpnet"),Vpr=o(" \u2014 "),MQ=a("a"),Xpr=o("TFMPNetForMaskedLM"),zpr=o(" (MPNet model)"),Wpr=l(),c7=a("li"),Q2e=a("strong"),Qpr=o("openai-gpt"),Hpr=o(" \u2014 "),EQ=a("a"),Upr=o("TFOpenAIGPTLMHeadModel"),Jpr=o(" (OpenAI GPT model)"),Ypr=l(),f7=a("li"),H2e=a("strong"),Kpr=o("roberta"),Zpr=o(" \u2014 "),CQ=a("a"),e_r=o("TFRobertaForMaskedLM"),o_r=o(" (RoBERTa model)"),r_r=l(),m7=a("li"),U2e=a("strong"),t_r=o("t5"),a_r=o(" \u2014 "),wQ=a("a"),n_r=o("TFT5ForConditionalGeneration"),s_r=o(" (T5 model)"),l_r=l(),g7=a("li"),J2e=a("strong"),i_r=o("tapas"),d_r=o(" \u2014 "),AQ=a("a"),c_r=o("TFTapasForMaskedLM"),f_r=o(" (TAPAS model)"),m_r=l(),h7=a("li"),Y2e=a("strong"),g_r=o("transfo-xl"),h_r=o(" \u2014 "),yQ=a("a"),p_r=o("TFTransfoXLLMHeadModel"),__r=o(" (Transformer-XL model)"),u_r=l(),p7=a("li"),K2e=a("strong"),b_r=o("vit_mae"),v_r=o(" \u2014 "),LQ=a("a"),F_r=o("TFViTMAEForPreTraining"),T_r=o(" (ViTMAE model)"),M_r=l(),_7=a("li"),Z2e=a("strong"),E_r=o("xlm"),C_r=o(" \u2014 "),xQ=a("a"),w_r=o("TFXLMWithLMHeadModel"),A_r=o(" (XLM model)"),y_r=l(),u7=a("li"),e4e=a("strong"),L_r=o("xlm-roberta"),x_r=o(" \u2014 "),$Q=a("a"),$_r=o("TFXLMRobertaForMaskedLM"),k_r=o(" (XLM-RoBERTa model)"),S_r=l(),b7=a("li"),o4e=a("strong"),R_r=o("xlnet"),P_r=o(" \u2014 "),kQ=a("a"),B_r=o("TFXLNetLMHeadModel"),I_r=o(" (XLNet model)"),N_r=l(),F(v7.$$.fragment),Eje=l(),Qd=a("h2"),F7=a("a"),r4e=a("span"),F(ML.$$.fragment),q_r=l(),t4e=a("span"),j_r=o("TFAutoModelForCausalLM"),Cje=l(),Zo=a("div"),F(EL.$$.fragment),D_r=l(),Hd=a("p"),G_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SQ=a("a"),O_r=o("from_pretrained()"),V_r=o(" class method or the "),RQ=a("a"),X_r=o("from_config()"),z_r=o(` class
method.`),W_r=l(),CL=a("p"),Q_r=o("This class cannot be instantiated directly using "),a4e=a("code"),H_r=o("__init__()"),U_r=o(" (throws an error)."),J_r=l(),xt=a("div"),F(wL.$$.fragment),Y_r=l(),n4e=a("p"),K_r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Z_r=l(),Ud=a("p"),eur=o(`Note:
Loading a model from its configuration file does `),s4e=a("strong"),our=o("not"),rur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=a("a"),tur=o("from_pretrained()"),aur=o(" to load the model weights."),nur=l(),F(T7.$$.fragment),sur=l(),yr=a("div"),F(AL.$$.fragment),lur=l(),l4e=a("p"),iur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),dur=l(),en=a("p"),cur=o("The model class to instantiate is selected based on the "),i4e=a("code"),fur=o("model_type"),mur=o(` property of the config object (either
passed as an argument or loaded from `),d4e=a("code"),gur=o("pretrained_model_name_or_path"),hur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=a("code"),pur=o("pretrained_model_name_or_path"),_ur=o(":"),uur=l(),Te=a("ul"),M7=a("li"),f4e=a("strong"),bur=o("bert"),vur=o(" \u2014 "),BQ=a("a"),Fur=o("TFBertLMHeadModel"),Tur=o(" (BERT model)"),Mur=l(),E7=a("li"),m4e=a("strong"),Eur=o("camembert"),Cur=o(" \u2014 "),IQ=a("a"),wur=o("TFCamembertForCausalLM"),Aur=o(" (CamemBERT model)"),yur=l(),C7=a("li"),g4e=a("strong"),Lur=o("ctrl"),xur=o(" \u2014 "),NQ=a("a"),$ur=o("TFCTRLLMHeadModel"),kur=o(" (CTRL model)"),Sur=l(),w7=a("li"),h4e=a("strong"),Rur=o("gpt2"),Pur=o(" \u2014 "),qQ=a("a"),Bur=o("TFGPT2LMHeadModel"),Iur=o(" (OpenAI GPT-2 model)"),Nur=l(),A7=a("li"),p4e=a("strong"),qur=o("gptj"),jur=o(" \u2014 "),jQ=a("a"),Dur=o("TFGPTJForCausalLM"),Gur=o(" (GPT-J model)"),Our=l(),y7=a("li"),_4e=a("strong"),Vur=o("openai-gpt"),Xur=o(" \u2014 "),DQ=a("a"),zur=o("TFOpenAIGPTLMHeadModel"),Wur=o(" (OpenAI GPT model)"),Qur=l(),L7=a("li"),u4e=a("strong"),Hur=o("opt"),Uur=o(" \u2014 "),GQ=a("a"),Jur=o("TFOPTForCausalLM"),Yur=o(" (OPT model)"),Kur=l(),x7=a("li"),b4e=a("strong"),Zur=o("rembert"),e1r=o(" \u2014 "),OQ=a("a"),o1r=o("TFRemBertForCausalLM"),r1r=o(" (RemBERT model)"),t1r=l(),$7=a("li"),v4e=a("strong"),a1r=o("roberta"),n1r=o(" \u2014 "),VQ=a("a"),s1r=o("TFRobertaForCausalLM"),l1r=o(" (RoBERTa model)"),i1r=l(),k7=a("li"),F4e=a("strong"),d1r=o("roformer"),c1r=o(" \u2014 "),XQ=a("a"),f1r=o("TFRoFormerForCausalLM"),m1r=o(" (RoFormer model)"),g1r=l(),S7=a("li"),T4e=a("strong"),h1r=o("transfo-xl"),p1r=o(" \u2014 "),zQ=a("a"),_1r=o("TFTransfoXLLMHeadModel"),u1r=o(" (Transformer-XL model)"),b1r=l(),R7=a("li"),M4e=a("strong"),v1r=o("xlm"),F1r=o(" \u2014 "),WQ=a("a"),T1r=o("TFXLMWithLMHeadModel"),M1r=o(" (XLM model)"),E1r=l(),P7=a("li"),E4e=a("strong"),C1r=o("xlnet"),w1r=o(" \u2014 "),QQ=a("a"),A1r=o("TFXLNetLMHeadModel"),y1r=o(" (XLNet model)"),L1r=l(),F(B7.$$.fragment),wje=l(),Jd=a("h2"),I7=a("a"),C4e=a("span"),F(yL.$$.fragment),x1r=l(),w4e=a("span"),$1r=o("TFAutoModelForImageClassification"),Aje=l(),er=a("div"),F(LL.$$.fragment),k1r=l(),Yd=a("p"),S1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),HQ=a("a"),R1r=o("from_pretrained()"),P1r=o(" class method or the "),UQ=a("a"),B1r=o("from_config()"),I1r=o(` class
method.`),N1r=l(),xL=a("p"),q1r=o("This class cannot be instantiated directly using "),A4e=a("code"),j1r=o("__init__()"),D1r=o(" (throws an error)."),G1r=l(),$t=a("div"),F($L.$$.fragment),O1r=l(),y4e=a("p"),V1r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),X1r=l(),Kd=a("p"),z1r=o(`Note:
Loading a model from its configuration file does `),L4e=a("strong"),W1r=o("not"),Q1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),H1r=o("from_pretrained()"),U1r=o(" to load the model weights."),J1r=l(),F(N7.$$.fragment),Y1r=l(),Lr=a("div"),F(kL.$$.fragment),K1r=l(),x4e=a("p"),Z1r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ebr=l(),on=a("p"),obr=o("The model class to instantiate is selected based on the "),$4e=a("code"),rbr=o("model_type"),tbr=o(` property of the config object (either
passed as an argument or loaded from `),k4e=a("code"),abr=o("pretrained_model_name_or_path"),nbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=a("code"),sbr=o("pretrained_model_name_or_path"),lbr=o(":"),ibr=l(),rn=a("ul"),q7=a("li"),R4e=a("strong"),dbr=o("convnext"),cbr=o(" \u2014 "),YQ=a("a"),fbr=o("TFConvNextForImageClassification"),mbr=o(" (ConvNext model)"),gbr=l(),j7=a("li"),P4e=a("strong"),hbr=o("data2vec-vision"),pbr=o(" \u2014 "),KQ=a("a"),_br=o("TFData2VecVisionForImageClassification"),ubr=o(" (Data2VecVision model)"),bbr=l(),D7=a("li"),B4e=a("strong"),vbr=o("swin"),Fbr=o(" \u2014 "),ZQ=a("a"),Tbr=o("TFSwinForImageClassification"),Mbr=o(" (Swin model)"),Ebr=l(),G7=a("li"),I4e=a("strong"),Cbr=o("vit"),wbr=o(" \u2014 "),eH=a("a"),Abr=o("TFViTForImageClassification"),ybr=o(" (ViT model)"),Lbr=l(),F(O7.$$.fragment),yje=l(),Zd=a("h2"),V7=a("a"),N4e=a("span"),F(SL.$$.fragment),xbr=l(),q4e=a("span"),$br=o("TFAutoModelForMaskedLM"),Lje=l(),or=a("div"),F(RL.$$.fragment),kbr=l(),ec=a("p"),Sbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),oH=a("a"),Rbr=o("from_pretrained()"),Pbr=o(" class method or the "),rH=a("a"),Bbr=o("from_config()"),Ibr=o(` class
method.`),Nbr=l(),PL=a("p"),qbr=o("This class cannot be instantiated directly using "),j4e=a("code"),jbr=o("__init__()"),Dbr=o(" (throws an error)."),Gbr=l(),kt=a("div"),F(BL.$$.fragment),Obr=l(),D4e=a("p"),Vbr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Xbr=l(),oc=a("p"),zbr=o(`Note:
Loading a model from its configuration file does `),G4e=a("strong"),Wbr=o("not"),Qbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=a("a"),Hbr=o("from_pretrained()"),Ubr=o(" to load the model weights."),Jbr=l(),F(X7.$$.fragment),Ybr=l(),xr=a("div"),F(IL.$$.fragment),Kbr=l(),O4e=a("p"),Zbr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),e2r=l(),tn=a("p"),o2r=o("The model class to instantiate is selected based on the "),V4e=a("code"),r2r=o("model_type"),t2r=o(` property of the config object (either
passed as an argument or loaded from `),X4e=a("code"),a2r=o("pretrained_model_name_or_path"),n2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=a("code"),s2r=o("pretrained_model_name_or_path"),l2r=o(":"),i2r=l(),ie=a("ul"),z7=a("li"),W4e=a("strong"),d2r=o("albert"),c2r=o(" \u2014 "),aH=a("a"),f2r=o("TFAlbertForMaskedLM"),m2r=o(" (ALBERT model)"),g2r=l(),W7=a("li"),Q4e=a("strong"),h2r=o("bert"),p2r=o(" \u2014 "),nH=a("a"),_2r=o("TFBertForMaskedLM"),u2r=o(" (BERT model)"),b2r=l(),Q7=a("li"),H4e=a("strong"),v2r=o("camembert"),F2r=o(" \u2014 "),sH=a("a"),T2r=o("TFCamembertForMaskedLM"),M2r=o(" (CamemBERT model)"),E2r=l(),H7=a("li"),U4e=a("strong"),C2r=o("convbert"),w2r=o(" \u2014 "),lH=a("a"),A2r=o("TFConvBertForMaskedLM"),y2r=o(" (ConvBERT model)"),L2r=l(),U7=a("li"),J4e=a("strong"),x2r=o("deberta"),$2r=o(" \u2014 "),iH=a("a"),k2r=o("TFDebertaForMaskedLM"),S2r=o(" (DeBERTa model)"),R2r=l(),J7=a("li"),Y4e=a("strong"),P2r=o("deberta-v2"),B2r=o(" \u2014 "),dH=a("a"),I2r=o("TFDebertaV2ForMaskedLM"),N2r=o(" (DeBERTa-v2 model)"),q2r=l(),Y7=a("li"),K4e=a("strong"),j2r=o("distilbert"),D2r=o(" \u2014 "),cH=a("a"),G2r=o("TFDistilBertForMaskedLM"),O2r=o(" (DistilBERT model)"),V2r=l(),K7=a("li"),Z4e=a("strong"),X2r=o("electra"),z2r=o(" \u2014 "),fH=a("a"),W2r=o("TFElectraForMaskedLM"),Q2r=o(" (ELECTRA model)"),H2r=l(),Z7=a("li"),e5e=a("strong"),U2r=o("flaubert"),J2r=o(" \u2014 "),mH=a("a"),Y2r=o("TFFlaubertWithLMHeadModel"),K2r=o(" (FlauBERT model)"),Z2r=l(),e9=a("li"),o5e=a("strong"),e4r=o("funnel"),o4r=o(" \u2014 "),gH=a("a"),r4r=o("TFFunnelForMaskedLM"),t4r=o(" (Funnel Transformer model)"),a4r=l(),o9=a("li"),r5e=a("strong"),n4r=o("layoutlm"),s4r=o(" \u2014 "),hH=a("a"),l4r=o("TFLayoutLMForMaskedLM"),i4r=o(" (LayoutLM model)"),d4r=l(),r9=a("li"),t5e=a("strong"),c4r=o("longformer"),f4r=o(" \u2014 "),pH=a("a"),m4r=o("TFLongformerForMaskedLM"),g4r=o(" (Longformer model)"),h4r=l(),t9=a("li"),a5e=a("strong"),p4r=o("mobilebert"),_4r=o(" \u2014 "),_H=a("a"),u4r=o("TFMobileBertForMaskedLM"),b4r=o(" (MobileBERT model)"),v4r=l(),a9=a("li"),n5e=a("strong"),F4r=o("mpnet"),T4r=o(" \u2014 "),uH=a("a"),M4r=o("TFMPNetForMaskedLM"),E4r=o(" (MPNet model)"),C4r=l(),n9=a("li"),s5e=a("strong"),w4r=o("rembert"),A4r=o(" \u2014 "),bH=a("a"),y4r=o("TFRemBertForMaskedLM"),L4r=o(" (RemBERT model)"),x4r=l(),s9=a("li"),l5e=a("strong"),$4r=o("roberta"),k4r=o(" \u2014 "),vH=a("a"),S4r=o("TFRobertaForMaskedLM"),R4r=o(" (RoBERTa model)"),P4r=l(),l9=a("li"),i5e=a("strong"),B4r=o("roformer"),I4r=o(" \u2014 "),FH=a("a"),N4r=o("TFRoFormerForMaskedLM"),q4r=o(" (RoFormer model)"),j4r=l(),i9=a("li"),d5e=a("strong"),D4r=o("tapas"),G4r=o(" \u2014 "),TH=a("a"),O4r=o("TFTapasForMaskedLM"),V4r=o(" (TAPAS model)"),X4r=l(),d9=a("li"),c5e=a("strong"),z4r=o("xlm"),W4r=o(" \u2014 "),MH=a("a"),Q4r=o("TFXLMWithLMHeadModel"),H4r=o(" (XLM model)"),U4r=l(),c9=a("li"),f5e=a("strong"),J4r=o("xlm-roberta"),Y4r=o(" \u2014 "),EH=a("a"),K4r=o("TFXLMRobertaForMaskedLM"),Z4r=o(" (XLM-RoBERTa model)"),e5r=l(),F(f9.$$.fragment),xje=l(),rc=a("h2"),m9=a("a"),m5e=a("span"),F(NL.$$.fragment),o5r=l(),g5e=a("span"),r5r=o("TFAutoModelForSeq2SeqLM"),$je=l(),rr=a("div"),F(qL.$$.fragment),t5r=l(),tc=a("p"),a5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),CH=a("a"),n5r=o("from_pretrained()"),s5r=o(" class method or the "),wH=a("a"),l5r=o("from_config()"),i5r=o(` class
method.`),d5r=l(),jL=a("p"),c5r=o("This class cannot be instantiated directly using "),h5e=a("code"),f5r=o("__init__()"),m5r=o(" (throws an error)."),g5r=l(),St=a("div"),F(DL.$$.fragment),h5r=l(),p5e=a("p"),p5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_5r=l(),ac=a("p"),u5r=o(`Note:
Loading a model from its configuration file does `),_5e=a("strong"),b5r=o("not"),v5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=a("a"),F5r=o("from_pretrained()"),T5r=o(" to load the model weights."),M5r=l(),F(g9.$$.fragment),E5r=l(),$r=a("div"),F(GL.$$.fragment),C5r=l(),u5e=a("p"),w5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),A5r=l(),an=a("p"),y5r=o("The model class to instantiate is selected based on the "),b5e=a("code"),L5r=o("model_type"),x5r=o(` property of the config object (either
passed as an argument or loaded from `),v5e=a("code"),$5r=o("pretrained_model_name_or_path"),k5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=a("code"),S5r=o("pretrained_model_name_or_path"),R5r=o(":"),P5r=l(),ye=a("ul"),h9=a("li"),T5e=a("strong"),B5r=o("bart"),I5r=o(" \u2014 "),yH=a("a"),N5r=o("TFBartForConditionalGeneration"),q5r=o(" (BART model)"),j5r=l(),p9=a("li"),M5e=a("strong"),D5r=o("blenderbot"),G5r=o(" \u2014 "),LH=a("a"),O5r=o("TFBlenderbotForConditionalGeneration"),V5r=o(" (Blenderbot model)"),X5r=l(),_9=a("li"),E5e=a("strong"),z5r=o("blenderbot-small"),W5r=o(" \u2014 "),xH=a("a"),Q5r=o("TFBlenderbotSmallForConditionalGeneration"),H5r=o(" (BlenderbotSmall model)"),U5r=l(),u9=a("li"),C5e=a("strong"),J5r=o("encoder-decoder"),Y5r=o(" \u2014 "),$H=a("a"),K5r=o("TFEncoderDecoderModel"),Z5r=o(" (Encoder decoder model)"),evr=l(),b9=a("li"),w5e=a("strong"),ovr=o("led"),rvr=o(" \u2014 "),kH=a("a"),tvr=o("TFLEDForConditionalGeneration"),avr=o(" (LED model)"),nvr=l(),v9=a("li"),A5e=a("strong"),svr=o("marian"),lvr=o(" \u2014 "),SH=a("a"),ivr=o("TFMarianMTModel"),dvr=o(" (Marian model)"),cvr=l(),F9=a("li"),y5e=a("strong"),fvr=o("mbart"),mvr=o(" \u2014 "),RH=a("a"),gvr=o("TFMBartForConditionalGeneration"),hvr=o(" (mBART model)"),pvr=l(),T9=a("li"),L5e=a("strong"),_vr=o("mt5"),uvr=o(" \u2014 "),PH=a("a"),bvr=o("TFMT5ForConditionalGeneration"),vvr=o(" (mT5 model)"),Fvr=l(),M9=a("li"),x5e=a("strong"),Tvr=o("pegasus"),Mvr=o(" \u2014 "),BH=a("a"),Evr=o("TFPegasusForConditionalGeneration"),Cvr=o(" (Pegasus model)"),wvr=l(),E9=a("li"),$5e=a("strong"),Avr=o("t5"),yvr=o(" \u2014 "),IH=a("a"),Lvr=o("TFT5ForConditionalGeneration"),xvr=o(" (T5 model)"),$vr=l(),F(C9.$$.fragment),kje=l(),nc=a("h2"),w9=a("a"),k5e=a("span"),F(OL.$$.fragment),kvr=l(),S5e=a("span"),Svr=o("TFAutoModelForSequenceClassification"),Sje=l(),tr=a("div"),F(VL.$$.fragment),Rvr=l(),sc=a("p"),Pvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NH=a("a"),Bvr=o("from_pretrained()"),Ivr=o(" class method or the "),qH=a("a"),Nvr=o("from_config()"),qvr=o(` class
method.`),jvr=l(),XL=a("p"),Dvr=o("This class cannot be instantiated directly using "),R5e=a("code"),Gvr=o("__init__()"),Ovr=o(" (throws an error)."),Vvr=l(),Rt=a("div"),F(zL.$$.fragment),Xvr=l(),P5e=a("p"),zvr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Wvr=l(),lc=a("p"),Qvr=o(`Note:
Loading a model from its configuration file does `),B5e=a("strong"),Hvr=o("not"),Uvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=a("a"),Jvr=o("from_pretrained()"),Yvr=o(" to load the model weights."),Kvr=l(),F(A9.$$.fragment),Zvr=l(),kr=a("div"),F(WL.$$.fragment),eFr=l(),I5e=a("p"),oFr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rFr=l(),nn=a("p"),tFr=o("The model class to instantiate is selected based on the "),N5e=a("code"),aFr=o("model_type"),nFr=o(` property of the config object (either
passed as an argument or loaded from `),q5e=a("code"),sFr=o("pretrained_model_name_or_path"),lFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j5e=a("code"),iFr=o("pretrained_model_name_or_path"),dFr=o(":"),cFr=l(),oe=a("ul"),y9=a("li"),D5e=a("strong"),fFr=o("albert"),mFr=o(" \u2014 "),DH=a("a"),gFr=o("TFAlbertForSequenceClassification"),hFr=o(" (ALBERT model)"),pFr=l(),L9=a("li"),G5e=a("strong"),_Fr=o("bert"),uFr=o(" \u2014 "),GH=a("a"),bFr=o("TFBertForSequenceClassification"),vFr=o(" (BERT model)"),FFr=l(),x9=a("li"),O5e=a("strong"),TFr=o("camembert"),MFr=o(" \u2014 "),OH=a("a"),EFr=o("TFCamembertForSequenceClassification"),CFr=o(" (CamemBERT model)"),wFr=l(),$9=a("li"),V5e=a("strong"),AFr=o("convbert"),yFr=o(" \u2014 "),VH=a("a"),LFr=o("TFConvBertForSequenceClassification"),xFr=o(" (ConvBERT model)"),$Fr=l(),k9=a("li"),X5e=a("strong"),kFr=o("ctrl"),SFr=o(" \u2014 "),XH=a("a"),RFr=o("TFCTRLForSequenceClassification"),PFr=o(" (CTRL model)"),BFr=l(),S9=a("li"),z5e=a("strong"),IFr=o("deberta"),NFr=o(" \u2014 "),zH=a("a"),qFr=o("TFDebertaForSequenceClassification"),jFr=o(" (DeBERTa model)"),DFr=l(),R9=a("li"),W5e=a("strong"),GFr=o("deberta-v2"),OFr=o(" \u2014 "),WH=a("a"),VFr=o("TFDebertaV2ForSequenceClassification"),XFr=o(" (DeBERTa-v2 model)"),zFr=l(),P9=a("li"),Q5e=a("strong"),WFr=o("distilbert"),QFr=o(" \u2014 "),QH=a("a"),HFr=o("TFDistilBertForSequenceClassification"),UFr=o(" (DistilBERT model)"),JFr=l(),B9=a("li"),H5e=a("strong"),YFr=o("electra"),KFr=o(" \u2014 "),HH=a("a"),ZFr=o("TFElectraForSequenceClassification"),eTr=o(" (ELECTRA model)"),oTr=l(),I9=a("li"),U5e=a("strong"),rTr=o("flaubert"),tTr=o(" \u2014 "),UH=a("a"),aTr=o("TFFlaubertForSequenceClassification"),nTr=o(" (FlauBERT model)"),sTr=l(),N9=a("li"),J5e=a("strong"),lTr=o("funnel"),iTr=o(" \u2014 "),JH=a("a"),dTr=o("TFFunnelForSequenceClassification"),cTr=o(" (Funnel Transformer model)"),fTr=l(),q9=a("li"),Y5e=a("strong"),mTr=o("gpt2"),gTr=o(" \u2014 "),YH=a("a"),hTr=o("TFGPT2ForSequenceClassification"),pTr=o(" (OpenAI GPT-2 model)"),_Tr=l(),j9=a("li"),K5e=a("strong"),uTr=o("gptj"),bTr=o(" \u2014 "),KH=a("a"),vTr=o("TFGPTJForSequenceClassification"),FTr=o(" (GPT-J model)"),TTr=l(),D9=a("li"),Z5e=a("strong"),MTr=o("layoutlm"),ETr=o(" \u2014 "),ZH=a("a"),CTr=o("TFLayoutLMForSequenceClassification"),wTr=o(" (LayoutLM model)"),ATr=l(),G9=a("li"),eve=a("strong"),yTr=o("longformer"),LTr=o(" \u2014 "),eU=a("a"),xTr=o("TFLongformerForSequenceClassification"),$Tr=o(" (Longformer model)"),kTr=l(),O9=a("li"),ove=a("strong"),STr=o("mobilebert"),RTr=o(" \u2014 "),oU=a("a"),PTr=o("TFMobileBertForSequenceClassification"),BTr=o(" (MobileBERT model)"),ITr=l(),V9=a("li"),rve=a("strong"),NTr=o("mpnet"),qTr=o(" \u2014 "),rU=a("a"),jTr=o("TFMPNetForSequenceClassification"),DTr=o(" (MPNet model)"),GTr=l(),X9=a("li"),tve=a("strong"),OTr=o("openai-gpt"),VTr=o(" \u2014 "),tU=a("a"),XTr=o("TFOpenAIGPTForSequenceClassification"),zTr=o(" (OpenAI GPT model)"),WTr=l(),z9=a("li"),ave=a("strong"),QTr=o("rembert"),HTr=o(" \u2014 "),aU=a("a"),UTr=o("TFRemBertForSequenceClassification"),JTr=o(" (RemBERT model)"),YTr=l(),W9=a("li"),nve=a("strong"),KTr=o("roberta"),ZTr=o(" \u2014 "),nU=a("a"),e7r=o("TFRobertaForSequenceClassification"),o7r=o(" (RoBERTa model)"),r7r=l(),Q9=a("li"),sve=a("strong"),t7r=o("roformer"),a7r=o(" \u2014 "),sU=a("a"),n7r=o("TFRoFormerForSequenceClassification"),s7r=o(" (RoFormer model)"),l7r=l(),H9=a("li"),lve=a("strong"),i7r=o("tapas"),d7r=o(" \u2014 "),lU=a("a"),c7r=o("TFTapasForSequenceClassification"),f7r=o(" (TAPAS model)"),m7r=l(),U9=a("li"),ive=a("strong"),g7r=o("transfo-xl"),h7r=o(" \u2014 "),iU=a("a"),p7r=o("TFTransfoXLForSequenceClassification"),_7r=o(" (Transformer-XL model)"),u7r=l(),J9=a("li"),dve=a("strong"),b7r=o("xlm"),v7r=o(" \u2014 "),dU=a("a"),F7r=o("TFXLMForSequenceClassification"),T7r=o(" (XLM model)"),M7r=l(),Y9=a("li"),cve=a("strong"),E7r=o("xlm-roberta"),C7r=o(" \u2014 "),cU=a("a"),w7r=o("TFXLMRobertaForSequenceClassification"),A7r=o(" (XLM-RoBERTa model)"),y7r=l(),K9=a("li"),fve=a("strong"),L7r=o("xlnet"),x7r=o(" \u2014 "),fU=a("a"),$7r=o("TFXLNetForSequenceClassification"),k7r=o(" (XLNet model)"),S7r=l(),F(Z9.$$.fragment),Rje=l(),ic=a("h2"),eM=a("a"),mve=a("span"),F(QL.$$.fragment),R7r=l(),gve=a("span"),P7r=o("TFAutoModelForMultipleChoice"),Pje=l(),ar=a("div"),F(HL.$$.fragment),B7r=l(),dc=a("p"),I7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mU=a("a"),N7r=o("from_pretrained()"),q7r=o(" class method or the "),gU=a("a"),j7r=o("from_config()"),D7r=o(` class
method.`),G7r=l(),UL=a("p"),O7r=o("This class cannot be instantiated directly using "),hve=a("code"),V7r=o("__init__()"),X7r=o(" (throws an error)."),z7r=l(),Pt=a("div"),F(JL.$$.fragment),W7r=l(),pve=a("p"),Q7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),H7r=l(),cc=a("p"),U7r=o(`Note:
Loading a model from its configuration file does `),_ve=a("strong"),J7r=o("not"),Y7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=a("a"),K7r=o("from_pretrained()"),Z7r=o(" to load the model weights."),e9r=l(),F(oM.$$.fragment),o9r=l(),Sr=a("div"),F(YL.$$.fragment),r9r=l(),uve=a("p"),t9r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),a9r=l(),sn=a("p"),n9r=o("The model class to instantiate is selected based on the "),bve=a("code"),s9r=o("model_type"),l9r=o(` property of the config object (either
passed as an argument or loaded from `),vve=a("code"),i9r=o("pretrained_model_name_or_path"),d9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=a("code"),c9r=o("pretrained_model_name_or_path"),f9r=o(":"),m9r=l(),pe=a("ul"),rM=a("li"),Tve=a("strong"),g9r=o("albert"),h9r=o(" \u2014 "),pU=a("a"),p9r=o("TFAlbertForMultipleChoice"),_9r=o(" (ALBERT model)"),u9r=l(),tM=a("li"),Mve=a("strong"),b9r=o("bert"),v9r=o(" \u2014 "),_U=a("a"),F9r=o("TFBertForMultipleChoice"),T9r=o(" (BERT model)"),M9r=l(),aM=a("li"),Eve=a("strong"),E9r=o("camembert"),C9r=o(" \u2014 "),uU=a("a"),w9r=o("TFCamembertForMultipleChoice"),A9r=o(" (CamemBERT model)"),y9r=l(),nM=a("li"),Cve=a("strong"),L9r=o("convbert"),x9r=o(" \u2014 "),bU=a("a"),$9r=o("TFConvBertForMultipleChoice"),k9r=o(" (ConvBERT model)"),S9r=l(),sM=a("li"),wve=a("strong"),R9r=o("distilbert"),P9r=o(" \u2014 "),vU=a("a"),B9r=o("TFDistilBertForMultipleChoice"),I9r=o(" (DistilBERT model)"),N9r=l(),lM=a("li"),Ave=a("strong"),q9r=o("electra"),j9r=o(" \u2014 "),FU=a("a"),D9r=o("TFElectraForMultipleChoice"),G9r=o(" (ELECTRA model)"),O9r=l(),iM=a("li"),yve=a("strong"),V9r=o("flaubert"),X9r=o(" \u2014 "),TU=a("a"),z9r=o("TFFlaubertForMultipleChoice"),W9r=o(" (FlauBERT model)"),Q9r=l(),dM=a("li"),Lve=a("strong"),H9r=o("funnel"),U9r=o(" \u2014 "),MU=a("a"),J9r=o("TFFunnelForMultipleChoice"),Y9r=o(" (Funnel Transformer model)"),K9r=l(),cM=a("li"),xve=a("strong"),Z9r=o("longformer"),eMr=o(" \u2014 "),EU=a("a"),oMr=o("TFLongformerForMultipleChoice"),rMr=o(" (Longformer model)"),tMr=l(),fM=a("li"),$ve=a("strong"),aMr=o("mobilebert"),nMr=o(" \u2014 "),CU=a("a"),sMr=o("TFMobileBertForMultipleChoice"),lMr=o(" (MobileBERT model)"),iMr=l(),mM=a("li"),kve=a("strong"),dMr=o("mpnet"),cMr=o(" \u2014 "),wU=a("a"),fMr=o("TFMPNetForMultipleChoice"),mMr=o(" (MPNet model)"),gMr=l(),gM=a("li"),Sve=a("strong"),hMr=o("rembert"),pMr=o(" \u2014 "),AU=a("a"),_Mr=o("TFRemBertForMultipleChoice"),uMr=o(" (RemBERT model)"),bMr=l(),hM=a("li"),Rve=a("strong"),vMr=o("roberta"),FMr=o(" \u2014 "),yU=a("a"),TMr=o("TFRobertaForMultipleChoice"),MMr=o(" (RoBERTa model)"),EMr=l(),pM=a("li"),Pve=a("strong"),CMr=o("roformer"),wMr=o(" \u2014 "),LU=a("a"),AMr=o("TFRoFormerForMultipleChoice"),yMr=o(" (RoFormer model)"),LMr=l(),_M=a("li"),Bve=a("strong"),xMr=o("xlm"),$Mr=o(" \u2014 "),xU=a("a"),kMr=o("TFXLMForMultipleChoice"),SMr=o(" (XLM model)"),RMr=l(),uM=a("li"),Ive=a("strong"),PMr=o("xlm-roberta"),BMr=o(" \u2014 "),$U=a("a"),IMr=o("TFXLMRobertaForMultipleChoice"),NMr=o(" (XLM-RoBERTa model)"),qMr=l(),bM=a("li"),Nve=a("strong"),jMr=o("xlnet"),DMr=o(" \u2014 "),kU=a("a"),GMr=o("TFXLNetForMultipleChoice"),OMr=o(" (XLNet model)"),VMr=l(),F(vM.$$.fragment),Bje=l(),fc=a("h2"),FM=a("a"),qve=a("span"),F(KL.$$.fragment),XMr=l(),jve=a("span"),zMr=o("TFAutoModelForNextSentencePrediction"),Ije=l(),nr=a("div"),F(ZL.$$.fragment),WMr=l(),mc=a("p"),QMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),SU=a("a"),HMr=o("from_pretrained()"),UMr=o(" class method or the "),RU=a("a"),JMr=o("from_config()"),YMr=o(` class
method.`),KMr=l(),e8=a("p"),ZMr=o("This class cannot be instantiated directly using "),Dve=a("code"),eEr=o("__init__()"),oEr=o(" (throws an error)."),rEr=l(),Bt=a("div"),F(o8.$$.fragment),tEr=l(),Gve=a("p"),aEr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),nEr=l(),gc=a("p"),sEr=o(`Note:
Loading a model from its configuration file does `),Ove=a("strong"),lEr=o("not"),iEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=a("a"),dEr=o("from_pretrained()"),cEr=o(" to load the model weights."),fEr=l(),F(TM.$$.fragment),mEr=l(),Rr=a("div"),F(r8.$$.fragment),gEr=l(),Vve=a("p"),hEr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pEr=l(),ln=a("p"),_Er=o("The model class to instantiate is selected based on the "),Xve=a("code"),uEr=o("model_type"),bEr=o(` property of the config object (either
passed as an argument or loaded from `),zve=a("code"),vEr=o("pretrained_model_name_or_path"),FEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=a("code"),TEr=o("pretrained_model_name_or_path"),MEr=o(":"),EEr=l(),t8=a("ul"),MM=a("li"),Qve=a("strong"),CEr=o("bert"),wEr=o(" \u2014 "),BU=a("a"),AEr=o("TFBertForNextSentencePrediction"),yEr=o(" (BERT model)"),LEr=l(),EM=a("li"),Hve=a("strong"),xEr=o("mobilebert"),$Er=o(" \u2014 "),IU=a("a"),kEr=o("TFMobileBertForNextSentencePrediction"),SEr=o(" (MobileBERT model)"),REr=l(),F(CM.$$.fragment),Nje=l(),hc=a("h2"),wM=a("a"),Uve=a("span"),F(a8.$$.fragment),PEr=l(),Jve=a("span"),BEr=o("TFAutoModelForTableQuestionAnswering"),qje=l(),sr=a("div"),F(n8.$$.fragment),IEr=l(),pc=a("p"),NEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),NU=a("a"),qEr=o("from_pretrained()"),jEr=o(" class method or the "),qU=a("a"),DEr=o("from_config()"),GEr=o(` class
method.`),OEr=l(),s8=a("p"),VEr=o("This class cannot be instantiated directly using "),Yve=a("code"),XEr=o("__init__()"),zEr=o(" (throws an error)."),WEr=l(),It=a("div"),F(l8.$$.fragment),QEr=l(),Kve=a("p"),HEr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),UEr=l(),_c=a("p"),JEr=o(`Note:
Loading a model from its configuration file does `),Zve=a("strong"),YEr=o("not"),KEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=a("a"),ZEr=o("from_pretrained()"),eCr=o(" to load the model weights."),oCr=l(),F(AM.$$.fragment),rCr=l(),Pr=a("div"),F(i8.$$.fragment),tCr=l(),eFe=a("p"),aCr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),nCr=l(),dn=a("p"),sCr=o("The model class to instantiate is selected based on the "),oFe=a("code"),lCr=o("model_type"),iCr=o(` property of the config object (either
passed as an argument or loaded from `),rFe=a("code"),dCr=o("pretrained_model_name_or_path"),cCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=a("code"),fCr=o("pretrained_model_name_or_path"),mCr=o(":"),gCr=l(),aFe=a("ul"),yM=a("li"),nFe=a("strong"),hCr=o("tapas"),pCr=o(" \u2014 "),DU=a("a"),_Cr=o("TFTapasForQuestionAnswering"),uCr=o(" (TAPAS model)"),bCr=l(),F(LM.$$.fragment),jje=l(),uc=a("h2"),xM=a("a"),sFe=a("span"),F(d8.$$.fragment),vCr=l(),lFe=a("span"),FCr=o("TFAutoModelForTokenClassification"),Dje=l(),lr=a("div"),F(c8.$$.fragment),TCr=l(),bc=a("p"),MCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GU=a("a"),ECr=o("from_pretrained()"),CCr=o(" class method or the "),OU=a("a"),wCr=o("from_config()"),ACr=o(` class
method.`),yCr=l(),f8=a("p"),LCr=o("This class cannot be instantiated directly using "),iFe=a("code"),xCr=o("__init__()"),$Cr=o(" (throws an error)."),kCr=l(),Nt=a("div"),F(m8.$$.fragment),SCr=l(),dFe=a("p"),RCr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),PCr=l(),vc=a("p"),BCr=o(`Note:
Loading a model from its configuration file does `),cFe=a("strong"),ICr=o("not"),NCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=a("a"),qCr=o("from_pretrained()"),jCr=o(" to load the model weights."),DCr=l(),F($M.$$.fragment),GCr=l(),Br=a("div"),F(g8.$$.fragment),OCr=l(),fFe=a("p"),VCr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),XCr=l(),cn=a("p"),zCr=o("The model class to instantiate is selected based on the "),mFe=a("code"),WCr=o("model_type"),QCr=o(` property of the config object (either
passed as an argument or loaded from `),gFe=a("code"),HCr=o("pretrained_model_name_or_path"),UCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=a("code"),JCr=o("pretrained_model_name_or_path"),YCr=o(":"),KCr=l(),de=a("ul"),kM=a("li"),pFe=a("strong"),ZCr=o("albert"),e3r=o(" \u2014 "),XU=a("a"),o3r=o("TFAlbertForTokenClassification"),r3r=o(" (ALBERT model)"),t3r=l(),SM=a("li"),_Fe=a("strong"),a3r=o("bert"),n3r=o(" \u2014 "),zU=a("a"),s3r=o("TFBertForTokenClassification"),l3r=o(" (BERT model)"),i3r=l(),RM=a("li"),uFe=a("strong"),d3r=o("camembert"),c3r=o(" \u2014 "),WU=a("a"),f3r=o("TFCamembertForTokenClassification"),m3r=o(" (CamemBERT model)"),g3r=l(),PM=a("li"),bFe=a("strong"),h3r=o("convbert"),p3r=o(" \u2014 "),QU=a("a"),_3r=o("TFConvBertForTokenClassification"),u3r=o(" (ConvBERT model)"),b3r=l(),BM=a("li"),vFe=a("strong"),v3r=o("deberta"),F3r=o(" \u2014 "),HU=a("a"),T3r=o("TFDebertaForTokenClassification"),M3r=o(" (DeBERTa model)"),E3r=l(),IM=a("li"),FFe=a("strong"),C3r=o("deberta-v2"),w3r=o(" \u2014 "),UU=a("a"),A3r=o("TFDebertaV2ForTokenClassification"),y3r=o(" (DeBERTa-v2 model)"),L3r=l(),NM=a("li"),TFe=a("strong"),x3r=o("distilbert"),$3r=o(" \u2014 "),JU=a("a"),k3r=o("TFDistilBertForTokenClassification"),S3r=o(" (DistilBERT model)"),R3r=l(),qM=a("li"),MFe=a("strong"),P3r=o("electra"),B3r=o(" \u2014 "),YU=a("a"),I3r=o("TFElectraForTokenClassification"),N3r=o(" (ELECTRA model)"),q3r=l(),jM=a("li"),EFe=a("strong"),j3r=o("flaubert"),D3r=o(" \u2014 "),KU=a("a"),G3r=o("TFFlaubertForTokenClassification"),O3r=o(" (FlauBERT model)"),V3r=l(),DM=a("li"),CFe=a("strong"),X3r=o("funnel"),z3r=o(" \u2014 "),ZU=a("a"),W3r=o("TFFunnelForTokenClassification"),Q3r=o(" (Funnel Transformer model)"),H3r=l(),GM=a("li"),wFe=a("strong"),U3r=o("layoutlm"),J3r=o(" \u2014 "),eJ=a("a"),Y3r=o("TFLayoutLMForTokenClassification"),K3r=o(" (LayoutLM model)"),Z3r=l(),OM=a("li"),AFe=a("strong"),ewr=o("longformer"),owr=o(" \u2014 "),oJ=a("a"),rwr=o("TFLongformerForTokenClassification"),twr=o(" (Longformer model)"),awr=l(),VM=a("li"),yFe=a("strong"),nwr=o("mobilebert"),swr=o(" \u2014 "),rJ=a("a"),lwr=o("TFMobileBertForTokenClassification"),iwr=o(" (MobileBERT model)"),dwr=l(),XM=a("li"),LFe=a("strong"),cwr=o("mpnet"),fwr=o(" \u2014 "),tJ=a("a"),mwr=o("TFMPNetForTokenClassification"),gwr=o(" (MPNet model)"),hwr=l(),zM=a("li"),xFe=a("strong"),pwr=o("rembert"),_wr=o(" \u2014 "),aJ=a("a"),uwr=o("TFRemBertForTokenClassification"),bwr=o(" (RemBERT model)"),vwr=l(),WM=a("li"),$Fe=a("strong"),Fwr=o("roberta"),Twr=o(" \u2014 "),nJ=a("a"),Mwr=o("TFRobertaForTokenClassification"),Ewr=o(" (RoBERTa model)"),Cwr=l(),QM=a("li"),kFe=a("strong"),wwr=o("roformer"),Awr=o(" \u2014 "),sJ=a("a"),ywr=o("TFRoFormerForTokenClassification"),Lwr=o(" (RoFormer model)"),xwr=l(),HM=a("li"),SFe=a("strong"),$wr=o("xlm"),kwr=o(" \u2014 "),lJ=a("a"),Swr=o("TFXLMForTokenClassification"),Rwr=o(" (XLM model)"),Pwr=l(),UM=a("li"),RFe=a("strong"),Bwr=o("xlm-roberta"),Iwr=o(" \u2014 "),iJ=a("a"),Nwr=o("TFXLMRobertaForTokenClassification"),qwr=o(" (XLM-RoBERTa model)"),jwr=l(),JM=a("li"),PFe=a("strong"),Dwr=o("xlnet"),Gwr=o(" \u2014 "),dJ=a("a"),Owr=o("TFXLNetForTokenClassification"),Vwr=o(" (XLNet model)"),Xwr=l(),F(YM.$$.fragment),Gje=l(),Fc=a("h2"),KM=a("a"),BFe=a("span"),F(h8.$$.fragment),zwr=l(),IFe=a("span"),Wwr=o("TFAutoModelForQuestionAnswering"),Oje=l(),ir=a("div"),F(p8.$$.fragment),Qwr=l(),Tc=a("p"),Hwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cJ=a("a"),Uwr=o("from_pretrained()"),Jwr=o(" class method or the "),fJ=a("a"),Ywr=o("from_config()"),Kwr=o(` class
method.`),Zwr=l(),_8=a("p"),e0r=o("This class cannot be instantiated directly using "),NFe=a("code"),o0r=o("__init__()"),r0r=o(" (throws an error)."),t0r=l(),qt=a("div"),F(u8.$$.fragment),a0r=l(),qFe=a("p"),n0r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),s0r=l(),Mc=a("p"),l0r=o(`Note:
Loading a model from its configuration file does `),jFe=a("strong"),i0r=o("not"),d0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=a("a"),c0r=o("from_pretrained()"),f0r=o(" to load the model weights."),m0r=l(),F(ZM.$$.fragment),g0r=l(),Ir=a("div"),F(b8.$$.fragment),h0r=l(),DFe=a("p"),p0r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_0r=l(),fn=a("p"),u0r=o("The model class to instantiate is selected based on the "),GFe=a("code"),b0r=o("model_type"),v0r=o(` property of the config object (either
passed as an argument or loaded from `),OFe=a("code"),F0r=o("pretrained_model_name_or_path"),T0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=a("code"),M0r=o("pretrained_model_name_or_path"),E0r=o(":"),C0r=l(),ce=a("ul"),eE=a("li"),XFe=a("strong"),w0r=o("albert"),A0r=o(" \u2014 "),gJ=a("a"),y0r=o("TFAlbertForQuestionAnswering"),L0r=o(" (ALBERT model)"),x0r=l(),oE=a("li"),zFe=a("strong"),$0r=o("bert"),k0r=o(" \u2014 "),hJ=a("a"),S0r=o("TFBertForQuestionAnswering"),R0r=o(" (BERT model)"),P0r=l(),rE=a("li"),WFe=a("strong"),B0r=o("camembert"),I0r=o(" \u2014 "),pJ=a("a"),N0r=o("TFCamembertForQuestionAnswering"),q0r=o(" (CamemBERT model)"),j0r=l(),tE=a("li"),QFe=a("strong"),D0r=o("convbert"),G0r=o(" \u2014 "),_J=a("a"),O0r=o("TFConvBertForQuestionAnswering"),V0r=o(" (ConvBERT model)"),X0r=l(),aE=a("li"),HFe=a("strong"),z0r=o("deberta"),W0r=o(" \u2014 "),uJ=a("a"),Q0r=o("TFDebertaForQuestionAnswering"),H0r=o(" (DeBERTa model)"),U0r=l(),nE=a("li"),UFe=a("strong"),J0r=o("deberta-v2"),Y0r=o(" \u2014 "),bJ=a("a"),K0r=o("TFDebertaV2ForQuestionAnswering"),Z0r=o(" (DeBERTa-v2 model)"),e6r=l(),sE=a("li"),JFe=a("strong"),o6r=o("distilbert"),r6r=o(" \u2014 "),vJ=a("a"),t6r=o("TFDistilBertForQuestionAnswering"),a6r=o(" (DistilBERT model)"),n6r=l(),lE=a("li"),YFe=a("strong"),s6r=o("electra"),l6r=o(" \u2014 "),FJ=a("a"),i6r=o("TFElectraForQuestionAnswering"),d6r=o(" (ELECTRA model)"),c6r=l(),iE=a("li"),KFe=a("strong"),f6r=o("flaubert"),m6r=o(" \u2014 "),TJ=a("a"),g6r=o("TFFlaubertForQuestionAnsweringSimple"),h6r=o(" (FlauBERT model)"),p6r=l(),dE=a("li"),ZFe=a("strong"),_6r=o("funnel"),u6r=o(" \u2014 "),MJ=a("a"),b6r=o("TFFunnelForQuestionAnswering"),v6r=o(" (Funnel Transformer model)"),F6r=l(),cE=a("li"),eTe=a("strong"),T6r=o("gptj"),M6r=o(" \u2014 "),EJ=a("a"),E6r=o("TFGPTJForQuestionAnswering"),C6r=o(" (GPT-J model)"),w6r=l(),fE=a("li"),oTe=a("strong"),A6r=o("longformer"),y6r=o(" \u2014 "),CJ=a("a"),L6r=o("TFLongformerForQuestionAnswering"),x6r=o(" (Longformer model)"),$6r=l(),mE=a("li"),rTe=a("strong"),k6r=o("mobilebert"),S6r=o(" \u2014 "),wJ=a("a"),R6r=o("TFMobileBertForQuestionAnswering"),P6r=o(" (MobileBERT model)"),B6r=l(),gE=a("li"),tTe=a("strong"),I6r=o("mpnet"),N6r=o(" \u2014 "),AJ=a("a"),q6r=o("TFMPNetForQuestionAnswering"),j6r=o(" (MPNet model)"),D6r=l(),hE=a("li"),aTe=a("strong"),G6r=o("rembert"),O6r=o(" \u2014 "),yJ=a("a"),V6r=o("TFRemBertForQuestionAnswering"),X6r=o(" (RemBERT model)"),z6r=l(),pE=a("li"),nTe=a("strong"),W6r=o("roberta"),Q6r=o(" \u2014 "),LJ=a("a"),H6r=o("TFRobertaForQuestionAnswering"),U6r=o(" (RoBERTa model)"),J6r=l(),_E=a("li"),sTe=a("strong"),Y6r=o("roformer"),K6r=o(" \u2014 "),xJ=a("a"),Z6r=o("TFRoFormerForQuestionAnswering"),eAr=o(" (RoFormer model)"),oAr=l(),uE=a("li"),lTe=a("strong"),rAr=o("xlm"),tAr=o(" \u2014 "),$J=a("a"),aAr=o("TFXLMForQuestionAnsweringSimple"),nAr=o(" (XLM model)"),sAr=l(),bE=a("li"),iTe=a("strong"),lAr=o("xlm-roberta"),iAr=o(" \u2014 "),kJ=a("a"),dAr=o("TFXLMRobertaForQuestionAnswering"),cAr=o(" (XLM-RoBERTa model)"),fAr=l(),vE=a("li"),dTe=a("strong"),mAr=o("xlnet"),gAr=o(" \u2014 "),SJ=a("a"),hAr=o("TFXLNetForQuestionAnsweringSimple"),pAr=o(" (XLNet model)"),_Ar=l(),F(FE.$$.fragment),Vje=l(),Ec=a("h2"),TE=a("a"),cTe=a("span"),F(v8.$$.fragment),uAr=l(),fTe=a("span"),bAr=o("TFAutoModelForVision2Seq"),Xje=l(),dr=a("div"),F(F8.$$.fragment),vAr=l(),Cc=a("p"),FAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),RJ=a("a"),TAr=o("from_pretrained()"),MAr=o(" class method or the "),PJ=a("a"),EAr=o("from_config()"),CAr=o(` class
method.`),wAr=l(),T8=a("p"),AAr=o("This class cannot be instantiated directly using "),mTe=a("code"),yAr=o("__init__()"),LAr=o(" (throws an error)."),xAr=l(),jt=a("div"),F(M8.$$.fragment),$Ar=l(),gTe=a("p"),kAr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),SAr=l(),wc=a("p"),RAr=o(`Note:
Loading a model from its configuration file does `),hTe=a("strong"),PAr=o("not"),BAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),IAr=o("from_pretrained()"),NAr=o(" to load the model weights."),qAr=l(),F(ME.$$.fragment),jAr=l(),Nr=a("div"),F(E8.$$.fragment),DAr=l(),pTe=a("p"),GAr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),OAr=l(),mn=a("p"),VAr=o("The model class to instantiate is selected based on the "),_Te=a("code"),XAr=o("model_type"),zAr=o(` property of the config object (either
passed as an argument or loaded from `),uTe=a("code"),WAr=o("pretrained_model_name_or_path"),QAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=a("code"),HAr=o("pretrained_model_name_or_path"),UAr=o(":"),JAr=l(),vTe=a("ul"),EE=a("li"),FTe=a("strong"),YAr=o("vision-encoder-decoder"),KAr=o(" \u2014 "),IJ=a("a"),ZAr=o("TFVisionEncoderDecoderModel"),eyr=o(" (Vision Encoder decoder model)"),oyr=l(),F(CE.$$.fragment),zje=l(),Ac=a("h2"),wE=a("a"),TTe=a("span"),F(C8.$$.fragment),ryr=l(),MTe=a("span"),tyr=o("TFAutoModelForSpeechSeq2Seq"),Wje=l(),cr=a("div"),F(w8.$$.fragment),ayr=l(),yc=a("p"),nyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NJ=a("a"),syr=o("from_pretrained()"),lyr=o(" class method or the "),qJ=a("a"),iyr=o("from_config()"),dyr=o(` class
method.`),cyr=l(),A8=a("p"),fyr=o("This class cannot be instantiated directly using "),ETe=a("code"),myr=o("__init__()"),gyr=o(" (throws an error)."),hyr=l(),Dt=a("div"),F(y8.$$.fragment),pyr=l(),CTe=a("p"),_yr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),uyr=l(),Lc=a("p"),byr=o(`Note:
Loading a model from its configuration file does `),wTe=a("strong"),vyr=o("not"),Fyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),Tyr=o("from_pretrained()"),Myr=o(" to load the model weights."),Eyr=l(),F(AE.$$.fragment),Cyr=l(),qr=a("div"),F(L8.$$.fragment),wyr=l(),ATe=a("p"),Ayr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),yyr=l(),gn=a("p"),Lyr=o("The model class to instantiate is selected based on the "),yTe=a("code"),xyr=o("model_type"),$yr=o(` property of the config object (either
passed as an argument or loaded from `),LTe=a("code"),kyr=o("pretrained_model_name_or_path"),Syr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=a("code"),Ryr=o("pretrained_model_name_or_path"),Pyr=o(":"),Byr=l(),$Te=a("ul"),yE=a("li"),kTe=a("strong"),Iyr=o("speech_to_text"),Nyr=o(" \u2014 "),DJ=a("a"),qyr=o("TFSpeech2TextForConditionalGeneration"),jyr=o(" (Speech2Text model)"),Dyr=l(),F(LE.$$.fragment),Qje=l(),xc=a("h2"),xE=a("a"),STe=a("span"),F(x8.$$.fragment),Gyr=l(),RTe=a("span"),Oyr=o("FlaxAutoModel"),Hje=l(),fr=a("div"),F($8.$$.fragment),Vyr=l(),$c=a("p"),Xyr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GJ=a("a"),zyr=o("from_pretrained()"),Wyr=o(" class method or the "),OJ=a("a"),Qyr=o("from_config()"),Hyr=o(` class
method.`),Uyr=l(),k8=a("p"),Jyr=o("This class cannot be instantiated directly using "),PTe=a("code"),Yyr=o("__init__()"),Kyr=o(" (throws an error)."),Zyr=l(),Gt=a("div"),F(S8.$$.fragment),eLr=l(),BTe=a("p"),oLr=o("Instantiates one of the base model classes of the library from a configuration."),rLr=l(),kc=a("p"),tLr=o(`Note:
Loading a model from its configuration file does `),ITe=a("strong"),aLr=o("not"),nLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),sLr=o("from_pretrained()"),lLr=o(" to load the model weights."),iLr=l(),F($E.$$.fragment),dLr=l(),jr=a("div"),F(R8.$$.fragment),cLr=l(),NTe=a("p"),fLr=o("Instantiate one of the base model classes of the library from a pretrained model."),mLr=l(),hn=a("p"),gLr=o("The model class to instantiate is selected based on the "),qTe=a("code"),hLr=o("model_type"),pLr=o(` property of the config object (either
passed as an argument or loaded from `),jTe=a("code"),_Lr=o("pretrained_model_name_or_path"),uLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=a("code"),bLr=o("pretrained_model_name_or_path"),vLr=o(":"),FLr=l(),re=a("ul"),kE=a("li"),GTe=a("strong"),TLr=o("albert"),MLr=o(" \u2014 "),XJ=a("a"),ELr=o("FlaxAlbertModel"),CLr=o(" (ALBERT model)"),wLr=l(),SE=a("li"),OTe=a("strong"),ALr=o("bart"),yLr=o(" \u2014 "),zJ=a("a"),LLr=o("FlaxBartModel"),xLr=o(" (BART model)"),$Lr=l(),RE=a("li"),VTe=a("strong"),kLr=o("beit"),SLr=o(" \u2014 "),WJ=a("a"),RLr=o("FlaxBeitModel"),PLr=o(" (BEiT model)"),BLr=l(),PE=a("li"),XTe=a("strong"),ILr=o("bert"),NLr=o(" \u2014 "),QJ=a("a"),qLr=o("FlaxBertModel"),jLr=o(" (BERT model)"),DLr=l(),BE=a("li"),zTe=a("strong"),GLr=o("big_bird"),OLr=o(" \u2014 "),HJ=a("a"),VLr=o("FlaxBigBirdModel"),XLr=o(" (BigBird model)"),zLr=l(),IE=a("li"),WTe=a("strong"),WLr=o("blenderbot"),QLr=o(" \u2014 "),UJ=a("a"),HLr=o("FlaxBlenderbotModel"),ULr=o(" (Blenderbot model)"),JLr=l(),NE=a("li"),QTe=a("strong"),YLr=o("blenderbot-small"),KLr=o(" \u2014 "),JJ=a("a"),ZLr=o("FlaxBlenderbotSmallModel"),e8r=o(" (BlenderbotSmall model)"),o8r=l(),qE=a("li"),HTe=a("strong"),r8r=o("clip"),t8r=o(" \u2014 "),YJ=a("a"),a8r=o("FlaxCLIPModel"),n8r=o(" (CLIP model)"),s8r=l(),jE=a("li"),UTe=a("strong"),l8r=o("distilbert"),i8r=o(" \u2014 "),KJ=a("a"),d8r=o("FlaxDistilBertModel"),c8r=o(" (DistilBERT model)"),f8r=l(),DE=a("li"),JTe=a("strong"),m8r=o("electra"),g8r=o(" \u2014 "),ZJ=a("a"),h8r=o("FlaxElectraModel"),p8r=o(" (ELECTRA model)"),_8r=l(),GE=a("li"),YTe=a("strong"),u8r=o("gpt2"),b8r=o(" \u2014 "),eY=a("a"),v8r=o("FlaxGPT2Model"),F8r=o(" (OpenAI GPT-2 model)"),T8r=l(),OE=a("li"),KTe=a("strong"),M8r=o("gpt_neo"),E8r=o(" \u2014 "),oY=a("a"),C8r=o("FlaxGPTNeoModel"),w8r=o(" (GPT Neo model)"),A8r=l(),VE=a("li"),ZTe=a("strong"),y8r=o("gptj"),L8r=o(" \u2014 "),rY=a("a"),x8r=o("FlaxGPTJModel"),$8r=o(" (GPT-J model)"),k8r=l(),XE=a("li"),e7e=a("strong"),S8r=o("marian"),R8r=o(" \u2014 "),tY=a("a"),P8r=o("FlaxMarianModel"),B8r=o(" (Marian model)"),I8r=l(),zE=a("li"),o7e=a("strong"),N8r=o("mbart"),q8r=o(" \u2014 "),aY=a("a"),j8r=o("FlaxMBartModel"),D8r=o(" (mBART model)"),G8r=l(),WE=a("li"),r7e=a("strong"),O8r=o("mt5"),V8r=o(" \u2014 "),nY=a("a"),X8r=o("FlaxMT5Model"),z8r=o(" (mT5 model)"),W8r=l(),QE=a("li"),t7e=a("strong"),Q8r=o("opt"),H8r=o(" \u2014 "),sY=a("a"),U8r=o("FlaxOPTModel"),J8r=o(" (OPT model)"),Y8r=l(),HE=a("li"),a7e=a("strong"),K8r=o("pegasus"),Z8r=o(" \u2014 "),lY=a("a"),exr=o("FlaxPegasusModel"),oxr=o(" (Pegasus model)"),rxr=l(),UE=a("li"),n7e=a("strong"),txr=o("roberta"),axr=o(" \u2014 "),iY=a("a"),nxr=o("FlaxRobertaModel"),sxr=o(" (RoBERTa model)"),lxr=l(),JE=a("li"),s7e=a("strong"),ixr=o("roformer"),dxr=o(" \u2014 "),dY=a("a"),cxr=o("FlaxRoFormerModel"),fxr=o(" (RoFormer model)"),mxr=l(),YE=a("li"),l7e=a("strong"),gxr=o("t5"),hxr=o(" \u2014 "),cY=a("a"),pxr=o("FlaxT5Model"),_xr=o(" (T5 model)"),uxr=l(),KE=a("li"),i7e=a("strong"),bxr=o("vision-text-dual-encoder"),vxr=o(" \u2014 "),fY=a("a"),Fxr=o("FlaxVisionTextDualEncoderModel"),Txr=o(" (VisionTextDualEncoder model)"),Mxr=l(),ZE=a("li"),d7e=a("strong"),Exr=o("vit"),Cxr=o(" \u2014 "),mY=a("a"),wxr=o("FlaxViTModel"),Axr=o(" (ViT model)"),yxr=l(),eC=a("li"),c7e=a("strong"),Lxr=o("wav2vec2"),xxr=o(" \u2014 "),gY=a("a"),$xr=o("FlaxWav2Vec2Model"),kxr=o(" (Wav2Vec2 model)"),Sxr=l(),oC=a("li"),f7e=a("strong"),Rxr=o("xglm"),Pxr=o(" \u2014 "),hY=a("a"),Bxr=o("FlaxXGLMModel"),Ixr=o(" (XGLM model)"),Nxr=l(),rC=a("li"),m7e=a("strong"),qxr=o("xlm-roberta"),jxr=o(" \u2014 "),pY=a("a"),Dxr=o("FlaxXLMRobertaModel"),Gxr=o(" (XLM-RoBERTa model)"),Oxr=l(),F(tC.$$.fragment),Uje=l(),Sc=a("h2"),aC=a("a"),g7e=a("span"),F(P8.$$.fragment),Vxr=l(),h7e=a("span"),Xxr=o("FlaxAutoModelForCausalLM"),Jje=l(),mr=a("div"),F(B8.$$.fragment),zxr=l(),Rc=a("p"),Wxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_Y=a("a"),Qxr=o("from_pretrained()"),Hxr=o(" class method or the "),uY=a("a"),Uxr=o("from_config()"),Jxr=o(` class
method.`),Yxr=l(),I8=a("p"),Kxr=o("This class cannot be instantiated directly using "),p7e=a("code"),Zxr=o("__init__()"),e$r=o(" (throws an error)."),o$r=l(),Ot=a("div"),F(N8.$$.fragment),r$r=l(),_7e=a("p"),t$r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),a$r=l(),Pc=a("p"),n$r=o(`Note:
Loading a model from its configuration file does `),u7e=a("strong"),s$r=o("not"),l$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=a("a"),i$r=o("from_pretrained()"),d$r=o(" to load the model weights."),c$r=l(),F(nC.$$.fragment),f$r=l(),Dr=a("div"),F(q8.$$.fragment),m$r=l(),b7e=a("p"),g$r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),h$r=l(),pn=a("p"),p$r=o("The model class to instantiate is selected based on the "),v7e=a("code"),_$r=o("model_type"),u$r=o(` property of the config object (either
passed as an argument or loaded from `),F7e=a("code"),b$r=o("pretrained_model_name_or_path"),v$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T7e=a("code"),F$r=o("pretrained_model_name_or_path"),T$r=o(":"),M$r=l(),Le=a("ul"),sC=a("li"),M7e=a("strong"),E$r=o("bart"),C$r=o(" \u2014 "),vY=a("a"),w$r=o("FlaxBartForCausalLM"),A$r=o(" (BART model)"),y$r=l(),lC=a("li"),E7e=a("strong"),L$r=o("bert"),x$r=o(" \u2014 "),FY=a("a"),$$r=o("FlaxBertForCausalLM"),k$r=o(" (BERT model)"),S$r=l(),iC=a("li"),C7e=a("strong"),R$r=o("big_bird"),P$r=o(" \u2014 "),TY=a("a"),B$r=o("FlaxBigBirdForCausalLM"),I$r=o(" (BigBird model)"),N$r=l(),dC=a("li"),w7e=a("strong"),q$r=o("electra"),j$r=o(" \u2014 "),MY=a("a"),D$r=o("FlaxElectraForCausalLM"),G$r=o(" (ELECTRA model)"),O$r=l(),cC=a("li"),A7e=a("strong"),V$r=o("gpt2"),X$r=o(" \u2014 "),EY=a("a"),z$r=o("FlaxGPT2LMHeadModel"),W$r=o(" (OpenAI GPT-2 model)"),Q$r=l(),fC=a("li"),y7e=a("strong"),H$r=o("gpt_neo"),U$r=o(" \u2014 "),CY=a("a"),J$r=o("FlaxGPTNeoForCausalLM"),Y$r=o(" (GPT Neo model)"),K$r=l(),mC=a("li"),L7e=a("strong"),Z$r=o("gptj"),ekr=o(" \u2014 "),wY=a("a"),okr=o("FlaxGPTJForCausalLM"),rkr=o(" (GPT-J model)"),tkr=l(),gC=a("li"),x7e=a("strong"),akr=o("opt"),nkr=o(" \u2014 "),AY=a("a"),skr=o("FlaxOPTForCausalLM"),lkr=o(" (OPT model)"),ikr=l(),hC=a("li"),$7e=a("strong"),dkr=o("roberta"),ckr=o(" \u2014 "),yY=a("a"),fkr=o("FlaxRobertaForCausalLM"),mkr=o(" (RoBERTa model)"),gkr=l(),pC=a("li"),k7e=a("strong"),hkr=o("xglm"),pkr=o(" \u2014 "),LY=a("a"),_kr=o("FlaxXGLMForCausalLM"),ukr=o(" (XGLM model)"),bkr=l(),F(_C.$$.fragment),Yje=l(),Bc=a("h2"),uC=a("a"),S7e=a("span"),F(j8.$$.fragment),vkr=l(),R7e=a("span"),Fkr=o("FlaxAutoModelForPreTraining"),Kje=l(),gr=a("div"),F(D8.$$.fragment),Tkr=l(),Ic=a("p"),Mkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xY=a("a"),Ekr=o("from_pretrained()"),Ckr=o(" class method or the "),$Y=a("a"),wkr=o("from_config()"),Akr=o(` class
method.`),ykr=l(),G8=a("p"),Lkr=o("This class cannot be instantiated directly using "),P7e=a("code"),xkr=o("__init__()"),$kr=o(" (throws an error)."),kkr=l(),Vt=a("div"),F(O8.$$.fragment),Skr=l(),B7e=a("p"),Rkr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Pkr=l(),Nc=a("p"),Bkr=o(`Note:
Loading a model from its configuration file does `),I7e=a("strong"),Ikr=o("not"),Nkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=a("a"),qkr=o("from_pretrained()"),jkr=o(" to load the model weights."),Dkr=l(),F(bC.$$.fragment),Gkr=l(),Gr=a("div"),F(V8.$$.fragment),Okr=l(),N7e=a("p"),Vkr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xkr=l(),_n=a("p"),zkr=o("The model class to instantiate is selected based on the "),q7e=a("code"),Wkr=o("model_type"),Qkr=o(` property of the config object (either
passed as an argument or loaded from `),j7e=a("code"),Hkr=o("pretrained_model_name_or_path"),Ukr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D7e=a("code"),Jkr=o("pretrained_model_name_or_path"),Ykr=o(":"),Kkr=l(),Ee=a("ul"),vC=a("li"),G7e=a("strong"),Zkr=o("albert"),eSr=o(" \u2014 "),SY=a("a"),oSr=o("FlaxAlbertForPreTraining"),rSr=o(" (ALBERT model)"),tSr=l(),FC=a("li"),O7e=a("strong"),aSr=o("bart"),nSr=o(" \u2014 "),RY=a("a"),sSr=o("FlaxBartForConditionalGeneration"),lSr=o(" (BART model)"),iSr=l(),TC=a("li"),V7e=a("strong"),dSr=o("bert"),cSr=o(" \u2014 "),PY=a("a"),fSr=o("FlaxBertForPreTraining"),mSr=o(" (BERT model)"),gSr=l(),MC=a("li"),X7e=a("strong"),hSr=o("big_bird"),pSr=o(" \u2014 "),BY=a("a"),_Sr=o("FlaxBigBirdForPreTraining"),uSr=o(" (BigBird model)"),bSr=l(),EC=a("li"),z7e=a("strong"),vSr=o("electra"),FSr=o(" \u2014 "),IY=a("a"),TSr=o("FlaxElectraForPreTraining"),MSr=o(" (ELECTRA model)"),ESr=l(),CC=a("li"),W7e=a("strong"),CSr=o("mbart"),wSr=o(" \u2014 "),NY=a("a"),ASr=o("FlaxMBartForConditionalGeneration"),ySr=o(" (mBART model)"),LSr=l(),wC=a("li"),Q7e=a("strong"),xSr=o("mt5"),$Sr=o(" \u2014 "),qY=a("a"),kSr=o("FlaxMT5ForConditionalGeneration"),SSr=o(" (mT5 model)"),RSr=l(),AC=a("li"),H7e=a("strong"),PSr=o("roberta"),BSr=o(" \u2014 "),jY=a("a"),ISr=o("FlaxRobertaForMaskedLM"),NSr=o(" (RoBERTa model)"),qSr=l(),yC=a("li"),U7e=a("strong"),jSr=o("roformer"),DSr=o(" \u2014 "),DY=a("a"),GSr=o("FlaxRoFormerForMaskedLM"),OSr=o(" (RoFormer model)"),VSr=l(),LC=a("li"),J7e=a("strong"),XSr=o("t5"),zSr=o(" \u2014 "),GY=a("a"),WSr=o("FlaxT5ForConditionalGeneration"),QSr=o(" (T5 model)"),HSr=l(),xC=a("li"),Y7e=a("strong"),USr=o("wav2vec2"),JSr=o(" \u2014 "),OY=a("a"),YSr=o("FlaxWav2Vec2ForPreTraining"),KSr=o(" (Wav2Vec2 model)"),ZSr=l(),$C=a("li"),K7e=a("strong"),eRr=o("xlm-roberta"),oRr=o(" \u2014 "),VY=a("a"),rRr=o("FlaxXLMRobertaForMaskedLM"),tRr=o(" (XLM-RoBERTa model)"),aRr=l(),F(kC.$$.fragment),Zje=l(),qc=a("h2"),SC=a("a"),Z7e=a("span"),F(X8.$$.fragment),nRr=l(),e9e=a("span"),sRr=o("FlaxAutoModelForMaskedLM"),eDe=l(),hr=a("div"),F(z8.$$.fragment),lRr=l(),jc=a("p"),iRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XY=a("a"),dRr=o("from_pretrained()"),cRr=o(" class method or the "),zY=a("a"),fRr=o("from_config()"),mRr=o(` class
method.`),gRr=l(),W8=a("p"),hRr=o("This class cannot be instantiated directly using "),o9e=a("code"),pRr=o("__init__()"),_Rr=o(" (throws an error)."),uRr=l(),Xt=a("div"),F(Q8.$$.fragment),bRr=l(),r9e=a("p"),vRr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),FRr=l(),Dc=a("p"),TRr=o(`Note:
Loading a model from its configuration file does `),t9e=a("strong"),MRr=o("not"),ERr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=a("a"),CRr=o("from_pretrained()"),wRr=o(" to load the model weights."),ARr=l(),F(RC.$$.fragment),yRr=l(),Or=a("div"),F(H8.$$.fragment),LRr=l(),a9e=a("p"),xRr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$Rr=l(),un=a("p"),kRr=o("The model class to instantiate is selected based on the "),n9e=a("code"),SRr=o("model_type"),RRr=o(` property of the config object (either
passed as an argument or loaded from `),s9e=a("code"),PRr=o("pretrained_model_name_or_path"),BRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l9e=a("code"),IRr=o("pretrained_model_name_or_path"),NRr=o(":"),qRr=l(),xe=a("ul"),PC=a("li"),i9e=a("strong"),jRr=o("albert"),DRr=o(" \u2014 "),QY=a("a"),GRr=o("FlaxAlbertForMaskedLM"),ORr=o(" (ALBERT model)"),VRr=l(),BC=a("li"),d9e=a("strong"),XRr=o("bart"),zRr=o(" \u2014 "),HY=a("a"),WRr=o("FlaxBartForConditionalGeneration"),QRr=o(" (BART model)"),HRr=l(),IC=a("li"),c9e=a("strong"),URr=o("bert"),JRr=o(" \u2014 "),UY=a("a"),YRr=o("FlaxBertForMaskedLM"),KRr=o(" (BERT model)"),ZRr=l(),NC=a("li"),f9e=a("strong"),ePr=o("big_bird"),oPr=o(" \u2014 "),JY=a("a"),rPr=o("FlaxBigBirdForMaskedLM"),tPr=o(" (BigBird model)"),aPr=l(),qC=a("li"),m9e=a("strong"),nPr=o("distilbert"),sPr=o(" \u2014 "),YY=a("a"),lPr=o("FlaxDistilBertForMaskedLM"),iPr=o(" (DistilBERT model)"),dPr=l(),jC=a("li"),g9e=a("strong"),cPr=o("electra"),fPr=o(" \u2014 "),KY=a("a"),mPr=o("FlaxElectraForMaskedLM"),gPr=o(" (ELECTRA model)"),hPr=l(),DC=a("li"),h9e=a("strong"),pPr=o("mbart"),_Pr=o(" \u2014 "),ZY=a("a"),uPr=o("FlaxMBartForConditionalGeneration"),bPr=o(" (mBART model)"),vPr=l(),GC=a("li"),p9e=a("strong"),FPr=o("roberta"),TPr=o(" \u2014 "),eK=a("a"),MPr=o("FlaxRobertaForMaskedLM"),EPr=o(" (RoBERTa model)"),CPr=l(),OC=a("li"),_9e=a("strong"),wPr=o("roformer"),APr=o(" \u2014 "),oK=a("a"),yPr=o("FlaxRoFormerForMaskedLM"),LPr=o(" (RoFormer model)"),xPr=l(),VC=a("li"),u9e=a("strong"),$Pr=o("xlm-roberta"),kPr=o(" \u2014 "),rK=a("a"),SPr=o("FlaxXLMRobertaForMaskedLM"),RPr=o(" (XLM-RoBERTa model)"),PPr=l(),F(XC.$$.fragment),oDe=l(),Gc=a("h2"),zC=a("a"),b9e=a("span"),F(U8.$$.fragment),BPr=l(),v9e=a("span"),IPr=o("FlaxAutoModelForSeq2SeqLM"),rDe=l(),pr=a("div"),F(J8.$$.fragment),NPr=l(),Oc=a("p"),qPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tK=a("a"),jPr=o("from_pretrained()"),DPr=o(" class method or the "),aK=a("a"),GPr=o("from_config()"),OPr=o(` class
method.`),VPr=l(),Y8=a("p"),XPr=o("This class cannot be instantiated directly using "),F9e=a("code"),zPr=o("__init__()"),WPr=o(" (throws an error)."),QPr=l(),zt=a("div"),F(K8.$$.fragment),HPr=l(),T9e=a("p"),UPr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),JPr=l(),Vc=a("p"),YPr=o(`Note:
Loading a model from its configuration file does `),M9e=a("strong"),KPr=o("not"),ZPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nK=a("a"),eBr=o("from_pretrained()"),oBr=o(" to load the model weights."),rBr=l(),F(WC.$$.fragment),tBr=l(),Vr=a("div"),F(Z8.$$.fragment),aBr=l(),E9e=a("p"),nBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sBr=l(),bn=a("p"),lBr=o("The model class to instantiate is selected based on the "),C9e=a("code"),iBr=o("model_type"),dBr=o(` property of the config object (either
passed as an argument or loaded from `),w9e=a("code"),cBr=o("pretrained_model_name_or_path"),fBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A9e=a("code"),mBr=o("pretrained_model_name_or_path"),gBr=o(":"),hBr=l(),Pe=a("ul"),QC=a("li"),y9e=a("strong"),pBr=o("bart"),_Br=o(" \u2014 "),sK=a("a"),uBr=o("FlaxBartForConditionalGeneration"),bBr=o(" (BART model)"),vBr=l(),HC=a("li"),L9e=a("strong"),FBr=o("blenderbot"),TBr=o(" \u2014 "),lK=a("a"),MBr=o("FlaxBlenderbotForConditionalGeneration"),EBr=o(" (Blenderbot model)"),CBr=l(),UC=a("li"),x9e=a("strong"),wBr=o("blenderbot-small"),ABr=o(" \u2014 "),iK=a("a"),yBr=o("FlaxBlenderbotSmallForConditionalGeneration"),LBr=o(" (BlenderbotSmall model)"),xBr=l(),JC=a("li"),$9e=a("strong"),$Br=o("encoder-decoder"),kBr=o(" \u2014 "),dK=a("a"),SBr=o("FlaxEncoderDecoderModel"),RBr=o(" (Encoder decoder model)"),PBr=l(),YC=a("li"),k9e=a("strong"),BBr=o("marian"),IBr=o(" \u2014 "),cK=a("a"),NBr=o("FlaxMarianMTModel"),qBr=o(" (Marian model)"),jBr=l(),KC=a("li"),S9e=a("strong"),DBr=o("mbart"),GBr=o(" \u2014 "),fK=a("a"),OBr=o("FlaxMBartForConditionalGeneration"),VBr=o(" (mBART model)"),XBr=l(),ZC=a("li"),R9e=a("strong"),zBr=o("mt5"),WBr=o(" \u2014 "),mK=a("a"),QBr=o("FlaxMT5ForConditionalGeneration"),HBr=o(" (mT5 model)"),UBr=l(),e3=a("li"),P9e=a("strong"),JBr=o("pegasus"),YBr=o(" \u2014 "),gK=a("a"),KBr=o("FlaxPegasusForConditionalGeneration"),ZBr=o(" (Pegasus model)"),eIr=l(),o3=a("li"),B9e=a("strong"),oIr=o("t5"),rIr=o(" \u2014 "),hK=a("a"),tIr=o("FlaxT5ForConditionalGeneration"),aIr=o(" (T5 model)"),nIr=l(),F(r3.$$.fragment),tDe=l(),Xc=a("h2"),t3=a("a"),I9e=a("span"),F(ex.$$.fragment),sIr=l(),N9e=a("span"),lIr=o("FlaxAutoModelForSequenceClassification"),aDe=l(),_r=a("div"),F(ox.$$.fragment),iIr=l(),zc=a("p"),dIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pK=a("a"),cIr=o("from_pretrained()"),fIr=o(" class method or the "),_K=a("a"),mIr=o("from_config()"),gIr=o(` class
method.`),hIr=l(),rx=a("p"),pIr=o("This class cannot be instantiated directly using "),q9e=a("code"),_Ir=o("__init__()"),uIr=o(" (throws an error)."),bIr=l(),Wt=a("div"),F(tx.$$.fragment),vIr=l(),j9e=a("p"),FIr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),TIr=l(),Wc=a("p"),MIr=o(`Note:
Loading a model from its configuration file does `),D9e=a("strong"),EIr=o("not"),CIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),wIr=o("from_pretrained()"),AIr=o(" to load the model weights."),yIr=l(),F(a3.$$.fragment),LIr=l(),Xr=a("div"),F(ax.$$.fragment),xIr=l(),G9e=a("p"),$Ir=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),kIr=l(),vn=a("p"),SIr=o("The model class to instantiate is selected based on the "),O9e=a("code"),RIr=o("model_type"),PIr=o(` property of the config object (either
passed as an argument or loaded from `),V9e=a("code"),BIr=o("pretrained_model_name_or_path"),IIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X9e=a("code"),NIr=o("pretrained_model_name_or_path"),qIr=o(":"),jIr=l(),$e=a("ul"),n3=a("li"),z9e=a("strong"),DIr=o("albert"),GIr=o(" \u2014 "),bK=a("a"),OIr=o("FlaxAlbertForSequenceClassification"),VIr=o(" (ALBERT model)"),XIr=l(),s3=a("li"),W9e=a("strong"),zIr=o("bart"),WIr=o(" \u2014 "),vK=a("a"),QIr=o("FlaxBartForSequenceClassification"),HIr=o(" (BART model)"),UIr=l(),l3=a("li"),Q9e=a("strong"),JIr=o("bert"),YIr=o(" \u2014 "),FK=a("a"),KIr=o("FlaxBertForSequenceClassification"),ZIr=o(" (BERT model)"),eNr=l(),i3=a("li"),H9e=a("strong"),oNr=o("big_bird"),rNr=o(" \u2014 "),TK=a("a"),tNr=o("FlaxBigBirdForSequenceClassification"),aNr=o(" (BigBird model)"),nNr=l(),d3=a("li"),U9e=a("strong"),sNr=o("distilbert"),lNr=o(" \u2014 "),MK=a("a"),iNr=o("FlaxDistilBertForSequenceClassification"),dNr=o(" (DistilBERT model)"),cNr=l(),c3=a("li"),J9e=a("strong"),fNr=o("electra"),mNr=o(" \u2014 "),EK=a("a"),gNr=o("FlaxElectraForSequenceClassification"),hNr=o(" (ELECTRA model)"),pNr=l(),f3=a("li"),Y9e=a("strong"),_Nr=o("mbart"),uNr=o(" \u2014 "),CK=a("a"),bNr=o("FlaxMBartForSequenceClassification"),vNr=o(" (mBART model)"),FNr=l(),m3=a("li"),K9e=a("strong"),TNr=o("roberta"),MNr=o(" \u2014 "),wK=a("a"),ENr=o("FlaxRobertaForSequenceClassification"),CNr=o(" (RoBERTa model)"),wNr=l(),g3=a("li"),Z9e=a("strong"),ANr=o("roformer"),yNr=o(" \u2014 "),AK=a("a"),LNr=o("FlaxRoFormerForSequenceClassification"),xNr=o(" (RoFormer model)"),$Nr=l(),h3=a("li"),eMe=a("strong"),kNr=o("xlm-roberta"),SNr=o(" \u2014 "),yK=a("a"),RNr=o("FlaxXLMRobertaForSequenceClassification"),PNr=o(" (XLM-RoBERTa model)"),BNr=l(),F(p3.$$.fragment),nDe=l(),Qc=a("h2"),_3=a("a"),oMe=a("span"),F(nx.$$.fragment),INr=l(),rMe=a("span"),NNr=o("FlaxAutoModelForQuestionAnswering"),sDe=l(),ur=a("div"),F(sx.$$.fragment),qNr=l(),Hc=a("p"),jNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),LK=a("a"),DNr=o("from_pretrained()"),GNr=o(" class method or the "),xK=a("a"),ONr=o("from_config()"),VNr=o(` class
method.`),XNr=l(),lx=a("p"),zNr=o("This class cannot be instantiated directly using "),tMe=a("code"),WNr=o("__init__()"),QNr=o(" (throws an error)."),HNr=l(),Qt=a("div"),F(ix.$$.fragment),UNr=l(),aMe=a("p"),JNr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),YNr=l(),Uc=a("p"),KNr=o(`Note:
Loading a model from its configuration file does `),nMe=a("strong"),ZNr=o("not"),eqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=a("a"),oqr=o("from_pretrained()"),rqr=o(" to load the model weights."),tqr=l(),F(u3.$$.fragment),aqr=l(),zr=a("div"),F(dx.$$.fragment),nqr=l(),sMe=a("p"),sqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lqr=l(),Fn=a("p"),iqr=o("The model class to instantiate is selected based on the "),lMe=a("code"),dqr=o("model_type"),cqr=o(` property of the config object (either
passed as an argument or loaded from `),iMe=a("code"),fqr=o("pretrained_model_name_or_path"),mqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=a("code"),gqr=o("pretrained_model_name_or_path"),hqr=o(":"),pqr=l(),ke=a("ul"),b3=a("li"),cMe=a("strong"),_qr=o("albert"),uqr=o(" \u2014 "),kK=a("a"),bqr=o("FlaxAlbertForQuestionAnswering"),vqr=o(" (ALBERT model)"),Fqr=l(),v3=a("li"),fMe=a("strong"),Tqr=o("bart"),Mqr=o(" \u2014 "),SK=a("a"),Eqr=o("FlaxBartForQuestionAnswering"),Cqr=o(" (BART model)"),wqr=l(),F3=a("li"),mMe=a("strong"),Aqr=o("bert"),yqr=o(" \u2014 "),RK=a("a"),Lqr=o("FlaxBertForQuestionAnswering"),xqr=o(" (BERT model)"),$qr=l(),T3=a("li"),gMe=a("strong"),kqr=o("big_bird"),Sqr=o(" \u2014 "),PK=a("a"),Rqr=o("FlaxBigBirdForQuestionAnswering"),Pqr=o(" (BigBird model)"),Bqr=l(),M3=a("li"),hMe=a("strong"),Iqr=o("distilbert"),Nqr=o(" \u2014 "),BK=a("a"),qqr=o("FlaxDistilBertForQuestionAnswering"),jqr=o(" (DistilBERT model)"),Dqr=l(),E3=a("li"),pMe=a("strong"),Gqr=o("electra"),Oqr=o(" \u2014 "),IK=a("a"),Vqr=o("FlaxElectraForQuestionAnswering"),Xqr=o(" (ELECTRA model)"),zqr=l(),C3=a("li"),_Me=a("strong"),Wqr=o("mbart"),Qqr=o(" \u2014 "),NK=a("a"),Hqr=o("FlaxMBartForQuestionAnswering"),Uqr=o(" (mBART model)"),Jqr=l(),w3=a("li"),uMe=a("strong"),Yqr=o("roberta"),Kqr=o(" \u2014 "),qK=a("a"),Zqr=o("FlaxRobertaForQuestionAnswering"),ejr=o(" (RoBERTa model)"),ojr=l(),A3=a("li"),bMe=a("strong"),rjr=o("roformer"),tjr=o(" \u2014 "),jK=a("a"),ajr=o("FlaxRoFormerForQuestionAnswering"),njr=o(" (RoFormer model)"),sjr=l(),y3=a("li"),vMe=a("strong"),ljr=o("xlm-roberta"),ijr=o(" \u2014 "),DK=a("a"),djr=o("FlaxXLMRobertaForQuestionAnswering"),cjr=o(" (XLM-RoBERTa model)"),fjr=l(),F(L3.$$.fragment),lDe=l(),Jc=a("h2"),x3=a("a"),FMe=a("span"),F(cx.$$.fragment),mjr=l(),TMe=a("span"),gjr=o("FlaxAutoModelForTokenClassification"),iDe=l(),br=a("div"),F(fx.$$.fragment),hjr=l(),Yc=a("p"),pjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GK=a("a"),_jr=o("from_pretrained()"),ujr=o(" class method or the "),OK=a("a"),bjr=o("from_config()"),vjr=o(` class
method.`),Fjr=l(),mx=a("p"),Tjr=o("This class cannot be instantiated directly using "),MMe=a("code"),Mjr=o("__init__()"),Ejr=o(" (throws an error)."),Cjr=l(),Ht=a("div"),F(gx.$$.fragment),wjr=l(),EMe=a("p"),Ajr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yjr=l(),Kc=a("p"),Ljr=o(`Note:
Loading a model from its configuration file does `),CMe=a("strong"),xjr=o("not"),$jr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=a("a"),kjr=o("from_pretrained()"),Sjr=o(" to load the model weights."),Rjr=l(),F($3.$$.fragment),Pjr=l(),Wr=a("div"),F(hx.$$.fragment),Bjr=l(),wMe=a("p"),Ijr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Njr=l(),Tn=a("p"),qjr=o("The model class to instantiate is selected based on the "),AMe=a("code"),jjr=o("model_type"),Djr=o(` property of the config object (either
passed as an argument or loaded from `),yMe=a("code"),Gjr=o("pretrained_model_name_or_path"),Ojr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LMe=a("code"),Vjr=o("pretrained_model_name_or_path"),Xjr=o(":"),zjr=l(),Ge=a("ul"),k3=a("li"),xMe=a("strong"),Wjr=o("albert"),Qjr=o(" \u2014 "),XK=a("a"),Hjr=o("FlaxAlbertForTokenClassification"),Ujr=o(" (ALBERT model)"),Jjr=l(),S3=a("li"),$Me=a("strong"),Yjr=o("bert"),Kjr=o(" \u2014 "),zK=a("a"),Zjr=o("FlaxBertForTokenClassification"),eDr=o(" (BERT model)"),oDr=l(),R3=a("li"),kMe=a("strong"),rDr=o("big_bird"),tDr=o(" \u2014 "),WK=a("a"),aDr=o("FlaxBigBirdForTokenClassification"),nDr=o(" (BigBird model)"),sDr=l(),P3=a("li"),SMe=a("strong"),lDr=o("distilbert"),iDr=o(" \u2014 "),QK=a("a"),dDr=o("FlaxDistilBertForTokenClassification"),cDr=o(" (DistilBERT model)"),fDr=l(),B3=a("li"),RMe=a("strong"),mDr=o("electra"),gDr=o(" \u2014 "),HK=a("a"),hDr=o("FlaxElectraForTokenClassification"),pDr=o(" (ELECTRA model)"),_Dr=l(),I3=a("li"),PMe=a("strong"),uDr=o("roberta"),bDr=o(" \u2014 "),UK=a("a"),vDr=o("FlaxRobertaForTokenClassification"),FDr=o(" (RoBERTa model)"),TDr=l(),N3=a("li"),BMe=a("strong"),MDr=o("roformer"),EDr=o(" \u2014 "),JK=a("a"),CDr=o("FlaxRoFormerForTokenClassification"),wDr=o(" (RoFormer model)"),ADr=l(),q3=a("li"),IMe=a("strong"),yDr=o("xlm-roberta"),LDr=o(" \u2014 "),YK=a("a"),xDr=o("FlaxXLMRobertaForTokenClassification"),$Dr=o(" (XLM-RoBERTa model)"),kDr=l(),F(j3.$$.fragment),dDe=l(),Zc=a("h2"),D3=a("a"),NMe=a("span"),F(px.$$.fragment),SDr=l(),qMe=a("span"),RDr=o("FlaxAutoModelForMultipleChoice"),cDe=l(),vr=a("div"),F(_x.$$.fragment),PDr=l(),ef=a("p"),BDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KK=a("a"),IDr=o("from_pretrained()"),NDr=o(" class method or the "),ZK=a("a"),qDr=o("from_config()"),jDr=o(` class
method.`),DDr=l(),ux=a("p"),GDr=o("This class cannot be instantiated directly using "),jMe=a("code"),ODr=o("__init__()"),VDr=o(" (throws an error)."),XDr=l(),Ut=a("div"),F(bx.$$.fragment),zDr=l(),DMe=a("p"),WDr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),QDr=l(),of=a("p"),HDr=o(`Note:
Loading a model from its configuration file does `),GMe=a("strong"),UDr=o("not"),JDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),YDr=o("from_pretrained()"),KDr=o(" to load the model weights."),ZDr=l(),F(G3.$$.fragment),eGr=l(),Qr=a("div"),F(vx.$$.fragment),oGr=l(),OMe=a("p"),rGr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tGr=l(),Mn=a("p"),aGr=o("The model class to instantiate is selected based on the "),VMe=a("code"),nGr=o("model_type"),sGr=o(` property of the config object (either
passed as an argument or loaded from `),XMe=a("code"),lGr=o("pretrained_model_name_or_path"),iGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=a("code"),dGr=o("pretrained_model_name_or_path"),cGr=o(":"),fGr=l(),Oe=a("ul"),O3=a("li"),WMe=a("strong"),mGr=o("albert"),gGr=o(" \u2014 "),oZ=a("a"),hGr=o("FlaxAlbertForMultipleChoice"),pGr=o(" (ALBERT model)"),_Gr=l(),V3=a("li"),QMe=a("strong"),uGr=o("bert"),bGr=o(" \u2014 "),rZ=a("a"),vGr=o("FlaxBertForMultipleChoice"),FGr=o(" (BERT model)"),TGr=l(),X3=a("li"),HMe=a("strong"),MGr=o("big_bird"),EGr=o(" \u2014 "),tZ=a("a"),CGr=o("FlaxBigBirdForMultipleChoice"),wGr=o(" (BigBird model)"),AGr=l(),z3=a("li"),UMe=a("strong"),yGr=o("distilbert"),LGr=o(" \u2014 "),aZ=a("a"),xGr=o("FlaxDistilBertForMultipleChoice"),$Gr=o(" (DistilBERT model)"),kGr=l(),W3=a("li"),JMe=a("strong"),SGr=o("electra"),RGr=o(" \u2014 "),nZ=a("a"),PGr=o("FlaxElectraForMultipleChoice"),BGr=o(" (ELECTRA model)"),IGr=l(),Q3=a("li"),YMe=a("strong"),NGr=o("roberta"),qGr=o(" \u2014 "),sZ=a("a"),jGr=o("FlaxRobertaForMultipleChoice"),DGr=o(" (RoBERTa model)"),GGr=l(),H3=a("li"),KMe=a("strong"),OGr=o("roformer"),VGr=o(" \u2014 "),lZ=a("a"),XGr=o("FlaxRoFormerForMultipleChoice"),zGr=o(" (RoFormer model)"),WGr=l(),U3=a("li"),ZMe=a("strong"),QGr=o("xlm-roberta"),HGr=o(" \u2014 "),iZ=a("a"),UGr=o("FlaxXLMRobertaForMultipleChoice"),JGr=o(" (XLM-RoBERTa model)"),YGr=l(),F(J3.$$.fragment),fDe=l(),rf=a("h2"),Y3=a("a"),eEe=a("span"),F(Fx.$$.fragment),KGr=l(),oEe=a("span"),ZGr=o("FlaxAutoModelForNextSentencePrediction"),mDe=l(),Fr=a("div"),F(Tx.$$.fragment),eOr=l(),tf=a("p"),oOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dZ=a("a"),rOr=o("from_pretrained()"),tOr=o(" class method or the "),cZ=a("a"),aOr=o("from_config()"),nOr=o(` class
method.`),sOr=l(),Mx=a("p"),lOr=o("This class cannot be instantiated directly using "),rEe=a("code"),iOr=o("__init__()"),dOr=o(" (throws an error)."),cOr=l(),Jt=a("div"),F(Ex.$$.fragment),fOr=l(),tEe=a("p"),mOr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gOr=l(),af=a("p"),hOr=o(`Note:
Loading a model from its configuration file does `),aEe=a("strong"),pOr=o("not"),_Or=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=a("a"),uOr=o("from_pretrained()"),bOr=o(" to load the model weights."),vOr=l(),F(K3.$$.fragment),FOr=l(),Hr=a("div"),F(Cx.$$.fragment),TOr=l(),nEe=a("p"),MOr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),EOr=l(),En=a("p"),COr=o("The model class to instantiate is selected based on the "),sEe=a("code"),wOr=o("model_type"),AOr=o(` property of the config object (either
passed as an argument or loaded from `),lEe=a("code"),yOr=o("pretrained_model_name_or_path"),LOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iEe=a("code"),xOr=o("pretrained_model_name_or_path"),$Or=o(":"),kOr=l(),dEe=a("ul"),Z3=a("li"),cEe=a("strong"),SOr=o("bert"),ROr=o(" \u2014 "),mZ=a("a"),POr=o("FlaxBertForNextSentencePrediction"),BOr=o(" (BERT model)"),IOr=l(),F(ew.$$.fragment),gDe=l(),nf=a("h2"),ow=a("a"),fEe=a("span"),F(wx.$$.fragment),NOr=l(),mEe=a("span"),qOr=o("FlaxAutoModelForImageClassification"),hDe=l(),Tr=a("div"),F(Ax.$$.fragment),jOr=l(),sf=a("p"),DOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gZ=a("a"),GOr=o("from_pretrained()"),OOr=o(" class method or the "),hZ=a("a"),VOr=o("from_config()"),XOr=o(` class
method.`),zOr=l(),yx=a("p"),WOr=o("This class cannot be instantiated directly using "),gEe=a("code"),QOr=o("__init__()"),HOr=o(" (throws an error)."),UOr=l(),Yt=a("div"),F(Lx.$$.fragment),JOr=l(),hEe=a("p"),YOr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),KOr=l(),lf=a("p"),ZOr=o(`Note:
Loading a model from its configuration file does `),pEe=a("strong"),eVr=o("not"),oVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=a("a"),rVr=o("from_pretrained()"),tVr=o(" to load the model weights."),aVr=l(),F(rw.$$.fragment),nVr=l(),Ur=a("div"),F(xx.$$.fragment),sVr=l(),_Ee=a("p"),lVr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iVr=l(),Cn=a("p"),dVr=o("The model class to instantiate is selected based on the "),uEe=a("code"),cVr=o("model_type"),fVr=o(` property of the config object (either
passed as an argument or loaded from `),bEe=a("code"),mVr=o("pretrained_model_name_or_path"),gVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=a("code"),hVr=o("pretrained_model_name_or_path"),pVr=o(":"),_Vr=l(),$x=a("ul"),tw=a("li"),FEe=a("strong"),uVr=o("beit"),bVr=o(" \u2014 "),_Z=a("a"),vVr=o("FlaxBeitForImageClassification"),FVr=o(" (BEiT model)"),TVr=l(),aw=a("li"),TEe=a("strong"),MVr=o("vit"),EVr=o(" \u2014 "),uZ=a("a"),CVr=o("FlaxViTForImageClassification"),wVr=o(" (ViT model)"),AVr=l(),F(nw.$$.fragment),pDe=l(),df=a("h2"),sw=a("a"),MEe=a("span"),F(kx.$$.fragment),yVr=l(),EEe=a("span"),LVr=o("FlaxAutoModelForVision2Seq"),_De=l(),Mr=a("div"),F(Sx.$$.fragment),xVr=l(),cf=a("p"),$Vr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bZ=a("a"),kVr=o("from_pretrained()"),SVr=o(" class method or the "),vZ=a("a"),RVr=o("from_config()"),PVr=o(` class
method.`),BVr=l(),Rx=a("p"),IVr=o("This class cannot be instantiated directly using "),CEe=a("code"),NVr=o("__init__()"),qVr=o(" (throws an error)."),jVr=l(),Kt=a("div"),F(Px.$$.fragment),DVr=l(),wEe=a("p"),GVr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OVr=l(),ff=a("p"),VVr=o(`Note:
Loading a model from its configuration file does `),AEe=a("strong"),XVr=o("not"),zVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FZ=a("a"),WVr=o("from_pretrained()"),QVr=o(" to load the model weights."),HVr=l(),F(lw.$$.fragment),UVr=l(),Jr=a("div"),F(Bx.$$.fragment),JVr=l(),yEe=a("p"),YVr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),KVr=l(),wn=a("p"),ZVr=o("The model class to instantiate is selected based on the "),LEe=a("code"),eXr=o("model_type"),oXr=o(` property of the config object (either
passed as an argument or loaded from `),xEe=a("code"),rXr=o("pretrained_model_name_or_path"),tXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ee=a("code"),aXr=o("pretrained_model_name_or_path"),nXr=o(":"),sXr=l(),kEe=a("ul"),iw=a("li"),SEe=a("strong"),lXr=o("vision-encoder-decoder"),iXr=o(" \u2014 "),TZ=a("a"),dXr=o("FlaxVisionEncoderDecoderModel"),cXr=o(" (Vision Encoder decoder model)"),fXr=l(),F(dw.$$.fragment),this.h()},l(f){const u=Z$t('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Ix=s(p);m=n(Ix,"A",{id:!0,class:!0,href:!0});var REe=s(m);_=n(REe,"SPAN",{});var PEe=s(_);T(d.$$.fragment,PEe),PEe.forEach(t),REe.forEach(t),h=i(Ix),Mo=n(Ix,"SPAN",{});var BEe=s(Mo);fi=r(BEe,"Auto Classes"),BEe.forEach(t),Ix.forEach(t),pf=i(f),rt=n(f,"P",{});var Nx=s(rt);mi=r(Nx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(Nx,"CODE",{});var IEe=s(gi);y6=r(IEe,"from_pretrained()"),IEe.forEach(t),_f=r(Nx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Nx.forEach(t),De=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var NEe=s(yn);L6=r(NEe,"AutoConfig"),NEe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var qEe=s(xn);x6=r(qEe,"AutoModel"),qEe.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var jEe=s($n);$6=r(jEe,"AutoTokenizer"),jEe.forEach(t),_i=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),uf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var qx=s(Ae);U$=r(qx,"will create a model that is an instance of "),ui=n(qx,"A",{href:!0});var DEe=s(ui);J$=r(DEe,"BertModel"),DEe.forEach(t),Y$=r(qx,"."),qx.forEach(t),Eo=i(f),wa=n(f,"P",{});var jx=s(wa);K$=r(jx,"There is one class of "),bf=n(jx,"CODE",{});var GEe=s(bf);Z$=r(GEe,"AutoModel"),GEe.forEach(t),wOe=r(jx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),jx.forEach(t),hqe=i(f),bi=n(f,"H2",{class:!0});var Dx=s(bi);vf=n(Dx,"A",{id:!0,class:!0,href:!0});var OEe=s(vf);hoe=n(OEe,"SPAN",{});var VEe=s(hoe);T(k6.$$.fragment,VEe),VEe.forEach(t),OEe.forEach(t),AOe=i(Dx),poe=n(Dx,"SPAN",{});var XEe=s(poe);yOe=r(XEe,"Extending the Auto Classes"),XEe.forEach(t),Dx.forEach(t),pqe=i(f),kn=n(f,"P",{});var mf=s(kn);LOe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),_oe=n(mf,"CODE",{});var zEe=s(_oe);xOe=r(zEe,"NewModel"),zEe.forEach(t),$Oe=r(mf,", make sure you have a "),uoe=n(mf,"CODE",{});var WEe=s(uoe);kOe=r(WEe,"NewModelConfig"),WEe.forEach(t),SOe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),_qe=i(f),T(S6.$$.fragment,f),uqe=i(f),ek=n(f,"P",{});var QEe=s(ek);ROe=r(QEe,"You will then be able to use the auto classes like you would usually do!"),QEe.forEach(t),bqe=i(f),T(Ff.$$.fragment,f),vqe=i(f),vi=n(f,"H2",{class:!0});var Gx=s(vi);Tf=n(Gx,"A",{id:!0,class:!0,href:!0});var HEe=s(Tf);boe=n(HEe,"SPAN",{});var UEe=s(boe);T(R6.$$.fragment,UEe),UEe.forEach(t),HEe.forEach(t),POe=i(Gx),voe=n(Gx,"SPAN",{});var JEe=s(voe);BOe=r(JEe,"AutoConfig"),JEe.forEach(t),Gx.forEach(t),Fqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(P6.$$.fragment,et),IOe=i(et),B6=n(et,"P",{});var Ox=s(B6);NOe=r(Ox,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),ok=n(Ox,"A",{href:!0});var YEe=s(ok);qOe=r(YEe,"from_pretrained()"),YEe.forEach(t),jOe=r(Ox," class method."),Ox.forEach(t),DOe=i(et),I6=n(et,"P",{});var Vx=s(I6);GOe=r(Vx,"This class cannot be instantiated directly using "),Foe=n(Vx,"CODE",{});var KEe=s(Foe);OOe=r(KEe,"__init__()"),KEe.forEach(t),VOe=r(Vx," (throws an error)."),Vx.forEach(t),XOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(N6.$$.fragment,ot),zOe=i(ot),Toe=n(ot,"P",{});var ZEe=s(Toe);WOe=r(ZEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),ZEe.forEach(t),QOe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);HOe=r(gf,"The configuration class to instantiate is selected based on the "),Moe=n(gf,"CODE",{});var eCe=s(Moe);UOe=r(eCe,"model_type"),eCe.forEach(t),JOe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Eoe=n(gf,"CODE",{});var oCe=s(Eoe);YOe=r(oCe,"pretrained_model_name_or_path"),oCe.forEach(t),KOe=r(gf,":"),gf.forEach(t),ZOe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var cw=s(Mf);Coe=n(cw,"STRONG",{});var rCe=s(Coe);eVe=r(rCe,"albert"),rCe.forEach(t),oVe=r(cw," \u2014 "),rk=n(cw,"A",{href:!0});var tCe=s(rk);rVe=r(tCe,"AlbertConfig"),tCe.forEach(t),tVe=r(cw," (ALBERT model)"),cw.forEach(t),aVe=i(y),Ef=n(y,"LI",{});var fw=s(Ef);woe=n(fw,"STRONG",{});var aCe=s(woe);nVe=r(aCe,"bart"),aCe.forEach(t),sVe=r(fw," \u2014 "),tk=n(fw,"A",{href:!0});var nCe=s(tk);lVe=r(nCe,"BartConfig"),nCe.forEach(t),iVe=r(fw," (BART model)"),fw.forEach(t),dVe=i(y),Cf=n(y,"LI",{});var mw=s(Cf);Aoe=n(mw,"STRONG",{});var sCe=s(Aoe);cVe=r(sCe,"beit"),sCe.forEach(t),fVe=r(mw," \u2014 "),ak=n(mw,"A",{href:!0});var lCe=s(ak);mVe=r(lCe,"BeitConfig"),lCe.forEach(t),gVe=r(mw," (BEiT model)"),mw.forEach(t),hVe=i(y),wf=n(y,"LI",{});var gw=s(wf);yoe=n(gw,"STRONG",{});var iCe=s(yoe);pVe=r(iCe,"bert"),iCe.forEach(t),_Ve=r(gw," \u2014 "),nk=n(gw,"A",{href:!0});var dCe=s(nk);uVe=r(dCe,"BertConfig"),dCe.forEach(t),bVe=r(gw," (BERT model)"),gw.forEach(t),vVe=i(y),Af=n(y,"LI",{});var hw=s(Af);Loe=n(hw,"STRONG",{});var cCe=s(Loe);FVe=r(cCe,"bert-generation"),cCe.forEach(t),TVe=r(hw," \u2014 "),sk=n(hw,"A",{href:!0});var fCe=s(sk);MVe=r(fCe,"BertGenerationConfig"),fCe.forEach(t),EVe=r(hw," (Bert Generation model)"),hw.forEach(t),CVe=i(y),yf=n(y,"LI",{});var pw=s(yf);xoe=n(pw,"STRONG",{});var mCe=s(xoe);wVe=r(mCe,"big_bird"),mCe.forEach(t),AVe=r(pw," \u2014 "),lk=n(pw,"A",{href:!0});var gCe=s(lk);yVe=r(gCe,"BigBirdConfig"),gCe.forEach(t),LVe=r(pw," (BigBird model)"),pw.forEach(t),xVe=i(y),Lf=n(y,"LI",{});var _w=s(Lf);$oe=n(_w,"STRONG",{});var hCe=s($oe);$Ve=r(hCe,"bigbird_pegasus"),hCe.forEach(t),kVe=r(_w," \u2014 "),ik=n(_w,"A",{href:!0});var pCe=s(ik);SVe=r(pCe,"BigBirdPegasusConfig"),pCe.forEach(t),RVe=r(_w," (BigBirdPegasus model)"),_w.forEach(t),PVe=i(y),xf=n(y,"LI",{});var uw=s(xf);koe=n(uw,"STRONG",{});var _Ce=s(koe);BVe=r(_Ce,"blenderbot"),_Ce.forEach(t),IVe=r(uw," \u2014 "),dk=n(uw,"A",{href:!0});var uCe=s(dk);NVe=r(uCe,"BlenderbotConfig"),uCe.forEach(t),qVe=r(uw," (Blenderbot model)"),uw.forEach(t),jVe=i(y),$f=n(y,"LI",{});var bw=s($f);Soe=n(bw,"STRONG",{});var bCe=s(Soe);DVe=r(bCe,"blenderbot-small"),bCe.forEach(t),GVe=r(bw," \u2014 "),ck=n(bw,"A",{href:!0});var vCe=s(ck);OVe=r(vCe,"BlenderbotSmallConfig"),vCe.forEach(t),VVe=r(bw," (BlenderbotSmall model)"),bw.forEach(t),XVe=i(y),kf=n(y,"LI",{});var vw=s(kf);Roe=n(vw,"STRONG",{});var FCe=s(Roe);zVe=r(FCe,"camembert"),FCe.forEach(t),WVe=r(vw," \u2014 "),fk=n(vw,"A",{href:!0});var TCe=s(fk);QVe=r(TCe,"CamembertConfig"),TCe.forEach(t),HVe=r(vw," (CamemBERT model)"),vw.forEach(t),UVe=i(y),Sf=n(y,"LI",{});var Fw=s(Sf);Poe=n(Fw,"STRONG",{});var MCe=s(Poe);JVe=r(MCe,"canine"),MCe.forEach(t),YVe=r(Fw," \u2014 "),mk=n(Fw,"A",{href:!0});var ECe=s(mk);KVe=r(ECe,"CanineConfig"),ECe.forEach(t),ZVe=r(Fw," (Canine model)"),Fw.forEach(t),eXe=i(y),Rf=n(y,"LI",{});var Tw=s(Rf);Boe=n(Tw,"STRONG",{});var CCe=s(Boe);oXe=r(CCe,"clip"),CCe.forEach(t),rXe=r(Tw," \u2014 "),gk=n(Tw,"A",{href:!0});var wCe=s(gk);tXe=r(wCe,"CLIPConfig"),wCe.forEach(t),aXe=r(Tw," (CLIP model)"),Tw.forEach(t),nXe=i(y),Pf=n(y,"LI",{});var Mw=s(Pf);Ioe=n(Mw,"STRONG",{});var ACe=s(Ioe);sXe=r(ACe,"convbert"),ACe.forEach(t),lXe=r(Mw," \u2014 "),hk=n(Mw,"A",{href:!0});var yCe=s(hk);iXe=r(yCe,"ConvBertConfig"),yCe.forEach(t),dXe=r(Mw," (ConvBERT model)"),Mw.forEach(t),cXe=i(y),Bf=n(y,"LI",{});var Ew=s(Bf);Noe=n(Ew,"STRONG",{});var LCe=s(Noe);fXe=r(LCe,"convnext"),LCe.forEach(t),mXe=r(Ew," \u2014 "),pk=n(Ew,"A",{href:!0});var xCe=s(pk);gXe=r(xCe,"ConvNextConfig"),xCe.forEach(t),hXe=r(Ew," (ConvNext model)"),Ew.forEach(t),pXe=i(y),If=n(y,"LI",{});var Cw=s(If);qoe=n(Cw,"STRONG",{});var $Ce=s(qoe);_Xe=r($Ce,"ctrl"),$Ce.forEach(t),uXe=r(Cw," \u2014 "),_k=n(Cw,"A",{href:!0});var kCe=s(_k);bXe=r(kCe,"CTRLConfig"),kCe.forEach(t),vXe=r(Cw," (CTRL model)"),Cw.forEach(t),FXe=i(y),Nf=n(y,"LI",{});var ww=s(Nf);joe=n(ww,"STRONG",{});var SCe=s(joe);TXe=r(SCe,"cvt"),SCe.forEach(t),MXe=r(ww," \u2014 "),uk=n(ww,"A",{href:!0});var RCe=s(uk);EXe=r(RCe,"CvtConfig"),RCe.forEach(t),CXe=r(ww," (CvT model)"),ww.forEach(t),wXe=i(y),qf=n(y,"LI",{});var Aw=s(qf);Doe=n(Aw,"STRONG",{});var PCe=s(Doe);AXe=r(PCe,"data2vec-audio"),PCe.forEach(t),yXe=r(Aw," \u2014 "),bk=n(Aw,"A",{href:!0});var BCe=s(bk);LXe=r(BCe,"Data2VecAudioConfig"),BCe.forEach(t),xXe=r(Aw," (Data2VecAudio model)"),Aw.forEach(t),$Xe=i(y),jf=n(y,"LI",{});var yw=s(jf);Goe=n(yw,"STRONG",{});var ICe=s(Goe);kXe=r(ICe,"data2vec-text"),ICe.forEach(t),SXe=r(yw," \u2014 "),vk=n(yw,"A",{href:!0});var NCe=s(vk);RXe=r(NCe,"Data2VecTextConfig"),NCe.forEach(t),PXe=r(yw," (Data2VecText model)"),yw.forEach(t),BXe=i(y),Df=n(y,"LI",{});var Lw=s(Df);Ooe=n(Lw,"STRONG",{});var qCe=s(Ooe);IXe=r(qCe,"data2vec-vision"),qCe.forEach(t),NXe=r(Lw," \u2014 "),Fk=n(Lw,"A",{href:!0});var jCe=s(Fk);qXe=r(jCe,"Data2VecVisionConfig"),jCe.forEach(t),jXe=r(Lw," (Data2VecVision model)"),Lw.forEach(t),DXe=i(y),Gf=n(y,"LI",{});var xw=s(Gf);Voe=n(xw,"STRONG",{});var DCe=s(Voe);GXe=r(DCe,"deberta"),DCe.forEach(t),OXe=r(xw," \u2014 "),Tk=n(xw,"A",{href:!0});var GCe=s(Tk);VXe=r(GCe,"DebertaConfig"),GCe.forEach(t),XXe=r(xw," (DeBERTa model)"),xw.forEach(t),zXe=i(y),Of=n(y,"LI",{});var $w=s(Of);Xoe=n($w,"STRONG",{});var OCe=s(Xoe);WXe=r(OCe,"deberta-v2"),OCe.forEach(t),QXe=r($w," \u2014 "),Mk=n($w,"A",{href:!0});var VCe=s(Mk);HXe=r(VCe,"DebertaV2Config"),VCe.forEach(t),UXe=r($w," (DeBERTa-v2 model)"),$w.forEach(t),JXe=i(y),Vf=n(y,"LI",{});var kw=s(Vf);zoe=n(kw,"STRONG",{});var XCe=s(zoe);YXe=r(XCe,"decision_transformer"),XCe.forEach(t),KXe=r(kw," \u2014 "),Ek=n(kw,"A",{href:!0});var zCe=s(Ek);ZXe=r(zCe,"DecisionTransformerConfig"),zCe.forEach(t),eze=r(kw," (Decision Transformer model)"),kw.forEach(t),oze=i(y),Xf=n(y,"LI",{});var Sw=s(Xf);Woe=n(Sw,"STRONG",{});var WCe=s(Woe);rze=r(WCe,"deit"),WCe.forEach(t),tze=r(Sw," \u2014 "),Ck=n(Sw,"A",{href:!0});var gXr=s(Ck);aze=r(gXr,"DeiTConfig"),gXr.forEach(t),nze=r(Sw," (DeiT model)"),Sw.forEach(t),sze=i(y),zf=n(y,"LI",{});var QCe=s(zf);Qoe=n(QCe,"STRONG",{});var hXr=s(Qoe);lze=r(hXr,"detr"),hXr.forEach(t),ize=r(QCe," \u2014 "),wk=n(QCe,"A",{href:!0});var pXr=s(wk);dze=r(pXr,"DetrConfig"),pXr.forEach(t),cze=r(QCe," (DETR model)"),QCe.forEach(t),fze=i(y),Wf=n(y,"LI",{});var HCe=s(Wf);Hoe=n(HCe,"STRONG",{});var _Xr=s(Hoe);mze=r(_Xr,"distilbert"),_Xr.forEach(t),gze=r(HCe," \u2014 "),Ak=n(HCe,"A",{href:!0});var uXr=s(Ak);hze=r(uXr,"DistilBertConfig"),uXr.forEach(t),pze=r(HCe," (DistilBERT model)"),HCe.forEach(t),_ze=i(y),Qf=n(y,"LI",{});var UCe=s(Qf);Uoe=n(UCe,"STRONG",{});var bXr=s(Uoe);uze=r(bXr,"dpr"),bXr.forEach(t),bze=r(UCe," \u2014 "),yk=n(UCe,"A",{href:!0});var vXr=s(yk);vze=r(vXr,"DPRConfig"),vXr.forEach(t),Fze=r(UCe," (DPR model)"),UCe.forEach(t),Tze=i(y),Hf=n(y,"LI",{});var JCe=s(Hf);Joe=n(JCe,"STRONG",{});var FXr=s(Joe);Mze=r(FXr,"dpt"),FXr.forEach(t),Eze=r(JCe," \u2014 "),Lk=n(JCe,"A",{href:!0});var TXr=s(Lk);Cze=r(TXr,"DPTConfig"),TXr.forEach(t),wze=r(JCe," (DPT model)"),JCe.forEach(t),Aze=i(y),Uf=n(y,"LI",{});var YCe=s(Uf);Yoe=n(YCe,"STRONG",{});var MXr=s(Yoe);yze=r(MXr,"electra"),MXr.forEach(t),Lze=r(YCe," \u2014 "),xk=n(YCe,"A",{href:!0});var EXr=s(xk);xze=r(EXr,"ElectraConfig"),EXr.forEach(t),$ze=r(YCe," (ELECTRA model)"),YCe.forEach(t),kze=i(y),Jf=n(y,"LI",{});var KCe=s(Jf);Koe=n(KCe,"STRONG",{});var CXr=s(Koe);Sze=r(CXr,"encoder-decoder"),CXr.forEach(t),Rze=r(KCe," \u2014 "),$k=n(KCe,"A",{href:!0});var wXr=s($k);Pze=r(wXr,"EncoderDecoderConfig"),wXr.forEach(t),Bze=r(KCe," (Encoder decoder model)"),KCe.forEach(t),Ize=i(y),Yf=n(y,"LI",{});var ZCe=s(Yf);Zoe=n(ZCe,"STRONG",{});var AXr=s(Zoe);Nze=r(AXr,"flaubert"),AXr.forEach(t),qze=r(ZCe," \u2014 "),kk=n(ZCe,"A",{href:!0});var yXr=s(kk);jze=r(yXr,"FlaubertConfig"),yXr.forEach(t),Dze=r(ZCe," (FlauBERT model)"),ZCe.forEach(t),Gze=i(y),Kf=n(y,"LI",{});var e3e=s(Kf);ere=n(e3e,"STRONG",{});var LXr=s(ere);Oze=r(LXr,"flava"),LXr.forEach(t),Vze=r(e3e," \u2014 "),Sk=n(e3e,"A",{href:!0});var xXr=s(Sk);Xze=r(xXr,"FlavaConfig"),xXr.forEach(t),zze=r(e3e," (Flava model)"),e3e.forEach(t),Wze=i(y),Zf=n(y,"LI",{});var o3e=s(Zf);ore=n(o3e,"STRONG",{});var $Xr=s(ore);Qze=r($Xr,"fnet"),$Xr.forEach(t),Hze=r(o3e," \u2014 "),Rk=n(o3e,"A",{href:!0});var kXr=s(Rk);Uze=r(kXr,"FNetConfig"),kXr.forEach(t),Jze=r(o3e," (FNet model)"),o3e.forEach(t),Yze=i(y),em=n(y,"LI",{});var r3e=s(em);rre=n(r3e,"STRONG",{});var SXr=s(rre);Kze=r(SXr,"fsmt"),SXr.forEach(t),Zze=r(r3e," \u2014 "),Pk=n(r3e,"A",{href:!0});var RXr=s(Pk);eWe=r(RXr,"FSMTConfig"),RXr.forEach(t),oWe=r(r3e," (FairSeq Machine-Translation model)"),r3e.forEach(t),rWe=i(y),om=n(y,"LI",{});var t3e=s(om);tre=n(t3e,"STRONG",{});var PXr=s(tre);tWe=r(PXr,"funnel"),PXr.forEach(t),aWe=r(t3e," \u2014 "),Bk=n(t3e,"A",{href:!0});var BXr=s(Bk);nWe=r(BXr,"FunnelConfig"),BXr.forEach(t),sWe=r(t3e," (Funnel Transformer model)"),t3e.forEach(t),lWe=i(y),rm=n(y,"LI",{});var a3e=s(rm);are=n(a3e,"STRONG",{});var IXr=s(are);iWe=r(IXr,"glpn"),IXr.forEach(t),dWe=r(a3e," \u2014 "),Ik=n(a3e,"A",{href:!0});var NXr=s(Ik);cWe=r(NXr,"GLPNConfig"),NXr.forEach(t),fWe=r(a3e," (GLPN model)"),a3e.forEach(t),mWe=i(y),tm=n(y,"LI",{});var n3e=s(tm);nre=n(n3e,"STRONG",{});var qXr=s(nre);gWe=r(qXr,"gpt2"),qXr.forEach(t),hWe=r(n3e," \u2014 "),Nk=n(n3e,"A",{href:!0});var jXr=s(Nk);pWe=r(jXr,"GPT2Config"),jXr.forEach(t),_We=r(n3e," (OpenAI GPT-2 model)"),n3e.forEach(t),uWe=i(y),am=n(y,"LI",{});var s3e=s(am);sre=n(s3e,"STRONG",{});var DXr=s(sre);bWe=r(DXr,"gpt_neo"),DXr.forEach(t),vWe=r(s3e," \u2014 "),qk=n(s3e,"A",{href:!0});var GXr=s(qk);FWe=r(GXr,"GPTNeoConfig"),GXr.forEach(t),TWe=r(s3e," (GPT Neo model)"),s3e.forEach(t),MWe=i(y),nm=n(y,"LI",{});var l3e=s(nm);lre=n(l3e,"STRONG",{});var OXr=s(lre);EWe=r(OXr,"gpt_neox"),OXr.forEach(t),CWe=r(l3e," \u2014 "),jk=n(l3e,"A",{href:!0});var VXr=s(jk);wWe=r(VXr,"GPTNeoXConfig"),VXr.forEach(t),AWe=r(l3e," (GPT NeoX model)"),l3e.forEach(t),yWe=i(y),sm=n(y,"LI",{});var i3e=s(sm);ire=n(i3e,"STRONG",{});var XXr=s(ire);LWe=r(XXr,"gptj"),XXr.forEach(t),xWe=r(i3e," \u2014 "),Dk=n(i3e,"A",{href:!0});var zXr=s(Dk);$We=r(zXr,"GPTJConfig"),zXr.forEach(t),kWe=r(i3e," (GPT-J model)"),i3e.forEach(t),SWe=i(y),lm=n(y,"LI",{});var d3e=s(lm);dre=n(d3e,"STRONG",{});var WXr=s(dre);RWe=r(WXr,"hubert"),WXr.forEach(t),PWe=r(d3e," \u2014 "),Gk=n(d3e,"A",{href:!0});var QXr=s(Gk);BWe=r(QXr,"HubertConfig"),QXr.forEach(t),IWe=r(d3e," (Hubert model)"),d3e.forEach(t),NWe=i(y),im=n(y,"LI",{});var c3e=s(im);cre=n(c3e,"STRONG",{});var HXr=s(cre);qWe=r(HXr,"ibert"),HXr.forEach(t),jWe=r(c3e," \u2014 "),Ok=n(c3e,"A",{href:!0});var UXr=s(Ok);DWe=r(UXr,"IBertConfig"),UXr.forEach(t),GWe=r(c3e," (I-BERT model)"),c3e.forEach(t),OWe=i(y),dm=n(y,"LI",{});var f3e=s(dm);fre=n(f3e,"STRONG",{});var JXr=s(fre);VWe=r(JXr,"imagegpt"),JXr.forEach(t),XWe=r(f3e," \u2014 "),Vk=n(f3e,"A",{href:!0});var YXr=s(Vk);zWe=r(YXr,"ImageGPTConfig"),YXr.forEach(t),WWe=r(f3e," (ImageGPT model)"),f3e.forEach(t),QWe=i(y),cm=n(y,"LI",{});var m3e=s(cm);mre=n(m3e,"STRONG",{});var KXr=s(mre);HWe=r(KXr,"layoutlm"),KXr.forEach(t),UWe=r(m3e," \u2014 "),Xk=n(m3e,"A",{href:!0});var ZXr=s(Xk);JWe=r(ZXr,"LayoutLMConfig"),ZXr.forEach(t),YWe=r(m3e," (LayoutLM model)"),m3e.forEach(t),KWe=i(y),fm=n(y,"LI",{});var g3e=s(fm);gre=n(g3e,"STRONG",{});var ezr=s(gre);ZWe=r(ezr,"layoutlmv2"),ezr.forEach(t),eQe=r(g3e," \u2014 "),zk=n(g3e,"A",{href:!0});var ozr=s(zk);oQe=r(ozr,"LayoutLMv2Config"),ozr.forEach(t),rQe=r(g3e," (LayoutLMv2 model)"),g3e.forEach(t),tQe=i(y),mm=n(y,"LI",{});var h3e=s(mm);hre=n(h3e,"STRONG",{});var rzr=s(hre);aQe=r(rzr,"layoutlmv3"),rzr.forEach(t),nQe=r(h3e," \u2014 "),Wk=n(h3e,"A",{href:!0});var tzr=s(Wk);sQe=r(tzr,"LayoutLMv3Config"),tzr.forEach(t),lQe=r(h3e," (LayoutLMv3 model)"),h3e.forEach(t),iQe=i(y),gm=n(y,"LI",{});var p3e=s(gm);pre=n(p3e,"STRONG",{});var azr=s(pre);dQe=r(azr,"led"),azr.forEach(t),cQe=r(p3e," \u2014 "),Qk=n(p3e,"A",{href:!0});var nzr=s(Qk);fQe=r(nzr,"LEDConfig"),nzr.forEach(t),mQe=r(p3e," (LED model)"),p3e.forEach(t),gQe=i(y),hm=n(y,"LI",{});var _3e=s(hm);_re=n(_3e,"STRONG",{});var szr=s(_re);hQe=r(szr,"longformer"),szr.forEach(t),pQe=r(_3e," \u2014 "),Hk=n(_3e,"A",{href:!0});var lzr=s(Hk);_Qe=r(lzr,"LongformerConfig"),lzr.forEach(t),uQe=r(_3e," (Longformer model)"),_3e.forEach(t),bQe=i(y),pm=n(y,"LI",{});var u3e=s(pm);ure=n(u3e,"STRONG",{});var izr=s(ure);vQe=r(izr,"luke"),izr.forEach(t),FQe=r(u3e," \u2014 "),Uk=n(u3e,"A",{href:!0});var dzr=s(Uk);TQe=r(dzr,"LukeConfig"),dzr.forEach(t),MQe=r(u3e," (LUKE model)"),u3e.forEach(t),EQe=i(y),_m=n(y,"LI",{});var b3e=s(_m);bre=n(b3e,"STRONG",{});var czr=s(bre);CQe=r(czr,"lxmert"),czr.forEach(t),wQe=r(b3e," \u2014 "),Jk=n(b3e,"A",{href:!0});var fzr=s(Jk);AQe=r(fzr,"LxmertConfig"),fzr.forEach(t),yQe=r(b3e," (LXMERT model)"),b3e.forEach(t),LQe=i(y),um=n(y,"LI",{});var v3e=s(um);vre=n(v3e,"STRONG",{});var mzr=s(vre);xQe=r(mzr,"m2m_100"),mzr.forEach(t),$Qe=r(v3e," \u2014 "),Yk=n(v3e,"A",{href:!0});var gzr=s(Yk);kQe=r(gzr,"M2M100Config"),gzr.forEach(t),SQe=r(v3e," (M2M100 model)"),v3e.forEach(t),RQe=i(y),bm=n(y,"LI",{});var F3e=s(bm);Fre=n(F3e,"STRONG",{});var hzr=s(Fre);PQe=r(hzr,"marian"),hzr.forEach(t),BQe=r(F3e," \u2014 "),Kk=n(F3e,"A",{href:!0});var pzr=s(Kk);IQe=r(pzr,"MarianConfig"),pzr.forEach(t),NQe=r(F3e," (Marian model)"),F3e.forEach(t),qQe=i(y),vm=n(y,"LI",{});var T3e=s(vm);Tre=n(T3e,"STRONG",{});var _zr=s(Tre);jQe=r(_zr,"maskformer"),_zr.forEach(t),DQe=r(T3e," \u2014 "),Zk=n(T3e,"A",{href:!0});var uzr=s(Zk);GQe=r(uzr,"MaskFormerConfig"),uzr.forEach(t),OQe=r(T3e," (MaskFormer model)"),T3e.forEach(t),VQe=i(y),Fm=n(y,"LI",{});var M3e=s(Fm);Mre=n(M3e,"STRONG",{});var bzr=s(Mre);XQe=r(bzr,"mbart"),bzr.forEach(t),zQe=r(M3e," \u2014 "),eS=n(M3e,"A",{href:!0});var vzr=s(eS);WQe=r(vzr,"MBartConfig"),vzr.forEach(t),QQe=r(M3e," (mBART model)"),M3e.forEach(t),HQe=i(y),Tm=n(y,"LI",{});var E3e=s(Tm);Ere=n(E3e,"STRONG",{});var Fzr=s(Ere);UQe=r(Fzr,"megatron-bert"),Fzr.forEach(t),JQe=r(E3e," \u2014 "),oS=n(E3e,"A",{href:!0});var Tzr=s(oS);YQe=r(Tzr,"MegatronBertConfig"),Tzr.forEach(t),KQe=r(E3e," (MegatronBert model)"),E3e.forEach(t),ZQe=i(y),Mm=n(y,"LI",{});var C3e=s(Mm);Cre=n(C3e,"STRONG",{});var Mzr=s(Cre);eHe=r(Mzr,"mobilebert"),Mzr.forEach(t),oHe=r(C3e," \u2014 "),rS=n(C3e,"A",{href:!0});var Ezr=s(rS);rHe=r(Ezr,"MobileBertConfig"),Ezr.forEach(t),tHe=r(C3e," (MobileBERT model)"),C3e.forEach(t),aHe=i(y),Em=n(y,"LI",{});var w3e=s(Em);wre=n(w3e,"STRONG",{});var Czr=s(wre);nHe=r(Czr,"mpnet"),Czr.forEach(t),sHe=r(w3e," \u2014 "),tS=n(w3e,"A",{href:!0});var wzr=s(tS);lHe=r(wzr,"MPNetConfig"),wzr.forEach(t),iHe=r(w3e," (MPNet model)"),w3e.forEach(t),dHe=i(y),Cm=n(y,"LI",{});var A3e=s(Cm);Are=n(A3e,"STRONG",{});var Azr=s(Are);cHe=r(Azr,"mt5"),Azr.forEach(t),fHe=r(A3e," \u2014 "),aS=n(A3e,"A",{href:!0});var yzr=s(aS);mHe=r(yzr,"MT5Config"),yzr.forEach(t),gHe=r(A3e," (mT5 model)"),A3e.forEach(t),hHe=i(y),wm=n(y,"LI",{});var y3e=s(wm);yre=n(y3e,"STRONG",{});var Lzr=s(yre);pHe=r(Lzr,"nystromformer"),Lzr.forEach(t),_He=r(y3e," \u2014 "),nS=n(y3e,"A",{href:!0});var xzr=s(nS);uHe=r(xzr,"NystromformerConfig"),xzr.forEach(t),bHe=r(y3e," (Nystromformer model)"),y3e.forEach(t),vHe=i(y),Am=n(y,"LI",{});var L3e=s(Am);Lre=n(L3e,"STRONG",{});var $zr=s(Lre);FHe=r($zr,"openai-gpt"),$zr.forEach(t),THe=r(L3e," \u2014 "),sS=n(L3e,"A",{href:!0});var kzr=s(sS);MHe=r(kzr,"OpenAIGPTConfig"),kzr.forEach(t),EHe=r(L3e," (OpenAI GPT model)"),L3e.forEach(t),CHe=i(y),ym=n(y,"LI",{});var x3e=s(ym);xre=n(x3e,"STRONG",{});var Szr=s(xre);wHe=r(Szr,"opt"),Szr.forEach(t),AHe=r(x3e," \u2014 "),lS=n(x3e,"A",{href:!0});var Rzr=s(lS);yHe=r(Rzr,"OPTConfig"),Rzr.forEach(t),LHe=r(x3e," (OPT model)"),x3e.forEach(t),xHe=i(y),Lm=n(y,"LI",{});var $3e=s(Lm);$re=n($3e,"STRONG",{});var Pzr=s($re);$He=r(Pzr,"pegasus"),Pzr.forEach(t),kHe=r($3e," \u2014 "),iS=n($3e,"A",{href:!0});var Bzr=s(iS);SHe=r(Bzr,"PegasusConfig"),Bzr.forEach(t),RHe=r($3e," (Pegasus model)"),$3e.forEach(t),PHe=i(y),xm=n(y,"LI",{});var k3e=s(xm);kre=n(k3e,"STRONG",{});var Izr=s(kre);BHe=r(Izr,"perceiver"),Izr.forEach(t),IHe=r(k3e," \u2014 "),dS=n(k3e,"A",{href:!0});var Nzr=s(dS);NHe=r(Nzr,"PerceiverConfig"),Nzr.forEach(t),qHe=r(k3e," (Perceiver model)"),k3e.forEach(t),jHe=i(y),$m=n(y,"LI",{});var S3e=s($m);Sre=n(S3e,"STRONG",{});var qzr=s(Sre);DHe=r(qzr,"plbart"),qzr.forEach(t),GHe=r(S3e," \u2014 "),cS=n(S3e,"A",{href:!0});var jzr=s(cS);OHe=r(jzr,"PLBartConfig"),jzr.forEach(t),VHe=r(S3e," (PLBart model)"),S3e.forEach(t),XHe=i(y),km=n(y,"LI",{});var R3e=s(km);Rre=n(R3e,"STRONG",{});var Dzr=s(Rre);zHe=r(Dzr,"poolformer"),Dzr.forEach(t),WHe=r(R3e," \u2014 "),fS=n(R3e,"A",{href:!0});var Gzr=s(fS);QHe=r(Gzr,"PoolFormerConfig"),Gzr.forEach(t),HHe=r(R3e," (PoolFormer model)"),R3e.forEach(t),UHe=i(y),Sm=n(y,"LI",{});var P3e=s(Sm);Pre=n(P3e,"STRONG",{});var Ozr=s(Pre);JHe=r(Ozr,"prophetnet"),Ozr.forEach(t),YHe=r(P3e," \u2014 "),mS=n(P3e,"A",{href:!0});var Vzr=s(mS);KHe=r(Vzr,"ProphetNetConfig"),Vzr.forEach(t),ZHe=r(P3e," (ProphetNet model)"),P3e.forEach(t),eUe=i(y),Rm=n(y,"LI",{});var B3e=s(Rm);Bre=n(B3e,"STRONG",{});var Xzr=s(Bre);oUe=r(Xzr,"qdqbert"),Xzr.forEach(t),rUe=r(B3e," \u2014 "),gS=n(B3e,"A",{href:!0});var zzr=s(gS);tUe=r(zzr,"QDQBertConfig"),zzr.forEach(t),aUe=r(B3e," (QDQBert model)"),B3e.forEach(t),nUe=i(y),Pm=n(y,"LI",{});var I3e=s(Pm);Ire=n(I3e,"STRONG",{});var Wzr=s(Ire);sUe=r(Wzr,"rag"),Wzr.forEach(t),lUe=r(I3e," \u2014 "),hS=n(I3e,"A",{href:!0});var Qzr=s(hS);iUe=r(Qzr,"RagConfig"),Qzr.forEach(t),dUe=r(I3e," (RAG model)"),I3e.forEach(t),cUe=i(y),Bm=n(y,"LI",{});var N3e=s(Bm);Nre=n(N3e,"STRONG",{});var Hzr=s(Nre);fUe=r(Hzr,"realm"),Hzr.forEach(t),mUe=r(N3e," \u2014 "),pS=n(N3e,"A",{href:!0});var Uzr=s(pS);gUe=r(Uzr,"RealmConfig"),Uzr.forEach(t),hUe=r(N3e," (Realm model)"),N3e.forEach(t),pUe=i(y),Im=n(y,"LI",{});var q3e=s(Im);qre=n(q3e,"STRONG",{});var Jzr=s(qre);_Ue=r(Jzr,"reformer"),Jzr.forEach(t),uUe=r(q3e," \u2014 "),_S=n(q3e,"A",{href:!0});var Yzr=s(_S);bUe=r(Yzr,"ReformerConfig"),Yzr.forEach(t),vUe=r(q3e," (Reformer model)"),q3e.forEach(t),FUe=i(y),Nm=n(y,"LI",{});var j3e=s(Nm);jre=n(j3e,"STRONG",{});var Kzr=s(jre);TUe=r(Kzr,"regnet"),Kzr.forEach(t),MUe=r(j3e," \u2014 "),uS=n(j3e,"A",{href:!0});var Zzr=s(uS);EUe=r(Zzr,"RegNetConfig"),Zzr.forEach(t),CUe=r(j3e," (RegNet model)"),j3e.forEach(t),wUe=i(y),qm=n(y,"LI",{});var D3e=s(qm);Dre=n(D3e,"STRONG",{});var eWr=s(Dre);AUe=r(eWr,"rembert"),eWr.forEach(t),yUe=r(D3e," \u2014 "),bS=n(D3e,"A",{href:!0});var oWr=s(bS);LUe=r(oWr,"RemBertConfig"),oWr.forEach(t),xUe=r(D3e," (RemBERT model)"),D3e.forEach(t),$Ue=i(y),jm=n(y,"LI",{});var G3e=s(jm);Gre=n(G3e,"STRONG",{});var rWr=s(Gre);kUe=r(rWr,"resnet"),rWr.forEach(t),SUe=r(G3e," \u2014 "),vS=n(G3e,"A",{href:!0});var tWr=s(vS);RUe=r(tWr,"ResNetConfig"),tWr.forEach(t),PUe=r(G3e," (ResNet model)"),G3e.forEach(t),BUe=i(y),Dm=n(y,"LI",{});var O3e=s(Dm);Ore=n(O3e,"STRONG",{});var aWr=s(Ore);IUe=r(aWr,"retribert"),aWr.forEach(t),NUe=r(O3e," \u2014 "),FS=n(O3e,"A",{href:!0});var nWr=s(FS);qUe=r(nWr,"RetriBertConfig"),nWr.forEach(t),jUe=r(O3e," (RetriBERT model)"),O3e.forEach(t),DUe=i(y),Gm=n(y,"LI",{});var V3e=s(Gm);Vre=n(V3e,"STRONG",{});var sWr=s(Vre);GUe=r(sWr,"roberta"),sWr.forEach(t),OUe=r(V3e," \u2014 "),TS=n(V3e,"A",{href:!0});var lWr=s(TS);VUe=r(lWr,"RobertaConfig"),lWr.forEach(t),XUe=r(V3e," (RoBERTa model)"),V3e.forEach(t),zUe=i(y),Om=n(y,"LI",{});var X3e=s(Om);Xre=n(X3e,"STRONG",{});var iWr=s(Xre);WUe=r(iWr,"roformer"),iWr.forEach(t),QUe=r(X3e," \u2014 "),MS=n(X3e,"A",{href:!0});var dWr=s(MS);HUe=r(dWr,"RoFormerConfig"),dWr.forEach(t),UUe=r(X3e," (RoFormer model)"),X3e.forEach(t),JUe=i(y),Vm=n(y,"LI",{});var z3e=s(Vm);zre=n(z3e,"STRONG",{});var cWr=s(zre);YUe=r(cWr,"segformer"),cWr.forEach(t),KUe=r(z3e," \u2014 "),ES=n(z3e,"A",{href:!0});var fWr=s(ES);ZUe=r(fWr,"SegformerConfig"),fWr.forEach(t),eJe=r(z3e," (SegFormer model)"),z3e.forEach(t),oJe=i(y),Xm=n(y,"LI",{});var W3e=s(Xm);Wre=n(W3e,"STRONG",{});var mWr=s(Wre);rJe=r(mWr,"sew"),mWr.forEach(t),tJe=r(W3e," \u2014 "),CS=n(W3e,"A",{href:!0});var gWr=s(CS);aJe=r(gWr,"SEWConfig"),gWr.forEach(t),nJe=r(W3e," (SEW model)"),W3e.forEach(t),sJe=i(y),zm=n(y,"LI",{});var Q3e=s(zm);Qre=n(Q3e,"STRONG",{});var hWr=s(Qre);lJe=r(hWr,"sew-d"),hWr.forEach(t),iJe=r(Q3e," \u2014 "),wS=n(Q3e,"A",{href:!0});var pWr=s(wS);dJe=r(pWr,"SEWDConfig"),pWr.forEach(t),cJe=r(Q3e," (SEW-D model)"),Q3e.forEach(t),fJe=i(y),Wm=n(y,"LI",{});var H3e=s(Wm);Hre=n(H3e,"STRONG",{});var _Wr=s(Hre);mJe=r(_Wr,"speech-encoder-decoder"),_Wr.forEach(t),gJe=r(H3e," \u2014 "),AS=n(H3e,"A",{href:!0});var uWr=s(AS);hJe=r(uWr,"SpeechEncoderDecoderConfig"),uWr.forEach(t),pJe=r(H3e," (Speech Encoder decoder model)"),H3e.forEach(t),_Je=i(y),Qm=n(y,"LI",{});var U3e=s(Qm);Ure=n(U3e,"STRONG",{});var bWr=s(Ure);uJe=r(bWr,"speech_to_text"),bWr.forEach(t),bJe=r(U3e," \u2014 "),yS=n(U3e,"A",{href:!0});var vWr=s(yS);vJe=r(vWr,"Speech2TextConfig"),vWr.forEach(t),FJe=r(U3e," (Speech2Text model)"),U3e.forEach(t),TJe=i(y),Hm=n(y,"LI",{});var J3e=s(Hm);Jre=n(J3e,"STRONG",{});var FWr=s(Jre);MJe=r(FWr,"speech_to_text_2"),FWr.forEach(t),EJe=r(J3e," \u2014 "),LS=n(J3e,"A",{href:!0});var TWr=s(LS);CJe=r(TWr,"Speech2Text2Config"),TWr.forEach(t),wJe=r(J3e," (Speech2Text2 model)"),J3e.forEach(t),AJe=i(y),Um=n(y,"LI",{});var Y3e=s(Um);Yre=n(Y3e,"STRONG",{});var MWr=s(Yre);yJe=r(MWr,"splinter"),MWr.forEach(t),LJe=r(Y3e," \u2014 "),xS=n(Y3e,"A",{href:!0});var EWr=s(xS);xJe=r(EWr,"SplinterConfig"),EWr.forEach(t),$Je=r(Y3e," (Splinter model)"),Y3e.forEach(t),kJe=i(y),Jm=n(y,"LI",{});var K3e=s(Jm);Kre=n(K3e,"STRONG",{});var CWr=s(Kre);SJe=r(CWr,"squeezebert"),CWr.forEach(t),RJe=r(K3e," \u2014 "),$S=n(K3e,"A",{href:!0});var wWr=s($S);PJe=r(wWr,"SqueezeBertConfig"),wWr.forEach(t),BJe=r(K3e," (SqueezeBERT model)"),K3e.forEach(t),IJe=i(y),Ym=n(y,"LI",{});var Z3e=s(Ym);Zre=n(Z3e,"STRONG",{});var AWr=s(Zre);NJe=r(AWr,"swin"),AWr.forEach(t),qJe=r(Z3e," \u2014 "),kS=n(Z3e,"A",{href:!0});var yWr=s(kS);jJe=r(yWr,"SwinConfig"),yWr.forEach(t),DJe=r(Z3e," (Swin model)"),Z3e.forEach(t),GJe=i(y),Km=n(y,"LI",{});var ewe=s(Km);ete=n(ewe,"STRONG",{});var LWr=s(ete);OJe=r(LWr,"t5"),LWr.forEach(t),VJe=r(ewe," \u2014 "),SS=n(ewe,"A",{href:!0});var xWr=s(SS);XJe=r(xWr,"T5Config"),xWr.forEach(t),zJe=r(ewe," (T5 model)"),ewe.forEach(t),WJe=i(y),Zm=n(y,"LI",{});var owe=s(Zm);ote=n(owe,"STRONG",{});var $Wr=s(ote);QJe=r($Wr,"tapas"),$Wr.forEach(t),HJe=r(owe," \u2014 "),RS=n(owe,"A",{href:!0});var kWr=s(RS);UJe=r(kWr,"TapasConfig"),kWr.forEach(t),JJe=r(owe," (TAPAS model)"),owe.forEach(t),YJe=i(y),eg=n(y,"LI",{});var rwe=s(eg);rte=n(rwe,"STRONG",{});var SWr=s(rte);KJe=r(SWr,"trajectory_transformer"),SWr.forEach(t),ZJe=r(rwe," \u2014 "),PS=n(rwe,"A",{href:!0});var RWr=s(PS);eYe=r(RWr,"TrajectoryTransformerConfig"),RWr.forEach(t),oYe=r(rwe," (Trajectory Transformer model)"),rwe.forEach(t),rYe=i(y),og=n(y,"LI",{});var twe=s(og);tte=n(twe,"STRONG",{});var PWr=s(tte);tYe=r(PWr,"transfo-xl"),PWr.forEach(t),aYe=r(twe," \u2014 "),BS=n(twe,"A",{href:!0});var BWr=s(BS);nYe=r(BWr,"TransfoXLConfig"),BWr.forEach(t),sYe=r(twe," (Transformer-XL model)"),twe.forEach(t),lYe=i(y),rg=n(y,"LI",{});var awe=s(rg);ate=n(awe,"STRONG",{});var IWr=s(ate);iYe=r(IWr,"trocr"),IWr.forEach(t),dYe=r(awe," \u2014 "),IS=n(awe,"A",{href:!0});var NWr=s(IS);cYe=r(NWr,"TrOCRConfig"),NWr.forEach(t),fYe=r(awe," (TrOCR model)"),awe.forEach(t),mYe=i(y),tg=n(y,"LI",{});var nwe=s(tg);nte=n(nwe,"STRONG",{});var qWr=s(nte);gYe=r(qWr,"unispeech"),qWr.forEach(t),hYe=r(nwe," \u2014 "),NS=n(nwe,"A",{href:!0});var jWr=s(NS);pYe=r(jWr,"UniSpeechConfig"),jWr.forEach(t),_Ye=r(nwe," (UniSpeech model)"),nwe.forEach(t),uYe=i(y),ag=n(y,"LI",{});var swe=s(ag);ste=n(swe,"STRONG",{});var DWr=s(ste);bYe=r(DWr,"unispeech-sat"),DWr.forEach(t),vYe=r(swe," \u2014 "),qS=n(swe,"A",{href:!0});var GWr=s(qS);FYe=r(GWr,"UniSpeechSatConfig"),GWr.forEach(t),TYe=r(swe," (UniSpeechSat model)"),swe.forEach(t),MYe=i(y),ng=n(y,"LI",{});var lwe=s(ng);lte=n(lwe,"STRONG",{});var OWr=s(lte);EYe=r(OWr,"van"),OWr.forEach(t),CYe=r(lwe," \u2014 "),jS=n(lwe,"A",{href:!0});var VWr=s(jS);wYe=r(VWr,"VanConfig"),VWr.forEach(t),AYe=r(lwe," (VAN model)"),lwe.forEach(t),yYe=i(y),sg=n(y,"LI",{});var iwe=s(sg);ite=n(iwe,"STRONG",{});var XWr=s(ite);LYe=r(XWr,"vilt"),XWr.forEach(t),xYe=r(iwe," \u2014 "),DS=n(iwe,"A",{href:!0});var zWr=s(DS);$Ye=r(zWr,"ViltConfig"),zWr.forEach(t),kYe=r(iwe," (ViLT model)"),iwe.forEach(t),SYe=i(y),lg=n(y,"LI",{});var dwe=s(lg);dte=n(dwe,"STRONG",{});var WWr=s(dte);RYe=r(WWr,"vision-encoder-decoder"),WWr.forEach(t),PYe=r(dwe," \u2014 "),GS=n(dwe,"A",{href:!0});var QWr=s(GS);BYe=r(QWr,"VisionEncoderDecoderConfig"),QWr.forEach(t),IYe=r(dwe," (Vision Encoder decoder model)"),dwe.forEach(t),NYe=i(y),ig=n(y,"LI",{});var cwe=s(ig);cte=n(cwe,"STRONG",{});var HWr=s(cte);qYe=r(HWr,"vision-text-dual-encoder"),HWr.forEach(t),jYe=r(cwe," \u2014 "),OS=n(cwe,"A",{href:!0});var UWr=s(OS);DYe=r(UWr,"VisionTextDualEncoderConfig"),UWr.forEach(t),GYe=r(cwe," (VisionTextDualEncoder model)"),cwe.forEach(t),OYe=i(y),dg=n(y,"LI",{});var fwe=s(dg);fte=n(fwe,"STRONG",{});var JWr=s(fte);VYe=r(JWr,"visual_bert"),JWr.forEach(t),XYe=r(fwe," \u2014 "),VS=n(fwe,"A",{href:!0});var YWr=s(VS);zYe=r(YWr,"VisualBertConfig"),YWr.forEach(t),WYe=r(fwe," (VisualBert model)"),fwe.forEach(t),QYe=i(y),cg=n(y,"LI",{});var mwe=s(cg);mte=n(mwe,"STRONG",{});var KWr=s(mte);HYe=r(KWr,"vit"),KWr.forEach(t),UYe=r(mwe," \u2014 "),XS=n(mwe,"A",{href:!0});var ZWr=s(XS);JYe=r(ZWr,"ViTConfig"),ZWr.forEach(t),YYe=r(mwe," (ViT model)"),mwe.forEach(t),KYe=i(y),fg=n(y,"LI",{});var gwe=s(fg);gte=n(gwe,"STRONG",{});var eQr=s(gte);ZYe=r(eQr,"vit_mae"),eQr.forEach(t),eKe=r(gwe," \u2014 "),zS=n(gwe,"A",{href:!0});var oQr=s(zS);oKe=r(oQr,"ViTMAEConfig"),oQr.forEach(t),rKe=r(gwe," (ViTMAE model)"),gwe.forEach(t),tKe=i(y),mg=n(y,"LI",{});var hwe=s(mg);hte=n(hwe,"STRONG",{});var rQr=s(hte);aKe=r(rQr,"wav2vec2"),rQr.forEach(t),nKe=r(hwe," \u2014 "),WS=n(hwe,"A",{href:!0});var tQr=s(WS);sKe=r(tQr,"Wav2Vec2Config"),tQr.forEach(t),lKe=r(hwe," (Wav2Vec2 model)"),hwe.forEach(t),iKe=i(y),gg=n(y,"LI",{});var pwe=s(gg);pte=n(pwe,"STRONG",{});var aQr=s(pte);dKe=r(aQr,"wav2vec2-conformer"),aQr.forEach(t),cKe=r(pwe," \u2014 "),QS=n(pwe,"A",{href:!0});var nQr=s(QS);fKe=r(nQr,"Wav2Vec2ConformerConfig"),nQr.forEach(t),mKe=r(pwe," (Wav2Vec2-Conformer model)"),pwe.forEach(t),gKe=i(y),hg=n(y,"LI",{});var _we=s(hg);_te=n(_we,"STRONG",{});var sQr=s(_te);hKe=r(sQr,"wavlm"),sQr.forEach(t),pKe=r(_we," \u2014 "),HS=n(_we,"A",{href:!0});var lQr=s(HS);_Ke=r(lQr,"WavLMConfig"),lQr.forEach(t),uKe=r(_we," (WavLM model)"),_we.forEach(t),bKe=i(y),pg=n(y,"LI",{});var uwe=s(pg);ute=n(uwe,"STRONG",{});var iQr=s(ute);vKe=r(iQr,"xglm"),iQr.forEach(t),FKe=r(uwe," \u2014 "),US=n(uwe,"A",{href:!0});var dQr=s(US);TKe=r(dQr,"XGLMConfig"),dQr.forEach(t),MKe=r(uwe," (XGLM model)"),uwe.forEach(t),EKe=i(y),_g=n(y,"LI",{});var bwe=s(_g);bte=n(bwe,"STRONG",{});var cQr=s(bte);CKe=r(cQr,"xlm"),cQr.forEach(t),wKe=r(bwe," \u2014 "),JS=n(bwe,"A",{href:!0});var fQr=s(JS);AKe=r(fQr,"XLMConfig"),fQr.forEach(t),yKe=r(bwe," (XLM model)"),bwe.forEach(t),LKe=i(y),ug=n(y,"LI",{});var vwe=s(ug);vte=n(vwe,"STRONG",{});var mQr=s(vte);xKe=r(mQr,"xlm-prophetnet"),mQr.forEach(t),$Ke=r(vwe," \u2014 "),YS=n(vwe,"A",{href:!0});var gQr=s(YS);kKe=r(gQr,"XLMProphetNetConfig"),gQr.forEach(t),SKe=r(vwe," (XLMProphetNet model)"),vwe.forEach(t),RKe=i(y),bg=n(y,"LI",{});var Fwe=s(bg);Fte=n(Fwe,"STRONG",{});var hQr=s(Fte);PKe=r(hQr,"xlm-roberta"),hQr.forEach(t),BKe=r(Fwe," \u2014 "),KS=n(Fwe,"A",{href:!0});var pQr=s(KS);IKe=r(pQr,"XLMRobertaConfig"),pQr.forEach(t),NKe=r(Fwe," (XLM-RoBERTa model)"),Fwe.forEach(t),qKe=i(y),vg=n(y,"LI",{});var Twe=s(vg);Tte=n(Twe,"STRONG",{});var _Qr=s(Tte);jKe=r(_Qr,"xlm-roberta-xl"),_Qr.forEach(t),DKe=r(Twe," \u2014 "),ZS=n(Twe,"A",{href:!0});var uQr=s(ZS);GKe=r(uQr,"XLMRobertaXLConfig"),uQr.forEach(t),OKe=r(Twe," (XLM-RoBERTa-XL model)"),Twe.forEach(t),VKe=i(y),Fg=n(y,"LI",{});var Mwe=s(Fg);Mte=n(Mwe,"STRONG",{});var bQr=s(Mte);XKe=r(bQr,"xlnet"),bQr.forEach(t),zKe=r(Mwe," \u2014 "),eR=n(Mwe,"A",{href:!0});var vQr=s(eR);WKe=r(vQr,"XLNetConfig"),vQr.forEach(t),QKe=r(Mwe," (XLNet model)"),Mwe.forEach(t),HKe=i(y),Tg=n(y,"LI",{});var Ewe=s(Tg);Ete=n(Ewe,"STRONG",{});var FQr=s(Ete);UKe=r(FQr,"yolos"),FQr.forEach(t),JKe=r(Ewe," \u2014 "),oR=n(Ewe,"A",{href:!0});var TQr=s(oR);YKe=r(TQr,"YolosConfig"),TQr.forEach(t),KKe=r(Ewe," (YOLOS model)"),Ewe.forEach(t),ZKe=i(y),Mg=n(y,"LI",{});var Cwe=s(Mg);Cte=n(Cwe,"STRONG",{});var MQr=s(Cte);eZe=r(MQr,"yoso"),MQr.forEach(t),oZe=r(Cwe," \u2014 "),rR=n(Cwe,"A",{href:!0});var EQr=s(rR);rZe=r(EQr,"YosoConfig"),EQr.forEach(t),tZe=r(Cwe," (YOSO model)"),Cwe.forEach(t),y.forEach(t),aZe=i(ot),T(Eg.$$.fragment,ot),ot.forEach(t),nZe=i(et),Cg=n(et,"DIV",{class:!0});var bDe=s(Cg);T(q6.$$.fragment,bDe),sZe=i(bDe),wte=n(bDe,"P",{});var CQr=s(wte);lZe=r(CQr,"Register a new configuration for this class."),CQr.forEach(t),bDe.forEach(t),et.forEach(t),Tqe=i(f),Ti=n(f,"H2",{class:!0});var vDe=s(Ti);wg=n(vDe,"A",{id:!0,class:!0,href:!0});var wQr=s(wg);Ate=n(wQr,"SPAN",{});var AQr=s(Ate);T(j6.$$.fragment,AQr),AQr.forEach(t),wQr.forEach(t),iZe=i(vDe),yte=n(vDe,"SPAN",{});var yQr=s(yte);dZe=r(yQr,"AutoTokenizer"),yQr.forEach(t),vDe.forEach(t),Mqe=i(f),wo=n(f,"DIV",{class:!0});var Ns=s(wo);T(D6.$$.fragment,Ns),cZe=i(Ns),G6=n(Ns,"P",{});var FDe=s(G6);fZe=r(FDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tR=n(FDe,"A",{href:!0});var LQr=s(tR);mZe=r(LQr,"AutoTokenizer.from_pretrained()"),LQr.forEach(t),gZe=r(FDe," class method."),FDe.forEach(t),hZe=i(Ns),O6=n(Ns,"P",{});var TDe=s(O6);pZe=r(TDe,"This class cannot be instantiated directly using "),Lte=n(TDe,"CODE",{});var xQr=s(Lte);_Ze=r(xQr,"__init__()"),xQr.forEach(t),uZe=r(TDe," (throws an error)."),TDe.forEach(t),bZe=i(Ns),Cr=n(Ns,"DIV",{class:!0});var qs=s(Cr);T(V6.$$.fragment,qs),vZe=i(qs),xte=n(qs,"P",{});var $Qr=s(xte);FZe=r($Qr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),$Qr.forEach(t),TZe=i(qs),Aa=n(qs,"P",{});var Rw=s(Aa);MZe=r(Rw,"The tokenizer class to instantiate is selected based on the "),$te=n(Rw,"CODE",{});var kQr=s($te);EZe=r(kQr,"model_type"),kQr.forEach(t),CZe=r(Rw,` property of the config object (either
passed as an argument or loaded from `),kte=n(Rw,"CODE",{});var SQr=s(kte);wZe=r(SQr,"pretrained_model_name_or_path"),SQr.forEach(t),AZe=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ste=n(Rw,"CODE",{});var RQr=s(Ste);yZe=r(RQr,"pretrained_model_name_or_path"),RQr.forEach(t),LZe=r(Rw,":"),Rw.forEach(t),xZe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Xx=s(Sn);Rte=n(Xx,"STRONG",{});var PQr=s(Rte);$Ze=r(PQr,"albert"),PQr.forEach(t),kZe=r(Xx," \u2014 "),aR=n(Xx,"A",{href:!0});var BQr=s(aR);SZe=r(BQr,"AlbertTokenizer"),BQr.forEach(t),RZe=r(Xx," or "),nR=n(Xx,"A",{href:!0});var IQr=s(nR);PZe=r(IQr,"AlbertTokenizerFast"),IQr.forEach(t),BZe=r(Xx," (ALBERT model)"),Xx.forEach(t),IZe=i(S),Rn=n(S,"LI",{});var zx=s(Rn);Pte=n(zx,"STRONG",{});var NQr=s(Pte);NZe=r(NQr,"bart"),NQr.forEach(t),qZe=r(zx," \u2014 "),sR=n(zx,"A",{href:!0});var qQr=s(sR);jZe=r(qQr,"BartTokenizer"),qQr.forEach(t),DZe=r(zx," or "),lR=n(zx,"A",{href:!0});var jQr=s(lR);GZe=r(jQr,"BartTokenizerFast"),jQr.forEach(t),OZe=r(zx," (BART model)"),zx.forEach(t),VZe=i(S),Pn=n(S,"LI",{});var Wx=s(Pn);Bte=n(Wx,"STRONG",{});var DQr=s(Bte);XZe=r(DQr,"barthez"),DQr.forEach(t),zZe=r(Wx," \u2014 "),iR=n(Wx,"A",{href:!0});var GQr=s(iR);WZe=r(GQr,"BarthezTokenizer"),GQr.forEach(t),QZe=r(Wx," or "),dR=n(Wx,"A",{href:!0});var OQr=s(dR);HZe=r(OQr,"BarthezTokenizerFast"),OQr.forEach(t),UZe=r(Wx," (BARThez model)"),Wx.forEach(t),JZe=i(S),Ag=n(S,"LI",{});var wwe=s(Ag);Ite=n(wwe,"STRONG",{});var VQr=s(Ite);YZe=r(VQr,"bartpho"),VQr.forEach(t),KZe=r(wwe," \u2014 "),cR=n(wwe,"A",{href:!0});var XQr=s(cR);ZZe=r(XQr,"BartphoTokenizer"),XQr.forEach(t),eeo=r(wwe," (BARTpho model)"),wwe.forEach(t),oeo=i(S),Bn=n(S,"LI",{});var Qx=s(Bn);Nte=n(Qx,"STRONG",{});var zQr=s(Nte);reo=r(zQr,"bert"),zQr.forEach(t),teo=r(Qx," \u2014 "),fR=n(Qx,"A",{href:!0});var WQr=s(fR);aeo=r(WQr,"BertTokenizer"),WQr.forEach(t),neo=r(Qx," or "),mR=n(Qx,"A",{href:!0});var QQr=s(mR);seo=r(QQr,"BertTokenizerFast"),QQr.forEach(t),leo=r(Qx," (BERT model)"),Qx.forEach(t),ieo=i(S),yg=n(S,"LI",{});var Awe=s(yg);qte=n(Awe,"STRONG",{});var HQr=s(qte);deo=r(HQr,"bert-generation"),HQr.forEach(t),ceo=r(Awe," \u2014 "),gR=n(Awe,"A",{href:!0});var UQr=s(gR);feo=r(UQr,"BertGenerationTokenizer"),UQr.forEach(t),meo=r(Awe," (Bert Generation model)"),Awe.forEach(t),geo=i(S),Lg=n(S,"LI",{});var ywe=s(Lg);jte=n(ywe,"STRONG",{});var JQr=s(jte);heo=r(JQr,"bert-japanese"),JQr.forEach(t),peo=r(ywe," \u2014 "),hR=n(ywe,"A",{href:!0});var YQr=s(hR);_eo=r(YQr,"BertJapaneseTokenizer"),YQr.forEach(t),ueo=r(ywe," (BertJapanese model)"),ywe.forEach(t),beo=i(S),xg=n(S,"LI",{});var Lwe=s(xg);Dte=n(Lwe,"STRONG",{});var KQr=s(Dte);veo=r(KQr,"bertweet"),KQr.forEach(t),Feo=r(Lwe," \u2014 "),pR=n(Lwe,"A",{href:!0});var ZQr=s(pR);Teo=r(ZQr,"BertweetTokenizer"),ZQr.forEach(t),Meo=r(Lwe," (Bertweet model)"),Lwe.forEach(t),Eeo=i(S),In=n(S,"LI",{});var Hx=s(In);Gte=n(Hx,"STRONG",{});var eHr=s(Gte);Ceo=r(eHr,"big_bird"),eHr.forEach(t),weo=r(Hx," \u2014 "),_R=n(Hx,"A",{href:!0});var oHr=s(_R);Aeo=r(oHr,"BigBirdTokenizer"),oHr.forEach(t),yeo=r(Hx," or "),uR=n(Hx,"A",{href:!0});var rHr=s(uR);Leo=r(rHr,"BigBirdTokenizerFast"),rHr.forEach(t),xeo=r(Hx," (BigBird model)"),Hx.forEach(t),$eo=i(S),Nn=n(S,"LI",{});var Ux=s(Nn);Ote=n(Ux,"STRONG",{});var tHr=s(Ote);keo=r(tHr,"bigbird_pegasus"),tHr.forEach(t),Seo=r(Ux," \u2014 "),bR=n(Ux,"A",{href:!0});var aHr=s(bR);Reo=r(aHr,"PegasusTokenizer"),aHr.forEach(t),Peo=r(Ux," or "),vR=n(Ux,"A",{href:!0});var nHr=s(vR);Beo=r(nHr,"PegasusTokenizerFast"),nHr.forEach(t),Ieo=r(Ux," (BigBirdPegasus model)"),Ux.forEach(t),Neo=i(S),qn=n(S,"LI",{});var Jx=s(qn);Vte=n(Jx,"STRONG",{});var sHr=s(Vte);qeo=r(sHr,"blenderbot"),sHr.forEach(t),jeo=r(Jx," \u2014 "),FR=n(Jx,"A",{href:!0});var lHr=s(FR);Deo=r(lHr,"BlenderbotTokenizer"),lHr.forEach(t),Geo=r(Jx," or "),TR=n(Jx,"A",{href:!0});var iHr=s(TR);Oeo=r(iHr,"BlenderbotTokenizerFast"),iHr.forEach(t),Veo=r(Jx," (Blenderbot model)"),Jx.forEach(t),Xeo=i(S),$g=n(S,"LI",{});var xwe=s($g);Xte=n(xwe,"STRONG",{});var dHr=s(Xte);zeo=r(dHr,"blenderbot-small"),dHr.forEach(t),Weo=r(xwe," \u2014 "),MR=n(xwe,"A",{href:!0});var cHr=s(MR);Qeo=r(cHr,"BlenderbotSmallTokenizer"),cHr.forEach(t),Heo=r(xwe," (BlenderbotSmall model)"),xwe.forEach(t),Ueo=i(S),kg=n(S,"LI",{});var $we=s(kg);zte=n($we,"STRONG",{});var fHr=s(zte);Jeo=r(fHr,"byt5"),fHr.forEach(t),Yeo=r($we," \u2014 "),ER=n($we,"A",{href:!0});var mHr=s(ER);Keo=r(mHr,"ByT5Tokenizer"),mHr.forEach(t),Zeo=r($we," (ByT5 model)"),$we.forEach(t),eoo=i(S),jn=n(S,"LI",{});var Yx=s(jn);Wte=n(Yx,"STRONG",{});var gHr=s(Wte);ooo=r(gHr,"camembert"),gHr.forEach(t),roo=r(Yx," \u2014 "),CR=n(Yx,"A",{href:!0});var hHr=s(CR);too=r(hHr,"CamembertTokenizer"),hHr.forEach(t),aoo=r(Yx," or "),wR=n(Yx,"A",{href:!0});var pHr=s(wR);noo=r(pHr,"CamembertTokenizerFast"),pHr.forEach(t),soo=r(Yx," (CamemBERT model)"),Yx.forEach(t),loo=i(S),Sg=n(S,"LI",{});var kwe=s(Sg);Qte=n(kwe,"STRONG",{});var _Hr=s(Qte);ioo=r(_Hr,"canine"),_Hr.forEach(t),doo=r(kwe," \u2014 "),AR=n(kwe,"A",{href:!0});var uHr=s(AR);coo=r(uHr,"CanineTokenizer"),uHr.forEach(t),foo=r(kwe," (Canine model)"),kwe.forEach(t),moo=i(S),Dn=n(S,"LI",{});var Kx=s(Dn);Hte=n(Kx,"STRONG",{});var bHr=s(Hte);goo=r(bHr,"clip"),bHr.forEach(t),hoo=r(Kx," \u2014 "),yR=n(Kx,"A",{href:!0});var vHr=s(yR);poo=r(vHr,"CLIPTokenizer"),vHr.forEach(t),_oo=r(Kx," or "),LR=n(Kx,"A",{href:!0});var FHr=s(LR);uoo=r(FHr,"CLIPTokenizerFast"),FHr.forEach(t),boo=r(Kx," (CLIP model)"),Kx.forEach(t),voo=i(S),Gn=n(S,"LI",{});var Zx=s(Gn);Ute=n(Zx,"STRONG",{});var THr=s(Ute);Foo=r(THr,"convbert"),THr.forEach(t),Too=r(Zx," \u2014 "),xR=n(Zx,"A",{href:!0});var MHr=s(xR);Moo=r(MHr,"ConvBertTokenizer"),MHr.forEach(t),Eoo=r(Zx," or "),$R=n(Zx,"A",{href:!0});var EHr=s($R);Coo=r(EHr,"ConvBertTokenizerFast"),EHr.forEach(t),woo=r(Zx," (ConvBERT model)"),Zx.forEach(t),Aoo=i(S),On=n(S,"LI",{});var e$=s(On);Jte=n(e$,"STRONG",{});var CHr=s(Jte);yoo=r(CHr,"cpm"),CHr.forEach(t),Loo=r(e$," \u2014 "),kR=n(e$,"A",{href:!0});var wHr=s(kR);xoo=r(wHr,"CpmTokenizer"),wHr.forEach(t),$oo=r(e$," or "),SR=n(e$,"A",{href:!0});var AHr=s(SR);koo=r(AHr,"CpmTokenizerFast"),AHr.forEach(t),Soo=r(e$," (CPM model)"),e$.forEach(t),Roo=i(S),Rg=n(S,"LI",{});var Swe=s(Rg);Yte=n(Swe,"STRONG",{});var yHr=s(Yte);Poo=r(yHr,"ctrl"),yHr.forEach(t),Boo=r(Swe," \u2014 "),RR=n(Swe,"A",{href:!0});var LHr=s(RR);Ioo=r(LHr,"CTRLTokenizer"),LHr.forEach(t),Noo=r(Swe," (CTRL model)"),Swe.forEach(t),qoo=i(S),Vn=n(S,"LI",{});var o$=s(Vn);Kte=n(o$,"STRONG",{});var xHr=s(Kte);joo=r(xHr,"data2vec-text"),xHr.forEach(t),Doo=r(o$," \u2014 "),PR=n(o$,"A",{href:!0});var $Hr=s(PR);Goo=r($Hr,"RobertaTokenizer"),$Hr.forEach(t),Ooo=r(o$," or "),BR=n(o$,"A",{href:!0});var kHr=s(BR);Voo=r(kHr,"RobertaTokenizerFast"),kHr.forEach(t),Xoo=r(o$," (Data2VecText model)"),o$.forEach(t),zoo=i(S),Xn=n(S,"LI",{});var r$=s(Xn);Zte=n(r$,"STRONG",{});var SHr=s(Zte);Woo=r(SHr,"deberta"),SHr.forEach(t),Qoo=r(r$," \u2014 "),IR=n(r$,"A",{href:!0});var RHr=s(IR);Hoo=r(RHr,"DebertaTokenizer"),RHr.forEach(t),Uoo=r(r$," or "),NR=n(r$,"A",{href:!0});var PHr=s(NR);Joo=r(PHr,"DebertaTokenizerFast"),PHr.forEach(t),Yoo=r(r$," (DeBERTa model)"),r$.forEach(t),Koo=i(S),zn=n(S,"LI",{});var t$=s(zn);eae=n(t$,"STRONG",{});var BHr=s(eae);Zoo=r(BHr,"deberta-v2"),BHr.forEach(t),ero=r(t$," \u2014 "),qR=n(t$,"A",{href:!0});var IHr=s(qR);oro=r(IHr,"DebertaV2Tokenizer"),IHr.forEach(t),rro=r(t$," or "),jR=n(t$,"A",{href:!0});var NHr=s(jR);tro=r(NHr,"DebertaV2TokenizerFast"),NHr.forEach(t),aro=r(t$," (DeBERTa-v2 model)"),t$.forEach(t),nro=i(S),Wn=n(S,"LI",{});var a$=s(Wn);oae=n(a$,"STRONG",{});var qHr=s(oae);sro=r(qHr,"distilbert"),qHr.forEach(t),lro=r(a$," \u2014 "),DR=n(a$,"A",{href:!0});var jHr=s(DR);iro=r(jHr,"DistilBertTokenizer"),jHr.forEach(t),dro=r(a$," or "),GR=n(a$,"A",{href:!0});var DHr=s(GR);cro=r(DHr,"DistilBertTokenizerFast"),DHr.forEach(t),fro=r(a$," (DistilBERT model)"),a$.forEach(t),mro=i(S),Qn=n(S,"LI",{});var n$=s(Qn);rae=n(n$,"STRONG",{});var GHr=s(rae);gro=r(GHr,"dpr"),GHr.forEach(t),hro=r(n$," \u2014 "),OR=n(n$,"A",{href:!0});var OHr=s(OR);pro=r(OHr,"DPRQuestionEncoderTokenizer"),OHr.forEach(t),_ro=r(n$," or "),VR=n(n$,"A",{href:!0});var VHr=s(VR);uro=r(VHr,"DPRQuestionEncoderTokenizerFast"),VHr.forEach(t),bro=r(n$," (DPR model)"),n$.forEach(t),vro=i(S),Hn=n(S,"LI",{});var s$=s(Hn);tae=n(s$,"STRONG",{});var XHr=s(tae);Fro=r(XHr,"electra"),XHr.forEach(t),Tro=r(s$," \u2014 "),XR=n(s$,"A",{href:!0});var zHr=s(XR);Mro=r(zHr,"ElectraTokenizer"),zHr.forEach(t),Ero=r(s$," or "),zR=n(s$,"A",{href:!0});var WHr=s(zR);Cro=r(WHr,"ElectraTokenizerFast"),WHr.forEach(t),wro=r(s$," (ELECTRA model)"),s$.forEach(t),Aro=i(S),Pg=n(S,"LI",{});var Rwe=s(Pg);aae=n(Rwe,"STRONG",{});var QHr=s(aae);yro=r(QHr,"flaubert"),QHr.forEach(t),Lro=r(Rwe," \u2014 "),WR=n(Rwe,"A",{href:!0});var HHr=s(WR);xro=r(HHr,"FlaubertTokenizer"),HHr.forEach(t),$ro=r(Rwe," (FlauBERT model)"),Rwe.forEach(t),kro=i(S),Un=n(S,"LI",{});var l$=s(Un);nae=n(l$,"STRONG",{});var UHr=s(nae);Sro=r(UHr,"fnet"),UHr.forEach(t),Rro=r(l$," \u2014 "),QR=n(l$,"A",{href:!0});var JHr=s(QR);Pro=r(JHr,"FNetTokenizer"),JHr.forEach(t),Bro=r(l$," or "),HR=n(l$,"A",{href:!0});var YHr=s(HR);Iro=r(YHr,"FNetTokenizerFast"),YHr.forEach(t),Nro=r(l$," (FNet model)"),l$.forEach(t),qro=i(S),Bg=n(S,"LI",{});var Pwe=s(Bg);sae=n(Pwe,"STRONG",{});var KHr=s(sae);jro=r(KHr,"fsmt"),KHr.forEach(t),Dro=r(Pwe," \u2014 "),UR=n(Pwe,"A",{href:!0});var ZHr=s(UR);Gro=r(ZHr,"FSMTTokenizer"),ZHr.forEach(t),Oro=r(Pwe," (FairSeq Machine-Translation model)"),Pwe.forEach(t),Vro=i(S),Jn=n(S,"LI",{});var i$=s(Jn);lae=n(i$,"STRONG",{});var eUr=s(lae);Xro=r(eUr,"funnel"),eUr.forEach(t),zro=r(i$," \u2014 "),JR=n(i$,"A",{href:!0});var oUr=s(JR);Wro=r(oUr,"FunnelTokenizer"),oUr.forEach(t),Qro=r(i$," or "),YR=n(i$,"A",{href:!0});var rUr=s(YR);Hro=r(rUr,"FunnelTokenizerFast"),rUr.forEach(t),Uro=r(i$," (Funnel Transformer model)"),i$.forEach(t),Jro=i(S),Yn=n(S,"LI",{});var d$=s(Yn);iae=n(d$,"STRONG",{});var tUr=s(iae);Yro=r(tUr,"gpt2"),tUr.forEach(t),Kro=r(d$," \u2014 "),KR=n(d$,"A",{href:!0});var aUr=s(KR);Zro=r(aUr,"GPT2Tokenizer"),aUr.forEach(t),eto=r(d$," or "),ZR=n(d$,"A",{href:!0});var nUr=s(ZR);oto=r(nUr,"GPT2TokenizerFast"),nUr.forEach(t),rto=r(d$," (OpenAI GPT-2 model)"),d$.forEach(t),tto=i(S),Kn=n(S,"LI",{});var c$=s(Kn);dae=n(c$,"STRONG",{});var sUr=s(dae);ato=r(sUr,"gpt_neo"),sUr.forEach(t),nto=r(c$," \u2014 "),eP=n(c$,"A",{href:!0});var lUr=s(eP);sto=r(lUr,"GPT2Tokenizer"),lUr.forEach(t),lto=r(c$," or "),oP=n(c$,"A",{href:!0});var iUr=s(oP);ito=r(iUr,"GPT2TokenizerFast"),iUr.forEach(t),dto=r(c$," (GPT Neo model)"),c$.forEach(t),cto=i(S),Ig=n(S,"LI",{});var Bwe=s(Ig);cae=n(Bwe,"STRONG",{});var dUr=s(cae);fto=r(dUr,"gpt_neox"),dUr.forEach(t),mto=r(Bwe," \u2014 "),rP=n(Bwe,"A",{href:!0});var cUr=s(rP);gto=r(cUr,"GPTNeoXTokenizerFast"),cUr.forEach(t),hto=r(Bwe," (GPT NeoX model)"),Bwe.forEach(t),pto=i(S),Zn=n(S,"LI",{});var f$=s(Zn);fae=n(f$,"STRONG",{});var fUr=s(fae);_to=r(fUr,"gptj"),fUr.forEach(t),uto=r(f$," \u2014 "),tP=n(f$,"A",{href:!0});var mUr=s(tP);bto=r(mUr,"GPT2Tokenizer"),mUr.forEach(t),vto=r(f$," or "),aP=n(f$,"A",{href:!0});var gUr=s(aP);Fto=r(gUr,"GPT2TokenizerFast"),gUr.forEach(t),Tto=r(f$," (GPT-J model)"),f$.forEach(t),Mto=i(S),es=n(S,"LI",{});var m$=s(es);mae=n(m$,"STRONG",{});var hUr=s(mae);Eto=r(hUr,"herbert"),hUr.forEach(t),Cto=r(m$," \u2014 "),nP=n(m$,"A",{href:!0});var pUr=s(nP);wto=r(pUr,"HerbertTokenizer"),pUr.forEach(t),Ato=r(m$," or "),sP=n(m$,"A",{href:!0});var _Ur=s(sP);yto=r(_Ur,"HerbertTokenizerFast"),_Ur.forEach(t),Lto=r(m$," (HerBERT model)"),m$.forEach(t),xto=i(S),Ng=n(S,"LI",{});var Iwe=s(Ng);gae=n(Iwe,"STRONG",{});var uUr=s(gae);$to=r(uUr,"hubert"),uUr.forEach(t),kto=r(Iwe," \u2014 "),lP=n(Iwe,"A",{href:!0});var bUr=s(lP);Sto=r(bUr,"Wav2Vec2CTCTokenizer"),bUr.forEach(t),Rto=r(Iwe," (Hubert model)"),Iwe.forEach(t),Pto=i(S),os=n(S,"LI",{});var g$=s(os);hae=n(g$,"STRONG",{});var vUr=s(hae);Bto=r(vUr,"ibert"),vUr.forEach(t),Ito=r(g$," \u2014 "),iP=n(g$,"A",{href:!0});var FUr=s(iP);Nto=r(FUr,"RobertaTokenizer"),FUr.forEach(t),qto=r(g$," or "),dP=n(g$,"A",{href:!0});var TUr=s(dP);jto=r(TUr,"RobertaTokenizerFast"),TUr.forEach(t),Dto=r(g$," (I-BERT model)"),g$.forEach(t),Gto=i(S),rs=n(S,"LI",{});var h$=s(rs);pae=n(h$,"STRONG",{});var MUr=s(pae);Oto=r(MUr,"layoutlm"),MUr.forEach(t),Vto=r(h$," \u2014 "),cP=n(h$,"A",{href:!0});var EUr=s(cP);Xto=r(EUr,"LayoutLMTokenizer"),EUr.forEach(t),zto=r(h$," or "),fP=n(h$,"A",{href:!0});var CUr=s(fP);Wto=r(CUr,"LayoutLMTokenizerFast"),CUr.forEach(t),Qto=r(h$," (LayoutLM model)"),h$.forEach(t),Hto=i(S),ts=n(S,"LI",{});var p$=s(ts);_ae=n(p$,"STRONG",{});var wUr=s(_ae);Uto=r(wUr,"layoutlmv2"),wUr.forEach(t),Jto=r(p$," \u2014 "),mP=n(p$,"A",{href:!0});var AUr=s(mP);Yto=r(AUr,"LayoutLMv2Tokenizer"),AUr.forEach(t),Kto=r(p$," or "),gP=n(p$,"A",{href:!0});var yUr=s(gP);Zto=r(yUr,"LayoutLMv2TokenizerFast"),yUr.forEach(t),eao=r(p$," (LayoutLMv2 model)"),p$.forEach(t),oao=i(S),as=n(S,"LI",{});var _$=s(as);uae=n(_$,"STRONG",{});var LUr=s(uae);rao=r(LUr,"layoutlmv3"),LUr.forEach(t),tao=r(_$," \u2014 "),hP=n(_$,"A",{href:!0});var xUr=s(hP);aao=r(xUr,"LayoutLMv3Tokenizer"),xUr.forEach(t),nao=r(_$," or "),pP=n(_$,"A",{href:!0});var $Ur=s(pP);sao=r($Ur,"LayoutLMv3TokenizerFast"),$Ur.forEach(t),lao=r(_$," (LayoutLMv3 model)"),_$.forEach(t),iao=i(S),ns=n(S,"LI",{});var u$=s(ns);bae=n(u$,"STRONG",{});var kUr=s(bae);dao=r(kUr,"layoutxlm"),kUr.forEach(t),cao=r(u$," \u2014 "),_P=n(u$,"A",{href:!0});var SUr=s(_P);fao=r(SUr,"LayoutXLMTokenizer"),SUr.forEach(t),mao=r(u$," or "),uP=n(u$,"A",{href:!0});var RUr=s(uP);gao=r(RUr,"LayoutXLMTokenizerFast"),RUr.forEach(t),hao=r(u$," (LayoutXLM model)"),u$.forEach(t),pao=i(S),ss=n(S,"LI",{});var b$=s(ss);vae=n(b$,"STRONG",{});var PUr=s(vae);_ao=r(PUr,"led"),PUr.forEach(t),uao=r(b$," \u2014 "),bP=n(b$,"A",{href:!0});var BUr=s(bP);bao=r(BUr,"LEDTokenizer"),BUr.forEach(t),vao=r(b$," or "),vP=n(b$,"A",{href:!0});var IUr=s(vP);Fao=r(IUr,"LEDTokenizerFast"),IUr.forEach(t),Tao=r(b$," (LED model)"),b$.forEach(t),Mao=i(S),ls=n(S,"LI",{});var v$=s(ls);Fae=n(v$,"STRONG",{});var NUr=s(Fae);Eao=r(NUr,"longformer"),NUr.forEach(t),Cao=r(v$," \u2014 "),FP=n(v$,"A",{href:!0});var qUr=s(FP);wao=r(qUr,"LongformerTokenizer"),qUr.forEach(t),Aao=r(v$," or "),TP=n(v$,"A",{href:!0});var jUr=s(TP);yao=r(jUr,"LongformerTokenizerFast"),jUr.forEach(t),Lao=r(v$," (Longformer model)"),v$.forEach(t),xao=i(S),qg=n(S,"LI",{});var Nwe=s(qg);Tae=n(Nwe,"STRONG",{});var DUr=s(Tae);$ao=r(DUr,"luke"),DUr.forEach(t),kao=r(Nwe," \u2014 "),MP=n(Nwe,"A",{href:!0});var GUr=s(MP);Sao=r(GUr,"LukeTokenizer"),GUr.forEach(t),Rao=r(Nwe," (LUKE model)"),Nwe.forEach(t),Pao=i(S),is=n(S,"LI",{});var F$=s(is);Mae=n(F$,"STRONG",{});var OUr=s(Mae);Bao=r(OUr,"lxmert"),OUr.forEach(t),Iao=r(F$," \u2014 "),EP=n(F$,"A",{href:!0});var VUr=s(EP);Nao=r(VUr,"LxmertTokenizer"),VUr.forEach(t),qao=r(F$," or "),CP=n(F$,"A",{href:!0});var XUr=s(CP);jao=r(XUr,"LxmertTokenizerFast"),XUr.forEach(t),Dao=r(F$," (LXMERT model)"),F$.forEach(t),Gao=i(S),jg=n(S,"LI",{});var qwe=s(jg);Eae=n(qwe,"STRONG",{});var zUr=s(Eae);Oao=r(zUr,"m2m_100"),zUr.forEach(t),Vao=r(qwe," \u2014 "),wP=n(qwe,"A",{href:!0});var WUr=s(wP);Xao=r(WUr,"M2M100Tokenizer"),WUr.forEach(t),zao=r(qwe," (M2M100 model)"),qwe.forEach(t),Wao=i(S),Dg=n(S,"LI",{});var jwe=s(Dg);Cae=n(jwe,"STRONG",{});var QUr=s(Cae);Qao=r(QUr,"marian"),QUr.forEach(t),Hao=r(jwe," \u2014 "),AP=n(jwe,"A",{href:!0});var HUr=s(AP);Uao=r(HUr,"MarianTokenizer"),HUr.forEach(t),Jao=r(jwe," (Marian model)"),jwe.forEach(t),Yao=i(S),ds=n(S,"LI",{});var T$=s(ds);wae=n(T$,"STRONG",{});var UUr=s(wae);Kao=r(UUr,"mbart"),UUr.forEach(t),Zao=r(T$," \u2014 "),yP=n(T$,"A",{href:!0});var JUr=s(yP);eno=r(JUr,"MBartTokenizer"),JUr.forEach(t),ono=r(T$," or "),LP=n(T$,"A",{href:!0});var YUr=s(LP);rno=r(YUr,"MBartTokenizerFast"),YUr.forEach(t),tno=r(T$," (mBART model)"),T$.forEach(t),ano=i(S),cs=n(S,"LI",{});var M$=s(cs);Aae=n(M$,"STRONG",{});var KUr=s(Aae);nno=r(KUr,"mbart50"),KUr.forEach(t),sno=r(M$," \u2014 "),xP=n(M$,"A",{href:!0});var ZUr=s(xP);lno=r(ZUr,"MBart50Tokenizer"),ZUr.forEach(t),ino=r(M$," or "),$P=n(M$,"A",{href:!0});var eJr=s($P);dno=r(eJr,"MBart50TokenizerFast"),eJr.forEach(t),cno=r(M$," (mBART-50 model)"),M$.forEach(t),fno=i(S),fs=n(S,"LI",{});var E$=s(fs);yae=n(E$,"STRONG",{});var oJr=s(yae);mno=r(oJr,"megatron-bert"),oJr.forEach(t),gno=r(E$," \u2014 "),kP=n(E$,"A",{href:!0});var rJr=s(kP);hno=r(rJr,"BertTokenizer"),rJr.forEach(t),pno=r(E$," or "),SP=n(E$,"A",{href:!0});var tJr=s(SP);_no=r(tJr,"BertTokenizerFast"),tJr.forEach(t),uno=r(E$," (MegatronBert model)"),E$.forEach(t),bno=i(S),Gg=n(S,"LI",{});var Dwe=s(Gg);Lae=n(Dwe,"STRONG",{});var aJr=s(Lae);vno=r(aJr,"mluke"),aJr.forEach(t),Fno=r(Dwe," \u2014 "),RP=n(Dwe,"A",{href:!0});var nJr=s(RP);Tno=r(nJr,"MLukeTokenizer"),nJr.forEach(t),Mno=r(Dwe," (mLUKE model)"),Dwe.forEach(t),Eno=i(S),ms=n(S,"LI",{});var C$=s(ms);xae=n(C$,"STRONG",{});var sJr=s(xae);Cno=r(sJr,"mobilebert"),sJr.forEach(t),wno=r(C$," \u2014 "),PP=n(C$,"A",{href:!0});var lJr=s(PP);Ano=r(lJr,"MobileBertTokenizer"),lJr.forEach(t),yno=r(C$," or "),BP=n(C$,"A",{href:!0});var iJr=s(BP);Lno=r(iJr,"MobileBertTokenizerFast"),iJr.forEach(t),xno=r(C$," (MobileBERT model)"),C$.forEach(t),$no=i(S),gs=n(S,"LI",{});var w$=s(gs);$ae=n(w$,"STRONG",{});var dJr=s($ae);kno=r(dJr,"mpnet"),dJr.forEach(t),Sno=r(w$," \u2014 "),IP=n(w$,"A",{href:!0});var cJr=s(IP);Rno=r(cJr,"MPNetTokenizer"),cJr.forEach(t),Pno=r(w$," or "),NP=n(w$,"A",{href:!0});var fJr=s(NP);Bno=r(fJr,"MPNetTokenizerFast"),fJr.forEach(t),Ino=r(w$," (MPNet model)"),w$.forEach(t),Nno=i(S),hs=n(S,"LI",{});var A$=s(hs);kae=n(A$,"STRONG",{});var mJr=s(kae);qno=r(mJr,"mt5"),mJr.forEach(t),jno=r(A$," \u2014 "),qP=n(A$,"A",{href:!0});var gJr=s(qP);Dno=r(gJr,"MT5Tokenizer"),gJr.forEach(t),Gno=r(A$," or "),jP=n(A$,"A",{href:!0});var hJr=s(jP);Ono=r(hJr,"MT5TokenizerFast"),hJr.forEach(t),Vno=r(A$," (mT5 model)"),A$.forEach(t),Xno=i(S),ps=n(S,"LI",{});var y$=s(ps);Sae=n(y$,"STRONG",{});var pJr=s(Sae);zno=r(pJr,"nystromformer"),pJr.forEach(t),Wno=r(y$," \u2014 "),DP=n(y$,"A",{href:!0});var _Jr=s(DP);Qno=r(_Jr,"AlbertTokenizer"),_Jr.forEach(t),Hno=r(y$," or "),GP=n(y$,"A",{href:!0});var uJr=s(GP);Uno=r(uJr,"AlbertTokenizerFast"),uJr.forEach(t),Jno=r(y$," (Nystromformer model)"),y$.forEach(t),Yno=i(S),_s=n(S,"LI",{});var L$=s(_s);Rae=n(L$,"STRONG",{});var bJr=s(Rae);Kno=r(bJr,"openai-gpt"),bJr.forEach(t),Zno=r(L$," \u2014 "),OP=n(L$,"A",{href:!0});var vJr=s(OP);eso=r(vJr,"OpenAIGPTTokenizer"),vJr.forEach(t),oso=r(L$," or "),VP=n(L$,"A",{href:!0});var FJr=s(VP);rso=r(FJr,"OpenAIGPTTokenizerFast"),FJr.forEach(t),tso=r(L$," (OpenAI GPT model)"),L$.forEach(t),aso=i(S),Og=n(S,"LI",{});var Gwe=s(Og);Pae=n(Gwe,"STRONG",{});var TJr=s(Pae);nso=r(TJr,"opt"),TJr.forEach(t),sso=r(Gwe," \u2014 "),XP=n(Gwe,"A",{href:!0});var MJr=s(XP);lso=r(MJr,"GPT2Tokenizer"),MJr.forEach(t),iso=r(Gwe," (OPT model)"),Gwe.forEach(t),dso=i(S),us=n(S,"LI",{});var x$=s(us);Bae=n(x$,"STRONG",{});var EJr=s(Bae);cso=r(EJr,"pegasus"),EJr.forEach(t),fso=r(x$," \u2014 "),zP=n(x$,"A",{href:!0});var CJr=s(zP);mso=r(CJr,"PegasusTokenizer"),CJr.forEach(t),gso=r(x$," or "),WP=n(x$,"A",{href:!0});var wJr=s(WP);hso=r(wJr,"PegasusTokenizerFast"),wJr.forEach(t),pso=r(x$," (Pegasus model)"),x$.forEach(t),_so=i(S),Vg=n(S,"LI",{});var Owe=s(Vg);Iae=n(Owe,"STRONG",{});var AJr=s(Iae);uso=r(AJr,"perceiver"),AJr.forEach(t),bso=r(Owe," \u2014 "),QP=n(Owe,"A",{href:!0});var yJr=s(QP);vso=r(yJr,"PerceiverTokenizer"),yJr.forEach(t),Fso=r(Owe," (Perceiver model)"),Owe.forEach(t),Tso=i(S),Xg=n(S,"LI",{});var Vwe=s(Xg);Nae=n(Vwe,"STRONG",{});var LJr=s(Nae);Mso=r(LJr,"phobert"),LJr.forEach(t),Eso=r(Vwe," \u2014 "),HP=n(Vwe,"A",{href:!0});var xJr=s(HP);Cso=r(xJr,"PhobertTokenizer"),xJr.forEach(t),wso=r(Vwe," (PhoBERT model)"),Vwe.forEach(t),Aso=i(S),zg=n(S,"LI",{});var Xwe=s(zg);qae=n(Xwe,"STRONG",{});var $Jr=s(qae);yso=r($Jr,"plbart"),$Jr.forEach(t),Lso=r(Xwe," \u2014 "),UP=n(Xwe,"A",{href:!0});var kJr=s(UP);xso=r(kJr,"PLBartTokenizer"),kJr.forEach(t),$so=r(Xwe," (PLBart model)"),Xwe.forEach(t),kso=i(S),Wg=n(S,"LI",{});var zwe=s(Wg);jae=n(zwe,"STRONG",{});var SJr=s(jae);Sso=r(SJr,"prophetnet"),SJr.forEach(t),Rso=r(zwe," \u2014 "),JP=n(zwe,"A",{href:!0});var RJr=s(JP);Pso=r(RJr,"ProphetNetTokenizer"),RJr.forEach(t),Bso=r(zwe," (ProphetNet model)"),zwe.forEach(t),Iso=i(S),bs=n(S,"LI",{});var $$=s(bs);Dae=n($$,"STRONG",{});var PJr=s(Dae);Nso=r(PJr,"qdqbert"),PJr.forEach(t),qso=r($$," \u2014 "),YP=n($$,"A",{href:!0});var BJr=s(YP);jso=r(BJr,"BertTokenizer"),BJr.forEach(t),Dso=r($$," or "),KP=n($$,"A",{href:!0});var IJr=s(KP);Gso=r(IJr,"BertTokenizerFast"),IJr.forEach(t),Oso=r($$," (QDQBert model)"),$$.forEach(t),Vso=i(S),Qg=n(S,"LI",{});var Wwe=s(Qg);Gae=n(Wwe,"STRONG",{});var NJr=s(Gae);Xso=r(NJr,"rag"),NJr.forEach(t),zso=r(Wwe," \u2014 "),ZP=n(Wwe,"A",{href:!0});var qJr=s(ZP);Wso=r(qJr,"RagTokenizer"),qJr.forEach(t),Qso=r(Wwe," (RAG model)"),Wwe.forEach(t),Hso=i(S),vs=n(S,"LI",{});var k$=s(vs);Oae=n(k$,"STRONG",{});var jJr=s(Oae);Uso=r(jJr,"realm"),jJr.forEach(t),Jso=r(k$," \u2014 "),eB=n(k$,"A",{href:!0});var DJr=s(eB);Yso=r(DJr,"RealmTokenizer"),DJr.forEach(t),Kso=r(k$," or "),oB=n(k$,"A",{href:!0});var GJr=s(oB);Zso=r(GJr,"RealmTokenizerFast"),GJr.forEach(t),elo=r(k$," (Realm model)"),k$.forEach(t),olo=i(S),Fs=n(S,"LI",{});var S$=s(Fs);Vae=n(S$,"STRONG",{});var OJr=s(Vae);rlo=r(OJr,"reformer"),OJr.forEach(t),tlo=r(S$," \u2014 "),rB=n(S$,"A",{href:!0});var VJr=s(rB);alo=r(VJr,"ReformerTokenizer"),VJr.forEach(t),nlo=r(S$," or "),tB=n(S$,"A",{href:!0});var XJr=s(tB);slo=r(XJr,"ReformerTokenizerFast"),XJr.forEach(t),llo=r(S$," (Reformer model)"),S$.forEach(t),ilo=i(S),Ts=n(S,"LI",{});var R$=s(Ts);Xae=n(R$,"STRONG",{});var zJr=s(Xae);dlo=r(zJr,"rembert"),zJr.forEach(t),clo=r(R$," \u2014 "),aB=n(R$,"A",{href:!0});var WJr=s(aB);flo=r(WJr,"RemBertTokenizer"),WJr.forEach(t),mlo=r(R$," or "),nB=n(R$,"A",{href:!0});var QJr=s(nB);glo=r(QJr,"RemBertTokenizerFast"),QJr.forEach(t),hlo=r(R$," (RemBERT model)"),R$.forEach(t),plo=i(S),Ms=n(S,"LI",{});var P$=s(Ms);zae=n(P$,"STRONG",{});var HJr=s(zae);_lo=r(HJr,"retribert"),HJr.forEach(t),ulo=r(P$," \u2014 "),sB=n(P$,"A",{href:!0});var UJr=s(sB);blo=r(UJr,"RetriBertTokenizer"),UJr.forEach(t),vlo=r(P$," or "),lB=n(P$,"A",{href:!0});var JJr=s(lB);Flo=r(JJr,"RetriBertTokenizerFast"),JJr.forEach(t),Tlo=r(P$," (RetriBERT model)"),P$.forEach(t),Mlo=i(S),Es=n(S,"LI",{});var B$=s(Es);Wae=n(B$,"STRONG",{});var YJr=s(Wae);Elo=r(YJr,"roberta"),YJr.forEach(t),Clo=r(B$," \u2014 "),iB=n(B$,"A",{href:!0});var KJr=s(iB);wlo=r(KJr,"RobertaTokenizer"),KJr.forEach(t),Alo=r(B$," or "),dB=n(B$,"A",{href:!0});var ZJr=s(dB);ylo=r(ZJr,"RobertaTokenizerFast"),ZJr.forEach(t),Llo=r(B$," (RoBERTa model)"),B$.forEach(t),xlo=i(S),Cs=n(S,"LI",{});var I$=s(Cs);Qae=n(I$,"STRONG",{});var eYr=s(Qae);$lo=r(eYr,"roformer"),eYr.forEach(t),klo=r(I$," \u2014 "),cB=n(I$,"A",{href:!0});var oYr=s(cB);Slo=r(oYr,"RoFormerTokenizer"),oYr.forEach(t),Rlo=r(I$," or "),fB=n(I$,"A",{href:!0});var rYr=s(fB);Plo=r(rYr,"RoFormerTokenizerFast"),rYr.forEach(t),Blo=r(I$," (RoFormer model)"),I$.forEach(t),Ilo=i(S),Hg=n(S,"LI",{});var Qwe=s(Hg);Hae=n(Qwe,"STRONG",{});var tYr=s(Hae);Nlo=r(tYr,"speech_to_text"),tYr.forEach(t),qlo=r(Qwe," \u2014 "),mB=n(Qwe,"A",{href:!0});var aYr=s(mB);jlo=r(aYr,"Speech2TextTokenizer"),aYr.forEach(t),Dlo=r(Qwe," (Speech2Text model)"),Qwe.forEach(t),Glo=i(S),Ug=n(S,"LI",{});var Hwe=s(Ug);Uae=n(Hwe,"STRONG",{});var nYr=s(Uae);Olo=r(nYr,"speech_to_text_2"),nYr.forEach(t),Vlo=r(Hwe," \u2014 "),gB=n(Hwe,"A",{href:!0});var sYr=s(gB);Xlo=r(sYr,"Speech2Text2Tokenizer"),sYr.forEach(t),zlo=r(Hwe," (Speech2Text2 model)"),Hwe.forEach(t),Wlo=i(S),ws=n(S,"LI",{});var N$=s(ws);Jae=n(N$,"STRONG",{});var lYr=s(Jae);Qlo=r(lYr,"splinter"),lYr.forEach(t),Hlo=r(N$," \u2014 "),hB=n(N$,"A",{href:!0});var iYr=s(hB);Ulo=r(iYr,"SplinterTokenizer"),iYr.forEach(t),Jlo=r(N$," or "),pB=n(N$,"A",{href:!0});var dYr=s(pB);Ylo=r(dYr,"SplinterTokenizerFast"),dYr.forEach(t),Klo=r(N$," (Splinter model)"),N$.forEach(t),Zlo=i(S),As=n(S,"LI",{});var q$=s(As);Yae=n(q$,"STRONG",{});var cYr=s(Yae);eio=r(cYr,"squeezebert"),cYr.forEach(t),oio=r(q$," \u2014 "),_B=n(q$,"A",{href:!0});var fYr=s(_B);rio=r(fYr,"SqueezeBertTokenizer"),fYr.forEach(t),tio=r(q$," or "),uB=n(q$,"A",{href:!0});var mYr=s(uB);aio=r(mYr,"SqueezeBertTokenizerFast"),mYr.forEach(t),nio=r(q$," (SqueezeBERT model)"),q$.forEach(t),sio=i(S),ys=n(S,"LI",{});var j$=s(ys);Kae=n(j$,"STRONG",{});var gYr=s(Kae);lio=r(gYr,"t5"),gYr.forEach(t),iio=r(j$," \u2014 "),bB=n(j$,"A",{href:!0});var hYr=s(bB);dio=r(hYr,"T5Tokenizer"),hYr.forEach(t),cio=r(j$," or "),vB=n(j$,"A",{href:!0});var pYr=s(vB);fio=r(pYr,"T5TokenizerFast"),pYr.forEach(t),mio=r(j$," (T5 model)"),j$.forEach(t),gio=i(S),Jg=n(S,"LI",{});var Uwe=s(Jg);Zae=n(Uwe,"STRONG",{});var _Yr=s(Zae);hio=r(_Yr,"tapas"),_Yr.forEach(t),pio=r(Uwe," \u2014 "),FB=n(Uwe,"A",{href:!0});var uYr=s(FB);_io=r(uYr,"TapasTokenizer"),uYr.forEach(t),uio=r(Uwe," (TAPAS model)"),Uwe.forEach(t),bio=i(S),Yg=n(S,"LI",{});var Jwe=s(Yg);ene=n(Jwe,"STRONG",{});var bYr=s(ene);vio=r(bYr,"tapex"),bYr.forEach(t),Fio=r(Jwe," \u2014 "),TB=n(Jwe,"A",{href:!0});var vYr=s(TB);Tio=r(vYr,"TapexTokenizer"),vYr.forEach(t),Mio=r(Jwe," (TAPEX model)"),Jwe.forEach(t),Eio=i(S),Kg=n(S,"LI",{});var Ywe=s(Kg);one=n(Ywe,"STRONG",{});var FYr=s(one);Cio=r(FYr,"transfo-xl"),FYr.forEach(t),wio=r(Ywe," \u2014 "),MB=n(Ywe,"A",{href:!0});var TYr=s(MB);Aio=r(TYr,"TransfoXLTokenizer"),TYr.forEach(t),yio=r(Ywe," (Transformer-XL model)"),Ywe.forEach(t),Lio=i(S),Ls=n(S,"LI",{});var D$=s(Ls);rne=n(D$,"STRONG",{});var MYr=s(rne);xio=r(MYr,"visual_bert"),MYr.forEach(t),$io=r(D$," \u2014 "),EB=n(D$,"A",{href:!0});var EYr=s(EB);kio=r(EYr,"BertTokenizer"),EYr.forEach(t),Sio=r(D$," or "),CB=n(D$,"A",{href:!0});var CYr=s(CB);Rio=r(CYr,"BertTokenizerFast"),CYr.forEach(t),Pio=r(D$," (VisualBert model)"),D$.forEach(t),Bio=i(S),Zg=n(S,"LI",{});var Kwe=s(Zg);tne=n(Kwe,"STRONG",{});var wYr=s(tne);Iio=r(wYr,"wav2vec2"),wYr.forEach(t),Nio=r(Kwe," \u2014 "),wB=n(Kwe,"A",{href:!0});var AYr=s(wB);qio=r(AYr,"Wav2Vec2CTCTokenizer"),AYr.forEach(t),jio=r(Kwe," (Wav2Vec2 model)"),Kwe.forEach(t),Dio=i(S),eh=n(S,"LI",{});var Zwe=s(eh);ane=n(Zwe,"STRONG",{});var yYr=s(ane);Gio=r(yYr,"wav2vec2-conformer"),yYr.forEach(t),Oio=r(Zwe," \u2014 "),AB=n(Zwe,"A",{href:!0});var LYr=s(AB);Vio=r(LYr,"Wav2Vec2CTCTokenizer"),LYr.forEach(t),Xio=r(Zwe," (Wav2Vec2-Conformer model)"),Zwe.forEach(t),zio=i(S),oh=n(S,"LI",{});var e0e=s(oh);nne=n(e0e,"STRONG",{});var xYr=s(nne);Wio=r(xYr,"wav2vec2_phoneme"),xYr.forEach(t),Qio=r(e0e," \u2014 "),yB=n(e0e,"A",{href:!0});var $Yr=s(yB);Hio=r($Yr,"Wav2Vec2PhonemeCTCTokenizer"),$Yr.forEach(t),Uio=r(e0e," (Wav2Vec2Phoneme model)"),e0e.forEach(t),Jio=i(S),xs=n(S,"LI",{});var G$=s(xs);sne=n(G$,"STRONG",{});var kYr=s(sne);Yio=r(kYr,"xglm"),kYr.forEach(t),Kio=r(G$," \u2014 "),LB=n(G$,"A",{href:!0});var SYr=s(LB);Zio=r(SYr,"XGLMTokenizer"),SYr.forEach(t),edo=r(G$," or "),xB=n(G$,"A",{href:!0});var RYr=s(xB);odo=r(RYr,"XGLMTokenizerFast"),RYr.forEach(t),rdo=r(G$," (XGLM model)"),G$.forEach(t),tdo=i(S),rh=n(S,"LI",{});var o0e=s(rh);lne=n(o0e,"STRONG",{});var PYr=s(lne);ado=r(PYr,"xlm"),PYr.forEach(t),ndo=r(o0e," \u2014 "),$B=n(o0e,"A",{href:!0});var BYr=s($B);sdo=r(BYr,"XLMTokenizer"),BYr.forEach(t),ldo=r(o0e," (XLM model)"),o0e.forEach(t),ido=i(S),th=n(S,"LI",{});var r0e=s(th);ine=n(r0e,"STRONG",{});var IYr=s(ine);ddo=r(IYr,"xlm-prophetnet"),IYr.forEach(t),cdo=r(r0e," \u2014 "),kB=n(r0e,"A",{href:!0});var NYr=s(kB);fdo=r(NYr,"XLMProphetNetTokenizer"),NYr.forEach(t),mdo=r(r0e," (XLMProphetNet model)"),r0e.forEach(t),gdo=i(S),$s=n(S,"LI",{});var O$=s($s);dne=n(O$,"STRONG",{});var qYr=s(dne);hdo=r(qYr,"xlm-roberta"),qYr.forEach(t),pdo=r(O$," \u2014 "),SB=n(O$,"A",{href:!0});var jYr=s(SB);_do=r(jYr,"XLMRobertaTokenizer"),jYr.forEach(t),udo=r(O$," or "),RB=n(O$,"A",{href:!0});var DYr=s(RB);bdo=r(DYr,"XLMRobertaTokenizerFast"),DYr.forEach(t),vdo=r(O$," (XLM-RoBERTa model)"),O$.forEach(t),Fdo=i(S),ks=n(S,"LI",{});var V$=s(ks);cne=n(V$,"STRONG",{});var GYr=s(cne);Tdo=r(GYr,"xlm-roberta-xl"),GYr.forEach(t),Mdo=r(V$," \u2014 "),PB=n(V$,"A",{href:!0});var OYr=s(PB);Edo=r(OYr,"RobertaTokenizer"),OYr.forEach(t),Cdo=r(V$," or "),BB=n(V$,"A",{href:!0});var VYr=s(BB);wdo=r(VYr,"RobertaTokenizerFast"),VYr.forEach(t),Ado=r(V$," (XLM-RoBERTa-XL model)"),V$.forEach(t),ydo=i(S),Ss=n(S,"LI",{});var X$=s(Ss);fne=n(X$,"STRONG",{});var XYr=s(fne);Ldo=r(XYr,"xlnet"),XYr.forEach(t),xdo=r(X$," \u2014 "),IB=n(X$,"A",{href:!0});var zYr=s(IB);$do=r(zYr,"XLNetTokenizer"),zYr.forEach(t),kdo=r(X$," or "),NB=n(X$,"A",{href:!0});var WYr=s(NB);Sdo=r(WYr,"XLNetTokenizerFast"),WYr.forEach(t),Rdo=r(X$," (XLNet model)"),X$.forEach(t),Pdo=i(S),Rs=n(S,"LI",{});var z$=s(Rs);mne=n(z$,"STRONG",{});var QYr=s(mne);Bdo=r(QYr,"yoso"),QYr.forEach(t),Ido=r(z$," \u2014 "),qB=n(z$,"A",{href:!0});var HYr=s(qB);Ndo=r(HYr,"AlbertTokenizer"),HYr.forEach(t),qdo=r(z$," or "),jB=n(z$,"A",{href:!0});var UYr=s(jB);jdo=r(UYr,"AlbertTokenizerFast"),UYr.forEach(t),Ddo=r(z$," (YOSO model)"),z$.forEach(t),S.forEach(t),Gdo=i(qs),T(ah.$$.fragment,qs),qs.forEach(t),Odo=i(Ns),nh=n(Ns,"DIV",{class:!0});var MDe=s(nh);T(X6.$$.fragment,MDe),Vdo=i(MDe),gne=n(MDe,"P",{});var JYr=s(gne);Xdo=r(JYr,"Register a new tokenizer in this mapping."),JYr.forEach(t),MDe.forEach(t),Ns.forEach(t),Eqe=i(f),Mi=n(f,"H2",{class:!0});var EDe=s(Mi);sh=n(EDe,"A",{id:!0,class:!0,href:!0});var YYr=s(sh);hne=n(YYr,"SPAN",{});var KYr=s(hne);T(z6.$$.fragment,KYr),KYr.forEach(t),YYr.forEach(t),zdo=i(EDe),pne=n(EDe,"SPAN",{});var ZYr=s(pne);Wdo=r(ZYr,"AutoFeatureExtractor"),ZYr.forEach(t),EDe.forEach(t),Cqe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(W6.$$.fragment,js),Qdo=i(js),Q6=n(js,"P",{});var CDe=s(Q6);Hdo=r(CDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),DB=n(CDe,"A",{href:!0});var eKr=s(DB);Udo=r(eKr,"AutoFeatureExtractor.from_pretrained()"),eKr.forEach(t),Jdo=r(CDe," class method."),CDe.forEach(t),Ydo=i(js),H6=n(js,"P",{});var wDe=s(H6);Kdo=r(wDe,"This class cannot be instantiated directly using "),_ne=n(wDe,"CODE",{});var oKr=s(_ne);Zdo=r(oKr,"__init__()"),oKr.forEach(t),eco=r(wDe," (throws an error)."),wDe.forEach(t),oco=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(U6.$$.fragment,Zt),rco=i(Zt),une=n(Zt,"P",{});var rKr=s(une);tco=r(rKr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),rKr.forEach(t),aco=i(Zt),ya=n(Zt,"P",{});var Pw=s(ya);nco=r(Pw,"The feature extractor class to instantiate is selected based on the "),bne=n(Pw,"CODE",{});var tKr=s(bne);sco=r(tKr,"model_type"),tKr.forEach(t),lco=r(Pw,` property of the config object
(either passed as an argument or loaded from `),vne=n(Pw,"CODE",{});var aKr=s(vne);ico=r(aKr,"pretrained_model_name_or_path"),aKr.forEach(t),dco=r(Pw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Fne=n(Pw,"CODE",{});var nKr=s(Fne);cco=r(nKr,"pretrained_model_name_or_path"),nKr.forEach(t),fco=r(Pw,":"),Pw.forEach(t),mco=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);lh=n(Z,"LI",{});var t0e=s(lh);Tne=n(t0e,"STRONG",{});var sKr=s(Tne);gco=r(sKr,"beit"),sKr.forEach(t),hco=r(t0e," \u2014 "),GB=n(t0e,"A",{href:!0});var lKr=s(GB);pco=r(lKr,"BeitFeatureExtractor"),lKr.forEach(t),_co=r(t0e," (BEiT model)"),t0e.forEach(t),uco=i(Z),ih=n(Z,"LI",{});var a0e=s(ih);Mne=n(a0e,"STRONG",{});var iKr=s(Mne);bco=r(iKr,"clip"),iKr.forEach(t),vco=r(a0e," \u2014 "),OB=n(a0e,"A",{href:!0});var dKr=s(OB);Fco=r(dKr,"CLIPFeatureExtractor"),dKr.forEach(t),Tco=r(a0e," (CLIP model)"),a0e.forEach(t),Mco=i(Z),dh=n(Z,"LI",{});var n0e=s(dh);Ene=n(n0e,"STRONG",{});var cKr=s(Ene);Eco=r(cKr,"convnext"),cKr.forEach(t),Cco=r(n0e," \u2014 "),VB=n(n0e,"A",{href:!0});var fKr=s(VB);wco=r(fKr,"ConvNextFeatureExtractor"),fKr.forEach(t),Aco=r(n0e," (ConvNext model)"),n0e.forEach(t),yco=i(Z),ch=n(Z,"LI",{});var s0e=s(ch);Cne=n(s0e,"STRONG",{});var mKr=s(Cne);Lco=r(mKr,"cvt"),mKr.forEach(t),xco=r(s0e," \u2014 "),XB=n(s0e,"A",{href:!0});var gKr=s(XB);$co=r(gKr,"ConvNextFeatureExtractor"),gKr.forEach(t),kco=r(s0e," (CvT model)"),s0e.forEach(t),Sco=i(Z),fh=n(Z,"LI",{});var l0e=s(fh);wne=n(l0e,"STRONG",{});var hKr=s(wne);Rco=r(hKr,"data2vec-audio"),hKr.forEach(t),Pco=r(l0e," \u2014 "),zB=n(l0e,"A",{href:!0});var pKr=s(zB);Bco=r(pKr,"Wav2Vec2FeatureExtractor"),pKr.forEach(t),Ico=r(l0e," (Data2VecAudio model)"),l0e.forEach(t),Nco=i(Z),mh=n(Z,"LI",{});var i0e=s(mh);Ane=n(i0e,"STRONG",{});var _Kr=s(Ane);qco=r(_Kr,"data2vec-vision"),_Kr.forEach(t),jco=r(i0e," \u2014 "),WB=n(i0e,"A",{href:!0});var uKr=s(WB);Dco=r(uKr,"BeitFeatureExtractor"),uKr.forEach(t),Gco=r(i0e," (Data2VecVision model)"),i0e.forEach(t),Oco=i(Z),gh=n(Z,"LI",{});var d0e=s(gh);yne=n(d0e,"STRONG",{});var bKr=s(yne);Vco=r(bKr,"deit"),bKr.forEach(t),Xco=r(d0e," \u2014 "),QB=n(d0e,"A",{href:!0});var vKr=s(QB);zco=r(vKr,"DeiTFeatureExtractor"),vKr.forEach(t),Wco=r(d0e," (DeiT model)"),d0e.forEach(t),Qco=i(Z),hh=n(Z,"LI",{});var c0e=s(hh);Lne=n(c0e,"STRONG",{});var FKr=s(Lne);Hco=r(FKr,"detr"),FKr.forEach(t),Uco=r(c0e," \u2014 "),HB=n(c0e,"A",{href:!0});var TKr=s(HB);Jco=r(TKr,"DetrFeatureExtractor"),TKr.forEach(t),Yco=r(c0e," (DETR model)"),c0e.forEach(t),Kco=i(Z),ph=n(Z,"LI",{});var f0e=s(ph);xne=n(f0e,"STRONG",{});var MKr=s(xne);Zco=r(MKr,"dpt"),MKr.forEach(t),efo=r(f0e," \u2014 "),UB=n(f0e,"A",{href:!0});var EKr=s(UB);ofo=r(EKr,"DPTFeatureExtractor"),EKr.forEach(t),rfo=r(f0e," (DPT model)"),f0e.forEach(t),tfo=i(Z),_h=n(Z,"LI",{});var m0e=s(_h);$ne=n(m0e,"STRONG",{});var CKr=s($ne);afo=r(CKr,"flava"),CKr.forEach(t),nfo=r(m0e," \u2014 "),JB=n(m0e,"A",{href:!0});var wKr=s(JB);sfo=r(wKr,"FlavaFeatureExtractor"),wKr.forEach(t),lfo=r(m0e," (Flava model)"),m0e.forEach(t),ifo=i(Z),uh=n(Z,"LI",{});var g0e=s(uh);kne=n(g0e,"STRONG",{});var AKr=s(kne);dfo=r(AKr,"glpn"),AKr.forEach(t),cfo=r(g0e," \u2014 "),YB=n(g0e,"A",{href:!0});var yKr=s(YB);ffo=r(yKr,"GLPNFeatureExtractor"),yKr.forEach(t),mfo=r(g0e," (GLPN model)"),g0e.forEach(t),gfo=i(Z),bh=n(Z,"LI",{});var h0e=s(bh);Sne=n(h0e,"STRONG",{});var LKr=s(Sne);hfo=r(LKr,"hubert"),LKr.forEach(t),pfo=r(h0e," \u2014 "),KB=n(h0e,"A",{href:!0});var xKr=s(KB);_fo=r(xKr,"Wav2Vec2FeatureExtractor"),xKr.forEach(t),ufo=r(h0e," (Hubert model)"),h0e.forEach(t),bfo=i(Z),vh=n(Z,"LI",{});var p0e=s(vh);Rne=n(p0e,"STRONG",{});var $Kr=s(Rne);vfo=r($Kr,"imagegpt"),$Kr.forEach(t),Ffo=r(p0e," \u2014 "),ZB=n(p0e,"A",{href:!0});var kKr=s(ZB);Tfo=r(kKr,"ImageGPTFeatureExtractor"),kKr.forEach(t),Mfo=r(p0e," (ImageGPT model)"),p0e.forEach(t),Efo=i(Z),Fh=n(Z,"LI",{});var _0e=s(Fh);Pne=n(_0e,"STRONG",{});var SKr=s(Pne);Cfo=r(SKr,"layoutlmv2"),SKr.forEach(t),wfo=r(_0e," \u2014 "),eI=n(_0e,"A",{href:!0});var RKr=s(eI);Afo=r(RKr,"LayoutLMv2FeatureExtractor"),RKr.forEach(t),yfo=r(_0e," (LayoutLMv2 model)"),_0e.forEach(t),Lfo=i(Z),Th=n(Z,"LI",{});var u0e=s(Th);Bne=n(u0e,"STRONG",{});var PKr=s(Bne);xfo=r(PKr,"layoutlmv3"),PKr.forEach(t),$fo=r(u0e," \u2014 "),oI=n(u0e,"A",{href:!0});var BKr=s(oI);kfo=r(BKr,"LayoutLMv3FeatureExtractor"),BKr.forEach(t),Sfo=r(u0e," (LayoutLMv3 model)"),u0e.forEach(t),Rfo=i(Z),Mh=n(Z,"LI",{});var b0e=s(Mh);Ine=n(b0e,"STRONG",{});var IKr=s(Ine);Pfo=r(IKr,"maskformer"),IKr.forEach(t),Bfo=r(b0e," \u2014 "),rI=n(b0e,"A",{href:!0});var NKr=s(rI);Ifo=r(NKr,"MaskFormerFeatureExtractor"),NKr.forEach(t),Nfo=r(b0e," (MaskFormer model)"),b0e.forEach(t),qfo=i(Z),Eh=n(Z,"LI",{});var v0e=s(Eh);Nne=n(v0e,"STRONG",{});var qKr=s(Nne);jfo=r(qKr,"perceiver"),qKr.forEach(t),Dfo=r(v0e," \u2014 "),tI=n(v0e,"A",{href:!0});var jKr=s(tI);Gfo=r(jKr,"PerceiverFeatureExtractor"),jKr.forEach(t),Ofo=r(v0e," (Perceiver model)"),v0e.forEach(t),Vfo=i(Z),Ch=n(Z,"LI",{});var F0e=s(Ch);qne=n(F0e,"STRONG",{});var DKr=s(qne);Xfo=r(DKr,"poolformer"),DKr.forEach(t),zfo=r(F0e," \u2014 "),aI=n(F0e,"A",{href:!0});var GKr=s(aI);Wfo=r(GKr,"PoolFormerFeatureExtractor"),GKr.forEach(t),Qfo=r(F0e," (PoolFormer model)"),F0e.forEach(t),Hfo=i(Z),wh=n(Z,"LI",{});var T0e=s(wh);jne=n(T0e,"STRONG",{});var OKr=s(jne);Ufo=r(OKr,"regnet"),OKr.forEach(t),Jfo=r(T0e," \u2014 "),nI=n(T0e,"A",{href:!0});var VKr=s(nI);Yfo=r(VKr,"ConvNextFeatureExtractor"),VKr.forEach(t),Kfo=r(T0e," (RegNet model)"),T0e.forEach(t),Zfo=i(Z),Ah=n(Z,"LI",{});var M0e=s(Ah);Dne=n(M0e,"STRONG",{});var XKr=s(Dne);emo=r(XKr,"resnet"),XKr.forEach(t),omo=r(M0e," \u2014 "),sI=n(M0e,"A",{href:!0});var zKr=s(sI);rmo=r(zKr,"ConvNextFeatureExtractor"),zKr.forEach(t),tmo=r(M0e," (ResNet model)"),M0e.forEach(t),amo=i(Z),yh=n(Z,"LI",{});var E0e=s(yh);Gne=n(E0e,"STRONG",{});var WKr=s(Gne);nmo=r(WKr,"segformer"),WKr.forEach(t),smo=r(E0e," \u2014 "),lI=n(E0e,"A",{href:!0});var QKr=s(lI);lmo=r(QKr,"SegformerFeatureExtractor"),QKr.forEach(t),imo=r(E0e," (SegFormer model)"),E0e.forEach(t),dmo=i(Z),Lh=n(Z,"LI",{});var C0e=s(Lh);One=n(C0e,"STRONG",{});var HKr=s(One);cmo=r(HKr,"speech_to_text"),HKr.forEach(t),fmo=r(C0e," \u2014 "),iI=n(C0e,"A",{href:!0});var UKr=s(iI);mmo=r(UKr,"Speech2TextFeatureExtractor"),UKr.forEach(t),gmo=r(C0e," (Speech2Text model)"),C0e.forEach(t),hmo=i(Z),xh=n(Z,"LI",{});var w0e=s(xh);Vne=n(w0e,"STRONG",{});var JKr=s(Vne);pmo=r(JKr,"swin"),JKr.forEach(t),_mo=r(w0e," \u2014 "),dI=n(w0e,"A",{href:!0});var YKr=s(dI);umo=r(YKr,"ViTFeatureExtractor"),YKr.forEach(t),bmo=r(w0e," (Swin model)"),w0e.forEach(t),vmo=i(Z),$h=n(Z,"LI",{});var A0e=s($h);Xne=n(A0e,"STRONG",{});var KKr=s(Xne);Fmo=r(KKr,"van"),KKr.forEach(t),Tmo=r(A0e," \u2014 "),cI=n(A0e,"A",{href:!0});var ZKr=s(cI);Mmo=r(ZKr,"ConvNextFeatureExtractor"),ZKr.forEach(t),Emo=r(A0e," (VAN model)"),A0e.forEach(t),Cmo=i(Z),kh=n(Z,"LI",{});var y0e=s(kh);zne=n(y0e,"STRONG",{});var eZr=s(zne);wmo=r(eZr,"vit"),eZr.forEach(t),Amo=r(y0e," \u2014 "),fI=n(y0e,"A",{href:!0});var oZr=s(fI);ymo=r(oZr,"ViTFeatureExtractor"),oZr.forEach(t),Lmo=r(y0e," (ViT model)"),y0e.forEach(t),xmo=i(Z),Sh=n(Z,"LI",{});var L0e=s(Sh);Wne=n(L0e,"STRONG",{});var rZr=s(Wne);$mo=r(rZr,"vit_mae"),rZr.forEach(t),kmo=r(L0e," \u2014 "),mI=n(L0e,"A",{href:!0});var tZr=s(mI);Smo=r(tZr,"ViTFeatureExtractor"),tZr.forEach(t),Rmo=r(L0e," (ViTMAE model)"),L0e.forEach(t),Pmo=i(Z),Rh=n(Z,"LI",{});var x0e=s(Rh);Qne=n(x0e,"STRONG",{});var aZr=s(Qne);Bmo=r(aZr,"wav2vec2"),aZr.forEach(t),Imo=r(x0e," \u2014 "),gI=n(x0e,"A",{href:!0});var nZr=s(gI);Nmo=r(nZr,"Wav2Vec2FeatureExtractor"),nZr.forEach(t),qmo=r(x0e," (Wav2Vec2 model)"),x0e.forEach(t),jmo=i(Z),Ph=n(Z,"LI",{});var $0e=s(Ph);Hne=n($0e,"STRONG",{});var sZr=s(Hne);Dmo=r(sZr,"wav2vec2-conformer"),sZr.forEach(t),Gmo=r($0e," \u2014 "),hI=n($0e,"A",{href:!0});var lZr=s(hI);Omo=r(lZr,"Wav2Vec2FeatureExtractor"),lZr.forEach(t),Vmo=r($0e," (Wav2Vec2-Conformer model)"),$0e.forEach(t),Xmo=i(Z),Bh=n(Z,"LI",{});var k0e=s(Bh);Une=n(k0e,"STRONG",{});var iZr=s(Une);zmo=r(iZr,"yolos"),iZr.forEach(t),Wmo=r(k0e," \u2014 "),pI=n(k0e,"A",{href:!0});var dZr=s(pI);Qmo=r(dZr,"YolosFeatureExtractor"),dZr.forEach(t),Hmo=r(k0e," (YOLOS model)"),k0e.forEach(t),Z.forEach(t),Umo=i(Zt),T(Ih.$$.fragment,Zt),Jmo=i(Zt),T(Nh.$$.fragment,Zt),Zt.forEach(t),Ymo=i(js),qh=n(js,"DIV",{class:!0});var ADe=s(qh);T(J6.$$.fragment,ADe),Kmo=i(ADe),Jne=n(ADe,"P",{});var cZr=s(Jne);Zmo=r(cZr,"Register a new feature extractor for this class."),cZr.forEach(t),ADe.forEach(t),js.forEach(t),wqe=i(f),Ei=n(f,"H2",{class:!0});var yDe=s(Ei);jh=n(yDe,"A",{id:!0,class:!0,href:!0});var fZr=s(jh);Yne=n(fZr,"SPAN",{});var mZr=s(Yne);T(Y6.$$.fragment,mZr),mZr.forEach(t),fZr.forEach(t),ego=i(yDe),Kne=n(yDe,"SPAN",{});var gZr=s(Kne);ogo=r(gZr,"AutoProcessor"),gZr.forEach(t),yDe.forEach(t),Aqe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(K6.$$.fragment,Ds),rgo=i(Ds),Z6=n(Ds,"P",{});var LDe=s(Z6);tgo=r(LDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),_I=n(LDe,"A",{href:!0});var hZr=s(_I);ago=r(hZr,"AutoProcessor.from_pretrained()"),hZr.forEach(t),ngo=r(LDe," class method."),LDe.forEach(t),sgo=i(Ds),eA=n(Ds,"P",{});var xDe=s(eA);lgo=r(xDe,"This class cannot be instantiated directly using "),Zne=n(xDe,"CODE",{});var pZr=s(Zne);igo=r(pZr,"__init__()"),pZr.forEach(t),dgo=r(xDe," (throws an error)."),xDe.forEach(t),cgo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(oA.$$.fragment,ea),fgo=i(ea),ese=n(ea,"P",{});var _Zr=s(ese);mgo=r(_Zr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),_Zr.forEach(t),ggo=i(ea),Ci=n(ea,"P",{});var MZ=s(Ci);hgo=r(MZ,"The processor class to instantiate is selected based on the "),ose=n(MZ,"CODE",{});var uZr=s(ose);pgo=r(uZr,"model_type"),uZr.forEach(t),_go=r(MZ,` property of the config object (either
passed as an argument or loaded from `),rse=n(MZ,"CODE",{});var bZr=s(rse);ugo=r(bZr,"pretrained_model_name_or_path"),bZr.forEach(t),bgo=r(MZ," if possible):"),MZ.forEach(t),vgo=i(ea),he=n(ea,"UL",{});var ue=s(he);Dh=n(ue,"LI",{});var S0e=s(Dh);tse=n(S0e,"STRONG",{});var vZr=s(tse);Fgo=r(vZr,"clip"),vZr.forEach(t),Tgo=r(S0e," \u2014 "),uI=n(S0e,"A",{href:!0});var FZr=s(uI);Mgo=r(FZr,"CLIPProcessor"),FZr.forEach(t),Ego=r(S0e," (CLIP model)"),S0e.forEach(t),Cgo=i(ue),Gh=n(ue,"LI",{});var R0e=s(Gh);ase=n(R0e,"STRONG",{});var TZr=s(ase);wgo=r(TZr,"flava"),TZr.forEach(t),Ago=r(R0e," \u2014 "),nse=n(R0e,"CODE",{});var MZr=s(nse);ygo=r(MZr,"FLAVAProcessor"),MZr.forEach(t),Lgo=r(R0e," (Flava model)"),R0e.forEach(t),xgo=i(ue),Oh=n(ue,"LI",{});var P0e=s(Oh);sse=n(P0e,"STRONG",{});var EZr=s(sse);$go=r(EZr,"layoutlmv2"),EZr.forEach(t),kgo=r(P0e," \u2014 "),bI=n(P0e,"A",{href:!0});var CZr=s(bI);Sgo=r(CZr,"LayoutLMv2Processor"),CZr.forEach(t),Rgo=r(P0e," (LayoutLMv2 model)"),P0e.forEach(t),Pgo=i(ue),Vh=n(ue,"LI",{});var B0e=s(Vh);lse=n(B0e,"STRONG",{});var wZr=s(lse);Bgo=r(wZr,"layoutlmv3"),wZr.forEach(t),Igo=r(B0e," \u2014 "),vI=n(B0e,"A",{href:!0});var AZr=s(vI);Ngo=r(AZr,"LayoutLMv3Processor"),AZr.forEach(t),qgo=r(B0e," (LayoutLMv3 model)"),B0e.forEach(t),jgo=i(ue),Xh=n(ue,"LI",{});var I0e=s(Xh);ise=n(I0e,"STRONG",{});var yZr=s(ise);Dgo=r(yZr,"layoutxlm"),yZr.forEach(t),Ggo=r(I0e," \u2014 "),FI=n(I0e,"A",{href:!0});var LZr=s(FI);Ogo=r(LZr,"LayoutXLMProcessor"),LZr.forEach(t),Vgo=r(I0e," (LayoutXLM model)"),I0e.forEach(t),Xgo=i(ue),zh=n(ue,"LI",{});var N0e=s(zh);dse=n(N0e,"STRONG",{});var xZr=s(dse);zgo=r(xZr,"sew"),xZr.forEach(t),Wgo=r(N0e," \u2014 "),TI=n(N0e,"A",{href:!0});var $Zr=s(TI);Qgo=r($Zr,"Wav2Vec2Processor"),$Zr.forEach(t),Hgo=r(N0e," (SEW model)"),N0e.forEach(t),Ugo=i(ue),Wh=n(ue,"LI",{});var q0e=s(Wh);cse=n(q0e,"STRONG",{});var kZr=s(cse);Jgo=r(kZr,"sew-d"),kZr.forEach(t),Ygo=r(q0e," \u2014 "),MI=n(q0e,"A",{href:!0});var SZr=s(MI);Kgo=r(SZr,"Wav2Vec2Processor"),SZr.forEach(t),Zgo=r(q0e," (SEW-D model)"),q0e.forEach(t),eho=i(ue),Qh=n(ue,"LI",{});var j0e=s(Qh);fse=n(j0e,"STRONG",{});var RZr=s(fse);oho=r(RZr,"speech_to_text"),RZr.forEach(t),rho=r(j0e," \u2014 "),EI=n(j0e,"A",{href:!0});var PZr=s(EI);tho=r(PZr,"Speech2TextProcessor"),PZr.forEach(t),aho=r(j0e," (Speech2Text model)"),j0e.forEach(t),nho=i(ue),Hh=n(ue,"LI",{});var D0e=s(Hh);mse=n(D0e,"STRONG",{});var BZr=s(mse);sho=r(BZr,"speech_to_text_2"),BZr.forEach(t),lho=r(D0e," \u2014 "),CI=n(D0e,"A",{href:!0});var IZr=s(CI);iho=r(IZr,"Speech2Text2Processor"),IZr.forEach(t),dho=r(D0e," (Speech2Text2 model)"),D0e.forEach(t),cho=i(ue),Uh=n(ue,"LI",{});var G0e=s(Uh);gse=n(G0e,"STRONG",{});var NZr=s(gse);fho=r(NZr,"trocr"),NZr.forEach(t),mho=r(G0e," \u2014 "),wI=n(G0e,"A",{href:!0});var qZr=s(wI);gho=r(qZr,"TrOCRProcessor"),qZr.forEach(t),hho=r(G0e," (TrOCR model)"),G0e.forEach(t),pho=i(ue),Jh=n(ue,"LI",{});var O0e=s(Jh);hse=n(O0e,"STRONG",{});var jZr=s(hse);_ho=r(jZr,"unispeech"),jZr.forEach(t),uho=r(O0e," \u2014 "),AI=n(O0e,"A",{href:!0});var DZr=s(AI);bho=r(DZr,"Wav2Vec2Processor"),DZr.forEach(t),vho=r(O0e," (UniSpeech model)"),O0e.forEach(t),Fho=i(ue),Yh=n(ue,"LI",{});var V0e=s(Yh);pse=n(V0e,"STRONG",{});var GZr=s(pse);Tho=r(GZr,"unispeech-sat"),GZr.forEach(t),Mho=r(V0e," \u2014 "),yI=n(V0e,"A",{href:!0});var OZr=s(yI);Eho=r(OZr,"Wav2Vec2Processor"),OZr.forEach(t),Cho=r(V0e," (UniSpeechSat model)"),V0e.forEach(t),who=i(ue),Kh=n(ue,"LI",{});var X0e=s(Kh);_se=n(X0e,"STRONG",{});var VZr=s(_se);Aho=r(VZr,"vilt"),VZr.forEach(t),yho=r(X0e," \u2014 "),LI=n(X0e,"A",{href:!0});var XZr=s(LI);Lho=r(XZr,"ViltProcessor"),XZr.forEach(t),xho=r(X0e," (ViLT model)"),X0e.forEach(t),$ho=i(ue),Zh=n(ue,"LI",{});var z0e=s(Zh);use=n(z0e,"STRONG",{});var zZr=s(use);kho=r(zZr,"vision-text-dual-encoder"),zZr.forEach(t),Sho=r(z0e," \u2014 "),xI=n(z0e,"A",{href:!0});var WZr=s(xI);Rho=r(WZr,"VisionTextDualEncoderProcessor"),WZr.forEach(t),Pho=r(z0e," (VisionTextDualEncoder model)"),z0e.forEach(t),Bho=i(ue),ep=n(ue,"LI",{});var W0e=s(ep);bse=n(W0e,"STRONG",{});var QZr=s(bse);Iho=r(QZr,"wav2vec2"),QZr.forEach(t),Nho=r(W0e," \u2014 "),$I=n(W0e,"A",{href:!0});var HZr=s($I);qho=r(HZr,"Wav2Vec2Processor"),HZr.forEach(t),jho=r(W0e," (Wav2Vec2 model)"),W0e.forEach(t),Dho=i(ue),op=n(ue,"LI",{});var Q0e=s(op);vse=n(Q0e,"STRONG",{});var UZr=s(vse);Gho=r(UZr,"wav2vec2-conformer"),UZr.forEach(t),Oho=r(Q0e," \u2014 "),kI=n(Q0e,"A",{href:!0});var JZr=s(kI);Vho=r(JZr,"Wav2Vec2Processor"),JZr.forEach(t),Xho=r(Q0e," (Wav2Vec2-Conformer model)"),Q0e.forEach(t),zho=i(ue),rp=n(ue,"LI",{});var H0e=s(rp);Fse=n(H0e,"STRONG",{});var YZr=s(Fse);Who=r(YZr,"wavlm"),YZr.forEach(t),Qho=r(H0e," \u2014 "),SI=n(H0e,"A",{href:!0});var KZr=s(SI);Hho=r(KZr,"Wav2Vec2Processor"),KZr.forEach(t),Uho=r(H0e," (WavLM model)"),H0e.forEach(t),ue.forEach(t),Jho=i(ea),T(tp.$$.fragment,ea),Yho=i(ea),T(ap.$$.fragment,ea),ea.forEach(t),Kho=i(Ds),np=n(Ds,"DIV",{class:!0});var $De=s(np);T(rA.$$.fragment,$De),Zho=i($De),Tse=n($De,"P",{});var ZZr=s(Tse);epo=r(ZZr,"Register a new processor for this class."),ZZr.forEach(t),$De.forEach(t),Ds.forEach(t),yqe=i(f),wi=n(f,"H2",{class:!0});var kDe=s(wi);sp=n(kDe,"A",{id:!0,class:!0,href:!0});var eet=s(sp);Mse=n(eet,"SPAN",{});var oet=s(Mse);T(tA.$$.fragment,oet),oet.forEach(t),eet.forEach(t),opo=i(kDe),Ese=n(kDe,"SPAN",{});var ret=s(Ese);rpo=r(ret,"AutoModel"),ret.forEach(t),kDe.forEach(t),Lqe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(aA.$$.fragment,Gs),tpo=i(Gs),Ai=n(Gs,"P",{});var EZ=s(Ai);apo=r(EZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),RI=n(EZ,"A",{href:!0});var tet=s(RI);npo=r(tet,"from_pretrained()"),tet.forEach(t),spo=r(EZ," class method or the "),PI=n(EZ,"A",{href:!0});var aet=s(PI);lpo=r(aet,"from_config()"),aet.forEach(t),ipo=r(EZ,` class
method.`),EZ.forEach(t),dpo=i(Gs),nA=n(Gs,"P",{});var SDe=s(nA);cpo=r(SDe,"This class cannot be instantiated directly using "),Cse=n(SDe,"CODE",{});var net=s(Cse);fpo=r(net,"__init__()"),net.forEach(t),mpo=r(SDe," (throws an error)."),SDe.forEach(t),gpo=i(Gs),tt=n(Gs,"DIV",{class:!0});var Bw=s(tt);T(sA.$$.fragment,Bw),hpo=i(Bw),wse=n(Bw,"P",{});var set=s(wse);ppo=r(set,"Instantiates one of the base model classes of the library from a configuration."),set.forEach(t),_po=i(Bw),yi=n(Bw,"P",{});var CZ=s(yi);upo=r(CZ,`Note:
Loading a model from its configuration file does `),Ase=n(CZ,"STRONG",{});var iet=s(Ase);bpo=r(iet,"not"),iet.forEach(t),vpo=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BI=n(CZ,"A",{href:!0});var det=s(BI);Fpo=r(det,"from_pretrained()"),det.forEach(t),Tpo=r(CZ," to load the model weights."),CZ.forEach(t),Mpo=i(Bw),T(lp.$$.fragment,Bw),Bw.forEach(t),Epo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(lA.$$.fragment,oa),Cpo=i(oa),yse=n(oa,"P",{});var cet=s(yse);wpo=r(cet,"Instantiate one of the base model classes of the library from a pretrained model."),cet.forEach(t),Apo=i(oa),La=n(oa,"P",{});var Iw=s(La);ypo=r(Iw,"The model class to instantiate is selected based on the "),Lse=n(Iw,"CODE",{});var fet=s(Lse);Lpo=r(fet,"model_type"),fet.forEach(t),xpo=r(Iw,` property of the config object (either
passed as an argument or loaded from `),xse=n(Iw,"CODE",{});var met=s(xse);$po=r(met,"pretrained_model_name_or_path"),met.forEach(t),kpo=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$se=n(Iw,"CODE",{});var get=s($se);Spo=r(get,"pretrained_model_name_or_path"),get.forEach(t),Rpo=r(Iw,":"),Iw.forEach(t),Ppo=i(oa),x=n(oa,"UL",{});var $=s(x);ip=n($,"LI",{});var U0e=s(ip);kse=n(U0e,"STRONG",{});var het=s(kse);Bpo=r(het,"albert"),het.forEach(t),Ipo=r(U0e," \u2014 "),II=n(U0e,"A",{href:!0});var pet=s(II);Npo=r(pet,"AlbertModel"),pet.forEach(t),qpo=r(U0e," (ALBERT model)"),U0e.forEach(t),jpo=i($),dp=n($,"LI",{});var J0e=s(dp);Sse=n(J0e,"STRONG",{});var _et=s(Sse);Dpo=r(_et,"bart"),_et.forEach(t),Gpo=r(J0e," \u2014 "),NI=n(J0e,"A",{href:!0});var uet=s(NI);Opo=r(uet,"BartModel"),uet.forEach(t),Vpo=r(J0e," (BART model)"),J0e.forEach(t),Xpo=i($),cp=n($,"LI",{});var Y0e=s(cp);Rse=n(Y0e,"STRONG",{});var bet=s(Rse);zpo=r(bet,"beit"),bet.forEach(t),Wpo=r(Y0e," \u2014 "),qI=n(Y0e,"A",{href:!0});var vet=s(qI);Qpo=r(vet,"BeitModel"),vet.forEach(t),Hpo=r(Y0e," (BEiT model)"),Y0e.forEach(t),Upo=i($),fp=n($,"LI",{});var K0e=s(fp);Pse=n(K0e,"STRONG",{});var Fet=s(Pse);Jpo=r(Fet,"bert"),Fet.forEach(t),Ypo=r(K0e," \u2014 "),jI=n(K0e,"A",{href:!0});var Tet=s(jI);Kpo=r(Tet,"BertModel"),Tet.forEach(t),Zpo=r(K0e," (BERT model)"),K0e.forEach(t),e_o=i($),mp=n($,"LI",{});var Z0e=s(mp);Bse=n(Z0e,"STRONG",{});var Met=s(Bse);o_o=r(Met,"bert-generation"),Met.forEach(t),r_o=r(Z0e," \u2014 "),DI=n(Z0e,"A",{href:!0});var Eet=s(DI);t_o=r(Eet,"BertGenerationEncoder"),Eet.forEach(t),a_o=r(Z0e," (Bert Generation model)"),Z0e.forEach(t),n_o=i($),gp=n($,"LI",{});var e6e=s(gp);Ise=n(e6e,"STRONG",{});var Cet=s(Ise);s_o=r(Cet,"big_bird"),Cet.forEach(t),l_o=r(e6e," \u2014 "),GI=n(e6e,"A",{href:!0});var wet=s(GI);i_o=r(wet,"BigBirdModel"),wet.forEach(t),d_o=r(e6e," (BigBird model)"),e6e.forEach(t),c_o=i($),hp=n($,"LI",{});var o6e=s(hp);Nse=n(o6e,"STRONG",{});var Aet=s(Nse);f_o=r(Aet,"bigbird_pegasus"),Aet.forEach(t),m_o=r(o6e," \u2014 "),OI=n(o6e,"A",{href:!0});var yet=s(OI);g_o=r(yet,"BigBirdPegasusModel"),yet.forEach(t),h_o=r(o6e," (BigBirdPegasus model)"),o6e.forEach(t),p_o=i($),pp=n($,"LI",{});var r6e=s(pp);qse=n(r6e,"STRONG",{});var Let=s(qse);__o=r(Let,"blenderbot"),Let.forEach(t),u_o=r(r6e," \u2014 "),VI=n(r6e,"A",{href:!0});var xet=s(VI);b_o=r(xet,"BlenderbotModel"),xet.forEach(t),v_o=r(r6e," (Blenderbot model)"),r6e.forEach(t),F_o=i($),_p=n($,"LI",{});var t6e=s(_p);jse=n(t6e,"STRONG",{});var $et=s(jse);T_o=r($et,"blenderbot-small"),$et.forEach(t),M_o=r(t6e," \u2014 "),XI=n(t6e,"A",{href:!0});var ket=s(XI);E_o=r(ket,"BlenderbotSmallModel"),ket.forEach(t),C_o=r(t6e," (BlenderbotSmall model)"),t6e.forEach(t),w_o=i($),up=n($,"LI",{});var a6e=s(up);Dse=n(a6e,"STRONG",{});var Set=s(Dse);A_o=r(Set,"camembert"),Set.forEach(t),y_o=r(a6e," \u2014 "),zI=n(a6e,"A",{href:!0});var Ret=s(zI);L_o=r(Ret,"CamembertModel"),Ret.forEach(t),x_o=r(a6e," (CamemBERT model)"),a6e.forEach(t),$_o=i($),bp=n($,"LI",{});var n6e=s(bp);Gse=n(n6e,"STRONG",{});var Pet=s(Gse);k_o=r(Pet,"canine"),Pet.forEach(t),S_o=r(n6e," \u2014 "),WI=n(n6e,"A",{href:!0});var Bet=s(WI);R_o=r(Bet,"CanineModel"),Bet.forEach(t),P_o=r(n6e," (Canine model)"),n6e.forEach(t),B_o=i($),vp=n($,"LI",{});var s6e=s(vp);Ose=n(s6e,"STRONG",{});var Iet=s(Ose);I_o=r(Iet,"clip"),Iet.forEach(t),N_o=r(s6e," \u2014 "),QI=n(s6e,"A",{href:!0});var Net=s(QI);q_o=r(Net,"CLIPModel"),Net.forEach(t),j_o=r(s6e," (CLIP model)"),s6e.forEach(t),D_o=i($),Fp=n($,"LI",{});var l6e=s(Fp);Vse=n(l6e,"STRONG",{});var qet=s(Vse);G_o=r(qet,"convbert"),qet.forEach(t),O_o=r(l6e," \u2014 "),HI=n(l6e,"A",{href:!0});var jet=s(HI);V_o=r(jet,"ConvBertModel"),jet.forEach(t),X_o=r(l6e," (ConvBERT model)"),l6e.forEach(t),z_o=i($),Tp=n($,"LI",{});var i6e=s(Tp);Xse=n(i6e,"STRONG",{});var Det=s(Xse);W_o=r(Det,"convnext"),Det.forEach(t),Q_o=r(i6e," \u2014 "),UI=n(i6e,"A",{href:!0});var Get=s(UI);H_o=r(Get,"ConvNextModel"),Get.forEach(t),U_o=r(i6e," (ConvNext model)"),i6e.forEach(t),J_o=i($),Mp=n($,"LI",{});var d6e=s(Mp);zse=n(d6e,"STRONG",{});var Oet=s(zse);Y_o=r(Oet,"ctrl"),Oet.forEach(t),K_o=r(d6e," \u2014 "),JI=n(d6e,"A",{href:!0});var Vet=s(JI);Z_o=r(Vet,"CTRLModel"),Vet.forEach(t),euo=r(d6e," (CTRL model)"),d6e.forEach(t),ouo=i($),Ep=n($,"LI",{});var c6e=s(Ep);Wse=n(c6e,"STRONG",{});var Xet=s(Wse);ruo=r(Xet,"cvt"),Xet.forEach(t),tuo=r(c6e," \u2014 "),YI=n(c6e,"A",{href:!0});var zet=s(YI);auo=r(zet,"CvtModel"),zet.forEach(t),nuo=r(c6e," (CvT model)"),c6e.forEach(t),suo=i($),Cp=n($,"LI",{});var f6e=s(Cp);Qse=n(f6e,"STRONG",{});var Wet=s(Qse);luo=r(Wet,"data2vec-audio"),Wet.forEach(t),iuo=r(f6e," \u2014 "),KI=n(f6e,"A",{href:!0});var Qet=s(KI);duo=r(Qet,"Data2VecAudioModel"),Qet.forEach(t),cuo=r(f6e," (Data2VecAudio model)"),f6e.forEach(t),fuo=i($),wp=n($,"LI",{});var m6e=s(wp);Hse=n(m6e,"STRONG",{});var Het=s(Hse);muo=r(Het,"data2vec-text"),Het.forEach(t),guo=r(m6e," \u2014 "),ZI=n(m6e,"A",{href:!0});var Uet=s(ZI);huo=r(Uet,"Data2VecTextModel"),Uet.forEach(t),puo=r(m6e," (Data2VecText model)"),m6e.forEach(t),_uo=i($),Ap=n($,"LI",{});var g6e=s(Ap);Use=n(g6e,"STRONG",{});var Jet=s(Use);uuo=r(Jet,"data2vec-vision"),Jet.forEach(t),buo=r(g6e," \u2014 "),eN=n(g6e,"A",{href:!0});var Yet=s(eN);vuo=r(Yet,"Data2VecVisionModel"),Yet.forEach(t),Fuo=r(g6e," (Data2VecVision model)"),g6e.forEach(t),Tuo=i($),yp=n($,"LI",{});var h6e=s(yp);Jse=n(h6e,"STRONG",{});var Ket=s(Jse);Muo=r(Ket,"deberta"),Ket.forEach(t),Euo=r(h6e," \u2014 "),oN=n(h6e,"A",{href:!0});var Zet=s(oN);Cuo=r(Zet,"DebertaModel"),Zet.forEach(t),wuo=r(h6e," (DeBERTa model)"),h6e.forEach(t),Auo=i($),Lp=n($,"LI",{});var p6e=s(Lp);Yse=n(p6e,"STRONG",{});var eot=s(Yse);yuo=r(eot,"deberta-v2"),eot.forEach(t),Luo=r(p6e," \u2014 "),rN=n(p6e,"A",{href:!0});var oot=s(rN);xuo=r(oot,"DebertaV2Model"),oot.forEach(t),$uo=r(p6e," (DeBERTa-v2 model)"),p6e.forEach(t),kuo=i($),xp=n($,"LI",{});var _6e=s(xp);Kse=n(_6e,"STRONG",{});var rot=s(Kse);Suo=r(rot,"decision_transformer"),rot.forEach(t),Ruo=r(_6e," \u2014 "),tN=n(_6e,"A",{href:!0});var tot=s(tN);Puo=r(tot,"DecisionTransformerModel"),tot.forEach(t),Buo=r(_6e," (Decision Transformer model)"),_6e.forEach(t),Iuo=i($),$p=n($,"LI",{});var u6e=s($p);Zse=n(u6e,"STRONG",{});var aot=s(Zse);Nuo=r(aot,"deit"),aot.forEach(t),quo=r(u6e," \u2014 "),aN=n(u6e,"A",{href:!0});var not=s(aN);juo=r(not,"DeiTModel"),not.forEach(t),Duo=r(u6e," (DeiT model)"),u6e.forEach(t),Guo=i($),kp=n($,"LI",{});var b6e=s(kp);ele=n(b6e,"STRONG",{});var sot=s(ele);Ouo=r(sot,"detr"),sot.forEach(t),Vuo=r(b6e," \u2014 "),nN=n(b6e,"A",{href:!0});var lot=s(nN);Xuo=r(lot,"DetrModel"),lot.forEach(t),zuo=r(b6e," (DETR model)"),b6e.forEach(t),Wuo=i($),Sp=n($,"LI",{});var v6e=s(Sp);ole=n(v6e,"STRONG",{});var iot=s(ole);Quo=r(iot,"distilbert"),iot.forEach(t),Huo=r(v6e," \u2014 "),sN=n(v6e,"A",{href:!0});var dot=s(sN);Uuo=r(dot,"DistilBertModel"),dot.forEach(t),Juo=r(v6e," (DistilBERT model)"),v6e.forEach(t),Yuo=i($),Rp=n($,"LI",{});var F6e=s(Rp);rle=n(F6e,"STRONG",{});var cot=s(rle);Kuo=r(cot,"dpr"),cot.forEach(t),Zuo=r(F6e," \u2014 "),lN=n(F6e,"A",{href:!0});var fot=s(lN);e1o=r(fot,"DPRQuestionEncoder"),fot.forEach(t),o1o=r(F6e," (DPR model)"),F6e.forEach(t),r1o=i($),Pp=n($,"LI",{});var T6e=s(Pp);tle=n(T6e,"STRONG",{});var mot=s(tle);t1o=r(mot,"dpt"),mot.forEach(t),a1o=r(T6e," \u2014 "),iN=n(T6e,"A",{href:!0});var got=s(iN);n1o=r(got,"DPTModel"),got.forEach(t),s1o=r(T6e," (DPT model)"),T6e.forEach(t),l1o=i($),Bp=n($,"LI",{});var M6e=s(Bp);ale=n(M6e,"STRONG",{});var hot=s(ale);i1o=r(hot,"electra"),hot.forEach(t),d1o=r(M6e," \u2014 "),dN=n(M6e,"A",{href:!0});var pot=s(dN);c1o=r(pot,"ElectraModel"),pot.forEach(t),f1o=r(M6e," (ELECTRA model)"),M6e.forEach(t),m1o=i($),Ip=n($,"LI",{});var E6e=s(Ip);nle=n(E6e,"STRONG",{});var _ot=s(nle);g1o=r(_ot,"flaubert"),_ot.forEach(t),h1o=r(E6e," \u2014 "),cN=n(E6e,"A",{href:!0});var uot=s(cN);p1o=r(uot,"FlaubertModel"),uot.forEach(t),_1o=r(E6e," (FlauBERT model)"),E6e.forEach(t),u1o=i($),Np=n($,"LI",{});var C6e=s(Np);sle=n(C6e,"STRONG",{});var bot=s(sle);b1o=r(bot,"flava"),bot.forEach(t),v1o=r(C6e," \u2014 "),fN=n(C6e,"A",{href:!0});var vot=s(fN);F1o=r(vot,"FlavaModel"),vot.forEach(t),T1o=r(C6e," (Flava model)"),C6e.forEach(t),M1o=i($),qp=n($,"LI",{});var w6e=s(qp);lle=n(w6e,"STRONG",{});var Fot=s(lle);E1o=r(Fot,"fnet"),Fot.forEach(t),C1o=r(w6e," \u2014 "),mN=n(w6e,"A",{href:!0});var Tot=s(mN);w1o=r(Tot,"FNetModel"),Tot.forEach(t),A1o=r(w6e," (FNet model)"),w6e.forEach(t),y1o=i($),jp=n($,"LI",{});var A6e=s(jp);ile=n(A6e,"STRONG",{});var Mot=s(ile);L1o=r(Mot,"fsmt"),Mot.forEach(t),x1o=r(A6e," \u2014 "),gN=n(A6e,"A",{href:!0});var Eot=s(gN);$1o=r(Eot,"FSMTModel"),Eot.forEach(t),k1o=r(A6e," (FairSeq Machine-Translation model)"),A6e.forEach(t),S1o=i($),Ps=n($,"LI",{});var W$=s(Ps);dle=n(W$,"STRONG",{});var Cot=s(dle);R1o=r(Cot,"funnel"),Cot.forEach(t),P1o=r(W$," \u2014 "),hN=n(W$,"A",{href:!0});var wot=s(hN);B1o=r(wot,"FunnelModel"),wot.forEach(t),I1o=r(W$," or "),pN=n(W$,"A",{href:!0});var Aot=s(pN);N1o=r(Aot,"FunnelBaseModel"),Aot.forEach(t),q1o=r(W$," (Funnel Transformer model)"),W$.forEach(t),j1o=i($),Dp=n($,"LI",{});var y6e=s(Dp);cle=n(y6e,"STRONG",{});var yot=s(cle);D1o=r(yot,"glpn"),yot.forEach(t),G1o=r(y6e," \u2014 "),_N=n(y6e,"A",{href:!0});var Lot=s(_N);O1o=r(Lot,"GLPNModel"),Lot.forEach(t),V1o=r(y6e," (GLPN model)"),y6e.forEach(t),X1o=i($),Gp=n($,"LI",{});var L6e=s(Gp);fle=n(L6e,"STRONG",{});var xot=s(fle);z1o=r(xot,"gpt2"),xot.forEach(t),W1o=r(L6e," \u2014 "),uN=n(L6e,"A",{href:!0});var $ot=s(uN);Q1o=r($ot,"GPT2Model"),$ot.forEach(t),H1o=r(L6e," (OpenAI GPT-2 model)"),L6e.forEach(t),U1o=i($),Op=n($,"LI",{});var x6e=s(Op);mle=n(x6e,"STRONG",{});var kot=s(mle);J1o=r(kot,"gpt_neo"),kot.forEach(t),Y1o=r(x6e," \u2014 "),bN=n(x6e,"A",{href:!0});var Sot=s(bN);K1o=r(Sot,"GPTNeoModel"),Sot.forEach(t),Z1o=r(x6e," (GPT Neo model)"),x6e.forEach(t),ebo=i($),Vp=n($,"LI",{});var $6e=s(Vp);gle=n($6e,"STRONG",{});var Rot=s(gle);obo=r(Rot,"gpt_neox"),Rot.forEach(t),rbo=r($6e," \u2014 "),vN=n($6e,"A",{href:!0});var Pot=s(vN);tbo=r(Pot,"GPTNeoXModel"),Pot.forEach(t),abo=r($6e," (GPT NeoX model)"),$6e.forEach(t),nbo=i($),Xp=n($,"LI",{});var k6e=s(Xp);hle=n(k6e,"STRONG",{});var Bot=s(hle);sbo=r(Bot,"gptj"),Bot.forEach(t),lbo=r(k6e," \u2014 "),FN=n(k6e,"A",{href:!0});var Iot=s(FN);ibo=r(Iot,"GPTJModel"),Iot.forEach(t),dbo=r(k6e," (GPT-J model)"),k6e.forEach(t),cbo=i($),zp=n($,"LI",{});var S6e=s(zp);ple=n(S6e,"STRONG",{});var Not=s(ple);fbo=r(Not,"hubert"),Not.forEach(t),mbo=r(S6e," \u2014 "),TN=n(S6e,"A",{href:!0});var qot=s(TN);gbo=r(qot,"HubertModel"),qot.forEach(t),hbo=r(S6e," (Hubert model)"),S6e.forEach(t),pbo=i($),Wp=n($,"LI",{});var R6e=s(Wp);_le=n(R6e,"STRONG",{});var jot=s(_le);_bo=r(jot,"ibert"),jot.forEach(t),ubo=r(R6e," \u2014 "),MN=n(R6e,"A",{href:!0});var Dot=s(MN);bbo=r(Dot,"IBertModel"),Dot.forEach(t),vbo=r(R6e," (I-BERT model)"),R6e.forEach(t),Fbo=i($),Qp=n($,"LI",{});var P6e=s(Qp);ule=n(P6e,"STRONG",{});var Got=s(ule);Tbo=r(Got,"imagegpt"),Got.forEach(t),Mbo=r(P6e," \u2014 "),EN=n(P6e,"A",{href:!0});var Oot=s(EN);Ebo=r(Oot,"ImageGPTModel"),Oot.forEach(t),Cbo=r(P6e," (ImageGPT model)"),P6e.forEach(t),wbo=i($),Hp=n($,"LI",{});var B6e=s(Hp);ble=n(B6e,"STRONG",{});var Vot=s(ble);Abo=r(Vot,"layoutlm"),Vot.forEach(t),ybo=r(B6e," \u2014 "),CN=n(B6e,"A",{href:!0});var Xot=s(CN);Lbo=r(Xot,"LayoutLMModel"),Xot.forEach(t),xbo=r(B6e," (LayoutLM model)"),B6e.forEach(t),$bo=i($),Up=n($,"LI",{});var I6e=s(Up);vle=n(I6e,"STRONG",{});var zot=s(vle);kbo=r(zot,"layoutlmv2"),zot.forEach(t),Sbo=r(I6e," \u2014 "),wN=n(I6e,"A",{href:!0});var Wot=s(wN);Rbo=r(Wot,"LayoutLMv2Model"),Wot.forEach(t),Pbo=r(I6e," (LayoutLMv2 model)"),I6e.forEach(t),Bbo=i($),Jp=n($,"LI",{});var N6e=s(Jp);Fle=n(N6e,"STRONG",{});var Qot=s(Fle);Ibo=r(Qot,"layoutlmv3"),Qot.forEach(t),Nbo=r(N6e," \u2014 "),AN=n(N6e,"A",{href:!0});var Hot=s(AN);qbo=r(Hot,"LayoutLMv3Model"),Hot.forEach(t),jbo=r(N6e," (LayoutLMv3 model)"),N6e.forEach(t),Dbo=i($),Yp=n($,"LI",{});var q6e=s(Yp);Tle=n(q6e,"STRONG",{});var Uot=s(Tle);Gbo=r(Uot,"led"),Uot.forEach(t),Obo=r(q6e," \u2014 "),yN=n(q6e,"A",{href:!0});var Jot=s(yN);Vbo=r(Jot,"LEDModel"),Jot.forEach(t),Xbo=r(q6e," (LED model)"),q6e.forEach(t),zbo=i($),Kp=n($,"LI",{});var j6e=s(Kp);Mle=n(j6e,"STRONG",{});var Yot=s(Mle);Wbo=r(Yot,"longformer"),Yot.forEach(t),Qbo=r(j6e," \u2014 "),LN=n(j6e,"A",{href:!0});var Kot=s(LN);Hbo=r(Kot,"LongformerModel"),Kot.forEach(t),Ubo=r(j6e," (Longformer model)"),j6e.forEach(t),Jbo=i($),Zp=n($,"LI",{});var D6e=s(Zp);Ele=n(D6e,"STRONG",{});var Zot=s(Ele);Ybo=r(Zot,"luke"),Zot.forEach(t),Kbo=r(D6e," \u2014 "),xN=n(D6e,"A",{href:!0});var ert=s(xN);Zbo=r(ert,"LukeModel"),ert.forEach(t),e2o=r(D6e," (LUKE model)"),D6e.forEach(t),o2o=i($),e_=n($,"LI",{});var G6e=s(e_);Cle=n(G6e,"STRONG",{});var ort=s(Cle);r2o=r(ort,"lxmert"),ort.forEach(t),t2o=r(G6e," \u2014 "),$N=n(G6e,"A",{href:!0});var rrt=s($N);a2o=r(rrt,"LxmertModel"),rrt.forEach(t),n2o=r(G6e," (LXMERT model)"),G6e.forEach(t),s2o=i($),o_=n($,"LI",{});var O6e=s(o_);wle=n(O6e,"STRONG",{});var trt=s(wle);l2o=r(trt,"m2m_100"),trt.forEach(t),i2o=r(O6e," \u2014 "),kN=n(O6e,"A",{href:!0});var art=s(kN);d2o=r(art,"M2M100Model"),art.forEach(t),c2o=r(O6e," (M2M100 model)"),O6e.forEach(t),f2o=i($),r_=n($,"LI",{});var V6e=s(r_);Ale=n(V6e,"STRONG",{});var nrt=s(Ale);m2o=r(nrt,"marian"),nrt.forEach(t),g2o=r(V6e," \u2014 "),SN=n(V6e,"A",{href:!0});var srt=s(SN);h2o=r(srt,"MarianModel"),srt.forEach(t),p2o=r(V6e," (Marian model)"),V6e.forEach(t),_2o=i($),t_=n($,"LI",{});var X6e=s(t_);yle=n(X6e,"STRONG",{});var lrt=s(yle);u2o=r(lrt,"maskformer"),lrt.forEach(t),b2o=r(X6e," \u2014 "),RN=n(X6e,"A",{href:!0});var irt=s(RN);v2o=r(irt,"MaskFormerModel"),irt.forEach(t),F2o=r(X6e," (MaskFormer model)"),X6e.forEach(t),T2o=i($),a_=n($,"LI",{});var z6e=s(a_);Lle=n(z6e,"STRONG",{});var drt=s(Lle);M2o=r(drt,"mbart"),drt.forEach(t),E2o=r(z6e," \u2014 "),PN=n(z6e,"A",{href:!0});var crt=s(PN);C2o=r(crt,"MBartModel"),crt.forEach(t),w2o=r(z6e," (mBART model)"),z6e.forEach(t),A2o=i($),n_=n($,"LI",{});var W6e=s(n_);xle=n(W6e,"STRONG",{});var frt=s(xle);y2o=r(frt,"megatron-bert"),frt.forEach(t),L2o=r(W6e," \u2014 "),BN=n(W6e,"A",{href:!0});var mrt=s(BN);x2o=r(mrt,"MegatronBertModel"),mrt.forEach(t),$2o=r(W6e," (MegatronBert model)"),W6e.forEach(t),k2o=i($),s_=n($,"LI",{});var Q6e=s(s_);$le=n(Q6e,"STRONG",{});var grt=s($le);S2o=r(grt,"mobilebert"),grt.forEach(t),R2o=r(Q6e," \u2014 "),IN=n(Q6e,"A",{href:!0});var hrt=s(IN);P2o=r(hrt,"MobileBertModel"),hrt.forEach(t),B2o=r(Q6e," (MobileBERT model)"),Q6e.forEach(t),I2o=i($),l_=n($,"LI",{});var H6e=s(l_);kle=n(H6e,"STRONG",{});var prt=s(kle);N2o=r(prt,"mpnet"),prt.forEach(t),q2o=r(H6e," \u2014 "),NN=n(H6e,"A",{href:!0});var _rt=s(NN);j2o=r(_rt,"MPNetModel"),_rt.forEach(t),D2o=r(H6e," (MPNet model)"),H6e.forEach(t),G2o=i($),i_=n($,"LI",{});var U6e=s(i_);Sle=n(U6e,"STRONG",{});var urt=s(Sle);O2o=r(urt,"mt5"),urt.forEach(t),V2o=r(U6e," \u2014 "),qN=n(U6e,"A",{href:!0});var brt=s(qN);X2o=r(brt,"MT5Model"),brt.forEach(t),z2o=r(U6e," (mT5 model)"),U6e.forEach(t),W2o=i($),d_=n($,"LI",{});var J6e=s(d_);Rle=n(J6e,"STRONG",{});var vrt=s(Rle);Q2o=r(vrt,"nystromformer"),vrt.forEach(t),H2o=r(J6e," \u2014 "),jN=n(J6e,"A",{href:!0});var Frt=s(jN);U2o=r(Frt,"NystromformerModel"),Frt.forEach(t),J2o=r(J6e," (Nystromformer model)"),J6e.forEach(t),Y2o=i($),c_=n($,"LI",{});var Y6e=s(c_);Ple=n(Y6e,"STRONG",{});var Trt=s(Ple);K2o=r(Trt,"openai-gpt"),Trt.forEach(t),Z2o=r(Y6e," \u2014 "),DN=n(Y6e,"A",{href:!0});var Mrt=s(DN);e4o=r(Mrt,"OpenAIGPTModel"),Mrt.forEach(t),o4o=r(Y6e," (OpenAI GPT model)"),Y6e.forEach(t),r4o=i($),f_=n($,"LI",{});var K6e=s(f_);Ble=n(K6e,"STRONG",{});var Ert=s(Ble);t4o=r(Ert,"opt"),Ert.forEach(t),a4o=r(K6e," \u2014 "),GN=n(K6e,"A",{href:!0});var Crt=s(GN);n4o=r(Crt,"OPTModel"),Crt.forEach(t),s4o=r(K6e," (OPT model)"),K6e.forEach(t),l4o=i($),m_=n($,"LI",{});var Z6e=s(m_);Ile=n(Z6e,"STRONG",{});var wrt=s(Ile);i4o=r(wrt,"pegasus"),wrt.forEach(t),d4o=r(Z6e," \u2014 "),ON=n(Z6e,"A",{href:!0});var Art=s(ON);c4o=r(Art,"PegasusModel"),Art.forEach(t),f4o=r(Z6e," (Pegasus model)"),Z6e.forEach(t),m4o=i($),g_=n($,"LI",{});var eAe=s(g_);Nle=n(eAe,"STRONG",{});var yrt=s(Nle);g4o=r(yrt,"perceiver"),yrt.forEach(t),h4o=r(eAe," \u2014 "),VN=n(eAe,"A",{href:!0});var Lrt=s(VN);p4o=r(Lrt,"PerceiverModel"),Lrt.forEach(t),_4o=r(eAe," (Perceiver model)"),eAe.forEach(t),u4o=i($),h_=n($,"LI",{});var oAe=s(h_);qle=n(oAe,"STRONG",{});var xrt=s(qle);b4o=r(xrt,"plbart"),xrt.forEach(t),v4o=r(oAe," \u2014 "),XN=n(oAe,"A",{href:!0});var $rt=s(XN);F4o=r($rt,"PLBartModel"),$rt.forEach(t),T4o=r(oAe," (PLBart model)"),oAe.forEach(t),M4o=i($),p_=n($,"LI",{});var rAe=s(p_);jle=n(rAe,"STRONG",{});var krt=s(jle);E4o=r(krt,"poolformer"),krt.forEach(t),C4o=r(rAe," \u2014 "),zN=n(rAe,"A",{href:!0});var Srt=s(zN);w4o=r(Srt,"PoolFormerModel"),Srt.forEach(t),A4o=r(rAe," (PoolFormer model)"),rAe.forEach(t),y4o=i($),__=n($,"LI",{});var tAe=s(__);Dle=n(tAe,"STRONG",{});var Rrt=s(Dle);L4o=r(Rrt,"prophetnet"),Rrt.forEach(t),x4o=r(tAe," \u2014 "),WN=n(tAe,"A",{href:!0});var Prt=s(WN);$4o=r(Prt,"ProphetNetModel"),Prt.forEach(t),k4o=r(tAe," (ProphetNet model)"),tAe.forEach(t),S4o=i($),u_=n($,"LI",{});var aAe=s(u_);Gle=n(aAe,"STRONG",{});var Brt=s(Gle);R4o=r(Brt,"qdqbert"),Brt.forEach(t),P4o=r(aAe," \u2014 "),QN=n(aAe,"A",{href:!0});var Irt=s(QN);B4o=r(Irt,"QDQBertModel"),Irt.forEach(t),I4o=r(aAe," (QDQBert model)"),aAe.forEach(t),N4o=i($),b_=n($,"LI",{});var nAe=s(b_);Ole=n(nAe,"STRONG",{});var Nrt=s(Ole);q4o=r(Nrt,"reformer"),Nrt.forEach(t),j4o=r(nAe," \u2014 "),HN=n(nAe,"A",{href:!0});var qrt=s(HN);D4o=r(qrt,"ReformerModel"),qrt.forEach(t),G4o=r(nAe," (Reformer model)"),nAe.forEach(t),O4o=i($),v_=n($,"LI",{});var sAe=s(v_);Vle=n(sAe,"STRONG",{});var jrt=s(Vle);V4o=r(jrt,"regnet"),jrt.forEach(t),X4o=r(sAe," \u2014 "),UN=n(sAe,"A",{href:!0});var Drt=s(UN);z4o=r(Drt,"RegNetModel"),Drt.forEach(t),W4o=r(sAe," (RegNet model)"),sAe.forEach(t),Q4o=i($),F_=n($,"LI",{});var lAe=s(F_);Xle=n(lAe,"STRONG",{});var Grt=s(Xle);H4o=r(Grt,"rembert"),Grt.forEach(t),U4o=r(lAe," \u2014 "),JN=n(lAe,"A",{href:!0});var Ort=s(JN);J4o=r(Ort,"RemBertModel"),Ort.forEach(t),Y4o=r(lAe," (RemBERT model)"),lAe.forEach(t),K4o=i($),T_=n($,"LI",{});var iAe=s(T_);zle=n(iAe,"STRONG",{});var Vrt=s(zle);Z4o=r(Vrt,"resnet"),Vrt.forEach(t),e5o=r(iAe," \u2014 "),YN=n(iAe,"A",{href:!0});var Xrt=s(YN);o5o=r(Xrt,"ResNetModel"),Xrt.forEach(t),r5o=r(iAe," (ResNet model)"),iAe.forEach(t),t5o=i($),M_=n($,"LI",{});var dAe=s(M_);Wle=n(dAe,"STRONG",{});var zrt=s(Wle);a5o=r(zrt,"retribert"),zrt.forEach(t),n5o=r(dAe," \u2014 "),KN=n(dAe,"A",{href:!0});var Wrt=s(KN);s5o=r(Wrt,"RetriBertModel"),Wrt.forEach(t),l5o=r(dAe," (RetriBERT model)"),dAe.forEach(t),i5o=i($),E_=n($,"LI",{});var cAe=s(E_);Qle=n(cAe,"STRONG",{});var Qrt=s(Qle);d5o=r(Qrt,"roberta"),Qrt.forEach(t),c5o=r(cAe," \u2014 "),ZN=n(cAe,"A",{href:!0});var Hrt=s(ZN);f5o=r(Hrt,"RobertaModel"),Hrt.forEach(t),m5o=r(cAe," (RoBERTa model)"),cAe.forEach(t),g5o=i($),C_=n($,"LI",{});var fAe=s(C_);Hle=n(fAe,"STRONG",{});var Urt=s(Hle);h5o=r(Urt,"roformer"),Urt.forEach(t),p5o=r(fAe," \u2014 "),eq=n(fAe,"A",{href:!0});var Jrt=s(eq);_5o=r(Jrt,"RoFormerModel"),Jrt.forEach(t),u5o=r(fAe," (RoFormer model)"),fAe.forEach(t),b5o=i($),w_=n($,"LI",{});var mAe=s(w_);Ule=n(mAe,"STRONG",{});var Yrt=s(Ule);v5o=r(Yrt,"segformer"),Yrt.forEach(t),F5o=r(mAe," \u2014 "),oq=n(mAe,"A",{href:!0});var Krt=s(oq);T5o=r(Krt,"SegformerModel"),Krt.forEach(t),M5o=r(mAe," (SegFormer model)"),mAe.forEach(t),E5o=i($),A_=n($,"LI",{});var gAe=s(A_);Jle=n(gAe,"STRONG",{});var Zrt=s(Jle);C5o=r(Zrt,"sew"),Zrt.forEach(t),w5o=r(gAe," \u2014 "),rq=n(gAe,"A",{href:!0});var ett=s(rq);A5o=r(ett,"SEWModel"),ett.forEach(t),y5o=r(gAe," (SEW model)"),gAe.forEach(t),L5o=i($),y_=n($,"LI",{});var hAe=s(y_);Yle=n(hAe,"STRONG",{});var ott=s(Yle);x5o=r(ott,"sew-d"),ott.forEach(t),$5o=r(hAe," \u2014 "),tq=n(hAe,"A",{href:!0});var rtt=s(tq);k5o=r(rtt,"SEWDModel"),rtt.forEach(t),S5o=r(hAe," (SEW-D model)"),hAe.forEach(t),R5o=i($),L_=n($,"LI",{});var pAe=s(L_);Kle=n(pAe,"STRONG",{});var ttt=s(Kle);P5o=r(ttt,"speech_to_text"),ttt.forEach(t),B5o=r(pAe," \u2014 "),aq=n(pAe,"A",{href:!0});var att=s(aq);I5o=r(att,"Speech2TextModel"),att.forEach(t),N5o=r(pAe," (Speech2Text model)"),pAe.forEach(t),q5o=i($),x_=n($,"LI",{});var _Ae=s(x_);Zle=n(_Ae,"STRONG",{});var ntt=s(Zle);j5o=r(ntt,"splinter"),ntt.forEach(t),D5o=r(_Ae," \u2014 "),nq=n(_Ae,"A",{href:!0});var stt=s(nq);G5o=r(stt,"SplinterModel"),stt.forEach(t),O5o=r(_Ae," (Splinter model)"),_Ae.forEach(t),V5o=i($),$_=n($,"LI",{});var uAe=s($_);eie=n(uAe,"STRONG",{});var ltt=s(eie);X5o=r(ltt,"squeezebert"),ltt.forEach(t),z5o=r(uAe," \u2014 "),sq=n(uAe,"A",{href:!0});var itt=s(sq);W5o=r(itt,"SqueezeBertModel"),itt.forEach(t),Q5o=r(uAe," (SqueezeBERT model)"),uAe.forEach(t),H5o=i($),k_=n($,"LI",{});var bAe=s(k_);oie=n(bAe,"STRONG",{});var dtt=s(oie);U5o=r(dtt,"swin"),dtt.forEach(t),J5o=r(bAe," \u2014 "),lq=n(bAe,"A",{href:!0});var ctt=s(lq);Y5o=r(ctt,"SwinModel"),ctt.forEach(t),K5o=r(bAe," (Swin model)"),bAe.forEach(t),Z5o=i($),S_=n($,"LI",{});var vAe=s(S_);rie=n(vAe,"STRONG",{});var ftt=s(rie);evo=r(ftt,"t5"),ftt.forEach(t),ovo=r(vAe," \u2014 "),iq=n(vAe,"A",{href:!0});var mtt=s(iq);rvo=r(mtt,"T5Model"),mtt.forEach(t),tvo=r(vAe," (T5 model)"),vAe.forEach(t),avo=i($),R_=n($,"LI",{});var FAe=s(R_);tie=n(FAe,"STRONG",{});var gtt=s(tie);nvo=r(gtt,"tapas"),gtt.forEach(t),svo=r(FAe," \u2014 "),dq=n(FAe,"A",{href:!0});var htt=s(dq);lvo=r(htt,"TapasModel"),htt.forEach(t),ivo=r(FAe," (TAPAS model)"),FAe.forEach(t),dvo=i($),P_=n($,"LI",{});var TAe=s(P_);aie=n(TAe,"STRONG",{});var ptt=s(aie);cvo=r(ptt,"trajectory_transformer"),ptt.forEach(t),fvo=r(TAe," \u2014 "),cq=n(TAe,"A",{href:!0});var _tt=s(cq);mvo=r(_tt,"TrajectoryTransformerModel"),_tt.forEach(t),gvo=r(TAe," (Trajectory Transformer model)"),TAe.forEach(t),hvo=i($),B_=n($,"LI",{});var MAe=s(B_);nie=n(MAe,"STRONG",{});var utt=s(nie);pvo=r(utt,"transfo-xl"),utt.forEach(t),_vo=r(MAe," \u2014 "),fq=n(MAe,"A",{href:!0});var btt=s(fq);uvo=r(btt,"TransfoXLModel"),btt.forEach(t),bvo=r(MAe," (Transformer-XL model)"),MAe.forEach(t),vvo=i($),I_=n($,"LI",{});var EAe=s(I_);sie=n(EAe,"STRONG",{});var vtt=s(sie);Fvo=r(vtt,"unispeech"),vtt.forEach(t),Tvo=r(EAe," \u2014 "),mq=n(EAe,"A",{href:!0});var Ftt=s(mq);Mvo=r(Ftt,"UniSpeechModel"),Ftt.forEach(t),Evo=r(EAe," (UniSpeech model)"),EAe.forEach(t),Cvo=i($),N_=n($,"LI",{});var CAe=s(N_);lie=n(CAe,"STRONG",{});var Ttt=s(lie);wvo=r(Ttt,"unispeech-sat"),Ttt.forEach(t),Avo=r(CAe," \u2014 "),gq=n(CAe,"A",{href:!0});var Mtt=s(gq);yvo=r(Mtt,"UniSpeechSatModel"),Mtt.forEach(t),Lvo=r(CAe," (UniSpeechSat model)"),CAe.forEach(t),xvo=i($),q_=n($,"LI",{});var wAe=s(q_);iie=n(wAe,"STRONG",{});var Ett=s(iie);$vo=r(Ett,"van"),Ett.forEach(t),kvo=r(wAe," \u2014 "),hq=n(wAe,"A",{href:!0});var Ctt=s(hq);Svo=r(Ctt,"VanModel"),Ctt.forEach(t),Rvo=r(wAe," (VAN model)"),wAe.forEach(t),Pvo=i($),j_=n($,"LI",{});var AAe=s(j_);die=n(AAe,"STRONG",{});var wtt=s(die);Bvo=r(wtt,"vilt"),wtt.forEach(t),Ivo=r(AAe," \u2014 "),pq=n(AAe,"A",{href:!0});var Att=s(pq);Nvo=r(Att,"ViltModel"),Att.forEach(t),qvo=r(AAe," (ViLT model)"),AAe.forEach(t),jvo=i($),D_=n($,"LI",{});var yAe=s(D_);cie=n(yAe,"STRONG",{});var ytt=s(cie);Dvo=r(ytt,"vision-text-dual-encoder"),ytt.forEach(t),Gvo=r(yAe," \u2014 "),_q=n(yAe,"A",{href:!0});var Ltt=s(_q);Ovo=r(Ltt,"VisionTextDualEncoderModel"),Ltt.forEach(t),Vvo=r(yAe," (VisionTextDualEncoder model)"),yAe.forEach(t),Xvo=i($),G_=n($,"LI",{});var LAe=s(G_);fie=n(LAe,"STRONG",{});var xtt=s(fie);zvo=r(xtt,"visual_bert"),xtt.forEach(t),Wvo=r(LAe," \u2014 "),uq=n(LAe,"A",{href:!0});var $tt=s(uq);Qvo=r($tt,"VisualBertModel"),$tt.forEach(t),Hvo=r(LAe," (VisualBert model)"),LAe.forEach(t),Uvo=i($),O_=n($,"LI",{});var xAe=s(O_);mie=n(xAe,"STRONG",{});var ktt=s(mie);Jvo=r(ktt,"vit"),ktt.forEach(t),Yvo=r(xAe," \u2014 "),bq=n(xAe,"A",{href:!0});var Stt=s(bq);Kvo=r(Stt,"ViTModel"),Stt.forEach(t),Zvo=r(xAe," (ViT model)"),xAe.forEach(t),eFo=i($),V_=n($,"LI",{});var $Ae=s(V_);gie=n($Ae,"STRONG",{});var Rtt=s(gie);oFo=r(Rtt,"vit_mae"),Rtt.forEach(t),rFo=r($Ae," \u2014 "),vq=n($Ae,"A",{href:!0});var Ptt=s(vq);tFo=r(Ptt,"ViTMAEModel"),Ptt.forEach(t),aFo=r($Ae," (ViTMAE model)"),$Ae.forEach(t),nFo=i($),X_=n($,"LI",{});var kAe=s(X_);hie=n(kAe,"STRONG",{});var Btt=s(hie);sFo=r(Btt,"wav2vec2"),Btt.forEach(t),lFo=r(kAe," \u2014 "),Fq=n(kAe,"A",{href:!0});var Itt=s(Fq);iFo=r(Itt,"Wav2Vec2Model"),Itt.forEach(t),dFo=r(kAe," (Wav2Vec2 model)"),kAe.forEach(t),cFo=i($),z_=n($,"LI",{});var SAe=s(z_);pie=n(SAe,"STRONG",{});var Ntt=s(pie);fFo=r(Ntt,"wav2vec2-conformer"),Ntt.forEach(t),mFo=r(SAe," \u2014 "),Tq=n(SAe,"A",{href:!0});var qtt=s(Tq);gFo=r(qtt,"Wav2Vec2ConformerModel"),qtt.forEach(t),hFo=r(SAe," (Wav2Vec2-Conformer model)"),SAe.forEach(t),pFo=i($),W_=n($,"LI",{});var RAe=s(W_);_ie=n(RAe,"STRONG",{});var jtt=s(_ie);_Fo=r(jtt,"wavlm"),jtt.forEach(t),uFo=r(RAe," \u2014 "),Mq=n(RAe,"A",{href:!0});var Dtt=s(Mq);bFo=r(Dtt,"WavLMModel"),Dtt.forEach(t),vFo=r(RAe," (WavLM model)"),RAe.forEach(t),FFo=i($),Q_=n($,"LI",{});var PAe=s(Q_);uie=n(PAe,"STRONG",{});var Gtt=s(uie);TFo=r(Gtt,"xglm"),Gtt.forEach(t),MFo=r(PAe," \u2014 "),Eq=n(PAe,"A",{href:!0});var Ott=s(Eq);EFo=r(Ott,"XGLMModel"),Ott.forEach(t),CFo=r(PAe," (XGLM model)"),PAe.forEach(t),wFo=i($),H_=n($,"LI",{});var BAe=s(H_);bie=n(BAe,"STRONG",{});var Vtt=s(bie);AFo=r(Vtt,"xlm"),Vtt.forEach(t),yFo=r(BAe," \u2014 "),Cq=n(BAe,"A",{href:!0});var Xtt=s(Cq);LFo=r(Xtt,"XLMModel"),Xtt.forEach(t),xFo=r(BAe," (XLM model)"),BAe.forEach(t),$Fo=i($),U_=n($,"LI",{});var IAe=s(U_);vie=n(IAe,"STRONG",{});var ztt=s(vie);kFo=r(ztt,"xlm-prophetnet"),ztt.forEach(t),SFo=r(IAe," \u2014 "),wq=n(IAe,"A",{href:!0});var Wtt=s(wq);RFo=r(Wtt,"XLMProphetNetModel"),Wtt.forEach(t),PFo=r(IAe," (XLMProphetNet model)"),IAe.forEach(t),BFo=i($),J_=n($,"LI",{});var NAe=s(J_);Fie=n(NAe,"STRONG",{});var Qtt=s(Fie);IFo=r(Qtt,"xlm-roberta"),Qtt.forEach(t),NFo=r(NAe," \u2014 "),Aq=n(NAe,"A",{href:!0});var Htt=s(Aq);qFo=r(Htt,"XLMRobertaModel"),Htt.forEach(t),jFo=r(NAe," (XLM-RoBERTa model)"),NAe.forEach(t),DFo=i($),Y_=n($,"LI",{});var qAe=s(Y_);Tie=n(qAe,"STRONG",{});var Utt=s(Tie);GFo=r(Utt,"xlm-roberta-xl"),Utt.forEach(t),OFo=r(qAe," \u2014 "),yq=n(qAe,"A",{href:!0});var Jtt=s(yq);VFo=r(Jtt,"XLMRobertaXLModel"),Jtt.forEach(t),XFo=r(qAe," (XLM-RoBERTa-XL model)"),qAe.forEach(t),zFo=i($),K_=n($,"LI",{});var jAe=s(K_);Mie=n(jAe,"STRONG",{});var Ytt=s(Mie);WFo=r(Ytt,"xlnet"),Ytt.forEach(t),QFo=r(jAe," \u2014 "),Lq=n(jAe,"A",{href:!0});var Ktt=s(Lq);HFo=r(Ktt,"XLNetModel"),Ktt.forEach(t),UFo=r(jAe," (XLNet model)"),jAe.forEach(t),JFo=i($),Z_=n($,"LI",{});var DAe=s(Z_);Eie=n(DAe,"STRONG",{});var Ztt=s(Eie);YFo=r(Ztt,"yolos"),Ztt.forEach(t),KFo=r(DAe," \u2014 "),xq=n(DAe,"A",{href:!0});var eat=s(xq);ZFo=r(eat,"YolosModel"),eat.forEach(t),eTo=r(DAe," (YOLOS model)"),DAe.forEach(t),oTo=i($),eu=n($,"LI",{});var GAe=s(eu);Cie=n(GAe,"STRONG",{});var oat=s(Cie);rTo=r(oat,"yoso"),oat.forEach(t),tTo=r(GAe," \u2014 "),$q=n(GAe,"A",{href:!0});var rat=s($q);aTo=r(rat,"YosoModel"),rat.forEach(t),nTo=r(GAe," (YOSO model)"),GAe.forEach(t),$.forEach(t),sTo=i(oa),ou=n(oa,"P",{});var OAe=s(ou);lTo=r(OAe,"The model is set in evaluation mode by default using "),wie=n(OAe,"CODE",{});var tat=s(wie);iTo=r(tat,"model.eval()"),tat.forEach(t),dTo=r(OAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aie=n(OAe,"CODE",{});var aat=s(Aie);cTo=r(aat,"model.train()"),aat.forEach(t),OAe.forEach(t),fTo=i(oa),T(ru.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),xqe=i(f),Li=n(f,"H2",{class:!0});var RDe=s(Li);tu=n(RDe,"A",{id:!0,class:!0,href:!0});var nat=s(tu);yie=n(nat,"SPAN",{});var sat=s(yie);T(iA.$$.fragment,sat),sat.forEach(t),nat.forEach(t),mTo=i(RDe),Lie=n(RDe,"SPAN",{});var lat=s(Lie);gTo=r(lat,"AutoModelForPreTraining"),lat.forEach(t),RDe.forEach(t),$qe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(dA.$$.fragment,Os),hTo=i(Os),xi=n(Os,"P",{});var wZ=s(xi);pTo=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kq=n(wZ,"A",{href:!0});var iat=s(kq);_To=r(iat,"from_pretrained()"),iat.forEach(t),uTo=r(wZ," class method or the "),Sq=n(wZ,"A",{href:!0});var dat=s(Sq);bTo=r(dat,"from_config()"),dat.forEach(t),vTo=r(wZ,` class
method.`),wZ.forEach(t),FTo=i(Os),cA=n(Os,"P",{});var PDe=s(cA);TTo=r(PDe,"This class cannot be instantiated directly using "),xie=n(PDe,"CODE",{});var cat=s(xie);MTo=r(cat,"__init__()"),cat.forEach(t),ETo=r(PDe," (throws an error)."),PDe.forEach(t),CTo=i(Os),at=n(Os,"DIV",{class:!0});var Nw=s(at);T(fA.$$.fragment,Nw),wTo=i(Nw),$ie=n(Nw,"P",{});var fat=s($ie);ATo=r(fat,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fat.forEach(t),yTo=i(Nw),$i=n(Nw,"P",{});var AZ=s($i);LTo=r(AZ,`Note:
Loading a model from its configuration file does `),kie=n(AZ,"STRONG",{});var mat=s(kie);xTo=r(mat,"not"),mat.forEach(t),$To=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rq=n(AZ,"A",{href:!0});var gat=s(Rq);kTo=r(gat,"from_pretrained()"),gat.forEach(t),STo=r(AZ," to load the model weights."),AZ.forEach(t),RTo=i(Nw),T(au.$$.fragment,Nw),Nw.forEach(t),PTo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(mA.$$.fragment,ra),BTo=i(ra),Sie=n(ra,"P",{});var hat=s(Sie);ITo=r(hat,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hat.forEach(t),NTo=i(ra),xa=n(ra,"P",{});var qw=s(xa);qTo=r(qw,"The model class to instantiate is selected based on the "),Rie=n(qw,"CODE",{});var pat=s(Rie);jTo=r(pat,"model_type"),pat.forEach(t),DTo=r(qw,` property of the config object (either
passed as an argument or loaded from `),Pie=n(qw,"CODE",{});var _at=s(Pie);GTo=r(_at,"pretrained_model_name_or_path"),_at.forEach(t),OTo=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bie=n(qw,"CODE",{});var uat=s(Bie);VTo=r(uat,"pretrained_model_name_or_path"),uat.forEach(t),XTo=r(qw,":"),qw.forEach(t),zTo=i(ra),G=n(ra,"UL",{});var O=s(G);nu=n(O,"LI",{});var VAe=s(nu);Iie=n(VAe,"STRONG",{});var bat=s(Iie);WTo=r(bat,"albert"),bat.forEach(t),QTo=r(VAe," \u2014 "),Pq=n(VAe,"A",{href:!0});var vat=s(Pq);HTo=r(vat,"AlbertForPreTraining"),vat.forEach(t),UTo=r(VAe," (ALBERT model)"),VAe.forEach(t),JTo=i(O),su=n(O,"LI",{});var XAe=s(su);Nie=n(XAe,"STRONG",{});var Fat=s(Nie);YTo=r(Fat,"bart"),Fat.forEach(t),KTo=r(XAe," \u2014 "),Bq=n(XAe,"A",{href:!0});var Tat=s(Bq);ZTo=r(Tat,"BartForConditionalGeneration"),Tat.forEach(t),e7o=r(XAe," (BART model)"),XAe.forEach(t),o7o=i(O),lu=n(O,"LI",{});var zAe=s(lu);qie=n(zAe,"STRONG",{});var Mat=s(qie);r7o=r(Mat,"bert"),Mat.forEach(t),t7o=r(zAe," \u2014 "),Iq=n(zAe,"A",{href:!0});var Eat=s(Iq);a7o=r(Eat,"BertForPreTraining"),Eat.forEach(t),n7o=r(zAe," (BERT model)"),zAe.forEach(t),s7o=i(O),iu=n(O,"LI",{});var WAe=s(iu);jie=n(WAe,"STRONG",{});var Cat=s(jie);l7o=r(Cat,"big_bird"),Cat.forEach(t),i7o=r(WAe," \u2014 "),Nq=n(WAe,"A",{href:!0});var wat=s(Nq);d7o=r(wat,"BigBirdForPreTraining"),wat.forEach(t),c7o=r(WAe," (BigBird model)"),WAe.forEach(t),f7o=i(O),du=n(O,"LI",{});var QAe=s(du);Die=n(QAe,"STRONG",{});var Aat=s(Die);m7o=r(Aat,"camembert"),Aat.forEach(t),g7o=r(QAe," \u2014 "),qq=n(QAe,"A",{href:!0});var yat=s(qq);h7o=r(yat,"CamembertForMaskedLM"),yat.forEach(t),p7o=r(QAe," (CamemBERT model)"),QAe.forEach(t),_7o=i(O),cu=n(O,"LI",{});var HAe=s(cu);Gie=n(HAe,"STRONG",{});var Lat=s(Gie);u7o=r(Lat,"ctrl"),Lat.forEach(t),b7o=r(HAe," \u2014 "),jq=n(HAe,"A",{href:!0});var xat=s(jq);v7o=r(xat,"CTRLLMHeadModel"),xat.forEach(t),F7o=r(HAe," (CTRL model)"),HAe.forEach(t),T7o=i(O),fu=n(O,"LI",{});var UAe=s(fu);Oie=n(UAe,"STRONG",{});var $at=s(Oie);M7o=r($at,"data2vec-text"),$at.forEach(t),E7o=r(UAe," \u2014 "),Dq=n(UAe,"A",{href:!0});var kat=s(Dq);C7o=r(kat,"Data2VecTextForMaskedLM"),kat.forEach(t),w7o=r(UAe," (Data2VecText model)"),UAe.forEach(t),A7o=i(O),mu=n(O,"LI",{});var JAe=s(mu);Vie=n(JAe,"STRONG",{});var Sat=s(Vie);y7o=r(Sat,"deberta"),Sat.forEach(t),L7o=r(JAe," \u2014 "),Gq=n(JAe,"A",{href:!0});var Rat=s(Gq);x7o=r(Rat,"DebertaForMaskedLM"),Rat.forEach(t),$7o=r(JAe," (DeBERTa model)"),JAe.forEach(t),k7o=i(O),gu=n(O,"LI",{});var YAe=s(gu);Xie=n(YAe,"STRONG",{});var Pat=s(Xie);S7o=r(Pat,"deberta-v2"),Pat.forEach(t),R7o=r(YAe," \u2014 "),Oq=n(YAe,"A",{href:!0});var Bat=s(Oq);P7o=r(Bat,"DebertaV2ForMaskedLM"),Bat.forEach(t),B7o=r(YAe," (DeBERTa-v2 model)"),YAe.forEach(t),I7o=i(O),hu=n(O,"LI",{});var KAe=s(hu);zie=n(KAe,"STRONG",{});var Iat=s(zie);N7o=r(Iat,"distilbert"),Iat.forEach(t),q7o=r(KAe," \u2014 "),Vq=n(KAe,"A",{href:!0});var Nat=s(Vq);j7o=r(Nat,"DistilBertForMaskedLM"),Nat.forEach(t),D7o=r(KAe," (DistilBERT model)"),KAe.forEach(t),G7o=i(O),pu=n(O,"LI",{});var ZAe=s(pu);Wie=n(ZAe,"STRONG",{});var qat=s(Wie);O7o=r(qat,"electra"),qat.forEach(t),V7o=r(ZAe," \u2014 "),Xq=n(ZAe,"A",{href:!0});var jat=s(Xq);X7o=r(jat,"ElectraForPreTraining"),jat.forEach(t),z7o=r(ZAe," (ELECTRA model)"),ZAe.forEach(t),W7o=i(O),_u=n(O,"LI",{});var eye=s(_u);Qie=n(eye,"STRONG",{});var Dat=s(Qie);Q7o=r(Dat,"flaubert"),Dat.forEach(t),H7o=r(eye," \u2014 "),zq=n(eye,"A",{href:!0});var Gat=s(zq);U7o=r(Gat,"FlaubertWithLMHeadModel"),Gat.forEach(t),J7o=r(eye," (FlauBERT model)"),eye.forEach(t),Y7o=i(O),uu=n(O,"LI",{});var oye=s(uu);Hie=n(oye,"STRONG",{});var Oat=s(Hie);K7o=r(Oat,"flava"),Oat.forEach(t),Z7o=r(oye," \u2014 "),Wq=n(oye,"A",{href:!0});var Vat=s(Wq);e9o=r(Vat,"FlavaForPreTraining"),Vat.forEach(t),o9o=r(oye," (Flava model)"),oye.forEach(t),r9o=i(O),bu=n(O,"LI",{});var rye=s(bu);Uie=n(rye,"STRONG",{});var Xat=s(Uie);t9o=r(Xat,"fnet"),Xat.forEach(t),a9o=r(rye," \u2014 "),Qq=n(rye,"A",{href:!0});var zat=s(Qq);n9o=r(zat,"FNetForPreTraining"),zat.forEach(t),s9o=r(rye," (FNet model)"),rye.forEach(t),l9o=i(O),vu=n(O,"LI",{});var tye=s(vu);Jie=n(tye,"STRONG",{});var Wat=s(Jie);i9o=r(Wat,"fsmt"),Wat.forEach(t),d9o=r(tye," \u2014 "),Hq=n(tye,"A",{href:!0});var Qat=s(Hq);c9o=r(Qat,"FSMTForConditionalGeneration"),Qat.forEach(t),f9o=r(tye," (FairSeq Machine-Translation model)"),tye.forEach(t),m9o=i(O),Fu=n(O,"LI",{});var aye=s(Fu);Yie=n(aye,"STRONG",{});var Hat=s(Yie);g9o=r(Hat,"funnel"),Hat.forEach(t),h9o=r(aye," \u2014 "),Uq=n(aye,"A",{href:!0});var Uat=s(Uq);p9o=r(Uat,"FunnelForPreTraining"),Uat.forEach(t),_9o=r(aye," (Funnel Transformer model)"),aye.forEach(t),u9o=i(O),Tu=n(O,"LI",{});var nye=s(Tu);Kie=n(nye,"STRONG",{});var Jat=s(Kie);b9o=r(Jat,"gpt2"),Jat.forEach(t),v9o=r(nye," \u2014 "),Jq=n(nye,"A",{href:!0});var Yat=s(Jq);F9o=r(Yat,"GPT2LMHeadModel"),Yat.forEach(t),T9o=r(nye," (OpenAI GPT-2 model)"),nye.forEach(t),M9o=i(O),Mu=n(O,"LI",{});var sye=s(Mu);Zie=n(sye,"STRONG",{});var Kat=s(Zie);E9o=r(Kat,"ibert"),Kat.forEach(t),C9o=r(sye," \u2014 "),Yq=n(sye,"A",{href:!0});var Zat=s(Yq);w9o=r(Zat,"IBertForMaskedLM"),Zat.forEach(t),A9o=r(sye," (I-BERT model)"),sye.forEach(t),y9o=i(O),Eu=n(O,"LI",{});var lye=s(Eu);ede=n(lye,"STRONG",{});var ent=s(ede);L9o=r(ent,"layoutlm"),ent.forEach(t),x9o=r(lye," \u2014 "),Kq=n(lye,"A",{href:!0});var ont=s(Kq);$9o=r(ont,"LayoutLMForMaskedLM"),ont.forEach(t),k9o=r(lye," (LayoutLM model)"),lye.forEach(t),S9o=i(O),Cu=n(O,"LI",{});var iye=s(Cu);ode=n(iye,"STRONG",{});var rnt=s(ode);R9o=r(rnt,"longformer"),rnt.forEach(t),P9o=r(iye," \u2014 "),Zq=n(iye,"A",{href:!0});var tnt=s(Zq);B9o=r(tnt,"LongformerForMaskedLM"),tnt.forEach(t),I9o=r(iye," (Longformer model)"),iye.forEach(t),N9o=i(O),wu=n(O,"LI",{});var dye=s(wu);rde=n(dye,"STRONG",{});var ant=s(rde);q9o=r(ant,"lxmert"),ant.forEach(t),j9o=r(dye," \u2014 "),ej=n(dye,"A",{href:!0});var nnt=s(ej);D9o=r(nnt,"LxmertForPreTraining"),nnt.forEach(t),G9o=r(dye," (LXMERT model)"),dye.forEach(t),O9o=i(O),Au=n(O,"LI",{});var cye=s(Au);tde=n(cye,"STRONG",{});var snt=s(tde);V9o=r(snt,"megatron-bert"),snt.forEach(t),X9o=r(cye," \u2014 "),oj=n(cye,"A",{href:!0});var lnt=s(oj);z9o=r(lnt,"MegatronBertForPreTraining"),lnt.forEach(t),W9o=r(cye," (MegatronBert model)"),cye.forEach(t),Q9o=i(O),yu=n(O,"LI",{});var fye=s(yu);ade=n(fye,"STRONG",{});var int=s(ade);H9o=r(int,"mobilebert"),int.forEach(t),U9o=r(fye," \u2014 "),rj=n(fye,"A",{href:!0});var dnt=s(rj);J9o=r(dnt,"MobileBertForPreTraining"),dnt.forEach(t),Y9o=r(fye," (MobileBERT model)"),fye.forEach(t),K9o=i(O),Lu=n(O,"LI",{});var mye=s(Lu);nde=n(mye,"STRONG",{});var cnt=s(nde);Z9o=r(cnt,"mpnet"),cnt.forEach(t),eMo=r(mye," \u2014 "),tj=n(mye,"A",{href:!0});var fnt=s(tj);oMo=r(fnt,"MPNetForMaskedLM"),fnt.forEach(t),rMo=r(mye," (MPNet model)"),mye.forEach(t),tMo=i(O),xu=n(O,"LI",{});var gye=s(xu);sde=n(gye,"STRONG",{});var mnt=s(sde);aMo=r(mnt,"openai-gpt"),mnt.forEach(t),nMo=r(gye," \u2014 "),aj=n(gye,"A",{href:!0});var gnt=s(aj);sMo=r(gnt,"OpenAIGPTLMHeadModel"),gnt.forEach(t),lMo=r(gye," (OpenAI GPT model)"),gye.forEach(t),iMo=i(O),$u=n(O,"LI",{});var hye=s($u);lde=n(hye,"STRONG",{});var hnt=s(lde);dMo=r(hnt,"retribert"),hnt.forEach(t),cMo=r(hye," \u2014 "),nj=n(hye,"A",{href:!0});var pnt=s(nj);fMo=r(pnt,"RetriBertModel"),pnt.forEach(t),mMo=r(hye," (RetriBERT model)"),hye.forEach(t),gMo=i(O),ku=n(O,"LI",{});var pye=s(ku);ide=n(pye,"STRONG",{});var _nt=s(ide);hMo=r(_nt,"roberta"),_nt.forEach(t),pMo=r(pye," \u2014 "),sj=n(pye,"A",{href:!0});var unt=s(sj);_Mo=r(unt,"RobertaForMaskedLM"),unt.forEach(t),uMo=r(pye," (RoBERTa model)"),pye.forEach(t),bMo=i(O),Su=n(O,"LI",{});var _ye=s(Su);dde=n(_ye,"STRONG",{});var bnt=s(dde);vMo=r(bnt,"splinter"),bnt.forEach(t),FMo=r(_ye," \u2014 "),lj=n(_ye,"A",{href:!0});var vnt=s(lj);TMo=r(vnt,"SplinterForPreTraining"),vnt.forEach(t),MMo=r(_ye," (Splinter model)"),_ye.forEach(t),EMo=i(O),Ru=n(O,"LI",{});var uye=s(Ru);cde=n(uye,"STRONG",{});var Fnt=s(cde);CMo=r(Fnt,"squeezebert"),Fnt.forEach(t),wMo=r(uye," \u2014 "),ij=n(uye,"A",{href:!0});var Tnt=s(ij);AMo=r(Tnt,"SqueezeBertForMaskedLM"),Tnt.forEach(t),yMo=r(uye," (SqueezeBERT model)"),uye.forEach(t),LMo=i(O),Pu=n(O,"LI",{});var bye=s(Pu);fde=n(bye,"STRONG",{});var Mnt=s(fde);xMo=r(Mnt,"t5"),Mnt.forEach(t),$Mo=r(bye," \u2014 "),dj=n(bye,"A",{href:!0});var Ent=s(dj);kMo=r(Ent,"T5ForConditionalGeneration"),Ent.forEach(t),SMo=r(bye," (T5 model)"),bye.forEach(t),RMo=i(O),Bu=n(O,"LI",{});var vye=s(Bu);mde=n(vye,"STRONG",{});var Cnt=s(mde);PMo=r(Cnt,"tapas"),Cnt.forEach(t),BMo=r(vye," \u2014 "),cj=n(vye,"A",{href:!0});var wnt=s(cj);IMo=r(wnt,"TapasForMaskedLM"),wnt.forEach(t),NMo=r(vye," (TAPAS model)"),vye.forEach(t),qMo=i(O),Iu=n(O,"LI",{});var Fye=s(Iu);gde=n(Fye,"STRONG",{});var Ant=s(gde);jMo=r(Ant,"transfo-xl"),Ant.forEach(t),DMo=r(Fye," \u2014 "),fj=n(Fye,"A",{href:!0});var ynt=s(fj);GMo=r(ynt,"TransfoXLLMHeadModel"),ynt.forEach(t),OMo=r(Fye," (Transformer-XL model)"),Fye.forEach(t),VMo=i(O),Nu=n(O,"LI",{});var Tye=s(Nu);hde=n(Tye,"STRONG",{});var Lnt=s(hde);XMo=r(Lnt,"unispeech"),Lnt.forEach(t),zMo=r(Tye," \u2014 "),mj=n(Tye,"A",{href:!0});var xnt=s(mj);WMo=r(xnt,"UniSpeechForPreTraining"),xnt.forEach(t),QMo=r(Tye," (UniSpeech model)"),Tye.forEach(t),HMo=i(O),qu=n(O,"LI",{});var Mye=s(qu);pde=n(Mye,"STRONG",{});var $nt=s(pde);UMo=r($nt,"unispeech-sat"),$nt.forEach(t),JMo=r(Mye," \u2014 "),gj=n(Mye,"A",{href:!0});var knt=s(gj);YMo=r(knt,"UniSpeechSatForPreTraining"),knt.forEach(t),KMo=r(Mye," (UniSpeechSat model)"),Mye.forEach(t),ZMo=i(O),ju=n(O,"LI",{});var Eye=s(ju);_de=n(Eye,"STRONG",{});var Snt=s(_de);eEo=r(Snt,"visual_bert"),Snt.forEach(t),oEo=r(Eye," \u2014 "),hj=n(Eye,"A",{href:!0});var Rnt=s(hj);rEo=r(Rnt,"VisualBertForPreTraining"),Rnt.forEach(t),tEo=r(Eye," (VisualBert model)"),Eye.forEach(t),aEo=i(O),Du=n(O,"LI",{});var Cye=s(Du);ude=n(Cye,"STRONG",{});var Pnt=s(ude);nEo=r(Pnt,"vit_mae"),Pnt.forEach(t),sEo=r(Cye," \u2014 "),pj=n(Cye,"A",{href:!0});var Bnt=s(pj);lEo=r(Bnt,"ViTMAEForPreTraining"),Bnt.forEach(t),iEo=r(Cye," (ViTMAE model)"),Cye.forEach(t),dEo=i(O),Gu=n(O,"LI",{});var wye=s(Gu);bde=n(wye,"STRONG",{});var Int=s(bde);cEo=r(Int,"wav2vec2"),Int.forEach(t),fEo=r(wye," \u2014 "),_j=n(wye,"A",{href:!0});var Nnt=s(_j);mEo=r(Nnt,"Wav2Vec2ForPreTraining"),Nnt.forEach(t),gEo=r(wye," (Wav2Vec2 model)"),wye.forEach(t),hEo=i(O),Ou=n(O,"LI",{});var Aye=s(Ou);vde=n(Aye,"STRONG",{});var qnt=s(vde);pEo=r(qnt,"wav2vec2-conformer"),qnt.forEach(t),_Eo=r(Aye," \u2014 "),uj=n(Aye,"A",{href:!0});var jnt=s(uj);uEo=r(jnt,"Wav2Vec2ConformerForPreTraining"),jnt.forEach(t),bEo=r(Aye," (Wav2Vec2-Conformer model)"),Aye.forEach(t),vEo=i(O),Vu=n(O,"LI",{});var yye=s(Vu);Fde=n(yye,"STRONG",{});var Dnt=s(Fde);FEo=r(Dnt,"xlm"),Dnt.forEach(t),TEo=r(yye," \u2014 "),bj=n(yye,"A",{href:!0});var Gnt=s(bj);MEo=r(Gnt,"XLMWithLMHeadModel"),Gnt.forEach(t),EEo=r(yye," (XLM model)"),yye.forEach(t),CEo=i(O),Xu=n(O,"LI",{});var Lye=s(Xu);Tde=n(Lye,"STRONG",{});var Ont=s(Tde);wEo=r(Ont,"xlm-roberta"),Ont.forEach(t),AEo=r(Lye," \u2014 "),vj=n(Lye,"A",{href:!0});var Vnt=s(vj);yEo=r(Vnt,"XLMRobertaForMaskedLM"),Vnt.forEach(t),LEo=r(Lye," (XLM-RoBERTa model)"),Lye.forEach(t),xEo=i(O),zu=n(O,"LI",{});var xye=s(zu);Mde=n(xye,"STRONG",{});var Xnt=s(Mde);$Eo=r(Xnt,"xlm-roberta-xl"),Xnt.forEach(t),kEo=r(xye," \u2014 "),Fj=n(xye,"A",{href:!0});var znt=s(Fj);SEo=r(znt,"XLMRobertaXLForMaskedLM"),znt.forEach(t),REo=r(xye," (XLM-RoBERTa-XL model)"),xye.forEach(t),PEo=i(O),Wu=n(O,"LI",{});var $ye=s(Wu);Ede=n($ye,"STRONG",{});var Wnt=s(Ede);BEo=r(Wnt,"xlnet"),Wnt.forEach(t),IEo=r($ye," \u2014 "),Tj=n($ye,"A",{href:!0});var Qnt=s(Tj);NEo=r(Qnt,"XLNetLMHeadModel"),Qnt.forEach(t),qEo=r($ye," (XLNet model)"),$ye.forEach(t),O.forEach(t),jEo=i(ra),Qu=n(ra,"P",{});var kye=s(Qu);DEo=r(kye,"The model is set in evaluation mode by default using "),Cde=n(kye,"CODE",{});var Hnt=s(Cde);GEo=r(Hnt,"model.eval()"),Hnt.forEach(t),OEo=r(kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wde=n(kye,"CODE",{});var Unt=s(wde);VEo=r(Unt,"model.train()"),Unt.forEach(t),kye.forEach(t),XEo=i(ra),T(Hu.$$.fragment,ra),ra.forEach(t),Os.forEach(t),kqe=i(f),ki=n(f,"H2",{class:!0});var BDe=s(ki);Uu=n(BDe,"A",{id:!0,class:!0,href:!0});var Jnt=s(Uu);Ade=n(Jnt,"SPAN",{});var Ynt=s(Ade);T(gA.$$.fragment,Ynt),Ynt.forEach(t),Jnt.forEach(t),zEo=i(BDe),yde=n(BDe,"SPAN",{});var Knt=s(yde);WEo=r(Knt,"AutoModelForCausalLM"),Knt.forEach(t),BDe.forEach(t),Sqe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(hA.$$.fragment,Vs),QEo=i(Vs),Si=n(Vs,"P",{});var yZ=s(Si);HEo=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Mj=n(yZ,"A",{href:!0});var Znt=s(Mj);UEo=r(Znt,"from_pretrained()"),Znt.forEach(t),JEo=r(yZ," class method or the "),Ej=n(yZ,"A",{href:!0});var est=s(Ej);YEo=r(est,"from_config()"),est.forEach(t),KEo=r(yZ,` class
method.`),yZ.forEach(t),ZEo=i(Vs),pA=n(Vs,"P",{});var IDe=s(pA);eCo=r(IDe,"This class cannot be instantiated directly using "),Lde=n(IDe,"CODE",{});var ost=s(Lde);oCo=r(ost,"__init__()"),ost.forEach(t),rCo=r(IDe," (throws an error)."),IDe.forEach(t),tCo=i(Vs),nt=n(Vs,"DIV",{class:!0});var jw=s(nt);T(_A.$$.fragment,jw),aCo=i(jw),xde=n(jw,"P",{});var rst=s(xde);nCo=r(rst,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rst.forEach(t),sCo=i(jw),Ri=n(jw,"P",{});var LZ=s(Ri);lCo=r(LZ,`Note:
Loading a model from its configuration file does `),$de=n(LZ,"STRONG",{});var tst=s($de);iCo=r(tst,"not"),tst.forEach(t),dCo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=n(LZ,"A",{href:!0});var ast=s(Cj);cCo=r(ast,"from_pretrained()"),ast.forEach(t),fCo=r(LZ," to load the model weights."),LZ.forEach(t),mCo=i(jw),T(Ju.$$.fragment,jw),jw.forEach(t),gCo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(uA.$$.fragment,ta),hCo=i(ta),kde=n(ta,"P",{});var nst=s(kde);pCo=r(nst,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nst.forEach(t),_Co=i(ta),$a=n(ta,"P",{});var Dw=s($a);uCo=r(Dw,"The model class to instantiate is selected based on the "),Sde=n(Dw,"CODE",{});var sst=s(Sde);bCo=r(sst,"model_type"),sst.forEach(t),vCo=r(Dw,` property of the config object (either
passed as an argument or loaded from `),Rde=n(Dw,"CODE",{});var lst=s(Rde);FCo=r(lst,"pretrained_model_name_or_path"),lst.forEach(t),TCo=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pde=n(Dw,"CODE",{});var ist=s(Pde);MCo=r(ist,"pretrained_model_name_or_path"),ist.forEach(t),ECo=r(Dw,":"),Dw.forEach(t),CCo=i(ta),z=n(ta,"UL",{});var W=s(z);Yu=n(W,"LI",{});var Sye=s(Yu);Bde=n(Sye,"STRONG",{});var dst=s(Bde);wCo=r(dst,"bart"),dst.forEach(t),ACo=r(Sye," \u2014 "),wj=n(Sye,"A",{href:!0});var cst=s(wj);yCo=r(cst,"BartForCausalLM"),cst.forEach(t),LCo=r(Sye," (BART model)"),Sye.forEach(t),xCo=i(W),Ku=n(W,"LI",{});var Rye=s(Ku);Ide=n(Rye,"STRONG",{});var fst=s(Ide);$Co=r(fst,"bert"),fst.forEach(t),kCo=r(Rye," \u2014 "),Aj=n(Rye,"A",{href:!0});var mst=s(Aj);SCo=r(mst,"BertLMHeadModel"),mst.forEach(t),RCo=r(Rye," (BERT model)"),Rye.forEach(t),PCo=i(W),Zu=n(W,"LI",{});var Pye=s(Zu);Nde=n(Pye,"STRONG",{});var gst=s(Nde);BCo=r(gst,"bert-generation"),gst.forEach(t),ICo=r(Pye," \u2014 "),yj=n(Pye,"A",{href:!0});var hst=s(yj);NCo=r(hst,"BertGenerationDecoder"),hst.forEach(t),qCo=r(Pye," (Bert Generation model)"),Pye.forEach(t),jCo=i(W),e1=n(W,"LI",{});var Bye=s(e1);qde=n(Bye,"STRONG",{});var pst=s(qde);DCo=r(pst,"big_bird"),pst.forEach(t),GCo=r(Bye," \u2014 "),Lj=n(Bye,"A",{href:!0});var _st=s(Lj);OCo=r(_st,"BigBirdForCausalLM"),_st.forEach(t),VCo=r(Bye," (BigBird model)"),Bye.forEach(t),XCo=i(W),o1=n(W,"LI",{});var Iye=s(o1);jde=n(Iye,"STRONG",{});var ust=s(jde);zCo=r(ust,"bigbird_pegasus"),ust.forEach(t),WCo=r(Iye," \u2014 "),xj=n(Iye,"A",{href:!0});var bst=s(xj);QCo=r(bst,"BigBirdPegasusForCausalLM"),bst.forEach(t),HCo=r(Iye," (BigBirdPegasus model)"),Iye.forEach(t),UCo=i(W),r1=n(W,"LI",{});var Nye=s(r1);Dde=n(Nye,"STRONG",{});var vst=s(Dde);JCo=r(vst,"blenderbot"),vst.forEach(t),YCo=r(Nye," \u2014 "),$j=n(Nye,"A",{href:!0});var Fst=s($j);KCo=r(Fst,"BlenderbotForCausalLM"),Fst.forEach(t),ZCo=r(Nye," (Blenderbot model)"),Nye.forEach(t),e3o=i(W),t1=n(W,"LI",{});var qye=s(t1);Gde=n(qye,"STRONG",{});var Tst=s(Gde);o3o=r(Tst,"blenderbot-small"),Tst.forEach(t),r3o=r(qye," \u2014 "),kj=n(qye,"A",{href:!0});var Mst=s(kj);t3o=r(Mst,"BlenderbotSmallForCausalLM"),Mst.forEach(t),a3o=r(qye," (BlenderbotSmall model)"),qye.forEach(t),n3o=i(W),a1=n(W,"LI",{});var jye=s(a1);Ode=n(jye,"STRONG",{});var Est=s(Ode);s3o=r(Est,"camembert"),Est.forEach(t),l3o=r(jye," \u2014 "),Sj=n(jye,"A",{href:!0});var Cst=s(Sj);i3o=r(Cst,"CamembertForCausalLM"),Cst.forEach(t),d3o=r(jye," (CamemBERT model)"),jye.forEach(t),c3o=i(W),n1=n(W,"LI",{});var Dye=s(n1);Vde=n(Dye,"STRONG",{});var wst=s(Vde);f3o=r(wst,"ctrl"),wst.forEach(t),m3o=r(Dye," \u2014 "),Rj=n(Dye,"A",{href:!0});var Ast=s(Rj);g3o=r(Ast,"CTRLLMHeadModel"),Ast.forEach(t),h3o=r(Dye," (CTRL model)"),Dye.forEach(t),p3o=i(W),s1=n(W,"LI",{});var Gye=s(s1);Xde=n(Gye,"STRONG",{});var yst=s(Xde);_3o=r(yst,"data2vec-text"),yst.forEach(t),u3o=r(Gye," \u2014 "),Pj=n(Gye,"A",{href:!0});var Lst=s(Pj);b3o=r(Lst,"Data2VecTextForCausalLM"),Lst.forEach(t),v3o=r(Gye," (Data2VecText model)"),Gye.forEach(t),F3o=i(W),l1=n(W,"LI",{});var Oye=s(l1);zde=n(Oye,"STRONG",{});var xst=s(zde);T3o=r(xst,"electra"),xst.forEach(t),M3o=r(Oye," \u2014 "),Bj=n(Oye,"A",{href:!0});var $st=s(Bj);E3o=r($st,"ElectraForCausalLM"),$st.forEach(t),C3o=r(Oye," (ELECTRA model)"),Oye.forEach(t),w3o=i(W),i1=n(W,"LI",{});var Vye=s(i1);Wde=n(Vye,"STRONG",{});var kst=s(Wde);A3o=r(kst,"gpt2"),kst.forEach(t),y3o=r(Vye," \u2014 "),Ij=n(Vye,"A",{href:!0});var Sst=s(Ij);L3o=r(Sst,"GPT2LMHeadModel"),Sst.forEach(t),x3o=r(Vye," (OpenAI GPT-2 model)"),Vye.forEach(t),$3o=i(W),d1=n(W,"LI",{});var Xye=s(d1);Qde=n(Xye,"STRONG",{});var Rst=s(Qde);k3o=r(Rst,"gpt_neo"),Rst.forEach(t),S3o=r(Xye," \u2014 "),Nj=n(Xye,"A",{href:!0});var Pst=s(Nj);R3o=r(Pst,"GPTNeoForCausalLM"),Pst.forEach(t),P3o=r(Xye," (GPT Neo model)"),Xye.forEach(t),B3o=i(W),c1=n(W,"LI",{});var zye=s(c1);Hde=n(zye,"STRONG",{});var Bst=s(Hde);I3o=r(Bst,"gpt_neox"),Bst.forEach(t),N3o=r(zye," \u2014 "),qj=n(zye,"A",{href:!0});var Ist=s(qj);q3o=r(Ist,"GPTNeoXForCausalLM"),Ist.forEach(t),j3o=r(zye," (GPT NeoX model)"),zye.forEach(t),D3o=i(W),f1=n(W,"LI",{});var Wye=s(f1);Ude=n(Wye,"STRONG",{});var Nst=s(Ude);G3o=r(Nst,"gptj"),Nst.forEach(t),O3o=r(Wye," \u2014 "),jj=n(Wye,"A",{href:!0});var qst=s(jj);V3o=r(qst,"GPTJForCausalLM"),qst.forEach(t),X3o=r(Wye," (GPT-J model)"),Wye.forEach(t),z3o=i(W),m1=n(W,"LI",{});var Qye=s(m1);Jde=n(Qye,"STRONG",{});var jst=s(Jde);W3o=r(jst,"marian"),jst.forEach(t),Q3o=r(Qye," \u2014 "),Dj=n(Qye,"A",{href:!0});var Dst=s(Dj);H3o=r(Dst,"MarianForCausalLM"),Dst.forEach(t),U3o=r(Qye," (Marian model)"),Qye.forEach(t),J3o=i(W),g1=n(W,"LI",{});var Hye=s(g1);Yde=n(Hye,"STRONG",{});var Gst=s(Yde);Y3o=r(Gst,"mbart"),Gst.forEach(t),K3o=r(Hye," \u2014 "),Gj=n(Hye,"A",{href:!0});var Ost=s(Gj);Z3o=r(Ost,"MBartForCausalLM"),Ost.forEach(t),ewo=r(Hye," (mBART model)"),Hye.forEach(t),owo=i(W),h1=n(W,"LI",{});var Uye=s(h1);Kde=n(Uye,"STRONG",{});var Vst=s(Kde);rwo=r(Vst,"megatron-bert"),Vst.forEach(t),two=r(Uye," \u2014 "),Oj=n(Uye,"A",{href:!0});var Xst=s(Oj);awo=r(Xst,"MegatronBertForCausalLM"),Xst.forEach(t),nwo=r(Uye," (MegatronBert model)"),Uye.forEach(t),swo=i(W),p1=n(W,"LI",{});var Jye=s(p1);Zde=n(Jye,"STRONG",{});var zst=s(Zde);lwo=r(zst,"openai-gpt"),zst.forEach(t),iwo=r(Jye," \u2014 "),Vj=n(Jye,"A",{href:!0});var Wst=s(Vj);dwo=r(Wst,"OpenAIGPTLMHeadModel"),Wst.forEach(t),cwo=r(Jye," (OpenAI GPT model)"),Jye.forEach(t),fwo=i(W),_1=n(W,"LI",{});var Yye=s(_1);ece=n(Yye,"STRONG",{});var Qst=s(ece);mwo=r(Qst,"opt"),Qst.forEach(t),gwo=r(Yye," \u2014 "),Xj=n(Yye,"A",{href:!0});var Hst=s(Xj);hwo=r(Hst,"OPTForCausalLM"),Hst.forEach(t),pwo=r(Yye," (OPT model)"),Yye.forEach(t),_wo=i(W),u1=n(W,"LI",{});var Kye=s(u1);oce=n(Kye,"STRONG",{});var Ust=s(oce);uwo=r(Ust,"pegasus"),Ust.forEach(t),bwo=r(Kye," \u2014 "),zj=n(Kye,"A",{href:!0});var Jst=s(zj);vwo=r(Jst,"PegasusForCausalLM"),Jst.forEach(t),Fwo=r(Kye," (Pegasus model)"),Kye.forEach(t),Two=i(W),b1=n(W,"LI",{});var Zye=s(b1);rce=n(Zye,"STRONG",{});var Yst=s(rce);Mwo=r(Yst,"plbart"),Yst.forEach(t),Ewo=r(Zye," \u2014 "),Wj=n(Zye,"A",{href:!0});var Kst=s(Wj);Cwo=r(Kst,"PLBartForCausalLM"),Kst.forEach(t),wwo=r(Zye," (PLBart model)"),Zye.forEach(t),Awo=i(W),v1=n(W,"LI",{});var eLe=s(v1);tce=n(eLe,"STRONG",{});var Zst=s(tce);ywo=r(Zst,"prophetnet"),Zst.forEach(t),Lwo=r(eLe," \u2014 "),Qj=n(eLe,"A",{href:!0});var elt=s(Qj);xwo=r(elt,"ProphetNetForCausalLM"),elt.forEach(t),$wo=r(eLe," (ProphetNet model)"),eLe.forEach(t),kwo=i(W),F1=n(W,"LI",{});var oLe=s(F1);ace=n(oLe,"STRONG",{});var olt=s(ace);Swo=r(olt,"qdqbert"),olt.forEach(t),Rwo=r(oLe," \u2014 "),Hj=n(oLe,"A",{href:!0});var rlt=s(Hj);Pwo=r(rlt,"QDQBertLMHeadModel"),rlt.forEach(t),Bwo=r(oLe," (QDQBert model)"),oLe.forEach(t),Iwo=i(W),T1=n(W,"LI",{});var rLe=s(T1);nce=n(rLe,"STRONG",{});var tlt=s(nce);Nwo=r(tlt,"reformer"),tlt.forEach(t),qwo=r(rLe," \u2014 "),Uj=n(rLe,"A",{href:!0});var alt=s(Uj);jwo=r(alt,"ReformerModelWithLMHead"),alt.forEach(t),Dwo=r(rLe," (Reformer model)"),rLe.forEach(t),Gwo=i(W),M1=n(W,"LI",{});var tLe=s(M1);sce=n(tLe,"STRONG",{});var nlt=s(sce);Owo=r(nlt,"rembert"),nlt.forEach(t),Vwo=r(tLe," \u2014 "),Jj=n(tLe,"A",{href:!0});var slt=s(Jj);Xwo=r(slt,"RemBertForCausalLM"),slt.forEach(t),zwo=r(tLe," (RemBERT model)"),tLe.forEach(t),Wwo=i(W),E1=n(W,"LI",{});var aLe=s(E1);lce=n(aLe,"STRONG",{});var llt=s(lce);Qwo=r(llt,"roberta"),llt.forEach(t),Hwo=r(aLe," \u2014 "),Yj=n(aLe,"A",{href:!0});var ilt=s(Yj);Uwo=r(ilt,"RobertaForCausalLM"),ilt.forEach(t),Jwo=r(aLe," (RoBERTa model)"),aLe.forEach(t),Ywo=i(W),C1=n(W,"LI",{});var nLe=s(C1);ice=n(nLe,"STRONG",{});var dlt=s(ice);Kwo=r(dlt,"roformer"),dlt.forEach(t),Zwo=r(nLe," \u2014 "),Kj=n(nLe,"A",{href:!0});var clt=s(Kj);e0o=r(clt,"RoFormerForCausalLM"),clt.forEach(t),o0o=r(nLe," (RoFormer model)"),nLe.forEach(t),r0o=i(W),w1=n(W,"LI",{});var sLe=s(w1);dce=n(sLe,"STRONG",{});var flt=s(dce);t0o=r(flt,"speech_to_text_2"),flt.forEach(t),a0o=r(sLe," \u2014 "),Zj=n(sLe,"A",{href:!0});var mlt=s(Zj);n0o=r(mlt,"Speech2Text2ForCausalLM"),mlt.forEach(t),s0o=r(sLe," (Speech2Text2 model)"),sLe.forEach(t),l0o=i(W),A1=n(W,"LI",{});var lLe=s(A1);cce=n(lLe,"STRONG",{});var glt=s(cce);i0o=r(glt,"transfo-xl"),glt.forEach(t),d0o=r(lLe," \u2014 "),eD=n(lLe,"A",{href:!0});var hlt=s(eD);c0o=r(hlt,"TransfoXLLMHeadModel"),hlt.forEach(t),f0o=r(lLe," (Transformer-XL model)"),lLe.forEach(t),m0o=i(W),y1=n(W,"LI",{});var iLe=s(y1);fce=n(iLe,"STRONG",{});var plt=s(fce);g0o=r(plt,"trocr"),plt.forEach(t),h0o=r(iLe," \u2014 "),oD=n(iLe,"A",{href:!0});var _lt=s(oD);p0o=r(_lt,"TrOCRForCausalLM"),_lt.forEach(t),_0o=r(iLe," (TrOCR model)"),iLe.forEach(t),u0o=i(W),L1=n(W,"LI",{});var dLe=s(L1);mce=n(dLe,"STRONG",{});var ult=s(mce);b0o=r(ult,"xglm"),ult.forEach(t),v0o=r(dLe," \u2014 "),rD=n(dLe,"A",{href:!0});var blt=s(rD);F0o=r(blt,"XGLMForCausalLM"),blt.forEach(t),T0o=r(dLe," (XGLM model)"),dLe.forEach(t),M0o=i(W),x1=n(W,"LI",{});var cLe=s(x1);gce=n(cLe,"STRONG",{});var vlt=s(gce);E0o=r(vlt,"xlm"),vlt.forEach(t),C0o=r(cLe," \u2014 "),tD=n(cLe,"A",{href:!0});var Flt=s(tD);w0o=r(Flt,"XLMWithLMHeadModel"),Flt.forEach(t),A0o=r(cLe," (XLM model)"),cLe.forEach(t),y0o=i(W),$1=n(W,"LI",{});var fLe=s($1);hce=n(fLe,"STRONG",{});var Tlt=s(hce);L0o=r(Tlt,"xlm-prophetnet"),Tlt.forEach(t),x0o=r(fLe," \u2014 "),aD=n(fLe,"A",{href:!0});var Mlt=s(aD);$0o=r(Mlt,"XLMProphetNetForCausalLM"),Mlt.forEach(t),k0o=r(fLe," (XLMProphetNet model)"),fLe.forEach(t),S0o=i(W),k1=n(W,"LI",{});var mLe=s(k1);pce=n(mLe,"STRONG",{});var Elt=s(pce);R0o=r(Elt,"xlm-roberta"),Elt.forEach(t),P0o=r(mLe," \u2014 "),nD=n(mLe,"A",{href:!0});var Clt=s(nD);B0o=r(Clt,"XLMRobertaForCausalLM"),Clt.forEach(t),I0o=r(mLe," (XLM-RoBERTa model)"),mLe.forEach(t),N0o=i(W),S1=n(W,"LI",{});var gLe=s(S1);_ce=n(gLe,"STRONG",{});var wlt=s(_ce);q0o=r(wlt,"xlm-roberta-xl"),wlt.forEach(t),j0o=r(gLe," \u2014 "),sD=n(gLe,"A",{href:!0});var Alt=s(sD);D0o=r(Alt,"XLMRobertaXLForCausalLM"),Alt.forEach(t),G0o=r(gLe," (XLM-RoBERTa-XL model)"),gLe.forEach(t),O0o=i(W),R1=n(W,"LI",{});var hLe=s(R1);uce=n(hLe,"STRONG",{});var ylt=s(uce);V0o=r(ylt,"xlnet"),ylt.forEach(t),X0o=r(hLe," \u2014 "),lD=n(hLe,"A",{href:!0});var Llt=s(lD);z0o=r(Llt,"XLNetLMHeadModel"),Llt.forEach(t),W0o=r(hLe," (XLNet model)"),hLe.forEach(t),W.forEach(t),Q0o=i(ta),P1=n(ta,"P",{});var pLe=s(P1);H0o=r(pLe,"The model is set in evaluation mode by default using "),bce=n(pLe,"CODE",{});var xlt=s(bce);U0o=r(xlt,"model.eval()"),xlt.forEach(t),J0o=r(pLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vce=n(pLe,"CODE",{});var $lt=s(vce);Y0o=r($lt,"model.train()"),$lt.forEach(t),pLe.forEach(t),K0o=i(ta),T(B1.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),Rqe=i(f),Pi=n(f,"H2",{class:!0});var NDe=s(Pi);I1=n(NDe,"A",{id:!0,class:!0,href:!0});var klt=s(I1);Fce=n(klt,"SPAN",{});var Slt=s(Fce);T(bA.$$.fragment,Slt),Slt.forEach(t),klt.forEach(t),Z0o=i(NDe),Tce=n(NDe,"SPAN",{});var Rlt=s(Tce);e6o=r(Rlt,"AutoModelForMaskedLM"),Rlt.forEach(t),NDe.forEach(t),Pqe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(vA.$$.fragment,Xs),o6o=i(Xs),Bi=n(Xs,"P",{});var xZ=s(Bi);r6o=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iD=n(xZ,"A",{href:!0});var Plt=s(iD);t6o=r(Plt,"from_pretrained()"),Plt.forEach(t),a6o=r(xZ," class method or the "),dD=n(xZ,"A",{href:!0});var Blt=s(dD);n6o=r(Blt,"from_config()"),Blt.forEach(t),s6o=r(xZ,` class
method.`),xZ.forEach(t),l6o=i(Xs),FA=n(Xs,"P",{});var qDe=s(FA);i6o=r(qDe,"This class cannot be instantiated directly using "),Mce=n(qDe,"CODE",{});var Ilt=s(Mce);d6o=r(Ilt,"__init__()"),Ilt.forEach(t),c6o=r(qDe," (throws an error)."),qDe.forEach(t),f6o=i(Xs),st=n(Xs,"DIV",{class:!0});var Gw=s(st);T(TA.$$.fragment,Gw),m6o=i(Gw),Ece=n(Gw,"P",{});var Nlt=s(Ece);g6o=r(Nlt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Nlt.forEach(t),h6o=i(Gw),Ii=n(Gw,"P",{});var $Z=s(Ii);p6o=r($Z,`Note:
Loading a model from its configuration file does `),Cce=n($Z,"STRONG",{});var qlt=s(Cce);_6o=r(qlt,"not"),qlt.forEach(t),u6o=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),cD=n($Z,"A",{href:!0});var jlt=s(cD);b6o=r(jlt,"from_pretrained()"),jlt.forEach(t),v6o=r($Z," to load the model weights."),$Z.forEach(t),F6o=i(Gw),T(N1.$$.fragment,Gw),Gw.forEach(t),T6o=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(MA.$$.fragment,aa),M6o=i(aa),wce=n(aa,"P",{});var Dlt=s(wce);E6o=r(Dlt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Dlt.forEach(t),C6o=i(aa),ka=n(aa,"P",{});var Ow=s(ka);w6o=r(Ow,"The model class to instantiate is selected based on the "),Ace=n(Ow,"CODE",{});var Glt=s(Ace);A6o=r(Glt,"model_type"),Glt.forEach(t),y6o=r(Ow,` property of the config object (either
passed as an argument or loaded from `),yce=n(Ow,"CODE",{});var Olt=s(yce);L6o=r(Olt,"pretrained_model_name_or_path"),Olt.forEach(t),x6o=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lce=n(Ow,"CODE",{});var Vlt=s(Lce);$6o=r(Vlt,"pretrained_model_name_or_path"),Vlt.forEach(t),k6o=r(Ow,":"),Ow.forEach(t),S6o=i(aa),Q=n(aa,"UL",{});var U=s(Q);q1=n(U,"LI",{});var _Le=s(q1);xce=n(_Le,"STRONG",{});var Xlt=s(xce);R6o=r(Xlt,"albert"),Xlt.forEach(t),P6o=r(_Le," \u2014 "),fD=n(_Le,"A",{href:!0});var zlt=s(fD);B6o=r(zlt,"AlbertForMaskedLM"),zlt.forEach(t),I6o=r(_Le," (ALBERT model)"),_Le.forEach(t),N6o=i(U),j1=n(U,"LI",{});var uLe=s(j1);$ce=n(uLe,"STRONG",{});var Wlt=s($ce);q6o=r(Wlt,"bart"),Wlt.forEach(t),j6o=r(uLe," \u2014 "),mD=n(uLe,"A",{href:!0});var Qlt=s(mD);D6o=r(Qlt,"BartForConditionalGeneration"),Qlt.forEach(t),G6o=r(uLe," (BART model)"),uLe.forEach(t),O6o=i(U),D1=n(U,"LI",{});var bLe=s(D1);kce=n(bLe,"STRONG",{});var Hlt=s(kce);V6o=r(Hlt,"bert"),Hlt.forEach(t),X6o=r(bLe," \u2014 "),gD=n(bLe,"A",{href:!0});var Ult=s(gD);z6o=r(Ult,"BertForMaskedLM"),Ult.forEach(t),W6o=r(bLe," (BERT model)"),bLe.forEach(t),Q6o=i(U),G1=n(U,"LI",{});var vLe=s(G1);Sce=n(vLe,"STRONG",{});var Jlt=s(Sce);H6o=r(Jlt,"big_bird"),Jlt.forEach(t),U6o=r(vLe," \u2014 "),hD=n(vLe,"A",{href:!0});var Ylt=s(hD);J6o=r(Ylt,"BigBirdForMaskedLM"),Ylt.forEach(t),Y6o=r(vLe," (BigBird model)"),vLe.forEach(t),K6o=i(U),O1=n(U,"LI",{});var FLe=s(O1);Rce=n(FLe,"STRONG",{});var Klt=s(Rce);Z6o=r(Klt,"camembert"),Klt.forEach(t),eAo=r(FLe," \u2014 "),pD=n(FLe,"A",{href:!0});var Zlt=s(pD);oAo=r(Zlt,"CamembertForMaskedLM"),Zlt.forEach(t),rAo=r(FLe," (CamemBERT model)"),FLe.forEach(t),tAo=i(U),V1=n(U,"LI",{});var TLe=s(V1);Pce=n(TLe,"STRONG",{});var eit=s(Pce);aAo=r(eit,"convbert"),eit.forEach(t),nAo=r(TLe," \u2014 "),_D=n(TLe,"A",{href:!0});var oit=s(_D);sAo=r(oit,"ConvBertForMaskedLM"),oit.forEach(t),lAo=r(TLe," (ConvBERT model)"),TLe.forEach(t),iAo=i(U),X1=n(U,"LI",{});var MLe=s(X1);Bce=n(MLe,"STRONG",{});var rit=s(Bce);dAo=r(rit,"data2vec-text"),rit.forEach(t),cAo=r(MLe," \u2014 "),uD=n(MLe,"A",{href:!0});var tit=s(uD);fAo=r(tit,"Data2VecTextForMaskedLM"),tit.forEach(t),mAo=r(MLe," (Data2VecText model)"),MLe.forEach(t),gAo=i(U),z1=n(U,"LI",{});var ELe=s(z1);Ice=n(ELe,"STRONG",{});var ait=s(Ice);hAo=r(ait,"deberta"),ait.forEach(t),pAo=r(ELe," \u2014 "),bD=n(ELe,"A",{href:!0});var nit=s(bD);_Ao=r(nit,"DebertaForMaskedLM"),nit.forEach(t),uAo=r(ELe," (DeBERTa model)"),ELe.forEach(t),bAo=i(U),W1=n(U,"LI",{});var CLe=s(W1);Nce=n(CLe,"STRONG",{});var sit=s(Nce);vAo=r(sit,"deberta-v2"),sit.forEach(t),FAo=r(CLe," \u2014 "),vD=n(CLe,"A",{href:!0});var lit=s(vD);TAo=r(lit,"DebertaV2ForMaskedLM"),lit.forEach(t),MAo=r(CLe," (DeBERTa-v2 model)"),CLe.forEach(t),EAo=i(U),Q1=n(U,"LI",{});var wLe=s(Q1);qce=n(wLe,"STRONG",{});var iit=s(qce);CAo=r(iit,"distilbert"),iit.forEach(t),wAo=r(wLe," \u2014 "),FD=n(wLe,"A",{href:!0});var dit=s(FD);AAo=r(dit,"DistilBertForMaskedLM"),dit.forEach(t),yAo=r(wLe," (DistilBERT model)"),wLe.forEach(t),LAo=i(U),H1=n(U,"LI",{});var ALe=s(H1);jce=n(ALe,"STRONG",{});var cit=s(jce);xAo=r(cit,"electra"),cit.forEach(t),$Ao=r(ALe," \u2014 "),TD=n(ALe,"A",{href:!0});var fit=s(TD);kAo=r(fit,"ElectraForMaskedLM"),fit.forEach(t),SAo=r(ALe," (ELECTRA model)"),ALe.forEach(t),RAo=i(U),U1=n(U,"LI",{});var yLe=s(U1);Dce=n(yLe,"STRONG",{});var mit=s(Dce);PAo=r(mit,"flaubert"),mit.forEach(t),BAo=r(yLe," \u2014 "),MD=n(yLe,"A",{href:!0});var git=s(MD);IAo=r(git,"FlaubertWithLMHeadModel"),git.forEach(t),NAo=r(yLe," (FlauBERT model)"),yLe.forEach(t),qAo=i(U),J1=n(U,"LI",{});var LLe=s(J1);Gce=n(LLe,"STRONG",{});var hit=s(Gce);jAo=r(hit,"fnet"),hit.forEach(t),DAo=r(LLe," \u2014 "),ED=n(LLe,"A",{href:!0});var pit=s(ED);GAo=r(pit,"FNetForMaskedLM"),pit.forEach(t),OAo=r(LLe," (FNet model)"),LLe.forEach(t),VAo=i(U),Y1=n(U,"LI",{});var xLe=s(Y1);Oce=n(xLe,"STRONG",{});var _it=s(Oce);XAo=r(_it,"funnel"),_it.forEach(t),zAo=r(xLe," \u2014 "),CD=n(xLe,"A",{href:!0});var uit=s(CD);WAo=r(uit,"FunnelForMaskedLM"),uit.forEach(t),QAo=r(xLe," (Funnel Transformer model)"),xLe.forEach(t),HAo=i(U),K1=n(U,"LI",{});var $Le=s(K1);Vce=n($Le,"STRONG",{});var bit=s(Vce);UAo=r(bit,"ibert"),bit.forEach(t),JAo=r($Le," \u2014 "),wD=n($Le,"A",{href:!0});var vit=s(wD);YAo=r(vit,"IBertForMaskedLM"),vit.forEach(t),KAo=r($Le," (I-BERT model)"),$Le.forEach(t),ZAo=i(U),Z1=n(U,"LI",{});var kLe=s(Z1);Xce=n(kLe,"STRONG",{});var Fit=s(Xce);eyo=r(Fit,"layoutlm"),Fit.forEach(t),oyo=r(kLe," \u2014 "),AD=n(kLe,"A",{href:!0});var Tit=s(AD);ryo=r(Tit,"LayoutLMForMaskedLM"),Tit.forEach(t),tyo=r(kLe," (LayoutLM model)"),kLe.forEach(t),ayo=i(U),eb=n(U,"LI",{});var SLe=s(eb);zce=n(SLe,"STRONG",{});var Mit=s(zce);nyo=r(Mit,"longformer"),Mit.forEach(t),syo=r(SLe," \u2014 "),yD=n(SLe,"A",{href:!0});var Eit=s(yD);lyo=r(Eit,"LongformerForMaskedLM"),Eit.forEach(t),iyo=r(SLe," (Longformer model)"),SLe.forEach(t),dyo=i(U),ob=n(U,"LI",{});var RLe=s(ob);Wce=n(RLe,"STRONG",{});var Cit=s(Wce);cyo=r(Cit,"mbart"),Cit.forEach(t),fyo=r(RLe," \u2014 "),LD=n(RLe,"A",{href:!0});var wit=s(LD);myo=r(wit,"MBartForConditionalGeneration"),wit.forEach(t),gyo=r(RLe," (mBART model)"),RLe.forEach(t),hyo=i(U),rb=n(U,"LI",{});var PLe=s(rb);Qce=n(PLe,"STRONG",{});var Ait=s(Qce);pyo=r(Ait,"megatron-bert"),Ait.forEach(t),_yo=r(PLe," \u2014 "),xD=n(PLe,"A",{href:!0});var yit=s(xD);uyo=r(yit,"MegatronBertForMaskedLM"),yit.forEach(t),byo=r(PLe," (MegatronBert model)"),PLe.forEach(t),vyo=i(U),tb=n(U,"LI",{});var BLe=s(tb);Hce=n(BLe,"STRONG",{});var Lit=s(Hce);Fyo=r(Lit,"mobilebert"),Lit.forEach(t),Tyo=r(BLe," \u2014 "),$D=n(BLe,"A",{href:!0});var xit=s($D);Myo=r(xit,"MobileBertForMaskedLM"),xit.forEach(t),Eyo=r(BLe," (MobileBERT model)"),BLe.forEach(t),Cyo=i(U),ab=n(U,"LI",{});var ILe=s(ab);Uce=n(ILe,"STRONG",{});var $it=s(Uce);wyo=r($it,"mpnet"),$it.forEach(t),Ayo=r(ILe," \u2014 "),kD=n(ILe,"A",{href:!0});var kit=s(kD);yyo=r(kit,"MPNetForMaskedLM"),kit.forEach(t),Lyo=r(ILe," (MPNet model)"),ILe.forEach(t),xyo=i(U),nb=n(U,"LI",{});var NLe=s(nb);Jce=n(NLe,"STRONG",{});var Sit=s(Jce);$yo=r(Sit,"nystromformer"),Sit.forEach(t),kyo=r(NLe," \u2014 "),SD=n(NLe,"A",{href:!0});var Rit=s(SD);Syo=r(Rit,"NystromformerForMaskedLM"),Rit.forEach(t),Ryo=r(NLe," (Nystromformer model)"),NLe.forEach(t),Pyo=i(U),sb=n(U,"LI",{});var qLe=s(sb);Yce=n(qLe,"STRONG",{});var Pit=s(Yce);Byo=r(Pit,"perceiver"),Pit.forEach(t),Iyo=r(qLe," \u2014 "),RD=n(qLe,"A",{href:!0});var Bit=s(RD);Nyo=r(Bit,"PerceiverForMaskedLM"),Bit.forEach(t),qyo=r(qLe," (Perceiver model)"),qLe.forEach(t),jyo=i(U),lb=n(U,"LI",{});var jLe=s(lb);Kce=n(jLe,"STRONG",{});var Iit=s(Kce);Dyo=r(Iit,"qdqbert"),Iit.forEach(t),Gyo=r(jLe," \u2014 "),PD=n(jLe,"A",{href:!0});var Nit=s(PD);Oyo=r(Nit,"QDQBertForMaskedLM"),Nit.forEach(t),Vyo=r(jLe," (QDQBert model)"),jLe.forEach(t),Xyo=i(U),ib=n(U,"LI",{});var DLe=s(ib);Zce=n(DLe,"STRONG",{});var qit=s(Zce);zyo=r(qit,"reformer"),qit.forEach(t),Wyo=r(DLe," \u2014 "),BD=n(DLe,"A",{href:!0});var jit=s(BD);Qyo=r(jit,"ReformerForMaskedLM"),jit.forEach(t),Hyo=r(DLe," (Reformer model)"),DLe.forEach(t),Uyo=i(U),db=n(U,"LI",{});var GLe=s(db);efe=n(GLe,"STRONG",{});var Dit=s(efe);Jyo=r(Dit,"rembert"),Dit.forEach(t),Yyo=r(GLe," \u2014 "),ID=n(GLe,"A",{href:!0});var Git=s(ID);Kyo=r(Git,"RemBertForMaskedLM"),Git.forEach(t),Zyo=r(GLe," (RemBERT model)"),GLe.forEach(t),eLo=i(U),cb=n(U,"LI",{});var OLe=s(cb);ofe=n(OLe,"STRONG",{});var Oit=s(ofe);oLo=r(Oit,"roberta"),Oit.forEach(t),rLo=r(OLe," \u2014 "),ND=n(OLe,"A",{href:!0});var Vit=s(ND);tLo=r(Vit,"RobertaForMaskedLM"),Vit.forEach(t),aLo=r(OLe," (RoBERTa model)"),OLe.forEach(t),nLo=i(U),fb=n(U,"LI",{});var VLe=s(fb);rfe=n(VLe,"STRONG",{});var Xit=s(rfe);sLo=r(Xit,"roformer"),Xit.forEach(t),lLo=r(VLe," \u2014 "),qD=n(VLe,"A",{href:!0});var zit=s(qD);iLo=r(zit,"RoFormerForMaskedLM"),zit.forEach(t),dLo=r(VLe," (RoFormer model)"),VLe.forEach(t),cLo=i(U),mb=n(U,"LI",{});var XLe=s(mb);tfe=n(XLe,"STRONG",{});var Wit=s(tfe);fLo=r(Wit,"squeezebert"),Wit.forEach(t),mLo=r(XLe," \u2014 "),jD=n(XLe,"A",{href:!0});var Qit=s(jD);gLo=r(Qit,"SqueezeBertForMaskedLM"),Qit.forEach(t),hLo=r(XLe," (SqueezeBERT model)"),XLe.forEach(t),pLo=i(U),gb=n(U,"LI",{});var zLe=s(gb);afe=n(zLe,"STRONG",{});var Hit=s(afe);_Lo=r(Hit,"tapas"),Hit.forEach(t),uLo=r(zLe," \u2014 "),DD=n(zLe,"A",{href:!0});var Uit=s(DD);bLo=r(Uit,"TapasForMaskedLM"),Uit.forEach(t),vLo=r(zLe," (TAPAS model)"),zLe.forEach(t),FLo=i(U),hb=n(U,"LI",{});var WLe=s(hb);nfe=n(WLe,"STRONG",{});var Jit=s(nfe);TLo=r(Jit,"wav2vec2"),Jit.forEach(t),MLo=r(WLe," \u2014 "),sfe=n(WLe,"CODE",{});var Yit=s(sfe);ELo=r(Yit,"Wav2Vec2ForMaskedLM"),Yit.forEach(t),CLo=r(WLe," (Wav2Vec2 model)"),WLe.forEach(t),wLo=i(U),pb=n(U,"LI",{});var QLe=s(pb);lfe=n(QLe,"STRONG",{});var Kit=s(lfe);ALo=r(Kit,"xlm"),Kit.forEach(t),yLo=r(QLe," \u2014 "),GD=n(QLe,"A",{href:!0});var Zit=s(GD);LLo=r(Zit,"XLMWithLMHeadModel"),Zit.forEach(t),xLo=r(QLe," (XLM model)"),QLe.forEach(t),$Lo=i(U),_b=n(U,"LI",{});var HLe=s(_b);ife=n(HLe,"STRONG",{});var edt=s(ife);kLo=r(edt,"xlm-roberta"),edt.forEach(t),SLo=r(HLe," \u2014 "),OD=n(HLe,"A",{href:!0});var odt=s(OD);RLo=r(odt,"XLMRobertaForMaskedLM"),odt.forEach(t),PLo=r(HLe," (XLM-RoBERTa model)"),HLe.forEach(t),BLo=i(U),ub=n(U,"LI",{});var ULe=s(ub);dfe=n(ULe,"STRONG",{});var rdt=s(dfe);ILo=r(rdt,"xlm-roberta-xl"),rdt.forEach(t),NLo=r(ULe," \u2014 "),VD=n(ULe,"A",{href:!0});var tdt=s(VD);qLo=r(tdt,"XLMRobertaXLForMaskedLM"),tdt.forEach(t),jLo=r(ULe," (XLM-RoBERTa-XL model)"),ULe.forEach(t),DLo=i(U),bb=n(U,"LI",{});var JLe=s(bb);cfe=n(JLe,"STRONG",{});var adt=s(cfe);GLo=r(adt,"yoso"),adt.forEach(t),OLo=r(JLe," \u2014 "),XD=n(JLe,"A",{href:!0});var ndt=s(XD);VLo=r(ndt,"YosoForMaskedLM"),ndt.forEach(t),XLo=r(JLe," (YOSO model)"),JLe.forEach(t),U.forEach(t),zLo=i(aa),vb=n(aa,"P",{});var YLe=s(vb);WLo=r(YLe,"The model is set in evaluation mode by default using "),ffe=n(YLe,"CODE",{});var sdt=s(ffe);QLo=r(sdt,"model.eval()"),sdt.forEach(t),HLo=r(YLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mfe=n(YLe,"CODE",{});var ldt=s(mfe);ULo=r(ldt,"model.train()"),ldt.forEach(t),YLe.forEach(t),JLo=i(aa),T(Fb.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),Bqe=i(f),Ni=n(f,"H2",{class:!0});var jDe=s(Ni);Tb=n(jDe,"A",{id:!0,class:!0,href:!0});var idt=s(Tb);gfe=n(idt,"SPAN",{});var ddt=s(gfe);T(EA.$$.fragment,ddt),ddt.forEach(t),idt.forEach(t),YLo=i(jDe),hfe=n(jDe,"SPAN",{});var cdt=s(hfe);KLo=r(cdt,"AutoModelForSeq2SeqLM"),cdt.forEach(t),jDe.forEach(t),Iqe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(CA.$$.fragment,zs),ZLo=i(zs),qi=n(zs,"P",{});var kZ=s(qi);e8o=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zD=n(kZ,"A",{href:!0});var fdt=s(zD);o8o=r(fdt,"from_pretrained()"),fdt.forEach(t),r8o=r(kZ," class method or the "),WD=n(kZ,"A",{href:!0});var mdt=s(WD);t8o=r(mdt,"from_config()"),mdt.forEach(t),a8o=r(kZ,` class
method.`),kZ.forEach(t),n8o=i(zs),wA=n(zs,"P",{});var DDe=s(wA);s8o=r(DDe,"This class cannot be instantiated directly using "),pfe=n(DDe,"CODE",{});var gdt=s(pfe);l8o=r(gdt,"__init__()"),gdt.forEach(t),i8o=r(DDe," (throws an error)."),DDe.forEach(t),d8o=i(zs),lt=n(zs,"DIV",{class:!0});var Vw=s(lt);T(AA.$$.fragment,Vw),c8o=i(Vw),_fe=n(Vw,"P",{});var hdt=s(_fe);f8o=r(hdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hdt.forEach(t),m8o=i(Vw),ji=n(Vw,"P",{});var SZ=s(ji);g8o=r(SZ,`Note:
Loading a model from its configuration file does `),ufe=n(SZ,"STRONG",{});var pdt=s(ufe);h8o=r(pdt,"not"),pdt.forEach(t),p8o=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QD=n(SZ,"A",{href:!0});var _dt=s(QD);_8o=r(_dt,"from_pretrained()"),_dt.forEach(t),u8o=r(SZ," to load the model weights."),SZ.forEach(t),b8o=i(Vw),T(Mb.$$.fragment,Vw),Vw.forEach(t),v8o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(yA.$$.fragment,na),F8o=i(na),bfe=n(na,"P",{});var udt=s(bfe);T8o=r(udt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),udt.forEach(t),M8o=i(na),Sa=n(na,"P",{});var Xw=s(Sa);E8o=r(Xw,"The model class to instantiate is selected based on the "),vfe=n(Xw,"CODE",{});var bdt=s(vfe);C8o=r(bdt,"model_type"),bdt.forEach(t),w8o=r(Xw,` property of the config object (either
passed as an argument or loaded from `),Ffe=n(Xw,"CODE",{});var vdt=s(Ffe);A8o=r(vdt,"pretrained_model_name_or_path"),vdt.forEach(t),y8o=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tfe=n(Xw,"CODE",{});var Fdt=s(Tfe);L8o=r(Fdt,"pretrained_model_name_or_path"),Fdt.forEach(t),x8o=r(Xw,":"),Xw.forEach(t),$8o=i(na),_e=n(na,"UL",{});var ve=s(_e);Eb=n(ve,"LI",{});var KLe=s(Eb);Mfe=n(KLe,"STRONG",{});var Tdt=s(Mfe);k8o=r(Tdt,"bart"),Tdt.forEach(t),S8o=r(KLe," \u2014 "),HD=n(KLe,"A",{href:!0});var Mdt=s(HD);R8o=r(Mdt,"BartForConditionalGeneration"),Mdt.forEach(t),P8o=r(KLe," (BART model)"),KLe.forEach(t),B8o=i(ve),Cb=n(ve,"LI",{});var ZLe=s(Cb);Efe=n(ZLe,"STRONG",{});var Edt=s(Efe);I8o=r(Edt,"bigbird_pegasus"),Edt.forEach(t),N8o=r(ZLe," \u2014 "),UD=n(ZLe,"A",{href:!0});var Cdt=s(UD);q8o=r(Cdt,"BigBirdPegasusForConditionalGeneration"),Cdt.forEach(t),j8o=r(ZLe," (BigBirdPegasus model)"),ZLe.forEach(t),D8o=i(ve),wb=n(ve,"LI",{});var e8e=s(wb);Cfe=n(e8e,"STRONG",{});var wdt=s(Cfe);G8o=r(wdt,"blenderbot"),wdt.forEach(t),O8o=r(e8e," \u2014 "),JD=n(e8e,"A",{href:!0});var Adt=s(JD);V8o=r(Adt,"BlenderbotForConditionalGeneration"),Adt.forEach(t),X8o=r(e8e," (Blenderbot model)"),e8e.forEach(t),z8o=i(ve),Ab=n(ve,"LI",{});var o8e=s(Ab);wfe=n(o8e,"STRONG",{});var ydt=s(wfe);W8o=r(ydt,"blenderbot-small"),ydt.forEach(t),Q8o=r(o8e," \u2014 "),YD=n(o8e,"A",{href:!0});var Ldt=s(YD);H8o=r(Ldt,"BlenderbotSmallForConditionalGeneration"),Ldt.forEach(t),U8o=r(o8e," (BlenderbotSmall model)"),o8e.forEach(t),J8o=i(ve),yb=n(ve,"LI",{});var r8e=s(yb);Afe=n(r8e,"STRONG",{});var xdt=s(Afe);Y8o=r(xdt,"encoder-decoder"),xdt.forEach(t),K8o=r(r8e," \u2014 "),KD=n(r8e,"A",{href:!0});var $dt=s(KD);Z8o=r($dt,"EncoderDecoderModel"),$dt.forEach(t),exo=r(r8e," (Encoder decoder model)"),r8e.forEach(t),oxo=i(ve),Lb=n(ve,"LI",{});var t8e=s(Lb);yfe=n(t8e,"STRONG",{});var kdt=s(yfe);rxo=r(kdt,"fsmt"),kdt.forEach(t),txo=r(t8e," \u2014 "),ZD=n(t8e,"A",{href:!0});var Sdt=s(ZD);axo=r(Sdt,"FSMTForConditionalGeneration"),Sdt.forEach(t),nxo=r(t8e," (FairSeq Machine-Translation model)"),t8e.forEach(t),sxo=i(ve),xb=n(ve,"LI",{});var a8e=s(xb);Lfe=n(a8e,"STRONG",{});var Rdt=s(Lfe);lxo=r(Rdt,"led"),Rdt.forEach(t),ixo=r(a8e," \u2014 "),eG=n(a8e,"A",{href:!0});var Pdt=s(eG);dxo=r(Pdt,"LEDForConditionalGeneration"),Pdt.forEach(t),cxo=r(a8e," (LED model)"),a8e.forEach(t),fxo=i(ve),$b=n(ve,"LI",{});var n8e=s($b);xfe=n(n8e,"STRONG",{});var Bdt=s(xfe);mxo=r(Bdt,"m2m_100"),Bdt.forEach(t),gxo=r(n8e," \u2014 "),oG=n(n8e,"A",{href:!0});var Idt=s(oG);hxo=r(Idt,"M2M100ForConditionalGeneration"),Idt.forEach(t),pxo=r(n8e," (M2M100 model)"),n8e.forEach(t),_xo=i(ve),kb=n(ve,"LI",{});var s8e=s(kb);$fe=n(s8e,"STRONG",{});var Ndt=s($fe);uxo=r(Ndt,"marian"),Ndt.forEach(t),bxo=r(s8e," \u2014 "),rG=n(s8e,"A",{href:!0});var qdt=s(rG);vxo=r(qdt,"MarianMTModel"),qdt.forEach(t),Fxo=r(s8e," (Marian model)"),s8e.forEach(t),Txo=i(ve),Sb=n(ve,"LI",{});var l8e=s(Sb);kfe=n(l8e,"STRONG",{});var jdt=s(kfe);Mxo=r(jdt,"mbart"),jdt.forEach(t),Exo=r(l8e," \u2014 "),tG=n(l8e,"A",{href:!0});var Ddt=s(tG);Cxo=r(Ddt,"MBartForConditionalGeneration"),Ddt.forEach(t),wxo=r(l8e," (mBART model)"),l8e.forEach(t),Axo=i(ve),Rb=n(ve,"LI",{});var i8e=s(Rb);Sfe=n(i8e,"STRONG",{});var Gdt=s(Sfe);yxo=r(Gdt,"mt5"),Gdt.forEach(t),Lxo=r(i8e," \u2014 "),aG=n(i8e,"A",{href:!0});var Odt=s(aG);xxo=r(Odt,"MT5ForConditionalGeneration"),Odt.forEach(t),$xo=r(i8e," (mT5 model)"),i8e.forEach(t),kxo=i(ve),Pb=n(ve,"LI",{});var d8e=s(Pb);Rfe=n(d8e,"STRONG",{});var Vdt=s(Rfe);Sxo=r(Vdt,"pegasus"),Vdt.forEach(t),Rxo=r(d8e," \u2014 "),nG=n(d8e,"A",{href:!0});var Xdt=s(nG);Pxo=r(Xdt,"PegasusForConditionalGeneration"),Xdt.forEach(t),Bxo=r(d8e," (Pegasus model)"),d8e.forEach(t),Ixo=i(ve),Bb=n(ve,"LI",{});var c8e=s(Bb);Pfe=n(c8e,"STRONG",{});var zdt=s(Pfe);Nxo=r(zdt,"plbart"),zdt.forEach(t),qxo=r(c8e," \u2014 "),sG=n(c8e,"A",{href:!0});var Wdt=s(sG);jxo=r(Wdt,"PLBartForConditionalGeneration"),Wdt.forEach(t),Dxo=r(c8e," (PLBart model)"),c8e.forEach(t),Gxo=i(ve),Ib=n(ve,"LI",{});var f8e=s(Ib);Bfe=n(f8e,"STRONG",{});var Qdt=s(Bfe);Oxo=r(Qdt,"prophetnet"),Qdt.forEach(t),Vxo=r(f8e," \u2014 "),lG=n(f8e,"A",{href:!0});var Hdt=s(lG);Xxo=r(Hdt,"ProphetNetForConditionalGeneration"),Hdt.forEach(t),zxo=r(f8e," (ProphetNet model)"),f8e.forEach(t),Wxo=i(ve),Nb=n(ve,"LI",{});var m8e=s(Nb);Ife=n(m8e,"STRONG",{});var Udt=s(Ife);Qxo=r(Udt,"t5"),Udt.forEach(t),Hxo=r(m8e," \u2014 "),iG=n(m8e,"A",{href:!0});var Jdt=s(iG);Uxo=r(Jdt,"T5ForConditionalGeneration"),Jdt.forEach(t),Jxo=r(m8e," (T5 model)"),m8e.forEach(t),Yxo=i(ve),qb=n(ve,"LI",{});var g8e=s(qb);Nfe=n(g8e,"STRONG",{});var Ydt=s(Nfe);Kxo=r(Ydt,"xlm-prophetnet"),Ydt.forEach(t),Zxo=r(g8e," \u2014 "),dG=n(g8e,"A",{href:!0});var Kdt=s(dG);e$o=r(Kdt,"XLMProphetNetForConditionalGeneration"),Kdt.forEach(t),o$o=r(g8e," (XLMProphetNet model)"),g8e.forEach(t),ve.forEach(t),r$o=i(na),jb=n(na,"P",{});var h8e=s(jb);t$o=r(h8e,"The model is set in evaluation mode by default using "),qfe=n(h8e,"CODE",{});var Zdt=s(qfe);a$o=r(Zdt,"model.eval()"),Zdt.forEach(t),n$o=r(h8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jfe=n(h8e,"CODE",{});var ect=s(jfe);s$o=r(ect,"model.train()"),ect.forEach(t),h8e.forEach(t),l$o=i(na),T(Db.$$.fragment,na),na.forEach(t),zs.forEach(t),Nqe=i(f),Di=n(f,"H2",{class:!0});var GDe=s(Di);Gb=n(GDe,"A",{id:!0,class:!0,href:!0});var oct=s(Gb);Dfe=n(oct,"SPAN",{});var rct=s(Dfe);T(LA.$$.fragment,rct),rct.forEach(t),oct.forEach(t),i$o=i(GDe),Gfe=n(GDe,"SPAN",{});var tct=s(Gfe);d$o=r(tct,"AutoModelForSequenceClassification"),tct.forEach(t),GDe.forEach(t),qqe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(xA.$$.fragment,Ws),c$o=i(Ws),Gi=n(Ws,"P",{});var RZ=s(Gi);f$o=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cG=n(RZ,"A",{href:!0});var act=s(cG);m$o=r(act,"from_pretrained()"),act.forEach(t),g$o=r(RZ," class method or the "),fG=n(RZ,"A",{href:!0});var nct=s(fG);h$o=r(nct,"from_config()"),nct.forEach(t),p$o=r(RZ,` class
method.`),RZ.forEach(t),_$o=i(Ws),$A=n(Ws,"P",{});var ODe=s($A);u$o=r(ODe,"This class cannot be instantiated directly using "),Ofe=n(ODe,"CODE",{});var sct=s(Ofe);b$o=r(sct,"__init__()"),sct.forEach(t),v$o=r(ODe," (throws an error)."),ODe.forEach(t),F$o=i(Ws),it=n(Ws,"DIV",{class:!0});var zw=s(it);T(kA.$$.fragment,zw),T$o=i(zw),Vfe=n(zw,"P",{});var lct=s(Vfe);M$o=r(lct,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lct.forEach(t),E$o=i(zw),Oi=n(zw,"P",{});var PZ=s(Oi);C$o=r(PZ,`Note:
Loading a model from its configuration file does `),Xfe=n(PZ,"STRONG",{});var ict=s(Xfe);w$o=r(ict,"not"),ict.forEach(t),A$o=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mG=n(PZ,"A",{href:!0});var dct=s(mG);y$o=r(dct,"from_pretrained()"),dct.forEach(t),L$o=r(PZ," to load the model weights."),PZ.forEach(t),x$o=i(zw),T(Ob.$$.fragment,zw),zw.forEach(t),$$o=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(SA.$$.fragment,sa),k$o=i(sa),zfe=n(sa,"P",{});var cct=s(zfe);S$o=r(cct,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cct.forEach(t),R$o=i(sa),Ra=n(sa,"P",{});var Ww=s(Ra);P$o=r(Ww,"The model class to instantiate is selected based on the "),Wfe=n(Ww,"CODE",{});var fct=s(Wfe);B$o=r(fct,"model_type"),fct.forEach(t),I$o=r(Ww,` property of the config object (either
passed as an argument or loaded from `),Qfe=n(Ww,"CODE",{});var mct=s(Qfe);N$o=r(mct,"pretrained_model_name_or_path"),mct.forEach(t),q$o=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hfe=n(Ww,"CODE",{});var gct=s(Hfe);j$o=r(gct,"pretrained_model_name_or_path"),gct.forEach(t),D$o=r(Ww,":"),Ww.forEach(t),G$o=i(sa),N=n(sa,"UL",{});var j=s(N);Vb=n(j,"LI",{});var p8e=s(Vb);Ufe=n(p8e,"STRONG",{});var hct=s(Ufe);O$o=r(hct,"albert"),hct.forEach(t),V$o=r(p8e," \u2014 "),gG=n(p8e,"A",{href:!0});var pct=s(gG);X$o=r(pct,"AlbertForSequenceClassification"),pct.forEach(t),z$o=r(p8e," (ALBERT model)"),p8e.forEach(t),W$o=i(j),Xb=n(j,"LI",{});var _8e=s(Xb);Jfe=n(_8e,"STRONG",{});var _ct=s(Jfe);Q$o=r(_ct,"bart"),_ct.forEach(t),H$o=r(_8e," \u2014 "),hG=n(_8e,"A",{href:!0});var uct=s(hG);U$o=r(uct,"BartForSequenceClassification"),uct.forEach(t),J$o=r(_8e," (BART model)"),_8e.forEach(t),Y$o=i(j),zb=n(j,"LI",{});var u8e=s(zb);Yfe=n(u8e,"STRONG",{});var bct=s(Yfe);K$o=r(bct,"bert"),bct.forEach(t),Z$o=r(u8e," \u2014 "),pG=n(u8e,"A",{href:!0});var vct=s(pG);eko=r(vct,"BertForSequenceClassification"),vct.forEach(t),oko=r(u8e," (BERT model)"),u8e.forEach(t),rko=i(j),Wb=n(j,"LI",{});var b8e=s(Wb);Kfe=n(b8e,"STRONG",{});var Fct=s(Kfe);tko=r(Fct,"big_bird"),Fct.forEach(t),ako=r(b8e," \u2014 "),_G=n(b8e,"A",{href:!0});var Tct=s(_G);nko=r(Tct,"BigBirdForSequenceClassification"),Tct.forEach(t),sko=r(b8e," (BigBird model)"),b8e.forEach(t),lko=i(j),Qb=n(j,"LI",{});var v8e=s(Qb);Zfe=n(v8e,"STRONG",{});var Mct=s(Zfe);iko=r(Mct,"bigbird_pegasus"),Mct.forEach(t),dko=r(v8e," \u2014 "),uG=n(v8e,"A",{href:!0});var Ect=s(uG);cko=r(Ect,"BigBirdPegasusForSequenceClassification"),Ect.forEach(t),fko=r(v8e," (BigBirdPegasus model)"),v8e.forEach(t),mko=i(j),Hb=n(j,"LI",{});var F8e=s(Hb);eme=n(F8e,"STRONG",{});var Cct=s(eme);gko=r(Cct,"camembert"),Cct.forEach(t),hko=r(F8e," \u2014 "),bG=n(F8e,"A",{href:!0});var wct=s(bG);pko=r(wct,"CamembertForSequenceClassification"),wct.forEach(t),_ko=r(F8e," (CamemBERT model)"),F8e.forEach(t),uko=i(j),Ub=n(j,"LI",{});var T8e=s(Ub);ome=n(T8e,"STRONG",{});var Act=s(ome);bko=r(Act,"canine"),Act.forEach(t),vko=r(T8e," \u2014 "),vG=n(T8e,"A",{href:!0});var yct=s(vG);Fko=r(yct,"CanineForSequenceClassification"),yct.forEach(t),Tko=r(T8e," (Canine model)"),T8e.forEach(t),Mko=i(j),Jb=n(j,"LI",{});var M8e=s(Jb);rme=n(M8e,"STRONG",{});var Lct=s(rme);Eko=r(Lct,"convbert"),Lct.forEach(t),Cko=r(M8e," \u2014 "),FG=n(M8e,"A",{href:!0});var xct=s(FG);wko=r(xct,"ConvBertForSequenceClassification"),xct.forEach(t),Ako=r(M8e," (ConvBERT model)"),M8e.forEach(t),yko=i(j),Yb=n(j,"LI",{});var E8e=s(Yb);tme=n(E8e,"STRONG",{});var $ct=s(tme);Lko=r($ct,"ctrl"),$ct.forEach(t),xko=r(E8e," \u2014 "),TG=n(E8e,"A",{href:!0});var kct=s(TG);$ko=r(kct,"CTRLForSequenceClassification"),kct.forEach(t),kko=r(E8e," (CTRL model)"),E8e.forEach(t),Sko=i(j),Kb=n(j,"LI",{});var C8e=s(Kb);ame=n(C8e,"STRONG",{});var Sct=s(ame);Rko=r(Sct,"data2vec-text"),Sct.forEach(t),Pko=r(C8e," \u2014 "),MG=n(C8e,"A",{href:!0});var Rct=s(MG);Bko=r(Rct,"Data2VecTextForSequenceClassification"),Rct.forEach(t),Iko=r(C8e," (Data2VecText model)"),C8e.forEach(t),Nko=i(j),Zb=n(j,"LI",{});var w8e=s(Zb);nme=n(w8e,"STRONG",{});var Pct=s(nme);qko=r(Pct,"deberta"),Pct.forEach(t),jko=r(w8e," \u2014 "),EG=n(w8e,"A",{href:!0});var Bct=s(EG);Dko=r(Bct,"DebertaForSequenceClassification"),Bct.forEach(t),Gko=r(w8e," (DeBERTa model)"),w8e.forEach(t),Oko=i(j),e2=n(j,"LI",{});var A8e=s(e2);sme=n(A8e,"STRONG",{});var Ict=s(sme);Vko=r(Ict,"deberta-v2"),Ict.forEach(t),Xko=r(A8e," \u2014 "),CG=n(A8e,"A",{href:!0});var Nct=s(CG);zko=r(Nct,"DebertaV2ForSequenceClassification"),Nct.forEach(t),Wko=r(A8e," (DeBERTa-v2 model)"),A8e.forEach(t),Qko=i(j),o2=n(j,"LI",{});var y8e=s(o2);lme=n(y8e,"STRONG",{});var qct=s(lme);Hko=r(qct,"distilbert"),qct.forEach(t),Uko=r(y8e," \u2014 "),wG=n(y8e,"A",{href:!0});var jct=s(wG);Jko=r(jct,"DistilBertForSequenceClassification"),jct.forEach(t),Yko=r(y8e," (DistilBERT model)"),y8e.forEach(t),Kko=i(j),r2=n(j,"LI",{});var L8e=s(r2);ime=n(L8e,"STRONG",{});var Dct=s(ime);Zko=r(Dct,"electra"),Dct.forEach(t),eSo=r(L8e," \u2014 "),AG=n(L8e,"A",{href:!0});var Gct=s(AG);oSo=r(Gct,"ElectraForSequenceClassification"),Gct.forEach(t),rSo=r(L8e," (ELECTRA model)"),L8e.forEach(t),tSo=i(j),t2=n(j,"LI",{});var x8e=s(t2);dme=n(x8e,"STRONG",{});var Oct=s(dme);aSo=r(Oct,"flaubert"),Oct.forEach(t),nSo=r(x8e," \u2014 "),yG=n(x8e,"A",{href:!0});var Vct=s(yG);sSo=r(Vct,"FlaubertForSequenceClassification"),Vct.forEach(t),lSo=r(x8e," (FlauBERT model)"),x8e.forEach(t),iSo=i(j),a2=n(j,"LI",{});var $8e=s(a2);cme=n($8e,"STRONG",{});var Xct=s(cme);dSo=r(Xct,"fnet"),Xct.forEach(t),cSo=r($8e," \u2014 "),LG=n($8e,"A",{href:!0});var zct=s(LG);fSo=r(zct,"FNetForSequenceClassification"),zct.forEach(t),mSo=r($8e," (FNet model)"),$8e.forEach(t),gSo=i(j),n2=n(j,"LI",{});var k8e=s(n2);fme=n(k8e,"STRONG",{});var Wct=s(fme);hSo=r(Wct,"funnel"),Wct.forEach(t),pSo=r(k8e," \u2014 "),xG=n(k8e,"A",{href:!0});var Qct=s(xG);_So=r(Qct,"FunnelForSequenceClassification"),Qct.forEach(t),uSo=r(k8e," (Funnel Transformer model)"),k8e.forEach(t),bSo=i(j),s2=n(j,"LI",{});var S8e=s(s2);mme=n(S8e,"STRONG",{});var Hct=s(mme);vSo=r(Hct,"gpt2"),Hct.forEach(t),FSo=r(S8e," \u2014 "),$G=n(S8e,"A",{href:!0});var Uct=s($G);TSo=r(Uct,"GPT2ForSequenceClassification"),Uct.forEach(t),MSo=r(S8e," (OpenAI GPT-2 model)"),S8e.forEach(t),ESo=i(j),l2=n(j,"LI",{});var R8e=s(l2);gme=n(R8e,"STRONG",{});var Jct=s(gme);CSo=r(Jct,"gpt_neo"),Jct.forEach(t),wSo=r(R8e," \u2014 "),kG=n(R8e,"A",{href:!0});var Yct=s(kG);ASo=r(Yct,"GPTNeoForSequenceClassification"),Yct.forEach(t),ySo=r(R8e," (GPT Neo model)"),R8e.forEach(t),LSo=i(j),i2=n(j,"LI",{});var P8e=s(i2);hme=n(P8e,"STRONG",{});var Kct=s(hme);xSo=r(Kct,"gptj"),Kct.forEach(t),$So=r(P8e," \u2014 "),SG=n(P8e,"A",{href:!0});var Zct=s(SG);kSo=r(Zct,"GPTJForSequenceClassification"),Zct.forEach(t),SSo=r(P8e," (GPT-J model)"),P8e.forEach(t),RSo=i(j),d2=n(j,"LI",{});var B8e=s(d2);pme=n(B8e,"STRONG",{});var eft=s(pme);PSo=r(eft,"ibert"),eft.forEach(t),BSo=r(B8e," \u2014 "),RG=n(B8e,"A",{href:!0});var oft=s(RG);ISo=r(oft,"IBertForSequenceClassification"),oft.forEach(t),NSo=r(B8e," (I-BERT model)"),B8e.forEach(t),qSo=i(j),c2=n(j,"LI",{});var I8e=s(c2);_me=n(I8e,"STRONG",{});var rft=s(_me);jSo=r(rft,"layoutlm"),rft.forEach(t),DSo=r(I8e," \u2014 "),PG=n(I8e,"A",{href:!0});var tft=s(PG);GSo=r(tft,"LayoutLMForSequenceClassification"),tft.forEach(t),OSo=r(I8e," (LayoutLM model)"),I8e.forEach(t),VSo=i(j),f2=n(j,"LI",{});var N8e=s(f2);ume=n(N8e,"STRONG",{});var aft=s(ume);XSo=r(aft,"layoutlmv2"),aft.forEach(t),zSo=r(N8e," \u2014 "),BG=n(N8e,"A",{href:!0});var nft=s(BG);WSo=r(nft,"LayoutLMv2ForSequenceClassification"),nft.forEach(t),QSo=r(N8e," (LayoutLMv2 model)"),N8e.forEach(t),HSo=i(j),m2=n(j,"LI",{});var q8e=s(m2);bme=n(q8e,"STRONG",{});var sft=s(bme);USo=r(sft,"layoutlmv3"),sft.forEach(t),JSo=r(q8e," \u2014 "),IG=n(q8e,"A",{href:!0});var lft=s(IG);YSo=r(lft,"LayoutLMv3ForSequenceClassification"),lft.forEach(t),KSo=r(q8e," (LayoutLMv3 model)"),q8e.forEach(t),ZSo=i(j),g2=n(j,"LI",{});var j8e=s(g2);vme=n(j8e,"STRONG",{});var ift=s(vme);eRo=r(ift,"led"),ift.forEach(t),oRo=r(j8e," \u2014 "),NG=n(j8e,"A",{href:!0});var dft=s(NG);rRo=r(dft,"LEDForSequenceClassification"),dft.forEach(t),tRo=r(j8e," (LED model)"),j8e.forEach(t),aRo=i(j),h2=n(j,"LI",{});var D8e=s(h2);Fme=n(D8e,"STRONG",{});var cft=s(Fme);nRo=r(cft,"longformer"),cft.forEach(t),sRo=r(D8e," \u2014 "),qG=n(D8e,"A",{href:!0});var fft=s(qG);lRo=r(fft,"LongformerForSequenceClassification"),fft.forEach(t),iRo=r(D8e," (Longformer model)"),D8e.forEach(t),dRo=i(j),p2=n(j,"LI",{});var G8e=s(p2);Tme=n(G8e,"STRONG",{});var mft=s(Tme);cRo=r(mft,"mbart"),mft.forEach(t),fRo=r(G8e," \u2014 "),jG=n(G8e,"A",{href:!0});var gft=s(jG);mRo=r(gft,"MBartForSequenceClassification"),gft.forEach(t),gRo=r(G8e," (mBART model)"),G8e.forEach(t),hRo=i(j),_2=n(j,"LI",{});var O8e=s(_2);Mme=n(O8e,"STRONG",{});var hft=s(Mme);pRo=r(hft,"megatron-bert"),hft.forEach(t),_Ro=r(O8e," \u2014 "),DG=n(O8e,"A",{href:!0});var pft=s(DG);uRo=r(pft,"MegatronBertForSequenceClassification"),pft.forEach(t),bRo=r(O8e," (MegatronBert model)"),O8e.forEach(t),vRo=i(j),u2=n(j,"LI",{});var V8e=s(u2);Eme=n(V8e,"STRONG",{});var _ft=s(Eme);FRo=r(_ft,"mobilebert"),_ft.forEach(t),TRo=r(V8e," \u2014 "),GG=n(V8e,"A",{href:!0});var uft=s(GG);MRo=r(uft,"MobileBertForSequenceClassification"),uft.forEach(t),ERo=r(V8e," (MobileBERT model)"),V8e.forEach(t),CRo=i(j),b2=n(j,"LI",{});var X8e=s(b2);Cme=n(X8e,"STRONG",{});var bft=s(Cme);wRo=r(bft,"mpnet"),bft.forEach(t),ARo=r(X8e," \u2014 "),OG=n(X8e,"A",{href:!0});var vft=s(OG);yRo=r(vft,"MPNetForSequenceClassification"),vft.forEach(t),LRo=r(X8e," (MPNet model)"),X8e.forEach(t),xRo=i(j),v2=n(j,"LI",{});var z8e=s(v2);wme=n(z8e,"STRONG",{});var Fft=s(wme);$Ro=r(Fft,"nystromformer"),Fft.forEach(t),kRo=r(z8e," \u2014 "),VG=n(z8e,"A",{href:!0});var Tft=s(VG);SRo=r(Tft,"NystromformerForSequenceClassification"),Tft.forEach(t),RRo=r(z8e," (Nystromformer model)"),z8e.forEach(t),PRo=i(j),F2=n(j,"LI",{});var W8e=s(F2);Ame=n(W8e,"STRONG",{});var Mft=s(Ame);BRo=r(Mft,"openai-gpt"),Mft.forEach(t),IRo=r(W8e," \u2014 "),XG=n(W8e,"A",{href:!0});var Eft=s(XG);NRo=r(Eft,"OpenAIGPTForSequenceClassification"),Eft.forEach(t),qRo=r(W8e," (OpenAI GPT model)"),W8e.forEach(t),jRo=i(j),T2=n(j,"LI",{});var Q8e=s(T2);yme=n(Q8e,"STRONG",{});var Cft=s(yme);DRo=r(Cft,"perceiver"),Cft.forEach(t),GRo=r(Q8e," \u2014 "),zG=n(Q8e,"A",{href:!0});var wft=s(zG);ORo=r(wft,"PerceiverForSequenceClassification"),wft.forEach(t),VRo=r(Q8e," (Perceiver model)"),Q8e.forEach(t),XRo=i(j),M2=n(j,"LI",{});var H8e=s(M2);Lme=n(H8e,"STRONG",{});var Aft=s(Lme);zRo=r(Aft,"plbart"),Aft.forEach(t),WRo=r(H8e," \u2014 "),WG=n(H8e,"A",{href:!0});var yft=s(WG);QRo=r(yft,"PLBartForSequenceClassification"),yft.forEach(t),HRo=r(H8e," (PLBart model)"),H8e.forEach(t),URo=i(j),E2=n(j,"LI",{});var U8e=s(E2);xme=n(U8e,"STRONG",{});var Lft=s(xme);JRo=r(Lft,"qdqbert"),Lft.forEach(t),YRo=r(U8e," \u2014 "),QG=n(U8e,"A",{href:!0});var xft=s(QG);KRo=r(xft,"QDQBertForSequenceClassification"),xft.forEach(t),ZRo=r(U8e," (QDQBert model)"),U8e.forEach(t),ePo=i(j),C2=n(j,"LI",{});var J8e=s(C2);$me=n(J8e,"STRONG",{});var $ft=s($me);oPo=r($ft,"reformer"),$ft.forEach(t),rPo=r(J8e," \u2014 "),HG=n(J8e,"A",{href:!0});var kft=s(HG);tPo=r(kft,"ReformerForSequenceClassification"),kft.forEach(t),aPo=r(J8e," (Reformer model)"),J8e.forEach(t),nPo=i(j),w2=n(j,"LI",{});var Y8e=s(w2);kme=n(Y8e,"STRONG",{});var Sft=s(kme);sPo=r(Sft,"rembert"),Sft.forEach(t),lPo=r(Y8e," \u2014 "),UG=n(Y8e,"A",{href:!0});var Rft=s(UG);iPo=r(Rft,"RemBertForSequenceClassification"),Rft.forEach(t),dPo=r(Y8e," (RemBERT model)"),Y8e.forEach(t),cPo=i(j),A2=n(j,"LI",{});var K8e=s(A2);Sme=n(K8e,"STRONG",{});var Pft=s(Sme);fPo=r(Pft,"roberta"),Pft.forEach(t),mPo=r(K8e," \u2014 "),JG=n(K8e,"A",{href:!0});var Bft=s(JG);gPo=r(Bft,"RobertaForSequenceClassification"),Bft.forEach(t),hPo=r(K8e," (RoBERTa model)"),K8e.forEach(t),pPo=i(j),y2=n(j,"LI",{});var Z8e=s(y2);Rme=n(Z8e,"STRONG",{});var Ift=s(Rme);_Po=r(Ift,"roformer"),Ift.forEach(t),uPo=r(Z8e," \u2014 "),YG=n(Z8e,"A",{href:!0});var Nft=s(YG);bPo=r(Nft,"RoFormerForSequenceClassification"),Nft.forEach(t),vPo=r(Z8e," (RoFormer model)"),Z8e.forEach(t),FPo=i(j),L2=n(j,"LI",{});var exe=s(L2);Pme=n(exe,"STRONG",{});var qft=s(Pme);TPo=r(qft,"squeezebert"),qft.forEach(t),MPo=r(exe," \u2014 "),KG=n(exe,"A",{href:!0});var jft=s(KG);EPo=r(jft,"SqueezeBertForSequenceClassification"),jft.forEach(t),CPo=r(exe," (SqueezeBERT model)"),exe.forEach(t),wPo=i(j),x2=n(j,"LI",{});var oxe=s(x2);Bme=n(oxe,"STRONG",{});var Dft=s(Bme);APo=r(Dft,"tapas"),Dft.forEach(t),yPo=r(oxe," \u2014 "),ZG=n(oxe,"A",{href:!0});var Gft=s(ZG);LPo=r(Gft,"TapasForSequenceClassification"),Gft.forEach(t),xPo=r(oxe," (TAPAS model)"),oxe.forEach(t),$Po=i(j),$2=n(j,"LI",{});var rxe=s($2);Ime=n(rxe,"STRONG",{});var Oft=s(Ime);kPo=r(Oft,"transfo-xl"),Oft.forEach(t),SPo=r(rxe," \u2014 "),eO=n(rxe,"A",{href:!0});var Vft=s(eO);RPo=r(Vft,"TransfoXLForSequenceClassification"),Vft.forEach(t),PPo=r(rxe," (Transformer-XL model)"),rxe.forEach(t),BPo=i(j),k2=n(j,"LI",{});var txe=s(k2);Nme=n(txe,"STRONG",{});var Xft=s(Nme);IPo=r(Xft,"xlm"),Xft.forEach(t),NPo=r(txe," \u2014 "),oO=n(txe,"A",{href:!0});var zft=s(oO);qPo=r(zft,"XLMForSequenceClassification"),zft.forEach(t),jPo=r(txe," (XLM model)"),txe.forEach(t),DPo=i(j),S2=n(j,"LI",{});var axe=s(S2);qme=n(axe,"STRONG",{});var Wft=s(qme);GPo=r(Wft,"xlm-roberta"),Wft.forEach(t),OPo=r(axe," \u2014 "),rO=n(axe,"A",{href:!0});var Qft=s(rO);VPo=r(Qft,"XLMRobertaForSequenceClassification"),Qft.forEach(t),XPo=r(axe," (XLM-RoBERTa model)"),axe.forEach(t),zPo=i(j),R2=n(j,"LI",{});var nxe=s(R2);jme=n(nxe,"STRONG",{});var Hft=s(jme);WPo=r(Hft,"xlm-roberta-xl"),Hft.forEach(t),QPo=r(nxe," \u2014 "),tO=n(nxe,"A",{href:!0});var Uft=s(tO);HPo=r(Uft,"XLMRobertaXLForSequenceClassification"),Uft.forEach(t),UPo=r(nxe," (XLM-RoBERTa-XL model)"),nxe.forEach(t),JPo=i(j),P2=n(j,"LI",{});var sxe=s(P2);Dme=n(sxe,"STRONG",{});var Jft=s(Dme);YPo=r(Jft,"xlnet"),Jft.forEach(t),KPo=r(sxe," \u2014 "),aO=n(sxe,"A",{href:!0});var Yft=s(aO);ZPo=r(Yft,"XLNetForSequenceClassification"),Yft.forEach(t),eBo=r(sxe," (XLNet model)"),sxe.forEach(t),oBo=i(j),B2=n(j,"LI",{});var lxe=s(B2);Gme=n(lxe,"STRONG",{});var Kft=s(Gme);rBo=r(Kft,"yoso"),Kft.forEach(t),tBo=r(lxe," \u2014 "),nO=n(lxe,"A",{href:!0});var Zft=s(nO);aBo=r(Zft,"YosoForSequenceClassification"),Zft.forEach(t),nBo=r(lxe," (YOSO model)"),lxe.forEach(t),j.forEach(t),sBo=i(sa),I2=n(sa,"P",{});var ixe=s(I2);lBo=r(ixe,"The model is set in evaluation mode by default using "),Ome=n(ixe,"CODE",{});var emt=s(Ome);iBo=r(emt,"model.eval()"),emt.forEach(t),dBo=r(ixe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vme=n(ixe,"CODE",{});var omt=s(Vme);cBo=r(omt,"model.train()"),omt.forEach(t),ixe.forEach(t),fBo=i(sa),T(N2.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),jqe=i(f),Vi=n(f,"H2",{class:!0});var VDe=s(Vi);q2=n(VDe,"A",{id:!0,class:!0,href:!0});var rmt=s(q2);Xme=n(rmt,"SPAN",{});var tmt=s(Xme);T(RA.$$.fragment,tmt),tmt.forEach(t),rmt.forEach(t),mBo=i(VDe),zme=n(VDe,"SPAN",{});var amt=s(zme);gBo=r(amt,"AutoModelForMultipleChoice"),amt.forEach(t),VDe.forEach(t),Dqe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(PA.$$.fragment,Qs),hBo=i(Qs),Xi=n(Qs,"P",{});var BZ=s(Xi);pBo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sO=n(BZ,"A",{href:!0});var nmt=s(sO);_Bo=r(nmt,"from_pretrained()"),nmt.forEach(t),uBo=r(BZ," class method or the "),lO=n(BZ,"A",{href:!0});var smt=s(lO);bBo=r(smt,"from_config()"),smt.forEach(t),vBo=r(BZ,` class
method.`),BZ.forEach(t),FBo=i(Qs),BA=n(Qs,"P",{});var XDe=s(BA);TBo=r(XDe,"This class cannot be instantiated directly using "),Wme=n(XDe,"CODE",{});var lmt=s(Wme);MBo=r(lmt,"__init__()"),lmt.forEach(t),EBo=r(XDe," (throws an error)."),XDe.forEach(t),CBo=i(Qs),dt=n(Qs,"DIV",{class:!0});var Qw=s(dt);T(IA.$$.fragment,Qw),wBo=i(Qw),Qme=n(Qw,"P",{});var imt=s(Qme);ABo=r(imt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),imt.forEach(t),yBo=i(Qw),zi=n(Qw,"P",{});var IZ=s(zi);LBo=r(IZ,`Note:
Loading a model from its configuration file does `),Hme=n(IZ,"STRONG",{});var dmt=s(Hme);xBo=r(dmt,"not"),dmt.forEach(t),$Bo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=n(IZ,"A",{href:!0});var cmt=s(iO);kBo=r(cmt,"from_pretrained()"),cmt.forEach(t),SBo=r(IZ," to load the model weights."),IZ.forEach(t),RBo=i(Qw),T(j2.$$.fragment,Qw),Qw.forEach(t),PBo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(NA.$$.fragment,la),BBo=i(la),Ume=n(la,"P",{});var fmt=s(Ume);IBo=r(fmt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fmt.forEach(t),NBo=i(la),Pa=n(la,"P",{});var Hw=s(Pa);qBo=r(Hw,"The model class to instantiate is selected based on the "),Jme=n(Hw,"CODE",{});var mmt=s(Jme);jBo=r(mmt,"model_type"),mmt.forEach(t),DBo=r(Hw,` property of the config object (either
passed as an argument or loaded from `),Yme=n(Hw,"CODE",{});var gmt=s(Yme);GBo=r(gmt,"pretrained_model_name_or_path"),gmt.forEach(t),OBo=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kme=n(Hw,"CODE",{});var hmt=s(Kme);VBo=r(hmt,"pretrained_model_name_or_path"),hmt.forEach(t),XBo=r(Hw,":"),Hw.forEach(t),zBo=i(la),K=n(la,"UL",{});var ee=s(K);D2=n(ee,"LI",{});var dxe=s(D2);Zme=n(dxe,"STRONG",{});var pmt=s(Zme);WBo=r(pmt,"albert"),pmt.forEach(t),QBo=r(dxe," \u2014 "),dO=n(dxe,"A",{href:!0});var _mt=s(dO);HBo=r(_mt,"AlbertForMultipleChoice"),_mt.forEach(t),UBo=r(dxe," (ALBERT model)"),dxe.forEach(t),JBo=i(ee),G2=n(ee,"LI",{});var cxe=s(G2);ege=n(cxe,"STRONG",{});var umt=s(ege);YBo=r(umt,"bert"),umt.forEach(t),KBo=r(cxe," \u2014 "),cO=n(cxe,"A",{href:!0});var bmt=s(cO);ZBo=r(bmt,"BertForMultipleChoice"),bmt.forEach(t),eIo=r(cxe," (BERT model)"),cxe.forEach(t),oIo=i(ee),O2=n(ee,"LI",{});var fxe=s(O2);oge=n(fxe,"STRONG",{});var vmt=s(oge);rIo=r(vmt,"big_bird"),vmt.forEach(t),tIo=r(fxe," \u2014 "),fO=n(fxe,"A",{href:!0});var Fmt=s(fO);aIo=r(Fmt,"BigBirdForMultipleChoice"),Fmt.forEach(t),nIo=r(fxe," (BigBird model)"),fxe.forEach(t),sIo=i(ee),V2=n(ee,"LI",{});var mxe=s(V2);rge=n(mxe,"STRONG",{});var Tmt=s(rge);lIo=r(Tmt,"camembert"),Tmt.forEach(t),iIo=r(mxe," \u2014 "),mO=n(mxe,"A",{href:!0});var Mmt=s(mO);dIo=r(Mmt,"CamembertForMultipleChoice"),Mmt.forEach(t),cIo=r(mxe," (CamemBERT model)"),mxe.forEach(t),fIo=i(ee),X2=n(ee,"LI",{});var gxe=s(X2);tge=n(gxe,"STRONG",{});var Emt=s(tge);mIo=r(Emt,"canine"),Emt.forEach(t),gIo=r(gxe," \u2014 "),gO=n(gxe,"A",{href:!0});var Cmt=s(gO);hIo=r(Cmt,"CanineForMultipleChoice"),Cmt.forEach(t),pIo=r(gxe," (Canine model)"),gxe.forEach(t),_Io=i(ee),z2=n(ee,"LI",{});var hxe=s(z2);age=n(hxe,"STRONG",{});var wmt=s(age);uIo=r(wmt,"convbert"),wmt.forEach(t),bIo=r(hxe," \u2014 "),hO=n(hxe,"A",{href:!0});var Amt=s(hO);vIo=r(Amt,"ConvBertForMultipleChoice"),Amt.forEach(t),FIo=r(hxe," (ConvBERT model)"),hxe.forEach(t),TIo=i(ee),W2=n(ee,"LI",{});var pxe=s(W2);nge=n(pxe,"STRONG",{});var ymt=s(nge);MIo=r(ymt,"data2vec-text"),ymt.forEach(t),EIo=r(pxe," \u2014 "),pO=n(pxe,"A",{href:!0});var Lmt=s(pO);CIo=r(Lmt,"Data2VecTextForMultipleChoice"),Lmt.forEach(t),wIo=r(pxe," (Data2VecText model)"),pxe.forEach(t),AIo=i(ee),Q2=n(ee,"LI",{});var _xe=s(Q2);sge=n(_xe,"STRONG",{});var xmt=s(sge);yIo=r(xmt,"deberta-v2"),xmt.forEach(t),LIo=r(_xe," \u2014 "),_O=n(_xe,"A",{href:!0});var $mt=s(_O);xIo=r($mt,"DebertaV2ForMultipleChoice"),$mt.forEach(t),$Io=r(_xe," (DeBERTa-v2 model)"),_xe.forEach(t),kIo=i(ee),H2=n(ee,"LI",{});var uxe=s(H2);lge=n(uxe,"STRONG",{});var kmt=s(lge);SIo=r(kmt,"distilbert"),kmt.forEach(t),RIo=r(uxe," \u2014 "),uO=n(uxe,"A",{href:!0});var Smt=s(uO);PIo=r(Smt,"DistilBertForMultipleChoice"),Smt.forEach(t),BIo=r(uxe," (DistilBERT model)"),uxe.forEach(t),IIo=i(ee),U2=n(ee,"LI",{});var bxe=s(U2);ige=n(bxe,"STRONG",{});var Rmt=s(ige);NIo=r(Rmt,"electra"),Rmt.forEach(t),qIo=r(bxe," \u2014 "),bO=n(bxe,"A",{href:!0});var Pmt=s(bO);jIo=r(Pmt,"ElectraForMultipleChoice"),Pmt.forEach(t),DIo=r(bxe," (ELECTRA model)"),bxe.forEach(t),GIo=i(ee),J2=n(ee,"LI",{});var vxe=s(J2);dge=n(vxe,"STRONG",{});var Bmt=s(dge);OIo=r(Bmt,"flaubert"),Bmt.forEach(t),VIo=r(vxe," \u2014 "),vO=n(vxe,"A",{href:!0});var Imt=s(vO);XIo=r(Imt,"FlaubertForMultipleChoice"),Imt.forEach(t),zIo=r(vxe," (FlauBERT model)"),vxe.forEach(t),WIo=i(ee),Y2=n(ee,"LI",{});var Fxe=s(Y2);cge=n(Fxe,"STRONG",{});var Nmt=s(cge);QIo=r(Nmt,"fnet"),Nmt.forEach(t),HIo=r(Fxe," \u2014 "),FO=n(Fxe,"A",{href:!0});var qmt=s(FO);UIo=r(qmt,"FNetForMultipleChoice"),qmt.forEach(t),JIo=r(Fxe," (FNet model)"),Fxe.forEach(t),YIo=i(ee),K2=n(ee,"LI",{});var Txe=s(K2);fge=n(Txe,"STRONG",{});var jmt=s(fge);KIo=r(jmt,"funnel"),jmt.forEach(t),ZIo=r(Txe," \u2014 "),TO=n(Txe,"A",{href:!0});var Dmt=s(TO);eNo=r(Dmt,"FunnelForMultipleChoice"),Dmt.forEach(t),oNo=r(Txe," (Funnel Transformer model)"),Txe.forEach(t),rNo=i(ee),Z2=n(ee,"LI",{});var Mxe=s(Z2);mge=n(Mxe,"STRONG",{});var Gmt=s(mge);tNo=r(Gmt,"ibert"),Gmt.forEach(t),aNo=r(Mxe," \u2014 "),MO=n(Mxe,"A",{href:!0});var Omt=s(MO);nNo=r(Omt,"IBertForMultipleChoice"),Omt.forEach(t),sNo=r(Mxe," (I-BERT model)"),Mxe.forEach(t),lNo=i(ee),e4=n(ee,"LI",{});var Exe=s(e4);gge=n(Exe,"STRONG",{});var Vmt=s(gge);iNo=r(Vmt,"longformer"),Vmt.forEach(t),dNo=r(Exe," \u2014 "),EO=n(Exe,"A",{href:!0});var Xmt=s(EO);cNo=r(Xmt,"LongformerForMultipleChoice"),Xmt.forEach(t),fNo=r(Exe," (Longformer model)"),Exe.forEach(t),mNo=i(ee),o4=n(ee,"LI",{});var Cxe=s(o4);hge=n(Cxe,"STRONG",{});var zmt=s(hge);gNo=r(zmt,"megatron-bert"),zmt.forEach(t),hNo=r(Cxe," \u2014 "),CO=n(Cxe,"A",{href:!0});var Wmt=s(CO);pNo=r(Wmt,"MegatronBertForMultipleChoice"),Wmt.forEach(t),_No=r(Cxe," (MegatronBert model)"),Cxe.forEach(t),uNo=i(ee),r4=n(ee,"LI",{});var wxe=s(r4);pge=n(wxe,"STRONG",{});var Qmt=s(pge);bNo=r(Qmt,"mobilebert"),Qmt.forEach(t),vNo=r(wxe," \u2014 "),wO=n(wxe,"A",{href:!0});var Hmt=s(wO);FNo=r(Hmt,"MobileBertForMultipleChoice"),Hmt.forEach(t),TNo=r(wxe," (MobileBERT model)"),wxe.forEach(t),MNo=i(ee),t4=n(ee,"LI",{});var Axe=s(t4);_ge=n(Axe,"STRONG",{});var Umt=s(_ge);ENo=r(Umt,"mpnet"),Umt.forEach(t),CNo=r(Axe," \u2014 "),AO=n(Axe,"A",{href:!0});var Jmt=s(AO);wNo=r(Jmt,"MPNetForMultipleChoice"),Jmt.forEach(t),ANo=r(Axe," (MPNet model)"),Axe.forEach(t),yNo=i(ee),a4=n(ee,"LI",{});var yxe=s(a4);uge=n(yxe,"STRONG",{});var Ymt=s(uge);LNo=r(Ymt,"nystromformer"),Ymt.forEach(t),xNo=r(yxe," \u2014 "),yO=n(yxe,"A",{href:!0});var Kmt=s(yO);$No=r(Kmt,"NystromformerForMultipleChoice"),Kmt.forEach(t),kNo=r(yxe," (Nystromformer model)"),yxe.forEach(t),SNo=i(ee),n4=n(ee,"LI",{});var Lxe=s(n4);bge=n(Lxe,"STRONG",{});var Zmt=s(bge);RNo=r(Zmt,"qdqbert"),Zmt.forEach(t),PNo=r(Lxe," \u2014 "),LO=n(Lxe,"A",{href:!0});var egt=s(LO);BNo=r(egt,"QDQBertForMultipleChoice"),egt.forEach(t),INo=r(Lxe," (QDQBert model)"),Lxe.forEach(t),NNo=i(ee),s4=n(ee,"LI",{});var xxe=s(s4);vge=n(xxe,"STRONG",{});var ogt=s(vge);qNo=r(ogt,"rembert"),ogt.forEach(t),jNo=r(xxe," \u2014 "),xO=n(xxe,"A",{href:!0});var rgt=s(xO);DNo=r(rgt,"RemBertForMultipleChoice"),rgt.forEach(t),GNo=r(xxe," (RemBERT model)"),xxe.forEach(t),ONo=i(ee),l4=n(ee,"LI",{});var $xe=s(l4);Fge=n($xe,"STRONG",{});var tgt=s(Fge);VNo=r(tgt,"roberta"),tgt.forEach(t),XNo=r($xe," \u2014 "),$O=n($xe,"A",{href:!0});var agt=s($O);zNo=r(agt,"RobertaForMultipleChoice"),agt.forEach(t),WNo=r($xe," (RoBERTa model)"),$xe.forEach(t),QNo=i(ee),i4=n(ee,"LI",{});var kxe=s(i4);Tge=n(kxe,"STRONG",{});var ngt=s(Tge);HNo=r(ngt,"roformer"),ngt.forEach(t),UNo=r(kxe," \u2014 "),kO=n(kxe,"A",{href:!0});var sgt=s(kO);JNo=r(sgt,"RoFormerForMultipleChoice"),sgt.forEach(t),YNo=r(kxe," (RoFormer model)"),kxe.forEach(t),KNo=i(ee),d4=n(ee,"LI",{});var Sxe=s(d4);Mge=n(Sxe,"STRONG",{});var lgt=s(Mge);ZNo=r(lgt,"squeezebert"),lgt.forEach(t),eqo=r(Sxe," \u2014 "),SO=n(Sxe,"A",{href:!0});var igt=s(SO);oqo=r(igt,"SqueezeBertForMultipleChoice"),igt.forEach(t),rqo=r(Sxe," (SqueezeBERT model)"),Sxe.forEach(t),tqo=i(ee),c4=n(ee,"LI",{});var Rxe=s(c4);Ege=n(Rxe,"STRONG",{});var dgt=s(Ege);aqo=r(dgt,"xlm"),dgt.forEach(t),nqo=r(Rxe," \u2014 "),RO=n(Rxe,"A",{href:!0});var cgt=s(RO);sqo=r(cgt,"XLMForMultipleChoice"),cgt.forEach(t),lqo=r(Rxe," (XLM model)"),Rxe.forEach(t),iqo=i(ee),f4=n(ee,"LI",{});var Pxe=s(f4);Cge=n(Pxe,"STRONG",{});var fgt=s(Cge);dqo=r(fgt,"xlm-roberta"),fgt.forEach(t),cqo=r(Pxe," \u2014 "),PO=n(Pxe,"A",{href:!0});var mgt=s(PO);fqo=r(mgt,"XLMRobertaForMultipleChoice"),mgt.forEach(t),mqo=r(Pxe," (XLM-RoBERTa model)"),Pxe.forEach(t),gqo=i(ee),m4=n(ee,"LI",{});var Bxe=s(m4);wge=n(Bxe,"STRONG",{});var ggt=s(wge);hqo=r(ggt,"xlm-roberta-xl"),ggt.forEach(t),pqo=r(Bxe," \u2014 "),BO=n(Bxe,"A",{href:!0});var hgt=s(BO);_qo=r(hgt,"XLMRobertaXLForMultipleChoice"),hgt.forEach(t),uqo=r(Bxe," (XLM-RoBERTa-XL model)"),Bxe.forEach(t),bqo=i(ee),g4=n(ee,"LI",{});var Ixe=s(g4);Age=n(Ixe,"STRONG",{});var pgt=s(Age);vqo=r(pgt,"xlnet"),pgt.forEach(t),Fqo=r(Ixe," \u2014 "),IO=n(Ixe,"A",{href:!0});var _gt=s(IO);Tqo=r(_gt,"XLNetForMultipleChoice"),_gt.forEach(t),Mqo=r(Ixe," (XLNet model)"),Ixe.forEach(t),Eqo=i(ee),h4=n(ee,"LI",{});var Nxe=s(h4);yge=n(Nxe,"STRONG",{});var ugt=s(yge);Cqo=r(ugt,"yoso"),ugt.forEach(t),wqo=r(Nxe," \u2014 "),NO=n(Nxe,"A",{href:!0});var bgt=s(NO);Aqo=r(bgt,"YosoForMultipleChoice"),bgt.forEach(t),yqo=r(Nxe," (YOSO model)"),Nxe.forEach(t),ee.forEach(t),Lqo=i(la),p4=n(la,"P",{});var qxe=s(p4);xqo=r(qxe,"The model is set in evaluation mode by default using "),Lge=n(qxe,"CODE",{});var vgt=s(Lge);$qo=r(vgt,"model.eval()"),vgt.forEach(t),kqo=r(qxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xge=n(qxe,"CODE",{});var Fgt=s(xge);Sqo=r(Fgt,"model.train()"),Fgt.forEach(t),qxe.forEach(t),Rqo=i(la),T(_4.$$.fragment,la),la.forEach(t),Qs.forEach(t),Gqe=i(f),Wi=n(f,"H2",{class:!0});var zDe=s(Wi);u4=n(zDe,"A",{id:!0,class:!0,href:!0});var Tgt=s(u4);$ge=n(Tgt,"SPAN",{});var Mgt=s($ge);T(qA.$$.fragment,Mgt),Mgt.forEach(t),Tgt.forEach(t),Pqo=i(zDe),kge=n(zDe,"SPAN",{});var Egt=s(kge);Bqo=r(Egt,"AutoModelForNextSentencePrediction"),Egt.forEach(t),zDe.forEach(t),Oqe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(jA.$$.fragment,Hs),Iqo=i(Hs),Qi=n(Hs,"P",{});var NZ=s(Qi);Nqo=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qO=n(NZ,"A",{href:!0});var Cgt=s(qO);qqo=r(Cgt,"from_pretrained()"),Cgt.forEach(t),jqo=r(NZ," class method or the "),jO=n(NZ,"A",{href:!0});var wgt=s(jO);Dqo=r(wgt,"from_config()"),wgt.forEach(t),Gqo=r(NZ,` class
method.`),NZ.forEach(t),Oqo=i(Hs),DA=n(Hs,"P",{});var WDe=s(DA);Vqo=r(WDe,"This class cannot be instantiated directly using "),Sge=n(WDe,"CODE",{});var Agt=s(Sge);Xqo=r(Agt,"__init__()"),Agt.forEach(t),zqo=r(WDe," (throws an error)."),WDe.forEach(t),Wqo=i(Hs),ct=n(Hs,"DIV",{class:!0});var Uw=s(ct);T(GA.$$.fragment,Uw),Qqo=i(Uw),Rge=n(Uw,"P",{});var ygt=s(Rge);Hqo=r(ygt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ygt.forEach(t),Uqo=i(Uw),Hi=n(Uw,"P",{});var qZ=s(Hi);Jqo=r(qZ,`Note:
Loading a model from its configuration file does `),Pge=n(qZ,"STRONG",{});var Lgt=s(Pge);Yqo=r(Lgt,"not"),Lgt.forEach(t),Kqo=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=n(qZ,"A",{href:!0});var xgt=s(DO);Zqo=r(xgt,"from_pretrained()"),xgt.forEach(t),ejo=r(qZ," to load the model weights."),qZ.forEach(t),ojo=i(Uw),T(b4.$$.fragment,Uw),Uw.forEach(t),rjo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(OA.$$.fragment,ia),tjo=i(ia),Bge=n(ia,"P",{});var $gt=s(Bge);ajo=r($gt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$gt.forEach(t),njo=i(ia),Ba=n(ia,"P",{});var Jw=s(Ba);sjo=r(Jw,"The model class to instantiate is selected based on the "),Ige=n(Jw,"CODE",{});var kgt=s(Ige);ljo=r(kgt,"model_type"),kgt.forEach(t),ijo=r(Jw,` property of the config object (either
passed as an argument or loaded from `),Nge=n(Jw,"CODE",{});var Sgt=s(Nge);djo=r(Sgt,"pretrained_model_name_or_path"),Sgt.forEach(t),cjo=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=n(Jw,"CODE",{});var Rgt=s(qge);fjo=r(Rgt,"pretrained_model_name_or_path"),Rgt.forEach(t),mjo=r(Jw,":"),Jw.forEach(t),gjo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);v4=n(Us,"LI",{});var jxe=s(v4);jge=n(jxe,"STRONG",{});var Pgt=s(jge);hjo=r(Pgt,"bert"),Pgt.forEach(t),pjo=r(jxe," \u2014 "),GO=n(jxe,"A",{href:!0});var Bgt=s(GO);_jo=r(Bgt,"BertForNextSentencePrediction"),Bgt.forEach(t),ujo=r(jxe," (BERT model)"),jxe.forEach(t),bjo=i(Us),F4=n(Us,"LI",{});var Dxe=s(F4);Dge=n(Dxe,"STRONG",{});var Igt=s(Dge);vjo=r(Igt,"fnet"),Igt.forEach(t),Fjo=r(Dxe," \u2014 "),OO=n(Dxe,"A",{href:!0});var Ngt=s(OO);Tjo=r(Ngt,"FNetForNextSentencePrediction"),Ngt.forEach(t),Mjo=r(Dxe," (FNet model)"),Dxe.forEach(t),Ejo=i(Us),T4=n(Us,"LI",{});var Gxe=s(T4);Gge=n(Gxe,"STRONG",{});var qgt=s(Gge);Cjo=r(qgt,"megatron-bert"),qgt.forEach(t),wjo=r(Gxe," \u2014 "),VO=n(Gxe,"A",{href:!0});var jgt=s(VO);Ajo=r(jgt,"MegatronBertForNextSentencePrediction"),jgt.forEach(t),yjo=r(Gxe," (MegatronBert model)"),Gxe.forEach(t),Ljo=i(Us),M4=n(Us,"LI",{});var Oxe=s(M4);Oge=n(Oxe,"STRONG",{});var Dgt=s(Oge);xjo=r(Dgt,"mobilebert"),Dgt.forEach(t),$jo=r(Oxe," \u2014 "),XO=n(Oxe,"A",{href:!0});var Ggt=s(XO);kjo=r(Ggt,"MobileBertForNextSentencePrediction"),Ggt.forEach(t),Sjo=r(Oxe," (MobileBERT model)"),Oxe.forEach(t),Rjo=i(Us),E4=n(Us,"LI",{});var Vxe=s(E4);Vge=n(Vxe,"STRONG",{});var Ogt=s(Vge);Pjo=r(Ogt,"qdqbert"),Ogt.forEach(t),Bjo=r(Vxe," \u2014 "),zO=n(Vxe,"A",{href:!0});var Vgt=s(zO);Ijo=r(Vgt,"QDQBertForNextSentencePrediction"),Vgt.forEach(t),Njo=r(Vxe," (QDQBert model)"),Vxe.forEach(t),Us.forEach(t),qjo=i(ia),C4=n(ia,"P",{});var Xxe=s(C4);jjo=r(Xxe,"The model is set in evaluation mode by default using "),Xge=n(Xxe,"CODE",{});var Xgt=s(Xge);Djo=r(Xgt,"model.eval()"),Xgt.forEach(t),Gjo=r(Xxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=n(Xxe,"CODE",{});var zgt=s(zge);Ojo=r(zgt,"model.train()"),zgt.forEach(t),Xxe.forEach(t),Vjo=i(ia),T(w4.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),Vqe=i(f),Ui=n(f,"H2",{class:!0});var QDe=s(Ui);A4=n(QDe,"A",{id:!0,class:!0,href:!0});var Wgt=s(A4);Wge=n(Wgt,"SPAN",{});var Qgt=s(Wge);T(VA.$$.fragment,Qgt),Qgt.forEach(t),Wgt.forEach(t),Xjo=i(QDe),Qge=n(QDe,"SPAN",{});var Hgt=s(Qge);zjo=r(Hgt,"AutoModelForTokenClassification"),Hgt.forEach(t),QDe.forEach(t),Xqe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(XA.$$.fragment,Js),Wjo=i(Js),Ji=n(Js,"P",{});var jZ=s(Ji);Qjo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),WO=n(jZ,"A",{href:!0});var Ugt=s(WO);Hjo=r(Ugt,"from_pretrained()"),Ugt.forEach(t),Ujo=r(jZ," class method or the "),QO=n(jZ,"A",{href:!0});var Jgt=s(QO);Jjo=r(Jgt,"from_config()"),Jgt.forEach(t),Yjo=r(jZ,` class
method.`),jZ.forEach(t),Kjo=i(Js),zA=n(Js,"P",{});var HDe=s(zA);Zjo=r(HDe,"This class cannot be instantiated directly using "),Hge=n(HDe,"CODE",{});var Ygt=s(Hge);eDo=r(Ygt,"__init__()"),Ygt.forEach(t),oDo=r(HDe," (throws an error)."),HDe.forEach(t),rDo=i(Js),ft=n(Js,"DIV",{class:!0});var Yw=s(ft);T(WA.$$.fragment,Yw),tDo=i(Yw),Uge=n(Yw,"P",{});var Kgt=s(Uge);aDo=r(Kgt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Kgt.forEach(t),nDo=i(Yw),Yi=n(Yw,"P",{});var DZ=s(Yi);sDo=r(DZ,`Note:
Loading a model from its configuration file does `),Jge=n(DZ,"STRONG",{});var Zgt=s(Jge);lDo=r(Zgt,"not"),Zgt.forEach(t),iDo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=n(DZ,"A",{href:!0});var eht=s(HO);dDo=r(eht,"from_pretrained()"),eht.forEach(t),cDo=r(DZ," to load the model weights."),DZ.forEach(t),fDo=i(Yw),T(y4.$$.fragment,Yw),Yw.forEach(t),mDo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(QA.$$.fragment,da),gDo=i(da),Yge=n(da,"P",{});var oht=s(Yge);hDo=r(oht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oht.forEach(t),pDo=i(da),Ia=n(da,"P",{});var Kw=s(Ia);_Do=r(Kw,"The model class to instantiate is selected based on the "),Kge=n(Kw,"CODE",{});var rht=s(Kge);uDo=r(rht,"model_type"),rht.forEach(t),bDo=r(Kw,` property of the config object (either
passed as an argument or loaded from `),Zge=n(Kw,"CODE",{});var tht=s(Zge);vDo=r(tht,"pretrained_model_name_or_path"),tht.forEach(t),FDo=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=n(Kw,"CODE",{});var aht=s(ehe);TDo=r(aht,"pretrained_model_name_or_path"),aht.forEach(t),MDo=r(Kw,":"),Kw.forEach(t),EDo=i(da),H=n(da,"UL",{});var J=s(H);L4=n(J,"LI",{});var zxe=s(L4);ohe=n(zxe,"STRONG",{});var nht=s(ohe);CDo=r(nht,"albert"),nht.forEach(t),wDo=r(zxe," \u2014 "),UO=n(zxe,"A",{href:!0});var sht=s(UO);ADo=r(sht,"AlbertForTokenClassification"),sht.forEach(t),yDo=r(zxe," (ALBERT model)"),zxe.forEach(t),LDo=i(J),x4=n(J,"LI",{});var Wxe=s(x4);rhe=n(Wxe,"STRONG",{});var lht=s(rhe);xDo=r(lht,"bert"),lht.forEach(t),$Do=r(Wxe," \u2014 "),JO=n(Wxe,"A",{href:!0});var iht=s(JO);kDo=r(iht,"BertForTokenClassification"),iht.forEach(t),SDo=r(Wxe," (BERT model)"),Wxe.forEach(t),RDo=i(J),$4=n(J,"LI",{});var Qxe=s($4);the=n(Qxe,"STRONG",{});var dht=s(the);PDo=r(dht,"big_bird"),dht.forEach(t),BDo=r(Qxe," \u2014 "),YO=n(Qxe,"A",{href:!0});var cht=s(YO);IDo=r(cht,"BigBirdForTokenClassification"),cht.forEach(t),NDo=r(Qxe," (BigBird model)"),Qxe.forEach(t),qDo=i(J),k4=n(J,"LI",{});var Hxe=s(k4);ahe=n(Hxe,"STRONG",{});var fht=s(ahe);jDo=r(fht,"camembert"),fht.forEach(t),DDo=r(Hxe," \u2014 "),KO=n(Hxe,"A",{href:!0});var mht=s(KO);GDo=r(mht,"CamembertForTokenClassification"),mht.forEach(t),ODo=r(Hxe," (CamemBERT model)"),Hxe.forEach(t),VDo=i(J),S4=n(J,"LI",{});var Uxe=s(S4);nhe=n(Uxe,"STRONG",{});var ght=s(nhe);XDo=r(ght,"canine"),ght.forEach(t),zDo=r(Uxe," \u2014 "),ZO=n(Uxe,"A",{href:!0});var hht=s(ZO);WDo=r(hht,"CanineForTokenClassification"),hht.forEach(t),QDo=r(Uxe," (Canine model)"),Uxe.forEach(t),HDo=i(J),R4=n(J,"LI",{});var Jxe=s(R4);she=n(Jxe,"STRONG",{});var pht=s(she);UDo=r(pht,"convbert"),pht.forEach(t),JDo=r(Jxe," \u2014 "),eV=n(Jxe,"A",{href:!0});var _ht=s(eV);YDo=r(_ht,"ConvBertForTokenClassification"),_ht.forEach(t),KDo=r(Jxe," (ConvBERT model)"),Jxe.forEach(t),ZDo=i(J),P4=n(J,"LI",{});var Yxe=s(P4);lhe=n(Yxe,"STRONG",{});var uht=s(lhe);eGo=r(uht,"data2vec-text"),uht.forEach(t),oGo=r(Yxe," \u2014 "),oV=n(Yxe,"A",{href:!0});var bht=s(oV);rGo=r(bht,"Data2VecTextForTokenClassification"),bht.forEach(t),tGo=r(Yxe," (Data2VecText model)"),Yxe.forEach(t),aGo=i(J),B4=n(J,"LI",{});var Kxe=s(B4);ihe=n(Kxe,"STRONG",{});var vht=s(ihe);nGo=r(vht,"deberta"),vht.forEach(t),sGo=r(Kxe," \u2014 "),rV=n(Kxe,"A",{href:!0});var Fht=s(rV);lGo=r(Fht,"DebertaForTokenClassification"),Fht.forEach(t),iGo=r(Kxe," (DeBERTa model)"),Kxe.forEach(t),dGo=i(J),I4=n(J,"LI",{});var Zxe=s(I4);dhe=n(Zxe,"STRONG",{});var Tht=s(dhe);cGo=r(Tht,"deberta-v2"),Tht.forEach(t),fGo=r(Zxe," \u2014 "),tV=n(Zxe,"A",{href:!0});var Mht=s(tV);mGo=r(Mht,"DebertaV2ForTokenClassification"),Mht.forEach(t),gGo=r(Zxe," (DeBERTa-v2 model)"),Zxe.forEach(t),hGo=i(J),N4=n(J,"LI",{});var e$e=s(N4);che=n(e$e,"STRONG",{});var Eht=s(che);pGo=r(Eht,"distilbert"),Eht.forEach(t),_Go=r(e$e," \u2014 "),aV=n(e$e,"A",{href:!0});var Cht=s(aV);uGo=r(Cht,"DistilBertForTokenClassification"),Cht.forEach(t),bGo=r(e$e," (DistilBERT model)"),e$e.forEach(t),vGo=i(J),q4=n(J,"LI",{});var o$e=s(q4);fhe=n(o$e,"STRONG",{});var wht=s(fhe);FGo=r(wht,"electra"),wht.forEach(t),TGo=r(o$e," \u2014 "),nV=n(o$e,"A",{href:!0});var Aht=s(nV);MGo=r(Aht,"ElectraForTokenClassification"),Aht.forEach(t),EGo=r(o$e," (ELECTRA model)"),o$e.forEach(t),CGo=i(J),j4=n(J,"LI",{});var r$e=s(j4);mhe=n(r$e,"STRONG",{});var yht=s(mhe);wGo=r(yht,"flaubert"),yht.forEach(t),AGo=r(r$e," \u2014 "),sV=n(r$e,"A",{href:!0});var Lht=s(sV);yGo=r(Lht,"FlaubertForTokenClassification"),Lht.forEach(t),LGo=r(r$e," (FlauBERT model)"),r$e.forEach(t),xGo=i(J),D4=n(J,"LI",{});var t$e=s(D4);ghe=n(t$e,"STRONG",{});var xht=s(ghe);$Go=r(xht,"fnet"),xht.forEach(t),kGo=r(t$e," \u2014 "),lV=n(t$e,"A",{href:!0});var $ht=s(lV);SGo=r($ht,"FNetForTokenClassification"),$ht.forEach(t),RGo=r(t$e," (FNet model)"),t$e.forEach(t),PGo=i(J),G4=n(J,"LI",{});var a$e=s(G4);hhe=n(a$e,"STRONG",{});var kht=s(hhe);BGo=r(kht,"funnel"),kht.forEach(t),IGo=r(a$e," \u2014 "),iV=n(a$e,"A",{href:!0});var Sht=s(iV);NGo=r(Sht,"FunnelForTokenClassification"),Sht.forEach(t),qGo=r(a$e," (Funnel Transformer model)"),a$e.forEach(t),jGo=i(J),O4=n(J,"LI",{});var n$e=s(O4);phe=n(n$e,"STRONG",{});var Rht=s(phe);DGo=r(Rht,"gpt2"),Rht.forEach(t),GGo=r(n$e," \u2014 "),dV=n(n$e,"A",{href:!0});var Pht=s(dV);OGo=r(Pht,"GPT2ForTokenClassification"),Pht.forEach(t),VGo=r(n$e," (OpenAI GPT-2 model)"),n$e.forEach(t),XGo=i(J),V4=n(J,"LI",{});var s$e=s(V4);_he=n(s$e,"STRONG",{});var Bht=s(_he);zGo=r(Bht,"ibert"),Bht.forEach(t),WGo=r(s$e," \u2014 "),cV=n(s$e,"A",{href:!0});var Iht=s(cV);QGo=r(Iht,"IBertForTokenClassification"),Iht.forEach(t),HGo=r(s$e," (I-BERT model)"),s$e.forEach(t),UGo=i(J),X4=n(J,"LI",{});var l$e=s(X4);uhe=n(l$e,"STRONG",{});var Nht=s(uhe);JGo=r(Nht,"layoutlm"),Nht.forEach(t),YGo=r(l$e," \u2014 "),fV=n(l$e,"A",{href:!0});var qht=s(fV);KGo=r(qht,"LayoutLMForTokenClassification"),qht.forEach(t),ZGo=r(l$e," (LayoutLM model)"),l$e.forEach(t),eOo=i(J),z4=n(J,"LI",{});var i$e=s(z4);bhe=n(i$e,"STRONG",{});var jht=s(bhe);oOo=r(jht,"layoutlmv2"),jht.forEach(t),rOo=r(i$e," \u2014 "),mV=n(i$e,"A",{href:!0});var Dht=s(mV);tOo=r(Dht,"LayoutLMv2ForTokenClassification"),Dht.forEach(t),aOo=r(i$e," (LayoutLMv2 model)"),i$e.forEach(t),nOo=i(J),W4=n(J,"LI",{});var d$e=s(W4);vhe=n(d$e,"STRONG",{});var Ght=s(vhe);sOo=r(Ght,"layoutlmv3"),Ght.forEach(t),lOo=r(d$e," \u2014 "),gV=n(d$e,"A",{href:!0});var Oht=s(gV);iOo=r(Oht,"LayoutLMv3ForTokenClassification"),Oht.forEach(t),dOo=r(d$e," (LayoutLMv3 model)"),d$e.forEach(t),cOo=i(J),Q4=n(J,"LI",{});var c$e=s(Q4);Fhe=n(c$e,"STRONG",{});var Vht=s(Fhe);fOo=r(Vht,"longformer"),Vht.forEach(t),mOo=r(c$e," \u2014 "),hV=n(c$e,"A",{href:!0});var Xht=s(hV);gOo=r(Xht,"LongformerForTokenClassification"),Xht.forEach(t),hOo=r(c$e," (Longformer model)"),c$e.forEach(t),pOo=i(J),H4=n(J,"LI",{});var f$e=s(H4);The=n(f$e,"STRONG",{});var zht=s(The);_Oo=r(zht,"megatron-bert"),zht.forEach(t),uOo=r(f$e," \u2014 "),pV=n(f$e,"A",{href:!0});var Wht=s(pV);bOo=r(Wht,"MegatronBertForTokenClassification"),Wht.forEach(t),vOo=r(f$e," (MegatronBert model)"),f$e.forEach(t),FOo=i(J),U4=n(J,"LI",{});var m$e=s(U4);Mhe=n(m$e,"STRONG",{});var Qht=s(Mhe);TOo=r(Qht,"mobilebert"),Qht.forEach(t),MOo=r(m$e," \u2014 "),_V=n(m$e,"A",{href:!0});var Hht=s(_V);EOo=r(Hht,"MobileBertForTokenClassification"),Hht.forEach(t),COo=r(m$e," (MobileBERT model)"),m$e.forEach(t),wOo=i(J),J4=n(J,"LI",{});var g$e=s(J4);Ehe=n(g$e,"STRONG",{});var Uht=s(Ehe);AOo=r(Uht,"mpnet"),Uht.forEach(t),yOo=r(g$e," \u2014 "),uV=n(g$e,"A",{href:!0});var Jht=s(uV);LOo=r(Jht,"MPNetForTokenClassification"),Jht.forEach(t),xOo=r(g$e," (MPNet model)"),g$e.forEach(t),$Oo=i(J),Y4=n(J,"LI",{});var h$e=s(Y4);Che=n(h$e,"STRONG",{});var Yht=s(Che);kOo=r(Yht,"nystromformer"),Yht.forEach(t),SOo=r(h$e," \u2014 "),bV=n(h$e,"A",{href:!0});var Kht=s(bV);ROo=r(Kht,"NystromformerForTokenClassification"),Kht.forEach(t),POo=r(h$e," (Nystromformer model)"),h$e.forEach(t),BOo=i(J),K4=n(J,"LI",{});var p$e=s(K4);whe=n(p$e,"STRONG",{});var Zht=s(whe);IOo=r(Zht,"qdqbert"),Zht.forEach(t),NOo=r(p$e," \u2014 "),vV=n(p$e,"A",{href:!0});var ept=s(vV);qOo=r(ept,"QDQBertForTokenClassification"),ept.forEach(t),jOo=r(p$e," (QDQBert model)"),p$e.forEach(t),DOo=i(J),Z4=n(J,"LI",{});var _$e=s(Z4);Ahe=n(_$e,"STRONG",{});var opt=s(Ahe);GOo=r(opt,"rembert"),opt.forEach(t),OOo=r(_$e," \u2014 "),FV=n(_$e,"A",{href:!0});var rpt=s(FV);VOo=r(rpt,"RemBertForTokenClassification"),rpt.forEach(t),XOo=r(_$e," (RemBERT model)"),_$e.forEach(t),zOo=i(J),e5=n(J,"LI",{});var u$e=s(e5);yhe=n(u$e,"STRONG",{});var tpt=s(yhe);WOo=r(tpt,"roberta"),tpt.forEach(t),QOo=r(u$e," \u2014 "),TV=n(u$e,"A",{href:!0});var apt=s(TV);HOo=r(apt,"RobertaForTokenClassification"),apt.forEach(t),UOo=r(u$e," (RoBERTa model)"),u$e.forEach(t),JOo=i(J),o5=n(J,"LI",{});var b$e=s(o5);Lhe=n(b$e,"STRONG",{});var npt=s(Lhe);YOo=r(npt,"roformer"),npt.forEach(t),KOo=r(b$e," \u2014 "),MV=n(b$e,"A",{href:!0});var spt=s(MV);ZOo=r(spt,"RoFormerForTokenClassification"),spt.forEach(t),eVo=r(b$e," (RoFormer model)"),b$e.forEach(t),oVo=i(J),r5=n(J,"LI",{});var v$e=s(r5);xhe=n(v$e,"STRONG",{});var lpt=s(xhe);rVo=r(lpt,"squeezebert"),lpt.forEach(t),tVo=r(v$e," \u2014 "),EV=n(v$e,"A",{href:!0});var ipt=s(EV);aVo=r(ipt,"SqueezeBertForTokenClassification"),ipt.forEach(t),nVo=r(v$e," (SqueezeBERT model)"),v$e.forEach(t),sVo=i(J),t5=n(J,"LI",{});var F$e=s(t5);$he=n(F$e,"STRONG",{});var dpt=s($he);lVo=r(dpt,"xlm"),dpt.forEach(t),iVo=r(F$e," \u2014 "),CV=n(F$e,"A",{href:!0});var cpt=s(CV);dVo=r(cpt,"XLMForTokenClassification"),cpt.forEach(t),cVo=r(F$e," (XLM model)"),F$e.forEach(t),fVo=i(J),a5=n(J,"LI",{});var T$e=s(a5);khe=n(T$e,"STRONG",{});var fpt=s(khe);mVo=r(fpt,"xlm-roberta"),fpt.forEach(t),gVo=r(T$e," \u2014 "),wV=n(T$e,"A",{href:!0});var mpt=s(wV);hVo=r(mpt,"XLMRobertaForTokenClassification"),mpt.forEach(t),pVo=r(T$e," (XLM-RoBERTa model)"),T$e.forEach(t),_Vo=i(J),n5=n(J,"LI",{});var M$e=s(n5);She=n(M$e,"STRONG",{});var gpt=s(She);uVo=r(gpt,"xlm-roberta-xl"),gpt.forEach(t),bVo=r(M$e," \u2014 "),AV=n(M$e,"A",{href:!0});var hpt=s(AV);vVo=r(hpt,"XLMRobertaXLForTokenClassification"),hpt.forEach(t),FVo=r(M$e," (XLM-RoBERTa-XL model)"),M$e.forEach(t),TVo=i(J),s5=n(J,"LI",{});var E$e=s(s5);Rhe=n(E$e,"STRONG",{});var ppt=s(Rhe);MVo=r(ppt,"xlnet"),ppt.forEach(t),EVo=r(E$e," \u2014 "),yV=n(E$e,"A",{href:!0});var _pt=s(yV);CVo=r(_pt,"XLNetForTokenClassification"),_pt.forEach(t),wVo=r(E$e," (XLNet model)"),E$e.forEach(t),AVo=i(J),l5=n(J,"LI",{});var C$e=s(l5);Phe=n(C$e,"STRONG",{});var upt=s(Phe);yVo=r(upt,"yoso"),upt.forEach(t),LVo=r(C$e," \u2014 "),LV=n(C$e,"A",{href:!0});var bpt=s(LV);xVo=r(bpt,"YosoForTokenClassification"),bpt.forEach(t),$Vo=r(C$e," (YOSO model)"),C$e.forEach(t),J.forEach(t),kVo=i(da),i5=n(da,"P",{});var w$e=s(i5);SVo=r(w$e,"The model is set in evaluation mode by default using "),Bhe=n(w$e,"CODE",{});var vpt=s(Bhe);RVo=r(vpt,"model.eval()"),vpt.forEach(t),PVo=r(w$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ihe=n(w$e,"CODE",{});var Fpt=s(Ihe);BVo=r(Fpt,"model.train()"),Fpt.forEach(t),w$e.forEach(t),IVo=i(da),T(d5.$$.fragment,da),da.forEach(t),Js.forEach(t),zqe=i(f),Ki=n(f,"H2",{class:!0});var UDe=s(Ki);c5=n(UDe,"A",{id:!0,class:!0,href:!0});var Tpt=s(c5);Nhe=n(Tpt,"SPAN",{});var Mpt=s(Nhe);T(HA.$$.fragment,Mpt),Mpt.forEach(t),Tpt.forEach(t),NVo=i(UDe),qhe=n(UDe,"SPAN",{});var Ept=s(qhe);qVo=r(Ept,"AutoModelForQuestionAnswering"),Ept.forEach(t),UDe.forEach(t),Wqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(UA.$$.fragment,Ys),jVo=i(Ys),Zi=n(Ys,"P",{});var GZ=s(Zi);DVo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xV=n(GZ,"A",{href:!0});var Cpt=s(xV);GVo=r(Cpt,"from_pretrained()"),Cpt.forEach(t),OVo=r(GZ," class method or the "),$V=n(GZ,"A",{href:!0});var wpt=s($V);VVo=r(wpt,"from_config()"),wpt.forEach(t),XVo=r(GZ,` class
method.`),GZ.forEach(t),zVo=i(Ys),JA=n(Ys,"P",{});var JDe=s(JA);WVo=r(JDe,"This class cannot be instantiated directly using "),jhe=n(JDe,"CODE",{});var Apt=s(jhe);QVo=r(Apt,"__init__()"),Apt.forEach(t),HVo=r(JDe," (throws an error)."),JDe.forEach(t),UVo=i(Ys),mt=n(Ys,"DIV",{class:!0});var Zw=s(mt);T(YA.$$.fragment,Zw),JVo=i(Zw),Dhe=n(Zw,"P",{});var ypt=s(Dhe);YVo=r(ypt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ypt.forEach(t),KVo=i(Zw),ed=n(Zw,"P",{});var OZ=s(ed);ZVo=r(OZ,`Note:
Loading a model from its configuration file does `),Ghe=n(OZ,"STRONG",{});var Lpt=s(Ghe);eXo=r(Lpt,"not"),Lpt.forEach(t),oXo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=n(OZ,"A",{href:!0});var xpt=s(kV);rXo=r(xpt,"from_pretrained()"),xpt.forEach(t),tXo=r(OZ," to load the model weights."),OZ.forEach(t),aXo=i(Zw),T(f5.$$.fragment,Zw),Zw.forEach(t),nXo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(KA.$$.fragment,ca),sXo=i(ca),Ohe=n(ca,"P",{});var $pt=s(Ohe);lXo=r($pt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$pt.forEach(t),iXo=i(ca),Na=n(ca,"P",{});var e0=s(Na);dXo=r(e0,"The model class to instantiate is selected based on the "),Vhe=n(e0,"CODE",{});var kpt=s(Vhe);cXo=r(kpt,"model_type"),kpt.forEach(t),fXo=r(e0,` property of the config object (either
passed as an argument or loaded from `),Xhe=n(e0,"CODE",{});var Spt=s(Xhe);mXo=r(Spt,"pretrained_model_name_or_path"),Spt.forEach(t),gXo=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zhe=n(e0,"CODE",{});var Rpt=s(zhe);hXo=r(Rpt,"pretrained_model_name_or_path"),Rpt.forEach(t),pXo=r(e0,":"),e0.forEach(t),_Xo=i(ca),V=n(ca,"UL",{});var X=s(V);m5=n(X,"LI",{});var A$e=s(m5);Whe=n(A$e,"STRONG",{});var Ppt=s(Whe);uXo=r(Ppt,"albert"),Ppt.forEach(t),bXo=r(A$e," \u2014 "),SV=n(A$e,"A",{href:!0});var Bpt=s(SV);vXo=r(Bpt,"AlbertForQuestionAnswering"),Bpt.forEach(t),FXo=r(A$e," (ALBERT model)"),A$e.forEach(t),TXo=i(X),g5=n(X,"LI",{});var y$e=s(g5);Qhe=n(y$e,"STRONG",{});var Ipt=s(Qhe);MXo=r(Ipt,"bart"),Ipt.forEach(t),EXo=r(y$e," \u2014 "),RV=n(y$e,"A",{href:!0});var Npt=s(RV);CXo=r(Npt,"BartForQuestionAnswering"),Npt.forEach(t),wXo=r(y$e," (BART model)"),y$e.forEach(t),AXo=i(X),h5=n(X,"LI",{});var L$e=s(h5);Hhe=n(L$e,"STRONG",{});var qpt=s(Hhe);yXo=r(qpt,"bert"),qpt.forEach(t),LXo=r(L$e," \u2014 "),PV=n(L$e,"A",{href:!0});var jpt=s(PV);xXo=r(jpt,"BertForQuestionAnswering"),jpt.forEach(t),$Xo=r(L$e," (BERT model)"),L$e.forEach(t),kXo=i(X),p5=n(X,"LI",{});var x$e=s(p5);Uhe=n(x$e,"STRONG",{});var Dpt=s(Uhe);SXo=r(Dpt,"big_bird"),Dpt.forEach(t),RXo=r(x$e," \u2014 "),BV=n(x$e,"A",{href:!0});var Gpt=s(BV);PXo=r(Gpt,"BigBirdForQuestionAnswering"),Gpt.forEach(t),BXo=r(x$e," (BigBird model)"),x$e.forEach(t),IXo=i(X),_5=n(X,"LI",{});var $$e=s(_5);Jhe=n($$e,"STRONG",{});var Opt=s(Jhe);NXo=r(Opt,"bigbird_pegasus"),Opt.forEach(t),qXo=r($$e," \u2014 "),IV=n($$e,"A",{href:!0});var Vpt=s(IV);jXo=r(Vpt,"BigBirdPegasusForQuestionAnswering"),Vpt.forEach(t),DXo=r($$e," (BigBirdPegasus model)"),$$e.forEach(t),GXo=i(X),u5=n(X,"LI",{});var k$e=s(u5);Yhe=n(k$e,"STRONG",{});var Xpt=s(Yhe);OXo=r(Xpt,"camembert"),Xpt.forEach(t),VXo=r(k$e," \u2014 "),NV=n(k$e,"A",{href:!0});var zpt=s(NV);XXo=r(zpt,"CamembertForQuestionAnswering"),zpt.forEach(t),zXo=r(k$e," (CamemBERT model)"),k$e.forEach(t),WXo=i(X),b5=n(X,"LI",{});var S$e=s(b5);Khe=n(S$e,"STRONG",{});var Wpt=s(Khe);QXo=r(Wpt,"canine"),Wpt.forEach(t),HXo=r(S$e," \u2014 "),qV=n(S$e,"A",{href:!0});var Qpt=s(qV);UXo=r(Qpt,"CanineForQuestionAnswering"),Qpt.forEach(t),JXo=r(S$e," (Canine model)"),S$e.forEach(t),YXo=i(X),v5=n(X,"LI",{});var R$e=s(v5);Zhe=n(R$e,"STRONG",{});var Hpt=s(Zhe);KXo=r(Hpt,"convbert"),Hpt.forEach(t),ZXo=r(R$e," \u2014 "),jV=n(R$e,"A",{href:!0});var Upt=s(jV);ezo=r(Upt,"ConvBertForQuestionAnswering"),Upt.forEach(t),ozo=r(R$e," (ConvBERT model)"),R$e.forEach(t),rzo=i(X),F5=n(X,"LI",{});var P$e=s(F5);epe=n(P$e,"STRONG",{});var Jpt=s(epe);tzo=r(Jpt,"data2vec-text"),Jpt.forEach(t),azo=r(P$e," \u2014 "),DV=n(P$e,"A",{href:!0});var Ypt=s(DV);nzo=r(Ypt,"Data2VecTextForQuestionAnswering"),Ypt.forEach(t),szo=r(P$e," (Data2VecText model)"),P$e.forEach(t),lzo=i(X),T5=n(X,"LI",{});var B$e=s(T5);ope=n(B$e,"STRONG",{});var Kpt=s(ope);izo=r(Kpt,"deberta"),Kpt.forEach(t),dzo=r(B$e," \u2014 "),GV=n(B$e,"A",{href:!0});var Zpt=s(GV);czo=r(Zpt,"DebertaForQuestionAnswering"),Zpt.forEach(t),fzo=r(B$e," (DeBERTa model)"),B$e.forEach(t),mzo=i(X),M5=n(X,"LI",{});var I$e=s(M5);rpe=n(I$e,"STRONG",{});var e_t=s(rpe);gzo=r(e_t,"deberta-v2"),e_t.forEach(t),hzo=r(I$e," \u2014 "),OV=n(I$e,"A",{href:!0});var o_t=s(OV);pzo=r(o_t,"DebertaV2ForQuestionAnswering"),o_t.forEach(t),_zo=r(I$e," (DeBERTa-v2 model)"),I$e.forEach(t),uzo=i(X),E5=n(X,"LI",{});var N$e=s(E5);tpe=n(N$e,"STRONG",{});var r_t=s(tpe);bzo=r(r_t,"distilbert"),r_t.forEach(t),vzo=r(N$e," \u2014 "),VV=n(N$e,"A",{href:!0});var t_t=s(VV);Fzo=r(t_t,"DistilBertForQuestionAnswering"),t_t.forEach(t),Tzo=r(N$e," (DistilBERT model)"),N$e.forEach(t),Mzo=i(X),C5=n(X,"LI",{});var q$e=s(C5);ape=n(q$e,"STRONG",{});var a_t=s(ape);Ezo=r(a_t,"electra"),a_t.forEach(t),Czo=r(q$e," \u2014 "),XV=n(q$e,"A",{href:!0});var n_t=s(XV);wzo=r(n_t,"ElectraForQuestionAnswering"),n_t.forEach(t),Azo=r(q$e," (ELECTRA model)"),q$e.forEach(t),yzo=i(X),w5=n(X,"LI",{});var j$e=s(w5);npe=n(j$e,"STRONG",{});var s_t=s(npe);Lzo=r(s_t,"flaubert"),s_t.forEach(t),xzo=r(j$e," \u2014 "),zV=n(j$e,"A",{href:!0});var l_t=s(zV);$zo=r(l_t,"FlaubertForQuestionAnsweringSimple"),l_t.forEach(t),kzo=r(j$e," (FlauBERT model)"),j$e.forEach(t),Szo=i(X),A5=n(X,"LI",{});var D$e=s(A5);spe=n(D$e,"STRONG",{});var i_t=s(spe);Rzo=r(i_t,"fnet"),i_t.forEach(t),Pzo=r(D$e," \u2014 "),WV=n(D$e,"A",{href:!0});var d_t=s(WV);Bzo=r(d_t,"FNetForQuestionAnswering"),d_t.forEach(t),Izo=r(D$e," (FNet model)"),D$e.forEach(t),Nzo=i(X),y5=n(X,"LI",{});var G$e=s(y5);lpe=n(G$e,"STRONG",{});var c_t=s(lpe);qzo=r(c_t,"funnel"),c_t.forEach(t),jzo=r(G$e," \u2014 "),QV=n(G$e,"A",{href:!0});var f_t=s(QV);Dzo=r(f_t,"FunnelForQuestionAnswering"),f_t.forEach(t),Gzo=r(G$e," (Funnel Transformer model)"),G$e.forEach(t),Ozo=i(X),L5=n(X,"LI",{});var O$e=s(L5);ipe=n(O$e,"STRONG",{});var m_t=s(ipe);Vzo=r(m_t,"gptj"),m_t.forEach(t),Xzo=r(O$e," \u2014 "),HV=n(O$e,"A",{href:!0});var g_t=s(HV);zzo=r(g_t,"GPTJForQuestionAnswering"),g_t.forEach(t),Wzo=r(O$e," (GPT-J model)"),O$e.forEach(t),Qzo=i(X),x5=n(X,"LI",{});var V$e=s(x5);dpe=n(V$e,"STRONG",{});var h_t=s(dpe);Hzo=r(h_t,"ibert"),h_t.forEach(t),Uzo=r(V$e," \u2014 "),UV=n(V$e,"A",{href:!0});var p_t=s(UV);Jzo=r(p_t,"IBertForQuestionAnswering"),p_t.forEach(t),Yzo=r(V$e," (I-BERT model)"),V$e.forEach(t),Kzo=i(X),$5=n(X,"LI",{});var X$e=s($5);cpe=n(X$e,"STRONG",{});var __t=s(cpe);Zzo=r(__t,"layoutlmv2"),__t.forEach(t),eWo=r(X$e," \u2014 "),JV=n(X$e,"A",{href:!0});var u_t=s(JV);oWo=r(u_t,"LayoutLMv2ForQuestionAnswering"),u_t.forEach(t),rWo=r(X$e," (LayoutLMv2 model)"),X$e.forEach(t),tWo=i(X),k5=n(X,"LI",{});var z$e=s(k5);fpe=n(z$e,"STRONG",{});var b_t=s(fpe);aWo=r(b_t,"layoutlmv3"),b_t.forEach(t),nWo=r(z$e," \u2014 "),YV=n(z$e,"A",{href:!0});var v_t=s(YV);sWo=r(v_t,"LayoutLMv3ForQuestionAnswering"),v_t.forEach(t),lWo=r(z$e," (LayoutLMv3 model)"),z$e.forEach(t),iWo=i(X),S5=n(X,"LI",{});var W$e=s(S5);mpe=n(W$e,"STRONG",{});var F_t=s(mpe);dWo=r(F_t,"led"),F_t.forEach(t),cWo=r(W$e," \u2014 "),KV=n(W$e,"A",{href:!0});var T_t=s(KV);fWo=r(T_t,"LEDForQuestionAnswering"),T_t.forEach(t),mWo=r(W$e," (LED model)"),W$e.forEach(t),gWo=i(X),R5=n(X,"LI",{});var Q$e=s(R5);gpe=n(Q$e,"STRONG",{});var M_t=s(gpe);hWo=r(M_t,"longformer"),M_t.forEach(t),pWo=r(Q$e," \u2014 "),ZV=n(Q$e,"A",{href:!0});var E_t=s(ZV);_Wo=r(E_t,"LongformerForQuestionAnswering"),E_t.forEach(t),uWo=r(Q$e," (Longformer model)"),Q$e.forEach(t),bWo=i(X),P5=n(X,"LI",{});var H$e=s(P5);hpe=n(H$e,"STRONG",{});var C_t=s(hpe);vWo=r(C_t,"lxmert"),C_t.forEach(t),FWo=r(H$e," \u2014 "),eX=n(H$e,"A",{href:!0});var w_t=s(eX);TWo=r(w_t,"LxmertForQuestionAnswering"),w_t.forEach(t),MWo=r(H$e," (LXMERT model)"),H$e.forEach(t),EWo=i(X),B5=n(X,"LI",{});var U$e=s(B5);ppe=n(U$e,"STRONG",{});var A_t=s(ppe);CWo=r(A_t,"mbart"),A_t.forEach(t),wWo=r(U$e," \u2014 "),oX=n(U$e,"A",{href:!0});var y_t=s(oX);AWo=r(y_t,"MBartForQuestionAnswering"),y_t.forEach(t),yWo=r(U$e," (mBART model)"),U$e.forEach(t),LWo=i(X),I5=n(X,"LI",{});var J$e=s(I5);_pe=n(J$e,"STRONG",{});var L_t=s(_pe);xWo=r(L_t,"megatron-bert"),L_t.forEach(t),$Wo=r(J$e," \u2014 "),rX=n(J$e,"A",{href:!0});var x_t=s(rX);kWo=r(x_t,"MegatronBertForQuestionAnswering"),x_t.forEach(t),SWo=r(J$e," (MegatronBert model)"),J$e.forEach(t),RWo=i(X),N5=n(X,"LI",{});var Y$e=s(N5);upe=n(Y$e,"STRONG",{});var $_t=s(upe);PWo=r($_t,"mobilebert"),$_t.forEach(t),BWo=r(Y$e," \u2014 "),tX=n(Y$e,"A",{href:!0});var k_t=s(tX);IWo=r(k_t,"MobileBertForQuestionAnswering"),k_t.forEach(t),NWo=r(Y$e," (MobileBERT model)"),Y$e.forEach(t),qWo=i(X),q5=n(X,"LI",{});var K$e=s(q5);bpe=n(K$e,"STRONG",{});var S_t=s(bpe);jWo=r(S_t,"mpnet"),S_t.forEach(t),DWo=r(K$e," \u2014 "),aX=n(K$e,"A",{href:!0});var R_t=s(aX);GWo=r(R_t,"MPNetForQuestionAnswering"),R_t.forEach(t),OWo=r(K$e," (MPNet model)"),K$e.forEach(t),VWo=i(X),j5=n(X,"LI",{});var Z$e=s(j5);vpe=n(Z$e,"STRONG",{});var P_t=s(vpe);XWo=r(P_t,"nystromformer"),P_t.forEach(t),zWo=r(Z$e," \u2014 "),nX=n(Z$e,"A",{href:!0});var B_t=s(nX);WWo=r(B_t,"NystromformerForQuestionAnswering"),B_t.forEach(t),QWo=r(Z$e," (Nystromformer model)"),Z$e.forEach(t),HWo=i(X),D5=n(X,"LI",{});var eke=s(D5);Fpe=n(eke,"STRONG",{});var I_t=s(Fpe);UWo=r(I_t,"qdqbert"),I_t.forEach(t),JWo=r(eke," \u2014 "),sX=n(eke,"A",{href:!0});var N_t=s(sX);YWo=r(N_t,"QDQBertForQuestionAnswering"),N_t.forEach(t),KWo=r(eke," (QDQBert model)"),eke.forEach(t),ZWo=i(X),G5=n(X,"LI",{});var oke=s(G5);Tpe=n(oke,"STRONG",{});var q_t=s(Tpe);eQo=r(q_t,"reformer"),q_t.forEach(t),oQo=r(oke," \u2014 "),lX=n(oke,"A",{href:!0});var j_t=s(lX);rQo=r(j_t,"ReformerForQuestionAnswering"),j_t.forEach(t),tQo=r(oke," (Reformer model)"),oke.forEach(t),aQo=i(X),O5=n(X,"LI",{});var rke=s(O5);Mpe=n(rke,"STRONG",{});var D_t=s(Mpe);nQo=r(D_t,"rembert"),D_t.forEach(t),sQo=r(rke," \u2014 "),iX=n(rke,"A",{href:!0});var G_t=s(iX);lQo=r(G_t,"RemBertForQuestionAnswering"),G_t.forEach(t),iQo=r(rke," (RemBERT model)"),rke.forEach(t),dQo=i(X),V5=n(X,"LI",{});var tke=s(V5);Epe=n(tke,"STRONG",{});var O_t=s(Epe);cQo=r(O_t,"roberta"),O_t.forEach(t),fQo=r(tke," \u2014 "),dX=n(tke,"A",{href:!0});var V_t=s(dX);mQo=r(V_t,"RobertaForQuestionAnswering"),V_t.forEach(t),gQo=r(tke," (RoBERTa model)"),tke.forEach(t),hQo=i(X),X5=n(X,"LI",{});var ake=s(X5);Cpe=n(ake,"STRONG",{});var X_t=s(Cpe);pQo=r(X_t,"roformer"),X_t.forEach(t),_Qo=r(ake," \u2014 "),cX=n(ake,"A",{href:!0});var z_t=s(cX);uQo=r(z_t,"RoFormerForQuestionAnswering"),z_t.forEach(t),bQo=r(ake," (RoFormer model)"),ake.forEach(t),vQo=i(X),z5=n(X,"LI",{});var nke=s(z5);wpe=n(nke,"STRONG",{});var W_t=s(wpe);FQo=r(W_t,"splinter"),W_t.forEach(t),TQo=r(nke," \u2014 "),fX=n(nke,"A",{href:!0});var Q_t=s(fX);MQo=r(Q_t,"SplinterForQuestionAnswering"),Q_t.forEach(t),EQo=r(nke," (Splinter model)"),nke.forEach(t),CQo=i(X),W5=n(X,"LI",{});var ske=s(W5);Ape=n(ske,"STRONG",{});var H_t=s(Ape);wQo=r(H_t,"squeezebert"),H_t.forEach(t),AQo=r(ske," \u2014 "),mX=n(ske,"A",{href:!0});var U_t=s(mX);yQo=r(U_t,"SqueezeBertForQuestionAnswering"),U_t.forEach(t),LQo=r(ske," (SqueezeBERT model)"),ske.forEach(t),xQo=i(X),Q5=n(X,"LI",{});var lke=s(Q5);ype=n(lke,"STRONG",{});var J_t=s(ype);$Qo=r(J_t,"xlm"),J_t.forEach(t),kQo=r(lke," \u2014 "),gX=n(lke,"A",{href:!0});var Y_t=s(gX);SQo=r(Y_t,"XLMForQuestionAnsweringSimple"),Y_t.forEach(t),RQo=r(lke," (XLM model)"),lke.forEach(t),PQo=i(X),H5=n(X,"LI",{});var ike=s(H5);Lpe=n(ike,"STRONG",{});var K_t=s(Lpe);BQo=r(K_t,"xlm-roberta"),K_t.forEach(t),IQo=r(ike," \u2014 "),hX=n(ike,"A",{href:!0});var Z_t=s(hX);NQo=r(Z_t,"XLMRobertaForQuestionAnswering"),Z_t.forEach(t),qQo=r(ike," (XLM-RoBERTa model)"),ike.forEach(t),jQo=i(X),U5=n(X,"LI",{});var dke=s(U5);xpe=n(dke,"STRONG",{});var eut=s(xpe);DQo=r(eut,"xlm-roberta-xl"),eut.forEach(t),GQo=r(dke," \u2014 "),pX=n(dke,"A",{href:!0});var out=s(pX);OQo=r(out,"XLMRobertaXLForQuestionAnswering"),out.forEach(t),VQo=r(dke," (XLM-RoBERTa-XL model)"),dke.forEach(t),XQo=i(X),J5=n(X,"LI",{});var cke=s(J5);$pe=n(cke,"STRONG",{});var rut=s($pe);zQo=r(rut,"xlnet"),rut.forEach(t),WQo=r(cke," \u2014 "),_X=n(cke,"A",{href:!0});var tut=s(_X);QQo=r(tut,"XLNetForQuestionAnsweringSimple"),tut.forEach(t),HQo=r(cke," (XLNet model)"),cke.forEach(t),UQo=i(X),Y5=n(X,"LI",{});var fke=s(Y5);kpe=n(fke,"STRONG",{});var aut=s(kpe);JQo=r(aut,"yoso"),aut.forEach(t),YQo=r(fke," \u2014 "),uX=n(fke,"A",{href:!0});var nut=s(uX);KQo=r(nut,"YosoForQuestionAnswering"),nut.forEach(t),ZQo=r(fke," (YOSO model)"),fke.forEach(t),X.forEach(t),eHo=i(ca),K5=n(ca,"P",{});var mke=s(K5);oHo=r(mke,"The model is set in evaluation mode by default using "),Spe=n(mke,"CODE",{});var sut=s(Spe);rHo=r(sut,"model.eval()"),sut.forEach(t),tHo=r(mke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=n(mke,"CODE",{});var lut=s(Rpe);aHo=r(lut,"model.train()"),lut.forEach(t),mke.forEach(t),nHo=i(ca),T(Z5.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),Qqe=i(f),od=n(f,"H2",{class:!0});var YDe=s(od);ev=n(YDe,"A",{id:!0,class:!0,href:!0});var iut=s(ev);Ppe=n(iut,"SPAN",{});var dut=s(Ppe);T(ZA.$$.fragment,dut),dut.forEach(t),iut.forEach(t),sHo=i(YDe),Bpe=n(YDe,"SPAN",{});var cut=s(Bpe);lHo=r(cut,"AutoModelForTableQuestionAnswering"),cut.forEach(t),YDe.forEach(t),Hqe=i(f),qo=n(f,"DIV",{class:!0});var Ks=s(qo);T(ey.$$.fragment,Ks),iHo=i(Ks),rd=n(Ks,"P",{});var VZ=s(rd);dHo=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bX=n(VZ,"A",{href:!0});var fut=s(bX);cHo=r(fut,"from_pretrained()"),fut.forEach(t),fHo=r(VZ," class method or the "),vX=n(VZ,"A",{href:!0});var mut=s(vX);mHo=r(mut,"from_config()"),mut.forEach(t),gHo=r(VZ,` class
method.`),VZ.forEach(t),hHo=i(Ks),oy=n(Ks,"P",{});var KDe=s(oy);pHo=r(KDe,"This class cannot be instantiated directly using "),Ipe=n(KDe,"CODE",{});var gut=s(Ipe);_Ho=r(gut,"__init__()"),gut.forEach(t),uHo=r(KDe," (throws an error)."),KDe.forEach(t),bHo=i(Ks),gt=n(Ks,"DIV",{class:!0});var o0=s(gt);T(ry.$$.fragment,o0),vHo=i(o0),Npe=n(o0,"P",{});var hut=s(Npe);FHo=r(hut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hut.forEach(t),THo=i(o0),td=n(o0,"P",{});var XZ=s(td);MHo=r(XZ,`Note:
Loading a model from its configuration file does `),qpe=n(XZ,"STRONG",{});var put=s(qpe);EHo=r(put,"not"),put.forEach(t),CHo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(XZ,"A",{href:!0});var _ut=s(FX);wHo=r(_ut,"from_pretrained()"),_ut.forEach(t),AHo=r(XZ," to load the model weights."),XZ.forEach(t),yHo=i(o0),T(ov.$$.fragment,o0),o0.forEach(t),LHo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(ty.$$.fragment,fa),xHo=i(fa),jpe=n(fa,"P",{});var uut=s(jpe);$Ho=r(uut,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),uut.forEach(t),kHo=i(fa),qa=n(fa,"P",{});var r0=s(qa);SHo=r(r0,"The model class to instantiate is selected based on the "),Dpe=n(r0,"CODE",{});var but=s(Dpe);RHo=r(but,"model_type"),but.forEach(t),PHo=r(r0,` property of the config object (either
passed as an argument or loaded from `),Gpe=n(r0,"CODE",{});var vut=s(Gpe);BHo=r(vut,"pretrained_model_name_or_path"),vut.forEach(t),IHo=r(r0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=n(r0,"CODE",{});var Fut=s(Ope);NHo=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),qHo=r(r0,":"),r0.forEach(t),jHo=i(fa),Vpe=n(fa,"UL",{});var Tut=s(Vpe);rv=n(Tut,"LI",{});var gke=s(rv);Xpe=n(gke,"STRONG",{});var Mut=s(Xpe);DHo=r(Mut,"tapas"),Mut.forEach(t),GHo=r(gke," \u2014 "),TX=n(gke,"A",{href:!0});var Eut=s(TX);OHo=r(Eut,"TapasForQuestionAnswering"),Eut.forEach(t),VHo=r(gke," (TAPAS model)"),gke.forEach(t),Tut.forEach(t),XHo=i(fa),tv=n(fa,"P",{});var hke=s(tv);zHo=r(hke,"The model is set in evaluation mode by default using "),zpe=n(hke,"CODE",{});var Cut=s(zpe);WHo=r(Cut,"model.eval()"),Cut.forEach(t),QHo=r(hke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=n(hke,"CODE",{});var wut=s(Wpe);HHo=r(wut,"model.train()"),wut.forEach(t),hke.forEach(t),UHo=i(fa),T(av.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),Uqe=i(f),ad=n(f,"H2",{class:!0});var ZDe=s(ad);nv=n(ZDe,"A",{id:!0,class:!0,href:!0});var Aut=s(nv);Qpe=n(Aut,"SPAN",{});var yut=s(Qpe);T(ay.$$.fragment,yut),yut.forEach(t),Aut.forEach(t),JHo=i(ZDe),Hpe=n(ZDe,"SPAN",{});var Lut=s(Hpe);YHo=r(Lut,"AutoModelForImageClassification"),Lut.forEach(t),ZDe.forEach(t),Jqe=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(ny.$$.fragment,Zs),KHo=i(Zs),nd=n(Zs,"P",{});var zZ=s(nd);ZHo=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),MX=n(zZ,"A",{href:!0});var xut=s(MX);eUo=r(xut,"from_pretrained()"),xut.forEach(t),oUo=r(zZ," class method or the "),EX=n(zZ,"A",{href:!0});var $ut=s(EX);rUo=r($ut,"from_config()"),$ut.forEach(t),tUo=r(zZ,` class
method.`),zZ.forEach(t),aUo=i(Zs),sy=n(Zs,"P",{});var eGe=s(sy);nUo=r(eGe,"This class cannot be instantiated directly using "),Upe=n(eGe,"CODE",{});var kut=s(Upe);sUo=r(kut,"__init__()"),kut.forEach(t),lUo=r(eGe," (throws an error)."),eGe.forEach(t),iUo=i(Zs),ht=n(Zs,"DIV",{class:!0});var t0=s(ht);T(ly.$$.fragment,t0),dUo=i(t0),Jpe=n(t0,"P",{});var Sut=s(Jpe);cUo=r(Sut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Sut.forEach(t),fUo=i(t0),sd=n(t0,"P",{});var WZ=s(sd);mUo=r(WZ,`Note:
Loading a model from its configuration file does `),Ype=n(WZ,"STRONG",{});var Rut=s(Ype);gUo=r(Rut,"not"),Rut.forEach(t),hUo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=n(WZ,"A",{href:!0});var Put=s(CX);pUo=r(Put,"from_pretrained()"),Put.forEach(t),_Uo=r(WZ," to load the model weights."),WZ.forEach(t),uUo=i(t0),T(sv.$$.fragment,t0),t0.forEach(t),bUo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(iy.$$.fragment,ma),vUo=i(ma),Kpe=n(ma,"P",{});var But=s(Kpe);FUo=r(But,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),But.forEach(t),TUo=i(ma),ja=n(ma,"P",{});var a0=s(ja);MUo=r(a0,"The model class to instantiate is selected based on the "),Zpe=n(a0,"CODE",{});var Iut=s(Zpe);EUo=r(Iut,"model_type"),Iut.forEach(t),CUo=r(a0,` property of the config object (either
passed as an argument or loaded from `),e_e=n(a0,"CODE",{});var Nut=s(e_e);wUo=r(Nut,"pretrained_model_name_or_path"),Nut.forEach(t),AUo=r(a0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=n(a0,"CODE",{});var qut=s(o_e);yUo=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),LUo=r(a0,":"),a0.forEach(t),xUo=i(ma),Fe=n(ma,"UL",{});var Me=s(Fe);lv=n(Me,"LI",{});var pke=s(lv);r_e=n(pke,"STRONG",{});var jut=s(r_e);$Uo=r(jut,"beit"),jut.forEach(t),kUo=r(pke," \u2014 "),wX=n(pke,"A",{href:!0});var Dut=s(wX);SUo=r(Dut,"BeitForImageClassification"),Dut.forEach(t),RUo=r(pke," (BEiT model)"),pke.forEach(t),PUo=i(Me),iv=n(Me,"LI",{});var _ke=s(iv);t_e=n(_ke,"STRONG",{});var Gut=s(t_e);BUo=r(Gut,"convnext"),Gut.forEach(t),IUo=r(_ke," \u2014 "),AX=n(_ke,"A",{href:!0});var Out=s(AX);NUo=r(Out,"ConvNextForImageClassification"),Out.forEach(t),qUo=r(_ke," (ConvNext model)"),_ke.forEach(t),jUo=i(Me),dv=n(Me,"LI",{});var uke=s(dv);a_e=n(uke,"STRONG",{});var Vut=s(a_e);DUo=r(Vut,"cvt"),Vut.forEach(t),GUo=r(uke," \u2014 "),yX=n(uke,"A",{href:!0});var Xut=s(yX);OUo=r(Xut,"CvtForImageClassification"),Xut.forEach(t),VUo=r(uke," (CvT model)"),uke.forEach(t),XUo=i(Me),cv=n(Me,"LI",{});var bke=s(cv);n_e=n(bke,"STRONG",{});var zut=s(n_e);zUo=r(zut,"data2vec-vision"),zut.forEach(t),WUo=r(bke," \u2014 "),LX=n(bke,"A",{href:!0});var Wut=s(LX);QUo=r(Wut,"Data2VecVisionForImageClassification"),Wut.forEach(t),HUo=r(bke," (Data2VecVision model)"),bke.forEach(t),UUo=i(Me),Bs=n(Me,"LI",{});var Q$=s(Bs);s_e=n(Q$,"STRONG",{});var Qut=s(s_e);JUo=r(Qut,"deit"),Qut.forEach(t),YUo=r(Q$," \u2014 "),xX=n(Q$,"A",{href:!0});var Hut=s(xX);KUo=r(Hut,"DeiTForImageClassification"),Hut.forEach(t),ZUo=r(Q$," or "),$X=n(Q$,"A",{href:!0});var Uut=s($X);eJo=r(Uut,"DeiTForImageClassificationWithTeacher"),Uut.forEach(t),oJo=r(Q$," (DeiT model)"),Q$.forEach(t),rJo=i(Me),fv=n(Me,"LI",{});var vke=s(fv);l_e=n(vke,"STRONG",{});var Jut=s(l_e);tJo=r(Jut,"imagegpt"),Jut.forEach(t),aJo=r(vke," \u2014 "),kX=n(vke,"A",{href:!0});var Yut=s(kX);nJo=r(Yut,"ImageGPTForImageClassification"),Yut.forEach(t),sJo=r(vke," (ImageGPT model)"),vke.forEach(t),lJo=i(Me),pt=n(Me,"LI",{});var hf=s(pt);i_e=n(hf,"STRONG",{});var Kut=s(i_e);iJo=r(Kut,"perceiver"),Kut.forEach(t),dJo=r(hf," \u2014 "),SX=n(hf,"A",{href:!0});var Zut=s(SX);cJo=r(Zut,"PerceiverForImageClassificationLearned"),Zut.forEach(t),fJo=r(hf," or "),RX=n(hf,"A",{href:!0});var e1t=s(RX);mJo=r(e1t,"PerceiverForImageClassificationFourier"),e1t.forEach(t),gJo=r(hf," or "),PX=n(hf,"A",{href:!0});var o1t=s(PX);hJo=r(o1t,"PerceiverForImageClassificationConvProcessing"),o1t.forEach(t),pJo=r(hf," (Perceiver model)"),hf.forEach(t),_Jo=i(Me),mv=n(Me,"LI",{});var Fke=s(mv);d_e=n(Fke,"STRONG",{});var r1t=s(d_e);uJo=r(r1t,"poolformer"),r1t.forEach(t),bJo=r(Fke," \u2014 "),BX=n(Fke,"A",{href:!0});var t1t=s(BX);vJo=r(t1t,"PoolFormerForImageClassification"),t1t.forEach(t),FJo=r(Fke," (PoolFormer model)"),Fke.forEach(t),TJo=i(Me),gv=n(Me,"LI",{});var Tke=s(gv);c_e=n(Tke,"STRONG",{});var a1t=s(c_e);MJo=r(a1t,"regnet"),a1t.forEach(t),EJo=r(Tke," \u2014 "),IX=n(Tke,"A",{href:!0});var n1t=s(IX);CJo=r(n1t,"RegNetForImageClassification"),n1t.forEach(t),wJo=r(Tke," (RegNet model)"),Tke.forEach(t),AJo=i(Me),hv=n(Me,"LI",{});var Mke=s(hv);f_e=n(Mke,"STRONG",{});var s1t=s(f_e);yJo=r(s1t,"resnet"),s1t.forEach(t),LJo=r(Mke," \u2014 "),NX=n(Mke,"A",{href:!0});var l1t=s(NX);xJo=r(l1t,"ResNetForImageClassification"),l1t.forEach(t),$Jo=r(Mke," (ResNet model)"),Mke.forEach(t),kJo=i(Me),pv=n(Me,"LI",{});var Eke=s(pv);m_e=n(Eke,"STRONG",{});var i1t=s(m_e);SJo=r(i1t,"segformer"),i1t.forEach(t),RJo=r(Eke," \u2014 "),qX=n(Eke,"A",{href:!0});var d1t=s(qX);PJo=r(d1t,"SegformerForImageClassification"),d1t.forEach(t),BJo=r(Eke," (SegFormer model)"),Eke.forEach(t),IJo=i(Me),_v=n(Me,"LI",{});var Cke=s(_v);g_e=n(Cke,"STRONG",{});var c1t=s(g_e);NJo=r(c1t,"swin"),c1t.forEach(t),qJo=r(Cke," \u2014 "),jX=n(Cke,"A",{href:!0});var f1t=s(jX);jJo=r(f1t,"SwinForImageClassification"),f1t.forEach(t),DJo=r(Cke," (Swin model)"),Cke.forEach(t),GJo=i(Me),uv=n(Me,"LI",{});var wke=s(uv);h_e=n(wke,"STRONG",{});var m1t=s(h_e);OJo=r(m1t,"van"),m1t.forEach(t),VJo=r(wke," \u2014 "),DX=n(wke,"A",{href:!0});var g1t=s(DX);XJo=r(g1t,"VanForImageClassification"),g1t.forEach(t),zJo=r(wke," (VAN model)"),wke.forEach(t),WJo=i(Me),bv=n(Me,"LI",{});var Ake=s(bv);p_e=n(Ake,"STRONG",{});var h1t=s(p_e);QJo=r(h1t,"vit"),h1t.forEach(t),HJo=r(Ake," \u2014 "),GX=n(Ake,"A",{href:!0});var p1t=s(GX);UJo=r(p1t,"ViTForImageClassification"),p1t.forEach(t),JJo=r(Ake," (ViT model)"),Ake.forEach(t),Me.forEach(t),YJo=i(ma),vv=n(ma,"P",{});var yke=s(vv);KJo=r(yke,"The model is set in evaluation mode by default using "),__e=n(yke,"CODE",{});var _1t=s(__e);ZJo=r(_1t,"model.eval()"),_1t.forEach(t),eYo=r(yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u_e=n(yke,"CODE",{});var u1t=s(u_e);oYo=r(u1t,"model.train()"),u1t.forEach(t),yke.forEach(t),rYo=i(ma),T(Fv.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),Yqe=i(f),ld=n(f,"H2",{class:!0});var oGe=s(ld);Tv=n(oGe,"A",{id:!0,class:!0,href:!0});var b1t=s(Tv);b_e=n(b1t,"SPAN",{});var v1t=s(b_e);T(dy.$$.fragment,v1t),v1t.forEach(t),b1t.forEach(t),tYo=i(oGe),v_e=n(oGe,"SPAN",{});var F1t=s(v_e);aYo=r(F1t,"AutoModelForVision2Seq"),F1t.forEach(t),oGe.forEach(t),Kqe=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(cy.$$.fragment,el),nYo=i(el),id=n(el,"P",{});var QZ=s(id);sYo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OX=n(QZ,"A",{href:!0});var T1t=s(OX);lYo=r(T1t,"from_pretrained()"),T1t.forEach(t),iYo=r(QZ," class method or the "),VX=n(QZ,"A",{href:!0});var M1t=s(VX);dYo=r(M1t,"from_config()"),M1t.forEach(t),cYo=r(QZ,` class
method.`),QZ.forEach(t),fYo=i(el),fy=n(el,"P",{});var rGe=s(fy);mYo=r(rGe,"This class cannot be instantiated directly using "),F_e=n(rGe,"CODE",{});var E1t=s(F_e);gYo=r(E1t,"__init__()"),E1t.forEach(t),hYo=r(rGe," (throws an error)."),rGe.forEach(t),pYo=i(el),_t=n(el,"DIV",{class:!0});var n0=s(_t);T(my.$$.fragment,n0),_Yo=i(n0),T_e=n(n0,"P",{});var C1t=s(T_e);uYo=r(C1t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),C1t.forEach(t),bYo=i(n0),dd=n(n0,"P",{});var HZ=s(dd);vYo=r(HZ,`Note:
Loading a model from its configuration file does `),M_e=n(HZ,"STRONG",{});var w1t=s(M_e);FYo=r(w1t,"not"),w1t.forEach(t),TYo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(HZ,"A",{href:!0});var A1t=s(XX);MYo=r(A1t,"from_pretrained()"),A1t.forEach(t),EYo=r(HZ," to load the model weights."),HZ.forEach(t),CYo=i(n0),T(Mv.$$.fragment,n0),n0.forEach(t),wYo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(gy.$$.fragment,ga),AYo=i(ga),E_e=n(ga,"P",{});var y1t=s(E_e);yYo=r(y1t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),y1t.forEach(t),LYo=i(ga),Da=n(ga,"P",{});var s0=s(Da);xYo=r(s0,"The model class to instantiate is selected based on the "),C_e=n(s0,"CODE",{});var L1t=s(C_e);$Yo=r(L1t,"model_type"),L1t.forEach(t),kYo=r(s0,` property of the config object (either
passed as an argument or loaded from `),w_e=n(s0,"CODE",{});var x1t=s(w_e);SYo=r(x1t,"pretrained_model_name_or_path"),x1t.forEach(t),RYo=r(s0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A_e=n(s0,"CODE",{});var $1t=s(A_e);PYo=r($1t,"pretrained_model_name_or_path"),$1t.forEach(t),BYo=r(s0,":"),s0.forEach(t),IYo=i(ga),y_e=n(ga,"UL",{});var k1t=s(y_e);Ev=n(k1t,"LI",{});var Lke=s(Ev);L_e=n(Lke,"STRONG",{});var S1t=s(L_e);NYo=r(S1t,"vision-encoder-decoder"),S1t.forEach(t),qYo=r(Lke," \u2014 "),zX=n(Lke,"A",{href:!0});var R1t=s(zX);jYo=r(R1t,"VisionEncoderDecoderModel"),R1t.forEach(t),DYo=r(Lke," (Vision Encoder decoder model)"),Lke.forEach(t),k1t.forEach(t),GYo=i(ga),Cv=n(ga,"P",{});var xke=s(Cv);OYo=r(xke,"The model is set in evaluation mode by default using "),x_e=n(xke,"CODE",{});var P1t=s(x_e);VYo=r(P1t,"model.eval()"),P1t.forEach(t),XYo=r(xke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$_e=n(xke,"CODE",{});var B1t=s($_e);zYo=r(B1t,"model.train()"),B1t.forEach(t),xke.forEach(t),WYo=i(ga),T(wv.$$.fragment,ga),ga.forEach(t),el.forEach(t),Zqe=i(f),cd=n(f,"H2",{class:!0});var tGe=s(cd);Av=n(tGe,"A",{id:!0,class:!0,href:!0});var I1t=s(Av);k_e=n(I1t,"SPAN",{});var N1t=s(k_e);T(hy.$$.fragment,N1t),N1t.forEach(t),I1t.forEach(t),QYo=i(tGe),S_e=n(tGe,"SPAN",{});var q1t=s(S_e);HYo=r(q1t,"AutoModelForAudioClassification"),q1t.forEach(t),tGe.forEach(t),eje=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(py.$$.fragment,ol),UYo=i(ol),fd=n(ol,"P",{});var UZ=s(fd);JYo=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),WX=n(UZ,"A",{href:!0});var j1t=s(WX);YYo=r(j1t,"from_pretrained()"),j1t.forEach(t),KYo=r(UZ," class method or the "),QX=n(UZ,"A",{href:!0});var D1t=s(QX);ZYo=r(D1t,"from_config()"),D1t.forEach(t),eKo=r(UZ,` class
method.`),UZ.forEach(t),oKo=i(ol),_y=n(ol,"P",{});var aGe=s(_y);rKo=r(aGe,"This class cannot be instantiated directly using "),R_e=n(aGe,"CODE",{});var G1t=s(R_e);tKo=r(G1t,"__init__()"),G1t.forEach(t),aKo=r(aGe," (throws an error)."),aGe.forEach(t),nKo=i(ol),ut=n(ol,"DIV",{class:!0});var l0=s(ut);T(uy.$$.fragment,l0),sKo=i(l0),P_e=n(l0,"P",{});var O1t=s(P_e);lKo=r(O1t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),O1t.forEach(t),iKo=i(l0),md=n(l0,"P",{});var JZ=s(md);dKo=r(JZ,`Note:
Loading a model from its configuration file does `),B_e=n(JZ,"STRONG",{});var V1t=s(B_e);cKo=r(V1t,"not"),V1t.forEach(t),fKo=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=n(JZ,"A",{href:!0});var X1t=s(HX);mKo=r(X1t,"from_pretrained()"),X1t.forEach(t),gKo=r(JZ," to load the model weights."),JZ.forEach(t),hKo=i(l0),T(yv.$$.fragment,l0),l0.forEach(t),pKo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(by.$$.fragment,ha),_Ko=i(ha),I_e=n(ha,"P",{});var z1t=s(I_e);uKo=r(z1t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),z1t.forEach(t),bKo=i(ha),Ga=n(ha,"P",{});var i0=s(Ga);vKo=r(i0,"The model class to instantiate is selected based on the "),N_e=n(i0,"CODE",{});var W1t=s(N_e);FKo=r(W1t,"model_type"),W1t.forEach(t),TKo=r(i0,` property of the config object (either
passed as an argument or loaded from `),q_e=n(i0,"CODE",{});var Q1t=s(q_e);MKo=r(Q1t,"pretrained_model_name_or_path"),Q1t.forEach(t),EKo=r(i0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j_e=n(i0,"CODE",{});var H1t=s(j_e);CKo=r(H1t,"pretrained_model_name_or_path"),H1t.forEach(t),wKo=r(i0,":"),i0.forEach(t),AKo=i(ha),Se=n(ha,"UL",{});var Ve=s(Se);Lv=n(Ve,"LI",{});var $ke=s(Lv);D_e=n($ke,"STRONG",{});var U1t=s(D_e);yKo=r(U1t,"data2vec-audio"),U1t.forEach(t),LKo=r($ke," \u2014 "),UX=n($ke,"A",{href:!0});var J1t=s(UX);xKo=r(J1t,"Data2VecAudioForSequenceClassification"),J1t.forEach(t),$Ko=r($ke," (Data2VecAudio model)"),$ke.forEach(t),kKo=i(Ve),xv=n(Ve,"LI",{});var kke=s(xv);G_e=n(kke,"STRONG",{});var Y1t=s(G_e);SKo=r(Y1t,"hubert"),Y1t.forEach(t),RKo=r(kke," \u2014 "),JX=n(kke,"A",{href:!0});var K1t=s(JX);PKo=r(K1t,"HubertForSequenceClassification"),K1t.forEach(t),BKo=r(kke," (Hubert model)"),kke.forEach(t),IKo=i(Ve),$v=n(Ve,"LI",{});var Ske=s($v);O_e=n(Ske,"STRONG",{});var Z1t=s(O_e);NKo=r(Z1t,"sew"),Z1t.forEach(t),qKo=r(Ske," \u2014 "),YX=n(Ske,"A",{href:!0});var ebt=s(YX);jKo=r(ebt,"SEWForSequenceClassification"),ebt.forEach(t),DKo=r(Ske," (SEW model)"),Ske.forEach(t),GKo=i(Ve),kv=n(Ve,"LI",{});var Rke=s(kv);V_e=n(Rke,"STRONG",{});var obt=s(V_e);OKo=r(obt,"sew-d"),obt.forEach(t),VKo=r(Rke," \u2014 "),KX=n(Rke,"A",{href:!0});var rbt=s(KX);XKo=r(rbt,"SEWDForSequenceClassification"),rbt.forEach(t),zKo=r(Rke," (SEW-D model)"),Rke.forEach(t),WKo=i(Ve),Sv=n(Ve,"LI",{});var Pke=s(Sv);X_e=n(Pke,"STRONG",{});var tbt=s(X_e);QKo=r(tbt,"unispeech"),tbt.forEach(t),HKo=r(Pke," \u2014 "),ZX=n(Pke,"A",{href:!0});var abt=s(ZX);UKo=r(abt,"UniSpeechForSequenceClassification"),abt.forEach(t),JKo=r(Pke," (UniSpeech model)"),Pke.forEach(t),YKo=i(Ve),Rv=n(Ve,"LI",{});var Bke=s(Rv);z_e=n(Bke,"STRONG",{});var nbt=s(z_e);KKo=r(nbt,"unispeech-sat"),nbt.forEach(t),ZKo=r(Bke," \u2014 "),ez=n(Bke,"A",{href:!0});var sbt=s(ez);eZo=r(sbt,"UniSpeechSatForSequenceClassification"),sbt.forEach(t),oZo=r(Bke," (UniSpeechSat model)"),Bke.forEach(t),rZo=i(Ve),Pv=n(Ve,"LI",{});var Ike=s(Pv);W_e=n(Ike,"STRONG",{});var lbt=s(W_e);tZo=r(lbt,"wav2vec2"),lbt.forEach(t),aZo=r(Ike," \u2014 "),oz=n(Ike,"A",{href:!0});var ibt=s(oz);nZo=r(ibt,"Wav2Vec2ForSequenceClassification"),ibt.forEach(t),sZo=r(Ike," (Wav2Vec2 model)"),Ike.forEach(t),lZo=i(Ve),Bv=n(Ve,"LI",{});var Nke=s(Bv);Q_e=n(Nke,"STRONG",{});var dbt=s(Q_e);iZo=r(dbt,"wav2vec2-conformer"),dbt.forEach(t),dZo=r(Nke," \u2014 "),rz=n(Nke,"A",{href:!0});var cbt=s(rz);cZo=r(cbt,"Wav2Vec2ConformerForSequenceClassification"),cbt.forEach(t),fZo=r(Nke," (Wav2Vec2-Conformer model)"),Nke.forEach(t),mZo=i(Ve),Iv=n(Ve,"LI",{});var qke=s(Iv);H_e=n(qke,"STRONG",{});var fbt=s(H_e);gZo=r(fbt,"wavlm"),fbt.forEach(t),hZo=r(qke," \u2014 "),tz=n(qke,"A",{href:!0});var mbt=s(tz);pZo=r(mbt,"WavLMForSequenceClassification"),mbt.forEach(t),_Zo=r(qke," (WavLM model)"),qke.forEach(t),Ve.forEach(t),uZo=i(ha),Nv=n(ha,"P",{});var jke=s(Nv);bZo=r(jke,"The model is set in evaluation mode by default using "),U_e=n(jke,"CODE",{});var gbt=s(U_e);vZo=r(gbt,"model.eval()"),gbt.forEach(t),FZo=r(jke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J_e=n(jke,"CODE",{});var hbt=s(J_e);TZo=r(hbt,"model.train()"),hbt.forEach(t),jke.forEach(t),MZo=i(ha),T(qv.$$.fragment,ha),ha.forEach(t),ol.forEach(t),oje=i(f),gd=n(f,"H2",{class:!0});var nGe=s(gd);jv=n(nGe,"A",{id:!0,class:!0,href:!0});var pbt=s(jv);Y_e=n(pbt,"SPAN",{});var _bt=s(Y_e);T(vy.$$.fragment,_bt),_bt.forEach(t),pbt.forEach(t),EZo=i(nGe),K_e=n(nGe,"SPAN",{});var ubt=s(K_e);CZo=r(ubt,"AutoModelForAudioFrameClassification"),ubt.forEach(t),nGe.forEach(t),rje=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(Fy.$$.fragment,rl),wZo=i(rl),hd=n(rl,"P",{});var YZ=s(hd);AZo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),az=n(YZ,"A",{href:!0});var bbt=s(az);yZo=r(bbt,"from_pretrained()"),bbt.forEach(t),LZo=r(YZ," class method or the "),nz=n(YZ,"A",{href:!0});var vbt=s(nz);xZo=r(vbt,"from_config()"),vbt.forEach(t),$Zo=r(YZ,` class
method.`),YZ.forEach(t),kZo=i(rl),Ty=n(rl,"P",{});var sGe=s(Ty);SZo=r(sGe,"This class cannot be instantiated directly using "),Z_e=n(sGe,"CODE",{});var Fbt=s(Z_e);RZo=r(Fbt,"__init__()"),Fbt.forEach(t),PZo=r(sGe," (throws an error)."),sGe.forEach(t),BZo=i(rl),bt=n(rl,"DIV",{class:!0});var d0=s(bt);T(My.$$.fragment,d0),IZo=i(d0),eue=n(d0,"P",{});var Tbt=s(eue);NZo=r(Tbt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Tbt.forEach(t),qZo=i(d0),pd=n(d0,"P",{});var KZ=s(pd);jZo=r(KZ,`Note:
Loading a model from its configuration file does `),oue=n(KZ,"STRONG",{});var Mbt=s(oue);DZo=r(Mbt,"not"),Mbt.forEach(t),GZo=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=n(KZ,"A",{href:!0});var Ebt=s(sz);OZo=r(Ebt,"from_pretrained()"),Ebt.forEach(t),VZo=r(KZ," to load the model weights."),KZ.forEach(t),XZo=i(d0),T(Dv.$$.fragment,d0),d0.forEach(t),zZo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(Ey.$$.fragment,pa),WZo=i(pa),rue=n(pa,"P",{});var Cbt=s(rue);QZo=r(Cbt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Cbt.forEach(t),HZo=i(pa),Oa=n(pa,"P",{});var c0=s(Oa);UZo=r(c0,"The model class to instantiate is selected based on the "),tue=n(c0,"CODE",{});var wbt=s(tue);JZo=r(wbt,"model_type"),wbt.forEach(t),YZo=r(c0,` property of the config object (either
passed as an argument or loaded from `),aue=n(c0,"CODE",{});var Abt=s(aue);KZo=r(Abt,"pretrained_model_name_or_path"),Abt.forEach(t),ZZo=r(c0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=n(c0,"CODE",{});var ybt=s(nue);eer=r(ybt,"pretrained_model_name_or_path"),ybt.forEach(t),oer=r(c0,":"),c0.forEach(t),rer=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);Gv=n(tl,"LI",{});var Dke=s(Gv);sue=n(Dke,"STRONG",{});var Lbt=s(sue);ter=r(Lbt,"data2vec-audio"),Lbt.forEach(t),aer=r(Dke," \u2014 "),lz=n(Dke,"A",{href:!0});var xbt=s(lz);ner=r(xbt,"Data2VecAudioForAudioFrameClassification"),xbt.forEach(t),ser=r(Dke," (Data2VecAudio model)"),Dke.forEach(t),ler=i(tl),Ov=n(tl,"LI",{});var Gke=s(Ov);lue=n(Gke,"STRONG",{});var $bt=s(lue);ier=r($bt,"unispeech-sat"),$bt.forEach(t),der=r(Gke," \u2014 "),iz=n(Gke,"A",{href:!0});var kbt=s(iz);cer=r(kbt,"UniSpeechSatForAudioFrameClassification"),kbt.forEach(t),fer=r(Gke," (UniSpeechSat model)"),Gke.forEach(t),mer=i(tl),Vv=n(tl,"LI",{});var Oke=s(Vv);iue=n(Oke,"STRONG",{});var Sbt=s(iue);ger=r(Sbt,"wav2vec2"),Sbt.forEach(t),her=r(Oke," \u2014 "),dz=n(Oke,"A",{href:!0});var Rbt=s(dz);per=r(Rbt,"Wav2Vec2ForAudioFrameClassification"),Rbt.forEach(t),_er=r(Oke," (Wav2Vec2 model)"),Oke.forEach(t),uer=i(tl),Xv=n(tl,"LI",{});var Vke=s(Xv);due=n(Vke,"STRONG",{});var Pbt=s(due);ber=r(Pbt,"wav2vec2-conformer"),Pbt.forEach(t),ver=r(Vke," \u2014 "),cz=n(Vke,"A",{href:!0});var Bbt=s(cz);Fer=r(Bbt,"Wav2Vec2ConformerForAudioFrameClassification"),Bbt.forEach(t),Ter=r(Vke," (Wav2Vec2-Conformer model)"),Vke.forEach(t),Mer=i(tl),zv=n(tl,"LI",{});var Xke=s(zv);cue=n(Xke,"STRONG",{});var Ibt=s(cue);Eer=r(Ibt,"wavlm"),Ibt.forEach(t),Cer=r(Xke," \u2014 "),fz=n(Xke,"A",{href:!0});var Nbt=s(fz);wer=r(Nbt,"WavLMForAudioFrameClassification"),Nbt.forEach(t),Aer=r(Xke," (WavLM model)"),Xke.forEach(t),tl.forEach(t),yer=i(pa),Wv=n(pa,"P",{});var zke=s(Wv);Ler=r(zke,"The model is set in evaluation mode by default using "),fue=n(zke,"CODE",{});var qbt=s(fue);xer=r(qbt,"model.eval()"),qbt.forEach(t),$er=r(zke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mue=n(zke,"CODE",{});var jbt=s(mue);ker=r(jbt,"model.train()"),jbt.forEach(t),zke.forEach(t),Ser=i(pa),T(Qv.$$.fragment,pa),pa.forEach(t),rl.forEach(t),tje=i(f),_d=n(f,"H2",{class:!0});var lGe=s(_d);Hv=n(lGe,"A",{id:!0,class:!0,href:!0});var Dbt=s(Hv);gue=n(Dbt,"SPAN",{});var Gbt=s(gue);T(Cy.$$.fragment,Gbt),Gbt.forEach(t),Dbt.forEach(t),Rer=i(lGe),hue=n(lGe,"SPAN",{});var Obt=s(hue);Per=r(Obt,"AutoModelForCTC"),Obt.forEach(t),lGe.forEach(t),aje=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(wy.$$.fragment,al),Ber=i(al),ud=n(al,"P",{});var ZZ=s(ud);Ier=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mz=n(ZZ,"A",{href:!0});var Vbt=s(mz);Ner=r(Vbt,"from_pretrained()"),Vbt.forEach(t),qer=r(ZZ," class method or the "),gz=n(ZZ,"A",{href:!0});var Xbt=s(gz);jer=r(Xbt,"from_config()"),Xbt.forEach(t),Der=r(ZZ,` class
method.`),ZZ.forEach(t),Ger=i(al),Ay=n(al,"P",{});var iGe=s(Ay);Oer=r(iGe,"This class cannot be instantiated directly using "),pue=n(iGe,"CODE",{});var zbt=s(pue);Ver=r(zbt,"__init__()"),zbt.forEach(t),Xer=r(iGe," (throws an error)."),iGe.forEach(t),zer=i(al),vt=n(al,"DIV",{class:!0});var f0=s(vt);T(yy.$$.fragment,f0),Wer=i(f0),_ue=n(f0,"P",{});var Wbt=s(_ue);Qer=r(Wbt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Wbt.forEach(t),Her=i(f0),bd=n(f0,"P",{});var eee=s(bd);Uer=r(eee,`Note:
Loading a model from its configuration file does `),uue=n(eee,"STRONG",{});var Qbt=s(uue);Jer=r(Qbt,"not"),Qbt.forEach(t),Yer=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=n(eee,"A",{href:!0});var Hbt=s(hz);Ker=r(Hbt,"from_pretrained()"),Hbt.forEach(t),Zer=r(eee," to load the model weights."),eee.forEach(t),eor=i(f0),T(Uv.$$.fragment,f0),f0.forEach(t),oor=i(al),mo=n(al,"DIV",{class:!0});var _a=s(mo);T(Ly.$$.fragment,_a),ror=i(_a),bue=n(_a,"P",{});var Ubt=s(bue);tor=r(Ubt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Ubt.forEach(t),aor=i(_a),Va=n(_a,"P",{});var m0=s(Va);nor=r(m0,"The model class to instantiate is selected based on the "),vue=n(m0,"CODE",{});var Jbt=s(vue);sor=r(Jbt,"model_type"),Jbt.forEach(t),lor=r(m0,` property of the config object (either
passed as an argument or loaded from `),Fue=n(m0,"CODE",{});var Ybt=s(Fue);ior=r(Ybt,"pretrained_model_name_or_path"),Ybt.forEach(t),dor=r(m0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=n(m0,"CODE",{});var Kbt=s(Tue);cor=r(Kbt,"pretrained_model_name_or_path"),Kbt.forEach(t),mor=r(m0,":"),m0.forEach(t),gor=i(_a),Re=n(_a,"UL",{});var Xe=s(Re);Jv=n(Xe,"LI",{});var Wke=s(Jv);Mue=n(Wke,"STRONG",{});var Zbt=s(Mue);hor=r(Zbt,"data2vec-audio"),Zbt.forEach(t),por=r(Wke," \u2014 "),pz=n(Wke,"A",{href:!0});var e2t=s(pz);_or=r(e2t,"Data2VecAudioForCTC"),e2t.forEach(t),uor=r(Wke," (Data2VecAudio model)"),Wke.forEach(t),bor=i(Xe),Yv=n(Xe,"LI",{});var Qke=s(Yv);Eue=n(Qke,"STRONG",{});var o2t=s(Eue);vor=r(o2t,"hubert"),o2t.forEach(t),For=r(Qke," \u2014 "),_z=n(Qke,"A",{href:!0});var r2t=s(_z);Tor=r(r2t,"HubertForCTC"),r2t.forEach(t),Mor=r(Qke," (Hubert model)"),Qke.forEach(t),Eor=i(Xe),Kv=n(Xe,"LI",{});var Hke=s(Kv);Cue=n(Hke,"STRONG",{});var t2t=s(Cue);Cor=r(t2t,"sew"),t2t.forEach(t),wor=r(Hke," \u2014 "),uz=n(Hke,"A",{href:!0});var a2t=s(uz);Aor=r(a2t,"SEWForCTC"),a2t.forEach(t),yor=r(Hke," (SEW model)"),Hke.forEach(t),Lor=i(Xe),Zv=n(Xe,"LI",{});var Uke=s(Zv);wue=n(Uke,"STRONG",{});var n2t=s(wue);xor=r(n2t,"sew-d"),n2t.forEach(t),$or=r(Uke," \u2014 "),bz=n(Uke,"A",{href:!0});var s2t=s(bz);kor=r(s2t,"SEWDForCTC"),s2t.forEach(t),Sor=r(Uke," (SEW-D model)"),Uke.forEach(t),Ror=i(Xe),eF=n(Xe,"LI",{});var Jke=s(eF);Aue=n(Jke,"STRONG",{});var l2t=s(Aue);Por=r(l2t,"unispeech"),l2t.forEach(t),Bor=r(Jke," \u2014 "),vz=n(Jke,"A",{href:!0});var i2t=s(vz);Ior=r(i2t,"UniSpeechForCTC"),i2t.forEach(t),Nor=r(Jke," (UniSpeech model)"),Jke.forEach(t),qor=i(Xe),oF=n(Xe,"LI",{});var Yke=s(oF);yue=n(Yke,"STRONG",{});var d2t=s(yue);jor=r(d2t,"unispeech-sat"),d2t.forEach(t),Dor=r(Yke," \u2014 "),Fz=n(Yke,"A",{href:!0});var c2t=s(Fz);Gor=r(c2t,"UniSpeechSatForCTC"),c2t.forEach(t),Oor=r(Yke," (UniSpeechSat model)"),Yke.forEach(t),Vor=i(Xe),rF=n(Xe,"LI",{});var Kke=s(rF);Lue=n(Kke,"STRONG",{});var f2t=s(Lue);Xor=r(f2t,"wav2vec2"),f2t.forEach(t),zor=r(Kke," \u2014 "),Tz=n(Kke,"A",{href:!0});var m2t=s(Tz);Wor=r(m2t,"Wav2Vec2ForCTC"),m2t.forEach(t),Qor=r(Kke," (Wav2Vec2 model)"),Kke.forEach(t),Hor=i(Xe),tF=n(Xe,"LI",{});var Zke=s(tF);xue=n(Zke,"STRONG",{});var g2t=s(xue);Uor=r(g2t,"wav2vec2-conformer"),g2t.forEach(t),Jor=r(Zke," \u2014 "),Mz=n(Zke,"A",{href:!0});var h2t=s(Mz);Yor=r(h2t,"Wav2Vec2ConformerForCTC"),h2t.forEach(t),Kor=r(Zke," (Wav2Vec2-Conformer model)"),Zke.forEach(t),Zor=i(Xe),aF=n(Xe,"LI",{});var eSe=s(aF);$ue=n(eSe,"STRONG",{});var p2t=s($ue);err=r(p2t,"wavlm"),p2t.forEach(t),orr=r(eSe," \u2014 "),Ez=n(eSe,"A",{href:!0});var _2t=s(Ez);rrr=r(_2t,"WavLMForCTC"),_2t.forEach(t),trr=r(eSe," (WavLM model)"),eSe.forEach(t),Xe.forEach(t),arr=i(_a),nF=n(_a,"P",{});var oSe=s(nF);nrr=r(oSe,"The model is set in evaluation mode by default using "),kue=n(oSe,"CODE",{});var u2t=s(kue);srr=r(u2t,"model.eval()"),u2t.forEach(t),lrr=r(oSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=n(oSe,"CODE",{});var b2t=s(Sue);irr=r(b2t,"model.train()"),b2t.forEach(t),oSe.forEach(t),drr=i(_a),T(sF.$$.fragment,_a),_a.forEach(t),al.forEach(t),nje=i(f),vd=n(f,"H2",{class:!0});var dGe=s(vd);lF=n(dGe,"A",{id:!0,class:!0,href:!0});var v2t=s(lF);Rue=n(v2t,"SPAN",{});var F2t=s(Rue);T(xy.$$.fragment,F2t),F2t.forEach(t),v2t.forEach(t),crr=i(dGe),Pue=n(dGe,"SPAN",{});var T2t=s(Pue);frr=r(T2t,"AutoModelForSpeechSeq2Seq"),T2t.forEach(t),dGe.forEach(t),sje=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T($y.$$.fragment,nl),mrr=i(nl),Fd=n(nl,"P",{});var oee=s(Fd);grr=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Cz=n(oee,"A",{href:!0});var M2t=s(Cz);hrr=r(M2t,"from_pretrained()"),M2t.forEach(t),prr=r(oee," class method or the "),wz=n(oee,"A",{href:!0});var E2t=s(wz);_rr=r(E2t,"from_config()"),E2t.forEach(t),urr=r(oee,` class
method.`),oee.forEach(t),brr=i(nl),ky=n(nl,"P",{});var cGe=s(ky);vrr=r(cGe,"This class cannot be instantiated directly using "),Bue=n(cGe,"CODE",{});var C2t=s(Bue);Frr=r(C2t,"__init__()"),C2t.forEach(t),Trr=r(cGe," (throws an error)."),cGe.forEach(t),Mrr=i(nl),Ft=n(nl,"DIV",{class:!0});var g0=s(Ft);T(Sy.$$.fragment,g0),Err=i(g0),Iue=n(g0,"P",{});var w2t=s(Iue);Crr=r(w2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),w2t.forEach(t),wrr=i(g0),Td=n(g0,"P",{});var ree=s(Td);Arr=r(ree,`Note:
Loading a model from its configuration file does `),Nue=n(ree,"STRONG",{});var A2t=s(Nue);yrr=r(A2t,"not"),A2t.forEach(t),Lrr=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=n(ree,"A",{href:!0});var y2t=s(Az);xrr=r(y2t,"from_pretrained()"),y2t.forEach(t),$rr=r(ree," to load the model weights."),ree.forEach(t),krr=i(g0),T(iF.$$.fragment,g0),g0.forEach(t),Srr=i(nl),go=n(nl,"DIV",{class:!0});var ua=s(go);T(Ry.$$.fragment,ua),Rrr=i(ua),que=n(ua,"P",{});var L2t=s(que);Prr=r(L2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),L2t.forEach(t),Brr=i(ua),Xa=n(ua,"P",{});var h0=s(Xa);Irr=r(h0,"The model class to instantiate is selected based on the "),jue=n(h0,"CODE",{});var x2t=s(jue);Nrr=r(x2t,"model_type"),x2t.forEach(t),qrr=r(h0,` property of the config object (either
passed as an argument or loaded from `),Due=n(h0,"CODE",{});var $2t=s(Due);jrr=r($2t,"pretrained_model_name_or_path"),$2t.forEach(t),Drr=r(h0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=n(h0,"CODE",{});var k2t=s(Gue);Grr=r(k2t,"pretrained_model_name_or_path"),k2t.forEach(t),Orr=r(h0,":"),h0.forEach(t),Vrr=i(ua),Py=n(ua,"UL",{});var fGe=s(Py);dF=n(fGe,"LI",{});var rSe=s(dF);Oue=n(rSe,"STRONG",{});var S2t=s(Oue);Xrr=r(S2t,"speech-encoder-decoder"),S2t.forEach(t),zrr=r(rSe," \u2014 "),yz=n(rSe,"A",{href:!0});var R2t=s(yz);Wrr=r(R2t,"SpeechEncoderDecoderModel"),R2t.forEach(t),Qrr=r(rSe," (Speech Encoder decoder model)"),rSe.forEach(t),Hrr=i(fGe),cF=n(fGe,"LI",{});var tSe=s(cF);Vue=n(tSe,"STRONG",{});var P2t=s(Vue);Urr=r(P2t,"speech_to_text"),P2t.forEach(t),Jrr=r(tSe," \u2014 "),Lz=n(tSe,"A",{href:!0});var B2t=s(Lz);Yrr=r(B2t,"Speech2TextForConditionalGeneration"),B2t.forEach(t),Krr=r(tSe," (Speech2Text model)"),tSe.forEach(t),fGe.forEach(t),Zrr=i(ua),fF=n(ua,"P",{});var aSe=s(fF);etr=r(aSe,"The model is set in evaluation mode by default using "),Xue=n(aSe,"CODE",{});var I2t=s(Xue);otr=r(I2t,"model.eval()"),I2t.forEach(t),rtr=r(aSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=n(aSe,"CODE",{});var N2t=s(zue);ttr=r(N2t,"model.train()"),N2t.forEach(t),aSe.forEach(t),atr=i(ua),T(mF.$$.fragment,ua),ua.forEach(t),nl.forEach(t),lje=i(f),Md=n(f,"H2",{class:!0});var mGe=s(Md);gF=n(mGe,"A",{id:!0,class:!0,href:!0});var q2t=s(gF);Wue=n(q2t,"SPAN",{});var j2t=s(Wue);T(By.$$.fragment,j2t),j2t.forEach(t),q2t.forEach(t),ntr=i(mGe),Que=n(mGe,"SPAN",{});var D2t=s(Que);str=r(D2t,"AutoModelForAudioXVector"),D2t.forEach(t),mGe.forEach(t),ije=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(Iy.$$.fragment,sl),ltr=i(sl),Ed=n(sl,"P",{});var tee=s(Ed);itr=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),xz=n(tee,"A",{href:!0});var G2t=s(xz);dtr=r(G2t,"from_pretrained()"),G2t.forEach(t),ctr=r(tee," class method or the "),$z=n(tee,"A",{href:!0});var O2t=s($z);ftr=r(O2t,"from_config()"),O2t.forEach(t),mtr=r(tee,` class
method.`),tee.forEach(t),gtr=i(sl),Ny=n(sl,"P",{});var gGe=s(Ny);htr=r(gGe,"This class cannot be instantiated directly using "),Hue=n(gGe,"CODE",{});var V2t=s(Hue);ptr=r(V2t,"__init__()"),V2t.forEach(t),_tr=r(gGe," (throws an error)."),gGe.forEach(t),utr=i(sl),Tt=n(sl,"DIV",{class:!0});var p0=s(Tt);T(qy.$$.fragment,p0),btr=i(p0),Uue=n(p0,"P",{});var X2t=s(Uue);vtr=r(X2t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),X2t.forEach(t),Ftr=i(p0),Cd=n(p0,"P",{});var aee=s(Cd);Ttr=r(aee,`Note:
Loading a model from its configuration file does `),Jue=n(aee,"STRONG",{});var z2t=s(Jue);Mtr=r(z2t,"not"),z2t.forEach(t),Etr=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=n(aee,"A",{href:!0});var W2t=s(kz);Ctr=r(W2t,"from_pretrained()"),W2t.forEach(t),wtr=r(aee," to load the model weights."),aee.forEach(t),Atr=i(p0),T(hF.$$.fragment,p0),p0.forEach(t),ytr=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(jy.$$.fragment,ba),Ltr=i(ba),Yue=n(ba,"P",{});var Q2t=s(Yue);xtr=r(Q2t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Q2t.forEach(t),$tr=i(ba),za=n(ba,"P",{});var _0=s(za);ktr=r(_0,"The model class to instantiate is selected based on the "),Kue=n(_0,"CODE",{});var H2t=s(Kue);Str=r(H2t,"model_type"),H2t.forEach(t),Rtr=r(_0,` property of the config object (either
passed as an argument or loaded from `),Zue=n(_0,"CODE",{});var U2t=s(Zue);Ptr=r(U2t,"pretrained_model_name_or_path"),U2t.forEach(t),Btr=r(_0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=n(_0,"CODE",{});var J2t=s(e1e);Itr=r(J2t,"pretrained_model_name_or_path"),J2t.forEach(t),Ntr=r(_0,":"),_0.forEach(t),qtr=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);pF=n(ll,"LI",{});var nSe=s(pF);o1e=n(nSe,"STRONG",{});var Y2t=s(o1e);jtr=r(Y2t,"data2vec-audio"),Y2t.forEach(t),Dtr=r(nSe," \u2014 "),Sz=n(nSe,"A",{href:!0});var K2t=s(Sz);Gtr=r(K2t,"Data2VecAudioForXVector"),K2t.forEach(t),Otr=r(nSe," (Data2VecAudio model)"),nSe.forEach(t),Vtr=i(ll),_F=n(ll,"LI",{});var sSe=s(_F);r1e=n(sSe,"STRONG",{});var Z2t=s(r1e);Xtr=r(Z2t,"unispeech-sat"),Z2t.forEach(t),ztr=r(sSe," \u2014 "),Rz=n(sSe,"A",{href:!0});var e4t=s(Rz);Wtr=r(e4t,"UniSpeechSatForXVector"),e4t.forEach(t),Qtr=r(sSe," (UniSpeechSat model)"),sSe.forEach(t),Htr=i(ll),uF=n(ll,"LI",{});var lSe=s(uF);t1e=n(lSe,"STRONG",{});var o4t=s(t1e);Utr=r(o4t,"wav2vec2"),o4t.forEach(t),Jtr=r(lSe," \u2014 "),Pz=n(lSe,"A",{href:!0});var r4t=s(Pz);Ytr=r(r4t,"Wav2Vec2ForXVector"),r4t.forEach(t),Ktr=r(lSe," (Wav2Vec2 model)"),lSe.forEach(t),Ztr=i(ll),bF=n(ll,"LI",{});var iSe=s(bF);a1e=n(iSe,"STRONG",{});var t4t=s(a1e);ear=r(t4t,"wav2vec2-conformer"),t4t.forEach(t),oar=r(iSe," \u2014 "),Bz=n(iSe,"A",{href:!0});var a4t=s(Bz);rar=r(a4t,"Wav2Vec2ConformerForXVector"),a4t.forEach(t),tar=r(iSe," (Wav2Vec2-Conformer model)"),iSe.forEach(t),aar=i(ll),vF=n(ll,"LI",{});var dSe=s(vF);n1e=n(dSe,"STRONG",{});var n4t=s(n1e);nar=r(n4t,"wavlm"),n4t.forEach(t),sar=r(dSe," \u2014 "),Iz=n(dSe,"A",{href:!0});var s4t=s(Iz);lar=r(s4t,"WavLMForXVector"),s4t.forEach(t),iar=r(dSe," (WavLM model)"),dSe.forEach(t),ll.forEach(t),dar=i(ba),FF=n(ba,"P",{});var cSe=s(FF);car=r(cSe,"The model is set in evaluation mode by default using "),s1e=n(cSe,"CODE",{});var l4t=s(s1e);far=r(l4t,"model.eval()"),l4t.forEach(t),mar=r(cSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l1e=n(cSe,"CODE",{});var i4t=s(l1e);gar=r(i4t,"model.train()"),i4t.forEach(t),cSe.forEach(t),har=i(ba),T(TF.$$.fragment,ba),ba.forEach(t),sl.forEach(t),dje=i(f),wd=n(f,"H2",{class:!0});var hGe=s(wd);MF=n(hGe,"A",{id:!0,class:!0,href:!0});var d4t=s(MF);i1e=n(d4t,"SPAN",{});var c4t=s(i1e);T(Dy.$$.fragment,c4t),c4t.forEach(t),d4t.forEach(t),par=i(hGe),d1e=n(hGe,"SPAN",{});var f4t=s(d1e);_ar=r(f4t,"AutoModelForMaskedImageModeling"),f4t.forEach(t),hGe.forEach(t),cje=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(Gy.$$.fragment,il),uar=i(il),Ad=n(il,"P",{});var nee=s(Ad);bar=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Nz=n(nee,"A",{href:!0});var m4t=s(Nz);Far=r(m4t,"from_pretrained()"),m4t.forEach(t),Tar=r(nee," class method or the "),qz=n(nee,"A",{href:!0});var g4t=s(qz);Mar=r(g4t,"from_config()"),g4t.forEach(t),Ear=r(nee,` class
method.`),nee.forEach(t),Car=i(il),Oy=n(il,"P",{});var pGe=s(Oy);war=r(pGe,"This class cannot be instantiated directly using "),c1e=n(pGe,"CODE",{});var h4t=s(c1e);Aar=r(h4t,"__init__()"),h4t.forEach(t),yar=r(pGe," (throws an error)."),pGe.forEach(t),Lar=i(il),Mt=n(il,"DIV",{class:!0});var u0=s(Mt);T(Vy.$$.fragment,u0),xar=i(u0),f1e=n(u0,"P",{});var p4t=s(f1e);$ar=r(p4t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),p4t.forEach(t),kar=i(u0),yd=n(u0,"P",{});var see=s(yd);Sar=r(see,`Note:
Loading a model from its configuration file does `),m1e=n(see,"STRONG",{});var _4t=s(m1e);Rar=r(_4t,"not"),_4t.forEach(t),Par=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=n(see,"A",{href:!0});var u4t=s(jz);Bar=r(u4t,"from_pretrained()"),u4t.forEach(t),Iar=r(see," to load the model weights."),see.forEach(t),Nar=i(u0),T(EF.$$.fragment,u0),u0.forEach(t),qar=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(Xy.$$.fragment,va),jar=i(va),g1e=n(va,"P",{});var b4t=s(g1e);Dar=r(b4t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),b4t.forEach(t),Gar=i(va),Wa=n(va,"P",{});var b0=s(Wa);Oar=r(b0,"The model class to instantiate is selected based on the "),h1e=n(b0,"CODE",{});var v4t=s(h1e);Var=r(v4t,"model_type"),v4t.forEach(t),Xar=r(b0,` property of the config object (either
passed as an argument or loaded from `),p1e=n(b0,"CODE",{});var F4t=s(p1e);zar=r(F4t,"pretrained_model_name_or_path"),F4t.forEach(t),War=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=n(b0,"CODE",{});var T4t=s(_1e);Qar=r(T4t,"pretrained_model_name_or_path"),T4t.forEach(t),Har=r(b0,":"),b0.forEach(t),Uar=i(va),Ld=n(va,"UL",{});var lee=s(Ld);CF=n(lee,"LI",{});var fSe=s(CF);u1e=n(fSe,"STRONG",{});var M4t=s(u1e);Jar=r(M4t,"deit"),M4t.forEach(t),Yar=r(fSe," \u2014 "),Dz=n(fSe,"A",{href:!0});var E4t=s(Dz);Kar=r(E4t,"DeiTForMaskedImageModeling"),E4t.forEach(t),Zar=r(fSe," (DeiT model)"),fSe.forEach(t),enr=i(lee),wF=n(lee,"LI",{});var mSe=s(wF);b1e=n(mSe,"STRONG",{});var C4t=s(b1e);onr=r(C4t,"swin"),C4t.forEach(t),rnr=r(mSe," \u2014 "),Gz=n(mSe,"A",{href:!0});var w4t=s(Gz);tnr=r(w4t,"SwinForMaskedImageModeling"),w4t.forEach(t),anr=r(mSe," (Swin model)"),mSe.forEach(t),nnr=i(lee),AF=n(lee,"LI",{});var gSe=s(AF);v1e=n(gSe,"STRONG",{});var A4t=s(v1e);snr=r(A4t,"vit"),A4t.forEach(t),lnr=r(gSe," \u2014 "),Oz=n(gSe,"A",{href:!0});var y4t=s(Oz);inr=r(y4t,"ViTForMaskedImageModeling"),y4t.forEach(t),dnr=r(gSe," (ViT model)"),gSe.forEach(t),lee.forEach(t),cnr=i(va),yF=n(va,"P",{});var hSe=s(yF);fnr=r(hSe,"The model is set in evaluation mode by default using "),F1e=n(hSe,"CODE",{});var L4t=s(F1e);mnr=r(L4t,"model.eval()"),L4t.forEach(t),gnr=r(hSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T1e=n(hSe,"CODE",{});var x4t=s(T1e);hnr=r(x4t,"model.train()"),x4t.forEach(t),hSe.forEach(t),pnr=i(va),T(LF.$$.fragment,va),va.forEach(t),il.forEach(t),fje=i(f),xd=n(f,"H2",{class:!0});var _Ge=s(xd);xF=n(_Ge,"A",{id:!0,class:!0,href:!0});var $4t=s(xF);M1e=n($4t,"SPAN",{});var k4t=s(M1e);T(zy.$$.fragment,k4t),k4t.forEach(t),$4t.forEach(t),_nr=i(_Ge),E1e=n(_Ge,"SPAN",{});var S4t=s(E1e);unr=r(S4t,"AutoModelForObjectDetection"),S4t.forEach(t),_Ge.forEach(t),mje=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(Wy.$$.fragment,dl),bnr=i(dl),$d=n(dl,"P",{});var iee=s($d);vnr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Vz=n(iee,"A",{href:!0});var R4t=s(Vz);Fnr=r(R4t,"from_pretrained()"),R4t.forEach(t),Tnr=r(iee," class method or the "),Xz=n(iee,"A",{href:!0});var P4t=s(Xz);Mnr=r(P4t,"from_config()"),P4t.forEach(t),Enr=r(iee,` class
method.`),iee.forEach(t),Cnr=i(dl),Qy=n(dl,"P",{});var uGe=s(Qy);wnr=r(uGe,"This class cannot be instantiated directly using "),C1e=n(uGe,"CODE",{});var B4t=s(C1e);Anr=r(B4t,"__init__()"),B4t.forEach(t),ynr=r(uGe," (throws an error)."),uGe.forEach(t),Lnr=i(dl),Et=n(dl,"DIV",{class:!0});var v0=s(Et);T(Hy.$$.fragment,v0),xnr=i(v0),w1e=n(v0,"P",{});var I4t=s(w1e);$nr=r(I4t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),I4t.forEach(t),knr=i(v0),kd=n(v0,"P",{});var dee=s(kd);Snr=r(dee,`Note:
Loading a model from its configuration file does `),A1e=n(dee,"STRONG",{});var N4t=s(A1e);Rnr=r(N4t,"not"),N4t.forEach(t),Pnr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=n(dee,"A",{href:!0});var q4t=s(zz);Bnr=r(q4t,"from_pretrained()"),q4t.forEach(t),Inr=r(dee," to load the model weights."),dee.forEach(t),Nnr=i(v0),T($F.$$.fragment,v0),v0.forEach(t),qnr=i(dl),_o=n(dl,"DIV",{class:!0});var Fa=s(_o);T(Uy.$$.fragment,Fa),jnr=i(Fa),y1e=n(Fa,"P",{});var j4t=s(y1e);Dnr=r(j4t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),j4t.forEach(t),Gnr=i(Fa),Qa=n(Fa,"P",{});var F0=s(Qa);Onr=r(F0,"The model class to instantiate is selected based on the "),L1e=n(F0,"CODE",{});var D4t=s(L1e);Vnr=r(D4t,"model_type"),D4t.forEach(t),Xnr=r(F0,` property of the config object (either
passed as an argument or loaded from `),x1e=n(F0,"CODE",{});var G4t=s(x1e);znr=r(G4t,"pretrained_model_name_or_path"),G4t.forEach(t),Wnr=r(F0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=n(F0,"CODE",{});var O4t=s($1e);Qnr=r(O4t,"pretrained_model_name_or_path"),O4t.forEach(t),Hnr=r(F0,":"),F0.forEach(t),Unr=i(Fa),Jy=n(Fa,"UL",{});var bGe=s(Jy);kF=n(bGe,"LI",{});var pSe=s(kF);k1e=n(pSe,"STRONG",{});var V4t=s(k1e);Jnr=r(V4t,"detr"),V4t.forEach(t),Ynr=r(pSe," \u2014 "),Wz=n(pSe,"A",{href:!0});var X4t=s(Wz);Knr=r(X4t,"DetrForObjectDetection"),X4t.forEach(t),Znr=r(pSe," (DETR model)"),pSe.forEach(t),esr=i(bGe),SF=n(bGe,"LI",{});var _Se=s(SF);S1e=n(_Se,"STRONG",{});var z4t=s(S1e);osr=r(z4t,"yolos"),z4t.forEach(t),rsr=r(_Se," \u2014 "),Qz=n(_Se,"A",{href:!0});var W4t=s(Qz);tsr=r(W4t,"YolosForObjectDetection"),W4t.forEach(t),asr=r(_Se," (YOLOS model)"),_Se.forEach(t),bGe.forEach(t),nsr=i(Fa),RF=n(Fa,"P",{});var uSe=s(RF);ssr=r(uSe,"The model is set in evaluation mode by default using "),R1e=n(uSe,"CODE",{});var Q4t=s(R1e);lsr=r(Q4t,"model.eval()"),Q4t.forEach(t),isr=r(uSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=n(uSe,"CODE",{});var H4t=s(P1e);dsr=r(H4t,"model.train()"),H4t.forEach(t),uSe.forEach(t),csr=i(Fa),T(PF.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),gje=i(f),Sd=n(f,"H2",{class:!0});var vGe=s(Sd);BF=n(vGe,"A",{id:!0,class:!0,href:!0});var U4t=s(BF);B1e=n(U4t,"SPAN",{});var J4t=s(B1e);T(Yy.$$.fragment,J4t),J4t.forEach(t),U4t.forEach(t),fsr=i(vGe),I1e=n(vGe,"SPAN",{});var Y4t=s(I1e);msr=r(Y4t,"AutoModelForImageSegmentation"),Y4t.forEach(t),vGe.forEach(t),hje=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(Ky.$$.fragment,cl),gsr=i(cl),Rd=n(cl,"P",{});var cee=s(Rd);hsr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Hz=n(cee,"A",{href:!0});var K4t=s(Hz);psr=r(K4t,"from_pretrained()"),K4t.forEach(t),_sr=r(cee," class method or the "),Uz=n(cee,"A",{href:!0});var Z4t=s(Uz);usr=r(Z4t,"from_config()"),Z4t.forEach(t),bsr=r(cee,` class
method.`),cee.forEach(t),vsr=i(cl),Zy=n(cl,"P",{});var FGe=s(Zy);Fsr=r(FGe,"This class cannot be instantiated directly using "),N1e=n(FGe,"CODE",{});var e5t=s(N1e);Tsr=r(e5t,"__init__()"),e5t.forEach(t),Msr=r(FGe," (throws an error)."),FGe.forEach(t),Esr=i(cl),Ct=n(cl,"DIV",{class:!0});var T0=s(Ct);T(eL.$$.fragment,T0),Csr=i(T0),q1e=n(T0,"P",{});var o5t=s(q1e);wsr=r(o5t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),o5t.forEach(t),Asr=i(T0),Pd=n(T0,"P",{});var fee=s(Pd);ysr=r(fee,`Note:
Loading a model from its configuration file does `),j1e=n(fee,"STRONG",{});var r5t=s(j1e);Lsr=r(r5t,"not"),r5t.forEach(t),xsr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(fee,"A",{href:!0});var t5t=s(Jz);$sr=r(t5t,"from_pretrained()"),t5t.forEach(t),ksr=r(fee," to load the model weights."),fee.forEach(t),Ssr=i(T0),T(IF.$$.fragment,T0),T0.forEach(t),Rsr=i(cl),uo=n(cl,"DIV",{class:!0});var Ta=s(uo);T(oL.$$.fragment,Ta),Psr=i(Ta),D1e=n(Ta,"P",{});var a5t=s(D1e);Bsr=r(a5t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),a5t.forEach(t),Isr=i(Ta),Ha=n(Ta,"P",{});var M0=s(Ha);Nsr=r(M0,"The model class to instantiate is selected based on the "),G1e=n(M0,"CODE",{});var n5t=s(G1e);qsr=r(n5t,"model_type"),n5t.forEach(t),jsr=r(M0,` property of the config object (either
passed as an argument or loaded from `),O1e=n(M0,"CODE",{});var s5t=s(O1e);Dsr=r(s5t,"pretrained_model_name_or_path"),s5t.forEach(t),Gsr=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=n(M0,"CODE",{});var l5t=s(V1e);Osr=r(l5t,"pretrained_model_name_or_path"),l5t.forEach(t),Vsr=r(M0,":"),M0.forEach(t),Xsr=i(Ta),X1e=n(Ta,"UL",{});var i5t=s(X1e);NF=n(i5t,"LI",{});var bSe=s(NF);z1e=n(bSe,"STRONG",{});var d5t=s(z1e);zsr=r(d5t,"detr"),d5t.forEach(t),Wsr=r(bSe," \u2014 "),Yz=n(bSe,"A",{href:!0});var c5t=s(Yz);Qsr=r(c5t,"DetrForSegmentation"),c5t.forEach(t),Hsr=r(bSe," (DETR model)"),bSe.forEach(t),i5t.forEach(t),Usr=i(Ta),qF=n(Ta,"P",{});var vSe=s(qF);Jsr=r(vSe,"The model is set in evaluation mode by default using "),W1e=n(vSe,"CODE",{});var f5t=s(W1e);Ysr=r(f5t,"model.eval()"),f5t.forEach(t),Ksr=r(vSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q1e=n(vSe,"CODE",{});var m5t=s(Q1e);Zsr=r(m5t,"model.train()"),m5t.forEach(t),vSe.forEach(t),elr=i(Ta),T(jF.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),pje=i(f),Bd=n(f,"H2",{class:!0});var TGe=s(Bd);DF=n(TGe,"A",{id:!0,class:!0,href:!0});var g5t=s(DF);H1e=n(g5t,"SPAN",{});var h5t=s(H1e);T(rL.$$.fragment,h5t),h5t.forEach(t),g5t.forEach(t),olr=i(TGe),U1e=n(TGe,"SPAN",{});var p5t=s(U1e);rlr=r(p5t,"AutoModelForSemanticSegmentation"),p5t.forEach(t),TGe.forEach(t),_je=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(tL.$$.fragment,fl),tlr=i(fl),Id=n(fl,"P",{});var mee=s(Id);alr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Kz=n(mee,"A",{href:!0});var _5t=s(Kz);nlr=r(_5t,"from_pretrained()"),_5t.forEach(t),slr=r(mee," class method or the "),Zz=n(mee,"A",{href:!0});var u5t=s(Zz);llr=r(u5t,"from_config()"),u5t.forEach(t),ilr=r(mee,` class
method.`),mee.forEach(t),dlr=i(fl),aL=n(fl,"P",{});var MGe=s(aL);clr=r(MGe,"This class cannot be instantiated directly using "),J1e=n(MGe,"CODE",{});var b5t=s(J1e);flr=r(b5t,"__init__()"),b5t.forEach(t),mlr=r(MGe," (throws an error)."),MGe.forEach(t),glr=i(fl),wt=n(fl,"DIV",{class:!0});var E0=s(wt);T(nL.$$.fragment,E0),hlr=i(E0),Y1e=n(E0,"P",{});var v5t=s(Y1e);plr=r(v5t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),v5t.forEach(t),_lr=i(E0),Nd=n(E0,"P",{});var gee=s(Nd);ulr=r(gee,`Note:
Loading a model from its configuration file does `),K1e=n(gee,"STRONG",{});var F5t=s(K1e);blr=r(F5t,"not"),F5t.forEach(t),vlr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=n(gee,"A",{href:!0});var T5t=s(eW);Flr=r(T5t,"from_pretrained()"),T5t.forEach(t),Tlr=r(gee," to load the model weights."),gee.forEach(t),Mlr=i(E0),T(GF.$$.fragment,E0),E0.forEach(t),Elr=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(sL.$$.fragment,Ma),Clr=i(Ma),Z1e=n(Ma,"P",{});var M5t=s(Z1e);wlr=r(M5t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),M5t.forEach(t),Alr=i(Ma),Ua=n(Ma,"P",{});var C0=s(Ua);ylr=r(C0,"The model class to instantiate is selected based on the "),ebe=n(C0,"CODE",{});var E5t=s(ebe);Llr=r(E5t,"model_type"),E5t.forEach(t),xlr=r(C0,` property of the config object (either
passed as an argument or loaded from `),obe=n(C0,"CODE",{});var C5t=s(obe);$lr=r(C5t,"pretrained_model_name_or_path"),C5t.forEach(t),klr=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=n(C0,"CODE",{});var w5t=s(rbe);Slr=r(w5t,"pretrained_model_name_or_path"),w5t.forEach(t),Rlr=r(C0,":"),C0.forEach(t),Plr=i(Ma),Ja=n(Ma,"UL",{});var w0=s(Ja);OF=n(w0,"LI",{});var FSe=s(OF);tbe=n(FSe,"STRONG",{});var A5t=s(tbe);Blr=r(A5t,"beit"),A5t.forEach(t),Ilr=r(FSe," \u2014 "),oW=n(FSe,"A",{href:!0});var y5t=s(oW);Nlr=r(y5t,"BeitForSemanticSegmentation"),y5t.forEach(t),qlr=r(FSe," (BEiT model)"),FSe.forEach(t),jlr=i(w0),VF=n(w0,"LI",{});var TSe=s(VF);abe=n(TSe,"STRONG",{});var L5t=s(abe);Dlr=r(L5t,"data2vec-vision"),L5t.forEach(t),Glr=r(TSe," \u2014 "),rW=n(TSe,"A",{href:!0});var x5t=s(rW);Olr=r(x5t,"Data2VecVisionForSemanticSegmentation"),x5t.forEach(t),Vlr=r(TSe," (Data2VecVision model)"),TSe.forEach(t),Xlr=i(w0),XF=n(w0,"LI",{});var MSe=s(XF);nbe=n(MSe,"STRONG",{});var $5t=s(nbe);zlr=r($5t,"dpt"),$5t.forEach(t),Wlr=r(MSe," \u2014 "),tW=n(MSe,"A",{href:!0});var k5t=s(tW);Qlr=r(k5t,"DPTForSemanticSegmentation"),k5t.forEach(t),Hlr=r(MSe," (DPT model)"),MSe.forEach(t),Ulr=i(w0),zF=n(w0,"LI",{});var ESe=s(zF);sbe=n(ESe,"STRONG",{});var S5t=s(sbe);Jlr=r(S5t,"segformer"),S5t.forEach(t),Ylr=r(ESe," \u2014 "),aW=n(ESe,"A",{href:!0});var R5t=s(aW);Klr=r(R5t,"SegformerForSemanticSegmentation"),R5t.forEach(t),Zlr=r(ESe," (SegFormer model)"),ESe.forEach(t),w0.forEach(t),eir=i(Ma),WF=n(Ma,"P",{});var CSe=s(WF);oir=r(CSe,"The model is set in evaluation mode by default using "),lbe=n(CSe,"CODE",{});var P5t=s(lbe);rir=r(P5t,"model.eval()"),P5t.forEach(t),tir=r(CSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ibe=n(CSe,"CODE",{});var B5t=s(ibe);air=r(B5t,"model.train()"),B5t.forEach(t),CSe.forEach(t),nir=i(Ma),T(QF.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),uje=i(f),qd=n(f,"H2",{class:!0});var EGe=s(qd);HF=n(EGe,"A",{id:!0,class:!0,href:!0});var I5t=s(HF);dbe=n(I5t,"SPAN",{});var N5t=s(dbe);T(lL.$$.fragment,N5t),N5t.forEach(t),I5t.forEach(t),sir=i(EGe),cbe=n(EGe,"SPAN",{});var q5t=s(cbe);lir=r(q5t,"AutoModelForInstanceSegmentation"),q5t.forEach(t),EGe.forEach(t),bje=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(iL.$$.fragment,ml),iir=i(ml),jd=n(ml,"P",{});var hee=s(jd);dir=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),nW=n(hee,"A",{href:!0});var j5t=s(nW);cir=r(j5t,"from_pretrained()"),j5t.forEach(t),fir=r(hee," class method or the "),sW=n(hee,"A",{href:!0});var D5t=s(sW);mir=r(D5t,"from_config()"),D5t.forEach(t),gir=r(hee,` class
method.`),hee.forEach(t),hir=i(ml),dL=n(ml,"P",{});var CGe=s(dL);pir=r(CGe,"This class cannot be instantiated directly using "),fbe=n(CGe,"CODE",{});var G5t=s(fbe);_ir=r(G5t,"__init__()"),G5t.forEach(t),uir=r(CGe," (throws an error)."),CGe.forEach(t),bir=i(ml),At=n(ml,"DIV",{class:!0});var A0=s(At);T(cL.$$.fragment,A0),vir=i(A0),mbe=n(A0,"P",{});var O5t=s(mbe);Fir=r(O5t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),O5t.forEach(t),Tir=i(A0),Dd=n(A0,"P",{});var pee=s(Dd);Mir=r(pee,`Note:
Loading a model from its configuration file does `),gbe=n(pee,"STRONG",{});var V5t=s(gbe);Eir=r(V5t,"not"),V5t.forEach(t),Cir=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(pee,"A",{href:!0});var X5t=s(lW);wir=r(X5t,"from_pretrained()"),X5t.forEach(t),Air=r(pee," to load the model weights."),pee.forEach(t),yir=i(A0),T(UF.$$.fragment,A0),A0.forEach(t),Lir=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(fL.$$.fragment,Ea),xir=i(Ea),hbe=n(Ea,"P",{});var z5t=s(hbe);$ir=r(z5t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),z5t.forEach(t),kir=i(Ea),Ya=n(Ea,"P",{});var y0=s(Ya);Sir=r(y0,"The model class to instantiate is selected based on the "),pbe=n(y0,"CODE",{});var W5t=s(pbe);Rir=r(W5t,"model_type"),W5t.forEach(t),Pir=r(y0,` property of the config object (either
passed as an argument or loaded from `),_be=n(y0,"CODE",{});var Q5t=s(_be);Bir=r(Q5t,"pretrained_model_name_or_path"),Q5t.forEach(t),Iir=r(y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=n(y0,"CODE",{});var H5t=s(ube);Nir=r(H5t,"pretrained_model_name_or_path"),H5t.forEach(t),qir=r(y0,":"),y0.forEach(t),jir=i(Ea),bbe=n(Ea,"UL",{});var U5t=s(bbe);JF=n(U5t,"LI",{});var wSe=s(JF);vbe=n(wSe,"STRONG",{});var J5t=s(vbe);Dir=r(J5t,"maskformer"),J5t.forEach(t),Gir=r(wSe," \u2014 "),iW=n(wSe,"A",{href:!0});var Y5t=s(iW);Oir=r(Y5t,"MaskFormerForInstanceSegmentation"),Y5t.forEach(t),Vir=r(wSe," (MaskFormer model)"),wSe.forEach(t),U5t.forEach(t),Xir=i(Ea),YF=n(Ea,"P",{});var ASe=s(YF);zir=r(ASe,"The model is set in evaluation mode by default using "),Fbe=n(ASe,"CODE",{});var K5t=s(Fbe);Wir=r(K5t,"model.eval()"),K5t.forEach(t),Qir=r(ASe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tbe=n(ASe,"CODE",{});var Z5t=s(Tbe);Hir=r(Z5t,"model.train()"),Z5t.forEach(t),ASe.forEach(t),Uir=i(Ea),T(KF.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),vje=i(f),Gd=n(f,"H2",{class:!0});var wGe=s(Gd);ZF=n(wGe,"A",{id:!0,class:!0,href:!0});var evt=s(ZF);Mbe=n(evt,"SPAN",{});var ovt=s(Mbe);T(mL.$$.fragment,ovt),ovt.forEach(t),evt.forEach(t),Jir=i(wGe),Ebe=n(wGe,"SPAN",{});var rvt=s(Ebe);Yir=r(rvt,"TFAutoModel"),rvt.forEach(t),wGe.forEach(t),Fje=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(gL.$$.fragment,gl),Kir=i(gl),Od=n(gl,"P",{});var _ee=s(Od);Zir=r(_ee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dW=n(_ee,"A",{href:!0});var tvt=s(dW);edr=r(tvt,"from_pretrained()"),tvt.forEach(t),odr=r(_ee," class method or the "),cW=n(_ee,"A",{href:!0});var avt=s(cW);rdr=r(avt,"from_config()"),avt.forEach(t),tdr=r(_ee,` class
method.`),_ee.forEach(t),adr=i(gl),hL=n(gl,"P",{});var AGe=s(hL);ndr=r(AGe,"This class cannot be instantiated directly using "),Cbe=n(AGe,"CODE",{});var nvt=s(Cbe);sdr=r(nvt,"__init__()"),nvt.forEach(t),ldr=r(AGe," (throws an error)."),AGe.forEach(t),idr=i(gl),yt=n(gl,"DIV",{class:!0});var L0=s(yt);T(pL.$$.fragment,L0),ddr=i(L0),wbe=n(L0,"P",{});var svt=s(wbe);cdr=r(svt,"Instantiates one of the base model classes of the library from a configuration."),svt.forEach(t),fdr=i(L0),Vd=n(L0,"P",{});var uee=s(Vd);mdr=r(uee,`Note:
Loading a model from its configuration file does `),Abe=n(uee,"STRONG",{});var lvt=s(Abe);gdr=r(lvt,"not"),lvt.forEach(t),hdr=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(uee,"A",{href:!0});var ivt=s(fW);pdr=r(ivt,"from_pretrained()"),ivt.forEach(t),_dr=r(uee," to load the model weights."),uee.forEach(t),udr=i(L0),T(eT.$$.fragment,L0),L0.forEach(t),bdr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(_L.$$.fragment,hl),vdr=i(hl),ybe=n(hl,"P",{});var dvt=s(ybe);Fdr=r(dvt,"Instantiate one of the base model classes of the library from a pretrained model."),dvt.forEach(t),Tdr=i(hl),Ka=n(hl,"P",{});var x0=s(Ka);Mdr=r(x0,"The model class to instantiate is selected based on the "),Lbe=n(x0,"CODE",{});var cvt=s(Lbe);Edr=r(cvt,"model_type"),cvt.forEach(t),Cdr=r(x0,` property of the config object (either
passed as an argument or loaded from `),xbe=n(x0,"CODE",{});var fvt=s(xbe);wdr=r(fvt,"pretrained_model_name_or_path"),fvt.forEach(t),Adr=r(x0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=n(x0,"CODE",{});var mvt=s($be);ydr=r(mvt,"pretrained_model_name_or_path"),mvt.forEach(t),Ldr=r(x0,":"),x0.forEach(t),xdr=i(hl),q=n(hl,"UL",{});var D=s(q);oT=n(D,"LI",{});var ySe=s(oT);kbe=n(ySe,"STRONG",{});var gvt=s(kbe);$dr=r(gvt,"albert"),gvt.forEach(t),kdr=r(ySe," \u2014 "),mW=n(ySe,"A",{href:!0});var hvt=s(mW);Sdr=r(hvt,"TFAlbertModel"),hvt.forEach(t),Rdr=r(ySe," (ALBERT model)"),ySe.forEach(t),Pdr=i(D),rT=n(D,"LI",{});var LSe=s(rT);Sbe=n(LSe,"STRONG",{});var pvt=s(Sbe);Bdr=r(pvt,"bart"),pvt.forEach(t),Idr=r(LSe," \u2014 "),gW=n(LSe,"A",{href:!0});var _vt=s(gW);Ndr=r(_vt,"TFBartModel"),_vt.forEach(t),qdr=r(LSe," (BART model)"),LSe.forEach(t),jdr=i(D),tT=n(D,"LI",{});var xSe=s(tT);Rbe=n(xSe,"STRONG",{});var uvt=s(Rbe);Ddr=r(uvt,"bert"),uvt.forEach(t),Gdr=r(xSe," \u2014 "),hW=n(xSe,"A",{href:!0});var bvt=s(hW);Odr=r(bvt,"TFBertModel"),bvt.forEach(t),Vdr=r(xSe," (BERT model)"),xSe.forEach(t),Xdr=i(D),aT=n(D,"LI",{});var $Se=s(aT);Pbe=n($Se,"STRONG",{});var vvt=s(Pbe);zdr=r(vvt,"blenderbot"),vvt.forEach(t),Wdr=r($Se," \u2014 "),pW=n($Se,"A",{href:!0});var Fvt=s(pW);Qdr=r(Fvt,"TFBlenderbotModel"),Fvt.forEach(t),Hdr=r($Se," (Blenderbot model)"),$Se.forEach(t),Udr=i(D),nT=n(D,"LI",{});var kSe=s(nT);Bbe=n(kSe,"STRONG",{});var Tvt=s(Bbe);Jdr=r(Tvt,"blenderbot-small"),Tvt.forEach(t),Ydr=r(kSe," \u2014 "),_W=n(kSe,"A",{href:!0});var Mvt=s(_W);Kdr=r(Mvt,"TFBlenderbotSmallModel"),Mvt.forEach(t),Zdr=r(kSe," (BlenderbotSmall model)"),kSe.forEach(t),ecr=i(D),sT=n(D,"LI",{});var SSe=s(sT);Ibe=n(SSe,"STRONG",{});var Evt=s(Ibe);ocr=r(Evt,"camembert"),Evt.forEach(t),rcr=r(SSe," \u2014 "),uW=n(SSe,"A",{href:!0});var Cvt=s(uW);tcr=r(Cvt,"TFCamembertModel"),Cvt.forEach(t),acr=r(SSe," (CamemBERT model)"),SSe.forEach(t),ncr=i(D),lT=n(D,"LI",{});var RSe=s(lT);Nbe=n(RSe,"STRONG",{});var wvt=s(Nbe);scr=r(wvt,"clip"),wvt.forEach(t),lcr=r(RSe," \u2014 "),bW=n(RSe,"A",{href:!0});var Avt=s(bW);icr=r(Avt,"TFCLIPModel"),Avt.forEach(t),dcr=r(RSe," (CLIP model)"),RSe.forEach(t),ccr=i(D),iT=n(D,"LI",{});var PSe=s(iT);qbe=n(PSe,"STRONG",{});var yvt=s(qbe);fcr=r(yvt,"convbert"),yvt.forEach(t),mcr=r(PSe," \u2014 "),vW=n(PSe,"A",{href:!0});var Lvt=s(vW);gcr=r(Lvt,"TFConvBertModel"),Lvt.forEach(t),hcr=r(PSe," (ConvBERT model)"),PSe.forEach(t),pcr=i(D),dT=n(D,"LI",{});var BSe=s(dT);jbe=n(BSe,"STRONG",{});var xvt=s(jbe);_cr=r(xvt,"convnext"),xvt.forEach(t),ucr=r(BSe," \u2014 "),FW=n(BSe,"A",{href:!0});var $vt=s(FW);bcr=r($vt,"TFConvNextModel"),$vt.forEach(t),vcr=r(BSe," (ConvNext model)"),BSe.forEach(t),Fcr=i(D),cT=n(D,"LI",{});var ISe=s(cT);Dbe=n(ISe,"STRONG",{});var kvt=s(Dbe);Tcr=r(kvt,"ctrl"),kvt.forEach(t),Mcr=r(ISe," \u2014 "),TW=n(ISe,"A",{href:!0});var Svt=s(TW);Ecr=r(Svt,"TFCTRLModel"),Svt.forEach(t),Ccr=r(ISe," (CTRL model)"),ISe.forEach(t),wcr=i(D),fT=n(D,"LI",{});var NSe=s(fT);Gbe=n(NSe,"STRONG",{});var Rvt=s(Gbe);Acr=r(Rvt,"data2vec-vision"),Rvt.forEach(t),ycr=r(NSe," \u2014 "),MW=n(NSe,"A",{href:!0});var Pvt=s(MW);Lcr=r(Pvt,"TFData2VecVisionModel"),Pvt.forEach(t),xcr=r(NSe," (Data2VecVision model)"),NSe.forEach(t),$cr=i(D),mT=n(D,"LI",{});var qSe=s(mT);Obe=n(qSe,"STRONG",{});var Bvt=s(Obe);kcr=r(Bvt,"deberta"),Bvt.forEach(t),Scr=r(qSe," \u2014 "),EW=n(qSe,"A",{href:!0});var Ivt=s(EW);Rcr=r(Ivt,"TFDebertaModel"),Ivt.forEach(t),Pcr=r(qSe," (DeBERTa model)"),qSe.forEach(t),Bcr=i(D),gT=n(D,"LI",{});var jSe=s(gT);Vbe=n(jSe,"STRONG",{});var Nvt=s(Vbe);Icr=r(Nvt,"deberta-v2"),Nvt.forEach(t),Ncr=r(jSe," \u2014 "),CW=n(jSe,"A",{href:!0});var qvt=s(CW);qcr=r(qvt,"TFDebertaV2Model"),qvt.forEach(t),jcr=r(jSe," (DeBERTa-v2 model)"),jSe.forEach(t),Dcr=i(D),hT=n(D,"LI",{});var DSe=s(hT);Xbe=n(DSe,"STRONG",{});var jvt=s(Xbe);Gcr=r(jvt,"distilbert"),jvt.forEach(t),Ocr=r(DSe," \u2014 "),wW=n(DSe,"A",{href:!0});var Dvt=s(wW);Vcr=r(Dvt,"TFDistilBertModel"),Dvt.forEach(t),Xcr=r(DSe," (DistilBERT model)"),DSe.forEach(t),zcr=i(D),pT=n(D,"LI",{});var GSe=s(pT);zbe=n(GSe,"STRONG",{});var Gvt=s(zbe);Wcr=r(Gvt,"dpr"),Gvt.forEach(t),Qcr=r(GSe," \u2014 "),AW=n(GSe,"A",{href:!0});var Ovt=s(AW);Hcr=r(Ovt,"TFDPRQuestionEncoder"),Ovt.forEach(t),Ucr=r(GSe," (DPR model)"),GSe.forEach(t),Jcr=i(D),_T=n(D,"LI",{});var OSe=s(_T);Wbe=n(OSe,"STRONG",{});var Vvt=s(Wbe);Ycr=r(Vvt,"electra"),Vvt.forEach(t),Kcr=r(OSe," \u2014 "),yW=n(OSe,"A",{href:!0});var Xvt=s(yW);Zcr=r(Xvt,"TFElectraModel"),Xvt.forEach(t),efr=r(OSe," (ELECTRA model)"),OSe.forEach(t),ofr=i(D),uT=n(D,"LI",{});var VSe=s(uT);Qbe=n(VSe,"STRONG",{});var zvt=s(Qbe);rfr=r(zvt,"flaubert"),zvt.forEach(t),tfr=r(VSe," \u2014 "),LW=n(VSe,"A",{href:!0});var Wvt=s(LW);afr=r(Wvt,"TFFlaubertModel"),Wvt.forEach(t),nfr=r(VSe," (FlauBERT model)"),VSe.forEach(t),sfr=i(D),Is=n(D,"LI",{});var H$=s(Is);Hbe=n(H$,"STRONG",{});var Qvt=s(Hbe);lfr=r(Qvt,"funnel"),Qvt.forEach(t),ifr=r(H$," \u2014 "),xW=n(H$,"A",{href:!0});var Hvt=s(xW);dfr=r(Hvt,"TFFunnelModel"),Hvt.forEach(t),cfr=r(H$," or "),$W=n(H$,"A",{href:!0});var Uvt=s($W);ffr=r(Uvt,"TFFunnelBaseModel"),Uvt.forEach(t),mfr=r(H$," (Funnel Transformer model)"),H$.forEach(t),gfr=i(D),bT=n(D,"LI",{});var XSe=s(bT);Ube=n(XSe,"STRONG",{});var Jvt=s(Ube);hfr=r(Jvt,"gpt2"),Jvt.forEach(t),pfr=r(XSe," \u2014 "),kW=n(XSe,"A",{href:!0});var Yvt=s(kW);_fr=r(Yvt,"TFGPT2Model"),Yvt.forEach(t),ufr=r(XSe," (OpenAI GPT-2 model)"),XSe.forEach(t),bfr=i(D),vT=n(D,"LI",{});var zSe=s(vT);Jbe=n(zSe,"STRONG",{});var Kvt=s(Jbe);vfr=r(Kvt,"gptj"),Kvt.forEach(t),Ffr=r(zSe," \u2014 "),SW=n(zSe,"A",{href:!0});var Zvt=s(SW);Tfr=r(Zvt,"TFGPTJModel"),Zvt.forEach(t),Mfr=r(zSe," (GPT-J model)"),zSe.forEach(t),Efr=i(D),FT=n(D,"LI",{});var WSe=s(FT);Ybe=n(WSe,"STRONG",{});var eFt=s(Ybe);Cfr=r(eFt,"hubert"),eFt.forEach(t),wfr=r(WSe," \u2014 "),RW=n(WSe,"A",{href:!0});var oFt=s(RW);Afr=r(oFt,"TFHubertModel"),oFt.forEach(t),yfr=r(WSe," (Hubert model)"),WSe.forEach(t),Lfr=i(D),TT=n(D,"LI",{});var QSe=s(TT);Kbe=n(QSe,"STRONG",{});var rFt=s(Kbe);xfr=r(rFt,"layoutlm"),rFt.forEach(t),$fr=r(QSe," \u2014 "),PW=n(QSe,"A",{href:!0});var tFt=s(PW);kfr=r(tFt,"TFLayoutLMModel"),tFt.forEach(t),Sfr=r(QSe," (LayoutLM model)"),QSe.forEach(t),Rfr=i(D),MT=n(D,"LI",{});var HSe=s(MT);Zbe=n(HSe,"STRONG",{});var aFt=s(Zbe);Pfr=r(aFt,"led"),aFt.forEach(t),Bfr=r(HSe," \u2014 "),BW=n(HSe,"A",{href:!0});var nFt=s(BW);Ifr=r(nFt,"TFLEDModel"),nFt.forEach(t),Nfr=r(HSe," (LED model)"),HSe.forEach(t),qfr=i(D),ET=n(D,"LI",{});var USe=s(ET);e2e=n(USe,"STRONG",{});var sFt=s(e2e);jfr=r(sFt,"longformer"),sFt.forEach(t),Dfr=r(USe," \u2014 "),IW=n(USe,"A",{href:!0});var lFt=s(IW);Gfr=r(lFt,"TFLongformerModel"),lFt.forEach(t),Ofr=r(USe," (Longformer model)"),USe.forEach(t),Vfr=i(D),CT=n(D,"LI",{});var JSe=s(CT);o2e=n(JSe,"STRONG",{});var iFt=s(o2e);Xfr=r(iFt,"lxmert"),iFt.forEach(t),zfr=r(JSe," \u2014 "),NW=n(JSe,"A",{href:!0});var dFt=s(NW);Wfr=r(dFt,"TFLxmertModel"),dFt.forEach(t),Qfr=r(JSe," (LXMERT model)"),JSe.forEach(t),Hfr=i(D),wT=n(D,"LI",{});var YSe=s(wT);r2e=n(YSe,"STRONG",{});var cFt=s(r2e);Ufr=r(cFt,"marian"),cFt.forEach(t),Jfr=r(YSe," \u2014 "),qW=n(YSe,"A",{href:!0});var fFt=s(qW);Yfr=r(fFt,"TFMarianModel"),fFt.forEach(t),Kfr=r(YSe," (Marian model)"),YSe.forEach(t),Zfr=i(D),AT=n(D,"LI",{});var KSe=s(AT);t2e=n(KSe,"STRONG",{});var mFt=s(t2e);emr=r(mFt,"mbart"),mFt.forEach(t),omr=r(KSe," \u2014 "),jW=n(KSe,"A",{href:!0});var gFt=s(jW);rmr=r(gFt,"TFMBartModel"),gFt.forEach(t),tmr=r(KSe," (mBART model)"),KSe.forEach(t),amr=i(D),yT=n(D,"LI",{});var ZSe=s(yT);a2e=n(ZSe,"STRONG",{});var hFt=s(a2e);nmr=r(hFt,"mobilebert"),hFt.forEach(t),smr=r(ZSe," \u2014 "),DW=n(ZSe,"A",{href:!0});var pFt=s(DW);lmr=r(pFt,"TFMobileBertModel"),pFt.forEach(t),imr=r(ZSe," (MobileBERT model)"),ZSe.forEach(t),dmr=i(D),LT=n(D,"LI",{});var eRe=s(LT);n2e=n(eRe,"STRONG",{});var _Ft=s(n2e);cmr=r(_Ft,"mpnet"),_Ft.forEach(t),fmr=r(eRe," \u2014 "),GW=n(eRe,"A",{href:!0});var uFt=s(GW);mmr=r(uFt,"TFMPNetModel"),uFt.forEach(t),gmr=r(eRe," (MPNet model)"),eRe.forEach(t),hmr=i(D),xT=n(D,"LI",{});var oRe=s(xT);s2e=n(oRe,"STRONG",{});var bFt=s(s2e);pmr=r(bFt,"mt5"),bFt.forEach(t),_mr=r(oRe," \u2014 "),OW=n(oRe,"A",{href:!0});var vFt=s(OW);umr=r(vFt,"TFMT5Model"),vFt.forEach(t),bmr=r(oRe," (mT5 model)"),oRe.forEach(t),vmr=i(D),$T=n(D,"LI",{});var rRe=s($T);l2e=n(rRe,"STRONG",{});var FFt=s(l2e);Fmr=r(FFt,"openai-gpt"),FFt.forEach(t),Tmr=r(rRe," \u2014 "),VW=n(rRe,"A",{href:!0});var TFt=s(VW);Mmr=r(TFt,"TFOpenAIGPTModel"),TFt.forEach(t),Emr=r(rRe," (OpenAI GPT model)"),rRe.forEach(t),Cmr=i(D),kT=n(D,"LI",{});var tRe=s(kT);i2e=n(tRe,"STRONG",{});var MFt=s(i2e);wmr=r(MFt,"opt"),MFt.forEach(t),Amr=r(tRe," \u2014 "),XW=n(tRe,"A",{href:!0});var EFt=s(XW);ymr=r(EFt,"TFOPTModel"),EFt.forEach(t),Lmr=r(tRe," (OPT model)"),tRe.forEach(t),xmr=i(D),ST=n(D,"LI",{});var aRe=s(ST);d2e=n(aRe,"STRONG",{});var CFt=s(d2e);$mr=r(CFt,"pegasus"),CFt.forEach(t),kmr=r(aRe," \u2014 "),zW=n(aRe,"A",{href:!0});var wFt=s(zW);Smr=r(wFt,"TFPegasusModel"),wFt.forEach(t),Rmr=r(aRe," (Pegasus model)"),aRe.forEach(t),Pmr=i(D),RT=n(D,"LI",{});var nRe=s(RT);c2e=n(nRe,"STRONG",{});var AFt=s(c2e);Bmr=r(AFt,"rembert"),AFt.forEach(t),Imr=r(nRe," \u2014 "),WW=n(nRe,"A",{href:!0});var yFt=s(WW);Nmr=r(yFt,"TFRemBertModel"),yFt.forEach(t),qmr=r(nRe," (RemBERT model)"),nRe.forEach(t),jmr=i(D),PT=n(D,"LI",{});var sRe=s(PT);f2e=n(sRe,"STRONG",{});var LFt=s(f2e);Dmr=r(LFt,"roberta"),LFt.forEach(t),Gmr=r(sRe," \u2014 "),QW=n(sRe,"A",{href:!0});var xFt=s(QW);Omr=r(xFt,"TFRobertaModel"),xFt.forEach(t),Vmr=r(sRe," (RoBERTa model)"),sRe.forEach(t),Xmr=i(D),BT=n(D,"LI",{});var lRe=s(BT);m2e=n(lRe,"STRONG",{});var $Ft=s(m2e);zmr=r($Ft,"roformer"),$Ft.forEach(t),Wmr=r(lRe," \u2014 "),HW=n(lRe,"A",{href:!0});var kFt=s(HW);Qmr=r(kFt,"TFRoFormerModel"),kFt.forEach(t),Hmr=r(lRe," (RoFormer model)"),lRe.forEach(t),Umr=i(D),IT=n(D,"LI",{});var iRe=s(IT);g2e=n(iRe,"STRONG",{});var SFt=s(g2e);Jmr=r(SFt,"speech_to_text"),SFt.forEach(t),Ymr=r(iRe," \u2014 "),UW=n(iRe,"A",{href:!0});var RFt=s(UW);Kmr=r(RFt,"TFSpeech2TextModel"),RFt.forEach(t),Zmr=r(iRe," (Speech2Text model)"),iRe.forEach(t),egr=i(D),NT=n(D,"LI",{});var dRe=s(NT);h2e=n(dRe,"STRONG",{});var PFt=s(h2e);ogr=r(PFt,"swin"),PFt.forEach(t),rgr=r(dRe," \u2014 "),JW=n(dRe,"A",{href:!0});var BFt=s(JW);tgr=r(BFt,"TFSwinModel"),BFt.forEach(t),agr=r(dRe," (Swin model)"),dRe.forEach(t),ngr=i(D),qT=n(D,"LI",{});var cRe=s(qT);p2e=n(cRe,"STRONG",{});var IFt=s(p2e);sgr=r(IFt,"t5"),IFt.forEach(t),lgr=r(cRe," \u2014 "),YW=n(cRe,"A",{href:!0});var NFt=s(YW);igr=r(NFt,"TFT5Model"),NFt.forEach(t),dgr=r(cRe," (T5 model)"),cRe.forEach(t),cgr=i(D),jT=n(D,"LI",{});var fRe=s(jT);_2e=n(fRe,"STRONG",{});var qFt=s(_2e);fgr=r(qFt,"tapas"),qFt.forEach(t),mgr=r(fRe," \u2014 "),KW=n(fRe,"A",{href:!0});var jFt=s(KW);ggr=r(jFt,"TFTapasModel"),jFt.forEach(t),hgr=r(fRe," (TAPAS model)"),fRe.forEach(t),pgr=i(D),DT=n(D,"LI",{});var mRe=s(DT);u2e=n(mRe,"STRONG",{});var DFt=s(u2e);_gr=r(DFt,"transfo-xl"),DFt.forEach(t),ugr=r(mRe," \u2014 "),ZW=n(mRe,"A",{href:!0});var GFt=s(ZW);bgr=r(GFt,"TFTransfoXLModel"),GFt.forEach(t),vgr=r(mRe," (Transformer-XL model)"),mRe.forEach(t),Fgr=i(D),GT=n(D,"LI",{});var gRe=s(GT);b2e=n(gRe,"STRONG",{});var OFt=s(b2e);Tgr=r(OFt,"vit"),OFt.forEach(t),Mgr=r(gRe," \u2014 "),eQ=n(gRe,"A",{href:!0});var VFt=s(eQ);Egr=r(VFt,"TFViTModel"),VFt.forEach(t),Cgr=r(gRe," (ViT model)"),gRe.forEach(t),wgr=i(D),OT=n(D,"LI",{});var hRe=s(OT);v2e=n(hRe,"STRONG",{});var XFt=s(v2e);Agr=r(XFt,"vit_mae"),XFt.forEach(t),ygr=r(hRe," \u2014 "),oQ=n(hRe,"A",{href:!0});var zFt=s(oQ);Lgr=r(zFt,"TFViTMAEModel"),zFt.forEach(t),xgr=r(hRe," (ViTMAE model)"),hRe.forEach(t),$gr=i(D),VT=n(D,"LI",{});var pRe=s(VT);F2e=n(pRe,"STRONG",{});var WFt=s(F2e);kgr=r(WFt,"wav2vec2"),WFt.forEach(t),Sgr=r(pRe," \u2014 "),rQ=n(pRe,"A",{href:!0});var QFt=s(rQ);Rgr=r(QFt,"TFWav2Vec2Model"),QFt.forEach(t),Pgr=r(pRe," (Wav2Vec2 model)"),pRe.forEach(t),Bgr=i(D),XT=n(D,"LI",{});var _Re=s(XT);T2e=n(_Re,"STRONG",{});var HFt=s(T2e);Igr=r(HFt,"xlm"),HFt.forEach(t),Ngr=r(_Re," \u2014 "),tQ=n(_Re,"A",{href:!0});var UFt=s(tQ);qgr=r(UFt,"TFXLMModel"),UFt.forEach(t),jgr=r(_Re," (XLM model)"),_Re.forEach(t),Dgr=i(D),zT=n(D,"LI",{});var uRe=s(zT);M2e=n(uRe,"STRONG",{});var JFt=s(M2e);Ggr=r(JFt,"xlm-roberta"),JFt.forEach(t),Ogr=r(uRe," \u2014 "),aQ=n(uRe,"A",{href:!0});var YFt=s(aQ);Vgr=r(YFt,"TFXLMRobertaModel"),YFt.forEach(t),Xgr=r(uRe," (XLM-RoBERTa model)"),uRe.forEach(t),zgr=i(D),WT=n(D,"LI",{});var bRe=s(WT);E2e=n(bRe,"STRONG",{});var KFt=s(E2e);Wgr=r(KFt,"xlnet"),KFt.forEach(t),Qgr=r(bRe," \u2014 "),nQ=n(bRe,"A",{href:!0});var ZFt=s(nQ);Hgr=r(ZFt,"TFXLNetModel"),ZFt.forEach(t),Ugr=r(bRe," (XLNet model)"),bRe.forEach(t),D.forEach(t),Jgr=i(hl),T(QT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),Tje=i(f),Xd=n(f,"H2",{class:!0});var yGe=s(Xd);HT=n(yGe,"A",{id:!0,class:!0,href:!0});var eTt=s(HT);C2e=n(eTt,"SPAN",{});var oTt=s(C2e);T(uL.$$.fragment,oTt),oTt.forEach(t),eTt.forEach(t),Ygr=i(yGe),w2e=n(yGe,"SPAN",{});var rTt=s(w2e);Kgr=r(rTt,"TFAutoModelForPreTraining"),rTt.forEach(t),yGe.forEach(t),Mje=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(bL.$$.fragment,pl),Zgr=i(pl),zd=n(pl,"P",{});var bee=s(zd);ehr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),sQ=n(bee,"A",{href:!0});var tTt=s(sQ);ohr=r(tTt,"from_pretrained()"),tTt.forEach(t),rhr=r(bee," class method or the "),lQ=n(bee,"A",{href:!0});var aTt=s(lQ);thr=r(aTt,"from_config()"),aTt.forEach(t),ahr=r(bee,` class
method.`),bee.forEach(t),nhr=i(pl),vL=n(pl,"P",{});var LGe=s(vL);shr=r(LGe,"This class cannot be instantiated directly using "),A2e=n(LGe,"CODE",{});var nTt=s(A2e);lhr=r(nTt,"__init__()"),nTt.forEach(t),ihr=r(LGe," (throws an error)."),LGe.forEach(t),dhr=i(pl),Lt=n(pl,"DIV",{class:!0});var $0=s(Lt);T(FL.$$.fragment,$0),chr=i($0),y2e=n($0,"P",{});var sTt=s(y2e);fhr=r(sTt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),sTt.forEach(t),mhr=i($0),Wd=n($0,"P",{});var vee=s(Wd);ghr=r(vee,`Note:
Loading a model from its configuration file does `),L2e=n(vee,"STRONG",{});var lTt=s(L2e);hhr=r(lTt,"not"),lTt.forEach(t),phr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=n(vee,"A",{href:!0});var iTt=s(iQ);_hr=r(iTt,"from_pretrained()"),iTt.forEach(t),uhr=r(vee," to load the model weights."),vee.forEach(t),bhr=i($0),T(UT.$$.fragment,$0),$0.forEach(t),vhr=i(pl),Ar=n(pl,"DIV",{class:!0});var _l=s(Ar);T(TL.$$.fragment,_l),Fhr=i(_l),x2e=n(_l,"P",{});var dTt=s(x2e);Thr=r(dTt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),dTt.forEach(t),Mhr=i(_l),Za=n(_l,"P",{});var k0=s(Za);Ehr=r(k0,"The model class to instantiate is selected based on the "),$2e=n(k0,"CODE",{});var cTt=s($2e);Chr=r(cTt,"model_type"),cTt.forEach(t),whr=r(k0,` property of the config object (either
passed as an argument or loaded from `),k2e=n(k0,"CODE",{});var fTt=s(k2e);Ahr=r(fTt,"pretrained_model_name_or_path"),fTt.forEach(t),yhr=r(k0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S2e=n(k0,"CODE",{});var mTt=s(S2e);Lhr=r(mTt,"pretrained_model_name_or_path"),mTt.forEach(t),xhr=r(k0,":"),k0.forEach(t),$hr=i(_l),se=n(_l,"UL",{});var le=s(se);JT=n(le,"LI",{});var vRe=s(JT);R2e=n(vRe,"STRONG",{});var gTt=s(R2e);khr=r(gTt,"albert"),gTt.forEach(t),Shr=r(vRe," \u2014 "),dQ=n(vRe,"A",{href:!0});var hTt=s(dQ);Rhr=r(hTt,"TFAlbertForPreTraining"),hTt.forEach(t),Phr=r(vRe," (ALBERT model)"),vRe.forEach(t),Bhr=i(le),YT=n(le,"LI",{});var FRe=s(YT);P2e=n(FRe,"STRONG",{});var pTt=s(P2e);Ihr=r(pTt,"bart"),pTt.forEach(t),Nhr=r(FRe," \u2014 "),cQ=n(FRe,"A",{href:!0});var _Tt=s(cQ);qhr=r(_Tt,"TFBartForConditionalGeneration"),_Tt.forEach(t),jhr=r(FRe," (BART model)"),FRe.forEach(t),Dhr=i(le),KT=n(le,"LI",{});var TRe=s(KT);B2e=n(TRe,"STRONG",{});var uTt=s(B2e);Ghr=r(uTt,"bert"),uTt.forEach(t),Ohr=r(TRe," \u2014 "),fQ=n(TRe,"A",{href:!0});var bTt=s(fQ);Vhr=r(bTt,"TFBertForPreTraining"),bTt.forEach(t),Xhr=r(TRe," (BERT model)"),TRe.forEach(t),zhr=i(le),ZT=n(le,"LI",{});var MRe=s(ZT);I2e=n(MRe,"STRONG",{});var vTt=s(I2e);Whr=r(vTt,"camembert"),vTt.forEach(t),Qhr=r(MRe," \u2014 "),mQ=n(MRe,"A",{href:!0});var FTt=s(mQ);Hhr=r(FTt,"TFCamembertForMaskedLM"),FTt.forEach(t),Uhr=r(MRe," (CamemBERT model)"),MRe.forEach(t),Jhr=i(le),e7=n(le,"LI",{});var ERe=s(e7);N2e=n(ERe,"STRONG",{});var TTt=s(N2e);Yhr=r(TTt,"ctrl"),TTt.forEach(t),Khr=r(ERe," \u2014 "),gQ=n(ERe,"A",{href:!0});var MTt=s(gQ);Zhr=r(MTt,"TFCTRLLMHeadModel"),MTt.forEach(t),epr=r(ERe," (CTRL model)"),ERe.forEach(t),opr=i(le),o7=n(le,"LI",{});var CRe=s(o7);q2e=n(CRe,"STRONG",{});var ETt=s(q2e);rpr=r(ETt,"distilbert"),ETt.forEach(t),tpr=r(CRe," \u2014 "),hQ=n(CRe,"A",{href:!0});var CTt=s(hQ);apr=r(CTt,"TFDistilBertForMaskedLM"),CTt.forEach(t),npr=r(CRe," (DistilBERT model)"),CRe.forEach(t),spr=i(le),r7=n(le,"LI",{});var wRe=s(r7);j2e=n(wRe,"STRONG",{});var wTt=s(j2e);lpr=r(wTt,"electra"),wTt.forEach(t),ipr=r(wRe," \u2014 "),pQ=n(wRe,"A",{href:!0});var ATt=s(pQ);dpr=r(ATt,"TFElectraForPreTraining"),ATt.forEach(t),cpr=r(wRe," (ELECTRA model)"),wRe.forEach(t),fpr=i(le),t7=n(le,"LI",{});var ARe=s(t7);D2e=n(ARe,"STRONG",{});var yTt=s(D2e);mpr=r(yTt,"flaubert"),yTt.forEach(t),gpr=r(ARe," \u2014 "),_Q=n(ARe,"A",{href:!0});var LTt=s(_Q);hpr=r(LTt,"TFFlaubertWithLMHeadModel"),LTt.forEach(t),ppr=r(ARe," (FlauBERT model)"),ARe.forEach(t),_pr=i(le),a7=n(le,"LI",{});var yRe=s(a7);G2e=n(yRe,"STRONG",{});var xTt=s(G2e);upr=r(xTt,"funnel"),xTt.forEach(t),bpr=r(yRe," \u2014 "),uQ=n(yRe,"A",{href:!0});var $Tt=s(uQ);vpr=r($Tt,"TFFunnelForPreTraining"),$Tt.forEach(t),Fpr=r(yRe," (Funnel Transformer model)"),yRe.forEach(t),Tpr=i(le),n7=n(le,"LI",{});var LRe=s(n7);O2e=n(LRe,"STRONG",{});var kTt=s(O2e);Mpr=r(kTt,"gpt2"),kTt.forEach(t),Epr=r(LRe," \u2014 "),bQ=n(LRe,"A",{href:!0});var STt=s(bQ);Cpr=r(STt,"TFGPT2LMHeadModel"),STt.forEach(t),wpr=r(LRe," (OpenAI GPT-2 model)"),LRe.forEach(t),Apr=i(le),s7=n(le,"LI",{});var xRe=s(s7);V2e=n(xRe,"STRONG",{});var RTt=s(V2e);ypr=r(RTt,"layoutlm"),RTt.forEach(t),Lpr=r(xRe," \u2014 "),vQ=n(xRe,"A",{href:!0});var PTt=s(vQ);xpr=r(PTt,"TFLayoutLMForMaskedLM"),PTt.forEach(t),$pr=r(xRe," (LayoutLM model)"),xRe.forEach(t),kpr=i(le),l7=n(le,"LI",{});var $Re=s(l7);X2e=n($Re,"STRONG",{});var BTt=s(X2e);Spr=r(BTt,"lxmert"),BTt.forEach(t),Rpr=r($Re," \u2014 "),FQ=n($Re,"A",{href:!0});var ITt=s(FQ);Ppr=r(ITt,"TFLxmertForPreTraining"),ITt.forEach(t),Bpr=r($Re," (LXMERT model)"),$Re.forEach(t),Ipr=i(le),i7=n(le,"LI",{});var kRe=s(i7);z2e=n(kRe,"STRONG",{});var NTt=s(z2e);Npr=r(NTt,"mobilebert"),NTt.forEach(t),qpr=r(kRe," \u2014 "),TQ=n(kRe,"A",{href:!0});var qTt=s(TQ);jpr=r(qTt,"TFMobileBertForPreTraining"),qTt.forEach(t),Dpr=r(kRe," (MobileBERT model)"),kRe.forEach(t),Gpr=i(le),d7=n(le,"LI",{});var SRe=s(d7);W2e=n(SRe,"STRONG",{});var jTt=s(W2e);Opr=r(jTt,"mpnet"),jTt.forEach(t),Vpr=r(SRe," \u2014 "),MQ=n(SRe,"A",{href:!0});var DTt=s(MQ);Xpr=r(DTt,"TFMPNetForMaskedLM"),DTt.forEach(t),zpr=r(SRe," (MPNet model)"),SRe.forEach(t),Wpr=i(le),c7=n(le,"LI",{});var RRe=s(c7);Q2e=n(RRe,"STRONG",{});var GTt=s(Q2e);Qpr=r(GTt,"openai-gpt"),GTt.forEach(t),Hpr=r(RRe," \u2014 "),EQ=n(RRe,"A",{href:!0});var OTt=s(EQ);Upr=r(OTt,"TFOpenAIGPTLMHeadModel"),OTt.forEach(t),Jpr=r(RRe," (OpenAI GPT model)"),RRe.forEach(t),Ypr=i(le),f7=n(le,"LI",{});var PRe=s(f7);H2e=n(PRe,"STRONG",{});var VTt=s(H2e);Kpr=r(VTt,"roberta"),VTt.forEach(t),Zpr=r(PRe," \u2014 "),CQ=n(PRe,"A",{href:!0});var XTt=s(CQ);e_r=r(XTt,"TFRobertaForMaskedLM"),XTt.forEach(t),o_r=r(PRe," (RoBERTa model)"),PRe.forEach(t),r_r=i(le),m7=n(le,"LI",{});var BRe=s(m7);U2e=n(BRe,"STRONG",{});var zTt=s(U2e);t_r=r(zTt,"t5"),zTt.forEach(t),a_r=r(BRe," \u2014 "),wQ=n(BRe,"A",{href:!0});var WTt=s(wQ);n_r=r(WTt,"TFT5ForConditionalGeneration"),WTt.forEach(t),s_r=r(BRe," (T5 model)"),BRe.forEach(t),l_r=i(le),g7=n(le,"LI",{});var IRe=s(g7);J2e=n(IRe,"STRONG",{});var QTt=s(J2e);i_r=r(QTt,"tapas"),QTt.forEach(t),d_r=r(IRe," \u2014 "),AQ=n(IRe,"A",{href:!0});var HTt=s(AQ);c_r=r(HTt,"TFTapasForMaskedLM"),HTt.forEach(t),f_r=r(IRe," (TAPAS model)"),IRe.forEach(t),m_r=i(le),h7=n(le,"LI",{});var NRe=s(h7);Y2e=n(NRe,"STRONG",{});var UTt=s(Y2e);g_r=r(UTt,"transfo-xl"),UTt.forEach(t),h_r=r(NRe," \u2014 "),yQ=n(NRe,"A",{href:!0});var JTt=s(yQ);p_r=r(JTt,"TFTransfoXLLMHeadModel"),JTt.forEach(t),__r=r(NRe," (Transformer-XL model)"),NRe.forEach(t),u_r=i(le),p7=n(le,"LI",{});var qRe=s(p7);K2e=n(qRe,"STRONG",{});var YTt=s(K2e);b_r=r(YTt,"vit_mae"),YTt.forEach(t),v_r=r(qRe," \u2014 "),LQ=n(qRe,"A",{href:!0});var KTt=s(LQ);F_r=r(KTt,"TFViTMAEForPreTraining"),KTt.forEach(t),T_r=r(qRe," (ViTMAE model)"),qRe.forEach(t),M_r=i(le),_7=n(le,"LI",{});var jRe=s(_7);Z2e=n(jRe,"STRONG",{});var ZTt=s(Z2e);E_r=r(ZTt,"xlm"),ZTt.forEach(t),C_r=r(jRe," \u2014 "),xQ=n(jRe,"A",{href:!0});var e7t=s(xQ);w_r=r(e7t,"TFXLMWithLMHeadModel"),e7t.forEach(t),A_r=r(jRe," (XLM model)"),jRe.forEach(t),y_r=i(le),u7=n(le,"LI",{});var DRe=s(u7);e4e=n(DRe,"STRONG",{});var o7t=s(e4e);L_r=r(o7t,"xlm-roberta"),o7t.forEach(t),x_r=r(DRe," \u2014 "),$Q=n(DRe,"A",{href:!0});var r7t=s($Q);$_r=r(r7t,"TFXLMRobertaForMaskedLM"),r7t.forEach(t),k_r=r(DRe," (XLM-RoBERTa model)"),DRe.forEach(t),S_r=i(le),b7=n(le,"LI",{});var GRe=s(b7);o4e=n(GRe,"STRONG",{});var t7t=s(o4e);R_r=r(t7t,"xlnet"),t7t.forEach(t),P_r=r(GRe," \u2014 "),kQ=n(GRe,"A",{href:!0});var a7t=s(kQ);B_r=r(a7t,"TFXLNetLMHeadModel"),a7t.forEach(t),I_r=r(GRe," (XLNet model)"),GRe.forEach(t),le.forEach(t),N_r=i(_l),T(v7.$$.fragment,_l),_l.forEach(t),pl.forEach(t),Eje=i(f),Qd=n(f,"H2",{class:!0});var xGe=s(Qd);F7=n(xGe,"A",{id:!0,class:!0,href:!0});var n7t=s(F7);r4e=n(n7t,"SPAN",{});var s7t=s(r4e);T(ML.$$.fragment,s7t),s7t.forEach(t),n7t.forEach(t),q_r=i(xGe),t4e=n(xGe,"SPAN",{});var l7t=s(t4e);j_r=r(l7t,"TFAutoModelForCausalLM"),l7t.forEach(t),xGe.forEach(t),Cje=i(f),Zo=n(f,"DIV",{class:!0});var ul=s(Zo);T(EL.$$.fragment,ul),D_r=i(ul),Hd=n(ul,"P",{});var Fee=s(Hd);G_r=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SQ=n(Fee,"A",{href:!0});var i7t=s(SQ);O_r=r(i7t,"from_pretrained()"),i7t.forEach(t),V_r=r(Fee," class method or the "),RQ=n(Fee,"A",{href:!0});var d7t=s(RQ);X_r=r(d7t,"from_config()"),d7t.forEach(t),z_r=r(Fee,` class
method.`),Fee.forEach(t),W_r=i(ul),CL=n(ul,"P",{});var $Ge=s(CL);Q_r=r($Ge,"This class cannot be instantiated directly using "),a4e=n($Ge,"CODE",{});var c7t=s(a4e);H_r=r(c7t,"__init__()"),c7t.forEach(t),U_r=r($Ge," (throws an error)."),$Ge.forEach(t),J_r=i(ul),xt=n(ul,"DIV",{class:!0});var S0=s(xt);T(wL.$$.fragment,S0),Y_r=i(S0),n4e=n(S0,"P",{});var f7t=s(n4e);K_r=r(f7t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),f7t.forEach(t),Z_r=i(S0),Ud=n(S0,"P",{});var Tee=s(Ud);eur=r(Tee,`Note:
Loading a model from its configuration file does `),s4e=n(Tee,"STRONG",{});var m7t=s(s4e);our=r(m7t,"not"),m7t.forEach(t),rur=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=n(Tee,"A",{href:!0});var g7t=s(PQ);tur=r(g7t,"from_pretrained()"),g7t.forEach(t),aur=r(Tee," to load the model weights."),Tee.forEach(t),nur=i(S0),T(T7.$$.fragment,S0),S0.forEach(t),sur=i(ul),yr=n(ul,"DIV",{class:!0});var bl=s(yr);T(AL.$$.fragment,bl),lur=i(bl),l4e=n(bl,"P",{});var h7t=s(l4e);iur=r(h7t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),h7t.forEach(t),dur=i(bl),en=n(bl,"P",{});var R0=s(en);cur=r(R0,"The model class to instantiate is selected based on the "),i4e=n(R0,"CODE",{});var p7t=s(i4e);fur=r(p7t,"model_type"),p7t.forEach(t),mur=r(R0,` property of the config object (either
passed as an argument or loaded from `),d4e=n(R0,"CODE",{});var _7t=s(d4e);gur=r(_7t,"pretrained_model_name_or_path"),_7t.forEach(t),hur=r(R0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=n(R0,"CODE",{});var u7t=s(c4e);pur=r(u7t,"pretrained_model_name_or_path"),u7t.forEach(t),_ur=r(R0,":"),R0.forEach(t),uur=i(bl),Te=n(bl,"UL",{});var Ce=s(Te);M7=n(Ce,"LI",{});var ORe=s(M7);f4e=n(ORe,"STRONG",{});var b7t=s(f4e);bur=r(b7t,"bert"),b7t.forEach(t),vur=r(ORe," \u2014 "),BQ=n(ORe,"A",{href:!0});var v7t=s(BQ);Fur=r(v7t,"TFBertLMHeadModel"),v7t.forEach(t),Tur=r(ORe," (BERT model)"),ORe.forEach(t),Mur=i(Ce),E7=n(Ce,"LI",{});var VRe=s(E7);m4e=n(VRe,"STRONG",{});var F7t=s(m4e);Eur=r(F7t,"camembert"),F7t.forEach(t),Cur=r(VRe," \u2014 "),IQ=n(VRe,"A",{href:!0});var T7t=s(IQ);wur=r(T7t,"TFCamembertForCausalLM"),T7t.forEach(t),Aur=r(VRe," (CamemBERT model)"),VRe.forEach(t),yur=i(Ce),C7=n(Ce,"LI",{});var XRe=s(C7);g4e=n(XRe,"STRONG",{});var M7t=s(g4e);Lur=r(M7t,"ctrl"),M7t.forEach(t),xur=r(XRe," \u2014 "),NQ=n(XRe,"A",{href:!0});var E7t=s(NQ);$ur=r(E7t,"TFCTRLLMHeadModel"),E7t.forEach(t),kur=r(XRe," (CTRL model)"),XRe.forEach(t),Sur=i(Ce),w7=n(Ce,"LI",{});var zRe=s(w7);h4e=n(zRe,"STRONG",{});var C7t=s(h4e);Rur=r(C7t,"gpt2"),C7t.forEach(t),Pur=r(zRe," \u2014 "),qQ=n(zRe,"A",{href:!0});var w7t=s(qQ);Bur=r(w7t,"TFGPT2LMHeadModel"),w7t.forEach(t),Iur=r(zRe," (OpenAI GPT-2 model)"),zRe.forEach(t),Nur=i(Ce),A7=n(Ce,"LI",{});var WRe=s(A7);p4e=n(WRe,"STRONG",{});var A7t=s(p4e);qur=r(A7t,"gptj"),A7t.forEach(t),jur=r(WRe," \u2014 "),jQ=n(WRe,"A",{href:!0});var y7t=s(jQ);Dur=r(y7t,"TFGPTJForCausalLM"),y7t.forEach(t),Gur=r(WRe," (GPT-J model)"),WRe.forEach(t),Our=i(Ce),y7=n(Ce,"LI",{});var QRe=s(y7);_4e=n(QRe,"STRONG",{});var L7t=s(_4e);Vur=r(L7t,"openai-gpt"),L7t.forEach(t),Xur=r(QRe," \u2014 "),DQ=n(QRe,"A",{href:!0});var x7t=s(DQ);zur=r(x7t,"TFOpenAIGPTLMHeadModel"),x7t.forEach(t),Wur=r(QRe," (OpenAI GPT model)"),QRe.forEach(t),Qur=i(Ce),L7=n(Ce,"LI",{});var HRe=s(L7);u4e=n(HRe,"STRONG",{});var $7t=s(u4e);Hur=r($7t,"opt"),$7t.forEach(t),Uur=r(HRe," \u2014 "),GQ=n(HRe,"A",{href:!0});var k7t=s(GQ);Jur=r(k7t,"TFOPTForCausalLM"),k7t.forEach(t),Yur=r(HRe," (OPT model)"),HRe.forEach(t),Kur=i(Ce),x7=n(Ce,"LI",{});var URe=s(x7);b4e=n(URe,"STRONG",{});var S7t=s(b4e);Zur=r(S7t,"rembert"),S7t.forEach(t),e1r=r(URe," \u2014 "),OQ=n(URe,"A",{href:!0});var R7t=s(OQ);o1r=r(R7t,"TFRemBertForCausalLM"),R7t.forEach(t),r1r=r(URe," (RemBERT model)"),URe.forEach(t),t1r=i(Ce),$7=n(Ce,"LI",{});var JRe=s($7);v4e=n(JRe,"STRONG",{});var P7t=s(v4e);a1r=r(P7t,"roberta"),P7t.forEach(t),n1r=r(JRe," \u2014 "),VQ=n(JRe,"A",{href:!0});var B7t=s(VQ);s1r=r(B7t,"TFRobertaForCausalLM"),B7t.forEach(t),l1r=r(JRe," (RoBERTa model)"),JRe.forEach(t),i1r=i(Ce),k7=n(Ce,"LI",{});var YRe=s(k7);F4e=n(YRe,"STRONG",{});var I7t=s(F4e);d1r=r(I7t,"roformer"),I7t.forEach(t),c1r=r(YRe," \u2014 "),XQ=n(YRe,"A",{href:!0});var N7t=s(XQ);f1r=r(N7t,"TFRoFormerForCausalLM"),N7t.forEach(t),m1r=r(YRe," (RoFormer model)"),YRe.forEach(t),g1r=i(Ce),S7=n(Ce,"LI",{});var KRe=s(S7);T4e=n(KRe,"STRONG",{});var q7t=s(T4e);h1r=r(q7t,"transfo-xl"),q7t.forEach(t),p1r=r(KRe," \u2014 "),zQ=n(KRe,"A",{href:!0});var j7t=s(zQ);_1r=r(j7t,"TFTransfoXLLMHeadModel"),j7t.forEach(t),u1r=r(KRe," (Transformer-XL model)"),KRe.forEach(t),b1r=i(Ce),R7=n(Ce,"LI",{});var ZRe=s(R7);M4e=n(ZRe,"STRONG",{});var D7t=s(M4e);v1r=r(D7t,"xlm"),D7t.forEach(t),F1r=r(ZRe," \u2014 "),WQ=n(ZRe,"A",{href:!0});var G7t=s(WQ);T1r=r(G7t,"TFXLMWithLMHeadModel"),G7t.forEach(t),M1r=r(ZRe," (XLM model)"),ZRe.forEach(t),E1r=i(Ce),P7=n(Ce,"LI",{});var ePe=s(P7);E4e=n(ePe,"STRONG",{});var O7t=s(E4e);C1r=r(O7t,"xlnet"),O7t.forEach(t),w1r=r(ePe," \u2014 "),QQ=n(ePe,"A",{href:!0});var V7t=s(QQ);A1r=r(V7t,"TFXLNetLMHeadModel"),V7t.forEach(t),y1r=r(ePe," (XLNet model)"),ePe.forEach(t),Ce.forEach(t),L1r=i(bl),T(B7.$$.fragment,bl),bl.forEach(t),ul.forEach(t),wje=i(f),Jd=n(f,"H2",{class:!0});var kGe=s(Jd);I7=n(kGe,"A",{id:!0,class:!0,href:!0});var X7t=s(I7);C4e=n(X7t,"SPAN",{});var z7t=s(C4e);T(yL.$$.fragment,z7t),z7t.forEach(t),X7t.forEach(t),x1r=i(kGe),w4e=n(kGe,"SPAN",{});var W7t=s(w4e);$1r=r(W7t,"TFAutoModelForImageClassification"),W7t.forEach(t),kGe.forEach(t),Aje=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(LL.$$.fragment,vl),k1r=i(vl),Yd=n(vl,"P",{});var Mee=s(Yd);S1r=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),HQ=n(Mee,"A",{href:!0});var Q7t=s(HQ);R1r=r(Q7t,"from_pretrained()"),Q7t.forEach(t),P1r=r(Mee," class method or the "),UQ=n(Mee,"A",{href:!0});var H7t=s(UQ);B1r=r(H7t,"from_config()"),H7t.forEach(t),I1r=r(Mee,` class
method.`),Mee.forEach(t),N1r=i(vl),xL=n(vl,"P",{});var SGe=s(xL);q1r=r(SGe,"This class cannot be instantiated directly using "),A4e=n(SGe,"CODE",{});var U7t=s(A4e);j1r=r(U7t,"__init__()"),U7t.forEach(t),D1r=r(SGe," (throws an error)."),SGe.forEach(t),G1r=i(vl),$t=n(vl,"DIV",{class:!0});var P0=s($t);T($L.$$.fragment,P0),O1r=i(P0),y4e=n(P0,"P",{});var J7t=s(y4e);V1r=r(J7t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),J7t.forEach(t),X1r=i(P0),Kd=n(P0,"P",{});var Eee=s(Kd);z1r=r(Eee,`Note:
Loading a model from its configuration file does `),L4e=n(Eee,"STRONG",{});var Y7t=s(L4e);W1r=r(Y7t,"not"),Y7t.forEach(t),Q1r=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(Eee,"A",{href:!0});var K7t=s(JQ);H1r=r(K7t,"from_pretrained()"),K7t.forEach(t),U1r=r(Eee," to load the model weights."),Eee.forEach(t),J1r=i(P0),T(N7.$$.fragment,P0),P0.forEach(t),Y1r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(kL.$$.fragment,Fl),K1r=i(Fl),x4e=n(Fl,"P",{});var Z7t=s(x4e);Z1r=r(Z7t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Z7t.forEach(t),ebr=i(Fl),on=n(Fl,"P",{});var B0=s(on);obr=r(B0,"The model class to instantiate is selected based on the "),$4e=n(B0,"CODE",{});var e9t=s($4e);rbr=r(e9t,"model_type"),e9t.forEach(t),tbr=r(B0,` property of the config object (either
passed as an argument or loaded from `),k4e=n(B0,"CODE",{});var o9t=s(k4e);abr=r(o9t,"pretrained_model_name_or_path"),o9t.forEach(t),nbr=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=n(B0,"CODE",{});var r9t=s(S4e);sbr=r(r9t,"pretrained_model_name_or_path"),r9t.forEach(t),lbr=r(B0,":"),B0.forEach(t),ibr=i(Fl),rn=n(Fl,"UL",{});var I0=s(rn);q7=n(I0,"LI",{});var oPe=s(q7);R4e=n(oPe,"STRONG",{});var t9t=s(R4e);dbr=r(t9t,"convnext"),t9t.forEach(t),cbr=r(oPe," \u2014 "),YQ=n(oPe,"A",{href:!0});var a9t=s(YQ);fbr=r(a9t,"TFConvNextForImageClassification"),a9t.forEach(t),mbr=r(oPe," (ConvNext model)"),oPe.forEach(t),gbr=i(I0),j7=n(I0,"LI",{});var rPe=s(j7);P4e=n(rPe,"STRONG",{});var n9t=s(P4e);hbr=r(n9t,"data2vec-vision"),n9t.forEach(t),pbr=r(rPe," \u2014 "),KQ=n(rPe,"A",{href:!0});var s9t=s(KQ);_br=r(s9t,"TFData2VecVisionForImageClassification"),s9t.forEach(t),ubr=r(rPe," (Data2VecVision model)"),rPe.forEach(t),bbr=i(I0),D7=n(I0,"LI",{});var tPe=s(D7);B4e=n(tPe,"STRONG",{});var l9t=s(B4e);vbr=r(l9t,"swin"),l9t.forEach(t),Fbr=r(tPe," \u2014 "),ZQ=n(tPe,"A",{href:!0});var i9t=s(ZQ);Tbr=r(i9t,"TFSwinForImageClassification"),i9t.forEach(t),Mbr=r(tPe," (Swin model)"),tPe.forEach(t),Ebr=i(I0),G7=n(I0,"LI",{});var aPe=s(G7);I4e=n(aPe,"STRONG",{});var d9t=s(I4e);Cbr=r(d9t,"vit"),d9t.forEach(t),wbr=r(aPe," \u2014 "),eH=n(aPe,"A",{href:!0});var c9t=s(eH);Abr=r(c9t,"TFViTForImageClassification"),c9t.forEach(t),ybr=r(aPe," (ViT model)"),aPe.forEach(t),I0.forEach(t),Lbr=i(Fl),T(O7.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),yje=i(f),Zd=n(f,"H2",{class:!0});var RGe=s(Zd);V7=n(RGe,"A",{id:!0,class:!0,href:!0});var f9t=s(V7);N4e=n(f9t,"SPAN",{});var m9t=s(N4e);T(SL.$$.fragment,m9t),m9t.forEach(t),f9t.forEach(t),xbr=i(RGe),q4e=n(RGe,"SPAN",{});var g9t=s(q4e);$br=r(g9t,"TFAutoModelForMaskedLM"),g9t.forEach(t),RGe.forEach(t),Lje=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(RL.$$.fragment,Tl),kbr=i(Tl),ec=n(Tl,"P",{});var Cee=s(ec);Sbr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),oH=n(Cee,"A",{href:!0});var h9t=s(oH);Rbr=r(h9t,"from_pretrained()"),h9t.forEach(t),Pbr=r(Cee," class method or the "),rH=n(Cee,"A",{href:!0});var p9t=s(rH);Bbr=r(p9t,"from_config()"),p9t.forEach(t),Ibr=r(Cee,` class
method.`),Cee.forEach(t),Nbr=i(Tl),PL=n(Tl,"P",{});var PGe=s(PL);qbr=r(PGe,"This class cannot be instantiated directly using "),j4e=n(PGe,"CODE",{});var _9t=s(j4e);jbr=r(_9t,"__init__()"),_9t.forEach(t),Dbr=r(PGe," (throws an error)."),PGe.forEach(t),Gbr=i(Tl),kt=n(Tl,"DIV",{class:!0});var N0=s(kt);T(BL.$$.fragment,N0),Obr=i(N0),D4e=n(N0,"P",{});var u9t=s(D4e);Vbr=r(u9t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),u9t.forEach(t),Xbr=i(N0),oc=n(N0,"P",{});var wee=s(oc);zbr=r(wee,`Note:
Loading a model from its configuration file does `),G4e=n(wee,"STRONG",{});var b9t=s(G4e);Wbr=r(b9t,"not"),b9t.forEach(t),Qbr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=n(wee,"A",{href:!0});var v9t=s(tH);Hbr=r(v9t,"from_pretrained()"),v9t.forEach(t),Ubr=r(wee," to load the model weights."),wee.forEach(t),Jbr=i(N0),T(X7.$$.fragment,N0),N0.forEach(t),Ybr=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(IL.$$.fragment,Ml),Kbr=i(Ml),O4e=n(Ml,"P",{});var F9t=s(O4e);Zbr=r(F9t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),F9t.forEach(t),e2r=i(Ml),tn=n(Ml,"P",{});var q0=s(tn);o2r=r(q0,"The model class to instantiate is selected based on the "),V4e=n(q0,"CODE",{});var T9t=s(V4e);r2r=r(T9t,"model_type"),T9t.forEach(t),t2r=r(q0,` property of the config object (either
passed as an argument or loaded from `),X4e=n(q0,"CODE",{});var M9t=s(X4e);a2r=r(M9t,"pretrained_model_name_or_path"),M9t.forEach(t),n2r=r(q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=n(q0,"CODE",{});var E9t=s(z4e);s2r=r(E9t,"pretrained_model_name_or_path"),E9t.forEach(t),l2r=r(q0,":"),q0.forEach(t),i2r=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);z7=n(fe,"LI",{});var nPe=s(z7);W4e=n(nPe,"STRONG",{});var C9t=s(W4e);d2r=r(C9t,"albert"),C9t.forEach(t),c2r=r(nPe," \u2014 "),aH=n(nPe,"A",{href:!0});var w9t=s(aH);f2r=r(w9t,"TFAlbertForMaskedLM"),w9t.forEach(t),m2r=r(nPe," (ALBERT model)"),nPe.forEach(t),g2r=i(fe),W7=n(fe,"LI",{});var sPe=s(W7);Q4e=n(sPe,"STRONG",{});var A9t=s(Q4e);h2r=r(A9t,"bert"),A9t.forEach(t),p2r=r(sPe," \u2014 "),nH=n(sPe,"A",{href:!0});var y9t=s(nH);_2r=r(y9t,"TFBertForMaskedLM"),y9t.forEach(t),u2r=r(sPe," (BERT model)"),sPe.forEach(t),b2r=i(fe),Q7=n(fe,"LI",{});var lPe=s(Q7);H4e=n(lPe,"STRONG",{});var L9t=s(H4e);v2r=r(L9t,"camembert"),L9t.forEach(t),F2r=r(lPe," \u2014 "),sH=n(lPe,"A",{href:!0});var x9t=s(sH);T2r=r(x9t,"TFCamembertForMaskedLM"),x9t.forEach(t),M2r=r(lPe," (CamemBERT model)"),lPe.forEach(t),E2r=i(fe),H7=n(fe,"LI",{});var iPe=s(H7);U4e=n(iPe,"STRONG",{});var $9t=s(U4e);C2r=r($9t,"convbert"),$9t.forEach(t),w2r=r(iPe," \u2014 "),lH=n(iPe,"A",{href:!0});var k9t=s(lH);A2r=r(k9t,"TFConvBertForMaskedLM"),k9t.forEach(t),y2r=r(iPe," (ConvBERT model)"),iPe.forEach(t),L2r=i(fe),U7=n(fe,"LI",{});var dPe=s(U7);J4e=n(dPe,"STRONG",{});var S9t=s(J4e);x2r=r(S9t,"deberta"),S9t.forEach(t),$2r=r(dPe," \u2014 "),iH=n(dPe,"A",{href:!0});var R9t=s(iH);k2r=r(R9t,"TFDebertaForMaskedLM"),R9t.forEach(t),S2r=r(dPe," (DeBERTa model)"),dPe.forEach(t),R2r=i(fe),J7=n(fe,"LI",{});var cPe=s(J7);Y4e=n(cPe,"STRONG",{});var P9t=s(Y4e);P2r=r(P9t,"deberta-v2"),P9t.forEach(t),B2r=r(cPe," \u2014 "),dH=n(cPe,"A",{href:!0});var B9t=s(dH);I2r=r(B9t,"TFDebertaV2ForMaskedLM"),B9t.forEach(t),N2r=r(cPe," (DeBERTa-v2 model)"),cPe.forEach(t),q2r=i(fe),Y7=n(fe,"LI",{});var fPe=s(Y7);K4e=n(fPe,"STRONG",{});var I9t=s(K4e);j2r=r(I9t,"distilbert"),I9t.forEach(t),D2r=r(fPe," \u2014 "),cH=n(fPe,"A",{href:!0});var N9t=s(cH);G2r=r(N9t,"TFDistilBertForMaskedLM"),N9t.forEach(t),O2r=r(fPe," (DistilBERT model)"),fPe.forEach(t),V2r=i(fe),K7=n(fe,"LI",{});var mPe=s(K7);Z4e=n(mPe,"STRONG",{});var q9t=s(Z4e);X2r=r(q9t,"electra"),q9t.forEach(t),z2r=r(mPe," \u2014 "),fH=n(mPe,"A",{href:!0});var j9t=s(fH);W2r=r(j9t,"TFElectraForMaskedLM"),j9t.forEach(t),Q2r=r(mPe," (ELECTRA model)"),mPe.forEach(t),H2r=i(fe),Z7=n(fe,"LI",{});var gPe=s(Z7);e5e=n(gPe,"STRONG",{});var D9t=s(e5e);U2r=r(D9t,"flaubert"),D9t.forEach(t),J2r=r(gPe," \u2014 "),mH=n(gPe,"A",{href:!0});var G9t=s(mH);Y2r=r(G9t,"TFFlaubertWithLMHeadModel"),G9t.forEach(t),K2r=r(gPe," (FlauBERT model)"),gPe.forEach(t),Z2r=i(fe),e9=n(fe,"LI",{});var hPe=s(e9);o5e=n(hPe,"STRONG",{});var O9t=s(o5e);e4r=r(O9t,"funnel"),O9t.forEach(t),o4r=r(hPe," \u2014 "),gH=n(hPe,"A",{href:!0});var V9t=s(gH);r4r=r(V9t,"TFFunnelForMaskedLM"),V9t.forEach(t),t4r=r(hPe," (Funnel Transformer model)"),hPe.forEach(t),a4r=i(fe),o9=n(fe,"LI",{});var pPe=s(o9);r5e=n(pPe,"STRONG",{});var X9t=s(r5e);n4r=r(X9t,"layoutlm"),X9t.forEach(t),s4r=r(pPe," \u2014 "),hH=n(pPe,"A",{href:!0});var z9t=s(hH);l4r=r(z9t,"TFLayoutLMForMaskedLM"),z9t.forEach(t),i4r=r(pPe," (LayoutLM model)"),pPe.forEach(t),d4r=i(fe),r9=n(fe,"LI",{});var _Pe=s(r9);t5e=n(_Pe,"STRONG",{});var W9t=s(t5e);c4r=r(W9t,"longformer"),W9t.forEach(t),f4r=r(_Pe," \u2014 "),pH=n(_Pe,"A",{href:!0});var Q9t=s(pH);m4r=r(Q9t,"TFLongformerForMaskedLM"),Q9t.forEach(t),g4r=r(_Pe," (Longformer model)"),_Pe.forEach(t),h4r=i(fe),t9=n(fe,"LI",{});var uPe=s(t9);a5e=n(uPe,"STRONG",{});var H9t=s(a5e);p4r=r(H9t,"mobilebert"),H9t.forEach(t),_4r=r(uPe," \u2014 "),_H=n(uPe,"A",{href:!0});var U9t=s(_H);u4r=r(U9t,"TFMobileBertForMaskedLM"),U9t.forEach(t),b4r=r(uPe," (MobileBERT model)"),uPe.forEach(t),v4r=i(fe),a9=n(fe,"LI",{});var bPe=s(a9);n5e=n(bPe,"STRONG",{});var J9t=s(n5e);F4r=r(J9t,"mpnet"),J9t.forEach(t),T4r=r(bPe," \u2014 "),uH=n(bPe,"A",{href:!0});var Y9t=s(uH);M4r=r(Y9t,"TFMPNetForMaskedLM"),Y9t.forEach(t),E4r=r(bPe," (MPNet model)"),bPe.forEach(t),C4r=i(fe),n9=n(fe,"LI",{});var vPe=s(n9);s5e=n(vPe,"STRONG",{});var K9t=s(s5e);w4r=r(K9t,"rembert"),K9t.forEach(t),A4r=r(vPe," \u2014 "),bH=n(vPe,"A",{href:!0});var Z9t=s(bH);y4r=r(Z9t,"TFRemBertForMaskedLM"),Z9t.forEach(t),L4r=r(vPe," (RemBERT model)"),vPe.forEach(t),x4r=i(fe),s9=n(fe,"LI",{});var FPe=s(s9);l5e=n(FPe,"STRONG",{});var eMt=s(l5e);$4r=r(eMt,"roberta"),eMt.forEach(t),k4r=r(FPe," \u2014 "),vH=n(FPe,"A",{href:!0});var oMt=s(vH);S4r=r(oMt,"TFRobertaForMaskedLM"),oMt.forEach(t),R4r=r(FPe," (RoBERTa model)"),FPe.forEach(t),P4r=i(fe),l9=n(fe,"LI",{});var TPe=s(l9);i5e=n(TPe,"STRONG",{});var rMt=s(i5e);B4r=r(rMt,"roformer"),rMt.forEach(t),I4r=r(TPe," \u2014 "),FH=n(TPe,"A",{href:!0});var tMt=s(FH);N4r=r(tMt,"TFRoFormerForMaskedLM"),tMt.forEach(t),q4r=r(TPe," (RoFormer model)"),TPe.forEach(t),j4r=i(fe),i9=n(fe,"LI",{});var MPe=s(i9);d5e=n(MPe,"STRONG",{});var aMt=s(d5e);D4r=r(aMt,"tapas"),aMt.forEach(t),G4r=r(MPe," \u2014 "),TH=n(MPe,"A",{href:!0});var nMt=s(TH);O4r=r(nMt,"TFTapasForMaskedLM"),nMt.forEach(t),V4r=r(MPe," (TAPAS model)"),MPe.forEach(t),X4r=i(fe),d9=n(fe,"LI",{});var EPe=s(d9);c5e=n(EPe,"STRONG",{});var sMt=s(c5e);z4r=r(sMt,"xlm"),sMt.forEach(t),W4r=r(EPe," \u2014 "),MH=n(EPe,"A",{href:!0});var lMt=s(MH);Q4r=r(lMt,"TFXLMWithLMHeadModel"),lMt.forEach(t),H4r=r(EPe," (XLM model)"),EPe.forEach(t),U4r=i(fe),c9=n(fe,"LI",{});var CPe=s(c9);f5e=n(CPe,"STRONG",{});var iMt=s(f5e);J4r=r(iMt,"xlm-roberta"),iMt.forEach(t),Y4r=r(CPe," \u2014 "),EH=n(CPe,"A",{href:!0});var dMt=s(EH);K4r=r(dMt,"TFXLMRobertaForMaskedLM"),dMt.forEach(t),Z4r=r(CPe," (XLM-RoBERTa model)"),CPe.forEach(t),fe.forEach(t),e5r=i(Ml),T(f9.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),xje=i(f),rc=n(f,"H2",{class:!0});var BGe=s(rc);m9=n(BGe,"A",{id:!0,class:!0,href:!0});var cMt=s(m9);m5e=n(cMt,"SPAN",{});var fMt=s(m5e);T(NL.$$.fragment,fMt),fMt.forEach(t),cMt.forEach(t),o5r=i(BGe),g5e=n(BGe,"SPAN",{});var mMt=s(g5e);r5r=r(mMt,"TFAutoModelForSeq2SeqLM"),mMt.forEach(t),BGe.forEach(t),$je=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(qL.$$.fragment,El),t5r=i(El),tc=n(El,"P",{});var Aee=s(tc);a5r=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),CH=n(Aee,"A",{href:!0});var gMt=s(CH);n5r=r(gMt,"from_pretrained()"),gMt.forEach(t),s5r=r(Aee," class method or the "),wH=n(Aee,"A",{href:!0});var hMt=s(wH);l5r=r(hMt,"from_config()"),hMt.forEach(t),i5r=r(Aee,` class
method.`),Aee.forEach(t),d5r=i(El),jL=n(El,"P",{});var IGe=s(jL);c5r=r(IGe,"This class cannot be instantiated directly using "),h5e=n(IGe,"CODE",{});var pMt=s(h5e);f5r=r(pMt,"__init__()"),pMt.forEach(t),m5r=r(IGe," (throws an error)."),IGe.forEach(t),g5r=i(El),St=n(El,"DIV",{class:!0});var j0=s(St);T(DL.$$.fragment,j0),h5r=i(j0),p5e=n(j0,"P",{});var _Mt=s(p5e);p5r=r(_Mt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_Mt.forEach(t),_5r=i(j0),ac=n(j0,"P",{});var yee=s(ac);u5r=r(yee,`Note:
Loading a model from its configuration file does `),_5e=n(yee,"STRONG",{});var uMt=s(_5e);b5r=r(uMt,"not"),uMt.forEach(t),v5r=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=n(yee,"A",{href:!0});var bMt=s(AH);F5r=r(bMt,"from_pretrained()"),bMt.forEach(t),T5r=r(yee," to load the model weights."),yee.forEach(t),M5r=i(j0),T(g9.$$.fragment,j0),j0.forEach(t),E5r=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(GL.$$.fragment,Cl),C5r=i(Cl),u5e=n(Cl,"P",{});var vMt=s(u5e);w5r=r(vMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),vMt.forEach(t),A5r=i(Cl),an=n(Cl,"P",{});var D0=s(an);y5r=r(D0,"The model class to instantiate is selected based on the "),b5e=n(D0,"CODE",{});var FMt=s(b5e);L5r=r(FMt,"model_type"),FMt.forEach(t),x5r=r(D0,` property of the config object (either
passed as an argument or loaded from `),v5e=n(D0,"CODE",{});var TMt=s(v5e);$5r=r(TMt,"pretrained_model_name_or_path"),TMt.forEach(t),k5r=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=n(D0,"CODE",{});var MMt=s(F5e);S5r=r(MMt,"pretrained_model_name_or_path"),MMt.forEach(t),R5r=r(D0,":"),D0.forEach(t),P5r=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);h9=n(Be,"LI",{});var wPe=s(h9);T5e=n(wPe,"STRONG",{});var EMt=s(T5e);B5r=r(EMt,"bart"),EMt.forEach(t),I5r=r(wPe," \u2014 "),yH=n(wPe,"A",{href:!0});var CMt=s(yH);N5r=r(CMt,"TFBartForConditionalGeneration"),CMt.forEach(t),q5r=r(wPe," (BART model)"),wPe.forEach(t),j5r=i(Be),p9=n(Be,"LI",{});var APe=s(p9);M5e=n(APe,"STRONG",{});var wMt=s(M5e);D5r=r(wMt,"blenderbot"),wMt.forEach(t),G5r=r(APe," \u2014 "),LH=n(APe,"A",{href:!0});var AMt=s(LH);O5r=r(AMt,"TFBlenderbotForConditionalGeneration"),AMt.forEach(t),V5r=r(APe," (Blenderbot model)"),APe.forEach(t),X5r=i(Be),_9=n(Be,"LI",{});var yPe=s(_9);E5e=n(yPe,"STRONG",{});var yMt=s(E5e);z5r=r(yMt,"blenderbot-small"),yMt.forEach(t),W5r=r(yPe," \u2014 "),xH=n(yPe,"A",{href:!0});var LMt=s(xH);Q5r=r(LMt,"TFBlenderbotSmallForConditionalGeneration"),LMt.forEach(t),H5r=r(yPe," (BlenderbotSmall model)"),yPe.forEach(t),U5r=i(Be),u9=n(Be,"LI",{});var LPe=s(u9);C5e=n(LPe,"STRONG",{});var xMt=s(C5e);J5r=r(xMt,"encoder-decoder"),xMt.forEach(t),Y5r=r(LPe," \u2014 "),$H=n(LPe,"A",{href:!0});var $Mt=s($H);K5r=r($Mt,"TFEncoderDecoderModel"),$Mt.forEach(t),Z5r=r(LPe," (Encoder decoder model)"),LPe.forEach(t),evr=i(Be),b9=n(Be,"LI",{});var xPe=s(b9);w5e=n(xPe,"STRONG",{});var kMt=s(w5e);ovr=r(kMt,"led"),kMt.forEach(t),rvr=r(xPe," \u2014 "),kH=n(xPe,"A",{href:!0});var SMt=s(kH);tvr=r(SMt,"TFLEDForConditionalGeneration"),SMt.forEach(t),avr=r(xPe," (LED model)"),xPe.forEach(t),nvr=i(Be),v9=n(Be,"LI",{});var $Pe=s(v9);A5e=n($Pe,"STRONG",{});var RMt=s(A5e);svr=r(RMt,"marian"),RMt.forEach(t),lvr=r($Pe," \u2014 "),SH=n($Pe,"A",{href:!0});var PMt=s(SH);ivr=r(PMt,"TFMarianMTModel"),PMt.forEach(t),dvr=r($Pe," (Marian model)"),$Pe.forEach(t),cvr=i(Be),F9=n(Be,"LI",{});var kPe=s(F9);y5e=n(kPe,"STRONG",{});var BMt=s(y5e);fvr=r(BMt,"mbart"),BMt.forEach(t),mvr=r(kPe," \u2014 "),RH=n(kPe,"A",{href:!0});var IMt=s(RH);gvr=r(IMt,"TFMBartForConditionalGeneration"),IMt.forEach(t),hvr=r(kPe," (mBART model)"),kPe.forEach(t),pvr=i(Be),T9=n(Be,"LI",{});var SPe=s(T9);L5e=n(SPe,"STRONG",{});var NMt=s(L5e);_vr=r(NMt,"mt5"),NMt.forEach(t),uvr=r(SPe," \u2014 "),PH=n(SPe,"A",{href:!0});var qMt=s(PH);bvr=r(qMt,"TFMT5ForConditionalGeneration"),qMt.forEach(t),vvr=r(SPe," (mT5 model)"),SPe.forEach(t),Fvr=i(Be),M9=n(Be,"LI",{});var RPe=s(M9);x5e=n(RPe,"STRONG",{});var jMt=s(x5e);Tvr=r(jMt,"pegasus"),jMt.forEach(t),Mvr=r(RPe," \u2014 "),BH=n(RPe,"A",{href:!0});var DMt=s(BH);Evr=r(DMt,"TFPegasusForConditionalGeneration"),DMt.forEach(t),Cvr=r(RPe," (Pegasus model)"),RPe.forEach(t),wvr=i(Be),E9=n(Be,"LI",{});var PPe=s(E9);$5e=n(PPe,"STRONG",{});var GMt=s($5e);Avr=r(GMt,"t5"),GMt.forEach(t),yvr=r(PPe," \u2014 "),IH=n(PPe,"A",{href:!0});var OMt=s(IH);Lvr=r(OMt,"TFT5ForConditionalGeneration"),OMt.forEach(t),xvr=r(PPe," (T5 model)"),PPe.forEach(t),Be.forEach(t),$vr=i(Cl),T(C9.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),kje=i(f),nc=n(f,"H2",{class:!0});var NGe=s(nc);w9=n(NGe,"A",{id:!0,class:!0,href:!0});var VMt=s(w9);k5e=n(VMt,"SPAN",{});var XMt=s(k5e);T(OL.$$.fragment,XMt),XMt.forEach(t),VMt.forEach(t),kvr=i(NGe),S5e=n(NGe,"SPAN",{});var zMt=s(S5e);Svr=r(zMt,"TFAutoModelForSequenceClassification"),zMt.forEach(t),NGe.forEach(t),Sje=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(VL.$$.fragment,wl),Rvr=i(wl),sc=n(wl,"P",{});var Lee=s(sc);Pvr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NH=n(Lee,"A",{href:!0});var WMt=s(NH);Bvr=r(WMt,"from_pretrained()"),WMt.forEach(t),Ivr=r(Lee," class method or the "),qH=n(Lee,"A",{href:!0});var QMt=s(qH);Nvr=r(QMt,"from_config()"),QMt.forEach(t),qvr=r(Lee,` class
method.`),Lee.forEach(t),jvr=i(wl),XL=n(wl,"P",{});var qGe=s(XL);Dvr=r(qGe,"This class cannot be instantiated directly using "),R5e=n(qGe,"CODE",{});var HMt=s(R5e);Gvr=r(HMt,"__init__()"),HMt.forEach(t),Ovr=r(qGe," (throws an error)."),qGe.forEach(t),Vvr=i(wl),Rt=n(wl,"DIV",{class:!0});var G0=s(Rt);T(zL.$$.fragment,G0),Xvr=i(G0),P5e=n(G0,"P",{});var UMt=s(P5e);zvr=r(UMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),UMt.forEach(t),Wvr=i(G0),lc=n(G0,"P",{});var xee=s(lc);Qvr=r(xee,`Note:
Loading a model from its configuration file does `),B5e=n(xee,"STRONG",{});var JMt=s(B5e);Hvr=r(JMt,"not"),JMt.forEach(t),Uvr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=n(xee,"A",{href:!0});var YMt=s(jH);Jvr=r(YMt,"from_pretrained()"),YMt.forEach(t),Yvr=r(xee," to load the model weights."),xee.forEach(t),Kvr=i(G0),T(A9.$$.fragment,G0),G0.forEach(t),Zvr=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(WL.$$.fragment,Al),eFr=i(Al),I5e=n(Al,"P",{});var KMt=s(I5e);oFr=r(KMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),KMt.forEach(t),rFr=i(Al),nn=n(Al,"P",{});var O0=s(nn);tFr=r(O0,"The model class to instantiate is selected based on the "),N5e=n(O0,"CODE",{});var ZMt=s(N5e);aFr=r(ZMt,"model_type"),ZMt.forEach(t),nFr=r(O0,` property of the config object (either
passed as an argument or loaded from `),q5e=n(O0,"CODE",{});var eEt=s(q5e);sFr=r(eEt,"pretrained_model_name_or_path"),eEt.forEach(t),lFr=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j5e=n(O0,"CODE",{});var oEt=s(j5e);iFr=r(oEt,"pretrained_model_name_or_path"),oEt.forEach(t),dFr=r(O0,":"),O0.forEach(t),cFr=i(Al),oe=n(Al,"UL",{});var ae=s(oe);y9=n(ae,"LI",{});var BPe=s(y9);D5e=n(BPe,"STRONG",{});var rEt=s(D5e);fFr=r(rEt,"albert"),rEt.forEach(t),mFr=r(BPe," \u2014 "),DH=n(BPe,"A",{href:!0});var tEt=s(DH);gFr=r(tEt,"TFAlbertForSequenceClassification"),tEt.forEach(t),hFr=r(BPe," (ALBERT model)"),BPe.forEach(t),pFr=i(ae),L9=n(ae,"LI",{});var IPe=s(L9);G5e=n(IPe,"STRONG",{});var aEt=s(G5e);_Fr=r(aEt,"bert"),aEt.forEach(t),uFr=r(IPe," \u2014 "),GH=n(IPe,"A",{href:!0});var nEt=s(GH);bFr=r(nEt,"TFBertForSequenceClassification"),nEt.forEach(t),vFr=r(IPe," (BERT model)"),IPe.forEach(t),FFr=i(ae),x9=n(ae,"LI",{});var NPe=s(x9);O5e=n(NPe,"STRONG",{});var sEt=s(O5e);TFr=r(sEt,"camembert"),sEt.forEach(t),MFr=r(NPe," \u2014 "),OH=n(NPe,"A",{href:!0});var lEt=s(OH);EFr=r(lEt,"TFCamembertForSequenceClassification"),lEt.forEach(t),CFr=r(NPe," (CamemBERT model)"),NPe.forEach(t),wFr=i(ae),$9=n(ae,"LI",{});var qPe=s($9);V5e=n(qPe,"STRONG",{});var iEt=s(V5e);AFr=r(iEt,"convbert"),iEt.forEach(t),yFr=r(qPe," \u2014 "),VH=n(qPe,"A",{href:!0});var dEt=s(VH);LFr=r(dEt,"TFConvBertForSequenceClassification"),dEt.forEach(t),xFr=r(qPe," (ConvBERT model)"),qPe.forEach(t),$Fr=i(ae),k9=n(ae,"LI",{});var jPe=s(k9);X5e=n(jPe,"STRONG",{});var cEt=s(X5e);kFr=r(cEt,"ctrl"),cEt.forEach(t),SFr=r(jPe," \u2014 "),XH=n(jPe,"A",{href:!0});var fEt=s(XH);RFr=r(fEt,"TFCTRLForSequenceClassification"),fEt.forEach(t),PFr=r(jPe," (CTRL model)"),jPe.forEach(t),BFr=i(ae),S9=n(ae,"LI",{});var DPe=s(S9);z5e=n(DPe,"STRONG",{});var mEt=s(z5e);IFr=r(mEt,"deberta"),mEt.forEach(t),NFr=r(DPe," \u2014 "),zH=n(DPe,"A",{href:!0});var gEt=s(zH);qFr=r(gEt,"TFDebertaForSequenceClassification"),gEt.forEach(t),jFr=r(DPe," (DeBERTa model)"),DPe.forEach(t),DFr=i(ae),R9=n(ae,"LI",{});var GPe=s(R9);W5e=n(GPe,"STRONG",{});var hEt=s(W5e);GFr=r(hEt,"deberta-v2"),hEt.forEach(t),OFr=r(GPe," \u2014 "),WH=n(GPe,"A",{href:!0});var pEt=s(WH);VFr=r(pEt,"TFDebertaV2ForSequenceClassification"),pEt.forEach(t),XFr=r(GPe," (DeBERTa-v2 model)"),GPe.forEach(t),zFr=i(ae),P9=n(ae,"LI",{});var OPe=s(P9);Q5e=n(OPe,"STRONG",{});var _Et=s(Q5e);WFr=r(_Et,"distilbert"),_Et.forEach(t),QFr=r(OPe," \u2014 "),QH=n(OPe,"A",{href:!0});var uEt=s(QH);HFr=r(uEt,"TFDistilBertForSequenceClassification"),uEt.forEach(t),UFr=r(OPe," (DistilBERT model)"),OPe.forEach(t),JFr=i(ae),B9=n(ae,"LI",{});var VPe=s(B9);H5e=n(VPe,"STRONG",{});var bEt=s(H5e);YFr=r(bEt,"electra"),bEt.forEach(t),KFr=r(VPe," \u2014 "),HH=n(VPe,"A",{href:!0});var vEt=s(HH);ZFr=r(vEt,"TFElectraForSequenceClassification"),vEt.forEach(t),eTr=r(VPe," (ELECTRA model)"),VPe.forEach(t),oTr=i(ae),I9=n(ae,"LI",{});var XPe=s(I9);U5e=n(XPe,"STRONG",{});var FEt=s(U5e);rTr=r(FEt,"flaubert"),FEt.forEach(t),tTr=r(XPe," \u2014 "),UH=n(XPe,"A",{href:!0});var TEt=s(UH);aTr=r(TEt,"TFFlaubertForSequenceClassification"),TEt.forEach(t),nTr=r(XPe," (FlauBERT model)"),XPe.forEach(t),sTr=i(ae),N9=n(ae,"LI",{});var zPe=s(N9);J5e=n(zPe,"STRONG",{});var MEt=s(J5e);lTr=r(MEt,"funnel"),MEt.forEach(t),iTr=r(zPe," \u2014 "),JH=n(zPe,"A",{href:!0});var EEt=s(JH);dTr=r(EEt,"TFFunnelForSequenceClassification"),EEt.forEach(t),cTr=r(zPe," (Funnel Transformer model)"),zPe.forEach(t),fTr=i(ae),q9=n(ae,"LI",{});var WPe=s(q9);Y5e=n(WPe,"STRONG",{});var CEt=s(Y5e);mTr=r(CEt,"gpt2"),CEt.forEach(t),gTr=r(WPe," \u2014 "),YH=n(WPe,"A",{href:!0});var wEt=s(YH);hTr=r(wEt,"TFGPT2ForSequenceClassification"),wEt.forEach(t),pTr=r(WPe," (OpenAI GPT-2 model)"),WPe.forEach(t),_Tr=i(ae),j9=n(ae,"LI",{});var QPe=s(j9);K5e=n(QPe,"STRONG",{});var AEt=s(K5e);uTr=r(AEt,"gptj"),AEt.forEach(t),bTr=r(QPe," \u2014 "),KH=n(QPe,"A",{href:!0});var yEt=s(KH);vTr=r(yEt,"TFGPTJForSequenceClassification"),yEt.forEach(t),FTr=r(QPe," (GPT-J model)"),QPe.forEach(t),TTr=i(ae),D9=n(ae,"LI",{});var HPe=s(D9);Z5e=n(HPe,"STRONG",{});var LEt=s(Z5e);MTr=r(LEt,"layoutlm"),LEt.forEach(t),ETr=r(HPe," \u2014 "),ZH=n(HPe,"A",{href:!0});var xEt=s(ZH);CTr=r(xEt,"TFLayoutLMForSequenceClassification"),xEt.forEach(t),wTr=r(HPe," (LayoutLM model)"),HPe.forEach(t),ATr=i(ae),G9=n(ae,"LI",{});var UPe=s(G9);eve=n(UPe,"STRONG",{});var $Et=s(eve);yTr=r($Et,"longformer"),$Et.forEach(t),LTr=r(UPe," \u2014 "),eU=n(UPe,"A",{href:!0});var kEt=s(eU);xTr=r(kEt,"TFLongformerForSequenceClassification"),kEt.forEach(t),$Tr=r(UPe," (Longformer model)"),UPe.forEach(t),kTr=i(ae),O9=n(ae,"LI",{});var JPe=s(O9);ove=n(JPe,"STRONG",{});var SEt=s(ove);STr=r(SEt,"mobilebert"),SEt.forEach(t),RTr=r(JPe," \u2014 "),oU=n(JPe,"A",{href:!0});var REt=s(oU);PTr=r(REt,"TFMobileBertForSequenceClassification"),REt.forEach(t),BTr=r(JPe," (MobileBERT model)"),JPe.forEach(t),ITr=i(ae),V9=n(ae,"LI",{});var YPe=s(V9);rve=n(YPe,"STRONG",{});var PEt=s(rve);NTr=r(PEt,"mpnet"),PEt.forEach(t),qTr=r(YPe," \u2014 "),rU=n(YPe,"A",{href:!0});var BEt=s(rU);jTr=r(BEt,"TFMPNetForSequenceClassification"),BEt.forEach(t),DTr=r(YPe," (MPNet model)"),YPe.forEach(t),GTr=i(ae),X9=n(ae,"LI",{});var KPe=s(X9);tve=n(KPe,"STRONG",{});var IEt=s(tve);OTr=r(IEt,"openai-gpt"),IEt.forEach(t),VTr=r(KPe," \u2014 "),tU=n(KPe,"A",{href:!0});var NEt=s(tU);XTr=r(NEt,"TFOpenAIGPTForSequenceClassification"),NEt.forEach(t),zTr=r(KPe," (OpenAI GPT model)"),KPe.forEach(t),WTr=i(ae),z9=n(ae,"LI",{});var ZPe=s(z9);ave=n(ZPe,"STRONG",{});var qEt=s(ave);QTr=r(qEt,"rembert"),qEt.forEach(t),HTr=r(ZPe," \u2014 "),aU=n(ZPe,"A",{href:!0});var jEt=s(aU);UTr=r(jEt,"TFRemBertForSequenceClassification"),jEt.forEach(t),JTr=r(ZPe," (RemBERT model)"),ZPe.forEach(t),YTr=i(ae),W9=n(ae,"LI",{});var eBe=s(W9);nve=n(eBe,"STRONG",{});var DEt=s(nve);KTr=r(DEt,"roberta"),DEt.forEach(t),ZTr=r(eBe," \u2014 "),nU=n(eBe,"A",{href:!0});var GEt=s(nU);e7r=r(GEt,"TFRobertaForSequenceClassification"),GEt.forEach(t),o7r=r(eBe," (RoBERTa model)"),eBe.forEach(t),r7r=i(ae),Q9=n(ae,"LI",{});var oBe=s(Q9);sve=n(oBe,"STRONG",{});var OEt=s(sve);t7r=r(OEt,"roformer"),OEt.forEach(t),a7r=r(oBe," \u2014 "),sU=n(oBe,"A",{href:!0});var VEt=s(sU);n7r=r(VEt,"TFRoFormerForSequenceClassification"),VEt.forEach(t),s7r=r(oBe," (RoFormer model)"),oBe.forEach(t),l7r=i(ae),H9=n(ae,"LI",{});var rBe=s(H9);lve=n(rBe,"STRONG",{});var XEt=s(lve);i7r=r(XEt,"tapas"),XEt.forEach(t),d7r=r(rBe," \u2014 "),lU=n(rBe,"A",{href:!0});var zEt=s(lU);c7r=r(zEt,"TFTapasForSequenceClassification"),zEt.forEach(t),f7r=r(rBe," (TAPAS model)"),rBe.forEach(t),m7r=i(ae),U9=n(ae,"LI",{});var tBe=s(U9);ive=n(tBe,"STRONG",{});var WEt=s(ive);g7r=r(WEt,"transfo-xl"),WEt.forEach(t),h7r=r(tBe," \u2014 "),iU=n(tBe,"A",{href:!0});var QEt=s(iU);p7r=r(QEt,"TFTransfoXLForSequenceClassification"),QEt.forEach(t),_7r=r(tBe," (Transformer-XL model)"),tBe.forEach(t),u7r=i(ae),J9=n(ae,"LI",{});var aBe=s(J9);dve=n(aBe,"STRONG",{});var HEt=s(dve);b7r=r(HEt,"xlm"),HEt.forEach(t),v7r=r(aBe," \u2014 "),dU=n(aBe,"A",{href:!0});var UEt=s(dU);F7r=r(UEt,"TFXLMForSequenceClassification"),UEt.forEach(t),T7r=r(aBe," (XLM model)"),aBe.forEach(t),M7r=i(ae),Y9=n(ae,"LI",{});var nBe=s(Y9);cve=n(nBe,"STRONG",{});var JEt=s(cve);E7r=r(JEt,"xlm-roberta"),JEt.forEach(t),C7r=r(nBe," \u2014 "),cU=n(nBe,"A",{href:!0});var YEt=s(cU);w7r=r(YEt,"TFXLMRobertaForSequenceClassification"),YEt.forEach(t),A7r=r(nBe," (XLM-RoBERTa model)"),nBe.forEach(t),y7r=i(ae),K9=n(ae,"LI",{});var sBe=s(K9);fve=n(sBe,"STRONG",{});var KEt=s(fve);L7r=r(KEt,"xlnet"),KEt.forEach(t),x7r=r(sBe," \u2014 "),fU=n(sBe,"A",{href:!0});var ZEt=s(fU);$7r=r(ZEt,"TFXLNetForSequenceClassification"),ZEt.forEach(t),k7r=r(sBe," (XLNet model)"),sBe.forEach(t),ae.forEach(t),S7r=i(Al),T(Z9.$$.fragment,Al),Al.forEach(t),wl.forEach(t),Rje=i(f),ic=n(f,"H2",{class:!0});var jGe=s(ic);eM=n(jGe,"A",{id:!0,class:!0,href:!0});var eCt=s(eM);mve=n(eCt,"SPAN",{});var oCt=s(mve);T(QL.$$.fragment,oCt),oCt.forEach(t),eCt.forEach(t),R7r=i(jGe),gve=n(jGe,"SPAN",{});var rCt=s(gve);P7r=r(rCt,"TFAutoModelForMultipleChoice"),rCt.forEach(t),jGe.forEach(t),Pje=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(HL.$$.fragment,yl),B7r=i(yl),dc=n(yl,"P",{});var $ee=s(dc);I7r=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mU=n($ee,"A",{href:!0});var tCt=s(mU);N7r=r(tCt,"from_pretrained()"),tCt.forEach(t),q7r=r($ee," class method or the "),gU=n($ee,"A",{href:!0});var aCt=s(gU);j7r=r(aCt,"from_config()"),aCt.forEach(t),D7r=r($ee,` class
method.`),$ee.forEach(t),G7r=i(yl),UL=n(yl,"P",{});var DGe=s(UL);O7r=r(DGe,"This class cannot be instantiated directly using "),hve=n(DGe,"CODE",{});var nCt=s(hve);V7r=r(nCt,"__init__()"),nCt.forEach(t),X7r=r(DGe," (throws an error)."),DGe.forEach(t),z7r=i(yl),Pt=n(yl,"DIV",{class:!0});var V0=s(Pt);T(JL.$$.fragment,V0),W7r=i(V0),pve=n(V0,"P",{});var sCt=s(pve);Q7r=r(sCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sCt.forEach(t),H7r=i(V0),cc=n(V0,"P",{});var kee=s(cc);U7r=r(kee,`Note:
Loading a model from its configuration file does `),_ve=n(kee,"STRONG",{});var lCt=s(_ve);J7r=r(lCt,"not"),lCt.forEach(t),Y7r=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=n(kee,"A",{href:!0});var iCt=s(hU);K7r=r(iCt,"from_pretrained()"),iCt.forEach(t),Z7r=r(kee," to load the model weights."),kee.forEach(t),e9r=i(V0),T(oM.$$.fragment,V0),V0.forEach(t),o9r=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(YL.$$.fragment,Ll),r9r=i(Ll),uve=n(Ll,"P",{});var dCt=s(uve);t9r=r(dCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dCt.forEach(t),a9r=i(Ll),sn=n(Ll,"P",{});var X0=s(sn);n9r=r(X0,"The model class to instantiate is selected based on the "),bve=n(X0,"CODE",{});var cCt=s(bve);s9r=r(cCt,"model_type"),cCt.forEach(t),l9r=r(X0,` property of the config object (either
passed as an argument or loaded from `),vve=n(X0,"CODE",{});var fCt=s(vve);i9r=r(fCt,"pretrained_model_name_or_path"),fCt.forEach(t),d9r=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=n(X0,"CODE",{});var mCt=s(Fve);c9r=r(mCt,"pretrained_model_name_or_path"),mCt.forEach(t),f9r=r(X0,":"),X0.forEach(t),m9r=i(Ll),pe=n(Ll,"UL",{});var be=s(pe);rM=n(be,"LI",{});var lBe=s(rM);Tve=n(lBe,"STRONG",{});var gCt=s(Tve);g9r=r(gCt,"albert"),gCt.forEach(t),h9r=r(lBe," \u2014 "),pU=n(lBe,"A",{href:!0});var hCt=s(pU);p9r=r(hCt,"TFAlbertForMultipleChoice"),hCt.forEach(t),_9r=r(lBe," (ALBERT model)"),lBe.forEach(t),u9r=i(be),tM=n(be,"LI",{});var iBe=s(tM);Mve=n(iBe,"STRONG",{});var pCt=s(Mve);b9r=r(pCt,"bert"),pCt.forEach(t),v9r=r(iBe," \u2014 "),_U=n(iBe,"A",{href:!0});var _Ct=s(_U);F9r=r(_Ct,"TFBertForMultipleChoice"),_Ct.forEach(t),T9r=r(iBe," (BERT model)"),iBe.forEach(t),M9r=i(be),aM=n(be,"LI",{});var dBe=s(aM);Eve=n(dBe,"STRONG",{});var uCt=s(Eve);E9r=r(uCt,"camembert"),uCt.forEach(t),C9r=r(dBe," \u2014 "),uU=n(dBe,"A",{href:!0});var bCt=s(uU);w9r=r(bCt,"TFCamembertForMultipleChoice"),bCt.forEach(t),A9r=r(dBe," (CamemBERT model)"),dBe.forEach(t),y9r=i(be),nM=n(be,"LI",{});var cBe=s(nM);Cve=n(cBe,"STRONG",{});var vCt=s(Cve);L9r=r(vCt,"convbert"),vCt.forEach(t),x9r=r(cBe," \u2014 "),bU=n(cBe,"A",{href:!0});var FCt=s(bU);$9r=r(FCt,"TFConvBertForMultipleChoice"),FCt.forEach(t),k9r=r(cBe," (ConvBERT model)"),cBe.forEach(t),S9r=i(be),sM=n(be,"LI",{});var fBe=s(sM);wve=n(fBe,"STRONG",{});var TCt=s(wve);R9r=r(TCt,"distilbert"),TCt.forEach(t),P9r=r(fBe," \u2014 "),vU=n(fBe,"A",{href:!0});var MCt=s(vU);B9r=r(MCt,"TFDistilBertForMultipleChoice"),MCt.forEach(t),I9r=r(fBe," (DistilBERT model)"),fBe.forEach(t),N9r=i(be),lM=n(be,"LI",{});var mBe=s(lM);Ave=n(mBe,"STRONG",{});var ECt=s(Ave);q9r=r(ECt,"electra"),ECt.forEach(t),j9r=r(mBe," \u2014 "),FU=n(mBe,"A",{href:!0});var CCt=s(FU);D9r=r(CCt,"TFElectraForMultipleChoice"),CCt.forEach(t),G9r=r(mBe," (ELECTRA model)"),mBe.forEach(t),O9r=i(be),iM=n(be,"LI",{});var gBe=s(iM);yve=n(gBe,"STRONG",{});var wCt=s(yve);V9r=r(wCt,"flaubert"),wCt.forEach(t),X9r=r(gBe," \u2014 "),TU=n(gBe,"A",{href:!0});var ACt=s(TU);z9r=r(ACt,"TFFlaubertForMultipleChoice"),ACt.forEach(t),W9r=r(gBe," (FlauBERT model)"),gBe.forEach(t),Q9r=i(be),dM=n(be,"LI",{});var hBe=s(dM);Lve=n(hBe,"STRONG",{});var yCt=s(Lve);H9r=r(yCt,"funnel"),yCt.forEach(t),U9r=r(hBe," \u2014 "),MU=n(hBe,"A",{href:!0});var LCt=s(MU);J9r=r(LCt,"TFFunnelForMultipleChoice"),LCt.forEach(t),Y9r=r(hBe," (Funnel Transformer model)"),hBe.forEach(t),K9r=i(be),cM=n(be,"LI",{});var pBe=s(cM);xve=n(pBe,"STRONG",{});var xCt=s(xve);Z9r=r(xCt,"longformer"),xCt.forEach(t),eMr=r(pBe," \u2014 "),EU=n(pBe,"A",{href:!0});var $Ct=s(EU);oMr=r($Ct,"TFLongformerForMultipleChoice"),$Ct.forEach(t),rMr=r(pBe," (Longformer model)"),pBe.forEach(t),tMr=i(be),fM=n(be,"LI",{});var _Be=s(fM);$ve=n(_Be,"STRONG",{});var kCt=s($ve);aMr=r(kCt,"mobilebert"),kCt.forEach(t),nMr=r(_Be," \u2014 "),CU=n(_Be,"A",{href:!0});var SCt=s(CU);sMr=r(SCt,"TFMobileBertForMultipleChoice"),SCt.forEach(t),lMr=r(_Be," (MobileBERT model)"),_Be.forEach(t),iMr=i(be),mM=n(be,"LI",{});var uBe=s(mM);kve=n(uBe,"STRONG",{});var RCt=s(kve);dMr=r(RCt,"mpnet"),RCt.forEach(t),cMr=r(uBe," \u2014 "),wU=n(uBe,"A",{href:!0});var PCt=s(wU);fMr=r(PCt,"TFMPNetForMultipleChoice"),PCt.forEach(t),mMr=r(uBe," (MPNet model)"),uBe.forEach(t),gMr=i(be),gM=n(be,"LI",{});var bBe=s(gM);Sve=n(bBe,"STRONG",{});var BCt=s(Sve);hMr=r(BCt,"rembert"),BCt.forEach(t),pMr=r(bBe," \u2014 "),AU=n(bBe,"A",{href:!0});var ICt=s(AU);_Mr=r(ICt,"TFRemBertForMultipleChoice"),ICt.forEach(t),uMr=r(bBe," (RemBERT model)"),bBe.forEach(t),bMr=i(be),hM=n(be,"LI",{});var vBe=s(hM);Rve=n(vBe,"STRONG",{});var NCt=s(Rve);vMr=r(NCt,"roberta"),NCt.forEach(t),FMr=r(vBe," \u2014 "),yU=n(vBe,"A",{href:!0});var qCt=s(yU);TMr=r(qCt,"TFRobertaForMultipleChoice"),qCt.forEach(t),MMr=r(vBe," (RoBERTa model)"),vBe.forEach(t),EMr=i(be),pM=n(be,"LI",{});var FBe=s(pM);Pve=n(FBe,"STRONG",{});var jCt=s(Pve);CMr=r(jCt,"roformer"),jCt.forEach(t),wMr=r(FBe," \u2014 "),LU=n(FBe,"A",{href:!0});var DCt=s(LU);AMr=r(DCt,"TFRoFormerForMultipleChoice"),DCt.forEach(t),yMr=r(FBe," (RoFormer model)"),FBe.forEach(t),LMr=i(be),_M=n(be,"LI",{});var TBe=s(_M);Bve=n(TBe,"STRONG",{});var GCt=s(Bve);xMr=r(GCt,"xlm"),GCt.forEach(t),$Mr=r(TBe," \u2014 "),xU=n(TBe,"A",{href:!0});var OCt=s(xU);kMr=r(OCt,"TFXLMForMultipleChoice"),OCt.forEach(t),SMr=r(TBe," (XLM model)"),TBe.forEach(t),RMr=i(be),uM=n(be,"LI",{});var MBe=s(uM);Ive=n(MBe,"STRONG",{});var VCt=s(Ive);PMr=r(VCt,"xlm-roberta"),VCt.forEach(t),BMr=r(MBe," \u2014 "),$U=n(MBe,"A",{href:!0});var XCt=s($U);IMr=r(XCt,"TFXLMRobertaForMultipleChoice"),XCt.forEach(t),NMr=r(MBe," (XLM-RoBERTa model)"),MBe.forEach(t),qMr=i(be),bM=n(be,"LI",{});var EBe=s(bM);Nve=n(EBe,"STRONG",{});var zCt=s(Nve);jMr=r(zCt,"xlnet"),zCt.forEach(t),DMr=r(EBe," \u2014 "),kU=n(EBe,"A",{href:!0});var WCt=s(kU);GMr=r(WCt,"TFXLNetForMultipleChoice"),WCt.forEach(t),OMr=r(EBe," (XLNet model)"),EBe.forEach(t),be.forEach(t),VMr=i(Ll),T(vM.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),Bje=i(f),fc=n(f,"H2",{class:!0});var GGe=s(fc);FM=n(GGe,"A",{id:!0,class:!0,href:!0});var QCt=s(FM);qve=n(QCt,"SPAN",{});var HCt=s(qve);T(KL.$$.fragment,HCt),HCt.forEach(t),QCt.forEach(t),XMr=i(GGe),jve=n(GGe,"SPAN",{});var UCt=s(jve);zMr=r(UCt,"TFAutoModelForNextSentencePrediction"),UCt.forEach(t),GGe.forEach(t),Ije=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(ZL.$$.fragment,xl),WMr=i(xl),mc=n(xl,"P",{});var See=s(mc);QMr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),SU=n(See,"A",{href:!0});var JCt=s(SU);HMr=r(JCt,"from_pretrained()"),JCt.forEach(t),UMr=r(See," class method or the "),RU=n(See,"A",{href:!0});var YCt=s(RU);JMr=r(YCt,"from_config()"),YCt.forEach(t),YMr=r(See,` class
method.`),See.forEach(t),KMr=i(xl),e8=n(xl,"P",{});var OGe=s(e8);ZMr=r(OGe,"This class cannot be instantiated directly using "),Dve=n(OGe,"CODE",{});var KCt=s(Dve);eEr=r(KCt,"__init__()"),KCt.forEach(t),oEr=r(OGe," (throws an error)."),OGe.forEach(t),rEr=i(xl),Bt=n(xl,"DIV",{class:!0});var z0=s(Bt);T(o8.$$.fragment,z0),tEr=i(z0),Gve=n(z0,"P",{});var ZCt=s(Gve);aEr=r(ZCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ZCt.forEach(t),nEr=i(z0),gc=n(z0,"P",{});var Ree=s(gc);sEr=r(Ree,`Note:
Loading a model from its configuration file does `),Ove=n(Ree,"STRONG",{});var e3t=s(Ove);lEr=r(e3t,"not"),e3t.forEach(t),iEr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=n(Ree,"A",{href:!0});var o3t=s(PU);dEr=r(o3t,"from_pretrained()"),o3t.forEach(t),cEr=r(Ree," to load the model weights."),Ree.forEach(t),fEr=i(z0),T(TM.$$.fragment,z0),z0.forEach(t),mEr=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(r8.$$.fragment,$l),gEr=i($l),Vve=n($l,"P",{});var r3t=s(Vve);hEr=r(r3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),r3t.forEach(t),pEr=i($l),ln=n($l,"P",{});var W0=s(ln);_Er=r(W0,"The model class to instantiate is selected based on the "),Xve=n(W0,"CODE",{});var t3t=s(Xve);uEr=r(t3t,"model_type"),t3t.forEach(t),bEr=r(W0,` property of the config object (either
passed as an argument or loaded from `),zve=n(W0,"CODE",{});var a3t=s(zve);vEr=r(a3t,"pretrained_model_name_or_path"),a3t.forEach(t),FEr=r(W0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=n(W0,"CODE",{});var n3t=s(Wve);TEr=r(n3t,"pretrained_model_name_or_path"),n3t.forEach(t),MEr=r(W0,":"),W0.forEach(t),EEr=i($l),t8=n($l,"UL",{});var VGe=s(t8);MM=n(VGe,"LI",{});var CBe=s(MM);Qve=n(CBe,"STRONG",{});var s3t=s(Qve);CEr=r(s3t,"bert"),s3t.forEach(t),wEr=r(CBe," \u2014 "),BU=n(CBe,"A",{href:!0});var l3t=s(BU);AEr=r(l3t,"TFBertForNextSentencePrediction"),l3t.forEach(t),yEr=r(CBe," (BERT model)"),CBe.forEach(t),LEr=i(VGe),EM=n(VGe,"LI",{});var wBe=s(EM);Hve=n(wBe,"STRONG",{});var i3t=s(Hve);xEr=r(i3t,"mobilebert"),i3t.forEach(t),$Er=r(wBe," \u2014 "),IU=n(wBe,"A",{href:!0});var d3t=s(IU);kEr=r(d3t,"TFMobileBertForNextSentencePrediction"),d3t.forEach(t),SEr=r(wBe," (MobileBERT model)"),wBe.forEach(t),VGe.forEach(t),REr=i($l),T(CM.$$.fragment,$l),$l.forEach(t),xl.forEach(t),Nje=i(f),hc=n(f,"H2",{class:!0});var XGe=s(hc);wM=n(XGe,"A",{id:!0,class:!0,href:!0});var c3t=s(wM);Uve=n(c3t,"SPAN",{});var f3t=s(Uve);T(a8.$$.fragment,f3t),f3t.forEach(t),c3t.forEach(t),PEr=i(XGe),Jve=n(XGe,"SPAN",{});var m3t=s(Jve);BEr=r(m3t,"TFAutoModelForTableQuestionAnswering"),m3t.forEach(t),XGe.forEach(t),qje=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(n8.$$.fragment,kl),IEr=i(kl),pc=n(kl,"P",{});var Pee=s(pc);NEr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),NU=n(Pee,"A",{href:!0});var g3t=s(NU);qEr=r(g3t,"from_pretrained()"),g3t.forEach(t),jEr=r(Pee," class method or the "),qU=n(Pee,"A",{href:!0});var h3t=s(qU);DEr=r(h3t,"from_config()"),h3t.forEach(t),GEr=r(Pee,` class
method.`),Pee.forEach(t),OEr=i(kl),s8=n(kl,"P",{});var zGe=s(s8);VEr=r(zGe,"This class cannot be instantiated directly using "),Yve=n(zGe,"CODE",{});var p3t=s(Yve);XEr=r(p3t,"__init__()"),p3t.forEach(t),zEr=r(zGe," (throws an error)."),zGe.forEach(t),WEr=i(kl),It=n(kl,"DIV",{class:!0});var Q0=s(It);T(l8.$$.fragment,Q0),QEr=i(Q0),Kve=n(Q0,"P",{});var _3t=s(Kve);HEr=r(_3t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_3t.forEach(t),UEr=i(Q0),_c=n(Q0,"P",{});var Bee=s(_c);JEr=r(Bee,`Note:
Loading a model from its configuration file does `),Zve=n(Bee,"STRONG",{});var u3t=s(Zve);YEr=r(u3t,"not"),u3t.forEach(t),KEr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=n(Bee,"A",{href:!0});var b3t=s(jU);ZEr=r(b3t,"from_pretrained()"),b3t.forEach(t),eCr=r(Bee," to load the model weights."),Bee.forEach(t),oCr=i(Q0),T(AM.$$.fragment,Q0),Q0.forEach(t),rCr=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(i8.$$.fragment,Sl),tCr=i(Sl),eFe=n(Sl,"P",{});var v3t=s(eFe);aCr=r(v3t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),v3t.forEach(t),nCr=i(Sl),dn=n(Sl,"P",{});var H0=s(dn);sCr=r(H0,"The model class to instantiate is selected based on the "),oFe=n(H0,"CODE",{});var F3t=s(oFe);lCr=r(F3t,"model_type"),F3t.forEach(t),iCr=r(H0,` property of the config object (either
passed as an argument or loaded from `),rFe=n(H0,"CODE",{});var T3t=s(rFe);dCr=r(T3t,"pretrained_model_name_or_path"),T3t.forEach(t),cCr=r(H0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=n(H0,"CODE",{});var M3t=s(tFe);fCr=r(M3t,"pretrained_model_name_or_path"),M3t.forEach(t),mCr=r(H0,":"),H0.forEach(t),gCr=i(Sl),aFe=n(Sl,"UL",{});var E3t=s(aFe);yM=n(E3t,"LI",{});var ABe=s(yM);nFe=n(ABe,"STRONG",{});var C3t=s(nFe);hCr=r(C3t,"tapas"),C3t.forEach(t),pCr=r(ABe," \u2014 "),DU=n(ABe,"A",{href:!0});var w3t=s(DU);_Cr=r(w3t,"TFTapasForQuestionAnswering"),w3t.forEach(t),uCr=r(ABe," (TAPAS model)"),ABe.forEach(t),E3t.forEach(t),bCr=i(Sl),T(LM.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),jje=i(f),uc=n(f,"H2",{class:!0});var WGe=s(uc);xM=n(WGe,"A",{id:!0,class:!0,href:!0});var A3t=s(xM);sFe=n(A3t,"SPAN",{});var y3t=s(sFe);T(d8.$$.fragment,y3t),y3t.forEach(t),A3t.forEach(t),vCr=i(WGe),lFe=n(WGe,"SPAN",{});var L3t=s(lFe);FCr=r(L3t,"TFAutoModelForTokenClassification"),L3t.forEach(t),WGe.forEach(t),Dje=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(c8.$$.fragment,Rl),TCr=i(Rl),bc=n(Rl,"P",{});var Iee=s(bc);MCr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GU=n(Iee,"A",{href:!0});var x3t=s(GU);ECr=r(x3t,"from_pretrained()"),x3t.forEach(t),CCr=r(Iee," class method or the "),OU=n(Iee,"A",{href:!0});var $3t=s(OU);wCr=r($3t,"from_config()"),$3t.forEach(t),ACr=r(Iee,` class
method.`),Iee.forEach(t),yCr=i(Rl),f8=n(Rl,"P",{});var QGe=s(f8);LCr=r(QGe,"This class cannot be instantiated directly using "),iFe=n(QGe,"CODE",{});var k3t=s(iFe);xCr=r(k3t,"__init__()"),k3t.forEach(t),$Cr=r(QGe," (throws an error)."),QGe.forEach(t),kCr=i(Rl),Nt=n(Rl,"DIV",{class:!0});var U0=s(Nt);T(m8.$$.fragment,U0),SCr=i(U0),dFe=n(U0,"P",{});var S3t=s(dFe);RCr=r(S3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),S3t.forEach(t),PCr=i(U0),vc=n(U0,"P",{});var Nee=s(vc);BCr=r(Nee,`Note:
Loading a model from its configuration file does `),cFe=n(Nee,"STRONG",{});var R3t=s(cFe);ICr=r(R3t,"not"),R3t.forEach(t),NCr=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=n(Nee,"A",{href:!0});var P3t=s(VU);qCr=r(P3t,"from_pretrained()"),P3t.forEach(t),jCr=r(Nee," to load the model weights."),Nee.forEach(t),DCr=i(U0),T($M.$$.fragment,U0),U0.forEach(t),GCr=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(g8.$$.fragment,Pl),OCr=i(Pl),fFe=n(Pl,"P",{});var B3t=s(fFe);VCr=r(B3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),B3t.forEach(t),XCr=i(Pl),cn=n(Pl,"P",{});var J0=s(cn);zCr=r(J0,"The model class to instantiate is selected based on the "),mFe=n(J0,"CODE",{});var I3t=s(mFe);WCr=r(I3t,"model_type"),I3t.forEach(t),QCr=r(J0,` property of the config object (either
passed as an argument or loaded from `),gFe=n(J0,"CODE",{});var N3t=s(gFe);HCr=r(N3t,"pretrained_model_name_or_path"),N3t.forEach(t),UCr=r(J0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=n(J0,"CODE",{});var q3t=s(hFe);JCr=r(q3t,"pretrained_model_name_or_path"),q3t.forEach(t),YCr=r(J0,":"),J0.forEach(t),KCr=i(Pl),de=n(Pl,"UL",{});var me=s(de);kM=n(me,"LI",{});var yBe=s(kM);pFe=n(yBe,"STRONG",{});var j3t=s(pFe);ZCr=r(j3t,"albert"),j3t.forEach(t),e3r=r(yBe," \u2014 "),XU=n(yBe,"A",{href:!0});var D3t=s(XU);o3r=r(D3t,"TFAlbertForTokenClassification"),D3t.forEach(t),r3r=r(yBe," (ALBERT model)"),yBe.forEach(t),t3r=i(me),SM=n(me,"LI",{});var LBe=s(SM);_Fe=n(LBe,"STRONG",{});var G3t=s(_Fe);a3r=r(G3t,"bert"),G3t.forEach(t),n3r=r(LBe," \u2014 "),zU=n(LBe,"A",{href:!0});var O3t=s(zU);s3r=r(O3t,"TFBertForTokenClassification"),O3t.forEach(t),l3r=r(LBe," (BERT model)"),LBe.forEach(t),i3r=i(me),RM=n(me,"LI",{});var xBe=s(RM);uFe=n(xBe,"STRONG",{});var V3t=s(uFe);d3r=r(V3t,"camembert"),V3t.forEach(t),c3r=r(xBe," \u2014 "),WU=n(xBe,"A",{href:!0});var X3t=s(WU);f3r=r(X3t,"TFCamembertForTokenClassification"),X3t.forEach(t),m3r=r(xBe," (CamemBERT model)"),xBe.forEach(t),g3r=i(me),PM=n(me,"LI",{});var $Be=s(PM);bFe=n($Be,"STRONG",{});var z3t=s(bFe);h3r=r(z3t,"convbert"),z3t.forEach(t),p3r=r($Be," \u2014 "),QU=n($Be,"A",{href:!0});var W3t=s(QU);_3r=r(W3t,"TFConvBertForTokenClassification"),W3t.forEach(t),u3r=r($Be," (ConvBERT model)"),$Be.forEach(t),b3r=i(me),BM=n(me,"LI",{});var kBe=s(BM);vFe=n(kBe,"STRONG",{});var Q3t=s(vFe);v3r=r(Q3t,"deberta"),Q3t.forEach(t),F3r=r(kBe," \u2014 "),HU=n(kBe,"A",{href:!0});var H3t=s(HU);T3r=r(H3t,"TFDebertaForTokenClassification"),H3t.forEach(t),M3r=r(kBe," (DeBERTa model)"),kBe.forEach(t),E3r=i(me),IM=n(me,"LI",{});var SBe=s(IM);FFe=n(SBe,"STRONG",{});var U3t=s(FFe);C3r=r(U3t,"deberta-v2"),U3t.forEach(t),w3r=r(SBe," \u2014 "),UU=n(SBe,"A",{href:!0});var J3t=s(UU);A3r=r(J3t,"TFDebertaV2ForTokenClassification"),J3t.forEach(t),y3r=r(SBe," (DeBERTa-v2 model)"),SBe.forEach(t),L3r=i(me),NM=n(me,"LI",{});var RBe=s(NM);TFe=n(RBe,"STRONG",{});var Y3t=s(TFe);x3r=r(Y3t,"distilbert"),Y3t.forEach(t),$3r=r(RBe," \u2014 "),JU=n(RBe,"A",{href:!0});var K3t=s(JU);k3r=r(K3t,"TFDistilBertForTokenClassification"),K3t.forEach(t),S3r=r(RBe," (DistilBERT model)"),RBe.forEach(t),R3r=i(me),qM=n(me,"LI",{});var PBe=s(qM);MFe=n(PBe,"STRONG",{});var Z3t=s(MFe);P3r=r(Z3t,"electra"),Z3t.forEach(t),B3r=r(PBe," \u2014 "),YU=n(PBe,"A",{href:!0});var ewt=s(YU);I3r=r(ewt,"TFElectraForTokenClassification"),ewt.forEach(t),N3r=r(PBe," (ELECTRA model)"),PBe.forEach(t),q3r=i(me),jM=n(me,"LI",{});var BBe=s(jM);EFe=n(BBe,"STRONG",{});var owt=s(EFe);j3r=r(owt,"flaubert"),owt.forEach(t),D3r=r(BBe," \u2014 "),KU=n(BBe,"A",{href:!0});var rwt=s(KU);G3r=r(rwt,"TFFlaubertForTokenClassification"),rwt.forEach(t),O3r=r(BBe," (FlauBERT model)"),BBe.forEach(t),V3r=i(me),DM=n(me,"LI",{});var IBe=s(DM);CFe=n(IBe,"STRONG",{});var twt=s(CFe);X3r=r(twt,"funnel"),twt.forEach(t),z3r=r(IBe," \u2014 "),ZU=n(IBe,"A",{href:!0});var awt=s(ZU);W3r=r(awt,"TFFunnelForTokenClassification"),awt.forEach(t),Q3r=r(IBe," (Funnel Transformer model)"),IBe.forEach(t),H3r=i(me),GM=n(me,"LI",{});var NBe=s(GM);wFe=n(NBe,"STRONG",{});var nwt=s(wFe);U3r=r(nwt,"layoutlm"),nwt.forEach(t),J3r=r(NBe," \u2014 "),eJ=n(NBe,"A",{href:!0});var swt=s(eJ);Y3r=r(swt,"TFLayoutLMForTokenClassification"),swt.forEach(t),K3r=r(NBe," (LayoutLM model)"),NBe.forEach(t),Z3r=i(me),OM=n(me,"LI",{});var qBe=s(OM);AFe=n(qBe,"STRONG",{});var lwt=s(AFe);ewr=r(lwt,"longformer"),lwt.forEach(t),owr=r(qBe," \u2014 "),oJ=n(qBe,"A",{href:!0});var iwt=s(oJ);rwr=r(iwt,"TFLongformerForTokenClassification"),iwt.forEach(t),twr=r(qBe," (Longformer model)"),qBe.forEach(t),awr=i(me),VM=n(me,"LI",{});var jBe=s(VM);yFe=n(jBe,"STRONG",{});var dwt=s(yFe);nwr=r(dwt,"mobilebert"),dwt.forEach(t),swr=r(jBe," \u2014 "),rJ=n(jBe,"A",{href:!0});var cwt=s(rJ);lwr=r(cwt,"TFMobileBertForTokenClassification"),cwt.forEach(t),iwr=r(jBe," (MobileBERT model)"),jBe.forEach(t),dwr=i(me),XM=n(me,"LI",{});var DBe=s(XM);LFe=n(DBe,"STRONG",{});var fwt=s(LFe);cwr=r(fwt,"mpnet"),fwt.forEach(t),fwr=r(DBe," \u2014 "),tJ=n(DBe,"A",{href:!0});var mwt=s(tJ);mwr=r(mwt,"TFMPNetForTokenClassification"),mwt.forEach(t),gwr=r(DBe," (MPNet model)"),DBe.forEach(t),hwr=i(me),zM=n(me,"LI",{});var GBe=s(zM);xFe=n(GBe,"STRONG",{});var gwt=s(xFe);pwr=r(gwt,"rembert"),gwt.forEach(t),_wr=r(GBe," \u2014 "),aJ=n(GBe,"A",{href:!0});var hwt=s(aJ);uwr=r(hwt,"TFRemBertForTokenClassification"),hwt.forEach(t),bwr=r(GBe," (RemBERT model)"),GBe.forEach(t),vwr=i(me),WM=n(me,"LI",{});var OBe=s(WM);$Fe=n(OBe,"STRONG",{});var pwt=s($Fe);Fwr=r(pwt,"roberta"),pwt.forEach(t),Twr=r(OBe," \u2014 "),nJ=n(OBe,"A",{href:!0});var _wt=s(nJ);Mwr=r(_wt,"TFRobertaForTokenClassification"),_wt.forEach(t),Ewr=r(OBe," (RoBERTa model)"),OBe.forEach(t),Cwr=i(me),QM=n(me,"LI",{});var VBe=s(QM);kFe=n(VBe,"STRONG",{});var uwt=s(kFe);wwr=r(uwt,"roformer"),uwt.forEach(t),Awr=r(VBe," \u2014 "),sJ=n(VBe,"A",{href:!0});var bwt=s(sJ);ywr=r(bwt,"TFRoFormerForTokenClassification"),bwt.forEach(t),Lwr=r(VBe," (RoFormer model)"),VBe.forEach(t),xwr=i(me),HM=n(me,"LI",{});var XBe=s(HM);SFe=n(XBe,"STRONG",{});var vwt=s(SFe);$wr=r(vwt,"xlm"),vwt.forEach(t),kwr=r(XBe," \u2014 "),lJ=n(XBe,"A",{href:!0});var Fwt=s(lJ);Swr=r(Fwt,"TFXLMForTokenClassification"),Fwt.forEach(t),Rwr=r(XBe," (XLM model)"),XBe.forEach(t),Pwr=i(me),UM=n(me,"LI",{});var zBe=s(UM);RFe=n(zBe,"STRONG",{});var Twt=s(RFe);Bwr=r(Twt,"xlm-roberta"),Twt.forEach(t),Iwr=r(zBe," \u2014 "),iJ=n(zBe,"A",{href:!0});var Mwt=s(iJ);Nwr=r(Mwt,"TFXLMRobertaForTokenClassification"),Mwt.forEach(t),qwr=r(zBe," (XLM-RoBERTa model)"),zBe.forEach(t),jwr=i(me),JM=n(me,"LI",{});var WBe=s(JM);PFe=n(WBe,"STRONG",{});var Ewt=s(PFe);Dwr=r(Ewt,"xlnet"),Ewt.forEach(t),Gwr=r(WBe," \u2014 "),dJ=n(WBe,"A",{href:!0});var Cwt=s(dJ);Owr=r(Cwt,"TFXLNetForTokenClassification"),Cwt.forEach(t),Vwr=r(WBe," (XLNet model)"),WBe.forEach(t),me.forEach(t),Xwr=i(Pl),T(YM.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),Gje=i(f),Fc=n(f,"H2",{class:!0});var HGe=s(Fc);KM=n(HGe,"A",{id:!0,class:!0,href:!0});var wwt=s(KM);BFe=n(wwt,"SPAN",{});var Awt=s(BFe);T(h8.$$.fragment,Awt),Awt.forEach(t),wwt.forEach(t),zwr=i(HGe),IFe=n(HGe,"SPAN",{});var ywt=s(IFe);Wwr=r(ywt,"TFAutoModelForQuestionAnswering"),ywt.forEach(t),HGe.forEach(t),Oje=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(p8.$$.fragment,Bl),Qwr=i(Bl),Tc=n(Bl,"P",{});var qee=s(Tc);Hwr=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cJ=n(qee,"A",{href:!0});var Lwt=s(cJ);Uwr=r(Lwt,"from_pretrained()"),Lwt.forEach(t),Jwr=r(qee," class method or the "),fJ=n(qee,"A",{href:!0});var xwt=s(fJ);Ywr=r(xwt,"from_config()"),xwt.forEach(t),Kwr=r(qee,` class
method.`),qee.forEach(t),Zwr=i(Bl),_8=n(Bl,"P",{});var UGe=s(_8);e0r=r(UGe,"This class cannot be instantiated directly using "),NFe=n(UGe,"CODE",{});var $wt=s(NFe);o0r=r($wt,"__init__()"),$wt.forEach(t),r0r=r(UGe," (throws an error)."),UGe.forEach(t),t0r=i(Bl),qt=n(Bl,"DIV",{class:!0});var Y0=s(qt);T(u8.$$.fragment,Y0),a0r=i(Y0),qFe=n(Y0,"P",{});var kwt=s(qFe);n0r=r(kwt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kwt.forEach(t),s0r=i(Y0),Mc=n(Y0,"P",{});var jee=s(Mc);l0r=r(jee,`Note:
Loading a model from its configuration file does `),jFe=n(jee,"STRONG",{});var Swt=s(jFe);i0r=r(Swt,"not"),Swt.forEach(t),d0r=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=n(jee,"A",{href:!0});var Rwt=s(mJ);c0r=r(Rwt,"from_pretrained()"),Rwt.forEach(t),f0r=r(jee," to load the model weights."),jee.forEach(t),m0r=i(Y0),T(ZM.$$.fragment,Y0),Y0.forEach(t),g0r=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(b8.$$.fragment,Il),h0r=i(Il),DFe=n(Il,"P",{});var Pwt=s(DFe);p0r=r(Pwt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Pwt.forEach(t),_0r=i(Il),fn=n(Il,"P",{});var K0=s(fn);u0r=r(K0,"The model class to instantiate is selected based on the "),GFe=n(K0,"CODE",{});var Bwt=s(GFe);b0r=r(Bwt,"model_type"),Bwt.forEach(t),v0r=r(K0,` property of the config object (either
passed as an argument or loaded from `),OFe=n(K0,"CODE",{});var Iwt=s(OFe);F0r=r(Iwt,"pretrained_model_name_or_path"),Iwt.forEach(t),T0r=r(K0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=n(K0,"CODE",{});var Nwt=s(VFe);M0r=r(Nwt,"pretrained_model_name_or_path"),Nwt.forEach(t),E0r=r(K0,":"),K0.forEach(t),C0r=i(Il),ce=n(Il,"UL",{});var ge=s(ce);eE=n(ge,"LI",{});var QBe=s(eE);XFe=n(QBe,"STRONG",{});var qwt=s(XFe);w0r=r(qwt,"albert"),qwt.forEach(t),A0r=r(QBe," \u2014 "),gJ=n(QBe,"A",{href:!0});var jwt=s(gJ);y0r=r(jwt,"TFAlbertForQuestionAnswering"),jwt.forEach(t),L0r=r(QBe," (ALBERT model)"),QBe.forEach(t),x0r=i(ge),oE=n(ge,"LI",{});var HBe=s(oE);zFe=n(HBe,"STRONG",{});var Dwt=s(zFe);$0r=r(Dwt,"bert"),Dwt.forEach(t),k0r=r(HBe," \u2014 "),hJ=n(HBe,"A",{href:!0});var Gwt=s(hJ);S0r=r(Gwt,"TFBertForQuestionAnswering"),Gwt.forEach(t),R0r=r(HBe," (BERT model)"),HBe.forEach(t),P0r=i(ge),rE=n(ge,"LI",{});var UBe=s(rE);WFe=n(UBe,"STRONG",{});var Owt=s(WFe);B0r=r(Owt,"camembert"),Owt.forEach(t),I0r=r(UBe," \u2014 "),pJ=n(UBe,"A",{href:!0});var Vwt=s(pJ);N0r=r(Vwt,"TFCamembertForQuestionAnswering"),Vwt.forEach(t),q0r=r(UBe," (CamemBERT model)"),UBe.forEach(t),j0r=i(ge),tE=n(ge,"LI",{});var JBe=s(tE);QFe=n(JBe,"STRONG",{});var Xwt=s(QFe);D0r=r(Xwt,"convbert"),Xwt.forEach(t),G0r=r(JBe," \u2014 "),_J=n(JBe,"A",{href:!0});var zwt=s(_J);O0r=r(zwt,"TFConvBertForQuestionAnswering"),zwt.forEach(t),V0r=r(JBe," (ConvBERT model)"),JBe.forEach(t),X0r=i(ge),aE=n(ge,"LI",{});var YBe=s(aE);HFe=n(YBe,"STRONG",{});var Wwt=s(HFe);z0r=r(Wwt,"deberta"),Wwt.forEach(t),W0r=r(YBe," \u2014 "),uJ=n(YBe,"A",{href:!0});var Qwt=s(uJ);Q0r=r(Qwt,"TFDebertaForQuestionAnswering"),Qwt.forEach(t),H0r=r(YBe," (DeBERTa model)"),YBe.forEach(t),U0r=i(ge),nE=n(ge,"LI",{});var KBe=s(nE);UFe=n(KBe,"STRONG",{});var Hwt=s(UFe);J0r=r(Hwt,"deberta-v2"),Hwt.forEach(t),Y0r=r(KBe," \u2014 "),bJ=n(KBe,"A",{href:!0});var Uwt=s(bJ);K0r=r(Uwt,"TFDebertaV2ForQuestionAnswering"),Uwt.forEach(t),Z0r=r(KBe," (DeBERTa-v2 model)"),KBe.forEach(t),e6r=i(ge),sE=n(ge,"LI",{});var ZBe=s(sE);JFe=n(ZBe,"STRONG",{});var Jwt=s(JFe);o6r=r(Jwt,"distilbert"),Jwt.forEach(t),r6r=r(ZBe," \u2014 "),vJ=n(ZBe,"A",{href:!0});var Ywt=s(vJ);t6r=r(Ywt,"TFDistilBertForQuestionAnswering"),Ywt.forEach(t),a6r=r(ZBe," (DistilBERT model)"),ZBe.forEach(t),n6r=i(ge),lE=n(ge,"LI",{});var eIe=s(lE);YFe=n(eIe,"STRONG",{});var Kwt=s(YFe);s6r=r(Kwt,"electra"),Kwt.forEach(t),l6r=r(eIe," \u2014 "),FJ=n(eIe,"A",{href:!0});var Zwt=s(FJ);i6r=r(Zwt,"TFElectraForQuestionAnswering"),Zwt.forEach(t),d6r=r(eIe," (ELECTRA model)"),eIe.forEach(t),c6r=i(ge),iE=n(ge,"LI",{});var oIe=s(iE);KFe=n(oIe,"STRONG",{});var e0t=s(KFe);f6r=r(e0t,"flaubert"),e0t.forEach(t),m6r=r(oIe," \u2014 "),TJ=n(oIe,"A",{href:!0});var o0t=s(TJ);g6r=r(o0t,"TFFlaubertForQuestionAnsweringSimple"),o0t.forEach(t),h6r=r(oIe," (FlauBERT model)"),oIe.forEach(t),p6r=i(ge),dE=n(ge,"LI",{});var rIe=s(dE);ZFe=n(rIe,"STRONG",{});var r0t=s(ZFe);_6r=r(r0t,"funnel"),r0t.forEach(t),u6r=r(rIe," \u2014 "),MJ=n(rIe,"A",{href:!0});var t0t=s(MJ);b6r=r(t0t,"TFFunnelForQuestionAnswering"),t0t.forEach(t),v6r=r(rIe," (Funnel Transformer model)"),rIe.forEach(t),F6r=i(ge),cE=n(ge,"LI",{});var tIe=s(cE);eTe=n(tIe,"STRONG",{});var a0t=s(eTe);T6r=r(a0t,"gptj"),a0t.forEach(t),M6r=r(tIe," \u2014 "),EJ=n(tIe,"A",{href:!0});var n0t=s(EJ);E6r=r(n0t,"TFGPTJForQuestionAnswering"),n0t.forEach(t),C6r=r(tIe," (GPT-J model)"),tIe.forEach(t),w6r=i(ge),fE=n(ge,"LI",{});var aIe=s(fE);oTe=n(aIe,"STRONG",{});var s0t=s(oTe);A6r=r(s0t,"longformer"),s0t.forEach(t),y6r=r(aIe," \u2014 "),CJ=n(aIe,"A",{href:!0});var l0t=s(CJ);L6r=r(l0t,"TFLongformerForQuestionAnswering"),l0t.forEach(t),x6r=r(aIe," (Longformer model)"),aIe.forEach(t),$6r=i(ge),mE=n(ge,"LI",{});var nIe=s(mE);rTe=n(nIe,"STRONG",{});var i0t=s(rTe);k6r=r(i0t,"mobilebert"),i0t.forEach(t),S6r=r(nIe," \u2014 "),wJ=n(nIe,"A",{href:!0});var d0t=s(wJ);R6r=r(d0t,"TFMobileBertForQuestionAnswering"),d0t.forEach(t),P6r=r(nIe," (MobileBERT model)"),nIe.forEach(t),B6r=i(ge),gE=n(ge,"LI",{});var sIe=s(gE);tTe=n(sIe,"STRONG",{});var c0t=s(tTe);I6r=r(c0t,"mpnet"),c0t.forEach(t),N6r=r(sIe," \u2014 "),AJ=n(sIe,"A",{href:!0});var f0t=s(AJ);q6r=r(f0t,"TFMPNetForQuestionAnswering"),f0t.forEach(t),j6r=r(sIe," (MPNet model)"),sIe.forEach(t),D6r=i(ge),hE=n(ge,"LI",{});var lIe=s(hE);aTe=n(lIe,"STRONG",{});var m0t=s(aTe);G6r=r(m0t,"rembert"),m0t.forEach(t),O6r=r(lIe," \u2014 "),yJ=n(lIe,"A",{href:!0});var g0t=s(yJ);V6r=r(g0t,"TFRemBertForQuestionAnswering"),g0t.forEach(t),X6r=r(lIe," (RemBERT model)"),lIe.forEach(t),z6r=i(ge),pE=n(ge,"LI",{});var iIe=s(pE);nTe=n(iIe,"STRONG",{});var h0t=s(nTe);W6r=r(h0t,"roberta"),h0t.forEach(t),Q6r=r(iIe," \u2014 "),LJ=n(iIe,"A",{href:!0});var p0t=s(LJ);H6r=r(p0t,"TFRobertaForQuestionAnswering"),p0t.forEach(t),U6r=r(iIe," (RoBERTa model)"),iIe.forEach(t),J6r=i(ge),_E=n(ge,"LI",{});var dIe=s(_E);sTe=n(dIe,"STRONG",{});var _0t=s(sTe);Y6r=r(_0t,"roformer"),_0t.forEach(t),K6r=r(dIe," \u2014 "),xJ=n(dIe,"A",{href:!0});var u0t=s(xJ);Z6r=r(u0t,"TFRoFormerForQuestionAnswering"),u0t.forEach(t),eAr=r(dIe," (RoFormer model)"),dIe.forEach(t),oAr=i(ge),uE=n(ge,"LI",{});var cIe=s(uE);lTe=n(cIe,"STRONG",{});var b0t=s(lTe);rAr=r(b0t,"xlm"),b0t.forEach(t),tAr=r(cIe," \u2014 "),$J=n(cIe,"A",{href:!0});var v0t=s($J);aAr=r(v0t,"TFXLMForQuestionAnsweringSimple"),v0t.forEach(t),nAr=r(cIe," (XLM model)"),cIe.forEach(t),sAr=i(ge),bE=n(ge,"LI",{});var fIe=s(bE);iTe=n(fIe,"STRONG",{});var F0t=s(iTe);lAr=r(F0t,"xlm-roberta"),F0t.forEach(t),iAr=r(fIe," \u2014 "),kJ=n(fIe,"A",{href:!0});var T0t=s(kJ);dAr=r(T0t,"TFXLMRobertaForQuestionAnswering"),T0t.forEach(t),cAr=r(fIe," (XLM-RoBERTa model)"),fIe.forEach(t),fAr=i(ge),vE=n(ge,"LI",{});var mIe=s(vE);dTe=n(mIe,"STRONG",{});var M0t=s(dTe);mAr=r(M0t,"xlnet"),M0t.forEach(t),gAr=r(mIe," \u2014 "),SJ=n(mIe,"A",{href:!0});var E0t=s(SJ);hAr=r(E0t,"TFXLNetForQuestionAnsweringSimple"),E0t.forEach(t),pAr=r(mIe," (XLNet model)"),mIe.forEach(t),ge.forEach(t),_Ar=i(Il),T(FE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),Vje=i(f),Ec=n(f,"H2",{class:!0});var JGe=s(Ec);TE=n(JGe,"A",{id:!0,class:!0,href:!0});var C0t=s(TE);cTe=n(C0t,"SPAN",{});var w0t=s(cTe);T(v8.$$.fragment,w0t),w0t.forEach(t),C0t.forEach(t),uAr=i(JGe),fTe=n(JGe,"SPAN",{});var A0t=s(fTe);bAr=r(A0t,"TFAutoModelForVision2Seq"),A0t.forEach(t),JGe.forEach(t),Xje=i(f),dr=n(f,"DIV",{class:!0});var Nl=s(dr);T(F8.$$.fragment,Nl),vAr=i(Nl),Cc=n(Nl,"P",{});var Dee=s(Cc);FAr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),RJ=n(Dee,"A",{href:!0});var y0t=s(RJ);TAr=r(y0t,"from_pretrained()"),y0t.forEach(t),MAr=r(Dee," class method or the "),PJ=n(Dee,"A",{href:!0});var L0t=s(PJ);EAr=r(L0t,"from_config()"),L0t.forEach(t),CAr=r(Dee,` class
method.`),Dee.forEach(t),wAr=i(Nl),T8=n(Nl,"P",{});var YGe=s(T8);AAr=r(YGe,"This class cannot be instantiated directly using "),mTe=n(YGe,"CODE",{});var x0t=s(mTe);yAr=r(x0t,"__init__()"),x0t.forEach(t),LAr=r(YGe," (throws an error)."),YGe.forEach(t),xAr=i(Nl),jt=n(Nl,"DIV",{class:!0});var Z0=s(jt);T(M8.$$.fragment,Z0),$Ar=i(Z0),gTe=n(Z0,"P",{});var $0t=s(gTe);kAr=r($0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$0t.forEach(t),SAr=i(Z0),wc=n(Z0,"P",{});var Gee=s(wc);RAr=r(Gee,`Note:
Loading a model from its configuration file does `),hTe=n(Gee,"STRONG",{});var k0t=s(hTe);PAr=r(k0t,"not"),k0t.forEach(t),BAr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(Gee,"A",{href:!0});var S0t=s(BJ);IAr=r(S0t,"from_pretrained()"),S0t.forEach(t),NAr=r(Gee," to load the model weights."),Gee.forEach(t),qAr=i(Z0),T(ME.$$.fragment,Z0),Z0.forEach(t),jAr=i(Nl),Nr=n(Nl,"DIV",{class:!0});var ql=s(Nr);T(E8.$$.fragment,ql),DAr=i(ql),pTe=n(ql,"P",{});var R0t=s(pTe);GAr=r(R0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),R0t.forEach(t),OAr=i(ql),mn=n(ql,"P",{});var e6=s(mn);VAr=r(e6,"The model class to instantiate is selected based on the "),_Te=n(e6,"CODE",{});var P0t=s(_Te);XAr=r(P0t,"model_type"),P0t.forEach(t),zAr=r(e6,` property of the config object (either
passed as an argument or loaded from `),uTe=n(e6,"CODE",{});var B0t=s(uTe);WAr=r(B0t,"pretrained_model_name_or_path"),B0t.forEach(t),QAr=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=n(e6,"CODE",{});var I0t=s(bTe);HAr=r(I0t,"pretrained_model_name_or_path"),I0t.forEach(t),UAr=r(e6,":"),e6.forEach(t),JAr=i(ql),vTe=n(ql,"UL",{});var N0t=s(vTe);EE=n(N0t,"LI",{});var gIe=s(EE);FTe=n(gIe,"STRONG",{});var q0t=s(FTe);YAr=r(q0t,"vision-encoder-decoder"),q0t.forEach(t),KAr=r(gIe," \u2014 "),IJ=n(gIe,"A",{href:!0});var j0t=s(IJ);ZAr=r(j0t,"TFVisionEncoderDecoderModel"),j0t.forEach(t),eyr=r(gIe," (Vision Encoder decoder model)"),gIe.forEach(t),N0t.forEach(t),oyr=i(ql),T(CE.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),zje=i(f),Ac=n(f,"H2",{class:!0});var KGe=s(Ac);wE=n(KGe,"A",{id:!0,class:!0,href:!0});var D0t=s(wE);TTe=n(D0t,"SPAN",{});var G0t=s(TTe);T(C8.$$.fragment,G0t),G0t.forEach(t),D0t.forEach(t),ryr=i(KGe),MTe=n(KGe,"SPAN",{});var O0t=s(MTe);tyr=r(O0t,"TFAutoModelForSpeechSeq2Seq"),O0t.forEach(t),KGe.forEach(t),Wje=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(w8.$$.fragment,jl),ayr=i(jl),yc=n(jl,"P",{});var Oee=s(yc);nyr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NJ=n(Oee,"A",{href:!0});var V0t=s(NJ);syr=r(V0t,"from_pretrained()"),V0t.forEach(t),lyr=r(Oee," class method or the "),qJ=n(Oee,"A",{href:!0});var X0t=s(qJ);iyr=r(X0t,"from_config()"),X0t.forEach(t),dyr=r(Oee,` class
method.`),Oee.forEach(t),cyr=i(jl),A8=n(jl,"P",{});var ZGe=s(A8);fyr=r(ZGe,"This class cannot be instantiated directly using "),ETe=n(ZGe,"CODE",{});var z0t=s(ETe);myr=r(z0t,"__init__()"),z0t.forEach(t),gyr=r(ZGe," (throws an error)."),ZGe.forEach(t),hyr=i(jl),Dt=n(jl,"DIV",{class:!0});var o6=s(Dt);T(y8.$$.fragment,o6),pyr=i(o6),CTe=n(o6,"P",{});var W0t=s(CTe);_yr=r(W0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),W0t.forEach(t),uyr=i(o6),Lc=n(o6,"P",{});var Vee=s(Lc);byr=r(Vee,`Note:
Loading a model from its configuration file does `),wTe=n(Vee,"STRONG",{});var Q0t=s(wTe);vyr=r(Q0t,"not"),Q0t.forEach(t),Fyr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(Vee,"A",{href:!0});var H0t=s(jJ);Tyr=r(H0t,"from_pretrained()"),H0t.forEach(t),Myr=r(Vee," to load the model weights."),Vee.forEach(t),Eyr=i(o6),T(AE.$$.fragment,o6),o6.forEach(t),Cyr=i(jl),qr=n(jl,"DIV",{class:!0});var Dl=s(qr);T(L8.$$.fragment,Dl),wyr=i(Dl),ATe=n(Dl,"P",{});var U0t=s(ATe);Ayr=r(U0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),U0t.forEach(t),yyr=i(Dl),gn=n(Dl,"P",{});var r6=s(gn);Lyr=r(r6,"The model class to instantiate is selected based on the "),yTe=n(r6,"CODE",{});var J0t=s(yTe);xyr=r(J0t,"model_type"),J0t.forEach(t),$yr=r(r6,` property of the config object (either
passed as an argument or loaded from `),LTe=n(r6,"CODE",{});var Y0t=s(LTe);kyr=r(Y0t,"pretrained_model_name_or_path"),Y0t.forEach(t),Syr=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=n(r6,"CODE",{});var K0t=s(xTe);Ryr=r(K0t,"pretrained_model_name_or_path"),K0t.forEach(t),Pyr=r(r6,":"),r6.forEach(t),Byr=i(Dl),$Te=n(Dl,"UL",{});var Z0t=s($Te);yE=n(Z0t,"LI",{});var hIe=s(yE);kTe=n(hIe,"STRONG",{});var e6t=s(kTe);Iyr=r(e6t,"speech_to_text"),e6t.forEach(t),Nyr=r(hIe," \u2014 "),DJ=n(hIe,"A",{href:!0});var o6t=s(DJ);qyr=r(o6t,"TFSpeech2TextForConditionalGeneration"),o6t.forEach(t),jyr=r(hIe," (Speech2Text model)"),hIe.forEach(t),Z0t.forEach(t),Dyr=i(Dl),T(LE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Qje=i(f),xc=n(f,"H2",{class:!0});var eOe=s(xc);xE=n(eOe,"A",{id:!0,class:!0,href:!0});var r6t=s(xE);STe=n(r6t,"SPAN",{});var t6t=s(STe);T(x8.$$.fragment,t6t),t6t.forEach(t),r6t.forEach(t),Gyr=i(eOe),RTe=n(eOe,"SPAN",{});var a6t=s(RTe);Oyr=r(a6t,"FlaxAutoModel"),a6t.forEach(t),eOe.forEach(t),Hje=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T($8.$$.fragment,Gl),Vyr=i(Gl),$c=n(Gl,"P",{});var Xee=s($c);Xyr=r(Xee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GJ=n(Xee,"A",{href:!0});var n6t=s(GJ);zyr=r(n6t,"from_pretrained()"),n6t.forEach(t),Wyr=r(Xee," class method or the "),OJ=n(Xee,"A",{href:!0});var s6t=s(OJ);Qyr=r(s6t,"from_config()"),s6t.forEach(t),Hyr=r(Xee,` class
method.`),Xee.forEach(t),Uyr=i(Gl),k8=n(Gl,"P",{});var oOe=s(k8);Jyr=r(oOe,"This class cannot be instantiated directly using "),PTe=n(oOe,"CODE",{});var l6t=s(PTe);Yyr=r(l6t,"__init__()"),l6t.forEach(t),Kyr=r(oOe," (throws an error)."),oOe.forEach(t),Zyr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var t6=s(Gt);T(S8.$$.fragment,t6),eLr=i(t6),BTe=n(t6,"P",{});var i6t=s(BTe);oLr=r(i6t,"Instantiates one of the base model classes of the library from a configuration."),i6t.forEach(t),rLr=i(t6),kc=n(t6,"P",{});var zee=s(kc);tLr=r(zee,`Note:
Loading a model from its configuration file does `),ITe=n(zee,"STRONG",{});var d6t=s(ITe);aLr=r(d6t,"not"),d6t.forEach(t),nLr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(zee,"A",{href:!0});var c6t=s(VJ);sLr=r(c6t,"from_pretrained()"),c6t.forEach(t),lLr=r(zee," to load the model weights."),zee.forEach(t),iLr=i(t6),T($E.$$.fragment,t6),t6.forEach(t),dLr=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(R8.$$.fragment,Ol),cLr=i(Ol),NTe=n(Ol,"P",{});var f6t=s(NTe);fLr=r(f6t,"Instantiate one of the base model classes of the library from a pretrained model."),f6t.forEach(t),mLr=i(Ol),hn=n(Ol,"P",{});var a6=s(hn);gLr=r(a6,"The model class to instantiate is selected based on the "),qTe=n(a6,"CODE",{});var m6t=s(qTe);hLr=r(m6t,"model_type"),m6t.forEach(t),pLr=r(a6,` property of the config object (either
passed as an argument or loaded from `),jTe=n(a6,"CODE",{});var g6t=s(jTe);_Lr=r(g6t,"pretrained_model_name_or_path"),g6t.forEach(t),uLr=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=n(a6,"CODE",{});var h6t=s(DTe);bLr=r(h6t,"pretrained_model_name_or_path"),h6t.forEach(t),vLr=r(a6,":"),a6.forEach(t),FLr=i(Ol),re=n(Ol,"UL",{});var ne=s(re);kE=n(ne,"LI",{});var pIe=s(kE);GTe=n(pIe,"STRONG",{});var p6t=s(GTe);TLr=r(p6t,"albert"),p6t.forEach(t),MLr=r(pIe," \u2014 "),XJ=n(pIe,"A",{href:!0});var _6t=s(XJ);ELr=r(_6t,"FlaxAlbertModel"),_6t.forEach(t),CLr=r(pIe," (ALBERT model)"),pIe.forEach(t),wLr=i(ne),SE=n(ne,"LI",{});var _Ie=s(SE);OTe=n(_Ie,"STRONG",{});var u6t=s(OTe);ALr=r(u6t,"bart"),u6t.forEach(t),yLr=r(_Ie," \u2014 "),zJ=n(_Ie,"A",{href:!0});var b6t=s(zJ);LLr=r(b6t,"FlaxBartModel"),b6t.forEach(t),xLr=r(_Ie," (BART model)"),_Ie.forEach(t),$Lr=i(ne),RE=n(ne,"LI",{});var uIe=s(RE);VTe=n(uIe,"STRONG",{});var v6t=s(VTe);kLr=r(v6t,"beit"),v6t.forEach(t),SLr=r(uIe," \u2014 "),WJ=n(uIe,"A",{href:!0});var F6t=s(WJ);RLr=r(F6t,"FlaxBeitModel"),F6t.forEach(t),PLr=r(uIe," (BEiT model)"),uIe.forEach(t),BLr=i(ne),PE=n(ne,"LI",{});var bIe=s(PE);XTe=n(bIe,"STRONG",{});var T6t=s(XTe);ILr=r(T6t,"bert"),T6t.forEach(t),NLr=r(bIe," \u2014 "),QJ=n(bIe,"A",{href:!0});var M6t=s(QJ);qLr=r(M6t,"FlaxBertModel"),M6t.forEach(t),jLr=r(bIe," (BERT model)"),bIe.forEach(t),DLr=i(ne),BE=n(ne,"LI",{});var vIe=s(BE);zTe=n(vIe,"STRONG",{});var E6t=s(zTe);GLr=r(E6t,"big_bird"),E6t.forEach(t),OLr=r(vIe," \u2014 "),HJ=n(vIe,"A",{href:!0});var C6t=s(HJ);VLr=r(C6t,"FlaxBigBirdModel"),C6t.forEach(t),XLr=r(vIe," (BigBird model)"),vIe.forEach(t),zLr=i(ne),IE=n(ne,"LI",{});var FIe=s(IE);WTe=n(FIe,"STRONG",{});var w6t=s(WTe);WLr=r(w6t,"blenderbot"),w6t.forEach(t),QLr=r(FIe," \u2014 "),UJ=n(FIe,"A",{href:!0});var A6t=s(UJ);HLr=r(A6t,"FlaxBlenderbotModel"),A6t.forEach(t),ULr=r(FIe," (Blenderbot model)"),FIe.forEach(t),JLr=i(ne),NE=n(ne,"LI",{});var TIe=s(NE);QTe=n(TIe,"STRONG",{});var y6t=s(QTe);YLr=r(y6t,"blenderbot-small"),y6t.forEach(t),KLr=r(TIe," \u2014 "),JJ=n(TIe,"A",{href:!0});var L6t=s(JJ);ZLr=r(L6t,"FlaxBlenderbotSmallModel"),L6t.forEach(t),e8r=r(TIe," (BlenderbotSmall model)"),TIe.forEach(t),o8r=i(ne),qE=n(ne,"LI",{});var MIe=s(qE);HTe=n(MIe,"STRONG",{});var x6t=s(HTe);r8r=r(x6t,"clip"),x6t.forEach(t),t8r=r(MIe," \u2014 "),YJ=n(MIe,"A",{href:!0});var $6t=s(YJ);a8r=r($6t,"FlaxCLIPModel"),$6t.forEach(t),n8r=r(MIe," (CLIP model)"),MIe.forEach(t),s8r=i(ne),jE=n(ne,"LI",{});var EIe=s(jE);UTe=n(EIe,"STRONG",{});var k6t=s(UTe);l8r=r(k6t,"distilbert"),k6t.forEach(t),i8r=r(EIe," \u2014 "),KJ=n(EIe,"A",{href:!0});var S6t=s(KJ);d8r=r(S6t,"FlaxDistilBertModel"),S6t.forEach(t),c8r=r(EIe," (DistilBERT model)"),EIe.forEach(t),f8r=i(ne),DE=n(ne,"LI",{});var CIe=s(DE);JTe=n(CIe,"STRONG",{});var R6t=s(JTe);m8r=r(R6t,"electra"),R6t.forEach(t),g8r=r(CIe," \u2014 "),ZJ=n(CIe,"A",{href:!0});var P6t=s(ZJ);h8r=r(P6t,"FlaxElectraModel"),P6t.forEach(t),p8r=r(CIe," (ELECTRA model)"),CIe.forEach(t),_8r=i(ne),GE=n(ne,"LI",{});var wIe=s(GE);YTe=n(wIe,"STRONG",{});var B6t=s(YTe);u8r=r(B6t,"gpt2"),B6t.forEach(t),b8r=r(wIe," \u2014 "),eY=n(wIe,"A",{href:!0});var I6t=s(eY);v8r=r(I6t,"FlaxGPT2Model"),I6t.forEach(t),F8r=r(wIe," (OpenAI GPT-2 model)"),wIe.forEach(t),T8r=i(ne),OE=n(ne,"LI",{});var AIe=s(OE);KTe=n(AIe,"STRONG",{});var N6t=s(KTe);M8r=r(N6t,"gpt_neo"),N6t.forEach(t),E8r=r(AIe," \u2014 "),oY=n(AIe,"A",{href:!0});var q6t=s(oY);C8r=r(q6t,"FlaxGPTNeoModel"),q6t.forEach(t),w8r=r(AIe," (GPT Neo model)"),AIe.forEach(t),A8r=i(ne),VE=n(ne,"LI",{});var yIe=s(VE);ZTe=n(yIe,"STRONG",{});var j6t=s(ZTe);y8r=r(j6t,"gptj"),j6t.forEach(t),L8r=r(yIe," \u2014 "),rY=n(yIe,"A",{href:!0});var D6t=s(rY);x8r=r(D6t,"FlaxGPTJModel"),D6t.forEach(t),$8r=r(yIe," (GPT-J model)"),yIe.forEach(t),k8r=i(ne),XE=n(ne,"LI",{});var LIe=s(XE);e7e=n(LIe,"STRONG",{});var G6t=s(e7e);S8r=r(G6t,"marian"),G6t.forEach(t),R8r=r(LIe," \u2014 "),tY=n(LIe,"A",{href:!0});var O6t=s(tY);P8r=r(O6t,"FlaxMarianModel"),O6t.forEach(t),B8r=r(LIe," (Marian model)"),LIe.forEach(t),I8r=i(ne),zE=n(ne,"LI",{});var xIe=s(zE);o7e=n(xIe,"STRONG",{});var V6t=s(o7e);N8r=r(V6t,"mbart"),V6t.forEach(t),q8r=r(xIe," \u2014 "),aY=n(xIe,"A",{href:!0});var X6t=s(aY);j8r=r(X6t,"FlaxMBartModel"),X6t.forEach(t),D8r=r(xIe," (mBART model)"),xIe.forEach(t),G8r=i(ne),WE=n(ne,"LI",{});var $Ie=s(WE);r7e=n($Ie,"STRONG",{});var z6t=s(r7e);O8r=r(z6t,"mt5"),z6t.forEach(t),V8r=r($Ie," \u2014 "),nY=n($Ie,"A",{href:!0});var W6t=s(nY);X8r=r(W6t,"FlaxMT5Model"),W6t.forEach(t),z8r=r($Ie," (mT5 model)"),$Ie.forEach(t),W8r=i(ne),QE=n(ne,"LI",{});var kIe=s(QE);t7e=n(kIe,"STRONG",{});var Q6t=s(t7e);Q8r=r(Q6t,"opt"),Q6t.forEach(t),H8r=r(kIe," \u2014 "),sY=n(kIe,"A",{href:!0});var H6t=s(sY);U8r=r(H6t,"FlaxOPTModel"),H6t.forEach(t),J8r=r(kIe," (OPT model)"),kIe.forEach(t),Y8r=i(ne),HE=n(ne,"LI",{});var SIe=s(HE);a7e=n(SIe,"STRONG",{});var U6t=s(a7e);K8r=r(U6t,"pegasus"),U6t.forEach(t),Z8r=r(SIe," \u2014 "),lY=n(SIe,"A",{href:!0});var J6t=s(lY);exr=r(J6t,"FlaxPegasusModel"),J6t.forEach(t),oxr=r(SIe," (Pegasus model)"),SIe.forEach(t),rxr=i(ne),UE=n(ne,"LI",{});var RIe=s(UE);n7e=n(RIe,"STRONG",{});var Y6t=s(n7e);txr=r(Y6t,"roberta"),Y6t.forEach(t),axr=r(RIe," \u2014 "),iY=n(RIe,"A",{href:!0});var K6t=s(iY);nxr=r(K6t,"FlaxRobertaModel"),K6t.forEach(t),sxr=r(RIe," (RoBERTa model)"),RIe.forEach(t),lxr=i(ne),JE=n(ne,"LI",{});var PIe=s(JE);s7e=n(PIe,"STRONG",{});var Z6t=s(s7e);ixr=r(Z6t,"roformer"),Z6t.forEach(t),dxr=r(PIe," \u2014 "),dY=n(PIe,"A",{href:!0});var eAt=s(dY);cxr=r(eAt,"FlaxRoFormerModel"),eAt.forEach(t),fxr=r(PIe," (RoFormer model)"),PIe.forEach(t),mxr=i(ne),YE=n(ne,"LI",{});var BIe=s(YE);l7e=n(BIe,"STRONG",{});var oAt=s(l7e);gxr=r(oAt,"t5"),oAt.forEach(t),hxr=r(BIe," \u2014 "),cY=n(BIe,"A",{href:!0});var rAt=s(cY);pxr=r(rAt,"FlaxT5Model"),rAt.forEach(t),_xr=r(BIe," (T5 model)"),BIe.forEach(t),uxr=i(ne),KE=n(ne,"LI",{});var IIe=s(KE);i7e=n(IIe,"STRONG",{});var tAt=s(i7e);bxr=r(tAt,"vision-text-dual-encoder"),tAt.forEach(t),vxr=r(IIe," \u2014 "),fY=n(IIe,"A",{href:!0});var aAt=s(fY);Fxr=r(aAt,"FlaxVisionTextDualEncoderModel"),aAt.forEach(t),Txr=r(IIe," (VisionTextDualEncoder model)"),IIe.forEach(t),Mxr=i(ne),ZE=n(ne,"LI",{});var NIe=s(ZE);d7e=n(NIe,"STRONG",{});var nAt=s(d7e);Exr=r(nAt,"vit"),nAt.forEach(t),Cxr=r(NIe," \u2014 "),mY=n(NIe,"A",{href:!0});var sAt=s(mY);wxr=r(sAt,"FlaxViTModel"),sAt.forEach(t),Axr=r(NIe," (ViT model)"),NIe.forEach(t),yxr=i(ne),eC=n(ne,"LI",{});var qIe=s(eC);c7e=n(qIe,"STRONG",{});var lAt=s(c7e);Lxr=r(lAt,"wav2vec2"),lAt.forEach(t),xxr=r(qIe," \u2014 "),gY=n(qIe,"A",{href:!0});var iAt=s(gY);$xr=r(iAt,"FlaxWav2Vec2Model"),iAt.forEach(t),kxr=r(qIe," (Wav2Vec2 model)"),qIe.forEach(t),Sxr=i(ne),oC=n(ne,"LI",{});var jIe=s(oC);f7e=n(jIe,"STRONG",{});var dAt=s(f7e);Rxr=r(dAt,"xglm"),dAt.forEach(t),Pxr=r(jIe," \u2014 "),hY=n(jIe,"A",{href:!0});var cAt=s(hY);Bxr=r(cAt,"FlaxXGLMModel"),cAt.forEach(t),Ixr=r(jIe," (XGLM model)"),jIe.forEach(t),Nxr=i(ne),rC=n(ne,"LI",{});var DIe=s(rC);m7e=n(DIe,"STRONG",{});var fAt=s(m7e);qxr=r(fAt,"xlm-roberta"),fAt.forEach(t),jxr=r(DIe," \u2014 "),pY=n(DIe,"A",{href:!0});var mAt=s(pY);Dxr=r(mAt,"FlaxXLMRobertaModel"),mAt.forEach(t),Gxr=r(DIe," (XLM-RoBERTa model)"),DIe.forEach(t),ne.forEach(t),Oxr=i(Ol),T(tC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Uje=i(f),Sc=n(f,"H2",{class:!0});var rOe=s(Sc);aC=n(rOe,"A",{id:!0,class:!0,href:!0});var gAt=s(aC);g7e=n(gAt,"SPAN",{});var hAt=s(g7e);T(P8.$$.fragment,hAt),hAt.forEach(t),gAt.forEach(t),Vxr=i(rOe),h7e=n(rOe,"SPAN",{});var pAt=s(h7e);Xxr=r(pAt,"FlaxAutoModelForCausalLM"),pAt.forEach(t),rOe.forEach(t),Jje=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(B8.$$.fragment,Vl),zxr=i(Vl),Rc=n(Vl,"P",{});var Wee=s(Rc);Wxr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_Y=n(Wee,"A",{href:!0});var _At=s(_Y);Qxr=r(_At,"from_pretrained()"),_At.forEach(t),Hxr=r(Wee," class method or the "),uY=n(Wee,"A",{href:!0});var uAt=s(uY);Uxr=r(uAt,"from_config()"),uAt.forEach(t),Jxr=r(Wee,` class
method.`),Wee.forEach(t),Yxr=i(Vl),I8=n(Vl,"P",{});var tOe=s(I8);Kxr=r(tOe,"This class cannot be instantiated directly using "),p7e=n(tOe,"CODE",{});var bAt=s(p7e);Zxr=r(bAt,"__init__()"),bAt.forEach(t),e$r=r(tOe," (throws an error)."),tOe.forEach(t),o$r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var n6=s(Ot);T(N8.$$.fragment,n6),r$r=i(n6),_7e=n(n6,"P",{});var vAt=s(_7e);t$r=r(vAt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vAt.forEach(t),a$r=i(n6),Pc=n(n6,"P",{});var Qee=s(Pc);n$r=r(Qee,`Note:
Loading a model from its configuration file does `),u7e=n(Qee,"STRONG",{});var FAt=s(u7e);s$r=r(FAt,"not"),FAt.forEach(t),l$r=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=n(Qee,"A",{href:!0});var TAt=s(bY);i$r=r(TAt,"from_pretrained()"),TAt.forEach(t),d$r=r(Qee," to load the model weights."),Qee.forEach(t),c$r=i(n6),T(nC.$$.fragment,n6),n6.forEach(t),f$r=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(q8.$$.fragment,Xl),m$r=i(Xl),b7e=n(Xl,"P",{});var MAt=s(b7e);g$r=r(MAt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),MAt.forEach(t),h$r=i(Xl),pn=n(Xl,"P",{});var s6=s(pn);p$r=r(s6,"The model class to instantiate is selected based on the "),v7e=n(s6,"CODE",{});var EAt=s(v7e);_$r=r(EAt,"model_type"),EAt.forEach(t),u$r=r(s6,` property of the config object (either
passed as an argument or loaded from `),F7e=n(s6,"CODE",{});var CAt=s(F7e);b$r=r(CAt,"pretrained_model_name_or_path"),CAt.forEach(t),v$r=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T7e=n(s6,"CODE",{});var wAt=s(T7e);F$r=r(wAt,"pretrained_model_name_or_path"),wAt.forEach(t),T$r=r(s6,":"),s6.forEach(t),M$r=i(Xl),Le=n(Xl,"UL",{});var Ie=s(Le);sC=n(Ie,"LI",{});var GIe=s(sC);M7e=n(GIe,"STRONG",{});var AAt=s(M7e);E$r=r(AAt,"bart"),AAt.forEach(t),C$r=r(GIe," \u2014 "),vY=n(GIe,"A",{href:!0});var yAt=s(vY);w$r=r(yAt,"FlaxBartForCausalLM"),yAt.forEach(t),A$r=r(GIe," (BART model)"),GIe.forEach(t),y$r=i(Ie),lC=n(Ie,"LI",{});var OIe=s(lC);E7e=n(OIe,"STRONG",{});var LAt=s(E7e);L$r=r(LAt,"bert"),LAt.forEach(t),x$r=r(OIe," \u2014 "),FY=n(OIe,"A",{href:!0});var xAt=s(FY);$$r=r(xAt,"FlaxBertForCausalLM"),xAt.forEach(t),k$r=r(OIe," (BERT model)"),OIe.forEach(t),S$r=i(Ie),iC=n(Ie,"LI",{});var VIe=s(iC);C7e=n(VIe,"STRONG",{});var $At=s(C7e);R$r=r($At,"big_bird"),$At.forEach(t),P$r=r(VIe," \u2014 "),TY=n(VIe,"A",{href:!0});var kAt=s(TY);B$r=r(kAt,"FlaxBigBirdForCausalLM"),kAt.forEach(t),I$r=r(VIe," (BigBird model)"),VIe.forEach(t),N$r=i(Ie),dC=n(Ie,"LI",{});var XIe=s(dC);w7e=n(XIe,"STRONG",{});var SAt=s(w7e);q$r=r(SAt,"electra"),SAt.forEach(t),j$r=r(XIe," \u2014 "),MY=n(XIe,"A",{href:!0});var RAt=s(MY);D$r=r(RAt,"FlaxElectraForCausalLM"),RAt.forEach(t),G$r=r(XIe," (ELECTRA model)"),XIe.forEach(t),O$r=i(Ie),cC=n(Ie,"LI",{});var zIe=s(cC);A7e=n(zIe,"STRONG",{});var PAt=s(A7e);V$r=r(PAt,"gpt2"),PAt.forEach(t),X$r=r(zIe," \u2014 "),EY=n(zIe,"A",{href:!0});var BAt=s(EY);z$r=r(BAt,"FlaxGPT2LMHeadModel"),BAt.forEach(t),W$r=r(zIe," (OpenAI GPT-2 model)"),zIe.forEach(t),Q$r=i(Ie),fC=n(Ie,"LI",{});var WIe=s(fC);y7e=n(WIe,"STRONG",{});var IAt=s(y7e);H$r=r(IAt,"gpt_neo"),IAt.forEach(t),U$r=r(WIe," \u2014 "),CY=n(WIe,"A",{href:!0});var NAt=s(CY);J$r=r(NAt,"FlaxGPTNeoForCausalLM"),NAt.forEach(t),Y$r=r(WIe," (GPT Neo model)"),WIe.forEach(t),K$r=i(Ie),mC=n(Ie,"LI",{});var QIe=s(mC);L7e=n(QIe,"STRONG",{});var qAt=s(L7e);Z$r=r(qAt,"gptj"),qAt.forEach(t),ekr=r(QIe," \u2014 "),wY=n(QIe,"A",{href:!0});var jAt=s(wY);okr=r(jAt,"FlaxGPTJForCausalLM"),jAt.forEach(t),rkr=r(QIe," (GPT-J model)"),QIe.forEach(t),tkr=i(Ie),gC=n(Ie,"LI",{});var HIe=s(gC);x7e=n(HIe,"STRONG",{});var DAt=s(x7e);akr=r(DAt,"opt"),DAt.forEach(t),nkr=r(HIe," \u2014 "),AY=n(HIe,"A",{href:!0});var GAt=s(AY);skr=r(GAt,"FlaxOPTForCausalLM"),GAt.forEach(t),lkr=r(HIe," (OPT model)"),HIe.forEach(t),ikr=i(Ie),hC=n(Ie,"LI",{});var UIe=s(hC);$7e=n(UIe,"STRONG",{});var OAt=s($7e);dkr=r(OAt,"roberta"),OAt.forEach(t),ckr=r(UIe," \u2014 "),yY=n(UIe,"A",{href:!0});var VAt=s(yY);fkr=r(VAt,"FlaxRobertaForCausalLM"),VAt.forEach(t),mkr=r(UIe," (RoBERTa model)"),UIe.forEach(t),gkr=i(Ie),pC=n(Ie,"LI",{});var JIe=s(pC);k7e=n(JIe,"STRONG",{});var XAt=s(k7e);hkr=r(XAt,"xglm"),XAt.forEach(t),pkr=r(JIe," \u2014 "),LY=n(JIe,"A",{href:!0});var zAt=s(LY);_kr=r(zAt,"FlaxXGLMForCausalLM"),zAt.forEach(t),ukr=r(JIe," (XGLM model)"),JIe.forEach(t),Ie.forEach(t),bkr=i(Xl),T(_C.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),Yje=i(f),Bc=n(f,"H2",{class:!0});var aOe=s(Bc);uC=n(aOe,"A",{id:!0,class:!0,href:!0});var WAt=s(uC);S7e=n(WAt,"SPAN",{});var QAt=s(S7e);T(j8.$$.fragment,QAt),QAt.forEach(t),WAt.forEach(t),vkr=i(aOe),R7e=n(aOe,"SPAN",{});var HAt=s(R7e);Fkr=r(HAt,"FlaxAutoModelForPreTraining"),HAt.forEach(t),aOe.forEach(t),Kje=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(D8.$$.fragment,zl),Tkr=i(zl),Ic=n(zl,"P",{});var Hee=s(Ic);Mkr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xY=n(Hee,"A",{href:!0});var UAt=s(xY);Ekr=r(UAt,"from_pretrained()"),UAt.forEach(t),Ckr=r(Hee," class method or the "),$Y=n(Hee,"A",{href:!0});var JAt=s($Y);wkr=r(JAt,"from_config()"),JAt.forEach(t),Akr=r(Hee,` class
method.`),Hee.forEach(t),ykr=i(zl),G8=n(zl,"P",{});var nOe=s(G8);Lkr=r(nOe,"This class cannot be instantiated directly using "),P7e=n(nOe,"CODE",{});var YAt=s(P7e);xkr=r(YAt,"__init__()"),YAt.forEach(t),$kr=r(nOe," (throws an error)."),nOe.forEach(t),kkr=i(zl),Vt=n(zl,"DIV",{class:!0});var l6=s(Vt);T(O8.$$.fragment,l6),Skr=i(l6),B7e=n(l6,"P",{});var KAt=s(B7e);Rkr=r(KAt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),KAt.forEach(t),Pkr=i(l6),Nc=n(l6,"P",{});var Uee=s(Nc);Bkr=r(Uee,`Note:
Loading a model from its configuration file does `),I7e=n(Uee,"STRONG",{});var ZAt=s(I7e);Ikr=r(ZAt,"not"),ZAt.forEach(t),Nkr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=n(Uee,"A",{href:!0});var eyt=s(kY);qkr=r(eyt,"from_pretrained()"),eyt.forEach(t),jkr=r(Uee," to load the model weights."),Uee.forEach(t),Dkr=i(l6),T(bC.$$.fragment,l6),l6.forEach(t),Gkr=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(V8.$$.fragment,Wl),Okr=i(Wl),N7e=n(Wl,"P",{});var oyt=s(N7e);Vkr=r(oyt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),oyt.forEach(t),Xkr=i(Wl),_n=n(Wl,"P",{});var i6=s(_n);zkr=r(i6,"The model class to instantiate is selected based on the "),q7e=n(i6,"CODE",{});var ryt=s(q7e);Wkr=r(ryt,"model_type"),ryt.forEach(t),Qkr=r(i6,` property of the config object (either
passed as an argument or loaded from `),j7e=n(i6,"CODE",{});var tyt=s(j7e);Hkr=r(tyt,"pretrained_model_name_or_path"),tyt.forEach(t),Ukr=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D7e=n(i6,"CODE",{});var ayt=s(D7e);Jkr=r(ayt,"pretrained_model_name_or_path"),ayt.forEach(t),Ykr=r(i6,":"),i6.forEach(t),Kkr=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);vC=n(we,"LI",{});var YIe=s(vC);G7e=n(YIe,"STRONG",{});var nyt=s(G7e);Zkr=r(nyt,"albert"),nyt.forEach(t),eSr=r(YIe," \u2014 "),SY=n(YIe,"A",{href:!0});var syt=s(SY);oSr=r(syt,"FlaxAlbertForPreTraining"),syt.forEach(t),rSr=r(YIe," (ALBERT model)"),YIe.forEach(t),tSr=i(we),FC=n(we,"LI",{});var KIe=s(FC);O7e=n(KIe,"STRONG",{});var lyt=s(O7e);aSr=r(lyt,"bart"),lyt.forEach(t),nSr=r(KIe," \u2014 "),RY=n(KIe,"A",{href:!0});var iyt=s(RY);sSr=r(iyt,"FlaxBartForConditionalGeneration"),iyt.forEach(t),lSr=r(KIe," (BART model)"),KIe.forEach(t),iSr=i(we),TC=n(we,"LI",{});var ZIe=s(TC);V7e=n(ZIe,"STRONG",{});var dyt=s(V7e);dSr=r(dyt,"bert"),dyt.forEach(t),cSr=r(ZIe," \u2014 "),PY=n(ZIe,"A",{href:!0});var cyt=s(PY);fSr=r(cyt,"FlaxBertForPreTraining"),cyt.forEach(t),mSr=r(ZIe," (BERT model)"),ZIe.forEach(t),gSr=i(we),MC=n(we,"LI",{});var eNe=s(MC);X7e=n(eNe,"STRONG",{});var fyt=s(X7e);hSr=r(fyt,"big_bird"),fyt.forEach(t),pSr=r(eNe," \u2014 "),BY=n(eNe,"A",{href:!0});var myt=s(BY);_Sr=r(myt,"FlaxBigBirdForPreTraining"),myt.forEach(t),uSr=r(eNe," (BigBird model)"),eNe.forEach(t),bSr=i(we),EC=n(we,"LI",{});var oNe=s(EC);z7e=n(oNe,"STRONG",{});var gyt=s(z7e);vSr=r(gyt,"electra"),gyt.forEach(t),FSr=r(oNe," \u2014 "),IY=n(oNe,"A",{href:!0});var hyt=s(IY);TSr=r(hyt,"FlaxElectraForPreTraining"),hyt.forEach(t),MSr=r(oNe," (ELECTRA model)"),oNe.forEach(t),ESr=i(we),CC=n(we,"LI",{});var rNe=s(CC);W7e=n(rNe,"STRONG",{});var pyt=s(W7e);CSr=r(pyt,"mbart"),pyt.forEach(t),wSr=r(rNe," \u2014 "),NY=n(rNe,"A",{href:!0});var _yt=s(NY);ASr=r(_yt,"FlaxMBartForConditionalGeneration"),_yt.forEach(t),ySr=r(rNe," (mBART model)"),rNe.forEach(t),LSr=i(we),wC=n(we,"LI",{});var tNe=s(wC);Q7e=n(tNe,"STRONG",{});var uyt=s(Q7e);xSr=r(uyt,"mt5"),uyt.forEach(t),$Sr=r(tNe," \u2014 "),qY=n(tNe,"A",{href:!0});var byt=s(qY);kSr=r(byt,"FlaxMT5ForConditionalGeneration"),byt.forEach(t),SSr=r(tNe," (mT5 model)"),tNe.forEach(t),RSr=i(we),AC=n(we,"LI",{});var aNe=s(AC);H7e=n(aNe,"STRONG",{});var vyt=s(H7e);PSr=r(vyt,"roberta"),vyt.forEach(t),BSr=r(aNe," \u2014 "),jY=n(aNe,"A",{href:!0});var Fyt=s(jY);ISr=r(Fyt,"FlaxRobertaForMaskedLM"),Fyt.forEach(t),NSr=r(aNe," (RoBERTa model)"),aNe.forEach(t),qSr=i(we),yC=n(we,"LI",{});var nNe=s(yC);U7e=n(nNe,"STRONG",{});var Tyt=s(U7e);jSr=r(Tyt,"roformer"),Tyt.forEach(t),DSr=r(nNe," \u2014 "),DY=n(nNe,"A",{href:!0});var Myt=s(DY);GSr=r(Myt,"FlaxRoFormerForMaskedLM"),Myt.forEach(t),OSr=r(nNe," (RoFormer model)"),nNe.forEach(t),VSr=i(we),LC=n(we,"LI",{});var sNe=s(LC);J7e=n(sNe,"STRONG",{});var Eyt=s(J7e);XSr=r(Eyt,"t5"),Eyt.forEach(t),zSr=r(sNe," \u2014 "),GY=n(sNe,"A",{href:!0});var Cyt=s(GY);WSr=r(Cyt,"FlaxT5ForConditionalGeneration"),Cyt.forEach(t),QSr=r(sNe," (T5 model)"),sNe.forEach(t),HSr=i(we),xC=n(we,"LI",{});var lNe=s(xC);Y7e=n(lNe,"STRONG",{});var wyt=s(Y7e);USr=r(wyt,"wav2vec2"),wyt.forEach(t),JSr=r(lNe," \u2014 "),OY=n(lNe,"A",{href:!0});var Ayt=s(OY);YSr=r(Ayt,"FlaxWav2Vec2ForPreTraining"),Ayt.forEach(t),KSr=r(lNe," (Wav2Vec2 model)"),lNe.forEach(t),ZSr=i(we),$C=n(we,"LI",{});var iNe=s($C);K7e=n(iNe,"STRONG",{});var yyt=s(K7e);eRr=r(yyt,"xlm-roberta"),yyt.forEach(t),oRr=r(iNe," \u2014 "),VY=n(iNe,"A",{href:!0});var Lyt=s(VY);rRr=r(Lyt,"FlaxXLMRobertaForMaskedLM"),Lyt.forEach(t),tRr=r(iNe," (XLM-RoBERTa model)"),iNe.forEach(t),we.forEach(t),aRr=i(Wl),T(kC.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),Zje=i(f),qc=n(f,"H2",{class:!0});var sOe=s(qc);SC=n(sOe,"A",{id:!0,class:!0,href:!0});var xyt=s(SC);Z7e=n(xyt,"SPAN",{});var $yt=s(Z7e);T(X8.$$.fragment,$yt),$yt.forEach(t),xyt.forEach(t),nRr=i(sOe),e9e=n(sOe,"SPAN",{});var kyt=s(e9e);sRr=r(kyt,"FlaxAutoModelForMaskedLM"),kyt.forEach(t),sOe.forEach(t),eDe=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(z8.$$.fragment,Ql),lRr=i(Ql),jc=n(Ql,"P",{});var Jee=s(jc);iRr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XY=n(Jee,"A",{href:!0});var Syt=s(XY);dRr=r(Syt,"from_pretrained()"),Syt.forEach(t),cRr=r(Jee," class method or the "),zY=n(Jee,"A",{href:!0});var Ryt=s(zY);fRr=r(Ryt,"from_config()"),Ryt.forEach(t),mRr=r(Jee,` class
method.`),Jee.forEach(t),gRr=i(Ql),W8=n(Ql,"P",{});var lOe=s(W8);hRr=r(lOe,"This class cannot be instantiated directly using "),o9e=n(lOe,"CODE",{});var Pyt=s(o9e);pRr=r(Pyt,"__init__()"),Pyt.forEach(t),_Rr=r(lOe," (throws an error)."),lOe.forEach(t),uRr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var d6=s(Xt);T(Q8.$$.fragment,d6),bRr=i(d6),r9e=n(d6,"P",{});var Byt=s(r9e);vRr=r(Byt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Byt.forEach(t),FRr=i(d6),Dc=n(d6,"P",{});var Yee=s(Dc);TRr=r(Yee,`Note:
Loading a model from its configuration file does `),t9e=n(Yee,"STRONG",{});var Iyt=s(t9e);MRr=r(Iyt,"not"),Iyt.forEach(t),ERr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=n(Yee,"A",{href:!0});var Nyt=s(WY);CRr=r(Nyt,"from_pretrained()"),Nyt.forEach(t),wRr=r(Yee," to load the model weights."),Yee.forEach(t),ARr=i(d6),T(RC.$$.fragment,d6),d6.forEach(t),yRr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(H8.$$.fragment,Hl),LRr=i(Hl),a9e=n(Hl,"P",{});var qyt=s(a9e);xRr=r(qyt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qyt.forEach(t),$Rr=i(Hl),un=n(Hl,"P",{});var c6=s(un);kRr=r(c6,"The model class to instantiate is selected based on the "),n9e=n(c6,"CODE",{});var jyt=s(n9e);SRr=r(jyt,"model_type"),jyt.forEach(t),RRr=r(c6,` property of the config object (either
passed as an argument or loaded from `),s9e=n(c6,"CODE",{});var Dyt=s(s9e);PRr=r(Dyt,"pretrained_model_name_or_path"),Dyt.forEach(t),BRr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l9e=n(c6,"CODE",{});var Gyt=s(l9e);IRr=r(Gyt,"pretrained_model_name_or_path"),Gyt.forEach(t),NRr=r(c6,":"),c6.forEach(t),qRr=i(Hl),xe=n(Hl,"UL",{});var Ne=s(xe);PC=n(Ne,"LI",{});var dNe=s(PC);i9e=n(dNe,"STRONG",{});var Oyt=s(i9e);jRr=r(Oyt,"albert"),Oyt.forEach(t),DRr=r(dNe," \u2014 "),QY=n(dNe,"A",{href:!0});var Vyt=s(QY);GRr=r(Vyt,"FlaxAlbertForMaskedLM"),Vyt.forEach(t),ORr=r(dNe," (ALBERT model)"),dNe.forEach(t),VRr=i(Ne),BC=n(Ne,"LI",{});var cNe=s(BC);d9e=n(cNe,"STRONG",{});var Xyt=s(d9e);XRr=r(Xyt,"bart"),Xyt.forEach(t),zRr=r(cNe," \u2014 "),HY=n(cNe,"A",{href:!0});var zyt=s(HY);WRr=r(zyt,"FlaxBartForConditionalGeneration"),zyt.forEach(t),QRr=r(cNe," (BART model)"),cNe.forEach(t),HRr=i(Ne),IC=n(Ne,"LI",{});var fNe=s(IC);c9e=n(fNe,"STRONG",{});var Wyt=s(c9e);URr=r(Wyt,"bert"),Wyt.forEach(t),JRr=r(fNe," \u2014 "),UY=n(fNe,"A",{href:!0});var Qyt=s(UY);YRr=r(Qyt,"FlaxBertForMaskedLM"),Qyt.forEach(t),KRr=r(fNe," (BERT model)"),fNe.forEach(t),ZRr=i(Ne),NC=n(Ne,"LI",{});var mNe=s(NC);f9e=n(mNe,"STRONG",{});var Hyt=s(f9e);ePr=r(Hyt,"big_bird"),Hyt.forEach(t),oPr=r(mNe," \u2014 "),JY=n(mNe,"A",{href:!0});var Uyt=s(JY);rPr=r(Uyt,"FlaxBigBirdForMaskedLM"),Uyt.forEach(t),tPr=r(mNe," (BigBird model)"),mNe.forEach(t),aPr=i(Ne),qC=n(Ne,"LI",{});var gNe=s(qC);m9e=n(gNe,"STRONG",{});var Jyt=s(m9e);nPr=r(Jyt,"distilbert"),Jyt.forEach(t),sPr=r(gNe," \u2014 "),YY=n(gNe,"A",{href:!0});var Yyt=s(YY);lPr=r(Yyt,"FlaxDistilBertForMaskedLM"),Yyt.forEach(t),iPr=r(gNe," (DistilBERT model)"),gNe.forEach(t),dPr=i(Ne),jC=n(Ne,"LI",{});var hNe=s(jC);g9e=n(hNe,"STRONG",{});var Kyt=s(g9e);cPr=r(Kyt,"electra"),Kyt.forEach(t),fPr=r(hNe," \u2014 "),KY=n(hNe,"A",{href:!0});var Zyt=s(KY);mPr=r(Zyt,"FlaxElectraForMaskedLM"),Zyt.forEach(t),gPr=r(hNe," (ELECTRA model)"),hNe.forEach(t),hPr=i(Ne),DC=n(Ne,"LI",{});var pNe=s(DC);h9e=n(pNe,"STRONG",{});var eLt=s(h9e);pPr=r(eLt,"mbart"),eLt.forEach(t),_Pr=r(pNe," \u2014 "),ZY=n(pNe,"A",{href:!0});var oLt=s(ZY);uPr=r(oLt,"FlaxMBartForConditionalGeneration"),oLt.forEach(t),bPr=r(pNe," (mBART model)"),pNe.forEach(t),vPr=i(Ne),GC=n(Ne,"LI",{});var _Ne=s(GC);p9e=n(_Ne,"STRONG",{});var rLt=s(p9e);FPr=r(rLt,"roberta"),rLt.forEach(t),TPr=r(_Ne," \u2014 "),eK=n(_Ne,"A",{href:!0});var tLt=s(eK);MPr=r(tLt,"FlaxRobertaForMaskedLM"),tLt.forEach(t),EPr=r(_Ne," (RoBERTa model)"),_Ne.forEach(t),CPr=i(Ne),OC=n(Ne,"LI",{});var uNe=s(OC);_9e=n(uNe,"STRONG",{});var aLt=s(_9e);wPr=r(aLt,"roformer"),aLt.forEach(t),APr=r(uNe," \u2014 "),oK=n(uNe,"A",{href:!0});var nLt=s(oK);yPr=r(nLt,"FlaxRoFormerForMaskedLM"),nLt.forEach(t),LPr=r(uNe," (RoFormer model)"),uNe.forEach(t),xPr=i(Ne),VC=n(Ne,"LI",{});var bNe=s(VC);u9e=n(bNe,"STRONG",{});var sLt=s(u9e);$Pr=r(sLt,"xlm-roberta"),sLt.forEach(t),kPr=r(bNe," \u2014 "),rK=n(bNe,"A",{href:!0});var lLt=s(rK);SPr=r(lLt,"FlaxXLMRobertaForMaskedLM"),lLt.forEach(t),RPr=r(bNe," (XLM-RoBERTa model)"),bNe.forEach(t),Ne.forEach(t),PPr=i(Hl),T(XC.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),oDe=i(f),Gc=n(f,"H2",{class:!0});var iOe=s(Gc);zC=n(iOe,"A",{id:!0,class:!0,href:!0});var iLt=s(zC);b9e=n(iLt,"SPAN",{});var dLt=s(b9e);T(U8.$$.fragment,dLt),dLt.forEach(t),iLt.forEach(t),BPr=i(iOe),v9e=n(iOe,"SPAN",{});var cLt=s(v9e);IPr=r(cLt,"FlaxAutoModelForSeq2SeqLM"),cLt.forEach(t),iOe.forEach(t),rDe=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(J8.$$.fragment,Ul),NPr=i(Ul),Oc=n(Ul,"P",{});var Kee=s(Oc);qPr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tK=n(Kee,"A",{href:!0});var fLt=s(tK);jPr=r(fLt,"from_pretrained()"),fLt.forEach(t),DPr=r(Kee," class method or the "),aK=n(Kee,"A",{href:!0});var mLt=s(aK);GPr=r(mLt,"from_config()"),mLt.forEach(t),OPr=r(Kee,` class
method.`),Kee.forEach(t),VPr=i(Ul),Y8=n(Ul,"P",{});var dOe=s(Y8);XPr=r(dOe,"This class cannot be instantiated directly using "),F9e=n(dOe,"CODE",{});var gLt=s(F9e);zPr=r(gLt,"__init__()"),gLt.forEach(t),WPr=r(dOe," (throws an error)."),dOe.forEach(t),QPr=i(Ul),zt=n(Ul,"DIV",{class:!0});var f6=s(zt);T(K8.$$.fragment,f6),HPr=i(f6),T9e=n(f6,"P",{});var hLt=s(T9e);UPr=r(hLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hLt.forEach(t),JPr=i(f6),Vc=n(f6,"P",{});var Zee=s(Vc);YPr=r(Zee,`Note:
Loading a model from its configuration file does `),M9e=n(Zee,"STRONG",{});var pLt=s(M9e);KPr=r(pLt,"not"),pLt.forEach(t),ZPr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nK=n(Zee,"A",{href:!0});var _Lt=s(nK);eBr=r(_Lt,"from_pretrained()"),_Lt.forEach(t),oBr=r(Zee," to load the model weights."),Zee.forEach(t),rBr=i(f6),T(WC.$$.fragment,f6),f6.forEach(t),tBr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(Z8.$$.fragment,Jl),aBr=i(Jl),E9e=n(Jl,"P",{});var uLt=s(E9e);nBr=r(uLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uLt.forEach(t),sBr=i(Jl),bn=n(Jl,"P",{});var m6=s(bn);lBr=r(m6,"The model class to instantiate is selected based on the "),C9e=n(m6,"CODE",{});var bLt=s(C9e);iBr=r(bLt,"model_type"),bLt.forEach(t),dBr=r(m6,` property of the config object (either
passed as an argument or loaded from `),w9e=n(m6,"CODE",{});var vLt=s(w9e);cBr=r(vLt,"pretrained_model_name_or_path"),vLt.forEach(t),fBr=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A9e=n(m6,"CODE",{});var FLt=s(A9e);mBr=r(FLt,"pretrained_model_name_or_path"),FLt.forEach(t),gBr=r(m6,":"),m6.forEach(t),hBr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);QC=n(ze,"LI",{});var vNe=s(QC);y9e=n(vNe,"STRONG",{});var TLt=s(y9e);pBr=r(TLt,"bart"),TLt.forEach(t),_Br=r(vNe," \u2014 "),sK=n(vNe,"A",{href:!0});var MLt=s(sK);uBr=r(MLt,"FlaxBartForConditionalGeneration"),MLt.forEach(t),bBr=r(vNe," (BART model)"),vNe.forEach(t),vBr=i(ze),HC=n(ze,"LI",{});var FNe=s(HC);L9e=n(FNe,"STRONG",{});var ELt=s(L9e);FBr=r(ELt,"blenderbot"),ELt.forEach(t),TBr=r(FNe," \u2014 "),lK=n(FNe,"A",{href:!0});var CLt=s(lK);MBr=r(CLt,"FlaxBlenderbotForConditionalGeneration"),CLt.forEach(t),EBr=r(FNe," (Blenderbot model)"),FNe.forEach(t),CBr=i(ze),UC=n(ze,"LI",{});var TNe=s(UC);x9e=n(TNe,"STRONG",{});var wLt=s(x9e);wBr=r(wLt,"blenderbot-small"),wLt.forEach(t),ABr=r(TNe," \u2014 "),iK=n(TNe,"A",{href:!0});var ALt=s(iK);yBr=r(ALt,"FlaxBlenderbotSmallForConditionalGeneration"),ALt.forEach(t),LBr=r(TNe," (BlenderbotSmall model)"),TNe.forEach(t),xBr=i(ze),JC=n(ze,"LI",{});var MNe=s(JC);$9e=n(MNe,"STRONG",{});var yLt=s($9e);$Br=r(yLt,"encoder-decoder"),yLt.forEach(t),kBr=r(MNe," \u2014 "),dK=n(MNe,"A",{href:!0});var LLt=s(dK);SBr=r(LLt,"FlaxEncoderDecoderModel"),LLt.forEach(t),RBr=r(MNe," (Encoder decoder model)"),MNe.forEach(t),PBr=i(ze),YC=n(ze,"LI",{});var ENe=s(YC);k9e=n(ENe,"STRONG",{});var xLt=s(k9e);BBr=r(xLt,"marian"),xLt.forEach(t),IBr=r(ENe," \u2014 "),cK=n(ENe,"A",{href:!0});var $Lt=s(cK);NBr=r($Lt,"FlaxMarianMTModel"),$Lt.forEach(t),qBr=r(ENe," (Marian model)"),ENe.forEach(t),jBr=i(ze),KC=n(ze,"LI",{});var CNe=s(KC);S9e=n(CNe,"STRONG",{});var kLt=s(S9e);DBr=r(kLt,"mbart"),kLt.forEach(t),GBr=r(CNe," \u2014 "),fK=n(CNe,"A",{href:!0});var SLt=s(fK);OBr=r(SLt,"FlaxMBartForConditionalGeneration"),SLt.forEach(t),VBr=r(CNe," (mBART model)"),CNe.forEach(t),XBr=i(ze),ZC=n(ze,"LI",{});var wNe=s(ZC);R9e=n(wNe,"STRONG",{});var RLt=s(R9e);zBr=r(RLt,"mt5"),RLt.forEach(t),WBr=r(wNe," \u2014 "),mK=n(wNe,"A",{href:!0});var PLt=s(mK);QBr=r(PLt,"FlaxMT5ForConditionalGeneration"),PLt.forEach(t),HBr=r(wNe," (mT5 model)"),wNe.forEach(t),UBr=i(ze),e3=n(ze,"LI",{});var ANe=s(e3);P9e=n(ANe,"STRONG",{});var BLt=s(P9e);JBr=r(BLt,"pegasus"),BLt.forEach(t),YBr=r(ANe," \u2014 "),gK=n(ANe,"A",{href:!0});var ILt=s(gK);KBr=r(ILt,"FlaxPegasusForConditionalGeneration"),ILt.forEach(t),ZBr=r(ANe," (Pegasus model)"),ANe.forEach(t),eIr=i(ze),o3=n(ze,"LI",{});var yNe=s(o3);B9e=n(yNe,"STRONG",{});var NLt=s(B9e);oIr=r(NLt,"t5"),NLt.forEach(t),rIr=r(yNe," \u2014 "),hK=n(yNe,"A",{href:!0});var qLt=s(hK);tIr=r(qLt,"FlaxT5ForConditionalGeneration"),qLt.forEach(t),aIr=r(yNe," (T5 model)"),yNe.forEach(t),ze.forEach(t),nIr=i(Jl),T(r3.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),tDe=i(f),Xc=n(f,"H2",{class:!0});var cOe=s(Xc);t3=n(cOe,"A",{id:!0,class:!0,href:!0});var jLt=s(t3);I9e=n(jLt,"SPAN",{});var DLt=s(I9e);T(ex.$$.fragment,DLt),DLt.forEach(t),jLt.forEach(t),sIr=i(cOe),N9e=n(cOe,"SPAN",{});var GLt=s(N9e);lIr=r(GLt,"FlaxAutoModelForSequenceClassification"),GLt.forEach(t),cOe.forEach(t),aDe=i(f),_r=n(f,"DIV",{class:!0});var Yl=s(_r);T(ox.$$.fragment,Yl),iIr=i(Yl),zc=n(Yl,"P",{});var eoe=s(zc);dIr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pK=n(eoe,"A",{href:!0});var OLt=s(pK);cIr=r(OLt,"from_pretrained()"),OLt.forEach(t),fIr=r(eoe," class method or the "),_K=n(eoe,"A",{href:!0});var VLt=s(_K);mIr=r(VLt,"from_config()"),VLt.forEach(t),gIr=r(eoe,` class
method.`),eoe.forEach(t),hIr=i(Yl),rx=n(Yl,"P",{});var fOe=s(rx);pIr=r(fOe,"This class cannot be instantiated directly using "),q9e=n(fOe,"CODE",{});var XLt=s(q9e);_Ir=r(XLt,"__init__()"),XLt.forEach(t),uIr=r(fOe," (throws an error)."),fOe.forEach(t),bIr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var g6=s(Wt);T(tx.$$.fragment,g6),vIr=i(g6),j9e=n(g6,"P",{});var zLt=s(j9e);FIr=r(zLt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zLt.forEach(t),TIr=i(g6),Wc=n(g6,"P",{});var ooe=s(Wc);MIr=r(ooe,`Note:
Loading a model from its configuration file does `),D9e=n(ooe,"STRONG",{});var WLt=s(D9e);EIr=r(WLt,"not"),WLt.forEach(t),CIr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(ooe,"A",{href:!0});var QLt=s(uK);wIr=r(QLt,"from_pretrained()"),QLt.forEach(t),AIr=r(ooe," to load the model weights."),ooe.forEach(t),yIr=i(g6),T(a3.$$.fragment,g6),g6.forEach(t),LIr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(ax.$$.fragment,Kl),xIr=i(Kl),G9e=n(Kl,"P",{});var HLt=s(G9e);$Ir=r(HLt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),HLt.forEach(t),kIr=i(Kl),vn=n(Kl,"P",{});var h6=s(vn);SIr=r(h6,"The model class to instantiate is selected based on the "),O9e=n(h6,"CODE",{});var ULt=s(O9e);RIr=r(ULt,"model_type"),ULt.forEach(t),PIr=r(h6,` property of the config object (either
passed as an argument or loaded from `),V9e=n(h6,"CODE",{});var JLt=s(V9e);BIr=r(JLt,"pretrained_model_name_or_path"),JLt.forEach(t),IIr=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X9e=n(h6,"CODE",{});var YLt=s(X9e);NIr=r(YLt,"pretrained_model_name_or_path"),YLt.forEach(t),qIr=r(h6,":"),h6.forEach(t),jIr=i(Kl),$e=n(Kl,"UL",{});var qe=s($e);n3=n(qe,"LI",{});var LNe=s(n3);z9e=n(LNe,"STRONG",{});var KLt=s(z9e);DIr=r(KLt,"albert"),KLt.forEach(t),GIr=r(LNe," \u2014 "),bK=n(LNe,"A",{href:!0});var ZLt=s(bK);OIr=r(ZLt,"FlaxAlbertForSequenceClassification"),ZLt.forEach(t),VIr=r(LNe," (ALBERT model)"),LNe.forEach(t),XIr=i(qe),s3=n(qe,"LI",{});var xNe=s(s3);W9e=n(xNe,"STRONG",{});var e8t=s(W9e);zIr=r(e8t,"bart"),e8t.forEach(t),WIr=r(xNe," \u2014 "),vK=n(xNe,"A",{href:!0});var o8t=s(vK);QIr=r(o8t,"FlaxBartForSequenceClassification"),o8t.forEach(t),HIr=r(xNe," (BART model)"),xNe.forEach(t),UIr=i(qe),l3=n(qe,"LI",{});var $Ne=s(l3);Q9e=n($Ne,"STRONG",{});var r8t=s(Q9e);JIr=r(r8t,"bert"),r8t.forEach(t),YIr=r($Ne," \u2014 "),FK=n($Ne,"A",{href:!0});var t8t=s(FK);KIr=r(t8t,"FlaxBertForSequenceClassification"),t8t.forEach(t),ZIr=r($Ne," (BERT model)"),$Ne.forEach(t),eNr=i(qe),i3=n(qe,"LI",{});var kNe=s(i3);H9e=n(kNe,"STRONG",{});var a8t=s(H9e);oNr=r(a8t,"big_bird"),a8t.forEach(t),rNr=r(kNe," \u2014 "),TK=n(kNe,"A",{href:!0});var n8t=s(TK);tNr=r(n8t,"FlaxBigBirdForSequenceClassification"),n8t.forEach(t),aNr=r(kNe," (BigBird model)"),kNe.forEach(t),nNr=i(qe),d3=n(qe,"LI",{});var SNe=s(d3);U9e=n(SNe,"STRONG",{});var s8t=s(U9e);sNr=r(s8t,"distilbert"),s8t.forEach(t),lNr=r(SNe," \u2014 "),MK=n(SNe,"A",{href:!0});var l8t=s(MK);iNr=r(l8t,"FlaxDistilBertForSequenceClassification"),l8t.forEach(t),dNr=r(SNe," (DistilBERT model)"),SNe.forEach(t),cNr=i(qe),c3=n(qe,"LI",{});var RNe=s(c3);J9e=n(RNe,"STRONG",{});var i8t=s(J9e);fNr=r(i8t,"electra"),i8t.forEach(t),mNr=r(RNe," \u2014 "),EK=n(RNe,"A",{href:!0});var d8t=s(EK);gNr=r(d8t,"FlaxElectraForSequenceClassification"),d8t.forEach(t),hNr=r(RNe," (ELECTRA model)"),RNe.forEach(t),pNr=i(qe),f3=n(qe,"LI",{});var PNe=s(f3);Y9e=n(PNe,"STRONG",{});var c8t=s(Y9e);_Nr=r(c8t,"mbart"),c8t.forEach(t),uNr=r(PNe," \u2014 "),CK=n(PNe,"A",{href:!0});var f8t=s(CK);bNr=r(f8t,"FlaxMBartForSequenceClassification"),f8t.forEach(t),vNr=r(PNe," (mBART model)"),PNe.forEach(t),FNr=i(qe),m3=n(qe,"LI",{});var BNe=s(m3);K9e=n(BNe,"STRONG",{});var m8t=s(K9e);TNr=r(m8t,"roberta"),m8t.forEach(t),MNr=r(BNe," \u2014 "),wK=n(BNe,"A",{href:!0});var g8t=s(wK);ENr=r(g8t,"FlaxRobertaForSequenceClassification"),g8t.forEach(t),CNr=r(BNe," (RoBERTa model)"),BNe.forEach(t),wNr=i(qe),g3=n(qe,"LI",{});var INe=s(g3);Z9e=n(INe,"STRONG",{});var h8t=s(Z9e);ANr=r(h8t,"roformer"),h8t.forEach(t),yNr=r(INe," \u2014 "),AK=n(INe,"A",{href:!0});var p8t=s(AK);LNr=r(p8t,"FlaxRoFormerForSequenceClassification"),p8t.forEach(t),xNr=r(INe," (RoFormer model)"),INe.forEach(t),$Nr=i(qe),h3=n(qe,"LI",{});var NNe=s(h3);eMe=n(NNe,"STRONG",{});var _8t=s(eMe);kNr=r(_8t,"xlm-roberta"),_8t.forEach(t),SNr=r(NNe," \u2014 "),yK=n(NNe,"A",{href:!0});var u8t=s(yK);RNr=r(u8t,"FlaxXLMRobertaForSequenceClassification"),u8t.forEach(t),PNr=r(NNe," (XLM-RoBERTa model)"),NNe.forEach(t),qe.forEach(t),BNr=i(Kl),T(p3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),nDe=i(f),Qc=n(f,"H2",{class:!0});var mOe=s(Qc);_3=n(mOe,"A",{id:!0,class:!0,href:!0});var b8t=s(_3);oMe=n(b8t,"SPAN",{});var v8t=s(oMe);T(nx.$$.fragment,v8t),v8t.forEach(t),b8t.forEach(t),INr=i(mOe),rMe=n(mOe,"SPAN",{});var F8t=s(rMe);NNr=r(F8t,"FlaxAutoModelForQuestionAnswering"),F8t.forEach(t),mOe.forEach(t),sDe=i(f),ur=n(f,"DIV",{class:!0});var Zl=s(ur);T(sx.$$.fragment,Zl),qNr=i(Zl),Hc=n(Zl,"P",{});var roe=s(Hc);jNr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),LK=n(roe,"A",{href:!0});var T8t=s(LK);DNr=r(T8t,"from_pretrained()"),T8t.forEach(t),GNr=r(roe," class method or the "),xK=n(roe,"A",{href:!0});var M8t=s(xK);ONr=r(M8t,"from_config()"),M8t.forEach(t),VNr=r(roe,` class
method.`),roe.forEach(t),XNr=i(Zl),lx=n(Zl,"P",{});var gOe=s(lx);zNr=r(gOe,"This class cannot be instantiated directly using "),tMe=n(gOe,"CODE",{});var E8t=s(tMe);WNr=r(E8t,"__init__()"),E8t.forEach(t),QNr=r(gOe," (throws an error)."),gOe.forEach(t),HNr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var p6=s(Qt);T(ix.$$.fragment,p6),UNr=i(p6),aMe=n(p6,"P",{});var C8t=s(aMe);JNr=r(C8t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),C8t.forEach(t),YNr=i(p6),Uc=n(p6,"P",{});var toe=s(Uc);KNr=r(toe,`Note:
Loading a model from its configuration file does `),nMe=n(toe,"STRONG",{});var w8t=s(nMe);ZNr=r(w8t,"not"),w8t.forEach(t),eqr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=n(toe,"A",{href:!0});var A8t=s($K);oqr=r(A8t,"from_pretrained()"),A8t.forEach(t),rqr=r(toe," to load the model weights."),toe.forEach(t),tqr=i(p6),T(u3.$$.fragment,p6),p6.forEach(t),aqr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(dx.$$.fragment,ei),nqr=i(ei),sMe=n(ei,"P",{});var y8t=s(sMe);sqr=r(y8t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),y8t.forEach(t),lqr=i(ei),Fn=n(ei,"P",{});var _6=s(Fn);iqr=r(_6,"The model class to instantiate is selected based on the "),lMe=n(_6,"CODE",{});var L8t=s(lMe);dqr=r(L8t,"model_type"),L8t.forEach(t),cqr=r(_6,` property of the config object (either
passed as an argument or loaded from `),iMe=n(_6,"CODE",{});var x8t=s(iMe);fqr=r(x8t,"pretrained_model_name_or_path"),x8t.forEach(t),mqr=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=n(_6,"CODE",{});var $8t=s(dMe);gqr=r($8t,"pretrained_model_name_or_path"),$8t.forEach(t),hqr=r(_6,":"),_6.forEach(t),pqr=i(ei),ke=n(ei,"UL",{});var je=s(ke);b3=n(je,"LI",{});var qNe=s(b3);cMe=n(qNe,"STRONG",{});var k8t=s(cMe);_qr=r(k8t,"albert"),k8t.forEach(t),uqr=r(qNe," \u2014 "),kK=n(qNe,"A",{href:!0});var S8t=s(kK);bqr=r(S8t,"FlaxAlbertForQuestionAnswering"),S8t.forEach(t),vqr=r(qNe," (ALBERT model)"),qNe.forEach(t),Fqr=i(je),v3=n(je,"LI",{});var jNe=s(v3);fMe=n(jNe,"STRONG",{});var R8t=s(fMe);Tqr=r(R8t,"bart"),R8t.forEach(t),Mqr=r(jNe," \u2014 "),SK=n(jNe,"A",{href:!0});var P8t=s(SK);Eqr=r(P8t,"FlaxBartForQuestionAnswering"),P8t.forEach(t),Cqr=r(jNe," (BART model)"),jNe.forEach(t),wqr=i(je),F3=n(je,"LI",{});var DNe=s(F3);mMe=n(DNe,"STRONG",{});var B8t=s(mMe);Aqr=r(B8t,"bert"),B8t.forEach(t),yqr=r(DNe," \u2014 "),RK=n(DNe,"A",{href:!0});var I8t=s(RK);Lqr=r(I8t,"FlaxBertForQuestionAnswering"),I8t.forEach(t),xqr=r(DNe," (BERT model)"),DNe.forEach(t),$qr=i(je),T3=n(je,"LI",{});var GNe=s(T3);gMe=n(GNe,"STRONG",{});var N8t=s(gMe);kqr=r(N8t,"big_bird"),N8t.forEach(t),Sqr=r(GNe," \u2014 "),PK=n(GNe,"A",{href:!0});var q8t=s(PK);Rqr=r(q8t,"FlaxBigBirdForQuestionAnswering"),q8t.forEach(t),Pqr=r(GNe," (BigBird model)"),GNe.forEach(t),Bqr=i(je),M3=n(je,"LI",{});var ONe=s(M3);hMe=n(ONe,"STRONG",{});var j8t=s(hMe);Iqr=r(j8t,"distilbert"),j8t.forEach(t),Nqr=r(ONe," \u2014 "),BK=n(ONe,"A",{href:!0});var D8t=s(BK);qqr=r(D8t,"FlaxDistilBertForQuestionAnswering"),D8t.forEach(t),jqr=r(ONe," (DistilBERT model)"),ONe.forEach(t),Dqr=i(je),E3=n(je,"LI",{});var VNe=s(E3);pMe=n(VNe,"STRONG",{});var G8t=s(pMe);Gqr=r(G8t,"electra"),G8t.forEach(t),Oqr=r(VNe," \u2014 "),IK=n(VNe,"A",{href:!0});var O8t=s(IK);Vqr=r(O8t,"FlaxElectraForQuestionAnswering"),O8t.forEach(t),Xqr=r(VNe," (ELECTRA model)"),VNe.forEach(t),zqr=i(je),C3=n(je,"LI",{});var XNe=s(C3);_Me=n(XNe,"STRONG",{});var V8t=s(_Me);Wqr=r(V8t,"mbart"),V8t.forEach(t),Qqr=r(XNe," \u2014 "),NK=n(XNe,"A",{href:!0});var X8t=s(NK);Hqr=r(X8t,"FlaxMBartForQuestionAnswering"),X8t.forEach(t),Uqr=r(XNe," (mBART model)"),XNe.forEach(t),Jqr=i(je),w3=n(je,"LI",{});var zNe=s(w3);uMe=n(zNe,"STRONG",{});var z8t=s(uMe);Yqr=r(z8t,"roberta"),z8t.forEach(t),Kqr=r(zNe," \u2014 "),qK=n(zNe,"A",{href:!0});var W8t=s(qK);Zqr=r(W8t,"FlaxRobertaForQuestionAnswering"),W8t.forEach(t),ejr=r(zNe," (RoBERTa model)"),zNe.forEach(t),ojr=i(je),A3=n(je,"LI",{});var WNe=s(A3);bMe=n(WNe,"STRONG",{});var Q8t=s(bMe);rjr=r(Q8t,"roformer"),Q8t.forEach(t),tjr=r(WNe," \u2014 "),jK=n(WNe,"A",{href:!0});var H8t=s(jK);ajr=r(H8t,"FlaxRoFormerForQuestionAnswering"),H8t.forEach(t),njr=r(WNe," (RoFormer model)"),WNe.forEach(t),sjr=i(je),y3=n(je,"LI",{});var QNe=s(y3);vMe=n(QNe,"STRONG",{});var U8t=s(vMe);ljr=r(U8t,"xlm-roberta"),U8t.forEach(t),ijr=r(QNe," \u2014 "),DK=n(QNe,"A",{href:!0});var J8t=s(DK);djr=r(J8t,"FlaxXLMRobertaForQuestionAnswering"),J8t.forEach(t),cjr=r(QNe," (XLM-RoBERTa model)"),QNe.forEach(t),je.forEach(t),fjr=i(ei),T(L3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),lDe=i(f),Jc=n(f,"H2",{class:!0});var hOe=s(Jc);x3=n(hOe,"A",{id:!0,class:!0,href:!0});var Y8t=s(x3);FMe=n(Y8t,"SPAN",{});var K8t=s(FMe);T(cx.$$.fragment,K8t),K8t.forEach(t),Y8t.forEach(t),mjr=i(hOe),TMe=n(hOe,"SPAN",{});var Z8t=s(TMe);gjr=r(Z8t,"FlaxAutoModelForTokenClassification"),Z8t.forEach(t),hOe.forEach(t),iDe=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(fx.$$.fragment,oi),hjr=i(oi),Yc=n(oi,"P",{});var aoe=s(Yc);pjr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GK=n(aoe,"A",{href:!0});var ext=s(GK);_jr=r(ext,"from_pretrained()"),ext.forEach(t),ujr=r(aoe," class method or the "),OK=n(aoe,"A",{href:!0});var oxt=s(OK);bjr=r(oxt,"from_config()"),oxt.forEach(t),vjr=r(aoe,` class
method.`),aoe.forEach(t),Fjr=i(oi),mx=n(oi,"P",{});var pOe=s(mx);Tjr=r(pOe,"This class cannot be instantiated directly using "),MMe=n(pOe,"CODE",{});var rxt=s(MMe);Mjr=r(rxt,"__init__()"),rxt.forEach(t),Ejr=r(pOe," (throws an error)."),pOe.forEach(t),Cjr=i(oi),Ht=n(oi,"DIV",{class:!0});var u6=s(Ht);T(gx.$$.fragment,u6),wjr=i(u6),EMe=n(u6,"P",{});var txt=s(EMe);Ajr=r(txt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),txt.forEach(t),yjr=i(u6),Kc=n(u6,"P",{});var noe=s(Kc);Ljr=r(noe,`Note:
Loading a model from its configuration file does `),CMe=n(noe,"STRONG",{});var axt=s(CMe);xjr=r(axt,"not"),axt.forEach(t),$jr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=n(noe,"A",{href:!0});var nxt=s(VK);kjr=r(nxt,"from_pretrained()"),nxt.forEach(t),Sjr=r(noe," to load the model weights."),noe.forEach(t),Rjr=i(u6),T($3.$$.fragment,u6),u6.forEach(t),Pjr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(hx.$$.fragment,ri),Bjr=i(ri),wMe=n(ri,"P",{});var sxt=s(wMe);Ijr=r(sxt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sxt.forEach(t),Njr=i(ri),Tn=n(ri,"P",{});var b6=s(Tn);qjr=r(b6,"The model class to instantiate is selected based on the "),AMe=n(b6,"CODE",{});var lxt=s(AMe);jjr=r(lxt,"model_type"),lxt.forEach(t),Djr=r(b6,` property of the config object (either
passed as an argument or loaded from `),yMe=n(b6,"CODE",{});var ixt=s(yMe);Gjr=r(ixt,"pretrained_model_name_or_path"),ixt.forEach(t),Ojr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LMe=n(b6,"CODE",{});var dxt=s(LMe);Vjr=r(dxt,"pretrained_model_name_or_path"),dxt.forEach(t),Xjr=r(b6,":"),b6.forEach(t),zjr=i(ri),Ge=n(ri,"UL",{});var Fo=s(Ge);k3=n(Fo,"LI",{});var HNe=s(k3);xMe=n(HNe,"STRONG",{});var cxt=s(xMe);Wjr=r(cxt,"albert"),cxt.forEach(t),Qjr=r(HNe," \u2014 "),XK=n(HNe,"A",{href:!0});var fxt=s(XK);Hjr=r(fxt,"FlaxAlbertForTokenClassification"),fxt.forEach(t),Ujr=r(HNe," (ALBERT model)"),HNe.forEach(t),Jjr=i(Fo),S3=n(Fo,"LI",{});var UNe=s(S3);$Me=n(UNe,"STRONG",{});var mxt=s($Me);Yjr=r(mxt,"bert"),mxt.forEach(t),Kjr=r(UNe," \u2014 "),zK=n(UNe,"A",{href:!0});var gxt=s(zK);Zjr=r(gxt,"FlaxBertForTokenClassification"),gxt.forEach(t),eDr=r(UNe," (BERT model)"),UNe.forEach(t),oDr=i(Fo),R3=n(Fo,"LI",{});var JNe=s(R3);kMe=n(JNe,"STRONG",{});var hxt=s(kMe);rDr=r(hxt,"big_bird"),hxt.forEach(t),tDr=r(JNe," \u2014 "),WK=n(JNe,"A",{href:!0});var pxt=s(WK);aDr=r(pxt,"FlaxBigBirdForTokenClassification"),pxt.forEach(t),nDr=r(JNe," (BigBird model)"),JNe.forEach(t),sDr=i(Fo),P3=n(Fo,"LI",{});var YNe=s(P3);SMe=n(YNe,"STRONG",{});var _xt=s(SMe);lDr=r(_xt,"distilbert"),_xt.forEach(t),iDr=r(YNe," \u2014 "),QK=n(YNe,"A",{href:!0});var uxt=s(QK);dDr=r(uxt,"FlaxDistilBertForTokenClassification"),uxt.forEach(t),cDr=r(YNe," (DistilBERT model)"),YNe.forEach(t),fDr=i(Fo),B3=n(Fo,"LI",{});var KNe=s(B3);RMe=n(KNe,"STRONG",{});var bxt=s(RMe);mDr=r(bxt,"electra"),bxt.forEach(t),gDr=r(KNe," \u2014 "),HK=n(KNe,"A",{href:!0});var vxt=s(HK);hDr=r(vxt,"FlaxElectraForTokenClassification"),vxt.forEach(t),pDr=r(KNe," (ELECTRA model)"),KNe.forEach(t),_Dr=i(Fo),I3=n(Fo,"LI",{});var ZNe=s(I3);PMe=n(ZNe,"STRONG",{});var Fxt=s(PMe);uDr=r(Fxt,"roberta"),Fxt.forEach(t),bDr=r(ZNe," \u2014 "),UK=n(ZNe,"A",{href:!0});var Txt=s(UK);vDr=r(Txt,"FlaxRobertaForTokenClassification"),Txt.forEach(t),FDr=r(ZNe," (RoBERTa model)"),ZNe.forEach(t),TDr=i(Fo),N3=n(Fo,"LI",{});var eqe=s(N3);BMe=n(eqe,"STRONG",{});var Mxt=s(BMe);MDr=r(Mxt,"roformer"),Mxt.forEach(t),EDr=r(eqe," \u2014 "),JK=n(eqe,"A",{href:!0});var Ext=s(JK);CDr=r(Ext,"FlaxRoFormerForTokenClassification"),Ext.forEach(t),wDr=r(eqe," (RoFormer model)"),eqe.forEach(t),ADr=i(Fo),q3=n(Fo,"LI",{});var oqe=s(q3);IMe=n(oqe,"STRONG",{});var Cxt=s(IMe);yDr=r(Cxt,"xlm-roberta"),Cxt.forEach(t),LDr=r(oqe," \u2014 "),YK=n(oqe,"A",{href:!0});var wxt=s(YK);xDr=r(wxt,"FlaxXLMRobertaForTokenClassification"),wxt.forEach(t),$Dr=r(oqe," (XLM-RoBERTa model)"),oqe.forEach(t),Fo.forEach(t),kDr=i(ri),T(j3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),dDe=i(f),Zc=n(f,"H2",{class:!0});var _Oe=s(Zc);D3=n(_Oe,"A",{id:!0,class:!0,href:!0});var Axt=s(D3);NMe=n(Axt,"SPAN",{});var yxt=s(NMe);T(px.$$.fragment,yxt),yxt.forEach(t),Axt.forEach(t),SDr=i(_Oe),qMe=n(_Oe,"SPAN",{});var Lxt=s(qMe);RDr=r(Lxt,"FlaxAutoModelForMultipleChoice"),Lxt.forEach(t),_Oe.forEach(t),cDe=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(_x.$$.fragment,ti),PDr=i(ti),ef=n(ti,"P",{});var soe=s(ef);BDr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KK=n(soe,"A",{href:!0});var xxt=s(KK);IDr=r(xxt,"from_pretrained()"),xxt.forEach(t),NDr=r(soe," class method or the "),ZK=n(soe,"A",{href:!0});var $xt=s(ZK);qDr=r($xt,"from_config()"),$xt.forEach(t),jDr=r(soe,` class
method.`),soe.forEach(t),DDr=i(ti),ux=n(ti,"P",{});var uOe=s(ux);GDr=r(uOe,"This class cannot be instantiated directly using "),jMe=n(uOe,"CODE",{});var kxt=s(jMe);ODr=r(kxt,"__init__()"),kxt.forEach(t),VDr=r(uOe," (throws an error)."),uOe.forEach(t),XDr=i(ti),Ut=n(ti,"DIV",{class:!0});var v6=s(Ut);T(bx.$$.fragment,v6),zDr=i(v6),DMe=n(v6,"P",{});var Sxt=s(DMe);WDr=r(Sxt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Sxt.forEach(t),QDr=i(v6),of=n(v6,"P",{});var loe=s(of);HDr=r(loe,`Note:
Loading a model from its configuration file does `),GMe=n(loe,"STRONG",{});var Rxt=s(GMe);UDr=r(Rxt,"not"),Rxt.forEach(t),JDr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(loe,"A",{href:!0});var Pxt=s(eZ);YDr=r(Pxt,"from_pretrained()"),Pxt.forEach(t),KDr=r(loe," to load the model weights."),loe.forEach(t),ZDr=i(v6),T(G3.$$.fragment,v6),v6.forEach(t),eGr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(vx.$$.fragment,ai),oGr=i(ai),OMe=n(ai,"P",{});var Bxt=s(OMe);rGr=r(Bxt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Bxt.forEach(t),tGr=i(ai),Mn=n(ai,"P",{});var F6=s(Mn);aGr=r(F6,"The model class to instantiate is selected based on the "),VMe=n(F6,"CODE",{});var Ixt=s(VMe);nGr=r(Ixt,"model_type"),Ixt.forEach(t),sGr=r(F6,` property of the config object (either
passed as an argument or loaded from `),XMe=n(F6,"CODE",{});var Nxt=s(XMe);lGr=r(Nxt,"pretrained_model_name_or_path"),Nxt.forEach(t),iGr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=n(F6,"CODE",{});var qxt=s(zMe);dGr=r(qxt,"pretrained_model_name_or_path"),qxt.forEach(t),cGr=r(F6,":"),F6.forEach(t),fGr=i(ai),Oe=n(ai,"UL",{});var To=s(Oe);O3=n(To,"LI",{});var rqe=s(O3);WMe=n(rqe,"STRONG",{});var jxt=s(WMe);mGr=r(jxt,"albert"),jxt.forEach(t),gGr=r(rqe," \u2014 "),oZ=n(rqe,"A",{href:!0});var Dxt=s(oZ);hGr=r(Dxt,"FlaxAlbertForMultipleChoice"),Dxt.forEach(t),pGr=r(rqe," (ALBERT model)"),rqe.forEach(t),_Gr=i(To),V3=n(To,"LI",{});var tqe=s(V3);QMe=n(tqe,"STRONG",{});var Gxt=s(QMe);uGr=r(Gxt,"bert"),Gxt.forEach(t),bGr=r(tqe," \u2014 "),rZ=n(tqe,"A",{href:!0});var Oxt=s(rZ);vGr=r(Oxt,"FlaxBertForMultipleChoice"),Oxt.forEach(t),FGr=r(tqe," (BERT model)"),tqe.forEach(t),TGr=i(To),X3=n(To,"LI",{});var aqe=s(X3);HMe=n(aqe,"STRONG",{});var Vxt=s(HMe);MGr=r(Vxt,"big_bird"),Vxt.forEach(t),EGr=r(aqe," \u2014 "),tZ=n(aqe,"A",{href:!0});var Xxt=s(tZ);CGr=r(Xxt,"FlaxBigBirdForMultipleChoice"),Xxt.forEach(t),wGr=r(aqe," (BigBird model)"),aqe.forEach(t),AGr=i(To),z3=n(To,"LI",{});var nqe=s(z3);UMe=n(nqe,"STRONG",{});var zxt=s(UMe);yGr=r(zxt,"distilbert"),zxt.forEach(t),LGr=r(nqe," \u2014 "),aZ=n(nqe,"A",{href:!0});var Wxt=s(aZ);xGr=r(Wxt,"FlaxDistilBertForMultipleChoice"),Wxt.forEach(t),$Gr=r(nqe," (DistilBERT model)"),nqe.forEach(t),kGr=i(To),W3=n(To,"LI",{});var sqe=s(W3);JMe=n(sqe,"STRONG",{});var Qxt=s(JMe);SGr=r(Qxt,"electra"),Qxt.forEach(t),RGr=r(sqe," \u2014 "),nZ=n(sqe,"A",{href:!0});var Hxt=s(nZ);PGr=r(Hxt,"FlaxElectraForMultipleChoice"),Hxt.forEach(t),BGr=r(sqe," (ELECTRA model)"),sqe.forEach(t),IGr=i(To),Q3=n(To,"LI",{});var lqe=s(Q3);YMe=n(lqe,"STRONG",{});var Uxt=s(YMe);NGr=r(Uxt,"roberta"),Uxt.forEach(t),qGr=r(lqe," \u2014 "),sZ=n(lqe,"A",{href:!0});var Jxt=s(sZ);jGr=r(Jxt,"FlaxRobertaForMultipleChoice"),Jxt.forEach(t),DGr=r(lqe," (RoBERTa model)"),lqe.forEach(t),GGr=i(To),H3=n(To,"LI",{});var iqe=s(H3);KMe=n(iqe,"STRONG",{});var Yxt=s(KMe);OGr=r(Yxt,"roformer"),Yxt.forEach(t),VGr=r(iqe," \u2014 "),lZ=n(iqe,"A",{href:!0});var Kxt=s(lZ);XGr=r(Kxt,"FlaxRoFormerForMultipleChoice"),Kxt.forEach(t),zGr=r(iqe," (RoFormer model)"),iqe.forEach(t),WGr=i(To),U3=n(To,"LI",{});var dqe=s(U3);ZMe=n(dqe,"STRONG",{});var Zxt=s(ZMe);QGr=r(Zxt,"xlm-roberta"),Zxt.forEach(t),HGr=r(dqe," \u2014 "),iZ=n(dqe,"A",{href:!0});var e$t=s(iZ);UGr=r(e$t,"FlaxXLMRobertaForMultipleChoice"),e$t.forEach(t),JGr=r(dqe," (XLM-RoBERTa model)"),dqe.forEach(t),To.forEach(t),YGr=i(ai),T(J3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),fDe=i(f),rf=n(f,"H2",{class:!0});var bOe=s(rf);Y3=n(bOe,"A",{id:!0,class:!0,href:!0});var o$t=s(Y3);eEe=n(o$t,"SPAN",{});var r$t=s(eEe);T(Fx.$$.fragment,r$t),r$t.forEach(t),o$t.forEach(t),KGr=i(bOe),oEe=n(bOe,"SPAN",{});var t$t=s(oEe);ZGr=r(t$t,"FlaxAutoModelForNextSentencePrediction"),t$t.forEach(t),bOe.forEach(t),mDe=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(Tx.$$.fragment,ni),eOr=i(ni),tf=n(ni,"P",{});var ioe=s(tf);oOr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dZ=n(ioe,"A",{href:!0});var a$t=s(dZ);rOr=r(a$t,"from_pretrained()"),a$t.forEach(t),tOr=r(ioe," class method or the "),cZ=n(ioe,"A",{href:!0});var n$t=s(cZ);aOr=r(n$t,"from_config()"),n$t.forEach(t),nOr=r(ioe,` class
method.`),ioe.forEach(t),sOr=i(ni),Mx=n(ni,"P",{});var vOe=s(Mx);lOr=r(vOe,"This class cannot be instantiated directly using "),rEe=n(vOe,"CODE",{});var s$t=s(rEe);iOr=r(s$t,"__init__()"),s$t.forEach(t),dOr=r(vOe," (throws an error)."),vOe.forEach(t),cOr=i(ni),Jt=n(ni,"DIV",{class:!0});var T6=s(Jt);T(Ex.$$.fragment,T6),fOr=i(T6),tEe=n(T6,"P",{});var l$t=s(tEe);mOr=r(l$t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),l$t.forEach(t),gOr=i(T6),af=n(T6,"P",{});var doe=s(af);hOr=r(doe,`Note:
Loading a model from its configuration file does `),aEe=n(doe,"STRONG",{});var i$t=s(aEe);pOr=r(i$t,"not"),i$t.forEach(t),_Or=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=n(doe,"A",{href:!0});var d$t=s(fZ);uOr=r(d$t,"from_pretrained()"),d$t.forEach(t),bOr=r(doe," to load the model weights."),doe.forEach(t),vOr=i(T6),T(K3.$$.fragment,T6),T6.forEach(t),FOr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(Cx.$$.fragment,si),TOr=i(si),nEe=n(si,"P",{});var c$t=s(nEe);MOr=r(c$t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),c$t.forEach(t),EOr=i(si),En=n(si,"P",{});var M6=s(En);COr=r(M6,"The model class to instantiate is selected based on the "),sEe=n(M6,"CODE",{});var f$t=s(sEe);wOr=r(f$t,"model_type"),f$t.forEach(t),AOr=r(M6,` property of the config object (either
passed as an argument or loaded from `),lEe=n(M6,"CODE",{});var m$t=s(lEe);yOr=r(m$t,"pretrained_model_name_or_path"),m$t.forEach(t),LOr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iEe=n(M6,"CODE",{});var g$t=s(iEe);xOr=r(g$t,"pretrained_model_name_or_path"),g$t.forEach(t),$Or=r(M6,":"),M6.forEach(t),kOr=i(si),dEe=n(si,"UL",{});var h$t=s(dEe);Z3=n(h$t,"LI",{});var cqe=s(Z3);cEe=n(cqe,"STRONG",{});var p$t=s(cEe);SOr=r(p$t,"bert"),p$t.forEach(t),ROr=r(cqe," \u2014 "),mZ=n(cqe,"A",{href:!0});var _$t=s(mZ);POr=r(_$t,"FlaxBertForNextSentencePrediction"),_$t.forEach(t),BOr=r(cqe," (BERT model)"),cqe.forEach(t),h$t.forEach(t),IOr=i(si),T(ew.$$.fragment,si),si.forEach(t),ni.forEach(t),gDe=i(f),nf=n(f,"H2",{class:!0});var FOe=s(nf);ow=n(FOe,"A",{id:!0,class:!0,href:!0});var u$t=s(ow);fEe=n(u$t,"SPAN",{});var b$t=s(fEe);T(wx.$$.fragment,b$t),b$t.forEach(t),u$t.forEach(t),NOr=i(FOe),mEe=n(FOe,"SPAN",{});var v$t=s(mEe);qOr=r(v$t,"FlaxAutoModelForImageClassification"),v$t.forEach(t),FOe.forEach(t),hDe=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(Ax.$$.fragment,li),jOr=i(li),sf=n(li,"P",{});var coe=s(sf);DOr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gZ=n(coe,"A",{href:!0});var F$t=s(gZ);GOr=r(F$t,"from_pretrained()"),F$t.forEach(t),OOr=r(coe," class method or the "),hZ=n(coe,"A",{href:!0});var T$t=s(hZ);VOr=r(T$t,"from_config()"),T$t.forEach(t),XOr=r(coe,` class
method.`),coe.forEach(t),zOr=i(li),yx=n(li,"P",{});var TOe=s(yx);WOr=r(TOe,"This class cannot be instantiated directly using "),gEe=n(TOe,"CODE",{});var M$t=s(gEe);QOr=r(M$t,"__init__()"),M$t.forEach(t),HOr=r(TOe," (throws an error)."),TOe.forEach(t),UOr=i(li),Yt=n(li,"DIV",{class:!0});var E6=s(Yt);T(Lx.$$.fragment,E6),JOr=i(E6),hEe=n(E6,"P",{});var E$t=s(hEe);YOr=r(E$t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),E$t.forEach(t),KOr=i(E6),lf=n(E6,"P",{});var foe=s(lf);ZOr=r(foe,`Note:
Loading a model from its configuration file does `),pEe=n(foe,"STRONG",{});var C$t=s(pEe);eVr=r(C$t,"not"),C$t.forEach(t),oVr=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=n(foe,"A",{href:!0});var w$t=s(pZ);rVr=r(w$t,"from_pretrained()"),w$t.forEach(t),tVr=r(foe," to load the model weights."),foe.forEach(t),aVr=i(E6),T(rw.$$.fragment,E6),E6.forEach(t),nVr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(xx.$$.fragment,ii),sVr=i(ii),_Ee=n(ii,"P",{});var A$t=s(_Ee);lVr=r(A$t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),A$t.forEach(t),iVr=i(ii),Cn=n(ii,"P",{});var C6=s(Cn);dVr=r(C6,"The model class to instantiate is selected based on the "),uEe=n(C6,"CODE",{});var y$t=s(uEe);cVr=r(y$t,"model_type"),y$t.forEach(t),fVr=r(C6,` property of the config object (either
passed as an argument or loaded from `),bEe=n(C6,"CODE",{});var L$t=s(bEe);mVr=r(L$t,"pretrained_model_name_or_path"),L$t.forEach(t),gVr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=n(C6,"CODE",{});var x$t=s(vEe);hVr=r(x$t,"pretrained_model_name_or_path"),x$t.forEach(t),pVr=r(C6,":"),C6.forEach(t),_Vr=i(ii),$x=n(ii,"UL",{});var MOe=s($x);tw=n(MOe,"LI",{});var fqe=s(tw);FEe=n(fqe,"STRONG",{});var $$t=s(FEe);uVr=r($$t,"beit"),$$t.forEach(t),bVr=r(fqe," \u2014 "),_Z=n(fqe,"A",{href:!0});var k$t=s(_Z);vVr=r(k$t,"FlaxBeitForImageClassification"),k$t.forEach(t),FVr=r(fqe," (BEiT model)"),fqe.forEach(t),TVr=i(MOe),aw=n(MOe,"LI",{});var mqe=s(aw);TEe=n(mqe,"STRONG",{});var S$t=s(TEe);MVr=r(S$t,"vit"),S$t.forEach(t),EVr=r(mqe," \u2014 "),uZ=n(mqe,"A",{href:!0});var R$t=s(uZ);CVr=r(R$t,"FlaxViTForImageClassification"),R$t.forEach(t),wVr=r(mqe," (ViT model)"),mqe.forEach(t),MOe.forEach(t),AVr=i(ii),T(nw.$$.fragment,ii),ii.forEach(t),li.forEach(t),pDe=i(f),df=n(f,"H2",{class:!0});var EOe=s(df);sw=n(EOe,"A",{id:!0,class:!0,href:!0});var P$t=s(sw);MEe=n(P$t,"SPAN",{});var B$t=s(MEe);T(kx.$$.fragment,B$t),B$t.forEach(t),P$t.forEach(t),yVr=i(EOe),EEe=n(EOe,"SPAN",{});var I$t=s(EEe);LVr=r(I$t,"FlaxAutoModelForVision2Seq"),I$t.forEach(t),EOe.forEach(t),_De=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T(Sx.$$.fragment,di),xVr=i(di),cf=n(di,"P",{});var moe=s(cf);$Vr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bZ=n(moe,"A",{href:!0});var N$t=s(bZ);kVr=r(N$t,"from_pretrained()"),N$t.forEach(t),SVr=r(moe," class method or the "),vZ=n(moe,"A",{href:!0});var q$t=s(vZ);RVr=r(q$t,"from_config()"),q$t.forEach(t),PVr=r(moe,` class
method.`),moe.forEach(t),BVr=i(di),Rx=n(di,"P",{});var COe=s(Rx);IVr=r(COe,"This class cannot be instantiated directly using "),CEe=n(COe,"CODE",{});var j$t=s(CEe);NVr=r(j$t,"__init__()"),j$t.forEach(t),qVr=r(COe," (throws an error)."),COe.forEach(t),jVr=i(di),Kt=n(di,"DIV",{class:!0});var w6=s(Kt);T(Px.$$.fragment,w6),DVr=i(w6),wEe=n(w6,"P",{});var D$t=s(wEe);GVr=r(D$t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),D$t.forEach(t),OVr=i(w6),ff=n(w6,"P",{});var goe=s(ff);VVr=r(goe,`Note:
Loading a model from its configuration file does `),AEe=n(goe,"STRONG",{});var G$t=s(AEe);XVr=r(G$t,"not"),G$t.forEach(t),zVr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),FZ=n(goe,"A",{href:!0});var O$t=s(FZ);WVr=r(O$t,"from_pretrained()"),O$t.forEach(t),QVr=r(goe," to load the model weights."),goe.forEach(t),HVr=i(w6),T(lw.$$.fragment,w6),w6.forEach(t),UVr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(Bx.$$.fragment,ci),JVr=i(ci),yEe=n(ci,"P",{});var V$t=s(yEe);YVr=r(V$t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),V$t.forEach(t),KVr=i(ci),wn=n(ci,"P",{});var A6=s(wn);ZVr=r(A6,"The model class to instantiate is selected based on the "),LEe=n(A6,"CODE",{});var X$t=s(LEe);eXr=r(X$t,"model_type"),X$t.forEach(t),oXr=r(A6,` property of the config object (either
passed as an argument or loaded from `),xEe=n(A6,"CODE",{});var z$t=s(xEe);rXr=r(z$t,"pretrained_model_name_or_path"),z$t.forEach(t),tXr=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ee=n(A6,"CODE",{});var W$t=s($Ee);aXr=r(W$t,"pretrained_model_name_or_path"),W$t.forEach(t),nXr=r(A6,":"),A6.forEach(t),sXr=i(ci),kEe=n(ci,"UL",{});var Q$t=s(kEe);iw=n(Q$t,"LI",{});var gqe=s(iw);SEe=n(gqe,"STRONG",{});var H$t=s(SEe);lXr=r(H$t,"vision-encoder-decoder"),H$t.forEach(t),iXr=r(gqe," \u2014 "),TZ=n(gqe,"A",{href:!0});var U$t=s(TZ);dXr=r(U$t,"FlaxVisionEncoderDecoderModel"),U$t.forEach(t),cXr=r(gqe," (Vision Encoder decoder model)"),gqe.forEach(t),Q$t.forEach(t),fXr=i(ci),T(dw.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(ZSt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.AutoTokenizer"),c(ui,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(ok,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(rk,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertConfig"),c(tk,"href","/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartConfig"),c(ak,"href","/docs/transformers/pr_17495/en/model_doc/beit#transformers.BeitConfig"),c(nk,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertConfig"),c(sk,"href","/docs/transformers/pr_17495/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(lk,"href","/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdConfig"),c(ik,"href","/docs/transformers/pr_17495/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(dk,"href","/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(ck,"href","/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(fk,"href","/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertConfig"),c(mk,"href","/docs/transformers/pr_17495/en/model_doc/canine#transformers.CanineConfig"),c(gk,"href","/docs/transformers/pr_17495/en/model_doc/clip#transformers.CLIPConfig"),c(hk,"href","/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertConfig"),c(pk,"href","/docs/transformers/pr_17495/en/model_doc/convnext#transformers.ConvNextConfig"),c(_k,"href","/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.CTRLConfig"),c(uk,"href","/docs/transformers/pr_17495/en/model_doc/cvt#transformers.CvtConfig"),c(bk,"href","/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(vk,"href","/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Fk,"href","/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Tk,"href","/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaConfig"),c(Mk,"href","/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Ek,"href","/docs/transformers/pr_17495/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Ck,"href","/docs/transformers/pr_17495/en/model_doc/deit#transformers.DeiTConfig"),c(wk,"href","/docs/transformers/pr_17495/en/model_doc/detr#transformers.DetrConfig"),c(Ak,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertConfig"),c(yk,"href","/docs/transformers/pr_17495/en/model_doc/dpr#transformers.DPRConfig"),c(Lk,"href","/docs/transformers/pr_17495/en/model_doc/dpt#transformers.DPTConfig"),c(xk,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraConfig"),c($k,"href","/docs/transformers/pr_17495/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(kk,"href","/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Sk,"href","/docs/transformers/pr_17495/en/model_doc/flava#transformers.FlavaConfig"),c(Rk,"href","/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetConfig"),c(Pk,"href","/docs/transformers/pr_17495/en/model_doc/fsmt#transformers.FSMTConfig"),c(Bk,"href","/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelConfig"),c(Ik,"href","/docs/transformers/pr_17495/en/model_doc/glpn#transformers.GLPNConfig"),c(Nk,"href","/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2Config"),c(qk,"href","/docs/transformers/pr_17495/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(jk,"href","/docs/transformers/pr_17495/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Dk,"href","/docs/transformers/pr_17495/en/model_doc/gptj#transformers.GPTJConfig"),c(Gk,"href","/docs/transformers/pr_17495/en/model_doc/hubert#transformers.HubertConfig"),c(Ok,"href","/docs/transformers/pr_17495/en/model_doc/ibert#transformers.IBertConfig"),c(Vk,"href","/docs/transformers/pr_17495/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Xk,"href","/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(zk,"href","/docs/transformers/pr_17495/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Wk,"href","/docs/transformers/pr_17495/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Qk,"href","/docs/transformers/pr_17495/en/model_doc/led#transformers.LEDConfig"),c(Hk,"href","/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerConfig"),c(Uk,"href","/docs/transformers/pr_17495/en/model_doc/luke#transformers.LukeConfig"),c(Jk,"href","/docs/transformers/pr_17495/en/model_doc/lxmert#transformers.LxmertConfig"),c(Yk,"href","/docs/transformers/pr_17495/en/model_doc/m2m_100#transformers.M2M100Config"),c(Kk,"href","/docs/transformers/pr_17495/en/model_doc/marian#transformers.MarianConfig"),c(Zk,"href","/docs/transformers/pr_17495/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(eS,"href","/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartConfig"),c(oS,"href","/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(rS,"href","/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(tS,"href","/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetConfig"),c(aS,"href","/docs/transformers/pr_17495/en/model_doc/mt5#transformers.MT5Config"),c(nS,"href","/docs/transformers/pr_17495/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(sS,"href","/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(lS,"href","/docs/transformers/pr_17495/en/model_doc/opt#transformers.OPTConfig"),c(iS,"href","/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.PegasusConfig"),c(dS,"href","/docs/transformers/pr_17495/en/model_doc/perceiver#transformers.PerceiverConfig"),c(cS,"href","/docs/transformers/pr_17495/en/model_doc/plbart#transformers.PLBartConfig"),c(fS,"href","/docs/transformers/pr_17495/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(mS,"href","/docs/transformers/pr_17495/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(gS,"href","/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(hS,"href","/docs/transformers/pr_17495/en/model_doc/rag#transformers.RagConfig"),c(pS,"href","/docs/transformers/pr_17495/en/model_doc/realm#transformers.RealmConfig"),c(_S,"href","/docs/transformers/pr_17495/en/model_doc/reformer#transformers.ReformerConfig"),c(uS,"href","/docs/transformers/pr_17495/en/model_doc/regnet#transformers.RegNetConfig"),c(bS,"href","/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertConfig"),c(vS,"href","/docs/transformers/pr_17495/en/model_doc/resnet#transformers.ResNetConfig"),c(FS,"href","/docs/transformers/pr_17495/en/model_doc/retribert#transformers.RetriBertConfig"),c(TS,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaConfig"),c(MS,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerConfig"),c(ES,"href","/docs/transformers/pr_17495/en/model_doc/segformer#transformers.SegformerConfig"),c(CS,"href","/docs/transformers/pr_17495/en/model_doc/sew#transformers.SEWConfig"),c(wS,"href","/docs/transformers/pr_17495/en/model_doc/sew-d#transformers.SEWDConfig"),c(AS,"href","/docs/transformers/pr_17495/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(yS,"href","/docs/transformers/pr_17495/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(LS,"href","/docs/transformers/pr_17495/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(xS,"href","/docs/transformers/pr_17495/en/model_doc/splinter#transformers.SplinterConfig"),c($S,"href","/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(kS,"href","/docs/transformers/pr_17495/en/model_doc/swin#transformers.SwinConfig"),c(SS,"href","/docs/transformers/pr_17495/en/model_doc/t5#transformers.T5Config"),c(RS,"href","/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TapasConfig"),c(PS,"href","/docs/transformers/pr_17495/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(BS,"href","/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(IS,"href","/docs/transformers/pr_17495/en/model_doc/trocr#transformers.TrOCRConfig"),c(NS,"href","/docs/transformers/pr_17495/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(qS,"href","/docs/transformers/pr_17495/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(jS,"href","/docs/transformers/pr_17495/en/model_doc/van#transformers.VanConfig"),c(DS,"href","/docs/transformers/pr_17495/en/model_doc/vilt#transformers.ViltConfig"),c(GS,"href","/docs/transformers/pr_17495/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(OS,"href","/docs/transformers/pr_17495/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(VS,"href","/docs/transformers/pr_17495/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(XS,"href","/docs/transformers/pr_17495/en/model_doc/vit#transformers.ViTConfig"),c(zS,"href","/docs/transformers/pr_17495/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(WS,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(QS,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(HS,"href","/docs/transformers/pr_17495/en/model_doc/wavlm#transformers.WavLMConfig"),c(US,"href","/docs/transformers/pr_17495/en/model_doc/xglm#transformers.XGLMConfig"),c(JS,"href","/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMConfig"),c(YS,"href","/docs/transformers/pr_17495/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(KS,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(ZS,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(eR,"href","/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetConfig"),c(oR,"href","/docs/transformers/pr_17495/en/model_doc/yolos#transformers.YolosConfig"),c(rR,"href","/docs/transformers/pr_17495/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wg,"id","transformers.AutoTokenizer"),c(wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(tR,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(aR,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertTokenizer"),c(nR,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(sR,"href","/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartTokenizer"),c(lR,"href","/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartTokenizerFast"),c(iR,"href","/docs/transformers/pr_17495/en/model_doc/barthez#transformers.BarthezTokenizer"),c(dR,"href","/docs/transformers/pr_17495/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(cR,"href","/docs/transformers/pr_17495/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(fR,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertTokenizer"),c(mR,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertTokenizerFast"),c(gR,"href","/docs/transformers/pr_17495/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(hR,"href","/docs/transformers/pr_17495/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(pR,"href","/docs/transformers/pr_17495/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(_R,"href","/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(uR,"href","/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(bR,"href","/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(vR,"href","/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(FR,"href","/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(TR,"href","/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(MR,"href","/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(ER,"href","/docs/transformers/pr_17495/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(CR,"href","/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertTokenizer"),c(wR,"href","/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(AR,"href","/docs/transformers/pr_17495/en/model_doc/canine#transformers.CanineTokenizer"),c(yR,"href","/docs/transformers/pr_17495/en/model_doc/clip#transformers.CLIPTokenizer"),c(LR,"href","/docs/transformers/pr_17495/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(xR,"href","/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertTokenizer"),c($R,"href","/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(kR,"href","/docs/transformers/pr_17495/en/model_doc/cpm#transformers.CpmTokenizer"),c(SR,"href","/docs/transformers/pr_17495/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(RR,"href","/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(PR,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BR,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(IR,"href","/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaTokenizer"),c(NR,"href","/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(qR,"href","/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(jR,"href","/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(DR,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(GR,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(OR,"href","/docs/transformers/pr_17495/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(VR,"href","/docs/transformers/pr_17495/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(XR,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraTokenizer"),c(zR,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(WR,"href","/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(QR,"href","/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetTokenizer"),c(HR,"href","/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(UR,"href","/docs/transformers/pr_17495/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(JR,"href","/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelTokenizer"),c(YR,"href","/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(KR,"href","/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZR,"href","/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(eP,"href","/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(oP,"href","/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(rP,"href","/docs/transformers/pr_17495/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(tP,"href","/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aP,"href","/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(nP,"href","/docs/transformers/pr_17495/en/model_doc/herbert#transformers.HerbertTokenizer"),c(sP,"href","/docs/transformers/pr_17495/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(lP,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(iP,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dP,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cP,"href","/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(fP,"href","/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(mP,"href","/docs/transformers/pr_17495/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(gP,"href","/docs/transformers/pr_17495/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(hP,"href","/docs/transformers/pr_17495/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(pP,"href","/docs/transformers/pr_17495/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(_P,"href","/docs/transformers/pr_17495/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(uP,"href","/docs/transformers/pr_17495/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(bP,"href","/docs/transformers/pr_17495/en/model_doc/led#transformers.LEDTokenizer"),c(vP,"href","/docs/transformers/pr_17495/en/model_doc/led#transformers.LEDTokenizerFast"),c(FP,"href","/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerTokenizer"),c(TP,"href","/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(MP,"href","/docs/transformers/pr_17495/en/model_doc/luke#transformers.LukeTokenizer"),c(EP,"href","/docs/transformers/pr_17495/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(CP,"href","/docs/transformers/pr_17495/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(wP,"href","/docs/transformers/pr_17495/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(AP,"href","/docs/transformers/pr_17495/en/model_doc/marian#transformers.MarianTokenizer"),c(yP,"href","/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartTokenizer"),c(LP,"href","/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(xP,"href","/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBart50Tokenizer"),c($P,"href","/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(kP,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertTokenizer"),c(SP,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertTokenizerFast"),c(RP,"href","/docs/transformers/pr_17495/en/model_doc/mluke#transformers.MLukeTokenizer"),c(PP,"href","/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(BP,"href","/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(IP,"href","/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(NP,"href","/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(qP,"href","/docs/transformers/pr_17495/en/model_doc/t5#transformers.T5Tokenizer"),c(jP,"href","/docs/transformers/pr_17495/en/model_doc/t5#transformers.T5TokenizerFast"),c(DP,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertTokenizer"),c(GP,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(OP,"href","/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(VP,"href","/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(XP,"href","/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(zP,"href","/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(WP,"href","/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(QP,"href","/docs/transformers/pr_17495/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(HP,"href","/docs/transformers/pr_17495/en/model_doc/phobert#transformers.PhobertTokenizer"),c(UP,"href","/docs/transformers/pr_17495/en/model_doc/plbart#transformers.PLBartTokenizer"),c(JP,"href","/docs/transformers/pr_17495/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(YP,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertTokenizer"),c(KP,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17495/en/model_doc/rag#transformers.RagTokenizer"),c(eB,"href","/docs/transformers/pr_17495/en/model_doc/realm#transformers.RealmTokenizer"),c(oB,"href","/docs/transformers/pr_17495/en/model_doc/realm#transformers.RealmTokenizerFast"),c(rB,"href","/docs/transformers/pr_17495/en/model_doc/reformer#transformers.ReformerTokenizer"),c(tB,"href","/docs/transformers/pr_17495/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(aB,"href","/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertTokenizer"),c(nB,"href","/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(sB,"href","/docs/transformers/pr_17495/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(lB,"href","/docs/transformers/pr_17495/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(iB,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dB,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cB,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(fB,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(mB,"href","/docs/transformers/pr_17495/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(gB,"href","/docs/transformers/pr_17495/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(hB,"href","/docs/transformers/pr_17495/en/model_doc/splinter#transformers.SplinterTokenizer"),c(pB,"href","/docs/transformers/pr_17495/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(_B,"href","/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(uB,"href","/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(bB,"href","/docs/transformers/pr_17495/en/model_doc/t5#transformers.T5Tokenizer"),c(vB,"href","/docs/transformers/pr_17495/en/model_doc/t5#transformers.T5TokenizerFast"),c(FB,"href","/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TapasTokenizer"),c(TB,"href","/docs/transformers/pr_17495/en/model_doc/tapex#transformers.TapexTokenizer"),c(MB,"href","/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(EB,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertTokenizer"),c(CB,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertTokenizerFast"),c(wB,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(AB,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(yB,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(LB,"href","/docs/transformers/pr_17495/en/model_doc/xglm#transformers.XGLMTokenizer"),c(xB,"href","/docs/transformers/pr_17495/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c($B,"href","/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMTokenizer"),c(kB,"href","/docs/transformers/pr_17495/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(SB,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(RB,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(PB,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BB,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(IB,"href","/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(NB,"href","/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(qB,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertTokenizer"),c(jB,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sh,"id","transformers.AutoFeatureExtractor"),c(sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sh,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(DB,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(GB,"href","/docs/transformers/pr_17495/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17495/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17495/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17495/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(WB,"href","/docs/transformers/pr_17495/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17495/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17495/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17495/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17495/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17495/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17495/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(eI,"href","/docs/transformers/pr_17495/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(oI,"href","/docs/transformers/pr_17495/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(rI,"href","/docs/transformers/pr_17495/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17495/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17495/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(nI,"href","/docs/transformers/pr_17495/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(sI,"href","/docs/transformers/pr_17495/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lI,"href","/docs/transformers/pr_17495/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(iI,"href","/docs/transformers/pr_17495/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17495/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17495/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17495/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17495/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(gI,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(hI,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(pI,"href","/docs/transformers/pr_17495/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jh,"id","transformers.AutoProcessor"),c(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jh,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(_I,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(uI,"href","/docs/transformers/pr_17495/en/model_doc/clip#transformers.CLIPProcessor"),c(bI,"href","/docs/transformers/pr_17495/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(vI,"href","/docs/transformers/pr_17495/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(FI,"href","/docs/transformers/pr_17495/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(TI,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(MI,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EI,"href","/docs/transformers/pr_17495/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(CI,"href","/docs/transformers/pr_17495/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(wI,"href","/docs/transformers/pr_17495/en/model_doc/trocr#transformers.TrOCRProcessor"),c(AI,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yI,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LI,"href","/docs/transformers/pr_17495/en/model_doc/vilt#transformers.ViltProcessor"),c(xI,"href","/docs/transformers/pr_17495/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c($I,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kI,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SI,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sp,"id","transformers.AutoModel"),c(sp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sp,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(RI,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PI,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BI,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(II,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertModel"),c(NI,"href","/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartModel"),c(qI,"href","/docs/transformers/pr_17495/en/model_doc/beit#transformers.BeitModel"),c(jI,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertModel"),c(DI,"href","/docs/transformers/pr_17495/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(GI,"href","/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdModel"),c(OI,"href","/docs/transformers/pr_17495/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(VI,"href","/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(XI,"href","/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(zI,"href","/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertModel"),c(WI,"href","/docs/transformers/pr_17495/en/model_doc/canine#transformers.CanineModel"),c(QI,"href","/docs/transformers/pr_17495/en/model_doc/clip#transformers.CLIPModel"),c(HI,"href","/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertModel"),c(UI,"href","/docs/transformers/pr_17495/en/model_doc/convnext#transformers.ConvNextModel"),c(JI,"href","/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.CTRLModel"),c(YI,"href","/docs/transformers/pr_17495/en/model_doc/cvt#transformers.CvtModel"),c(KI,"href","/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(ZI,"href","/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(eN,"href","/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(oN,"href","/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaModel"),c(rN,"href","/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(tN,"href","/docs/transformers/pr_17495/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(aN,"href","/docs/transformers/pr_17495/en/model_doc/deit#transformers.DeiTModel"),c(nN,"href","/docs/transformers/pr_17495/en/model_doc/detr#transformers.DetrModel"),c(sN,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertModel"),c(lN,"href","/docs/transformers/pr_17495/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(iN,"href","/docs/transformers/pr_17495/en/model_doc/dpt#transformers.DPTModel"),c(dN,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraModel"),c(cN,"href","/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertModel"),c(fN,"href","/docs/transformers/pr_17495/en/model_doc/flava#transformers.FlavaModel"),c(mN,"href","/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetModel"),c(gN,"href","/docs/transformers/pr_17495/en/model_doc/fsmt#transformers.FSMTModel"),c(hN,"href","/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelModel"),c(pN,"href","/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelBaseModel"),c(_N,"href","/docs/transformers/pr_17495/en/model_doc/glpn#transformers.GLPNModel"),c(uN,"href","/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2Model"),c(bN,"href","/docs/transformers/pr_17495/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(vN,"href","/docs/transformers/pr_17495/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(FN,"href","/docs/transformers/pr_17495/en/model_doc/gptj#transformers.GPTJModel"),c(TN,"href","/docs/transformers/pr_17495/en/model_doc/hubert#transformers.HubertModel"),c(MN,"href","/docs/transformers/pr_17495/en/model_doc/ibert#transformers.IBertModel"),c(EN,"href","/docs/transformers/pr_17495/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(CN,"href","/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(wN,"href","/docs/transformers/pr_17495/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(AN,"href","/docs/transformers/pr_17495/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(yN,"href","/docs/transformers/pr_17495/en/model_doc/led#transformers.LEDModel"),c(LN,"href","/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerModel"),c(xN,"href","/docs/transformers/pr_17495/en/model_doc/luke#transformers.LukeModel"),c($N,"href","/docs/transformers/pr_17495/en/model_doc/lxmert#transformers.LxmertModel"),c(kN,"href","/docs/transformers/pr_17495/en/model_doc/m2m_100#transformers.M2M100Model"),c(SN,"href","/docs/transformers/pr_17495/en/model_doc/marian#transformers.MarianModel"),c(RN,"href","/docs/transformers/pr_17495/en/model_doc/maskformer#transformers.MaskFormerModel"),c(PN,"href","/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartModel"),c(BN,"href","/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(IN,"href","/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertModel"),c(NN,"href","/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetModel"),c(qN,"href","/docs/transformers/pr_17495/en/model_doc/mt5#transformers.MT5Model"),c(jN,"href","/docs/transformers/pr_17495/en/model_doc/nystromformer#transformers.NystromformerModel"),c(DN,"href","/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(GN,"href","/docs/transformers/pr_17495/en/model_doc/opt#transformers.OPTModel"),c(ON,"href","/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.PegasusModel"),c(VN,"href","/docs/transformers/pr_17495/en/model_doc/perceiver#transformers.PerceiverModel"),c(XN,"href","/docs/transformers/pr_17495/en/model_doc/plbart#transformers.PLBartModel"),c(zN,"href","/docs/transformers/pr_17495/en/model_doc/poolformer#transformers.PoolFormerModel"),c(WN,"href","/docs/transformers/pr_17495/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(QN,"href","/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertModel"),c(HN,"href","/docs/transformers/pr_17495/en/model_doc/reformer#transformers.ReformerModel"),c(UN,"href","/docs/transformers/pr_17495/en/model_doc/regnet#transformers.RegNetModel"),c(JN,"href","/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertModel"),c(YN,"href","/docs/transformers/pr_17495/en/model_doc/resnet#transformers.ResNetModel"),c(KN,"href","/docs/transformers/pr_17495/en/model_doc/retribert#transformers.RetriBertModel"),c(ZN,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaModel"),c(eq,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerModel"),c(oq,"href","/docs/transformers/pr_17495/en/model_doc/segformer#transformers.SegformerModel"),c(rq,"href","/docs/transformers/pr_17495/en/model_doc/sew#transformers.SEWModel"),c(tq,"href","/docs/transformers/pr_17495/en/model_doc/sew-d#transformers.SEWDModel"),c(aq,"href","/docs/transformers/pr_17495/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(nq,"href","/docs/transformers/pr_17495/en/model_doc/splinter#transformers.SplinterModel"),c(sq,"href","/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(lq,"href","/docs/transformers/pr_17495/en/model_doc/swin#transformers.SwinModel"),c(iq,"href","/docs/transformers/pr_17495/en/model_doc/t5#transformers.T5Model"),c(dq,"href","/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TapasModel"),c(cq,"href","/docs/transformers/pr_17495/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(fq,"href","/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(mq,"href","/docs/transformers/pr_17495/en/model_doc/unispeech#transformers.UniSpeechModel"),c(gq,"href","/docs/transformers/pr_17495/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(hq,"href","/docs/transformers/pr_17495/en/model_doc/van#transformers.VanModel"),c(pq,"href","/docs/transformers/pr_17495/en/model_doc/vilt#transformers.ViltModel"),c(_q,"href","/docs/transformers/pr_17495/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(uq,"href","/docs/transformers/pr_17495/en/model_doc/visual_bert#transformers.VisualBertModel"),c(bq,"href","/docs/transformers/pr_17495/en/model_doc/vit#transformers.ViTModel"),c(vq,"href","/docs/transformers/pr_17495/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Fq,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Tq,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Mq,"href","/docs/transformers/pr_17495/en/model_doc/wavlm#transformers.WavLMModel"),c(Eq,"href","/docs/transformers/pr_17495/en/model_doc/xglm#transformers.XGLMModel"),c(Cq,"href","/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMModel"),c(wq,"href","/docs/transformers/pr_17495/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Aq,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(yq,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Lq,"href","/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetModel"),c(xq,"href","/docs/transformers/pr_17495/en/model_doc/yolos#transformers.YolosModel"),c($q,"href","/docs/transformers/pr_17495/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tu,"id","transformers.AutoModelForPreTraining"),c(tu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tu,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(kq,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sq,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rq,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pq,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Bq,"href","/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Iq,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertForPreTraining"),c(Nq,"href","/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(qq,"href","/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(jq,"href","/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Dq,"href","/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Gq,"href","/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Oq,"href","/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Vq,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Xq,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraForPreTraining"),c(zq,"href","/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Wq,"href","/docs/transformers/pr_17495/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Qq,"href","/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Hq,"href","/docs/transformers/pr_17495/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Uq,"href","/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Jq,"href","/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Yq,"href","/docs/transformers/pr_17495/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Kq,"href","/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Zq,"href","/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ej,"href","/docs/transformers/pr_17495/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(oj,"href","/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(rj,"href","/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(tj,"href","/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(aj,"href","/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(nj,"href","/docs/transformers/pr_17495/en/model_doc/retribert#transformers.RetriBertModel"),c(sj,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(lj,"href","/docs/transformers/pr_17495/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(ij,"href","/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(dj,"href","/docs/transformers/pr_17495/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(cj,"href","/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(fj,"href","/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(mj,"href","/docs/transformers/pr_17495/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(gj,"href","/docs/transformers/pr_17495/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(hj,"href","/docs/transformers/pr_17495/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(pj,"href","/docs/transformers/pr_17495/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(_j,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(uj,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(bj,"href","/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(vj,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uu,"id","transformers.AutoModelForCausalLM"),c(Uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uu,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(Mj,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ej,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cj,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wj,"href","/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartForCausalLM"),c(Aj,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertLMHeadModel"),c(yj,"href","/docs/transformers/pr_17495/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Lj,"href","/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(xj,"href","/docs/transformers/pr_17495/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c($j,"href","/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(kj,"href","/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Sj,"href","/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Rj,"href","/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Pj,"href","/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Bj,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Ij,"href","/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Nj,"href","/docs/transformers/pr_17495/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(qj,"href","/docs/transformers/pr_17495/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(jj,"href","/docs/transformers/pr_17495/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Dj,"href","/docs/transformers/pr_17495/en/model_doc/marian#transformers.MarianForCausalLM"),c(Gj,"href","/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Oj,"href","/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Vj,"href","/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Xj,"href","/docs/transformers/pr_17495/en/model_doc/opt#transformers.OPTForCausalLM"),c(zj,"href","/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Wj,"href","/docs/transformers/pr_17495/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Qj,"href","/docs/transformers/pr_17495/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Hj,"href","/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Uj,"href","/docs/transformers/pr_17495/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Jj,"href","/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Yj,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Kj,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Zj,"href","/docs/transformers/pr_17495/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(eD,"href","/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(oD,"href","/docs/transformers/pr_17495/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(rD,"href","/docs/transformers/pr_17495/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(tD,"href","/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(aD,"href","/docs/transformers/pr_17495/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(nD,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(sD,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(lD,"href","/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I1,"id","transformers.AutoModelForMaskedLM"),c(I1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I1,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(iD,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dD,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cD,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fD,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(mD,"href","/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gD,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertForMaskedLM"),c(hD,"href","/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(pD,"href","/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(_D,"href","/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(uD,"href","/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(bD,"href","/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(vD,"href","/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(FD,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(TD,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(MD,"href","/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(ED,"href","/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(CD,"href","/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(wD,"href","/docs/transformers/pr_17495/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(AD,"href","/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(yD,"href","/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(LD,"href","/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(xD,"href","/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c($D,"href","/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(kD,"href","/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(SD,"href","/docs/transformers/pr_17495/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(RD,"href","/docs/transformers/pr_17495/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(PD,"href","/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(BD,"href","/docs/transformers/pr_17495/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(ID,"href","/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(ND,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(qD,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(jD,"href","/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(DD,"href","/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(GD,"href","/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(OD,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(VD,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(XD,"href","/docs/transformers/pr_17495/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tb,"id","transformers.AutoModelForSeq2SeqLM"),c(Tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ni,"class","relative group"),c(zD,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WD,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QD,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HD,"href","/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(UD,"href","/docs/transformers/pr_17495/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(JD,"href","/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(YD,"href","/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(KD,"href","/docs/transformers/pr_17495/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(ZD,"href","/docs/transformers/pr_17495/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(eG,"href","/docs/transformers/pr_17495/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(oG,"href","/docs/transformers/pr_17495/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(rG,"href","/docs/transformers/pr_17495/en/model_doc/marian#transformers.MarianMTModel"),c(tG,"href","/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_17495/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_17495/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(lG,"href","/docs/transformers/pr_17495/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(iG,"href","/docs/transformers/pr_17495/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(dG,"href","/docs/transformers/pr_17495/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gb,"id","transformers.AutoModelForSequenceClassification"),c(Gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gb,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(cG,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fG,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mG,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gG,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17495/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17495/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c($G,"href","/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17495/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17495/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17495/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17495/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17495/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17495/en/model_doc/led#transformers.LEDForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17495/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17495/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17495/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17495/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17495/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q2,"id","transformers.AutoModelForMultipleChoice"),c(q2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q2,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(sO,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lO,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iO,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dO,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(cO,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertForMultipleChoice"),c(fO,"href","/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(mO,"href","/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(gO,"href","/docs/transformers/pr_17495/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(hO,"href","/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(pO,"href","/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(_O,"href","/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(uO,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(bO,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(vO,"href","/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17495/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(AO,"href","/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17495/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(LO,"href","/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(xO,"href","/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c($O,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(IO,"href","/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(NO,"href","/docs/transformers/pr_17495/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u4,"id","transformers.AutoModelForNextSentencePrediction"),c(u4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u4,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(qO,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jO,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DO,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GO,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(OO,"href","/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(VO,"href","/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(XO,"href","/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(zO,"href","/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A4,"id","transformers.AutoModelForTokenClassification"),c(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A4,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(WO,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QO,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HO,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UO,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(JO,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertForTokenClassification"),c(YO,"href","/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(KO,"href","/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17495/en/model_doc/canine#transformers.CanineForTokenClassification"),c(eV,"href","/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(oV,"href","/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(rV,"href","/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(tV,"href","/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(aV,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(nV,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(sV,"href","/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(lV,"href","/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(iV,"href","/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(dV,"href","/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(cV,"href","/docs/transformers/pr_17495/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(fV,"href","/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(mV,"href","/docs/transformers/pr_17495/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(gV,"href","/docs/transformers/pr_17495/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(hV,"href","/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(pV,"href","/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(_V,"href","/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(uV,"href","/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(bV,"href","/docs/transformers/pr_17495/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(vV,"href","/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(FV,"href","/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(TV,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(MV,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(EV,"href","/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(CV,"href","/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(wV,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(AV,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(yV,"href","/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(LV,"href","/docs/transformers/pr_17495/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c5,"id","transformers.AutoModelForQuestionAnswering"),c(c5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c5,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(xV,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($V,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kV,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SV,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17495/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_17495/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17495/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17495/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17495/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17495/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(WV,"href","/docs/transformers/pr_17495/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17495/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17495/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17495/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17495/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17495/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17495/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17495/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17495/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17495/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17495/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17495/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17495/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17495/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17495/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17495/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17495/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17495/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(hX,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(uX,"href","/docs/transformers/pr_17495/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ev,"id","transformers.AutoModelForTableQuestionAnswering"),c(ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ev,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(bX,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vX,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FX,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TX,"href","/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nv,"id","transformers.AutoModelForImageClassification"),c(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nv,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(MX,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EX,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CX,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wX,"href","/docs/transformers/pr_17495/en/model_doc/beit#transformers.BeitForImageClassification"),c(AX,"href","/docs/transformers/pr_17495/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(yX,"href","/docs/transformers/pr_17495/en/model_doc/cvt#transformers.CvtForImageClassification"),c(LX,"href","/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(xX,"href","/docs/transformers/pr_17495/en/model_doc/deit#transformers.DeiTForImageClassification"),c($X,"href","/docs/transformers/pr_17495/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(kX,"href","/docs/transformers/pr_17495/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(SX,"href","/docs/transformers/pr_17495/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(RX,"href","/docs/transformers/pr_17495/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(PX,"href","/docs/transformers/pr_17495/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(BX,"href","/docs/transformers/pr_17495/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(IX,"href","/docs/transformers/pr_17495/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(NX,"href","/docs/transformers/pr_17495/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(qX,"href","/docs/transformers/pr_17495/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(jX,"href","/docs/transformers/pr_17495/en/model_doc/swin#transformers.SwinForImageClassification"),c(DX,"href","/docs/transformers/pr_17495/en/model_doc/van#transformers.VanForImageClassification"),c(GX,"href","/docs/transformers/pr_17495/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tv,"id","transformers.AutoModelForVision2Seq"),c(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tv,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(OX,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/pr_17495/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Av,"id","transformers.AutoModelForAudioClassification"),c(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Av,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(WX,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QX,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HX,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UX,"href","/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(JX,"href","/docs/transformers/pr_17495/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(YX,"href","/docs/transformers/pr_17495/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(KX,"href","/docs/transformers/pr_17495/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(ZX,"href","/docs/transformers/pr_17495/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(ez,"href","/docs/transformers/pr_17495/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(oz,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(rz,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(tz,"href","/docs/transformers/pr_17495/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jv,"id","transformers.AutoModelForAudioFrameClassification"),c(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jv,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(az,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nz,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sz,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lz,"href","/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(iz,"href","/docs/transformers/pr_17495/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(dz,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(cz,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(fz,"href","/docs/transformers/pr_17495/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hv,"id","transformers.AutoModelForCTC"),c(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hv,"href","#transformers.AutoModelForCTC"),c(_d,"class","relative group"),c(mz,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gz,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hz,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pz,"href","/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(_z,"href","/docs/transformers/pr_17495/en/model_doc/hubert#transformers.HubertForCTC"),c(uz,"href","/docs/transformers/pr_17495/en/model_doc/sew#transformers.SEWForCTC"),c(bz,"href","/docs/transformers/pr_17495/en/model_doc/sew-d#transformers.SEWDForCTC"),c(vz,"href","/docs/transformers/pr_17495/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Fz,"href","/docs/transformers/pr_17495/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Tz,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Mz,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Ez,"href","/docs/transformers/pr_17495/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(Cz,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wz,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Az,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yz,"href","/docs/transformers/pr_17495/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Lz,"href","/docs/transformers/pr_17495/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gF,"id","transformers.AutoModelForAudioXVector"),c(gF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gF,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(xz,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($z,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kz,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sz,"href","/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Rz,"href","/docs/transformers/pr_17495/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Pz,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Bz,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Iz,"href","/docs/transformers/pr_17495/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForMaskedImageModeling"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(Nz,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qz,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jz,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dz,"href","/docs/transformers/pr_17495/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Gz,"href","/docs/transformers/pr_17495/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Oz,"href","/docs/transformers/pr_17495/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xF,"id","transformers.AutoModelForObjectDetection"),c(xF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xF,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(Vz,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xz,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zz,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wz,"href","/docs/transformers/pr_17495/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Qz,"href","/docs/transformers/pr_17495/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForImageSegmentation"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(Hz,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uz,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jz,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yz,"href","/docs/transformers/pr_17495/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForSemanticSegmentation"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(Kz,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zz,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eW,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oW,"href","/docs/transformers/pr_17495/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(rW,"href","/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(tW,"href","/docs/transformers/pr_17495/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(aW,"href","/docs/transformers/pr_17495/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HF,"id","transformers.AutoModelForInstanceSegmentation"),c(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HF,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(nW,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sW,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lW,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iW,"href","/docs/transformers/pr_17495/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.TFAutoModel"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(dW,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cW,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fW,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mW,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.TFAlbertModel"),c(gW,"href","/docs/transformers/pr_17495/en/model_doc/bart#transformers.TFBartModel"),c(hW,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.TFBertModel"),c(pW,"href","/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(_W,"href","/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(uW,"href","/docs/transformers/pr_17495/en/model_doc/camembert#transformers.TFCamembertModel"),c(bW,"href","/docs/transformers/pr_17495/en/model_doc/clip#transformers.TFCLIPModel"),c(vW,"href","/docs/transformers/pr_17495/en/model_doc/convbert#transformers.TFConvBertModel"),c(FW,"href","/docs/transformers/pr_17495/en/model_doc/convnext#transformers.TFConvNextModel"),c(TW,"href","/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.TFCTRLModel"),c(MW,"href","/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(EW,"href","/docs/transformers/pr_17495/en/model_doc/deberta#transformers.TFDebertaModel"),c(CW,"href","/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(wW,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(AW,"href","/docs/transformers/pr_17495/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(yW,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.TFElectraModel"),c(LW,"href","/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(xW,"href","/docs/transformers/pr_17495/en/model_doc/funnel#transformers.TFFunnelModel"),c($W,"href","/docs/transformers/pr_17495/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(kW,"href","/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.TFGPT2Model"),c(SW,"href","/docs/transformers/pr_17495/en/model_doc/gptj#transformers.TFGPTJModel"),c(RW,"href","/docs/transformers/pr_17495/en/model_doc/hubert#transformers.TFHubertModel"),c(PW,"href","/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(BW,"href","/docs/transformers/pr_17495/en/model_doc/led#transformers.TFLEDModel"),c(IW,"href","/docs/transformers/pr_17495/en/model_doc/longformer#transformers.TFLongformerModel"),c(NW,"href","/docs/transformers/pr_17495/en/model_doc/lxmert#transformers.TFLxmertModel"),c(qW,"href","/docs/transformers/pr_17495/en/model_doc/marian#transformers.TFMarianModel"),c(jW,"href","/docs/transformers/pr_17495/en/model_doc/mbart#transformers.TFMBartModel"),c(DW,"href","/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(GW,"href","/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.TFMPNetModel"),c(OW,"href","/docs/transformers/pr_17495/en/model_doc/mt5#transformers.TFMT5Model"),c(VW,"href","/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(XW,"href","/docs/transformers/pr_17495/en/model_doc/opt#transformers.TFOPTModel"),c(zW,"href","/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.TFPegasusModel"),c(WW,"href","/docs/transformers/pr_17495/en/model_doc/rembert#transformers.TFRemBertModel"),c(QW,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.TFRobertaModel"),c(HW,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.TFRoFormerModel"),c(UW,"href","/docs/transformers/pr_17495/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(JW,"href","/docs/transformers/pr_17495/en/model_doc/swin#transformers.TFSwinModel"),c(YW,"href","/docs/transformers/pr_17495/en/model_doc/t5#transformers.TFT5Model"),c(KW,"href","/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TFTapasModel"),c(ZW,"href","/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(eQ,"href","/docs/transformers/pr_17495/en/model_doc/vit#transformers.TFViTModel"),c(oQ,"href","/docs/transformers/pr_17495/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(rQ,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(tQ,"href","/docs/transformers/pr_17495/en/model_doc/xlm#transformers.TFXLMModel"),c(aQ,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(nQ,"href","/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HT,"id","transformers.TFAutoModelForPreTraining"),c(HT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HT,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(sQ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lQ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iQ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dQ,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(cQ,"href","/docs/transformers/pr_17495/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(fQ,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.TFBertForPreTraining"),c(mQ,"href","/docs/transformers/pr_17495/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(gQ,"href","/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(hQ,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(pQ,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(_Q,"href","/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(uQ,"href","/docs/transformers/pr_17495/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(bQ,"href","/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(vQ,"href","/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17495/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(TQ,"href","/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(MQ,"href","/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(EQ,"href","/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(CQ,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17495/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(AQ,"href","/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(yQ,"href","/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(LQ,"href","/docs/transformers/pr_17495/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(xQ,"href","/docs/transformers/pr_17495/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c($Q,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kQ,"href","/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F7,"id","transformers.TFAutoModelForCausalLM"),c(F7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F7,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(SQ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RQ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PQ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(IQ,"href","/docs/transformers/pr_17495/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(NQ,"href","/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(qQ,"href","/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(jQ,"href","/docs/transformers/pr_17495/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(DQ,"href","/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(GQ,"href","/docs/transformers/pr_17495/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(OQ,"href","/docs/transformers/pr_17495/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(VQ,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(XQ,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(zQ,"href","/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(WQ,"href","/docs/transformers/pr_17495/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(QQ,"href","/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I7,"id","transformers.TFAutoModelForImageClassification"),c(I7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I7,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(HQ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UQ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JQ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YQ,"href","/docs/transformers/pr_17495/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(KQ,"href","/docs/transformers/pr_17495/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(ZQ,"href","/docs/transformers/pr_17495/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(eH,"href","/docs/transformers/pr_17495/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V7,"id","transformers.TFAutoModelForMaskedLM"),c(V7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V7,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(oH,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rH,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tH,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aH,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(nH,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(sH,"href","/docs/transformers/pr_17495/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(lH,"href","/docs/transformers/pr_17495/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(iH,"href","/docs/transformers/pr_17495/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(dH,"href","/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(cH,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(fH,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(mH,"href","/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(gH,"href","/docs/transformers/pr_17495/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(hH,"href","/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(pH,"href","/docs/transformers/pr_17495/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(_H,"href","/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(uH,"href","/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(bH,"href","/docs/transformers/pr_17495/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(vH,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(FH,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(TH,"href","/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(MH,"href","/docs/transformers/pr_17495/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(EH,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m9,"id","transformers.TFAutoModelForSeq2SeqLM"),c(m9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m9,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(CH,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wH,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AH,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yH,"href","/docs/transformers/pr_17495/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(LH,"href","/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(xH,"href","/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c($H,"href","/docs/transformers/pr_17495/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(kH,"href","/docs/transformers/pr_17495/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(SH,"href","/docs/transformers/pr_17495/en/model_doc/marian#transformers.TFMarianMTModel"),c(RH,"href","/docs/transformers/pr_17495/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(PH,"href","/docs/transformers/pr_17495/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(BH,"href","/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(IH,"href","/docs/transformers/pr_17495/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w9,"id","transformers.TFAutoModelForSequenceClassification"),c(w9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w9,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(NH,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qH,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jH,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DH,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(GH,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(OH,"href","/docs/transformers/pr_17495/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(VH,"href","/docs/transformers/pr_17495/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(XH,"href","/docs/transformers/pr_17495/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(zH,"href","/docs/transformers/pr_17495/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(WH,"href","/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(QH,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(HH,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(UH,"href","/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(JH,"href","/docs/transformers/pr_17495/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(YH,"href","/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(KH,"href","/docs/transformers/pr_17495/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(eU,"href","/docs/transformers/pr_17495/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(oU,"href","/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(rU,"href","/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(tU,"href","/docs/transformers/pr_17495/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(aU,"href","/docs/transformers/pr_17495/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(nU,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(sU,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(lU,"href","/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(iU,"href","/docs/transformers/pr_17495/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(dU,"href","/docs/transformers/pr_17495/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(cU,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(fU,"href","/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eM,"id","transformers.TFAutoModelForMultipleChoice"),c(eM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eM,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(mU,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gU,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hU,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pU,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(_U,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(uU,"href","/docs/transformers/pr_17495/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(bU,"href","/docs/transformers/pr_17495/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(vU,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(FU,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(TU,"href","/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(MU,"href","/docs/transformers/pr_17495/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(EU,"href","/docs/transformers/pr_17495/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(CU,"href","/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(wU,"href","/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(AU,"href","/docs/transformers/pr_17495/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(yU,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(LU,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(xU,"href","/docs/transformers/pr_17495/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c($U,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(kU,"href","/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(SU,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RU,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PU,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BU,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(IU,"href","/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(NU,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qU,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jU,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DU,"href","/docs/transformers/pr_17495/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xM,"id","transformers.TFAutoModelForTokenClassification"),c(xM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xM,"href","#transformers.TFAutoModelForTokenClassification"),c(uc,"class","relative group"),c(GU,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OU,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VU,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XU,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(zU,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(WU,"href","/docs/transformers/pr_17495/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(QU,"href","/docs/transformers/pr_17495/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(HU,"href","/docs/transformers/pr_17495/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(UU,"href","/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(JU,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(YU,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(KU,"href","/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(ZU,"href","/docs/transformers/pr_17495/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(eJ,"href","/docs/transformers/pr_17495/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(oJ,"href","/docs/transformers/pr_17495/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(rJ,"href","/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(tJ,"href","/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(aJ,"href","/docs/transformers/pr_17495/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(nJ,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(sJ,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(lJ,"href","/docs/transformers/pr_17495/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(iJ,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(dJ,"href","/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KM,"id","transformers.TFAutoModelForQuestionAnswering"),c(KM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KM,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(cJ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fJ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mJ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gJ,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(hJ,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(pJ,"href","/docs/transformers/pr_17495/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(_J,"href","/docs/transformers/pr_17495/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(uJ,"href","/docs/transformers/pr_17495/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(bJ,"href","/docs/transformers/pr_17495/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(vJ,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(FJ,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(TJ,"href","/docs/transformers/pr_17495/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(MJ,"href","/docs/transformers/pr_17495/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(EJ,"href","/docs/transformers/pr_17495/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_17495/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(wJ,"href","/docs/transformers/pr_17495/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_17495/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_17495/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(xJ,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c($J,"href","/docs/transformers/pr_17495/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(kJ,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(SJ,"href","/docs/transformers/pr_17495/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TE,"id","transformers.TFAutoModelForVision2Seq"),c(TE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TE,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(RJ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PJ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BJ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IJ,"href","/docs/transformers/pr_17495/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(wE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(NJ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qJ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_17495/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xE,"id","transformers.FlaxAutoModel"),c(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xE,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(GJ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.FlaxAlbertModel"),c(zJ,"href","/docs/transformers/pr_17495/en/model_doc/bart#transformers.FlaxBartModel"),c(WJ,"href","/docs/transformers/pr_17495/en/model_doc/beit#transformers.FlaxBeitModel"),c(QJ,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.FlaxBertModel"),c(HJ,"href","/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(UJ,"href","/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(JJ,"href","/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(YJ,"href","/docs/transformers/pr_17495/en/model_doc/clip#transformers.FlaxCLIPModel"),c(KJ,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(ZJ,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.FlaxElectraModel"),c(eY,"href","/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(oY,"href","/docs/transformers/pr_17495/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(rY,"href","/docs/transformers/pr_17495/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(tY,"href","/docs/transformers/pr_17495/en/model_doc/marian#transformers.FlaxMarianModel"),c(aY,"href","/docs/transformers/pr_17495/en/model_doc/mbart#transformers.FlaxMBartModel"),c(nY,"href","/docs/transformers/pr_17495/en/model_doc/mt5#transformers.FlaxMT5Model"),c(sY,"href","/docs/transformers/pr_17495/en/model_doc/opt#transformers.FlaxOPTModel"),c(lY,"href","/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(iY,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(dY,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(cY,"href","/docs/transformers/pr_17495/en/model_doc/t5#transformers.FlaxT5Model"),c(fY,"href","/docs/transformers/pr_17495/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(mY,"href","/docs/transformers/pr_17495/en/model_doc/vit#transformers.FlaxViTModel"),c(gY,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(hY,"href","/docs/transformers/pr_17495/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(pY,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aC,"id","transformers.FlaxAutoModelForCausalLM"),c(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(_Y,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uY,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bY,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vY,"href","/docs/transformers/pr_17495/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(FY,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(TY,"href","/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(MY,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(EY,"href","/docs/transformers/pr_17495/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(CY,"href","/docs/transformers/pr_17495/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(wY,"href","/docs/transformers/pr_17495/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(AY,"href","/docs/transformers/pr_17495/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(yY,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(LY,"href","/docs/transformers/pr_17495/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uC,"id","transformers.FlaxAutoModelForPreTraining"),c(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(xY,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Y,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kY,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SY,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(RY,"href","/docs/transformers/pr_17495/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(PY,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(BY,"href","/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(IY,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(NY,"href","/docs/transformers/pr_17495/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(qY,"href","/docs/transformers/pr_17495/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(jY,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(DY,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(GY,"href","/docs/transformers/pr_17495/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(OY,"href","/docs/transformers/pr_17495/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(VY,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SC,"id","transformers.FlaxAutoModelForMaskedLM"),c(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(XY,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zY,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WY,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QY,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(HY,"href","/docs/transformers/pr_17495/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(UY,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(JY,"href","/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(YY,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(KY,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(ZY,"href","/docs/transformers/pr_17495/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(eK,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(oK,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(rK,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(zC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(tK,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aK,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nK,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sK,"href","/docs/transformers/pr_17495/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(lK,"href","/docs/transformers/pr_17495/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(iK,"href","/docs/transformers/pr_17495/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(dK,"href","/docs/transformers/pr_17495/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(cK,"href","/docs/transformers/pr_17495/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(fK,"href","/docs/transformers/pr_17495/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(mK,"href","/docs/transformers/pr_17495/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(gK,"href","/docs/transformers/pr_17495/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(hK,"href","/docs/transformers/pr_17495/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(pK,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_K,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uK,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(vK,"href","/docs/transformers/pr_17495/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(FK,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(TK,"href","/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(MK,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(EK,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(CK,"href","/docs/transformers/pr_17495/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(wK,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(AK,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(yK,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(_3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(LK,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xK,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($K,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kK,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(SK,"href","/docs/transformers/pr_17495/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(RK,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(PK,"href","/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(BK,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(IK,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(NK,"href","/docs/transformers/pr_17495/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(qK,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(jK,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(DK,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x3,"id","transformers.FlaxAutoModelForTokenClassification"),c(x3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(GK,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OK,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VK,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XK,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(zK,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(WK,"href","/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(QK,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(HK,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(UK,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(JK,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(YK,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(D3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(KK,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/pr_17495/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(rZ,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(tZ,"href","/docs/transformers/pr_17495/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(aZ,"href","/docs/transformers/pr_17495/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(nZ,"href","/docs/transformers/pr_17495/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(sZ,"href","/docs/transformers/pr_17495/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(lZ,"href","/docs/transformers/pr_17495/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(iZ,"href","/docs/transformers/pr_17495/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(dZ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cZ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fZ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mZ,"href","/docs/transformers/pr_17495/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ow,"id","transformers.FlaxAutoModelForImageClassification"),c(ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ow,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(gZ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hZ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pZ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Z,"href","/docs/transformers/pr_17495/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(uZ,"href","/docs/transformers/pr_17495/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sw,"id","transformers.FlaxAutoModelForVision2Seq"),c(sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(bZ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vZ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FZ,"href","/docs/transformers/pr_17495/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TZ,"href","/docs/transformers/pr_17495/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,u),b(f,rt,u),e(rt,mi),e(rt,gi),e(gi,y6),e(rt,_f),b(f,De,u),b(f,We,u),e(We,hi),e(We,yn),e(yn,L6),e(We,Ln),e(We,xn),e(xn,x6),e(We,pi),e(We,$n),e($n,$6),e(We,_i),b(f,uf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,U$),e(Ae,ui),e(ui,J$),e(Ae,Y$),b(f,Eo,u),b(f,wa,u),e(wa,K$),e(wa,bf),e(bf,Z$),e(wa,wOe),b(f,hqe,u),b(f,bi,u),e(bi,vf),e(vf,hoe),M(k6,hoe,null),e(bi,AOe),e(bi,poe),e(poe,yOe),b(f,pqe,u),b(f,kn,u),e(kn,LOe),e(kn,_oe),e(_oe,xOe),e(kn,$Oe),e(kn,uoe),e(uoe,kOe),e(kn,SOe),b(f,_qe,u),M(S6,f,u),b(f,uqe,u),b(f,ek,u),e(ek,ROe),b(f,bqe,u),M(Ff,f,u),b(f,vqe,u),b(f,vi,u),e(vi,Tf),e(Tf,boe),M(R6,boe,null),e(vi,POe),e(vi,voe),e(voe,BOe),b(f,Fqe,u),b(f,Co,u),M(P6,Co,null),e(Co,IOe),e(Co,B6),e(B6,NOe),e(B6,ok),e(ok,qOe),e(B6,jOe),e(Co,DOe),e(Co,I6),e(I6,GOe),e(I6,Foe),e(Foe,OOe),e(I6,VOe),e(Co,XOe),e(Co,Er),M(N6,Er,null),e(Er,zOe),e(Er,Toe),e(Toe,WOe),e(Er,QOe),e(Er,Fi),e(Fi,HOe),e(Fi,Moe),e(Moe,UOe),e(Fi,JOe),e(Fi,Eoe),e(Eoe,YOe),e(Fi,KOe),e(Er,ZOe),e(Er,A),e(A,Mf),e(Mf,Coe),e(Coe,eVe),e(Mf,oVe),e(Mf,rk),e(rk,rVe),e(Mf,tVe),e(A,aVe),e(A,Ef),e(Ef,woe),e(woe,nVe),e(Ef,sVe),e(Ef,tk),e(tk,lVe),e(Ef,iVe),e(A,dVe),e(A,Cf),e(Cf,Aoe),e(Aoe,cVe),e(Cf,fVe),e(Cf,ak),e(ak,mVe),e(Cf,gVe),e(A,hVe),e(A,wf),e(wf,yoe),e(yoe,pVe),e(wf,_Ve),e(wf,nk),e(nk,uVe),e(wf,bVe),e(A,vVe),e(A,Af),e(Af,Loe),e(Loe,FVe),e(Af,TVe),e(Af,sk),e(sk,MVe),e(Af,EVe),e(A,CVe),e(A,yf),e(yf,xoe),e(xoe,wVe),e(yf,AVe),e(yf,lk),e(lk,yVe),e(yf,LVe),e(A,xVe),e(A,Lf),e(Lf,$oe),e($oe,$Ve),e(Lf,kVe),e(Lf,ik),e(ik,SVe),e(Lf,RVe),e(A,PVe),e(A,xf),e(xf,koe),e(koe,BVe),e(xf,IVe),e(xf,dk),e(dk,NVe),e(xf,qVe),e(A,jVe),e(A,$f),e($f,Soe),e(Soe,DVe),e($f,GVe),e($f,ck),e(ck,OVe),e($f,VVe),e(A,XVe),e(A,kf),e(kf,Roe),e(Roe,zVe),e(kf,WVe),e(kf,fk),e(fk,QVe),e(kf,HVe),e(A,UVe),e(A,Sf),e(Sf,Poe),e(Poe,JVe),e(Sf,YVe),e(Sf,mk),e(mk,KVe),e(Sf,ZVe),e(A,eXe),e(A,Rf),e(Rf,Boe),e(Boe,oXe),e(Rf,rXe),e(Rf,gk),e(gk,tXe),e(Rf,aXe),e(A,nXe),e(A,Pf),e(Pf,Ioe),e(Ioe,sXe),e(Pf,lXe),e(Pf,hk),e(hk,iXe),e(Pf,dXe),e(A,cXe),e(A,Bf),e(Bf,Noe),e(Noe,fXe),e(Bf,mXe),e(Bf,pk),e(pk,gXe),e(Bf,hXe),e(A,pXe),e(A,If),e(If,qoe),e(qoe,_Xe),e(If,uXe),e(If,_k),e(_k,bXe),e(If,vXe),e(A,FXe),e(A,Nf),e(Nf,joe),e(joe,TXe),e(Nf,MXe),e(Nf,uk),e(uk,EXe),e(Nf,CXe),e(A,wXe),e(A,qf),e(qf,Doe),e(Doe,AXe),e(qf,yXe),e(qf,bk),e(bk,LXe),e(qf,xXe),e(A,$Xe),e(A,jf),e(jf,Goe),e(Goe,kXe),e(jf,SXe),e(jf,vk),e(vk,RXe),e(jf,PXe),e(A,BXe),e(A,Df),e(Df,Ooe),e(Ooe,IXe),e(Df,NXe),e(Df,Fk),e(Fk,qXe),e(Df,jXe),e(A,DXe),e(A,Gf),e(Gf,Voe),e(Voe,GXe),e(Gf,OXe),e(Gf,Tk),e(Tk,VXe),e(Gf,XXe),e(A,zXe),e(A,Of),e(Of,Xoe),e(Xoe,WXe),e(Of,QXe),e(Of,Mk),e(Mk,HXe),e(Of,UXe),e(A,JXe),e(A,Vf),e(Vf,zoe),e(zoe,YXe),e(Vf,KXe),e(Vf,Ek),e(Ek,ZXe),e(Vf,eze),e(A,oze),e(A,Xf),e(Xf,Woe),e(Woe,rze),e(Xf,tze),e(Xf,Ck),e(Ck,aze),e(Xf,nze),e(A,sze),e(A,zf),e(zf,Qoe),e(Qoe,lze),e(zf,ize),e(zf,wk),e(wk,dze),e(zf,cze),e(A,fze),e(A,Wf),e(Wf,Hoe),e(Hoe,mze),e(Wf,gze),e(Wf,Ak),e(Ak,hze),e(Wf,pze),e(A,_ze),e(A,Qf),e(Qf,Uoe),e(Uoe,uze),e(Qf,bze),e(Qf,yk),e(yk,vze),e(Qf,Fze),e(A,Tze),e(A,Hf),e(Hf,Joe),e(Joe,Mze),e(Hf,Eze),e(Hf,Lk),e(Lk,Cze),e(Hf,wze),e(A,Aze),e(A,Uf),e(Uf,Yoe),e(Yoe,yze),e(Uf,Lze),e(Uf,xk),e(xk,xze),e(Uf,$ze),e(A,kze),e(A,Jf),e(Jf,Koe),e(Koe,Sze),e(Jf,Rze),e(Jf,$k),e($k,Pze),e(Jf,Bze),e(A,Ize),e(A,Yf),e(Yf,Zoe),e(Zoe,Nze),e(Yf,qze),e(Yf,kk),e(kk,jze),e(Yf,Dze),e(A,Gze),e(A,Kf),e(Kf,ere),e(ere,Oze),e(Kf,Vze),e(Kf,Sk),e(Sk,Xze),e(Kf,zze),e(A,Wze),e(A,Zf),e(Zf,ore),e(ore,Qze),e(Zf,Hze),e(Zf,Rk),e(Rk,Uze),e(Zf,Jze),e(A,Yze),e(A,em),e(em,rre),e(rre,Kze),e(em,Zze),e(em,Pk),e(Pk,eWe),e(em,oWe),e(A,rWe),e(A,om),e(om,tre),e(tre,tWe),e(om,aWe),e(om,Bk),e(Bk,nWe),e(om,sWe),e(A,lWe),e(A,rm),e(rm,are),e(are,iWe),e(rm,dWe),e(rm,Ik),e(Ik,cWe),e(rm,fWe),e(A,mWe),e(A,tm),e(tm,nre),e(nre,gWe),e(tm,hWe),e(tm,Nk),e(Nk,pWe),e(tm,_We),e(A,uWe),e(A,am),e(am,sre),e(sre,bWe),e(am,vWe),e(am,qk),e(qk,FWe),e(am,TWe),e(A,MWe),e(A,nm),e(nm,lre),e(lre,EWe),e(nm,CWe),e(nm,jk),e(jk,wWe),e(nm,AWe),e(A,yWe),e(A,sm),e(sm,ire),e(ire,LWe),e(sm,xWe),e(sm,Dk),e(Dk,$We),e(sm,kWe),e(A,SWe),e(A,lm),e(lm,dre),e(dre,RWe),e(lm,PWe),e(lm,Gk),e(Gk,BWe),e(lm,IWe),e(A,NWe),e(A,im),e(im,cre),e(cre,qWe),e(im,jWe),e(im,Ok),e(Ok,DWe),e(im,GWe),e(A,OWe),e(A,dm),e(dm,fre),e(fre,VWe),e(dm,XWe),e(dm,Vk),e(Vk,zWe),e(dm,WWe),e(A,QWe),e(A,cm),e(cm,mre),e(mre,HWe),e(cm,UWe),e(cm,Xk),e(Xk,JWe),e(cm,YWe),e(A,KWe),e(A,fm),e(fm,gre),e(gre,ZWe),e(fm,eQe),e(fm,zk),e(zk,oQe),e(fm,rQe),e(A,tQe),e(A,mm),e(mm,hre),e(hre,aQe),e(mm,nQe),e(mm,Wk),e(Wk,sQe),e(mm,lQe),e(A,iQe),e(A,gm),e(gm,pre),e(pre,dQe),e(gm,cQe),e(gm,Qk),e(Qk,fQe),e(gm,mQe),e(A,gQe),e(A,hm),e(hm,_re),e(_re,hQe),e(hm,pQe),e(hm,Hk),e(Hk,_Qe),e(hm,uQe),e(A,bQe),e(A,pm),e(pm,ure),e(ure,vQe),e(pm,FQe),e(pm,Uk),e(Uk,TQe),e(pm,MQe),e(A,EQe),e(A,_m),e(_m,bre),e(bre,CQe),e(_m,wQe),e(_m,Jk),e(Jk,AQe),e(_m,yQe),e(A,LQe),e(A,um),e(um,vre),e(vre,xQe),e(um,$Qe),e(um,Yk),e(Yk,kQe),e(um,SQe),e(A,RQe),e(A,bm),e(bm,Fre),e(Fre,PQe),e(bm,BQe),e(bm,Kk),e(Kk,IQe),e(bm,NQe),e(A,qQe),e(A,vm),e(vm,Tre),e(Tre,jQe),e(vm,DQe),e(vm,Zk),e(Zk,GQe),e(vm,OQe),e(A,VQe),e(A,Fm),e(Fm,Mre),e(Mre,XQe),e(Fm,zQe),e(Fm,eS),e(eS,WQe),e(Fm,QQe),e(A,HQe),e(A,Tm),e(Tm,Ere),e(Ere,UQe),e(Tm,JQe),e(Tm,oS),e(oS,YQe),e(Tm,KQe),e(A,ZQe),e(A,Mm),e(Mm,Cre),e(Cre,eHe),e(Mm,oHe),e(Mm,rS),e(rS,rHe),e(Mm,tHe),e(A,aHe),e(A,Em),e(Em,wre),e(wre,nHe),e(Em,sHe),e(Em,tS),e(tS,lHe),e(Em,iHe),e(A,dHe),e(A,Cm),e(Cm,Are),e(Are,cHe),e(Cm,fHe),e(Cm,aS),e(aS,mHe),e(Cm,gHe),e(A,hHe),e(A,wm),e(wm,yre),e(yre,pHe),e(wm,_He),e(wm,nS),e(nS,uHe),e(wm,bHe),e(A,vHe),e(A,Am),e(Am,Lre),e(Lre,FHe),e(Am,THe),e(Am,sS),e(sS,MHe),e(Am,EHe),e(A,CHe),e(A,ym),e(ym,xre),e(xre,wHe),e(ym,AHe),e(ym,lS),e(lS,yHe),e(ym,LHe),e(A,xHe),e(A,Lm),e(Lm,$re),e($re,$He),e(Lm,kHe),e(Lm,iS),e(iS,SHe),e(Lm,RHe),e(A,PHe),e(A,xm),e(xm,kre),e(kre,BHe),e(xm,IHe),e(xm,dS),e(dS,NHe),e(xm,qHe),e(A,jHe),e(A,$m),e($m,Sre),e(Sre,DHe),e($m,GHe),e($m,cS),e(cS,OHe),e($m,VHe),e(A,XHe),e(A,km),e(km,Rre),e(Rre,zHe),e(km,WHe),e(km,fS),e(fS,QHe),e(km,HHe),e(A,UHe),e(A,Sm),e(Sm,Pre),e(Pre,JHe),e(Sm,YHe),e(Sm,mS),e(mS,KHe),e(Sm,ZHe),e(A,eUe),e(A,Rm),e(Rm,Bre),e(Bre,oUe),e(Rm,rUe),e(Rm,gS),e(gS,tUe),e(Rm,aUe),e(A,nUe),e(A,Pm),e(Pm,Ire),e(Ire,sUe),e(Pm,lUe),e(Pm,hS),e(hS,iUe),e(Pm,dUe),e(A,cUe),e(A,Bm),e(Bm,Nre),e(Nre,fUe),e(Bm,mUe),e(Bm,pS),e(pS,gUe),e(Bm,hUe),e(A,pUe),e(A,Im),e(Im,qre),e(qre,_Ue),e(Im,uUe),e(Im,_S),e(_S,bUe),e(Im,vUe),e(A,FUe),e(A,Nm),e(Nm,jre),e(jre,TUe),e(Nm,MUe),e(Nm,uS),e(uS,EUe),e(Nm,CUe),e(A,wUe),e(A,qm),e(qm,Dre),e(Dre,AUe),e(qm,yUe),e(qm,bS),e(bS,LUe),e(qm,xUe),e(A,$Ue),e(A,jm),e(jm,Gre),e(Gre,kUe),e(jm,SUe),e(jm,vS),e(vS,RUe),e(jm,PUe),e(A,BUe),e(A,Dm),e(Dm,Ore),e(Ore,IUe),e(Dm,NUe),e(Dm,FS),e(FS,qUe),e(Dm,jUe),e(A,DUe),e(A,Gm),e(Gm,Vre),e(Vre,GUe),e(Gm,OUe),e(Gm,TS),e(TS,VUe),e(Gm,XUe),e(A,zUe),e(A,Om),e(Om,Xre),e(Xre,WUe),e(Om,QUe),e(Om,MS),e(MS,HUe),e(Om,UUe),e(A,JUe),e(A,Vm),e(Vm,zre),e(zre,YUe),e(Vm,KUe),e(Vm,ES),e(ES,ZUe),e(Vm,eJe),e(A,oJe),e(A,Xm),e(Xm,Wre),e(Wre,rJe),e(Xm,tJe),e(Xm,CS),e(CS,aJe),e(Xm,nJe),e(A,sJe),e(A,zm),e(zm,Qre),e(Qre,lJe),e(zm,iJe),e(zm,wS),e(wS,dJe),e(zm,cJe),e(A,fJe),e(A,Wm),e(Wm,Hre),e(Hre,mJe),e(Wm,gJe),e(Wm,AS),e(AS,hJe),e(Wm,pJe),e(A,_Je),e(A,Qm),e(Qm,Ure),e(Ure,uJe),e(Qm,bJe),e(Qm,yS),e(yS,vJe),e(Qm,FJe),e(A,TJe),e(A,Hm),e(Hm,Jre),e(Jre,MJe),e(Hm,EJe),e(Hm,LS),e(LS,CJe),e(Hm,wJe),e(A,AJe),e(A,Um),e(Um,Yre),e(Yre,yJe),e(Um,LJe),e(Um,xS),e(xS,xJe),e(Um,$Je),e(A,kJe),e(A,Jm),e(Jm,Kre),e(Kre,SJe),e(Jm,RJe),e(Jm,$S),e($S,PJe),e(Jm,BJe),e(A,IJe),e(A,Ym),e(Ym,Zre),e(Zre,NJe),e(Ym,qJe),e(Ym,kS),e(kS,jJe),e(Ym,DJe),e(A,GJe),e(A,Km),e(Km,ete),e(ete,OJe),e(Km,VJe),e(Km,SS),e(SS,XJe),e(Km,zJe),e(A,WJe),e(A,Zm),e(Zm,ote),e(ote,QJe),e(Zm,HJe),e(Zm,RS),e(RS,UJe),e(Zm,JJe),e(A,YJe),e(A,eg),e(eg,rte),e(rte,KJe),e(eg,ZJe),e(eg,PS),e(PS,eYe),e(eg,oYe),e(A,rYe),e(A,og),e(og,tte),e(tte,tYe),e(og,aYe),e(og,BS),e(BS,nYe),e(og,sYe),e(A,lYe),e(A,rg),e(rg,ate),e(ate,iYe),e(rg,dYe),e(rg,IS),e(IS,cYe),e(rg,fYe),e(A,mYe),e(A,tg),e(tg,nte),e(nte,gYe),e(tg,hYe),e(tg,NS),e(NS,pYe),e(tg,_Ye),e(A,uYe),e(A,ag),e(ag,ste),e(ste,bYe),e(ag,vYe),e(ag,qS),e(qS,FYe),e(ag,TYe),e(A,MYe),e(A,ng),e(ng,lte),e(lte,EYe),e(ng,CYe),e(ng,jS),e(jS,wYe),e(ng,AYe),e(A,yYe),e(A,sg),e(sg,ite),e(ite,LYe),e(sg,xYe),e(sg,DS),e(DS,$Ye),e(sg,kYe),e(A,SYe),e(A,lg),e(lg,dte),e(dte,RYe),e(lg,PYe),e(lg,GS),e(GS,BYe),e(lg,IYe),e(A,NYe),e(A,ig),e(ig,cte),e(cte,qYe),e(ig,jYe),e(ig,OS),e(OS,DYe),e(ig,GYe),e(A,OYe),e(A,dg),e(dg,fte),e(fte,VYe),e(dg,XYe),e(dg,VS),e(VS,zYe),e(dg,WYe),e(A,QYe),e(A,cg),e(cg,mte),e(mte,HYe),e(cg,UYe),e(cg,XS),e(XS,JYe),e(cg,YYe),e(A,KYe),e(A,fg),e(fg,gte),e(gte,ZYe),e(fg,eKe),e(fg,zS),e(zS,oKe),e(fg,rKe),e(A,tKe),e(A,mg),e(mg,hte),e(hte,aKe),e(mg,nKe),e(mg,WS),e(WS,sKe),e(mg,lKe),e(A,iKe),e(A,gg),e(gg,pte),e(pte,dKe),e(gg,cKe),e(gg,QS),e(QS,fKe),e(gg,mKe),e(A,gKe),e(A,hg),e(hg,_te),e(_te,hKe),e(hg,pKe),e(hg,HS),e(HS,_Ke),e(hg,uKe),e(A,bKe),e(A,pg),e(pg,ute),e(ute,vKe),e(pg,FKe),e(pg,US),e(US,TKe),e(pg,MKe),e(A,EKe),e(A,_g),e(_g,bte),e(bte,CKe),e(_g,wKe),e(_g,JS),e(JS,AKe),e(_g,yKe),e(A,LKe),e(A,ug),e(ug,vte),e(vte,xKe),e(ug,$Ke),e(ug,YS),e(YS,kKe),e(ug,SKe),e(A,RKe),e(A,bg),e(bg,Fte),e(Fte,PKe),e(bg,BKe),e(bg,KS),e(KS,IKe),e(bg,NKe),e(A,qKe),e(A,vg),e(vg,Tte),e(Tte,jKe),e(vg,DKe),e(vg,ZS),e(ZS,GKe),e(vg,OKe),e(A,VKe),e(A,Fg),e(Fg,Mte),e(Mte,XKe),e(Fg,zKe),e(Fg,eR),e(eR,WKe),e(Fg,QKe),e(A,HKe),e(A,Tg),e(Tg,Ete),e(Ete,UKe),e(Tg,JKe),e(Tg,oR),e(oR,YKe),e(Tg,KKe),e(A,ZKe),e(A,Mg),e(Mg,Cte),e(Cte,eZe),e(Mg,oZe),e(Mg,rR),e(rR,rZe),e(Mg,tZe),e(Er,aZe),M(Eg,Er,null),e(Co,nZe),e(Co,Cg),M(q6,Cg,null),e(Cg,sZe),e(Cg,wte),e(wte,lZe),b(f,Tqe,u),b(f,Ti,u),e(Ti,wg),e(wg,Ate),M(j6,Ate,null),e(Ti,iZe),e(Ti,yte),e(yte,dZe),b(f,Mqe,u),b(f,wo,u),M(D6,wo,null),e(wo,cZe),e(wo,G6),e(G6,fZe),e(G6,tR),e(tR,mZe),e(G6,gZe),e(wo,hZe),e(wo,O6),e(O6,pZe),e(O6,Lte),e(Lte,_Ze),e(O6,uZe),e(wo,bZe),e(wo,Cr),M(V6,Cr,null),e(Cr,vZe),e(Cr,xte),e(xte,FZe),e(Cr,TZe),e(Cr,Aa),e(Aa,MZe),e(Aa,$te),e($te,EZe),e(Aa,CZe),e(Aa,kte),e(kte,wZe),e(Aa,AZe),e(Aa,Ste),e(Ste,yZe),e(Aa,LZe),e(Cr,xZe),e(Cr,k),e(k,Sn),e(Sn,Rte),e(Rte,$Ze),e(Sn,kZe),e(Sn,aR),e(aR,SZe),e(Sn,RZe),e(Sn,nR),e(nR,PZe),e(Sn,BZe),e(k,IZe),e(k,Rn),e(Rn,Pte),e(Pte,NZe),e(Rn,qZe),e(Rn,sR),e(sR,jZe),e(Rn,DZe),e(Rn,lR),e(lR,GZe),e(Rn,OZe),e(k,VZe),e(k,Pn),e(Pn,Bte),e(Bte,XZe),e(Pn,zZe),e(Pn,iR),e(iR,WZe),e(Pn,QZe),e(Pn,dR),e(dR,HZe),e(Pn,UZe),e(k,JZe),e(k,Ag),e(Ag,Ite),e(Ite,YZe),e(Ag,KZe),e(Ag,cR),e(cR,ZZe),e(Ag,eeo),e(k,oeo),e(k,Bn),e(Bn,Nte),e(Nte,reo),e(Bn,teo),e(Bn,fR),e(fR,aeo),e(Bn,neo),e(Bn,mR),e(mR,seo),e(Bn,leo),e(k,ieo),e(k,yg),e(yg,qte),e(qte,deo),e(yg,ceo),e(yg,gR),e(gR,feo),e(yg,meo),e(k,geo),e(k,Lg),e(Lg,jte),e(jte,heo),e(Lg,peo),e(Lg,hR),e(hR,_eo),e(Lg,ueo),e(k,beo),e(k,xg),e(xg,Dte),e(Dte,veo),e(xg,Feo),e(xg,pR),e(pR,Teo),e(xg,Meo),e(k,Eeo),e(k,In),e(In,Gte),e(Gte,Ceo),e(In,weo),e(In,_R),e(_R,Aeo),e(In,yeo),e(In,uR),e(uR,Leo),e(In,xeo),e(k,$eo),e(k,Nn),e(Nn,Ote),e(Ote,keo),e(Nn,Seo),e(Nn,bR),e(bR,Reo),e(Nn,Peo),e(Nn,vR),e(vR,Beo),e(Nn,Ieo),e(k,Neo),e(k,qn),e(qn,Vte),e(Vte,qeo),e(qn,jeo),e(qn,FR),e(FR,Deo),e(qn,Geo),e(qn,TR),e(TR,Oeo),e(qn,Veo),e(k,Xeo),e(k,$g),e($g,Xte),e(Xte,zeo),e($g,Weo),e($g,MR),e(MR,Qeo),e($g,Heo),e(k,Ueo),e(k,kg),e(kg,zte),e(zte,Jeo),e(kg,Yeo),e(kg,ER),e(ER,Keo),e(kg,Zeo),e(k,eoo),e(k,jn),e(jn,Wte),e(Wte,ooo),e(jn,roo),e(jn,CR),e(CR,too),e(jn,aoo),e(jn,wR),e(wR,noo),e(jn,soo),e(k,loo),e(k,Sg),e(Sg,Qte),e(Qte,ioo),e(Sg,doo),e(Sg,AR),e(AR,coo),e(Sg,foo),e(k,moo),e(k,Dn),e(Dn,Hte),e(Hte,goo),e(Dn,hoo),e(Dn,yR),e(yR,poo),e(Dn,_oo),e(Dn,LR),e(LR,uoo),e(Dn,boo),e(k,voo),e(k,Gn),e(Gn,Ute),e(Ute,Foo),e(Gn,Too),e(Gn,xR),e(xR,Moo),e(Gn,Eoo),e(Gn,$R),e($R,Coo),e(Gn,woo),e(k,Aoo),e(k,On),e(On,Jte),e(Jte,yoo),e(On,Loo),e(On,kR),e(kR,xoo),e(On,$oo),e(On,SR),e(SR,koo),e(On,Soo),e(k,Roo),e(k,Rg),e(Rg,Yte),e(Yte,Poo),e(Rg,Boo),e(Rg,RR),e(RR,Ioo),e(Rg,Noo),e(k,qoo),e(k,Vn),e(Vn,Kte),e(Kte,joo),e(Vn,Doo),e(Vn,PR),e(PR,Goo),e(Vn,Ooo),e(Vn,BR),e(BR,Voo),e(Vn,Xoo),e(k,zoo),e(k,Xn),e(Xn,Zte),e(Zte,Woo),e(Xn,Qoo),e(Xn,IR),e(IR,Hoo),e(Xn,Uoo),e(Xn,NR),e(NR,Joo),e(Xn,Yoo),e(k,Koo),e(k,zn),e(zn,eae),e(eae,Zoo),e(zn,ero),e(zn,qR),e(qR,oro),e(zn,rro),e(zn,jR),e(jR,tro),e(zn,aro),e(k,nro),e(k,Wn),e(Wn,oae),e(oae,sro),e(Wn,lro),e(Wn,DR),e(DR,iro),e(Wn,dro),e(Wn,GR),e(GR,cro),e(Wn,fro),e(k,mro),e(k,Qn),e(Qn,rae),e(rae,gro),e(Qn,hro),e(Qn,OR),e(OR,pro),e(Qn,_ro),e(Qn,VR),e(VR,uro),e(Qn,bro),e(k,vro),e(k,Hn),e(Hn,tae),e(tae,Fro),e(Hn,Tro),e(Hn,XR),e(XR,Mro),e(Hn,Ero),e(Hn,zR),e(zR,Cro),e(Hn,wro),e(k,Aro),e(k,Pg),e(Pg,aae),e(aae,yro),e(Pg,Lro),e(Pg,WR),e(WR,xro),e(Pg,$ro),e(k,kro),e(k,Un),e(Un,nae),e(nae,Sro),e(Un,Rro),e(Un,QR),e(QR,Pro),e(Un,Bro),e(Un,HR),e(HR,Iro),e(Un,Nro),e(k,qro),e(k,Bg),e(Bg,sae),e(sae,jro),e(Bg,Dro),e(Bg,UR),e(UR,Gro),e(Bg,Oro),e(k,Vro),e(k,Jn),e(Jn,lae),e(lae,Xro),e(Jn,zro),e(Jn,JR),e(JR,Wro),e(Jn,Qro),e(Jn,YR),e(YR,Hro),e(Jn,Uro),e(k,Jro),e(k,Yn),e(Yn,iae),e(iae,Yro),e(Yn,Kro),e(Yn,KR),e(KR,Zro),e(Yn,eto),e(Yn,ZR),e(ZR,oto),e(Yn,rto),e(k,tto),e(k,Kn),e(Kn,dae),e(dae,ato),e(Kn,nto),e(Kn,eP),e(eP,sto),e(Kn,lto),e(Kn,oP),e(oP,ito),e(Kn,dto),e(k,cto),e(k,Ig),e(Ig,cae),e(cae,fto),e(Ig,mto),e(Ig,rP),e(rP,gto),e(Ig,hto),e(k,pto),e(k,Zn),e(Zn,fae),e(fae,_to),e(Zn,uto),e(Zn,tP),e(tP,bto),e(Zn,vto),e(Zn,aP),e(aP,Fto),e(Zn,Tto),e(k,Mto),e(k,es),e(es,mae),e(mae,Eto),e(es,Cto),e(es,nP),e(nP,wto),e(es,Ato),e(es,sP),e(sP,yto),e(es,Lto),e(k,xto),e(k,Ng),e(Ng,gae),e(gae,$to),e(Ng,kto),e(Ng,lP),e(lP,Sto),e(Ng,Rto),e(k,Pto),e(k,os),e(os,hae),e(hae,Bto),e(os,Ito),e(os,iP),e(iP,Nto),e(os,qto),e(os,dP),e(dP,jto),e(os,Dto),e(k,Gto),e(k,rs),e(rs,pae),e(pae,Oto),e(rs,Vto),e(rs,cP),e(cP,Xto),e(rs,zto),e(rs,fP),e(fP,Wto),e(rs,Qto),e(k,Hto),e(k,ts),e(ts,_ae),e(_ae,Uto),e(ts,Jto),e(ts,mP),e(mP,Yto),e(ts,Kto),e(ts,gP),e(gP,Zto),e(ts,eao),e(k,oao),e(k,as),e(as,uae),e(uae,rao),e(as,tao),e(as,hP),e(hP,aao),e(as,nao),e(as,pP),e(pP,sao),e(as,lao),e(k,iao),e(k,ns),e(ns,bae),e(bae,dao),e(ns,cao),e(ns,_P),e(_P,fao),e(ns,mao),e(ns,uP),e(uP,gao),e(ns,hao),e(k,pao),e(k,ss),e(ss,vae),e(vae,_ao),e(ss,uao),e(ss,bP),e(bP,bao),e(ss,vao),e(ss,vP),e(vP,Fao),e(ss,Tao),e(k,Mao),e(k,ls),e(ls,Fae),e(Fae,Eao),e(ls,Cao),e(ls,FP),e(FP,wao),e(ls,Aao),e(ls,TP),e(TP,yao),e(ls,Lao),e(k,xao),e(k,qg),e(qg,Tae),e(Tae,$ao),e(qg,kao),e(qg,MP),e(MP,Sao),e(qg,Rao),e(k,Pao),e(k,is),e(is,Mae),e(Mae,Bao),e(is,Iao),e(is,EP),e(EP,Nao),e(is,qao),e(is,CP),e(CP,jao),e(is,Dao),e(k,Gao),e(k,jg),e(jg,Eae),e(Eae,Oao),e(jg,Vao),e(jg,wP),e(wP,Xao),e(jg,zao),e(k,Wao),e(k,Dg),e(Dg,Cae),e(Cae,Qao),e(Dg,Hao),e(Dg,AP),e(AP,Uao),e(Dg,Jao),e(k,Yao),e(k,ds),e(ds,wae),e(wae,Kao),e(ds,Zao),e(ds,yP),e(yP,eno),e(ds,ono),e(ds,LP),e(LP,rno),e(ds,tno),e(k,ano),e(k,cs),e(cs,Aae),e(Aae,nno),e(cs,sno),e(cs,xP),e(xP,lno),e(cs,ino),e(cs,$P),e($P,dno),e(cs,cno),e(k,fno),e(k,fs),e(fs,yae),e(yae,mno),e(fs,gno),e(fs,kP),e(kP,hno),e(fs,pno),e(fs,SP),e(SP,_no),e(fs,uno),e(k,bno),e(k,Gg),e(Gg,Lae),e(Lae,vno),e(Gg,Fno),e(Gg,RP),e(RP,Tno),e(Gg,Mno),e(k,Eno),e(k,ms),e(ms,xae),e(xae,Cno),e(ms,wno),e(ms,PP),e(PP,Ano),e(ms,yno),e(ms,BP),e(BP,Lno),e(ms,xno),e(k,$no),e(k,gs),e(gs,$ae),e($ae,kno),e(gs,Sno),e(gs,IP),e(IP,Rno),e(gs,Pno),e(gs,NP),e(NP,Bno),e(gs,Ino),e(k,Nno),e(k,hs),e(hs,kae),e(kae,qno),e(hs,jno),e(hs,qP),e(qP,Dno),e(hs,Gno),e(hs,jP),e(jP,Ono),e(hs,Vno),e(k,Xno),e(k,ps),e(ps,Sae),e(Sae,zno),e(ps,Wno),e(ps,DP),e(DP,Qno),e(ps,Hno),e(ps,GP),e(GP,Uno),e(ps,Jno),e(k,Yno),e(k,_s),e(_s,Rae),e(Rae,Kno),e(_s,Zno),e(_s,OP),e(OP,eso),e(_s,oso),e(_s,VP),e(VP,rso),e(_s,tso),e(k,aso),e(k,Og),e(Og,Pae),e(Pae,nso),e(Og,sso),e(Og,XP),e(XP,lso),e(Og,iso),e(k,dso),e(k,us),e(us,Bae),e(Bae,cso),e(us,fso),e(us,zP),e(zP,mso),e(us,gso),e(us,WP),e(WP,hso),e(us,pso),e(k,_so),e(k,Vg),e(Vg,Iae),e(Iae,uso),e(Vg,bso),e(Vg,QP),e(QP,vso),e(Vg,Fso),e(k,Tso),e(k,Xg),e(Xg,Nae),e(Nae,Mso),e(Xg,Eso),e(Xg,HP),e(HP,Cso),e(Xg,wso),e(k,Aso),e(k,zg),e(zg,qae),e(qae,yso),e(zg,Lso),e(zg,UP),e(UP,xso),e(zg,$so),e(k,kso),e(k,Wg),e(Wg,jae),e(jae,Sso),e(Wg,Rso),e(Wg,JP),e(JP,Pso),e(Wg,Bso),e(k,Iso),e(k,bs),e(bs,Dae),e(Dae,Nso),e(bs,qso),e(bs,YP),e(YP,jso),e(bs,Dso),e(bs,KP),e(KP,Gso),e(bs,Oso),e(k,Vso),e(k,Qg),e(Qg,Gae),e(Gae,Xso),e(Qg,zso),e(Qg,ZP),e(ZP,Wso),e(Qg,Qso),e(k,Hso),e(k,vs),e(vs,Oae),e(Oae,Uso),e(vs,Jso),e(vs,eB),e(eB,Yso),e(vs,Kso),e(vs,oB),e(oB,Zso),e(vs,elo),e(k,olo),e(k,Fs),e(Fs,Vae),e(Vae,rlo),e(Fs,tlo),e(Fs,rB),e(rB,alo),e(Fs,nlo),e(Fs,tB),e(tB,slo),e(Fs,llo),e(k,ilo),e(k,Ts),e(Ts,Xae),e(Xae,dlo),e(Ts,clo),e(Ts,aB),e(aB,flo),e(Ts,mlo),e(Ts,nB),e(nB,glo),e(Ts,hlo),e(k,plo),e(k,Ms),e(Ms,zae),e(zae,_lo),e(Ms,ulo),e(Ms,sB),e(sB,blo),e(Ms,vlo),e(Ms,lB),e(lB,Flo),e(Ms,Tlo),e(k,Mlo),e(k,Es),e(Es,Wae),e(Wae,Elo),e(Es,Clo),e(Es,iB),e(iB,wlo),e(Es,Alo),e(Es,dB),e(dB,ylo),e(Es,Llo),e(k,xlo),e(k,Cs),e(Cs,Qae),e(Qae,$lo),e(Cs,klo),e(Cs,cB),e(cB,Slo),e(Cs,Rlo),e(Cs,fB),e(fB,Plo),e(Cs,Blo),e(k,Ilo),e(k,Hg),e(Hg,Hae),e(Hae,Nlo),e(Hg,qlo),e(Hg,mB),e(mB,jlo),e(Hg,Dlo),e(k,Glo),e(k,Ug),e(Ug,Uae),e(Uae,Olo),e(Ug,Vlo),e(Ug,gB),e(gB,Xlo),e(Ug,zlo),e(k,Wlo),e(k,ws),e(ws,Jae),e(Jae,Qlo),e(ws,Hlo),e(ws,hB),e(hB,Ulo),e(ws,Jlo),e(ws,pB),e(pB,Ylo),e(ws,Klo),e(k,Zlo),e(k,As),e(As,Yae),e(Yae,eio),e(As,oio),e(As,_B),e(_B,rio),e(As,tio),e(As,uB),e(uB,aio),e(As,nio),e(k,sio),e(k,ys),e(ys,Kae),e(Kae,lio),e(ys,iio),e(ys,bB),e(bB,dio),e(ys,cio),e(ys,vB),e(vB,fio),e(ys,mio),e(k,gio),e(k,Jg),e(Jg,Zae),e(Zae,hio),e(Jg,pio),e(Jg,FB),e(FB,_io),e(Jg,uio),e(k,bio),e(k,Yg),e(Yg,ene),e(ene,vio),e(Yg,Fio),e(Yg,TB),e(TB,Tio),e(Yg,Mio),e(k,Eio),e(k,Kg),e(Kg,one),e(one,Cio),e(Kg,wio),e(Kg,MB),e(MB,Aio),e(Kg,yio),e(k,Lio),e(k,Ls),e(Ls,rne),e(rne,xio),e(Ls,$io),e(Ls,EB),e(EB,kio),e(Ls,Sio),e(Ls,CB),e(CB,Rio),e(Ls,Pio),e(k,Bio),e(k,Zg),e(Zg,tne),e(tne,Iio),e(Zg,Nio),e(Zg,wB),e(wB,qio),e(Zg,jio),e(k,Dio),e(k,eh),e(eh,ane),e(ane,Gio),e(eh,Oio),e(eh,AB),e(AB,Vio),e(eh,Xio),e(k,zio),e(k,oh),e(oh,nne),e(nne,Wio),e(oh,Qio),e(oh,yB),e(yB,Hio),e(oh,Uio),e(k,Jio),e(k,xs),e(xs,sne),e(sne,Yio),e(xs,Kio),e(xs,LB),e(LB,Zio),e(xs,edo),e(xs,xB),e(xB,odo),e(xs,rdo),e(k,tdo),e(k,rh),e(rh,lne),e(lne,ado),e(rh,ndo),e(rh,$B),e($B,sdo),e(rh,ldo),e(k,ido),e(k,th),e(th,ine),e(ine,ddo),e(th,cdo),e(th,kB),e(kB,fdo),e(th,mdo),e(k,gdo),e(k,$s),e($s,dne),e(dne,hdo),e($s,pdo),e($s,SB),e(SB,_do),e($s,udo),e($s,RB),e(RB,bdo),e($s,vdo),e(k,Fdo),e(k,ks),e(ks,cne),e(cne,Tdo),e(ks,Mdo),e(ks,PB),e(PB,Edo),e(ks,Cdo),e(ks,BB),e(BB,wdo),e(ks,Ado),e(k,ydo),e(k,Ss),e(Ss,fne),e(fne,Ldo),e(Ss,xdo),e(Ss,IB),e(IB,$do),e(Ss,kdo),e(Ss,NB),e(NB,Sdo),e(Ss,Rdo),e(k,Pdo),e(k,Rs),e(Rs,mne),e(mne,Bdo),e(Rs,Ido),e(Rs,qB),e(qB,Ndo),e(Rs,qdo),e(Rs,jB),e(jB,jdo),e(Rs,Ddo),e(Cr,Gdo),M(ah,Cr,null),e(wo,Odo),e(wo,nh),M(X6,nh,null),e(nh,Vdo),e(nh,gne),e(gne,Xdo),b(f,Eqe,u),b(f,Mi,u),e(Mi,sh),e(sh,hne),M(z6,hne,null),e(Mi,zdo),e(Mi,pne),e(pne,Wdo),b(f,Cqe,u),b(f,Ao,u),M(W6,Ao,null),e(Ao,Qdo),e(Ao,Q6),e(Q6,Hdo),e(Q6,DB),e(DB,Udo),e(Q6,Jdo),e(Ao,Ydo),e(Ao,H6),e(H6,Kdo),e(H6,_ne),e(_ne,Zdo),e(H6,eco),e(Ao,oco),e(Ao,He),M(U6,He,null),e(He,rco),e(He,une),e(une,tco),e(He,aco),e(He,ya),e(ya,nco),e(ya,bne),e(bne,sco),e(ya,lco),e(ya,vne),e(vne,ico),e(ya,dco),e(ya,Fne),e(Fne,cco),e(ya,fco),e(He,mco),e(He,Y),e(Y,lh),e(lh,Tne),e(Tne,gco),e(lh,hco),e(lh,GB),e(GB,pco),e(lh,_co),e(Y,uco),e(Y,ih),e(ih,Mne),e(Mne,bco),e(ih,vco),e(ih,OB),e(OB,Fco),e(ih,Tco),e(Y,Mco),e(Y,dh),e(dh,Ene),e(Ene,Eco),e(dh,Cco),e(dh,VB),e(VB,wco),e(dh,Aco),e(Y,yco),e(Y,ch),e(ch,Cne),e(Cne,Lco),e(ch,xco),e(ch,XB),e(XB,$co),e(ch,kco),e(Y,Sco),e(Y,fh),e(fh,wne),e(wne,Rco),e(fh,Pco),e(fh,zB),e(zB,Bco),e(fh,Ico),e(Y,Nco),e(Y,mh),e(mh,Ane),e(Ane,qco),e(mh,jco),e(mh,WB),e(WB,Dco),e(mh,Gco),e(Y,Oco),e(Y,gh),e(gh,yne),e(yne,Vco),e(gh,Xco),e(gh,QB),e(QB,zco),e(gh,Wco),e(Y,Qco),e(Y,hh),e(hh,Lne),e(Lne,Hco),e(hh,Uco),e(hh,HB),e(HB,Jco),e(hh,Yco),e(Y,Kco),e(Y,ph),e(ph,xne),e(xne,Zco),e(ph,efo),e(ph,UB),e(UB,ofo),e(ph,rfo),e(Y,tfo),e(Y,_h),e(_h,$ne),e($ne,afo),e(_h,nfo),e(_h,JB),e(JB,sfo),e(_h,lfo),e(Y,ifo),e(Y,uh),e(uh,kne),e(kne,dfo),e(uh,cfo),e(uh,YB),e(YB,ffo),e(uh,mfo),e(Y,gfo),e(Y,bh),e(bh,Sne),e(Sne,hfo),e(bh,pfo),e(bh,KB),e(KB,_fo),e(bh,ufo),e(Y,bfo),e(Y,vh),e(vh,Rne),e(Rne,vfo),e(vh,Ffo),e(vh,ZB),e(ZB,Tfo),e(vh,Mfo),e(Y,Efo),e(Y,Fh),e(Fh,Pne),e(Pne,Cfo),e(Fh,wfo),e(Fh,eI),e(eI,Afo),e(Fh,yfo),e(Y,Lfo),e(Y,Th),e(Th,Bne),e(Bne,xfo),e(Th,$fo),e(Th,oI),e(oI,kfo),e(Th,Sfo),e(Y,Rfo),e(Y,Mh),e(Mh,Ine),e(Ine,Pfo),e(Mh,Bfo),e(Mh,rI),e(rI,Ifo),e(Mh,Nfo),e(Y,qfo),e(Y,Eh),e(Eh,Nne),e(Nne,jfo),e(Eh,Dfo),e(Eh,tI),e(tI,Gfo),e(Eh,Ofo),e(Y,Vfo),e(Y,Ch),e(Ch,qne),e(qne,Xfo),e(Ch,zfo),e(Ch,aI),e(aI,Wfo),e(Ch,Qfo),e(Y,Hfo),e(Y,wh),e(wh,jne),e(jne,Ufo),e(wh,Jfo),e(wh,nI),e(nI,Yfo),e(wh,Kfo),e(Y,Zfo),e(Y,Ah),e(Ah,Dne),e(Dne,emo),e(Ah,omo),e(Ah,sI),e(sI,rmo),e(Ah,tmo),e(Y,amo),e(Y,yh),e(yh,Gne),e(Gne,nmo),e(yh,smo),e(yh,lI),e(lI,lmo),e(yh,imo),e(Y,dmo),e(Y,Lh),e(Lh,One),e(One,cmo),e(Lh,fmo),e(Lh,iI),e(iI,mmo),e(Lh,gmo),e(Y,hmo),e(Y,xh),e(xh,Vne),e(Vne,pmo),e(xh,_mo),e(xh,dI),e(dI,umo),e(xh,bmo),e(Y,vmo),e(Y,$h),e($h,Xne),e(Xne,Fmo),e($h,Tmo),e($h,cI),e(cI,Mmo),e($h,Emo),e(Y,Cmo),e(Y,kh),e(kh,zne),e(zne,wmo),e(kh,Amo),e(kh,fI),e(fI,ymo),e(kh,Lmo),e(Y,xmo),e(Y,Sh),e(Sh,Wne),e(Wne,$mo),e(Sh,kmo),e(Sh,mI),e(mI,Smo),e(Sh,Rmo),e(Y,Pmo),e(Y,Rh),e(Rh,Qne),e(Qne,Bmo),e(Rh,Imo),e(Rh,gI),e(gI,Nmo),e(Rh,qmo),e(Y,jmo),e(Y,Ph),e(Ph,Hne),e(Hne,Dmo),e(Ph,Gmo),e(Ph,hI),e(hI,Omo),e(Ph,Vmo),e(Y,Xmo),e(Y,Bh),e(Bh,Une),e(Une,zmo),e(Bh,Wmo),e(Bh,pI),e(pI,Qmo),e(Bh,Hmo),e(He,Umo),M(Ih,He,null),e(He,Jmo),M(Nh,He,null),e(Ao,Ymo),e(Ao,qh),M(J6,qh,null),e(qh,Kmo),e(qh,Jne),e(Jne,Zmo),b(f,wqe,u),b(f,Ei,u),e(Ei,jh),e(jh,Yne),M(Y6,Yne,null),e(Ei,ego),e(Ei,Kne),e(Kne,ogo),b(f,Aqe,u),b(f,yo,u),M(K6,yo,null),e(yo,rgo),e(yo,Z6),e(Z6,tgo),e(Z6,_I),e(_I,ago),e(Z6,ngo),e(yo,sgo),e(yo,eA),e(eA,lgo),e(eA,Zne),e(Zne,igo),e(eA,dgo),e(yo,cgo),e(yo,Ue),M(oA,Ue,null),e(Ue,fgo),e(Ue,ese),e(ese,mgo),e(Ue,ggo),e(Ue,Ci),e(Ci,hgo),e(Ci,ose),e(ose,pgo),e(Ci,_go),e(Ci,rse),e(rse,ugo),e(Ci,bgo),e(Ue,vgo),e(Ue,he),e(he,Dh),e(Dh,tse),e(tse,Fgo),e(Dh,Tgo),e(Dh,uI),e(uI,Mgo),e(Dh,Ego),e(he,Cgo),e(he,Gh),e(Gh,ase),e(ase,wgo),e(Gh,Ago),e(Gh,nse),e(nse,ygo),e(Gh,Lgo),e(he,xgo),e(he,Oh),e(Oh,sse),e(sse,$go),e(Oh,kgo),e(Oh,bI),e(bI,Sgo),e(Oh,Rgo),e(he,Pgo),e(he,Vh),e(Vh,lse),e(lse,Bgo),e(Vh,Igo),e(Vh,vI),e(vI,Ngo),e(Vh,qgo),e(he,jgo),e(he,Xh),e(Xh,ise),e(ise,Dgo),e(Xh,Ggo),e(Xh,FI),e(FI,Ogo),e(Xh,Vgo),e(he,Xgo),e(he,zh),e(zh,dse),e(dse,zgo),e(zh,Wgo),e(zh,TI),e(TI,Qgo),e(zh,Hgo),e(he,Ugo),e(he,Wh),e(Wh,cse),e(cse,Jgo),e(Wh,Ygo),e(Wh,MI),e(MI,Kgo),e(Wh,Zgo),e(he,eho),e(he,Qh),e(Qh,fse),e(fse,oho),e(Qh,rho),e(Qh,EI),e(EI,tho),e(Qh,aho),e(he,nho),e(he,Hh),e(Hh,mse),e(mse,sho),e(Hh,lho),e(Hh,CI),e(CI,iho),e(Hh,dho),e(he,cho),e(he,Uh),e(Uh,gse),e(gse,fho),e(Uh,mho),e(Uh,wI),e(wI,gho),e(Uh,hho),e(he,pho),e(he,Jh),e(Jh,hse),e(hse,_ho),e(Jh,uho),e(Jh,AI),e(AI,bho),e(Jh,vho),e(he,Fho),e(he,Yh),e(Yh,pse),e(pse,Tho),e(Yh,Mho),e(Yh,yI),e(yI,Eho),e(Yh,Cho),e(he,who),e(he,Kh),e(Kh,_se),e(_se,Aho),e(Kh,yho),e(Kh,LI),e(LI,Lho),e(Kh,xho),e(he,$ho),e(he,Zh),e(Zh,use),e(use,kho),e(Zh,Sho),e(Zh,xI),e(xI,Rho),e(Zh,Pho),e(he,Bho),e(he,ep),e(ep,bse),e(bse,Iho),e(ep,Nho),e(ep,$I),e($I,qho),e(ep,jho),e(he,Dho),e(he,op),e(op,vse),e(vse,Gho),e(op,Oho),e(op,kI),e(kI,Vho),e(op,Xho),e(he,zho),e(he,rp),e(rp,Fse),e(Fse,Who),e(rp,Qho),e(rp,SI),e(SI,Hho),e(rp,Uho),e(Ue,Jho),M(tp,Ue,null),e(Ue,Yho),M(ap,Ue,null),e(yo,Kho),e(yo,np),M(rA,np,null),e(np,Zho),e(np,Tse),e(Tse,epo),b(f,yqe,u),b(f,wi,u),e(wi,sp),e(sp,Mse),M(tA,Mse,null),e(wi,opo),e(wi,Ese),e(Ese,rpo),b(f,Lqe,u),b(f,Lo,u),M(aA,Lo,null),e(Lo,tpo),e(Lo,Ai),e(Ai,apo),e(Ai,RI),e(RI,npo),e(Ai,spo),e(Ai,PI),e(PI,lpo),e(Ai,ipo),e(Lo,dpo),e(Lo,nA),e(nA,cpo),e(nA,Cse),e(Cse,fpo),e(nA,mpo),e(Lo,gpo),e(Lo,tt),M(sA,tt,null),e(tt,hpo),e(tt,wse),e(wse,ppo),e(tt,_po),e(tt,yi),e(yi,upo),e(yi,Ase),e(Ase,bpo),e(yi,vpo),e(yi,BI),e(BI,Fpo),e(yi,Tpo),e(tt,Mpo),M(lp,tt,null),e(Lo,Epo),e(Lo,Je),M(lA,Je,null),e(Je,Cpo),e(Je,yse),e(yse,wpo),e(Je,Apo),e(Je,La),e(La,ypo),e(La,Lse),e(Lse,Lpo),e(La,xpo),e(La,xse),e(xse,$po),e(La,kpo),e(La,$se),e($se,Spo),e(La,Rpo),e(Je,Ppo),e(Je,x),e(x,ip),e(ip,kse),e(kse,Bpo),e(ip,Ipo),e(ip,II),e(II,Npo),e(ip,qpo),e(x,jpo),e(x,dp),e(dp,Sse),e(Sse,Dpo),e(dp,Gpo),e(dp,NI),e(NI,Opo),e(dp,Vpo),e(x,Xpo),e(x,cp),e(cp,Rse),e(Rse,zpo),e(cp,Wpo),e(cp,qI),e(qI,Qpo),e(cp,Hpo),e(x,Upo),e(x,fp),e(fp,Pse),e(Pse,Jpo),e(fp,Ypo),e(fp,jI),e(jI,Kpo),e(fp,Zpo),e(x,e_o),e(x,mp),e(mp,Bse),e(Bse,o_o),e(mp,r_o),e(mp,DI),e(DI,t_o),e(mp,a_o),e(x,n_o),e(x,gp),e(gp,Ise),e(Ise,s_o),e(gp,l_o),e(gp,GI),e(GI,i_o),e(gp,d_o),e(x,c_o),e(x,hp),e(hp,Nse),e(Nse,f_o),e(hp,m_o),e(hp,OI),e(OI,g_o),e(hp,h_o),e(x,p_o),e(x,pp),e(pp,qse),e(qse,__o),e(pp,u_o),e(pp,VI),e(VI,b_o),e(pp,v_o),e(x,F_o),e(x,_p),e(_p,jse),e(jse,T_o),e(_p,M_o),e(_p,XI),e(XI,E_o),e(_p,C_o),e(x,w_o),e(x,up),e(up,Dse),e(Dse,A_o),e(up,y_o),e(up,zI),e(zI,L_o),e(up,x_o),e(x,$_o),e(x,bp),e(bp,Gse),e(Gse,k_o),e(bp,S_o),e(bp,WI),e(WI,R_o),e(bp,P_o),e(x,B_o),e(x,vp),e(vp,Ose),e(Ose,I_o),e(vp,N_o),e(vp,QI),e(QI,q_o),e(vp,j_o),e(x,D_o),e(x,Fp),e(Fp,Vse),e(Vse,G_o),e(Fp,O_o),e(Fp,HI),e(HI,V_o),e(Fp,X_o),e(x,z_o),e(x,Tp),e(Tp,Xse),e(Xse,W_o),e(Tp,Q_o),e(Tp,UI),e(UI,H_o),e(Tp,U_o),e(x,J_o),e(x,Mp),e(Mp,zse),e(zse,Y_o),e(Mp,K_o),e(Mp,JI),e(JI,Z_o),e(Mp,euo),e(x,ouo),e(x,Ep),e(Ep,Wse),e(Wse,ruo),e(Ep,tuo),e(Ep,YI),e(YI,auo),e(Ep,nuo),e(x,suo),e(x,Cp),e(Cp,Qse),e(Qse,luo),e(Cp,iuo),e(Cp,KI),e(KI,duo),e(Cp,cuo),e(x,fuo),e(x,wp),e(wp,Hse),e(Hse,muo),e(wp,guo),e(wp,ZI),e(ZI,huo),e(wp,puo),e(x,_uo),e(x,Ap),e(Ap,Use),e(Use,uuo),e(Ap,buo),e(Ap,eN),e(eN,vuo),e(Ap,Fuo),e(x,Tuo),e(x,yp),e(yp,Jse),e(Jse,Muo),e(yp,Euo),e(yp,oN),e(oN,Cuo),e(yp,wuo),e(x,Auo),e(x,Lp),e(Lp,Yse),e(Yse,yuo),e(Lp,Luo),e(Lp,rN),e(rN,xuo),e(Lp,$uo),e(x,kuo),e(x,xp),e(xp,Kse),e(Kse,Suo),e(xp,Ruo),e(xp,tN),e(tN,Puo),e(xp,Buo),e(x,Iuo),e(x,$p),e($p,Zse),e(Zse,Nuo),e($p,quo),e($p,aN),e(aN,juo),e($p,Duo),e(x,Guo),e(x,kp),e(kp,ele),e(ele,Ouo),e(kp,Vuo),e(kp,nN),e(nN,Xuo),e(kp,zuo),e(x,Wuo),e(x,Sp),e(Sp,ole),e(ole,Quo),e(Sp,Huo),e(Sp,sN),e(sN,Uuo),e(Sp,Juo),e(x,Yuo),e(x,Rp),e(Rp,rle),e(rle,Kuo),e(Rp,Zuo),e(Rp,lN),e(lN,e1o),e(Rp,o1o),e(x,r1o),e(x,Pp),e(Pp,tle),e(tle,t1o),e(Pp,a1o),e(Pp,iN),e(iN,n1o),e(Pp,s1o),e(x,l1o),e(x,Bp),e(Bp,ale),e(ale,i1o),e(Bp,d1o),e(Bp,dN),e(dN,c1o),e(Bp,f1o),e(x,m1o),e(x,Ip),e(Ip,nle),e(nle,g1o),e(Ip,h1o),e(Ip,cN),e(cN,p1o),e(Ip,_1o),e(x,u1o),e(x,Np),e(Np,sle),e(sle,b1o),e(Np,v1o),e(Np,fN),e(fN,F1o),e(Np,T1o),e(x,M1o),e(x,qp),e(qp,lle),e(lle,E1o),e(qp,C1o),e(qp,mN),e(mN,w1o),e(qp,A1o),e(x,y1o),e(x,jp),e(jp,ile),e(ile,L1o),e(jp,x1o),e(jp,gN),e(gN,$1o),e(jp,k1o),e(x,S1o),e(x,Ps),e(Ps,dle),e(dle,R1o),e(Ps,P1o),e(Ps,hN),e(hN,B1o),e(Ps,I1o),e(Ps,pN),e(pN,N1o),e(Ps,q1o),e(x,j1o),e(x,Dp),e(Dp,cle),e(cle,D1o),e(Dp,G1o),e(Dp,_N),e(_N,O1o),e(Dp,V1o),e(x,X1o),e(x,Gp),e(Gp,fle),e(fle,z1o),e(Gp,W1o),e(Gp,uN),e(uN,Q1o),e(Gp,H1o),e(x,U1o),e(x,Op),e(Op,mle),e(mle,J1o),e(Op,Y1o),e(Op,bN),e(bN,K1o),e(Op,Z1o),e(x,ebo),e(x,Vp),e(Vp,gle),e(gle,obo),e(Vp,rbo),e(Vp,vN),e(vN,tbo),e(Vp,abo),e(x,nbo),e(x,Xp),e(Xp,hle),e(hle,sbo),e(Xp,lbo),e(Xp,FN),e(FN,ibo),e(Xp,dbo),e(x,cbo),e(x,zp),e(zp,ple),e(ple,fbo),e(zp,mbo),e(zp,TN),e(TN,gbo),e(zp,hbo),e(x,pbo),e(x,Wp),e(Wp,_le),e(_le,_bo),e(Wp,ubo),e(Wp,MN),e(MN,bbo),e(Wp,vbo),e(x,Fbo),e(x,Qp),e(Qp,ule),e(ule,Tbo),e(Qp,Mbo),e(Qp,EN),e(EN,Ebo),e(Qp,Cbo),e(x,wbo),e(x,Hp),e(Hp,ble),e(ble,Abo),e(Hp,ybo),e(Hp,CN),e(CN,Lbo),e(Hp,xbo),e(x,$bo),e(x,Up),e(Up,vle),e(vle,kbo),e(Up,Sbo),e(Up,wN),e(wN,Rbo),e(Up,Pbo),e(x,Bbo),e(x,Jp),e(Jp,Fle),e(Fle,Ibo),e(Jp,Nbo),e(Jp,AN),e(AN,qbo),e(Jp,jbo),e(x,Dbo),e(x,Yp),e(Yp,Tle),e(Tle,Gbo),e(Yp,Obo),e(Yp,yN),e(yN,Vbo),e(Yp,Xbo),e(x,zbo),e(x,Kp),e(Kp,Mle),e(Mle,Wbo),e(Kp,Qbo),e(Kp,LN),e(LN,Hbo),e(Kp,Ubo),e(x,Jbo),e(x,Zp),e(Zp,Ele),e(Ele,Ybo),e(Zp,Kbo),e(Zp,xN),e(xN,Zbo),e(Zp,e2o),e(x,o2o),e(x,e_),e(e_,Cle),e(Cle,r2o),e(e_,t2o),e(e_,$N),e($N,a2o),e(e_,n2o),e(x,s2o),e(x,o_),e(o_,wle),e(wle,l2o),e(o_,i2o),e(o_,kN),e(kN,d2o),e(o_,c2o),e(x,f2o),e(x,r_),e(r_,Ale),e(Ale,m2o),e(r_,g2o),e(r_,SN),e(SN,h2o),e(r_,p2o),e(x,_2o),e(x,t_),e(t_,yle),e(yle,u2o),e(t_,b2o),e(t_,RN),e(RN,v2o),e(t_,F2o),e(x,T2o),e(x,a_),e(a_,Lle),e(Lle,M2o),e(a_,E2o),e(a_,PN),e(PN,C2o),e(a_,w2o),e(x,A2o),e(x,n_),e(n_,xle),e(xle,y2o),e(n_,L2o),e(n_,BN),e(BN,x2o),e(n_,$2o),e(x,k2o),e(x,s_),e(s_,$le),e($le,S2o),e(s_,R2o),e(s_,IN),e(IN,P2o),e(s_,B2o),e(x,I2o),e(x,l_),e(l_,kle),e(kle,N2o),e(l_,q2o),e(l_,NN),e(NN,j2o),e(l_,D2o),e(x,G2o),e(x,i_),e(i_,Sle),e(Sle,O2o),e(i_,V2o),e(i_,qN),e(qN,X2o),e(i_,z2o),e(x,W2o),e(x,d_),e(d_,Rle),e(Rle,Q2o),e(d_,H2o),e(d_,jN),e(jN,U2o),e(d_,J2o),e(x,Y2o),e(x,c_),e(c_,Ple),e(Ple,K2o),e(c_,Z2o),e(c_,DN),e(DN,e4o),e(c_,o4o),e(x,r4o),e(x,f_),e(f_,Ble),e(Ble,t4o),e(f_,a4o),e(f_,GN),e(GN,n4o),e(f_,s4o),e(x,l4o),e(x,m_),e(m_,Ile),e(Ile,i4o),e(m_,d4o),e(m_,ON),e(ON,c4o),e(m_,f4o),e(x,m4o),e(x,g_),e(g_,Nle),e(Nle,g4o),e(g_,h4o),e(g_,VN),e(VN,p4o),e(g_,_4o),e(x,u4o),e(x,h_),e(h_,qle),e(qle,b4o),e(h_,v4o),e(h_,XN),e(XN,F4o),e(h_,T4o),e(x,M4o),e(x,p_),e(p_,jle),e(jle,E4o),e(p_,C4o),e(p_,zN),e(zN,w4o),e(p_,A4o),e(x,y4o),e(x,__),e(__,Dle),e(Dle,L4o),e(__,x4o),e(__,WN),e(WN,$4o),e(__,k4o),e(x,S4o),e(x,u_),e(u_,Gle),e(Gle,R4o),e(u_,P4o),e(u_,QN),e(QN,B4o),e(u_,I4o),e(x,N4o),e(x,b_),e(b_,Ole),e(Ole,q4o),e(b_,j4o),e(b_,HN),e(HN,D4o),e(b_,G4o),e(x,O4o),e(x,v_),e(v_,Vle),e(Vle,V4o),e(v_,X4o),e(v_,UN),e(UN,z4o),e(v_,W4o),e(x,Q4o),e(x,F_),e(F_,Xle),e(Xle,H4o),e(F_,U4o),e(F_,JN),e(JN,J4o),e(F_,Y4o),e(x,K4o),e(x,T_),e(T_,zle),e(zle,Z4o),e(T_,e5o),e(T_,YN),e(YN,o5o),e(T_,r5o),e(x,t5o),e(x,M_),e(M_,Wle),e(Wle,a5o),e(M_,n5o),e(M_,KN),e(KN,s5o),e(M_,l5o),e(x,i5o),e(x,E_),e(E_,Qle),e(Qle,d5o),e(E_,c5o),e(E_,ZN),e(ZN,f5o),e(E_,m5o),e(x,g5o),e(x,C_),e(C_,Hle),e(Hle,h5o),e(C_,p5o),e(C_,eq),e(eq,_5o),e(C_,u5o),e(x,b5o),e(x,w_),e(w_,Ule),e(Ule,v5o),e(w_,F5o),e(w_,oq),e(oq,T5o),e(w_,M5o),e(x,E5o),e(x,A_),e(A_,Jle),e(Jle,C5o),e(A_,w5o),e(A_,rq),e(rq,A5o),e(A_,y5o),e(x,L5o),e(x,y_),e(y_,Yle),e(Yle,x5o),e(y_,$5o),e(y_,tq),e(tq,k5o),e(y_,S5o),e(x,R5o),e(x,L_),e(L_,Kle),e(Kle,P5o),e(L_,B5o),e(L_,aq),e(aq,I5o),e(L_,N5o),e(x,q5o),e(x,x_),e(x_,Zle),e(Zle,j5o),e(x_,D5o),e(x_,nq),e(nq,G5o),e(x_,O5o),e(x,V5o),e(x,$_),e($_,eie),e(eie,X5o),e($_,z5o),e($_,sq),e(sq,W5o),e($_,Q5o),e(x,H5o),e(x,k_),e(k_,oie),e(oie,U5o),e(k_,J5o),e(k_,lq),e(lq,Y5o),e(k_,K5o),e(x,Z5o),e(x,S_),e(S_,rie),e(rie,evo),e(S_,ovo),e(S_,iq),e(iq,rvo),e(S_,tvo),e(x,avo),e(x,R_),e(R_,tie),e(tie,nvo),e(R_,svo),e(R_,dq),e(dq,lvo),e(R_,ivo),e(x,dvo),e(x,P_),e(P_,aie),e(aie,cvo),e(P_,fvo),e(P_,cq),e(cq,mvo),e(P_,gvo),e(x,hvo),e(x,B_),e(B_,nie),e(nie,pvo),e(B_,_vo),e(B_,fq),e(fq,uvo),e(B_,bvo),e(x,vvo),e(x,I_),e(I_,sie),e(sie,Fvo),e(I_,Tvo),e(I_,mq),e(mq,Mvo),e(I_,Evo),e(x,Cvo),e(x,N_),e(N_,lie),e(lie,wvo),e(N_,Avo),e(N_,gq),e(gq,yvo),e(N_,Lvo),e(x,xvo),e(x,q_),e(q_,iie),e(iie,$vo),e(q_,kvo),e(q_,hq),e(hq,Svo),e(q_,Rvo),e(x,Pvo),e(x,j_),e(j_,die),e(die,Bvo),e(j_,Ivo),e(j_,pq),e(pq,Nvo),e(j_,qvo),e(x,jvo),e(x,D_),e(D_,cie),e(cie,Dvo),e(D_,Gvo),e(D_,_q),e(_q,Ovo),e(D_,Vvo),e(x,Xvo),e(x,G_),e(G_,fie),e(fie,zvo),e(G_,Wvo),e(G_,uq),e(uq,Qvo),e(G_,Hvo),e(x,Uvo),e(x,O_),e(O_,mie),e(mie,Jvo),e(O_,Yvo),e(O_,bq),e(bq,Kvo),e(O_,Zvo),e(x,eFo),e(x,V_),e(V_,gie),e(gie,oFo),e(V_,rFo),e(V_,vq),e(vq,tFo),e(V_,aFo),e(x,nFo),e(x,X_),e(X_,hie),e(hie,sFo),e(X_,lFo),e(X_,Fq),e(Fq,iFo),e(X_,dFo),e(x,cFo),e(x,z_),e(z_,pie),e(pie,fFo),e(z_,mFo),e(z_,Tq),e(Tq,gFo),e(z_,hFo),e(x,pFo),e(x,W_),e(W_,_ie),e(_ie,_Fo),e(W_,uFo),e(W_,Mq),e(Mq,bFo),e(W_,vFo),e(x,FFo),e(x,Q_),e(Q_,uie),e(uie,TFo),e(Q_,MFo),e(Q_,Eq),e(Eq,EFo),e(Q_,CFo),e(x,wFo),e(x,H_),e(H_,bie),e(bie,AFo),e(H_,yFo),e(H_,Cq),e(Cq,LFo),e(H_,xFo),e(x,$Fo),e(x,U_),e(U_,vie),e(vie,kFo),e(U_,SFo),e(U_,wq),e(wq,RFo),e(U_,PFo),e(x,BFo),e(x,J_),e(J_,Fie),e(Fie,IFo),e(J_,NFo),e(J_,Aq),e(Aq,qFo),e(J_,jFo),e(x,DFo),e(x,Y_),e(Y_,Tie),e(Tie,GFo),e(Y_,OFo),e(Y_,yq),e(yq,VFo),e(Y_,XFo),e(x,zFo),e(x,K_),e(K_,Mie),e(Mie,WFo),e(K_,QFo),e(K_,Lq),e(Lq,HFo),e(K_,UFo),e(x,JFo),e(x,Z_),e(Z_,Eie),e(Eie,YFo),e(Z_,KFo),e(Z_,xq),e(xq,ZFo),e(Z_,eTo),e(x,oTo),e(x,eu),e(eu,Cie),e(Cie,rTo),e(eu,tTo),e(eu,$q),e($q,aTo),e(eu,nTo),e(Je,sTo),e(Je,ou),e(ou,lTo),e(ou,wie),e(wie,iTo),e(ou,dTo),e(ou,Aie),e(Aie,cTo),e(Je,fTo),M(ru,Je,null),b(f,xqe,u),b(f,Li,u),e(Li,tu),e(tu,yie),M(iA,yie,null),e(Li,mTo),e(Li,Lie),e(Lie,gTo),b(f,$qe,u),b(f,xo,u),M(dA,xo,null),e(xo,hTo),e(xo,xi),e(xi,pTo),e(xi,kq),e(kq,_To),e(xi,uTo),e(xi,Sq),e(Sq,bTo),e(xi,vTo),e(xo,FTo),e(xo,cA),e(cA,TTo),e(cA,xie),e(xie,MTo),e(cA,ETo),e(xo,CTo),e(xo,at),M(fA,at,null),e(at,wTo),e(at,$ie),e($ie,ATo),e(at,yTo),e(at,$i),e($i,LTo),e($i,kie),e(kie,xTo),e($i,$To),e($i,Rq),e(Rq,kTo),e($i,STo),e(at,RTo),M(au,at,null),e(xo,PTo),e(xo,Ye),M(mA,Ye,null),e(Ye,BTo),e(Ye,Sie),e(Sie,ITo),e(Ye,NTo),e(Ye,xa),e(xa,qTo),e(xa,Rie),e(Rie,jTo),e(xa,DTo),e(xa,Pie),e(Pie,GTo),e(xa,OTo),e(xa,Bie),e(Bie,VTo),e(xa,XTo),e(Ye,zTo),e(Ye,G),e(G,nu),e(nu,Iie),e(Iie,WTo),e(nu,QTo),e(nu,Pq),e(Pq,HTo),e(nu,UTo),e(G,JTo),e(G,su),e(su,Nie),e(Nie,YTo),e(su,KTo),e(su,Bq),e(Bq,ZTo),e(su,e7o),e(G,o7o),e(G,lu),e(lu,qie),e(qie,r7o),e(lu,t7o),e(lu,Iq),e(Iq,a7o),e(lu,n7o),e(G,s7o),e(G,iu),e(iu,jie),e(jie,l7o),e(iu,i7o),e(iu,Nq),e(Nq,d7o),e(iu,c7o),e(G,f7o),e(G,du),e(du,Die),e(Die,m7o),e(du,g7o),e(du,qq),e(qq,h7o),e(du,p7o),e(G,_7o),e(G,cu),e(cu,Gie),e(Gie,u7o),e(cu,b7o),e(cu,jq),e(jq,v7o),e(cu,F7o),e(G,T7o),e(G,fu),e(fu,Oie),e(Oie,M7o),e(fu,E7o),e(fu,Dq),e(Dq,C7o),e(fu,w7o),e(G,A7o),e(G,mu),e(mu,Vie),e(Vie,y7o),e(mu,L7o),e(mu,Gq),e(Gq,x7o),e(mu,$7o),e(G,k7o),e(G,gu),e(gu,Xie),e(Xie,S7o),e(gu,R7o),e(gu,Oq),e(Oq,P7o),e(gu,B7o),e(G,I7o),e(G,hu),e(hu,zie),e(zie,N7o),e(hu,q7o),e(hu,Vq),e(Vq,j7o),e(hu,D7o),e(G,G7o),e(G,pu),e(pu,Wie),e(Wie,O7o),e(pu,V7o),e(pu,Xq),e(Xq,X7o),e(pu,z7o),e(G,W7o),e(G,_u),e(_u,Qie),e(Qie,Q7o),e(_u,H7o),e(_u,zq),e(zq,U7o),e(_u,J7o),e(G,Y7o),e(G,uu),e(uu,Hie),e(Hie,K7o),e(uu,Z7o),e(uu,Wq),e(Wq,e9o),e(uu,o9o),e(G,r9o),e(G,bu),e(bu,Uie),e(Uie,t9o),e(bu,a9o),e(bu,Qq),e(Qq,n9o),e(bu,s9o),e(G,l9o),e(G,vu),e(vu,Jie),e(Jie,i9o),e(vu,d9o),e(vu,Hq),e(Hq,c9o),e(vu,f9o),e(G,m9o),e(G,Fu),e(Fu,Yie),e(Yie,g9o),e(Fu,h9o),e(Fu,Uq),e(Uq,p9o),e(Fu,_9o),e(G,u9o),e(G,Tu),e(Tu,Kie),e(Kie,b9o),e(Tu,v9o),e(Tu,Jq),e(Jq,F9o),e(Tu,T9o),e(G,M9o),e(G,Mu),e(Mu,Zie),e(Zie,E9o),e(Mu,C9o),e(Mu,Yq),e(Yq,w9o),e(Mu,A9o),e(G,y9o),e(G,Eu),e(Eu,ede),e(ede,L9o),e(Eu,x9o),e(Eu,Kq),e(Kq,$9o),e(Eu,k9o),e(G,S9o),e(G,Cu),e(Cu,ode),e(ode,R9o),e(Cu,P9o),e(Cu,Zq),e(Zq,B9o),e(Cu,I9o),e(G,N9o),e(G,wu),e(wu,rde),e(rde,q9o),e(wu,j9o),e(wu,ej),e(ej,D9o),e(wu,G9o),e(G,O9o),e(G,Au),e(Au,tde),e(tde,V9o),e(Au,X9o),e(Au,oj),e(oj,z9o),e(Au,W9o),e(G,Q9o),e(G,yu),e(yu,ade),e(ade,H9o),e(yu,U9o),e(yu,rj),e(rj,J9o),e(yu,Y9o),e(G,K9o),e(G,Lu),e(Lu,nde),e(nde,Z9o),e(Lu,eMo),e(Lu,tj),e(tj,oMo),e(Lu,rMo),e(G,tMo),e(G,xu),e(xu,sde),e(sde,aMo),e(xu,nMo),e(xu,aj),e(aj,sMo),e(xu,lMo),e(G,iMo),e(G,$u),e($u,lde),e(lde,dMo),e($u,cMo),e($u,nj),e(nj,fMo),e($u,mMo),e(G,gMo),e(G,ku),e(ku,ide),e(ide,hMo),e(ku,pMo),e(ku,sj),e(sj,_Mo),e(ku,uMo),e(G,bMo),e(G,Su),e(Su,dde),e(dde,vMo),e(Su,FMo),e(Su,lj),e(lj,TMo),e(Su,MMo),e(G,EMo),e(G,Ru),e(Ru,cde),e(cde,CMo),e(Ru,wMo),e(Ru,ij),e(ij,AMo),e(Ru,yMo),e(G,LMo),e(G,Pu),e(Pu,fde),e(fde,xMo),e(Pu,$Mo),e(Pu,dj),e(dj,kMo),e(Pu,SMo),e(G,RMo),e(G,Bu),e(Bu,mde),e(mde,PMo),e(Bu,BMo),e(Bu,cj),e(cj,IMo),e(Bu,NMo),e(G,qMo),e(G,Iu),e(Iu,gde),e(gde,jMo),e(Iu,DMo),e(Iu,fj),e(fj,GMo),e(Iu,OMo),e(G,VMo),e(G,Nu),e(Nu,hde),e(hde,XMo),e(Nu,zMo),e(Nu,mj),e(mj,WMo),e(Nu,QMo),e(G,HMo),e(G,qu),e(qu,pde),e(pde,UMo),e(qu,JMo),e(qu,gj),e(gj,YMo),e(qu,KMo),e(G,ZMo),e(G,ju),e(ju,_de),e(_de,eEo),e(ju,oEo),e(ju,hj),e(hj,rEo),e(ju,tEo),e(G,aEo),e(G,Du),e(Du,ude),e(ude,nEo),e(Du,sEo),e(Du,pj),e(pj,lEo),e(Du,iEo),e(G,dEo),e(G,Gu),e(Gu,bde),e(bde,cEo),e(Gu,fEo),e(Gu,_j),e(_j,mEo),e(Gu,gEo),e(G,hEo),e(G,Ou),e(Ou,vde),e(vde,pEo),e(Ou,_Eo),e(Ou,uj),e(uj,uEo),e(Ou,bEo),e(G,vEo),e(G,Vu),e(Vu,Fde),e(Fde,FEo),e(Vu,TEo),e(Vu,bj),e(bj,MEo),e(Vu,EEo),e(G,CEo),e(G,Xu),e(Xu,Tde),e(Tde,wEo),e(Xu,AEo),e(Xu,vj),e(vj,yEo),e(Xu,LEo),e(G,xEo),e(G,zu),e(zu,Mde),e(Mde,$Eo),e(zu,kEo),e(zu,Fj),e(Fj,SEo),e(zu,REo),e(G,PEo),e(G,Wu),e(Wu,Ede),e(Ede,BEo),e(Wu,IEo),e(Wu,Tj),e(Tj,NEo),e(Wu,qEo),e(Ye,jEo),e(Ye,Qu),e(Qu,DEo),e(Qu,Cde),e(Cde,GEo),e(Qu,OEo),e(Qu,wde),e(wde,VEo),e(Ye,XEo),M(Hu,Ye,null),b(f,kqe,u),b(f,ki,u),e(ki,Uu),e(Uu,Ade),M(gA,Ade,null),e(ki,zEo),e(ki,yde),e(yde,WEo),b(f,Sqe,u),b(f,$o,u),M(hA,$o,null),e($o,QEo),e($o,Si),e(Si,HEo),e(Si,Mj),e(Mj,UEo),e(Si,JEo),e(Si,Ej),e(Ej,YEo),e(Si,KEo),e($o,ZEo),e($o,pA),e(pA,eCo),e(pA,Lde),e(Lde,oCo),e(pA,rCo),e($o,tCo),e($o,nt),M(_A,nt,null),e(nt,aCo),e(nt,xde),e(xde,nCo),e(nt,sCo),e(nt,Ri),e(Ri,lCo),e(Ri,$de),e($de,iCo),e(Ri,dCo),e(Ri,Cj),e(Cj,cCo),e(Ri,fCo),e(nt,mCo),M(Ju,nt,null),e($o,gCo),e($o,Ke),M(uA,Ke,null),e(Ke,hCo),e(Ke,kde),e(kde,pCo),e(Ke,_Co),e(Ke,$a),e($a,uCo),e($a,Sde),e(Sde,bCo),e($a,vCo),e($a,Rde),e(Rde,FCo),e($a,TCo),e($a,Pde),e(Pde,MCo),e($a,ECo),e(Ke,CCo),e(Ke,z),e(z,Yu),e(Yu,Bde),e(Bde,wCo),e(Yu,ACo),e(Yu,wj),e(wj,yCo),e(Yu,LCo),e(z,xCo),e(z,Ku),e(Ku,Ide),e(Ide,$Co),e(Ku,kCo),e(Ku,Aj),e(Aj,SCo),e(Ku,RCo),e(z,PCo),e(z,Zu),e(Zu,Nde),e(Nde,BCo),e(Zu,ICo),e(Zu,yj),e(yj,NCo),e(Zu,qCo),e(z,jCo),e(z,e1),e(e1,qde),e(qde,DCo),e(e1,GCo),e(e1,Lj),e(Lj,OCo),e(e1,VCo),e(z,XCo),e(z,o1),e(o1,jde),e(jde,zCo),e(o1,WCo),e(o1,xj),e(xj,QCo),e(o1,HCo),e(z,UCo),e(z,r1),e(r1,Dde),e(Dde,JCo),e(r1,YCo),e(r1,$j),e($j,KCo),e(r1,ZCo),e(z,e3o),e(z,t1),e(t1,Gde),e(Gde,o3o),e(t1,r3o),e(t1,kj),e(kj,t3o),e(t1,a3o),e(z,n3o),e(z,a1),e(a1,Ode),e(Ode,s3o),e(a1,l3o),e(a1,Sj),e(Sj,i3o),e(a1,d3o),e(z,c3o),e(z,n1),e(n1,Vde),e(Vde,f3o),e(n1,m3o),e(n1,Rj),e(Rj,g3o),e(n1,h3o),e(z,p3o),e(z,s1),e(s1,Xde),e(Xde,_3o),e(s1,u3o),e(s1,Pj),e(Pj,b3o),e(s1,v3o),e(z,F3o),e(z,l1),e(l1,zde),e(zde,T3o),e(l1,M3o),e(l1,Bj),e(Bj,E3o),e(l1,C3o),e(z,w3o),e(z,i1),e(i1,Wde),e(Wde,A3o),e(i1,y3o),e(i1,Ij),e(Ij,L3o),e(i1,x3o),e(z,$3o),e(z,d1),e(d1,Qde),e(Qde,k3o),e(d1,S3o),e(d1,Nj),e(Nj,R3o),e(d1,P3o),e(z,B3o),e(z,c1),e(c1,Hde),e(Hde,I3o),e(c1,N3o),e(c1,qj),e(qj,q3o),e(c1,j3o),e(z,D3o),e(z,f1),e(f1,Ude),e(Ude,G3o),e(f1,O3o),e(f1,jj),e(jj,V3o),e(f1,X3o),e(z,z3o),e(z,m1),e(m1,Jde),e(Jde,W3o),e(m1,Q3o),e(m1,Dj),e(Dj,H3o),e(m1,U3o),e(z,J3o),e(z,g1),e(g1,Yde),e(Yde,Y3o),e(g1,K3o),e(g1,Gj),e(Gj,Z3o),e(g1,ewo),e(z,owo),e(z,h1),e(h1,Kde),e(Kde,rwo),e(h1,two),e(h1,Oj),e(Oj,awo),e(h1,nwo),e(z,swo),e(z,p1),e(p1,Zde),e(Zde,lwo),e(p1,iwo),e(p1,Vj),e(Vj,dwo),e(p1,cwo),e(z,fwo),e(z,_1),e(_1,ece),e(ece,mwo),e(_1,gwo),e(_1,Xj),e(Xj,hwo),e(_1,pwo),e(z,_wo),e(z,u1),e(u1,oce),e(oce,uwo),e(u1,bwo),e(u1,zj),e(zj,vwo),e(u1,Fwo),e(z,Two),e(z,b1),e(b1,rce),e(rce,Mwo),e(b1,Ewo),e(b1,Wj),e(Wj,Cwo),e(b1,wwo),e(z,Awo),e(z,v1),e(v1,tce),e(tce,ywo),e(v1,Lwo),e(v1,Qj),e(Qj,xwo),e(v1,$wo),e(z,kwo),e(z,F1),e(F1,ace),e(ace,Swo),e(F1,Rwo),e(F1,Hj),e(Hj,Pwo),e(F1,Bwo),e(z,Iwo),e(z,T1),e(T1,nce),e(nce,Nwo),e(T1,qwo),e(T1,Uj),e(Uj,jwo),e(T1,Dwo),e(z,Gwo),e(z,M1),e(M1,sce),e(sce,Owo),e(M1,Vwo),e(M1,Jj),e(Jj,Xwo),e(M1,zwo),e(z,Wwo),e(z,E1),e(E1,lce),e(lce,Qwo),e(E1,Hwo),e(E1,Yj),e(Yj,Uwo),e(E1,Jwo),e(z,Ywo),e(z,C1),e(C1,ice),e(ice,Kwo),e(C1,Zwo),e(C1,Kj),e(Kj,e0o),e(C1,o0o),e(z,r0o),e(z,w1),e(w1,dce),e(dce,t0o),e(w1,a0o),e(w1,Zj),e(Zj,n0o),e(w1,s0o),e(z,l0o),e(z,A1),e(A1,cce),e(cce,i0o),e(A1,d0o),e(A1,eD),e(eD,c0o),e(A1,f0o),e(z,m0o),e(z,y1),e(y1,fce),e(fce,g0o),e(y1,h0o),e(y1,oD),e(oD,p0o),e(y1,_0o),e(z,u0o),e(z,L1),e(L1,mce),e(mce,b0o),e(L1,v0o),e(L1,rD),e(rD,F0o),e(L1,T0o),e(z,M0o),e(z,x1),e(x1,gce),e(gce,E0o),e(x1,C0o),e(x1,tD),e(tD,w0o),e(x1,A0o),e(z,y0o),e(z,$1),e($1,hce),e(hce,L0o),e($1,x0o),e($1,aD),e(aD,$0o),e($1,k0o),e(z,S0o),e(z,k1),e(k1,pce),e(pce,R0o),e(k1,P0o),e(k1,nD),e(nD,B0o),e(k1,I0o),e(z,N0o),e(z,S1),e(S1,_ce),e(_ce,q0o),e(S1,j0o),e(S1,sD),e(sD,D0o),e(S1,G0o),e(z,O0o),e(z,R1),e(R1,uce),e(uce,V0o),e(R1,X0o),e(R1,lD),e(lD,z0o),e(R1,W0o),e(Ke,Q0o),e(Ke,P1),e(P1,H0o),e(P1,bce),e(bce,U0o),e(P1,J0o),e(P1,vce),e(vce,Y0o),e(Ke,K0o),M(B1,Ke,null),b(f,Rqe,u),b(f,Pi,u),e(Pi,I1),e(I1,Fce),M(bA,Fce,null),e(Pi,Z0o),e(Pi,Tce),e(Tce,e6o),b(f,Pqe,u),b(f,ko,u),M(vA,ko,null),e(ko,o6o),e(ko,Bi),e(Bi,r6o),e(Bi,iD),e(iD,t6o),e(Bi,a6o),e(Bi,dD),e(dD,n6o),e(Bi,s6o),e(ko,l6o),e(ko,FA),e(FA,i6o),e(FA,Mce),e(Mce,d6o),e(FA,c6o),e(ko,f6o),e(ko,st),M(TA,st,null),e(st,m6o),e(st,Ece),e(Ece,g6o),e(st,h6o),e(st,Ii),e(Ii,p6o),e(Ii,Cce),e(Cce,_6o),e(Ii,u6o),e(Ii,cD),e(cD,b6o),e(Ii,v6o),e(st,F6o),M(N1,st,null),e(ko,T6o),e(ko,Ze),M(MA,Ze,null),e(Ze,M6o),e(Ze,wce),e(wce,E6o),e(Ze,C6o),e(Ze,ka),e(ka,w6o),e(ka,Ace),e(Ace,A6o),e(ka,y6o),e(ka,yce),e(yce,L6o),e(ka,x6o),e(ka,Lce),e(Lce,$6o),e(ka,k6o),e(Ze,S6o),e(Ze,Q),e(Q,q1),e(q1,xce),e(xce,R6o),e(q1,P6o),e(q1,fD),e(fD,B6o),e(q1,I6o),e(Q,N6o),e(Q,j1),e(j1,$ce),e($ce,q6o),e(j1,j6o),e(j1,mD),e(mD,D6o),e(j1,G6o),e(Q,O6o),e(Q,D1),e(D1,kce),e(kce,V6o),e(D1,X6o),e(D1,gD),e(gD,z6o),e(D1,W6o),e(Q,Q6o),e(Q,G1),e(G1,Sce),e(Sce,H6o),e(G1,U6o),e(G1,hD),e(hD,J6o),e(G1,Y6o),e(Q,K6o),e(Q,O1),e(O1,Rce),e(Rce,Z6o),e(O1,eAo),e(O1,pD),e(pD,oAo),e(O1,rAo),e(Q,tAo),e(Q,V1),e(V1,Pce),e(Pce,aAo),e(V1,nAo),e(V1,_D),e(_D,sAo),e(V1,lAo),e(Q,iAo),e(Q,X1),e(X1,Bce),e(Bce,dAo),e(X1,cAo),e(X1,uD),e(uD,fAo),e(X1,mAo),e(Q,gAo),e(Q,z1),e(z1,Ice),e(Ice,hAo),e(z1,pAo),e(z1,bD),e(bD,_Ao),e(z1,uAo),e(Q,bAo),e(Q,W1),e(W1,Nce),e(Nce,vAo),e(W1,FAo),e(W1,vD),e(vD,TAo),e(W1,MAo),e(Q,EAo),e(Q,Q1),e(Q1,qce),e(qce,CAo),e(Q1,wAo),e(Q1,FD),e(FD,AAo),e(Q1,yAo),e(Q,LAo),e(Q,H1),e(H1,jce),e(jce,xAo),e(H1,$Ao),e(H1,TD),e(TD,kAo),e(H1,SAo),e(Q,RAo),e(Q,U1),e(U1,Dce),e(Dce,PAo),e(U1,BAo),e(U1,MD),e(MD,IAo),e(U1,NAo),e(Q,qAo),e(Q,J1),e(J1,Gce),e(Gce,jAo),e(J1,DAo),e(J1,ED),e(ED,GAo),e(J1,OAo),e(Q,VAo),e(Q,Y1),e(Y1,Oce),e(Oce,XAo),e(Y1,zAo),e(Y1,CD),e(CD,WAo),e(Y1,QAo),e(Q,HAo),e(Q,K1),e(K1,Vce),e(Vce,UAo),e(K1,JAo),e(K1,wD),e(wD,YAo),e(K1,KAo),e(Q,ZAo),e(Q,Z1),e(Z1,Xce),e(Xce,eyo),e(Z1,oyo),e(Z1,AD),e(AD,ryo),e(Z1,tyo),e(Q,ayo),e(Q,eb),e(eb,zce),e(zce,nyo),e(eb,syo),e(eb,yD),e(yD,lyo),e(eb,iyo),e(Q,dyo),e(Q,ob),e(ob,Wce),e(Wce,cyo),e(ob,fyo),e(ob,LD),e(LD,myo),e(ob,gyo),e(Q,hyo),e(Q,rb),e(rb,Qce),e(Qce,pyo),e(rb,_yo),e(rb,xD),e(xD,uyo),e(rb,byo),e(Q,vyo),e(Q,tb),e(tb,Hce),e(Hce,Fyo),e(tb,Tyo),e(tb,$D),e($D,Myo),e(tb,Eyo),e(Q,Cyo),e(Q,ab),e(ab,Uce),e(Uce,wyo),e(ab,Ayo),e(ab,kD),e(kD,yyo),e(ab,Lyo),e(Q,xyo),e(Q,nb),e(nb,Jce),e(Jce,$yo),e(nb,kyo),e(nb,SD),e(SD,Syo),e(nb,Ryo),e(Q,Pyo),e(Q,sb),e(sb,Yce),e(Yce,Byo),e(sb,Iyo),e(sb,RD),e(RD,Nyo),e(sb,qyo),e(Q,jyo),e(Q,lb),e(lb,Kce),e(Kce,Dyo),e(lb,Gyo),e(lb,PD),e(PD,Oyo),e(lb,Vyo),e(Q,Xyo),e(Q,ib),e(ib,Zce),e(Zce,zyo),e(ib,Wyo),e(ib,BD),e(BD,Qyo),e(ib,Hyo),e(Q,Uyo),e(Q,db),e(db,efe),e(efe,Jyo),e(db,Yyo),e(db,ID),e(ID,Kyo),e(db,Zyo),e(Q,eLo),e(Q,cb),e(cb,ofe),e(ofe,oLo),e(cb,rLo),e(cb,ND),e(ND,tLo),e(cb,aLo),e(Q,nLo),e(Q,fb),e(fb,rfe),e(rfe,sLo),e(fb,lLo),e(fb,qD),e(qD,iLo),e(fb,dLo),e(Q,cLo),e(Q,mb),e(mb,tfe),e(tfe,fLo),e(mb,mLo),e(mb,jD),e(jD,gLo),e(mb,hLo),e(Q,pLo),e(Q,gb),e(gb,afe),e(afe,_Lo),e(gb,uLo),e(gb,DD),e(DD,bLo),e(gb,vLo),e(Q,FLo),e(Q,hb),e(hb,nfe),e(nfe,TLo),e(hb,MLo),e(hb,sfe),e(sfe,ELo),e(hb,CLo),e(Q,wLo),e(Q,pb),e(pb,lfe),e(lfe,ALo),e(pb,yLo),e(pb,GD),e(GD,LLo),e(pb,xLo),e(Q,$Lo),e(Q,_b),e(_b,ife),e(ife,kLo),e(_b,SLo),e(_b,OD),e(OD,RLo),e(_b,PLo),e(Q,BLo),e(Q,ub),e(ub,dfe),e(dfe,ILo),e(ub,NLo),e(ub,VD),e(VD,qLo),e(ub,jLo),e(Q,DLo),e(Q,bb),e(bb,cfe),e(cfe,GLo),e(bb,OLo),e(bb,XD),e(XD,VLo),e(bb,XLo),e(Ze,zLo),e(Ze,vb),e(vb,WLo),e(vb,ffe),e(ffe,QLo),e(vb,HLo),e(vb,mfe),e(mfe,ULo),e(Ze,JLo),M(Fb,Ze,null),b(f,Bqe,u),b(f,Ni,u),e(Ni,Tb),e(Tb,gfe),M(EA,gfe,null),e(Ni,YLo),e(Ni,hfe),e(hfe,KLo),b(f,Iqe,u),b(f,So,u),M(CA,So,null),e(So,ZLo),e(So,qi),e(qi,e8o),e(qi,zD),e(zD,o8o),e(qi,r8o),e(qi,WD),e(WD,t8o),e(qi,a8o),e(So,n8o),e(So,wA),e(wA,s8o),e(wA,pfe),e(pfe,l8o),e(wA,i8o),e(So,d8o),e(So,lt),M(AA,lt,null),e(lt,c8o),e(lt,_fe),e(_fe,f8o),e(lt,m8o),e(lt,ji),e(ji,g8o),e(ji,ufe),e(ufe,h8o),e(ji,p8o),e(ji,QD),e(QD,_8o),e(ji,u8o),e(lt,b8o),M(Mb,lt,null),e(So,v8o),e(So,eo),M(yA,eo,null),e(eo,F8o),e(eo,bfe),e(bfe,T8o),e(eo,M8o),e(eo,Sa),e(Sa,E8o),e(Sa,vfe),e(vfe,C8o),e(Sa,w8o),e(Sa,Ffe),e(Ffe,A8o),e(Sa,y8o),e(Sa,Tfe),e(Tfe,L8o),e(Sa,x8o),e(eo,$8o),e(eo,_e),e(_e,Eb),e(Eb,Mfe),e(Mfe,k8o),e(Eb,S8o),e(Eb,HD),e(HD,R8o),e(Eb,P8o),e(_e,B8o),e(_e,Cb),e(Cb,Efe),e(Efe,I8o),e(Cb,N8o),e(Cb,UD),e(UD,q8o),e(Cb,j8o),e(_e,D8o),e(_e,wb),e(wb,Cfe),e(Cfe,G8o),e(wb,O8o),e(wb,JD),e(JD,V8o),e(wb,X8o),e(_e,z8o),e(_e,Ab),e(Ab,wfe),e(wfe,W8o),e(Ab,Q8o),e(Ab,YD),e(YD,H8o),e(Ab,U8o),e(_e,J8o),e(_e,yb),e(yb,Afe),e(Afe,Y8o),e(yb,K8o),e(yb,KD),e(KD,Z8o),e(yb,exo),e(_e,oxo),e(_e,Lb),e(Lb,yfe),e(yfe,rxo),e(Lb,txo),e(Lb,ZD),e(ZD,axo),e(Lb,nxo),e(_e,sxo),e(_e,xb),e(xb,Lfe),e(Lfe,lxo),e(xb,ixo),e(xb,eG),e(eG,dxo),e(xb,cxo),e(_e,fxo),e(_e,$b),e($b,xfe),e(xfe,mxo),e($b,gxo),e($b,oG),e(oG,hxo),e($b,pxo),e(_e,_xo),e(_e,kb),e(kb,$fe),e($fe,uxo),e(kb,bxo),e(kb,rG),e(rG,vxo),e(kb,Fxo),e(_e,Txo),e(_e,Sb),e(Sb,kfe),e(kfe,Mxo),e(Sb,Exo),e(Sb,tG),e(tG,Cxo),e(Sb,wxo),e(_e,Axo),e(_e,Rb),e(Rb,Sfe),e(Sfe,yxo),e(Rb,Lxo),e(Rb,aG),e(aG,xxo),e(Rb,$xo),e(_e,kxo),e(_e,Pb),e(Pb,Rfe),e(Rfe,Sxo),e(Pb,Rxo),e(Pb,nG),e(nG,Pxo),e(Pb,Bxo),e(_e,Ixo),e(_e,Bb),e(Bb,Pfe),e(Pfe,Nxo),e(Bb,qxo),e(Bb,sG),e(sG,jxo),e(Bb,Dxo),e(_e,Gxo),e(_e,Ib),e(Ib,Bfe),e(Bfe,Oxo),e(Ib,Vxo),e(Ib,lG),e(lG,Xxo),e(Ib,zxo),e(_e,Wxo),e(_e,Nb),e(Nb,Ife),e(Ife,Qxo),e(Nb,Hxo),e(Nb,iG),e(iG,Uxo),e(Nb,Jxo),e(_e,Yxo),e(_e,qb),e(qb,Nfe),e(Nfe,Kxo),e(qb,Zxo),e(qb,dG),e(dG,e$o),e(qb,o$o),e(eo,r$o),e(eo,jb),e(jb,t$o),e(jb,qfe),e(qfe,a$o),e(jb,n$o),e(jb,jfe),e(jfe,s$o),e(eo,l$o),M(Db,eo,null),b(f,Nqe,u),b(f,Di,u),e(Di,Gb),e(Gb,Dfe),M(LA,Dfe,null),e(Di,i$o),e(Di,Gfe),e(Gfe,d$o),b(f,qqe,u),b(f,Ro,u),M(xA,Ro,null),e(Ro,c$o),e(Ro,Gi),e(Gi,f$o),e(Gi,cG),e(cG,m$o),e(Gi,g$o),e(Gi,fG),e(fG,h$o),e(Gi,p$o),e(Ro,_$o),e(Ro,$A),e($A,u$o),e($A,Ofe),e(Ofe,b$o),e($A,v$o),e(Ro,F$o),e(Ro,it),M(kA,it,null),e(it,T$o),e(it,Vfe),e(Vfe,M$o),e(it,E$o),e(it,Oi),e(Oi,C$o),e(Oi,Xfe),e(Xfe,w$o),e(Oi,A$o),e(Oi,mG),e(mG,y$o),e(Oi,L$o),e(it,x$o),M(Ob,it,null),e(Ro,$$o),e(Ro,oo),M(SA,oo,null),e(oo,k$o),e(oo,zfe),e(zfe,S$o),e(oo,R$o),e(oo,Ra),e(Ra,P$o),e(Ra,Wfe),e(Wfe,B$o),e(Ra,I$o),e(Ra,Qfe),e(Qfe,N$o),e(Ra,q$o),e(Ra,Hfe),e(Hfe,j$o),e(Ra,D$o),e(oo,G$o),e(oo,N),e(N,Vb),e(Vb,Ufe),e(Ufe,O$o),e(Vb,V$o),e(Vb,gG),e(gG,X$o),e(Vb,z$o),e(N,W$o),e(N,Xb),e(Xb,Jfe),e(Jfe,Q$o),e(Xb,H$o),e(Xb,hG),e(hG,U$o),e(Xb,J$o),e(N,Y$o),e(N,zb),e(zb,Yfe),e(Yfe,K$o),e(zb,Z$o),e(zb,pG),e(pG,eko),e(zb,oko),e(N,rko),e(N,Wb),e(Wb,Kfe),e(Kfe,tko),e(Wb,ako),e(Wb,_G),e(_G,nko),e(Wb,sko),e(N,lko),e(N,Qb),e(Qb,Zfe),e(Zfe,iko),e(Qb,dko),e(Qb,uG),e(uG,cko),e(Qb,fko),e(N,mko),e(N,Hb),e(Hb,eme),e(eme,gko),e(Hb,hko),e(Hb,bG),e(bG,pko),e(Hb,_ko),e(N,uko),e(N,Ub),e(Ub,ome),e(ome,bko),e(Ub,vko),e(Ub,vG),e(vG,Fko),e(Ub,Tko),e(N,Mko),e(N,Jb),e(Jb,rme),e(rme,Eko),e(Jb,Cko),e(Jb,FG),e(FG,wko),e(Jb,Ako),e(N,yko),e(N,Yb),e(Yb,tme),e(tme,Lko),e(Yb,xko),e(Yb,TG),e(TG,$ko),e(Yb,kko),e(N,Sko),e(N,Kb),e(Kb,ame),e(ame,Rko),e(Kb,Pko),e(Kb,MG),e(MG,Bko),e(Kb,Iko),e(N,Nko),e(N,Zb),e(Zb,nme),e(nme,qko),e(Zb,jko),e(Zb,EG),e(EG,Dko),e(Zb,Gko),e(N,Oko),e(N,e2),e(e2,sme),e(sme,Vko),e(e2,Xko),e(e2,CG),e(CG,zko),e(e2,Wko),e(N,Qko),e(N,o2),e(o2,lme),e(lme,Hko),e(o2,Uko),e(o2,wG),e(wG,Jko),e(o2,Yko),e(N,Kko),e(N,r2),e(r2,ime),e(ime,Zko),e(r2,eSo),e(r2,AG),e(AG,oSo),e(r2,rSo),e(N,tSo),e(N,t2),e(t2,dme),e(dme,aSo),e(t2,nSo),e(t2,yG),e(yG,sSo),e(t2,lSo),e(N,iSo),e(N,a2),e(a2,cme),e(cme,dSo),e(a2,cSo),e(a2,LG),e(LG,fSo),e(a2,mSo),e(N,gSo),e(N,n2),e(n2,fme),e(fme,hSo),e(n2,pSo),e(n2,xG),e(xG,_So),e(n2,uSo),e(N,bSo),e(N,s2),e(s2,mme),e(mme,vSo),e(s2,FSo),e(s2,$G),e($G,TSo),e(s2,MSo),e(N,ESo),e(N,l2),e(l2,gme),e(gme,CSo),e(l2,wSo),e(l2,kG),e(kG,ASo),e(l2,ySo),e(N,LSo),e(N,i2),e(i2,hme),e(hme,xSo),e(i2,$So),e(i2,SG),e(SG,kSo),e(i2,SSo),e(N,RSo),e(N,d2),e(d2,pme),e(pme,PSo),e(d2,BSo),e(d2,RG),e(RG,ISo),e(d2,NSo),e(N,qSo),e(N,c2),e(c2,_me),e(_me,jSo),e(c2,DSo),e(c2,PG),e(PG,GSo),e(c2,OSo),e(N,VSo),e(N,f2),e(f2,ume),e(ume,XSo),e(f2,zSo),e(f2,BG),e(BG,WSo),e(f2,QSo),e(N,HSo),e(N,m2),e(m2,bme),e(bme,USo),e(m2,JSo),e(m2,IG),e(IG,YSo),e(m2,KSo),e(N,ZSo),e(N,g2),e(g2,vme),e(vme,eRo),e(g2,oRo),e(g2,NG),e(NG,rRo),e(g2,tRo),e(N,aRo),e(N,h2),e(h2,Fme),e(Fme,nRo),e(h2,sRo),e(h2,qG),e(qG,lRo),e(h2,iRo),e(N,dRo),e(N,p2),e(p2,Tme),e(Tme,cRo),e(p2,fRo),e(p2,jG),e(jG,mRo),e(p2,gRo),e(N,hRo),e(N,_2),e(_2,Mme),e(Mme,pRo),e(_2,_Ro),e(_2,DG),e(DG,uRo),e(_2,bRo),e(N,vRo),e(N,u2),e(u2,Eme),e(Eme,FRo),e(u2,TRo),e(u2,GG),e(GG,MRo),e(u2,ERo),e(N,CRo),e(N,b2),e(b2,Cme),e(Cme,wRo),e(b2,ARo),e(b2,OG),e(OG,yRo),e(b2,LRo),e(N,xRo),e(N,v2),e(v2,wme),e(wme,$Ro),e(v2,kRo),e(v2,VG),e(VG,SRo),e(v2,RRo),e(N,PRo),e(N,F2),e(F2,Ame),e(Ame,BRo),e(F2,IRo),e(F2,XG),e(XG,NRo),e(F2,qRo),e(N,jRo),e(N,T2),e(T2,yme),e(yme,DRo),e(T2,GRo),e(T2,zG),e(zG,ORo),e(T2,VRo),e(N,XRo),e(N,M2),e(M2,Lme),e(Lme,zRo),e(M2,WRo),e(M2,WG),e(WG,QRo),e(M2,HRo),e(N,URo),e(N,E2),e(E2,xme),e(xme,JRo),e(E2,YRo),e(E2,QG),e(QG,KRo),e(E2,ZRo),e(N,ePo),e(N,C2),e(C2,$me),e($me,oPo),e(C2,rPo),e(C2,HG),e(HG,tPo),e(C2,aPo),e(N,nPo),e(N,w2),e(w2,kme),e(kme,sPo),e(w2,lPo),e(w2,UG),e(UG,iPo),e(w2,dPo),e(N,cPo),e(N,A2),e(A2,Sme),e(Sme,fPo),e(A2,mPo),e(A2,JG),e(JG,gPo),e(A2,hPo),e(N,pPo),e(N,y2),e(y2,Rme),e(Rme,_Po),e(y2,uPo),e(y2,YG),e(YG,bPo),e(y2,vPo),e(N,FPo),e(N,L2),e(L2,Pme),e(Pme,TPo),e(L2,MPo),e(L2,KG),e(KG,EPo),e(L2,CPo),e(N,wPo),e(N,x2),e(x2,Bme),e(Bme,APo),e(x2,yPo),e(x2,ZG),e(ZG,LPo),e(x2,xPo),e(N,$Po),e(N,$2),e($2,Ime),e(Ime,kPo),e($2,SPo),e($2,eO),e(eO,RPo),e($2,PPo),e(N,BPo),e(N,k2),e(k2,Nme),e(Nme,IPo),e(k2,NPo),e(k2,oO),e(oO,qPo),e(k2,jPo),e(N,DPo),e(N,S2),e(S2,qme),e(qme,GPo),e(S2,OPo),e(S2,rO),e(rO,VPo),e(S2,XPo),e(N,zPo),e(N,R2),e(R2,jme),e(jme,WPo),e(R2,QPo),e(R2,tO),e(tO,HPo),e(R2,UPo),e(N,JPo),e(N,P2),e(P2,Dme),e(Dme,YPo),e(P2,KPo),e(P2,aO),e(aO,ZPo),e(P2,eBo),e(N,oBo),e(N,B2),e(B2,Gme),e(Gme,rBo),e(B2,tBo),e(B2,nO),e(nO,aBo),e(B2,nBo),e(oo,sBo),e(oo,I2),e(I2,lBo),e(I2,Ome),e(Ome,iBo),e(I2,dBo),e(I2,Vme),e(Vme,cBo),e(oo,fBo),M(N2,oo,null),b(f,jqe,u),b(f,Vi,u),e(Vi,q2),e(q2,Xme),M(RA,Xme,null),e(Vi,mBo),e(Vi,zme),e(zme,gBo),b(f,Dqe,u),b(f,Po,u),M(PA,Po,null),e(Po,hBo),e(Po,Xi),e(Xi,pBo),e(Xi,sO),e(sO,_Bo),e(Xi,uBo),e(Xi,lO),e(lO,bBo),e(Xi,vBo),e(Po,FBo),e(Po,BA),e(BA,TBo),e(BA,Wme),e(Wme,MBo),e(BA,EBo),e(Po,CBo),e(Po,dt),M(IA,dt,null),e(dt,wBo),e(dt,Qme),e(Qme,ABo),e(dt,yBo),e(dt,zi),e(zi,LBo),e(zi,Hme),e(Hme,xBo),e(zi,$Bo),e(zi,iO),e(iO,kBo),e(zi,SBo),e(dt,RBo),M(j2,dt,null),e(Po,PBo),e(Po,ro),M(NA,ro,null),e(ro,BBo),e(ro,Ume),e(Ume,IBo),e(ro,NBo),e(ro,Pa),e(Pa,qBo),e(Pa,Jme),e(Jme,jBo),e(Pa,DBo),e(Pa,Yme),e(Yme,GBo),e(Pa,OBo),e(Pa,Kme),e(Kme,VBo),e(Pa,XBo),e(ro,zBo),e(ro,K),e(K,D2),e(D2,Zme),e(Zme,WBo),e(D2,QBo),e(D2,dO),e(dO,HBo),e(D2,UBo),e(K,JBo),e(K,G2),e(G2,ege),e(ege,YBo),e(G2,KBo),e(G2,cO),e(cO,ZBo),e(G2,eIo),e(K,oIo),e(K,O2),e(O2,oge),e(oge,rIo),e(O2,tIo),e(O2,fO),e(fO,aIo),e(O2,nIo),e(K,sIo),e(K,V2),e(V2,rge),e(rge,lIo),e(V2,iIo),e(V2,mO),e(mO,dIo),e(V2,cIo),e(K,fIo),e(K,X2),e(X2,tge),e(tge,mIo),e(X2,gIo),e(X2,gO),e(gO,hIo),e(X2,pIo),e(K,_Io),e(K,z2),e(z2,age),e(age,uIo),e(z2,bIo),e(z2,hO),e(hO,vIo),e(z2,FIo),e(K,TIo),e(K,W2),e(W2,nge),e(nge,MIo),e(W2,EIo),e(W2,pO),e(pO,CIo),e(W2,wIo),e(K,AIo),e(K,Q2),e(Q2,sge),e(sge,yIo),e(Q2,LIo),e(Q2,_O),e(_O,xIo),e(Q2,$Io),e(K,kIo),e(K,H2),e(H2,lge),e(lge,SIo),e(H2,RIo),e(H2,uO),e(uO,PIo),e(H2,BIo),e(K,IIo),e(K,U2),e(U2,ige),e(ige,NIo),e(U2,qIo),e(U2,bO),e(bO,jIo),e(U2,DIo),e(K,GIo),e(K,J2),e(J2,dge),e(dge,OIo),e(J2,VIo),e(J2,vO),e(vO,XIo),e(J2,zIo),e(K,WIo),e(K,Y2),e(Y2,cge),e(cge,QIo),e(Y2,HIo),e(Y2,FO),e(FO,UIo),e(Y2,JIo),e(K,YIo),e(K,K2),e(K2,fge),e(fge,KIo),e(K2,ZIo),e(K2,TO),e(TO,eNo),e(K2,oNo),e(K,rNo),e(K,Z2),e(Z2,mge),e(mge,tNo),e(Z2,aNo),e(Z2,MO),e(MO,nNo),e(Z2,sNo),e(K,lNo),e(K,e4),e(e4,gge),e(gge,iNo),e(e4,dNo),e(e4,EO),e(EO,cNo),e(e4,fNo),e(K,mNo),e(K,o4),e(o4,hge),e(hge,gNo),e(o4,hNo),e(o4,CO),e(CO,pNo),e(o4,_No),e(K,uNo),e(K,r4),e(r4,pge),e(pge,bNo),e(r4,vNo),e(r4,wO),e(wO,FNo),e(r4,TNo),e(K,MNo),e(K,t4),e(t4,_ge),e(_ge,ENo),e(t4,CNo),e(t4,AO),e(AO,wNo),e(t4,ANo),e(K,yNo),e(K,a4),e(a4,uge),e(uge,LNo),e(a4,xNo),e(a4,yO),e(yO,$No),e(a4,kNo),e(K,SNo),e(K,n4),e(n4,bge),e(bge,RNo),e(n4,PNo),e(n4,LO),e(LO,BNo),e(n4,INo),e(K,NNo),e(K,s4),e(s4,vge),e(vge,qNo),e(s4,jNo),e(s4,xO),e(xO,DNo),e(s4,GNo),e(K,ONo),e(K,l4),e(l4,Fge),e(Fge,VNo),e(l4,XNo),e(l4,$O),e($O,zNo),e(l4,WNo),e(K,QNo),e(K,i4),e(i4,Tge),e(Tge,HNo),e(i4,UNo),e(i4,kO),e(kO,JNo),e(i4,YNo),e(K,KNo),e(K,d4),e(d4,Mge),e(Mge,ZNo),e(d4,eqo),e(d4,SO),e(SO,oqo),e(d4,rqo),e(K,tqo),e(K,c4),e(c4,Ege),e(Ege,aqo),e(c4,nqo),e(c4,RO),e(RO,sqo),e(c4,lqo),e(K,iqo),e(K,f4),e(f4,Cge),e(Cge,dqo),e(f4,cqo),e(f4,PO),e(PO,fqo),e(f4,mqo),e(K,gqo),e(K,m4),e(m4,wge),e(wge,hqo),e(m4,pqo),e(m4,BO),e(BO,_qo),e(m4,uqo),e(K,bqo),e(K,g4),e(g4,Age),e(Age,vqo),e(g4,Fqo),e(g4,IO),e(IO,Tqo),e(g4,Mqo),e(K,Eqo),e(K,h4),e(h4,yge),e(yge,Cqo),e(h4,wqo),e(h4,NO),e(NO,Aqo),e(h4,yqo),e(ro,Lqo),e(ro,p4),e(p4,xqo),e(p4,Lge),e(Lge,$qo),e(p4,kqo),e(p4,xge),e(xge,Sqo),e(ro,Rqo),M(_4,ro,null),b(f,Gqe,u),b(f,Wi,u),e(Wi,u4),e(u4,$ge),M(qA,$ge,null),e(Wi,Pqo),e(Wi,kge),e(kge,Bqo),b(f,Oqe,u),b(f,Bo,u),M(jA,Bo,null),e(Bo,Iqo),e(Bo,Qi),e(Qi,Nqo),e(Qi,qO),e(qO,qqo),e(Qi,jqo),e(Qi,jO),e(jO,Dqo),e(Qi,Gqo),e(Bo,Oqo),e(Bo,DA),e(DA,Vqo),e(DA,Sge),e(Sge,Xqo),e(DA,zqo),e(Bo,Wqo),e(Bo,ct),M(GA,ct,null),e(ct,Qqo),e(ct,Rge),e(Rge,Hqo),e(ct,Uqo),e(ct,Hi),e(Hi,Jqo),e(Hi,Pge),e(Pge,Yqo),e(Hi,Kqo),e(Hi,DO),e(DO,Zqo),e(Hi,ejo),e(ct,ojo),M(b4,ct,null),e(Bo,rjo),e(Bo,to),M(OA,to,null),e(to,tjo),e(to,Bge),e(Bge,ajo),e(to,njo),e(to,Ba),e(Ba,sjo),e(Ba,Ige),e(Ige,ljo),e(Ba,ijo),e(Ba,Nge),e(Nge,djo),e(Ba,cjo),e(Ba,qge),e(qge,fjo),e(Ba,mjo),e(to,gjo),e(to,Yr),e(Yr,v4),e(v4,jge),e(jge,hjo),e(v4,pjo),e(v4,GO),e(GO,_jo),e(v4,ujo),e(Yr,bjo),e(Yr,F4),e(F4,Dge),e(Dge,vjo),e(F4,Fjo),e(F4,OO),e(OO,Tjo),e(F4,Mjo),e(Yr,Ejo),e(Yr,T4),e(T4,Gge),e(Gge,Cjo),e(T4,wjo),e(T4,VO),e(VO,Ajo),e(T4,yjo),e(Yr,Ljo),e(Yr,M4),e(M4,Oge),e(Oge,xjo),e(M4,$jo),e(M4,XO),e(XO,kjo),e(M4,Sjo),e(Yr,Rjo),e(Yr,E4),e(E4,Vge),e(Vge,Pjo),e(E4,Bjo),e(E4,zO),e(zO,Ijo),e(E4,Njo),e(to,qjo),e(to,C4),e(C4,jjo),e(C4,Xge),e(Xge,Djo),e(C4,Gjo),e(C4,zge),e(zge,Ojo),e(to,Vjo),M(w4,to,null),b(f,Vqe,u),b(f,Ui,u),e(Ui,A4),e(A4,Wge),M(VA,Wge,null),e(Ui,Xjo),e(Ui,Qge),e(Qge,zjo),b(f,Xqe,u),b(f,Io,u),M(XA,Io,null),e(Io,Wjo),e(Io,Ji),e(Ji,Qjo),e(Ji,WO),e(WO,Hjo),e(Ji,Ujo),e(Ji,QO),e(QO,Jjo),e(Ji,Yjo),e(Io,Kjo),e(Io,zA),e(zA,Zjo),e(zA,Hge),e(Hge,eDo),e(zA,oDo),e(Io,rDo),e(Io,ft),M(WA,ft,null),e(ft,tDo),e(ft,Uge),e(Uge,aDo),e(ft,nDo),e(ft,Yi),e(Yi,sDo),e(Yi,Jge),e(Jge,lDo),e(Yi,iDo),e(Yi,HO),e(HO,dDo),e(Yi,cDo),e(ft,fDo),M(y4,ft,null),e(Io,mDo),e(Io,ao),M(QA,ao,null),e(ao,gDo),e(ao,Yge),e(Yge,hDo),e(ao,pDo),e(ao,Ia),e(Ia,_Do),e(Ia,Kge),e(Kge,uDo),e(Ia,bDo),e(Ia,Zge),e(Zge,vDo),e(Ia,FDo),e(Ia,ehe),e(ehe,TDo),e(Ia,MDo),e(ao,EDo),e(ao,H),e(H,L4),e(L4,ohe),e(ohe,CDo),e(L4,wDo),e(L4,UO),e(UO,ADo),e(L4,yDo),e(H,LDo),e(H,x4),e(x4,rhe),e(rhe,xDo),e(x4,$Do),e(x4,JO),e(JO,kDo),e(x4,SDo),e(H,RDo),e(H,$4),e($4,the),e(the,PDo),e($4,BDo),e($4,YO),e(YO,IDo),e($4,NDo),e(H,qDo),e(H,k4),e(k4,ahe),e(ahe,jDo),e(k4,DDo),e(k4,KO),e(KO,GDo),e(k4,ODo),e(H,VDo),e(H,S4),e(S4,nhe),e(nhe,XDo),e(S4,zDo),e(S4,ZO),e(ZO,WDo),e(S4,QDo),e(H,HDo),e(H,R4),e(R4,she),e(she,UDo),e(R4,JDo),e(R4,eV),e(eV,YDo),e(R4,KDo),e(H,ZDo),e(H,P4),e(P4,lhe),e(lhe,eGo),e(P4,oGo),e(P4,oV),e(oV,rGo),e(P4,tGo),e(H,aGo),e(H,B4),e(B4,ihe),e(ihe,nGo),e(B4,sGo),e(B4,rV),e(rV,lGo),e(B4,iGo),e(H,dGo),e(H,I4),e(I4,dhe),e(dhe,cGo),e(I4,fGo),e(I4,tV),e(tV,mGo),e(I4,gGo),e(H,hGo),e(H,N4),e(N4,che),e(che,pGo),e(N4,_Go),e(N4,aV),e(aV,uGo),e(N4,bGo),e(H,vGo),e(H,q4),e(q4,fhe),e(fhe,FGo),e(q4,TGo),e(q4,nV),e(nV,MGo),e(q4,EGo),e(H,CGo),e(H,j4),e(j4,mhe),e(mhe,wGo),e(j4,AGo),e(j4,sV),e(sV,yGo),e(j4,LGo),e(H,xGo),e(H,D4),e(D4,ghe),e(ghe,$Go),e(D4,kGo),e(D4,lV),e(lV,SGo),e(D4,RGo),e(H,PGo),e(H,G4),e(G4,hhe),e(hhe,BGo),e(G4,IGo),e(G4,iV),e(iV,NGo),e(G4,qGo),e(H,jGo),e(H,O4),e(O4,phe),e(phe,DGo),e(O4,GGo),e(O4,dV),e(dV,OGo),e(O4,VGo),e(H,XGo),e(H,V4),e(V4,_he),e(_he,zGo),e(V4,WGo),e(V4,cV),e(cV,QGo),e(V4,HGo),e(H,UGo),e(H,X4),e(X4,uhe),e(uhe,JGo),e(X4,YGo),e(X4,fV),e(fV,KGo),e(X4,ZGo),e(H,eOo),e(H,z4),e(z4,bhe),e(bhe,oOo),e(z4,rOo),e(z4,mV),e(mV,tOo),e(z4,aOo),e(H,nOo),e(H,W4),e(W4,vhe),e(vhe,sOo),e(W4,lOo),e(W4,gV),e(gV,iOo),e(W4,dOo),e(H,cOo),e(H,Q4),e(Q4,Fhe),e(Fhe,fOo),e(Q4,mOo),e(Q4,hV),e(hV,gOo),e(Q4,hOo),e(H,pOo),e(H,H4),e(H4,The),e(The,_Oo),e(H4,uOo),e(H4,pV),e(pV,bOo),e(H4,vOo),e(H,FOo),e(H,U4),e(U4,Mhe),e(Mhe,TOo),e(U4,MOo),e(U4,_V),e(_V,EOo),e(U4,COo),e(H,wOo),e(H,J4),e(J4,Ehe),e(Ehe,AOo),e(J4,yOo),e(J4,uV),e(uV,LOo),e(J4,xOo),e(H,$Oo),e(H,Y4),e(Y4,Che),e(Che,kOo),e(Y4,SOo),e(Y4,bV),e(bV,ROo),e(Y4,POo),e(H,BOo),e(H,K4),e(K4,whe),e(whe,IOo),e(K4,NOo),e(K4,vV),e(vV,qOo),e(K4,jOo),e(H,DOo),e(H,Z4),e(Z4,Ahe),e(Ahe,GOo),e(Z4,OOo),e(Z4,FV),e(FV,VOo),e(Z4,XOo),e(H,zOo),e(H,e5),e(e5,yhe),e(yhe,WOo),e(e5,QOo),e(e5,TV),e(TV,HOo),e(e5,UOo),e(H,JOo),e(H,o5),e(o5,Lhe),e(Lhe,YOo),e(o5,KOo),e(o5,MV),e(MV,ZOo),e(o5,eVo),e(H,oVo),e(H,r5),e(r5,xhe),e(xhe,rVo),e(r5,tVo),e(r5,EV),e(EV,aVo),e(r5,nVo),e(H,sVo),e(H,t5),e(t5,$he),e($he,lVo),e(t5,iVo),e(t5,CV),e(CV,dVo),e(t5,cVo),e(H,fVo),e(H,a5),e(a5,khe),e(khe,mVo),e(a5,gVo),e(a5,wV),e(wV,hVo),e(a5,pVo),e(H,_Vo),e(H,n5),e(n5,She),e(She,uVo),e(n5,bVo),e(n5,AV),e(AV,vVo),e(n5,FVo),e(H,TVo),e(H,s5),e(s5,Rhe),e(Rhe,MVo),e(s5,EVo),e(s5,yV),e(yV,CVo),e(s5,wVo),e(H,AVo),e(H,l5),e(l5,Phe),e(Phe,yVo),e(l5,LVo),e(l5,LV),e(LV,xVo),e(l5,$Vo),e(ao,kVo),e(ao,i5),e(i5,SVo),e(i5,Bhe),e(Bhe,RVo),e(i5,PVo),e(i5,Ihe),e(Ihe,BVo),e(ao,IVo),M(d5,ao,null),b(f,zqe,u),b(f,Ki,u),e(Ki,c5),e(c5,Nhe),M(HA,Nhe,null),e(Ki,NVo),e(Ki,qhe),e(qhe,qVo),b(f,Wqe,u),b(f,No,u),M(UA,No,null),e(No,jVo),e(No,Zi),e(Zi,DVo),e(Zi,xV),e(xV,GVo),e(Zi,OVo),e(Zi,$V),e($V,VVo),e(Zi,XVo),e(No,zVo),e(No,JA),e(JA,WVo),e(JA,jhe),e(jhe,QVo),e(JA,HVo),e(No,UVo),e(No,mt),M(YA,mt,null),e(mt,JVo),e(mt,Dhe),e(Dhe,YVo),e(mt,KVo),e(mt,ed),e(ed,ZVo),e(ed,Ghe),e(Ghe,eXo),e(ed,oXo),e(ed,kV),e(kV,rXo),e(ed,tXo),e(mt,aXo),M(f5,mt,null),e(No,nXo),e(No,no),M(KA,no,null),e(no,sXo),e(no,Ohe),e(Ohe,lXo),e(no,iXo),e(no,Na),e(Na,dXo),e(Na,Vhe),e(Vhe,cXo),e(Na,fXo),e(Na,Xhe),e(Xhe,mXo),e(Na,gXo),e(Na,zhe),e(zhe,hXo),e(Na,pXo),e(no,_Xo),e(no,V),e(V,m5),e(m5,Whe),e(Whe,uXo),e(m5,bXo),e(m5,SV),e(SV,vXo),e(m5,FXo),e(V,TXo),e(V,g5),e(g5,Qhe),e(Qhe,MXo),e(g5,EXo),e(g5,RV),e(RV,CXo),e(g5,wXo),e(V,AXo),e(V,h5),e(h5,Hhe),e(Hhe,yXo),e(h5,LXo),e(h5,PV),e(PV,xXo),e(h5,$Xo),e(V,kXo),e(V,p5),e(p5,Uhe),e(Uhe,SXo),e(p5,RXo),e(p5,BV),e(BV,PXo),e(p5,BXo),e(V,IXo),e(V,_5),e(_5,Jhe),e(Jhe,NXo),e(_5,qXo),e(_5,IV),e(IV,jXo),e(_5,DXo),e(V,GXo),e(V,u5),e(u5,Yhe),e(Yhe,OXo),e(u5,VXo),e(u5,NV),e(NV,XXo),e(u5,zXo),e(V,WXo),e(V,b5),e(b5,Khe),e(Khe,QXo),e(b5,HXo),e(b5,qV),e(qV,UXo),e(b5,JXo),e(V,YXo),e(V,v5),e(v5,Zhe),e(Zhe,KXo),e(v5,ZXo),e(v5,jV),e(jV,ezo),e(v5,ozo),e(V,rzo),e(V,F5),e(F5,epe),e(epe,tzo),e(F5,azo),e(F5,DV),e(DV,nzo),e(F5,szo),e(V,lzo),e(V,T5),e(T5,ope),e(ope,izo),e(T5,dzo),e(T5,GV),e(GV,czo),e(T5,fzo),e(V,mzo),e(V,M5),e(M5,rpe),e(rpe,gzo),e(M5,hzo),e(M5,OV),e(OV,pzo),e(M5,_zo),e(V,uzo),e(V,E5),e(E5,tpe),e(tpe,bzo),e(E5,vzo),e(E5,VV),e(VV,Fzo),e(E5,Tzo),e(V,Mzo),e(V,C5),e(C5,ape),e(ape,Ezo),e(C5,Czo),e(C5,XV),e(XV,wzo),e(C5,Azo),e(V,yzo),e(V,w5),e(w5,npe),e(npe,Lzo),e(w5,xzo),e(w5,zV),e(zV,$zo),e(w5,kzo),e(V,Szo),e(V,A5),e(A5,spe),e(spe,Rzo),e(A5,Pzo),e(A5,WV),e(WV,Bzo),e(A5,Izo),e(V,Nzo),e(V,y5),e(y5,lpe),e(lpe,qzo),e(y5,jzo),e(y5,QV),e(QV,Dzo),e(y5,Gzo),e(V,Ozo),e(V,L5),e(L5,ipe),e(ipe,Vzo),e(L5,Xzo),e(L5,HV),e(HV,zzo),e(L5,Wzo),e(V,Qzo),e(V,x5),e(x5,dpe),e(dpe,Hzo),e(x5,Uzo),e(x5,UV),e(UV,Jzo),e(x5,Yzo),e(V,Kzo),e(V,$5),e($5,cpe),e(cpe,Zzo),e($5,eWo),e($5,JV),e(JV,oWo),e($5,rWo),e(V,tWo),e(V,k5),e(k5,fpe),e(fpe,aWo),e(k5,nWo),e(k5,YV),e(YV,sWo),e(k5,lWo),e(V,iWo),e(V,S5),e(S5,mpe),e(mpe,dWo),e(S5,cWo),e(S5,KV),e(KV,fWo),e(S5,mWo),e(V,gWo),e(V,R5),e(R5,gpe),e(gpe,hWo),e(R5,pWo),e(R5,ZV),e(ZV,_Wo),e(R5,uWo),e(V,bWo),e(V,P5),e(P5,hpe),e(hpe,vWo),e(P5,FWo),e(P5,eX),e(eX,TWo),e(P5,MWo),e(V,EWo),e(V,B5),e(B5,ppe),e(ppe,CWo),e(B5,wWo),e(B5,oX),e(oX,AWo),e(B5,yWo),e(V,LWo),e(V,I5),e(I5,_pe),e(_pe,xWo),e(I5,$Wo),e(I5,rX),e(rX,kWo),e(I5,SWo),e(V,RWo),e(V,N5),e(N5,upe),e(upe,PWo),e(N5,BWo),e(N5,tX),e(tX,IWo),e(N5,NWo),e(V,qWo),e(V,q5),e(q5,bpe),e(bpe,jWo),e(q5,DWo),e(q5,aX),e(aX,GWo),e(q5,OWo),e(V,VWo),e(V,j5),e(j5,vpe),e(vpe,XWo),e(j5,zWo),e(j5,nX),e(nX,WWo),e(j5,QWo),e(V,HWo),e(V,D5),e(D5,Fpe),e(Fpe,UWo),e(D5,JWo),e(D5,sX),e(sX,YWo),e(D5,KWo),e(V,ZWo),e(V,G5),e(G5,Tpe),e(Tpe,eQo),e(G5,oQo),e(G5,lX),e(lX,rQo),e(G5,tQo),e(V,aQo),e(V,O5),e(O5,Mpe),e(Mpe,nQo),e(O5,sQo),e(O5,iX),e(iX,lQo),e(O5,iQo),e(V,dQo),e(V,V5),e(V5,Epe),e(Epe,cQo),e(V5,fQo),e(V5,dX),e(dX,mQo),e(V5,gQo),e(V,hQo),e(V,X5),e(X5,Cpe),e(Cpe,pQo),e(X5,_Qo),e(X5,cX),e(cX,uQo),e(X5,bQo),e(V,vQo),e(V,z5),e(z5,wpe),e(wpe,FQo),e(z5,TQo),e(z5,fX),e(fX,MQo),e(z5,EQo),e(V,CQo),e(V,W5),e(W5,Ape),e(Ape,wQo),e(W5,AQo),e(W5,mX),e(mX,yQo),e(W5,LQo),e(V,xQo),e(V,Q5),e(Q5,ype),e(ype,$Qo),e(Q5,kQo),e(Q5,gX),e(gX,SQo),e(Q5,RQo),e(V,PQo),e(V,H5),e(H5,Lpe),e(Lpe,BQo),e(H5,IQo),e(H5,hX),e(hX,NQo),e(H5,qQo),e(V,jQo),e(V,U5),e(U5,xpe),e(xpe,DQo),e(U5,GQo),e(U5,pX),e(pX,OQo),e(U5,VQo),e(V,XQo),e(V,J5),e(J5,$pe),e($pe,zQo),e(J5,WQo),e(J5,_X),e(_X,QQo),e(J5,HQo),e(V,UQo),e(V,Y5),e(Y5,kpe),e(kpe,JQo),e(Y5,YQo),e(Y5,uX),e(uX,KQo),e(Y5,ZQo),e(no,eHo),e(no,K5),e(K5,oHo),e(K5,Spe),e(Spe,rHo),e(K5,tHo),e(K5,Rpe),e(Rpe,aHo),e(no,nHo),M(Z5,no,null),b(f,Qqe,u),b(f,od,u),e(od,ev),e(ev,Ppe),M(ZA,Ppe,null),e(od,sHo),e(od,Bpe),e(Bpe,lHo),b(f,Hqe,u),b(f,qo,u),M(ey,qo,null),e(qo,iHo),e(qo,rd),e(rd,dHo),e(rd,bX),e(bX,cHo),e(rd,fHo),e(rd,vX),e(vX,mHo),e(rd,gHo),e(qo,hHo),e(qo,oy),e(oy,pHo),e(oy,Ipe),e(Ipe,_Ho),e(oy,uHo),e(qo,bHo),e(qo,gt),M(ry,gt,null),e(gt,vHo),e(gt,Npe),e(Npe,FHo),e(gt,THo),e(gt,td),e(td,MHo),e(td,qpe),e(qpe,EHo),e(td,CHo),e(td,FX),e(FX,wHo),e(td,AHo),e(gt,yHo),M(ov,gt,null),e(qo,LHo),e(qo,so),M(ty,so,null),e(so,xHo),e(so,jpe),e(jpe,$Ho),e(so,kHo),e(so,qa),e(qa,SHo),e(qa,Dpe),e(Dpe,RHo),e(qa,PHo),e(qa,Gpe),e(Gpe,BHo),e(qa,IHo),e(qa,Ope),e(Ope,NHo),e(qa,qHo),e(so,jHo),e(so,Vpe),e(Vpe,rv),e(rv,Xpe),e(Xpe,DHo),e(rv,GHo),e(rv,TX),e(TX,OHo),e(rv,VHo),e(so,XHo),e(so,tv),e(tv,zHo),e(tv,zpe),e(zpe,WHo),e(tv,QHo),e(tv,Wpe),e(Wpe,HHo),e(so,UHo),M(av,so,null),b(f,Uqe,u),b(f,ad,u),e(ad,nv),e(nv,Qpe),M(ay,Qpe,null),e(ad,JHo),e(ad,Hpe),e(Hpe,YHo),b(f,Jqe,u),b(f,jo,u),M(ny,jo,null),e(jo,KHo),e(jo,nd),e(nd,ZHo),e(nd,MX),e(MX,eUo),e(nd,oUo),e(nd,EX),e(EX,rUo),e(nd,tUo),e(jo,aUo),e(jo,sy),e(sy,nUo),e(sy,Upe),e(Upe,sUo),e(sy,lUo),e(jo,iUo),e(jo,ht),M(ly,ht,null),e(ht,dUo),e(ht,Jpe),e(Jpe,cUo),e(ht,fUo),e(ht,sd),e(sd,mUo),e(sd,Ype),e(Ype,gUo),e(sd,hUo),e(sd,CX),e(CX,pUo),e(sd,_Uo),e(ht,uUo),M(sv,ht,null),e(jo,bUo),e(jo,lo),M(iy,lo,null),e(lo,vUo),e(lo,Kpe),e(Kpe,FUo),e(lo,TUo),e(lo,ja),e(ja,MUo),e(ja,Zpe),e(Zpe,EUo),e(ja,CUo),e(ja,e_e),e(e_e,wUo),e(ja,AUo),e(ja,o_e),e(o_e,yUo),e(ja,LUo),e(lo,xUo),e(lo,Fe),e(Fe,lv),e(lv,r_e),e(r_e,$Uo),e(lv,kUo),e(lv,wX),e(wX,SUo),e(lv,RUo),e(Fe,PUo),e(Fe,iv),e(iv,t_e),e(t_e,BUo),e(iv,IUo),e(iv,AX),e(AX,NUo),e(iv,qUo),e(Fe,jUo),e(Fe,dv),e(dv,a_e),e(a_e,DUo),e(dv,GUo),e(dv,yX),e(yX,OUo),e(dv,VUo),e(Fe,XUo),e(Fe,cv),e(cv,n_e),e(n_e,zUo),e(cv,WUo),e(cv,LX),e(LX,QUo),e(cv,HUo),e(Fe,UUo),e(Fe,Bs),e(Bs,s_e),e(s_e,JUo),e(Bs,YUo),e(Bs,xX),e(xX,KUo),e(Bs,ZUo),e(Bs,$X),e($X,eJo),e(Bs,oJo),e(Fe,rJo),e(Fe,fv),e(fv,l_e),e(l_e,tJo),e(fv,aJo),e(fv,kX),e(kX,nJo),e(fv,sJo),e(Fe,lJo),e(Fe,pt),e(pt,i_e),e(i_e,iJo),e(pt,dJo),e(pt,SX),e(SX,cJo),e(pt,fJo),e(pt,RX),e(RX,mJo),e(pt,gJo),e(pt,PX),e(PX,hJo),e(pt,pJo),e(Fe,_Jo),e(Fe,mv),e(mv,d_e),e(d_e,uJo),e(mv,bJo),e(mv,BX),e(BX,vJo),e(mv,FJo),e(Fe,TJo),e(Fe,gv),e(gv,c_e),e(c_e,MJo),e(gv,EJo),e(gv,IX),e(IX,CJo),e(gv,wJo),e(Fe,AJo),e(Fe,hv),e(hv,f_e),e(f_e,yJo),e(hv,LJo),e(hv,NX),e(NX,xJo),e(hv,$Jo),e(Fe,kJo),e(Fe,pv),e(pv,m_e),e(m_e,SJo),e(pv,RJo),e(pv,qX),e(qX,PJo),e(pv,BJo),e(Fe,IJo),e(Fe,_v),e(_v,g_e),e(g_e,NJo),e(_v,qJo),e(_v,jX),e(jX,jJo),e(_v,DJo),e(Fe,GJo),e(Fe,uv),e(uv,h_e),e(h_e,OJo),e(uv,VJo),e(uv,DX),e(DX,XJo),e(uv,zJo),e(Fe,WJo),e(Fe,bv),e(bv,p_e),e(p_e,QJo),e(bv,HJo),e(bv,GX),e(GX,UJo),e(bv,JJo),e(lo,YJo),e(lo,vv),e(vv,KJo),e(vv,__e),e(__e,ZJo),e(vv,eYo),e(vv,u_e),e(u_e,oYo),e(lo,rYo),M(Fv,lo,null),b(f,Yqe,u),b(f,ld,u),e(ld,Tv),e(Tv,b_e),M(dy,b_e,null),e(ld,tYo),e(ld,v_e),e(v_e,aYo),b(f,Kqe,u),b(f,Do,u),M(cy,Do,null),e(Do,nYo),e(Do,id),e(id,sYo),e(id,OX),e(OX,lYo),e(id,iYo),e(id,VX),e(VX,dYo),e(id,cYo),e(Do,fYo),e(Do,fy),e(fy,mYo),e(fy,F_e),e(F_e,gYo),e(fy,hYo),e(Do,pYo),e(Do,_t),M(my,_t,null),e(_t,_Yo),e(_t,T_e),e(T_e,uYo),e(_t,bYo),e(_t,dd),e(dd,vYo),e(dd,M_e),e(M_e,FYo),e(dd,TYo),e(dd,XX),e(XX,MYo),e(dd,EYo),e(_t,CYo),M(Mv,_t,null),e(Do,wYo),e(Do,io),M(gy,io,null),e(io,AYo),e(io,E_e),e(E_e,yYo),e(io,LYo),e(io,Da),e(Da,xYo),e(Da,C_e),e(C_e,$Yo),e(Da,kYo),e(Da,w_e),e(w_e,SYo),e(Da,RYo),e(Da,A_e),e(A_e,PYo),e(Da,BYo),e(io,IYo),e(io,y_e),e(y_e,Ev),e(Ev,L_e),e(L_e,NYo),e(Ev,qYo),e(Ev,zX),e(zX,jYo),e(Ev,DYo),e(io,GYo),e(io,Cv),e(Cv,OYo),e(Cv,x_e),e(x_e,VYo),e(Cv,XYo),e(Cv,$_e),e($_e,zYo),e(io,WYo),M(wv,io,null),b(f,Zqe,u),b(f,cd,u),e(cd,Av),e(Av,k_e),M(hy,k_e,null),e(cd,QYo),e(cd,S_e),e(S_e,HYo),b(f,eje,u),b(f,Go,u),M(py,Go,null),e(Go,UYo),e(Go,fd),e(fd,JYo),e(fd,WX),e(WX,YYo),e(fd,KYo),e(fd,QX),e(QX,ZYo),e(fd,eKo),e(Go,oKo),e(Go,_y),e(_y,rKo),e(_y,R_e),e(R_e,tKo),e(_y,aKo),e(Go,nKo),e(Go,ut),M(uy,ut,null),e(ut,sKo),e(ut,P_e),e(P_e,lKo),e(ut,iKo),e(ut,md),e(md,dKo),e(md,B_e),e(B_e,cKo),e(md,fKo),e(md,HX),e(HX,mKo),e(md,gKo),e(ut,hKo),M(yv,ut,null),e(Go,pKo),e(Go,co),M(by,co,null),e(co,_Ko),e(co,I_e),e(I_e,uKo),e(co,bKo),e(co,Ga),e(Ga,vKo),e(Ga,N_e),e(N_e,FKo),e(Ga,TKo),e(Ga,q_e),e(q_e,MKo),e(Ga,EKo),e(Ga,j_e),e(j_e,CKo),e(Ga,wKo),e(co,AKo),e(co,Se),e(Se,Lv),e(Lv,D_e),e(D_e,yKo),e(Lv,LKo),e(Lv,UX),e(UX,xKo),e(Lv,$Ko),e(Se,kKo),e(Se,xv),e(xv,G_e),e(G_e,SKo),e(xv,RKo),e(xv,JX),e(JX,PKo),e(xv,BKo),e(Se,IKo),e(Se,$v),e($v,O_e),e(O_e,NKo),e($v,qKo),e($v,YX),e(YX,jKo),e($v,DKo),e(Se,GKo),e(Se,kv),e(kv,V_e),e(V_e,OKo),e(kv,VKo),e(kv,KX),e(KX,XKo),e(kv,zKo),e(Se,WKo),e(Se,Sv),e(Sv,X_e),e(X_e,QKo),e(Sv,HKo),e(Sv,ZX),e(ZX,UKo),e(Sv,JKo),e(Se,YKo),e(Se,Rv),e(Rv,z_e),e(z_e,KKo),e(Rv,ZKo),e(Rv,ez),e(ez,eZo),e(Rv,oZo),e(Se,rZo),e(Se,Pv),e(Pv,W_e),e(W_e,tZo),e(Pv,aZo),e(Pv,oz),e(oz,nZo),e(Pv,sZo),e(Se,lZo),e(Se,Bv),e(Bv,Q_e),e(Q_e,iZo),e(Bv,dZo),e(Bv,rz),e(rz,cZo),e(Bv,fZo),e(Se,mZo),e(Se,Iv),e(Iv,H_e),e(H_e,gZo),e(Iv,hZo),e(Iv,tz),e(tz,pZo),e(Iv,_Zo),e(co,uZo),e(co,Nv),e(Nv,bZo),e(Nv,U_e),e(U_e,vZo),e(Nv,FZo),e(Nv,J_e),e(J_e,TZo),e(co,MZo),M(qv,co,null),b(f,oje,u),b(f,gd,u),e(gd,jv),e(jv,Y_e),M(vy,Y_e,null),e(gd,EZo),e(gd,K_e),e(K_e,CZo),b(f,rje,u),b(f,Oo,u),M(Fy,Oo,null),e(Oo,wZo),e(Oo,hd),e(hd,AZo),e(hd,az),e(az,yZo),e(hd,LZo),e(hd,nz),e(nz,xZo),e(hd,$Zo),e(Oo,kZo),e(Oo,Ty),e(Ty,SZo),e(Ty,Z_e),e(Z_e,RZo),e(Ty,PZo),e(Oo,BZo),e(Oo,bt),M(My,bt,null),e(bt,IZo),e(bt,eue),e(eue,NZo),e(bt,qZo),e(bt,pd),e(pd,jZo),e(pd,oue),e(oue,DZo),e(pd,GZo),e(pd,sz),e(sz,OZo),e(pd,VZo),e(bt,XZo),M(Dv,bt,null),e(Oo,zZo),e(Oo,fo),M(Ey,fo,null),e(fo,WZo),e(fo,rue),e(rue,QZo),e(fo,HZo),e(fo,Oa),e(Oa,UZo),e(Oa,tue),e(tue,JZo),e(Oa,YZo),e(Oa,aue),e(aue,KZo),e(Oa,ZZo),e(Oa,nue),e(nue,eer),e(Oa,oer),e(fo,rer),e(fo,Kr),e(Kr,Gv),e(Gv,sue),e(sue,ter),e(Gv,aer),e(Gv,lz),e(lz,ner),e(Gv,ser),e(Kr,ler),e(Kr,Ov),e(Ov,lue),e(lue,ier),e(Ov,der),e(Ov,iz),e(iz,cer),e(Ov,fer),e(Kr,mer),e(Kr,Vv),e(Vv,iue),e(iue,ger),e(Vv,her),e(Vv,dz),e(dz,per),e(Vv,_er),e(Kr,uer),e(Kr,Xv),e(Xv,due),e(due,ber),e(Xv,ver),e(Xv,cz),e(cz,Fer),e(Xv,Ter),e(Kr,Mer),e(Kr,zv),e(zv,cue),e(cue,Eer),e(zv,Cer),e(zv,fz),e(fz,wer),e(zv,Aer),e(fo,yer),e(fo,Wv),e(Wv,Ler),e(Wv,fue),e(fue,xer),e(Wv,$er),e(Wv,mue),e(mue,ker),e(fo,Ser),M(Qv,fo,null),b(f,tje,u),b(f,_d,u),e(_d,Hv),e(Hv,gue),M(Cy,gue,null),e(_d,Rer),e(_d,hue),e(hue,Per),b(f,aje,u),b(f,Vo,u),M(wy,Vo,null),e(Vo,Ber),e(Vo,ud),e(ud,Ier),e(ud,mz),e(mz,Ner),e(ud,qer),e(ud,gz),e(gz,jer),e(ud,Der),e(Vo,Ger),e(Vo,Ay),e(Ay,Oer),e(Ay,pue),e(pue,Ver),e(Ay,Xer),e(Vo,zer),e(Vo,vt),M(yy,vt,null),e(vt,Wer),e(vt,_ue),e(_ue,Qer),e(vt,Her),e(vt,bd),e(bd,Uer),e(bd,uue),e(uue,Jer),e(bd,Yer),e(bd,hz),e(hz,Ker),e(bd,Zer),e(vt,eor),M(Uv,vt,null),e(Vo,oor),e(Vo,mo),M(Ly,mo,null),e(mo,ror),e(mo,bue),e(bue,tor),e(mo,aor),e(mo,Va),e(Va,nor),e(Va,vue),e(vue,sor),e(Va,lor),e(Va,Fue),e(Fue,ior),e(Va,dor),e(Va,Tue),e(Tue,cor),e(Va,mor),e(mo,gor),e(mo,Re),e(Re,Jv),e(Jv,Mue),e(Mue,hor),e(Jv,por),e(Jv,pz),e(pz,_or),e(Jv,uor),e(Re,bor),e(Re,Yv),e(Yv,Eue),e(Eue,vor),e(Yv,For),e(Yv,_z),e(_z,Tor),e(Yv,Mor),e(Re,Eor),e(Re,Kv),e(Kv,Cue),e(Cue,Cor),e(Kv,wor),e(Kv,uz),e(uz,Aor),e(Kv,yor),e(Re,Lor),e(Re,Zv),e(Zv,wue),e(wue,xor),e(Zv,$or),e(Zv,bz),e(bz,kor),e(Zv,Sor),e(Re,Ror),e(Re,eF),e(eF,Aue),e(Aue,Por),e(eF,Bor),e(eF,vz),e(vz,Ior),e(eF,Nor),e(Re,qor),e(Re,oF),e(oF,yue),e(yue,jor),e(oF,Dor),e(oF,Fz),e(Fz,Gor),e(oF,Oor),e(Re,Vor),e(Re,rF),e(rF,Lue),e(Lue,Xor),e(rF,zor),e(rF,Tz),e(Tz,Wor),e(rF,Qor),e(Re,Hor),e(Re,tF),e(tF,xue),e(xue,Uor),e(tF,Jor),e(tF,Mz),e(Mz,Yor),e(tF,Kor),e(Re,Zor),e(Re,aF),e(aF,$ue),e($ue,err),e(aF,orr),e(aF,Ez),e(Ez,rrr),e(aF,trr),e(mo,arr),e(mo,nF),e(nF,nrr),e(nF,kue),e(kue,srr),e(nF,lrr),e(nF,Sue),e(Sue,irr),e(mo,drr),M(sF,mo,null),b(f,nje,u),b(f,vd,u),e(vd,lF),e(lF,Rue),M(xy,Rue,null),e(vd,crr),e(vd,Pue),e(Pue,frr),b(f,sje,u),b(f,Xo,u),M($y,Xo,null),e(Xo,mrr),e(Xo,Fd),e(Fd,grr),e(Fd,Cz),e(Cz,hrr),e(Fd,prr),e(Fd,wz),e(wz,_rr),e(Fd,urr),e(Xo,brr),e(Xo,ky),e(ky,vrr),e(ky,Bue),e(Bue,Frr),e(ky,Trr),e(Xo,Mrr),e(Xo,Ft),M(Sy,Ft,null),e(Ft,Err),e(Ft,Iue),e(Iue,Crr),e(Ft,wrr),e(Ft,Td),e(Td,Arr),e(Td,Nue),e(Nue,yrr),e(Td,Lrr),e(Td,Az),e(Az,xrr),e(Td,$rr),e(Ft,krr),M(iF,Ft,null),e(Xo,Srr),e(Xo,go),M(Ry,go,null),e(go,Rrr),e(go,que),e(que,Prr),e(go,Brr),e(go,Xa),e(Xa,Irr),e(Xa,jue),e(jue,Nrr),e(Xa,qrr),e(Xa,Due),e(Due,jrr),e(Xa,Drr),e(Xa,Gue),e(Gue,Grr),e(Xa,Orr),e(go,Vrr),e(go,Py),e(Py,dF),e(dF,Oue),e(Oue,Xrr),e(dF,zrr),e(dF,yz),e(yz,Wrr),e(dF,Qrr),e(Py,Hrr),e(Py,cF),e(cF,Vue),e(Vue,Urr),e(cF,Jrr),e(cF,Lz),e(Lz,Yrr),e(cF,Krr),e(go,Zrr),e(go,fF),e(fF,etr),e(fF,Xue),e(Xue,otr),e(fF,rtr),e(fF,zue),e(zue,ttr),e(go,atr),M(mF,go,null),b(f,lje,u),b(f,Md,u),e(Md,gF),e(gF,Wue),M(By,Wue,null),e(Md,ntr),e(Md,Que),e(Que,str),b(f,ije,u),b(f,zo,u),M(Iy,zo,null),e(zo,ltr),e(zo,Ed),e(Ed,itr),e(Ed,xz),e(xz,dtr),e(Ed,ctr),e(Ed,$z),e($z,ftr),e(Ed,mtr),e(zo,gtr),e(zo,Ny),e(Ny,htr),e(Ny,Hue),e(Hue,ptr),e(Ny,_tr),e(zo,utr),e(zo,Tt),M(qy,Tt,null),e(Tt,btr),e(Tt,Uue),e(Uue,vtr),e(Tt,Ftr),e(Tt,Cd),e(Cd,Ttr),e(Cd,Jue),e(Jue,Mtr),e(Cd,Etr),e(Cd,kz),e(kz,Ctr),e(Cd,wtr),e(Tt,Atr),M(hF,Tt,null),e(zo,ytr),e(zo,ho),M(jy,ho,null),e(ho,Ltr),e(ho,Yue),e(Yue,xtr),e(ho,$tr),e(ho,za),e(za,ktr),e(za,Kue),e(Kue,Str),e(za,Rtr),e(za,Zue),e(Zue,Ptr),e(za,Btr),e(za,e1e),e(e1e,Itr),e(za,Ntr),e(ho,qtr),e(ho,Zr),e(Zr,pF),e(pF,o1e),e(o1e,jtr),e(pF,Dtr),e(pF,Sz),e(Sz,Gtr),e(pF,Otr),e(Zr,Vtr),e(Zr,_F),e(_F,r1e),e(r1e,Xtr),e(_F,ztr),e(_F,Rz),e(Rz,Wtr),e(_F,Qtr),e(Zr,Htr),e(Zr,uF),e(uF,t1e),e(t1e,Utr),e(uF,Jtr),e(uF,Pz),e(Pz,Ytr),e(uF,Ktr),e(Zr,Ztr),e(Zr,bF),e(bF,a1e),e(a1e,ear),e(bF,oar),e(bF,Bz),e(Bz,rar),e(bF,tar),e(Zr,aar),e(Zr,vF),e(vF,n1e),e(n1e,nar),e(vF,sar),e(vF,Iz),e(Iz,lar),e(vF,iar),e(ho,dar),e(ho,FF),e(FF,car),e(FF,s1e),e(s1e,far),e(FF,mar),e(FF,l1e),e(l1e,gar),e(ho,har),M(TF,ho,null),b(f,dje,u),b(f,wd,u),e(wd,MF),e(MF,i1e),M(Dy,i1e,null),e(wd,par),e(wd,d1e),e(d1e,_ar),b(f,cje,u),b(f,Wo,u),M(Gy,Wo,null),e(Wo,uar),e(Wo,Ad),e(Ad,bar),e(Ad,Nz),e(Nz,Far),e(Ad,Tar),e(Ad,qz),e(qz,Mar),e(Ad,Ear),e(Wo,Car),e(Wo,Oy),e(Oy,war),e(Oy,c1e),e(c1e,Aar),e(Oy,yar),e(Wo,Lar),e(Wo,Mt),M(Vy,Mt,null),e(Mt,xar),e(Mt,f1e),e(f1e,$ar),e(Mt,kar),e(Mt,yd),e(yd,Sar),e(yd,m1e),e(m1e,Rar),e(yd,Par),e(yd,jz),e(jz,Bar),e(yd,Iar),e(Mt,Nar),M(EF,Mt,null),e(Wo,qar),e(Wo,po),M(Xy,po,null),e(po,jar),e(po,g1e),e(g1e,Dar),e(po,Gar),e(po,Wa),e(Wa,Oar),e(Wa,h1e),e(h1e,Var),e(Wa,Xar),e(Wa,p1e),e(p1e,zar),e(Wa,War),e(Wa,_1e),e(_1e,Qar),e(Wa,Har),e(po,Uar),e(po,Ld),e(Ld,CF),e(CF,u1e),e(u1e,Jar),e(CF,Yar),e(CF,Dz),e(Dz,Kar),e(CF,Zar),e(Ld,enr),e(Ld,wF),e(wF,b1e),e(b1e,onr),e(wF,rnr),e(wF,Gz),e(Gz,tnr),e(wF,anr),e(Ld,nnr),e(Ld,AF),e(AF,v1e),e(v1e,snr),e(AF,lnr),e(AF,Oz),e(Oz,inr),e(AF,dnr),e(po,cnr),e(po,yF),e(yF,fnr),e(yF,F1e),e(F1e,mnr),e(yF,gnr),e(yF,T1e),e(T1e,hnr),e(po,pnr),M(LF,po,null),b(f,fje,u),b(f,xd,u),e(xd,xF),e(xF,M1e),M(zy,M1e,null),e(xd,_nr),e(xd,E1e),e(E1e,unr),b(f,mje,u),b(f,Qo,u),M(Wy,Qo,null),e(Qo,bnr),e(Qo,$d),e($d,vnr),e($d,Vz),e(Vz,Fnr),e($d,Tnr),e($d,Xz),e(Xz,Mnr),e($d,Enr),e(Qo,Cnr),e(Qo,Qy),e(Qy,wnr),e(Qy,C1e),e(C1e,Anr),e(Qy,ynr),e(Qo,Lnr),e(Qo,Et),M(Hy,Et,null),e(Et,xnr),e(Et,w1e),e(w1e,$nr),e(Et,knr),e(Et,kd),e(kd,Snr),e(kd,A1e),e(A1e,Rnr),e(kd,Pnr),e(kd,zz),e(zz,Bnr),e(kd,Inr),e(Et,Nnr),M($F,Et,null),e(Qo,qnr),e(Qo,_o),M(Uy,_o,null),e(_o,jnr),e(_o,y1e),e(y1e,Dnr),e(_o,Gnr),e(_o,Qa),e(Qa,Onr),e(Qa,L1e),e(L1e,Vnr),e(Qa,Xnr),e(Qa,x1e),e(x1e,znr),e(Qa,Wnr),e(Qa,$1e),e($1e,Qnr),e(Qa,Hnr),e(_o,Unr),e(_o,Jy),e(Jy,kF),e(kF,k1e),e(k1e,Jnr),e(kF,Ynr),e(kF,Wz),e(Wz,Knr),e(kF,Znr),e(Jy,esr),e(Jy,SF),e(SF,S1e),e(S1e,osr),e(SF,rsr),e(SF,Qz),e(Qz,tsr),e(SF,asr),e(_o,nsr),e(_o,RF),e(RF,ssr),e(RF,R1e),e(R1e,lsr),e(RF,isr),e(RF,P1e),e(P1e,dsr),e(_o,csr),M(PF,_o,null),b(f,gje,u),b(f,Sd,u),e(Sd,BF),e(BF,B1e),M(Yy,B1e,null),e(Sd,fsr),e(Sd,I1e),e(I1e,msr),b(f,hje,u),b(f,Ho,u),M(Ky,Ho,null),e(Ho,gsr),e(Ho,Rd),e(Rd,hsr),e(Rd,Hz),e(Hz,psr),e(Rd,_sr),e(Rd,Uz),e(Uz,usr),e(Rd,bsr),e(Ho,vsr),e(Ho,Zy),e(Zy,Fsr),e(Zy,N1e),e(N1e,Tsr),e(Zy,Msr),e(Ho,Esr),e(Ho,Ct),M(eL,Ct,null),e(Ct,Csr),e(Ct,q1e),e(q1e,wsr),e(Ct,Asr),e(Ct,Pd),e(Pd,ysr),e(Pd,j1e),e(j1e,Lsr),e(Pd,xsr),e(Pd,Jz),e(Jz,$sr),e(Pd,ksr),e(Ct,Ssr),M(IF,Ct,null),e(Ho,Rsr),e(Ho,uo),M(oL,uo,null),e(uo,Psr),e(uo,D1e),e(D1e,Bsr),e(uo,Isr),e(uo,Ha),e(Ha,Nsr),e(Ha,G1e),e(G1e,qsr),e(Ha,jsr),e(Ha,O1e),e(O1e,Dsr),e(Ha,Gsr),e(Ha,V1e),e(V1e,Osr),e(Ha,Vsr),e(uo,Xsr),e(uo,X1e),e(X1e,NF),e(NF,z1e),e(z1e,zsr),e(NF,Wsr),e(NF,Yz),e(Yz,Qsr),e(NF,Hsr),e(uo,Usr),e(uo,qF),e(qF,Jsr),e(qF,W1e),e(W1e,Ysr),e(qF,Ksr),e(qF,Q1e),e(Q1e,Zsr),e(uo,elr),M(jF,uo,null),b(f,pje,u),b(f,Bd,u),e(Bd,DF),e(DF,H1e),M(rL,H1e,null),e(Bd,olr),e(Bd,U1e),e(U1e,rlr),b(f,_je,u),b(f,Uo,u),M(tL,Uo,null),e(Uo,tlr),e(Uo,Id),e(Id,alr),e(Id,Kz),e(Kz,nlr),e(Id,slr),e(Id,Zz),e(Zz,llr),e(Id,ilr),e(Uo,dlr),e(Uo,aL),e(aL,clr),e(aL,J1e),e(J1e,flr),e(aL,mlr),e(Uo,glr),e(Uo,wt),M(nL,wt,null),e(wt,hlr),e(wt,Y1e),e(Y1e,plr),e(wt,_lr),e(wt,Nd),e(Nd,ulr),e(Nd,K1e),e(K1e,blr),e(Nd,vlr),e(Nd,eW),e(eW,Flr),e(Nd,Tlr),e(wt,Mlr),M(GF,wt,null),e(Uo,Elr),e(Uo,bo),M(sL,bo,null),e(bo,Clr),e(bo,Z1e),e(Z1e,wlr),e(bo,Alr),e(bo,Ua),e(Ua,ylr),e(Ua,ebe),e(ebe,Llr),e(Ua,xlr),e(Ua,obe),e(obe,$lr),e(Ua,klr),e(Ua,rbe),e(rbe,Slr),e(Ua,Rlr),e(bo,Plr),e(bo,Ja),e(Ja,OF),e(OF,tbe),e(tbe,Blr),e(OF,Ilr),e(OF,oW),e(oW,Nlr),e(OF,qlr),e(Ja,jlr),e(Ja,VF),e(VF,abe),e(abe,Dlr),e(VF,Glr),e(VF,rW),e(rW,Olr),e(VF,Vlr),e(Ja,Xlr),e(Ja,XF),e(XF,nbe),e(nbe,zlr),e(XF,Wlr),e(XF,tW),e(tW,Qlr),e(XF,Hlr),e(Ja,Ulr),e(Ja,zF),e(zF,sbe),e(sbe,Jlr),e(zF,Ylr),e(zF,aW),e(aW,Klr),e(zF,Zlr),e(bo,eir),e(bo,WF),e(WF,oir),e(WF,lbe),e(lbe,rir),e(WF,tir),e(WF,ibe),e(ibe,air),e(bo,nir),M(QF,bo,null),b(f,uje,u),b(f,qd,u),e(qd,HF),e(HF,dbe),M(lL,dbe,null),e(qd,sir),e(qd,cbe),e(cbe,lir),b(f,bje,u),b(f,Jo,u),M(iL,Jo,null),e(Jo,iir),e(Jo,jd),e(jd,dir),e(jd,nW),e(nW,cir),e(jd,fir),e(jd,sW),e(sW,mir),e(jd,gir),e(Jo,hir),e(Jo,dL),e(dL,pir),e(dL,fbe),e(fbe,_ir),e(dL,uir),e(Jo,bir),e(Jo,At),M(cL,At,null),e(At,vir),e(At,mbe),e(mbe,Fir),e(At,Tir),e(At,Dd),e(Dd,Mir),e(Dd,gbe),e(gbe,Eir),e(Dd,Cir),e(Dd,lW),e(lW,wir),e(Dd,Air),e(At,yir),M(UF,At,null),e(Jo,Lir),e(Jo,vo),M(fL,vo,null),e(vo,xir),e(vo,hbe),e(hbe,$ir),e(vo,kir),e(vo,Ya),e(Ya,Sir),e(Ya,pbe),e(pbe,Rir),e(Ya,Pir),e(Ya,_be),e(_be,Bir),e(Ya,Iir),e(Ya,ube),e(ube,Nir),e(Ya,qir),e(vo,jir),e(vo,bbe),e(bbe,JF),e(JF,vbe),e(vbe,Dir),e(JF,Gir),e(JF,iW),e(iW,Oir),e(JF,Vir),e(vo,Xir),e(vo,YF),e(YF,zir),e(YF,Fbe),e(Fbe,Wir),e(YF,Qir),e(YF,Tbe),e(Tbe,Hir),e(vo,Uir),M(KF,vo,null),b(f,vje,u),b(f,Gd,u),e(Gd,ZF),e(ZF,Mbe),M(mL,Mbe,null),e(Gd,Jir),e(Gd,Ebe),e(Ebe,Yir),b(f,Fje,u),b(f,Yo,u),M(gL,Yo,null),e(Yo,Kir),e(Yo,Od),e(Od,Zir),e(Od,dW),e(dW,edr),e(Od,odr),e(Od,cW),e(cW,rdr),e(Od,tdr),e(Yo,adr),e(Yo,hL),e(hL,ndr),e(hL,Cbe),e(Cbe,sdr),e(hL,ldr),e(Yo,idr),e(Yo,yt),M(pL,yt,null),e(yt,ddr),e(yt,wbe),e(wbe,cdr),e(yt,fdr),e(yt,Vd),e(Vd,mdr),e(Vd,Abe),e(Abe,gdr),e(Vd,hdr),e(Vd,fW),e(fW,pdr),e(Vd,_dr),e(yt,udr),M(eT,yt,null),e(Yo,bdr),e(Yo,wr),M(_L,wr,null),e(wr,vdr),e(wr,ybe),e(ybe,Fdr),e(wr,Tdr),e(wr,Ka),e(Ka,Mdr),e(Ka,Lbe),e(Lbe,Edr),e(Ka,Cdr),e(Ka,xbe),e(xbe,wdr),e(Ka,Adr),e(Ka,$be),e($be,ydr),e(Ka,Ldr),e(wr,xdr),e(wr,q),e(q,oT),e(oT,kbe),e(kbe,$dr),e(oT,kdr),e(oT,mW),e(mW,Sdr),e(oT,Rdr),e(q,Pdr),e(q,rT),e(rT,Sbe),e(Sbe,Bdr),e(rT,Idr),e(rT,gW),e(gW,Ndr),e(rT,qdr),e(q,jdr),e(q,tT),e(tT,Rbe),e(Rbe,Ddr),e(tT,Gdr),e(tT,hW),e(hW,Odr),e(tT,Vdr),e(q,Xdr),e(q,aT),e(aT,Pbe),e(Pbe,zdr),e(aT,Wdr),e(aT,pW),e(pW,Qdr),e(aT,Hdr),e(q,Udr),e(q,nT),e(nT,Bbe),e(Bbe,Jdr),e(nT,Ydr),e(nT,_W),e(_W,Kdr),e(nT,Zdr),e(q,ecr),e(q,sT),e(sT,Ibe),e(Ibe,ocr),e(sT,rcr),e(sT,uW),e(uW,tcr),e(sT,acr),e(q,ncr),e(q,lT),e(lT,Nbe),e(Nbe,scr),e(lT,lcr),e(lT,bW),e(bW,icr),e(lT,dcr),e(q,ccr),e(q,iT),e(iT,qbe),e(qbe,fcr),e(iT,mcr),e(iT,vW),e(vW,gcr),e(iT,hcr),e(q,pcr),e(q,dT),e(dT,jbe),e(jbe,_cr),e(dT,ucr),e(dT,FW),e(FW,bcr),e(dT,vcr),e(q,Fcr),e(q,cT),e(cT,Dbe),e(Dbe,Tcr),e(cT,Mcr),e(cT,TW),e(TW,Ecr),e(cT,Ccr),e(q,wcr),e(q,fT),e(fT,Gbe),e(Gbe,Acr),e(fT,ycr),e(fT,MW),e(MW,Lcr),e(fT,xcr),e(q,$cr),e(q,mT),e(mT,Obe),e(Obe,kcr),e(mT,Scr),e(mT,EW),e(EW,Rcr),e(mT,Pcr),e(q,Bcr),e(q,gT),e(gT,Vbe),e(Vbe,Icr),e(gT,Ncr),e(gT,CW),e(CW,qcr),e(gT,jcr),e(q,Dcr),e(q,hT),e(hT,Xbe),e(Xbe,Gcr),e(hT,Ocr),e(hT,wW),e(wW,Vcr),e(hT,Xcr),e(q,zcr),e(q,pT),e(pT,zbe),e(zbe,Wcr),e(pT,Qcr),e(pT,AW),e(AW,Hcr),e(pT,Ucr),e(q,Jcr),e(q,_T),e(_T,Wbe),e(Wbe,Ycr),e(_T,Kcr),e(_T,yW),e(yW,Zcr),e(_T,efr),e(q,ofr),e(q,uT),e(uT,Qbe),e(Qbe,rfr),e(uT,tfr),e(uT,LW),e(LW,afr),e(uT,nfr),e(q,sfr),e(q,Is),e(Is,Hbe),e(Hbe,lfr),e(Is,ifr),e(Is,xW),e(xW,dfr),e(Is,cfr),e(Is,$W),e($W,ffr),e(Is,mfr),e(q,gfr),e(q,bT),e(bT,Ube),e(Ube,hfr),e(bT,pfr),e(bT,kW),e(kW,_fr),e(bT,ufr),e(q,bfr),e(q,vT),e(vT,Jbe),e(Jbe,vfr),e(vT,Ffr),e(vT,SW),e(SW,Tfr),e(vT,Mfr),e(q,Efr),e(q,FT),e(FT,Ybe),e(Ybe,Cfr),e(FT,wfr),e(FT,RW),e(RW,Afr),e(FT,yfr),e(q,Lfr),e(q,TT),e(TT,Kbe),e(Kbe,xfr),e(TT,$fr),e(TT,PW),e(PW,kfr),e(TT,Sfr),e(q,Rfr),e(q,MT),e(MT,Zbe),e(Zbe,Pfr),e(MT,Bfr),e(MT,BW),e(BW,Ifr),e(MT,Nfr),e(q,qfr),e(q,ET),e(ET,e2e),e(e2e,jfr),e(ET,Dfr),e(ET,IW),e(IW,Gfr),e(ET,Ofr),e(q,Vfr),e(q,CT),e(CT,o2e),e(o2e,Xfr),e(CT,zfr),e(CT,NW),e(NW,Wfr),e(CT,Qfr),e(q,Hfr),e(q,wT),e(wT,r2e),e(r2e,Ufr),e(wT,Jfr),e(wT,qW),e(qW,Yfr),e(wT,Kfr),e(q,Zfr),e(q,AT),e(AT,t2e),e(t2e,emr),e(AT,omr),e(AT,jW),e(jW,rmr),e(AT,tmr),e(q,amr),e(q,yT),e(yT,a2e),e(a2e,nmr),e(yT,smr),e(yT,DW),e(DW,lmr),e(yT,imr),e(q,dmr),e(q,LT),e(LT,n2e),e(n2e,cmr),e(LT,fmr),e(LT,GW),e(GW,mmr),e(LT,gmr),e(q,hmr),e(q,xT),e(xT,s2e),e(s2e,pmr),e(xT,_mr),e(xT,OW),e(OW,umr),e(xT,bmr),e(q,vmr),e(q,$T),e($T,l2e),e(l2e,Fmr),e($T,Tmr),e($T,VW),e(VW,Mmr),e($T,Emr),e(q,Cmr),e(q,kT),e(kT,i2e),e(i2e,wmr),e(kT,Amr),e(kT,XW),e(XW,ymr),e(kT,Lmr),e(q,xmr),e(q,ST),e(ST,d2e),e(d2e,$mr),e(ST,kmr),e(ST,zW),e(zW,Smr),e(ST,Rmr),e(q,Pmr),e(q,RT),e(RT,c2e),e(c2e,Bmr),e(RT,Imr),e(RT,WW),e(WW,Nmr),e(RT,qmr),e(q,jmr),e(q,PT),e(PT,f2e),e(f2e,Dmr),e(PT,Gmr),e(PT,QW),e(QW,Omr),e(PT,Vmr),e(q,Xmr),e(q,BT),e(BT,m2e),e(m2e,zmr),e(BT,Wmr),e(BT,HW),e(HW,Qmr),e(BT,Hmr),e(q,Umr),e(q,IT),e(IT,g2e),e(g2e,Jmr),e(IT,Ymr),e(IT,UW),e(UW,Kmr),e(IT,Zmr),e(q,egr),e(q,NT),e(NT,h2e),e(h2e,ogr),e(NT,rgr),e(NT,JW),e(JW,tgr),e(NT,agr),e(q,ngr),e(q,qT),e(qT,p2e),e(p2e,sgr),e(qT,lgr),e(qT,YW),e(YW,igr),e(qT,dgr),e(q,cgr),e(q,jT),e(jT,_2e),e(_2e,fgr),e(jT,mgr),e(jT,KW),e(KW,ggr),e(jT,hgr),e(q,pgr),e(q,DT),e(DT,u2e),e(u2e,_gr),e(DT,ugr),e(DT,ZW),e(ZW,bgr),e(DT,vgr),e(q,Fgr),e(q,GT),e(GT,b2e),e(b2e,Tgr),e(GT,Mgr),e(GT,eQ),e(eQ,Egr),e(GT,Cgr),e(q,wgr),e(q,OT),e(OT,v2e),e(v2e,Agr),e(OT,ygr),e(OT,oQ),e(oQ,Lgr),e(OT,xgr),e(q,$gr),e(q,VT),e(VT,F2e),e(F2e,kgr),e(VT,Sgr),e(VT,rQ),e(rQ,Rgr),e(VT,Pgr),e(q,Bgr),e(q,XT),e(XT,T2e),e(T2e,Igr),e(XT,Ngr),e(XT,tQ),e(tQ,qgr),e(XT,jgr),e(q,Dgr),e(q,zT),e(zT,M2e),e(M2e,Ggr),e(zT,Ogr),e(zT,aQ),e(aQ,Vgr),e(zT,Xgr),e(q,zgr),e(q,WT),e(WT,E2e),e(E2e,Wgr),e(WT,Qgr),e(WT,nQ),e(nQ,Hgr),e(WT,Ugr),e(wr,Jgr),M(QT,wr,null),b(f,Tje,u),b(f,Xd,u),e(Xd,HT),e(HT,C2e),M(uL,C2e,null),e(Xd,Ygr),e(Xd,w2e),e(w2e,Kgr),b(f,Mje,u),b(f,Ko,u),M(bL,Ko,null),e(Ko,Zgr),e(Ko,zd),e(zd,ehr),e(zd,sQ),e(sQ,ohr),e(zd,rhr),e(zd,lQ),e(lQ,thr),e(zd,ahr),e(Ko,nhr),e(Ko,vL),e(vL,shr),e(vL,A2e),e(A2e,lhr),e(vL,ihr),e(Ko,dhr),e(Ko,Lt),M(FL,Lt,null),e(Lt,chr),e(Lt,y2e),e(y2e,fhr),e(Lt,mhr),e(Lt,Wd),e(Wd,ghr),e(Wd,L2e),e(L2e,hhr),e(Wd,phr),e(Wd,iQ),e(iQ,_hr),e(Wd,uhr),e(Lt,bhr),M(UT,Lt,null),e(Ko,vhr),e(Ko,Ar),M(TL,Ar,null),e(Ar,Fhr),e(Ar,x2e),e(x2e,Thr),e(Ar,Mhr),e(Ar,Za),e(Za,Ehr),e(Za,$2e),e($2e,Chr),e(Za,whr),e(Za,k2e),e(k2e,Ahr),e(Za,yhr),e(Za,S2e),e(S2e,Lhr),e(Za,xhr),e(Ar,$hr),e(Ar,se),e(se,JT),e(JT,R2e),e(R2e,khr),e(JT,Shr),e(JT,dQ),e(dQ,Rhr),e(JT,Phr),e(se,Bhr),e(se,YT),e(YT,P2e),e(P2e,Ihr),e(YT,Nhr),e(YT,cQ),e(cQ,qhr),e(YT,jhr),e(se,Dhr),e(se,KT),e(KT,B2e),e(B2e,Ghr),e(KT,Ohr),e(KT,fQ),e(fQ,Vhr),e(KT,Xhr),e(se,zhr),e(se,ZT),e(ZT,I2e),e(I2e,Whr),e(ZT,Qhr),e(ZT,mQ),e(mQ,Hhr),e(ZT,Uhr),e(se,Jhr),e(se,e7),e(e7,N2e),e(N2e,Yhr),e(e7,Khr),e(e7,gQ),e(gQ,Zhr),e(e7,epr),e(se,opr),e(se,o7),e(o7,q2e),e(q2e,rpr),e(o7,tpr),e(o7,hQ),e(hQ,apr),e(o7,npr),e(se,spr),e(se,r7),e(r7,j2e),e(j2e,lpr),e(r7,ipr),e(r7,pQ),e(pQ,dpr),e(r7,cpr),e(se,fpr),e(se,t7),e(t7,D2e),e(D2e,mpr),e(t7,gpr),e(t7,_Q),e(_Q,hpr),e(t7,ppr),e(se,_pr),e(se,a7),e(a7,G2e),e(G2e,upr),e(a7,bpr),e(a7,uQ),e(uQ,vpr),e(a7,Fpr),e(se,Tpr),e(se,n7),e(n7,O2e),e(O2e,Mpr),e(n7,Epr),e(n7,bQ),e(bQ,Cpr),e(n7,wpr),e(se,Apr),e(se,s7),e(s7,V2e),e(V2e,ypr),e(s7,Lpr),e(s7,vQ),e(vQ,xpr),e(s7,$pr),e(se,kpr),e(se,l7),e(l7,X2e),e(X2e,Spr),e(l7,Rpr),e(l7,FQ),e(FQ,Ppr),e(l7,Bpr),e(se,Ipr),e(se,i7),e(i7,z2e),e(z2e,Npr),e(i7,qpr),e(i7,TQ),e(TQ,jpr),e(i7,Dpr),e(se,Gpr),e(se,d7),e(d7,W2e),e(W2e,Opr),e(d7,Vpr),e(d7,MQ),e(MQ,Xpr),e(d7,zpr),e(se,Wpr),e(se,c7),e(c7,Q2e),e(Q2e,Qpr),e(c7,Hpr),e(c7,EQ),e(EQ,Upr),e(c7,Jpr),e(se,Ypr),e(se,f7),e(f7,H2e),e(H2e,Kpr),e(f7,Zpr),e(f7,CQ),e(CQ,e_r),e(f7,o_r),e(se,r_r),e(se,m7),e(m7,U2e),e(U2e,t_r),e(m7,a_r),e(m7,wQ),e(wQ,n_r),e(m7,s_r),e(se,l_r),e(se,g7),e(g7,J2e),e(J2e,i_r),e(g7,d_r),e(g7,AQ),e(AQ,c_r),e(g7,f_r),e(se,m_r),e(se,h7),e(h7,Y2e),e(Y2e,g_r),e(h7,h_r),e(h7,yQ),e(yQ,p_r),e(h7,__r),e(se,u_r),e(se,p7),e(p7,K2e),e(K2e,b_r),e(p7,v_r),e(p7,LQ),e(LQ,F_r),e(p7,T_r),e(se,M_r),e(se,_7),e(_7,Z2e),e(Z2e,E_r),e(_7,C_r),e(_7,xQ),e(xQ,w_r),e(_7,A_r),e(se,y_r),e(se,u7),e(u7,e4e),e(e4e,L_r),e(u7,x_r),e(u7,$Q),e($Q,$_r),e(u7,k_r),e(se,S_r),e(se,b7),e(b7,o4e),e(o4e,R_r),e(b7,P_r),e(b7,kQ),e(kQ,B_r),e(b7,I_r),e(Ar,N_r),M(v7,Ar,null),b(f,Eje,u),b(f,Qd,u),e(Qd,F7),e(F7,r4e),M(ML,r4e,null),e(Qd,q_r),e(Qd,t4e),e(t4e,j_r),b(f,Cje,u),b(f,Zo,u),M(EL,Zo,null),e(Zo,D_r),e(Zo,Hd),e(Hd,G_r),e(Hd,SQ),e(SQ,O_r),e(Hd,V_r),e(Hd,RQ),e(RQ,X_r),e(Hd,z_r),e(Zo,W_r),e(Zo,CL),e(CL,Q_r),e(CL,a4e),e(a4e,H_r),e(CL,U_r),e(Zo,J_r),e(Zo,xt),M(wL,xt,null),e(xt,Y_r),e(xt,n4e),e(n4e,K_r),e(xt,Z_r),e(xt,Ud),e(Ud,eur),e(Ud,s4e),e(s4e,our),e(Ud,rur),e(Ud,PQ),e(PQ,tur),e(Ud,aur),e(xt,nur),M(T7,xt,null),e(Zo,sur),e(Zo,yr),M(AL,yr,null),e(yr,lur),e(yr,l4e),e(l4e,iur),e(yr,dur),e(yr,en),e(en,cur),e(en,i4e),e(i4e,fur),e(en,mur),e(en,d4e),e(d4e,gur),e(en,hur),e(en,c4e),e(c4e,pur),e(en,_ur),e(yr,uur),e(yr,Te),e(Te,M7),e(M7,f4e),e(f4e,bur),e(M7,vur),e(M7,BQ),e(BQ,Fur),e(M7,Tur),e(Te,Mur),e(Te,E7),e(E7,m4e),e(m4e,Eur),e(E7,Cur),e(E7,IQ),e(IQ,wur),e(E7,Aur),e(Te,yur),e(Te,C7),e(C7,g4e),e(g4e,Lur),e(C7,xur),e(C7,NQ),e(NQ,$ur),e(C7,kur),e(Te,Sur),e(Te,w7),e(w7,h4e),e(h4e,Rur),e(w7,Pur),e(w7,qQ),e(qQ,Bur),e(w7,Iur),e(Te,Nur),e(Te,A7),e(A7,p4e),e(p4e,qur),e(A7,jur),e(A7,jQ),e(jQ,Dur),e(A7,Gur),e(Te,Our),e(Te,y7),e(y7,_4e),e(_4e,Vur),e(y7,Xur),e(y7,DQ),e(DQ,zur),e(y7,Wur),e(Te,Qur),e(Te,L7),e(L7,u4e),e(u4e,Hur),e(L7,Uur),e(L7,GQ),e(GQ,Jur),e(L7,Yur),e(Te,Kur),e(Te,x7),e(x7,b4e),e(b4e,Zur),e(x7,e1r),e(x7,OQ),e(OQ,o1r),e(x7,r1r),e(Te,t1r),e(Te,$7),e($7,v4e),e(v4e,a1r),e($7,n1r),e($7,VQ),e(VQ,s1r),e($7,l1r),e(Te,i1r),e(Te,k7),e(k7,F4e),e(F4e,d1r),e(k7,c1r),e(k7,XQ),e(XQ,f1r),e(k7,m1r),e(Te,g1r),e(Te,S7),e(S7,T4e),e(T4e,h1r),e(S7,p1r),e(S7,zQ),e(zQ,_1r),e(S7,u1r),e(Te,b1r),e(Te,R7),e(R7,M4e),e(M4e,v1r),e(R7,F1r),e(R7,WQ),e(WQ,T1r),e(R7,M1r),e(Te,E1r),e(Te,P7),e(P7,E4e),e(E4e,C1r),e(P7,w1r),e(P7,QQ),e(QQ,A1r),e(P7,y1r),e(yr,L1r),M(B7,yr,null),b(f,wje,u),b(f,Jd,u),e(Jd,I7),e(I7,C4e),M(yL,C4e,null),e(Jd,x1r),e(Jd,w4e),e(w4e,$1r),b(f,Aje,u),b(f,er,u),M(LL,er,null),e(er,k1r),e(er,Yd),e(Yd,S1r),e(Yd,HQ),e(HQ,R1r),e(Yd,P1r),e(Yd,UQ),e(UQ,B1r),e(Yd,I1r),e(er,N1r),e(er,xL),e(xL,q1r),e(xL,A4e),e(A4e,j1r),e(xL,D1r),e(er,G1r),e(er,$t),M($L,$t,null),e($t,O1r),e($t,y4e),e(y4e,V1r),e($t,X1r),e($t,Kd),e(Kd,z1r),e(Kd,L4e),e(L4e,W1r),e(Kd,Q1r),e(Kd,JQ),e(JQ,H1r),e(Kd,U1r),e($t,J1r),M(N7,$t,null),e(er,Y1r),e(er,Lr),M(kL,Lr,null),e(Lr,K1r),e(Lr,x4e),e(x4e,Z1r),e(Lr,ebr),e(Lr,on),e(on,obr),e(on,$4e),e($4e,rbr),e(on,tbr),e(on,k4e),e(k4e,abr),e(on,nbr),e(on,S4e),e(S4e,sbr),e(on,lbr),e(Lr,ibr),e(Lr,rn),e(rn,q7),e(q7,R4e),e(R4e,dbr),e(q7,cbr),e(q7,YQ),e(YQ,fbr),e(q7,mbr),e(rn,gbr),e(rn,j7),e(j7,P4e),e(P4e,hbr),e(j7,pbr),e(j7,KQ),e(KQ,_br),e(j7,ubr),e(rn,bbr),e(rn,D7),e(D7,B4e),e(B4e,vbr),e(D7,Fbr),e(D7,ZQ),e(ZQ,Tbr),e(D7,Mbr),e(rn,Ebr),e(rn,G7),e(G7,I4e),e(I4e,Cbr),e(G7,wbr),e(G7,eH),e(eH,Abr),e(G7,ybr),e(Lr,Lbr),M(O7,Lr,null),b(f,yje,u),b(f,Zd,u),e(Zd,V7),e(V7,N4e),M(SL,N4e,null),e(Zd,xbr),e(Zd,q4e),e(q4e,$br),b(f,Lje,u),b(f,or,u),M(RL,or,null),e(or,kbr),e(or,ec),e(ec,Sbr),e(ec,oH),e(oH,Rbr),e(ec,Pbr),e(ec,rH),e(rH,Bbr),e(ec,Ibr),e(or,Nbr),e(or,PL),e(PL,qbr),e(PL,j4e),e(j4e,jbr),e(PL,Dbr),e(or,Gbr),e(or,kt),M(BL,kt,null),e(kt,Obr),e(kt,D4e),e(D4e,Vbr),e(kt,Xbr),e(kt,oc),e(oc,zbr),e(oc,G4e),e(G4e,Wbr),e(oc,Qbr),e(oc,tH),e(tH,Hbr),e(oc,Ubr),e(kt,Jbr),M(X7,kt,null),e(or,Ybr),e(or,xr),M(IL,xr,null),e(xr,Kbr),e(xr,O4e),e(O4e,Zbr),e(xr,e2r),e(xr,tn),e(tn,o2r),e(tn,V4e),e(V4e,r2r),e(tn,t2r),e(tn,X4e),e(X4e,a2r),e(tn,n2r),e(tn,z4e),e(z4e,s2r),e(tn,l2r),e(xr,i2r),e(xr,ie),e(ie,z7),e(z7,W4e),e(W4e,d2r),e(z7,c2r),e(z7,aH),e(aH,f2r),e(z7,m2r),e(ie,g2r),e(ie,W7),e(W7,Q4e),e(Q4e,h2r),e(W7,p2r),e(W7,nH),e(nH,_2r),e(W7,u2r),e(ie,b2r),e(ie,Q7),e(Q7,H4e),e(H4e,v2r),e(Q7,F2r),e(Q7,sH),e(sH,T2r),e(Q7,M2r),e(ie,E2r),e(ie,H7),e(H7,U4e),e(U4e,C2r),e(H7,w2r),e(H7,lH),e(lH,A2r),e(H7,y2r),e(ie,L2r),e(ie,U7),e(U7,J4e),e(J4e,x2r),e(U7,$2r),e(U7,iH),e(iH,k2r),e(U7,S2r),e(ie,R2r),e(ie,J7),e(J7,Y4e),e(Y4e,P2r),e(J7,B2r),e(J7,dH),e(dH,I2r),e(J7,N2r),e(ie,q2r),e(ie,Y7),e(Y7,K4e),e(K4e,j2r),e(Y7,D2r),e(Y7,cH),e(cH,G2r),e(Y7,O2r),e(ie,V2r),e(ie,K7),e(K7,Z4e),e(Z4e,X2r),e(K7,z2r),e(K7,fH),e(fH,W2r),e(K7,Q2r),e(ie,H2r),e(ie,Z7),e(Z7,e5e),e(e5e,U2r),e(Z7,J2r),e(Z7,mH),e(mH,Y2r),e(Z7,K2r),e(ie,Z2r),e(ie,e9),e(e9,o5e),e(o5e,e4r),e(e9,o4r),e(e9,gH),e(gH,r4r),e(e9,t4r),e(ie,a4r),e(ie,o9),e(o9,r5e),e(r5e,n4r),e(o9,s4r),e(o9,hH),e(hH,l4r),e(o9,i4r),e(ie,d4r),e(ie,r9),e(r9,t5e),e(t5e,c4r),e(r9,f4r),e(r9,pH),e(pH,m4r),e(r9,g4r),e(ie,h4r),e(ie,t9),e(t9,a5e),e(a5e,p4r),e(t9,_4r),e(t9,_H),e(_H,u4r),e(t9,b4r),e(ie,v4r),e(ie,a9),e(a9,n5e),e(n5e,F4r),e(a9,T4r),e(a9,uH),e(uH,M4r),e(a9,E4r),e(ie,C4r),e(ie,n9),e(n9,s5e),e(s5e,w4r),e(n9,A4r),e(n9,bH),e(bH,y4r),e(n9,L4r),e(ie,x4r),e(ie,s9),e(s9,l5e),e(l5e,$4r),e(s9,k4r),e(s9,vH),e(vH,S4r),e(s9,R4r),e(ie,P4r),e(ie,l9),e(l9,i5e),e(i5e,B4r),e(l9,I4r),e(l9,FH),e(FH,N4r),e(l9,q4r),e(ie,j4r),e(ie,i9),e(i9,d5e),e(d5e,D4r),e(i9,G4r),e(i9,TH),e(TH,O4r),e(i9,V4r),e(ie,X4r),e(ie,d9),e(d9,c5e),e(c5e,z4r),e(d9,W4r),e(d9,MH),e(MH,Q4r),e(d9,H4r),e(ie,U4r),e(ie,c9),e(c9,f5e),e(f5e,J4r),e(c9,Y4r),e(c9,EH),e(EH,K4r),e(c9,Z4r),e(xr,e5r),M(f9,xr,null),b(f,xje,u),b(f,rc,u),e(rc,m9),e(m9,m5e),M(NL,m5e,null),e(rc,o5r),e(rc,g5e),e(g5e,r5r),b(f,$je,u),b(f,rr,u),M(qL,rr,null),e(rr,t5r),e(rr,tc),e(tc,a5r),e(tc,CH),e(CH,n5r),e(tc,s5r),e(tc,wH),e(wH,l5r),e(tc,i5r),e(rr,d5r),e(rr,jL),e(jL,c5r),e(jL,h5e),e(h5e,f5r),e(jL,m5r),e(rr,g5r),e(rr,St),M(DL,St,null),e(St,h5r),e(St,p5e),e(p5e,p5r),e(St,_5r),e(St,ac),e(ac,u5r),e(ac,_5e),e(_5e,b5r),e(ac,v5r),e(ac,AH),e(AH,F5r),e(ac,T5r),e(St,M5r),M(g9,St,null),e(rr,E5r),e(rr,$r),M(GL,$r,null),e($r,C5r),e($r,u5e),e(u5e,w5r),e($r,A5r),e($r,an),e(an,y5r),e(an,b5e),e(b5e,L5r),e(an,x5r),e(an,v5e),e(v5e,$5r),e(an,k5r),e(an,F5e),e(F5e,S5r),e(an,R5r),e($r,P5r),e($r,ye),e(ye,h9),e(h9,T5e),e(T5e,B5r),e(h9,I5r),e(h9,yH),e(yH,N5r),e(h9,q5r),e(ye,j5r),e(ye,p9),e(p9,M5e),e(M5e,D5r),e(p9,G5r),e(p9,LH),e(LH,O5r),e(p9,V5r),e(ye,X5r),e(ye,_9),e(_9,E5e),e(E5e,z5r),e(_9,W5r),e(_9,xH),e(xH,Q5r),e(_9,H5r),e(ye,U5r),e(ye,u9),e(u9,C5e),e(C5e,J5r),e(u9,Y5r),e(u9,$H),e($H,K5r),e(u9,Z5r),e(ye,evr),e(ye,b9),e(b9,w5e),e(w5e,ovr),e(b9,rvr),e(b9,kH),e(kH,tvr),e(b9,avr),e(ye,nvr),e(ye,v9),e(v9,A5e),e(A5e,svr),e(v9,lvr),e(v9,SH),e(SH,ivr),e(v9,dvr),e(ye,cvr),e(ye,F9),e(F9,y5e),e(y5e,fvr),e(F9,mvr),e(F9,RH),e(RH,gvr),e(F9,hvr),e(ye,pvr),e(ye,T9),e(T9,L5e),e(L5e,_vr),e(T9,uvr),e(T9,PH),e(PH,bvr),e(T9,vvr),e(ye,Fvr),e(ye,M9),e(M9,x5e),e(x5e,Tvr),e(M9,Mvr),e(M9,BH),e(BH,Evr),e(M9,Cvr),e(ye,wvr),e(ye,E9),e(E9,$5e),e($5e,Avr),e(E9,yvr),e(E9,IH),e(IH,Lvr),e(E9,xvr),e($r,$vr),M(C9,$r,null),b(f,kje,u),b(f,nc,u),e(nc,w9),e(w9,k5e),M(OL,k5e,null),e(nc,kvr),e(nc,S5e),e(S5e,Svr),b(f,Sje,u),b(f,tr,u),M(VL,tr,null),e(tr,Rvr),e(tr,sc),e(sc,Pvr),e(sc,NH),e(NH,Bvr),e(sc,Ivr),e(sc,qH),e(qH,Nvr),e(sc,qvr),e(tr,jvr),e(tr,XL),e(XL,Dvr),e(XL,R5e),e(R5e,Gvr),e(XL,Ovr),e(tr,Vvr),e(tr,Rt),M(zL,Rt,null),e(Rt,Xvr),e(Rt,P5e),e(P5e,zvr),e(Rt,Wvr),e(Rt,lc),e(lc,Qvr),e(lc,B5e),e(B5e,Hvr),e(lc,Uvr),e(lc,jH),e(jH,Jvr),e(lc,Yvr),e(Rt,Kvr),M(A9,Rt,null),e(tr,Zvr),e(tr,kr),M(WL,kr,null),e(kr,eFr),e(kr,I5e),e(I5e,oFr),e(kr,rFr),e(kr,nn),e(nn,tFr),e(nn,N5e),e(N5e,aFr),e(nn,nFr),e(nn,q5e),e(q5e,sFr),e(nn,lFr),e(nn,j5e),e(j5e,iFr),e(nn,dFr),e(kr,cFr),e(kr,oe),e(oe,y9),e(y9,D5e),e(D5e,fFr),e(y9,mFr),e(y9,DH),e(DH,gFr),e(y9,hFr),e(oe,pFr),e(oe,L9),e(L9,G5e),e(G5e,_Fr),e(L9,uFr),e(L9,GH),e(GH,bFr),e(L9,vFr),e(oe,FFr),e(oe,x9),e(x9,O5e),e(O5e,TFr),e(x9,MFr),e(x9,OH),e(OH,EFr),e(x9,CFr),e(oe,wFr),e(oe,$9),e($9,V5e),e(V5e,AFr),e($9,yFr),e($9,VH),e(VH,LFr),e($9,xFr),e(oe,$Fr),e(oe,k9),e(k9,X5e),e(X5e,kFr),e(k9,SFr),e(k9,XH),e(XH,RFr),e(k9,PFr),e(oe,BFr),e(oe,S9),e(S9,z5e),e(z5e,IFr),e(S9,NFr),e(S9,zH),e(zH,qFr),e(S9,jFr),e(oe,DFr),e(oe,R9),e(R9,W5e),e(W5e,GFr),e(R9,OFr),e(R9,WH),e(WH,VFr),e(R9,XFr),e(oe,zFr),e(oe,P9),e(P9,Q5e),e(Q5e,WFr),e(P9,QFr),e(P9,QH),e(QH,HFr),e(P9,UFr),e(oe,JFr),e(oe,B9),e(B9,H5e),e(H5e,YFr),e(B9,KFr),e(B9,HH),e(HH,ZFr),e(B9,eTr),e(oe,oTr),e(oe,I9),e(I9,U5e),e(U5e,rTr),e(I9,tTr),e(I9,UH),e(UH,aTr),e(I9,nTr),e(oe,sTr),e(oe,N9),e(N9,J5e),e(J5e,lTr),e(N9,iTr),e(N9,JH),e(JH,dTr),e(N9,cTr),e(oe,fTr),e(oe,q9),e(q9,Y5e),e(Y5e,mTr),e(q9,gTr),e(q9,YH),e(YH,hTr),e(q9,pTr),e(oe,_Tr),e(oe,j9),e(j9,K5e),e(K5e,uTr),e(j9,bTr),e(j9,KH),e(KH,vTr),e(j9,FTr),e(oe,TTr),e(oe,D9),e(D9,Z5e),e(Z5e,MTr),e(D9,ETr),e(D9,ZH),e(ZH,CTr),e(D9,wTr),e(oe,ATr),e(oe,G9),e(G9,eve),e(eve,yTr),e(G9,LTr),e(G9,eU),e(eU,xTr),e(G9,$Tr),e(oe,kTr),e(oe,O9),e(O9,ove),e(ove,STr),e(O9,RTr),e(O9,oU),e(oU,PTr),e(O9,BTr),e(oe,ITr),e(oe,V9),e(V9,rve),e(rve,NTr),e(V9,qTr),e(V9,rU),e(rU,jTr),e(V9,DTr),e(oe,GTr),e(oe,X9),e(X9,tve),e(tve,OTr),e(X9,VTr),e(X9,tU),e(tU,XTr),e(X9,zTr),e(oe,WTr),e(oe,z9),e(z9,ave),e(ave,QTr),e(z9,HTr),e(z9,aU),e(aU,UTr),e(z9,JTr),e(oe,YTr),e(oe,W9),e(W9,nve),e(nve,KTr),e(W9,ZTr),e(W9,nU),e(nU,e7r),e(W9,o7r),e(oe,r7r),e(oe,Q9),e(Q9,sve),e(sve,t7r),e(Q9,a7r),e(Q9,sU),e(sU,n7r),e(Q9,s7r),e(oe,l7r),e(oe,H9),e(H9,lve),e(lve,i7r),e(H9,d7r),e(H9,lU),e(lU,c7r),e(H9,f7r),e(oe,m7r),e(oe,U9),e(U9,ive),e(ive,g7r),e(U9,h7r),e(U9,iU),e(iU,p7r),e(U9,_7r),e(oe,u7r),e(oe,J9),e(J9,dve),e(dve,b7r),e(J9,v7r),e(J9,dU),e(dU,F7r),e(J9,T7r),e(oe,M7r),e(oe,Y9),e(Y9,cve),e(cve,E7r),e(Y9,C7r),e(Y9,cU),e(cU,w7r),e(Y9,A7r),e(oe,y7r),e(oe,K9),e(K9,fve),e(fve,L7r),e(K9,x7r),e(K9,fU),e(fU,$7r),e(K9,k7r),e(kr,S7r),M(Z9,kr,null),b(f,Rje,u),b(f,ic,u),e(ic,eM),e(eM,mve),M(QL,mve,null),e(ic,R7r),e(ic,gve),e(gve,P7r),b(f,Pje,u),b(f,ar,u),M(HL,ar,null),e(ar,B7r),e(ar,dc),e(dc,I7r),e(dc,mU),e(mU,N7r),e(dc,q7r),e(dc,gU),e(gU,j7r),e(dc,D7r),e(ar,G7r),e(ar,UL),e(UL,O7r),e(UL,hve),e(hve,V7r),e(UL,X7r),e(ar,z7r),e(ar,Pt),M(JL,Pt,null),e(Pt,W7r),e(Pt,pve),e(pve,Q7r),e(Pt,H7r),e(Pt,cc),e(cc,U7r),e(cc,_ve),e(_ve,J7r),e(cc,Y7r),e(cc,hU),e(hU,K7r),e(cc,Z7r),e(Pt,e9r),M(oM,Pt,null),e(ar,o9r),e(ar,Sr),M(YL,Sr,null),e(Sr,r9r),e(Sr,uve),e(uve,t9r),e(Sr,a9r),e(Sr,sn),e(sn,n9r),e(sn,bve),e(bve,s9r),e(sn,l9r),e(sn,vve),e(vve,i9r),e(sn,d9r),e(sn,Fve),e(Fve,c9r),e(sn,f9r),e(Sr,m9r),e(Sr,pe),e(pe,rM),e(rM,Tve),e(Tve,g9r),e(rM,h9r),e(rM,pU),e(pU,p9r),e(rM,_9r),e(pe,u9r),e(pe,tM),e(tM,Mve),e(Mve,b9r),e(tM,v9r),e(tM,_U),e(_U,F9r),e(tM,T9r),e(pe,M9r),e(pe,aM),e(aM,Eve),e(Eve,E9r),e(aM,C9r),e(aM,uU),e(uU,w9r),e(aM,A9r),e(pe,y9r),e(pe,nM),e(nM,Cve),e(Cve,L9r),e(nM,x9r),e(nM,bU),e(bU,$9r),e(nM,k9r),e(pe,S9r),e(pe,sM),e(sM,wve),e(wve,R9r),e(sM,P9r),e(sM,vU),e(vU,B9r),e(sM,I9r),e(pe,N9r),e(pe,lM),e(lM,Ave),e(Ave,q9r),e(lM,j9r),e(lM,FU),e(FU,D9r),e(lM,G9r),e(pe,O9r),e(pe,iM),e(iM,yve),e(yve,V9r),e(iM,X9r),e(iM,TU),e(TU,z9r),e(iM,W9r),e(pe,Q9r),e(pe,dM),e(dM,Lve),e(Lve,H9r),e(dM,U9r),e(dM,MU),e(MU,J9r),e(dM,Y9r),e(pe,K9r),e(pe,cM),e(cM,xve),e(xve,Z9r),e(cM,eMr),e(cM,EU),e(EU,oMr),e(cM,rMr),e(pe,tMr),e(pe,fM),e(fM,$ve),e($ve,aMr),e(fM,nMr),e(fM,CU),e(CU,sMr),e(fM,lMr),e(pe,iMr),e(pe,mM),e(mM,kve),e(kve,dMr),e(mM,cMr),e(mM,wU),e(wU,fMr),e(mM,mMr),e(pe,gMr),e(pe,gM),e(gM,Sve),e(Sve,hMr),e(gM,pMr),e(gM,AU),e(AU,_Mr),e(gM,uMr),e(pe,bMr),e(pe,hM),e(hM,Rve),e(Rve,vMr),e(hM,FMr),e(hM,yU),e(yU,TMr),e(hM,MMr),e(pe,EMr),e(pe,pM),e(pM,Pve),e(Pve,CMr),e(pM,wMr),e(pM,LU),e(LU,AMr),e(pM,yMr),e(pe,LMr),e(pe,_M),e(_M,Bve),e(Bve,xMr),e(_M,$Mr),e(_M,xU),e(xU,kMr),e(_M,SMr),e(pe,RMr),e(pe,uM),e(uM,Ive),e(Ive,PMr),e(uM,BMr),e(uM,$U),e($U,IMr),e(uM,NMr),e(pe,qMr),e(pe,bM),e(bM,Nve),e(Nve,jMr),e(bM,DMr),e(bM,kU),e(kU,GMr),e(bM,OMr),e(Sr,VMr),M(vM,Sr,null),b(f,Bje,u),b(f,fc,u),e(fc,FM),e(FM,qve),M(KL,qve,null),e(fc,XMr),e(fc,jve),e(jve,zMr),b(f,Ije,u),b(f,nr,u),M(ZL,nr,null),e(nr,WMr),e(nr,mc),e(mc,QMr),e(mc,SU),e(SU,HMr),e(mc,UMr),e(mc,RU),e(RU,JMr),e(mc,YMr),e(nr,KMr),e(nr,e8),e(e8,ZMr),e(e8,Dve),e(Dve,eEr),e(e8,oEr),e(nr,rEr),e(nr,Bt),M(o8,Bt,null),e(Bt,tEr),e(Bt,Gve),e(Gve,aEr),e(Bt,nEr),e(Bt,gc),e(gc,sEr),e(gc,Ove),e(Ove,lEr),e(gc,iEr),e(gc,PU),e(PU,dEr),e(gc,cEr),e(Bt,fEr),M(TM,Bt,null),e(nr,mEr),e(nr,Rr),M(r8,Rr,null),e(Rr,gEr),e(Rr,Vve),e(Vve,hEr),e(Rr,pEr),e(Rr,ln),e(ln,_Er),e(ln,Xve),e(Xve,uEr),e(ln,bEr),e(ln,zve),e(zve,vEr),e(ln,FEr),e(ln,Wve),e(Wve,TEr),e(ln,MEr),e(Rr,EEr),e(Rr,t8),e(t8,MM),e(MM,Qve),e(Qve,CEr),e(MM,wEr),e(MM,BU),e(BU,AEr),e(MM,yEr),e(t8,LEr),e(t8,EM),e(EM,Hve),e(Hve,xEr),e(EM,$Er),e(EM,IU),e(IU,kEr),e(EM,SEr),e(Rr,REr),M(CM,Rr,null),b(f,Nje,u),b(f,hc,u),e(hc,wM),e(wM,Uve),M(a8,Uve,null),e(hc,PEr),e(hc,Jve),e(Jve,BEr),b(f,qje,u),b(f,sr,u),M(n8,sr,null),e(sr,IEr),e(sr,pc),e(pc,NEr),e(pc,NU),e(NU,qEr),e(pc,jEr),e(pc,qU),e(qU,DEr),e(pc,GEr),e(sr,OEr),e(sr,s8),e(s8,VEr),e(s8,Yve),e(Yve,XEr),e(s8,zEr),e(sr,WEr),e(sr,It),M(l8,It,null),e(It,QEr),e(It,Kve),e(Kve,HEr),e(It,UEr),e(It,_c),e(_c,JEr),e(_c,Zve),e(Zve,YEr),e(_c,KEr),e(_c,jU),e(jU,ZEr),e(_c,eCr),e(It,oCr),M(AM,It,null),e(sr,rCr),e(sr,Pr),M(i8,Pr,null),e(Pr,tCr),e(Pr,eFe),e(eFe,aCr),e(Pr,nCr),e(Pr,dn),e(dn,sCr),e(dn,oFe),e(oFe,lCr),e(dn,iCr),e(dn,rFe),e(rFe,dCr),e(dn,cCr),e(dn,tFe),e(tFe,fCr),e(dn,mCr),e(Pr,gCr),e(Pr,aFe),e(aFe,yM),e(yM,nFe),e(nFe,hCr),e(yM,pCr),e(yM,DU),e(DU,_Cr),e(yM,uCr),e(Pr,bCr),M(LM,Pr,null),b(f,jje,u),b(f,uc,u),e(uc,xM),e(xM,sFe),M(d8,sFe,null),e(uc,vCr),e(uc,lFe),e(lFe,FCr),b(f,Dje,u),b(f,lr,u),M(c8,lr,null),e(lr,TCr),e(lr,bc),e(bc,MCr),e(bc,GU),e(GU,ECr),e(bc,CCr),e(bc,OU),e(OU,wCr),e(bc,ACr),e(lr,yCr),e(lr,f8),e(f8,LCr),e(f8,iFe),e(iFe,xCr),e(f8,$Cr),e(lr,kCr),e(lr,Nt),M(m8,Nt,null),e(Nt,SCr),e(Nt,dFe),e(dFe,RCr),e(Nt,PCr),e(Nt,vc),e(vc,BCr),e(vc,cFe),e(cFe,ICr),e(vc,NCr),e(vc,VU),e(VU,qCr),e(vc,jCr),e(Nt,DCr),M($M,Nt,null),e(lr,GCr),e(lr,Br),M(g8,Br,null),e(Br,OCr),e(Br,fFe),e(fFe,VCr),e(Br,XCr),e(Br,cn),e(cn,zCr),e(cn,mFe),e(mFe,WCr),e(cn,QCr),e(cn,gFe),e(gFe,HCr),e(cn,UCr),e(cn,hFe),e(hFe,JCr),e(cn,YCr),e(Br,KCr),e(Br,de),e(de,kM),e(kM,pFe),e(pFe,ZCr),e(kM,e3r),e(kM,XU),e(XU,o3r),e(kM,r3r),e(de,t3r),e(de,SM),e(SM,_Fe),e(_Fe,a3r),e(SM,n3r),e(SM,zU),e(zU,s3r),e(SM,l3r),e(de,i3r),e(de,RM),e(RM,uFe),e(uFe,d3r),e(RM,c3r),e(RM,WU),e(WU,f3r),e(RM,m3r),e(de,g3r),e(de,PM),e(PM,bFe),e(bFe,h3r),e(PM,p3r),e(PM,QU),e(QU,_3r),e(PM,u3r),e(de,b3r),e(de,BM),e(BM,vFe),e(vFe,v3r),e(BM,F3r),e(BM,HU),e(HU,T3r),e(BM,M3r),e(de,E3r),e(de,IM),e(IM,FFe),e(FFe,C3r),e(IM,w3r),e(IM,UU),e(UU,A3r),e(IM,y3r),e(de,L3r),e(de,NM),e(NM,TFe),e(TFe,x3r),e(NM,$3r),e(NM,JU),e(JU,k3r),e(NM,S3r),e(de,R3r),e(de,qM),e(qM,MFe),e(MFe,P3r),e(qM,B3r),e(qM,YU),e(YU,I3r),e(qM,N3r),e(de,q3r),e(de,jM),e(jM,EFe),e(EFe,j3r),e(jM,D3r),e(jM,KU),e(KU,G3r),e(jM,O3r),e(de,V3r),e(de,DM),e(DM,CFe),e(CFe,X3r),e(DM,z3r),e(DM,ZU),e(ZU,W3r),e(DM,Q3r),e(de,H3r),e(de,GM),e(GM,wFe),e(wFe,U3r),e(GM,J3r),e(GM,eJ),e(eJ,Y3r),e(GM,K3r),e(de,Z3r),e(de,OM),e(OM,AFe),e(AFe,ewr),e(OM,owr),e(OM,oJ),e(oJ,rwr),e(OM,twr),e(de,awr),e(de,VM),e(VM,yFe),e(yFe,nwr),e(VM,swr),e(VM,rJ),e(rJ,lwr),e(VM,iwr),e(de,dwr),e(de,XM),e(XM,LFe),e(LFe,cwr),e(XM,fwr),e(XM,tJ),e(tJ,mwr),e(XM,gwr),e(de,hwr),e(de,zM),e(zM,xFe),e(xFe,pwr),e(zM,_wr),e(zM,aJ),e(aJ,uwr),e(zM,bwr),e(de,vwr),e(de,WM),e(WM,$Fe),e($Fe,Fwr),e(WM,Twr),e(WM,nJ),e(nJ,Mwr),e(WM,Ewr),e(de,Cwr),e(de,QM),e(QM,kFe),e(kFe,wwr),e(QM,Awr),e(QM,sJ),e(sJ,ywr),e(QM,Lwr),e(de,xwr),e(de,HM),e(HM,SFe),e(SFe,$wr),e(HM,kwr),e(HM,lJ),e(lJ,Swr),e(HM,Rwr),e(de,Pwr),e(de,UM),e(UM,RFe),e(RFe,Bwr),e(UM,Iwr),e(UM,iJ),e(iJ,Nwr),e(UM,qwr),e(de,jwr),e(de,JM),e(JM,PFe),e(PFe,Dwr),e(JM,Gwr),e(JM,dJ),e(dJ,Owr),e(JM,Vwr),e(Br,Xwr),M(YM,Br,null),b(f,Gje,u),b(f,Fc,u),e(Fc,KM),e(KM,BFe),M(h8,BFe,null),e(Fc,zwr),e(Fc,IFe),e(IFe,Wwr),b(f,Oje,u),b(f,ir,u),M(p8,ir,null),e(ir,Qwr),e(ir,Tc),e(Tc,Hwr),e(Tc,cJ),e(cJ,Uwr),e(Tc,Jwr),e(Tc,fJ),e(fJ,Ywr),e(Tc,Kwr),e(ir,Zwr),e(ir,_8),e(_8,e0r),e(_8,NFe),e(NFe,o0r),e(_8,r0r),e(ir,t0r),e(ir,qt),M(u8,qt,null),e(qt,a0r),e(qt,qFe),e(qFe,n0r),e(qt,s0r),e(qt,Mc),e(Mc,l0r),e(Mc,jFe),e(jFe,i0r),e(Mc,d0r),e(Mc,mJ),e(mJ,c0r),e(Mc,f0r),e(qt,m0r),M(ZM,qt,null),e(ir,g0r),e(ir,Ir),M(b8,Ir,null),e(Ir,h0r),e(Ir,DFe),e(DFe,p0r),e(Ir,_0r),e(Ir,fn),e(fn,u0r),e(fn,GFe),e(GFe,b0r),e(fn,v0r),e(fn,OFe),e(OFe,F0r),e(fn,T0r),e(fn,VFe),e(VFe,M0r),e(fn,E0r),e(Ir,C0r),e(Ir,ce),e(ce,eE),e(eE,XFe),e(XFe,w0r),e(eE,A0r),e(eE,gJ),e(gJ,y0r),e(eE,L0r),e(ce,x0r),e(ce,oE),e(oE,zFe),e(zFe,$0r),e(oE,k0r),e(oE,hJ),e(hJ,S0r),e(oE,R0r),e(ce,P0r),e(ce,rE),e(rE,WFe),e(WFe,B0r),e(rE,I0r),e(rE,pJ),e(pJ,N0r),e(rE,q0r),e(ce,j0r),e(ce,tE),e(tE,QFe),e(QFe,D0r),e(tE,G0r),e(tE,_J),e(_J,O0r),e(tE,V0r),e(ce,X0r),e(ce,aE),e(aE,HFe),e(HFe,z0r),e(aE,W0r),e(aE,uJ),e(uJ,Q0r),e(aE,H0r),e(ce,U0r),e(ce,nE),e(nE,UFe),e(UFe,J0r),e(nE,Y0r),e(nE,bJ),e(bJ,K0r),e(nE,Z0r),e(ce,e6r),e(ce,sE),e(sE,JFe),e(JFe,o6r),e(sE,r6r),e(sE,vJ),e(vJ,t6r),e(sE,a6r),e(ce,n6r),e(ce,lE),e(lE,YFe),e(YFe,s6r),e(lE,l6r),e(lE,FJ),e(FJ,i6r),e(lE,d6r),e(ce,c6r),e(ce,iE),e(iE,KFe),e(KFe,f6r),e(iE,m6r),e(iE,TJ),e(TJ,g6r),e(iE,h6r),e(ce,p6r),e(ce,dE),e(dE,ZFe),e(ZFe,_6r),e(dE,u6r),e(dE,MJ),e(MJ,b6r),e(dE,v6r),e(ce,F6r),e(ce,cE),e(cE,eTe),e(eTe,T6r),e(cE,M6r),e(cE,EJ),e(EJ,E6r),e(cE,C6r),e(ce,w6r),e(ce,fE),e(fE,oTe),e(oTe,A6r),e(fE,y6r),e(fE,CJ),e(CJ,L6r),e(fE,x6r),e(ce,$6r),e(ce,mE),e(mE,rTe),e(rTe,k6r),e(mE,S6r),e(mE,wJ),e(wJ,R6r),e(mE,P6r),e(ce,B6r),e(ce,gE),e(gE,tTe),e(tTe,I6r),e(gE,N6r),e(gE,AJ),e(AJ,q6r),e(gE,j6r),e(ce,D6r),e(ce,hE),e(hE,aTe),e(aTe,G6r),e(hE,O6r),e(hE,yJ),e(yJ,V6r),e(hE,X6r),e(ce,z6r),e(ce,pE),e(pE,nTe),e(nTe,W6r),e(pE,Q6r),e(pE,LJ),e(LJ,H6r),e(pE,U6r),e(ce,J6r),e(ce,_E),e(_E,sTe),e(sTe,Y6r),e(_E,K6r),e(_E,xJ),e(xJ,Z6r),e(_E,eAr),e(ce,oAr),e(ce,uE),e(uE,lTe),e(lTe,rAr),e(uE,tAr),e(uE,$J),e($J,aAr),e(uE,nAr),e(ce,sAr),e(ce,bE),e(bE,iTe),e(iTe,lAr),e(bE,iAr),e(bE,kJ),e(kJ,dAr),e(bE,cAr),e(ce,fAr),e(ce,vE),e(vE,dTe),e(dTe,mAr),e(vE,gAr),e(vE,SJ),e(SJ,hAr),e(vE,pAr),e(Ir,_Ar),M(FE,Ir,null),b(f,Vje,u),b(f,Ec,u),e(Ec,TE),e(TE,cTe),M(v8,cTe,null),e(Ec,uAr),e(Ec,fTe),e(fTe,bAr),b(f,Xje,u),b(f,dr,u),M(F8,dr,null),e(dr,vAr),e(dr,Cc),e(Cc,FAr),e(Cc,RJ),e(RJ,TAr),e(Cc,MAr),e(Cc,PJ),e(PJ,EAr),e(Cc,CAr),e(dr,wAr),e(dr,T8),e(T8,AAr),e(T8,mTe),e(mTe,yAr),e(T8,LAr),e(dr,xAr),e(dr,jt),M(M8,jt,null),e(jt,$Ar),e(jt,gTe),e(gTe,kAr),e(jt,SAr),e(jt,wc),e(wc,RAr),e(wc,hTe),e(hTe,PAr),e(wc,BAr),e(wc,BJ),e(BJ,IAr),e(wc,NAr),e(jt,qAr),M(ME,jt,null),e(dr,jAr),e(dr,Nr),M(E8,Nr,null),e(Nr,DAr),e(Nr,pTe),e(pTe,GAr),e(Nr,OAr),e(Nr,mn),e(mn,VAr),e(mn,_Te),e(_Te,XAr),e(mn,zAr),e(mn,uTe),e(uTe,WAr),e(mn,QAr),e(mn,bTe),e(bTe,HAr),e(mn,UAr),e(Nr,JAr),e(Nr,vTe),e(vTe,EE),e(EE,FTe),e(FTe,YAr),e(EE,KAr),e(EE,IJ),e(IJ,ZAr),e(EE,eyr),e(Nr,oyr),M(CE,Nr,null),b(f,zje,u),b(f,Ac,u),e(Ac,wE),e(wE,TTe),M(C8,TTe,null),e(Ac,ryr),e(Ac,MTe),e(MTe,tyr),b(f,Wje,u),b(f,cr,u),M(w8,cr,null),e(cr,ayr),e(cr,yc),e(yc,nyr),e(yc,NJ),e(NJ,syr),e(yc,lyr),e(yc,qJ),e(qJ,iyr),e(yc,dyr),e(cr,cyr),e(cr,A8),e(A8,fyr),e(A8,ETe),e(ETe,myr),e(A8,gyr),e(cr,hyr),e(cr,Dt),M(y8,Dt,null),e(Dt,pyr),e(Dt,CTe),e(CTe,_yr),e(Dt,uyr),e(Dt,Lc),e(Lc,byr),e(Lc,wTe),e(wTe,vyr),e(Lc,Fyr),e(Lc,jJ),e(jJ,Tyr),e(Lc,Myr),e(Dt,Eyr),M(AE,Dt,null),e(cr,Cyr),e(cr,qr),M(L8,qr,null),e(qr,wyr),e(qr,ATe),e(ATe,Ayr),e(qr,yyr),e(qr,gn),e(gn,Lyr),e(gn,yTe),e(yTe,xyr),e(gn,$yr),e(gn,LTe),e(LTe,kyr),e(gn,Syr),e(gn,xTe),e(xTe,Ryr),e(gn,Pyr),e(qr,Byr),e(qr,$Te),e($Te,yE),e(yE,kTe),e(kTe,Iyr),e(yE,Nyr),e(yE,DJ),e(DJ,qyr),e(yE,jyr),e(qr,Dyr),M(LE,qr,null),b(f,Qje,u),b(f,xc,u),e(xc,xE),e(xE,STe),M(x8,STe,null),e(xc,Gyr),e(xc,RTe),e(RTe,Oyr),b(f,Hje,u),b(f,fr,u),M($8,fr,null),e(fr,Vyr),e(fr,$c),e($c,Xyr),e($c,GJ),e(GJ,zyr),e($c,Wyr),e($c,OJ),e(OJ,Qyr),e($c,Hyr),e(fr,Uyr),e(fr,k8),e(k8,Jyr),e(k8,PTe),e(PTe,Yyr),e(k8,Kyr),e(fr,Zyr),e(fr,Gt),M(S8,Gt,null),e(Gt,eLr),e(Gt,BTe),e(BTe,oLr),e(Gt,rLr),e(Gt,kc),e(kc,tLr),e(kc,ITe),e(ITe,aLr),e(kc,nLr),e(kc,VJ),e(VJ,sLr),e(kc,lLr),e(Gt,iLr),M($E,Gt,null),e(fr,dLr),e(fr,jr),M(R8,jr,null),e(jr,cLr),e(jr,NTe),e(NTe,fLr),e(jr,mLr),e(jr,hn),e(hn,gLr),e(hn,qTe),e(qTe,hLr),e(hn,pLr),e(hn,jTe),e(jTe,_Lr),e(hn,uLr),e(hn,DTe),e(DTe,bLr),e(hn,vLr),e(jr,FLr),e(jr,re),e(re,kE),e(kE,GTe),e(GTe,TLr),e(kE,MLr),e(kE,XJ),e(XJ,ELr),e(kE,CLr),e(re,wLr),e(re,SE),e(SE,OTe),e(OTe,ALr),e(SE,yLr),e(SE,zJ),e(zJ,LLr),e(SE,xLr),e(re,$Lr),e(re,RE),e(RE,VTe),e(VTe,kLr),e(RE,SLr),e(RE,WJ),e(WJ,RLr),e(RE,PLr),e(re,BLr),e(re,PE),e(PE,XTe),e(XTe,ILr),e(PE,NLr),e(PE,QJ),e(QJ,qLr),e(PE,jLr),e(re,DLr),e(re,BE),e(BE,zTe),e(zTe,GLr),e(BE,OLr),e(BE,HJ),e(HJ,VLr),e(BE,XLr),e(re,zLr),e(re,IE),e(IE,WTe),e(WTe,WLr),e(IE,QLr),e(IE,UJ),e(UJ,HLr),e(IE,ULr),e(re,JLr),e(re,NE),e(NE,QTe),e(QTe,YLr),e(NE,KLr),e(NE,JJ),e(JJ,ZLr),e(NE,e8r),e(re,o8r),e(re,qE),e(qE,HTe),e(HTe,r8r),e(qE,t8r),e(qE,YJ),e(YJ,a8r),e(qE,n8r),e(re,s8r),e(re,jE),e(jE,UTe),e(UTe,l8r),e(jE,i8r),e(jE,KJ),e(KJ,d8r),e(jE,c8r),e(re,f8r),e(re,DE),e(DE,JTe),e(JTe,m8r),e(DE,g8r),e(DE,ZJ),e(ZJ,h8r),e(DE,p8r),e(re,_8r),e(re,GE),e(GE,YTe),e(YTe,u8r),e(GE,b8r),e(GE,eY),e(eY,v8r),e(GE,F8r),e(re,T8r),e(re,OE),e(OE,KTe),e(KTe,M8r),e(OE,E8r),e(OE,oY),e(oY,C8r),e(OE,w8r),e(re,A8r),e(re,VE),e(VE,ZTe),e(ZTe,y8r),e(VE,L8r),e(VE,rY),e(rY,x8r),e(VE,$8r),e(re,k8r),e(re,XE),e(XE,e7e),e(e7e,S8r),e(XE,R8r),e(XE,tY),e(tY,P8r),e(XE,B8r),e(re,I8r),e(re,zE),e(zE,o7e),e(o7e,N8r),e(zE,q8r),e(zE,aY),e(aY,j8r),e(zE,D8r),e(re,G8r),e(re,WE),e(WE,r7e),e(r7e,O8r),e(WE,V8r),e(WE,nY),e(nY,X8r),e(WE,z8r),e(re,W8r),e(re,QE),e(QE,t7e),e(t7e,Q8r),e(QE,H8r),e(QE,sY),e(sY,U8r),e(QE,J8r),e(re,Y8r),e(re,HE),e(HE,a7e),e(a7e,K8r),e(HE,Z8r),e(HE,lY),e(lY,exr),e(HE,oxr),e(re,rxr),e(re,UE),e(UE,n7e),e(n7e,txr),e(UE,axr),e(UE,iY),e(iY,nxr),e(UE,sxr),e(re,lxr),e(re,JE),e(JE,s7e),e(s7e,ixr),e(JE,dxr),e(JE,dY),e(dY,cxr),e(JE,fxr),e(re,mxr),e(re,YE),e(YE,l7e),e(l7e,gxr),e(YE,hxr),e(YE,cY),e(cY,pxr),e(YE,_xr),e(re,uxr),e(re,KE),e(KE,i7e),e(i7e,bxr),e(KE,vxr),e(KE,fY),e(fY,Fxr),e(KE,Txr),e(re,Mxr),e(re,ZE),e(ZE,d7e),e(d7e,Exr),e(ZE,Cxr),e(ZE,mY),e(mY,wxr),e(ZE,Axr),e(re,yxr),e(re,eC),e(eC,c7e),e(c7e,Lxr),e(eC,xxr),e(eC,gY),e(gY,$xr),e(eC,kxr),e(re,Sxr),e(re,oC),e(oC,f7e),e(f7e,Rxr),e(oC,Pxr),e(oC,hY),e(hY,Bxr),e(oC,Ixr),e(re,Nxr),e(re,rC),e(rC,m7e),e(m7e,qxr),e(rC,jxr),e(rC,pY),e(pY,Dxr),e(rC,Gxr),e(jr,Oxr),M(tC,jr,null),b(f,Uje,u),b(f,Sc,u),e(Sc,aC),e(aC,g7e),M(P8,g7e,null),e(Sc,Vxr),e(Sc,h7e),e(h7e,Xxr),b(f,Jje,u),b(f,mr,u),M(B8,mr,null),e(mr,zxr),e(mr,Rc),e(Rc,Wxr),e(Rc,_Y),e(_Y,Qxr),e(Rc,Hxr),e(Rc,uY),e(uY,Uxr),e(Rc,Jxr),e(mr,Yxr),e(mr,I8),e(I8,Kxr),e(I8,p7e),e(p7e,Zxr),e(I8,e$r),e(mr,o$r),e(mr,Ot),M(N8,Ot,null),e(Ot,r$r),e(Ot,_7e),e(_7e,t$r),e(Ot,a$r),e(Ot,Pc),e(Pc,n$r),e(Pc,u7e),e(u7e,s$r),e(Pc,l$r),e(Pc,bY),e(bY,i$r),e(Pc,d$r),e(Ot,c$r),M(nC,Ot,null),e(mr,f$r),e(mr,Dr),M(q8,Dr,null),e(Dr,m$r),e(Dr,b7e),e(b7e,g$r),e(Dr,h$r),e(Dr,pn),e(pn,p$r),e(pn,v7e),e(v7e,_$r),e(pn,u$r),e(pn,F7e),e(F7e,b$r),e(pn,v$r),e(pn,T7e),e(T7e,F$r),e(pn,T$r),e(Dr,M$r),e(Dr,Le),e(Le,sC),e(sC,M7e),e(M7e,E$r),e(sC,C$r),e(sC,vY),e(vY,w$r),e(sC,A$r),e(Le,y$r),e(Le,lC),e(lC,E7e),e(E7e,L$r),e(lC,x$r),e(lC,FY),e(FY,$$r),e(lC,k$r),e(Le,S$r),e(Le,iC),e(iC,C7e),e(C7e,R$r),e(iC,P$r),e(iC,TY),e(TY,B$r),e(iC,I$r),e(Le,N$r),e(Le,dC),e(dC,w7e),e(w7e,q$r),e(dC,j$r),e(dC,MY),e(MY,D$r),e(dC,G$r),e(Le,O$r),e(Le,cC),e(cC,A7e),e(A7e,V$r),e(cC,X$r),e(cC,EY),e(EY,z$r),e(cC,W$r),e(Le,Q$r),e(Le,fC),e(fC,y7e),e(y7e,H$r),e(fC,U$r),e(fC,CY),e(CY,J$r),e(fC,Y$r),e(Le,K$r),e(Le,mC),e(mC,L7e),e(L7e,Z$r),e(mC,ekr),e(mC,wY),e(wY,okr),e(mC,rkr),e(Le,tkr),e(Le,gC),e(gC,x7e),e(x7e,akr),e(gC,nkr),e(gC,AY),e(AY,skr),e(gC,lkr),e(Le,ikr),e(Le,hC),e(hC,$7e),e($7e,dkr),e(hC,ckr),e(hC,yY),e(yY,fkr),e(hC,mkr),e(Le,gkr),e(Le,pC),e(pC,k7e),e(k7e,hkr),e(pC,pkr),e(pC,LY),e(LY,_kr),e(pC,ukr),e(Dr,bkr),M(_C,Dr,null),b(f,Yje,u),b(f,Bc,u),e(Bc,uC),e(uC,S7e),M(j8,S7e,null),e(Bc,vkr),e(Bc,R7e),e(R7e,Fkr),b(f,Kje,u),b(f,gr,u),M(D8,gr,null),e(gr,Tkr),e(gr,Ic),e(Ic,Mkr),e(Ic,xY),e(xY,Ekr),e(Ic,Ckr),e(Ic,$Y),e($Y,wkr),e(Ic,Akr),e(gr,ykr),e(gr,G8),e(G8,Lkr),e(G8,P7e),e(P7e,xkr),e(G8,$kr),e(gr,kkr),e(gr,Vt),M(O8,Vt,null),e(Vt,Skr),e(Vt,B7e),e(B7e,Rkr),e(Vt,Pkr),e(Vt,Nc),e(Nc,Bkr),e(Nc,I7e),e(I7e,Ikr),e(Nc,Nkr),e(Nc,kY),e(kY,qkr),e(Nc,jkr),e(Vt,Dkr),M(bC,Vt,null),e(gr,Gkr),e(gr,Gr),M(V8,Gr,null),e(Gr,Okr),e(Gr,N7e),e(N7e,Vkr),e(Gr,Xkr),e(Gr,_n),e(_n,zkr),e(_n,q7e),e(q7e,Wkr),e(_n,Qkr),e(_n,j7e),e(j7e,Hkr),e(_n,Ukr),e(_n,D7e),e(D7e,Jkr),e(_n,Ykr),e(Gr,Kkr),e(Gr,Ee),e(Ee,vC),e(vC,G7e),e(G7e,Zkr),e(vC,eSr),e(vC,SY),e(SY,oSr),e(vC,rSr),e(Ee,tSr),e(Ee,FC),e(FC,O7e),e(O7e,aSr),e(FC,nSr),e(FC,RY),e(RY,sSr),e(FC,lSr),e(Ee,iSr),e(Ee,TC),e(TC,V7e),e(V7e,dSr),e(TC,cSr),e(TC,PY),e(PY,fSr),e(TC,mSr),e(Ee,gSr),e(Ee,MC),e(MC,X7e),e(X7e,hSr),e(MC,pSr),e(MC,BY),e(BY,_Sr),e(MC,uSr),e(Ee,bSr),e(Ee,EC),e(EC,z7e),e(z7e,vSr),e(EC,FSr),e(EC,IY),e(IY,TSr),e(EC,MSr),e(Ee,ESr),e(Ee,CC),e(CC,W7e),e(W7e,CSr),e(CC,wSr),e(CC,NY),e(NY,ASr),e(CC,ySr),e(Ee,LSr),e(Ee,wC),e(wC,Q7e),e(Q7e,xSr),e(wC,$Sr),e(wC,qY),e(qY,kSr),e(wC,SSr),e(Ee,RSr),e(Ee,AC),e(AC,H7e),e(H7e,PSr),e(AC,BSr),e(AC,jY),e(jY,ISr),e(AC,NSr),e(Ee,qSr),e(Ee,yC),e(yC,U7e),e(U7e,jSr),e(yC,DSr),e(yC,DY),e(DY,GSr),e(yC,OSr),e(Ee,VSr),e(Ee,LC),e(LC,J7e),e(J7e,XSr),e(LC,zSr),e(LC,GY),e(GY,WSr),e(LC,QSr),e(Ee,HSr),e(Ee,xC),e(xC,Y7e),e(Y7e,USr),e(xC,JSr),e(xC,OY),e(OY,YSr),e(xC,KSr),e(Ee,ZSr),e(Ee,$C),e($C,K7e),e(K7e,eRr),e($C,oRr),e($C,VY),e(VY,rRr),e($C,tRr),e(Gr,aRr),M(kC,Gr,null),b(f,Zje,u),b(f,qc,u),e(qc,SC),e(SC,Z7e),M(X8,Z7e,null),e(qc,nRr),e(qc,e9e),e(e9e,sRr),b(f,eDe,u),b(f,hr,u),M(z8,hr,null),e(hr,lRr),e(hr,jc),e(jc,iRr),e(jc,XY),e(XY,dRr),e(jc,cRr),e(jc,zY),e(zY,fRr),e(jc,mRr),e(hr,gRr),e(hr,W8),e(W8,hRr),e(W8,o9e),e(o9e,pRr),e(W8,_Rr),e(hr,uRr),e(hr,Xt),M(Q8,Xt,null),e(Xt,bRr),e(Xt,r9e),e(r9e,vRr),e(Xt,FRr),e(Xt,Dc),e(Dc,TRr),e(Dc,t9e),e(t9e,MRr),e(Dc,ERr),e(Dc,WY),e(WY,CRr),e(Dc,wRr),e(Xt,ARr),M(RC,Xt,null),e(hr,yRr),e(hr,Or),M(H8,Or,null),e(Or,LRr),e(Or,a9e),e(a9e,xRr),e(Or,$Rr),e(Or,un),e(un,kRr),e(un,n9e),e(n9e,SRr),e(un,RRr),e(un,s9e),e(s9e,PRr),e(un,BRr),e(un,l9e),e(l9e,IRr),e(un,NRr),e(Or,qRr),e(Or,xe),e(xe,PC),e(PC,i9e),e(i9e,jRr),e(PC,DRr),e(PC,QY),e(QY,GRr),e(PC,ORr),e(xe,VRr),e(xe,BC),e(BC,d9e),e(d9e,XRr),e(BC,zRr),e(BC,HY),e(HY,WRr),e(BC,QRr),e(xe,HRr),e(xe,IC),e(IC,c9e),e(c9e,URr),e(IC,JRr),e(IC,UY),e(UY,YRr),e(IC,KRr),e(xe,ZRr),e(xe,NC),e(NC,f9e),e(f9e,ePr),e(NC,oPr),e(NC,JY),e(JY,rPr),e(NC,tPr),e(xe,aPr),e(xe,qC),e(qC,m9e),e(m9e,nPr),e(qC,sPr),e(qC,YY),e(YY,lPr),e(qC,iPr),e(xe,dPr),e(xe,jC),e(jC,g9e),e(g9e,cPr),e(jC,fPr),e(jC,KY),e(KY,mPr),e(jC,gPr),e(xe,hPr),e(xe,DC),e(DC,h9e),e(h9e,pPr),e(DC,_Pr),e(DC,ZY),e(ZY,uPr),e(DC,bPr),e(xe,vPr),e(xe,GC),e(GC,p9e),e(p9e,FPr),e(GC,TPr),e(GC,eK),e(eK,MPr),e(GC,EPr),e(xe,CPr),e(xe,OC),e(OC,_9e),e(_9e,wPr),e(OC,APr),e(OC,oK),e(oK,yPr),e(OC,LPr),e(xe,xPr),e(xe,VC),e(VC,u9e),e(u9e,$Pr),e(VC,kPr),e(VC,rK),e(rK,SPr),e(VC,RPr),e(Or,PPr),M(XC,Or,null),b(f,oDe,u),b(f,Gc,u),e(Gc,zC),e(zC,b9e),M(U8,b9e,null),e(Gc,BPr),e(Gc,v9e),e(v9e,IPr),b(f,rDe,u),b(f,pr,u),M(J8,pr,null),e(pr,NPr),e(pr,Oc),e(Oc,qPr),e(Oc,tK),e(tK,jPr),e(Oc,DPr),e(Oc,aK),e(aK,GPr),e(Oc,OPr),e(pr,VPr),e(pr,Y8),e(Y8,XPr),e(Y8,F9e),e(F9e,zPr),e(Y8,WPr),e(pr,QPr),e(pr,zt),M(K8,zt,null),e(zt,HPr),e(zt,T9e),e(T9e,UPr),e(zt,JPr),e(zt,Vc),e(Vc,YPr),e(Vc,M9e),e(M9e,KPr),e(Vc,ZPr),e(Vc,nK),e(nK,eBr),e(Vc,oBr),e(zt,rBr),M(WC,zt,null),e(pr,tBr),e(pr,Vr),M(Z8,Vr,null),e(Vr,aBr),e(Vr,E9e),e(E9e,nBr),e(Vr,sBr),e(Vr,bn),e(bn,lBr),e(bn,C9e),e(C9e,iBr),e(bn,dBr),e(bn,w9e),e(w9e,cBr),e(bn,fBr),e(bn,A9e),e(A9e,mBr),e(bn,gBr),e(Vr,hBr),e(Vr,Pe),e(Pe,QC),e(QC,y9e),e(y9e,pBr),e(QC,_Br),e(QC,sK),e(sK,uBr),e(QC,bBr),e(Pe,vBr),e(Pe,HC),e(HC,L9e),e(L9e,FBr),e(HC,TBr),e(HC,lK),e(lK,MBr),e(HC,EBr),e(Pe,CBr),e(Pe,UC),e(UC,x9e),e(x9e,wBr),e(UC,ABr),e(UC,iK),e(iK,yBr),e(UC,LBr),e(Pe,xBr),e(Pe,JC),e(JC,$9e),e($9e,$Br),e(JC,kBr),e(JC,dK),e(dK,SBr),e(JC,RBr),e(Pe,PBr),e(Pe,YC),e(YC,k9e),e(k9e,BBr),e(YC,IBr),e(YC,cK),e(cK,NBr),e(YC,qBr),e(Pe,jBr),e(Pe,KC),e(KC,S9e),e(S9e,DBr),e(KC,GBr),e(KC,fK),e(fK,OBr),e(KC,VBr),e(Pe,XBr),e(Pe,ZC),e(ZC,R9e),e(R9e,zBr),e(ZC,WBr),e(ZC,mK),e(mK,QBr),e(ZC,HBr),e(Pe,UBr),e(Pe,e3),e(e3,P9e),e(P9e,JBr),e(e3,YBr),e(e3,gK),e(gK,KBr),e(e3,ZBr),e(Pe,eIr),e(Pe,o3),e(o3,B9e),e(B9e,oIr),e(o3,rIr),e(o3,hK),e(hK,tIr),e(o3,aIr),e(Vr,nIr),M(r3,Vr,null),b(f,tDe,u),b(f,Xc,u),e(Xc,t3),e(t3,I9e),M(ex,I9e,null),e(Xc,sIr),e(Xc,N9e),e(N9e,lIr),b(f,aDe,u),b(f,_r,u),M(ox,_r,null),e(_r,iIr),e(_r,zc),e(zc,dIr),e(zc,pK),e(pK,cIr),e(zc,fIr),e(zc,_K),e(_K,mIr),e(zc,gIr),e(_r,hIr),e(_r,rx),e(rx,pIr),e(rx,q9e),e(q9e,_Ir),e(rx,uIr),e(_r,bIr),e(_r,Wt),M(tx,Wt,null),e(Wt,vIr),e(Wt,j9e),e(j9e,FIr),e(Wt,TIr),e(Wt,Wc),e(Wc,MIr),e(Wc,D9e),e(D9e,EIr),e(Wc,CIr),e(Wc,uK),e(uK,wIr),e(Wc,AIr),e(Wt,yIr),M(a3,Wt,null),e(_r,LIr),e(_r,Xr),M(ax,Xr,null),e(Xr,xIr),e(Xr,G9e),e(G9e,$Ir),e(Xr,kIr),e(Xr,vn),e(vn,SIr),e(vn,O9e),e(O9e,RIr),e(vn,PIr),e(vn,V9e),e(V9e,BIr),e(vn,IIr),e(vn,X9e),e(X9e,NIr),e(vn,qIr),e(Xr,jIr),e(Xr,$e),e($e,n3),e(n3,z9e),e(z9e,DIr),e(n3,GIr),e(n3,bK),e(bK,OIr),e(n3,VIr),e($e,XIr),e($e,s3),e(s3,W9e),e(W9e,zIr),e(s3,WIr),e(s3,vK),e(vK,QIr),e(s3,HIr),e($e,UIr),e($e,l3),e(l3,Q9e),e(Q9e,JIr),e(l3,YIr),e(l3,FK),e(FK,KIr),e(l3,ZIr),e($e,eNr),e($e,i3),e(i3,H9e),e(H9e,oNr),e(i3,rNr),e(i3,TK),e(TK,tNr),e(i3,aNr),e($e,nNr),e($e,d3),e(d3,U9e),e(U9e,sNr),e(d3,lNr),e(d3,MK),e(MK,iNr),e(d3,dNr),e($e,cNr),e($e,c3),e(c3,J9e),e(J9e,fNr),e(c3,mNr),e(c3,EK),e(EK,gNr),e(c3,hNr),e($e,pNr),e($e,f3),e(f3,Y9e),e(Y9e,_Nr),e(f3,uNr),e(f3,CK),e(CK,bNr),e(f3,vNr),e($e,FNr),e($e,m3),e(m3,K9e),e(K9e,TNr),e(m3,MNr),e(m3,wK),e(wK,ENr),e(m3,CNr),e($e,wNr),e($e,g3),e(g3,Z9e),e(Z9e,ANr),e(g3,yNr),e(g3,AK),e(AK,LNr),e(g3,xNr),e($e,$Nr),e($e,h3),e(h3,eMe),e(eMe,kNr),e(h3,SNr),e(h3,yK),e(yK,RNr),e(h3,PNr),e(Xr,BNr),M(p3,Xr,null),b(f,nDe,u),b(f,Qc,u),e(Qc,_3),e(_3,oMe),M(nx,oMe,null),e(Qc,INr),e(Qc,rMe),e(rMe,NNr),b(f,sDe,u),b(f,ur,u),M(sx,ur,null),e(ur,qNr),e(ur,Hc),e(Hc,jNr),e(Hc,LK),e(LK,DNr),e(Hc,GNr),e(Hc,xK),e(xK,ONr),e(Hc,VNr),e(ur,XNr),e(ur,lx),e(lx,zNr),e(lx,tMe),e(tMe,WNr),e(lx,QNr),e(ur,HNr),e(ur,Qt),M(ix,Qt,null),e(Qt,UNr),e(Qt,aMe),e(aMe,JNr),e(Qt,YNr),e(Qt,Uc),e(Uc,KNr),e(Uc,nMe),e(nMe,ZNr),e(Uc,eqr),e(Uc,$K),e($K,oqr),e(Uc,rqr),e(Qt,tqr),M(u3,Qt,null),e(ur,aqr),e(ur,zr),M(dx,zr,null),e(zr,nqr),e(zr,sMe),e(sMe,sqr),e(zr,lqr),e(zr,Fn),e(Fn,iqr),e(Fn,lMe),e(lMe,dqr),e(Fn,cqr),e(Fn,iMe),e(iMe,fqr),e(Fn,mqr),e(Fn,dMe),e(dMe,gqr),e(Fn,hqr),e(zr,pqr),e(zr,ke),e(ke,b3),e(b3,cMe),e(cMe,_qr),e(b3,uqr),e(b3,kK),e(kK,bqr),e(b3,vqr),e(ke,Fqr),e(ke,v3),e(v3,fMe),e(fMe,Tqr),e(v3,Mqr),e(v3,SK),e(SK,Eqr),e(v3,Cqr),e(ke,wqr),e(ke,F3),e(F3,mMe),e(mMe,Aqr),e(F3,yqr),e(F3,RK),e(RK,Lqr),e(F3,xqr),e(ke,$qr),e(ke,T3),e(T3,gMe),e(gMe,kqr),e(T3,Sqr),e(T3,PK),e(PK,Rqr),e(T3,Pqr),e(ke,Bqr),e(ke,M3),e(M3,hMe),e(hMe,Iqr),e(M3,Nqr),e(M3,BK),e(BK,qqr),e(M3,jqr),e(ke,Dqr),e(ke,E3),e(E3,pMe),e(pMe,Gqr),e(E3,Oqr),e(E3,IK),e(IK,Vqr),e(E3,Xqr),e(ke,zqr),e(ke,C3),e(C3,_Me),e(_Me,Wqr),e(C3,Qqr),e(C3,NK),e(NK,Hqr),e(C3,Uqr),e(ke,Jqr),e(ke,w3),e(w3,uMe),e(uMe,Yqr),e(w3,Kqr),e(w3,qK),e(qK,Zqr),e(w3,ejr),e(ke,ojr),e(ke,A3),e(A3,bMe),e(bMe,rjr),e(A3,tjr),e(A3,jK),e(jK,ajr),e(A3,njr),e(ke,sjr),e(ke,y3),e(y3,vMe),e(vMe,ljr),e(y3,ijr),e(y3,DK),e(DK,djr),e(y3,cjr),e(zr,fjr),M(L3,zr,null),b(f,lDe,u),b(f,Jc,u),e(Jc,x3),e(x3,FMe),M(cx,FMe,null),e(Jc,mjr),e(Jc,TMe),e(TMe,gjr),b(f,iDe,u),b(f,br,u),M(fx,br,null),e(br,hjr),e(br,Yc),e(Yc,pjr),e(Yc,GK),e(GK,_jr),e(Yc,ujr),e(Yc,OK),e(OK,bjr),e(Yc,vjr),e(br,Fjr),e(br,mx),e(mx,Tjr),e(mx,MMe),e(MMe,Mjr),e(mx,Ejr),e(br,Cjr),e(br,Ht),M(gx,Ht,null),e(Ht,wjr),e(Ht,EMe),e(EMe,Ajr),e(Ht,yjr),e(Ht,Kc),e(Kc,Ljr),e(Kc,CMe),e(CMe,xjr),e(Kc,$jr),e(Kc,VK),e(VK,kjr),e(Kc,Sjr),e(Ht,Rjr),M($3,Ht,null),e(br,Pjr),e(br,Wr),M(hx,Wr,null),e(Wr,Bjr),e(Wr,wMe),e(wMe,Ijr),e(Wr,Njr),e(Wr,Tn),e(Tn,qjr),e(Tn,AMe),e(AMe,jjr),e(Tn,Djr),e(Tn,yMe),e(yMe,Gjr),e(Tn,Ojr),e(Tn,LMe),e(LMe,Vjr),e(Tn,Xjr),e(Wr,zjr),e(Wr,Ge),e(Ge,k3),e(k3,xMe),e(xMe,Wjr),e(k3,Qjr),e(k3,XK),e(XK,Hjr),e(k3,Ujr),e(Ge,Jjr),e(Ge,S3),e(S3,$Me),e($Me,Yjr),e(S3,Kjr),e(S3,zK),e(zK,Zjr),e(S3,eDr),e(Ge,oDr),e(Ge,R3),e(R3,kMe),e(kMe,rDr),e(R3,tDr),e(R3,WK),e(WK,aDr),e(R3,nDr),e(Ge,sDr),e(Ge,P3),e(P3,SMe),e(SMe,lDr),e(P3,iDr),e(P3,QK),e(QK,dDr),e(P3,cDr),e(Ge,fDr),e(Ge,B3),e(B3,RMe),e(RMe,mDr),e(B3,gDr),e(B3,HK),e(HK,hDr),e(B3,pDr),e(Ge,_Dr),e(Ge,I3),e(I3,PMe),e(PMe,uDr),e(I3,bDr),e(I3,UK),e(UK,vDr),e(I3,FDr),e(Ge,TDr),e(Ge,N3),e(N3,BMe),e(BMe,MDr),e(N3,EDr),e(N3,JK),e(JK,CDr),e(N3,wDr),e(Ge,ADr),e(Ge,q3),e(q3,IMe),e(IMe,yDr),e(q3,LDr),e(q3,YK),e(YK,xDr),e(q3,$Dr),e(Wr,kDr),M(j3,Wr,null),b(f,dDe,u),b(f,Zc,u),e(Zc,D3),e(D3,NMe),M(px,NMe,null),e(Zc,SDr),e(Zc,qMe),e(qMe,RDr),b(f,cDe,u),b(f,vr,u),M(_x,vr,null),e(vr,PDr),e(vr,ef),e(ef,BDr),e(ef,KK),e(KK,IDr),e(ef,NDr),e(ef,ZK),e(ZK,qDr),e(ef,jDr),e(vr,DDr),e(vr,ux),e(ux,GDr),e(ux,jMe),e(jMe,ODr),e(ux,VDr),e(vr,XDr),e(vr,Ut),M(bx,Ut,null),e(Ut,zDr),e(Ut,DMe),e(DMe,WDr),e(Ut,QDr),e(Ut,of),e(of,HDr),e(of,GMe),e(GMe,UDr),e(of,JDr),e(of,eZ),e(eZ,YDr),e(of,KDr),e(Ut,ZDr),M(G3,Ut,null),e(vr,eGr),e(vr,Qr),M(vx,Qr,null),e(Qr,oGr),e(Qr,OMe),e(OMe,rGr),e(Qr,tGr),e(Qr,Mn),e(Mn,aGr),e(Mn,VMe),e(VMe,nGr),e(Mn,sGr),e(Mn,XMe),e(XMe,lGr),e(Mn,iGr),e(Mn,zMe),e(zMe,dGr),e(Mn,cGr),e(Qr,fGr),e(Qr,Oe),e(Oe,O3),e(O3,WMe),e(WMe,mGr),e(O3,gGr),e(O3,oZ),e(oZ,hGr),e(O3,pGr),e(Oe,_Gr),e(Oe,V3),e(V3,QMe),e(QMe,uGr),e(V3,bGr),e(V3,rZ),e(rZ,vGr),e(V3,FGr),e(Oe,TGr),e(Oe,X3),e(X3,HMe),e(HMe,MGr),e(X3,EGr),e(X3,tZ),e(tZ,CGr),e(X3,wGr),e(Oe,AGr),e(Oe,z3),e(z3,UMe),e(UMe,yGr),e(z3,LGr),e(z3,aZ),e(aZ,xGr),e(z3,$Gr),e(Oe,kGr),e(Oe,W3),e(W3,JMe),e(JMe,SGr),e(W3,RGr),e(W3,nZ),e(nZ,PGr),e(W3,BGr),e(Oe,IGr),e(Oe,Q3),e(Q3,YMe),e(YMe,NGr),e(Q3,qGr),e(Q3,sZ),e(sZ,jGr),e(Q3,DGr),e(Oe,GGr),e(Oe,H3),e(H3,KMe),e(KMe,OGr),e(H3,VGr),e(H3,lZ),e(lZ,XGr),e(H3,zGr),e(Oe,WGr),e(Oe,U3),e(U3,ZMe),e(ZMe,QGr),e(U3,HGr),e(U3,iZ),e(iZ,UGr),e(U3,JGr),e(Qr,YGr),M(J3,Qr,null),b(f,fDe,u),b(f,rf,u),e(rf,Y3),e(Y3,eEe),M(Fx,eEe,null),e(rf,KGr),e(rf,oEe),e(oEe,ZGr),b(f,mDe,u),b(f,Fr,u),M(Tx,Fr,null),e(Fr,eOr),e(Fr,tf),e(tf,oOr),e(tf,dZ),e(dZ,rOr),e(tf,tOr),e(tf,cZ),e(cZ,aOr),e(tf,nOr),e(Fr,sOr),e(Fr,Mx),e(Mx,lOr),e(Mx,rEe),e(rEe,iOr),e(Mx,dOr),e(Fr,cOr),e(Fr,Jt),M(Ex,Jt,null),e(Jt,fOr),e(Jt,tEe),e(tEe,mOr),e(Jt,gOr),e(Jt,af),e(af,hOr),e(af,aEe),e(aEe,pOr),e(af,_Or),e(af,fZ),e(fZ,uOr),e(af,bOr),e(Jt,vOr),M(K3,Jt,null),e(Fr,FOr),e(Fr,Hr),M(Cx,Hr,null),e(Hr,TOr),e(Hr,nEe),e(nEe,MOr),e(Hr,EOr),e(Hr,En),e(En,COr),e(En,sEe),e(sEe,wOr),e(En,AOr),e(En,lEe),e(lEe,yOr),e(En,LOr),e(En,iEe),e(iEe,xOr),e(En,$Or),e(Hr,kOr),e(Hr,dEe),e(dEe,Z3),e(Z3,cEe),e(cEe,SOr),e(Z3,ROr),e(Z3,mZ),e(mZ,POr),e(Z3,BOr),e(Hr,IOr),M(ew,Hr,null),b(f,gDe,u),b(f,nf,u),e(nf,ow),e(ow,fEe),M(wx,fEe,null),e(nf,NOr),e(nf,mEe),e(mEe,qOr),b(f,hDe,u),b(f,Tr,u),M(Ax,Tr,null),e(Tr,jOr),e(Tr,sf),e(sf,DOr),e(sf,gZ),e(gZ,GOr),e(sf,OOr),e(sf,hZ),e(hZ,VOr),e(sf,XOr),e(Tr,zOr),e(Tr,yx),e(yx,WOr),e(yx,gEe),e(gEe,QOr),e(yx,HOr),e(Tr,UOr),e(Tr,Yt),M(Lx,Yt,null),e(Yt,JOr),e(Yt,hEe),e(hEe,YOr),e(Yt,KOr),e(Yt,lf),e(lf,ZOr),e(lf,pEe),e(pEe,eVr),e(lf,oVr),e(lf,pZ),e(pZ,rVr),e(lf,tVr),e(Yt,aVr),M(rw,Yt,null),e(Tr,nVr),e(Tr,Ur),M(xx,Ur,null),e(Ur,sVr),e(Ur,_Ee),e(_Ee,lVr),e(Ur,iVr),e(Ur,Cn),e(Cn,dVr),e(Cn,uEe),e(uEe,cVr),e(Cn,fVr),e(Cn,bEe),e(bEe,mVr),e(Cn,gVr),e(Cn,vEe),e(vEe,hVr),e(Cn,pVr),e(Ur,_Vr),e(Ur,$x),e($x,tw),e(tw,FEe),e(FEe,uVr),e(tw,bVr),e(tw,_Z),e(_Z,vVr),e(tw,FVr),e($x,TVr),e($x,aw),e(aw,TEe),e(TEe,MVr),e(aw,EVr),e(aw,uZ),e(uZ,CVr),e(aw,wVr),e(Ur,AVr),M(nw,Ur,null),b(f,pDe,u),b(f,df,u),e(df,sw),e(sw,MEe),M(kx,MEe,null),e(df,yVr),e(df,EEe),e(EEe,LVr),b(f,_De,u),b(f,Mr,u),M(Sx,Mr,null),e(Mr,xVr),e(Mr,cf),e(cf,$Vr),e(cf,bZ),e(bZ,kVr),e(cf,SVr),e(cf,vZ),e(vZ,RVr),e(cf,PVr),e(Mr,BVr),e(Mr,Rx),e(Rx,IVr),e(Rx,CEe),e(CEe,NVr),e(Rx,qVr),e(Mr,jVr),e(Mr,Kt),M(Px,Kt,null),e(Kt,DVr),e(Kt,wEe),e(wEe,GVr),e(Kt,OVr),e(Kt,ff),e(ff,VVr),e(ff,AEe),e(AEe,XVr),e(ff,zVr),e(ff,FZ),e(FZ,WVr),e(ff,QVr),e(Kt,HVr),M(lw,Kt,null),e(Mr,UVr),e(Mr,Jr),M(Bx,Jr,null),e(Jr,JVr),e(Jr,yEe),e(yEe,YVr),e(Jr,KVr),e(Jr,wn),e(wn,ZVr),e(wn,LEe),e(LEe,eXr),e(wn,oXr),e(wn,xEe),e(xEe,rXr),e(wn,tXr),e(wn,$Ee),e($Ee,aXr),e(wn,nXr),e(Jr,sXr),e(Jr,kEe),e(kEe,iw),e(iw,SEe),e(SEe,lXr),e(iw,iXr),e(iw,TZ),e(TZ,dXr),e(iw,cXr),e(Jr,fXr),M(dw,Jr,null),uDe=!0},p(f,[u]){const Ix={};u&2&&(Ix.$$scope={dirty:u,ctx:f}),Ff.$set(Ix);const REe={};u&2&&(REe.$$scope={dirty:u,ctx:f}),Eg.$set(REe);const PEe={};u&2&&(PEe.$$scope={dirty:u,ctx:f}),ah.$set(PEe);const BEe={};u&2&&(BEe.$$scope={dirty:u,ctx:f}),Ih.$set(BEe);const Nx={};u&2&&(Nx.$$scope={dirty:u,ctx:f}),Nh.$set(Nx);const IEe={};u&2&&(IEe.$$scope={dirty:u,ctx:f}),tp.$set(IEe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),ap.$set(An);const NEe={};u&2&&(NEe.$$scope={dirty:u,ctx:f}),lp.$set(NEe);const qEe={};u&2&&(qEe.$$scope={dirty:u,ctx:f}),ru.$set(qEe);const jEe={};u&2&&(jEe.$$scope={dirty:u,ctx:f}),au.$set(jEe);const qx={};u&2&&(qx.$$scope={dirty:u,ctx:f}),Hu.$set(qx);const DEe={};u&2&&(DEe.$$scope={dirty:u,ctx:f}),Ju.$set(DEe);const jx={};u&2&&(jx.$$scope={dirty:u,ctx:f}),B1.$set(jx);const GEe={};u&2&&(GEe.$$scope={dirty:u,ctx:f}),N1.$set(GEe);const Dx={};u&2&&(Dx.$$scope={dirty:u,ctx:f}),Fb.$set(Dx);const OEe={};u&2&&(OEe.$$scope={dirty:u,ctx:f}),Mb.$set(OEe);const VEe={};u&2&&(VEe.$$scope={dirty:u,ctx:f}),Db.$set(VEe);const XEe={};u&2&&(XEe.$$scope={dirty:u,ctx:f}),Ob.$set(XEe);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),N2.$set(mf);const zEe={};u&2&&(zEe.$$scope={dirty:u,ctx:f}),j2.$set(zEe);const WEe={};u&2&&(WEe.$$scope={dirty:u,ctx:f}),_4.$set(WEe);const QEe={};u&2&&(QEe.$$scope={dirty:u,ctx:f}),b4.$set(QEe);const Gx={};u&2&&(Gx.$$scope={dirty:u,ctx:f}),w4.$set(Gx);const HEe={};u&2&&(HEe.$$scope={dirty:u,ctx:f}),y4.$set(HEe);const UEe={};u&2&&(UEe.$$scope={dirty:u,ctx:f}),d5.$set(UEe);const JEe={};u&2&&(JEe.$$scope={dirty:u,ctx:f}),f5.$set(JEe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),Z5.$set(et);const Ox={};u&2&&(Ox.$$scope={dirty:u,ctx:f}),ov.$set(Ox);const YEe={};u&2&&(YEe.$$scope={dirty:u,ctx:f}),av.$set(YEe);const Vx={};u&2&&(Vx.$$scope={dirty:u,ctx:f}),sv.$set(Vx);const KEe={};u&2&&(KEe.$$scope={dirty:u,ctx:f}),Fv.$set(KEe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),Mv.$set(ot);const ZEe={};u&2&&(ZEe.$$scope={dirty:u,ctx:f}),wv.$set(ZEe);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),yv.$set(gf);const eCe={};u&2&&(eCe.$$scope={dirty:u,ctx:f}),qv.$set(eCe);const oCe={};u&2&&(oCe.$$scope={dirty:u,ctx:f}),Dv.$set(oCe);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),Qv.$set(y);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),Uv.$set(cw);const rCe={};u&2&&(rCe.$$scope={dirty:u,ctx:f}),sF.$set(rCe);const tCe={};u&2&&(tCe.$$scope={dirty:u,ctx:f}),iF.$set(tCe);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),mF.$set(fw);const aCe={};u&2&&(aCe.$$scope={dirty:u,ctx:f}),hF.$set(aCe);const nCe={};u&2&&(nCe.$$scope={dirty:u,ctx:f}),TF.$set(nCe);const mw={};u&2&&(mw.$$scope={dirty:u,ctx:f}),EF.$set(mw);const sCe={};u&2&&(sCe.$$scope={dirty:u,ctx:f}),LF.$set(sCe);const lCe={};u&2&&(lCe.$$scope={dirty:u,ctx:f}),$F.$set(lCe);const gw={};u&2&&(gw.$$scope={dirty:u,ctx:f}),PF.$set(gw);const iCe={};u&2&&(iCe.$$scope={dirty:u,ctx:f}),IF.$set(iCe);const dCe={};u&2&&(dCe.$$scope={dirty:u,ctx:f}),jF.$set(dCe);const hw={};u&2&&(hw.$$scope={dirty:u,ctx:f}),GF.$set(hw);const cCe={};u&2&&(cCe.$$scope={dirty:u,ctx:f}),QF.$set(cCe);const fCe={};u&2&&(fCe.$$scope={dirty:u,ctx:f}),UF.$set(fCe);const pw={};u&2&&(pw.$$scope={dirty:u,ctx:f}),KF.$set(pw);const mCe={};u&2&&(mCe.$$scope={dirty:u,ctx:f}),eT.$set(mCe);const gCe={};u&2&&(gCe.$$scope={dirty:u,ctx:f}),QT.$set(gCe);const _w={};u&2&&(_w.$$scope={dirty:u,ctx:f}),UT.$set(_w);const hCe={};u&2&&(hCe.$$scope={dirty:u,ctx:f}),v7.$set(hCe);const pCe={};u&2&&(pCe.$$scope={dirty:u,ctx:f}),T7.$set(pCe);const uw={};u&2&&(uw.$$scope={dirty:u,ctx:f}),B7.$set(uw);const _Ce={};u&2&&(_Ce.$$scope={dirty:u,ctx:f}),N7.$set(_Ce);const uCe={};u&2&&(uCe.$$scope={dirty:u,ctx:f}),O7.$set(uCe);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),X7.$set(bw);const bCe={};u&2&&(bCe.$$scope={dirty:u,ctx:f}),f9.$set(bCe);const vCe={};u&2&&(vCe.$$scope={dirty:u,ctx:f}),g9.$set(vCe);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),C9.$set(vw);const FCe={};u&2&&(FCe.$$scope={dirty:u,ctx:f}),A9.$set(FCe);const TCe={};u&2&&(TCe.$$scope={dirty:u,ctx:f}),Z9.$set(TCe);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),oM.$set(Fw);const MCe={};u&2&&(MCe.$$scope={dirty:u,ctx:f}),vM.$set(MCe);const ECe={};u&2&&(ECe.$$scope={dirty:u,ctx:f}),TM.$set(ECe);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),CM.$set(Tw);const CCe={};u&2&&(CCe.$$scope={dirty:u,ctx:f}),AM.$set(CCe);const wCe={};u&2&&(wCe.$$scope={dirty:u,ctx:f}),LM.$set(wCe);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),$M.$set(Mw);const ACe={};u&2&&(ACe.$$scope={dirty:u,ctx:f}),YM.$set(ACe);const yCe={};u&2&&(yCe.$$scope={dirty:u,ctx:f}),ZM.$set(yCe);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),FE.$set(Ew);const LCe={};u&2&&(LCe.$$scope={dirty:u,ctx:f}),ME.$set(LCe);const xCe={};u&2&&(xCe.$$scope={dirty:u,ctx:f}),CE.$set(xCe);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),AE.$set(Cw);const $Ce={};u&2&&($Ce.$$scope={dirty:u,ctx:f}),LE.$set($Ce);const kCe={};u&2&&(kCe.$$scope={dirty:u,ctx:f}),$E.$set(kCe);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),tC.$set(ww);const SCe={};u&2&&(SCe.$$scope={dirty:u,ctx:f}),nC.$set(SCe);const RCe={};u&2&&(RCe.$$scope={dirty:u,ctx:f}),_C.$set(RCe);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),bC.$set(Aw);const PCe={};u&2&&(PCe.$$scope={dirty:u,ctx:f}),kC.$set(PCe);const BCe={};u&2&&(BCe.$$scope={dirty:u,ctx:f}),RC.$set(BCe);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),XC.$set(yw);const ICe={};u&2&&(ICe.$$scope={dirty:u,ctx:f}),WC.$set(ICe);const NCe={};u&2&&(NCe.$$scope={dirty:u,ctx:f}),r3.$set(NCe);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),a3.$set(Lw);const qCe={};u&2&&(qCe.$$scope={dirty:u,ctx:f}),p3.$set(qCe);const jCe={};u&2&&(jCe.$$scope={dirty:u,ctx:f}),u3.$set(jCe);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),L3.$set(xw);const DCe={};u&2&&(DCe.$$scope={dirty:u,ctx:f}),$3.$set(DCe);const GCe={};u&2&&(GCe.$$scope={dirty:u,ctx:f}),j3.$set(GCe);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),G3.$set($w);const OCe={};u&2&&(OCe.$$scope={dirty:u,ctx:f}),J3.$set(OCe);const VCe={};u&2&&(VCe.$$scope={dirty:u,ctx:f}),K3.$set(VCe);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),ew.$set(kw);const XCe={};u&2&&(XCe.$$scope={dirty:u,ctx:f}),rw.$set(XCe);const zCe={};u&2&&(zCe.$$scope={dirty:u,ctx:f}),nw.$set(zCe);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),lw.$set(Sw);const WCe={};u&2&&(WCe.$$scope={dirty:u,ctx:f}),dw.$set(WCe)},i(f){uDe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(k6.$$.fragment,f),E(S6.$$.fragment,f),E(Ff.$$.fragment,f),E(R6.$$.fragment,f),E(P6.$$.fragment,f),E(N6.$$.fragment,f),E(Eg.$$.fragment,f),E(q6.$$.fragment,f),E(j6.$$.fragment,f),E(D6.$$.fragment,f),E(V6.$$.fragment,f),E(ah.$$.fragment,f),E(X6.$$.fragment,f),E(z6.$$.fragment,f),E(W6.$$.fragment,f),E(U6.$$.fragment,f),E(Ih.$$.fragment,f),E(Nh.$$.fragment,f),E(J6.$$.fragment,f),E(Y6.$$.fragment,f),E(K6.$$.fragment,f),E(oA.$$.fragment,f),E(tp.$$.fragment,f),E(ap.$$.fragment,f),E(rA.$$.fragment,f),E(tA.$$.fragment,f),E(aA.$$.fragment,f),E(sA.$$.fragment,f),E(lp.$$.fragment,f),E(lA.$$.fragment,f),E(ru.$$.fragment,f),E(iA.$$.fragment,f),E(dA.$$.fragment,f),E(fA.$$.fragment,f),E(au.$$.fragment,f),E(mA.$$.fragment,f),E(Hu.$$.fragment,f),E(gA.$$.fragment,f),E(hA.$$.fragment,f),E(_A.$$.fragment,f),E(Ju.$$.fragment,f),E(uA.$$.fragment,f),E(B1.$$.fragment,f),E(bA.$$.fragment,f),E(vA.$$.fragment,f),E(TA.$$.fragment,f),E(N1.$$.fragment,f),E(MA.$$.fragment,f),E(Fb.$$.fragment,f),E(EA.$$.fragment,f),E(CA.$$.fragment,f),E(AA.$$.fragment,f),E(Mb.$$.fragment,f),E(yA.$$.fragment,f),E(Db.$$.fragment,f),E(LA.$$.fragment,f),E(xA.$$.fragment,f),E(kA.$$.fragment,f),E(Ob.$$.fragment,f),E(SA.$$.fragment,f),E(N2.$$.fragment,f),E(RA.$$.fragment,f),E(PA.$$.fragment,f),E(IA.$$.fragment,f),E(j2.$$.fragment,f),E(NA.$$.fragment,f),E(_4.$$.fragment,f),E(qA.$$.fragment,f),E(jA.$$.fragment,f),E(GA.$$.fragment,f),E(b4.$$.fragment,f),E(OA.$$.fragment,f),E(w4.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(WA.$$.fragment,f),E(y4.$$.fragment,f),E(QA.$$.fragment,f),E(d5.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(YA.$$.fragment,f),E(f5.$$.fragment,f),E(KA.$$.fragment,f),E(Z5.$$.fragment,f),E(ZA.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(ov.$$.fragment,f),E(ty.$$.fragment,f),E(av.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(sv.$$.fragment,f),E(iy.$$.fragment,f),E(Fv.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(Mv.$$.fragment,f),E(gy.$$.fragment,f),E(wv.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(yv.$$.fragment,f),E(by.$$.fragment,f),E(qv.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(Dv.$$.fragment,f),E(Ey.$$.fragment,f),E(Qv.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(Uv.$$.fragment,f),E(Ly.$$.fragment,f),E(sF.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(iF.$$.fragment,f),E(Ry.$$.fragment,f),E(mF.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(hF.$$.fragment,f),E(jy.$$.fragment,f),E(TF.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(EF.$$.fragment,f),E(Xy.$$.fragment,f),E(LF.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E($F.$$.fragment,f),E(Uy.$$.fragment,f),E(PF.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(eL.$$.fragment,f),E(IF.$$.fragment,f),E(oL.$$.fragment,f),E(jF.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(nL.$$.fragment,f),E(GF.$$.fragment,f),E(sL.$$.fragment,f),E(QF.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(cL.$$.fragment,f),E(UF.$$.fragment,f),E(fL.$$.fragment,f),E(KF.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(eT.$$.fragment,f),E(_L.$$.fragment,f),E(QT.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(UT.$$.fragment,f),E(TL.$$.fragment,f),E(v7.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(T7.$$.fragment,f),E(AL.$$.fragment,f),E(B7.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(N7.$$.fragment,f),E(kL.$$.fragment,f),E(O7.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(X7.$$.fragment,f),E(IL.$$.fragment,f),E(f9.$$.fragment,f),E(NL.$$.fragment,f),E(qL.$$.fragment,f),E(DL.$$.fragment,f),E(g9.$$.fragment,f),E(GL.$$.fragment,f),E(C9.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(A9.$$.fragment,f),E(WL.$$.fragment,f),E(Z9.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(oM.$$.fragment,f),E(YL.$$.fragment,f),E(vM.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(TM.$$.fragment,f),E(r8.$$.fragment,f),E(CM.$$.fragment,f),E(a8.$$.fragment,f),E(n8.$$.fragment,f),E(l8.$$.fragment,f),E(AM.$$.fragment,f),E(i8.$$.fragment,f),E(LM.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E($M.$$.fragment,f),E(g8.$$.fragment,f),E(YM.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(ZM.$$.fragment,f),E(b8.$$.fragment,f),E(FE.$$.fragment,f),E(v8.$$.fragment,f),E(F8.$$.fragment,f),E(M8.$$.fragment,f),E(ME.$$.fragment,f),E(E8.$$.fragment,f),E(CE.$$.fragment,f),E(C8.$$.fragment,f),E(w8.$$.fragment,f),E(y8.$$.fragment,f),E(AE.$$.fragment,f),E(L8.$$.fragment,f),E(LE.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E($E.$$.fragment,f),E(R8.$$.fragment,f),E(tC.$$.fragment,f),E(P8.$$.fragment,f),E(B8.$$.fragment,f),E(N8.$$.fragment,f),E(nC.$$.fragment,f),E(q8.$$.fragment,f),E(_C.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(bC.$$.fragment,f),E(V8.$$.fragment,f),E(kC.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(RC.$$.fragment,f),E(H8.$$.fragment,f),E(XC.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(WC.$$.fragment,f),E(Z8.$$.fragment,f),E(r3.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(a3.$$.fragment,f),E(ax.$$.fragment,f),E(p3.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(u3.$$.fragment,f),E(dx.$$.fragment,f),E(L3.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E($3.$$.fragment,f),E(hx.$$.fragment,f),E(j3.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(G3.$$.fragment,f),E(vx.$$.fragment,f),E(J3.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(K3.$$.fragment,f),E(Cx.$$.fragment,f),E(ew.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(rw.$$.fragment,f),E(xx.$$.fragment,f),E(nw.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(lw.$$.fragment,f),E(Bx.$$.fragment,f),E(dw.$$.fragment,f),uDe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(k6.$$.fragment,f),C(S6.$$.fragment,f),C(Ff.$$.fragment,f),C(R6.$$.fragment,f),C(P6.$$.fragment,f),C(N6.$$.fragment,f),C(Eg.$$.fragment,f),C(q6.$$.fragment,f),C(j6.$$.fragment,f),C(D6.$$.fragment,f),C(V6.$$.fragment,f),C(ah.$$.fragment,f),C(X6.$$.fragment,f),C(z6.$$.fragment,f),C(W6.$$.fragment,f),C(U6.$$.fragment,f),C(Ih.$$.fragment,f),C(Nh.$$.fragment,f),C(J6.$$.fragment,f),C(Y6.$$.fragment,f),C(K6.$$.fragment,f),C(oA.$$.fragment,f),C(tp.$$.fragment,f),C(ap.$$.fragment,f),C(rA.$$.fragment,f),C(tA.$$.fragment,f),C(aA.$$.fragment,f),C(sA.$$.fragment,f),C(lp.$$.fragment,f),C(lA.$$.fragment,f),C(ru.$$.fragment,f),C(iA.$$.fragment,f),C(dA.$$.fragment,f),C(fA.$$.fragment,f),C(au.$$.fragment,f),C(mA.$$.fragment,f),C(Hu.$$.fragment,f),C(gA.$$.fragment,f),C(hA.$$.fragment,f),C(_A.$$.fragment,f),C(Ju.$$.fragment,f),C(uA.$$.fragment,f),C(B1.$$.fragment,f),C(bA.$$.fragment,f),C(vA.$$.fragment,f),C(TA.$$.fragment,f),C(N1.$$.fragment,f),C(MA.$$.fragment,f),C(Fb.$$.fragment,f),C(EA.$$.fragment,f),C(CA.$$.fragment,f),C(AA.$$.fragment,f),C(Mb.$$.fragment,f),C(yA.$$.fragment,f),C(Db.$$.fragment,f),C(LA.$$.fragment,f),C(xA.$$.fragment,f),C(kA.$$.fragment,f),C(Ob.$$.fragment,f),C(SA.$$.fragment,f),C(N2.$$.fragment,f),C(RA.$$.fragment,f),C(PA.$$.fragment,f),C(IA.$$.fragment,f),C(j2.$$.fragment,f),C(NA.$$.fragment,f),C(_4.$$.fragment,f),C(qA.$$.fragment,f),C(jA.$$.fragment,f),C(GA.$$.fragment,f),C(b4.$$.fragment,f),C(OA.$$.fragment,f),C(w4.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(WA.$$.fragment,f),C(y4.$$.fragment,f),C(QA.$$.fragment,f),C(d5.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(YA.$$.fragment,f),C(f5.$$.fragment,f),C(KA.$$.fragment,f),C(Z5.$$.fragment,f),C(ZA.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(ov.$$.fragment,f),C(ty.$$.fragment,f),C(av.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(sv.$$.fragment,f),C(iy.$$.fragment,f),C(Fv.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(Mv.$$.fragment,f),C(gy.$$.fragment,f),C(wv.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(yv.$$.fragment,f),C(by.$$.fragment,f),C(qv.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(Dv.$$.fragment,f),C(Ey.$$.fragment,f),C(Qv.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(Uv.$$.fragment,f),C(Ly.$$.fragment,f),C(sF.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(iF.$$.fragment,f),C(Ry.$$.fragment,f),C(mF.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(hF.$$.fragment,f),C(jy.$$.fragment,f),C(TF.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(EF.$$.fragment,f),C(Xy.$$.fragment,f),C(LF.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C($F.$$.fragment,f),C(Uy.$$.fragment,f),C(PF.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(eL.$$.fragment,f),C(IF.$$.fragment,f),C(oL.$$.fragment,f),C(jF.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(nL.$$.fragment,f),C(GF.$$.fragment,f),C(sL.$$.fragment,f),C(QF.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(cL.$$.fragment,f),C(UF.$$.fragment,f),C(fL.$$.fragment,f),C(KF.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(eT.$$.fragment,f),C(_L.$$.fragment,f),C(QT.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(UT.$$.fragment,f),C(TL.$$.fragment,f),C(v7.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(T7.$$.fragment,f),C(AL.$$.fragment,f),C(B7.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(N7.$$.fragment,f),C(kL.$$.fragment,f),C(O7.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(X7.$$.fragment,f),C(IL.$$.fragment,f),C(f9.$$.fragment,f),C(NL.$$.fragment,f),C(qL.$$.fragment,f),C(DL.$$.fragment,f),C(g9.$$.fragment,f),C(GL.$$.fragment,f),C(C9.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(A9.$$.fragment,f),C(WL.$$.fragment,f),C(Z9.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(oM.$$.fragment,f),C(YL.$$.fragment,f),C(vM.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(TM.$$.fragment,f),C(r8.$$.fragment,f),C(CM.$$.fragment,f),C(a8.$$.fragment,f),C(n8.$$.fragment,f),C(l8.$$.fragment,f),C(AM.$$.fragment,f),C(i8.$$.fragment,f),C(LM.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C($M.$$.fragment,f),C(g8.$$.fragment,f),C(YM.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(ZM.$$.fragment,f),C(b8.$$.fragment,f),C(FE.$$.fragment,f),C(v8.$$.fragment,f),C(F8.$$.fragment,f),C(M8.$$.fragment,f),C(ME.$$.fragment,f),C(E8.$$.fragment,f),C(CE.$$.fragment,f),C(C8.$$.fragment,f),C(w8.$$.fragment,f),C(y8.$$.fragment,f),C(AE.$$.fragment,f),C(L8.$$.fragment,f),C(LE.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C($E.$$.fragment,f),C(R8.$$.fragment,f),C(tC.$$.fragment,f),C(P8.$$.fragment,f),C(B8.$$.fragment,f),C(N8.$$.fragment,f),C(nC.$$.fragment,f),C(q8.$$.fragment,f),C(_C.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(bC.$$.fragment,f),C(V8.$$.fragment,f),C(kC.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(RC.$$.fragment,f),C(H8.$$.fragment,f),C(XC.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(WC.$$.fragment,f),C(Z8.$$.fragment,f),C(r3.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(a3.$$.fragment,f),C(ax.$$.fragment,f),C(p3.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(u3.$$.fragment,f),C(dx.$$.fragment,f),C(L3.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C($3.$$.fragment,f),C(hx.$$.fragment,f),C(j3.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(G3.$$.fragment,f),C(vx.$$.fragment,f),C(J3.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(K3.$$.fragment,f),C(Cx.$$.fragment,f),C(ew.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(rw.$$.fragment,f),C(xx.$$.fragment,f),C(nw.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(lw.$$.fragment,f),C(Bx.$$.fragment,f),C(dw.$$.fragment,f),uDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(De),f&&t(We),f&&t(uf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(hqe),f&&t(bi),w(k6),f&&t(pqe),f&&t(kn),f&&t(_qe),w(S6,f),f&&t(uqe),f&&t(ek),f&&t(bqe),w(Ff,f),f&&t(vqe),f&&t(vi),w(R6),f&&t(Fqe),f&&t(Co),w(P6),w(N6),w(Eg),w(q6),f&&t(Tqe),f&&t(Ti),w(j6),f&&t(Mqe),f&&t(wo),w(D6),w(V6),w(ah),w(X6),f&&t(Eqe),f&&t(Mi),w(z6),f&&t(Cqe),f&&t(Ao),w(W6),w(U6),w(Ih),w(Nh),w(J6),f&&t(wqe),f&&t(Ei),w(Y6),f&&t(Aqe),f&&t(yo),w(K6),w(oA),w(tp),w(ap),w(rA),f&&t(yqe),f&&t(wi),w(tA),f&&t(Lqe),f&&t(Lo),w(aA),w(sA),w(lp),w(lA),w(ru),f&&t(xqe),f&&t(Li),w(iA),f&&t($qe),f&&t(xo),w(dA),w(fA),w(au),w(mA),w(Hu),f&&t(kqe),f&&t(ki),w(gA),f&&t(Sqe),f&&t($o),w(hA),w(_A),w(Ju),w(uA),w(B1),f&&t(Rqe),f&&t(Pi),w(bA),f&&t(Pqe),f&&t(ko),w(vA),w(TA),w(N1),w(MA),w(Fb),f&&t(Bqe),f&&t(Ni),w(EA),f&&t(Iqe),f&&t(So),w(CA),w(AA),w(Mb),w(yA),w(Db),f&&t(Nqe),f&&t(Di),w(LA),f&&t(qqe),f&&t(Ro),w(xA),w(kA),w(Ob),w(SA),w(N2),f&&t(jqe),f&&t(Vi),w(RA),f&&t(Dqe),f&&t(Po),w(PA),w(IA),w(j2),w(NA),w(_4),f&&t(Gqe),f&&t(Wi),w(qA),f&&t(Oqe),f&&t(Bo),w(jA),w(GA),w(b4),w(OA),w(w4),f&&t(Vqe),f&&t(Ui),w(VA),f&&t(Xqe),f&&t(Io),w(XA),w(WA),w(y4),w(QA),w(d5),f&&t(zqe),f&&t(Ki),w(HA),f&&t(Wqe),f&&t(No),w(UA),w(YA),w(f5),w(KA),w(Z5),f&&t(Qqe),f&&t(od),w(ZA),f&&t(Hqe),f&&t(qo),w(ey),w(ry),w(ov),w(ty),w(av),f&&t(Uqe),f&&t(ad),w(ay),f&&t(Jqe),f&&t(jo),w(ny),w(ly),w(sv),w(iy),w(Fv),f&&t(Yqe),f&&t(ld),w(dy),f&&t(Kqe),f&&t(Do),w(cy),w(my),w(Mv),w(gy),w(wv),f&&t(Zqe),f&&t(cd),w(hy),f&&t(eje),f&&t(Go),w(py),w(uy),w(yv),w(by),w(qv),f&&t(oje),f&&t(gd),w(vy),f&&t(rje),f&&t(Oo),w(Fy),w(My),w(Dv),w(Ey),w(Qv),f&&t(tje),f&&t(_d),w(Cy),f&&t(aje),f&&t(Vo),w(wy),w(yy),w(Uv),w(Ly),w(sF),f&&t(nje),f&&t(vd),w(xy),f&&t(sje),f&&t(Xo),w($y),w(Sy),w(iF),w(Ry),w(mF),f&&t(lje),f&&t(Md),w(By),f&&t(ije),f&&t(zo),w(Iy),w(qy),w(hF),w(jy),w(TF),f&&t(dje),f&&t(wd),w(Dy),f&&t(cje),f&&t(Wo),w(Gy),w(Vy),w(EF),w(Xy),w(LF),f&&t(fje),f&&t(xd),w(zy),f&&t(mje),f&&t(Qo),w(Wy),w(Hy),w($F),w(Uy),w(PF),f&&t(gje),f&&t(Sd),w(Yy),f&&t(hje),f&&t(Ho),w(Ky),w(eL),w(IF),w(oL),w(jF),f&&t(pje),f&&t(Bd),w(rL),f&&t(_je),f&&t(Uo),w(tL),w(nL),w(GF),w(sL),w(QF),f&&t(uje),f&&t(qd),w(lL),f&&t(bje),f&&t(Jo),w(iL),w(cL),w(UF),w(fL),w(KF),f&&t(vje),f&&t(Gd),w(mL),f&&t(Fje),f&&t(Yo),w(gL),w(pL),w(eT),w(_L),w(QT),f&&t(Tje),f&&t(Xd),w(uL),f&&t(Mje),f&&t(Ko),w(bL),w(FL),w(UT),w(TL),w(v7),f&&t(Eje),f&&t(Qd),w(ML),f&&t(Cje),f&&t(Zo),w(EL),w(wL),w(T7),w(AL),w(B7),f&&t(wje),f&&t(Jd),w(yL),f&&t(Aje),f&&t(er),w(LL),w($L),w(N7),w(kL),w(O7),f&&t(yje),f&&t(Zd),w(SL),f&&t(Lje),f&&t(or),w(RL),w(BL),w(X7),w(IL),w(f9),f&&t(xje),f&&t(rc),w(NL),f&&t($je),f&&t(rr),w(qL),w(DL),w(g9),w(GL),w(C9),f&&t(kje),f&&t(nc),w(OL),f&&t(Sje),f&&t(tr),w(VL),w(zL),w(A9),w(WL),w(Z9),f&&t(Rje),f&&t(ic),w(QL),f&&t(Pje),f&&t(ar),w(HL),w(JL),w(oM),w(YL),w(vM),f&&t(Bje),f&&t(fc),w(KL),f&&t(Ije),f&&t(nr),w(ZL),w(o8),w(TM),w(r8),w(CM),f&&t(Nje),f&&t(hc),w(a8),f&&t(qje),f&&t(sr),w(n8),w(l8),w(AM),w(i8),w(LM),f&&t(jje),f&&t(uc),w(d8),f&&t(Dje),f&&t(lr),w(c8),w(m8),w($M),w(g8),w(YM),f&&t(Gje),f&&t(Fc),w(h8),f&&t(Oje),f&&t(ir),w(p8),w(u8),w(ZM),w(b8),w(FE),f&&t(Vje),f&&t(Ec),w(v8),f&&t(Xje),f&&t(dr),w(F8),w(M8),w(ME),w(E8),w(CE),f&&t(zje),f&&t(Ac),w(C8),f&&t(Wje),f&&t(cr),w(w8),w(y8),w(AE),w(L8),w(LE),f&&t(Qje),f&&t(xc),w(x8),f&&t(Hje),f&&t(fr),w($8),w(S8),w($E),w(R8),w(tC),f&&t(Uje),f&&t(Sc),w(P8),f&&t(Jje),f&&t(mr),w(B8),w(N8),w(nC),w(q8),w(_C),f&&t(Yje),f&&t(Bc),w(j8),f&&t(Kje),f&&t(gr),w(D8),w(O8),w(bC),w(V8),w(kC),f&&t(Zje),f&&t(qc),w(X8),f&&t(eDe),f&&t(hr),w(z8),w(Q8),w(RC),w(H8),w(XC),f&&t(oDe),f&&t(Gc),w(U8),f&&t(rDe),f&&t(pr),w(J8),w(K8),w(WC),w(Z8),w(r3),f&&t(tDe),f&&t(Xc),w(ex),f&&t(aDe),f&&t(_r),w(ox),w(tx),w(a3),w(ax),w(p3),f&&t(nDe),f&&t(Qc),w(nx),f&&t(sDe),f&&t(ur),w(sx),w(ix),w(u3),w(dx),w(L3),f&&t(lDe),f&&t(Jc),w(cx),f&&t(iDe),f&&t(br),w(fx),w(gx),w($3),w(hx),w(j3),f&&t(dDe),f&&t(Zc),w(px),f&&t(cDe),f&&t(vr),w(_x),w(bx),w(G3),w(vx),w(J3),f&&t(fDe),f&&t(rf),w(Fx),f&&t(mDe),f&&t(Fr),w(Tx),w(Ex),w(K3),w(Cx),w(ew),f&&t(gDe),f&&t(nf),w(wx),f&&t(hDe),f&&t(Tr),w(Ax),w(Lx),w(rw),w(xx),w(nw),f&&t(pDe),f&&t(df),w(kx),f&&t(_De),f&&t(Mr),w(Sx),w(Px),w(lw),w(Bx),w(dw)}}}const ZSt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function eRt(L){return ekt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class lRt extends J$t{constructor(g){super();Y$t(this,g,eRt,KSt,K$t,{})}}export{lRt as default,ZSt as metadata};
