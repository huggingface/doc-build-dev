import{S as KQt,i as ZQt,s as eWt,e as a,k as l,w as F,t as o,M as oWt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as rWt,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as Ftt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as I}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function tWt($){let g,v,p,m,_,d,h,wo,Li,Pf,lt,yi,xi,rL,Bf,Oe,We,$i,Pn,tL,Bn,In,aL,ki,Nn,nL,Si,If,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),wo=o(`, make sure its
`),Li=a("code"),Pf=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),yi=a("code"),xi=o('"new-model"'),rL=o(")."),Bf=l(),Oe=a("p"),We=o("Likewise, if your "),$i=a("code"),Pn=o("NewModel"),tL=o(" is a subclass of "),Bn=a("a"),In=o("PreTrainedModel"),aL=o(`, make sure its
`),ki=a("code"),Nn=o("config_class"),nL=o(` attribute is set to the same class you use when registering the model (here
`),Si=a("code"),If=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var NS=s(p);m=r(NS,"NewModelConfig"),NS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ri=s(d);h=r(Ri,"PretrainedConfig"),Ri.forEach(t),wo=r(Ae,`, make sure its
`),Li=n(Ae,"CODE",{});var qS=s(Li);Pf=r(qS,"model_type"),qS.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),yi=n(Ae,"CODE",{});var jS=s(yi);xi=r(jS,'"new-model"'),jS.forEach(t),rL=r(Ae,")."),Ae.forEach(t),Bf=i(He),Oe=n(He,"P",{});var Ao=s(Oe);We=r(Ao,"Likewise, if your "),$i=n(Ao,"CODE",{});var Ra=s($i);Pn=r(Ra,"NewModel"),Ra.forEach(t),tL=r(Ao," is a subclass of "),Bn=n(Ao,"A",{href:!0});var DS=s(Bn);In=r(DS,"PreTrainedModel"),DS.forEach(t),aL=r(Ao,`, make sure its
`),ki=n(Ao,"CODE",{});var Nf=s(ki);Nn=r(Nf,"config_class"),Nf.forEach(t),nL=r(Ao,` attribute is set to the same class you use when registering the model (here
`),Si=n(Ao,"CODE",{});var GS=s(Si);If=r(GS,"NewModelConfig"),GS.forEach(t),Sa=r(Ao,")."),Ao.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,wo),e(g,Li),e(Li,Pf),e(g,lt),e(g,yi),e(yi,xi),e(g,rL),b(He,Bf,Ae),b(He,Oe,Ae),e(Oe,We),e(Oe,$i),e($i,Pn),e(Oe,tL),e(Oe,Bn),e(Bn,In),e(Oe,aL),e(Oe,ki),e(ki,Nn),e(Oe,nL),e(Oe,Si),e(Si,If),e(Oe,Sa)},d(He){He&&t(g),He&&t(Bf),He&&t(Oe)}}}function aWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sWt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var wo=s(p);m=r(wo,"use_auth_token=True"),wo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function lWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iWt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var wo=s(p);m=r(wo,"use_auth_token=True"),wo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function dWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function THt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rUt($){let g,v,p,m,_,d,h,wo,Li,Pf,lt,yi,xi,rL,Bf,Oe,We,$i,Pn,tL,Bn,In,aL,ki,Nn,nL,Si,If,Sa,He,Ae,NS,Ri,qS,jS,Ao,Ra,DS,Nf,GS,FHe,nXe,Pi,qf,yae,sL,THe,xae,MHe,sXe,qn,EHe,$ae,CHe,wHe,kae,AHe,LHe,lXe,lL,iXe,OS,yHe,dXe,jf,cXe,Bi,Df,Sae,iL,xHe,Rae,$He,fXe,Lo,dL,kHe,cL,SHe,VS,RHe,PHe,BHe,fL,IHe,Pae,NHe,qHe,jHe,yr,mL,DHe,Bae,GHe,OHe,Ii,VHe,Iae,XHe,zHe,Nae,QHe,WHe,HHe,A,Gf,qae,UHe,JHe,XS,YHe,KHe,ZHe,Of,jae,eUe,oUe,zS,rUe,tUe,aUe,Vf,Dae,nUe,sUe,QS,lUe,iUe,dUe,Xf,Gae,cUe,fUe,WS,mUe,gUe,hUe,zf,Oae,pUe,_Ue,HS,uUe,bUe,vUe,Qf,Vae,FUe,TUe,US,MUe,EUe,CUe,Wf,Xae,wUe,AUe,JS,LUe,yUe,xUe,Hf,zae,$Ue,kUe,YS,SUe,RUe,PUe,Uf,Qae,BUe,IUe,KS,NUe,qUe,jUe,Jf,Wae,DUe,GUe,ZS,OUe,VUe,XUe,Yf,Hae,zUe,QUe,eR,WUe,HUe,UUe,Kf,Uae,JUe,YUe,oR,KUe,ZUe,eJe,Zf,Jae,oJe,rJe,rR,tJe,aJe,nJe,em,Yae,sJe,lJe,tR,iJe,dJe,cJe,om,Kae,fJe,mJe,aR,gJe,hJe,pJe,rm,Zae,_Je,uJe,nR,bJe,vJe,FJe,tm,ene,TJe,MJe,sR,EJe,CJe,wJe,am,one,AJe,LJe,lR,yJe,xJe,$Je,nm,rne,kJe,SJe,iR,RJe,PJe,BJe,sm,tne,IJe,NJe,dR,qJe,jJe,DJe,lm,ane,GJe,OJe,cR,VJe,XJe,zJe,im,nne,QJe,WJe,fR,HJe,UJe,JJe,dm,sne,YJe,KJe,mR,ZJe,eYe,oYe,cm,lne,rYe,tYe,gR,aYe,nYe,sYe,fm,ine,lYe,iYe,hR,dYe,cYe,fYe,mm,dne,mYe,gYe,pR,hYe,pYe,_Ye,gm,cne,uYe,bYe,_R,vYe,FYe,TYe,hm,fne,MYe,EYe,uR,CYe,wYe,AYe,pm,mne,LYe,yYe,bR,xYe,$Ye,kYe,_m,gne,SYe,RYe,vR,PYe,BYe,IYe,um,hne,NYe,qYe,FR,jYe,DYe,GYe,bm,pne,OYe,VYe,TR,XYe,zYe,QYe,vm,_ne,WYe,HYe,MR,UYe,JYe,YYe,Fm,une,KYe,ZYe,ER,eKe,oKe,rKe,Tm,bne,tKe,aKe,CR,nKe,sKe,lKe,Mm,vne,iKe,dKe,wR,cKe,fKe,mKe,Em,Fne,gKe,hKe,AR,pKe,_Ke,uKe,Cm,Tne,bKe,vKe,LR,FKe,TKe,MKe,wm,Mne,EKe,CKe,yR,wKe,AKe,LKe,Am,Ene,yKe,xKe,xR,$Ke,kKe,SKe,Lm,Cne,RKe,PKe,$R,BKe,IKe,NKe,ym,wne,qKe,jKe,kR,DKe,GKe,OKe,xm,Ane,VKe,XKe,SR,zKe,QKe,WKe,$m,Lne,HKe,UKe,RR,JKe,YKe,KKe,km,yne,ZKe,eZe,PR,oZe,rZe,tZe,Sm,xne,aZe,nZe,BR,sZe,lZe,iZe,Rm,$ne,dZe,cZe,IR,fZe,mZe,gZe,Pm,kne,hZe,pZe,NR,_Ze,uZe,bZe,Bm,Sne,vZe,FZe,qR,TZe,MZe,EZe,Im,Rne,CZe,wZe,jR,AZe,LZe,yZe,Nm,Pne,xZe,$Ze,DR,kZe,SZe,RZe,qm,Bne,PZe,BZe,GR,IZe,NZe,qZe,jm,Ine,jZe,DZe,OR,GZe,OZe,VZe,Dm,Nne,XZe,zZe,VR,QZe,WZe,HZe,Gm,qne,UZe,JZe,XR,YZe,KZe,ZZe,Om,jne,eeo,oeo,zR,reo,teo,aeo,Vm,Dne,neo,seo,QR,leo,ieo,deo,Xm,Gne,ceo,feo,WR,meo,geo,heo,zm,One,peo,_eo,HR,ueo,beo,veo,Qm,Vne,Feo,Teo,UR,Meo,Eeo,Ceo,Wm,Xne,weo,Aeo,JR,Leo,yeo,xeo,Hm,zne,$eo,keo,YR,Seo,Reo,Peo,Um,Qne,Beo,Ieo,KR,Neo,qeo,jeo,Jm,Wne,Deo,Geo,ZR,Oeo,Veo,Xeo,Ym,Hne,zeo,Qeo,eP,Weo,Heo,Ueo,Km,Une,Jeo,Yeo,oP,Keo,Zeo,eoo,Zm,Jne,ooo,roo,rP,too,aoo,noo,eg,Yne,soo,loo,tP,ioo,doo,coo,og,Kne,foo,moo,aP,goo,hoo,poo,rg,Zne,_oo,uoo,nP,boo,voo,Foo,tg,ese,Too,Moo,sP,Eoo,Coo,woo,ag,ose,Aoo,Loo,lP,yoo,xoo,$oo,ng,rse,koo,Soo,iP,Roo,Poo,Boo,sg,tse,Ioo,Noo,dP,qoo,joo,Doo,lg,ase,Goo,Ooo,cP,Voo,Xoo,zoo,ig,nse,Qoo,Woo,fP,Hoo,Uoo,Joo,dg,sse,Yoo,Koo,mP,Zoo,ero,oro,cg,lse,rro,tro,gP,aro,nro,sro,fg,ise,lro,iro,hP,dro,cro,fro,mg,dse,mro,gro,pP,hro,pro,_ro,gg,cse,uro,bro,_P,vro,Fro,Tro,hg,fse,Mro,Ero,uP,Cro,wro,Aro,pg,mse,Lro,yro,bP,xro,$ro,kro,_g,gse,Sro,Rro,vP,Pro,Bro,Iro,ug,hse,Nro,qro,FP,jro,Dro,Gro,bg,pse,Oro,Vro,TP,Xro,zro,Qro,vg,_se,Wro,Hro,MP,Uro,Jro,Yro,Fg,use,Kro,Zro,EP,eto,oto,rto,Tg,bse,tto,ato,CP,nto,sto,lto,Mg,vse,ito,dto,wP,cto,fto,mto,Eg,Fse,gto,hto,AP,pto,_to,uto,Cg,Tse,bto,vto,LP,Fto,Tto,Mto,wg,Mse,Eto,Cto,yP,wto,Ato,Lto,Ag,Ese,yto,xto,xP,$to,kto,Sto,Lg,Cse,Rto,Pto,$P,Bto,Ito,Nto,yg,wse,qto,jto,kP,Dto,Gto,Oto,xg,Ase,Vto,Xto,SP,zto,Qto,Wto,$g,Lse,Hto,Uto,RP,Jto,Yto,Kto,kg,yse,Zto,eao,PP,oao,rao,tao,Sg,xse,aao,nao,BP,sao,lao,iao,Rg,$se,dao,cao,IP,fao,mao,gao,Pg,kse,hao,pao,NP,_ao,uao,bao,Bg,Sse,vao,Fao,qP,Tao,Mao,Eao,Ig,Rse,Cao,wao,jP,Aao,Lao,yao,Ng,Pse,xao,$ao,DP,kao,Sao,Rao,qg,Bse,Pao,Bao,GP,Iao,Nao,qao,jg,Ise,jao,Dao,OP,Gao,Oao,Vao,Dg,Nse,Xao,zao,VP,Qao,Wao,Hao,Gg,qse,Uao,Jao,XP,Yao,Kao,Zao,Og,jse,eno,ono,zP,rno,tno,ano,Vg,Dse,nno,sno,QP,lno,ino,dno,Xg,Gse,cno,fno,WP,mno,gno,hno,zg,Ose,pno,_no,HP,uno,bno,vno,Qg,Vse,Fno,Tno,UP,Mno,Eno,Cno,Wg,Xse,wno,Ano,JP,Lno,yno,xno,Hg,zse,$no,kno,YP,Sno,Rno,Pno,Ug,Qse,Bno,Ino,KP,Nno,qno,jno,Jg,Wse,Dno,Gno,ZP,Ono,Vno,Xno,Yg,zno,Kg,gL,Qno,Hse,Wno,mXe,Ni,Zg,Use,hL,Hno,Jse,Uno,gXe,yo,pL,Jno,_L,Yno,eB,Kno,Zno,eso,uL,oso,Yse,rso,tso,aso,xr,bL,nso,Kse,sso,lso,Pa,iso,Zse,dso,cso,ele,fso,mso,ole,gso,hso,pso,k,jn,rle,_so,uso,oB,bso,vso,rB,Fso,Tso,Mso,Dn,tle,Eso,Cso,tB,wso,Aso,aB,Lso,yso,xso,Gn,ale,$so,kso,nB,Sso,Rso,sB,Pso,Bso,Iso,eh,nle,Nso,qso,lB,jso,Dso,Gso,On,sle,Oso,Vso,iB,Xso,zso,dB,Qso,Wso,Hso,oh,lle,Uso,Jso,cB,Yso,Kso,Zso,rh,ile,elo,olo,fB,rlo,tlo,alo,th,dle,nlo,slo,mB,llo,ilo,dlo,Vn,cle,clo,flo,gB,mlo,glo,hB,hlo,plo,_lo,Xn,fle,ulo,blo,pB,vlo,Flo,_B,Tlo,Mlo,Elo,zn,mle,Clo,wlo,uB,Alo,Llo,bB,ylo,xlo,$lo,ah,gle,klo,Slo,vB,Rlo,Plo,Blo,nh,hle,Ilo,Nlo,FB,qlo,jlo,Dlo,sh,ple,Glo,Olo,TB,Vlo,Xlo,zlo,Qn,_le,Qlo,Wlo,MB,Hlo,Ulo,EB,Jlo,Ylo,Klo,lh,ule,Zlo,eio,CB,oio,rio,tio,Wn,ble,aio,nio,wB,sio,lio,AB,iio,dio,cio,Hn,vle,fio,mio,LB,gio,hio,yB,pio,_io,uio,Un,Fle,bio,vio,xB,Fio,Tio,$B,Mio,Eio,Cio,Jn,Tle,wio,Aio,kB,Lio,yio,SB,xio,$io,kio,ih,Mle,Sio,Rio,RB,Pio,Bio,Iio,Yn,Ele,Nio,qio,PB,jio,Dio,BB,Gio,Oio,Vio,Kn,Cle,Xio,zio,IB,Qio,Wio,NB,Hio,Uio,Jio,Zn,wle,Yio,Kio,qB,Zio,edo,jB,odo,rdo,tdo,es,Ale,ado,ndo,DB,sdo,ldo,GB,ido,ddo,cdo,os,Lle,fdo,mdo,OB,gdo,hdo,VB,pdo,_do,udo,rs,yle,bdo,vdo,XB,Fdo,Tdo,zB,Mdo,Edo,Cdo,dh,xle,wdo,Ado,QB,Ldo,ydo,xdo,ts,$le,$do,kdo,WB,Sdo,Rdo,HB,Pdo,Bdo,Ido,ch,kle,Ndo,qdo,UB,jdo,Ddo,Gdo,as,Sle,Odo,Vdo,JB,Xdo,zdo,YB,Qdo,Wdo,Hdo,ns,Rle,Udo,Jdo,KB,Ydo,Kdo,ZB,Zdo,eco,oco,ss,Ple,rco,tco,eI,aco,nco,oI,sco,lco,ico,fh,Ble,dco,cco,rI,fco,mco,gco,ls,Ile,hco,pco,tI,_co,uco,aI,bco,vco,Fco,is,Nle,Tco,Mco,nI,Eco,Cco,sI,wco,Aco,Lco,ds,qle,yco,xco,lI,$co,kco,iI,Sco,Rco,Pco,mh,jle,Bco,Ico,dI,Nco,qco,jco,cs,Dle,Dco,Gco,cI,Oco,Vco,fI,Xco,zco,Qco,fs,Gle,Wco,Hco,mI,Uco,Jco,gI,Yco,Kco,Zco,ms,Ole,efo,ofo,hI,rfo,tfo,pI,afo,nfo,sfo,gs,Vle,lfo,ifo,_I,dfo,cfo,uI,ffo,mfo,gfo,hs,Xle,hfo,pfo,bI,_fo,ufo,vI,bfo,vfo,Ffo,ps,zle,Tfo,Mfo,FI,Efo,Cfo,TI,wfo,Afo,Lfo,_s,Qle,yfo,xfo,MI,$fo,kfo,EI,Sfo,Rfo,Pfo,us,Wle,Bfo,Ifo,CI,Nfo,qfo,wI,jfo,Dfo,Gfo,gh,Hle,Ofo,Vfo,AI,Xfo,zfo,Qfo,bs,Ule,Wfo,Hfo,LI,Ufo,Jfo,yI,Yfo,Kfo,Zfo,hh,Jle,emo,omo,xI,rmo,tmo,amo,ph,Yle,nmo,smo,$I,lmo,imo,dmo,vs,Kle,cmo,fmo,kI,mmo,gmo,SI,hmo,pmo,_mo,Fs,Zle,umo,bmo,RI,vmo,Fmo,PI,Tmo,Mmo,Emo,Ts,eie,Cmo,wmo,BI,Amo,Lmo,II,ymo,xmo,$mo,_h,oie,kmo,Smo,NI,Rmo,Pmo,Bmo,Ms,rie,Imo,Nmo,qI,qmo,jmo,jI,Dmo,Gmo,Omo,Es,tie,Vmo,Xmo,DI,zmo,Qmo,GI,Wmo,Hmo,Umo,Cs,aie,Jmo,Ymo,OI,Kmo,Zmo,VI,ego,ogo,rgo,ws,nie,tgo,ago,XI,ngo,sgo,zI,lgo,igo,dgo,As,sie,cgo,fgo,QI,mgo,ggo,WI,hgo,pgo,_go,Ls,lie,ugo,bgo,HI,vgo,Fgo,UI,Tgo,Mgo,Ego,ys,iie,Cgo,wgo,JI,Ago,Lgo,YI,ygo,xgo,$go,uh,die,kgo,Sgo,KI,Rgo,Pgo,Bgo,xs,cie,Igo,Ngo,ZI,qgo,jgo,eN,Dgo,Ggo,Ogo,bh,fie,Vgo,Xgo,oN,zgo,Qgo,Wgo,vh,mie,Hgo,Ugo,rN,Jgo,Ygo,Kgo,Fh,gie,Zgo,eho,tN,oho,rho,tho,Th,hie,aho,nho,aN,sho,lho,iho,$s,pie,dho,cho,nN,fho,mho,sN,gho,hho,pho,Mh,_ie,_ho,uho,lN,bho,vho,Fho,ks,uie,Tho,Mho,iN,Eho,Cho,dN,who,Aho,Lho,Ss,bie,yho,xho,cN,$ho,kho,fN,Sho,Rho,Pho,Rs,vie,Bho,Iho,mN,Nho,qho,gN,jho,Dho,Gho,Ps,Fie,Oho,Vho,hN,Xho,zho,pN,Qho,Who,Hho,Bs,Tie,Uho,Jho,_N,Yho,Kho,uN,Zho,epo,opo,Is,Mie,rpo,tpo,bN,apo,npo,vN,spo,lpo,ipo,Eh,Eie,dpo,cpo,FN,fpo,mpo,gpo,Ch,Cie,hpo,ppo,TN,_po,upo,bpo,Ns,wie,vpo,Fpo,MN,Tpo,Mpo,EN,Epo,Cpo,wpo,qs,Aie,Apo,Lpo,CN,ypo,xpo,wN,$po,kpo,Spo,js,Lie,Rpo,Ppo,AN,Bpo,Ipo,LN,Npo,qpo,jpo,wh,yie,Dpo,Gpo,yN,Opo,Vpo,Xpo,Ah,xie,zpo,Qpo,xN,Wpo,Hpo,Upo,Lh,$ie,Jpo,Ypo,$N,Kpo,Zpo,e_o,Ds,kie,o_o,r_o,kN,t_o,a_o,SN,n_o,s_o,l_o,Gs,Sie,i_o,d_o,RN,c_o,f_o,PN,m_o,g_o,h_o,yh,Rie,p_o,__o,BN,u_o,b_o,v_o,xh,Pie,F_o,T_o,IN,M_o,E_o,C_o,$h,Bie,w_o,A_o,NN,L_o,y_o,x_o,Os,Iie,$_o,k_o,qN,S_o,R_o,jN,P_o,B_o,I_o,kh,Nie,N_o,q_o,DN,j_o,D_o,G_o,Sh,qie,O_o,V_o,GN,X_o,z_o,Q_o,Vs,jie,W_o,H_o,ON,U_o,J_o,VN,Y_o,K_o,Z_o,Xs,Die,euo,ouo,XN,ruo,tuo,zN,auo,nuo,suo,zs,Gie,luo,iuo,QN,duo,cuo,WN,fuo,muo,guo,Qs,Oie,huo,puo,HN,_uo,uuo,UN,buo,vuo,Fuo,Rh,Tuo,Ph,vL,Muo,Vie,Euo,hXe,qi,Bh,Xie,FL,Cuo,zie,wuo,pXe,xo,TL,Auo,ML,Luo,JN,yuo,xuo,$uo,EL,kuo,Qie,Suo,Ruo,Puo,Ue,CL,Buo,Wie,Iuo,Nuo,Ba,quo,Hie,juo,Duo,Uie,Guo,Ouo,Jie,Vuo,Xuo,zuo,Y,Ih,Yie,Quo,Wuo,YN,Huo,Uuo,Juo,Nh,Kie,Yuo,Kuo,KN,Zuo,e1o,o1o,qh,Zie,r1o,t1o,ZN,a1o,n1o,s1o,jh,ede,l1o,i1o,eq,d1o,c1o,f1o,Dh,ode,m1o,g1o,oq,h1o,p1o,_1o,Gh,rde,u1o,b1o,rq,v1o,F1o,T1o,Oh,tde,M1o,E1o,tq,C1o,w1o,A1o,Vh,ade,L1o,y1o,aq,x1o,$1o,k1o,Xh,nde,S1o,R1o,nq,P1o,B1o,I1o,zh,sde,N1o,q1o,sq,j1o,D1o,G1o,Qh,lde,O1o,V1o,lq,X1o,z1o,Q1o,Wh,ide,W1o,H1o,iq,U1o,J1o,Y1o,Hh,dde,K1o,Z1o,dq,e2o,o2o,r2o,Uh,cde,t2o,a2o,cq,n2o,s2o,l2o,Jh,fde,i2o,d2o,fq,c2o,f2o,m2o,Yh,mde,g2o,h2o,mq,p2o,_2o,u2o,Kh,gde,b2o,v2o,gq,F2o,T2o,M2o,Zh,hde,E2o,C2o,hq,w2o,A2o,L2o,ep,pde,y2o,x2o,pq,$2o,k2o,S2o,op,_de,R2o,P2o,_q,B2o,I2o,N2o,rp,ude,q2o,j2o,uq,D2o,G2o,O2o,tp,bde,V2o,X2o,bq,z2o,Q2o,W2o,ap,vde,H2o,U2o,vq,J2o,Y2o,K2o,np,Fde,Z2o,ebo,Fq,obo,rbo,tbo,sp,Tde,abo,nbo,Tq,sbo,lbo,ibo,lp,Mde,dbo,cbo,Mq,fbo,mbo,gbo,ip,Ede,hbo,pbo,Eq,_bo,ubo,bbo,dp,Cde,vbo,Fbo,Cq,Tbo,Mbo,Ebo,cp,wde,Cbo,wbo,wq,Abo,Lbo,ybo,fp,Ade,xbo,$bo,Aq,kbo,Sbo,Rbo,mp,Lde,Pbo,Bbo,Lq,Ibo,Nbo,qbo,gp,yde,jbo,Dbo,yq,Gbo,Obo,Vbo,hp,xde,Xbo,zbo,xq,Qbo,Wbo,Hbo,pp,$de,Ubo,Jbo,$q,Ybo,Kbo,Zbo,_p,evo,up,ovo,bp,wL,rvo,kde,tvo,_Xe,ji,vp,Sde,AL,avo,Rde,nvo,uXe,$o,LL,svo,yL,lvo,kq,ivo,dvo,cvo,xL,fvo,Pde,mvo,gvo,hvo,Je,$L,pvo,Bde,_vo,uvo,Di,bvo,Ide,vvo,Fvo,Nde,Tvo,Mvo,Evo,he,Fp,qde,Cvo,wvo,Sq,Avo,Lvo,yvo,Tp,jde,xvo,$vo,Dde,kvo,Svo,Rvo,Mp,Gde,Pvo,Bvo,Rq,Ivo,Nvo,qvo,Ep,Ode,jvo,Dvo,Pq,Gvo,Ovo,Vvo,Cp,Vde,Xvo,zvo,Bq,Qvo,Wvo,Hvo,wp,Xde,Uvo,Jvo,Iq,Yvo,Kvo,Zvo,Ap,zde,e0o,o0o,Nq,r0o,t0o,a0o,Lp,Qde,n0o,s0o,qq,l0o,i0o,d0o,yp,Wde,c0o,f0o,jq,m0o,g0o,h0o,xp,Hde,p0o,_0o,Dq,u0o,b0o,v0o,$p,Ude,F0o,T0o,Gq,M0o,E0o,C0o,kp,Jde,w0o,A0o,Oq,L0o,y0o,x0o,Sp,Yde,$0o,k0o,Vq,S0o,R0o,P0o,Rp,Kde,B0o,I0o,Xq,N0o,q0o,j0o,Pp,Zde,D0o,G0o,zq,O0o,V0o,X0o,Bp,ece,z0o,Q0o,Qq,W0o,H0o,U0o,Ip,oce,J0o,Y0o,Wq,K0o,Z0o,eFo,Np,rce,oFo,rFo,Hq,tFo,aFo,nFo,qp,sFo,jp,lFo,Dp,kL,iFo,tce,dFo,bXe,Gi,Gp,ace,SL,cFo,nce,fFo,vXe,ko,RL,mFo,Oi,gFo,Uq,hFo,pFo,Jq,_Fo,uFo,bFo,PL,vFo,sce,FFo,TFo,MFo,it,BL,EFo,lce,CFo,wFo,Vi,AFo,ice,LFo,yFo,Yq,xFo,$Fo,kFo,Op,SFo,Ye,IL,RFo,dce,PFo,BFo,Ia,IFo,cce,NFo,qFo,fce,jFo,DFo,mce,GFo,OFo,VFo,y,Vp,gce,XFo,zFo,Kq,QFo,WFo,HFo,Xp,hce,UFo,JFo,Zq,YFo,KFo,ZFo,zp,pce,eTo,oTo,ej,rTo,tTo,aTo,Qp,_ce,nTo,sTo,oj,lTo,iTo,dTo,Wp,uce,cTo,fTo,rj,mTo,gTo,hTo,Hp,bce,pTo,_To,tj,uTo,bTo,vTo,Up,vce,FTo,TTo,aj,MTo,ETo,CTo,Jp,Fce,wTo,ATo,nj,LTo,yTo,xTo,Yp,Tce,$To,kTo,sj,STo,RTo,PTo,Kp,Mce,BTo,ITo,lj,NTo,qTo,jTo,Zp,Ece,DTo,GTo,ij,OTo,VTo,XTo,e_,Cce,zTo,QTo,dj,WTo,HTo,UTo,o_,wce,JTo,YTo,cj,KTo,ZTo,e7o,r_,Ace,o7o,r7o,fj,t7o,a7o,n7o,t_,Lce,s7o,l7o,mj,i7o,d7o,c7o,a_,yce,f7o,m7o,gj,g7o,h7o,p7o,n_,xce,_7o,u7o,hj,b7o,v7o,F7o,s_,$ce,T7o,M7o,pj,E7o,C7o,w7o,l_,kce,A7o,L7o,_j,y7o,x7o,$7o,i_,Sce,k7o,S7o,uj,R7o,P7o,B7o,d_,Rce,I7o,N7o,bj,q7o,j7o,D7o,c_,Pce,G7o,O7o,vj,V7o,X7o,z7o,f_,Bce,Q7o,W7o,Fj,H7o,U7o,J7o,m_,Ice,Y7o,K7o,Tj,Z7o,e9o,o9o,g_,Nce,r9o,t9o,Mj,a9o,n9o,s9o,h_,qce,l9o,i9o,Ej,d9o,c9o,f9o,p_,jce,m9o,g9o,Cj,h9o,p9o,_9o,__,Dce,u9o,b9o,wj,v9o,F9o,T9o,u_,Gce,M9o,E9o,Aj,C9o,w9o,A9o,b_,Oce,L9o,y9o,Lj,x9o,$9o,k9o,v_,Vce,S9o,R9o,yj,P9o,B9o,I9o,F_,Xce,N9o,q9o,xj,j9o,D9o,G9o,T_,zce,O9o,V9o,$j,X9o,z9o,Q9o,M_,Qce,W9o,H9o,kj,U9o,J9o,Y9o,Ws,Wce,K9o,Z9o,Sj,eMo,oMo,Rj,rMo,tMo,aMo,E_,Hce,nMo,sMo,Pj,lMo,iMo,dMo,C_,Uce,cMo,fMo,Bj,mMo,gMo,hMo,w_,Jce,pMo,_Mo,Ij,uMo,bMo,vMo,A_,Yce,FMo,TMo,Nj,MMo,EMo,CMo,L_,Kce,wMo,AMo,qj,LMo,yMo,xMo,y_,Zce,$Mo,kMo,jj,SMo,RMo,PMo,x_,efe,BMo,IMo,Dj,NMo,qMo,jMo,$_,ofe,DMo,GMo,Gj,OMo,VMo,XMo,k_,rfe,zMo,QMo,Oj,WMo,HMo,UMo,S_,tfe,JMo,YMo,Vj,KMo,ZMo,e4o,R_,afe,o4o,r4o,Xj,t4o,a4o,n4o,P_,nfe,s4o,l4o,zj,i4o,d4o,c4o,B_,sfe,f4o,m4o,Qj,g4o,h4o,p4o,I_,lfe,_4o,u4o,Wj,b4o,v4o,F4o,N_,ife,T4o,M4o,Hj,E4o,C4o,w4o,q_,dfe,A4o,L4o,Uj,y4o,x4o,$4o,j_,cfe,k4o,S4o,Jj,R4o,P4o,B4o,D_,ffe,I4o,N4o,Yj,q4o,j4o,D4o,G_,mfe,G4o,O4o,Kj,V4o,X4o,z4o,O_,gfe,Q4o,W4o,Zj,H4o,U4o,J4o,V_,hfe,Y4o,K4o,eD,Z4o,eEo,oEo,X_,pfe,rEo,tEo,oD,aEo,nEo,sEo,z_,_fe,lEo,iEo,rD,dEo,cEo,fEo,Q_,ufe,mEo,gEo,tD,hEo,pEo,_Eo,W_,bfe,uEo,bEo,aD,vEo,FEo,TEo,H_,vfe,MEo,EEo,nD,CEo,wEo,AEo,U_,Ffe,LEo,yEo,sD,xEo,$Eo,kEo,J_,Tfe,SEo,REo,lD,PEo,BEo,IEo,Y_,Mfe,NEo,qEo,iD,jEo,DEo,GEo,K_,Efe,OEo,VEo,dD,XEo,zEo,QEo,Z_,Cfe,WEo,HEo,cD,UEo,JEo,YEo,eu,wfe,KEo,ZEo,fD,eCo,oCo,rCo,ou,Afe,tCo,aCo,mD,nCo,sCo,lCo,ru,Lfe,iCo,dCo,gD,cCo,fCo,mCo,tu,yfe,gCo,hCo,hD,pCo,_Co,uCo,au,xfe,bCo,vCo,pD,FCo,TCo,MCo,nu,$fe,ECo,CCo,_D,wCo,ACo,LCo,su,kfe,yCo,xCo,uD,$Co,kCo,SCo,lu,Sfe,RCo,PCo,bD,BCo,ICo,NCo,iu,Rfe,qCo,jCo,vD,DCo,GCo,OCo,du,Pfe,VCo,XCo,FD,zCo,QCo,WCo,cu,Bfe,HCo,UCo,TD,JCo,YCo,KCo,fu,Ife,ZCo,e3o,MD,o3o,r3o,t3o,mu,Nfe,a3o,n3o,ED,s3o,l3o,i3o,gu,qfe,d3o,c3o,CD,f3o,m3o,g3o,hu,jfe,h3o,p3o,wD,_3o,u3o,b3o,pu,Dfe,v3o,F3o,AD,T3o,M3o,E3o,_u,Gfe,C3o,w3o,LD,A3o,L3o,y3o,uu,Ofe,x3o,$3o,yD,k3o,S3o,R3o,bu,Vfe,P3o,B3o,xD,I3o,N3o,q3o,vu,Xfe,j3o,D3o,$D,G3o,O3o,V3o,Fu,zfe,X3o,z3o,kD,Q3o,W3o,H3o,Tu,Qfe,U3o,J3o,SD,Y3o,K3o,Z3o,Mu,Wfe,e5o,o5o,RD,r5o,t5o,a5o,Eu,Hfe,n5o,s5o,PD,l5o,i5o,d5o,Cu,Ufe,c5o,f5o,BD,m5o,g5o,h5o,wu,Jfe,p5o,_5o,ID,u5o,b5o,v5o,Au,Yfe,F5o,T5o,ND,M5o,E5o,C5o,Lu,Kfe,w5o,A5o,qD,L5o,y5o,x5o,yu,Zfe,$5o,k5o,jD,S5o,R5o,P5o,xu,eme,B5o,I5o,DD,N5o,q5o,j5o,$u,ome,D5o,G5o,GD,O5o,V5o,X5o,ku,rme,z5o,Q5o,OD,W5o,H5o,U5o,Su,tme,J5o,Y5o,VD,K5o,Z5o,ewo,Ru,ame,owo,rwo,XD,two,awo,nwo,Pu,nme,swo,lwo,zD,iwo,dwo,cwo,Bu,sme,fwo,mwo,QD,gwo,hwo,pwo,Iu,lme,_wo,uwo,WD,bwo,vwo,Fwo,Nu,ime,Two,Mwo,HD,Ewo,Cwo,wwo,qu,dme,Awo,Lwo,UD,ywo,xwo,$wo,ju,cme,kwo,Swo,JD,Rwo,Pwo,Bwo,Du,fme,Iwo,Nwo,YD,qwo,jwo,Dwo,Gu,mme,Gwo,Owo,KD,Vwo,Xwo,zwo,Ou,gme,Qwo,Wwo,ZD,Hwo,Uwo,Jwo,Vu,hme,Ywo,Kwo,eG,Zwo,eAo,oAo,Xu,pme,rAo,tAo,oG,aAo,nAo,sAo,zu,lAo,_me,iAo,dAo,ume,cAo,fAo,Qu,FXe,Xi,Wu,bme,NL,mAo,vme,gAo,TXe,So,qL,hAo,zi,pAo,rG,_Ao,uAo,tG,bAo,vAo,FAo,jL,TAo,Fme,MAo,EAo,CAo,dt,DL,wAo,Tme,AAo,LAo,Qi,yAo,Mme,xAo,$Ao,aG,kAo,SAo,RAo,Hu,PAo,Ke,GL,BAo,Eme,IAo,NAo,Na,qAo,Cme,jAo,DAo,wme,GAo,OAo,Ame,VAo,XAo,zAo,G,Uu,Lme,QAo,WAo,nG,HAo,UAo,JAo,Ju,yme,YAo,KAo,sG,ZAo,e6o,o6o,Yu,xme,r6o,t6o,lG,a6o,n6o,s6o,Ku,$me,l6o,i6o,iG,d6o,c6o,f6o,Zu,kme,m6o,g6o,dG,h6o,p6o,_6o,e1,Sme,u6o,b6o,cG,v6o,F6o,T6o,o1,Rme,M6o,E6o,fG,C6o,w6o,A6o,r1,Pme,L6o,y6o,mG,x6o,$6o,k6o,t1,Bme,S6o,R6o,gG,P6o,B6o,I6o,a1,Ime,N6o,q6o,hG,j6o,D6o,G6o,n1,Nme,O6o,V6o,pG,X6o,z6o,Q6o,s1,qme,W6o,H6o,_G,U6o,J6o,Y6o,l1,jme,K6o,Z6o,uG,eLo,oLo,rLo,i1,Dme,tLo,aLo,bG,nLo,sLo,lLo,d1,Gme,iLo,dLo,vG,cLo,fLo,mLo,c1,Ome,gLo,hLo,FG,pLo,_Lo,uLo,f1,Vme,bLo,vLo,TG,FLo,TLo,MLo,m1,Xme,ELo,CLo,MG,wLo,ALo,LLo,g1,zme,yLo,xLo,EG,$Lo,kLo,SLo,h1,Qme,RLo,PLo,CG,BLo,ILo,NLo,p1,Wme,qLo,jLo,wG,DLo,GLo,OLo,_1,Hme,VLo,XLo,AG,zLo,QLo,WLo,u1,Ume,HLo,ULo,LG,JLo,YLo,KLo,b1,Jme,ZLo,eyo,yG,oyo,ryo,tyo,v1,Yme,ayo,nyo,xG,syo,lyo,iyo,F1,Kme,dyo,cyo,$G,fyo,myo,gyo,T1,Zme,hyo,pyo,kG,_yo,uyo,byo,M1,ege,vyo,Fyo,SG,Tyo,Myo,Eyo,E1,oge,Cyo,wyo,RG,Ayo,Lyo,yyo,C1,rge,xyo,$yo,PG,kyo,Syo,Ryo,w1,tge,Pyo,Byo,BG,Iyo,Nyo,qyo,A1,age,jyo,Dyo,IG,Gyo,Oyo,Vyo,L1,nge,Xyo,zyo,NG,Qyo,Wyo,Hyo,y1,sge,Uyo,Jyo,qG,Yyo,Kyo,Zyo,x1,lge,e8o,o8o,jG,r8o,t8o,a8o,$1,ige,n8o,s8o,DG,l8o,i8o,d8o,k1,dge,c8o,f8o,GG,m8o,g8o,h8o,S1,cge,p8o,_8o,OG,u8o,b8o,v8o,R1,fge,F8o,T8o,VG,M8o,E8o,C8o,P1,mge,w8o,A8o,XG,L8o,y8o,x8o,B1,gge,$8o,k8o,zG,S8o,R8o,P8o,I1,hge,B8o,I8o,QG,N8o,q8o,j8o,N1,pge,D8o,G8o,WG,O8o,V8o,X8o,q1,_ge,z8o,Q8o,HG,W8o,H8o,U8o,j1,uge,J8o,Y8o,UG,K8o,Z8o,exo,D1,oxo,bge,rxo,txo,vge,axo,nxo,G1,MXe,Wi,O1,Fge,OL,sxo,Tge,lxo,EXe,Ro,VL,ixo,Hi,dxo,JG,cxo,fxo,YG,mxo,gxo,hxo,XL,pxo,Mge,_xo,uxo,bxo,ct,zL,vxo,Ege,Fxo,Txo,Ui,Mxo,Cge,Exo,Cxo,KG,wxo,Axo,Lxo,V1,yxo,Ze,QL,xxo,wge,$xo,kxo,qa,Sxo,Age,Rxo,Pxo,Lge,Bxo,Ixo,yge,Nxo,qxo,jxo,z,X1,xge,Dxo,Gxo,ZG,Oxo,Vxo,Xxo,z1,$ge,zxo,Qxo,eO,Wxo,Hxo,Uxo,Q1,kge,Jxo,Yxo,oO,Kxo,Zxo,e$o,W1,Sge,o$o,r$o,rO,t$o,a$o,n$o,H1,Rge,s$o,l$o,tO,i$o,d$o,c$o,U1,Pge,f$o,m$o,aO,g$o,h$o,p$o,J1,Bge,_$o,u$o,nO,b$o,v$o,F$o,Y1,Ige,T$o,M$o,sO,E$o,C$o,w$o,K1,Nge,A$o,L$o,lO,y$o,x$o,$$o,Z1,qge,k$o,S$o,iO,R$o,P$o,B$o,e2,jge,I$o,N$o,dO,q$o,j$o,D$o,o2,Dge,G$o,O$o,cO,V$o,X$o,z$o,r2,Gge,Q$o,W$o,fO,H$o,U$o,J$o,t2,Oge,Y$o,K$o,mO,Z$o,eko,oko,a2,Vge,rko,tko,gO,ako,nko,sko,n2,Xge,lko,iko,hO,dko,cko,fko,s2,zge,mko,gko,pO,hko,pko,_ko,l2,Qge,uko,bko,_O,vko,Fko,Tko,i2,Wge,Mko,Eko,uO,Cko,wko,Ako,d2,Hge,Lko,yko,bO,xko,$ko,kko,c2,Uge,Sko,Rko,vO,Pko,Bko,Iko,f2,Jge,Nko,qko,FO,jko,Dko,Gko,m2,Yge,Oko,Vko,TO,Xko,zko,Qko,g2,Kge,Wko,Hko,MO,Uko,Jko,Yko,h2,Zge,Kko,Zko,EO,eSo,oSo,rSo,p2,ehe,tSo,aSo,CO,nSo,sSo,lSo,_2,ohe,iSo,dSo,wO,cSo,fSo,mSo,u2,rhe,gSo,hSo,AO,pSo,_So,uSo,b2,the,bSo,vSo,LO,FSo,TSo,MSo,v2,ahe,ESo,CSo,yO,wSo,ASo,LSo,F2,nhe,ySo,xSo,xO,$So,kSo,SSo,T2,she,RSo,PSo,$O,BSo,ISo,NSo,M2,lhe,qSo,jSo,kO,DSo,GSo,OSo,E2,ihe,VSo,XSo,SO,zSo,QSo,WSo,C2,dhe,HSo,USo,RO,JSo,YSo,KSo,w2,che,ZSo,eRo,PO,oRo,rRo,tRo,A2,fhe,aRo,nRo,BO,sRo,lRo,iRo,L2,mhe,dRo,cRo,IO,fRo,mRo,gRo,y2,ghe,hRo,pRo,NO,_Ro,uRo,bRo,x2,hhe,vRo,FRo,qO,TRo,MRo,ERo,$2,CRo,phe,wRo,ARo,_he,LRo,yRo,k2,CXe,Ji,S2,uhe,WL,xRo,bhe,$Ro,wXe,Po,HL,kRo,Yi,SRo,jO,RRo,PRo,DO,BRo,IRo,NRo,UL,qRo,vhe,jRo,DRo,GRo,ft,JL,ORo,Fhe,VRo,XRo,Ki,zRo,The,QRo,WRo,GO,HRo,URo,JRo,R2,YRo,eo,YL,KRo,Mhe,ZRo,ePo,ja,oPo,Ehe,rPo,tPo,Che,aPo,nPo,whe,sPo,lPo,iPo,W,P2,Ahe,dPo,cPo,OO,fPo,mPo,gPo,B2,Lhe,hPo,pPo,VO,_Po,uPo,bPo,I2,yhe,vPo,FPo,XO,TPo,MPo,EPo,N2,xhe,CPo,wPo,zO,APo,LPo,yPo,q2,$he,xPo,$Po,QO,kPo,SPo,RPo,j2,khe,PPo,BPo,WO,IPo,NPo,qPo,D2,She,jPo,DPo,HO,GPo,OPo,VPo,G2,Rhe,XPo,zPo,UO,QPo,WPo,HPo,O2,Phe,UPo,JPo,JO,YPo,KPo,ZPo,V2,Bhe,eBo,oBo,YO,rBo,tBo,aBo,X2,Ihe,nBo,sBo,KO,lBo,iBo,dBo,z2,Nhe,cBo,fBo,ZO,mBo,gBo,hBo,Q2,qhe,pBo,_Bo,eV,uBo,bBo,vBo,W2,jhe,FBo,TBo,oV,MBo,EBo,CBo,H2,Dhe,wBo,ABo,rV,LBo,yBo,xBo,U2,Ghe,$Bo,kBo,tV,SBo,RBo,PBo,J2,Ohe,BBo,IBo,aV,NBo,qBo,jBo,Y2,Vhe,DBo,GBo,nV,OBo,VBo,XBo,K2,Xhe,zBo,QBo,sV,WBo,HBo,UBo,Z2,zhe,JBo,YBo,lV,KBo,ZBo,eIo,eb,Qhe,oIo,rIo,iV,tIo,aIo,nIo,ob,Whe,sIo,lIo,dV,iIo,dIo,cIo,rb,Hhe,fIo,mIo,cV,gIo,hIo,pIo,tb,Uhe,_Io,uIo,fV,bIo,vIo,FIo,ab,Jhe,TIo,MIo,mV,EIo,CIo,wIo,nb,Yhe,AIo,LIo,gV,yIo,xIo,$Io,sb,Khe,kIo,SIo,hV,RIo,PIo,BIo,lb,Zhe,IIo,NIo,pV,qIo,jIo,DIo,ib,epe,GIo,OIo,_V,VIo,XIo,zIo,db,ope,QIo,WIo,uV,HIo,UIo,JIo,cb,rpe,YIo,KIo,bV,ZIo,eNo,oNo,fb,tpe,rNo,tNo,vV,aNo,nNo,sNo,mb,ape,lNo,iNo,FV,dNo,cNo,fNo,gb,npe,mNo,gNo,spe,hNo,pNo,_No,hb,lpe,uNo,bNo,TV,vNo,FNo,TNo,pb,ipe,MNo,ENo,MV,CNo,wNo,ANo,_b,dpe,LNo,yNo,EV,xNo,$No,kNo,ub,cpe,SNo,RNo,CV,PNo,BNo,INo,bb,NNo,fpe,qNo,jNo,mpe,DNo,GNo,vb,AXe,Zi,Fb,gpe,KL,ONo,hpe,VNo,LXe,Bo,ZL,XNo,ed,zNo,wV,QNo,WNo,AV,HNo,UNo,JNo,ey,YNo,ppe,KNo,ZNo,eqo,mt,oy,oqo,_pe,rqo,tqo,od,aqo,upe,nqo,sqo,LV,lqo,iqo,dqo,Tb,cqo,oo,ry,fqo,bpe,mqo,gqo,Da,hqo,vpe,pqo,_qo,Fpe,uqo,bqo,Tpe,vqo,Fqo,Tqo,pe,Mb,Mpe,Mqo,Eqo,yV,Cqo,wqo,Aqo,Eb,Epe,Lqo,yqo,xV,xqo,$qo,kqo,Cb,Cpe,Sqo,Rqo,$V,Pqo,Bqo,Iqo,wb,wpe,Nqo,qqo,kV,jqo,Dqo,Gqo,Ab,Ape,Oqo,Vqo,SV,Xqo,zqo,Qqo,Lb,Lpe,Wqo,Hqo,RV,Uqo,Jqo,Yqo,yb,ype,Kqo,Zqo,PV,ejo,ojo,rjo,xb,xpe,tjo,ajo,BV,njo,sjo,ljo,$b,$pe,ijo,djo,IV,cjo,fjo,mjo,kb,kpe,gjo,hjo,NV,pjo,_jo,ujo,Sb,Spe,bjo,vjo,qV,Fjo,Tjo,Mjo,Rb,Rpe,Ejo,Cjo,jV,wjo,Ajo,Ljo,Pb,Ppe,yjo,xjo,DV,$jo,kjo,Sjo,Bb,Bpe,Rjo,Pjo,GV,Bjo,Ijo,Njo,Ib,Ipe,qjo,jjo,OV,Djo,Gjo,Ojo,Nb,Npe,Vjo,Xjo,VV,zjo,Qjo,Wjo,qb,qpe,Hjo,Ujo,XV,Jjo,Yjo,Kjo,jb,jpe,Zjo,eDo,zV,oDo,rDo,tDo,Db,aDo,Dpe,nDo,sDo,Gpe,lDo,iDo,Gb,yXe,rd,Ob,Ope,ty,dDo,Vpe,cDo,xXe,Io,ay,fDo,td,mDo,QV,gDo,hDo,WV,pDo,_Do,uDo,ny,bDo,Xpe,vDo,FDo,TDo,gt,sy,MDo,zpe,EDo,CDo,ad,wDo,Qpe,ADo,LDo,HV,yDo,xDo,$Do,Vb,kDo,ro,ly,SDo,Wpe,RDo,PDo,Ga,BDo,Hpe,IDo,NDo,Upe,qDo,jDo,Jpe,DDo,GDo,ODo,q,Xb,Ype,VDo,XDo,UV,zDo,QDo,WDo,zb,Kpe,HDo,UDo,JV,JDo,YDo,KDo,Qb,Zpe,ZDo,eGo,YV,oGo,rGo,tGo,Wb,e_e,aGo,nGo,KV,sGo,lGo,iGo,Hb,o_e,dGo,cGo,ZV,fGo,mGo,gGo,Ub,r_e,hGo,pGo,eX,_Go,uGo,bGo,Jb,t_e,vGo,FGo,oX,TGo,MGo,EGo,Yb,a_e,CGo,wGo,rX,AGo,LGo,yGo,Kb,n_e,xGo,$Go,tX,kGo,SGo,RGo,Zb,s_e,PGo,BGo,aX,IGo,NGo,qGo,ev,l_e,jGo,DGo,nX,GGo,OGo,VGo,ov,i_e,XGo,zGo,sX,QGo,WGo,HGo,rv,d_e,UGo,JGo,lX,YGo,KGo,ZGo,tv,c_e,eOo,oOo,iX,rOo,tOo,aOo,av,f_e,nOo,sOo,dX,lOo,iOo,dOo,nv,m_e,cOo,fOo,cX,mOo,gOo,hOo,sv,g_e,pOo,_Oo,fX,uOo,bOo,vOo,lv,h_e,FOo,TOo,mX,MOo,EOo,COo,iv,p_e,wOo,AOo,gX,LOo,yOo,xOo,dv,__e,$Oo,kOo,hX,SOo,ROo,POo,cv,u_e,BOo,IOo,pX,NOo,qOo,jOo,fv,b_e,DOo,GOo,_X,OOo,VOo,XOo,mv,v_e,zOo,QOo,uX,WOo,HOo,UOo,gv,F_e,JOo,YOo,bX,KOo,ZOo,eVo,hv,T_e,oVo,rVo,vX,tVo,aVo,nVo,pv,M_e,sVo,lVo,FX,iVo,dVo,cVo,_v,E_e,fVo,mVo,TX,gVo,hVo,pVo,uv,C_e,_Vo,uVo,MX,bVo,vVo,FVo,bv,w_e,TVo,MVo,EX,EVo,CVo,wVo,vv,A_e,AVo,LVo,CX,yVo,xVo,$Vo,Fv,L_e,kVo,SVo,wX,RVo,PVo,BVo,Tv,y_e,IVo,NVo,AX,qVo,jVo,DVo,Mv,x_e,GVo,OVo,LX,VVo,XVo,zVo,Ev,$_e,QVo,WVo,yX,HVo,UVo,JVo,Cv,k_e,YVo,KVo,xX,ZVo,eXo,oXo,wv,S_e,rXo,tXo,$X,aXo,nXo,sXo,Av,R_e,lXo,iXo,kX,dXo,cXo,fXo,Lv,P_e,mXo,gXo,SX,hXo,pXo,_Xo,yv,B_e,uXo,bXo,RX,vXo,FXo,TXo,xv,I_e,MXo,EXo,PX,CXo,wXo,AXo,$v,N_e,LXo,yXo,BX,xXo,$Xo,kXo,kv,q_e,SXo,RXo,IX,PXo,BXo,IXo,Sv,j_e,NXo,qXo,NX,jXo,DXo,GXo,Rv,D_e,OXo,VXo,qX,XXo,zXo,QXo,Pv,G_e,WXo,HXo,jX,UXo,JXo,YXo,Bv,O_e,KXo,ZXo,DX,ezo,ozo,rzo,Iv,V_e,tzo,azo,GX,nzo,szo,lzo,Nv,X_e,izo,dzo,OX,czo,fzo,mzo,qv,z_e,gzo,hzo,VX,pzo,_zo,uzo,jv,Q_e,bzo,vzo,XX,Fzo,Tzo,Mzo,Dv,Ezo,W_e,Czo,wzo,H_e,Azo,Lzo,Gv,$Xe,nd,Ov,U_e,iy,yzo,J_e,xzo,kXe,No,dy,$zo,sd,kzo,zX,Szo,Rzo,QX,Pzo,Bzo,Izo,cy,Nzo,Y_e,qzo,jzo,Dzo,ht,fy,Gzo,K_e,Ozo,Vzo,ld,Xzo,Z_e,zzo,Qzo,WX,Wzo,Hzo,Uzo,Vv,Jzo,to,my,Yzo,eue,Kzo,Zzo,Oa,eQo,oue,oQo,rQo,rue,tQo,aQo,tue,nQo,sQo,lQo,Z,Xv,aue,iQo,dQo,HX,cQo,fQo,mQo,zv,nue,gQo,hQo,UX,pQo,_Qo,uQo,Qv,sue,bQo,vQo,JX,FQo,TQo,MQo,Wv,lue,EQo,CQo,YX,wQo,AQo,LQo,Hv,iue,yQo,xQo,KX,$Qo,kQo,SQo,Uv,due,RQo,PQo,ZX,BQo,IQo,NQo,Jv,cue,qQo,jQo,ez,DQo,GQo,OQo,Yv,fue,VQo,XQo,oz,zQo,QQo,WQo,Kv,mue,HQo,UQo,rz,JQo,YQo,KQo,Zv,gue,ZQo,eWo,tz,oWo,rWo,tWo,e0,hue,aWo,nWo,az,sWo,lWo,iWo,o0,pue,dWo,cWo,nz,fWo,mWo,gWo,r0,_ue,hWo,pWo,sz,_Wo,uWo,bWo,t0,uue,vWo,FWo,lz,TWo,MWo,EWo,a0,bue,CWo,wWo,iz,AWo,LWo,yWo,n0,vue,xWo,$Wo,dz,kWo,SWo,RWo,s0,Fue,PWo,BWo,cz,IWo,NWo,qWo,l0,Tue,jWo,DWo,fz,GWo,OWo,VWo,i0,Mue,XWo,zWo,mz,QWo,WWo,HWo,d0,Eue,UWo,JWo,gz,YWo,KWo,ZWo,c0,Cue,eHo,oHo,hz,rHo,tHo,aHo,f0,wue,nHo,sHo,pz,lHo,iHo,dHo,m0,Aue,cHo,fHo,_z,mHo,gHo,hHo,g0,Lue,pHo,_Ho,uz,uHo,bHo,vHo,h0,yue,FHo,THo,bz,MHo,EHo,CHo,p0,xue,wHo,AHo,vz,LHo,yHo,xHo,_0,$ue,$Ho,kHo,Fz,SHo,RHo,PHo,u0,kue,BHo,IHo,Tz,NHo,qHo,jHo,b0,Sue,DHo,GHo,Mz,OHo,VHo,XHo,v0,Rue,zHo,QHo,Ez,WHo,HHo,UHo,F0,JHo,Pue,YHo,KHo,Bue,ZHo,eUo,T0,SXe,id,M0,Iue,gy,oUo,Nue,rUo,RXe,qo,hy,tUo,dd,aUo,Cz,nUo,sUo,wz,lUo,iUo,dUo,py,cUo,que,fUo,mUo,gUo,pt,_y,hUo,jue,pUo,_Uo,cd,uUo,Due,bUo,vUo,Az,FUo,TUo,MUo,E0,EUo,ao,uy,CUo,Gue,wUo,AUo,Va,LUo,Oue,yUo,xUo,Vue,$Uo,kUo,Xue,SUo,RUo,PUo,jo,C0,zue,BUo,IUo,Lz,NUo,qUo,jUo,w0,Que,DUo,GUo,yz,OUo,VUo,XUo,A0,Wue,zUo,QUo,xz,WUo,HUo,UUo,L0,Hue,JUo,YUo,$z,KUo,ZUo,eJo,y0,Uue,oJo,rJo,kz,tJo,aJo,nJo,x0,Jue,sJo,lJo,Sz,iJo,dJo,cJo,$0,fJo,Yue,mJo,gJo,Kue,hJo,pJo,k0,PXe,fd,S0,Zue,by,_Jo,e1e,uJo,BXe,Do,vy,bJo,md,vJo,Rz,FJo,TJo,Pz,MJo,EJo,CJo,Fy,wJo,o1e,AJo,LJo,yJo,_t,Ty,xJo,r1e,$Jo,kJo,gd,SJo,t1e,RJo,PJo,Bz,BJo,IJo,NJo,R0,qJo,no,My,jJo,a1e,DJo,GJo,Xa,OJo,n1e,VJo,XJo,s1e,zJo,QJo,l1e,WJo,HJo,UJo,U,P0,i1e,JJo,YJo,Iz,KJo,ZJo,eYo,B0,d1e,oYo,rYo,Nz,tYo,aYo,nYo,I0,c1e,sYo,lYo,qz,iYo,dYo,cYo,N0,f1e,fYo,mYo,jz,gYo,hYo,pYo,q0,m1e,_Yo,uYo,Dz,bYo,vYo,FYo,j0,g1e,TYo,MYo,Gz,EYo,CYo,wYo,D0,h1e,AYo,LYo,Oz,yYo,xYo,$Yo,G0,p1e,kYo,SYo,Vz,RYo,PYo,BYo,O0,_1e,IYo,NYo,Xz,qYo,jYo,DYo,V0,u1e,GYo,OYo,zz,VYo,XYo,zYo,X0,b1e,QYo,WYo,Qz,HYo,UYo,JYo,z0,v1e,YYo,KYo,Wz,ZYo,eKo,oKo,Q0,F1e,rKo,tKo,Hz,aKo,nKo,sKo,W0,T1e,lKo,iKo,Uz,dKo,cKo,fKo,H0,M1e,mKo,gKo,Jz,hKo,pKo,_Ko,U0,E1e,uKo,bKo,Yz,vKo,FKo,TKo,J0,C1e,MKo,EKo,Kz,CKo,wKo,AKo,Y0,w1e,LKo,yKo,Zz,xKo,$Ko,kKo,K0,A1e,SKo,RKo,eQ,PKo,BKo,IKo,Z0,L1e,NKo,qKo,oQ,jKo,DKo,GKo,eF,y1e,OKo,VKo,rQ,XKo,zKo,QKo,oF,x1e,WKo,HKo,tQ,UKo,JKo,YKo,rF,$1e,KKo,ZKo,aQ,eZo,oZo,rZo,tF,k1e,tZo,aZo,nQ,nZo,sZo,lZo,aF,S1e,iZo,dZo,sQ,cZo,fZo,mZo,nF,R1e,gZo,hZo,lQ,pZo,_Zo,uZo,sF,P1e,bZo,vZo,iQ,FZo,TZo,MZo,lF,B1e,EZo,CZo,dQ,wZo,AZo,LZo,iF,I1e,yZo,xZo,cQ,$Zo,kZo,SZo,dF,N1e,RZo,PZo,fQ,BZo,IZo,NZo,cF,q1e,qZo,jZo,mQ,DZo,GZo,OZo,fF,j1e,VZo,XZo,gQ,zZo,QZo,WZo,mF,D1e,HZo,UZo,hQ,JZo,YZo,KZo,gF,G1e,ZZo,eer,pQ,oer,rer,ter,hF,O1e,aer,ner,_Q,ser,ler,ier,pF,V1e,der,cer,uQ,fer,mer,ger,_F,her,X1e,per,_er,z1e,uer,ber,uF,IXe,hd,bF,Q1e,Ey,ver,W1e,Fer,NXe,Go,Cy,Ter,pd,Mer,bQ,Eer,Cer,vQ,wer,Aer,Ler,wy,yer,H1e,xer,$er,ker,ut,Ay,Ser,U1e,Rer,Per,_d,Ber,J1e,Ier,Ner,FQ,qer,jer,Der,vF,Ger,so,Ly,Oer,Y1e,Ver,Xer,za,zer,K1e,Qer,Wer,Z1e,Her,Uer,e2e,Jer,Yer,Ker,V,FF,o2e,Zer,eor,TQ,oor,ror,tor,TF,r2e,aor,nor,MQ,sor,lor,ior,MF,t2e,dor,cor,EQ,mor,gor,hor,EF,a2e,por,_or,CQ,uor,bor,vor,CF,n2e,For,Tor,wQ,Mor,Eor,Cor,wF,s2e,wor,Aor,AQ,Lor,yor,xor,AF,l2e,$or,kor,LQ,Sor,Ror,Por,LF,i2e,Bor,Ior,yQ,Nor,qor,jor,yF,d2e,Dor,Gor,xQ,Oor,Vor,Xor,xF,c2e,zor,Qor,$Q,Wor,Hor,Uor,$F,f2e,Jor,Yor,kQ,Kor,Zor,err,kF,m2e,orr,rrr,SQ,trr,arr,nrr,SF,g2e,srr,lrr,RQ,irr,drr,crr,RF,h2e,frr,mrr,PQ,grr,hrr,prr,PF,p2e,_rr,urr,BQ,brr,vrr,Frr,BF,_2e,Trr,Mrr,IQ,Err,Crr,wrr,IF,u2e,Arr,Lrr,NQ,yrr,xrr,$rr,NF,b2e,krr,Srr,qQ,Rrr,Prr,Brr,qF,v2e,Irr,Nrr,jQ,qrr,jrr,Drr,jF,F2e,Grr,Orr,DQ,Vrr,Xrr,zrr,DF,T2e,Qrr,Wrr,GQ,Hrr,Urr,Jrr,GF,M2e,Yrr,Krr,OQ,Zrr,etr,otr,OF,E2e,rtr,ttr,VQ,atr,ntr,str,VF,C2e,ltr,itr,XQ,dtr,ctr,ftr,XF,w2e,mtr,gtr,zQ,htr,ptr,_tr,zF,A2e,utr,btr,QQ,vtr,Ftr,Ttr,QF,L2e,Mtr,Etr,WQ,Ctr,wtr,Atr,WF,y2e,Ltr,ytr,HQ,xtr,$tr,ktr,HF,x2e,Str,Rtr,UQ,Ptr,Btr,Itr,UF,$2e,Ntr,qtr,JQ,jtr,Dtr,Gtr,JF,k2e,Otr,Vtr,YQ,Xtr,ztr,Qtr,YF,S2e,Wtr,Htr,KQ,Utr,Jtr,Ytr,KF,R2e,Ktr,Ztr,ZQ,ear,oar,rar,ZF,P2e,tar,aar,eW,nar,sar,lar,eT,B2e,iar,dar,oW,car,far,mar,oT,I2e,gar,har,rW,par,_ar,uar,rT,N2e,bar,Far,tW,Tar,Mar,Ear,tT,q2e,Car,war,aW,Aar,Lar,yar,aT,j2e,xar,$ar,nW,kar,Sar,Rar,nT,D2e,Par,Bar,sW,Iar,Nar,qar,sT,G2e,jar,Dar,lW,Gar,Oar,Var,lT,O2e,Xar,zar,iW,Qar,War,Har,iT,Uar,V2e,Jar,Yar,X2e,Kar,Zar,dT,qXe,ud,cT,z2e,yy,enr,Q2e,onr,jXe,Oo,xy,rnr,bd,tnr,dW,anr,nnr,cW,snr,lnr,inr,$y,dnr,W2e,cnr,fnr,mnr,bt,ky,gnr,H2e,hnr,pnr,vd,_nr,U2e,unr,bnr,fW,vnr,Fnr,Tnr,fT,Mnr,lo,Sy,Enr,J2e,Cnr,wnr,Qa,Anr,Y2e,Lnr,ynr,K2e,xnr,$nr,Z2e,knr,Snr,Rnr,ebe,mT,obe,Pnr,Bnr,mW,Inr,Nnr,qnr,gT,jnr,rbe,Dnr,Gnr,tbe,Onr,Vnr,hT,DXe,Fd,pT,abe,Ry,Xnr,nbe,znr,GXe,Vo,Py,Qnr,Td,Wnr,gW,Hnr,Unr,hW,Jnr,Ynr,Knr,By,Znr,sbe,esr,osr,rsr,vt,Iy,tsr,lbe,asr,nsr,Md,ssr,ibe,lsr,isr,pW,dsr,csr,fsr,_T,msr,io,Ny,gsr,dbe,hsr,psr,Wa,_sr,cbe,usr,bsr,fbe,vsr,Fsr,mbe,Tsr,Msr,Esr,ve,uT,gbe,Csr,wsr,_W,Asr,Lsr,ysr,bT,hbe,xsr,$sr,uW,ksr,Ssr,Rsr,vT,pbe,Psr,Bsr,bW,Isr,Nsr,qsr,FT,_be,jsr,Dsr,vW,Gsr,Osr,Vsr,Hs,ube,Xsr,zsr,FW,Qsr,Wsr,TW,Hsr,Usr,Jsr,TT,bbe,Ysr,Ksr,MW,Zsr,elr,olr,Us,vbe,rlr,tlr,EW,alr,nlr,CW,slr,llr,ilr,MT,Fbe,dlr,clr,wW,flr,mlr,glr,Ft,Tbe,hlr,plr,AW,_lr,ulr,LW,blr,vlr,yW,Flr,Tlr,Mlr,ET,Mbe,Elr,Clr,xW,wlr,Alr,Llr,CT,Ebe,ylr,xlr,$W,$lr,klr,Slr,wT,Cbe,Rlr,Plr,kW,Blr,Ilr,Nlr,AT,wbe,qlr,jlr,SW,Dlr,Glr,Olr,LT,Abe,Vlr,Xlr,RW,zlr,Qlr,Wlr,yT,Lbe,Hlr,Ulr,PW,Jlr,Ylr,Klr,xT,ybe,Zlr,eir,BW,oir,rir,tir,$T,air,xbe,nir,sir,$be,lir,iir,kT,OXe,Ed,ST,kbe,qy,dir,Sbe,cir,VXe,Xo,jy,fir,Cd,mir,IW,gir,hir,NW,pir,_ir,uir,Dy,bir,Rbe,vir,Fir,Tir,Tt,Gy,Mir,Pbe,Eir,Cir,wd,wir,Bbe,Air,Lir,qW,yir,xir,$ir,RT,kir,co,Oy,Sir,Ibe,Rir,Pir,Ha,Bir,Nbe,Iir,Nir,qbe,qir,jir,jbe,Dir,Gir,Oir,Dbe,PT,Gbe,Vir,Xir,jW,zir,Qir,Wir,BT,Hir,Obe,Uir,Jir,Vbe,Yir,Kir,IT,XXe,Ad,NT,Xbe,Vy,Zir,zbe,edr,zXe,zo,Xy,odr,Ld,rdr,DW,tdr,adr,GW,ndr,sdr,ldr,zy,idr,Qbe,ddr,cdr,fdr,Mt,Qy,mdr,Wbe,gdr,hdr,yd,pdr,Hbe,_dr,udr,OW,bdr,vdr,Fdr,qT,Tdr,fo,Wy,Mdr,Ube,Edr,Cdr,Ua,wdr,Jbe,Adr,Ldr,Ybe,ydr,xdr,Kbe,$dr,kdr,Sdr,Zbe,jT,eve,Rdr,Pdr,VW,Bdr,Idr,Ndr,DT,qdr,ove,jdr,Ddr,rve,Gdr,Odr,GT,QXe,xd,OT,tve,Hy,Vdr,ave,Xdr,WXe,Qo,Uy,zdr,$d,Qdr,XW,Wdr,Hdr,zW,Udr,Jdr,Ydr,Jy,Kdr,nve,Zdr,ecr,ocr,Et,Yy,rcr,sve,tcr,acr,kd,ncr,lve,scr,lcr,QW,icr,dcr,ccr,VT,fcr,mo,Ky,mcr,ive,gcr,hcr,Ja,pcr,dve,_cr,ucr,cve,bcr,vcr,fve,Fcr,Tcr,Mcr,Pe,XT,mve,Ecr,Ccr,WW,wcr,Acr,Lcr,zT,gve,ycr,xcr,HW,$cr,kcr,Scr,QT,hve,Rcr,Pcr,UW,Bcr,Icr,Ncr,WT,pve,qcr,jcr,JW,Dcr,Gcr,Ocr,HT,_ve,Vcr,Xcr,YW,zcr,Qcr,Wcr,UT,uve,Hcr,Ucr,KW,Jcr,Ycr,Kcr,JT,bve,Zcr,efr,ZW,ofr,rfr,tfr,YT,vve,afr,nfr,eH,sfr,lfr,ifr,KT,Fve,dfr,cfr,oH,ffr,mfr,gfr,ZT,hfr,Tve,pfr,_fr,Mve,ufr,bfr,e7,HXe,Sd,o7,Eve,Zy,vfr,Cve,Ffr,UXe,Wo,e8,Tfr,Rd,Mfr,rH,Efr,Cfr,tH,wfr,Afr,Lfr,o8,yfr,wve,xfr,$fr,kfr,Ct,r8,Sfr,Ave,Rfr,Pfr,Pd,Bfr,Lve,Ifr,Nfr,aH,qfr,jfr,Dfr,r7,Gfr,go,t8,Ofr,yve,Vfr,Xfr,Ya,zfr,xve,Qfr,Wfr,$ve,Hfr,Ufr,kve,Jfr,Yfr,Kfr,rt,t7,Sve,Zfr,emr,nH,omr,rmr,tmr,a7,Rve,amr,nmr,sH,smr,lmr,imr,n7,Pve,dmr,cmr,lH,fmr,mmr,gmr,s7,Bve,hmr,pmr,iH,_mr,umr,bmr,l7,Ive,vmr,Fmr,dH,Tmr,Mmr,Emr,i7,Cmr,Nve,wmr,Amr,qve,Lmr,ymr,d7,JXe,Bd,c7,jve,a8,xmr,Dve,$mr,YXe,Ho,n8,kmr,Id,Smr,cH,Rmr,Pmr,fH,Bmr,Imr,Nmr,s8,qmr,Gve,jmr,Dmr,Gmr,wt,l8,Omr,Ove,Vmr,Xmr,Nd,zmr,Vve,Qmr,Wmr,mH,Hmr,Umr,Jmr,f7,Ymr,ho,i8,Kmr,Xve,Zmr,egr,Ka,ogr,zve,rgr,tgr,Qve,agr,ngr,Wve,sgr,lgr,igr,Le,m7,Hve,dgr,cgr,gH,fgr,mgr,ggr,g7,Uve,hgr,pgr,hH,_gr,ugr,bgr,h7,Jve,vgr,Fgr,pH,Tgr,Mgr,Egr,p7,Yve,Cgr,wgr,_H,Agr,Lgr,ygr,_7,Kve,xgr,$gr,uH,kgr,Sgr,Rgr,u7,Zve,Pgr,Bgr,bH,Igr,Ngr,qgr,b7,e0e,jgr,Dgr,vH,Ggr,Ogr,Vgr,v7,o0e,Xgr,zgr,FH,Qgr,Wgr,Hgr,F7,r0e,Ugr,Jgr,TH,Ygr,Kgr,Zgr,T7,t0e,ehr,ohr,MH,rhr,thr,ahr,M7,nhr,a0e,shr,lhr,n0e,ihr,dhr,E7,KXe,qd,C7,s0e,d8,chr,l0e,fhr,ZXe,Uo,c8,mhr,jd,ghr,EH,hhr,phr,CH,_hr,uhr,bhr,f8,vhr,i0e,Fhr,Thr,Mhr,At,m8,Ehr,d0e,Chr,whr,Dd,Ahr,c0e,Lhr,yhr,wH,xhr,$hr,khr,w7,Shr,po,g8,Rhr,f0e,Phr,Bhr,Za,Ihr,m0e,Nhr,qhr,g0e,jhr,Dhr,h0e,Ghr,Ohr,Vhr,h8,A7,p0e,Xhr,zhr,AH,Qhr,Whr,Hhr,L7,_0e,Uhr,Jhr,LH,Yhr,Khr,Zhr,y7,epr,u0e,opr,rpr,b0e,tpr,apr,x7,eze,Gd,$7,v0e,p8,npr,F0e,spr,oze,Jo,_8,lpr,Od,ipr,yH,dpr,cpr,xH,fpr,mpr,gpr,u8,hpr,T0e,ppr,_pr,upr,Lt,b8,bpr,M0e,vpr,Fpr,Vd,Tpr,E0e,Mpr,Epr,$H,Cpr,wpr,Apr,k7,Lpr,_o,v8,ypr,C0e,xpr,$pr,en,kpr,w0e,Spr,Rpr,A0e,Ppr,Bpr,L0e,Ipr,Npr,qpr,tt,S7,y0e,jpr,Dpr,kH,Gpr,Opr,Vpr,R7,x0e,Xpr,zpr,SH,Qpr,Wpr,Hpr,P7,$0e,Upr,Jpr,RH,Ypr,Kpr,Zpr,B7,k0e,e_r,o_r,PH,r_r,t_r,a_r,I7,S0e,n_r,s_r,BH,l_r,i_r,d_r,N7,c_r,R0e,f_r,m_r,P0e,g_r,h_r,q7,rze,Xd,j7,B0e,F8,p_r,I0e,__r,tze,Yo,T8,u_r,zd,b_r,IH,v_r,F_r,NH,T_r,M_r,E_r,M8,C_r,N0e,w_r,A_r,L_r,yt,E8,y_r,q0e,x_r,$_r,Qd,k_r,j0e,S_r,R_r,qH,P_r,B_r,I_r,D7,N_r,uo,C8,q_r,D0e,j_r,D_r,on,G_r,G0e,O_r,V_r,O0e,X_r,z_r,V0e,Q_r,W_r,H_r,Wd,G7,X0e,U_r,J_r,jH,Y_r,K_r,Z_r,O7,z0e,eur,our,DH,rur,tur,aur,V7,Q0e,nur,sur,GH,lur,iur,dur,X7,cur,W0e,fur,mur,H0e,gur,hur,z7,aze,Hd,Q7,U0e,w8,pur,J0e,_ur,nze,Ko,A8,uur,Ud,bur,OH,vur,Fur,VH,Tur,Mur,Eur,L8,Cur,Y0e,wur,Aur,Lur,xt,y8,yur,K0e,xur,$ur,Jd,kur,Z0e,Sur,Rur,XH,Pur,Bur,Iur,W7,Nur,bo,x8,qur,eFe,jur,Dur,rn,Gur,oFe,Our,Vur,rFe,Xur,zur,tFe,Qur,Wur,Hur,$8,H7,aFe,Uur,Jur,zH,Yur,Kur,Zur,U7,nFe,e1r,o1r,QH,r1r,t1r,a1r,J7,n1r,sFe,s1r,l1r,lFe,i1r,d1r,Y7,sze,Yd,K7,iFe,k8,c1r,dFe,f1r,lze,Zo,S8,m1r,Kd,g1r,WH,h1r,p1r,HH,_1r,u1r,b1r,R8,v1r,cFe,F1r,T1r,M1r,$t,P8,E1r,fFe,C1r,w1r,Zd,A1r,mFe,L1r,y1r,UH,x1r,$1r,k1r,Z7,S1r,vo,B8,R1r,gFe,P1r,B1r,tn,I1r,hFe,N1r,q1r,pFe,j1r,D1r,_Fe,G1r,O1r,V1r,uFe,e9,bFe,X1r,z1r,JH,Q1r,W1r,H1r,o9,U1r,vFe,J1r,Y1r,FFe,K1r,Z1r,r9,ize,ec,t9,TFe,I8,e2r,MFe,o2r,dze,er,N8,r2r,oc,t2r,YH,a2r,n2r,KH,s2r,l2r,i2r,q8,d2r,EFe,c2r,f2r,m2r,kt,j8,g2r,CFe,h2r,p2r,rc,_2r,wFe,u2r,b2r,ZH,v2r,F2r,T2r,a9,M2r,Fo,D8,E2r,AFe,C2r,w2r,an,A2r,LFe,L2r,y2r,yFe,x2r,$2r,xFe,k2r,S2r,R2r,at,n9,$Fe,P2r,B2r,eU,I2r,N2r,q2r,s9,kFe,j2r,D2r,oU,G2r,O2r,V2r,l9,SFe,X2r,z2r,rU,Q2r,W2r,H2r,i9,RFe,U2r,J2r,tU,Y2r,K2r,Z2r,d9,PFe,ebr,obr,aU,rbr,tbr,abr,c9,nbr,BFe,sbr,lbr,IFe,ibr,dbr,f9,cze,tc,m9,NFe,G8,cbr,qFe,fbr,fze,or,O8,mbr,ac,gbr,nU,hbr,pbr,sU,_br,ubr,bbr,V8,vbr,jFe,Fbr,Tbr,Mbr,St,X8,Ebr,DFe,Cbr,wbr,nc,Abr,GFe,Lbr,ybr,lU,xbr,$br,kbr,g9,Sbr,To,z8,Rbr,OFe,Pbr,Bbr,nn,Ibr,VFe,Nbr,qbr,XFe,jbr,Dbr,zFe,Gbr,Obr,Vbr,QFe,h9,WFe,Xbr,zbr,iU,Qbr,Wbr,Hbr,p9,Ubr,HFe,Jbr,Ybr,UFe,Kbr,Zbr,_9,mze,sc,u9,JFe,Q8,evr,YFe,ovr,gze,rr,W8,rvr,lc,tvr,dU,avr,nvr,cU,svr,lvr,ivr,H8,dvr,KFe,cvr,fvr,mvr,Rt,U8,gvr,ZFe,hvr,pvr,ic,_vr,eTe,uvr,bvr,fU,vvr,Fvr,Tvr,b9,Mvr,$r,J8,Evr,oTe,Cvr,wvr,sn,Avr,rTe,Lvr,yvr,tTe,xvr,$vr,aTe,kvr,Svr,Rvr,B,v9,nTe,Pvr,Bvr,mU,Ivr,Nvr,qvr,F9,sTe,jvr,Dvr,gU,Gvr,Ovr,Vvr,T9,lTe,Xvr,zvr,hU,Qvr,Wvr,Hvr,M9,iTe,Uvr,Jvr,pU,Yvr,Kvr,Zvr,E9,dTe,e0r,o0r,_U,r0r,t0r,a0r,C9,cTe,n0r,s0r,uU,l0r,i0r,d0r,w9,fTe,c0r,f0r,bU,m0r,g0r,h0r,A9,mTe,p0r,_0r,vU,u0r,b0r,v0r,L9,gTe,F0r,T0r,FU,M0r,E0r,C0r,y9,hTe,w0r,A0r,TU,L0r,y0r,x0r,x9,pTe,$0r,k0r,MU,S0r,R0r,P0r,$9,_Te,B0r,I0r,EU,N0r,q0r,j0r,k9,uTe,D0r,G0r,CU,O0r,V0r,X0r,S9,bTe,z0r,Q0r,wU,W0r,H0r,U0r,R9,vTe,J0r,Y0r,AU,K0r,Z0r,eFr,P9,FTe,oFr,rFr,LU,tFr,aFr,nFr,B9,TTe,sFr,lFr,yU,iFr,dFr,cFr,I9,MTe,fFr,mFr,xU,gFr,hFr,pFr,Js,ETe,_Fr,uFr,$U,bFr,vFr,kU,FFr,TFr,MFr,N9,CTe,EFr,CFr,SU,wFr,AFr,LFr,q9,wTe,yFr,xFr,RU,$Fr,kFr,SFr,j9,ATe,RFr,PFr,PU,BFr,IFr,NFr,D9,LTe,qFr,jFr,BU,DFr,GFr,OFr,G9,yTe,VFr,XFr,IU,zFr,QFr,WFr,O9,xTe,HFr,UFr,NU,JFr,YFr,KFr,V9,$Te,ZFr,eTr,qU,oTr,rTr,tTr,X9,kTe,aTr,nTr,jU,sTr,lTr,iTr,z9,STe,dTr,cTr,DU,fTr,mTr,gTr,Q9,RTe,hTr,pTr,GU,_Tr,uTr,bTr,W9,PTe,vTr,FTr,OU,TTr,MTr,ETr,H9,BTe,CTr,wTr,VU,ATr,LTr,yTr,U9,ITe,xTr,$Tr,XU,kTr,STr,RTr,J9,NTe,PTr,BTr,zU,ITr,NTr,qTr,Y9,qTe,jTr,DTr,QU,GTr,OTr,VTr,K9,jTe,XTr,zTr,WU,QTr,WTr,HTr,Z9,DTe,UTr,JTr,HU,YTr,KTr,ZTr,eM,GTe,e7r,o7r,UU,r7r,t7r,a7r,oM,OTe,n7r,s7r,JU,l7r,i7r,d7r,rM,VTe,c7r,f7r,YU,m7r,g7r,h7r,tM,XTe,p7r,_7r,KU,u7r,b7r,v7r,aM,zTe,F7r,T7r,ZU,M7r,E7r,C7r,nM,QTe,w7r,A7r,eJ,L7r,y7r,x7r,sM,WTe,$7r,k7r,oJ,S7r,R7r,P7r,lM,HTe,B7r,I7r,rJ,N7r,q7r,j7r,iM,UTe,D7r,G7r,tJ,O7r,V7r,X7r,dM,JTe,z7r,Q7r,aJ,W7r,H7r,U7r,cM,YTe,J7r,Y7r,nJ,K7r,Z7r,e9r,fM,KTe,o9r,r9r,sJ,t9r,a9r,n9r,mM,ZTe,s9r,l9r,lJ,i9r,d9r,c9r,gM,e7e,f9r,m9r,iJ,g9r,h9r,p9r,hM,o7e,_9r,u9r,dJ,b9r,v9r,F9r,pM,hze,dc,_M,r7e,Y8,T9r,t7e,M9r,pze,tr,K8,E9r,cc,C9r,cJ,w9r,A9r,fJ,L9r,y9r,x9r,Z8,$9r,a7e,k9r,S9r,R9r,Pt,ex,P9r,n7e,B9r,I9r,fc,N9r,s7e,q9r,j9r,mJ,D9r,G9r,O9r,uM,V9r,kr,ox,X9r,l7e,z9r,Q9r,ln,W9r,i7e,H9r,U9r,d7e,J9r,Y9r,c7e,K9r,Z9r,eMr,se,bM,f7e,oMr,rMr,gJ,tMr,aMr,nMr,vM,m7e,sMr,lMr,hJ,iMr,dMr,cMr,FM,g7e,fMr,mMr,pJ,gMr,hMr,pMr,TM,h7e,_Mr,uMr,_J,bMr,vMr,FMr,MM,p7e,TMr,MMr,uJ,EMr,CMr,wMr,EM,_7e,AMr,LMr,bJ,yMr,xMr,$Mr,CM,u7e,kMr,SMr,vJ,RMr,PMr,BMr,wM,b7e,IMr,NMr,FJ,qMr,jMr,DMr,AM,v7e,GMr,OMr,TJ,VMr,XMr,zMr,LM,F7e,QMr,WMr,MJ,HMr,UMr,JMr,yM,T7e,YMr,KMr,EJ,ZMr,e4r,o4r,xM,M7e,r4r,t4r,CJ,a4r,n4r,s4r,$M,E7e,l4r,i4r,wJ,d4r,c4r,f4r,kM,C7e,m4r,g4r,AJ,h4r,p4r,_4r,SM,w7e,u4r,b4r,LJ,v4r,F4r,T4r,RM,A7e,M4r,E4r,yJ,C4r,w4r,A4r,PM,L7e,L4r,y4r,xJ,x4r,$4r,k4r,BM,y7e,S4r,R4r,$J,P4r,B4r,I4r,IM,x7e,N4r,q4r,kJ,j4r,D4r,G4r,NM,$7e,O4r,V4r,SJ,X4r,z4r,Q4r,qM,k7e,W4r,H4r,RJ,U4r,J4r,Y4r,jM,S7e,K4r,Z4r,PJ,eEr,oEr,rEr,DM,R7e,tEr,aEr,BJ,nEr,sEr,lEr,GM,_ze,mc,OM,P7e,rx,iEr,B7e,dEr,uze,ar,tx,cEr,gc,fEr,IJ,mEr,gEr,NJ,hEr,pEr,_Er,ax,uEr,I7e,bEr,vEr,FEr,Bt,nx,TEr,N7e,MEr,EEr,hc,CEr,q7e,wEr,AEr,qJ,LEr,yEr,xEr,VM,$Er,Sr,sx,kEr,j7e,SEr,REr,dn,PEr,D7e,BEr,IEr,G7e,NEr,qEr,O7e,jEr,DEr,GEr,Me,XM,V7e,OEr,VEr,jJ,XEr,zEr,QEr,zM,X7e,WEr,HEr,DJ,UEr,JEr,YEr,QM,z7e,KEr,ZEr,GJ,eCr,oCr,rCr,WM,Q7e,tCr,aCr,OJ,nCr,sCr,lCr,HM,W7e,iCr,dCr,VJ,cCr,fCr,mCr,UM,H7e,gCr,hCr,XJ,pCr,_Cr,uCr,JM,U7e,bCr,vCr,zJ,FCr,TCr,MCr,YM,J7e,ECr,CCr,QJ,wCr,ACr,LCr,KM,Y7e,yCr,xCr,WJ,$Cr,kCr,SCr,ZM,K7e,RCr,PCr,HJ,BCr,ICr,NCr,e4,Z7e,qCr,jCr,UJ,DCr,GCr,OCr,o4,e9e,VCr,XCr,JJ,zCr,QCr,WCr,r4,o9e,HCr,UCr,YJ,JCr,YCr,KCr,t4,bze,pc,a4,r9e,lx,ZCr,t9e,e3r,vze,nr,ix,o3r,_c,r3r,KJ,t3r,a3r,ZJ,n3r,s3r,l3r,dx,i3r,a9e,d3r,c3r,f3r,It,cx,m3r,n9e,g3r,h3r,uc,p3r,s9e,_3r,u3r,eY,b3r,v3r,F3r,n4,T3r,Rr,fx,M3r,l9e,E3r,C3r,cn,w3r,i9e,A3r,L3r,d9e,y3r,x3r,c9e,$3r,k3r,S3r,Ve,s4,f9e,R3r,P3r,oY,B3r,I3r,N3r,l4,m9e,q3r,j3r,rY,D3r,G3r,O3r,Ys,g9e,V3r,X3r,tY,z3r,Q3r,aY,W3r,H3r,U3r,i4,h9e,J3r,Y3r,nY,K3r,Z3r,e5r,d4,p9e,o5r,r5r,sY,t5r,a5r,n5r,c4,_9e,s5r,l5r,lY,i5r,d5r,c5r,f4,u9e,f5r,m5r,iY,g5r,h5r,p5r,m4,b9e,_5r,u5r,dY,b5r,v5r,F5r,g4,Fze,bc,h4,v9e,mx,T5r,F9e,M5r,Tze,sr,gx,E5r,vc,C5r,cY,w5r,A5r,fY,L5r,y5r,x5r,hx,$5r,T9e,k5r,S5r,R5r,Nt,px,P5r,M9e,B5r,I5r,Fc,N5r,E9e,q5r,j5r,mY,D5r,G5r,O5r,p4,V5r,Pr,_x,X5r,C9e,z5r,Q5r,fn,W5r,w9e,H5r,U5r,A9e,J5r,Y5r,L9e,K5r,Z5r,ewr,ie,_4,y9e,owr,rwr,gY,twr,awr,nwr,u4,x9e,swr,lwr,hY,iwr,dwr,cwr,b4,$9e,fwr,mwr,pY,gwr,hwr,pwr,v4,k9e,_wr,uwr,_Y,bwr,vwr,Fwr,F4,S9e,Twr,Mwr,uY,Ewr,Cwr,wwr,T4,R9e,Awr,Lwr,bY,ywr,xwr,$wr,M4,P9e,kwr,Swr,vY,Rwr,Pwr,Bwr,E4,B9e,Iwr,Nwr,FY,qwr,jwr,Dwr,C4,I9e,Gwr,Owr,TY,Vwr,Xwr,zwr,w4,N9e,Qwr,Wwr,MY,Hwr,Uwr,Jwr,A4,q9e,Ywr,Kwr,EY,Zwr,eAr,oAr,L4,j9e,rAr,tAr,CY,aAr,nAr,sAr,y4,D9e,lAr,iAr,wY,dAr,cAr,fAr,x4,G9e,mAr,gAr,AY,hAr,pAr,_Ar,$4,O9e,uAr,bAr,LY,vAr,FAr,TAr,k4,V9e,MAr,EAr,yY,CAr,wAr,AAr,S4,X9e,LAr,yAr,xY,xAr,$Ar,kAr,R4,z9e,SAr,RAr,$Y,PAr,BAr,IAr,P4,Q9e,NAr,qAr,kY,jAr,DAr,GAr,B4,W9e,OAr,VAr,SY,XAr,zAr,QAr,I4,Mze,Tc,N4,H9e,ux,WAr,U9e,HAr,Eze,lr,bx,UAr,Mc,JAr,RY,YAr,KAr,PY,ZAr,e6r,o6r,vx,r6r,J9e,t6r,a6r,n6r,qt,Fx,s6r,Y9e,l6r,i6r,Ec,d6r,K9e,c6r,f6r,BY,m6r,g6r,h6r,q4,p6r,Br,Tx,_6r,Z9e,u6r,b6r,mn,v6r,eMe,F6r,T6r,oMe,M6r,E6r,rMe,C6r,w6r,A6r,ye,j4,tMe,L6r,y6r,IY,x6r,$6r,k6r,D4,aMe,S6r,R6r,NY,P6r,B6r,I6r,G4,nMe,N6r,q6r,qY,j6r,D6r,G6r,O4,sMe,O6r,V6r,jY,X6r,z6r,Q6r,V4,lMe,W6r,H6r,DY,U6r,J6r,Y6r,X4,iMe,K6r,Z6r,GY,eLr,oLr,rLr,z4,dMe,tLr,aLr,OY,nLr,sLr,lLr,Q4,cMe,iLr,dLr,VY,cLr,fLr,mLr,W4,fMe,gLr,hLr,XY,pLr,_Lr,uLr,H4,mMe,bLr,vLr,zY,FLr,TLr,MLr,U4,Cze,Cc,J4,gMe,Mx,ELr,hMe,CLr,wze,ir,Ex,wLr,wc,ALr,QY,LLr,yLr,WY,xLr,$Lr,kLr,Cx,SLr,pMe,RLr,PLr,BLr,jt,wx,ILr,_Me,NLr,qLr,Ac,jLr,uMe,DLr,GLr,HY,OLr,VLr,XLr,Y4,zLr,Ir,Ax,QLr,bMe,WLr,HLr,gn,ULr,vMe,JLr,YLr,FMe,KLr,ZLr,TMe,eyr,oyr,ryr,te,K4,MMe,tyr,ayr,UY,nyr,syr,lyr,Z4,EMe,iyr,dyr,JY,cyr,fyr,myr,eE,CMe,gyr,hyr,YY,pyr,_yr,uyr,oE,wMe,byr,vyr,KY,Fyr,Tyr,Myr,rE,AMe,Eyr,Cyr,ZY,wyr,Ayr,Lyr,tE,LMe,yyr,xyr,eK,$yr,kyr,Syr,aE,yMe,Ryr,Pyr,oK,Byr,Iyr,Nyr,nE,xMe,qyr,jyr,rK,Dyr,Gyr,Oyr,sE,$Me,Vyr,Xyr,tK,zyr,Qyr,Wyr,lE,kMe,Hyr,Uyr,aK,Jyr,Yyr,Kyr,iE,SMe,Zyr,e8r,nK,o8r,r8r,t8r,dE,RMe,a8r,n8r,sK,s8r,l8r,i8r,cE,PMe,d8r,c8r,lK,f8r,m8r,g8r,fE,BMe,h8r,p8r,iK,_8r,u8r,b8r,mE,IMe,v8r,F8r,dK,T8r,M8r,E8r,gE,NMe,C8r,w8r,cK,A8r,L8r,y8r,hE,qMe,x8r,$8r,fK,k8r,S8r,R8r,pE,jMe,P8r,B8r,mK,I8r,N8r,q8r,_E,DMe,j8r,D8r,gK,G8r,O8r,V8r,uE,GMe,X8r,z8r,hK,Q8r,W8r,H8r,bE,OMe,U8r,J8r,pK,Y8r,K8r,Z8r,vE,VMe,exr,oxr,_K,rxr,txr,axr,FE,XMe,nxr,sxr,uK,lxr,ixr,dxr,TE,zMe,cxr,fxr,bK,mxr,gxr,hxr,ME,QMe,pxr,_xr,vK,uxr,bxr,vxr,EE,WMe,Fxr,Txr,FK,Mxr,Exr,Cxr,CE,Aze,Lc,wE,HMe,Lx,wxr,UMe,Axr,Lze,dr,yx,Lxr,yc,yxr,TK,xxr,$xr,MK,kxr,Sxr,Rxr,xx,Pxr,JMe,Bxr,Ixr,Nxr,Dt,$x,qxr,YMe,jxr,Dxr,xc,Gxr,KMe,Oxr,Vxr,EK,Xxr,zxr,Qxr,AE,Wxr,Nr,kx,Hxr,ZMe,Uxr,Jxr,hn,Yxr,e4e,Kxr,Zxr,o4e,e$r,o$r,r4e,r$r,t$r,a$r,_e,LE,t4e,n$r,s$r,CK,l$r,i$r,d$r,yE,a4e,c$r,f$r,wK,m$r,g$r,h$r,xE,n4e,p$r,_$r,AK,u$r,b$r,v$r,$E,s4e,F$r,T$r,LK,M$r,E$r,C$r,kE,l4e,w$r,A$r,yK,L$r,y$r,x$r,SE,i4e,$$r,k$r,xK,S$r,R$r,P$r,RE,d4e,B$r,I$r,$K,N$r,q$r,j$r,PE,c4e,D$r,G$r,kK,O$r,V$r,X$r,BE,f4e,z$r,Q$r,SK,W$r,H$r,U$r,IE,m4e,J$r,Y$r,RK,K$r,Z$r,ekr,NE,g4e,okr,rkr,PK,tkr,akr,nkr,qE,h4e,skr,lkr,BK,ikr,dkr,ckr,jE,p4e,fkr,mkr,IK,gkr,hkr,pkr,DE,_4e,_kr,ukr,NK,bkr,vkr,Fkr,GE,u4e,Tkr,Mkr,qK,Ekr,Ckr,wkr,OE,b4e,Akr,Lkr,jK,ykr,xkr,$kr,VE,v4e,kkr,Skr,DK,Rkr,Pkr,Bkr,XE,yze,$c,zE,F4e,Sx,Ikr,T4e,Nkr,xze,cr,Rx,qkr,kc,jkr,GK,Dkr,Gkr,OK,Okr,Vkr,Xkr,Px,zkr,M4e,Qkr,Wkr,Hkr,Gt,Bx,Ukr,E4e,Jkr,Ykr,Sc,Kkr,C4e,Zkr,eSr,VK,oSr,rSr,tSr,QE,aSr,qr,Ix,nSr,w4e,sSr,lSr,pn,iSr,A4e,dSr,cSr,L4e,fSr,mSr,y4e,gSr,hSr,pSr,Nx,WE,x4e,_Sr,uSr,XK,bSr,vSr,FSr,HE,$4e,TSr,MSr,zK,ESr,CSr,wSr,UE,$ze,Rc,JE,k4e,qx,ASr,S4e,LSr,kze,fr,jx,ySr,Pc,xSr,QK,$Sr,kSr,WK,SSr,RSr,PSr,Dx,BSr,R4e,ISr,NSr,qSr,Ot,Gx,jSr,P4e,DSr,GSr,Bc,OSr,B4e,VSr,XSr,HK,zSr,QSr,WSr,YE,HSr,jr,Ox,USr,I4e,JSr,YSr,_n,KSr,N4e,ZSr,eRr,q4e,oRr,rRr,j4e,tRr,aRr,nRr,D4e,KE,G4e,sRr,lRr,UK,iRr,dRr,cRr,ZE,Sze,Ic,eC,O4e,Vx,fRr,V4e,mRr,Rze,mr,Xx,gRr,Nc,hRr,JK,pRr,_Rr,YK,uRr,bRr,vRr,zx,FRr,X4e,TRr,MRr,ERr,Vt,Qx,CRr,z4e,wRr,ARr,qc,LRr,Q4e,yRr,xRr,KK,$Rr,kRr,SRr,oC,RRr,Dr,Wx,PRr,W4e,BRr,IRr,un,NRr,H4e,qRr,jRr,U4e,DRr,GRr,J4e,ORr,VRr,XRr,de,rC,Y4e,zRr,QRr,ZK,WRr,HRr,URr,tC,K4e,JRr,YRr,eZ,KRr,ZRr,ePr,aC,Z4e,oPr,rPr,oZ,tPr,aPr,nPr,nC,eEe,sPr,lPr,rZ,iPr,dPr,cPr,sC,oEe,fPr,mPr,tZ,gPr,hPr,pPr,lC,rEe,_Pr,uPr,aZ,bPr,vPr,FPr,iC,tEe,TPr,MPr,nZ,EPr,CPr,wPr,dC,aEe,APr,LPr,sZ,yPr,xPr,$Pr,cC,nEe,kPr,SPr,lZ,RPr,PPr,BPr,fC,sEe,IPr,NPr,iZ,qPr,jPr,DPr,mC,lEe,GPr,OPr,dZ,VPr,XPr,zPr,gC,iEe,QPr,WPr,cZ,HPr,UPr,JPr,hC,dEe,YPr,KPr,fZ,ZPr,eBr,oBr,pC,cEe,rBr,tBr,mZ,aBr,nBr,sBr,_C,fEe,lBr,iBr,gZ,dBr,cBr,fBr,uC,mEe,mBr,gBr,hZ,hBr,pBr,_Br,bC,gEe,uBr,bBr,pZ,vBr,FBr,TBr,vC,hEe,MBr,EBr,_Z,CBr,wBr,ABr,FC,pEe,LBr,yBr,uZ,xBr,$Br,kBr,TC,_Ee,SBr,RBr,bZ,PBr,BBr,IBr,MC,Pze,jc,EC,uEe,Hx,NBr,bEe,qBr,Bze,gr,Ux,jBr,Dc,DBr,vZ,GBr,OBr,FZ,VBr,XBr,zBr,Jx,QBr,vEe,WBr,HBr,UBr,Xt,Yx,JBr,FEe,YBr,KBr,Gc,ZBr,TEe,eIr,oIr,TZ,rIr,tIr,aIr,CC,nIr,Gr,Kx,sIr,MEe,lIr,iIr,bn,dIr,EEe,cIr,fIr,CEe,mIr,gIr,wEe,hIr,pIr,_Ir,ce,wC,AEe,uIr,bIr,MZ,vIr,FIr,TIr,AC,LEe,MIr,EIr,EZ,CIr,wIr,AIr,LC,yEe,LIr,yIr,CZ,xIr,$Ir,kIr,yC,xEe,SIr,RIr,wZ,PIr,BIr,IIr,xC,$Ee,NIr,qIr,AZ,jIr,DIr,GIr,$C,kEe,OIr,VIr,LZ,XIr,zIr,QIr,kC,SEe,WIr,HIr,yZ,UIr,JIr,YIr,SC,REe,KIr,ZIr,xZ,eNr,oNr,rNr,RC,PEe,tNr,aNr,$Z,nNr,sNr,lNr,PC,BEe,iNr,dNr,kZ,cNr,fNr,mNr,BC,IEe,gNr,hNr,SZ,pNr,_Nr,uNr,IC,NEe,bNr,vNr,RZ,FNr,TNr,MNr,NC,qEe,ENr,CNr,PZ,wNr,ANr,LNr,qC,jEe,yNr,xNr,BZ,$Nr,kNr,SNr,jC,DEe,RNr,PNr,IZ,BNr,INr,NNr,DC,GEe,qNr,jNr,NZ,DNr,GNr,ONr,GC,OEe,VNr,XNr,qZ,zNr,QNr,WNr,OC,VEe,HNr,UNr,jZ,JNr,YNr,KNr,VC,XEe,ZNr,eqr,DZ,oqr,rqr,tqr,XC,zEe,aqr,nqr,GZ,sqr,lqr,iqr,zC,Ize,Oc,QC,QEe,Zx,dqr,WEe,cqr,Nze,hr,e$,fqr,Vc,mqr,OZ,gqr,hqr,VZ,pqr,_qr,uqr,o$,bqr,HEe,vqr,Fqr,Tqr,zt,r$,Mqr,UEe,Eqr,Cqr,Xc,wqr,JEe,Aqr,Lqr,XZ,yqr,xqr,$qr,WC,kqr,Or,t$,Sqr,YEe,Rqr,Pqr,vn,Bqr,KEe,Iqr,Nqr,ZEe,qqr,jqr,eCe,Dqr,Gqr,Oqr,oCe,HC,rCe,Vqr,Xqr,zZ,zqr,Qqr,Wqr,UC,qze,zc,JC,tCe,a$,Hqr,aCe,Uqr,jze,pr,n$,Jqr,Qc,Yqr,QZ,Kqr,Zqr,WZ,ejr,ojr,rjr,s$,tjr,nCe,ajr,njr,sjr,Qt,l$,ljr,sCe,ijr,djr,Wc,cjr,lCe,fjr,mjr,HZ,gjr,hjr,pjr,YC,_jr,Vr,i$,ujr,iCe,bjr,vjr,Fn,Fjr,dCe,Tjr,Mjr,cCe,Ejr,Cjr,fCe,wjr,Ajr,Ljr,mCe,KC,gCe,yjr,xjr,UZ,$jr,kjr,Sjr,ZC,Dze,Hc,e3,hCe,d$,Rjr,pCe,Pjr,Gze,_r,c$,Bjr,Uc,Ijr,JZ,Njr,qjr,YZ,jjr,Djr,Gjr,f$,Ojr,_Ce,Vjr,Xjr,zjr,Wt,m$,Qjr,uCe,Wjr,Hjr,Jc,Ujr,bCe,Jjr,Yjr,KZ,Kjr,Zjr,eDr,o3,oDr,Xr,g$,rDr,vCe,tDr,aDr,Tn,nDr,FCe,sDr,lDr,TCe,iDr,dDr,MCe,cDr,fDr,mDr,oe,r3,ECe,gDr,hDr,ZZ,pDr,_Dr,uDr,t3,CCe,bDr,vDr,eee,FDr,TDr,MDr,a3,wCe,EDr,CDr,oee,wDr,ADr,LDr,n3,ACe,yDr,xDr,ree,$Dr,kDr,SDr,s3,LCe,RDr,PDr,tee,BDr,IDr,NDr,l3,yCe,qDr,jDr,aee,DDr,GDr,ODr,i3,xCe,VDr,XDr,nee,zDr,QDr,WDr,d3,$Ce,HDr,UDr,see,JDr,YDr,KDr,c3,kCe,ZDr,eGr,lee,oGr,rGr,tGr,f3,SCe,aGr,nGr,iee,sGr,lGr,iGr,m3,RCe,dGr,cGr,dee,fGr,mGr,gGr,g3,PCe,hGr,pGr,cee,_Gr,uGr,bGr,h3,BCe,vGr,FGr,fee,TGr,MGr,EGr,p3,ICe,CGr,wGr,mee,AGr,LGr,yGr,_3,NCe,xGr,$Gr,gee,kGr,SGr,RGr,u3,qCe,PGr,BGr,hee,IGr,NGr,qGr,b3,jCe,jGr,DGr,pee,GGr,OGr,VGr,v3,DCe,XGr,zGr,_ee,QGr,WGr,HGr,F3,GCe,UGr,JGr,uee,YGr,KGr,ZGr,T3,OCe,eOr,oOr,bee,rOr,tOr,aOr,M3,VCe,nOr,sOr,vee,lOr,iOr,dOr,E3,XCe,cOr,fOr,Fee,mOr,gOr,hOr,C3,zCe,pOr,_Or,Tee,uOr,bOr,vOr,w3,QCe,FOr,TOr,Mee,MOr,EOr,COr,A3,WCe,wOr,AOr,Eee,LOr,yOr,xOr,L3,HCe,$Or,kOr,Cee,SOr,ROr,POr,y3,UCe,BOr,IOr,wee,NOr,qOr,jOr,x3,Oze,Yc,$3,JCe,h$,DOr,YCe,GOr,Vze,ur,p$,OOr,Kc,VOr,Aee,XOr,zOr,Lee,QOr,WOr,HOr,_$,UOr,KCe,JOr,YOr,KOr,Ht,u$,ZOr,ZCe,eVr,oVr,Zc,rVr,e3e,tVr,aVr,yee,nVr,sVr,lVr,k3,iVr,zr,b$,dVr,o3e,cVr,fVr,Mn,mVr,r3e,gVr,hVr,t3e,pVr,_Vr,a3e,uVr,bVr,vVr,xe,S3,n3e,FVr,TVr,xee,MVr,EVr,CVr,R3,s3e,wVr,AVr,$ee,LVr,yVr,xVr,P3,l3e,$Vr,kVr,kee,SVr,RVr,PVr,B3,i3e,BVr,IVr,See,NVr,qVr,jVr,I3,d3e,DVr,GVr,Ree,OVr,VVr,XVr,N3,c3e,zVr,QVr,Pee,WVr,HVr,UVr,q3,f3e,JVr,YVr,Bee,KVr,ZVr,eXr,j3,m3e,oXr,rXr,Iee,tXr,aXr,nXr,D3,g3e,sXr,lXr,Nee,iXr,dXr,cXr,G3,h3e,fXr,mXr,qee,gXr,hXr,pXr,O3,Xze,ef,V3,p3e,v$,_Xr,_3e,uXr,zze,br,F$,bXr,of,vXr,jee,FXr,TXr,Dee,MXr,EXr,CXr,T$,wXr,u3e,AXr,LXr,yXr,Ut,M$,xXr,b3e,$Xr,kXr,rf,SXr,v3e,RXr,PXr,Gee,BXr,IXr,NXr,X3,qXr,Qr,E$,jXr,F3e,DXr,GXr,En,OXr,T3e,VXr,XXr,M3e,zXr,QXr,E3e,WXr,HXr,UXr,Ee,z3,C3e,JXr,YXr,Oee,KXr,ZXr,ezr,Q3,w3e,ozr,rzr,Vee,tzr,azr,nzr,W3,A3e,szr,lzr,Xee,izr,dzr,czr,H3,L3e,fzr,mzr,zee,gzr,hzr,pzr,U3,y3e,_zr,uzr,Qee,bzr,vzr,Fzr,J3,x3e,Tzr,Mzr,Wee,Ezr,Czr,wzr,Y3,$3e,Azr,Lzr,Hee,yzr,xzr,$zr,K3,k3e,kzr,Szr,Uee,Rzr,Pzr,Bzr,Z3,S3e,Izr,Nzr,Jee,qzr,jzr,Dzr,e5,R3e,Gzr,Ozr,Yee,Vzr,Xzr,zzr,o5,P3e,Qzr,Wzr,Kee,Hzr,Uzr,Jzr,r5,B3e,Yzr,Kzr,Zee,Zzr,eQr,oQr,t5,I3e,rQr,tQr,eoe,aQr,nQr,sQr,a5,Qze,tf,n5,N3e,C$,lQr,q3e,iQr,Wze,vr,w$,dQr,af,cQr,ooe,fQr,mQr,roe,gQr,hQr,pQr,A$,_Qr,j3e,uQr,bQr,vQr,Jt,L$,FQr,D3e,TQr,MQr,nf,EQr,G3e,CQr,wQr,toe,AQr,LQr,yQr,s5,xQr,Wr,y$,$Qr,O3e,kQr,SQr,Cn,RQr,V3e,PQr,BQr,X3e,IQr,NQr,z3e,qQr,jQr,DQr,$e,l5,Q3e,GQr,OQr,aoe,VQr,XQr,zQr,i5,W3e,QQr,WQr,noe,HQr,UQr,JQr,d5,H3e,YQr,KQr,soe,ZQr,eWr,oWr,c5,U3e,rWr,tWr,loe,aWr,nWr,sWr,f5,J3e,lWr,iWr,ioe,dWr,cWr,fWr,m5,Y3e,mWr,gWr,doe,hWr,pWr,_Wr,g5,K3e,uWr,bWr,coe,vWr,FWr,TWr,h5,Z3e,MWr,EWr,foe,CWr,wWr,AWr,p5,e5e,LWr,yWr,moe,xWr,$Wr,kWr,_5,o5e,SWr,RWr,goe,PWr,BWr,IWr,u5,Hze,sf,b5,r5e,x$,NWr,t5e,qWr,Uze,Fr,$$,jWr,lf,DWr,hoe,GWr,OWr,poe,VWr,XWr,zWr,k$,QWr,a5e,WWr,HWr,UWr,Yt,S$,JWr,n5e,YWr,KWr,df,ZWr,s5e,eHr,oHr,_oe,rHr,tHr,aHr,v5,nHr,Hr,R$,sHr,l5e,lHr,iHr,wn,dHr,i5e,cHr,fHr,d5e,mHr,gHr,c5e,hHr,pHr,_Hr,ke,F5,f5e,uHr,bHr,uoe,vHr,FHr,THr,T5,m5e,MHr,EHr,boe,CHr,wHr,AHr,M5,g5e,LHr,yHr,voe,xHr,$Hr,kHr,E5,h5e,SHr,RHr,Foe,PHr,BHr,IHr,C5,p5e,NHr,qHr,Toe,jHr,DHr,GHr,w5,_5e,OHr,VHr,Moe,XHr,zHr,QHr,A5,u5e,WHr,HHr,Eoe,UHr,JHr,YHr,L5,b5e,KHr,ZHr,Coe,eUr,oUr,rUr,y5,v5e,tUr,aUr,woe,nUr,sUr,lUr,x5,F5e,iUr,dUr,Aoe,cUr,fUr,mUr,$5,Jze,cf,k5,T5e,P$,gUr,M5e,hUr,Yze,Tr,B$,pUr,ff,_Ur,Loe,uUr,bUr,yoe,vUr,FUr,TUr,I$,MUr,E5e,EUr,CUr,wUr,Kt,N$,AUr,C5e,LUr,yUr,mf,xUr,w5e,$Ur,kUr,xoe,SUr,RUr,PUr,S5,BUr,Ur,q$,IUr,A5e,NUr,qUr,An,jUr,L5e,DUr,GUr,y5e,OUr,VUr,x5e,XUr,zUr,QUr,Se,R5,$5e,WUr,HUr,$oe,UUr,JUr,YUr,P5,k5e,KUr,ZUr,koe,eJr,oJr,rJr,B5,S5e,tJr,aJr,Soe,nJr,sJr,lJr,I5,R5e,iJr,dJr,Roe,cJr,fJr,mJr,N5,P5e,gJr,hJr,Poe,pJr,_Jr,uJr,q5,B5e,bJr,vJr,Boe,FJr,TJr,MJr,j5,I5e,EJr,CJr,Ioe,wJr,AJr,LJr,D5,N5e,yJr,xJr,Noe,$Jr,kJr,SJr,G5,q5e,RJr,PJr,qoe,BJr,IJr,NJr,O5,j5e,qJr,jJr,joe,DJr,GJr,OJr,V5,Kze,gf,X5,D5e,j$,VJr,G5e,XJr,Zze,Mr,D$,zJr,hf,QJr,Doe,WJr,HJr,Goe,UJr,JJr,YJr,G$,KJr,O5e,ZJr,eYr,oYr,Zt,O$,rYr,V5e,tYr,aYr,pf,nYr,X5e,sYr,lYr,Ooe,iYr,dYr,cYr,z5,fYr,Jr,V$,mYr,z5e,gYr,hYr,Ln,pYr,Q5e,_Yr,uYr,W5e,bYr,vYr,H5e,FYr,TYr,MYr,Re,Q5,U5e,EYr,CYr,Voe,wYr,AYr,LYr,W5,J5e,yYr,xYr,Xoe,$Yr,kYr,SYr,H5,Y5e,RYr,PYr,zoe,BYr,IYr,NYr,U5,K5e,qYr,jYr,Qoe,DYr,GYr,OYr,J5,Z5e,VYr,XYr,Woe,zYr,QYr,WYr,Y5,ewe,HYr,UYr,Hoe,JYr,YYr,KYr,K5,owe,ZYr,eKr,Uoe,oKr,rKr,tKr,Z5,rwe,aKr,nKr,Joe,sKr,lKr,iKr,ew,twe,dKr,cKr,Yoe,fKr,mKr,gKr,ow,awe,hKr,pKr,Koe,_Kr,uKr,bKr,rw,eQe,_f,tw,nwe,X$,vKr,swe,FKr,oQe,Er,z$,TKr,uf,MKr,Zoe,EKr,CKr,ere,wKr,AKr,LKr,Q$,yKr,lwe,xKr,$Kr,kKr,ea,W$,SKr,iwe,RKr,PKr,bf,BKr,dwe,IKr,NKr,ore,qKr,jKr,DKr,aw,GKr,Yr,H$,OKr,cwe,VKr,XKr,yn,zKr,fwe,QKr,WKr,mwe,HKr,UKr,gwe,JKr,YKr,KKr,Xe,nw,hwe,ZKr,eZr,rre,oZr,rZr,tZr,sw,pwe,aZr,nZr,tre,sZr,lZr,iZr,lw,_we,dZr,cZr,are,fZr,mZr,gZr,iw,uwe,hZr,pZr,nre,_Zr,uZr,bZr,dw,bwe,vZr,FZr,sre,TZr,MZr,EZr,cw,vwe,CZr,wZr,lre,AZr,LZr,yZr,fw,Fwe,xZr,$Zr,ire,kZr,SZr,RZr,mw,Twe,PZr,BZr,dre,IZr,NZr,qZr,gw,rQe,vf,hw,Mwe,U$,jZr,Ewe,DZr,tQe,Cr,J$,GZr,Ff,OZr,cre,VZr,XZr,fre,zZr,QZr,WZr,Y$,HZr,Cwe,UZr,JZr,YZr,oa,K$,KZr,wwe,ZZr,eet,Tf,oet,Awe,ret,tet,mre,aet,net,set,pw,iet,Kr,Z$,det,Lwe,cet,fet,xn,met,ywe,get,het,xwe,pet,_et,$we,uet,bet,vet,ze,_w,kwe,Fet,Tet,gre,Met,Eet,Cet,uw,Swe,wet,Aet,hre,Let,yet,xet,bw,Rwe,$et,ket,pre,Set,Ret,Pet,vw,Pwe,Bet,Iet,_re,Net,qet,jet,Fw,Bwe,Det,Get,ure,Oet,Vet,Xet,Tw,Iwe,zet,Qet,bre,Wet,Het,Uet,Mw,Nwe,Jet,Yet,vre,Ket,Zet,eot,Ew,qwe,oot,rot,Fre,tot,aot,not,Cw,aQe,Mf,ww,jwe,ek,sot,Dwe,lot,nQe,wr,ok,iot,Ef,dot,Tre,cot,fot,Mre,mot,got,hot,rk,pot,Gwe,_ot,uot,bot,ra,tk,vot,Owe,Fot,Tot,Cf,Mot,Vwe,Eot,Cot,Ere,wot,Aot,Lot,Aw,yot,Zr,ak,xot,Xwe,$ot,kot,$n,Sot,zwe,Rot,Pot,Qwe,Bot,Iot,Wwe,Not,qot,jot,Hwe,Lw,Uwe,Dot,Got,Cre,Oot,Vot,Xot,yw,sQe,wf,xw,Jwe,nk,zot,Ywe,Qot,lQe,Ar,sk,Wot,Af,Hot,wre,Uot,Jot,Are,Yot,Kot,Zot,lk,ert,Kwe,ort,rrt,trt,ta,ik,art,Zwe,nrt,srt,Lf,lrt,eAe,irt,drt,Lre,crt,frt,mrt,$w,grt,et,dk,hrt,oAe,prt,_rt,kn,urt,rAe,brt,vrt,tAe,Frt,Trt,aAe,Mrt,Ert,Crt,ck,kw,nAe,wrt,Art,yre,Lrt,yrt,xrt,Sw,sAe,$rt,krt,xre,Srt,Rrt,Prt,Rw,iQe,yf,Pw,lAe,fk,Brt,iAe,Irt,dQe,Lr,mk,Nrt,xf,qrt,$re,jrt,Drt,kre,Grt,Ort,Vrt,gk,Xrt,dAe,zrt,Qrt,Wrt,aa,hk,Hrt,cAe,Urt,Jrt,$f,Yrt,fAe,Krt,Zrt,Sre,ett,ott,rtt,Bw,ttt,ot,pk,att,mAe,ntt,stt,Sn,ltt,gAe,itt,dtt,hAe,ctt,ftt,pAe,mtt,gtt,htt,_Ae,Iw,uAe,ptt,_tt,Rre,utt,btt,vtt,Nw,cQe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),sL=new re({}),lL=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),jf=new Ftt({props:{warning:!0,$$slots:{default:[tWt]},$$scope:{ctx:$}}}),iL=new re({}),dL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/configuration_auto.py#L610"}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/configuration_auto.py#L633"}}),Yg=new I({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[aWt]},$$scope:{ctx:$}}}),gL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/configuration_auto.py#L756"}}),hL=new re({}),pL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/tokenization_auto.py#L403"}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17910/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/tokenization_auto.py#L417"}}),Rh=new I({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[nWt]},$$scope:{ctx:$}}}),vL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/tokenization_auto.py#L616"}}),FL=new re({}),TL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17910/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),_p=new Ftt({props:{$$slots:{default:[sWt]},$$scope:{ctx:$}}}),up=new I({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[lWt]},$$scope:{ctx:$}}}),wL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),AL=new re({}),LL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/processing_auto.py#L89"}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/processing_auto.py#L103"}}),qp=new Ftt({props:{$$slots:{default:[iWt]},$$scope:{ctx:$}}}),jp=new I({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[dWt]},$$scope:{ctx:$}}}),kL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/processing_auto.py#L256"}}),SL=new re({}),RL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L782"}}),BL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),Op=new I({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[cWt]},$$scope:{ctx:$}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),Qu=new I({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[fWt]},$$scope:{ctx:$}}}),NL=new re({}),qL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L789"}}),DL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),Hu=new I({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[mWt]},$$scope:{ctx:$}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),G1=new I({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gWt]},$$scope:{ctx:$}}}),OL=new re({}),VL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L804"}}),zL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),V1=new I({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[hWt]},$$scope:{ctx:$}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),k2=new I({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[pWt]},$$scope:{ctx:$}}}),WL=new re({}),HL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L811"}}),JL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),R2=new I({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[_Wt]},$$scope:{ctx:$}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),vb=new I({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[uWt]},$$scope:{ctx:$}}}),KL=new re({}),ZL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L818"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),Tb=new I({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[bWt]},$$scope:{ctx:$}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),Gb=new I({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[vWt]},$$scope:{ctx:$}}}),ty=new re({}),ay=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L827"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),Vb=new I({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[FWt]},$$scope:{ctx:$}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),Gv=new I({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[TWt]},$$scope:{ctx:$}}}),iy=new re({}),dy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L872"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),Vv=new I({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[MWt]},$$scope:{ctx:$}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),T0=new I({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[EWt]},$$scope:{ctx:$}}}),gy=new re({}),hy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L879"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),E0=new I({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[CWt]},$$scope:{ctx:$}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),k0=new I({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[wWt]},$$scope:{ctx:$}}}),by=new re({}),vy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L865"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),R0=new I({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[AWt]},$$scope:{ctx:$}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),uF=new I({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[LWt]},$$scope:{ctx:$}}}),Ey=new re({}),Cy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L836"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),vF=new I({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[yWt]},$$scope:{ctx:$}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),dT=new I({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[xWt]},$$scope:{ctx:$}}}),yy=new re({}),xy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L843"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),fT=new I({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[$Wt]},$$scope:{ctx:$}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),hT=new I({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[kWt]},$$scope:{ctx:$}}}),Ry=new re({}),Py=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L888"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17910/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17910/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17910/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17910/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),_T=new I({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[SWt]},$$scope:{ctx:$}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new I({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),qy=new re({}),jy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L927"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new I({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[PWt]},$$scope:{ctx:$}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new I({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[BWt]},$$scope:{ctx:$}}}),Vy=new re({}),Xy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L854"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new I({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),GT=new I({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[NWt]},$$scope:{ctx:$}}}),Hy=new re({}),Uy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L934"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),VT=new I({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),e7=new I({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),Zy=new re({}),e8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L957"}}),r8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),r7=new I({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[DWt]},$$scope:{ctx:$}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),d7=new I({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),a8=new re({}),n8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L941"}}),l8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),f7=new I({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),E7=new I({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[VWt]},$$scope:{ctx:$}}}),d8=new re({}),c8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L948"}}),m8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),w7=new I({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),x7=new I({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[zWt]},$$scope:{ctx:$}}}),p8=new re({}),_8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L966"}}),b8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),k7=new I({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),q7=new I({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),F8=new re({}),T8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L973"}}),E8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),D7=new I({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),z7=new I({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),w8=new re({}),A8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L920"}}),y8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),W7=new I({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),Y7=new I({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),k8=new re({}),S8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L895"}}),P8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),Z7=new I({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),r9=new I({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),I8=new re({}),N8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L902"}}),j8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),a9=new I({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),f9=new I({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),G8=new re({}),O8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_auto.py#L911"}}),X8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),g9=new I({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),_9=new I({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),Q8=new re({}),W8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),U8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),b9=new I({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),pM=new I({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),Y8=new re({}),K8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new I({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),GM=new I({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),rx=new re({}),tx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),VM=new I({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),t4=new I({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),lx=new re({}),ix=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_17910/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),n4=new I({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),g4=new I({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),mx=new re({}),gx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),p4=new I({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),I4=new I({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),ux=new re({}),bx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),q4=new I({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),U4=new I({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),Mx=new re({}),Ex=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),wx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),Y4=new I({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),CE=new I({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),Lx=new re({}),yx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),$x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),AE=new I({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),XE=new I({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),Sx=new re({}),Rx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),QE=new I({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),UE=new I({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),qx=new re({}),jx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),YE=new I({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),ZE=new I({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),Vx=new re({}),Xx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new I({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new I({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),Hx=new re({}),Ux=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new I({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),zC=new I({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),Zx=new re({}),e$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),r$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),WC=new I({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),t$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),UC=new I({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),a$=new re({}),n$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_tf_auto.py#L547"}}),l$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),YC=new I({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),ZC=new I({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),d$=new re({}),c$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),m$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new I({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),g$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new I({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),h$=new re({}),p$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),u$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),k3=new I({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[PHt]},$$scope:{ctx:$}}}),b$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),O3=new I({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[BHt]},$$scope:{ctx:$}}}),v$=new re({}),F$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),M$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),X3=new I({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),E$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),a5=new I({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[NHt]},$$scope:{ctx:$}}}),C$=new re({}),w$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),L$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),s5=new I({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),y$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),u5=new I({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[jHt]},$$scope:{ctx:$}}}),x$=new re({}),$$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),S$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),v5=new I({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),R$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),$5=new I({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[GHt]},$$scope:{ctx:$}}}),P$=new re({}),B$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),N$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new I({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[OHt]},$$scope:{ctx:$}}}),q$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),V5=new I({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[VHt]},$$scope:{ctx:$}}}),j$=new re({}),D$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),O$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),z5=new I({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[XHt]},$$scope:{ctx:$}}}),V$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),rw=new I({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[zHt]},$$scope:{ctx:$}}}),X$=new re({}),z$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),W$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),aw=new I({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[QHt]},$$scope:{ctx:$}}}),H$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),gw=new I({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[WHt]},$$scope:{ctx:$}}}),U$=new re({}),J$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),K$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),pw=new I({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[HHt]},$$scope:{ctx:$}}}),Z$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),Cw=new I({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[UHt]},$$scope:{ctx:$}}}),ek=new re({}),ok=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),tk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),Aw=new I({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[JHt]},$$scope:{ctx:$}}}),ak=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),yw=new I({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[YHt]},$$scope:{ctx:$}}}),nk=new re({}),sk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),ik=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17910/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),$w=new I({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[KHt]},$$scope:{ctx:$}}}),dk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),Rw=new I({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ZHt]},$$scope:{ctx:$}}}),fk=new re({}),mk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),hk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17910/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17910/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L389"}}),Bw=new I({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[eUt]},$$scope:{ctx:$}}}),pk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/auto/auto_factory.py#L417"}}),Nw=new I({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[oUt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),wo=a("span"),Li=o("Auto Classes"),Pf=l(),lt=a("p"),yi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=a("code"),rL=o("from_pretrained()"),Bf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),$i=o("Instantiating one of "),Pn=a("a"),tL=o("AutoConfig"),Bn=o(", "),In=a("a"),aL=o("AutoModel"),ki=o(`, and
`),Nn=a("a"),nL=o("AutoTokenizer"),Si=o(" will directly create a class of the relevant architecture. For instance"),If=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),NS=o("will create a model that is an instance of "),Ri=a("a"),qS=o("BertModel"),jS=o("."),Ao=l(),Ra=a("p"),DS=o("There is one class of "),Nf=a("code"),GS=o("AutoModel"),FHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),nXe=l(),Pi=a("h2"),qf=a("a"),yae=a("span"),F(sL.$$.fragment),THe=l(),xae=a("span"),MHe=o("Extending the Auto Classes"),sXe=l(),qn=a("p"),EHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),$ae=a("code"),CHe=o("NewModel"),wHe=o(", make sure you have a "),kae=a("code"),AHe=o("NewModelConfig"),LHe=o(` then you can add those to the auto
classes like this:`),lXe=l(),F(lL.$$.fragment),iXe=l(),OS=a("p"),yHe=o("You will then be able to use the auto classes like you would usually do!"),dXe=l(),F(jf.$$.fragment),cXe=l(),Bi=a("h2"),Df=a("a"),Sae=a("span"),F(iL.$$.fragment),xHe=l(),Rae=a("span"),$He=o("AutoConfig"),fXe=l(),Lo=a("div"),F(dL.$$.fragment),kHe=l(),cL=a("p"),SHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),VS=a("a"),RHe=o("from_pretrained()"),PHe=o(" class method."),BHe=l(),fL=a("p"),IHe=o("This class cannot be instantiated directly using "),Pae=a("code"),NHe=o("__init__()"),qHe=o(" (throws an error)."),jHe=l(),yr=a("div"),F(mL.$$.fragment),DHe=l(),Bae=a("p"),GHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),OHe=l(),Ii=a("p"),VHe=o("The configuration class to instantiate is selected based on the "),Iae=a("code"),XHe=o("model_type"),zHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Nae=a("code"),QHe=o("pretrained_model_name_or_path"),WHe=o(":"),HHe=l(),A=a("ul"),Gf=a("li"),qae=a("strong"),UHe=o("albert"),JHe=o(" \u2014 "),XS=a("a"),YHe=o("AlbertConfig"),KHe=o(" (ALBERT model)"),ZHe=l(),Of=a("li"),jae=a("strong"),eUe=o("bart"),oUe=o(" \u2014 "),zS=a("a"),rUe=o("BartConfig"),tUe=o(" (BART model)"),aUe=l(),Vf=a("li"),Dae=a("strong"),nUe=o("beit"),sUe=o(" \u2014 "),QS=a("a"),lUe=o("BeitConfig"),iUe=o(" (BEiT model)"),dUe=l(),Xf=a("li"),Gae=a("strong"),cUe=o("bert"),fUe=o(" \u2014 "),WS=a("a"),mUe=o("BertConfig"),gUe=o(" (BERT model)"),hUe=l(),zf=a("li"),Oae=a("strong"),pUe=o("bert-generation"),_Ue=o(" \u2014 "),HS=a("a"),uUe=o("BertGenerationConfig"),bUe=o(" (Bert Generation model)"),vUe=l(),Qf=a("li"),Vae=a("strong"),FUe=o("big_bird"),TUe=o(" \u2014 "),US=a("a"),MUe=o("BigBirdConfig"),EUe=o(" (BigBird model)"),CUe=l(),Wf=a("li"),Xae=a("strong"),wUe=o("bigbird_pegasus"),AUe=o(" \u2014 "),JS=a("a"),LUe=o("BigBirdPegasusConfig"),yUe=o(" (BigBird-Pegasus model)"),xUe=l(),Hf=a("li"),zae=a("strong"),$Ue=o("blenderbot"),kUe=o(" \u2014 "),YS=a("a"),SUe=o("BlenderbotConfig"),RUe=o(" (Blenderbot model)"),PUe=l(),Uf=a("li"),Qae=a("strong"),BUe=o("blenderbot-small"),IUe=o(" \u2014 "),KS=a("a"),NUe=o("BlenderbotSmallConfig"),qUe=o(" (BlenderbotSmall model)"),jUe=l(),Jf=a("li"),Wae=a("strong"),DUe=o("bloom"),GUe=o(" \u2014 "),ZS=a("a"),OUe=o("BloomConfig"),VUe=o(" (BLOOM model)"),XUe=l(),Yf=a("li"),Hae=a("strong"),zUe=o("camembert"),QUe=o(" \u2014 "),eR=a("a"),WUe=o("CamembertConfig"),HUe=o(" (CamemBERT model)"),UUe=l(),Kf=a("li"),Uae=a("strong"),JUe=o("canine"),YUe=o(" \u2014 "),oR=a("a"),KUe=o("CanineConfig"),ZUe=o(" (CANINE model)"),eJe=l(),Zf=a("li"),Jae=a("strong"),oJe=o("clip"),rJe=o(" \u2014 "),rR=a("a"),tJe=o("CLIPConfig"),aJe=o(" (CLIP model)"),nJe=l(),em=a("li"),Yae=a("strong"),sJe=o("codegen"),lJe=o(" \u2014 "),tR=a("a"),iJe=o("CodeGenConfig"),dJe=o(" (CodeGen model)"),cJe=l(),om=a("li"),Kae=a("strong"),fJe=o("convbert"),mJe=o(" \u2014 "),aR=a("a"),gJe=o("ConvBertConfig"),hJe=o(" (ConvBERT model)"),pJe=l(),rm=a("li"),Zae=a("strong"),_Je=o("convnext"),uJe=o(" \u2014 "),nR=a("a"),bJe=o("ConvNextConfig"),vJe=o(" (ConvNeXT model)"),FJe=l(),tm=a("li"),ene=a("strong"),TJe=o("ctrl"),MJe=o(" \u2014 "),sR=a("a"),EJe=o("CTRLConfig"),CJe=o(" (CTRL model)"),wJe=l(),am=a("li"),one=a("strong"),AJe=o("cvt"),LJe=o(" \u2014 "),lR=a("a"),yJe=o("CvtConfig"),xJe=o(" (CvT model)"),$Je=l(),nm=a("li"),rne=a("strong"),kJe=o("data2vec-audio"),SJe=o(" \u2014 "),iR=a("a"),RJe=o("Data2VecAudioConfig"),PJe=o(" (Data2VecAudio model)"),BJe=l(),sm=a("li"),tne=a("strong"),IJe=o("data2vec-text"),NJe=o(" \u2014 "),dR=a("a"),qJe=o("Data2VecTextConfig"),jJe=o(" (Data2VecText model)"),DJe=l(),lm=a("li"),ane=a("strong"),GJe=o("data2vec-vision"),OJe=o(" \u2014 "),cR=a("a"),VJe=o("Data2VecVisionConfig"),XJe=o(" (Data2VecVision model)"),zJe=l(),im=a("li"),nne=a("strong"),QJe=o("deberta"),WJe=o(" \u2014 "),fR=a("a"),HJe=o("DebertaConfig"),UJe=o(" (DeBERTa model)"),JJe=l(),dm=a("li"),sne=a("strong"),YJe=o("deberta-v2"),KJe=o(" \u2014 "),mR=a("a"),ZJe=o("DebertaV2Config"),eYe=o(" (DeBERTa-v2 model)"),oYe=l(),cm=a("li"),lne=a("strong"),rYe=o("decision_transformer"),tYe=o(" \u2014 "),gR=a("a"),aYe=o("DecisionTransformerConfig"),nYe=o(" (Decision Transformer model)"),sYe=l(),fm=a("li"),ine=a("strong"),lYe=o("deit"),iYe=o(" \u2014 "),hR=a("a"),dYe=o("DeiTConfig"),cYe=o(" (DeiT model)"),fYe=l(),mm=a("li"),dne=a("strong"),mYe=o("detr"),gYe=o(" \u2014 "),pR=a("a"),hYe=o("DetrConfig"),pYe=o(" (DETR model)"),_Ye=l(),gm=a("li"),cne=a("strong"),uYe=o("distilbert"),bYe=o(" \u2014 "),_R=a("a"),vYe=o("DistilBertConfig"),FYe=o(" (DistilBERT model)"),TYe=l(),hm=a("li"),fne=a("strong"),MYe=o("dpr"),EYe=o(" \u2014 "),uR=a("a"),CYe=o("DPRConfig"),wYe=o(" (DPR model)"),AYe=l(),pm=a("li"),mne=a("strong"),LYe=o("dpt"),yYe=o(" \u2014 "),bR=a("a"),xYe=o("DPTConfig"),$Ye=o(" (DPT model)"),kYe=l(),_m=a("li"),gne=a("strong"),SYe=o("electra"),RYe=o(" \u2014 "),vR=a("a"),PYe=o("ElectraConfig"),BYe=o(" (ELECTRA model)"),IYe=l(),um=a("li"),hne=a("strong"),NYe=o("encoder-decoder"),qYe=o(" \u2014 "),FR=a("a"),jYe=o("EncoderDecoderConfig"),DYe=o(" (Encoder decoder model)"),GYe=l(),bm=a("li"),pne=a("strong"),OYe=o("flaubert"),VYe=o(" \u2014 "),TR=a("a"),XYe=o("FlaubertConfig"),zYe=o(" (FlauBERT model)"),QYe=l(),vm=a("li"),_ne=a("strong"),WYe=o("flava"),HYe=o(" \u2014 "),MR=a("a"),UYe=o("FlavaConfig"),JYe=o(" (FLAVA model)"),YYe=l(),Fm=a("li"),une=a("strong"),KYe=o("fnet"),ZYe=o(" \u2014 "),ER=a("a"),eKe=o("FNetConfig"),oKe=o(" (FNet model)"),rKe=l(),Tm=a("li"),bne=a("strong"),tKe=o("fsmt"),aKe=o(" \u2014 "),CR=a("a"),nKe=o("FSMTConfig"),sKe=o(" (FairSeq Machine-Translation model)"),lKe=l(),Mm=a("li"),vne=a("strong"),iKe=o("funnel"),dKe=o(" \u2014 "),wR=a("a"),cKe=o("FunnelConfig"),fKe=o(" (Funnel Transformer model)"),mKe=l(),Em=a("li"),Fne=a("strong"),gKe=o("glpn"),hKe=o(" \u2014 "),AR=a("a"),pKe=o("GLPNConfig"),_Ke=o(" (GLPN model)"),uKe=l(),Cm=a("li"),Tne=a("strong"),bKe=o("gpt2"),vKe=o(" \u2014 "),LR=a("a"),FKe=o("GPT2Config"),TKe=o(" (OpenAI GPT-2 model)"),MKe=l(),wm=a("li"),Mne=a("strong"),EKe=o("gpt_neo"),CKe=o(" \u2014 "),yR=a("a"),wKe=o("GPTNeoConfig"),AKe=o(" (GPT Neo model)"),LKe=l(),Am=a("li"),Ene=a("strong"),yKe=o("gpt_neox"),xKe=o(" \u2014 "),xR=a("a"),$Ke=o("GPTNeoXConfig"),kKe=o(" (GPT NeoX model)"),SKe=l(),Lm=a("li"),Cne=a("strong"),RKe=o("gptj"),PKe=o(" \u2014 "),$R=a("a"),BKe=o("GPTJConfig"),IKe=o(" (GPT-J model)"),NKe=l(),ym=a("li"),wne=a("strong"),qKe=o("groupvit"),jKe=o(" \u2014 "),kR=a("a"),DKe=o("GroupViTConfig"),GKe=o(" (GroupViT model)"),OKe=l(),xm=a("li"),Ane=a("strong"),VKe=o("hubert"),XKe=o(" \u2014 "),SR=a("a"),zKe=o("HubertConfig"),QKe=o(" (Hubert model)"),WKe=l(),$m=a("li"),Lne=a("strong"),HKe=o("ibert"),UKe=o(" \u2014 "),RR=a("a"),JKe=o("IBertConfig"),YKe=o(" (I-BERT model)"),KKe=l(),km=a("li"),yne=a("strong"),ZKe=o("imagegpt"),eZe=o(" \u2014 "),PR=a("a"),oZe=o("ImageGPTConfig"),rZe=o(" (ImageGPT model)"),tZe=l(),Sm=a("li"),xne=a("strong"),aZe=o("layoutlm"),nZe=o(" \u2014 "),BR=a("a"),sZe=o("LayoutLMConfig"),lZe=o(" (LayoutLM model)"),iZe=l(),Rm=a("li"),$ne=a("strong"),dZe=o("layoutlmv2"),cZe=o(" \u2014 "),IR=a("a"),fZe=o("LayoutLMv2Config"),mZe=o(" (LayoutLMv2 model)"),gZe=l(),Pm=a("li"),kne=a("strong"),hZe=o("layoutlmv3"),pZe=o(" \u2014 "),NR=a("a"),_Ze=o("LayoutLMv3Config"),uZe=o(" (LayoutLMv3 model)"),bZe=l(),Bm=a("li"),Sne=a("strong"),vZe=o("led"),FZe=o(" \u2014 "),qR=a("a"),TZe=o("LEDConfig"),MZe=o(" (LED model)"),EZe=l(),Im=a("li"),Rne=a("strong"),CZe=o("levit"),wZe=o(" \u2014 "),jR=a("a"),AZe=o("LevitConfig"),LZe=o(" (LeViT model)"),yZe=l(),Nm=a("li"),Pne=a("strong"),xZe=o("longformer"),$Ze=o(" \u2014 "),DR=a("a"),kZe=o("LongformerConfig"),SZe=o(" (Longformer model)"),RZe=l(),qm=a("li"),Bne=a("strong"),PZe=o("longt5"),BZe=o(" \u2014 "),GR=a("a"),IZe=o("LongT5Config"),NZe=o(" (LongT5 model)"),qZe=l(),jm=a("li"),Ine=a("strong"),jZe=o("luke"),DZe=o(" \u2014 "),OR=a("a"),GZe=o("LukeConfig"),OZe=o(" (LUKE model)"),VZe=l(),Dm=a("li"),Nne=a("strong"),XZe=o("lxmert"),zZe=o(" \u2014 "),VR=a("a"),QZe=o("LxmertConfig"),WZe=o(" (LXMERT model)"),HZe=l(),Gm=a("li"),qne=a("strong"),UZe=o("m2m_100"),JZe=o(" \u2014 "),XR=a("a"),YZe=o("M2M100Config"),KZe=o(" (M2M100 model)"),ZZe=l(),Om=a("li"),jne=a("strong"),eeo=o("marian"),oeo=o(" \u2014 "),zR=a("a"),reo=o("MarianConfig"),teo=o(" (Marian model)"),aeo=l(),Vm=a("li"),Dne=a("strong"),neo=o("maskformer"),seo=o(" \u2014 "),QR=a("a"),leo=o("MaskFormerConfig"),ieo=o(" (MaskFormer model)"),deo=l(),Xm=a("li"),Gne=a("strong"),ceo=o("mbart"),feo=o(" \u2014 "),WR=a("a"),meo=o("MBartConfig"),geo=o(" (mBART model)"),heo=l(),zm=a("li"),One=a("strong"),peo=o("mctct"),_eo=o(" \u2014 "),HR=a("a"),ueo=o("MCTCTConfig"),beo=o(" (M-CTC-T model)"),veo=l(),Qm=a("li"),Vne=a("strong"),Feo=o("megatron-bert"),Teo=o(" \u2014 "),UR=a("a"),Meo=o("MegatronBertConfig"),Eeo=o(" (Megatron-BERT model)"),Ceo=l(),Wm=a("li"),Xne=a("strong"),weo=o("mobilebert"),Aeo=o(" \u2014 "),JR=a("a"),Leo=o("MobileBertConfig"),yeo=o(" (MobileBERT model)"),xeo=l(),Hm=a("li"),zne=a("strong"),$eo=o("mobilevit"),keo=o(" \u2014 "),YR=a("a"),Seo=o("MobileViTConfig"),Reo=o(" (MobileViT model)"),Peo=l(),Um=a("li"),Qne=a("strong"),Beo=o("mpnet"),Ieo=o(" \u2014 "),KR=a("a"),Neo=o("MPNetConfig"),qeo=o(" (MPNet model)"),jeo=l(),Jm=a("li"),Wne=a("strong"),Deo=o("mt5"),Geo=o(" \u2014 "),ZR=a("a"),Oeo=o("MT5Config"),Veo=o(" (MT5 model)"),Xeo=l(),Ym=a("li"),Hne=a("strong"),zeo=o("mvp"),Qeo=o(" \u2014 "),eP=a("a"),Weo=o("MvpConfig"),Heo=o(" (MVP model)"),Ueo=l(),Km=a("li"),Une=a("strong"),Jeo=o("nezha"),Yeo=o(" \u2014 "),oP=a("a"),Keo=o("NezhaConfig"),Zeo=o(" (Nezha model)"),eoo=l(),Zm=a("li"),Jne=a("strong"),ooo=o("nystromformer"),roo=o(" \u2014 "),rP=a("a"),too=o("NystromformerConfig"),aoo=o(" (Nystr\xF6mformer model)"),noo=l(),eg=a("li"),Yne=a("strong"),soo=o("openai-gpt"),loo=o(" \u2014 "),tP=a("a"),ioo=o("OpenAIGPTConfig"),doo=o(" (OpenAI GPT model)"),coo=l(),og=a("li"),Kne=a("strong"),foo=o("opt"),moo=o(" \u2014 "),aP=a("a"),goo=o("OPTConfig"),hoo=o(" (OPT model)"),poo=l(),rg=a("li"),Zne=a("strong"),_oo=o("pegasus"),uoo=o(" \u2014 "),nP=a("a"),boo=o("PegasusConfig"),voo=o(" (Pegasus model)"),Foo=l(),tg=a("li"),ese=a("strong"),Too=o("perceiver"),Moo=o(" \u2014 "),sP=a("a"),Eoo=o("PerceiverConfig"),Coo=o(" (Perceiver model)"),woo=l(),ag=a("li"),ose=a("strong"),Aoo=o("plbart"),Loo=o(" \u2014 "),lP=a("a"),yoo=o("PLBartConfig"),xoo=o(" (PLBart model)"),$oo=l(),ng=a("li"),rse=a("strong"),koo=o("poolformer"),Soo=o(" \u2014 "),iP=a("a"),Roo=o("PoolFormerConfig"),Poo=o(" (PoolFormer model)"),Boo=l(),sg=a("li"),tse=a("strong"),Ioo=o("prophetnet"),Noo=o(" \u2014 "),dP=a("a"),qoo=o("ProphetNetConfig"),joo=o(" (ProphetNet model)"),Doo=l(),lg=a("li"),ase=a("strong"),Goo=o("qdqbert"),Ooo=o(" \u2014 "),cP=a("a"),Voo=o("QDQBertConfig"),Xoo=o(" (QDQBert model)"),zoo=l(),ig=a("li"),nse=a("strong"),Qoo=o("rag"),Woo=o(" \u2014 "),fP=a("a"),Hoo=o("RagConfig"),Uoo=o(" (RAG model)"),Joo=l(),dg=a("li"),sse=a("strong"),Yoo=o("realm"),Koo=o(" \u2014 "),mP=a("a"),Zoo=o("RealmConfig"),ero=o(" (REALM model)"),oro=l(),cg=a("li"),lse=a("strong"),rro=o("reformer"),tro=o(" \u2014 "),gP=a("a"),aro=o("ReformerConfig"),nro=o(" (Reformer model)"),sro=l(),fg=a("li"),ise=a("strong"),lro=o("regnet"),iro=o(" \u2014 "),hP=a("a"),dro=o("RegNetConfig"),cro=o(" (RegNet model)"),fro=l(),mg=a("li"),dse=a("strong"),mro=o("rembert"),gro=o(" \u2014 "),pP=a("a"),hro=o("RemBertConfig"),pro=o(" (RemBERT model)"),_ro=l(),gg=a("li"),cse=a("strong"),uro=o("resnet"),bro=o(" \u2014 "),_P=a("a"),vro=o("ResNetConfig"),Fro=o(" (ResNet model)"),Tro=l(),hg=a("li"),fse=a("strong"),Mro=o("retribert"),Ero=o(" \u2014 "),uP=a("a"),Cro=o("RetriBertConfig"),wro=o(" (RetriBERT model)"),Aro=l(),pg=a("li"),mse=a("strong"),Lro=o("roberta"),yro=o(" \u2014 "),bP=a("a"),xro=o("RobertaConfig"),$ro=o(" (RoBERTa model)"),kro=l(),_g=a("li"),gse=a("strong"),Sro=o("roformer"),Rro=o(" \u2014 "),vP=a("a"),Pro=o("RoFormerConfig"),Bro=o(" (RoFormer model)"),Iro=l(),ug=a("li"),hse=a("strong"),Nro=o("segformer"),qro=o(" \u2014 "),FP=a("a"),jro=o("SegformerConfig"),Dro=o(" (SegFormer model)"),Gro=l(),bg=a("li"),pse=a("strong"),Oro=o("sew"),Vro=o(" \u2014 "),TP=a("a"),Xro=o("SEWConfig"),zro=o(" (SEW model)"),Qro=l(),vg=a("li"),_se=a("strong"),Wro=o("sew-d"),Hro=o(" \u2014 "),MP=a("a"),Uro=o("SEWDConfig"),Jro=o(" (SEW-D model)"),Yro=l(),Fg=a("li"),use=a("strong"),Kro=o("speech-encoder-decoder"),Zro=o(" \u2014 "),EP=a("a"),eto=o("SpeechEncoderDecoderConfig"),oto=o(" (Speech Encoder decoder model)"),rto=l(),Tg=a("li"),bse=a("strong"),tto=o("speech_to_text"),ato=o(" \u2014 "),CP=a("a"),nto=o("Speech2TextConfig"),sto=o(" (Speech2Text model)"),lto=l(),Mg=a("li"),vse=a("strong"),ito=o("speech_to_text_2"),dto=o(" \u2014 "),wP=a("a"),cto=o("Speech2Text2Config"),fto=o(" (Speech2Text2 model)"),mto=l(),Eg=a("li"),Fse=a("strong"),gto=o("splinter"),hto=o(" \u2014 "),AP=a("a"),pto=o("SplinterConfig"),_to=o(" (Splinter model)"),uto=l(),Cg=a("li"),Tse=a("strong"),bto=o("squeezebert"),vto=o(" \u2014 "),LP=a("a"),Fto=o("SqueezeBertConfig"),Tto=o(" (SqueezeBERT model)"),Mto=l(),wg=a("li"),Mse=a("strong"),Eto=o("swin"),Cto=o(" \u2014 "),yP=a("a"),wto=o("SwinConfig"),Ato=o(" (Swin Transformer model)"),Lto=l(),Ag=a("li"),Ese=a("strong"),yto=o("t5"),xto=o(" \u2014 "),xP=a("a"),$to=o("T5Config"),kto=o(" (T5 model)"),Sto=l(),Lg=a("li"),Cse=a("strong"),Rto=o("tapas"),Pto=o(" \u2014 "),$P=a("a"),Bto=o("TapasConfig"),Ito=o(" (TAPAS model)"),Nto=l(),yg=a("li"),wse=a("strong"),qto=o("trajectory_transformer"),jto=o(" \u2014 "),kP=a("a"),Dto=o("TrajectoryTransformerConfig"),Gto=o(" (Trajectory Transformer model)"),Oto=l(),xg=a("li"),Ase=a("strong"),Vto=o("transfo-xl"),Xto=o(" \u2014 "),SP=a("a"),zto=o("TransfoXLConfig"),Qto=o(" (Transformer-XL model)"),Wto=l(),$g=a("li"),Lse=a("strong"),Hto=o("trocr"),Uto=o(" \u2014 "),RP=a("a"),Jto=o("TrOCRConfig"),Yto=o(" (TrOCR model)"),Kto=l(),kg=a("li"),yse=a("strong"),Zto=o("unispeech"),eao=o(" \u2014 "),PP=a("a"),oao=o("UniSpeechConfig"),rao=o(" (UniSpeech model)"),tao=l(),Sg=a("li"),xse=a("strong"),aao=o("unispeech-sat"),nao=o(" \u2014 "),BP=a("a"),sao=o("UniSpeechSatConfig"),lao=o(" (UniSpeechSat model)"),iao=l(),Rg=a("li"),$se=a("strong"),dao=o("van"),cao=o(" \u2014 "),IP=a("a"),fao=o("VanConfig"),mao=o(" (VAN model)"),gao=l(),Pg=a("li"),kse=a("strong"),hao=o("vilt"),pao=o(" \u2014 "),NP=a("a"),_ao=o("ViltConfig"),uao=o(" (ViLT model)"),bao=l(),Bg=a("li"),Sse=a("strong"),vao=o("vision-encoder-decoder"),Fao=o(" \u2014 "),qP=a("a"),Tao=o("VisionEncoderDecoderConfig"),Mao=o(" (Vision Encoder decoder model)"),Eao=l(),Ig=a("li"),Rse=a("strong"),Cao=o("vision-text-dual-encoder"),wao=o(" \u2014 "),jP=a("a"),Aao=o("VisionTextDualEncoderConfig"),Lao=o(" (VisionTextDualEncoder model)"),yao=l(),Ng=a("li"),Pse=a("strong"),xao=o("visual_bert"),$ao=o(" \u2014 "),DP=a("a"),kao=o("VisualBertConfig"),Sao=o(" (VisualBERT model)"),Rao=l(),qg=a("li"),Bse=a("strong"),Pao=o("vit"),Bao=o(" \u2014 "),GP=a("a"),Iao=o("ViTConfig"),Nao=o(" (ViT model)"),qao=l(),jg=a("li"),Ise=a("strong"),jao=o("vit_mae"),Dao=o(" \u2014 "),OP=a("a"),Gao=o("ViTMAEConfig"),Oao=o(" (ViTMAE model)"),Vao=l(),Dg=a("li"),Nse=a("strong"),Xao=o("wav2vec2"),zao=o(" \u2014 "),VP=a("a"),Qao=o("Wav2Vec2Config"),Wao=o(" (Wav2Vec2 model)"),Hao=l(),Gg=a("li"),qse=a("strong"),Uao=o("wav2vec2-conformer"),Jao=o(" \u2014 "),XP=a("a"),Yao=o("Wav2Vec2ConformerConfig"),Kao=o(" (Wav2Vec2-Conformer model)"),Zao=l(),Og=a("li"),jse=a("strong"),eno=o("wavlm"),ono=o(" \u2014 "),zP=a("a"),rno=o("WavLMConfig"),tno=o(" (WavLM model)"),ano=l(),Vg=a("li"),Dse=a("strong"),nno=o("xglm"),sno=o(" \u2014 "),QP=a("a"),lno=o("XGLMConfig"),ino=o(" (XGLM model)"),dno=l(),Xg=a("li"),Gse=a("strong"),cno=o("xlm"),fno=o(" \u2014 "),WP=a("a"),mno=o("XLMConfig"),gno=o(" (XLM model)"),hno=l(),zg=a("li"),Ose=a("strong"),pno=o("xlm-prophetnet"),_no=o(" \u2014 "),HP=a("a"),uno=o("XLMProphetNetConfig"),bno=o(" (XLM-ProphetNet model)"),vno=l(),Qg=a("li"),Vse=a("strong"),Fno=o("xlm-roberta"),Tno=o(" \u2014 "),UP=a("a"),Mno=o("XLMRobertaConfig"),Eno=o(" (XLM-RoBERTa model)"),Cno=l(),Wg=a("li"),Xse=a("strong"),wno=o("xlm-roberta-xl"),Ano=o(" \u2014 "),JP=a("a"),Lno=o("XLMRobertaXLConfig"),yno=o(" (XLM-RoBERTa-XL model)"),xno=l(),Hg=a("li"),zse=a("strong"),$no=o("xlnet"),kno=o(" \u2014 "),YP=a("a"),Sno=o("XLNetConfig"),Rno=o(" (XLNet model)"),Pno=l(),Ug=a("li"),Qse=a("strong"),Bno=o("yolos"),Ino=o(" \u2014 "),KP=a("a"),Nno=o("YolosConfig"),qno=o(" (YOLOS model)"),jno=l(),Jg=a("li"),Wse=a("strong"),Dno=o("yoso"),Gno=o(" \u2014 "),ZP=a("a"),Ono=o("YosoConfig"),Vno=o(" (YOSO model)"),Xno=l(),F(Yg.$$.fragment),zno=l(),Kg=a("div"),F(gL.$$.fragment),Qno=l(),Hse=a("p"),Wno=o("Register a new configuration for this class."),mXe=l(),Ni=a("h2"),Zg=a("a"),Use=a("span"),F(hL.$$.fragment),Hno=l(),Jse=a("span"),Uno=o("AutoTokenizer"),gXe=l(),yo=a("div"),F(pL.$$.fragment),Jno=l(),_L=a("p"),Yno=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),eB=a("a"),Kno=o("AutoTokenizer.from_pretrained()"),Zno=o(" class method."),eso=l(),uL=a("p"),oso=o("This class cannot be instantiated directly using "),Yse=a("code"),rso=o("__init__()"),tso=o(" (throws an error)."),aso=l(),xr=a("div"),F(bL.$$.fragment),nso=l(),Kse=a("p"),sso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),lso=l(),Pa=a("p"),iso=o("The tokenizer class to instantiate is selected based on the "),Zse=a("code"),dso=o("model_type"),cso=o(` property of the config object (either
passed as an argument or loaded from `),ele=a("code"),fso=o("pretrained_model_name_or_path"),mso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ole=a("code"),gso=o("pretrained_model_name_or_path"),hso=o(":"),pso=l(),k=a("ul"),jn=a("li"),rle=a("strong"),_so=o("albert"),uso=o(" \u2014 "),oB=a("a"),bso=o("AlbertTokenizer"),vso=o(" or "),rB=a("a"),Fso=o("AlbertTokenizerFast"),Tso=o(" (ALBERT model)"),Mso=l(),Dn=a("li"),tle=a("strong"),Eso=o("bart"),Cso=o(" \u2014 "),tB=a("a"),wso=o("BartTokenizer"),Aso=o(" or "),aB=a("a"),Lso=o("BartTokenizerFast"),yso=o(" (BART model)"),xso=l(),Gn=a("li"),ale=a("strong"),$so=o("barthez"),kso=o(" \u2014 "),nB=a("a"),Sso=o("BarthezTokenizer"),Rso=o(" or "),sB=a("a"),Pso=o("BarthezTokenizerFast"),Bso=o(" (BARThez model)"),Iso=l(),eh=a("li"),nle=a("strong"),Nso=o("bartpho"),qso=o(" \u2014 "),lB=a("a"),jso=o("BartphoTokenizer"),Dso=o(" (BARTpho model)"),Gso=l(),On=a("li"),sle=a("strong"),Oso=o("bert"),Vso=o(" \u2014 "),iB=a("a"),Xso=o("BertTokenizer"),zso=o(" or "),dB=a("a"),Qso=o("BertTokenizerFast"),Wso=o(" (BERT model)"),Hso=l(),oh=a("li"),lle=a("strong"),Uso=o("bert-generation"),Jso=o(" \u2014 "),cB=a("a"),Yso=o("BertGenerationTokenizer"),Kso=o(" (Bert Generation model)"),Zso=l(),rh=a("li"),ile=a("strong"),elo=o("bert-japanese"),olo=o(" \u2014 "),fB=a("a"),rlo=o("BertJapaneseTokenizer"),tlo=o(" (BertJapanese model)"),alo=l(),th=a("li"),dle=a("strong"),nlo=o("bertweet"),slo=o(" \u2014 "),mB=a("a"),llo=o("BertweetTokenizer"),ilo=o(" (BERTweet model)"),dlo=l(),Vn=a("li"),cle=a("strong"),clo=o("big_bird"),flo=o(" \u2014 "),gB=a("a"),mlo=o("BigBirdTokenizer"),glo=o(" or "),hB=a("a"),hlo=o("BigBirdTokenizerFast"),plo=o(" (BigBird model)"),_lo=l(),Xn=a("li"),fle=a("strong"),ulo=o("bigbird_pegasus"),blo=o(" \u2014 "),pB=a("a"),vlo=o("PegasusTokenizer"),Flo=o(" or "),_B=a("a"),Tlo=o("PegasusTokenizerFast"),Mlo=o(" (BigBird-Pegasus model)"),Elo=l(),zn=a("li"),mle=a("strong"),Clo=o("blenderbot"),wlo=o(" \u2014 "),uB=a("a"),Alo=o("BlenderbotTokenizer"),Llo=o(" or "),bB=a("a"),ylo=o("BlenderbotTokenizerFast"),xlo=o(" (Blenderbot model)"),$lo=l(),ah=a("li"),gle=a("strong"),klo=o("blenderbot-small"),Slo=o(" \u2014 "),vB=a("a"),Rlo=o("BlenderbotSmallTokenizer"),Plo=o(" (BlenderbotSmall model)"),Blo=l(),nh=a("li"),hle=a("strong"),Ilo=o("bloom"),Nlo=o(" \u2014 "),FB=a("a"),qlo=o("BloomTokenizerFast"),jlo=o(" (BLOOM model)"),Dlo=l(),sh=a("li"),ple=a("strong"),Glo=o("byt5"),Olo=o(" \u2014 "),TB=a("a"),Vlo=o("ByT5Tokenizer"),Xlo=o(" (ByT5 model)"),zlo=l(),Qn=a("li"),_le=a("strong"),Qlo=o("camembert"),Wlo=o(" \u2014 "),MB=a("a"),Hlo=o("CamembertTokenizer"),Ulo=o(" or "),EB=a("a"),Jlo=o("CamembertTokenizerFast"),Ylo=o(" (CamemBERT model)"),Klo=l(),lh=a("li"),ule=a("strong"),Zlo=o("canine"),eio=o(" \u2014 "),CB=a("a"),oio=o("CanineTokenizer"),rio=o(" (CANINE model)"),tio=l(),Wn=a("li"),ble=a("strong"),aio=o("clip"),nio=o(" \u2014 "),wB=a("a"),sio=o("CLIPTokenizer"),lio=o(" or "),AB=a("a"),iio=o("CLIPTokenizerFast"),dio=o(" (CLIP model)"),cio=l(),Hn=a("li"),vle=a("strong"),fio=o("codegen"),mio=o(" \u2014 "),LB=a("a"),gio=o("CodeGenTokenizer"),hio=o(" or "),yB=a("a"),pio=o("CodeGenTokenizerFast"),_io=o(" (CodeGen model)"),uio=l(),Un=a("li"),Fle=a("strong"),bio=o("convbert"),vio=o(" \u2014 "),xB=a("a"),Fio=o("ConvBertTokenizer"),Tio=o(" or "),$B=a("a"),Mio=o("ConvBertTokenizerFast"),Eio=o(" (ConvBERT model)"),Cio=l(),Jn=a("li"),Tle=a("strong"),wio=o("cpm"),Aio=o(" \u2014 "),kB=a("a"),Lio=o("CpmTokenizer"),yio=o(" or "),SB=a("a"),xio=o("CpmTokenizerFast"),$io=o(" (CPM model)"),kio=l(),ih=a("li"),Mle=a("strong"),Sio=o("ctrl"),Rio=o(" \u2014 "),RB=a("a"),Pio=o("CTRLTokenizer"),Bio=o(" (CTRL model)"),Iio=l(),Yn=a("li"),Ele=a("strong"),Nio=o("data2vec-text"),qio=o(" \u2014 "),PB=a("a"),jio=o("RobertaTokenizer"),Dio=o(" or "),BB=a("a"),Gio=o("RobertaTokenizerFast"),Oio=o(" (Data2VecText model)"),Vio=l(),Kn=a("li"),Cle=a("strong"),Xio=o("deberta"),zio=o(" \u2014 "),IB=a("a"),Qio=o("DebertaTokenizer"),Wio=o(" or "),NB=a("a"),Hio=o("DebertaTokenizerFast"),Uio=o(" (DeBERTa model)"),Jio=l(),Zn=a("li"),wle=a("strong"),Yio=o("deberta-v2"),Kio=o(" \u2014 "),qB=a("a"),Zio=o("DebertaV2Tokenizer"),edo=o(" or "),jB=a("a"),odo=o("DebertaV2TokenizerFast"),rdo=o(" (DeBERTa-v2 model)"),tdo=l(),es=a("li"),Ale=a("strong"),ado=o("distilbert"),ndo=o(" \u2014 "),DB=a("a"),sdo=o("DistilBertTokenizer"),ldo=o(" or "),GB=a("a"),ido=o("DistilBertTokenizerFast"),ddo=o(" (DistilBERT model)"),cdo=l(),os=a("li"),Lle=a("strong"),fdo=o("dpr"),mdo=o(" \u2014 "),OB=a("a"),gdo=o("DPRQuestionEncoderTokenizer"),hdo=o(" or "),VB=a("a"),pdo=o("DPRQuestionEncoderTokenizerFast"),_do=o(" (DPR model)"),udo=l(),rs=a("li"),yle=a("strong"),bdo=o("electra"),vdo=o(" \u2014 "),XB=a("a"),Fdo=o("ElectraTokenizer"),Tdo=o(" or "),zB=a("a"),Mdo=o("ElectraTokenizerFast"),Edo=o(" (ELECTRA model)"),Cdo=l(),dh=a("li"),xle=a("strong"),wdo=o("flaubert"),Ado=o(" \u2014 "),QB=a("a"),Ldo=o("FlaubertTokenizer"),ydo=o(" (FlauBERT model)"),xdo=l(),ts=a("li"),$le=a("strong"),$do=o("fnet"),kdo=o(" \u2014 "),WB=a("a"),Sdo=o("FNetTokenizer"),Rdo=o(" or "),HB=a("a"),Pdo=o("FNetTokenizerFast"),Bdo=o(" (FNet model)"),Ido=l(),ch=a("li"),kle=a("strong"),Ndo=o("fsmt"),qdo=o(" \u2014 "),UB=a("a"),jdo=o("FSMTTokenizer"),Ddo=o(" (FairSeq Machine-Translation model)"),Gdo=l(),as=a("li"),Sle=a("strong"),Odo=o("funnel"),Vdo=o(" \u2014 "),JB=a("a"),Xdo=o("FunnelTokenizer"),zdo=o(" or "),YB=a("a"),Qdo=o("FunnelTokenizerFast"),Wdo=o(" (Funnel Transformer model)"),Hdo=l(),ns=a("li"),Rle=a("strong"),Udo=o("gpt2"),Jdo=o(" \u2014 "),KB=a("a"),Ydo=o("GPT2Tokenizer"),Kdo=o(" or "),ZB=a("a"),Zdo=o("GPT2TokenizerFast"),eco=o(" (OpenAI GPT-2 model)"),oco=l(),ss=a("li"),Ple=a("strong"),rco=o("gpt_neo"),tco=o(" \u2014 "),eI=a("a"),aco=o("GPT2Tokenizer"),nco=o(" or "),oI=a("a"),sco=o("GPT2TokenizerFast"),lco=o(" (GPT Neo model)"),ico=l(),fh=a("li"),Ble=a("strong"),dco=o("gpt_neox"),cco=o(" \u2014 "),rI=a("a"),fco=o("GPTNeoXTokenizerFast"),mco=o(" (GPT NeoX model)"),gco=l(),ls=a("li"),Ile=a("strong"),hco=o("gptj"),pco=o(" \u2014 "),tI=a("a"),_co=o("GPT2Tokenizer"),uco=o(" or "),aI=a("a"),bco=o("GPT2TokenizerFast"),vco=o(" (GPT-J model)"),Fco=l(),is=a("li"),Nle=a("strong"),Tco=o("groupvit"),Mco=o(" \u2014 "),nI=a("a"),Eco=o("CLIPTokenizer"),Cco=o(" or "),sI=a("a"),wco=o("CLIPTokenizerFast"),Aco=o(" (GroupViT model)"),Lco=l(),ds=a("li"),qle=a("strong"),yco=o("herbert"),xco=o(" \u2014 "),lI=a("a"),$co=o("HerbertTokenizer"),kco=o(" or "),iI=a("a"),Sco=o("HerbertTokenizerFast"),Rco=o(" (HerBERT model)"),Pco=l(),mh=a("li"),jle=a("strong"),Bco=o("hubert"),Ico=o(" \u2014 "),dI=a("a"),Nco=o("Wav2Vec2CTCTokenizer"),qco=o(" (Hubert model)"),jco=l(),cs=a("li"),Dle=a("strong"),Dco=o("ibert"),Gco=o(" \u2014 "),cI=a("a"),Oco=o("RobertaTokenizer"),Vco=o(" or "),fI=a("a"),Xco=o("RobertaTokenizerFast"),zco=o(" (I-BERT model)"),Qco=l(),fs=a("li"),Gle=a("strong"),Wco=o("layoutlm"),Hco=o(" \u2014 "),mI=a("a"),Uco=o("LayoutLMTokenizer"),Jco=o(" or "),gI=a("a"),Yco=o("LayoutLMTokenizerFast"),Kco=o(" (LayoutLM model)"),Zco=l(),ms=a("li"),Ole=a("strong"),efo=o("layoutlmv2"),ofo=o(" \u2014 "),hI=a("a"),rfo=o("LayoutLMv2Tokenizer"),tfo=o(" or "),pI=a("a"),afo=o("LayoutLMv2TokenizerFast"),nfo=o(" (LayoutLMv2 model)"),sfo=l(),gs=a("li"),Vle=a("strong"),lfo=o("layoutlmv3"),ifo=o(" \u2014 "),_I=a("a"),dfo=o("LayoutLMv3Tokenizer"),cfo=o(" or "),uI=a("a"),ffo=o("LayoutLMv3TokenizerFast"),mfo=o(" (LayoutLMv3 model)"),gfo=l(),hs=a("li"),Xle=a("strong"),hfo=o("layoutxlm"),pfo=o(" \u2014 "),bI=a("a"),_fo=o("LayoutXLMTokenizer"),ufo=o(" or "),vI=a("a"),bfo=o("LayoutXLMTokenizerFast"),vfo=o(" (LayoutXLM model)"),Ffo=l(),ps=a("li"),zle=a("strong"),Tfo=o("led"),Mfo=o(" \u2014 "),FI=a("a"),Efo=o("LEDTokenizer"),Cfo=o(" or "),TI=a("a"),wfo=o("LEDTokenizerFast"),Afo=o(" (LED model)"),Lfo=l(),_s=a("li"),Qle=a("strong"),yfo=o("longformer"),xfo=o(" \u2014 "),MI=a("a"),$fo=o("LongformerTokenizer"),kfo=o(" or "),EI=a("a"),Sfo=o("LongformerTokenizerFast"),Rfo=o(" (Longformer model)"),Pfo=l(),us=a("li"),Wle=a("strong"),Bfo=o("longt5"),Ifo=o(" \u2014 "),CI=a("a"),Nfo=o("T5Tokenizer"),qfo=o(" or "),wI=a("a"),jfo=o("T5TokenizerFast"),Dfo=o(" (LongT5 model)"),Gfo=l(),gh=a("li"),Hle=a("strong"),Ofo=o("luke"),Vfo=o(" \u2014 "),AI=a("a"),Xfo=o("LukeTokenizer"),zfo=o(" (LUKE model)"),Qfo=l(),bs=a("li"),Ule=a("strong"),Wfo=o("lxmert"),Hfo=o(" \u2014 "),LI=a("a"),Ufo=o("LxmertTokenizer"),Jfo=o(" or "),yI=a("a"),Yfo=o("LxmertTokenizerFast"),Kfo=o(" (LXMERT model)"),Zfo=l(),hh=a("li"),Jle=a("strong"),emo=o("m2m_100"),omo=o(" \u2014 "),xI=a("a"),rmo=o("M2M100Tokenizer"),tmo=o(" (M2M100 model)"),amo=l(),ph=a("li"),Yle=a("strong"),nmo=o("marian"),smo=o(" \u2014 "),$I=a("a"),lmo=o("MarianTokenizer"),imo=o(" (Marian model)"),dmo=l(),vs=a("li"),Kle=a("strong"),cmo=o("mbart"),fmo=o(" \u2014 "),kI=a("a"),mmo=o("MBartTokenizer"),gmo=o(" or "),SI=a("a"),hmo=o("MBartTokenizerFast"),pmo=o(" (mBART model)"),_mo=l(),Fs=a("li"),Zle=a("strong"),umo=o("mbart50"),bmo=o(" \u2014 "),RI=a("a"),vmo=o("MBart50Tokenizer"),Fmo=o(" or "),PI=a("a"),Tmo=o("MBart50TokenizerFast"),Mmo=o(" (mBART-50 model)"),Emo=l(),Ts=a("li"),eie=a("strong"),Cmo=o("megatron-bert"),wmo=o(" \u2014 "),BI=a("a"),Amo=o("BertTokenizer"),Lmo=o(" or "),II=a("a"),ymo=o("BertTokenizerFast"),xmo=o(" (Megatron-BERT model)"),$mo=l(),_h=a("li"),oie=a("strong"),kmo=o("mluke"),Smo=o(" \u2014 "),NI=a("a"),Rmo=o("MLukeTokenizer"),Pmo=o(" (mLUKE model)"),Bmo=l(),Ms=a("li"),rie=a("strong"),Imo=o("mobilebert"),Nmo=o(" \u2014 "),qI=a("a"),qmo=o("MobileBertTokenizer"),jmo=o(" or "),jI=a("a"),Dmo=o("MobileBertTokenizerFast"),Gmo=o(" (MobileBERT model)"),Omo=l(),Es=a("li"),tie=a("strong"),Vmo=o("mpnet"),Xmo=o(" \u2014 "),DI=a("a"),zmo=o("MPNetTokenizer"),Qmo=o(" or "),GI=a("a"),Wmo=o("MPNetTokenizerFast"),Hmo=o(" (MPNet model)"),Umo=l(),Cs=a("li"),aie=a("strong"),Jmo=o("mt5"),Ymo=o(" \u2014 "),OI=a("a"),Kmo=o("MT5Tokenizer"),Zmo=o(" or "),VI=a("a"),ego=o("MT5TokenizerFast"),ogo=o(" (MT5 model)"),rgo=l(),ws=a("li"),nie=a("strong"),tgo=o("mvp"),ago=o(" \u2014 "),XI=a("a"),ngo=o("MvpTokenizer"),sgo=o(" or "),zI=a("a"),lgo=o("MvpTokenizerFast"),igo=o(" (MVP model)"),dgo=l(),As=a("li"),sie=a("strong"),cgo=o("nezha"),fgo=o(" \u2014 "),QI=a("a"),mgo=o("BertTokenizer"),ggo=o(" or "),WI=a("a"),hgo=o("BertTokenizerFast"),pgo=o(" (Nezha model)"),_go=l(),Ls=a("li"),lie=a("strong"),ugo=o("nystromformer"),bgo=o(" \u2014 "),HI=a("a"),vgo=o("AlbertTokenizer"),Fgo=o(" or "),UI=a("a"),Tgo=o("AlbertTokenizerFast"),Mgo=o(" (Nystr\xF6mformer model)"),Ego=l(),ys=a("li"),iie=a("strong"),Cgo=o("openai-gpt"),wgo=o(" \u2014 "),JI=a("a"),Ago=o("OpenAIGPTTokenizer"),Lgo=o(" or "),YI=a("a"),ygo=o("OpenAIGPTTokenizerFast"),xgo=o(" (OpenAI GPT model)"),$go=l(),uh=a("li"),die=a("strong"),kgo=o("opt"),Sgo=o(" \u2014 "),KI=a("a"),Rgo=o("GPT2Tokenizer"),Pgo=o(" (OPT model)"),Bgo=l(),xs=a("li"),cie=a("strong"),Igo=o("pegasus"),Ngo=o(" \u2014 "),ZI=a("a"),qgo=o("PegasusTokenizer"),jgo=o(" or "),eN=a("a"),Dgo=o("PegasusTokenizerFast"),Ggo=o(" (Pegasus model)"),Ogo=l(),bh=a("li"),fie=a("strong"),Vgo=o("perceiver"),Xgo=o(" \u2014 "),oN=a("a"),zgo=o("PerceiverTokenizer"),Qgo=o(" (Perceiver model)"),Wgo=l(),vh=a("li"),mie=a("strong"),Hgo=o("phobert"),Ugo=o(" \u2014 "),rN=a("a"),Jgo=o("PhobertTokenizer"),Ygo=o(" (PhoBERT model)"),Kgo=l(),Fh=a("li"),gie=a("strong"),Zgo=o("plbart"),eho=o(" \u2014 "),tN=a("a"),oho=o("PLBartTokenizer"),rho=o(" (PLBart model)"),tho=l(),Th=a("li"),hie=a("strong"),aho=o("prophetnet"),nho=o(" \u2014 "),aN=a("a"),sho=o("ProphetNetTokenizer"),lho=o(" (ProphetNet model)"),iho=l(),$s=a("li"),pie=a("strong"),dho=o("qdqbert"),cho=o(" \u2014 "),nN=a("a"),fho=o("BertTokenizer"),mho=o(" or "),sN=a("a"),gho=o("BertTokenizerFast"),hho=o(" (QDQBert model)"),pho=l(),Mh=a("li"),_ie=a("strong"),_ho=o("rag"),uho=o(" \u2014 "),lN=a("a"),bho=o("RagTokenizer"),vho=o(" (RAG model)"),Fho=l(),ks=a("li"),uie=a("strong"),Tho=o("realm"),Mho=o(" \u2014 "),iN=a("a"),Eho=o("RealmTokenizer"),Cho=o(" or "),dN=a("a"),who=o("RealmTokenizerFast"),Aho=o(" (REALM model)"),Lho=l(),Ss=a("li"),bie=a("strong"),yho=o("reformer"),xho=o(" \u2014 "),cN=a("a"),$ho=o("ReformerTokenizer"),kho=o(" or "),fN=a("a"),Sho=o("ReformerTokenizerFast"),Rho=o(" (Reformer model)"),Pho=l(),Rs=a("li"),vie=a("strong"),Bho=o("rembert"),Iho=o(" \u2014 "),mN=a("a"),Nho=o("RemBertTokenizer"),qho=o(" or "),gN=a("a"),jho=o("RemBertTokenizerFast"),Dho=o(" (RemBERT model)"),Gho=l(),Ps=a("li"),Fie=a("strong"),Oho=o("retribert"),Vho=o(" \u2014 "),hN=a("a"),Xho=o("RetriBertTokenizer"),zho=o(" or "),pN=a("a"),Qho=o("RetriBertTokenizerFast"),Who=o(" (RetriBERT model)"),Hho=l(),Bs=a("li"),Tie=a("strong"),Uho=o("roberta"),Jho=o(" \u2014 "),_N=a("a"),Yho=o("RobertaTokenizer"),Kho=o(" or "),uN=a("a"),Zho=o("RobertaTokenizerFast"),epo=o(" (RoBERTa model)"),opo=l(),Is=a("li"),Mie=a("strong"),rpo=o("roformer"),tpo=o(" \u2014 "),bN=a("a"),apo=o("RoFormerTokenizer"),npo=o(" or "),vN=a("a"),spo=o("RoFormerTokenizerFast"),lpo=o(" (RoFormer model)"),ipo=l(),Eh=a("li"),Eie=a("strong"),dpo=o("speech_to_text"),cpo=o(" \u2014 "),FN=a("a"),fpo=o("Speech2TextTokenizer"),mpo=o(" (Speech2Text model)"),gpo=l(),Ch=a("li"),Cie=a("strong"),hpo=o("speech_to_text_2"),ppo=o(" \u2014 "),TN=a("a"),_po=o("Speech2Text2Tokenizer"),upo=o(" (Speech2Text2 model)"),bpo=l(),Ns=a("li"),wie=a("strong"),vpo=o("splinter"),Fpo=o(" \u2014 "),MN=a("a"),Tpo=o("SplinterTokenizer"),Mpo=o(" or "),EN=a("a"),Epo=o("SplinterTokenizerFast"),Cpo=o(" (Splinter model)"),wpo=l(),qs=a("li"),Aie=a("strong"),Apo=o("squeezebert"),Lpo=o(" \u2014 "),CN=a("a"),ypo=o("SqueezeBertTokenizer"),xpo=o(" or "),wN=a("a"),$po=o("SqueezeBertTokenizerFast"),kpo=o(" (SqueezeBERT model)"),Spo=l(),js=a("li"),Lie=a("strong"),Rpo=o("t5"),Ppo=o(" \u2014 "),AN=a("a"),Bpo=o("T5Tokenizer"),Ipo=o(" or "),LN=a("a"),Npo=o("T5TokenizerFast"),qpo=o(" (T5 model)"),jpo=l(),wh=a("li"),yie=a("strong"),Dpo=o("tapas"),Gpo=o(" \u2014 "),yN=a("a"),Opo=o("TapasTokenizer"),Vpo=o(" (TAPAS model)"),Xpo=l(),Ah=a("li"),xie=a("strong"),zpo=o("tapex"),Qpo=o(" \u2014 "),xN=a("a"),Wpo=o("TapexTokenizer"),Hpo=o(" (TAPEX model)"),Upo=l(),Lh=a("li"),$ie=a("strong"),Jpo=o("transfo-xl"),Ypo=o(" \u2014 "),$N=a("a"),Kpo=o("TransfoXLTokenizer"),Zpo=o(" (Transformer-XL model)"),e_o=l(),Ds=a("li"),kie=a("strong"),o_o=o("vilt"),r_o=o(" \u2014 "),kN=a("a"),t_o=o("BertTokenizer"),a_o=o(" or "),SN=a("a"),n_o=o("BertTokenizerFast"),s_o=o(" (ViLT model)"),l_o=l(),Gs=a("li"),Sie=a("strong"),i_o=o("visual_bert"),d_o=o(" \u2014 "),RN=a("a"),c_o=o("BertTokenizer"),f_o=o(" or "),PN=a("a"),m_o=o("BertTokenizerFast"),g_o=o(" (VisualBERT model)"),h_o=l(),yh=a("li"),Rie=a("strong"),p_o=o("wav2vec2"),__o=o(" \u2014 "),BN=a("a"),u_o=o("Wav2Vec2CTCTokenizer"),b_o=o(" (Wav2Vec2 model)"),v_o=l(),xh=a("li"),Pie=a("strong"),F_o=o("wav2vec2-conformer"),T_o=o(" \u2014 "),IN=a("a"),M_o=o("Wav2Vec2CTCTokenizer"),E_o=o(" (Wav2Vec2-Conformer model)"),C_o=l(),$h=a("li"),Bie=a("strong"),w_o=o("wav2vec2_phoneme"),A_o=o(" \u2014 "),NN=a("a"),L_o=o("Wav2Vec2PhonemeCTCTokenizer"),y_o=o(" (Wav2Vec2Phoneme model)"),x_o=l(),Os=a("li"),Iie=a("strong"),$_o=o("xglm"),k_o=o(" \u2014 "),qN=a("a"),S_o=o("XGLMTokenizer"),R_o=o(" or "),jN=a("a"),P_o=o("XGLMTokenizerFast"),B_o=o(" (XGLM model)"),I_o=l(),kh=a("li"),Nie=a("strong"),N_o=o("xlm"),q_o=o(" \u2014 "),DN=a("a"),j_o=o("XLMTokenizer"),D_o=o(" (XLM model)"),G_o=l(),Sh=a("li"),qie=a("strong"),O_o=o("xlm-prophetnet"),V_o=o(" \u2014 "),GN=a("a"),X_o=o("XLMProphetNetTokenizer"),z_o=o(" (XLM-ProphetNet model)"),Q_o=l(),Vs=a("li"),jie=a("strong"),W_o=o("xlm-roberta"),H_o=o(" \u2014 "),ON=a("a"),U_o=o("XLMRobertaTokenizer"),J_o=o(" or "),VN=a("a"),Y_o=o("XLMRobertaTokenizerFast"),K_o=o(" (XLM-RoBERTa model)"),Z_o=l(),Xs=a("li"),Die=a("strong"),euo=o("xlm-roberta-xl"),ouo=o(" \u2014 "),XN=a("a"),ruo=o("RobertaTokenizer"),tuo=o(" or "),zN=a("a"),auo=o("RobertaTokenizerFast"),nuo=o(" (XLM-RoBERTa-XL model)"),suo=l(),zs=a("li"),Gie=a("strong"),luo=o("xlnet"),iuo=o(" \u2014 "),QN=a("a"),duo=o("XLNetTokenizer"),cuo=o(" or "),WN=a("a"),fuo=o("XLNetTokenizerFast"),muo=o(" (XLNet model)"),guo=l(),Qs=a("li"),Oie=a("strong"),huo=o("yoso"),puo=o(" \u2014 "),HN=a("a"),_uo=o("AlbertTokenizer"),uuo=o(" or "),UN=a("a"),buo=o("AlbertTokenizerFast"),vuo=o(" (YOSO model)"),Fuo=l(),F(Rh.$$.fragment),Tuo=l(),Ph=a("div"),F(vL.$$.fragment),Muo=l(),Vie=a("p"),Euo=o("Register a new tokenizer in this mapping."),hXe=l(),qi=a("h2"),Bh=a("a"),Xie=a("span"),F(FL.$$.fragment),Cuo=l(),zie=a("span"),wuo=o("AutoFeatureExtractor"),pXe=l(),xo=a("div"),F(TL.$$.fragment),Auo=l(),ML=a("p"),Luo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),JN=a("a"),yuo=o("AutoFeatureExtractor.from_pretrained()"),xuo=o(" class method."),$uo=l(),EL=a("p"),kuo=o("This class cannot be instantiated directly using "),Qie=a("code"),Suo=o("__init__()"),Ruo=o(" (throws an error)."),Puo=l(),Ue=a("div"),F(CL.$$.fragment),Buo=l(),Wie=a("p"),Iuo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Nuo=l(),Ba=a("p"),quo=o("The feature extractor class to instantiate is selected based on the "),Hie=a("code"),juo=o("model_type"),Duo=o(` property of the config object
(either passed as an argument or loaded from `),Uie=a("code"),Guo=o("pretrained_model_name_or_path"),Ouo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jie=a("code"),Vuo=o("pretrained_model_name_or_path"),Xuo=o(":"),zuo=l(),Y=a("ul"),Ih=a("li"),Yie=a("strong"),Quo=o("beit"),Wuo=o(" \u2014 "),YN=a("a"),Huo=o("BeitFeatureExtractor"),Uuo=o(" (BEiT model)"),Juo=l(),Nh=a("li"),Kie=a("strong"),Yuo=o("clip"),Kuo=o(" \u2014 "),KN=a("a"),Zuo=o("CLIPFeatureExtractor"),e1o=o(" (CLIP model)"),o1o=l(),qh=a("li"),Zie=a("strong"),r1o=o("convnext"),t1o=o(" \u2014 "),ZN=a("a"),a1o=o("ConvNextFeatureExtractor"),n1o=o(" (ConvNeXT model)"),s1o=l(),jh=a("li"),ede=a("strong"),l1o=o("cvt"),i1o=o(" \u2014 "),eq=a("a"),d1o=o("ConvNextFeatureExtractor"),c1o=o(" (CvT model)"),f1o=l(),Dh=a("li"),ode=a("strong"),m1o=o("data2vec-audio"),g1o=o(" \u2014 "),oq=a("a"),h1o=o("Wav2Vec2FeatureExtractor"),p1o=o(" (Data2VecAudio model)"),_1o=l(),Gh=a("li"),rde=a("strong"),u1o=o("data2vec-vision"),b1o=o(" \u2014 "),rq=a("a"),v1o=o("BeitFeatureExtractor"),F1o=o(" (Data2VecVision model)"),T1o=l(),Oh=a("li"),tde=a("strong"),M1o=o("deit"),E1o=o(" \u2014 "),tq=a("a"),C1o=o("DeiTFeatureExtractor"),w1o=o(" (DeiT model)"),A1o=l(),Vh=a("li"),ade=a("strong"),L1o=o("detr"),y1o=o(" \u2014 "),aq=a("a"),x1o=o("DetrFeatureExtractor"),$1o=o(" (DETR model)"),k1o=l(),Xh=a("li"),nde=a("strong"),S1o=o("dpt"),R1o=o(" \u2014 "),nq=a("a"),P1o=o("DPTFeatureExtractor"),B1o=o(" (DPT model)"),I1o=l(),zh=a("li"),sde=a("strong"),N1o=o("flava"),q1o=o(" \u2014 "),sq=a("a"),j1o=o("FlavaFeatureExtractor"),D1o=o(" (FLAVA model)"),G1o=l(),Qh=a("li"),lde=a("strong"),O1o=o("glpn"),V1o=o(" \u2014 "),lq=a("a"),X1o=o("GLPNFeatureExtractor"),z1o=o(" (GLPN model)"),Q1o=l(),Wh=a("li"),ide=a("strong"),W1o=o("groupvit"),H1o=o(" \u2014 "),iq=a("a"),U1o=o("CLIPFeatureExtractor"),J1o=o(" (GroupViT model)"),Y1o=l(),Hh=a("li"),dde=a("strong"),K1o=o("hubert"),Z1o=o(" \u2014 "),dq=a("a"),e2o=o("Wav2Vec2FeatureExtractor"),o2o=o(" (Hubert model)"),r2o=l(),Uh=a("li"),cde=a("strong"),t2o=o("imagegpt"),a2o=o(" \u2014 "),cq=a("a"),n2o=o("ImageGPTFeatureExtractor"),s2o=o(" (ImageGPT model)"),l2o=l(),Jh=a("li"),fde=a("strong"),i2o=o("layoutlmv2"),d2o=o(" \u2014 "),fq=a("a"),c2o=o("LayoutLMv2FeatureExtractor"),f2o=o(" (LayoutLMv2 model)"),m2o=l(),Yh=a("li"),mde=a("strong"),g2o=o("layoutlmv3"),h2o=o(" \u2014 "),mq=a("a"),p2o=o("LayoutLMv3FeatureExtractor"),_2o=o(" (LayoutLMv3 model)"),u2o=l(),Kh=a("li"),gde=a("strong"),b2o=o("levit"),v2o=o(" \u2014 "),gq=a("a"),F2o=o("LevitFeatureExtractor"),T2o=o(" (LeViT model)"),M2o=l(),Zh=a("li"),hde=a("strong"),E2o=o("maskformer"),C2o=o(" \u2014 "),hq=a("a"),w2o=o("MaskFormerFeatureExtractor"),A2o=o(" (MaskFormer model)"),L2o=l(),ep=a("li"),pde=a("strong"),y2o=o("mctct"),x2o=o(" \u2014 "),pq=a("a"),$2o=o("MCTCTFeatureExtractor"),k2o=o(" (M-CTC-T model)"),S2o=l(),op=a("li"),_de=a("strong"),R2o=o("mobilevit"),P2o=o(" \u2014 "),_q=a("a"),B2o=o("MobileViTFeatureExtractor"),I2o=o(" (MobileViT model)"),N2o=l(),rp=a("li"),ude=a("strong"),q2o=o("perceiver"),j2o=o(" \u2014 "),uq=a("a"),D2o=o("PerceiverFeatureExtractor"),G2o=o(" (Perceiver model)"),O2o=l(),tp=a("li"),bde=a("strong"),V2o=o("poolformer"),X2o=o(" \u2014 "),bq=a("a"),z2o=o("PoolFormerFeatureExtractor"),Q2o=o(" (PoolFormer model)"),W2o=l(),ap=a("li"),vde=a("strong"),H2o=o("regnet"),U2o=o(" \u2014 "),vq=a("a"),J2o=o("ConvNextFeatureExtractor"),Y2o=o(" (RegNet model)"),K2o=l(),np=a("li"),Fde=a("strong"),Z2o=o("resnet"),ebo=o(" \u2014 "),Fq=a("a"),obo=o("ConvNextFeatureExtractor"),rbo=o(" (ResNet model)"),tbo=l(),sp=a("li"),Tde=a("strong"),abo=o("segformer"),nbo=o(" \u2014 "),Tq=a("a"),sbo=o("SegformerFeatureExtractor"),lbo=o(" (SegFormer model)"),ibo=l(),lp=a("li"),Mde=a("strong"),dbo=o("speech_to_text"),cbo=o(" \u2014 "),Mq=a("a"),fbo=o("Speech2TextFeatureExtractor"),mbo=o(" (Speech2Text model)"),gbo=l(),ip=a("li"),Ede=a("strong"),hbo=o("swin"),pbo=o(" \u2014 "),Eq=a("a"),_bo=o("ViTFeatureExtractor"),ubo=o(" (Swin Transformer model)"),bbo=l(),dp=a("li"),Cde=a("strong"),vbo=o("van"),Fbo=o(" \u2014 "),Cq=a("a"),Tbo=o("ConvNextFeatureExtractor"),Mbo=o(" (VAN model)"),Ebo=l(),cp=a("li"),wde=a("strong"),Cbo=o("vilt"),wbo=o(" \u2014 "),wq=a("a"),Abo=o("ViltFeatureExtractor"),Lbo=o(" (ViLT model)"),ybo=l(),fp=a("li"),Ade=a("strong"),xbo=o("vit"),$bo=o(" \u2014 "),Aq=a("a"),kbo=o("ViTFeatureExtractor"),Sbo=o(" (ViT model)"),Rbo=l(),mp=a("li"),Lde=a("strong"),Pbo=o("vit_mae"),Bbo=o(" \u2014 "),Lq=a("a"),Ibo=o("ViTFeatureExtractor"),Nbo=o(" (ViTMAE model)"),qbo=l(),gp=a("li"),yde=a("strong"),jbo=o("wav2vec2"),Dbo=o(" \u2014 "),yq=a("a"),Gbo=o("Wav2Vec2FeatureExtractor"),Obo=o(" (Wav2Vec2 model)"),Vbo=l(),hp=a("li"),xde=a("strong"),Xbo=o("wav2vec2-conformer"),zbo=o(" \u2014 "),xq=a("a"),Qbo=o("Wav2Vec2FeatureExtractor"),Wbo=o(" (Wav2Vec2-Conformer model)"),Hbo=l(),pp=a("li"),$de=a("strong"),Ubo=o("yolos"),Jbo=o(" \u2014 "),$q=a("a"),Ybo=o("YolosFeatureExtractor"),Kbo=o(" (YOLOS model)"),Zbo=l(),F(_p.$$.fragment),evo=l(),F(up.$$.fragment),ovo=l(),bp=a("div"),F(wL.$$.fragment),rvo=l(),kde=a("p"),tvo=o("Register a new feature extractor for this class."),_Xe=l(),ji=a("h2"),vp=a("a"),Sde=a("span"),F(AL.$$.fragment),avo=l(),Rde=a("span"),nvo=o("AutoProcessor"),uXe=l(),$o=a("div"),F(LL.$$.fragment),svo=l(),yL=a("p"),lvo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),kq=a("a"),ivo=o("AutoProcessor.from_pretrained()"),dvo=o(" class method."),cvo=l(),xL=a("p"),fvo=o("This class cannot be instantiated directly using "),Pde=a("code"),mvo=o("__init__()"),gvo=o(" (throws an error)."),hvo=l(),Je=a("div"),F($L.$$.fragment),pvo=l(),Bde=a("p"),_vo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),uvo=l(),Di=a("p"),bvo=o("The processor class to instantiate is selected based on the "),Ide=a("code"),vvo=o("model_type"),Fvo=o(` property of the config object (either
passed as an argument or loaded from `),Nde=a("code"),Tvo=o("pretrained_model_name_or_path"),Mvo=o(" if possible):"),Evo=l(),he=a("ul"),Fp=a("li"),qde=a("strong"),Cvo=o("clip"),wvo=o(" \u2014 "),Sq=a("a"),Avo=o("CLIPProcessor"),Lvo=o(" (CLIP model)"),yvo=l(),Tp=a("li"),jde=a("strong"),xvo=o("flava"),$vo=o(" \u2014 "),Dde=a("code"),kvo=o("FLAVAProcessor"),Svo=o(" (FLAVA model)"),Rvo=l(),Mp=a("li"),Gde=a("strong"),Pvo=o("groupvit"),Bvo=o(" \u2014 "),Rq=a("a"),Ivo=o("CLIPProcessor"),Nvo=o(" (GroupViT model)"),qvo=l(),Ep=a("li"),Ode=a("strong"),jvo=o("layoutlmv2"),Dvo=o(" \u2014 "),Pq=a("a"),Gvo=o("LayoutLMv2Processor"),Ovo=o(" (LayoutLMv2 model)"),Vvo=l(),Cp=a("li"),Vde=a("strong"),Xvo=o("layoutlmv3"),zvo=o(" \u2014 "),Bq=a("a"),Qvo=o("LayoutLMv3Processor"),Wvo=o(" (LayoutLMv3 model)"),Hvo=l(),wp=a("li"),Xde=a("strong"),Uvo=o("layoutxlm"),Jvo=o(" \u2014 "),Iq=a("a"),Yvo=o("LayoutXLMProcessor"),Kvo=o(" (LayoutXLM model)"),Zvo=l(),Ap=a("li"),zde=a("strong"),e0o=o("sew"),o0o=o(" \u2014 "),Nq=a("a"),r0o=o("Wav2Vec2Processor"),t0o=o(" (SEW model)"),a0o=l(),Lp=a("li"),Qde=a("strong"),n0o=o("sew-d"),s0o=o(" \u2014 "),qq=a("a"),l0o=o("Wav2Vec2Processor"),i0o=o(" (SEW-D model)"),d0o=l(),yp=a("li"),Wde=a("strong"),c0o=o("speech_to_text"),f0o=o(" \u2014 "),jq=a("a"),m0o=o("Speech2TextProcessor"),g0o=o(" (Speech2Text model)"),h0o=l(),xp=a("li"),Hde=a("strong"),p0o=o("speech_to_text_2"),_0o=o(" \u2014 "),Dq=a("a"),u0o=o("Speech2Text2Processor"),b0o=o(" (Speech2Text2 model)"),v0o=l(),$p=a("li"),Ude=a("strong"),F0o=o("trocr"),T0o=o(" \u2014 "),Gq=a("a"),M0o=o("TrOCRProcessor"),E0o=o(" (TrOCR model)"),C0o=l(),kp=a("li"),Jde=a("strong"),w0o=o("unispeech"),A0o=o(" \u2014 "),Oq=a("a"),L0o=o("Wav2Vec2Processor"),y0o=o(" (UniSpeech model)"),x0o=l(),Sp=a("li"),Yde=a("strong"),$0o=o("unispeech-sat"),k0o=o(" \u2014 "),Vq=a("a"),S0o=o("Wav2Vec2Processor"),R0o=o(" (UniSpeechSat model)"),P0o=l(),Rp=a("li"),Kde=a("strong"),B0o=o("vilt"),I0o=o(" \u2014 "),Xq=a("a"),N0o=o("ViltProcessor"),q0o=o(" (ViLT model)"),j0o=l(),Pp=a("li"),Zde=a("strong"),D0o=o("vision-text-dual-encoder"),G0o=o(" \u2014 "),zq=a("a"),O0o=o("VisionTextDualEncoderProcessor"),V0o=o(" (VisionTextDualEncoder model)"),X0o=l(),Bp=a("li"),ece=a("strong"),z0o=o("wav2vec2"),Q0o=o(" \u2014 "),Qq=a("a"),W0o=o("Wav2Vec2Processor"),H0o=o(" (Wav2Vec2 model)"),U0o=l(),Ip=a("li"),oce=a("strong"),J0o=o("wav2vec2-conformer"),Y0o=o(" \u2014 "),Wq=a("a"),K0o=o("Wav2Vec2Processor"),Z0o=o(" (Wav2Vec2-Conformer model)"),eFo=l(),Np=a("li"),rce=a("strong"),oFo=o("wavlm"),rFo=o(" \u2014 "),Hq=a("a"),tFo=o("Wav2Vec2Processor"),aFo=o(" (WavLM model)"),nFo=l(),F(qp.$$.fragment),sFo=l(),F(jp.$$.fragment),lFo=l(),Dp=a("div"),F(kL.$$.fragment),iFo=l(),tce=a("p"),dFo=o("Register a new processor for this class."),bXe=l(),Gi=a("h2"),Gp=a("a"),ace=a("span"),F(SL.$$.fragment),cFo=l(),nce=a("span"),fFo=o("AutoModel"),vXe=l(),ko=a("div"),F(RL.$$.fragment),mFo=l(),Oi=a("p"),gFo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Uq=a("a"),hFo=o("from_pretrained()"),pFo=o(" class method or the "),Jq=a("a"),_Fo=o("from_config()"),uFo=o(` class
method.`),bFo=l(),PL=a("p"),vFo=o("This class cannot be instantiated directly using "),sce=a("code"),FFo=o("__init__()"),TFo=o(" (throws an error)."),MFo=l(),it=a("div"),F(BL.$$.fragment),EFo=l(),lce=a("p"),CFo=o("Instantiates one of the base model classes of the library from a configuration."),wFo=l(),Vi=a("p"),AFo=o(`Note:
Loading a model from its configuration file does `),ice=a("strong"),LFo=o("not"),yFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yq=a("a"),xFo=o("from_pretrained()"),$Fo=o(" to load the model weights."),kFo=l(),F(Op.$$.fragment),SFo=l(),Ye=a("div"),F(IL.$$.fragment),RFo=l(),dce=a("p"),PFo=o("Instantiate one of the base model classes of the library from a pretrained model."),BFo=l(),Ia=a("p"),IFo=o("The model class to instantiate is selected based on the "),cce=a("code"),NFo=o("model_type"),qFo=o(` property of the config object (either
passed as an argument or loaded from `),fce=a("code"),jFo=o("pretrained_model_name_or_path"),DFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mce=a("code"),GFo=o("pretrained_model_name_or_path"),OFo=o(":"),VFo=l(),y=a("ul"),Vp=a("li"),gce=a("strong"),XFo=o("albert"),zFo=o(" \u2014 "),Kq=a("a"),QFo=o("AlbertModel"),WFo=o(" (ALBERT model)"),HFo=l(),Xp=a("li"),hce=a("strong"),UFo=o("bart"),JFo=o(" \u2014 "),Zq=a("a"),YFo=o("BartModel"),KFo=o(" (BART model)"),ZFo=l(),zp=a("li"),pce=a("strong"),eTo=o("beit"),oTo=o(" \u2014 "),ej=a("a"),rTo=o("BeitModel"),tTo=o(" (BEiT model)"),aTo=l(),Qp=a("li"),_ce=a("strong"),nTo=o("bert"),sTo=o(" \u2014 "),oj=a("a"),lTo=o("BertModel"),iTo=o(" (BERT model)"),dTo=l(),Wp=a("li"),uce=a("strong"),cTo=o("bert-generation"),fTo=o(" \u2014 "),rj=a("a"),mTo=o("BertGenerationEncoder"),gTo=o(" (Bert Generation model)"),hTo=l(),Hp=a("li"),bce=a("strong"),pTo=o("big_bird"),_To=o(" \u2014 "),tj=a("a"),uTo=o("BigBirdModel"),bTo=o(" (BigBird model)"),vTo=l(),Up=a("li"),vce=a("strong"),FTo=o("bigbird_pegasus"),TTo=o(" \u2014 "),aj=a("a"),MTo=o("BigBirdPegasusModel"),ETo=o(" (BigBird-Pegasus model)"),CTo=l(),Jp=a("li"),Fce=a("strong"),wTo=o("blenderbot"),ATo=o(" \u2014 "),nj=a("a"),LTo=o("BlenderbotModel"),yTo=o(" (Blenderbot model)"),xTo=l(),Yp=a("li"),Tce=a("strong"),$To=o("blenderbot-small"),kTo=o(" \u2014 "),sj=a("a"),STo=o("BlenderbotSmallModel"),RTo=o(" (BlenderbotSmall model)"),PTo=l(),Kp=a("li"),Mce=a("strong"),BTo=o("bloom"),ITo=o(" \u2014 "),lj=a("a"),NTo=o("BloomModel"),qTo=o(" (BLOOM model)"),jTo=l(),Zp=a("li"),Ece=a("strong"),DTo=o("camembert"),GTo=o(" \u2014 "),ij=a("a"),OTo=o("CamembertModel"),VTo=o(" (CamemBERT model)"),XTo=l(),e_=a("li"),Cce=a("strong"),zTo=o("canine"),QTo=o(" \u2014 "),dj=a("a"),WTo=o("CanineModel"),HTo=o(" (CANINE model)"),UTo=l(),o_=a("li"),wce=a("strong"),JTo=o("clip"),YTo=o(" \u2014 "),cj=a("a"),KTo=o("CLIPModel"),ZTo=o(" (CLIP model)"),e7o=l(),r_=a("li"),Ace=a("strong"),o7o=o("codegen"),r7o=o(" \u2014 "),fj=a("a"),t7o=o("CodeGenModel"),a7o=o(" (CodeGen model)"),n7o=l(),t_=a("li"),Lce=a("strong"),s7o=o("convbert"),l7o=o(" \u2014 "),mj=a("a"),i7o=o("ConvBertModel"),d7o=o(" (ConvBERT model)"),c7o=l(),a_=a("li"),yce=a("strong"),f7o=o("convnext"),m7o=o(" \u2014 "),gj=a("a"),g7o=o("ConvNextModel"),h7o=o(" (ConvNeXT model)"),p7o=l(),n_=a("li"),xce=a("strong"),_7o=o("ctrl"),u7o=o(" \u2014 "),hj=a("a"),b7o=o("CTRLModel"),v7o=o(" (CTRL model)"),F7o=l(),s_=a("li"),$ce=a("strong"),T7o=o("cvt"),M7o=o(" \u2014 "),pj=a("a"),E7o=o("CvtModel"),C7o=o(" (CvT model)"),w7o=l(),l_=a("li"),kce=a("strong"),A7o=o("data2vec-audio"),L7o=o(" \u2014 "),_j=a("a"),y7o=o("Data2VecAudioModel"),x7o=o(" (Data2VecAudio model)"),$7o=l(),i_=a("li"),Sce=a("strong"),k7o=o("data2vec-text"),S7o=o(" \u2014 "),uj=a("a"),R7o=o("Data2VecTextModel"),P7o=o(" (Data2VecText model)"),B7o=l(),d_=a("li"),Rce=a("strong"),I7o=o("data2vec-vision"),N7o=o(" \u2014 "),bj=a("a"),q7o=o("Data2VecVisionModel"),j7o=o(" (Data2VecVision model)"),D7o=l(),c_=a("li"),Pce=a("strong"),G7o=o("deberta"),O7o=o(" \u2014 "),vj=a("a"),V7o=o("DebertaModel"),X7o=o(" (DeBERTa model)"),z7o=l(),f_=a("li"),Bce=a("strong"),Q7o=o("deberta-v2"),W7o=o(" \u2014 "),Fj=a("a"),H7o=o("DebertaV2Model"),U7o=o(" (DeBERTa-v2 model)"),J7o=l(),m_=a("li"),Ice=a("strong"),Y7o=o("decision_transformer"),K7o=o(" \u2014 "),Tj=a("a"),Z7o=o("DecisionTransformerModel"),e9o=o(" (Decision Transformer model)"),o9o=l(),g_=a("li"),Nce=a("strong"),r9o=o("deit"),t9o=o(" \u2014 "),Mj=a("a"),a9o=o("DeiTModel"),n9o=o(" (DeiT model)"),s9o=l(),h_=a("li"),qce=a("strong"),l9o=o("detr"),i9o=o(" \u2014 "),Ej=a("a"),d9o=o("DetrModel"),c9o=o(" (DETR model)"),f9o=l(),p_=a("li"),jce=a("strong"),m9o=o("distilbert"),g9o=o(" \u2014 "),Cj=a("a"),h9o=o("DistilBertModel"),p9o=o(" (DistilBERT model)"),_9o=l(),__=a("li"),Dce=a("strong"),u9o=o("dpr"),b9o=o(" \u2014 "),wj=a("a"),v9o=o("DPRQuestionEncoder"),F9o=o(" (DPR model)"),T9o=l(),u_=a("li"),Gce=a("strong"),M9o=o("dpt"),E9o=o(" \u2014 "),Aj=a("a"),C9o=o("DPTModel"),w9o=o(" (DPT model)"),A9o=l(),b_=a("li"),Oce=a("strong"),L9o=o("electra"),y9o=o(" \u2014 "),Lj=a("a"),x9o=o("ElectraModel"),$9o=o(" (ELECTRA model)"),k9o=l(),v_=a("li"),Vce=a("strong"),S9o=o("flaubert"),R9o=o(" \u2014 "),yj=a("a"),P9o=o("FlaubertModel"),B9o=o(" (FlauBERT model)"),I9o=l(),F_=a("li"),Xce=a("strong"),N9o=o("flava"),q9o=o(" \u2014 "),xj=a("a"),j9o=o("FlavaModel"),D9o=o(" (FLAVA model)"),G9o=l(),T_=a("li"),zce=a("strong"),O9o=o("fnet"),V9o=o(" \u2014 "),$j=a("a"),X9o=o("FNetModel"),z9o=o(" (FNet model)"),Q9o=l(),M_=a("li"),Qce=a("strong"),W9o=o("fsmt"),H9o=o(" \u2014 "),kj=a("a"),U9o=o("FSMTModel"),J9o=o(" (FairSeq Machine-Translation model)"),Y9o=l(),Ws=a("li"),Wce=a("strong"),K9o=o("funnel"),Z9o=o(" \u2014 "),Sj=a("a"),eMo=o("FunnelModel"),oMo=o(" or "),Rj=a("a"),rMo=o("FunnelBaseModel"),tMo=o(" (Funnel Transformer model)"),aMo=l(),E_=a("li"),Hce=a("strong"),nMo=o("glpn"),sMo=o(" \u2014 "),Pj=a("a"),lMo=o("GLPNModel"),iMo=o(" (GLPN model)"),dMo=l(),C_=a("li"),Uce=a("strong"),cMo=o("gpt2"),fMo=o(" \u2014 "),Bj=a("a"),mMo=o("GPT2Model"),gMo=o(" (OpenAI GPT-2 model)"),hMo=l(),w_=a("li"),Jce=a("strong"),pMo=o("gpt_neo"),_Mo=o(" \u2014 "),Ij=a("a"),uMo=o("GPTNeoModel"),bMo=o(" (GPT Neo model)"),vMo=l(),A_=a("li"),Yce=a("strong"),FMo=o("gpt_neox"),TMo=o(" \u2014 "),Nj=a("a"),MMo=o("GPTNeoXModel"),EMo=o(" (GPT NeoX model)"),CMo=l(),L_=a("li"),Kce=a("strong"),wMo=o("gptj"),AMo=o(" \u2014 "),qj=a("a"),LMo=o("GPTJModel"),yMo=o(" (GPT-J model)"),xMo=l(),y_=a("li"),Zce=a("strong"),$Mo=o("groupvit"),kMo=o(" \u2014 "),jj=a("a"),SMo=o("GroupViTModel"),RMo=o(" (GroupViT model)"),PMo=l(),x_=a("li"),efe=a("strong"),BMo=o("hubert"),IMo=o(" \u2014 "),Dj=a("a"),NMo=o("HubertModel"),qMo=o(" (Hubert model)"),jMo=l(),$_=a("li"),ofe=a("strong"),DMo=o("ibert"),GMo=o(" \u2014 "),Gj=a("a"),OMo=o("IBertModel"),VMo=o(" (I-BERT model)"),XMo=l(),k_=a("li"),rfe=a("strong"),zMo=o("imagegpt"),QMo=o(" \u2014 "),Oj=a("a"),WMo=o("ImageGPTModel"),HMo=o(" (ImageGPT model)"),UMo=l(),S_=a("li"),tfe=a("strong"),JMo=o("layoutlm"),YMo=o(" \u2014 "),Vj=a("a"),KMo=o("LayoutLMModel"),ZMo=o(" (LayoutLM model)"),e4o=l(),R_=a("li"),afe=a("strong"),o4o=o("layoutlmv2"),r4o=o(" \u2014 "),Xj=a("a"),t4o=o("LayoutLMv2Model"),a4o=o(" (LayoutLMv2 model)"),n4o=l(),P_=a("li"),nfe=a("strong"),s4o=o("layoutlmv3"),l4o=o(" \u2014 "),zj=a("a"),i4o=o("LayoutLMv3Model"),d4o=o(" (LayoutLMv3 model)"),c4o=l(),B_=a("li"),sfe=a("strong"),f4o=o("led"),m4o=o(" \u2014 "),Qj=a("a"),g4o=o("LEDModel"),h4o=o(" (LED model)"),p4o=l(),I_=a("li"),lfe=a("strong"),_4o=o("levit"),u4o=o(" \u2014 "),Wj=a("a"),b4o=o("LevitModel"),v4o=o(" (LeViT model)"),F4o=l(),N_=a("li"),ife=a("strong"),T4o=o("longformer"),M4o=o(" \u2014 "),Hj=a("a"),E4o=o("LongformerModel"),C4o=o(" (Longformer model)"),w4o=l(),q_=a("li"),dfe=a("strong"),A4o=o("longt5"),L4o=o(" \u2014 "),Uj=a("a"),y4o=o("LongT5Model"),x4o=o(" (LongT5 model)"),$4o=l(),j_=a("li"),cfe=a("strong"),k4o=o("luke"),S4o=o(" \u2014 "),Jj=a("a"),R4o=o("LukeModel"),P4o=o(" (LUKE model)"),B4o=l(),D_=a("li"),ffe=a("strong"),I4o=o("lxmert"),N4o=o(" \u2014 "),Yj=a("a"),q4o=o("LxmertModel"),j4o=o(" (LXMERT model)"),D4o=l(),G_=a("li"),mfe=a("strong"),G4o=o("m2m_100"),O4o=o(" \u2014 "),Kj=a("a"),V4o=o("M2M100Model"),X4o=o(" (M2M100 model)"),z4o=l(),O_=a("li"),gfe=a("strong"),Q4o=o("marian"),W4o=o(" \u2014 "),Zj=a("a"),H4o=o("MarianModel"),U4o=o(" (Marian model)"),J4o=l(),V_=a("li"),hfe=a("strong"),Y4o=o("maskformer"),K4o=o(" \u2014 "),eD=a("a"),Z4o=o("MaskFormerModel"),eEo=o(" (MaskFormer model)"),oEo=l(),X_=a("li"),pfe=a("strong"),rEo=o("mbart"),tEo=o(" \u2014 "),oD=a("a"),aEo=o("MBartModel"),nEo=o(" (mBART model)"),sEo=l(),z_=a("li"),_fe=a("strong"),lEo=o("mctct"),iEo=o(" \u2014 "),rD=a("a"),dEo=o("MCTCTModel"),cEo=o(" (M-CTC-T model)"),fEo=l(),Q_=a("li"),ufe=a("strong"),mEo=o("megatron-bert"),gEo=o(" \u2014 "),tD=a("a"),hEo=o("MegatronBertModel"),pEo=o(" (Megatron-BERT model)"),_Eo=l(),W_=a("li"),bfe=a("strong"),uEo=o("mobilebert"),bEo=o(" \u2014 "),aD=a("a"),vEo=o("MobileBertModel"),FEo=o(" (MobileBERT model)"),TEo=l(),H_=a("li"),vfe=a("strong"),MEo=o("mobilevit"),EEo=o(" \u2014 "),nD=a("a"),CEo=o("MobileViTModel"),wEo=o(" (MobileViT model)"),AEo=l(),U_=a("li"),Ffe=a("strong"),LEo=o("mpnet"),yEo=o(" \u2014 "),sD=a("a"),xEo=o("MPNetModel"),$Eo=o(" (MPNet model)"),kEo=l(),J_=a("li"),Tfe=a("strong"),SEo=o("mt5"),REo=o(" \u2014 "),lD=a("a"),PEo=o("MT5Model"),BEo=o(" (MT5 model)"),IEo=l(),Y_=a("li"),Mfe=a("strong"),NEo=o("mvp"),qEo=o(" \u2014 "),iD=a("a"),jEo=o("MvpModel"),DEo=o(" (MVP model)"),GEo=l(),K_=a("li"),Efe=a("strong"),OEo=o("nezha"),VEo=o(" \u2014 "),dD=a("a"),XEo=o("NezhaModel"),zEo=o(" (Nezha model)"),QEo=l(),Z_=a("li"),Cfe=a("strong"),WEo=o("nystromformer"),HEo=o(" \u2014 "),cD=a("a"),UEo=o("NystromformerModel"),JEo=o(" (Nystr\xF6mformer model)"),YEo=l(),eu=a("li"),wfe=a("strong"),KEo=o("openai-gpt"),ZEo=o(" \u2014 "),fD=a("a"),eCo=o("OpenAIGPTModel"),oCo=o(" (OpenAI GPT model)"),rCo=l(),ou=a("li"),Afe=a("strong"),tCo=o("opt"),aCo=o(" \u2014 "),mD=a("a"),nCo=o("OPTModel"),sCo=o(" (OPT model)"),lCo=l(),ru=a("li"),Lfe=a("strong"),iCo=o("pegasus"),dCo=o(" \u2014 "),gD=a("a"),cCo=o("PegasusModel"),fCo=o(" (Pegasus model)"),mCo=l(),tu=a("li"),yfe=a("strong"),gCo=o("perceiver"),hCo=o(" \u2014 "),hD=a("a"),pCo=o("PerceiverModel"),_Co=o(" (Perceiver model)"),uCo=l(),au=a("li"),xfe=a("strong"),bCo=o("plbart"),vCo=o(" \u2014 "),pD=a("a"),FCo=o("PLBartModel"),TCo=o(" (PLBart model)"),MCo=l(),nu=a("li"),$fe=a("strong"),ECo=o("poolformer"),CCo=o(" \u2014 "),_D=a("a"),wCo=o("PoolFormerModel"),ACo=o(" (PoolFormer model)"),LCo=l(),su=a("li"),kfe=a("strong"),yCo=o("prophetnet"),xCo=o(" \u2014 "),uD=a("a"),$Co=o("ProphetNetModel"),kCo=o(" (ProphetNet model)"),SCo=l(),lu=a("li"),Sfe=a("strong"),RCo=o("qdqbert"),PCo=o(" \u2014 "),bD=a("a"),BCo=o("QDQBertModel"),ICo=o(" (QDQBert model)"),NCo=l(),iu=a("li"),Rfe=a("strong"),qCo=o("reformer"),jCo=o(" \u2014 "),vD=a("a"),DCo=o("ReformerModel"),GCo=o(" (Reformer model)"),OCo=l(),du=a("li"),Pfe=a("strong"),VCo=o("regnet"),XCo=o(" \u2014 "),FD=a("a"),zCo=o("RegNetModel"),QCo=o(" (RegNet model)"),WCo=l(),cu=a("li"),Bfe=a("strong"),HCo=o("rembert"),UCo=o(" \u2014 "),TD=a("a"),JCo=o("RemBertModel"),YCo=o(" (RemBERT model)"),KCo=l(),fu=a("li"),Ife=a("strong"),ZCo=o("resnet"),e3o=o(" \u2014 "),MD=a("a"),o3o=o("ResNetModel"),r3o=o(" (ResNet model)"),t3o=l(),mu=a("li"),Nfe=a("strong"),a3o=o("retribert"),n3o=o(" \u2014 "),ED=a("a"),s3o=o("RetriBertModel"),l3o=o(" (RetriBERT model)"),i3o=l(),gu=a("li"),qfe=a("strong"),d3o=o("roberta"),c3o=o(" \u2014 "),CD=a("a"),f3o=o("RobertaModel"),m3o=o(" (RoBERTa model)"),g3o=l(),hu=a("li"),jfe=a("strong"),h3o=o("roformer"),p3o=o(" \u2014 "),wD=a("a"),_3o=o("RoFormerModel"),u3o=o(" (RoFormer model)"),b3o=l(),pu=a("li"),Dfe=a("strong"),v3o=o("segformer"),F3o=o(" \u2014 "),AD=a("a"),T3o=o("SegformerModel"),M3o=o(" (SegFormer model)"),E3o=l(),_u=a("li"),Gfe=a("strong"),C3o=o("sew"),w3o=o(" \u2014 "),LD=a("a"),A3o=o("SEWModel"),L3o=o(" (SEW model)"),y3o=l(),uu=a("li"),Ofe=a("strong"),x3o=o("sew-d"),$3o=o(" \u2014 "),yD=a("a"),k3o=o("SEWDModel"),S3o=o(" (SEW-D model)"),R3o=l(),bu=a("li"),Vfe=a("strong"),P3o=o("speech_to_text"),B3o=o(" \u2014 "),xD=a("a"),I3o=o("Speech2TextModel"),N3o=o(" (Speech2Text model)"),q3o=l(),vu=a("li"),Xfe=a("strong"),j3o=o("splinter"),D3o=o(" \u2014 "),$D=a("a"),G3o=o("SplinterModel"),O3o=o(" (Splinter model)"),V3o=l(),Fu=a("li"),zfe=a("strong"),X3o=o("squeezebert"),z3o=o(" \u2014 "),kD=a("a"),Q3o=o("SqueezeBertModel"),W3o=o(" (SqueezeBERT model)"),H3o=l(),Tu=a("li"),Qfe=a("strong"),U3o=o("swin"),J3o=o(" \u2014 "),SD=a("a"),Y3o=o("SwinModel"),K3o=o(" (Swin Transformer model)"),Z3o=l(),Mu=a("li"),Wfe=a("strong"),e5o=o("t5"),o5o=o(" \u2014 "),RD=a("a"),r5o=o("T5Model"),t5o=o(" (T5 model)"),a5o=l(),Eu=a("li"),Hfe=a("strong"),n5o=o("tapas"),s5o=o(" \u2014 "),PD=a("a"),l5o=o("TapasModel"),i5o=o(" (TAPAS model)"),d5o=l(),Cu=a("li"),Ufe=a("strong"),c5o=o("trajectory_transformer"),f5o=o(" \u2014 "),BD=a("a"),m5o=o("TrajectoryTransformerModel"),g5o=o(" (Trajectory Transformer model)"),h5o=l(),wu=a("li"),Jfe=a("strong"),p5o=o("transfo-xl"),_5o=o(" \u2014 "),ID=a("a"),u5o=o("TransfoXLModel"),b5o=o(" (Transformer-XL model)"),v5o=l(),Au=a("li"),Yfe=a("strong"),F5o=o("unispeech"),T5o=o(" \u2014 "),ND=a("a"),M5o=o("UniSpeechModel"),E5o=o(" (UniSpeech model)"),C5o=l(),Lu=a("li"),Kfe=a("strong"),w5o=o("unispeech-sat"),A5o=o(" \u2014 "),qD=a("a"),L5o=o("UniSpeechSatModel"),y5o=o(" (UniSpeechSat model)"),x5o=l(),yu=a("li"),Zfe=a("strong"),$5o=o("van"),k5o=o(" \u2014 "),jD=a("a"),S5o=o("VanModel"),R5o=o(" (VAN model)"),P5o=l(),xu=a("li"),eme=a("strong"),B5o=o("vilt"),I5o=o(" \u2014 "),DD=a("a"),N5o=o("ViltModel"),q5o=o(" (ViLT model)"),j5o=l(),$u=a("li"),ome=a("strong"),D5o=o("vision-text-dual-encoder"),G5o=o(" \u2014 "),GD=a("a"),O5o=o("VisionTextDualEncoderModel"),V5o=o(" (VisionTextDualEncoder model)"),X5o=l(),ku=a("li"),rme=a("strong"),z5o=o("visual_bert"),Q5o=o(" \u2014 "),OD=a("a"),W5o=o("VisualBertModel"),H5o=o(" (VisualBERT model)"),U5o=l(),Su=a("li"),tme=a("strong"),J5o=o("vit"),Y5o=o(" \u2014 "),VD=a("a"),K5o=o("ViTModel"),Z5o=o(" (ViT model)"),ewo=l(),Ru=a("li"),ame=a("strong"),owo=o("vit_mae"),rwo=o(" \u2014 "),XD=a("a"),two=o("ViTMAEModel"),awo=o(" (ViTMAE model)"),nwo=l(),Pu=a("li"),nme=a("strong"),swo=o("wav2vec2"),lwo=o(" \u2014 "),zD=a("a"),iwo=o("Wav2Vec2Model"),dwo=o(" (Wav2Vec2 model)"),cwo=l(),Bu=a("li"),sme=a("strong"),fwo=o("wav2vec2-conformer"),mwo=o(" \u2014 "),QD=a("a"),gwo=o("Wav2Vec2ConformerModel"),hwo=o(" (Wav2Vec2-Conformer model)"),pwo=l(),Iu=a("li"),lme=a("strong"),_wo=o("wavlm"),uwo=o(" \u2014 "),WD=a("a"),bwo=o("WavLMModel"),vwo=o(" (WavLM model)"),Fwo=l(),Nu=a("li"),ime=a("strong"),Two=o("xglm"),Mwo=o(" \u2014 "),HD=a("a"),Ewo=o("XGLMModel"),Cwo=o(" (XGLM model)"),wwo=l(),qu=a("li"),dme=a("strong"),Awo=o("xlm"),Lwo=o(" \u2014 "),UD=a("a"),ywo=o("XLMModel"),xwo=o(" (XLM model)"),$wo=l(),ju=a("li"),cme=a("strong"),kwo=o("xlm-prophetnet"),Swo=o(" \u2014 "),JD=a("a"),Rwo=o("XLMProphetNetModel"),Pwo=o(" (XLM-ProphetNet model)"),Bwo=l(),Du=a("li"),fme=a("strong"),Iwo=o("xlm-roberta"),Nwo=o(" \u2014 "),YD=a("a"),qwo=o("XLMRobertaModel"),jwo=o(" (XLM-RoBERTa model)"),Dwo=l(),Gu=a("li"),mme=a("strong"),Gwo=o("xlm-roberta-xl"),Owo=o(" \u2014 "),KD=a("a"),Vwo=o("XLMRobertaXLModel"),Xwo=o(" (XLM-RoBERTa-XL model)"),zwo=l(),Ou=a("li"),gme=a("strong"),Qwo=o("xlnet"),Wwo=o(" \u2014 "),ZD=a("a"),Hwo=o("XLNetModel"),Uwo=o(" (XLNet model)"),Jwo=l(),Vu=a("li"),hme=a("strong"),Ywo=o("yolos"),Kwo=o(" \u2014 "),eG=a("a"),Zwo=o("YolosModel"),eAo=o(" (YOLOS model)"),oAo=l(),Xu=a("li"),pme=a("strong"),rAo=o("yoso"),tAo=o(" \u2014 "),oG=a("a"),aAo=o("YosoModel"),nAo=o(" (YOSO model)"),sAo=l(),zu=a("p"),lAo=o("The model is set in evaluation mode by default using "),_me=a("code"),iAo=o("model.eval()"),dAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ume=a("code"),cAo=o("model.train()"),fAo=l(),F(Qu.$$.fragment),FXe=l(),Xi=a("h2"),Wu=a("a"),bme=a("span"),F(NL.$$.fragment),mAo=l(),vme=a("span"),gAo=o("AutoModelForPreTraining"),TXe=l(),So=a("div"),F(qL.$$.fragment),hAo=l(),zi=a("p"),pAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),rG=a("a"),_Ao=o("from_pretrained()"),uAo=o(" class method or the "),tG=a("a"),bAo=o("from_config()"),vAo=o(` class
method.`),FAo=l(),jL=a("p"),TAo=o("This class cannot be instantiated directly using "),Fme=a("code"),MAo=o("__init__()"),EAo=o(" (throws an error)."),CAo=l(),dt=a("div"),F(DL.$$.fragment),wAo=l(),Tme=a("p"),AAo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),LAo=l(),Qi=a("p"),yAo=o(`Note:
Loading a model from its configuration file does `),Mme=a("strong"),xAo=o("not"),$Ao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aG=a("a"),kAo=o("from_pretrained()"),SAo=o(" to load the model weights."),RAo=l(),F(Hu.$$.fragment),PAo=l(),Ke=a("div"),F(GL.$$.fragment),BAo=l(),Eme=a("p"),IAo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),NAo=l(),Na=a("p"),qAo=o("The model class to instantiate is selected based on the "),Cme=a("code"),jAo=o("model_type"),DAo=o(` property of the config object (either
passed as an argument or loaded from `),wme=a("code"),GAo=o("pretrained_model_name_or_path"),OAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=a("code"),VAo=o("pretrained_model_name_or_path"),XAo=o(":"),zAo=l(),G=a("ul"),Uu=a("li"),Lme=a("strong"),QAo=o("albert"),WAo=o(" \u2014 "),nG=a("a"),HAo=o("AlbertForPreTraining"),UAo=o(" (ALBERT model)"),JAo=l(),Ju=a("li"),yme=a("strong"),YAo=o("bart"),KAo=o(" \u2014 "),sG=a("a"),ZAo=o("BartForConditionalGeneration"),e6o=o(" (BART model)"),o6o=l(),Yu=a("li"),xme=a("strong"),r6o=o("bert"),t6o=o(" \u2014 "),lG=a("a"),a6o=o("BertForPreTraining"),n6o=o(" (BERT model)"),s6o=l(),Ku=a("li"),$me=a("strong"),l6o=o("big_bird"),i6o=o(" \u2014 "),iG=a("a"),d6o=o("BigBirdForPreTraining"),c6o=o(" (BigBird model)"),f6o=l(),Zu=a("li"),kme=a("strong"),m6o=o("bloom"),g6o=o(" \u2014 "),dG=a("a"),h6o=o("BloomForCausalLM"),p6o=o(" (BLOOM model)"),_6o=l(),e1=a("li"),Sme=a("strong"),u6o=o("camembert"),b6o=o(" \u2014 "),cG=a("a"),v6o=o("CamembertForMaskedLM"),F6o=o(" (CamemBERT model)"),T6o=l(),o1=a("li"),Rme=a("strong"),M6o=o("ctrl"),E6o=o(" \u2014 "),fG=a("a"),C6o=o("CTRLLMHeadModel"),w6o=o(" (CTRL model)"),A6o=l(),r1=a("li"),Pme=a("strong"),L6o=o("data2vec-text"),y6o=o(" \u2014 "),mG=a("a"),x6o=o("Data2VecTextForMaskedLM"),$6o=o(" (Data2VecText model)"),k6o=l(),t1=a("li"),Bme=a("strong"),S6o=o("deberta"),R6o=o(" \u2014 "),gG=a("a"),P6o=o("DebertaForMaskedLM"),B6o=o(" (DeBERTa model)"),I6o=l(),a1=a("li"),Ime=a("strong"),N6o=o("deberta-v2"),q6o=o(" \u2014 "),hG=a("a"),j6o=o("DebertaV2ForMaskedLM"),D6o=o(" (DeBERTa-v2 model)"),G6o=l(),n1=a("li"),Nme=a("strong"),O6o=o("distilbert"),V6o=o(" \u2014 "),pG=a("a"),X6o=o("DistilBertForMaskedLM"),z6o=o(" (DistilBERT model)"),Q6o=l(),s1=a("li"),qme=a("strong"),W6o=o("electra"),H6o=o(" \u2014 "),_G=a("a"),U6o=o("ElectraForPreTraining"),J6o=o(" (ELECTRA model)"),Y6o=l(),l1=a("li"),jme=a("strong"),K6o=o("flaubert"),Z6o=o(" \u2014 "),uG=a("a"),eLo=o("FlaubertWithLMHeadModel"),oLo=o(" (FlauBERT model)"),rLo=l(),i1=a("li"),Dme=a("strong"),tLo=o("flava"),aLo=o(" \u2014 "),bG=a("a"),nLo=o("FlavaForPreTraining"),sLo=o(" (FLAVA model)"),lLo=l(),d1=a("li"),Gme=a("strong"),iLo=o("fnet"),dLo=o(" \u2014 "),vG=a("a"),cLo=o("FNetForPreTraining"),fLo=o(" (FNet model)"),mLo=l(),c1=a("li"),Ome=a("strong"),gLo=o("fsmt"),hLo=o(" \u2014 "),FG=a("a"),pLo=o("FSMTForConditionalGeneration"),_Lo=o(" (FairSeq Machine-Translation model)"),uLo=l(),f1=a("li"),Vme=a("strong"),bLo=o("funnel"),vLo=o(" \u2014 "),TG=a("a"),FLo=o("FunnelForPreTraining"),TLo=o(" (Funnel Transformer model)"),MLo=l(),m1=a("li"),Xme=a("strong"),ELo=o("gpt2"),CLo=o(" \u2014 "),MG=a("a"),wLo=o("GPT2LMHeadModel"),ALo=o(" (OpenAI GPT-2 model)"),LLo=l(),g1=a("li"),zme=a("strong"),yLo=o("ibert"),xLo=o(" \u2014 "),EG=a("a"),$Lo=o("IBertForMaskedLM"),kLo=o(" (I-BERT model)"),SLo=l(),h1=a("li"),Qme=a("strong"),RLo=o("layoutlm"),PLo=o(" \u2014 "),CG=a("a"),BLo=o("LayoutLMForMaskedLM"),ILo=o(" (LayoutLM model)"),NLo=l(),p1=a("li"),Wme=a("strong"),qLo=o("longformer"),jLo=o(" \u2014 "),wG=a("a"),DLo=o("LongformerForMaskedLM"),GLo=o(" (Longformer model)"),OLo=l(),_1=a("li"),Hme=a("strong"),VLo=o("lxmert"),XLo=o(" \u2014 "),AG=a("a"),zLo=o("LxmertForPreTraining"),QLo=o(" (LXMERT model)"),WLo=l(),u1=a("li"),Ume=a("strong"),HLo=o("megatron-bert"),ULo=o(" \u2014 "),LG=a("a"),JLo=o("MegatronBertForPreTraining"),YLo=o(" (Megatron-BERT model)"),KLo=l(),b1=a("li"),Jme=a("strong"),ZLo=o("mobilebert"),eyo=o(" \u2014 "),yG=a("a"),oyo=o("MobileBertForPreTraining"),ryo=o(" (MobileBERT model)"),tyo=l(),v1=a("li"),Yme=a("strong"),ayo=o("mpnet"),nyo=o(" \u2014 "),xG=a("a"),syo=o("MPNetForMaskedLM"),lyo=o(" (MPNet model)"),iyo=l(),F1=a("li"),Kme=a("strong"),dyo=o("mvp"),cyo=o(" \u2014 "),$G=a("a"),fyo=o("MvpForConditionalGeneration"),myo=o(" (MVP model)"),gyo=l(),T1=a("li"),Zme=a("strong"),hyo=o("nezha"),pyo=o(" \u2014 "),kG=a("a"),_yo=o("NezhaForPreTraining"),uyo=o(" (Nezha model)"),byo=l(),M1=a("li"),ege=a("strong"),vyo=o("openai-gpt"),Fyo=o(" \u2014 "),SG=a("a"),Tyo=o("OpenAIGPTLMHeadModel"),Myo=o(" (OpenAI GPT model)"),Eyo=l(),E1=a("li"),oge=a("strong"),Cyo=o("retribert"),wyo=o(" \u2014 "),RG=a("a"),Ayo=o("RetriBertModel"),Lyo=o(" (RetriBERT model)"),yyo=l(),C1=a("li"),rge=a("strong"),xyo=o("roberta"),$yo=o(" \u2014 "),PG=a("a"),kyo=o("RobertaForMaskedLM"),Syo=o(" (RoBERTa model)"),Ryo=l(),w1=a("li"),tge=a("strong"),Pyo=o("splinter"),Byo=o(" \u2014 "),BG=a("a"),Iyo=o("SplinterForPreTraining"),Nyo=o(" (Splinter model)"),qyo=l(),A1=a("li"),age=a("strong"),jyo=o("squeezebert"),Dyo=o(" \u2014 "),IG=a("a"),Gyo=o("SqueezeBertForMaskedLM"),Oyo=o(" (SqueezeBERT model)"),Vyo=l(),L1=a("li"),nge=a("strong"),Xyo=o("t5"),zyo=o(" \u2014 "),NG=a("a"),Qyo=o("T5ForConditionalGeneration"),Wyo=o(" (T5 model)"),Hyo=l(),y1=a("li"),sge=a("strong"),Uyo=o("tapas"),Jyo=o(" \u2014 "),qG=a("a"),Yyo=o("TapasForMaskedLM"),Kyo=o(" (TAPAS model)"),Zyo=l(),x1=a("li"),lge=a("strong"),e8o=o("transfo-xl"),o8o=o(" \u2014 "),jG=a("a"),r8o=o("TransfoXLLMHeadModel"),t8o=o(" (Transformer-XL model)"),a8o=l(),$1=a("li"),ige=a("strong"),n8o=o("unispeech"),s8o=o(" \u2014 "),DG=a("a"),l8o=o("UniSpeechForPreTraining"),i8o=o(" (UniSpeech model)"),d8o=l(),k1=a("li"),dge=a("strong"),c8o=o("unispeech-sat"),f8o=o(" \u2014 "),GG=a("a"),m8o=o("UniSpeechSatForPreTraining"),g8o=o(" (UniSpeechSat model)"),h8o=l(),S1=a("li"),cge=a("strong"),p8o=o("visual_bert"),_8o=o(" \u2014 "),OG=a("a"),u8o=o("VisualBertForPreTraining"),b8o=o(" (VisualBERT model)"),v8o=l(),R1=a("li"),fge=a("strong"),F8o=o("vit_mae"),T8o=o(" \u2014 "),VG=a("a"),M8o=o("ViTMAEForPreTraining"),E8o=o(" (ViTMAE model)"),C8o=l(),P1=a("li"),mge=a("strong"),w8o=o("wav2vec2"),A8o=o(" \u2014 "),XG=a("a"),L8o=o("Wav2Vec2ForPreTraining"),y8o=o(" (Wav2Vec2 model)"),x8o=l(),B1=a("li"),gge=a("strong"),$8o=o("wav2vec2-conformer"),k8o=o(" \u2014 "),zG=a("a"),S8o=o("Wav2Vec2ConformerForPreTraining"),R8o=o(" (Wav2Vec2-Conformer model)"),P8o=l(),I1=a("li"),hge=a("strong"),B8o=o("xlm"),I8o=o(" \u2014 "),QG=a("a"),N8o=o("XLMWithLMHeadModel"),q8o=o(" (XLM model)"),j8o=l(),N1=a("li"),pge=a("strong"),D8o=o("xlm-roberta"),G8o=o(" \u2014 "),WG=a("a"),O8o=o("XLMRobertaForMaskedLM"),V8o=o(" (XLM-RoBERTa model)"),X8o=l(),q1=a("li"),_ge=a("strong"),z8o=o("xlm-roberta-xl"),Q8o=o(" \u2014 "),HG=a("a"),W8o=o("XLMRobertaXLForMaskedLM"),H8o=o(" (XLM-RoBERTa-XL model)"),U8o=l(),j1=a("li"),uge=a("strong"),J8o=o("xlnet"),Y8o=o(" \u2014 "),UG=a("a"),K8o=o("XLNetLMHeadModel"),Z8o=o(" (XLNet model)"),exo=l(),D1=a("p"),oxo=o("The model is set in evaluation mode by default using "),bge=a("code"),rxo=o("model.eval()"),txo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vge=a("code"),axo=o("model.train()"),nxo=l(),F(G1.$$.fragment),MXe=l(),Wi=a("h2"),O1=a("a"),Fge=a("span"),F(OL.$$.fragment),sxo=l(),Tge=a("span"),lxo=o("AutoModelForCausalLM"),EXe=l(),Ro=a("div"),F(VL.$$.fragment),ixo=l(),Hi=a("p"),dxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JG=a("a"),cxo=o("from_pretrained()"),fxo=o(" class method or the "),YG=a("a"),mxo=o("from_config()"),gxo=o(` class
method.`),hxo=l(),XL=a("p"),pxo=o("This class cannot be instantiated directly using "),Mge=a("code"),_xo=o("__init__()"),uxo=o(" (throws an error)."),bxo=l(),ct=a("div"),F(zL.$$.fragment),vxo=l(),Ege=a("p"),Fxo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Txo=l(),Ui=a("p"),Mxo=o(`Note:
Loading a model from its configuration file does `),Cge=a("strong"),Exo=o("not"),Cxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=a("a"),wxo=o("from_pretrained()"),Axo=o(" to load the model weights."),Lxo=l(),F(V1.$$.fragment),yxo=l(),Ze=a("div"),F(QL.$$.fragment),xxo=l(),wge=a("p"),$xo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kxo=l(),qa=a("p"),Sxo=o("The model class to instantiate is selected based on the "),Age=a("code"),Rxo=o("model_type"),Pxo=o(` property of the config object (either
passed as an argument or loaded from `),Lge=a("code"),Bxo=o("pretrained_model_name_or_path"),Ixo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=a("code"),Nxo=o("pretrained_model_name_or_path"),qxo=o(":"),jxo=l(),z=a("ul"),X1=a("li"),xge=a("strong"),Dxo=o("bart"),Gxo=o(" \u2014 "),ZG=a("a"),Oxo=o("BartForCausalLM"),Vxo=o(" (BART model)"),Xxo=l(),z1=a("li"),$ge=a("strong"),zxo=o("bert"),Qxo=o(" \u2014 "),eO=a("a"),Wxo=o("BertLMHeadModel"),Hxo=o(" (BERT model)"),Uxo=l(),Q1=a("li"),kge=a("strong"),Jxo=o("bert-generation"),Yxo=o(" \u2014 "),oO=a("a"),Kxo=o("BertGenerationDecoder"),Zxo=o(" (Bert Generation model)"),e$o=l(),W1=a("li"),Sge=a("strong"),o$o=o("big_bird"),r$o=o(" \u2014 "),rO=a("a"),t$o=o("BigBirdForCausalLM"),a$o=o(" (BigBird model)"),n$o=l(),H1=a("li"),Rge=a("strong"),s$o=o("bigbird_pegasus"),l$o=o(" \u2014 "),tO=a("a"),i$o=o("BigBirdPegasusForCausalLM"),d$o=o(" (BigBird-Pegasus model)"),c$o=l(),U1=a("li"),Pge=a("strong"),f$o=o("blenderbot"),m$o=o(" \u2014 "),aO=a("a"),g$o=o("BlenderbotForCausalLM"),h$o=o(" (Blenderbot model)"),p$o=l(),J1=a("li"),Bge=a("strong"),_$o=o("blenderbot-small"),u$o=o(" \u2014 "),nO=a("a"),b$o=o("BlenderbotSmallForCausalLM"),v$o=o(" (BlenderbotSmall model)"),F$o=l(),Y1=a("li"),Ige=a("strong"),T$o=o("bloom"),M$o=o(" \u2014 "),sO=a("a"),E$o=o("BloomForCausalLM"),C$o=o(" (BLOOM model)"),w$o=l(),K1=a("li"),Nge=a("strong"),A$o=o("camembert"),L$o=o(" \u2014 "),lO=a("a"),y$o=o("CamembertForCausalLM"),x$o=o(" (CamemBERT model)"),$$o=l(),Z1=a("li"),qge=a("strong"),k$o=o("codegen"),S$o=o(" \u2014 "),iO=a("a"),R$o=o("CodeGenForCausalLM"),P$o=o(" (CodeGen model)"),B$o=l(),e2=a("li"),jge=a("strong"),I$o=o("ctrl"),N$o=o(" \u2014 "),dO=a("a"),q$o=o("CTRLLMHeadModel"),j$o=o(" (CTRL model)"),D$o=l(),o2=a("li"),Dge=a("strong"),G$o=o("data2vec-text"),O$o=o(" \u2014 "),cO=a("a"),V$o=o("Data2VecTextForCausalLM"),X$o=o(" (Data2VecText model)"),z$o=l(),r2=a("li"),Gge=a("strong"),Q$o=o("electra"),W$o=o(" \u2014 "),fO=a("a"),H$o=o("ElectraForCausalLM"),U$o=o(" (ELECTRA model)"),J$o=l(),t2=a("li"),Oge=a("strong"),Y$o=o("gpt2"),K$o=o(" \u2014 "),mO=a("a"),Z$o=o("GPT2LMHeadModel"),eko=o(" (OpenAI GPT-2 model)"),oko=l(),a2=a("li"),Vge=a("strong"),rko=o("gpt_neo"),tko=o(" \u2014 "),gO=a("a"),ako=o("GPTNeoForCausalLM"),nko=o(" (GPT Neo model)"),sko=l(),n2=a("li"),Xge=a("strong"),lko=o("gpt_neox"),iko=o(" \u2014 "),hO=a("a"),dko=o("GPTNeoXForCausalLM"),cko=o(" (GPT NeoX model)"),fko=l(),s2=a("li"),zge=a("strong"),mko=o("gptj"),gko=o(" \u2014 "),pO=a("a"),hko=o("GPTJForCausalLM"),pko=o(" (GPT-J model)"),_ko=l(),l2=a("li"),Qge=a("strong"),uko=o("marian"),bko=o(" \u2014 "),_O=a("a"),vko=o("MarianForCausalLM"),Fko=o(" (Marian model)"),Tko=l(),i2=a("li"),Wge=a("strong"),Mko=o("mbart"),Eko=o(" \u2014 "),uO=a("a"),Cko=o("MBartForCausalLM"),wko=o(" (mBART model)"),Ako=l(),d2=a("li"),Hge=a("strong"),Lko=o("megatron-bert"),yko=o(" \u2014 "),bO=a("a"),xko=o("MegatronBertForCausalLM"),$ko=o(" (Megatron-BERT model)"),kko=l(),c2=a("li"),Uge=a("strong"),Sko=o("mvp"),Rko=o(" \u2014 "),vO=a("a"),Pko=o("MvpForCausalLM"),Bko=o(" (MVP model)"),Iko=l(),f2=a("li"),Jge=a("strong"),Nko=o("openai-gpt"),qko=o(" \u2014 "),FO=a("a"),jko=o("OpenAIGPTLMHeadModel"),Dko=o(" (OpenAI GPT model)"),Gko=l(),m2=a("li"),Yge=a("strong"),Oko=o("opt"),Vko=o(" \u2014 "),TO=a("a"),Xko=o("OPTForCausalLM"),zko=o(" (OPT model)"),Qko=l(),g2=a("li"),Kge=a("strong"),Wko=o("pegasus"),Hko=o(" \u2014 "),MO=a("a"),Uko=o("PegasusForCausalLM"),Jko=o(" (Pegasus model)"),Yko=l(),h2=a("li"),Zge=a("strong"),Kko=o("plbart"),Zko=o(" \u2014 "),EO=a("a"),eSo=o("PLBartForCausalLM"),oSo=o(" (PLBart model)"),rSo=l(),p2=a("li"),ehe=a("strong"),tSo=o("prophetnet"),aSo=o(" \u2014 "),CO=a("a"),nSo=o("ProphetNetForCausalLM"),sSo=o(" (ProphetNet model)"),lSo=l(),_2=a("li"),ohe=a("strong"),iSo=o("qdqbert"),dSo=o(" \u2014 "),wO=a("a"),cSo=o("QDQBertLMHeadModel"),fSo=o(" (QDQBert model)"),mSo=l(),u2=a("li"),rhe=a("strong"),gSo=o("reformer"),hSo=o(" \u2014 "),AO=a("a"),pSo=o("ReformerModelWithLMHead"),_So=o(" (Reformer model)"),uSo=l(),b2=a("li"),the=a("strong"),bSo=o("rembert"),vSo=o(" \u2014 "),LO=a("a"),FSo=o("RemBertForCausalLM"),TSo=o(" (RemBERT model)"),MSo=l(),v2=a("li"),ahe=a("strong"),ESo=o("roberta"),CSo=o(" \u2014 "),yO=a("a"),wSo=o("RobertaForCausalLM"),ASo=o(" (RoBERTa model)"),LSo=l(),F2=a("li"),nhe=a("strong"),ySo=o("roformer"),xSo=o(" \u2014 "),xO=a("a"),$So=o("RoFormerForCausalLM"),kSo=o(" (RoFormer model)"),SSo=l(),T2=a("li"),she=a("strong"),RSo=o("speech_to_text_2"),PSo=o(" \u2014 "),$O=a("a"),BSo=o("Speech2Text2ForCausalLM"),ISo=o(" (Speech2Text2 model)"),NSo=l(),M2=a("li"),lhe=a("strong"),qSo=o("transfo-xl"),jSo=o(" \u2014 "),kO=a("a"),DSo=o("TransfoXLLMHeadModel"),GSo=o(" (Transformer-XL model)"),OSo=l(),E2=a("li"),ihe=a("strong"),VSo=o("trocr"),XSo=o(" \u2014 "),SO=a("a"),zSo=o("TrOCRForCausalLM"),QSo=o(" (TrOCR model)"),WSo=l(),C2=a("li"),dhe=a("strong"),HSo=o("xglm"),USo=o(" \u2014 "),RO=a("a"),JSo=o("XGLMForCausalLM"),YSo=o(" (XGLM model)"),KSo=l(),w2=a("li"),che=a("strong"),ZSo=o("xlm"),eRo=o(" \u2014 "),PO=a("a"),oRo=o("XLMWithLMHeadModel"),rRo=o(" (XLM model)"),tRo=l(),A2=a("li"),fhe=a("strong"),aRo=o("xlm-prophetnet"),nRo=o(" \u2014 "),BO=a("a"),sRo=o("XLMProphetNetForCausalLM"),lRo=o(" (XLM-ProphetNet model)"),iRo=l(),L2=a("li"),mhe=a("strong"),dRo=o("xlm-roberta"),cRo=o(" \u2014 "),IO=a("a"),fRo=o("XLMRobertaForCausalLM"),mRo=o(" (XLM-RoBERTa model)"),gRo=l(),y2=a("li"),ghe=a("strong"),hRo=o("xlm-roberta-xl"),pRo=o(" \u2014 "),NO=a("a"),_Ro=o("XLMRobertaXLForCausalLM"),uRo=o(" (XLM-RoBERTa-XL model)"),bRo=l(),x2=a("li"),hhe=a("strong"),vRo=o("xlnet"),FRo=o(" \u2014 "),qO=a("a"),TRo=o("XLNetLMHeadModel"),MRo=o(" (XLNet model)"),ERo=l(),$2=a("p"),CRo=o("The model is set in evaluation mode by default using "),phe=a("code"),wRo=o("model.eval()"),ARo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_he=a("code"),LRo=o("model.train()"),yRo=l(),F(k2.$$.fragment),CXe=l(),Ji=a("h2"),S2=a("a"),uhe=a("span"),F(WL.$$.fragment),xRo=l(),bhe=a("span"),$Ro=o("AutoModelForMaskedLM"),wXe=l(),Po=a("div"),F(HL.$$.fragment),kRo=l(),Yi=a("p"),SRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jO=a("a"),RRo=o("from_pretrained()"),PRo=o(" class method or the "),DO=a("a"),BRo=o("from_config()"),IRo=o(` class
method.`),NRo=l(),UL=a("p"),qRo=o("This class cannot be instantiated directly using "),vhe=a("code"),jRo=o("__init__()"),DRo=o(" (throws an error)."),GRo=l(),ft=a("div"),F(JL.$$.fragment),ORo=l(),Fhe=a("p"),VRo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),XRo=l(),Ki=a("p"),zRo=o(`Note:
Loading a model from its configuration file does `),The=a("strong"),QRo=o("not"),WRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GO=a("a"),HRo=o("from_pretrained()"),URo=o(" to load the model weights."),JRo=l(),F(R2.$$.fragment),YRo=l(),eo=a("div"),F(YL.$$.fragment),KRo=l(),Mhe=a("p"),ZRo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ePo=l(),ja=a("p"),oPo=o("The model class to instantiate is selected based on the "),Ehe=a("code"),rPo=o("model_type"),tPo=o(` property of the config object (either
passed as an argument or loaded from `),Che=a("code"),aPo=o("pretrained_model_name_or_path"),nPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),whe=a("code"),sPo=o("pretrained_model_name_or_path"),lPo=o(":"),iPo=l(),W=a("ul"),P2=a("li"),Ahe=a("strong"),dPo=o("albert"),cPo=o(" \u2014 "),OO=a("a"),fPo=o("AlbertForMaskedLM"),mPo=o(" (ALBERT model)"),gPo=l(),B2=a("li"),Lhe=a("strong"),hPo=o("bart"),pPo=o(" \u2014 "),VO=a("a"),_Po=o("BartForConditionalGeneration"),uPo=o(" (BART model)"),bPo=l(),I2=a("li"),yhe=a("strong"),vPo=o("bert"),FPo=o(" \u2014 "),XO=a("a"),TPo=o("BertForMaskedLM"),MPo=o(" (BERT model)"),EPo=l(),N2=a("li"),xhe=a("strong"),CPo=o("big_bird"),wPo=o(" \u2014 "),zO=a("a"),APo=o("BigBirdForMaskedLM"),LPo=o(" (BigBird model)"),yPo=l(),q2=a("li"),$he=a("strong"),xPo=o("camembert"),$Po=o(" \u2014 "),QO=a("a"),kPo=o("CamembertForMaskedLM"),SPo=o(" (CamemBERT model)"),RPo=l(),j2=a("li"),khe=a("strong"),PPo=o("convbert"),BPo=o(" \u2014 "),WO=a("a"),IPo=o("ConvBertForMaskedLM"),NPo=o(" (ConvBERT model)"),qPo=l(),D2=a("li"),She=a("strong"),jPo=o("data2vec-text"),DPo=o(" \u2014 "),HO=a("a"),GPo=o("Data2VecTextForMaskedLM"),OPo=o(" (Data2VecText model)"),VPo=l(),G2=a("li"),Rhe=a("strong"),XPo=o("deberta"),zPo=o(" \u2014 "),UO=a("a"),QPo=o("DebertaForMaskedLM"),WPo=o(" (DeBERTa model)"),HPo=l(),O2=a("li"),Phe=a("strong"),UPo=o("deberta-v2"),JPo=o(" \u2014 "),JO=a("a"),YPo=o("DebertaV2ForMaskedLM"),KPo=o(" (DeBERTa-v2 model)"),ZPo=l(),V2=a("li"),Bhe=a("strong"),eBo=o("distilbert"),oBo=o(" \u2014 "),YO=a("a"),rBo=o("DistilBertForMaskedLM"),tBo=o(" (DistilBERT model)"),aBo=l(),X2=a("li"),Ihe=a("strong"),nBo=o("electra"),sBo=o(" \u2014 "),KO=a("a"),lBo=o("ElectraForMaskedLM"),iBo=o(" (ELECTRA model)"),dBo=l(),z2=a("li"),Nhe=a("strong"),cBo=o("flaubert"),fBo=o(" \u2014 "),ZO=a("a"),mBo=o("FlaubertWithLMHeadModel"),gBo=o(" (FlauBERT model)"),hBo=l(),Q2=a("li"),qhe=a("strong"),pBo=o("fnet"),_Bo=o(" \u2014 "),eV=a("a"),uBo=o("FNetForMaskedLM"),bBo=o(" (FNet model)"),vBo=l(),W2=a("li"),jhe=a("strong"),FBo=o("funnel"),TBo=o(" \u2014 "),oV=a("a"),MBo=o("FunnelForMaskedLM"),EBo=o(" (Funnel Transformer model)"),CBo=l(),H2=a("li"),Dhe=a("strong"),wBo=o("ibert"),ABo=o(" \u2014 "),rV=a("a"),LBo=o("IBertForMaskedLM"),yBo=o(" (I-BERT model)"),xBo=l(),U2=a("li"),Ghe=a("strong"),$Bo=o("layoutlm"),kBo=o(" \u2014 "),tV=a("a"),SBo=o("LayoutLMForMaskedLM"),RBo=o(" (LayoutLM model)"),PBo=l(),J2=a("li"),Ohe=a("strong"),BBo=o("longformer"),IBo=o(" \u2014 "),aV=a("a"),NBo=o("LongformerForMaskedLM"),qBo=o(" (Longformer model)"),jBo=l(),Y2=a("li"),Vhe=a("strong"),DBo=o("luke"),GBo=o(" \u2014 "),nV=a("a"),OBo=o("LukeForMaskedLM"),VBo=o(" (LUKE model)"),XBo=l(),K2=a("li"),Xhe=a("strong"),zBo=o("mbart"),QBo=o(" \u2014 "),sV=a("a"),WBo=o("MBartForConditionalGeneration"),HBo=o(" (mBART model)"),UBo=l(),Z2=a("li"),zhe=a("strong"),JBo=o("megatron-bert"),YBo=o(" \u2014 "),lV=a("a"),KBo=o("MegatronBertForMaskedLM"),ZBo=o(" (Megatron-BERT model)"),eIo=l(),eb=a("li"),Qhe=a("strong"),oIo=o("mobilebert"),rIo=o(" \u2014 "),iV=a("a"),tIo=o("MobileBertForMaskedLM"),aIo=o(" (MobileBERT model)"),nIo=l(),ob=a("li"),Whe=a("strong"),sIo=o("mpnet"),lIo=o(" \u2014 "),dV=a("a"),iIo=o("MPNetForMaskedLM"),dIo=o(" (MPNet model)"),cIo=l(),rb=a("li"),Hhe=a("strong"),fIo=o("mvp"),mIo=o(" \u2014 "),cV=a("a"),gIo=o("MvpForConditionalGeneration"),hIo=o(" (MVP model)"),pIo=l(),tb=a("li"),Uhe=a("strong"),_Io=o("nezha"),uIo=o(" \u2014 "),fV=a("a"),bIo=o("NezhaForMaskedLM"),vIo=o(" (Nezha model)"),FIo=l(),ab=a("li"),Jhe=a("strong"),TIo=o("nystromformer"),MIo=o(" \u2014 "),mV=a("a"),EIo=o("NystromformerForMaskedLM"),CIo=o(" (Nystr\xF6mformer model)"),wIo=l(),nb=a("li"),Yhe=a("strong"),AIo=o("perceiver"),LIo=o(" \u2014 "),gV=a("a"),yIo=o("PerceiverForMaskedLM"),xIo=o(" (Perceiver model)"),$Io=l(),sb=a("li"),Khe=a("strong"),kIo=o("qdqbert"),SIo=o(" \u2014 "),hV=a("a"),RIo=o("QDQBertForMaskedLM"),PIo=o(" (QDQBert model)"),BIo=l(),lb=a("li"),Zhe=a("strong"),IIo=o("reformer"),NIo=o(" \u2014 "),pV=a("a"),qIo=o("ReformerForMaskedLM"),jIo=o(" (Reformer model)"),DIo=l(),ib=a("li"),epe=a("strong"),GIo=o("rembert"),OIo=o(" \u2014 "),_V=a("a"),VIo=o("RemBertForMaskedLM"),XIo=o(" (RemBERT model)"),zIo=l(),db=a("li"),ope=a("strong"),QIo=o("roberta"),WIo=o(" \u2014 "),uV=a("a"),HIo=o("RobertaForMaskedLM"),UIo=o(" (RoBERTa model)"),JIo=l(),cb=a("li"),rpe=a("strong"),YIo=o("roformer"),KIo=o(" \u2014 "),bV=a("a"),ZIo=o("RoFormerForMaskedLM"),eNo=o(" (RoFormer model)"),oNo=l(),fb=a("li"),tpe=a("strong"),rNo=o("squeezebert"),tNo=o(" \u2014 "),vV=a("a"),aNo=o("SqueezeBertForMaskedLM"),nNo=o(" (SqueezeBERT model)"),sNo=l(),mb=a("li"),ape=a("strong"),lNo=o("tapas"),iNo=o(" \u2014 "),FV=a("a"),dNo=o("TapasForMaskedLM"),cNo=o(" (TAPAS model)"),fNo=l(),gb=a("li"),npe=a("strong"),mNo=o("wav2vec2"),gNo=o(" \u2014 "),spe=a("code"),hNo=o("Wav2Vec2ForMaskedLM"),pNo=o(" (Wav2Vec2 model)"),_No=l(),hb=a("li"),lpe=a("strong"),uNo=o("xlm"),bNo=o(" \u2014 "),TV=a("a"),vNo=o("XLMWithLMHeadModel"),FNo=o(" (XLM model)"),TNo=l(),pb=a("li"),ipe=a("strong"),MNo=o("xlm-roberta"),ENo=o(" \u2014 "),MV=a("a"),CNo=o("XLMRobertaForMaskedLM"),wNo=o(" (XLM-RoBERTa model)"),ANo=l(),_b=a("li"),dpe=a("strong"),LNo=o("xlm-roberta-xl"),yNo=o(" \u2014 "),EV=a("a"),xNo=o("XLMRobertaXLForMaskedLM"),$No=o(" (XLM-RoBERTa-XL model)"),kNo=l(),ub=a("li"),cpe=a("strong"),SNo=o("yoso"),RNo=o(" \u2014 "),CV=a("a"),PNo=o("YosoForMaskedLM"),BNo=o(" (YOSO model)"),INo=l(),bb=a("p"),NNo=o("The model is set in evaluation mode by default using "),fpe=a("code"),qNo=o("model.eval()"),jNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=a("code"),DNo=o("model.train()"),GNo=l(),F(vb.$$.fragment),AXe=l(),Zi=a("h2"),Fb=a("a"),gpe=a("span"),F(KL.$$.fragment),ONo=l(),hpe=a("span"),VNo=o("AutoModelForSeq2SeqLM"),LXe=l(),Bo=a("div"),F(ZL.$$.fragment),XNo=l(),ed=a("p"),zNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wV=a("a"),QNo=o("from_pretrained()"),WNo=o(" class method or the "),AV=a("a"),HNo=o("from_config()"),UNo=o(` class
method.`),JNo=l(),ey=a("p"),YNo=o("This class cannot be instantiated directly using "),ppe=a("code"),KNo=o("__init__()"),ZNo=o(" (throws an error)."),eqo=l(),mt=a("div"),F(oy.$$.fragment),oqo=l(),_pe=a("p"),rqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),tqo=l(),od=a("p"),aqo=o(`Note:
Loading a model from its configuration file does `),upe=a("strong"),nqo=o("not"),sqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=a("a"),lqo=o("from_pretrained()"),iqo=o(" to load the model weights."),dqo=l(),F(Tb.$$.fragment),cqo=l(),oo=a("div"),F(ry.$$.fragment),fqo=l(),bpe=a("p"),mqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),gqo=l(),Da=a("p"),hqo=o("The model class to instantiate is selected based on the "),vpe=a("code"),pqo=o("model_type"),_qo=o(` property of the config object (either
passed as an argument or loaded from `),Fpe=a("code"),uqo=o("pretrained_model_name_or_path"),bqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=a("code"),vqo=o("pretrained_model_name_or_path"),Fqo=o(":"),Tqo=l(),pe=a("ul"),Mb=a("li"),Mpe=a("strong"),Mqo=o("bart"),Eqo=o(" \u2014 "),yV=a("a"),Cqo=o("BartForConditionalGeneration"),wqo=o(" (BART model)"),Aqo=l(),Eb=a("li"),Epe=a("strong"),Lqo=o("bigbird_pegasus"),yqo=o(" \u2014 "),xV=a("a"),xqo=o("BigBirdPegasusForConditionalGeneration"),$qo=o(" (BigBird-Pegasus model)"),kqo=l(),Cb=a("li"),Cpe=a("strong"),Sqo=o("blenderbot"),Rqo=o(" \u2014 "),$V=a("a"),Pqo=o("BlenderbotForConditionalGeneration"),Bqo=o(" (Blenderbot model)"),Iqo=l(),wb=a("li"),wpe=a("strong"),Nqo=o("blenderbot-small"),qqo=o(" \u2014 "),kV=a("a"),jqo=o("BlenderbotSmallForConditionalGeneration"),Dqo=o(" (BlenderbotSmall model)"),Gqo=l(),Ab=a("li"),Ape=a("strong"),Oqo=o("encoder-decoder"),Vqo=o(" \u2014 "),SV=a("a"),Xqo=o("EncoderDecoderModel"),zqo=o(" (Encoder decoder model)"),Qqo=l(),Lb=a("li"),Lpe=a("strong"),Wqo=o("fsmt"),Hqo=o(" \u2014 "),RV=a("a"),Uqo=o("FSMTForConditionalGeneration"),Jqo=o(" (FairSeq Machine-Translation model)"),Yqo=l(),yb=a("li"),ype=a("strong"),Kqo=o("led"),Zqo=o(" \u2014 "),PV=a("a"),ejo=o("LEDForConditionalGeneration"),ojo=o(" (LED model)"),rjo=l(),xb=a("li"),xpe=a("strong"),tjo=o("longt5"),ajo=o(" \u2014 "),BV=a("a"),njo=o("LongT5ForConditionalGeneration"),sjo=o(" (LongT5 model)"),ljo=l(),$b=a("li"),$pe=a("strong"),ijo=o("m2m_100"),djo=o(" \u2014 "),IV=a("a"),cjo=o("M2M100ForConditionalGeneration"),fjo=o(" (M2M100 model)"),mjo=l(),kb=a("li"),kpe=a("strong"),gjo=o("marian"),hjo=o(" \u2014 "),NV=a("a"),pjo=o("MarianMTModel"),_jo=o(" (Marian model)"),ujo=l(),Sb=a("li"),Spe=a("strong"),bjo=o("mbart"),vjo=o(" \u2014 "),qV=a("a"),Fjo=o("MBartForConditionalGeneration"),Tjo=o(" (mBART model)"),Mjo=l(),Rb=a("li"),Rpe=a("strong"),Ejo=o("mt5"),Cjo=o(" \u2014 "),jV=a("a"),wjo=o("MT5ForConditionalGeneration"),Ajo=o(" (MT5 model)"),Ljo=l(),Pb=a("li"),Ppe=a("strong"),yjo=o("mvp"),xjo=o(" \u2014 "),DV=a("a"),$jo=o("MvpForConditionalGeneration"),kjo=o(" (MVP model)"),Sjo=l(),Bb=a("li"),Bpe=a("strong"),Rjo=o("pegasus"),Pjo=o(" \u2014 "),GV=a("a"),Bjo=o("PegasusForConditionalGeneration"),Ijo=o(" (Pegasus model)"),Njo=l(),Ib=a("li"),Ipe=a("strong"),qjo=o("plbart"),jjo=o(" \u2014 "),OV=a("a"),Djo=o("PLBartForConditionalGeneration"),Gjo=o(" (PLBart model)"),Ojo=l(),Nb=a("li"),Npe=a("strong"),Vjo=o("prophetnet"),Xjo=o(" \u2014 "),VV=a("a"),zjo=o("ProphetNetForConditionalGeneration"),Qjo=o(" (ProphetNet model)"),Wjo=l(),qb=a("li"),qpe=a("strong"),Hjo=o("t5"),Ujo=o(" \u2014 "),XV=a("a"),Jjo=o("T5ForConditionalGeneration"),Yjo=o(" (T5 model)"),Kjo=l(),jb=a("li"),jpe=a("strong"),Zjo=o("xlm-prophetnet"),eDo=o(" \u2014 "),zV=a("a"),oDo=o("XLMProphetNetForConditionalGeneration"),rDo=o(" (XLM-ProphetNet model)"),tDo=l(),Db=a("p"),aDo=o("The model is set in evaluation mode by default using "),Dpe=a("code"),nDo=o("model.eval()"),sDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=a("code"),lDo=o("model.train()"),iDo=l(),F(Gb.$$.fragment),yXe=l(),rd=a("h2"),Ob=a("a"),Ope=a("span"),F(ty.$$.fragment),dDo=l(),Vpe=a("span"),cDo=o("AutoModelForSequenceClassification"),xXe=l(),Io=a("div"),F(ay.$$.fragment),fDo=l(),td=a("p"),mDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QV=a("a"),gDo=o("from_pretrained()"),hDo=o(" class method or the "),WV=a("a"),pDo=o("from_config()"),_Do=o(` class
method.`),uDo=l(),ny=a("p"),bDo=o("This class cannot be instantiated directly using "),Xpe=a("code"),vDo=o("__init__()"),FDo=o(" (throws an error)."),TDo=l(),gt=a("div"),F(sy.$$.fragment),MDo=l(),zpe=a("p"),EDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),CDo=l(),ad=a("p"),wDo=o(`Note:
Loading a model from its configuration file does `),Qpe=a("strong"),ADo=o("not"),LDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=a("a"),yDo=o("from_pretrained()"),xDo=o(" to load the model weights."),$Do=l(),F(Vb.$$.fragment),kDo=l(),ro=a("div"),F(ly.$$.fragment),SDo=l(),Wpe=a("p"),RDo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),PDo=l(),Ga=a("p"),BDo=o("The model class to instantiate is selected based on the "),Hpe=a("code"),IDo=o("model_type"),NDo=o(` property of the config object (either
passed as an argument or loaded from `),Upe=a("code"),qDo=o("pretrained_model_name_or_path"),jDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=a("code"),DDo=o("pretrained_model_name_or_path"),GDo=o(":"),ODo=l(),q=a("ul"),Xb=a("li"),Ype=a("strong"),VDo=o("albert"),XDo=o(" \u2014 "),UV=a("a"),zDo=o("AlbertForSequenceClassification"),QDo=o(" (ALBERT model)"),WDo=l(),zb=a("li"),Kpe=a("strong"),HDo=o("bart"),UDo=o(" \u2014 "),JV=a("a"),JDo=o("BartForSequenceClassification"),YDo=o(" (BART model)"),KDo=l(),Qb=a("li"),Zpe=a("strong"),ZDo=o("bert"),eGo=o(" \u2014 "),YV=a("a"),oGo=o("BertForSequenceClassification"),rGo=o(" (BERT model)"),tGo=l(),Wb=a("li"),e_e=a("strong"),aGo=o("big_bird"),nGo=o(" \u2014 "),KV=a("a"),sGo=o("BigBirdForSequenceClassification"),lGo=o(" (BigBird model)"),iGo=l(),Hb=a("li"),o_e=a("strong"),dGo=o("bigbird_pegasus"),cGo=o(" \u2014 "),ZV=a("a"),fGo=o("BigBirdPegasusForSequenceClassification"),mGo=o(" (BigBird-Pegasus model)"),gGo=l(),Ub=a("li"),r_e=a("strong"),hGo=o("bloom"),pGo=o(" \u2014 "),eX=a("a"),_Go=o("BloomForSequenceClassification"),uGo=o(" (BLOOM model)"),bGo=l(),Jb=a("li"),t_e=a("strong"),vGo=o("camembert"),FGo=o(" \u2014 "),oX=a("a"),TGo=o("CamembertForSequenceClassification"),MGo=o(" (CamemBERT model)"),EGo=l(),Yb=a("li"),a_e=a("strong"),CGo=o("canine"),wGo=o(" \u2014 "),rX=a("a"),AGo=o("CanineForSequenceClassification"),LGo=o(" (CANINE model)"),yGo=l(),Kb=a("li"),n_e=a("strong"),xGo=o("convbert"),$Go=o(" \u2014 "),tX=a("a"),kGo=o("ConvBertForSequenceClassification"),SGo=o(" (ConvBERT model)"),RGo=l(),Zb=a("li"),s_e=a("strong"),PGo=o("ctrl"),BGo=o(" \u2014 "),aX=a("a"),IGo=o("CTRLForSequenceClassification"),NGo=o(" (CTRL model)"),qGo=l(),ev=a("li"),l_e=a("strong"),jGo=o("data2vec-text"),DGo=o(" \u2014 "),nX=a("a"),GGo=o("Data2VecTextForSequenceClassification"),OGo=o(" (Data2VecText model)"),VGo=l(),ov=a("li"),i_e=a("strong"),XGo=o("deberta"),zGo=o(" \u2014 "),sX=a("a"),QGo=o("DebertaForSequenceClassification"),WGo=o(" (DeBERTa model)"),HGo=l(),rv=a("li"),d_e=a("strong"),UGo=o("deberta-v2"),JGo=o(" \u2014 "),lX=a("a"),YGo=o("DebertaV2ForSequenceClassification"),KGo=o(" (DeBERTa-v2 model)"),ZGo=l(),tv=a("li"),c_e=a("strong"),eOo=o("distilbert"),oOo=o(" \u2014 "),iX=a("a"),rOo=o("DistilBertForSequenceClassification"),tOo=o(" (DistilBERT model)"),aOo=l(),av=a("li"),f_e=a("strong"),nOo=o("electra"),sOo=o(" \u2014 "),dX=a("a"),lOo=o("ElectraForSequenceClassification"),iOo=o(" (ELECTRA model)"),dOo=l(),nv=a("li"),m_e=a("strong"),cOo=o("flaubert"),fOo=o(" \u2014 "),cX=a("a"),mOo=o("FlaubertForSequenceClassification"),gOo=o(" (FlauBERT model)"),hOo=l(),sv=a("li"),g_e=a("strong"),pOo=o("fnet"),_Oo=o(" \u2014 "),fX=a("a"),uOo=o("FNetForSequenceClassification"),bOo=o(" (FNet model)"),vOo=l(),lv=a("li"),h_e=a("strong"),FOo=o("funnel"),TOo=o(" \u2014 "),mX=a("a"),MOo=o("FunnelForSequenceClassification"),EOo=o(" (Funnel Transformer model)"),COo=l(),iv=a("li"),p_e=a("strong"),wOo=o("gpt2"),AOo=o(" \u2014 "),gX=a("a"),LOo=o("GPT2ForSequenceClassification"),yOo=o(" (OpenAI GPT-2 model)"),xOo=l(),dv=a("li"),__e=a("strong"),$Oo=o("gpt_neo"),kOo=o(" \u2014 "),hX=a("a"),SOo=o("GPTNeoForSequenceClassification"),ROo=o(" (GPT Neo model)"),POo=l(),cv=a("li"),u_e=a("strong"),BOo=o("gptj"),IOo=o(" \u2014 "),pX=a("a"),NOo=o("GPTJForSequenceClassification"),qOo=o(" (GPT-J model)"),jOo=l(),fv=a("li"),b_e=a("strong"),DOo=o("ibert"),GOo=o(" \u2014 "),_X=a("a"),OOo=o("IBertForSequenceClassification"),VOo=o(" (I-BERT model)"),XOo=l(),mv=a("li"),v_e=a("strong"),zOo=o("layoutlm"),QOo=o(" \u2014 "),uX=a("a"),WOo=o("LayoutLMForSequenceClassification"),HOo=o(" (LayoutLM model)"),UOo=l(),gv=a("li"),F_e=a("strong"),JOo=o("layoutlmv2"),YOo=o(" \u2014 "),bX=a("a"),KOo=o("LayoutLMv2ForSequenceClassification"),ZOo=o(" (LayoutLMv2 model)"),eVo=l(),hv=a("li"),T_e=a("strong"),oVo=o("layoutlmv3"),rVo=o(" \u2014 "),vX=a("a"),tVo=o("LayoutLMv3ForSequenceClassification"),aVo=o(" (LayoutLMv3 model)"),nVo=l(),pv=a("li"),M_e=a("strong"),sVo=o("led"),lVo=o(" \u2014 "),FX=a("a"),iVo=o("LEDForSequenceClassification"),dVo=o(" (LED model)"),cVo=l(),_v=a("li"),E_e=a("strong"),fVo=o("longformer"),mVo=o(" \u2014 "),TX=a("a"),gVo=o("LongformerForSequenceClassification"),hVo=o(" (Longformer model)"),pVo=l(),uv=a("li"),C_e=a("strong"),_Vo=o("mbart"),uVo=o(" \u2014 "),MX=a("a"),bVo=o("MBartForSequenceClassification"),vVo=o(" (mBART model)"),FVo=l(),bv=a("li"),w_e=a("strong"),TVo=o("megatron-bert"),MVo=o(" \u2014 "),EX=a("a"),EVo=o("MegatronBertForSequenceClassification"),CVo=o(" (Megatron-BERT model)"),wVo=l(),vv=a("li"),A_e=a("strong"),AVo=o("mobilebert"),LVo=o(" \u2014 "),CX=a("a"),yVo=o("MobileBertForSequenceClassification"),xVo=o(" (MobileBERT model)"),$Vo=l(),Fv=a("li"),L_e=a("strong"),kVo=o("mpnet"),SVo=o(" \u2014 "),wX=a("a"),RVo=o("MPNetForSequenceClassification"),PVo=o(" (MPNet model)"),BVo=l(),Tv=a("li"),y_e=a("strong"),IVo=o("mvp"),NVo=o(" \u2014 "),AX=a("a"),qVo=o("MvpForSequenceClassification"),jVo=o(" (MVP model)"),DVo=l(),Mv=a("li"),x_e=a("strong"),GVo=o("nezha"),OVo=o(" \u2014 "),LX=a("a"),VVo=o("NezhaForSequenceClassification"),XVo=o(" (Nezha model)"),zVo=l(),Ev=a("li"),$_e=a("strong"),QVo=o("nystromformer"),WVo=o(" \u2014 "),yX=a("a"),HVo=o("NystromformerForSequenceClassification"),UVo=o(" (Nystr\xF6mformer model)"),JVo=l(),Cv=a("li"),k_e=a("strong"),YVo=o("openai-gpt"),KVo=o(" \u2014 "),xX=a("a"),ZVo=o("OpenAIGPTForSequenceClassification"),eXo=o(" (OpenAI GPT model)"),oXo=l(),wv=a("li"),S_e=a("strong"),rXo=o("perceiver"),tXo=o(" \u2014 "),$X=a("a"),aXo=o("PerceiverForSequenceClassification"),nXo=o(" (Perceiver model)"),sXo=l(),Av=a("li"),R_e=a("strong"),lXo=o("plbart"),iXo=o(" \u2014 "),kX=a("a"),dXo=o("PLBartForSequenceClassification"),cXo=o(" (PLBart model)"),fXo=l(),Lv=a("li"),P_e=a("strong"),mXo=o("qdqbert"),gXo=o(" \u2014 "),SX=a("a"),hXo=o("QDQBertForSequenceClassification"),pXo=o(" (QDQBert model)"),_Xo=l(),yv=a("li"),B_e=a("strong"),uXo=o("reformer"),bXo=o(" \u2014 "),RX=a("a"),vXo=o("ReformerForSequenceClassification"),FXo=o(" (Reformer model)"),TXo=l(),xv=a("li"),I_e=a("strong"),MXo=o("rembert"),EXo=o(" \u2014 "),PX=a("a"),CXo=o("RemBertForSequenceClassification"),wXo=o(" (RemBERT model)"),AXo=l(),$v=a("li"),N_e=a("strong"),LXo=o("roberta"),yXo=o(" \u2014 "),BX=a("a"),xXo=o("RobertaForSequenceClassification"),$Xo=o(" (RoBERTa model)"),kXo=l(),kv=a("li"),q_e=a("strong"),SXo=o("roformer"),RXo=o(" \u2014 "),IX=a("a"),PXo=o("RoFormerForSequenceClassification"),BXo=o(" (RoFormer model)"),IXo=l(),Sv=a("li"),j_e=a("strong"),NXo=o("squeezebert"),qXo=o(" \u2014 "),NX=a("a"),jXo=o("SqueezeBertForSequenceClassification"),DXo=o(" (SqueezeBERT model)"),GXo=l(),Rv=a("li"),D_e=a("strong"),OXo=o("tapas"),VXo=o(" \u2014 "),qX=a("a"),XXo=o("TapasForSequenceClassification"),zXo=o(" (TAPAS model)"),QXo=l(),Pv=a("li"),G_e=a("strong"),WXo=o("transfo-xl"),HXo=o(" \u2014 "),jX=a("a"),UXo=o("TransfoXLForSequenceClassification"),JXo=o(" (Transformer-XL model)"),YXo=l(),Bv=a("li"),O_e=a("strong"),KXo=o("xlm"),ZXo=o(" \u2014 "),DX=a("a"),ezo=o("XLMForSequenceClassification"),ozo=o(" (XLM model)"),rzo=l(),Iv=a("li"),V_e=a("strong"),tzo=o("xlm-roberta"),azo=o(" \u2014 "),GX=a("a"),nzo=o("XLMRobertaForSequenceClassification"),szo=o(" (XLM-RoBERTa model)"),lzo=l(),Nv=a("li"),X_e=a("strong"),izo=o("xlm-roberta-xl"),dzo=o(" \u2014 "),OX=a("a"),czo=o("XLMRobertaXLForSequenceClassification"),fzo=o(" (XLM-RoBERTa-XL model)"),mzo=l(),qv=a("li"),z_e=a("strong"),gzo=o("xlnet"),hzo=o(" \u2014 "),VX=a("a"),pzo=o("XLNetForSequenceClassification"),_zo=o(" (XLNet model)"),uzo=l(),jv=a("li"),Q_e=a("strong"),bzo=o("yoso"),vzo=o(" \u2014 "),XX=a("a"),Fzo=o("YosoForSequenceClassification"),Tzo=o(" (YOSO model)"),Mzo=l(),Dv=a("p"),Ezo=o("The model is set in evaluation mode by default using "),W_e=a("code"),Czo=o("model.eval()"),wzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H_e=a("code"),Azo=o("model.train()"),Lzo=l(),F(Gv.$$.fragment),$Xe=l(),nd=a("h2"),Ov=a("a"),U_e=a("span"),F(iy.$$.fragment),yzo=l(),J_e=a("span"),xzo=o("AutoModelForMultipleChoice"),kXe=l(),No=a("div"),F(dy.$$.fragment),$zo=l(),sd=a("p"),kzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zX=a("a"),Szo=o("from_pretrained()"),Rzo=o(" class method or the "),QX=a("a"),Pzo=o("from_config()"),Bzo=o(` class
method.`),Izo=l(),cy=a("p"),Nzo=o("This class cannot be instantiated directly using "),Y_e=a("code"),qzo=o("__init__()"),jzo=o(" (throws an error)."),Dzo=l(),ht=a("div"),F(fy.$$.fragment),Gzo=l(),K_e=a("p"),Ozo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Vzo=l(),ld=a("p"),Xzo=o(`Note:
Loading a model from its configuration file does `),Z_e=a("strong"),zzo=o("not"),Qzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),Wzo=o("from_pretrained()"),Hzo=o(" to load the model weights."),Uzo=l(),F(Vv.$$.fragment),Jzo=l(),to=a("div"),F(my.$$.fragment),Yzo=l(),eue=a("p"),Kzo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Zzo=l(),Oa=a("p"),eQo=o("The model class to instantiate is selected based on the "),oue=a("code"),oQo=o("model_type"),rQo=o(` property of the config object (either
passed as an argument or loaded from `),rue=a("code"),tQo=o("pretrained_model_name_or_path"),aQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=a("code"),nQo=o("pretrained_model_name_or_path"),sQo=o(":"),lQo=l(),Z=a("ul"),Xv=a("li"),aue=a("strong"),iQo=o("albert"),dQo=o(" \u2014 "),HX=a("a"),cQo=o("AlbertForMultipleChoice"),fQo=o(" (ALBERT model)"),mQo=l(),zv=a("li"),nue=a("strong"),gQo=o("bert"),hQo=o(" \u2014 "),UX=a("a"),pQo=o("BertForMultipleChoice"),_Qo=o(" (BERT model)"),uQo=l(),Qv=a("li"),sue=a("strong"),bQo=o("big_bird"),vQo=o(" \u2014 "),JX=a("a"),FQo=o("BigBirdForMultipleChoice"),TQo=o(" (BigBird model)"),MQo=l(),Wv=a("li"),lue=a("strong"),EQo=o("camembert"),CQo=o(" \u2014 "),YX=a("a"),wQo=o("CamembertForMultipleChoice"),AQo=o(" (CamemBERT model)"),LQo=l(),Hv=a("li"),iue=a("strong"),yQo=o("canine"),xQo=o(" \u2014 "),KX=a("a"),$Qo=o("CanineForMultipleChoice"),kQo=o(" (CANINE model)"),SQo=l(),Uv=a("li"),due=a("strong"),RQo=o("convbert"),PQo=o(" \u2014 "),ZX=a("a"),BQo=o("ConvBertForMultipleChoice"),IQo=o(" (ConvBERT model)"),NQo=l(),Jv=a("li"),cue=a("strong"),qQo=o("data2vec-text"),jQo=o(" \u2014 "),ez=a("a"),DQo=o("Data2VecTextForMultipleChoice"),GQo=o(" (Data2VecText model)"),OQo=l(),Yv=a("li"),fue=a("strong"),VQo=o("deberta-v2"),XQo=o(" \u2014 "),oz=a("a"),zQo=o("DebertaV2ForMultipleChoice"),QQo=o(" (DeBERTa-v2 model)"),WQo=l(),Kv=a("li"),mue=a("strong"),HQo=o("distilbert"),UQo=o(" \u2014 "),rz=a("a"),JQo=o("DistilBertForMultipleChoice"),YQo=o(" (DistilBERT model)"),KQo=l(),Zv=a("li"),gue=a("strong"),ZQo=o("electra"),eWo=o(" \u2014 "),tz=a("a"),oWo=o("ElectraForMultipleChoice"),rWo=o(" (ELECTRA model)"),tWo=l(),e0=a("li"),hue=a("strong"),aWo=o("flaubert"),nWo=o(" \u2014 "),az=a("a"),sWo=o("FlaubertForMultipleChoice"),lWo=o(" (FlauBERT model)"),iWo=l(),o0=a("li"),pue=a("strong"),dWo=o("fnet"),cWo=o(" \u2014 "),nz=a("a"),fWo=o("FNetForMultipleChoice"),mWo=o(" (FNet model)"),gWo=l(),r0=a("li"),_ue=a("strong"),hWo=o("funnel"),pWo=o(" \u2014 "),sz=a("a"),_Wo=o("FunnelForMultipleChoice"),uWo=o(" (Funnel Transformer model)"),bWo=l(),t0=a("li"),uue=a("strong"),vWo=o("ibert"),FWo=o(" \u2014 "),lz=a("a"),TWo=o("IBertForMultipleChoice"),MWo=o(" (I-BERT model)"),EWo=l(),a0=a("li"),bue=a("strong"),CWo=o("longformer"),wWo=o(" \u2014 "),iz=a("a"),AWo=o("LongformerForMultipleChoice"),LWo=o(" (Longformer model)"),yWo=l(),n0=a("li"),vue=a("strong"),xWo=o("megatron-bert"),$Wo=o(" \u2014 "),dz=a("a"),kWo=o("MegatronBertForMultipleChoice"),SWo=o(" (Megatron-BERT model)"),RWo=l(),s0=a("li"),Fue=a("strong"),PWo=o("mobilebert"),BWo=o(" \u2014 "),cz=a("a"),IWo=o("MobileBertForMultipleChoice"),NWo=o(" (MobileBERT model)"),qWo=l(),l0=a("li"),Tue=a("strong"),jWo=o("mpnet"),DWo=o(" \u2014 "),fz=a("a"),GWo=o("MPNetForMultipleChoice"),OWo=o(" (MPNet model)"),VWo=l(),i0=a("li"),Mue=a("strong"),XWo=o("nezha"),zWo=o(" \u2014 "),mz=a("a"),QWo=o("NezhaForMultipleChoice"),WWo=o(" (Nezha model)"),HWo=l(),d0=a("li"),Eue=a("strong"),UWo=o("nystromformer"),JWo=o(" \u2014 "),gz=a("a"),YWo=o("NystromformerForMultipleChoice"),KWo=o(" (Nystr\xF6mformer model)"),ZWo=l(),c0=a("li"),Cue=a("strong"),eHo=o("qdqbert"),oHo=o(" \u2014 "),hz=a("a"),rHo=o("QDQBertForMultipleChoice"),tHo=o(" (QDQBert model)"),aHo=l(),f0=a("li"),wue=a("strong"),nHo=o("rembert"),sHo=o(" \u2014 "),pz=a("a"),lHo=o("RemBertForMultipleChoice"),iHo=o(" (RemBERT model)"),dHo=l(),m0=a("li"),Aue=a("strong"),cHo=o("roberta"),fHo=o(" \u2014 "),_z=a("a"),mHo=o("RobertaForMultipleChoice"),gHo=o(" (RoBERTa model)"),hHo=l(),g0=a("li"),Lue=a("strong"),pHo=o("roformer"),_Ho=o(" \u2014 "),uz=a("a"),uHo=o("RoFormerForMultipleChoice"),bHo=o(" (RoFormer model)"),vHo=l(),h0=a("li"),yue=a("strong"),FHo=o("squeezebert"),THo=o(" \u2014 "),bz=a("a"),MHo=o("SqueezeBertForMultipleChoice"),EHo=o(" (SqueezeBERT model)"),CHo=l(),p0=a("li"),xue=a("strong"),wHo=o("xlm"),AHo=o(" \u2014 "),vz=a("a"),LHo=o("XLMForMultipleChoice"),yHo=o(" (XLM model)"),xHo=l(),_0=a("li"),$ue=a("strong"),$Ho=o("xlm-roberta"),kHo=o(" \u2014 "),Fz=a("a"),SHo=o("XLMRobertaForMultipleChoice"),RHo=o(" (XLM-RoBERTa model)"),PHo=l(),u0=a("li"),kue=a("strong"),BHo=o("xlm-roberta-xl"),IHo=o(" \u2014 "),Tz=a("a"),NHo=o("XLMRobertaXLForMultipleChoice"),qHo=o(" (XLM-RoBERTa-XL model)"),jHo=l(),b0=a("li"),Sue=a("strong"),DHo=o("xlnet"),GHo=o(" \u2014 "),Mz=a("a"),OHo=o("XLNetForMultipleChoice"),VHo=o(" (XLNet model)"),XHo=l(),v0=a("li"),Rue=a("strong"),zHo=o("yoso"),QHo=o(" \u2014 "),Ez=a("a"),WHo=o("YosoForMultipleChoice"),HHo=o(" (YOSO model)"),UHo=l(),F0=a("p"),JHo=o("The model is set in evaluation mode by default using "),Pue=a("code"),YHo=o("model.eval()"),KHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bue=a("code"),ZHo=o("model.train()"),eUo=l(),F(T0.$$.fragment),SXe=l(),id=a("h2"),M0=a("a"),Iue=a("span"),F(gy.$$.fragment),oUo=l(),Nue=a("span"),rUo=o("AutoModelForNextSentencePrediction"),RXe=l(),qo=a("div"),F(hy.$$.fragment),tUo=l(),dd=a("p"),aUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Cz=a("a"),nUo=o("from_pretrained()"),sUo=o(" class method or the "),wz=a("a"),lUo=o("from_config()"),iUo=o(` class
method.`),dUo=l(),py=a("p"),cUo=o("This class cannot be instantiated directly using "),que=a("code"),fUo=o("__init__()"),mUo=o(" (throws an error)."),gUo=l(),pt=a("div"),F(_y.$$.fragment),hUo=l(),jue=a("p"),pUo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_Uo=l(),cd=a("p"),uUo=o(`Note:
Loading a model from its configuration file does `),Due=a("strong"),bUo=o("not"),vUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=a("a"),FUo=o("from_pretrained()"),TUo=o(" to load the model weights."),MUo=l(),F(E0.$$.fragment),EUo=l(),ao=a("div"),F(uy.$$.fragment),CUo=l(),Gue=a("p"),wUo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),AUo=l(),Va=a("p"),LUo=o("The model class to instantiate is selected based on the "),Oue=a("code"),yUo=o("model_type"),xUo=o(` property of the config object (either
passed as an argument or loaded from `),Vue=a("code"),$Uo=o("pretrained_model_name_or_path"),kUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xue=a("code"),SUo=o("pretrained_model_name_or_path"),RUo=o(":"),PUo=l(),jo=a("ul"),C0=a("li"),zue=a("strong"),BUo=o("bert"),IUo=o(" \u2014 "),Lz=a("a"),NUo=o("BertForNextSentencePrediction"),qUo=o(" (BERT model)"),jUo=l(),w0=a("li"),Que=a("strong"),DUo=o("fnet"),GUo=o(" \u2014 "),yz=a("a"),OUo=o("FNetForNextSentencePrediction"),VUo=o(" (FNet model)"),XUo=l(),A0=a("li"),Wue=a("strong"),zUo=o("megatron-bert"),QUo=o(" \u2014 "),xz=a("a"),WUo=o("MegatronBertForNextSentencePrediction"),HUo=o(" (Megatron-BERT model)"),UUo=l(),L0=a("li"),Hue=a("strong"),JUo=o("mobilebert"),YUo=o(" \u2014 "),$z=a("a"),KUo=o("MobileBertForNextSentencePrediction"),ZUo=o(" (MobileBERT model)"),eJo=l(),y0=a("li"),Uue=a("strong"),oJo=o("nezha"),rJo=o(" \u2014 "),kz=a("a"),tJo=o("NezhaForNextSentencePrediction"),aJo=o(" (Nezha model)"),nJo=l(),x0=a("li"),Jue=a("strong"),sJo=o("qdqbert"),lJo=o(" \u2014 "),Sz=a("a"),iJo=o("QDQBertForNextSentencePrediction"),dJo=o(" (QDQBert model)"),cJo=l(),$0=a("p"),fJo=o("The model is set in evaluation mode by default using "),Yue=a("code"),mJo=o("model.eval()"),gJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kue=a("code"),hJo=o("model.train()"),pJo=l(),F(k0.$$.fragment),PXe=l(),fd=a("h2"),S0=a("a"),Zue=a("span"),F(by.$$.fragment),_Jo=l(),e1e=a("span"),uJo=o("AutoModelForTokenClassification"),BXe=l(),Do=a("div"),F(vy.$$.fragment),bJo=l(),md=a("p"),vJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rz=a("a"),FJo=o("from_pretrained()"),TJo=o(" class method or the "),Pz=a("a"),MJo=o("from_config()"),EJo=o(` class
method.`),CJo=l(),Fy=a("p"),wJo=o("This class cannot be instantiated directly using "),o1e=a("code"),AJo=o("__init__()"),LJo=o(" (throws an error)."),yJo=l(),_t=a("div"),F(Ty.$$.fragment),xJo=l(),r1e=a("p"),$Jo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kJo=l(),gd=a("p"),SJo=o(`Note:
Loading a model from its configuration file does `),t1e=a("strong"),RJo=o("not"),PJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),BJo=o("from_pretrained()"),IJo=o(" to load the model weights."),NJo=l(),F(R0.$$.fragment),qJo=l(),no=a("div"),F(My.$$.fragment),jJo=l(),a1e=a("p"),DJo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),GJo=l(),Xa=a("p"),OJo=o("The model class to instantiate is selected based on the "),n1e=a("code"),VJo=o("model_type"),XJo=o(` property of the config object (either
passed as an argument or loaded from `),s1e=a("code"),zJo=o("pretrained_model_name_or_path"),QJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=a("code"),WJo=o("pretrained_model_name_or_path"),HJo=o(":"),UJo=l(),U=a("ul"),P0=a("li"),i1e=a("strong"),JJo=o("albert"),YJo=o(" \u2014 "),Iz=a("a"),KJo=o("AlbertForTokenClassification"),ZJo=o(" (ALBERT model)"),eYo=l(),B0=a("li"),d1e=a("strong"),oYo=o("bert"),rYo=o(" \u2014 "),Nz=a("a"),tYo=o("BertForTokenClassification"),aYo=o(" (BERT model)"),nYo=l(),I0=a("li"),c1e=a("strong"),sYo=o("big_bird"),lYo=o(" \u2014 "),qz=a("a"),iYo=o("BigBirdForTokenClassification"),dYo=o(" (BigBird model)"),cYo=l(),N0=a("li"),f1e=a("strong"),fYo=o("bloom"),mYo=o(" \u2014 "),jz=a("a"),gYo=o("BloomForTokenClassification"),hYo=o(" (BLOOM model)"),pYo=l(),q0=a("li"),m1e=a("strong"),_Yo=o("camembert"),uYo=o(" \u2014 "),Dz=a("a"),bYo=o("CamembertForTokenClassification"),vYo=o(" (CamemBERT model)"),FYo=l(),j0=a("li"),g1e=a("strong"),TYo=o("canine"),MYo=o(" \u2014 "),Gz=a("a"),EYo=o("CanineForTokenClassification"),CYo=o(" (CANINE model)"),wYo=l(),D0=a("li"),h1e=a("strong"),AYo=o("convbert"),LYo=o(" \u2014 "),Oz=a("a"),yYo=o("ConvBertForTokenClassification"),xYo=o(" (ConvBERT model)"),$Yo=l(),G0=a("li"),p1e=a("strong"),kYo=o("data2vec-text"),SYo=o(" \u2014 "),Vz=a("a"),RYo=o("Data2VecTextForTokenClassification"),PYo=o(" (Data2VecText model)"),BYo=l(),O0=a("li"),_1e=a("strong"),IYo=o("deberta"),NYo=o(" \u2014 "),Xz=a("a"),qYo=o("DebertaForTokenClassification"),jYo=o(" (DeBERTa model)"),DYo=l(),V0=a("li"),u1e=a("strong"),GYo=o("deberta-v2"),OYo=o(" \u2014 "),zz=a("a"),VYo=o("DebertaV2ForTokenClassification"),XYo=o(" (DeBERTa-v2 model)"),zYo=l(),X0=a("li"),b1e=a("strong"),QYo=o("distilbert"),WYo=o(" \u2014 "),Qz=a("a"),HYo=o("DistilBertForTokenClassification"),UYo=o(" (DistilBERT model)"),JYo=l(),z0=a("li"),v1e=a("strong"),YYo=o("electra"),KYo=o(" \u2014 "),Wz=a("a"),ZYo=o("ElectraForTokenClassification"),eKo=o(" (ELECTRA model)"),oKo=l(),Q0=a("li"),F1e=a("strong"),rKo=o("flaubert"),tKo=o(" \u2014 "),Hz=a("a"),aKo=o("FlaubertForTokenClassification"),nKo=o(" (FlauBERT model)"),sKo=l(),W0=a("li"),T1e=a("strong"),lKo=o("fnet"),iKo=o(" \u2014 "),Uz=a("a"),dKo=o("FNetForTokenClassification"),cKo=o(" (FNet model)"),fKo=l(),H0=a("li"),M1e=a("strong"),mKo=o("funnel"),gKo=o(" \u2014 "),Jz=a("a"),hKo=o("FunnelForTokenClassification"),pKo=o(" (Funnel Transformer model)"),_Ko=l(),U0=a("li"),E1e=a("strong"),uKo=o("gpt2"),bKo=o(" \u2014 "),Yz=a("a"),vKo=o("GPT2ForTokenClassification"),FKo=o(" (OpenAI GPT-2 model)"),TKo=l(),J0=a("li"),C1e=a("strong"),MKo=o("ibert"),EKo=o(" \u2014 "),Kz=a("a"),CKo=o("IBertForTokenClassification"),wKo=o(" (I-BERT model)"),AKo=l(),Y0=a("li"),w1e=a("strong"),LKo=o("layoutlm"),yKo=o(" \u2014 "),Zz=a("a"),xKo=o("LayoutLMForTokenClassification"),$Ko=o(" (LayoutLM model)"),kKo=l(),K0=a("li"),A1e=a("strong"),SKo=o("layoutlmv2"),RKo=o(" \u2014 "),eQ=a("a"),PKo=o("LayoutLMv2ForTokenClassification"),BKo=o(" (LayoutLMv2 model)"),IKo=l(),Z0=a("li"),L1e=a("strong"),NKo=o("layoutlmv3"),qKo=o(" \u2014 "),oQ=a("a"),jKo=o("LayoutLMv3ForTokenClassification"),DKo=o(" (LayoutLMv3 model)"),GKo=l(),eF=a("li"),y1e=a("strong"),OKo=o("longformer"),VKo=o(" \u2014 "),rQ=a("a"),XKo=o("LongformerForTokenClassification"),zKo=o(" (Longformer model)"),QKo=l(),oF=a("li"),x1e=a("strong"),WKo=o("megatron-bert"),HKo=o(" \u2014 "),tQ=a("a"),UKo=o("MegatronBertForTokenClassification"),JKo=o(" (Megatron-BERT model)"),YKo=l(),rF=a("li"),$1e=a("strong"),KKo=o("mobilebert"),ZKo=o(" \u2014 "),aQ=a("a"),eZo=o("MobileBertForTokenClassification"),oZo=o(" (MobileBERT model)"),rZo=l(),tF=a("li"),k1e=a("strong"),tZo=o("mpnet"),aZo=o(" \u2014 "),nQ=a("a"),nZo=o("MPNetForTokenClassification"),sZo=o(" (MPNet model)"),lZo=l(),aF=a("li"),S1e=a("strong"),iZo=o("nezha"),dZo=o(" \u2014 "),sQ=a("a"),cZo=o("NezhaForTokenClassification"),fZo=o(" (Nezha model)"),mZo=l(),nF=a("li"),R1e=a("strong"),gZo=o("nystromformer"),hZo=o(" \u2014 "),lQ=a("a"),pZo=o("NystromformerForTokenClassification"),_Zo=o(" (Nystr\xF6mformer model)"),uZo=l(),sF=a("li"),P1e=a("strong"),bZo=o("qdqbert"),vZo=o(" \u2014 "),iQ=a("a"),FZo=o("QDQBertForTokenClassification"),TZo=o(" (QDQBert model)"),MZo=l(),lF=a("li"),B1e=a("strong"),EZo=o("rembert"),CZo=o(" \u2014 "),dQ=a("a"),wZo=o("RemBertForTokenClassification"),AZo=o(" (RemBERT model)"),LZo=l(),iF=a("li"),I1e=a("strong"),yZo=o("roberta"),xZo=o(" \u2014 "),cQ=a("a"),$Zo=o("RobertaForTokenClassification"),kZo=o(" (RoBERTa model)"),SZo=l(),dF=a("li"),N1e=a("strong"),RZo=o("roformer"),PZo=o(" \u2014 "),fQ=a("a"),BZo=o("RoFormerForTokenClassification"),IZo=o(" (RoFormer model)"),NZo=l(),cF=a("li"),q1e=a("strong"),qZo=o("squeezebert"),jZo=o(" \u2014 "),mQ=a("a"),DZo=o("SqueezeBertForTokenClassification"),GZo=o(" (SqueezeBERT model)"),OZo=l(),fF=a("li"),j1e=a("strong"),VZo=o("xlm"),XZo=o(" \u2014 "),gQ=a("a"),zZo=o("XLMForTokenClassification"),QZo=o(" (XLM model)"),WZo=l(),mF=a("li"),D1e=a("strong"),HZo=o("xlm-roberta"),UZo=o(" \u2014 "),hQ=a("a"),JZo=o("XLMRobertaForTokenClassification"),YZo=o(" (XLM-RoBERTa model)"),KZo=l(),gF=a("li"),G1e=a("strong"),ZZo=o("xlm-roberta-xl"),eer=o(" \u2014 "),pQ=a("a"),oer=o("XLMRobertaXLForTokenClassification"),rer=o(" (XLM-RoBERTa-XL model)"),ter=l(),hF=a("li"),O1e=a("strong"),aer=o("xlnet"),ner=o(" \u2014 "),_Q=a("a"),ser=o("XLNetForTokenClassification"),ler=o(" (XLNet model)"),ier=l(),pF=a("li"),V1e=a("strong"),der=o("yoso"),cer=o(" \u2014 "),uQ=a("a"),fer=o("YosoForTokenClassification"),mer=o(" (YOSO model)"),ger=l(),_F=a("p"),her=o("The model is set in evaluation mode by default using "),X1e=a("code"),per=o("model.eval()"),_er=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=a("code"),uer=o("model.train()"),ber=l(),F(uF.$$.fragment),IXe=l(),hd=a("h2"),bF=a("a"),Q1e=a("span"),F(Ey.$$.fragment),ver=l(),W1e=a("span"),Fer=o("AutoModelForQuestionAnswering"),NXe=l(),Go=a("div"),F(Cy.$$.fragment),Ter=l(),pd=a("p"),Mer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bQ=a("a"),Eer=o("from_pretrained()"),Cer=o(" class method or the "),vQ=a("a"),wer=o("from_config()"),Aer=o(` class
method.`),Ler=l(),wy=a("p"),yer=o("This class cannot be instantiated directly using "),H1e=a("code"),xer=o("__init__()"),$er=o(" (throws an error)."),ker=l(),ut=a("div"),F(Ay.$$.fragment),Ser=l(),U1e=a("p"),Rer=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Per=l(),_d=a("p"),Ber=o(`Note:
Loading a model from its configuration file does `),J1e=a("strong"),Ier=o("not"),Ner=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),qer=o("from_pretrained()"),jer=o(" to load the model weights."),Der=l(),F(vF.$$.fragment),Ger=l(),so=a("div"),F(Ly.$$.fragment),Oer=l(),Y1e=a("p"),Ver=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Xer=l(),za=a("p"),zer=o("The model class to instantiate is selected based on the "),K1e=a("code"),Qer=o("model_type"),Wer=o(` property of the config object (either
passed as an argument or loaded from `),Z1e=a("code"),Her=o("pretrained_model_name_or_path"),Uer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=a("code"),Jer=o("pretrained_model_name_or_path"),Yer=o(":"),Ker=l(),V=a("ul"),FF=a("li"),o2e=a("strong"),Zer=o("albert"),eor=o(" \u2014 "),TQ=a("a"),oor=o("AlbertForQuestionAnswering"),ror=o(" (ALBERT model)"),tor=l(),TF=a("li"),r2e=a("strong"),aor=o("bart"),nor=o(" \u2014 "),MQ=a("a"),sor=o("BartForQuestionAnswering"),lor=o(" (BART model)"),ior=l(),MF=a("li"),t2e=a("strong"),dor=o("bert"),cor=o(" \u2014 "),EQ=a("a"),mor=o("BertForQuestionAnswering"),gor=o(" (BERT model)"),hor=l(),EF=a("li"),a2e=a("strong"),por=o("big_bird"),_or=o(" \u2014 "),CQ=a("a"),uor=o("BigBirdForQuestionAnswering"),bor=o(" (BigBird model)"),vor=l(),CF=a("li"),n2e=a("strong"),For=o("bigbird_pegasus"),Tor=o(" \u2014 "),wQ=a("a"),Mor=o("BigBirdPegasusForQuestionAnswering"),Eor=o(" (BigBird-Pegasus model)"),Cor=l(),wF=a("li"),s2e=a("strong"),wor=o("camembert"),Aor=o(" \u2014 "),AQ=a("a"),Lor=o("CamembertForQuestionAnswering"),yor=o(" (CamemBERT model)"),xor=l(),AF=a("li"),l2e=a("strong"),$or=o("canine"),kor=o(" \u2014 "),LQ=a("a"),Sor=o("CanineForQuestionAnswering"),Ror=o(" (CANINE model)"),Por=l(),LF=a("li"),i2e=a("strong"),Bor=o("convbert"),Ior=o(" \u2014 "),yQ=a("a"),Nor=o("ConvBertForQuestionAnswering"),qor=o(" (ConvBERT model)"),jor=l(),yF=a("li"),d2e=a("strong"),Dor=o("data2vec-text"),Gor=o(" \u2014 "),xQ=a("a"),Oor=o("Data2VecTextForQuestionAnswering"),Vor=o(" (Data2VecText model)"),Xor=l(),xF=a("li"),c2e=a("strong"),zor=o("deberta"),Qor=o(" \u2014 "),$Q=a("a"),Wor=o("DebertaForQuestionAnswering"),Hor=o(" (DeBERTa model)"),Uor=l(),$F=a("li"),f2e=a("strong"),Jor=o("deberta-v2"),Yor=o(" \u2014 "),kQ=a("a"),Kor=o("DebertaV2ForQuestionAnswering"),Zor=o(" (DeBERTa-v2 model)"),err=l(),kF=a("li"),m2e=a("strong"),orr=o("distilbert"),rrr=o(" \u2014 "),SQ=a("a"),trr=o("DistilBertForQuestionAnswering"),arr=o(" (DistilBERT model)"),nrr=l(),SF=a("li"),g2e=a("strong"),srr=o("electra"),lrr=o(" \u2014 "),RQ=a("a"),irr=o("ElectraForQuestionAnswering"),drr=o(" (ELECTRA model)"),crr=l(),RF=a("li"),h2e=a("strong"),frr=o("flaubert"),mrr=o(" \u2014 "),PQ=a("a"),grr=o("FlaubertForQuestionAnsweringSimple"),hrr=o(" (FlauBERT model)"),prr=l(),PF=a("li"),p2e=a("strong"),_rr=o("fnet"),urr=o(" \u2014 "),BQ=a("a"),brr=o("FNetForQuestionAnswering"),vrr=o(" (FNet model)"),Frr=l(),BF=a("li"),_2e=a("strong"),Trr=o("funnel"),Mrr=o(" \u2014 "),IQ=a("a"),Err=o("FunnelForQuestionAnswering"),Crr=o(" (Funnel Transformer model)"),wrr=l(),IF=a("li"),u2e=a("strong"),Arr=o("gptj"),Lrr=o(" \u2014 "),NQ=a("a"),yrr=o("GPTJForQuestionAnswering"),xrr=o(" (GPT-J model)"),$rr=l(),NF=a("li"),b2e=a("strong"),krr=o("ibert"),Srr=o(" \u2014 "),qQ=a("a"),Rrr=o("IBertForQuestionAnswering"),Prr=o(" (I-BERT model)"),Brr=l(),qF=a("li"),v2e=a("strong"),Irr=o("layoutlmv2"),Nrr=o(" \u2014 "),jQ=a("a"),qrr=o("LayoutLMv2ForQuestionAnswering"),jrr=o(" (LayoutLMv2 model)"),Drr=l(),jF=a("li"),F2e=a("strong"),Grr=o("layoutlmv3"),Orr=o(" \u2014 "),DQ=a("a"),Vrr=o("LayoutLMv3ForQuestionAnswering"),Xrr=o(" (LayoutLMv3 model)"),zrr=l(),DF=a("li"),T2e=a("strong"),Qrr=o("led"),Wrr=o(" \u2014 "),GQ=a("a"),Hrr=o("LEDForQuestionAnswering"),Urr=o(" (LED model)"),Jrr=l(),GF=a("li"),M2e=a("strong"),Yrr=o("longformer"),Krr=o(" \u2014 "),OQ=a("a"),Zrr=o("LongformerForQuestionAnswering"),etr=o(" (Longformer model)"),otr=l(),OF=a("li"),E2e=a("strong"),rtr=o("lxmert"),ttr=o(" \u2014 "),VQ=a("a"),atr=o("LxmertForQuestionAnswering"),ntr=o(" (LXMERT model)"),str=l(),VF=a("li"),C2e=a("strong"),ltr=o("mbart"),itr=o(" \u2014 "),XQ=a("a"),dtr=o("MBartForQuestionAnswering"),ctr=o(" (mBART model)"),ftr=l(),XF=a("li"),w2e=a("strong"),mtr=o("megatron-bert"),gtr=o(" \u2014 "),zQ=a("a"),htr=o("MegatronBertForQuestionAnswering"),ptr=o(" (Megatron-BERT model)"),_tr=l(),zF=a("li"),A2e=a("strong"),utr=o("mobilebert"),btr=o(" \u2014 "),QQ=a("a"),vtr=o("MobileBertForQuestionAnswering"),Ftr=o(" (MobileBERT model)"),Ttr=l(),QF=a("li"),L2e=a("strong"),Mtr=o("mpnet"),Etr=o(" \u2014 "),WQ=a("a"),Ctr=o("MPNetForQuestionAnswering"),wtr=o(" (MPNet model)"),Atr=l(),WF=a("li"),y2e=a("strong"),Ltr=o("mvp"),ytr=o(" \u2014 "),HQ=a("a"),xtr=o("MvpForQuestionAnswering"),$tr=o(" (MVP model)"),ktr=l(),HF=a("li"),x2e=a("strong"),Str=o("nezha"),Rtr=o(" \u2014 "),UQ=a("a"),Ptr=o("NezhaForQuestionAnswering"),Btr=o(" (Nezha model)"),Itr=l(),UF=a("li"),$2e=a("strong"),Ntr=o("nystromformer"),qtr=o(" \u2014 "),JQ=a("a"),jtr=o("NystromformerForQuestionAnswering"),Dtr=o(" (Nystr\xF6mformer model)"),Gtr=l(),JF=a("li"),k2e=a("strong"),Otr=o("qdqbert"),Vtr=o(" \u2014 "),YQ=a("a"),Xtr=o("QDQBertForQuestionAnswering"),ztr=o(" (QDQBert model)"),Qtr=l(),YF=a("li"),S2e=a("strong"),Wtr=o("reformer"),Htr=o(" \u2014 "),KQ=a("a"),Utr=o("ReformerForQuestionAnswering"),Jtr=o(" (Reformer model)"),Ytr=l(),KF=a("li"),R2e=a("strong"),Ktr=o("rembert"),Ztr=o(" \u2014 "),ZQ=a("a"),ear=o("RemBertForQuestionAnswering"),oar=o(" (RemBERT model)"),rar=l(),ZF=a("li"),P2e=a("strong"),tar=o("roberta"),aar=o(" \u2014 "),eW=a("a"),nar=o("RobertaForQuestionAnswering"),sar=o(" (RoBERTa model)"),lar=l(),eT=a("li"),B2e=a("strong"),iar=o("roformer"),dar=o(" \u2014 "),oW=a("a"),car=o("RoFormerForQuestionAnswering"),far=o(" (RoFormer model)"),mar=l(),oT=a("li"),I2e=a("strong"),gar=o("splinter"),har=o(" \u2014 "),rW=a("a"),par=o("SplinterForQuestionAnswering"),_ar=o(" (Splinter model)"),uar=l(),rT=a("li"),N2e=a("strong"),bar=o("squeezebert"),Far=o(" \u2014 "),tW=a("a"),Tar=o("SqueezeBertForQuestionAnswering"),Mar=o(" (SqueezeBERT model)"),Ear=l(),tT=a("li"),q2e=a("strong"),Car=o("xlm"),war=o(" \u2014 "),aW=a("a"),Aar=o("XLMForQuestionAnsweringSimple"),Lar=o(" (XLM model)"),yar=l(),aT=a("li"),j2e=a("strong"),xar=o("xlm-roberta"),$ar=o(" \u2014 "),nW=a("a"),kar=o("XLMRobertaForQuestionAnswering"),Sar=o(" (XLM-RoBERTa model)"),Rar=l(),nT=a("li"),D2e=a("strong"),Par=o("xlm-roberta-xl"),Bar=o(" \u2014 "),sW=a("a"),Iar=o("XLMRobertaXLForQuestionAnswering"),Nar=o(" (XLM-RoBERTa-XL model)"),qar=l(),sT=a("li"),G2e=a("strong"),jar=o("xlnet"),Dar=o(" \u2014 "),lW=a("a"),Gar=o("XLNetForQuestionAnsweringSimple"),Oar=o(" (XLNet model)"),Var=l(),lT=a("li"),O2e=a("strong"),Xar=o("yoso"),zar=o(" \u2014 "),iW=a("a"),Qar=o("YosoForQuestionAnswering"),War=o(" (YOSO model)"),Har=l(),iT=a("p"),Uar=o("The model is set in evaluation mode by default using "),V2e=a("code"),Jar=o("model.eval()"),Yar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X2e=a("code"),Kar=o("model.train()"),Zar=l(),F(dT.$$.fragment),qXe=l(),ud=a("h2"),cT=a("a"),z2e=a("span"),F(yy.$$.fragment),enr=l(),Q2e=a("span"),onr=o("AutoModelForTableQuestionAnswering"),jXe=l(),Oo=a("div"),F(xy.$$.fragment),rnr=l(),bd=a("p"),tnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dW=a("a"),anr=o("from_pretrained()"),nnr=o(" class method or the "),cW=a("a"),snr=o("from_config()"),lnr=o(` class
method.`),inr=l(),$y=a("p"),dnr=o("This class cannot be instantiated directly using "),W2e=a("code"),cnr=o("__init__()"),fnr=o(" (throws an error)."),mnr=l(),bt=a("div"),F(ky.$$.fragment),gnr=l(),H2e=a("p"),hnr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),pnr=l(),vd=a("p"),_nr=o(`Note:
Loading a model from its configuration file does `),U2e=a("strong"),unr=o("not"),bnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),vnr=o("from_pretrained()"),Fnr=o(" to load the model weights."),Tnr=l(),F(fT.$$.fragment),Mnr=l(),lo=a("div"),F(Sy.$$.fragment),Enr=l(),J2e=a("p"),Cnr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),wnr=l(),Qa=a("p"),Anr=o("The model class to instantiate is selected based on the "),Y2e=a("code"),Lnr=o("model_type"),ynr=o(` property of the config object (either
passed as an argument or loaded from `),K2e=a("code"),xnr=o("pretrained_model_name_or_path"),$nr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z2e=a("code"),knr=o("pretrained_model_name_or_path"),Snr=o(":"),Rnr=l(),ebe=a("ul"),mT=a("li"),obe=a("strong"),Pnr=o("tapas"),Bnr=o(" \u2014 "),mW=a("a"),Inr=o("TapasForQuestionAnswering"),Nnr=o(" (TAPAS model)"),qnr=l(),gT=a("p"),jnr=o("The model is set in evaluation mode by default using "),rbe=a("code"),Dnr=o("model.eval()"),Gnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tbe=a("code"),Onr=o("model.train()"),Vnr=l(),F(hT.$$.fragment),DXe=l(),Fd=a("h2"),pT=a("a"),abe=a("span"),F(Ry.$$.fragment),Xnr=l(),nbe=a("span"),znr=o("AutoModelForImageClassification"),GXe=l(),Vo=a("div"),F(Py.$$.fragment),Qnr=l(),Td=a("p"),Wnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gW=a("a"),Hnr=o("from_pretrained()"),Unr=o(" class method or the "),hW=a("a"),Jnr=o("from_config()"),Ynr=o(` class
method.`),Knr=l(),By=a("p"),Znr=o("This class cannot be instantiated directly using "),sbe=a("code"),esr=o("__init__()"),osr=o(" (throws an error)."),rsr=l(),vt=a("div"),F(Iy.$$.fragment),tsr=l(),lbe=a("p"),asr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),nsr=l(),Md=a("p"),ssr=o(`Note:
Loading a model from its configuration file does `),ibe=a("strong"),lsr=o("not"),isr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),dsr=o("from_pretrained()"),csr=o(" to load the model weights."),fsr=l(),F(_T.$$.fragment),msr=l(),io=a("div"),F(Ny.$$.fragment),gsr=l(),dbe=a("p"),hsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),psr=l(),Wa=a("p"),_sr=o("The model class to instantiate is selected based on the "),cbe=a("code"),usr=o("model_type"),bsr=o(` property of the config object (either
passed as an argument or loaded from `),fbe=a("code"),vsr=o("pretrained_model_name_or_path"),Fsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=a("code"),Tsr=o("pretrained_model_name_or_path"),Msr=o(":"),Esr=l(),ve=a("ul"),uT=a("li"),gbe=a("strong"),Csr=o("beit"),wsr=o(" \u2014 "),_W=a("a"),Asr=o("BeitForImageClassification"),Lsr=o(" (BEiT model)"),ysr=l(),bT=a("li"),hbe=a("strong"),xsr=o("convnext"),$sr=o(" \u2014 "),uW=a("a"),ksr=o("ConvNextForImageClassification"),Ssr=o(" (ConvNeXT model)"),Rsr=l(),vT=a("li"),pbe=a("strong"),Psr=o("cvt"),Bsr=o(" \u2014 "),bW=a("a"),Isr=o("CvtForImageClassification"),Nsr=o(" (CvT model)"),qsr=l(),FT=a("li"),_be=a("strong"),jsr=o("data2vec-vision"),Dsr=o(" \u2014 "),vW=a("a"),Gsr=o("Data2VecVisionForImageClassification"),Osr=o(" (Data2VecVision model)"),Vsr=l(),Hs=a("li"),ube=a("strong"),Xsr=o("deit"),zsr=o(" \u2014 "),FW=a("a"),Qsr=o("DeiTForImageClassification"),Wsr=o(" or "),TW=a("a"),Hsr=o("DeiTForImageClassificationWithTeacher"),Usr=o(" (DeiT model)"),Jsr=l(),TT=a("li"),bbe=a("strong"),Ysr=o("imagegpt"),Ksr=o(" \u2014 "),MW=a("a"),Zsr=o("ImageGPTForImageClassification"),elr=o(" (ImageGPT model)"),olr=l(),Us=a("li"),vbe=a("strong"),rlr=o("levit"),tlr=o(" \u2014 "),EW=a("a"),alr=o("LevitForImageClassification"),nlr=o(" or "),CW=a("a"),slr=o("LevitForImageClassificationWithTeacher"),llr=o(" (LeViT model)"),ilr=l(),MT=a("li"),Fbe=a("strong"),dlr=o("mobilevit"),clr=o(" \u2014 "),wW=a("a"),flr=o("MobileViTForImageClassification"),mlr=o(" (MobileViT model)"),glr=l(),Ft=a("li"),Tbe=a("strong"),hlr=o("perceiver"),plr=o(" \u2014 "),AW=a("a"),_lr=o("PerceiverForImageClassificationLearned"),ulr=o(" or "),LW=a("a"),blr=o("PerceiverForImageClassificationFourier"),vlr=o(" or "),yW=a("a"),Flr=o("PerceiverForImageClassificationConvProcessing"),Tlr=o(" (Perceiver model)"),Mlr=l(),ET=a("li"),Mbe=a("strong"),Elr=o("poolformer"),Clr=o(" \u2014 "),xW=a("a"),wlr=o("PoolFormerForImageClassification"),Alr=o(" (PoolFormer model)"),Llr=l(),CT=a("li"),Ebe=a("strong"),ylr=o("regnet"),xlr=o(" \u2014 "),$W=a("a"),$lr=o("RegNetForImageClassification"),klr=o(" (RegNet model)"),Slr=l(),wT=a("li"),Cbe=a("strong"),Rlr=o("resnet"),Plr=o(" \u2014 "),kW=a("a"),Blr=o("ResNetForImageClassification"),Ilr=o(" (ResNet model)"),Nlr=l(),AT=a("li"),wbe=a("strong"),qlr=o("segformer"),jlr=o(" \u2014 "),SW=a("a"),Dlr=o("SegformerForImageClassification"),Glr=o(" (SegFormer model)"),Olr=l(),LT=a("li"),Abe=a("strong"),Vlr=o("swin"),Xlr=o(" \u2014 "),RW=a("a"),zlr=o("SwinForImageClassification"),Qlr=o(" (Swin Transformer model)"),Wlr=l(),yT=a("li"),Lbe=a("strong"),Hlr=o("van"),Ulr=o(" \u2014 "),PW=a("a"),Jlr=o("VanForImageClassification"),Ylr=o(" (VAN model)"),Klr=l(),xT=a("li"),ybe=a("strong"),Zlr=o("vit"),eir=o(" \u2014 "),BW=a("a"),oir=o("ViTForImageClassification"),rir=o(" (ViT model)"),tir=l(),$T=a("p"),air=o("The model is set in evaluation mode by default using "),xbe=a("code"),nir=o("model.eval()"),sir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$be=a("code"),lir=o("model.train()"),iir=l(),F(kT.$$.fragment),OXe=l(),Ed=a("h2"),ST=a("a"),kbe=a("span"),F(qy.$$.fragment),dir=l(),Sbe=a("span"),cir=o("AutoModelForVision2Seq"),VXe=l(),Xo=a("div"),F(jy.$$.fragment),fir=l(),Cd=a("p"),mir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IW=a("a"),gir=o("from_pretrained()"),hir=o(" class method or the "),NW=a("a"),pir=o("from_config()"),_ir=o(` class
method.`),uir=l(),Dy=a("p"),bir=o("This class cannot be instantiated directly using "),Rbe=a("code"),vir=o("__init__()"),Fir=o(" (throws an error)."),Tir=l(),Tt=a("div"),F(Gy.$$.fragment),Mir=l(),Pbe=a("p"),Eir=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Cir=l(),wd=a("p"),wir=o(`Note:
Loading a model from its configuration file does `),Bbe=a("strong"),Air=o("not"),Lir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=a("a"),yir=o("from_pretrained()"),xir=o(" to load the model weights."),$ir=l(),F(RT.$$.fragment),kir=l(),co=a("div"),F(Oy.$$.fragment),Sir=l(),Ibe=a("p"),Rir=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Pir=l(),Ha=a("p"),Bir=o("The model class to instantiate is selected based on the "),Nbe=a("code"),Iir=o("model_type"),Nir=o(` property of the config object (either
passed as an argument or loaded from `),qbe=a("code"),qir=o("pretrained_model_name_or_path"),jir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=a("code"),Dir=o("pretrained_model_name_or_path"),Gir=o(":"),Oir=l(),Dbe=a("ul"),PT=a("li"),Gbe=a("strong"),Vir=o("vision-encoder-decoder"),Xir=o(" \u2014 "),jW=a("a"),zir=o("VisionEncoderDecoderModel"),Qir=o(" (Vision Encoder decoder model)"),Wir=l(),BT=a("p"),Hir=o("The model is set in evaluation mode by default using "),Obe=a("code"),Uir=o("model.eval()"),Jir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vbe=a("code"),Yir=o("model.train()"),Kir=l(),F(IT.$$.fragment),XXe=l(),Ad=a("h2"),NT=a("a"),Xbe=a("span"),F(Vy.$$.fragment),Zir=l(),zbe=a("span"),edr=o("AutoModelForVisualQuestionAnswering"),zXe=l(),zo=a("div"),F(Xy.$$.fragment),odr=l(),Ld=a("p"),rdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),DW=a("a"),tdr=o("from_pretrained()"),adr=o(" class method or the "),GW=a("a"),ndr=o("from_config()"),sdr=o(` class
method.`),ldr=l(),zy=a("p"),idr=o("This class cannot be instantiated directly using "),Qbe=a("code"),ddr=o("__init__()"),cdr=o(" (throws an error)."),fdr=l(),Mt=a("div"),F(Qy.$$.fragment),mdr=l(),Wbe=a("p"),gdr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),hdr=l(),yd=a("p"),pdr=o(`Note:
Loading a model from its configuration file does `),Hbe=a("strong"),_dr=o("not"),udr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=a("a"),bdr=o("from_pretrained()"),vdr=o(" to load the model weights."),Fdr=l(),F(qT.$$.fragment),Tdr=l(),fo=a("div"),F(Wy.$$.fragment),Mdr=l(),Ube=a("p"),Edr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Cdr=l(),Ua=a("p"),wdr=o("The model class to instantiate is selected based on the "),Jbe=a("code"),Adr=o("model_type"),Ldr=o(` property of the config object (either
passed as an argument or loaded from `),Ybe=a("code"),ydr=o("pretrained_model_name_or_path"),xdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=a("code"),$dr=o("pretrained_model_name_or_path"),kdr=o(":"),Sdr=l(),Zbe=a("ul"),jT=a("li"),eve=a("strong"),Rdr=o("vilt"),Pdr=o(" \u2014 "),VW=a("a"),Bdr=o("ViltForQuestionAnswering"),Idr=o(" (ViLT model)"),Ndr=l(),DT=a("p"),qdr=o("The model is set in evaluation mode by default using "),ove=a("code"),jdr=o("model.eval()"),Ddr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rve=a("code"),Gdr=o("model.train()"),Odr=l(),F(GT.$$.fragment),QXe=l(),xd=a("h2"),OT=a("a"),tve=a("span"),F(Hy.$$.fragment),Vdr=l(),ave=a("span"),Xdr=o("AutoModelForAudioClassification"),WXe=l(),Qo=a("div"),F(Uy.$$.fragment),zdr=l(),$d=a("p"),Qdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),XW=a("a"),Wdr=o("from_pretrained()"),Hdr=o(" class method or the "),zW=a("a"),Udr=o("from_config()"),Jdr=o(` class
method.`),Ydr=l(),Jy=a("p"),Kdr=o("This class cannot be instantiated directly using "),nve=a("code"),Zdr=o("__init__()"),ecr=o(" (throws an error)."),ocr=l(),Et=a("div"),F(Yy.$$.fragment),rcr=l(),sve=a("p"),tcr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),acr=l(),kd=a("p"),ncr=o(`Note:
Loading a model from its configuration file does `),lve=a("strong"),scr=o("not"),lcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),icr=o("from_pretrained()"),dcr=o(" to load the model weights."),ccr=l(),F(VT.$$.fragment),fcr=l(),mo=a("div"),F(Ky.$$.fragment),mcr=l(),ive=a("p"),gcr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),hcr=l(),Ja=a("p"),pcr=o("The model class to instantiate is selected based on the "),dve=a("code"),_cr=o("model_type"),ucr=o(` property of the config object (either
passed as an argument or loaded from `),cve=a("code"),bcr=o("pretrained_model_name_or_path"),vcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=a("code"),Fcr=o("pretrained_model_name_or_path"),Tcr=o(":"),Mcr=l(),Pe=a("ul"),XT=a("li"),mve=a("strong"),Ecr=o("data2vec-audio"),Ccr=o(" \u2014 "),WW=a("a"),wcr=o("Data2VecAudioForSequenceClassification"),Acr=o(" (Data2VecAudio model)"),Lcr=l(),zT=a("li"),gve=a("strong"),ycr=o("hubert"),xcr=o(" \u2014 "),HW=a("a"),$cr=o("HubertForSequenceClassification"),kcr=o(" (Hubert model)"),Scr=l(),QT=a("li"),hve=a("strong"),Rcr=o("sew"),Pcr=o(" \u2014 "),UW=a("a"),Bcr=o("SEWForSequenceClassification"),Icr=o(" (SEW model)"),Ncr=l(),WT=a("li"),pve=a("strong"),qcr=o("sew-d"),jcr=o(" \u2014 "),JW=a("a"),Dcr=o("SEWDForSequenceClassification"),Gcr=o(" (SEW-D model)"),Ocr=l(),HT=a("li"),_ve=a("strong"),Vcr=o("unispeech"),Xcr=o(" \u2014 "),YW=a("a"),zcr=o("UniSpeechForSequenceClassification"),Qcr=o(" (UniSpeech model)"),Wcr=l(),UT=a("li"),uve=a("strong"),Hcr=o("unispeech-sat"),Ucr=o(" \u2014 "),KW=a("a"),Jcr=o("UniSpeechSatForSequenceClassification"),Ycr=o(" (UniSpeechSat model)"),Kcr=l(),JT=a("li"),bve=a("strong"),Zcr=o("wav2vec2"),efr=o(" \u2014 "),ZW=a("a"),ofr=o("Wav2Vec2ForSequenceClassification"),rfr=o(" (Wav2Vec2 model)"),tfr=l(),YT=a("li"),vve=a("strong"),afr=o("wav2vec2-conformer"),nfr=o(" \u2014 "),eH=a("a"),sfr=o("Wav2Vec2ConformerForSequenceClassification"),lfr=o(" (Wav2Vec2-Conformer model)"),ifr=l(),KT=a("li"),Fve=a("strong"),dfr=o("wavlm"),cfr=o(" \u2014 "),oH=a("a"),ffr=o("WavLMForSequenceClassification"),mfr=o(" (WavLM model)"),gfr=l(),ZT=a("p"),hfr=o("The model is set in evaluation mode by default using "),Tve=a("code"),pfr=o("model.eval()"),_fr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mve=a("code"),ufr=o("model.train()"),bfr=l(),F(e7.$$.fragment),HXe=l(),Sd=a("h2"),o7=a("a"),Eve=a("span"),F(Zy.$$.fragment),vfr=l(),Cve=a("span"),Ffr=o("AutoModelForAudioFrameClassification"),UXe=l(),Wo=a("div"),F(e8.$$.fragment),Tfr=l(),Rd=a("p"),Mfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rH=a("a"),Efr=o("from_pretrained()"),Cfr=o(" class method or the "),tH=a("a"),wfr=o("from_config()"),Afr=o(` class
method.`),Lfr=l(),o8=a("p"),yfr=o("This class cannot be instantiated directly using "),wve=a("code"),xfr=o("__init__()"),$fr=o(" (throws an error)."),kfr=l(),Ct=a("div"),F(r8.$$.fragment),Sfr=l(),Ave=a("p"),Rfr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Pfr=l(),Pd=a("p"),Bfr=o(`Note:
Loading a model from its configuration file does `),Lve=a("strong"),Ifr=o("not"),Nfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=a("a"),qfr=o("from_pretrained()"),jfr=o(" to load the model weights."),Dfr=l(),F(r7.$$.fragment),Gfr=l(),go=a("div"),F(t8.$$.fragment),Ofr=l(),yve=a("p"),Vfr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Xfr=l(),Ya=a("p"),zfr=o("The model class to instantiate is selected based on the "),xve=a("code"),Qfr=o("model_type"),Wfr=o(` property of the config object (either
passed as an argument or loaded from `),$ve=a("code"),Hfr=o("pretrained_model_name_or_path"),Ufr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=a("code"),Jfr=o("pretrained_model_name_or_path"),Yfr=o(":"),Kfr=l(),rt=a("ul"),t7=a("li"),Sve=a("strong"),Zfr=o("data2vec-audio"),emr=o(" \u2014 "),nH=a("a"),omr=o("Data2VecAudioForAudioFrameClassification"),rmr=o(" (Data2VecAudio model)"),tmr=l(),a7=a("li"),Rve=a("strong"),amr=o("unispeech-sat"),nmr=o(" \u2014 "),sH=a("a"),smr=o("UniSpeechSatForAudioFrameClassification"),lmr=o(" (UniSpeechSat model)"),imr=l(),n7=a("li"),Pve=a("strong"),dmr=o("wav2vec2"),cmr=o(" \u2014 "),lH=a("a"),fmr=o("Wav2Vec2ForAudioFrameClassification"),mmr=o(" (Wav2Vec2 model)"),gmr=l(),s7=a("li"),Bve=a("strong"),hmr=o("wav2vec2-conformer"),pmr=o(" \u2014 "),iH=a("a"),_mr=o("Wav2Vec2ConformerForAudioFrameClassification"),umr=o(" (Wav2Vec2-Conformer model)"),bmr=l(),l7=a("li"),Ive=a("strong"),vmr=o("wavlm"),Fmr=o(" \u2014 "),dH=a("a"),Tmr=o("WavLMForAudioFrameClassification"),Mmr=o(" (WavLM model)"),Emr=l(),i7=a("p"),Cmr=o("The model is set in evaluation mode by default using "),Nve=a("code"),wmr=o("model.eval()"),Amr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qve=a("code"),Lmr=o("model.train()"),ymr=l(),F(d7.$$.fragment),JXe=l(),Bd=a("h2"),c7=a("a"),jve=a("span"),F(a8.$$.fragment),xmr=l(),Dve=a("span"),$mr=o("AutoModelForCTC"),YXe=l(),Ho=a("div"),F(n8.$$.fragment),kmr=l(),Id=a("p"),Smr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cH=a("a"),Rmr=o("from_pretrained()"),Pmr=o(" class method or the "),fH=a("a"),Bmr=o("from_config()"),Imr=o(` class
method.`),Nmr=l(),s8=a("p"),qmr=o("This class cannot be instantiated directly using "),Gve=a("code"),jmr=o("__init__()"),Dmr=o(" (throws an error)."),Gmr=l(),wt=a("div"),F(l8.$$.fragment),Omr=l(),Ove=a("p"),Vmr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Xmr=l(),Nd=a("p"),zmr=o(`Note:
Loading a model from its configuration file does `),Vve=a("strong"),Qmr=o("not"),Wmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),Hmr=o("from_pretrained()"),Umr=o(" to load the model weights."),Jmr=l(),F(f7.$$.fragment),Ymr=l(),ho=a("div"),F(i8.$$.fragment),Kmr=l(),Xve=a("p"),Zmr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),egr=l(),Ka=a("p"),ogr=o("The model class to instantiate is selected based on the "),zve=a("code"),rgr=o("model_type"),tgr=o(` property of the config object (either
passed as an argument or loaded from `),Qve=a("code"),agr=o("pretrained_model_name_or_path"),ngr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=a("code"),sgr=o("pretrained_model_name_or_path"),lgr=o(":"),igr=l(),Le=a("ul"),m7=a("li"),Hve=a("strong"),dgr=o("data2vec-audio"),cgr=o(" \u2014 "),gH=a("a"),fgr=o("Data2VecAudioForCTC"),mgr=o(" (Data2VecAudio model)"),ggr=l(),g7=a("li"),Uve=a("strong"),hgr=o("hubert"),pgr=o(" \u2014 "),hH=a("a"),_gr=o("HubertForCTC"),ugr=o(" (Hubert model)"),bgr=l(),h7=a("li"),Jve=a("strong"),vgr=o("mctct"),Fgr=o(" \u2014 "),pH=a("a"),Tgr=o("MCTCTForCTC"),Mgr=o(" (M-CTC-T model)"),Egr=l(),p7=a("li"),Yve=a("strong"),Cgr=o("sew"),wgr=o(" \u2014 "),_H=a("a"),Agr=o("SEWForCTC"),Lgr=o(" (SEW model)"),ygr=l(),_7=a("li"),Kve=a("strong"),xgr=o("sew-d"),$gr=o(" \u2014 "),uH=a("a"),kgr=o("SEWDForCTC"),Sgr=o(" (SEW-D model)"),Rgr=l(),u7=a("li"),Zve=a("strong"),Pgr=o("unispeech"),Bgr=o(" \u2014 "),bH=a("a"),Igr=o("UniSpeechForCTC"),Ngr=o(" (UniSpeech model)"),qgr=l(),b7=a("li"),e0e=a("strong"),jgr=o("unispeech-sat"),Dgr=o(" \u2014 "),vH=a("a"),Ggr=o("UniSpeechSatForCTC"),Ogr=o(" (UniSpeechSat model)"),Vgr=l(),v7=a("li"),o0e=a("strong"),Xgr=o("wav2vec2"),zgr=o(" \u2014 "),FH=a("a"),Qgr=o("Wav2Vec2ForCTC"),Wgr=o(" (Wav2Vec2 model)"),Hgr=l(),F7=a("li"),r0e=a("strong"),Ugr=o("wav2vec2-conformer"),Jgr=o(" \u2014 "),TH=a("a"),Ygr=o("Wav2Vec2ConformerForCTC"),Kgr=o(" (Wav2Vec2-Conformer model)"),Zgr=l(),T7=a("li"),t0e=a("strong"),ehr=o("wavlm"),ohr=o(" \u2014 "),MH=a("a"),rhr=o("WavLMForCTC"),thr=o(" (WavLM model)"),ahr=l(),M7=a("p"),nhr=o("The model is set in evaluation mode by default using "),a0e=a("code"),shr=o("model.eval()"),lhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n0e=a("code"),ihr=o("model.train()"),dhr=l(),F(E7.$$.fragment),KXe=l(),qd=a("h2"),C7=a("a"),s0e=a("span"),F(d8.$$.fragment),chr=l(),l0e=a("span"),fhr=o("AutoModelForSpeechSeq2Seq"),ZXe=l(),Uo=a("div"),F(c8.$$.fragment),mhr=l(),jd=a("p"),ghr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EH=a("a"),hhr=o("from_pretrained()"),phr=o(" class method or the "),CH=a("a"),_hr=o("from_config()"),uhr=o(` class
method.`),bhr=l(),f8=a("p"),vhr=o("This class cannot be instantiated directly using "),i0e=a("code"),Fhr=o("__init__()"),Thr=o(" (throws an error)."),Mhr=l(),At=a("div"),F(m8.$$.fragment),Ehr=l(),d0e=a("p"),Chr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),whr=l(),Dd=a("p"),Ahr=o(`Note:
Loading a model from its configuration file does `),c0e=a("strong"),Lhr=o("not"),yhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),xhr=o("from_pretrained()"),$hr=o(" to load the model weights."),khr=l(),F(w7.$$.fragment),Shr=l(),po=a("div"),F(g8.$$.fragment),Rhr=l(),f0e=a("p"),Phr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Bhr=l(),Za=a("p"),Ihr=o("The model class to instantiate is selected based on the "),m0e=a("code"),Nhr=o("model_type"),qhr=o(` property of the config object (either
passed as an argument or loaded from `),g0e=a("code"),jhr=o("pretrained_model_name_or_path"),Dhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h0e=a("code"),Ghr=o("pretrained_model_name_or_path"),Ohr=o(":"),Vhr=l(),h8=a("ul"),A7=a("li"),p0e=a("strong"),Xhr=o("speech-encoder-decoder"),zhr=o(" \u2014 "),AH=a("a"),Qhr=o("SpeechEncoderDecoderModel"),Whr=o(" (Speech Encoder decoder model)"),Hhr=l(),L7=a("li"),_0e=a("strong"),Uhr=o("speech_to_text"),Jhr=o(" \u2014 "),LH=a("a"),Yhr=o("Speech2TextForConditionalGeneration"),Khr=o(" (Speech2Text model)"),Zhr=l(),y7=a("p"),epr=o("The model is set in evaluation mode by default using "),u0e=a("code"),opr=o("model.eval()"),rpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b0e=a("code"),tpr=o("model.train()"),apr=l(),F(x7.$$.fragment),eze=l(),Gd=a("h2"),$7=a("a"),v0e=a("span"),F(p8.$$.fragment),npr=l(),F0e=a("span"),spr=o("AutoModelForAudioXVector"),oze=l(),Jo=a("div"),F(_8.$$.fragment),lpr=l(),Od=a("p"),ipr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yH=a("a"),dpr=o("from_pretrained()"),cpr=o(" class method or the "),xH=a("a"),fpr=o("from_config()"),mpr=o(` class
method.`),gpr=l(),u8=a("p"),hpr=o("This class cannot be instantiated directly using "),T0e=a("code"),ppr=o("__init__()"),_pr=o(" (throws an error)."),upr=l(),Lt=a("div"),F(b8.$$.fragment),bpr=l(),M0e=a("p"),vpr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Fpr=l(),Vd=a("p"),Tpr=o(`Note:
Loading a model from its configuration file does `),E0e=a("strong"),Mpr=o("not"),Epr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),Cpr=o("from_pretrained()"),wpr=o(" to load the model weights."),Apr=l(),F(k7.$$.fragment),Lpr=l(),_o=a("div"),F(v8.$$.fragment),ypr=l(),C0e=a("p"),xpr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),$pr=l(),en=a("p"),kpr=o("The model class to instantiate is selected based on the "),w0e=a("code"),Spr=o("model_type"),Rpr=o(` property of the config object (either
passed as an argument or loaded from `),A0e=a("code"),Ppr=o("pretrained_model_name_or_path"),Bpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L0e=a("code"),Ipr=o("pretrained_model_name_or_path"),Npr=o(":"),qpr=l(),tt=a("ul"),S7=a("li"),y0e=a("strong"),jpr=o("data2vec-audio"),Dpr=o(" \u2014 "),kH=a("a"),Gpr=o("Data2VecAudioForXVector"),Opr=o(" (Data2VecAudio model)"),Vpr=l(),R7=a("li"),x0e=a("strong"),Xpr=o("unispeech-sat"),zpr=o(" \u2014 "),SH=a("a"),Qpr=o("UniSpeechSatForXVector"),Wpr=o(" (UniSpeechSat model)"),Hpr=l(),P7=a("li"),$0e=a("strong"),Upr=o("wav2vec2"),Jpr=o(" \u2014 "),RH=a("a"),Ypr=o("Wav2Vec2ForXVector"),Kpr=o(" (Wav2Vec2 model)"),Zpr=l(),B7=a("li"),k0e=a("strong"),e_r=o("wav2vec2-conformer"),o_r=o(" \u2014 "),PH=a("a"),r_r=o("Wav2Vec2ConformerForXVector"),t_r=o(" (Wav2Vec2-Conformer model)"),a_r=l(),I7=a("li"),S0e=a("strong"),n_r=o("wavlm"),s_r=o(" \u2014 "),BH=a("a"),l_r=o("WavLMForXVector"),i_r=o(" (WavLM model)"),d_r=l(),N7=a("p"),c_r=o("The model is set in evaluation mode by default using "),R0e=a("code"),f_r=o("model.eval()"),m_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P0e=a("code"),g_r=o("model.train()"),h_r=l(),F(q7.$$.fragment),rze=l(),Xd=a("h2"),j7=a("a"),B0e=a("span"),F(F8.$$.fragment),p_r=l(),I0e=a("span"),__r=o("AutoModelForMaskedImageModeling"),tze=l(),Yo=a("div"),F(T8.$$.fragment),u_r=l(),zd=a("p"),b_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),IH=a("a"),v_r=o("from_pretrained()"),F_r=o(" class method or the "),NH=a("a"),T_r=o("from_config()"),M_r=o(` class
method.`),E_r=l(),M8=a("p"),C_r=o("This class cannot be instantiated directly using "),N0e=a("code"),w_r=o("__init__()"),A_r=o(" (throws an error)."),L_r=l(),yt=a("div"),F(E8.$$.fragment),y_r=l(),q0e=a("p"),x_r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),$_r=l(),Qd=a("p"),k_r=o(`Note:
Loading a model from its configuration file does `),j0e=a("strong"),S_r=o("not"),R_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=a("a"),P_r=o("from_pretrained()"),B_r=o(" to load the model weights."),I_r=l(),F(D7.$$.fragment),N_r=l(),uo=a("div"),F(C8.$$.fragment),q_r=l(),D0e=a("p"),j_r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),D_r=l(),on=a("p"),G_r=o("The model class to instantiate is selected based on the "),G0e=a("code"),O_r=o("model_type"),V_r=o(` property of the config object (either
passed as an argument or loaded from `),O0e=a("code"),X_r=o("pretrained_model_name_or_path"),z_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V0e=a("code"),Q_r=o("pretrained_model_name_or_path"),W_r=o(":"),H_r=l(),Wd=a("ul"),G7=a("li"),X0e=a("strong"),U_r=o("deit"),J_r=o(" \u2014 "),jH=a("a"),Y_r=o("DeiTForMaskedImageModeling"),K_r=o(" (DeiT model)"),Z_r=l(),O7=a("li"),z0e=a("strong"),eur=o("swin"),our=o(" \u2014 "),DH=a("a"),rur=o("SwinForMaskedImageModeling"),tur=o(" (Swin Transformer model)"),aur=l(),V7=a("li"),Q0e=a("strong"),nur=o("vit"),sur=o(" \u2014 "),GH=a("a"),lur=o("ViTForMaskedImageModeling"),iur=o(" (ViT model)"),dur=l(),X7=a("p"),cur=o("The model is set in evaluation mode by default using "),W0e=a("code"),fur=o("model.eval()"),mur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H0e=a("code"),gur=o("model.train()"),hur=l(),F(z7.$$.fragment),aze=l(),Hd=a("h2"),Q7=a("a"),U0e=a("span"),F(w8.$$.fragment),pur=l(),J0e=a("span"),_ur=o("AutoModelForObjectDetection"),nze=l(),Ko=a("div"),F(A8.$$.fragment),uur=l(),Ud=a("p"),bur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),OH=a("a"),vur=o("from_pretrained()"),Fur=o(" class method or the "),VH=a("a"),Tur=o("from_config()"),Mur=o(` class
method.`),Eur=l(),L8=a("p"),Cur=o("This class cannot be instantiated directly using "),Y0e=a("code"),wur=o("__init__()"),Aur=o(" (throws an error)."),Lur=l(),xt=a("div"),F(y8.$$.fragment),yur=l(),K0e=a("p"),xur=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),$ur=l(),Jd=a("p"),kur=o(`Note:
Loading a model from its configuration file does `),Z0e=a("strong"),Sur=o("not"),Rur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),Pur=o("from_pretrained()"),Bur=o(" to load the model weights."),Iur=l(),F(W7.$$.fragment),Nur=l(),bo=a("div"),F(x8.$$.fragment),qur=l(),eFe=a("p"),jur=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Dur=l(),rn=a("p"),Gur=o("The model class to instantiate is selected based on the "),oFe=a("code"),Our=o("model_type"),Vur=o(` property of the config object (either
passed as an argument or loaded from `),rFe=a("code"),Xur=o("pretrained_model_name_or_path"),zur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=a("code"),Qur=o("pretrained_model_name_or_path"),Wur=o(":"),Hur=l(),$8=a("ul"),H7=a("li"),aFe=a("strong"),Uur=o("detr"),Jur=o(" \u2014 "),zH=a("a"),Yur=o("DetrForObjectDetection"),Kur=o(" (DETR model)"),Zur=l(),U7=a("li"),nFe=a("strong"),e1r=o("yolos"),o1r=o(" \u2014 "),QH=a("a"),r1r=o("YolosForObjectDetection"),t1r=o(" (YOLOS model)"),a1r=l(),J7=a("p"),n1r=o("The model is set in evaluation mode by default using "),sFe=a("code"),s1r=o("model.eval()"),l1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lFe=a("code"),i1r=o("model.train()"),d1r=l(),F(Y7.$$.fragment),sze=l(),Yd=a("h2"),K7=a("a"),iFe=a("span"),F(k8.$$.fragment),c1r=l(),dFe=a("span"),f1r=o("AutoModelForImageSegmentation"),lze=l(),Zo=a("div"),F(S8.$$.fragment),m1r=l(),Kd=a("p"),g1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),WH=a("a"),h1r=o("from_pretrained()"),p1r=o(" class method or the "),HH=a("a"),_1r=o("from_config()"),u1r=o(` class
method.`),b1r=l(),R8=a("p"),v1r=o("This class cannot be instantiated directly using "),cFe=a("code"),F1r=o("__init__()"),T1r=o(" (throws an error)."),M1r=l(),$t=a("div"),F(P8.$$.fragment),E1r=l(),fFe=a("p"),C1r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),w1r=l(),Zd=a("p"),A1r=o(`Note:
Loading a model from its configuration file does `),mFe=a("strong"),L1r=o("not"),y1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=a("a"),x1r=o("from_pretrained()"),$1r=o(" to load the model weights."),k1r=l(),F(Z7.$$.fragment),S1r=l(),vo=a("div"),F(B8.$$.fragment),R1r=l(),gFe=a("p"),P1r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),B1r=l(),tn=a("p"),I1r=o("The model class to instantiate is selected based on the "),hFe=a("code"),N1r=o("model_type"),q1r=o(` property of the config object (either
passed as an argument or loaded from `),pFe=a("code"),j1r=o("pretrained_model_name_or_path"),D1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=a("code"),G1r=o("pretrained_model_name_or_path"),O1r=o(":"),V1r=l(),uFe=a("ul"),e9=a("li"),bFe=a("strong"),X1r=o("detr"),z1r=o(" \u2014 "),JH=a("a"),Q1r=o("DetrForSegmentation"),W1r=o(" (DETR model)"),H1r=l(),o9=a("p"),U1r=o("The model is set in evaluation mode by default using "),vFe=a("code"),J1r=o("model.eval()"),Y1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FFe=a("code"),K1r=o("model.train()"),Z1r=l(),F(r9.$$.fragment),ize=l(),ec=a("h2"),t9=a("a"),TFe=a("span"),F(I8.$$.fragment),e2r=l(),MFe=a("span"),o2r=o("AutoModelForSemanticSegmentation"),dze=l(),er=a("div"),F(N8.$$.fragment),r2r=l(),oc=a("p"),t2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),YH=a("a"),a2r=o("from_pretrained()"),n2r=o(" class method or the "),KH=a("a"),s2r=o("from_config()"),l2r=o(` class
method.`),i2r=l(),q8=a("p"),d2r=o("This class cannot be instantiated directly using "),EFe=a("code"),c2r=o("__init__()"),f2r=o(" (throws an error)."),m2r=l(),kt=a("div"),F(j8.$$.fragment),g2r=l(),CFe=a("p"),h2r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),p2r=l(),rc=a("p"),_2r=o(`Note:
Loading a model from its configuration file does `),wFe=a("strong"),u2r=o("not"),b2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=a("a"),v2r=o("from_pretrained()"),F2r=o(" to load the model weights."),T2r=l(),F(a9.$$.fragment),M2r=l(),Fo=a("div"),F(D8.$$.fragment),E2r=l(),AFe=a("p"),C2r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),w2r=l(),an=a("p"),A2r=o("The model class to instantiate is selected based on the "),LFe=a("code"),L2r=o("model_type"),y2r=o(` property of the config object (either
passed as an argument or loaded from `),yFe=a("code"),x2r=o("pretrained_model_name_or_path"),$2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=a("code"),k2r=o("pretrained_model_name_or_path"),S2r=o(":"),R2r=l(),at=a("ul"),n9=a("li"),$Fe=a("strong"),P2r=o("beit"),B2r=o(" \u2014 "),eU=a("a"),I2r=o("BeitForSemanticSegmentation"),N2r=o(" (BEiT model)"),q2r=l(),s9=a("li"),kFe=a("strong"),j2r=o("data2vec-vision"),D2r=o(" \u2014 "),oU=a("a"),G2r=o("Data2VecVisionForSemanticSegmentation"),O2r=o(" (Data2VecVision model)"),V2r=l(),l9=a("li"),SFe=a("strong"),X2r=o("dpt"),z2r=o(" \u2014 "),rU=a("a"),Q2r=o("DPTForSemanticSegmentation"),W2r=o(" (DPT model)"),H2r=l(),i9=a("li"),RFe=a("strong"),U2r=o("mobilevit"),J2r=o(" \u2014 "),tU=a("a"),Y2r=o("MobileViTForSemanticSegmentation"),K2r=o(" (MobileViT model)"),Z2r=l(),d9=a("li"),PFe=a("strong"),ebr=o("segformer"),obr=o(" \u2014 "),aU=a("a"),rbr=o("SegformerForSemanticSegmentation"),tbr=o(" (SegFormer model)"),abr=l(),c9=a("p"),nbr=o("The model is set in evaluation mode by default using "),BFe=a("code"),sbr=o("model.eval()"),lbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IFe=a("code"),ibr=o("model.train()"),dbr=l(),F(f9.$$.fragment),cze=l(),tc=a("h2"),m9=a("a"),NFe=a("span"),F(G8.$$.fragment),cbr=l(),qFe=a("span"),fbr=o("AutoModelForInstanceSegmentation"),fze=l(),or=a("div"),F(O8.$$.fragment),mbr=l(),ac=a("p"),gbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),nU=a("a"),hbr=o("from_pretrained()"),pbr=o(" class method or the "),sU=a("a"),_br=o("from_config()"),ubr=o(` class
method.`),bbr=l(),V8=a("p"),vbr=o("This class cannot be instantiated directly using "),jFe=a("code"),Fbr=o("__init__()"),Tbr=o(" (throws an error)."),Mbr=l(),St=a("div"),F(X8.$$.fragment),Ebr=l(),DFe=a("p"),Cbr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),wbr=l(),nc=a("p"),Abr=o(`Note:
Loading a model from its configuration file does `),GFe=a("strong"),Lbr=o("not"),ybr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),xbr=o("from_pretrained()"),$br=o(" to load the model weights."),kbr=l(),F(g9.$$.fragment),Sbr=l(),To=a("div"),F(z8.$$.fragment),Rbr=l(),OFe=a("p"),Pbr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Bbr=l(),nn=a("p"),Ibr=o("The model class to instantiate is selected based on the "),VFe=a("code"),Nbr=o("model_type"),qbr=o(` property of the config object (either
passed as an argument or loaded from `),XFe=a("code"),jbr=o("pretrained_model_name_or_path"),Dbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=a("code"),Gbr=o("pretrained_model_name_or_path"),Obr=o(":"),Vbr=l(),QFe=a("ul"),h9=a("li"),WFe=a("strong"),Xbr=o("maskformer"),zbr=o(" \u2014 "),iU=a("a"),Qbr=o("MaskFormerForInstanceSegmentation"),Wbr=o(" (MaskFormer model)"),Hbr=l(),p9=a("p"),Ubr=o("The model is set in evaluation mode by default using "),HFe=a("code"),Jbr=o("model.eval()"),Ybr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UFe=a("code"),Kbr=o("model.train()"),Zbr=l(),F(_9.$$.fragment),mze=l(),sc=a("h2"),u9=a("a"),JFe=a("span"),F(Q8.$$.fragment),evr=l(),YFe=a("span"),ovr=o("TFAutoModel"),gze=l(),rr=a("div"),F(W8.$$.fragment),rvr=l(),lc=a("p"),tvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dU=a("a"),avr=o("from_pretrained()"),nvr=o(" class method or the "),cU=a("a"),svr=o("from_config()"),lvr=o(` class
method.`),ivr=l(),H8=a("p"),dvr=o("This class cannot be instantiated directly using "),KFe=a("code"),cvr=o("__init__()"),fvr=o(" (throws an error)."),mvr=l(),Rt=a("div"),F(U8.$$.fragment),gvr=l(),ZFe=a("p"),hvr=o("Instantiates one of the base model classes of the library from a configuration."),pvr=l(),ic=a("p"),_vr=o(`Note:
Loading a model from its configuration file does `),eTe=a("strong"),uvr=o("not"),bvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),vvr=o("from_pretrained()"),Fvr=o(" to load the model weights."),Tvr=l(),F(b9.$$.fragment),Mvr=l(),$r=a("div"),F(J8.$$.fragment),Evr=l(),oTe=a("p"),Cvr=o("Instantiate one of the base model classes of the library from a pretrained model."),wvr=l(),sn=a("p"),Avr=o("The model class to instantiate is selected based on the "),rTe=a("code"),Lvr=o("model_type"),yvr=o(` property of the config object (either
passed as an argument or loaded from `),tTe=a("code"),xvr=o("pretrained_model_name_or_path"),$vr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=a("code"),kvr=o("pretrained_model_name_or_path"),Svr=o(":"),Rvr=l(),B=a("ul"),v9=a("li"),nTe=a("strong"),Pvr=o("albert"),Bvr=o(" \u2014 "),mU=a("a"),Ivr=o("TFAlbertModel"),Nvr=o(" (ALBERT model)"),qvr=l(),F9=a("li"),sTe=a("strong"),jvr=o("bart"),Dvr=o(" \u2014 "),gU=a("a"),Gvr=o("TFBartModel"),Ovr=o(" (BART model)"),Vvr=l(),T9=a("li"),lTe=a("strong"),Xvr=o("bert"),zvr=o(" \u2014 "),hU=a("a"),Qvr=o("TFBertModel"),Wvr=o(" (BERT model)"),Hvr=l(),M9=a("li"),iTe=a("strong"),Uvr=o("blenderbot"),Jvr=o(" \u2014 "),pU=a("a"),Yvr=o("TFBlenderbotModel"),Kvr=o(" (Blenderbot model)"),Zvr=l(),E9=a("li"),dTe=a("strong"),e0r=o("blenderbot-small"),o0r=o(" \u2014 "),_U=a("a"),r0r=o("TFBlenderbotSmallModel"),t0r=o(" (BlenderbotSmall model)"),a0r=l(),C9=a("li"),cTe=a("strong"),n0r=o("camembert"),s0r=o(" \u2014 "),uU=a("a"),l0r=o("TFCamembertModel"),i0r=o(" (CamemBERT model)"),d0r=l(),w9=a("li"),fTe=a("strong"),c0r=o("clip"),f0r=o(" \u2014 "),bU=a("a"),m0r=o("TFCLIPModel"),g0r=o(" (CLIP model)"),h0r=l(),A9=a("li"),mTe=a("strong"),p0r=o("convbert"),_0r=o(" \u2014 "),vU=a("a"),u0r=o("TFConvBertModel"),b0r=o(" (ConvBERT model)"),v0r=l(),L9=a("li"),gTe=a("strong"),F0r=o("convnext"),T0r=o(" \u2014 "),FU=a("a"),M0r=o("TFConvNextModel"),E0r=o(" (ConvNeXT model)"),C0r=l(),y9=a("li"),hTe=a("strong"),w0r=o("ctrl"),A0r=o(" \u2014 "),TU=a("a"),L0r=o("TFCTRLModel"),y0r=o(" (CTRL model)"),x0r=l(),x9=a("li"),pTe=a("strong"),$0r=o("data2vec-vision"),k0r=o(" \u2014 "),MU=a("a"),S0r=o("TFData2VecVisionModel"),R0r=o(" (Data2VecVision model)"),P0r=l(),$9=a("li"),_Te=a("strong"),B0r=o("deberta"),I0r=o(" \u2014 "),EU=a("a"),N0r=o("TFDebertaModel"),q0r=o(" (DeBERTa model)"),j0r=l(),k9=a("li"),uTe=a("strong"),D0r=o("deberta-v2"),G0r=o(" \u2014 "),CU=a("a"),O0r=o("TFDebertaV2Model"),V0r=o(" (DeBERTa-v2 model)"),X0r=l(),S9=a("li"),bTe=a("strong"),z0r=o("deit"),Q0r=o(" \u2014 "),wU=a("a"),W0r=o("TFDeiTModel"),H0r=o(" (DeiT model)"),U0r=l(),R9=a("li"),vTe=a("strong"),J0r=o("distilbert"),Y0r=o(" \u2014 "),AU=a("a"),K0r=o("TFDistilBertModel"),Z0r=o(" (DistilBERT model)"),eFr=l(),P9=a("li"),FTe=a("strong"),oFr=o("dpr"),rFr=o(" \u2014 "),LU=a("a"),tFr=o("TFDPRQuestionEncoder"),aFr=o(" (DPR model)"),nFr=l(),B9=a("li"),TTe=a("strong"),sFr=o("electra"),lFr=o(" \u2014 "),yU=a("a"),iFr=o("TFElectraModel"),dFr=o(" (ELECTRA model)"),cFr=l(),I9=a("li"),MTe=a("strong"),fFr=o("flaubert"),mFr=o(" \u2014 "),xU=a("a"),gFr=o("TFFlaubertModel"),hFr=o(" (FlauBERT model)"),pFr=l(),Js=a("li"),ETe=a("strong"),_Fr=o("funnel"),uFr=o(" \u2014 "),$U=a("a"),bFr=o("TFFunnelModel"),vFr=o(" or "),kU=a("a"),FFr=o("TFFunnelBaseModel"),TFr=o(" (Funnel Transformer model)"),MFr=l(),N9=a("li"),CTe=a("strong"),EFr=o("gpt2"),CFr=o(" \u2014 "),SU=a("a"),wFr=o("TFGPT2Model"),AFr=o(" (OpenAI GPT-2 model)"),LFr=l(),q9=a("li"),wTe=a("strong"),yFr=o("gptj"),xFr=o(" \u2014 "),RU=a("a"),$Fr=o("TFGPTJModel"),kFr=o(" (GPT-J model)"),SFr=l(),j9=a("li"),ATe=a("strong"),RFr=o("hubert"),PFr=o(" \u2014 "),PU=a("a"),BFr=o("TFHubertModel"),IFr=o(" (Hubert model)"),NFr=l(),D9=a("li"),LTe=a("strong"),qFr=o("layoutlm"),jFr=o(" \u2014 "),BU=a("a"),DFr=o("TFLayoutLMModel"),GFr=o(" (LayoutLM model)"),OFr=l(),G9=a("li"),yTe=a("strong"),VFr=o("led"),XFr=o(" \u2014 "),IU=a("a"),zFr=o("TFLEDModel"),QFr=o(" (LED model)"),WFr=l(),O9=a("li"),xTe=a("strong"),HFr=o("longformer"),UFr=o(" \u2014 "),NU=a("a"),JFr=o("TFLongformerModel"),YFr=o(" (Longformer model)"),KFr=l(),V9=a("li"),$Te=a("strong"),ZFr=o("lxmert"),eTr=o(" \u2014 "),qU=a("a"),oTr=o("TFLxmertModel"),rTr=o(" (LXMERT model)"),tTr=l(),X9=a("li"),kTe=a("strong"),aTr=o("marian"),nTr=o(" \u2014 "),jU=a("a"),sTr=o("TFMarianModel"),lTr=o(" (Marian model)"),iTr=l(),z9=a("li"),STe=a("strong"),dTr=o("mbart"),cTr=o(" \u2014 "),DU=a("a"),fTr=o("TFMBartModel"),mTr=o(" (mBART model)"),gTr=l(),Q9=a("li"),RTe=a("strong"),hTr=o("mobilebert"),pTr=o(" \u2014 "),GU=a("a"),_Tr=o("TFMobileBertModel"),uTr=o(" (MobileBERT model)"),bTr=l(),W9=a("li"),PTe=a("strong"),vTr=o("mpnet"),FTr=o(" \u2014 "),OU=a("a"),TTr=o("TFMPNetModel"),MTr=o(" (MPNet model)"),ETr=l(),H9=a("li"),BTe=a("strong"),CTr=o("mt5"),wTr=o(" \u2014 "),VU=a("a"),ATr=o("TFMT5Model"),LTr=o(" (MT5 model)"),yTr=l(),U9=a("li"),ITe=a("strong"),xTr=o("openai-gpt"),$Tr=o(" \u2014 "),XU=a("a"),kTr=o("TFOpenAIGPTModel"),STr=o(" (OpenAI GPT model)"),RTr=l(),J9=a("li"),NTe=a("strong"),PTr=o("opt"),BTr=o(" \u2014 "),zU=a("a"),ITr=o("TFOPTModel"),NTr=o(" (OPT model)"),qTr=l(),Y9=a("li"),qTe=a("strong"),jTr=o("pegasus"),DTr=o(" \u2014 "),QU=a("a"),GTr=o("TFPegasusModel"),OTr=o(" (Pegasus model)"),VTr=l(),K9=a("li"),jTe=a("strong"),XTr=o("regnet"),zTr=o(" \u2014 "),WU=a("a"),QTr=o("TFRegNetModel"),WTr=o(" (RegNet model)"),HTr=l(),Z9=a("li"),DTe=a("strong"),UTr=o("rembert"),JTr=o(" \u2014 "),HU=a("a"),YTr=o("TFRemBertModel"),KTr=o(" (RemBERT model)"),ZTr=l(),eM=a("li"),GTe=a("strong"),e7r=o("resnet"),o7r=o(" \u2014 "),UU=a("a"),r7r=o("TFResNetModel"),t7r=o(" (ResNet model)"),a7r=l(),oM=a("li"),OTe=a("strong"),n7r=o("roberta"),s7r=o(" \u2014 "),JU=a("a"),l7r=o("TFRobertaModel"),i7r=o(" (RoBERTa model)"),d7r=l(),rM=a("li"),VTe=a("strong"),c7r=o("roformer"),f7r=o(" \u2014 "),YU=a("a"),m7r=o("TFRoFormerModel"),g7r=o(" (RoFormer model)"),h7r=l(),tM=a("li"),XTe=a("strong"),p7r=o("segformer"),_7r=o(" \u2014 "),KU=a("a"),u7r=o("TFSegformerModel"),b7r=o(" (SegFormer model)"),v7r=l(),aM=a("li"),zTe=a("strong"),F7r=o("speech_to_text"),T7r=o(" \u2014 "),ZU=a("a"),M7r=o("TFSpeech2TextModel"),E7r=o(" (Speech2Text model)"),C7r=l(),nM=a("li"),QTe=a("strong"),w7r=o("swin"),A7r=o(" \u2014 "),eJ=a("a"),L7r=o("TFSwinModel"),y7r=o(" (Swin Transformer model)"),x7r=l(),sM=a("li"),WTe=a("strong"),$7r=o("t5"),k7r=o(" \u2014 "),oJ=a("a"),S7r=o("TFT5Model"),R7r=o(" (T5 model)"),P7r=l(),lM=a("li"),HTe=a("strong"),B7r=o("tapas"),I7r=o(" \u2014 "),rJ=a("a"),N7r=o("TFTapasModel"),q7r=o(" (TAPAS model)"),j7r=l(),iM=a("li"),UTe=a("strong"),D7r=o("transfo-xl"),G7r=o(" \u2014 "),tJ=a("a"),O7r=o("TFTransfoXLModel"),V7r=o(" (Transformer-XL model)"),X7r=l(),dM=a("li"),JTe=a("strong"),z7r=o("vit"),Q7r=o(" \u2014 "),aJ=a("a"),W7r=o("TFViTModel"),H7r=o(" (ViT model)"),U7r=l(),cM=a("li"),YTe=a("strong"),J7r=o("vit_mae"),Y7r=o(" \u2014 "),nJ=a("a"),K7r=o("TFViTMAEModel"),Z7r=o(" (ViTMAE model)"),e9r=l(),fM=a("li"),KTe=a("strong"),o9r=o("wav2vec2"),r9r=o(" \u2014 "),sJ=a("a"),t9r=o("TFWav2Vec2Model"),a9r=o(" (Wav2Vec2 model)"),n9r=l(),mM=a("li"),ZTe=a("strong"),s9r=o("xlm"),l9r=o(" \u2014 "),lJ=a("a"),i9r=o("TFXLMModel"),d9r=o(" (XLM model)"),c9r=l(),gM=a("li"),e7e=a("strong"),f9r=o("xlm-roberta"),m9r=o(" \u2014 "),iJ=a("a"),g9r=o("TFXLMRobertaModel"),h9r=o(" (XLM-RoBERTa model)"),p9r=l(),hM=a("li"),o7e=a("strong"),_9r=o("xlnet"),u9r=o(" \u2014 "),dJ=a("a"),b9r=o("TFXLNetModel"),v9r=o(" (XLNet model)"),F9r=l(),F(pM.$$.fragment),hze=l(),dc=a("h2"),_M=a("a"),r7e=a("span"),F(Y8.$$.fragment),T9r=l(),t7e=a("span"),M9r=o("TFAutoModelForPreTraining"),pze=l(),tr=a("div"),F(K8.$$.fragment),E9r=l(),cc=a("p"),C9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),cJ=a("a"),w9r=o("from_pretrained()"),A9r=o(" class method or the "),fJ=a("a"),L9r=o("from_config()"),y9r=o(` class
method.`),x9r=l(),Z8=a("p"),$9r=o("This class cannot be instantiated directly using "),a7e=a("code"),k9r=o("__init__()"),S9r=o(" (throws an error)."),R9r=l(),Pt=a("div"),F(ex.$$.fragment),P9r=l(),n7e=a("p"),B9r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),I9r=l(),fc=a("p"),N9r=o(`Note:
Loading a model from its configuration file does `),s7e=a("strong"),q9r=o("not"),j9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=a("a"),D9r=o("from_pretrained()"),G9r=o(" to load the model weights."),O9r=l(),F(uM.$$.fragment),V9r=l(),kr=a("div"),F(ox.$$.fragment),X9r=l(),l7e=a("p"),z9r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Q9r=l(),ln=a("p"),W9r=o("The model class to instantiate is selected based on the "),i7e=a("code"),H9r=o("model_type"),U9r=o(` property of the config object (either
passed as an argument or loaded from `),d7e=a("code"),J9r=o("pretrained_model_name_or_path"),Y9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c7e=a("code"),K9r=o("pretrained_model_name_or_path"),Z9r=o(":"),eMr=l(),se=a("ul"),bM=a("li"),f7e=a("strong"),oMr=o("albert"),rMr=o(" \u2014 "),gJ=a("a"),tMr=o("TFAlbertForPreTraining"),aMr=o(" (ALBERT model)"),nMr=l(),vM=a("li"),m7e=a("strong"),sMr=o("bart"),lMr=o(" \u2014 "),hJ=a("a"),iMr=o("TFBartForConditionalGeneration"),dMr=o(" (BART model)"),cMr=l(),FM=a("li"),g7e=a("strong"),fMr=o("bert"),mMr=o(" \u2014 "),pJ=a("a"),gMr=o("TFBertForPreTraining"),hMr=o(" (BERT model)"),pMr=l(),TM=a("li"),h7e=a("strong"),_Mr=o("camembert"),uMr=o(" \u2014 "),_J=a("a"),bMr=o("TFCamembertForMaskedLM"),vMr=o(" (CamemBERT model)"),FMr=l(),MM=a("li"),p7e=a("strong"),TMr=o("ctrl"),MMr=o(" \u2014 "),uJ=a("a"),EMr=o("TFCTRLLMHeadModel"),CMr=o(" (CTRL model)"),wMr=l(),EM=a("li"),_7e=a("strong"),AMr=o("distilbert"),LMr=o(" \u2014 "),bJ=a("a"),yMr=o("TFDistilBertForMaskedLM"),xMr=o(" (DistilBERT model)"),$Mr=l(),CM=a("li"),u7e=a("strong"),kMr=o("electra"),SMr=o(" \u2014 "),vJ=a("a"),RMr=o("TFElectraForPreTraining"),PMr=o(" (ELECTRA model)"),BMr=l(),wM=a("li"),b7e=a("strong"),IMr=o("flaubert"),NMr=o(" \u2014 "),FJ=a("a"),qMr=o("TFFlaubertWithLMHeadModel"),jMr=o(" (FlauBERT model)"),DMr=l(),AM=a("li"),v7e=a("strong"),GMr=o("funnel"),OMr=o(" \u2014 "),TJ=a("a"),VMr=o("TFFunnelForPreTraining"),XMr=o(" (Funnel Transformer model)"),zMr=l(),LM=a("li"),F7e=a("strong"),QMr=o("gpt2"),WMr=o(" \u2014 "),MJ=a("a"),HMr=o("TFGPT2LMHeadModel"),UMr=o(" (OpenAI GPT-2 model)"),JMr=l(),yM=a("li"),T7e=a("strong"),YMr=o("layoutlm"),KMr=o(" \u2014 "),EJ=a("a"),ZMr=o("TFLayoutLMForMaskedLM"),e4r=o(" (LayoutLM model)"),o4r=l(),xM=a("li"),M7e=a("strong"),r4r=o("lxmert"),t4r=o(" \u2014 "),CJ=a("a"),a4r=o("TFLxmertForPreTraining"),n4r=o(" (LXMERT model)"),s4r=l(),$M=a("li"),E7e=a("strong"),l4r=o("mobilebert"),i4r=o(" \u2014 "),wJ=a("a"),d4r=o("TFMobileBertForPreTraining"),c4r=o(" (MobileBERT model)"),f4r=l(),kM=a("li"),C7e=a("strong"),m4r=o("mpnet"),g4r=o(" \u2014 "),AJ=a("a"),h4r=o("TFMPNetForMaskedLM"),p4r=o(" (MPNet model)"),_4r=l(),SM=a("li"),w7e=a("strong"),u4r=o("openai-gpt"),b4r=o(" \u2014 "),LJ=a("a"),v4r=o("TFOpenAIGPTLMHeadModel"),F4r=o(" (OpenAI GPT model)"),T4r=l(),RM=a("li"),A7e=a("strong"),M4r=o("roberta"),E4r=o(" \u2014 "),yJ=a("a"),C4r=o("TFRobertaForMaskedLM"),w4r=o(" (RoBERTa model)"),A4r=l(),PM=a("li"),L7e=a("strong"),L4r=o("t5"),y4r=o(" \u2014 "),xJ=a("a"),x4r=o("TFT5ForConditionalGeneration"),$4r=o(" (T5 model)"),k4r=l(),BM=a("li"),y7e=a("strong"),S4r=o("tapas"),R4r=o(" \u2014 "),$J=a("a"),P4r=o("TFTapasForMaskedLM"),B4r=o(" (TAPAS model)"),I4r=l(),IM=a("li"),x7e=a("strong"),N4r=o("transfo-xl"),q4r=o(" \u2014 "),kJ=a("a"),j4r=o("TFTransfoXLLMHeadModel"),D4r=o(" (Transformer-XL model)"),G4r=l(),NM=a("li"),$7e=a("strong"),O4r=o("vit_mae"),V4r=o(" \u2014 "),SJ=a("a"),X4r=o("TFViTMAEForPreTraining"),z4r=o(" (ViTMAE model)"),Q4r=l(),qM=a("li"),k7e=a("strong"),W4r=o("xlm"),H4r=o(" \u2014 "),RJ=a("a"),U4r=o("TFXLMWithLMHeadModel"),J4r=o(" (XLM model)"),Y4r=l(),jM=a("li"),S7e=a("strong"),K4r=o("xlm-roberta"),Z4r=o(" \u2014 "),PJ=a("a"),eEr=o("TFXLMRobertaForMaskedLM"),oEr=o(" (XLM-RoBERTa model)"),rEr=l(),DM=a("li"),R7e=a("strong"),tEr=o("xlnet"),aEr=o(" \u2014 "),BJ=a("a"),nEr=o("TFXLNetLMHeadModel"),sEr=o(" (XLNet model)"),lEr=l(),F(GM.$$.fragment),_ze=l(),mc=a("h2"),OM=a("a"),P7e=a("span"),F(rx.$$.fragment),iEr=l(),B7e=a("span"),dEr=o("TFAutoModelForCausalLM"),uze=l(),ar=a("div"),F(tx.$$.fragment),cEr=l(),gc=a("p"),fEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IJ=a("a"),mEr=o("from_pretrained()"),gEr=o(" class method or the "),NJ=a("a"),hEr=o("from_config()"),pEr=o(` class
method.`),_Er=l(),ax=a("p"),uEr=o("This class cannot be instantiated directly using "),I7e=a("code"),bEr=o("__init__()"),vEr=o(" (throws an error)."),FEr=l(),Bt=a("div"),F(nx.$$.fragment),TEr=l(),N7e=a("p"),MEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),EEr=l(),hc=a("p"),CEr=o(`Note:
Loading a model from its configuration file does `),q7e=a("strong"),wEr=o("not"),AEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=a("a"),LEr=o("from_pretrained()"),yEr=o(" to load the model weights."),xEr=l(),F(VM.$$.fragment),$Er=l(),Sr=a("div"),F(sx.$$.fragment),kEr=l(),j7e=a("p"),SEr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),REr=l(),dn=a("p"),PEr=o("The model class to instantiate is selected based on the "),D7e=a("code"),BEr=o("model_type"),IEr=o(` property of the config object (either
passed as an argument or loaded from `),G7e=a("code"),NEr=o("pretrained_model_name_or_path"),qEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=a("code"),jEr=o("pretrained_model_name_or_path"),DEr=o(":"),GEr=l(),Me=a("ul"),XM=a("li"),V7e=a("strong"),OEr=o("bert"),VEr=o(" \u2014 "),jJ=a("a"),XEr=o("TFBertLMHeadModel"),zEr=o(" (BERT model)"),QEr=l(),zM=a("li"),X7e=a("strong"),WEr=o("camembert"),HEr=o(" \u2014 "),DJ=a("a"),UEr=o("TFCamembertForCausalLM"),JEr=o(" (CamemBERT model)"),YEr=l(),QM=a("li"),z7e=a("strong"),KEr=o("ctrl"),ZEr=o(" \u2014 "),GJ=a("a"),eCr=o("TFCTRLLMHeadModel"),oCr=o(" (CTRL model)"),rCr=l(),WM=a("li"),Q7e=a("strong"),tCr=o("gpt2"),aCr=o(" \u2014 "),OJ=a("a"),nCr=o("TFGPT2LMHeadModel"),sCr=o(" (OpenAI GPT-2 model)"),lCr=l(),HM=a("li"),W7e=a("strong"),iCr=o("gptj"),dCr=o(" \u2014 "),VJ=a("a"),cCr=o("TFGPTJForCausalLM"),fCr=o(" (GPT-J model)"),mCr=l(),UM=a("li"),H7e=a("strong"),gCr=o("openai-gpt"),hCr=o(" \u2014 "),XJ=a("a"),pCr=o("TFOpenAIGPTLMHeadModel"),_Cr=o(" (OpenAI GPT model)"),uCr=l(),JM=a("li"),U7e=a("strong"),bCr=o("opt"),vCr=o(" \u2014 "),zJ=a("a"),FCr=o("TFOPTForCausalLM"),TCr=o(" (OPT model)"),MCr=l(),YM=a("li"),J7e=a("strong"),ECr=o("rembert"),CCr=o(" \u2014 "),QJ=a("a"),wCr=o("TFRemBertForCausalLM"),ACr=o(" (RemBERT model)"),LCr=l(),KM=a("li"),Y7e=a("strong"),yCr=o("roberta"),xCr=o(" \u2014 "),WJ=a("a"),$Cr=o("TFRobertaForCausalLM"),kCr=o(" (RoBERTa model)"),SCr=l(),ZM=a("li"),K7e=a("strong"),RCr=o("roformer"),PCr=o(" \u2014 "),HJ=a("a"),BCr=o("TFRoFormerForCausalLM"),ICr=o(" (RoFormer model)"),NCr=l(),e4=a("li"),Z7e=a("strong"),qCr=o("transfo-xl"),jCr=o(" \u2014 "),UJ=a("a"),DCr=o("TFTransfoXLLMHeadModel"),GCr=o(" (Transformer-XL model)"),OCr=l(),o4=a("li"),e9e=a("strong"),VCr=o("xlm"),XCr=o(" \u2014 "),JJ=a("a"),zCr=o("TFXLMWithLMHeadModel"),QCr=o(" (XLM model)"),WCr=l(),r4=a("li"),o9e=a("strong"),HCr=o("xlnet"),UCr=o(" \u2014 "),YJ=a("a"),JCr=o("TFXLNetLMHeadModel"),YCr=o(" (XLNet model)"),KCr=l(),F(t4.$$.fragment),bze=l(),pc=a("h2"),a4=a("a"),r9e=a("span"),F(lx.$$.fragment),ZCr=l(),t9e=a("span"),e3r=o("TFAutoModelForImageClassification"),vze=l(),nr=a("div"),F(ix.$$.fragment),o3r=l(),_c=a("p"),r3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KJ=a("a"),t3r=o("from_pretrained()"),a3r=o(" class method or the "),ZJ=a("a"),n3r=o("from_config()"),s3r=o(` class
method.`),l3r=l(),dx=a("p"),i3r=o("This class cannot be instantiated directly using "),a9e=a("code"),d3r=o("__init__()"),c3r=o(" (throws an error)."),f3r=l(),It=a("div"),F(cx.$$.fragment),m3r=l(),n9e=a("p"),g3r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),h3r=l(),uc=a("p"),p3r=o(`Note:
Loading a model from its configuration file does `),s9e=a("strong"),_3r=o("not"),u3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=a("a"),b3r=o("from_pretrained()"),v3r=o(" to load the model weights."),F3r=l(),F(n4.$$.fragment),T3r=l(),Rr=a("div"),F(fx.$$.fragment),M3r=l(),l9e=a("p"),E3r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),C3r=l(),cn=a("p"),w3r=o("The model class to instantiate is selected based on the "),i9e=a("code"),A3r=o("model_type"),L3r=o(` property of the config object (either
passed as an argument or loaded from `),d9e=a("code"),y3r=o("pretrained_model_name_or_path"),x3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c9e=a("code"),$3r=o("pretrained_model_name_or_path"),k3r=o(":"),S3r=l(),Ve=a("ul"),s4=a("li"),f9e=a("strong"),R3r=o("convnext"),P3r=o(" \u2014 "),oY=a("a"),B3r=o("TFConvNextForImageClassification"),I3r=o(" (ConvNeXT model)"),N3r=l(),l4=a("li"),m9e=a("strong"),q3r=o("data2vec-vision"),j3r=o(" \u2014 "),rY=a("a"),D3r=o("TFData2VecVisionForImageClassification"),G3r=o(" (Data2VecVision model)"),O3r=l(),Ys=a("li"),g9e=a("strong"),V3r=o("deit"),X3r=o(" \u2014 "),tY=a("a"),z3r=o("TFDeiTForImageClassification"),Q3r=o(" or "),aY=a("a"),W3r=o("TFDeiTForImageClassificationWithTeacher"),H3r=o(" (DeiT model)"),U3r=l(),i4=a("li"),h9e=a("strong"),J3r=o("regnet"),Y3r=o(" \u2014 "),nY=a("a"),K3r=o("TFRegNetForImageClassification"),Z3r=o(" (RegNet model)"),e5r=l(),d4=a("li"),p9e=a("strong"),o5r=o("resnet"),r5r=o(" \u2014 "),sY=a("a"),t5r=o("TFResNetForImageClassification"),a5r=o(" (ResNet model)"),n5r=l(),c4=a("li"),_9e=a("strong"),s5r=o("segformer"),l5r=o(" \u2014 "),lY=a("a"),i5r=o("TFSegformerForImageClassification"),d5r=o(" (SegFormer model)"),c5r=l(),f4=a("li"),u9e=a("strong"),f5r=o("swin"),m5r=o(" \u2014 "),iY=a("a"),g5r=o("TFSwinForImageClassification"),h5r=o(" (Swin Transformer model)"),p5r=l(),m4=a("li"),b9e=a("strong"),_5r=o("vit"),u5r=o(" \u2014 "),dY=a("a"),b5r=o("TFViTForImageClassification"),v5r=o(" (ViT model)"),F5r=l(),F(g4.$$.fragment),Fze=l(),bc=a("h2"),h4=a("a"),v9e=a("span"),F(mx.$$.fragment),T5r=l(),F9e=a("span"),M5r=o("TFAutoModelForMaskedLM"),Tze=l(),sr=a("div"),F(gx.$$.fragment),E5r=l(),vc=a("p"),C5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cY=a("a"),w5r=o("from_pretrained()"),A5r=o(" class method or the "),fY=a("a"),L5r=o("from_config()"),y5r=o(` class
method.`),x5r=l(),hx=a("p"),$5r=o("This class cannot be instantiated directly using "),T9e=a("code"),k5r=o("__init__()"),S5r=o(" (throws an error)."),R5r=l(),Nt=a("div"),F(px.$$.fragment),P5r=l(),M9e=a("p"),B5r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),I5r=l(),Fc=a("p"),N5r=o(`Note:
Loading a model from its configuration file does `),E9e=a("strong"),q5r=o("not"),j5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=a("a"),D5r=o("from_pretrained()"),G5r=o(" to load the model weights."),O5r=l(),F(p4.$$.fragment),V5r=l(),Pr=a("div"),F(_x.$$.fragment),X5r=l(),C9e=a("p"),z5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Q5r=l(),fn=a("p"),W5r=o("The model class to instantiate is selected based on the "),w9e=a("code"),H5r=o("model_type"),U5r=o(` property of the config object (either
passed as an argument or loaded from `),A9e=a("code"),J5r=o("pretrained_model_name_or_path"),Y5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L9e=a("code"),K5r=o("pretrained_model_name_or_path"),Z5r=o(":"),ewr=l(),ie=a("ul"),_4=a("li"),y9e=a("strong"),owr=o("albert"),rwr=o(" \u2014 "),gY=a("a"),twr=o("TFAlbertForMaskedLM"),awr=o(" (ALBERT model)"),nwr=l(),u4=a("li"),x9e=a("strong"),swr=o("bert"),lwr=o(" \u2014 "),hY=a("a"),iwr=o("TFBertForMaskedLM"),dwr=o(" (BERT model)"),cwr=l(),b4=a("li"),$9e=a("strong"),fwr=o("camembert"),mwr=o(" \u2014 "),pY=a("a"),gwr=o("TFCamembertForMaskedLM"),hwr=o(" (CamemBERT model)"),pwr=l(),v4=a("li"),k9e=a("strong"),_wr=o("convbert"),uwr=o(" \u2014 "),_Y=a("a"),bwr=o("TFConvBertForMaskedLM"),vwr=o(" (ConvBERT model)"),Fwr=l(),F4=a("li"),S9e=a("strong"),Twr=o("deberta"),Mwr=o(" \u2014 "),uY=a("a"),Ewr=o("TFDebertaForMaskedLM"),Cwr=o(" (DeBERTa model)"),wwr=l(),T4=a("li"),R9e=a("strong"),Awr=o("deberta-v2"),Lwr=o(" \u2014 "),bY=a("a"),ywr=o("TFDebertaV2ForMaskedLM"),xwr=o(" (DeBERTa-v2 model)"),$wr=l(),M4=a("li"),P9e=a("strong"),kwr=o("distilbert"),Swr=o(" \u2014 "),vY=a("a"),Rwr=o("TFDistilBertForMaskedLM"),Pwr=o(" (DistilBERT model)"),Bwr=l(),E4=a("li"),B9e=a("strong"),Iwr=o("electra"),Nwr=o(" \u2014 "),FY=a("a"),qwr=o("TFElectraForMaskedLM"),jwr=o(" (ELECTRA model)"),Dwr=l(),C4=a("li"),I9e=a("strong"),Gwr=o("flaubert"),Owr=o(" \u2014 "),TY=a("a"),Vwr=o("TFFlaubertWithLMHeadModel"),Xwr=o(" (FlauBERT model)"),zwr=l(),w4=a("li"),N9e=a("strong"),Qwr=o("funnel"),Wwr=o(" \u2014 "),MY=a("a"),Hwr=o("TFFunnelForMaskedLM"),Uwr=o(" (Funnel Transformer model)"),Jwr=l(),A4=a("li"),q9e=a("strong"),Ywr=o("layoutlm"),Kwr=o(" \u2014 "),EY=a("a"),Zwr=o("TFLayoutLMForMaskedLM"),eAr=o(" (LayoutLM model)"),oAr=l(),L4=a("li"),j9e=a("strong"),rAr=o("longformer"),tAr=o(" \u2014 "),CY=a("a"),aAr=o("TFLongformerForMaskedLM"),nAr=o(" (Longformer model)"),sAr=l(),y4=a("li"),D9e=a("strong"),lAr=o("mobilebert"),iAr=o(" \u2014 "),wY=a("a"),dAr=o("TFMobileBertForMaskedLM"),cAr=o(" (MobileBERT model)"),fAr=l(),x4=a("li"),G9e=a("strong"),mAr=o("mpnet"),gAr=o(" \u2014 "),AY=a("a"),hAr=o("TFMPNetForMaskedLM"),pAr=o(" (MPNet model)"),_Ar=l(),$4=a("li"),O9e=a("strong"),uAr=o("rembert"),bAr=o(" \u2014 "),LY=a("a"),vAr=o("TFRemBertForMaskedLM"),FAr=o(" (RemBERT model)"),TAr=l(),k4=a("li"),V9e=a("strong"),MAr=o("roberta"),EAr=o(" \u2014 "),yY=a("a"),CAr=o("TFRobertaForMaskedLM"),wAr=o(" (RoBERTa model)"),AAr=l(),S4=a("li"),X9e=a("strong"),LAr=o("roformer"),yAr=o(" \u2014 "),xY=a("a"),xAr=o("TFRoFormerForMaskedLM"),$Ar=o(" (RoFormer model)"),kAr=l(),R4=a("li"),z9e=a("strong"),SAr=o("tapas"),RAr=o(" \u2014 "),$Y=a("a"),PAr=o("TFTapasForMaskedLM"),BAr=o(" (TAPAS model)"),IAr=l(),P4=a("li"),Q9e=a("strong"),NAr=o("xlm"),qAr=o(" \u2014 "),kY=a("a"),jAr=o("TFXLMWithLMHeadModel"),DAr=o(" (XLM model)"),GAr=l(),B4=a("li"),W9e=a("strong"),OAr=o("xlm-roberta"),VAr=o(" \u2014 "),SY=a("a"),XAr=o("TFXLMRobertaForMaskedLM"),zAr=o(" (XLM-RoBERTa model)"),QAr=l(),F(I4.$$.fragment),Mze=l(),Tc=a("h2"),N4=a("a"),H9e=a("span"),F(ux.$$.fragment),WAr=l(),U9e=a("span"),HAr=o("TFAutoModelForSeq2SeqLM"),Eze=l(),lr=a("div"),F(bx.$$.fragment),UAr=l(),Mc=a("p"),JAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RY=a("a"),YAr=o("from_pretrained()"),KAr=o(" class method or the "),PY=a("a"),ZAr=o("from_config()"),e6r=o(` class
method.`),o6r=l(),vx=a("p"),r6r=o("This class cannot be instantiated directly using "),J9e=a("code"),t6r=o("__init__()"),a6r=o(" (throws an error)."),n6r=l(),qt=a("div"),F(Fx.$$.fragment),s6r=l(),Y9e=a("p"),l6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),i6r=l(),Ec=a("p"),d6r=o(`Note:
Loading a model from its configuration file does `),K9e=a("strong"),c6r=o("not"),f6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=a("a"),m6r=o("from_pretrained()"),g6r=o(" to load the model weights."),h6r=l(),F(q4.$$.fragment),p6r=l(),Br=a("div"),F(Tx.$$.fragment),_6r=l(),Z9e=a("p"),u6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),b6r=l(),mn=a("p"),v6r=o("The model class to instantiate is selected based on the "),eMe=a("code"),F6r=o("model_type"),T6r=o(` property of the config object (either
passed as an argument or loaded from `),oMe=a("code"),M6r=o("pretrained_model_name_or_path"),E6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rMe=a("code"),C6r=o("pretrained_model_name_or_path"),w6r=o(":"),A6r=l(),ye=a("ul"),j4=a("li"),tMe=a("strong"),L6r=o("bart"),y6r=o(" \u2014 "),IY=a("a"),x6r=o("TFBartForConditionalGeneration"),$6r=o(" (BART model)"),k6r=l(),D4=a("li"),aMe=a("strong"),S6r=o("blenderbot"),R6r=o(" \u2014 "),NY=a("a"),P6r=o("TFBlenderbotForConditionalGeneration"),B6r=o(" (Blenderbot model)"),I6r=l(),G4=a("li"),nMe=a("strong"),N6r=o("blenderbot-small"),q6r=o(" \u2014 "),qY=a("a"),j6r=o("TFBlenderbotSmallForConditionalGeneration"),D6r=o(" (BlenderbotSmall model)"),G6r=l(),O4=a("li"),sMe=a("strong"),O6r=o("encoder-decoder"),V6r=o(" \u2014 "),jY=a("a"),X6r=o("TFEncoderDecoderModel"),z6r=o(" (Encoder decoder model)"),Q6r=l(),V4=a("li"),lMe=a("strong"),W6r=o("led"),H6r=o(" \u2014 "),DY=a("a"),U6r=o("TFLEDForConditionalGeneration"),J6r=o(" (LED model)"),Y6r=l(),X4=a("li"),iMe=a("strong"),K6r=o("marian"),Z6r=o(" \u2014 "),GY=a("a"),eLr=o("TFMarianMTModel"),oLr=o(" (Marian model)"),rLr=l(),z4=a("li"),dMe=a("strong"),tLr=o("mbart"),aLr=o(" \u2014 "),OY=a("a"),nLr=o("TFMBartForConditionalGeneration"),sLr=o(" (mBART model)"),lLr=l(),Q4=a("li"),cMe=a("strong"),iLr=o("mt5"),dLr=o(" \u2014 "),VY=a("a"),cLr=o("TFMT5ForConditionalGeneration"),fLr=o(" (MT5 model)"),mLr=l(),W4=a("li"),fMe=a("strong"),gLr=o("pegasus"),hLr=o(" \u2014 "),XY=a("a"),pLr=o("TFPegasusForConditionalGeneration"),_Lr=o(" (Pegasus model)"),uLr=l(),H4=a("li"),mMe=a("strong"),bLr=o("t5"),vLr=o(" \u2014 "),zY=a("a"),FLr=o("TFT5ForConditionalGeneration"),TLr=o(" (T5 model)"),MLr=l(),F(U4.$$.fragment),Cze=l(),Cc=a("h2"),J4=a("a"),gMe=a("span"),F(Mx.$$.fragment),ELr=l(),hMe=a("span"),CLr=o("TFAutoModelForSequenceClassification"),wze=l(),ir=a("div"),F(Ex.$$.fragment),wLr=l(),wc=a("p"),ALr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QY=a("a"),LLr=o("from_pretrained()"),yLr=o(" class method or the "),WY=a("a"),xLr=o("from_config()"),$Lr=o(` class
method.`),kLr=l(),Cx=a("p"),SLr=o("This class cannot be instantiated directly using "),pMe=a("code"),RLr=o("__init__()"),PLr=o(" (throws an error)."),BLr=l(),jt=a("div"),F(wx.$$.fragment),ILr=l(),_Me=a("p"),NLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qLr=l(),Ac=a("p"),jLr=o(`Note:
Loading a model from its configuration file does `),uMe=a("strong"),DLr=o("not"),GLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=a("a"),OLr=o("from_pretrained()"),VLr=o(" to load the model weights."),XLr=l(),F(Y4.$$.fragment),zLr=l(),Ir=a("div"),F(Ax.$$.fragment),QLr=l(),bMe=a("p"),WLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),HLr=l(),gn=a("p"),ULr=o("The model class to instantiate is selected based on the "),vMe=a("code"),JLr=o("model_type"),YLr=o(` property of the config object (either
passed as an argument or loaded from `),FMe=a("code"),KLr=o("pretrained_model_name_or_path"),ZLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TMe=a("code"),eyr=o("pretrained_model_name_or_path"),oyr=o(":"),ryr=l(),te=a("ul"),K4=a("li"),MMe=a("strong"),tyr=o("albert"),ayr=o(" \u2014 "),UY=a("a"),nyr=o("TFAlbertForSequenceClassification"),syr=o(" (ALBERT model)"),lyr=l(),Z4=a("li"),EMe=a("strong"),iyr=o("bert"),dyr=o(" \u2014 "),JY=a("a"),cyr=o("TFBertForSequenceClassification"),fyr=o(" (BERT model)"),myr=l(),eE=a("li"),CMe=a("strong"),gyr=o("camembert"),hyr=o(" \u2014 "),YY=a("a"),pyr=o("TFCamembertForSequenceClassification"),_yr=o(" (CamemBERT model)"),uyr=l(),oE=a("li"),wMe=a("strong"),byr=o("convbert"),vyr=o(" \u2014 "),KY=a("a"),Fyr=o("TFConvBertForSequenceClassification"),Tyr=o(" (ConvBERT model)"),Myr=l(),rE=a("li"),AMe=a("strong"),Eyr=o("ctrl"),Cyr=o(" \u2014 "),ZY=a("a"),wyr=o("TFCTRLForSequenceClassification"),Ayr=o(" (CTRL model)"),Lyr=l(),tE=a("li"),LMe=a("strong"),yyr=o("deberta"),xyr=o(" \u2014 "),eK=a("a"),$yr=o("TFDebertaForSequenceClassification"),kyr=o(" (DeBERTa model)"),Syr=l(),aE=a("li"),yMe=a("strong"),Ryr=o("deberta-v2"),Pyr=o(" \u2014 "),oK=a("a"),Byr=o("TFDebertaV2ForSequenceClassification"),Iyr=o(" (DeBERTa-v2 model)"),Nyr=l(),nE=a("li"),xMe=a("strong"),qyr=o("distilbert"),jyr=o(" \u2014 "),rK=a("a"),Dyr=o("TFDistilBertForSequenceClassification"),Gyr=o(" (DistilBERT model)"),Oyr=l(),sE=a("li"),$Me=a("strong"),Vyr=o("electra"),Xyr=o(" \u2014 "),tK=a("a"),zyr=o("TFElectraForSequenceClassification"),Qyr=o(" (ELECTRA model)"),Wyr=l(),lE=a("li"),kMe=a("strong"),Hyr=o("flaubert"),Uyr=o(" \u2014 "),aK=a("a"),Jyr=o("TFFlaubertForSequenceClassification"),Yyr=o(" (FlauBERT model)"),Kyr=l(),iE=a("li"),SMe=a("strong"),Zyr=o("funnel"),e8r=o(" \u2014 "),nK=a("a"),o8r=o("TFFunnelForSequenceClassification"),r8r=o(" (Funnel Transformer model)"),t8r=l(),dE=a("li"),RMe=a("strong"),a8r=o("gpt2"),n8r=o(" \u2014 "),sK=a("a"),s8r=o("TFGPT2ForSequenceClassification"),l8r=o(" (OpenAI GPT-2 model)"),i8r=l(),cE=a("li"),PMe=a("strong"),d8r=o("gptj"),c8r=o(" \u2014 "),lK=a("a"),f8r=o("TFGPTJForSequenceClassification"),m8r=o(" (GPT-J model)"),g8r=l(),fE=a("li"),BMe=a("strong"),h8r=o("layoutlm"),p8r=o(" \u2014 "),iK=a("a"),_8r=o("TFLayoutLMForSequenceClassification"),u8r=o(" (LayoutLM model)"),b8r=l(),mE=a("li"),IMe=a("strong"),v8r=o("longformer"),F8r=o(" \u2014 "),dK=a("a"),T8r=o("TFLongformerForSequenceClassification"),M8r=o(" (Longformer model)"),E8r=l(),gE=a("li"),NMe=a("strong"),C8r=o("mobilebert"),w8r=o(" \u2014 "),cK=a("a"),A8r=o("TFMobileBertForSequenceClassification"),L8r=o(" (MobileBERT model)"),y8r=l(),hE=a("li"),qMe=a("strong"),x8r=o("mpnet"),$8r=o(" \u2014 "),fK=a("a"),k8r=o("TFMPNetForSequenceClassification"),S8r=o(" (MPNet model)"),R8r=l(),pE=a("li"),jMe=a("strong"),P8r=o("openai-gpt"),B8r=o(" \u2014 "),mK=a("a"),I8r=o("TFOpenAIGPTForSequenceClassification"),N8r=o(" (OpenAI GPT model)"),q8r=l(),_E=a("li"),DMe=a("strong"),j8r=o("rembert"),D8r=o(" \u2014 "),gK=a("a"),G8r=o("TFRemBertForSequenceClassification"),O8r=o(" (RemBERT model)"),V8r=l(),uE=a("li"),GMe=a("strong"),X8r=o("roberta"),z8r=o(" \u2014 "),hK=a("a"),Q8r=o("TFRobertaForSequenceClassification"),W8r=o(" (RoBERTa model)"),H8r=l(),bE=a("li"),OMe=a("strong"),U8r=o("roformer"),J8r=o(" \u2014 "),pK=a("a"),Y8r=o("TFRoFormerForSequenceClassification"),K8r=o(" (RoFormer model)"),Z8r=l(),vE=a("li"),VMe=a("strong"),exr=o("tapas"),oxr=o(" \u2014 "),_K=a("a"),rxr=o("TFTapasForSequenceClassification"),txr=o(" (TAPAS model)"),axr=l(),FE=a("li"),XMe=a("strong"),nxr=o("transfo-xl"),sxr=o(" \u2014 "),uK=a("a"),lxr=o("TFTransfoXLForSequenceClassification"),ixr=o(" (Transformer-XL model)"),dxr=l(),TE=a("li"),zMe=a("strong"),cxr=o("xlm"),fxr=o(" \u2014 "),bK=a("a"),mxr=o("TFXLMForSequenceClassification"),gxr=o(" (XLM model)"),hxr=l(),ME=a("li"),QMe=a("strong"),pxr=o("xlm-roberta"),_xr=o(" \u2014 "),vK=a("a"),uxr=o("TFXLMRobertaForSequenceClassification"),bxr=o(" (XLM-RoBERTa model)"),vxr=l(),EE=a("li"),WMe=a("strong"),Fxr=o("xlnet"),Txr=o(" \u2014 "),FK=a("a"),Mxr=o("TFXLNetForSequenceClassification"),Exr=o(" (XLNet model)"),Cxr=l(),F(CE.$$.fragment),Aze=l(),Lc=a("h2"),wE=a("a"),HMe=a("span"),F(Lx.$$.fragment),wxr=l(),UMe=a("span"),Axr=o("TFAutoModelForMultipleChoice"),Lze=l(),dr=a("div"),F(yx.$$.fragment),Lxr=l(),yc=a("p"),yxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),TK=a("a"),xxr=o("from_pretrained()"),$xr=o(" class method or the "),MK=a("a"),kxr=o("from_config()"),Sxr=o(` class
method.`),Rxr=l(),xx=a("p"),Pxr=o("This class cannot be instantiated directly using "),JMe=a("code"),Bxr=o("__init__()"),Ixr=o(" (throws an error)."),Nxr=l(),Dt=a("div"),F($x.$$.fragment),qxr=l(),YMe=a("p"),jxr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Dxr=l(),xc=a("p"),Gxr=o(`Note:
Loading a model from its configuration file does `),KMe=a("strong"),Oxr=o("not"),Vxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=a("a"),Xxr=o("from_pretrained()"),zxr=o(" to load the model weights."),Qxr=l(),F(AE.$$.fragment),Wxr=l(),Nr=a("div"),F(kx.$$.fragment),Hxr=l(),ZMe=a("p"),Uxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Jxr=l(),hn=a("p"),Yxr=o("The model class to instantiate is selected based on the "),e4e=a("code"),Kxr=o("model_type"),Zxr=o(` property of the config object (either
passed as an argument or loaded from `),o4e=a("code"),e$r=o("pretrained_model_name_or_path"),o$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=a("code"),r$r=o("pretrained_model_name_or_path"),t$r=o(":"),a$r=l(),_e=a("ul"),LE=a("li"),t4e=a("strong"),n$r=o("albert"),s$r=o(" \u2014 "),CK=a("a"),l$r=o("TFAlbertForMultipleChoice"),i$r=o(" (ALBERT model)"),d$r=l(),yE=a("li"),a4e=a("strong"),c$r=o("bert"),f$r=o(" \u2014 "),wK=a("a"),m$r=o("TFBertForMultipleChoice"),g$r=o(" (BERT model)"),h$r=l(),xE=a("li"),n4e=a("strong"),p$r=o("camembert"),_$r=o(" \u2014 "),AK=a("a"),u$r=o("TFCamembertForMultipleChoice"),b$r=o(" (CamemBERT model)"),v$r=l(),$E=a("li"),s4e=a("strong"),F$r=o("convbert"),T$r=o(" \u2014 "),LK=a("a"),M$r=o("TFConvBertForMultipleChoice"),E$r=o(" (ConvBERT model)"),C$r=l(),kE=a("li"),l4e=a("strong"),w$r=o("distilbert"),A$r=o(" \u2014 "),yK=a("a"),L$r=o("TFDistilBertForMultipleChoice"),y$r=o(" (DistilBERT model)"),x$r=l(),SE=a("li"),i4e=a("strong"),$$r=o("electra"),k$r=o(" \u2014 "),xK=a("a"),S$r=o("TFElectraForMultipleChoice"),R$r=o(" (ELECTRA model)"),P$r=l(),RE=a("li"),d4e=a("strong"),B$r=o("flaubert"),I$r=o(" \u2014 "),$K=a("a"),N$r=o("TFFlaubertForMultipleChoice"),q$r=o(" (FlauBERT model)"),j$r=l(),PE=a("li"),c4e=a("strong"),D$r=o("funnel"),G$r=o(" \u2014 "),kK=a("a"),O$r=o("TFFunnelForMultipleChoice"),V$r=o(" (Funnel Transformer model)"),X$r=l(),BE=a("li"),f4e=a("strong"),z$r=o("longformer"),Q$r=o(" \u2014 "),SK=a("a"),W$r=o("TFLongformerForMultipleChoice"),H$r=o(" (Longformer model)"),U$r=l(),IE=a("li"),m4e=a("strong"),J$r=o("mobilebert"),Y$r=o(" \u2014 "),RK=a("a"),K$r=o("TFMobileBertForMultipleChoice"),Z$r=o(" (MobileBERT model)"),ekr=l(),NE=a("li"),g4e=a("strong"),okr=o("mpnet"),rkr=o(" \u2014 "),PK=a("a"),tkr=o("TFMPNetForMultipleChoice"),akr=o(" (MPNet model)"),nkr=l(),qE=a("li"),h4e=a("strong"),skr=o("rembert"),lkr=o(" \u2014 "),BK=a("a"),ikr=o("TFRemBertForMultipleChoice"),dkr=o(" (RemBERT model)"),ckr=l(),jE=a("li"),p4e=a("strong"),fkr=o("roberta"),mkr=o(" \u2014 "),IK=a("a"),gkr=o("TFRobertaForMultipleChoice"),hkr=o(" (RoBERTa model)"),pkr=l(),DE=a("li"),_4e=a("strong"),_kr=o("roformer"),ukr=o(" \u2014 "),NK=a("a"),bkr=o("TFRoFormerForMultipleChoice"),vkr=o(" (RoFormer model)"),Fkr=l(),GE=a("li"),u4e=a("strong"),Tkr=o("xlm"),Mkr=o(" \u2014 "),qK=a("a"),Ekr=o("TFXLMForMultipleChoice"),Ckr=o(" (XLM model)"),wkr=l(),OE=a("li"),b4e=a("strong"),Akr=o("xlm-roberta"),Lkr=o(" \u2014 "),jK=a("a"),ykr=o("TFXLMRobertaForMultipleChoice"),xkr=o(" (XLM-RoBERTa model)"),$kr=l(),VE=a("li"),v4e=a("strong"),kkr=o("xlnet"),Skr=o(" \u2014 "),DK=a("a"),Rkr=o("TFXLNetForMultipleChoice"),Pkr=o(" (XLNet model)"),Bkr=l(),F(XE.$$.fragment),yze=l(),$c=a("h2"),zE=a("a"),F4e=a("span"),F(Sx.$$.fragment),Ikr=l(),T4e=a("span"),Nkr=o("TFAutoModelForNextSentencePrediction"),xze=l(),cr=a("div"),F(Rx.$$.fragment),qkr=l(),kc=a("p"),jkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GK=a("a"),Dkr=o("from_pretrained()"),Gkr=o(" class method or the "),OK=a("a"),Okr=o("from_config()"),Vkr=o(` class
method.`),Xkr=l(),Px=a("p"),zkr=o("This class cannot be instantiated directly using "),M4e=a("code"),Qkr=o("__init__()"),Wkr=o(" (throws an error)."),Hkr=l(),Gt=a("div"),F(Bx.$$.fragment),Ukr=l(),E4e=a("p"),Jkr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ykr=l(),Sc=a("p"),Kkr=o(`Note:
Loading a model from its configuration file does `),C4e=a("strong"),Zkr=o("not"),eSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=a("a"),oSr=o("from_pretrained()"),rSr=o(" to load the model weights."),tSr=l(),F(QE.$$.fragment),aSr=l(),qr=a("div"),F(Ix.$$.fragment),nSr=l(),w4e=a("p"),sSr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lSr=l(),pn=a("p"),iSr=o("The model class to instantiate is selected based on the "),A4e=a("code"),dSr=o("model_type"),cSr=o(` property of the config object (either
passed as an argument or loaded from `),L4e=a("code"),fSr=o("pretrained_model_name_or_path"),mSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y4e=a("code"),gSr=o("pretrained_model_name_or_path"),hSr=o(":"),pSr=l(),Nx=a("ul"),WE=a("li"),x4e=a("strong"),_Sr=o("bert"),uSr=o(" \u2014 "),XK=a("a"),bSr=o("TFBertForNextSentencePrediction"),vSr=o(" (BERT model)"),FSr=l(),HE=a("li"),$4e=a("strong"),TSr=o("mobilebert"),MSr=o(" \u2014 "),zK=a("a"),ESr=o("TFMobileBertForNextSentencePrediction"),CSr=o(" (MobileBERT model)"),wSr=l(),F(UE.$$.fragment),$ze=l(),Rc=a("h2"),JE=a("a"),k4e=a("span"),F(qx.$$.fragment),ASr=l(),S4e=a("span"),LSr=o("TFAutoModelForTableQuestionAnswering"),kze=l(),fr=a("div"),F(jx.$$.fragment),ySr=l(),Pc=a("p"),xSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),QK=a("a"),$Sr=o("from_pretrained()"),kSr=o(" class method or the "),WK=a("a"),SSr=o("from_config()"),RSr=o(` class
method.`),PSr=l(),Dx=a("p"),BSr=o("This class cannot be instantiated directly using "),R4e=a("code"),ISr=o("__init__()"),NSr=o(" (throws an error)."),qSr=l(),Ot=a("div"),F(Gx.$$.fragment),jSr=l(),P4e=a("p"),DSr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),GSr=l(),Bc=a("p"),OSr=o(`Note:
Loading a model from its configuration file does `),B4e=a("strong"),VSr=o("not"),XSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=a("a"),zSr=o("from_pretrained()"),QSr=o(" to load the model weights."),WSr=l(),F(YE.$$.fragment),HSr=l(),jr=a("div"),F(Ox.$$.fragment),USr=l(),I4e=a("p"),JSr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),YSr=l(),_n=a("p"),KSr=o("The model class to instantiate is selected based on the "),N4e=a("code"),ZSr=o("model_type"),eRr=o(` property of the config object (either
passed as an argument or loaded from `),q4e=a("code"),oRr=o("pretrained_model_name_or_path"),rRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j4e=a("code"),tRr=o("pretrained_model_name_or_path"),aRr=o(":"),nRr=l(),D4e=a("ul"),KE=a("li"),G4e=a("strong"),sRr=o("tapas"),lRr=o(" \u2014 "),UK=a("a"),iRr=o("TFTapasForQuestionAnswering"),dRr=o(" (TAPAS model)"),cRr=l(),F(ZE.$$.fragment),Sze=l(),Ic=a("h2"),eC=a("a"),O4e=a("span"),F(Vx.$$.fragment),fRr=l(),V4e=a("span"),mRr=o("TFAutoModelForTokenClassification"),Rze=l(),mr=a("div"),F(Xx.$$.fragment),gRr=l(),Nc=a("p"),hRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),JK=a("a"),pRr=o("from_pretrained()"),_Rr=o(" class method or the "),YK=a("a"),uRr=o("from_config()"),bRr=o(` class
method.`),vRr=l(),zx=a("p"),FRr=o("This class cannot be instantiated directly using "),X4e=a("code"),TRr=o("__init__()"),MRr=o(" (throws an error)."),ERr=l(),Vt=a("div"),F(Qx.$$.fragment),CRr=l(),z4e=a("p"),wRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ARr=l(),qc=a("p"),LRr=o(`Note:
Loading a model from its configuration file does `),Q4e=a("strong"),yRr=o("not"),xRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KK=a("a"),$Rr=o("from_pretrained()"),kRr=o(" to load the model weights."),SRr=l(),F(oC.$$.fragment),RRr=l(),Dr=a("div"),F(Wx.$$.fragment),PRr=l(),W4e=a("p"),BRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),IRr=l(),un=a("p"),NRr=o("The model class to instantiate is selected based on the "),H4e=a("code"),qRr=o("model_type"),jRr=o(` property of the config object (either
passed as an argument or loaded from `),U4e=a("code"),DRr=o("pretrained_model_name_or_path"),GRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=a("code"),ORr=o("pretrained_model_name_or_path"),VRr=o(":"),XRr=l(),de=a("ul"),rC=a("li"),Y4e=a("strong"),zRr=o("albert"),QRr=o(" \u2014 "),ZK=a("a"),WRr=o("TFAlbertForTokenClassification"),HRr=o(" (ALBERT model)"),URr=l(),tC=a("li"),K4e=a("strong"),JRr=o("bert"),YRr=o(" \u2014 "),eZ=a("a"),KRr=o("TFBertForTokenClassification"),ZRr=o(" (BERT model)"),ePr=l(),aC=a("li"),Z4e=a("strong"),oPr=o("camembert"),rPr=o(" \u2014 "),oZ=a("a"),tPr=o("TFCamembertForTokenClassification"),aPr=o(" (CamemBERT model)"),nPr=l(),nC=a("li"),eEe=a("strong"),sPr=o("convbert"),lPr=o(" \u2014 "),rZ=a("a"),iPr=o("TFConvBertForTokenClassification"),dPr=o(" (ConvBERT model)"),cPr=l(),sC=a("li"),oEe=a("strong"),fPr=o("deberta"),mPr=o(" \u2014 "),tZ=a("a"),gPr=o("TFDebertaForTokenClassification"),hPr=o(" (DeBERTa model)"),pPr=l(),lC=a("li"),rEe=a("strong"),_Pr=o("deberta-v2"),uPr=o(" \u2014 "),aZ=a("a"),bPr=o("TFDebertaV2ForTokenClassification"),vPr=o(" (DeBERTa-v2 model)"),FPr=l(),iC=a("li"),tEe=a("strong"),TPr=o("distilbert"),MPr=o(" \u2014 "),nZ=a("a"),EPr=o("TFDistilBertForTokenClassification"),CPr=o(" (DistilBERT model)"),wPr=l(),dC=a("li"),aEe=a("strong"),APr=o("electra"),LPr=o(" \u2014 "),sZ=a("a"),yPr=o("TFElectraForTokenClassification"),xPr=o(" (ELECTRA model)"),$Pr=l(),cC=a("li"),nEe=a("strong"),kPr=o("flaubert"),SPr=o(" \u2014 "),lZ=a("a"),RPr=o("TFFlaubertForTokenClassification"),PPr=o(" (FlauBERT model)"),BPr=l(),fC=a("li"),sEe=a("strong"),IPr=o("funnel"),NPr=o(" \u2014 "),iZ=a("a"),qPr=o("TFFunnelForTokenClassification"),jPr=o(" (Funnel Transformer model)"),DPr=l(),mC=a("li"),lEe=a("strong"),GPr=o("layoutlm"),OPr=o(" \u2014 "),dZ=a("a"),VPr=o("TFLayoutLMForTokenClassification"),XPr=o(" (LayoutLM model)"),zPr=l(),gC=a("li"),iEe=a("strong"),QPr=o("longformer"),WPr=o(" \u2014 "),cZ=a("a"),HPr=o("TFLongformerForTokenClassification"),UPr=o(" (Longformer model)"),JPr=l(),hC=a("li"),dEe=a("strong"),YPr=o("mobilebert"),KPr=o(" \u2014 "),fZ=a("a"),ZPr=o("TFMobileBertForTokenClassification"),eBr=o(" (MobileBERT model)"),oBr=l(),pC=a("li"),cEe=a("strong"),rBr=o("mpnet"),tBr=o(" \u2014 "),mZ=a("a"),aBr=o("TFMPNetForTokenClassification"),nBr=o(" (MPNet model)"),sBr=l(),_C=a("li"),fEe=a("strong"),lBr=o("rembert"),iBr=o(" \u2014 "),gZ=a("a"),dBr=o("TFRemBertForTokenClassification"),cBr=o(" (RemBERT model)"),fBr=l(),uC=a("li"),mEe=a("strong"),mBr=o("roberta"),gBr=o(" \u2014 "),hZ=a("a"),hBr=o("TFRobertaForTokenClassification"),pBr=o(" (RoBERTa model)"),_Br=l(),bC=a("li"),gEe=a("strong"),uBr=o("roformer"),bBr=o(" \u2014 "),pZ=a("a"),vBr=o("TFRoFormerForTokenClassification"),FBr=o(" (RoFormer model)"),TBr=l(),vC=a("li"),hEe=a("strong"),MBr=o("xlm"),EBr=o(" \u2014 "),_Z=a("a"),CBr=o("TFXLMForTokenClassification"),wBr=o(" (XLM model)"),ABr=l(),FC=a("li"),pEe=a("strong"),LBr=o("xlm-roberta"),yBr=o(" \u2014 "),uZ=a("a"),xBr=o("TFXLMRobertaForTokenClassification"),$Br=o(" (XLM-RoBERTa model)"),kBr=l(),TC=a("li"),_Ee=a("strong"),SBr=o("xlnet"),RBr=o(" \u2014 "),bZ=a("a"),PBr=o("TFXLNetForTokenClassification"),BBr=o(" (XLNet model)"),IBr=l(),F(MC.$$.fragment),Pze=l(),jc=a("h2"),EC=a("a"),uEe=a("span"),F(Hx.$$.fragment),NBr=l(),bEe=a("span"),qBr=o("TFAutoModelForQuestionAnswering"),Bze=l(),gr=a("div"),F(Ux.$$.fragment),jBr=l(),Dc=a("p"),DBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vZ=a("a"),GBr=o("from_pretrained()"),OBr=o(" class method or the "),FZ=a("a"),VBr=o("from_config()"),XBr=o(` class
method.`),zBr=l(),Jx=a("p"),QBr=o("This class cannot be instantiated directly using "),vEe=a("code"),WBr=o("__init__()"),HBr=o(" (throws an error)."),UBr=l(),Xt=a("div"),F(Yx.$$.fragment),JBr=l(),FEe=a("p"),YBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),KBr=l(),Gc=a("p"),ZBr=o(`Note:
Loading a model from its configuration file does `),TEe=a("strong"),eIr=o("not"),oIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=a("a"),rIr=o("from_pretrained()"),tIr=o(" to load the model weights."),aIr=l(),F(CC.$$.fragment),nIr=l(),Gr=a("div"),F(Kx.$$.fragment),sIr=l(),MEe=a("p"),lIr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iIr=l(),bn=a("p"),dIr=o("The model class to instantiate is selected based on the "),EEe=a("code"),cIr=o("model_type"),fIr=o(` property of the config object (either
passed as an argument or loaded from `),CEe=a("code"),mIr=o("pretrained_model_name_or_path"),gIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wEe=a("code"),hIr=o("pretrained_model_name_or_path"),pIr=o(":"),_Ir=l(),ce=a("ul"),wC=a("li"),AEe=a("strong"),uIr=o("albert"),bIr=o(" \u2014 "),MZ=a("a"),vIr=o("TFAlbertForQuestionAnswering"),FIr=o(" (ALBERT model)"),TIr=l(),AC=a("li"),LEe=a("strong"),MIr=o("bert"),EIr=o(" \u2014 "),EZ=a("a"),CIr=o("TFBertForQuestionAnswering"),wIr=o(" (BERT model)"),AIr=l(),LC=a("li"),yEe=a("strong"),LIr=o("camembert"),yIr=o(" \u2014 "),CZ=a("a"),xIr=o("TFCamembertForQuestionAnswering"),$Ir=o(" (CamemBERT model)"),kIr=l(),yC=a("li"),xEe=a("strong"),SIr=o("convbert"),RIr=o(" \u2014 "),wZ=a("a"),PIr=o("TFConvBertForQuestionAnswering"),BIr=o(" (ConvBERT model)"),IIr=l(),xC=a("li"),$Ee=a("strong"),NIr=o("deberta"),qIr=o(" \u2014 "),AZ=a("a"),jIr=o("TFDebertaForQuestionAnswering"),DIr=o(" (DeBERTa model)"),GIr=l(),$C=a("li"),kEe=a("strong"),OIr=o("deberta-v2"),VIr=o(" \u2014 "),LZ=a("a"),XIr=o("TFDebertaV2ForQuestionAnswering"),zIr=o(" (DeBERTa-v2 model)"),QIr=l(),kC=a("li"),SEe=a("strong"),WIr=o("distilbert"),HIr=o(" \u2014 "),yZ=a("a"),UIr=o("TFDistilBertForQuestionAnswering"),JIr=o(" (DistilBERT model)"),YIr=l(),SC=a("li"),REe=a("strong"),KIr=o("electra"),ZIr=o(" \u2014 "),xZ=a("a"),eNr=o("TFElectraForQuestionAnswering"),oNr=o(" (ELECTRA model)"),rNr=l(),RC=a("li"),PEe=a("strong"),tNr=o("flaubert"),aNr=o(" \u2014 "),$Z=a("a"),nNr=o("TFFlaubertForQuestionAnsweringSimple"),sNr=o(" (FlauBERT model)"),lNr=l(),PC=a("li"),BEe=a("strong"),iNr=o("funnel"),dNr=o(" \u2014 "),kZ=a("a"),cNr=o("TFFunnelForQuestionAnswering"),fNr=o(" (Funnel Transformer model)"),mNr=l(),BC=a("li"),IEe=a("strong"),gNr=o("gptj"),hNr=o(" \u2014 "),SZ=a("a"),pNr=o("TFGPTJForQuestionAnswering"),_Nr=o(" (GPT-J model)"),uNr=l(),IC=a("li"),NEe=a("strong"),bNr=o("longformer"),vNr=o(" \u2014 "),RZ=a("a"),FNr=o("TFLongformerForQuestionAnswering"),TNr=o(" (Longformer model)"),MNr=l(),NC=a("li"),qEe=a("strong"),ENr=o("mobilebert"),CNr=o(" \u2014 "),PZ=a("a"),wNr=o("TFMobileBertForQuestionAnswering"),ANr=o(" (MobileBERT model)"),LNr=l(),qC=a("li"),jEe=a("strong"),yNr=o("mpnet"),xNr=o(" \u2014 "),BZ=a("a"),$Nr=o("TFMPNetForQuestionAnswering"),kNr=o(" (MPNet model)"),SNr=l(),jC=a("li"),DEe=a("strong"),RNr=o("rembert"),PNr=o(" \u2014 "),IZ=a("a"),BNr=o("TFRemBertForQuestionAnswering"),INr=o(" (RemBERT model)"),NNr=l(),DC=a("li"),GEe=a("strong"),qNr=o("roberta"),jNr=o(" \u2014 "),NZ=a("a"),DNr=o("TFRobertaForQuestionAnswering"),GNr=o(" (RoBERTa model)"),ONr=l(),GC=a("li"),OEe=a("strong"),VNr=o("roformer"),XNr=o(" \u2014 "),qZ=a("a"),zNr=o("TFRoFormerForQuestionAnswering"),QNr=o(" (RoFormer model)"),WNr=l(),OC=a("li"),VEe=a("strong"),HNr=o("xlm"),UNr=o(" \u2014 "),jZ=a("a"),JNr=o("TFXLMForQuestionAnsweringSimple"),YNr=o(" (XLM model)"),KNr=l(),VC=a("li"),XEe=a("strong"),ZNr=o("xlm-roberta"),eqr=o(" \u2014 "),DZ=a("a"),oqr=o("TFXLMRobertaForQuestionAnswering"),rqr=o(" (XLM-RoBERTa model)"),tqr=l(),XC=a("li"),zEe=a("strong"),aqr=o("xlnet"),nqr=o(" \u2014 "),GZ=a("a"),sqr=o("TFXLNetForQuestionAnsweringSimple"),lqr=o(" (XLNet model)"),iqr=l(),F(zC.$$.fragment),Ize=l(),Oc=a("h2"),QC=a("a"),QEe=a("span"),F(Zx.$$.fragment),dqr=l(),WEe=a("span"),cqr=o("TFAutoModelForVision2Seq"),Nze=l(),hr=a("div"),F(e$.$$.fragment),fqr=l(),Vc=a("p"),mqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OZ=a("a"),gqr=o("from_pretrained()"),hqr=o(" class method or the "),VZ=a("a"),pqr=o("from_config()"),_qr=o(` class
method.`),uqr=l(),o$=a("p"),bqr=o("This class cannot be instantiated directly using "),HEe=a("code"),vqr=o("__init__()"),Fqr=o(" (throws an error)."),Tqr=l(),zt=a("div"),F(r$.$$.fragment),Mqr=l(),UEe=a("p"),Eqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Cqr=l(),Xc=a("p"),wqr=o(`Note:
Loading a model from its configuration file does `),JEe=a("strong"),Aqr=o("not"),Lqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=a("a"),yqr=o("from_pretrained()"),xqr=o(" to load the model weights."),$qr=l(),F(WC.$$.fragment),kqr=l(),Or=a("div"),F(t$.$$.fragment),Sqr=l(),YEe=a("p"),Rqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Pqr=l(),vn=a("p"),Bqr=o("The model class to instantiate is selected based on the "),KEe=a("code"),Iqr=o("model_type"),Nqr=o(` property of the config object (either
passed as an argument or loaded from `),ZEe=a("code"),qqr=o("pretrained_model_name_or_path"),jqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eCe=a("code"),Dqr=o("pretrained_model_name_or_path"),Gqr=o(":"),Oqr=l(),oCe=a("ul"),HC=a("li"),rCe=a("strong"),Vqr=o("vision-encoder-decoder"),Xqr=o(" \u2014 "),zZ=a("a"),zqr=o("TFVisionEncoderDecoderModel"),Qqr=o(" (Vision Encoder decoder model)"),Wqr=l(),F(UC.$$.fragment),qze=l(),zc=a("h2"),JC=a("a"),tCe=a("span"),F(a$.$$.fragment),Hqr=l(),aCe=a("span"),Uqr=o("TFAutoModelForSpeechSeq2Seq"),jze=l(),pr=a("div"),F(n$.$$.fragment),Jqr=l(),Qc=a("p"),Yqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QZ=a("a"),Kqr=o("from_pretrained()"),Zqr=o(" class method or the "),WZ=a("a"),ejr=o("from_config()"),ojr=o(` class
method.`),rjr=l(),s$=a("p"),tjr=o("This class cannot be instantiated directly using "),nCe=a("code"),ajr=o("__init__()"),njr=o(" (throws an error)."),sjr=l(),Qt=a("div"),F(l$.$$.fragment),ljr=l(),sCe=a("p"),ijr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),djr=l(),Wc=a("p"),cjr=o(`Note:
Loading a model from its configuration file does `),lCe=a("strong"),fjr=o("not"),mjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=a("a"),gjr=o("from_pretrained()"),hjr=o(" to load the model weights."),pjr=l(),F(YC.$$.fragment),_jr=l(),Vr=a("div"),F(i$.$$.fragment),ujr=l(),iCe=a("p"),bjr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vjr=l(),Fn=a("p"),Fjr=o("The model class to instantiate is selected based on the "),dCe=a("code"),Tjr=o("model_type"),Mjr=o(` property of the config object (either
passed as an argument or loaded from `),cCe=a("code"),Ejr=o("pretrained_model_name_or_path"),Cjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fCe=a("code"),wjr=o("pretrained_model_name_or_path"),Ajr=o(":"),Ljr=l(),mCe=a("ul"),KC=a("li"),gCe=a("strong"),yjr=o("speech_to_text"),xjr=o(" \u2014 "),UZ=a("a"),$jr=o("TFSpeech2TextForConditionalGeneration"),kjr=o(" (Speech2Text model)"),Sjr=l(),F(ZC.$$.fragment),Dze=l(),Hc=a("h2"),e3=a("a"),hCe=a("span"),F(d$.$$.fragment),Rjr=l(),pCe=a("span"),Pjr=o("FlaxAutoModel"),Gze=l(),_r=a("div"),F(c$.$$.fragment),Bjr=l(),Uc=a("p"),Ijr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JZ=a("a"),Njr=o("from_pretrained()"),qjr=o(" class method or the "),YZ=a("a"),jjr=o("from_config()"),Djr=o(` class
method.`),Gjr=l(),f$=a("p"),Ojr=o("This class cannot be instantiated directly using "),_Ce=a("code"),Vjr=o("__init__()"),Xjr=o(" (throws an error)."),zjr=l(),Wt=a("div"),F(m$.$$.fragment),Qjr=l(),uCe=a("p"),Wjr=o("Instantiates one of the base model classes of the library from a configuration."),Hjr=l(),Jc=a("p"),Ujr=o(`Note:
Loading a model from its configuration file does `),bCe=a("strong"),Jjr=o("not"),Yjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KZ=a("a"),Kjr=o("from_pretrained()"),Zjr=o(" to load the model weights."),eDr=l(),F(o3.$$.fragment),oDr=l(),Xr=a("div"),F(g$.$$.fragment),rDr=l(),vCe=a("p"),tDr=o("Instantiate one of the base model classes of the library from a pretrained model."),aDr=l(),Tn=a("p"),nDr=o("The model class to instantiate is selected based on the "),FCe=a("code"),sDr=o("model_type"),lDr=o(` property of the config object (either
passed as an argument or loaded from `),TCe=a("code"),iDr=o("pretrained_model_name_or_path"),dDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MCe=a("code"),cDr=o("pretrained_model_name_or_path"),fDr=o(":"),mDr=l(),oe=a("ul"),r3=a("li"),ECe=a("strong"),gDr=o("albert"),hDr=o(" \u2014 "),ZZ=a("a"),pDr=o("FlaxAlbertModel"),_Dr=o(" (ALBERT model)"),uDr=l(),t3=a("li"),CCe=a("strong"),bDr=o("bart"),vDr=o(" \u2014 "),eee=a("a"),FDr=o("FlaxBartModel"),TDr=o(" (BART model)"),MDr=l(),a3=a("li"),wCe=a("strong"),EDr=o("beit"),CDr=o(" \u2014 "),oee=a("a"),wDr=o("FlaxBeitModel"),ADr=o(" (BEiT model)"),LDr=l(),n3=a("li"),ACe=a("strong"),yDr=o("bert"),xDr=o(" \u2014 "),ree=a("a"),$Dr=o("FlaxBertModel"),kDr=o(" (BERT model)"),SDr=l(),s3=a("li"),LCe=a("strong"),RDr=o("big_bird"),PDr=o(" \u2014 "),tee=a("a"),BDr=o("FlaxBigBirdModel"),IDr=o(" (BigBird model)"),NDr=l(),l3=a("li"),yCe=a("strong"),qDr=o("blenderbot"),jDr=o(" \u2014 "),aee=a("a"),DDr=o("FlaxBlenderbotModel"),GDr=o(" (Blenderbot model)"),ODr=l(),i3=a("li"),xCe=a("strong"),VDr=o("blenderbot-small"),XDr=o(" \u2014 "),nee=a("a"),zDr=o("FlaxBlenderbotSmallModel"),QDr=o(" (BlenderbotSmall model)"),WDr=l(),d3=a("li"),$Ce=a("strong"),HDr=o("clip"),UDr=o(" \u2014 "),see=a("a"),JDr=o("FlaxCLIPModel"),YDr=o(" (CLIP model)"),KDr=l(),c3=a("li"),kCe=a("strong"),ZDr=o("distilbert"),eGr=o(" \u2014 "),lee=a("a"),oGr=o("FlaxDistilBertModel"),rGr=o(" (DistilBERT model)"),tGr=l(),f3=a("li"),SCe=a("strong"),aGr=o("electra"),nGr=o(" \u2014 "),iee=a("a"),sGr=o("FlaxElectraModel"),lGr=o(" (ELECTRA model)"),iGr=l(),m3=a("li"),RCe=a("strong"),dGr=o("gpt2"),cGr=o(" \u2014 "),dee=a("a"),fGr=o("FlaxGPT2Model"),mGr=o(" (OpenAI GPT-2 model)"),gGr=l(),g3=a("li"),PCe=a("strong"),hGr=o("gpt_neo"),pGr=o(" \u2014 "),cee=a("a"),_Gr=o("FlaxGPTNeoModel"),uGr=o(" (GPT Neo model)"),bGr=l(),h3=a("li"),BCe=a("strong"),vGr=o("gptj"),FGr=o(" \u2014 "),fee=a("a"),TGr=o("FlaxGPTJModel"),MGr=o(" (GPT-J model)"),EGr=l(),p3=a("li"),ICe=a("strong"),CGr=o("longt5"),wGr=o(" \u2014 "),mee=a("a"),AGr=o("FlaxLongT5Model"),LGr=o(" (LongT5 model)"),yGr=l(),_3=a("li"),NCe=a("strong"),xGr=o("marian"),$Gr=o(" \u2014 "),gee=a("a"),kGr=o("FlaxMarianModel"),SGr=o(" (Marian model)"),RGr=l(),u3=a("li"),qCe=a("strong"),PGr=o("mbart"),BGr=o(" \u2014 "),hee=a("a"),IGr=o("FlaxMBartModel"),NGr=o(" (mBART model)"),qGr=l(),b3=a("li"),jCe=a("strong"),jGr=o("mt5"),DGr=o(" \u2014 "),pee=a("a"),GGr=o("FlaxMT5Model"),OGr=o(" (MT5 model)"),VGr=l(),v3=a("li"),DCe=a("strong"),XGr=o("opt"),zGr=o(" \u2014 "),_ee=a("a"),QGr=o("FlaxOPTModel"),WGr=o(" (OPT model)"),HGr=l(),F3=a("li"),GCe=a("strong"),UGr=o("pegasus"),JGr=o(" \u2014 "),uee=a("a"),YGr=o("FlaxPegasusModel"),KGr=o(" (Pegasus model)"),ZGr=l(),T3=a("li"),OCe=a("strong"),eOr=o("roberta"),oOr=o(" \u2014 "),bee=a("a"),rOr=o("FlaxRobertaModel"),tOr=o(" (RoBERTa model)"),aOr=l(),M3=a("li"),VCe=a("strong"),nOr=o("roformer"),sOr=o(" \u2014 "),vee=a("a"),lOr=o("FlaxRoFormerModel"),iOr=o(" (RoFormer model)"),dOr=l(),E3=a("li"),XCe=a("strong"),cOr=o("t5"),fOr=o(" \u2014 "),Fee=a("a"),mOr=o("FlaxT5Model"),gOr=o(" (T5 model)"),hOr=l(),C3=a("li"),zCe=a("strong"),pOr=o("vision-text-dual-encoder"),_Or=o(" \u2014 "),Tee=a("a"),uOr=o("FlaxVisionTextDualEncoderModel"),bOr=o(" (VisionTextDualEncoder model)"),vOr=l(),w3=a("li"),QCe=a("strong"),FOr=o("vit"),TOr=o(" \u2014 "),Mee=a("a"),MOr=o("FlaxViTModel"),EOr=o(" (ViT model)"),COr=l(),A3=a("li"),WCe=a("strong"),wOr=o("wav2vec2"),AOr=o(" \u2014 "),Eee=a("a"),LOr=o("FlaxWav2Vec2Model"),yOr=o(" (Wav2Vec2 model)"),xOr=l(),L3=a("li"),HCe=a("strong"),$Or=o("xglm"),kOr=o(" \u2014 "),Cee=a("a"),SOr=o("FlaxXGLMModel"),ROr=o(" (XGLM model)"),POr=l(),y3=a("li"),UCe=a("strong"),BOr=o("xlm-roberta"),IOr=o(" \u2014 "),wee=a("a"),NOr=o("FlaxXLMRobertaModel"),qOr=o(" (XLM-RoBERTa model)"),jOr=l(),F(x3.$$.fragment),Oze=l(),Yc=a("h2"),$3=a("a"),JCe=a("span"),F(h$.$$.fragment),DOr=l(),YCe=a("span"),GOr=o("FlaxAutoModelForCausalLM"),Vze=l(),ur=a("div"),F(p$.$$.fragment),OOr=l(),Kc=a("p"),VOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Aee=a("a"),XOr=o("from_pretrained()"),zOr=o(" class method or the "),Lee=a("a"),QOr=o("from_config()"),WOr=o(` class
method.`),HOr=l(),_$=a("p"),UOr=o("This class cannot be instantiated directly using "),KCe=a("code"),JOr=o("__init__()"),YOr=o(" (throws an error)."),KOr=l(),Ht=a("div"),F(u$.$$.fragment),ZOr=l(),ZCe=a("p"),eVr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),oVr=l(),Zc=a("p"),rVr=o(`Note:
Loading a model from its configuration file does `),e3e=a("strong"),tVr=o("not"),aVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=a("a"),nVr=o("from_pretrained()"),sVr=o(" to load the model weights."),lVr=l(),F(k3.$$.fragment),iVr=l(),zr=a("div"),F(b$.$$.fragment),dVr=l(),o3e=a("p"),cVr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fVr=l(),Mn=a("p"),mVr=o("The model class to instantiate is selected based on the "),r3e=a("code"),gVr=o("model_type"),hVr=o(` property of the config object (either
passed as an argument or loaded from `),t3e=a("code"),pVr=o("pretrained_model_name_or_path"),_Vr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a3e=a("code"),uVr=o("pretrained_model_name_or_path"),bVr=o(":"),vVr=l(),xe=a("ul"),S3=a("li"),n3e=a("strong"),FVr=o("bart"),TVr=o(" \u2014 "),xee=a("a"),MVr=o("FlaxBartForCausalLM"),EVr=o(" (BART model)"),CVr=l(),R3=a("li"),s3e=a("strong"),wVr=o("bert"),AVr=o(" \u2014 "),$ee=a("a"),LVr=o("FlaxBertForCausalLM"),yVr=o(" (BERT model)"),xVr=l(),P3=a("li"),l3e=a("strong"),$Vr=o("big_bird"),kVr=o(" \u2014 "),kee=a("a"),SVr=o("FlaxBigBirdForCausalLM"),RVr=o(" (BigBird model)"),PVr=l(),B3=a("li"),i3e=a("strong"),BVr=o("electra"),IVr=o(" \u2014 "),See=a("a"),NVr=o("FlaxElectraForCausalLM"),qVr=o(" (ELECTRA model)"),jVr=l(),I3=a("li"),d3e=a("strong"),DVr=o("gpt2"),GVr=o(" \u2014 "),Ree=a("a"),OVr=o("FlaxGPT2LMHeadModel"),VVr=o(" (OpenAI GPT-2 model)"),XVr=l(),N3=a("li"),c3e=a("strong"),zVr=o("gpt_neo"),QVr=o(" \u2014 "),Pee=a("a"),WVr=o("FlaxGPTNeoForCausalLM"),HVr=o(" (GPT Neo model)"),UVr=l(),q3=a("li"),f3e=a("strong"),JVr=o("gptj"),YVr=o(" \u2014 "),Bee=a("a"),KVr=o("FlaxGPTJForCausalLM"),ZVr=o(" (GPT-J model)"),eXr=l(),j3=a("li"),m3e=a("strong"),oXr=o("opt"),rXr=o(" \u2014 "),Iee=a("a"),tXr=o("FlaxOPTForCausalLM"),aXr=o(" (OPT model)"),nXr=l(),D3=a("li"),g3e=a("strong"),sXr=o("roberta"),lXr=o(" \u2014 "),Nee=a("a"),iXr=o("FlaxRobertaForCausalLM"),dXr=o(" (RoBERTa model)"),cXr=l(),G3=a("li"),h3e=a("strong"),fXr=o("xglm"),mXr=o(" \u2014 "),qee=a("a"),gXr=o("FlaxXGLMForCausalLM"),hXr=o(" (XGLM model)"),pXr=l(),F(O3.$$.fragment),Xze=l(),ef=a("h2"),V3=a("a"),p3e=a("span"),F(v$.$$.fragment),_Xr=l(),_3e=a("span"),uXr=o("FlaxAutoModelForPreTraining"),zze=l(),br=a("div"),F(F$.$$.fragment),bXr=l(),of=a("p"),vXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jee=a("a"),FXr=o("from_pretrained()"),TXr=o(" class method or the "),Dee=a("a"),MXr=o("from_config()"),EXr=o(` class
method.`),CXr=l(),T$=a("p"),wXr=o("This class cannot be instantiated directly using "),u3e=a("code"),AXr=o("__init__()"),LXr=o(" (throws an error)."),yXr=l(),Ut=a("div"),F(M$.$$.fragment),xXr=l(),b3e=a("p"),$Xr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kXr=l(),rf=a("p"),SXr=o(`Note:
Loading a model from its configuration file does `),v3e=a("strong"),RXr=o("not"),PXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gee=a("a"),BXr=o("from_pretrained()"),IXr=o(" to load the model weights."),NXr=l(),F(X3.$$.fragment),qXr=l(),Qr=a("div"),F(E$.$$.fragment),jXr=l(),F3e=a("p"),DXr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GXr=l(),En=a("p"),OXr=o("The model class to instantiate is selected based on the "),T3e=a("code"),VXr=o("model_type"),XXr=o(` property of the config object (either
passed as an argument or loaded from `),M3e=a("code"),zXr=o("pretrained_model_name_or_path"),QXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E3e=a("code"),WXr=o("pretrained_model_name_or_path"),HXr=o(":"),UXr=l(),Ee=a("ul"),z3=a("li"),C3e=a("strong"),JXr=o("albert"),YXr=o(" \u2014 "),Oee=a("a"),KXr=o("FlaxAlbertForPreTraining"),ZXr=o(" (ALBERT model)"),ezr=l(),Q3=a("li"),w3e=a("strong"),ozr=o("bart"),rzr=o(" \u2014 "),Vee=a("a"),tzr=o("FlaxBartForConditionalGeneration"),azr=o(" (BART model)"),nzr=l(),W3=a("li"),A3e=a("strong"),szr=o("bert"),lzr=o(" \u2014 "),Xee=a("a"),izr=o("FlaxBertForPreTraining"),dzr=o(" (BERT model)"),czr=l(),H3=a("li"),L3e=a("strong"),fzr=o("big_bird"),mzr=o(" \u2014 "),zee=a("a"),gzr=o("FlaxBigBirdForPreTraining"),hzr=o(" (BigBird model)"),pzr=l(),U3=a("li"),y3e=a("strong"),_zr=o("electra"),uzr=o(" \u2014 "),Qee=a("a"),bzr=o("FlaxElectraForPreTraining"),vzr=o(" (ELECTRA model)"),Fzr=l(),J3=a("li"),x3e=a("strong"),Tzr=o("longt5"),Mzr=o(" \u2014 "),Wee=a("a"),Ezr=o("FlaxLongT5ForConditionalGeneration"),Czr=o(" (LongT5 model)"),wzr=l(),Y3=a("li"),$3e=a("strong"),Azr=o("mbart"),Lzr=o(" \u2014 "),Hee=a("a"),yzr=o("FlaxMBartForConditionalGeneration"),xzr=o(" (mBART model)"),$zr=l(),K3=a("li"),k3e=a("strong"),kzr=o("mt5"),Szr=o(" \u2014 "),Uee=a("a"),Rzr=o("FlaxMT5ForConditionalGeneration"),Pzr=o(" (MT5 model)"),Bzr=l(),Z3=a("li"),S3e=a("strong"),Izr=o("roberta"),Nzr=o(" \u2014 "),Jee=a("a"),qzr=o("FlaxRobertaForMaskedLM"),jzr=o(" (RoBERTa model)"),Dzr=l(),e5=a("li"),R3e=a("strong"),Gzr=o("roformer"),Ozr=o(" \u2014 "),Yee=a("a"),Vzr=o("FlaxRoFormerForMaskedLM"),Xzr=o(" (RoFormer model)"),zzr=l(),o5=a("li"),P3e=a("strong"),Qzr=o("t5"),Wzr=o(" \u2014 "),Kee=a("a"),Hzr=o("FlaxT5ForConditionalGeneration"),Uzr=o(" (T5 model)"),Jzr=l(),r5=a("li"),B3e=a("strong"),Yzr=o("wav2vec2"),Kzr=o(" \u2014 "),Zee=a("a"),Zzr=o("FlaxWav2Vec2ForPreTraining"),eQr=o(" (Wav2Vec2 model)"),oQr=l(),t5=a("li"),I3e=a("strong"),rQr=o("xlm-roberta"),tQr=o(" \u2014 "),eoe=a("a"),aQr=o("FlaxXLMRobertaForMaskedLM"),nQr=o(" (XLM-RoBERTa model)"),sQr=l(),F(a5.$$.fragment),Qze=l(),tf=a("h2"),n5=a("a"),N3e=a("span"),F(C$.$$.fragment),lQr=l(),q3e=a("span"),iQr=o("FlaxAutoModelForMaskedLM"),Wze=l(),vr=a("div"),F(w$.$$.fragment),dQr=l(),af=a("p"),cQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ooe=a("a"),fQr=o("from_pretrained()"),mQr=o(" class method or the "),roe=a("a"),gQr=o("from_config()"),hQr=o(` class
method.`),pQr=l(),A$=a("p"),_Qr=o("This class cannot be instantiated directly using "),j3e=a("code"),uQr=o("__init__()"),bQr=o(" (throws an error)."),vQr=l(),Jt=a("div"),F(L$.$$.fragment),FQr=l(),D3e=a("p"),TQr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),MQr=l(),nf=a("p"),EQr=o(`Note:
Loading a model from its configuration file does `),G3e=a("strong"),CQr=o("not"),wQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),toe=a("a"),AQr=o("from_pretrained()"),LQr=o(" to load the model weights."),yQr=l(),F(s5.$$.fragment),xQr=l(),Wr=a("div"),F(y$.$$.fragment),$Qr=l(),O3e=a("p"),kQr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),SQr=l(),Cn=a("p"),RQr=o("The model class to instantiate is selected based on the "),V3e=a("code"),PQr=o("model_type"),BQr=o(` property of the config object (either
passed as an argument or loaded from `),X3e=a("code"),IQr=o("pretrained_model_name_or_path"),NQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z3e=a("code"),qQr=o("pretrained_model_name_or_path"),jQr=o(":"),DQr=l(),$e=a("ul"),l5=a("li"),Q3e=a("strong"),GQr=o("albert"),OQr=o(" \u2014 "),aoe=a("a"),VQr=o("FlaxAlbertForMaskedLM"),XQr=o(" (ALBERT model)"),zQr=l(),i5=a("li"),W3e=a("strong"),QQr=o("bart"),WQr=o(" \u2014 "),noe=a("a"),HQr=o("FlaxBartForConditionalGeneration"),UQr=o(" (BART model)"),JQr=l(),d5=a("li"),H3e=a("strong"),YQr=o("bert"),KQr=o(" \u2014 "),soe=a("a"),ZQr=o("FlaxBertForMaskedLM"),eWr=o(" (BERT model)"),oWr=l(),c5=a("li"),U3e=a("strong"),rWr=o("big_bird"),tWr=o(" \u2014 "),loe=a("a"),aWr=o("FlaxBigBirdForMaskedLM"),nWr=o(" (BigBird model)"),sWr=l(),f5=a("li"),J3e=a("strong"),lWr=o("distilbert"),iWr=o(" \u2014 "),ioe=a("a"),dWr=o("FlaxDistilBertForMaskedLM"),cWr=o(" (DistilBERT model)"),fWr=l(),m5=a("li"),Y3e=a("strong"),mWr=o("electra"),gWr=o(" \u2014 "),doe=a("a"),hWr=o("FlaxElectraForMaskedLM"),pWr=o(" (ELECTRA model)"),_Wr=l(),g5=a("li"),K3e=a("strong"),uWr=o("mbart"),bWr=o(" \u2014 "),coe=a("a"),vWr=o("FlaxMBartForConditionalGeneration"),FWr=o(" (mBART model)"),TWr=l(),h5=a("li"),Z3e=a("strong"),MWr=o("roberta"),EWr=o(" \u2014 "),foe=a("a"),CWr=o("FlaxRobertaForMaskedLM"),wWr=o(" (RoBERTa model)"),AWr=l(),p5=a("li"),e5e=a("strong"),LWr=o("roformer"),yWr=o(" \u2014 "),moe=a("a"),xWr=o("FlaxRoFormerForMaskedLM"),$Wr=o(" (RoFormer model)"),kWr=l(),_5=a("li"),o5e=a("strong"),SWr=o("xlm-roberta"),RWr=o(" \u2014 "),goe=a("a"),PWr=o("FlaxXLMRobertaForMaskedLM"),BWr=o(" (XLM-RoBERTa model)"),IWr=l(),F(u5.$$.fragment),Hze=l(),sf=a("h2"),b5=a("a"),r5e=a("span"),F(x$.$$.fragment),NWr=l(),t5e=a("span"),qWr=o("FlaxAutoModelForSeq2SeqLM"),Uze=l(),Fr=a("div"),F($$.$$.fragment),jWr=l(),lf=a("p"),DWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hoe=a("a"),GWr=o("from_pretrained()"),OWr=o(" class method or the "),poe=a("a"),VWr=o("from_config()"),XWr=o(` class
method.`),zWr=l(),k$=a("p"),QWr=o("This class cannot be instantiated directly using "),a5e=a("code"),WWr=o("__init__()"),HWr=o(" (throws an error)."),UWr=l(),Yt=a("div"),F(S$.$$.fragment),JWr=l(),n5e=a("p"),YWr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),KWr=l(),df=a("p"),ZWr=o(`Note:
Loading a model from its configuration file does `),s5e=a("strong"),eHr=o("not"),oHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_oe=a("a"),rHr=o("from_pretrained()"),tHr=o(" to load the model weights."),aHr=l(),F(v5.$$.fragment),nHr=l(),Hr=a("div"),F(R$.$$.fragment),sHr=l(),l5e=a("p"),lHr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iHr=l(),wn=a("p"),dHr=o("The model class to instantiate is selected based on the "),i5e=a("code"),cHr=o("model_type"),fHr=o(` property of the config object (either
passed as an argument or loaded from `),d5e=a("code"),mHr=o("pretrained_model_name_or_path"),gHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c5e=a("code"),hHr=o("pretrained_model_name_or_path"),pHr=o(":"),_Hr=l(),ke=a("ul"),F5=a("li"),f5e=a("strong"),uHr=o("bart"),bHr=o(" \u2014 "),uoe=a("a"),vHr=o("FlaxBartForConditionalGeneration"),FHr=o(" (BART model)"),THr=l(),T5=a("li"),m5e=a("strong"),MHr=o("blenderbot"),EHr=o(" \u2014 "),boe=a("a"),CHr=o("FlaxBlenderbotForConditionalGeneration"),wHr=o(" (Blenderbot model)"),AHr=l(),M5=a("li"),g5e=a("strong"),LHr=o("blenderbot-small"),yHr=o(" \u2014 "),voe=a("a"),xHr=o("FlaxBlenderbotSmallForConditionalGeneration"),$Hr=o(" (BlenderbotSmall model)"),kHr=l(),E5=a("li"),h5e=a("strong"),SHr=o("encoder-decoder"),RHr=o(" \u2014 "),Foe=a("a"),PHr=o("FlaxEncoderDecoderModel"),BHr=o(" (Encoder decoder model)"),IHr=l(),C5=a("li"),p5e=a("strong"),NHr=o("longt5"),qHr=o(" \u2014 "),Toe=a("a"),jHr=o("FlaxLongT5ForConditionalGeneration"),DHr=o(" (LongT5 model)"),GHr=l(),w5=a("li"),_5e=a("strong"),OHr=o("marian"),VHr=o(" \u2014 "),Moe=a("a"),XHr=o("FlaxMarianMTModel"),zHr=o(" (Marian model)"),QHr=l(),A5=a("li"),u5e=a("strong"),WHr=o("mbart"),HHr=o(" \u2014 "),Eoe=a("a"),UHr=o("FlaxMBartForConditionalGeneration"),JHr=o(" (mBART model)"),YHr=l(),L5=a("li"),b5e=a("strong"),KHr=o("mt5"),ZHr=o(" \u2014 "),Coe=a("a"),eUr=o("FlaxMT5ForConditionalGeneration"),oUr=o(" (MT5 model)"),rUr=l(),y5=a("li"),v5e=a("strong"),tUr=o("pegasus"),aUr=o(" \u2014 "),woe=a("a"),nUr=o("FlaxPegasusForConditionalGeneration"),sUr=o(" (Pegasus model)"),lUr=l(),x5=a("li"),F5e=a("strong"),iUr=o("t5"),dUr=o(" \u2014 "),Aoe=a("a"),cUr=o("FlaxT5ForConditionalGeneration"),fUr=o(" (T5 model)"),mUr=l(),F($5.$$.fragment),Jze=l(),cf=a("h2"),k5=a("a"),T5e=a("span"),F(P$.$$.fragment),gUr=l(),M5e=a("span"),hUr=o("FlaxAutoModelForSequenceClassification"),Yze=l(),Tr=a("div"),F(B$.$$.fragment),pUr=l(),ff=a("p"),_Ur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Loe=a("a"),uUr=o("from_pretrained()"),bUr=o(" class method or the "),yoe=a("a"),vUr=o("from_config()"),FUr=o(` class
method.`),TUr=l(),I$=a("p"),MUr=o("This class cannot be instantiated directly using "),E5e=a("code"),EUr=o("__init__()"),CUr=o(" (throws an error)."),wUr=l(),Kt=a("div"),F(N$.$$.fragment),AUr=l(),C5e=a("p"),LUr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yUr=l(),mf=a("p"),xUr=o(`Note:
Loading a model from its configuration file does `),w5e=a("strong"),$Ur=o("not"),kUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xoe=a("a"),SUr=o("from_pretrained()"),RUr=o(" to load the model weights."),PUr=l(),F(S5.$$.fragment),BUr=l(),Ur=a("div"),F(q$.$$.fragment),IUr=l(),A5e=a("p"),NUr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qUr=l(),An=a("p"),jUr=o("The model class to instantiate is selected based on the "),L5e=a("code"),DUr=o("model_type"),GUr=o(` property of the config object (either
passed as an argument or loaded from `),y5e=a("code"),OUr=o("pretrained_model_name_or_path"),VUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x5e=a("code"),XUr=o("pretrained_model_name_or_path"),zUr=o(":"),QUr=l(),Se=a("ul"),R5=a("li"),$5e=a("strong"),WUr=o("albert"),HUr=o(" \u2014 "),$oe=a("a"),UUr=o("FlaxAlbertForSequenceClassification"),JUr=o(" (ALBERT model)"),YUr=l(),P5=a("li"),k5e=a("strong"),KUr=o("bart"),ZUr=o(" \u2014 "),koe=a("a"),eJr=o("FlaxBartForSequenceClassification"),oJr=o(" (BART model)"),rJr=l(),B5=a("li"),S5e=a("strong"),tJr=o("bert"),aJr=o(" \u2014 "),Soe=a("a"),nJr=o("FlaxBertForSequenceClassification"),sJr=o(" (BERT model)"),lJr=l(),I5=a("li"),R5e=a("strong"),iJr=o("big_bird"),dJr=o(" \u2014 "),Roe=a("a"),cJr=o("FlaxBigBirdForSequenceClassification"),fJr=o(" (BigBird model)"),mJr=l(),N5=a("li"),P5e=a("strong"),gJr=o("distilbert"),hJr=o(" \u2014 "),Poe=a("a"),pJr=o("FlaxDistilBertForSequenceClassification"),_Jr=o(" (DistilBERT model)"),uJr=l(),q5=a("li"),B5e=a("strong"),bJr=o("electra"),vJr=o(" \u2014 "),Boe=a("a"),FJr=o("FlaxElectraForSequenceClassification"),TJr=o(" (ELECTRA model)"),MJr=l(),j5=a("li"),I5e=a("strong"),EJr=o("mbart"),CJr=o(" \u2014 "),Ioe=a("a"),wJr=o("FlaxMBartForSequenceClassification"),AJr=o(" (mBART model)"),LJr=l(),D5=a("li"),N5e=a("strong"),yJr=o("roberta"),xJr=o(" \u2014 "),Noe=a("a"),$Jr=o("FlaxRobertaForSequenceClassification"),kJr=o(" (RoBERTa model)"),SJr=l(),G5=a("li"),q5e=a("strong"),RJr=o("roformer"),PJr=o(" \u2014 "),qoe=a("a"),BJr=o("FlaxRoFormerForSequenceClassification"),IJr=o(" (RoFormer model)"),NJr=l(),O5=a("li"),j5e=a("strong"),qJr=o("xlm-roberta"),jJr=o(" \u2014 "),joe=a("a"),DJr=o("FlaxXLMRobertaForSequenceClassification"),GJr=o(" (XLM-RoBERTa model)"),OJr=l(),F(V5.$$.fragment),Kze=l(),gf=a("h2"),X5=a("a"),D5e=a("span"),F(j$.$$.fragment),VJr=l(),G5e=a("span"),XJr=o("FlaxAutoModelForQuestionAnswering"),Zze=l(),Mr=a("div"),F(D$.$$.fragment),zJr=l(),hf=a("p"),QJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Doe=a("a"),WJr=o("from_pretrained()"),HJr=o(" class method or the "),Goe=a("a"),UJr=o("from_config()"),JJr=o(` class
method.`),YJr=l(),G$=a("p"),KJr=o("This class cannot be instantiated directly using "),O5e=a("code"),ZJr=o("__init__()"),eYr=o(" (throws an error)."),oYr=l(),Zt=a("div"),F(O$.$$.fragment),rYr=l(),V5e=a("p"),tYr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aYr=l(),pf=a("p"),nYr=o(`Note:
Loading a model from its configuration file does `),X5e=a("strong"),sYr=o("not"),lYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ooe=a("a"),iYr=o("from_pretrained()"),dYr=o(" to load the model weights."),cYr=l(),F(z5.$$.fragment),fYr=l(),Jr=a("div"),F(V$.$$.fragment),mYr=l(),z5e=a("p"),gYr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hYr=l(),Ln=a("p"),pYr=o("The model class to instantiate is selected based on the "),Q5e=a("code"),_Yr=o("model_type"),uYr=o(` property of the config object (either
passed as an argument or loaded from `),W5e=a("code"),bYr=o("pretrained_model_name_or_path"),vYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=a("code"),FYr=o("pretrained_model_name_or_path"),TYr=o(":"),MYr=l(),Re=a("ul"),Q5=a("li"),U5e=a("strong"),EYr=o("albert"),CYr=o(" \u2014 "),Voe=a("a"),wYr=o("FlaxAlbertForQuestionAnswering"),AYr=o(" (ALBERT model)"),LYr=l(),W5=a("li"),J5e=a("strong"),yYr=o("bart"),xYr=o(" \u2014 "),Xoe=a("a"),$Yr=o("FlaxBartForQuestionAnswering"),kYr=o(" (BART model)"),SYr=l(),H5=a("li"),Y5e=a("strong"),RYr=o("bert"),PYr=o(" \u2014 "),zoe=a("a"),BYr=o("FlaxBertForQuestionAnswering"),IYr=o(" (BERT model)"),NYr=l(),U5=a("li"),K5e=a("strong"),qYr=o("big_bird"),jYr=o(" \u2014 "),Qoe=a("a"),DYr=o("FlaxBigBirdForQuestionAnswering"),GYr=o(" (BigBird model)"),OYr=l(),J5=a("li"),Z5e=a("strong"),VYr=o("distilbert"),XYr=o(" \u2014 "),Woe=a("a"),zYr=o("FlaxDistilBertForQuestionAnswering"),QYr=o(" (DistilBERT model)"),WYr=l(),Y5=a("li"),ewe=a("strong"),HYr=o("electra"),UYr=o(" \u2014 "),Hoe=a("a"),JYr=o("FlaxElectraForQuestionAnswering"),YYr=o(" (ELECTRA model)"),KYr=l(),K5=a("li"),owe=a("strong"),ZYr=o("mbart"),eKr=o(" \u2014 "),Uoe=a("a"),oKr=o("FlaxMBartForQuestionAnswering"),rKr=o(" (mBART model)"),tKr=l(),Z5=a("li"),rwe=a("strong"),aKr=o("roberta"),nKr=o(" \u2014 "),Joe=a("a"),sKr=o("FlaxRobertaForQuestionAnswering"),lKr=o(" (RoBERTa model)"),iKr=l(),ew=a("li"),twe=a("strong"),dKr=o("roformer"),cKr=o(" \u2014 "),Yoe=a("a"),fKr=o("FlaxRoFormerForQuestionAnswering"),mKr=o(" (RoFormer model)"),gKr=l(),ow=a("li"),awe=a("strong"),hKr=o("xlm-roberta"),pKr=o(" \u2014 "),Koe=a("a"),_Kr=o("FlaxXLMRobertaForQuestionAnswering"),uKr=o(" (XLM-RoBERTa model)"),bKr=l(),F(rw.$$.fragment),eQe=l(),_f=a("h2"),tw=a("a"),nwe=a("span"),F(X$.$$.fragment),vKr=l(),swe=a("span"),FKr=o("FlaxAutoModelForTokenClassification"),oQe=l(),Er=a("div"),F(z$.$$.fragment),TKr=l(),uf=a("p"),MKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Zoe=a("a"),EKr=o("from_pretrained()"),CKr=o(" class method or the "),ere=a("a"),wKr=o("from_config()"),AKr=o(` class
method.`),LKr=l(),Q$=a("p"),yKr=o("This class cannot be instantiated directly using "),lwe=a("code"),xKr=o("__init__()"),$Kr=o(" (throws an error)."),kKr=l(),ea=a("div"),F(W$.$$.fragment),SKr=l(),iwe=a("p"),RKr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),PKr=l(),bf=a("p"),BKr=o(`Note:
Loading a model from its configuration file does `),dwe=a("strong"),IKr=o("not"),NKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ore=a("a"),qKr=o("from_pretrained()"),jKr=o(" to load the model weights."),DKr=l(),F(aw.$$.fragment),GKr=l(),Yr=a("div"),F(H$.$$.fragment),OKr=l(),cwe=a("p"),VKr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),XKr=l(),yn=a("p"),zKr=o("The model class to instantiate is selected based on the "),fwe=a("code"),QKr=o("model_type"),WKr=o(` property of the config object (either
passed as an argument or loaded from `),mwe=a("code"),HKr=o("pretrained_model_name_or_path"),UKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gwe=a("code"),JKr=o("pretrained_model_name_or_path"),YKr=o(":"),KKr=l(),Xe=a("ul"),nw=a("li"),hwe=a("strong"),ZKr=o("albert"),eZr=o(" \u2014 "),rre=a("a"),oZr=o("FlaxAlbertForTokenClassification"),rZr=o(" (ALBERT model)"),tZr=l(),sw=a("li"),pwe=a("strong"),aZr=o("bert"),nZr=o(" \u2014 "),tre=a("a"),sZr=o("FlaxBertForTokenClassification"),lZr=o(" (BERT model)"),iZr=l(),lw=a("li"),_we=a("strong"),dZr=o("big_bird"),cZr=o(" \u2014 "),are=a("a"),fZr=o("FlaxBigBirdForTokenClassification"),mZr=o(" (BigBird model)"),gZr=l(),iw=a("li"),uwe=a("strong"),hZr=o("distilbert"),pZr=o(" \u2014 "),nre=a("a"),_Zr=o("FlaxDistilBertForTokenClassification"),uZr=o(" (DistilBERT model)"),bZr=l(),dw=a("li"),bwe=a("strong"),vZr=o("electra"),FZr=o(" \u2014 "),sre=a("a"),TZr=o("FlaxElectraForTokenClassification"),MZr=o(" (ELECTRA model)"),EZr=l(),cw=a("li"),vwe=a("strong"),CZr=o("roberta"),wZr=o(" \u2014 "),lre=a("a"),AZr=o("FlaxRobertaForTokenClassification"),LZr=o(" (RoBERTa model)"),yZr=l(),fw=a("li"),Fwe=a("strong"),xZr=o("roformer"),$Zr=o(" \u2014 "),ire=a("a"),kZr=o("FlaxRoFormerForTokenClassification"),SZr=o(" (RoFormer model)"),RZr=l(),mw=a("li"),Twe=a("strong"),PZr=o("xlm-roberta"),BZr=o(" \u2014 "),dre=a("a"),IZr=o("FlaxXLMRobertaForTokenClassification"),NZr=o(" (XLM-RoBERTa model)"),qZr=l(),F(gw.$$.fragment),rQe=l(),vf=a("h2"),hw=a("a"),Mwe=a("span"),F(U$.$$.fragment),jZr=l(),Ewe=a("span"),DZr=o("FlaxAutoModelForMultipleChoice"),tQe=l(),Cr=a("div"),F(J$.$$.fragment),GZr=l(),Ff=a("p"),OZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cre=a("a"),VZr=o("from_pretrained()"),XZr=o(" class method or the "),fre=a("a"),zZr=o("from_config()"),QZr=o(` class
method.`),WZr=l(),Y$=a("p"),HZr=o("This class cannot be instantiated directly using "),Cwe=a("code"),UZr=o("__init__()"),JZr=o(" (throws an error)."),YZr=l(),oa=a("div"),F(K$.$$.fragment),KZr=l(),wwe=a("p"),ZZr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eet=l(),Tf=a("p"),oet=o(`Note:
Loading a model from its configuration file does `),Awe=a("strong"),ret=o("not"),tet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mre=a("a"),aet=o("from_pretrained()"),net=o(" to load the model weights."),set=l(),F(pw.$$.fragment),iet=l(),Kr=a("div"),F(Z$.$$.fragment),det=l(),Lwe=a("p"),cet=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fet=l(),xn=a("p"),met=o("The model class to instantiate is selected based on the "),ywe=a("code"),get=o("model_type"),het=o(` property of the config object (either
passed as an argument or loaded from `),xwe=a("code"),pet=o("pretrained_model_name_or_path"),_et=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$we=a("code"),uet=o("pretrained_model_name_or_path"),bet=o(":"),vet=l(),ze=a("ul"),_w=a("li"),kwe=a("strong"),Fet=o("albert"),Tet=o(" \u2014 "),gre=a("a"),Met=o("FlaxAlbertForMultipleChoice"),Eet=o(" (ALBERT model)"),Cet=l(),uw=a("li"),Swe=a("strong"),wet=o("bert"),Aet=o(" \u2014 "),hre=a("a"),Let=o("FlaxBertForMultipleChoice"),yet=o(" (BERT model)"),xet=l(),bw=a("li"),Rwe=a("strong"),$et=o("big_bird"),ket=o(" \u2014 "),pre=a("a"),Set=o("FlaxBigBirdForMultipleChoice"),Ret=o(" (BigBird model)"),Pet=l(),vw=a("li"),Pwe=a("strong"),Bet=o("distilbert"),Iet=o(" \u2014 "),_re=a("a"),Net=o("FlaxDistilBertForMultipleChoice"),qet=o(" (DistilBERT model)"),jet=l(),Fw=a("li"),Bwe=a("strong"),Det=o("electra"),Get=o(" \u2014 "),ure=a("a"),Oet=o("FlaxElectraForMultipleChoice"),Vet=o(" (ELECTRA model)"),Xet=l(),Tw=a("li"),Iwe=a("strong"),zet=o("roberta"),Qet=o(" \u2014 "),bre=a("a"),Wet=o("FlaxRobertaForMultipleChoice"),Het=o(" (RoBERTa model)"),Uet=l(),Mw=a("li"),Nwe=a("strong"),Jet=o("roformer"),Yet=o(" \u2014 "),vre=a("a"),Ket=o("FlaxRoFormerForMultipleChoice"),Zet=o(" (RoFormer model)"),eot=l(),Ew=a("li"),qwe=a("strong"),oot=o("xlm-roberta"),rot=o(" \u2014 "),Fre=a("a"),tot=o("FlaxXLMRobertaForMultipleChoice"),aot=o(" (XLM-RoBERTa model)"),not=l(),F(Cw.$$.fragment),aQe=l(),Mf=a("h2"),ww=a("a"),jwe=a("span"),F(ek.$$.fragment),sot=l(),Dwe=a("span"),lot=o("FlaxAutoModelForNextSentencePrediction"),nQe=l(),wr=a("div"),F(ok.$$.fragment),iot=l(),Ef=a("p"),dot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Tre=a("a"),cot=o("from_pretrained()"),fot=o(" class method or the "),Mre=a("a"),mot=o("from_config()"),got=o(` class
method.`),hot=l(),rk=a("p"),pot=o("This class cannot be instantiated directly using "),Gwe=a("code"),_ot=o("__init__()"),uot=o(" (throws an error)."),bot=l(),ra=a("div"),F(tk.$$.fragment),vot=l(),Owe=a("p"),Fot=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Tot=l(),Cf=a("p"),Mot=o(`Note:
Loading a model from its configuration file does `),Vwe=a("strong"),Eot=o("not"),Cot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ere=a("a"),wot=o("from_pretrained()"),Aot=o(" to load the model weights."),Lot=l(),F(Aw.$$.fragment),yot=l(),Zr=a("div"),F(ak.$$.fragment),xot=l(),Xwe=a("p"),$ot=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kot=l(),$n=a("p"),Sot=o("The model class to instantiate is selected based on the "),zwe=a("code"),Rot=o("model_type"),Pot=o(` property of the config object (either
passed as an argument or loaded from `),Qwe=a("code"),Bot=o("pretrained_model_name_or_path"),Iot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wwe=a("code"),Not=o("pretrained_model_name_or_path"),qot=o(":"),jot=l(),Hwe=a("ul"),Lw=a("li"),Uwe=a("strong"),Dot=o("bert"),Got=o(" \u2014 "),Cre=a("a"),Oot=o("FlaxBertForNextSentencePrediction"),Vot=o(" (BERT model)"),Xot=l(),F(yw.$$.fragment),sQe=l(),wf=a("h2"),xw=a("a"),Jwe=a("span"),F(nk.$$.fragment),zot=l(),Ywe=a("span"),Qot=o("FlaxAutoModelForImageClassification"),lQe=l(),Ar=a("div"),F(sk.$$.fragment),Wot=l(),Af=a("p"),Hot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wre=a("a"),Uot=o("from_pretrained()"),Jot=o(" class method or the "),Are=a("a"),Yot=o("from_config()"),Kot=o(` class
method.`),Zot=l(),lk=a("p"),ert=o("This class cannot be instantiated directly using "),Kwe=a("code"),ort=o("__init__()"),rrt=o(" (throws an error)."),trt=l(),ta=a("div"),F(ik.$$.fragment),art=l(),Zwe=a("p"),nrt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),srt=l(),Lf=a("p"),lrt=o(`Note:
Loading a model from its configuration file does `),eAe=a("strong"),irt=o("not"),drt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lre=a("a"),crt=o("from_pretrained()"),frt=o(" to load the model weights."),mrt=l(),F($w.$$.fragment),grt=l(),et=a("div"),F(dk.$$.fragment),hrt=l(),oAe=a("p"),prt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_rt=l(),kn=a("p"),urt=o("The model class to instantiate is selected based on the "),rAe=a("code"),brt=o("model_type"),vrt=o(` property of the config object (either
passed as an argument or loaded from `),tAe=a("code"),Frt=o("pretrained_model_name_or_path"),Trt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aAe=a("code"),Mrt=o("pretrained_model_name_or_path"),Ert=o(":"),Crt=l(),ck=a("ul"),kw=a("li"),nAe=a("strong"),wrt=o("beit"),Art=o(" \u2014 "),yre=a("a"),Lrt=o("FlaxBeitForImageClassification"),yrt=o(" (BEiT model)"),xrt=l(),Sw=a("li"),sAe=a("strong"),$rt=o("vit"),krt=o(" \u2014 "),xre=a("a"),Srt=o("FlaxViTForImageClassification"),Rrt=o(" (ViT model)"),Prt=l(),F(Rw.$$.fragment),iQe=l(),yf=a("h2"),Pw=a("a"),lAe=a("span"),F(fk.$$.fragment),Brt=l(),iAe=a("span"),Irt=o("FlaxAutoModelForVision2Seq"),dQe=l(),Lr=a("div"),F(mk.$$.fragment),Nrt=l(),xf=a("p"),qrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$re=a("a"),jrt=o("from_pretrained()"),Drt=o(" class method or the "),kre=a("a"),Grt=o("from_config()"),Ort=o(` class
method.`),Vrt=l(),gk=a("p"),Xrt=o("This class cannot be instantiated directly using "),dAe=a("code"),zrt=o("__init__()"),Qrt=o(" (throws an error)."),Wrt=l(),aa=a("div"),F(hk.$$.fragment),Hrt=l(),cAe=a("p"),Urt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Jrt=l(),$f=a("p"),Yrt=o(`Note:
Loading a model from its configuration file does `),fAe=a("strong"),Krt=o("not"),Zrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sre=a("a"),ett=o("from_pretrained()"),ott=o(" to load the model weights."),rtt=l(),F(Bw.$$.fragment),ttt=l(),ot=a("div"),F(pk.$$.fragment),att=l(),mAe=a("p"),ntt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),stt=l(),Sn=a("p"),ltt=o("The model class to instantiate is selected based on the "),gAe=a("code"),itt=o("model_type"),dtt=o(` property of the config object (either
passed as an argument or loaded from `),hAe=a("code"),ctt=o("pretrained_model_name_or_path"),ftt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pAe=a("code"),mtt=o("pretrained_model_name_or_path"),gtt=o(":"),htt=l(),_Ae=a("ul"),Iw=a("li"),uAe=a("strong"),ptt=o("vision-encoder-decoder"),_tt=o(" \u2014 "),Rre=a("a"),utt=o("FlaxVisionEncoderDecoderModel"),btt=o(" (Vision Encoder decoder model)"),vtt=l(),F(Nw.$$.fragment),this.h()},l(f){const u=oWt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var _k=s(p);m=n(_k,"A",{id:!0,class:!0,href:!0});var bAe=s(m);_=n(bAe,"SPAN",{});var vAe=s(_);T(d.$$.fragment,vAe),vAe.forEach(t),bAe.forEach(t),h=i(_k),wo=n(_k,"SPAN",{});var FAe=s(wo);Li=r(FAe,"Auto Classes"),FAe.forEach(t),_k.forEach(t),Pf=i(f),lt=n(f,"P",{});var uk=s(lt);yi=r(uk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=n(uk,"CODE",{});var TAe=s(xi);rL=r(TAe,"from_pretrained()"),TAe.forEach(t),Bf=r(uk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),uk.forEach(t),Oe=i(f),We=n(f,"P",{});var Rn=s(We);$i=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var MAe=s(Pn);tL=r(MAe,"AutoConfig"),MAe.forEach(t),Bn=r(Rn,", "),In=n(Rn,"A",{href:!0});var EAe=s(In);aL=r(EAe,"AutoModel"),EAe.forEach(t),ki=r(Rn,`, and
`),Nn=n(Rn,"A",{href:!0});var CAe=s(Nn);nL=r(CAe,"AutoTokenizer"),CAe.forEach(t),Si=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),If=i(f),T(Sa.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var bk=s(Ae);NS=r(bk,"will create a model that is an instance of "),Ri=n(bk,"A",{href:!0});var wAe=s(Ri);qS=r(wAe,"BertModel"),wAe.forEach(t),jS=r(bk,"."),bk.forEach(t),Ao=i(f),Ra=n(f,"P",{});var vk=s(Ra);DS=r(vk,"There is one class of "),Nf=n(vk,"CODE",{});var AAe=s(Nf);GS=r(AAe,"AutoModel"),AAe.forEach(t),FHe=r(vk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),vk.forEach(t),nXe=i(f),Pi=n(f,"H2",{class:!0});var Fk=s(Pi);qf=n(Fk,"A",{id:!0,class:!0,href:!0});var LAe=s(qf);yae=n(LAe,"SPAN",{});var yAe=s(yae);T(sL.$$.fragment,yAe),yAe.forEach(t),LAe.forEach(t),THe=i(Fk),xae=n(Fk,"SPAN",{});var xAe=s(xae);MHe=r(xAe,"Extending the Auto Classes"),xAe.forEach(t),Fk.forEach(t),sXe=i(f),qn=n(f,"P",{});var kf=s(qn);EHe=r(kf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),$ae=n(kf,"CODE",{});var $Ae=s($ae);CHe=r($Ae,"NewModel"),$Ae.forEach(t),wHe=r(kf,", make sure you have a "),kae=n(kf,"CODE",{});var kAe=s(kae);AHe=r(kAe,"NewModelConfig"),kAe.forEach(t),LHe=r(kf,` then you can add those to the auto
classes like this:`),kf.forEach(t),lXe=i(f),T(lL.$$.fragment,f),iXe=i(f),OS=n(f,"P",{});var SAe=s(OS);yHe=r(SAe,"You will then be able to use the auto classes like you would usually do!"),SAe.forEach(t),dXe=i(f),T(jf.$$.fragment,f),cXe=i(f),Bi=n(f,"H2",{class:!0});var Tk=s(Bi);Df=n(Tk,"A",{id:!0,class:!0,href:!0});var RAe=s(Df);Sae=n(RAe,"SPAN",{});var PAe=s(Sae);T(iL.$$.fragment,PAe),PAe.forEach(t),RAe.forEach(t),xHe=i(Tk),Rae=n(Tk,"SPAN",{});var BAe=s(Rae);$He=r(BAe,"AutoConfig"),BAe.forEach(t),Tk.forEach(t),fXe=i(f),Lo=n(f,"DIV",{class:!0});var nt=s(Lo);T(dL.$$.fragment,nt),kHe=i(nt),cL=n(nt,"P",{});var Mk=s(cL);SHe=r(Mk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),VS=n(Mk,"A",{href:!0});var IAe=s(VS);RHe=r(IAe,"from_pretrained()"),IAe.forEach(t),PHe=r(Mk," class method."),Mk.forEach(t),BHe=i(nt),fL=n(nt,"P",{});var Ek=s(fL);IHe=r(Ek,"This class cannot be instantiated directly using "),Pae=n(Ek,"CODE",{});var NAe=s(Pae);NHe=r(NAe,"__init__()"),NAe.forEach(t),qHe=r(Ek," (throws an error)."),Ek.forEach(t),jHe=i(nt),yr=n(nt,"DIV",{class:!0});var st=s(yr);T(mL.$$.fragment,st),DHe=i(st),Bae=n(st,"P",{});var qAe=s(Bae);GHe=r(qAe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),qAe.forEach(t),OHe=i(st),Ii=n(st,"P",{});var Sf=s(Ii);VHe=r(Sf,"The configuration class to instantiate is selected based on the "),Iae=n(Sf,"CODE",{});var jAe=s(Iae);XHe=r(jAe,"model_type"),jAe.forEach(t),zHe=r(Sf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Nae=n(Sf,"CODE",{});var DAe=s(Nae);QHe=r(DAe,"pretrained_model_name_or_path"),DAe.forEach(t),WHe=r(Sf,":"),Sf.forEach(t),HHe=i(st),A=n(st,"UL",{});var L=s(A);Gf=n(L,"LI",{});var qw=s(Gf);qae=n(qw,"STRONG",{});var GAe=s(qae);UHe=r(GAe,"albert"),GAe.forEach(t),JHe=r(qw," \u2014 "),XS=n(qw,"A",{href:!0});var OAe=s(XS);YHe=r(OAe,"AlbertConfig"),OAe.forEach(t),KHe=r(qw," (ALBERT model)"),qw.forEach(t),ZHe=i(L),Of=n(L,"LI",{});var jw=s(Of);jae=n(jw,"STRONG",{});var VAe=s(jae);eUe=r(VAe,"bart"),VAe.forEach(t),oUe=r(jw," \u2014 "),zS=n(jw,"A",{href:!0});var XAe=s(zS);rUe=r(XAe,"BartConfig"),XAe.forEach(t),tUe=r(jw," (BART model)"),jw.forEach(t),aUe=i(L),Vf=n(L,"LI",{});var Dw=s(Vf);Dae=n(Dw,"STRONG",{});var zAe=s(Dae);nUe=r(zAe,"beit"),zAe.forEach(t),sUe=r(Dw," \u2014 "),QS=n(Dw,"A",{href:!0});var QAe=s(QS);lUe=r(QAe,"BeitConfig"),QAe.forEach(t),iUe=r(Dw," (BEiT model)"),Dw.forEach(t),dUe=i(L),Xf=n(L,"LI",{});var Gw=s(Xf);Gae=n(Gw,"STRONG",{});var WAe=s(Gae);cUe=r(WAe,"bert"),WAe.forEach(t),fUe=r(Gw," \u2014 "),WS=n(Gw,"A",{href:!0});var HAe=s(WS);mUe=r(HAe,"BertConfig"),HAe.forEach(t),gUe=r(Gw," (BERT model)"),Gw.forEach(t),hUe=i(L),zf=n(L,"LI",{});var Ow=s(zf);Oae=n(Ow,"STRONG",{});var UAe=s(Oae);pUe=r(UAe,"bert-generation"),UAe.forEach(t),_Ue=r(Ow," \u2014 "),HS=n(Ow,"A",{href:!0});var JAe=s(HS);uUe=r(JAe,"BertGenerationConfig"),JAe.forEach(t),bUe=r(Ow," (Bert Generation model)"),Ow.forEach(t),vUe=i(L),Qf=n(L,"LI",{});var Vw=s(Qf);Vae=n(Vw,"STRONG",{});var YAe=s(Vae);FUe=r(YAe,"big_bird"),YAe.forEach(t),TUe=r(Vw," \u2014 "),US=n(Vw,"A",{href:!0});var KAe=s(US);MUe=r(KAe,"BigBirdConfig"),KAe.forEach(t),EUe=r(Vw," (BigBird model)"),Vw.forEach(t),CUe=i(L),Wf=n(L,"LI",{});var Xw=s(Wf);Xae=n(Xw,"STRONG",{});var ZAe=s(Xae);wUe=r(ZAe,"bigbird_pegasus"),ZAe.forEach(t),AUe=r(Xw," \u2014 "),JS=n(Xw,"A",{href:!0});var e6e=s(JS);LUe=r(e6e,"BigBirdPegasusConfig"),e6e.forEach(t),yUe=r(Xw," (BigBird-Pegasus model)"),Xw.forEach(t),xUe=i(L),Hf=n(L,"LI",{});var zw=s(Hf);zae=n(zw,"STRONG",{});var o6e=s(zae);$Ue=r(o6e,"blenderbot"),o6e.forEach(t),kUe=r(zw," \u2014 "),YS=n(zw,"A",{href:!0});var r6e=s(YS);SUe=r(r6e,"BlenderbotConfig"),r6e.forEach(t),RUe=r(zw," (Blenderbot model)"),zw.forEach(t),PUe=i(L),Uf=n(L,"LI",{});var Qw=s(Uf);Qae=n(Qw,"STRONG",{});var t6e=s(Qae);BUe=r(t6e,"blenderbot-small"),t6e.forEach(t),IUe=r(Qw," \u2014 "),KS=n(Qw,"A",{href:!0});var a6e=s(KS);NUe=r(a6e,"BlenderbotSmallConfig"),a6e.forEach(t),qUe=r(Qw," (BlenderbotSmall model)"),Qw.forEach(t),jUe=i(L),Jf=n(L,"LI",{});var Ww=s(Jf);Wae=n(Ww,"STRONG",{});var n6e=s(Wae);DUe=r(n6e,"bloom"),n6e.forEach(t),GUe=r(Ww," \u2014 "),ZS=n(Ww,"A",{href:!0});var s6e=s(ZS);OUe=r(s6e,"BloomConfig"),s6e.forEach(t),VUe=r(Ww," (BLOOM model)"),Ww.forEach(t),XUe=i(L),Yf=n(L,"LI",{});var Hw=s(Yf);Hae=n(Hw,"STRONG",{});var l6e=s(Hae);zUe=r(l6e,"camembert"),l6e.forEach(t),QUe=r(Hw," \u2014 "),eR=n(Hw,"A",{href:!0});var i6e=s(eR);WUe=r(i6e,"CamembertConfig"),i6e.forEach(t),HUe=r(Hw," (CamemBERT model)"),Hw.forEach(t),UUe=i(L),Kf=n(L,"LI",{});var Uw=s(Kf);Uae=n(Uw,"STRONG",{});var d6e=s(Uae);JUe=r(d6e,"canine"),d6e.forEach(t),YUe=r(Uw," \u2014 "),oR=n(Uw,"A",{href:!0});var c6e=s(oR);KUe=r(c6e,"CanineConfig"),c6e.forEach(t),ZUe=r(Uw," (CANINE model)"),Uw.forEach(t),eJe=i(L),Zf=n(L,"LI",{});var Jw=s(Zf);Jae=n(Jw,"STRONG",{});var f6e=s(Jae);oJe=r(f6e,"clip"),f6e.forEach(t),rJe=r(Jw," \u2014 "),rR=n(Jw,"A",{href:!0});var m6e=s(rR);tJe=r(m6e,"CLIPConfig"),m6e.forEach(t),aJe=r(Jw," (CLIP model)"),Jw.forEach(t),nJe=i(L),em=n(L,"LI",{});var Yw=s(em);Yae=n(Yw,"STRONG",{});var g6e=s(Yae);sJe=r(g6e,"codegen"),g6e.forEach(t),lJe=r(Yw," \u2014 "),tR=n(Yw,"A",{href:!0});var h6e=s(tR);iJe=r(h6e,"CodeGenConfig"),h6e.forEach(t),dJe=r(Yw," (CodeGen model)"),Yw.forEach(t),cJe=i(L),om=n(L,"LI",{});var Kw=s(om);Kae=n(Kw,"STRONG",{});var p6e=s(Kae);fJe=r(p6e,"convbert"),p6e.forEach(t),mJe=r(Kw," \u2014 "),aR=n(Kw,"A",{href:!0});var _6e=s(aR);gJe=r(_6e,"ConvBertConfig"),_6e.forEach(t),hJe=r(Kw," (ConvBERT model)"),Kw.forEach(t),pJe=i(L),rm=n(L,"LI",{});var Zw=s(rm);Zae=n(Zw,"STRONG",{});var u6e=s(Zae);_Je=r(u6e,"convnext"),u6e.forEach(t),uJe=r(Zw," \u2014 "),nR=n(Zw,"A",{href:!0});var b6e=s(nR);bJe=r(b6e,"ConvNextConfig"),b6e.forEach(t),vJe=r(Zw," (ConvNeXT model)"),Zw.forEach(t),FJe=i(L),tm=n(L,"LI",{});var eA=s(tm);ene=n(eA,"STRONG",{});var v6e=s(ene);TJe=r(v6e,"ctrl"),v6e.forEach(t),MJe=r(eA," \u2014 "),sR=n(eA,"A",{href:!0});var F6e=s(sR);EJe=r(F6e,"CTRLConfig"),F6e.forEach(t),CJe=r(eA," (CTRL model)"),eA.forEach(t),wJe=i(L),am=n(L,"LI",{});var oA=s(am);one=n(oA,"STRONG",{});var T6e=s(one);AJe=r(T6e,"cvt"),T6e.forEach(t),LJe=r(oA," \u2014 "),lR=n(oA,"A",{href:!0});var M6e=s(lR);yJe=r(M6e,"CvtConfig"),M6e.forEach(t),xJe=r(oA," (CvT model)"),oA.forEach(t),$Je=i(L),nm=n(L,"LI",{});var rA=s(nm);rne=n(rA,"STRONG",{});var E6e=s(rne);kJe=r(E6e,"data2vec-audio"),E6e.forEach(t),SJe=r(rA," \u2014 "),iR=n(rA,"A",{href:!0});var C6e=s(iR);RJe=r(C6e,"Data2VecAudioConfig"),C6e.forEach(t),PJe=r(rA," (Data2VecAudio model)"),rA.forEach(t),BJe=i(L),sm=n(L,"LI",{});var tA=s(sm);tne=n(tA,"STRONG",{});var w6e=s(tne);IJe=r(w6e,"data2vec-text"),w6e.forEach(t),NJe=r(tA," \u2014 "),dR=n(tA,"A",{href:!0});var A6e=s(dR);qJe=r(A6e,"Data2VecTextConfig"),A6e.forEach(t),jJe=r(tA," (Data2VecText model)"),tA.forEach(t),DJe=i(L),lm=n(L,"LI",{});var aA=s(lm);ane=n(aA,"STRONG",{});var L6e=s(ane);GJe=r(L6e,"data2vec-vision"),L6e.forEach(t),OJe=r(aA," \u2014 "),cR=n(aA,"A",{href:!0});var y6e=s(cR);VJe=r(y6e,"Data2VecVisionConfig"),y6e.forEach(t),XJe=r(aA," (Data2VecVision model)"),aA.forEach(t),zJe=i(L),im=n(L,"LI",{});var nA=s(im);nne=n(nA,"STRONG",{});var x6e=s(nne);QJe=r(x6e,"deberta"),x6e.forEach(t),WJe=r(nA," \u2014 "),fR=n(nA,"A",{href:!0});var $6e=s(fR);HJe=r($6e,"DebertaConfig"),$6e.forEach(t),UJe=r(nA," (DeBERTa model)"),nA.forEach(t),JJe=i(L),dm=n(L,"LI",{});var sA=s(dm);sne=n(sA,"STRONG",{});var k6e=s(sne);YJe=r(k6e,"deberta-v2"),k6e.forEach(t),KJe=r(sA," \u2014 "),mR=n(sA,"A",{href:!0});var S6e=s(mR);ZJe=r(S6e,"DebertaV2Config"),S6e.forEach(t),eYe=r(sA," (DeBERTa-v2 model)"),sA.forEach(t),oYe=i(L),cm=n(L,"LI",{});var lA=s(cm);lne=n(lA,"STRONG",{});var Ttt=s(lne);rYe=r(Ttt,"decision_transformer"),Ttt.forEach(t),tYe=r(lA," \u2014 "),gR=n(lA,"A",{href:!0});var Mtt=s(gR);aYe=r(Mtt,"DecisionTransformerConfig"),Mtt.forEach(t),nYe=r(lA," (Decision Transformer model)"),lA.forEach(t),sYe=i(L),fm=n(L,"LI",{});var R6e=s(fm);ine=n(R6e,"STRONG",{});var Ett=s(ine);lYe=r(Ett,"deit"),Ett.forEach(t),iYe=r(R6e," \u2014 "),hR=n(R6e,"A",{href:!0});var Ctt=s(hR);dYe=r(Ctt,"DeiTConfig"),Ctt.forEach(t),cYe=r(R6e," (DeiT model)"),R6e.forEach(t),fYe=i(L),mm=n(L,"LI",{});var P6e=s(mm);dne=n(P6e,"STRONG",{});var wtt=s(dne);mYe=r(wtt,"detr"),wtt.forEach(t),gYe=r(P6e," \u2014 "),pR=n(P6e,"A",{href:!0});var Att=s(pR);hYe=r(Att,"DetrConfig"),Att.forEach(t),pYe=r(P6e," (DETR model)"),P6e.forEach(t),_Ye=i(L),gm=n(L,"LI",{});var B6e=s(gm);cne=n(B6e,"STRONG",{});var Ltt=s(cne);uYe=r(Ltt,"distilbert"),Ltt.forEach(t),bYe=r(B6e," \u2014 "),_R=n(B6e,"A",{href:!0});var ytt=s(_R);vYe=r(ytt,"DistilBertConfig"),ytt.forEach(t),FYe=r(B6e," (DistilBERT model)"),B6e.forEach(t),TYe=i(L),hm=n(L,"LI",{});var I6e=s(hm);fne=n(I6e,"STRONG",{});var xtt=s(fne);MYe=r(xtt,"dpr"),xtt.forEach(t),EYe=r(I6e," \u2014 "),uR=n(I6e,"A",{href:!0});var $tt=s(uR);CYe=r($tt,"DPRConfig"),$tt.forEach(t),wYe=r(I6e," (DPR model)"),I6e.forEach(t),AYe=i(L),pm=n(L,"LI",{});var N6e=s(pm);mne=n(N6e,"STRONG",{});var ktt=s(mne);LYe=r(ktt,"dpt"),ktt.forEach(t),yYe=r(N6e," \u2014 "),bR=n(N6e,"A",{href:!0});var Stt=s(bR);xYe=r(Stt,"DPTConfig"),Stt.forEach(t),$Ye=r(N6e," (DPT model)"),N6e.forEach(t),kYe=i(L),_m=n(L,"LI",{});var q6e=s(_m);gne=n(q6e,"STRONG",{});var Rtt=s(gne);SYe=r(Rtt,"electra"),Rtt.forEach(t),RYe=r(q6e," \u2014 "),vR=n(q6e,"A",{href:!0});var Ptt=s(vR);PYe=r(Ptt,"ElectraConfig"),Ptt.forEach(t),BYe=r(q6e," (ELECTRA model)"),q6e.forEach(t),IYe=i(L),um=n(L,"LI",{});var j6e=s(um);hne=n(j6e,"STRONG",{});var Btt=s(hne);NYe=r(Btt,"encoder-decoder"),Btt.forEach(t),qYe=r(j6e," \u2014 "),FR=n(j6e,"A",{href:!0});var Itt=s(FR);jYe=r(Itt,"EncoderDecoderConfig"),Itt.forEach(t),DYe=r(j6e," (Encoder decoder model)"),j6e.forEach(t),GYe=i(L),bm=n(L,"LI",{});var D6e=s(bm);pne=n(D6e,"STRONG",{});var Ntt=s(pne);OYe=r(Ntt,"flaubert"),Ntt.forEach(t),VYe=r(D6e," \u2014 "),TR=n(D6e,"A",{href:!0});var qtt=s(TR);XYe=r(qtt,"FlaubertConfig"),qtt.forEach(t),zYe=r(D6e," (FlauBERT model)"),D6e.forEach(t),QYe=i(L),vm=n(L,"LI",{});var G6e=s(vm);_ne=n(G6e,"STRONG",{});var jtt=s(_ne);WYe=r(jtt,"flava"),jtt.forEach(t),HYe=r(G6e," \u2014 "),MR=n(G6e,"A",{href:!0});var Dtt=s(MR);UYe=r(Dtt,"FlavaConfig"),Dtt.forEach(t),JYe=r(G6e," (FLAVA model)"),G6e.forEach(t),YYe=i(L),Fm=n(L,"LI",{});var O6e=s(Fm);une=n(O6e,"STRONG",{});var Gtt=s(une);KYe=r(Gtt,"fnet"),Gtt.forEach(t),ZYe=r(O6e," \u2014 "),ER=n(O6e,"A",{href:!0});var Ott=s(ER);eKe=r(Ott,"FNetConfig"),Ott.forEach(t),oKe=r(O6e," (FNet model)"),O6e.forEach(t),rKe=i(L),Tm=n(L,"LI",{});var V6e=s(Tm);bne=n(V6e,"STRONG",{});var Vtt=s(bne);tKe=r(Vtt,"fsmt"),Vtt.forEach(t),aKe=r(V6e," \u2014 "),CR=n(V6e,"A",{href:!0});var Xtt=s(CR);nKe=r(Xtt,"FSMTConfig"),Xtt.forEach(t),sKe=r(V6e," (FairSeq Machine-Translation model)"),V6e.forEach(t),lKe=i(L),Mm=n(L,"LI",{});var X6e=s(Mm);vne=n(X6e,"STRONG",{});var ztt=s(vne);iKe=r(ztt,"funnel"),ztt.forEach(t),dKe=r(X6e," \u2014 "),wR=n(X6e,"A",{href:!0});var Qtt=s(wR);cKe=r(Qtt,"FunnelConfig"),Qtt.forEach(t),fKe=r(X6e," (Funnel Transformer model)"),X6e.forEach(t),mKe=i(L),Em=n(L,"LI",{});var z6e=s(Em);Fne=n(z6e,"STRONG",{});var Wtt=s(Fne);gKe=r(Wtt,"glpn"),Wtt.forEach(t),hKe=r(z6e," \u2014 "),AR=n(z6e,"A",{href:!0});var Htt=s(AR);pKe=r(Htt,"GLPNConfig"),Htt.forEach(t),_Ke=r(z6e," (GLPN model)"),z6e.forEach(t),uKe=i(L),Cm=n(L,"LI",{});var Q6e=s(Cm);Tne=n(Q6e,"STRONG",{});var Utt=s(Tne);bKe=r(Utt,"gpt2"),Utt.forEach(t),vKe=r(Q6e," \u2014 "),LR=n(Q6e,"A",{href:!0});var Jtt=s(LR);FKe=r(Jtt,"GPT2Config"),Jtt.forEach(t),TKe=r(Q6e," (OpenAI GPT-2 model)"),Q6e.forEach(t),MKe=i(L),wm=n(L,"LI",{});var W6e=s(wm);Mne=n(W6e,"STRONG",{});var Ytt=s(Mne);EKe=r(Ytt,"gpt_neo"),Ytt.forEach(t),CKe=r(W6e," \u2014 "),yR=n(W6e,"A",{href:!0});var Ktt=s(yR);wKe=r(Ktt,"GPTNeoConfig"),Ktt.forEach(t),AKe=r(W6e," (GPT Neo model)"),W6e.forEach(t),LKe=i(L),Am=n(L,"LI",{});var H6e=s(Am);Ene=n(H6e,"STRONG",{});var Ztt=s(Ene);yKe=r(Ztt,"gpt_neox"),Ztt.forEach(t),xKe=r(H6e," \u2014 "),xR=n(H6e,"A",{href:!0});var eat=s(xR);$Ke=r(eat,"GPTNeoXConfig"),eat.forEach(t),kKe=r(H6e," (GPT NeoX model)"),H6e.forEach(t),SKe=i(L),Lm=n(L,"LI",{});var U6e=s(Lm);Cne=n(U6e,"STRONG",{});var oat=s(Cne);RKe=r(oat,"gptj"),oat.forEach(t),PKe=r(U6e," \u2014 "),$R=n(U6e,"A",{href:!0});var rat=s($R);BKe=r(rat,"GPTJConfig"),rat.forEach(t),IKe=r(U6e," (GPT-J model)"),U6e.forEach(t),NKe=i(L),ym=n(L,"LI",{});var J6e=s(ym);wne=n(J6e,"STRONG",{});var tat=s(wne);qKe=r(tat,"groupvit"),tat.forEach(t),jKe=r(J6e," \u2014 "),kR=n(J6e,"A",{href:!0});var aat=s(kR);DKe=r(aat,"GroupViTConfig"),aat.forEach(t),GKe=r(J6e," (GroupViT model)"),J6e.forEach(t),OKe=i(L),xm=n(L,"LI",{});var Y6e=s(xm);Ane=n(Y6e,"STRONG",{});var nat=s(Ane);VKe=r(nat,"hubert"),nat.forEach(t),XKe=r(Y6e," \u2014 "),SR=n(Y6e,"A",{href:!0});var sat=s(SR);zKe=r(sat,"HubertConfig"),sat.forEach(t),QKe=r(Y6e," (Hubert model)"),Y6e.forEach(t),WKe=i(L),$m=n(L,"LI",{});var K6e=s($m);Lne=n(K6e,"STRONG",{});var lat=s(Lne);HKe=r(lat,"ibert"),lat.forEach(t),UKe=r(K6e," \u2014 "),RR=n(K6e,"A",{href:!0});var iat=s(RR);JKe=r(iat,"IBertConfig"),iat.forEach(t),YKe=r(K6e," (I-BERT model)"),K6e.forEach(t),KKe=i(L),km=n(L,"LI",{});var Z6e=s(km);yne=n(Z6e,"STRONG",{});var dat=s(yne);ZKe=r(dat,"imagegpt"),dat.forEach(t),eZe=r(Z6e," \u2014 "),PR=n(Z6e,"A",{href:!0});var cat=s(PR);oZe=r(cat,"ImageGPTConfig"),cat.forEach(t),rZe=r(Z6e," (ImageGPT model)"),Z6e.forEach(t),tZe=i(L),Sm=n(L,"LI",{});var eLe=s(Sm);xne=n(eLe,"STRONG",{});var fat=s(xne);aZe=r(fat,"layoutlm"),fat.forEach(t),nZe=r(eLe," \u2014 "),BR=n(eLe,"A",{href:!0});var mat=s(BR);sZe=r(mat,"LayoutLMConfig"),mat.forEach(t),lZe=r(eLe," (LayoutLM model)"),eLe.forEach(t),iZe=i(L),Rm=n(L,"LI",{});var oLe=s(Rm);$ne=n(oLe,"STRONG",{});var gat=s($ne);dZe=r(gat,"layoutlmv2"),gat.forEach(t),cZe=r(oLe," \u2014 "),IR=n(oLe,"A",{href:!0});var hat=s(IR);fZe=r(hat,"LayoutLMv2Config"),hat.forEach(t),mZe=r(oLe," (LayoutLMv2 model)"),oLe.forEach(t),gZe=i(L),Pm=n(L,"LI",{});var rLe=s(Pm);kne=n(rLe,"STRONG",{});var pat=s(kne);hZe=r(pat,"layoutlmv3"),pat.forEach(t),pZe=r(rLe," \u2014 "),NR=n(rLe,"A",{href:!0});var _at=s(NR);_Ze=r(_at,"LayoutLMv3Config"),_at.forEach(t),uZe=r(rLe," (LayoutLMv3 model)"),rLe.forEach(t),bZe=i(L),Bm=n(L,"LI",{});var tLe=s(Bm);Sne=n(tLe,"STRONG",{});var uat=s(Sne);vZe=r(uat,"led"),uat.forEach(t),FZe=r(tLe," \u2014 "),qR=n(tLe,"A",{href:!0});var bat=s(qR);TZe=r(bat,"LEDConfig"),bat.forEach(t),MZe=r(tLe," (LED model)"),tLe.forEach(t),EZe=i(L),Im=n(L,"LI",{});var aLe=s(Im);Rne=n(aLe,"STRONG",{});var vat=s(Rne);CZe=r(vat,"levit"),vat.forEach(t),wZe=r(aLe," \u2014 "),jR=n(aLe,"A",{href:!0});var Fat=s(jR);AZe=r(Fat,"LevitConfig"),Fat.forEach(t),LZe=r(aLe," (LeViT model)"),aLe.forEach(t),yZe=i(L),Nm=n(L,"LI",{});var nLe=s(Nm);Pne=n(nLe,"STRONG",{});var Tat=s(Pne);xZe=r(Tat,"longformer"),Tat.forEach(t),$Ze=r(nLe," \u2014 "),DR=n(nLe,"A",{href:!0});var Mat=s(DR);kZe=r(Mat,"LongformerConfig"),Mat.forEach(t),SZe=r(nLe," (Longformer model)"),nLe.forEach(t),RZe=i(L),qm=n(L,"LI",{});var sLe=s(qm);Bne=n(sLe,"STRONG",{});var Eat=s(Bne);PZe=r(Eat,"longt5"),Eat.forEach(t),BZe=r(sLe," \u2014 "),GR=n(sLe,"A",{href:!0});var Cat=s(GR);IZe=r(Cat,"LongT5Config"),Cat.forEach(t),NZe=r(sLe," (LongT5 model)"),sLe.forEach(t),qZe=i(L),jm=n(L,"LI",{});var lLe=s(jm);Ine=n(lLe,"STRONG",{});var wat=s(Ine);jZe=r(wat,"luke"),wat.forEach(t),DZe=r(lLe," \u2014 "),OR=n(lLe,"A",{href:!0});var Aat=s(OR);GZe=r(Aat,"LukeConfig"),Aat.forEach(t),OZe=r(lLe," (LUKE model)"),lLe.forEach(t),VZe=i(L),Dm=n(L,"LI",{});var iLe=s(Dm);Nne=n(iLe,"STRONG",{});var Lat=s(Nne);XZe=r(Lat,"lxmert"),Lat.forEach(t),zZe=r(iLe," \u2014 "),VR=n(iLe,"A",{href:!0});var yat=s(VR);QZe=r(yat,"LxmertConfig"),yat.forEach(t),WZe=r(iLe," (LXMERT model)"),iLe.forEach(t),HZe=i(L),Gm=n(L,"LI",{});var dLe=s(Gm);qne=n(dLe,"STRONG",{});var xat=s(qne);UZe=r(xat,"m2m_100"),xat.forEach(t),JZe=r(dLe," \u2014 "),XR=n(dLe,"A",{href:!0});var $at=s(XR);YZe=r($at,"M2M100Config"),$at.forEach(t),KZe=r(dLe," (M2M100 model)"),dLe.forEach(t),ZZe=i(L),Om=n(L,"LI",{});var cLe=s(Om);jne=n(cLe,"STRONG",{});var kat=s(jne);eeo=r(kat,"marian"),kat.forEach(t),oeo=r(cLe," \u2014 "),zR=n(cLe,"A",{href:!0});var Sat=s(zR);reo=r(Sat,"MarianConfig"),Sat.forEach(t),teo=r(cLe," (Marian model)"),cLe.forEach(t),aeo=i(L),Vm=n(L,"LI",{});var fLe=s(Vm);Dne=n(fLe,"STRONG",{});var Rat=s(Dne);neo=r(Rat,"maskformer"),Rat.forEach(t),seo=r(fLe," \u2014 "),QR=n(fLe,"A",{href:!0});var Pat=s(QR);leo=r(Pat,"MaskFormerConfig"),Pat.forEach(t),ieo=r(fLe," (MaskFormer model)"),fLe.forEach(t),deo=i(L),Xm=n(L,"LI",{});var mLe=s(Xm);Gne=n(mLe,"STRONG",{});var Bat=s(Gne);ceo=r(Bat,"mbart"),Bat.forEach(t),feo=r(mLe," \u2014 "),WR=n(mLe,"A",{href:!0});var Iat=s(WR);meo=r(Iat,"MBartConfig"),Iat.forEach(t),geo=r(mLe," (mBART model)"),mLe.forEach(t),heo=i(L),zm=n(L,"LI",{});var gLe=s(zm);One=n(gLe,"STRONG",{});var Nat=s(One);peo=r(Nat,"mctct"),Nat.forEach(t),_eo=r(gLe," \u2014 "),HR=n(gLe,"A",{href:!0});var qat=s(HR);ueo=r(qat,"MCTCTConfig"),qat.forEach(t),beo=r(gLe," (M-CTC-T model)"),gLe.forEach(t),veo=i(L),Qm=n(L,"LI",{});var hLe=s(Qm);Vne=n(hLe,"STRONG",{});var jat=s(Vne);Feo=r(jat,"megatron-bert"),jat.forEach(t),Teo=r(hLe," \u2014 "),UR=n(hLe,"A",{href:!0});var Dat=s(UR);Meo=r(Dat,"MegatronBertConfig"),Dat.forEach(t),Eeo=r(hLe," (Megatron-BERT model)"),hLe.forEach(t),Ceo=i(L),Wm=n(L,"LI",{});var pLe=s(Wm);Xne=n(pLe,"STRONG",{});var Gat=s(Xne);weo=r(Gat,"mobilebert"),Gat.forEach(t),Aeo=r(pLe," \u2014 "),JR=n(pLe,"A",{href:!0});var Oat=s(JR);Leo=r(Oat,"MobileBertConfig"),Oat.forEach(t),yeo=r(pLe," (MobileBERT model)"),pLe.forEach(t),xeo=i(L),Hm=n(L,"LI",{});var _Le=s(Hm);zne=n(_Le,"STRONG",{});var Vat=s(zne);$eo=r(Vat,"mobilevit"),Vat.forEach(t),keo=r(_Le," \u2014 "),YR=n(_Le,"A",{href:!0});var Xat=s(YR);Seo=r(Xat,"MobileViTConfig"),Xat.forEach(t),Reo=r(_Le," (MobileViT model)"),_Le.forEach(t),Peo=i(L),Um=n(L,"LI",{});var uLe=s(Um);Qne=n(uLe,"STRONG",{});var zat=s(Qne);Beo=r(zat,"mpnet"),zat.forEach(t),Ieo=r(uLe," \u2014 "),KR=n(uLe,"A",{href:!0});var Qat=s(KR);Neo=r(Qat,"MPNetConfig"),Qat.forEach(t),qeo=r(uLe," (MPNet model)"),uLe.forEach(t),jeo=i(L),Jm=n(L,"LI",{});var bLe=s(Jm);Wne=n(bLe,"STRONG",{});var Wat=s(Wne);Deo=r(Wat,"mt5"),Wat.forEach(t),Geo=r(bLe," \u2014 "),ZR=n(bLe,"A",{href:!0});var Hat=s(ZR);Oeo=r(Hat,"MT5Config"),Hat.forEach(t),Veo=r(bLe," (MT5 model)"),bLe.forEach(t),Xeo=i(L),Ym=n(L,"LI",{});var vLe=s(Ym);Hne=n(vLe,"STRONG",{});var Uat=s(Hne);zeo=r(Uat,"mvp"),Uat.forEach(t),Qeo=r(vLe," \u2014 "),eP=n(vLe,"A",{href:!0});var Jat=s(eP);Weo=r(Jat,"MvpConfig"),Jat.forEach(t),Heo=r(vLe," (MVP model)"),vLe.forEach(t),Ueo=i(L),Km=n(L,"LI",{});var FLe=s(Km);Une=n(FLe,"STRONG",{});var Yat=s(Une);Jeo=r(Yat,"nezha"),Yat.forEach(t),Yeo=r(FLe," \u2014 "),oP=n(FLe,"A",{href:!0});var Kat=s(oP);Keo=r(Kat,"NezhaConfig"),Kat.forEach(t),Zeo=r(FLe," (Nezha model)"),FLe.forEach(t),eoo=i(L),Zm=n(L,"LI",{});var TLe=s(Zm);Jne=n(TLe,"STRONG",{});var Zat=s(Jne);ooo=r(Zat,"nystromformer"),Zat.forEach(t),roo=r(TLe," \u2014 "),rP=n(TLe,"A",{href:!0});var ent=s(rP);too=r(ent,"NystromformerConfig"),ent.forEach(t),aoo=r(TLe," (Nystr\xF6mformer model)"),TLe.forEach(t),noo=i(L),eg=n(L,"LI",{});var MLe=s(eg);Yne=n(MLe,"STRONG",{});var ont=s(Yne);soo=r(ont,"openai-gpt"),ont.forEach(t),loo=r(MLe," \u2014 "),tP=n(MLe,"A",{href:!0});var rnt=s(tP);ioo=r(rnt,"OpenAIGPTConfig"),rnt.forEach(t),doo=r(MLe," (OpenAI GPT model)"),MLe.forEach(t),coo=i(L),og=n(L,"LI",{});var ELe=s(og);Kne=n(ELe,"STRONG",{});var tnt=s(Kne);foo=r(tnt,"opt"),tnt.forEach(t),moo=r(ELe," \u2014 "),aP=n(ELe,"A",{href:!0});var ant=s(aP);goo=r(ant,"OPTConfig"),ant.forEach(t),hoo=r(ELe," (OPT model)"),ELe.forEach(t),poo=i(L),rg=n(L,"LI",{});var CLe=s(rg);Zne=n(CLe,"STRONG",{});var nnt=s(Zne);_oo=r(nnt,"pegasus"),nnt.forEach(t),uoo=r(CLe," \u2014 "),nP=n(CLe,"A",{href:!0});var snt=s(nP);boo=r(snt,"PegasusConfig"),snt.forEach(t),voo=r(CLe," (Pegasus model)"),CLe.forEach(t),Foo=i(L),tg=n(L,"LI",{});var wLe=s(tg);ese=n(wLe,"STRONG",{});var lnt=s(ese);Too=r(lnt,"perceiver"),lnt.forEach(t),Moo=r(wLe," \u2014 "),sP=n(wLe,"A",{href:!0});var int=s(sP);Eoo=r(int,"PerceiverConfig"),int.forEach(t),Coo=r(wLe," (Perceiver model)"),wLe.forEach(t),woo=i(L),ag=n(L,"LI",{});var ALe=s(ag);ose=n(ALe,"STRONG",{});var dnt=s(ose);Aoo=r(dnt,"plbart"),dnt.forEach(t),Loo=r(ALe," \u2014 "),lP=n(ALe,"A",{href:!0});var cnt=s(lP);yoo=r(cnt,"PLBartConfig"),cnt.forEach(t),xoo=r(ALe," (PLBart model)"),ALe.forEach(t),$oo=i(L),ng=n(L,"LI",{});var LLe=s(ng);rse=n(LLe,"STRONG",{});var fnt=s(rse);koo=r(fnt,"poolformer"),fnt.forEach(t),Soo=r(LLe," \u2014 "),iP=n(LLe,"A",{href:!0});var mnt=s(iP);Roo=r(mnt,"PoolFormerConfig"),mnt.forEach(t),Poo=r(LLe," (PoolFormer model)"),LLe.forEach(t),Boo=i(L),sg=n(L,"LI",{});var yLe=s(sg);tse=n(yLe,"STRONG",{});var gnt=s(tse);Ioo=r(gnt,"prophetnet"),gnt.forEach(t),Noo=r(yLe," \u2014 "),dP=n(yLe,"A",{href:!0});var hnt=s(dP);qoo=r(hnt,"ProphetNetConfig"),hnt.forEach(t),joo=r(yLe," (ProphetNet model)"),yLe.forEach(t),Doo=i(L),lg=n(L,"LI",{});var xLe=s(lg);ase=n(xLe,"STRONG",{});var pnt=s(ase);Goo=r(pnt,"qdqbert"),pnt.forEach(t),Ooo=r(xLe," \u2014 "),cP=n(xLe,"A",{href:!0});var _nt=s(cP);Voo=r(_nt,"QDQBertConfig"),_nt.forEach(t),Xoo=r(xLe," (QDQBert model)"),xLe.forEach(t),zoo=i(L),ig=n(L,"LI",{});var $Le=s(ig);nse=n($Le,"STRONG",{});var unt=s(nse);Qoo=r(unt,"rag"),unt.forEach(t),Woo=r($Le," \u2014 "),fP=n($Le,"A",{href:!0});var bnt=s(fP);Hoo=r(bnt,"RagConfig"),bnt.forEach(t),Uoo=r($Le," (RAG model)"),$Le.forEach(t),Joo=i(L),dg=n(L,"LI",{});var kLe=s(dg);sse=n(kLe,"STRONG",{});var vnt=s(sse);Yoo=r(vnt,"realm"),vnt.forEach(t),Koo=r(kLe," \u2014 "),mP=n(kLe,"A",{href:!0});var Fnt=s(mP);Zoo=r(Fnt,"RealmConfig"),Fnt.forEach(t),ero=r(kLe," (REALM model)"),kLe.forEach(t),oro=i(L),cg=n(L,"LI",{});var SLe=s(cg);lse=n(SLe,"STRONG",{});var Tnt=s(lse);rro=r(Tnt,"reformer"),Tnt.forEach(t),tro=r(SLe," \u2014 "),gP=n(SLe,"A",{href:!0});var Mnt=s(gP);aro=r(Mnt,"ReformerConfig"),Mnt.forEach(t),nro=r(SLe," (Reformer model)"),SLe.forEach(t),sro=i(L),fg=n(L,"LI",{});var RLe=s(fg);ise=n(RLe,"STRONG",{});var Ent=s(ise);lro=r(Ent,"regnet"),Ent.forEach(t),iro=r(RLe," \u2014 "),hP=n(RLe,"A",{href:!0});var Cnt=s(hP);dro=r(Cnt,"RegNetConfig"),Cnt.forEach(t),cro=r(RLe," (RegNet model)"),RLe.forEach(t),fro=i(L),mg=n(L,"LI",{});var PLe=s(mg);dse=n(PLe,"STRONG",{});var wnt=s(dse);mro=r(wnt,"rembert"),wnt.forEach(t),gro=r(PLe," \u2014 "),pP=n(PLe,"A",{href:!0});var Ant=s(pP);hro=r(Ant,"RemBertConfig"),Ant.forEach(t),pro=r(PLe," (RemBERT model)"),PLe.forEach(t),_ro=i(L),gg=n(L,"LI",{});var BLe=s(gg);cse=n(BLe,"STRONG",{});var Lnt=s(cse);uro=r(Lnt,"resnet"),Lnt.forEach(t),bro=r(BLe," \u2014 "),_P=n(BLe,"A",{href:!0});var ynt=s(_P);vro=r(ynt,"ResNetConfig"),ynt.forEach(t),Fro=r(BLe," (ResNet model)"),BLe.forEach(t),Tro=i(L),hg=n(L,"LI",{});var ILe=s(hg);fse=n(ILe,"STRONG",{});var xnt=s(fse);Mro=r(xnt,"retribert"),xnt.forEach(t),Ero=r(ILe," \u2014 "),uP=n(ILe,"A",{href:!0});var $nt=s(uP);Cro=r($nt,"RetriBertConfig"),$nt.forEach(t),wro=r(ILe," (RetriBERT model)"),ILe.forEach(t),Aro=i(L),pg=n(L,"LI",{});var NLe=s(pg);mse=n(NLe,"STRONG",{});var knt=s(mse);Lro=r(knt,"roberta"),knt.forEach(t),yro=r(NLe," \u2014 "),bP=n(NLe,"A",{href:!0});var Snt=s(bP);xro=r(Snt,"RobertaConfig"),Snt.forEach(t),$ro=r(NLe," (RoBERTa model)"),NLe.forEach(t),kro=i(L),_g=n(L,"LI",{});var qLe=s(_g);gse=n(qLe,"STRONG",{});var Rnt=s(gse);Sro=r(Rnt,"roformer"),Rnt.forEach(t),Rro=r(qLe," \u2014 "),vP=n(qLe,"A",{href:!0});var Pnt=s(vP);Pro=r(Pnt,"RoFormerConfig"),Pnt.forEach(t),Bro=r(qLe," (RoFormer model)"),qLe.forEach(t),Iro=i(L),ug=n(L,"LI",{});var jLe=s(ug);hse=n(jLe,"STRONG",{});var Bnt=s(hse);Nro=r(Bnt,"segformer"),Bnt.forEach(t),qro=r(jLe," \u2014 "),FP=n(jLe,"A",{href:!0});var Int=s(FP);jro=r(Int,"SegformerConfig"),Int.forEach(t),Dro=r(jLe," (SegFormer model)"),jLe.forEach(t),Gro=i(L),bg=n(L,"LI",{});var DLe=s(bg);pse=n(DLe,"STRONG",{});var Nnt=s(pse);Oro=r(Nnt,"sew"),Nnt.forEach(t),Vro=r(DLe," \u2014 "),TP=n(DLe,"A",{href:!0});var qnt=s(TP);Xro=r(qnt,"SEWConfig"),qnt.forEach(t),zro=r(DLe," (SEW model)"),DLe.forEach(t),Qro=i(L),vg=n(L,"LI",{});var GLe=s(vg);_se=n(GLe,"STRONG",{});var jnt=s(_se);Wro=r(jnt,"sew-d"),jnt.forEach(t),Hro=r(GLe," \u2014 "),MP=n(GLe,"A",{href:!0});var Dnt=s(MP);Uro=r(Dnt,"SEWDConfig"),Dnt.forEach(t),Jro=r(GLe," (SEW-D model)"),GLe.forEach(t),Yro=i(L),Fg=n(L,"LI",{});var OLe=s(Fg);use=n(OLe,"STRONG",{});var Gnt=s(use);Kro=r(Gnt,"speech-encoder-decoder"),Gnt.forEach(t),Zro=r(OLe," \u2014 "),EP=n(OLe,"A",{href:!0});var Ont=s(EP);eto=r(Ont,"SpeechEncoderDecoderConfig"),Ont.forEach(t),oto=r(OLe," (Speech Encoder decoder model)"),OLe.forEach(t),rto=i(L),Tg=n(L,"LI",{});var VLe=s(Tg);bse=n(VLe,"STRONG",{});var Vnt=s(bse);tto=r(Vnt,"speech_to_text"),Vnt.forEach(t),ato=r(VLe," \u2014 "),CP=n(VLe,"A",{href:!0});var Xnt=s(CP);nto=r(Xnt,"Speech2TextConfig"),Xnt.forEach(t),sto=r(VLe," (Speech2Text model)"),VLe.forEach(t),lto=i(L),Mg=n(L,"LI",{});var XLe=s(Mg);vse=n(XLe,"STRONG",{});var znt=s(vse);ito=r(znt,"speech_to_text_2"),znt.forEach(t),dto=r(XLe," \u2014 "),wP=n(XLe,"A",{href:!0});var Qnt=s(wP);cto=r(Qnt,"Speech2Text2Config"),Qnt.forEach(t),fto=r(XLe," (Speech2Text2 model)"),XLe.forEach(t),mto=i(L),Eg=n(L,"LI",{});var zLe=s(Eg);Fse=n(zLe,"STRONG",{});var Wnt=s(Fse);gto=r(Wnt,"splinter"),Wnt.forEach(t),hto=r(zLe," \u2014 "),AP=n(zLe,"A",{href:!0});var Hnt=s(AP);pto=r(Hnt,"SplinterConfig"),Hnt.forEach(t),_to=r(zLe," (Splinter model)"),zLe.forEach(t),uto=i(L),Cg=n(L,"LI",{});var QLe=s(Cg);Tse=n(QLe,"STRONG",{});var Unt=s(Tse);bto=r(Unt,"squeezebert"),Unt.forEach(t),vto=r(QLe," \u2014 "),LP=n(QLe,"A",{href:!0});var Jnt=s(LP);Fto=r(Jnt,"SqueezeBertConfig"),Jnt.forEach(t),Tto=r(QLe," (SqueezeBERT model)"),QLe.forEach(t),Mto=i(L),wg=n(L,"LI",{});var WLe=s(wg);Mse=n(WLe,"STRONG",{});var Ynt=s(Mse);Eto=r(Ynt,"swin"),Ynt.forEach(t),Cto=r(WLe," \u2014 "),yP=n(WLe,"A",{href:!0});var Knt=s(yP);wto=r(Knt,"SwinConfig"),Knt.forEach(t),Ato=r(WLe," (Swin Transformer model)"),WLe.forEach(t),Lto=i(L),Ag=n(L,"LI",{});var HLe=s(Ag);Ese=n(HLe,"STRONG",{});var Znt=s(Ese);yto=r(Znt,"t5"),Znt.forEach(t),xto=r(HLe," \u2014 "),xP=n(HLe,"A",{href:!0});var est=s(xP);$to=r(est,"T5Config"),est.forEach(t),kto=r(HLe," (T5 model)"),HLe.forEach(t),Sto=i(L),Lg=n(L,"LI",{});var ULe=s(Lg);Cse=n(ULe,"STRONG",{});var ost=s(Cse);Rto=r(ost,"tapas"),ost.forEach(t),Pto=r(ULe," \u2014 "),$P=n(ULe,"A",{href:!0});var rst=s($P);Bto=r(rst,"TapasConfig"),rst.forEach(t),Ito=r(ULe," (TAPAS model)"),ULe.forEach(t),Nto=i(L),yg=n(L,"LI",{});var JLe=s(yg);wse=n(JLe,"STRONG",{});var tst=s(wse);qto=r(tst,"trajectory_transformer"),tst.forEach(t),jto=r(JLe," \u2014 "),kP=n(JLe,"A",{href:!0});var ast=s(kP);Dto=r(ast,"TrajectoryTransformerConfig"),ast.forEach(t),Gto=r(JLe," (Trajectory Transformer model)"),JLe.forEach(t),Oto=i(L),xg=n(L,"LI",{});var YLe=s(xg);Ase=n(YLe,"STRONG",{});var nst=s(Ase);Vto=r(nst,"transfo-xl"),nst.forEach(t),Xto=r(YLe," \u2014 "),SP=n(YLe,"A",{href:!0});var sst=s(SP);zto=r(sst,"TransfoXLConfig"),sst.forEach(t),Qto=r(YLe," (Transformer-XL model)"),YLe.forEach(t),Wto=i(L),$g=n(L,"LI",{});var KLe=s($g);Lse=n(KLe,"STRONG",{});var lst=s(Lse);Hto=r(lst,"trocr"),lst.forEach(t),Uto=r(KLe," \u2014 "),RP=n(KLe,"A",{href:!0});var ist=s(RP);Jto=r(ist,"TrOCRConfig"),ist.forEach(t),Yto=r(KLe," (TrOCR model)"),KLe.forEach(t),Kto=i(L),kg=n(L,"LI",{});var ZLe=s(kg);yse=n(ZLe,"STRONG",{});var dst=s(yse);Zto=r(dst,"unispeech"),dst.forEach(t),eao=r(ZLe," \u2014 "),PP=n(ZLe,"A",{href:!0});var cst=s(PP);oao=r(cst,"UniSpeechConfig"),cst.forEach(t),rao=r(ZLe," (UniSpeech model)"),ZLe.forEach(t),tao=i(L),Sg=n(L,"LI",{});var eye=s(Sg);xse=n(eye,"STRONG",{});var fst=s(xse);aao=r(fst,"unispeech-sat"),fst.forEach(t),nao=r(eye," \u2014 "),BP=n(eye,"A",{href:!0});var mst=s(BP);sao=r(mst,"UniSpeechSatConfig"),mst.forEach(t),lao=r(eye," (UniSpeechSat model)"),eye.forEach(t),iao=i(L),Rg=n(L,"LI",{});var oye=s(Rg);$se=n(oye,"STRONG",{});var gst=s($se);dao=r(gst,"van"),gst.forEach(t),cao=r(oye," \u2014 "),IP=n(oye,"A",{href:!0});var hst=s(IP);fao=r(hst,"VanConfig"),hst.forEach(t),mao=r(oye," (VAN model)"),oye.forEach(t),gao=i(L),Pg=n(L,"LI",{});var rye=s(Pg);kse=n(rye,"STRONG",{});var pst=s(kse);hao=r(pst,"vilt"),pst.forEach(t),pao=r(rye," \u2014 "),NP=n(rye,"A",{href:!0});var _st=s(NP);_ao=r(_st,"ViltConfig"),_st.forEach(t),uao=r(rye," (ViLT model)"),rye.forEach(t),bao=i(L),Bg=n(L,"LI",{});var tye=s(Bg);Sse=n(tye,"STRONG",{});var ust=s(Sse);vao=r(ust,"vision-encoder-decoder"),ust.forEach(t),Fao=r(tye," \u2014 "),qP=n(tye,"A",{href:!0});var bst=s(qP);Tao=r(bst,"VisionEncoderDecoderConfig"),bst.forEach(t),Mao=r(tye," (Vision Encoder decoder model)"),tye.forEach(t),Eao=i(L),Ig=n(L,"LI",{});var aye=s(Ig);Rse=n(aye,"STRONG",{});var vst=s(Rse);Cao=r(vst,"vision-text-dual-encoder"),vst.forEach(t),wao=r(aye," \u2014 "),jP=n(aye,"A",{href:!0});var Fst=s(jP);Aao=r(Fst,"VisionTextDualEncoderConfig"),Fst.forEach(t),Lao=r(aye," (VisionTextDualEncoder model)"),aye.forEach(t),yao=i(L),Ng=n(L,"LI",{});var nye=s(Ng);Pse=n(nye,"STRONG",{});var Tst=s(Pse);xao=r(Tst,"visual_bert"),Tst.forEach(t),$ao=r(nye," \u2014 "),DP=n(nye,"A",{href:!0});var Mst=s(DP);kao=r(Mst,"VisualBertConfig"),Mst.forEach(t),Sao=r(nye," (VisualBERT model)"),nye.forEach(t),Rao=i(L),qg=n(L,"LI",{});var sye=s(qg);Bse=n(sye,"STRONG",{});var Est=s(Bse);Pao=r(Est,"vit"),Est.forEach(t),Bao=r(sye," \u2014 "),GP=n(sye,"A",{href:!0});var Cst=s(GP);Iao=r(Cst,"ViTConfig"),Cst.forEach(t),Nao=r(sye," (ViT model)"),sye.forEach(t),qao=i(L),jg=n(L,"LI",{});var lye=s(jg);Ise=n(lye,"STRONG",{});var wst=s(Ise);jao=r(wst,"vit_mae"),wst.forEach(t),Dao=r(lye," \u2014 "),OP=n(lye,"A",{href:!0});var Ast=s(OP);Gao=r(Ast,"ViTMAEConfig"),Ast.forEach(t),Oao=r(lye," (ViTMAE model)"),lye.forEach(t),Vao=i(L),Dg=n(L,"LI",{});var iye=s(Dg);Nse=n(iye,"STRONG",{});var Lst=s(Nse);Xao=r(Lst,"wav2vec2"),Lst.forEach(t),zao=r(iye," \u2014 "),VP=n(iye,"A",{href:!0});var yst=s(VP);Qao=r(yst,"Wav2Vec2Config"),yst.forEach(t),Wao=r(iye," (Wav2Vec2 model)"),iye.forEach(t),Hao=i(L),Gg=n(L,"LI",{});var dye=s(Gg);qse=n(dye,"STRONG",{});var xst=s(qse);Uao=r(xst,"wav2vec2-conformer"),xst.forEach(t),Jao=r(dye," \u2014 "),XP=n(dye,"A",{href:!0});var $st=s(XP);Yao=r($st,"Wav2Vec2ConformerConfig"),$st.forEach(t),Kao=r(dye," (Wav2Vec2-Conformer model)"),dye.forEach(t),Zao=i(L),Og=n(L,"LI",{});var cye=s(Og);jse=n(cye,"STRONG",{});var kst=s(jse);eno=r(kst,"wavlm"),kst.forEach(t),ono=r(cye," \u2014 "),zP=n(cye,"A",{href:!0});var Sst=s(zP);rno=r(Sst,"WavLMConfig"),Sst.forEach(t),tno=r(cye," (WavLM model)"),cye.forEach(t),ano=i(L),Vg=n(L,"LI",{});var fye=s(Vg);Dse=n(fye,"STRONG",{});var Rst=s(Dse);nno=r(Rst,"xglm"),Rst.forEach(t),sno=r(fye," \u2014 "),QP=n(fye,"A",{href:!0});var Pst=s(QP);lno=r(Pst,"XGLMConfig"),Pst.forEach(t),ino=r(fye," (XGLM model)"),fye.forEach(t),dno=i(L),Xg=n(L,"LI",{});var mye=s(Xg);Gse=n(mye,"STRONG",{});var Bst=s(Gse);cno=r(Bst,"xlm"),Bst.forEach(t),fno=r(mye," \u2014 "),WP=n(mye,"A",{href:!0});var Ist=s(WP);mno=r(Ist,"XLMConfig"),Ist.forEach(t),gno=r(mye," (XLM model)"),mye.forEach(t),hno=i(L),zg=n(L,"LI",{});var gye=s(zg);Ose=n(gye,"STRONG",{});var Nst=s(Ose);pno=r(Nst,"xlm-prophetnet"),Nst.forEach(t),_no=r(gye," \u2014 "),HP=n(gye,"A",{href:!0});var qst=s(HP);uno=r(qst,"XLMProphetNetConfig"),qst.forEach(t),bno=r(gye," (XLM-ProphetNet model)"),gye.forEach(t),vno=i(L),Qg=n(L,"LI",{});var hye=s(Qg);Vse=n(hye,"STRONG",{});var jst=s(Vse);Fno=r(jst,"xlm-roberta"),jst.forEach(t),Tno=r(hye," \u2014 "),UP=n(hye,"A",{href:!0});var Dst=s(UP);Mno=r(Dst,"XLMRobertaConfig"),Dst.forEach(t),Eno=r(hye," (XLM-RoBERTa model)"),hye.forEach(t),Cno=i(L),Wg=n(L,"LI",{});var pye=s(Wg);Xse=n(pye,"STRONG",{});var Gst=s(Xse);wno=r(Gst,"xlm-roberta-xl"),Gst.forEach(t),Ano=r(pye," \u2014 "),JP=n(pye,"A",{href:!0});var Ost=s(JP);Lno=r(Ost,"XLMRobertaXLConfig"),Ost.forEach(t),yno=r(pye," (XLM-RoBERTa-XL model)"),pye.forEach(t),xno=i(L),Hg=n(L,"LI",{});var _ye=s(Hg);zse=n(_ye,"STRONG",{});var Vst=s(zse);$no=r(Vst,"xlnet"),Vst.forEach(t),kno=r(_ye," \u2014 "),YP=n(_ye,"A",{href:!0});var Xst=s(YP);Sno=r(Xst,"XLNetConfig"),Xst.forEach(t),Rno=r(_ye," (XLNet model)"),_ye.forEach(t),Pno=i(L),Ug=n(L,"LI",{});var uye=s(Ug);Qse=n(uye,"STRONG",{});var zst=s(Qse);Bno=r(zst,"yolos"),zst.forEach(t),Ino=r(uye," \u2014 "),KP=n(uye,"A",{href:!0});var Qst=s(KP);Nno=r(Qst,"YolosConfig"),Qst.forEach(t),qno=r(uye," (YOLOS model)"),uye.forEach(t),jno=i(L),Jg=n(L,"LI",{});var bye=s(Jg);Wse=n(bye,"STRONG",{});var Wst=s(Wse);Dno=r(Wst,"yoso"),Wst.forEach(t),Gno=r(bye," \u2014 "),ZP=n(bye,"A",{href:!0});var Hst=s(ZP);Ono=r(Hst,"YosoConfig"),Hst.forEach(t),Vno=r(bye," (YOSO model)"),bye.forEach(t),L.forEach(t),Xno=i(st),T(Yg.$$.fragment,st),st.forEach(t),zno=i(nt),Kg=n(nt,"DIV",{class:!0});var fQe=s(Kg);T(gL.$$.fragment,fQe),Qno=i(fQe),Hse=n(fQe,"P",{});var Ust=s(Hse);Wno=r(Ust,"Register a new configuration for this class."),Ust.forEach(t),fQe.forEach(t),nt.forEach(t),mXe=i(f),Ni=n(f,"H2",{class:!0});var mQe=s(Ni);Zg=n(mQe,"A",{id:!0,class:!0,href:!0});var Jst=s(Zg);Use=n(Jst,"SPAN",{});var Yst=s(Use);T(hL.$$.fragment,Yst),Yst.forEach(t),Jst.forEach(t),Hno=i(mQe),Jse=n(mQe,"SPAN",{});var Kst=s(Jse);Uno=r(Kst,"AutoTokenizer"),Kst.forEach(t),mQe.forEach(t),gXe=i(f),yo=n(f,"DIV",{class:!0});var Ks=s(yo);T(pL.$$.fragment,Ks),Jno=i(Ks),_L=n(Ks,"P",{});var gQe=s(_L);Yno=r(gQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),eB=n(gQe,"A",{href:!0});var Zst=s(eB);Kno=r(Zst,"AutoTokenizer.from_pretrained()"),Zst.forEach(t),Zno=r(gQe," class method."),gQe.forEach(t),eso=i(Ks),uL=n(Ks,"P",{});var hQe=s(uL);oso=r(hQe,"This class cannot be instantiated directly using "),Yse=n(hQe,"CODE",{});var elt=s(Yse);rso=r(elt,"__init__()"),elt.forEach(t),tso=r(hQe," (throws an error)."),hQe.forEach(t),aso=i(Ks),xr=n(Ks,"DIV",{class:!0});var Zs=s(xr);T(bL.$$.fragment,Zs),nso=i(Zs),Kse=n(Zs,"P",{});var olt=s(Kse);sso=r(olt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),olt.forEach(t),lso=i(Zs),Pa=n(Zs,"P",{});var iA=s(Pa);iso=r(iA,"The tokenizer class to instantiate is selected based on the "),Zse=n(iA,"CODE",{});var rlt=s(Zse);dso=r(rlt,"model_type"),rlt.forEach(t),cso=r(iA,` property of the config object (either
passed as an argument or loaded from `),ele=n(iA,"CODE",{});var tlt=s(ele);fso=r(tlt,"pretrained_model_name_or_path"),tlt.forEach(t),mso=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ole=n(iA,"CODE",{});var alt=s(ole);gso=r(alt,"pretrained_model_name_or_path"),alt.forEach(t),hso=r(iA,":"),iA.forEach(t),pso=i(Zs),k=n(Zs,"UL",{});var S=s(k);jn=n(S,"LI",{});var Ck=s(jn);rle=n(Ck,"STRONG",{});var nlt=s(rle);_so=r(nlt,"albert"),nlt.forEach(t),uso=r(Ck," \u2014 "),oB=n(Ck,"A",{href:!0});var slt=s(oB);bso=r(slt,"AlbertTokenizer"),slt.forEach(t),vso=r(Ck," or "),rB=n(Ck,"A",{href:!0});var llt=s(rB);Fso=r(llt,"AlbertTokenizerFast"),llt.forEach(t),Tso=r(Ck," (ALBERT model)"),Ck.forEach(t),Mso=i(S),Dn=n(S,"LI",{});var wk=s(Dn);tle=n(wk,"STRONG",{});var ilt=s(tle);Eso=r(ilt,"bart"),ilt.forEach(t),Cso=r(wk," \u2014 "),tB=n(wk,"A",{href:!0});var dlt=s(tB);wso=r(dlt,"BartTokenizer"),dlt.forEach(t),Aso=r(wk," or "),aB=n(wk,"A",{href:!0});var clt=s(aB);Lso=r(clt,"BartTokenizerFast"),clt.forEach(t),yso=r(wk," (BART model)"),wk.forEach(t),xso=i(S),Gn=n(S,"LI",{});var Ak=s(Gn);ale=n(Ak,"STRONG",{});var flt=s(ale);$so=r(flt,"barthez"),flt.forEach(t),kso=r(Ak," \u2014 "),nB=n(Ak,"A",{href:!0});var mlt=s(nB);Sso=r(mlt,"BarthezTokenizer"),mlt.forEach(t),Rso=r(Ak," or "),sB=n(Ak,"A",{href:!0});var glt=s(sB);Pso=r(glt,"BarthezTokenizerFast"),glt.forEach(t),Bso=r(Ak," (BARThez model)"),Ak.forEach(t),Iso=i(S),eh=n(S,"LI",{});var vye=s(eh);nle=n(vye,"STRONG",{});var hlt=s(nle);Nso=r(hlt,"bartpho"),hlt.forEach(t),qso=r(vye," \u2014 "),lB=n(vye,"A",{href:!0});var plt=s(lB);jso=r(plt,"BartphoTokenizer"),plt.forEach(t),Dso=r(vye," (BARTpho model)"),vye.forEach(t),Gso=i(S),On=n(S,"LI",{});var Lk=s(On);sle=n(Lk,"STRONG",{});var _lt=s(sle);Oso=r(_lt,"bert"),_lt.forEach(t),Vso=r(Lk," \u2014 "),iB=n(Lk,"A",{href:!0});var ult=s(iB);Xso=r(ult,"BertTokenizer"),ult.forEach(t),zso=r(Lk," or "),dB=n(Lk,"A",{href:!0});var blt=s(dB);Qso=r(blt,"BertTokenizerFast"),blt.forEach(t),Wso=r(Lk," (BERT model)"),Lk.forEach(t),Hso=i(S),oh=n(S,"LI",{});var Fye=s(oh);lle=n(Fye,"STRONG",{});var vlt=s(lle);Uso=r(vlt,"bert-generation"),vlt.forEach(t),Jso=r(Fye," \u2014 "),cB=n(Fye,"A",{href:!0});var Flt=s(cB);Yso=r(Flt,"BertGenerationTokenizer"),Flt.forEach(t),Kso=r(Fye," (Bert Generation model)"),Fye.forEach(t),Zso=i(S),rh=n(S,"LI",{});var Tye=s(rh);ile=n(Tye,"STRONG",{});var Tlt=s(ile);elo=r(Tlt,"bert-japanese"),Tlt.forEach(t),olo=r(Tye," \u2014 "),fB=n(Tye,"A",{href:!0});var Mlt=s(fB);rlo=r(Mlt,"BertJapaneseTokenizer"),Mlt.forEach(t),tlo=r(Tye," (BertJapanese model)"),Tye.forEach(t),alo=i(S),th=n(S,"LI",{});var Mye=s(th);dle=n(Mye,"STRONG",{});var Elt=s(dle);nlo=r(Elt,"bertweet"),Elt.forEach(t),slo=r(Mye," \u2014 "),mB=n(Mye,"A",{href:!0});var Clt=s(mB);llo=r(Clt,"BertweetTokenizer"),Clt.forEach(t),ilo=r(Mye," (BERTweet model)"),Mye.forEach(t),dlo=i(S),Vn=n(S,"LI",{});var yk=s(Vn);cle=n(yk,"STRONG",{});var wlt=s(cle);clo=r(wlt,"big_bird"),wlt.forEach(t),flo=r(yk," \u2014 "),gB=n(yk,"A",{href:!0});var Alt=s(gB);mlo=r(Alt,"BigBirdTokenizer"),Alt.forEach(t),glo=r(yk," or "),hB=n(yk,"A",{href:!0});var Llt=s(hB);hlo=r(Llt,"BigBirdTokenizerFast"),Llt.forEach(t),plo=r(yk," (BigBird model)"),yk.forEach(t),_lo=i(S),Xn=n(S,"LI",{});var xk=s(Xn);fle=n(xk,"STRONG",{});var ylt=s(fle);ulo=r(ylt,"bigbird_pegasus"),ylt.forEach(t),blo=r(xk," \u2014 "),pB=n(xk,"A",{href:!0});var xlt=s(pB);vlo=r(xlt,"PegasusTokenizer"),xlt.forEach(t),Flo=r(xk," or "),_B=n(xk,"A",{href:!0});var $lt=s(_B);Tlo=r($lt,"PegasusTokenizerFast"),$lt.forEach(t),Mlo=r(xk," (BigBird-Pegasus model)"),xk.forEach(t),Elo=i(S),zn=n(S,"LI",{});var $k=s(zn);mle=n($k,"STRONG",{});var klt=s(mle);Clo=r(klt,"blenderbot"),klt.forEach(t),wlo=r($k," \u2014 "),uB=n($k,"A",{href:!0});var Slt=s(uB);Alo=r(Slt,"BlenderbotTokenizer"),Slt.forEach(t),Llo=r($k," or "),bB=n($k,"A",{href:!0});var Rlt=s(bB);ylo=r(Rlt,"BlenderbotTokenizerFast"),Rlt.forEach(t),xlo=r($k," (Blenderbot model)"),$k.forEach(t),$lo=i(S),ah=n(S,"LI",{});var Eye=s(ah);gle=n(Eye,"STRONG",{});var Plt=s(gle);klo=r(Plt,"blenderbot-small"),Plt.forEach(t),Slo=r(Eye," \u2014 "),vB=n(Eye,"A",{href:!0});var Blt=s(vB);Rlo=r(Blt,"BlenderbotSmallTokenizer"),Blt.forEach(t),Plo=r(Eye," (BlenderbotSmall model)"),Eye.forEach(t),Blo=i(S),nh=n(S,"LI",{});var Cye=s(nh);hle=n(Cye,"STRONG",{});var Ilt=s(hle);Ilo=r(Ilt,"bloom"),Ilt.forEach(t),Nlo=r(Cye," \u2014 "),FB=n(Cye,"A",{href:!0});var Nlt=s(FB);qlo=r(Nlt,"BloomTokenizerFast"),Nlt.forEach(t),jlo=r(Cye," (BLOOM model)"),Cye.forEach(t),Dlo=i(S),sh=n(S,"LI",{});var wye=s(sh);ple=n(wye,"STRONG",{});var qlt=s(ple);Glo=r(qlt,"byt5"),qlt.forEach(t),Olo=r(wye," \u2014 "),TB=n(wye,"A",{href:!0});var jlt=s(TB);Vlo=r(jlt,"ByT5Tokenizer"),jlt.forEach(t),Xlo=r(wye," (ByT5 model)"),wye.forEach(t),zlo=i(S),Qn=n(S,"LI",{});var kk=s(Qn);_le=n(kk,"STRONG",{});var Dlt=s(_le);Qlo=r(Dlt,"camembert"),Dlt.forEach(t),Wlo=r(kk," \u2014 "),MB=n(kk,"A",{href:!0});var Glt=s(MB);Hlo=r(Glt,"CamembertTokenizer"),Glt.forEach(t),Ulo=r(kk," or "),EB=n(kk,"A",{href:!0});var Olt=s(EB);Jlo=r(Olt,"CamembertTokenizerFast"),Olt.forEach(t),Ylo=r(kk," (CamemBERT model)"),kk.forEach(t),Klo=i(S),lh=n(S,"LI",{});var Aye=s(lh);ule=n(Aye,"STRONG",{});var Vlt=s(ule);Zlo=r(Vlt,"canine"),Vlt.forEach(t),eio=r(Aye," \u2014 "),CB=n(Aye,"A",{href:!0});var Xlt=s(CB);oio=r(Xlt,"CanineTokenizer"),Xlt.forEach(t),rio=r(Aye," (CANINE model)"),Aye.forEach(t),tio=i(S),Wn=n(S,"LI",{});var Sk=s(Wn);ble=n(Sk,"STRONG",{});var zlt=s(ble);aio=r(zlt,"clip"),zlt.forEach(t),nio=r(Sk," \u2014 "),wB=n(Sk,"A",{href:!0});var Qlt=s(wB);sio=r(Qlt,"CLIPTokenizer"),Qlt.forEach(t),lio=r(Sk," or "),AB=n(Sk,"A",{href:!0});var Wlt=s(AB);iio=r(Wlt,"CLIPTokenizerFast"),Wlt.forEach(t),dio=r(Sk," (CLIP model)"),Sk.forEach(t),cio=i(S),Hn=n(S,"LI",{});var Rk=s(Hn);vle=n(Rk,"STRONG",{});var Hlt=s(vle);fio=r(Hlt,"codegen"),Hlt.forEach(t),mio=r(Rk," \u2014 "),LB=n(Rk,"A",{href:!0});var Ult=s(LB);gio=r(Ult,"CodeGenTokenizer"),Ult.forEach(t),hio=r(Rk," or "),yB=n(Rk,"A",{href:!0});var Jlt=s(yB);pio=r(Jlt,"CodeGenTokenizerFast"),Jlt.forEach(t),_io=r(Rk," (CodeGen model)"),Rk.forEach(t),uio=i(S),Un=n(S,"LI",{});var Pk=s(Un);Fle=n(Pk,"STRONG",{});var Ylt=s(Fle);bio=r(Ylt,"convbert"),Ylt.forEach(t),vio=r(Pk," \u2014 "),xB=n(Pk,"A",{href:!0});var Klt=s(xB);Fio=r(Klt,"ConvBertTokenizer"),Klt.forEach(t),Tio=r(Pk," or "),$B=n(Pk,"A",{href:!0});var Zlt=s($B);Mio=r(Zlt,"ConvBertTokenizerFast"),Zlt.forEach(t),Eio=r(Pk," (ConvBERT model)"),Pk.forEach(t),Cio=i(S),Jn=n(S,"LI",{});var Bk=s(Jn);Tle=n(Bk,"STRONG",{});var eit=s(Tle);wio=r(eit,"cpm"),eit.forEach(t),Aio=r(Bk," \u2014 "),kB=n(Bk,"A",{href:!0});var oit=s(kB);Lio=r(oit,"CpmTokenizer"),oit.forEach(t),yio=r(Bk," or "),SB=n(Bk,"A",{href:!0});var rit=s(SB);xio=r(rit,"CpmTokenizerFast"),rit.forEach(t),$io=r(Bk," (CPM model)"),Bk.forEach(t),kio=i(S),ih=n(S,"LI",{});var Lye=s(ih);Mle=n(Lye,"STRONG",{});var tit=s(Mle);Sio=r(tit,"ctrl"),tit.forEach(t),Rio=r(Lye," \u2014 "),RB=n(Lye,"A",{href:!0});var ait=s(RB);Pio=r(ait,"CTRLTokenizer"),ait.forEach(t),Bio=r(Lye," (CTRL model)"),Lye.forEach(t),Iio=i(S),Yn=n(S,"LI",{});var Ik=s(Yn);Ele=n(Ik,"STRONG",{});var nit=s(Ele);Nio=r(nit,"data2vec-text"),nit.forEach(t),qio=r(Ik," \u2014 "),PB=n(Ik,"A",{href:!0});var sit=s(PB);jio=r(sit,"RobertaTokenizer"),sit.forEach(t),Dio=r(Ik," or "),BB=n(Ik,"A",{href:!0});var lit=s(BB);Gio=r(lit,"RobertaTokenizerFast"),lit.forEach(t),Oio=r(Ik," (Data2VecText model)"),Ik.forEach(t),Vio=i(S),Kn=n(S,"LI",{});var Nk=s(Kn);Cle=n(Nk,"STRONG",{});var iit=s(Cle);Xio=r(iit,"deberta"),iit.forEach(t),zio=r(Nk," \u2014 "),IB=n(Nk,"A",{href:!0});var dit=s(IB);Qio=r(dit,"DebertaTokenizer"),dit.forEach(t),Wio=r(Nk," or "),NB=n(Nk,"A",{href:!0});var cit=s(NB);Hio=r(cit,"DebertaTokenizerFast"),cit.forEach(t),Uio=r(Nk," (DeBERTa model)"),Nk.forEach(t),Jio=i(S),Zn=n(S,"LI",{});var qk=s(Zn);wle=n(qk,"STRONG",{});var fit=s(wle);Yio=r(fit,"deberta-v2"),fit.forEach(t),Kio=r(qk," \u2014 "),qB=n(qk,"A",{href:!0});var mit=s(qB);Zio=r(mit,"DebertaV2Tokenizer"),mit.forEach(t),edo=r(qk," or "),jB=n(qk,"A",{href:!0});var git=s(jB);odo=r(git,"DebertaV2TokenizerFast"),git.forEach(t),rdo=r(qk," (DeBERTa-v2 model)"),qk.forEach(t),tdo=i(S),es=n(S,"LI",{});var jk=s(es);Ale=n(jk,"STRONG",{});var hit=s(Ale);ado=r(hit,"distilbert"),hit.forEach(t),ndo=r(jk," \u2014 "),DB=n(jk,"A",{href:!0});var pit=s(DB);sdo=r(pit,"DistilBertTokenizer"),pit.forEach(t),ldo=r(jk," or "),GB=n(jk,"A",{href:!0});var _it=s(GB);ido=r(_it,"DistilBertTokenizerFast"),_it.forEach(t),ddo=r(jk," (DistilBERT model)"),jk.forEach(t),cdo=i(S),os=n(S,"LI",{});var Dk=s(os);Lle=n(Dk,"STRONG",{});var uit=s(Lle);fdo=r(uit,"dpr"),uit.forEach(t),mdo=r(Dk," \u2014 "),OB=n(Dk,"A",{href:!0});var bit=s(OB);gdo=r(bit,"DPRQuestionEncoderTokenizer"),bit.forEach(t),hdo=r(Dk," or "),VB=n(Dk,"A",{href:!0});var vit=s(VB);pdo=r(vit,"DPRQuestionEncoderTokenizerFast"),vit.forEach(t),_do=r(Dk," (DPR model)"),Dk.forEach(t),udo=i(S),rs=n(S,"LI",{});var Gk=s(rs);yle=n(Gk,"STRONG",{});var Fit=s(yle);bdo=r(Fit,"electra"),Fit.forEach(t),vdo=r(Gk," \u2014 "),XB=n(Gk,"A",{href:!0});var Tit=s(XB);Fdo=r(Tit,"ElectraTokenizer"),Tit.forEach(t),Tdo=r(Gk," or "),zB=n(Gk,"A",{href:!0});var Mit=s(zB);Mdo=r(Mit,"ElectraTokenizerFast"),Mit.forEach(t),Edo=r(Gk," (ELECTRA model)"),Gk.forEach(t),Cdo=i(S),dh=n(S,"LI",{});var yye=s(dh);xle=n(yye,"STRONG",{});var Eit=s(xle);wdo=r(Eit,"flaubert"),Eit.forEach(t),Ado=r(yye," \u2014 "),QB=n(yye,"A",{href:!0});var Cit=s(QB);Ldo=r(Cit,"FlaubertTokenizer"),Cit.forEach(t),ydo=r(yye," (FlauBERT model)"),yye.forEach(t),xdo=i(S),ts=n(S,"LI",{});var Ok=s(ts);$le=n(Ok,"STRONG",{});var wit=s($le);$do=r(wit,"fnet"),wit.forEach(t),kdo=r(Ok," \u2014 "),WB=n(Ok,"A",{href:!0});var Ait=s(WB);Sdo=r(Ait,"FNetTokenizer"),Ait.forEach(t),Rdo=r(Ok," or "),HB=n(Ok,"A",{href:!0});var Lit=s(HB);Pdo=r(Lit,"FNetTokenizerFast"),Lit.forEach(t),Bdo=r(Ok," (FNet model)"),Ok.forEach(t),Ido=i(S),ch=n(S,"LI",{});var xye=s(ch);kle=n(xye,"STRONG",{});var yit=s(kle);Ndo=r(yit,"fsmt"),yit.forEach(t),qdo=r(xye," \u2014 "),UB=n(xye,"A",{href:!0});var xit=s(UB);jdo=r(xit,"FSMTTokenizer"),xit.forEach(t),Ddo=r(xye," (FairSeq Machine-Translation model)"),xye.forEach(t),Gdo=i(S),as=n(S,"LI",{});var Vk=s(as);Sle=n(Vk,"STRONG",{});var $it=s(Sle);Odo=r($it,"funnel"),$it.forEach(t),Vdo=r(Vk," \u2014 "),JB=n(Vk,"A",{href:!0});var kit=s(JB);Xdo=r(kit,"FunnelTokenizer"),kit.forEach(t),zdo=r(Vk," or "),YB=n(Vk,"A",{href:!0});var Sit=s(YB);Qdo=r(Sit,"FunnelTokenizerFast"),Sit.forEach(t),Wdo=r(Vk," (Funnel Transformer model)"),Vk.forEach(t),Hdo=i(S),ns=n(S,"LI",{});var Xk=s(ns);Rle=n(Xk,"STRONG",{});var Rit=s(Rle);Udo=r(Rit,"gpt2"),Rit.forEach(t),Jdo=r(Xk," \u2014 "),KB=n(Xk,"A",{href:!0});var Pit=s(KB);Ydo=r(Pit,"GPT2Tokenizer"),Pit.forEach(t),Kdo=r(Xk," or "),ZB=n(Xk,"A",{href:!0});var Bit=s(ZB);Zdo=r(Bit,"GPT2TokenizerFast"),Bit.forEach(t),eco=r(Xk," (OpenAI GPT-2 model)"),Xk.forEach(t),oco=i(S),ss=n(S,"LI",{});var zk=s(ss);Ple=n(zk,"STRONG",{});var Iit=s(Ple);rco=r(Iit,"gpt_neo"),Iit.forEach(t),tco=r(zk," \u2014 "),eI=n(zk,"A",{href:!0});var Nit=s(eI);aco=r(Nit,"GPT2Tokenizer"),Nit.forEach(t),nco=r(zk," or "),oI=n(zk,"A",{href:!0});var qit=s(oI);sco=r(qit,"GPT2TokenizerFast"),qit.forEach(t),lco=r(zk," (GPT Neo model)"),zk.forEach(t),ico=i(S),fh=n(S,"LI",{});var $ye=s(fh);Ble=n($ye,"STRONG",{});var jit=s(Ble);dco=r(jit,"gpt_neox"),jit.forEach(t),cco=r($ye," \u2014 "),rI=n($ye,"A",{href:!0});var Dit=s(rI);fco=r(Dit,"GPTNeoXTokenizerFast"),Dit.forEach(t),mco=r($ye," (GPT NeoX model)"),$ye.forEach(t),gco=i(S),ls=n(S,"LI",{});var Qk=s(ls);Ile=n(Qk,"STRONG",{});var Git=s(Ile);hco=r(Git,"gptj"),Git.forEach(t),pco=r(Qk," \u2014 "),tI=n(Qk,"A",{href:!0});var Oit=s(tI);_co=r(Oit,"GPT2Tokenizer"),Oit.forEach(t),uco=r(Qk," or "),aI=n(Qk,"A",{href:!0});var Vit=s(aI);bco=r(Vit,"GPT2TokenizerFast"),Vit.forEach(t),vco=r(Qk," (GPT-J model)"),Qk.forEach(t),Fco=i(S),is=n(S,"LI",{});var Wk=s(is);Nle=n(Wk,"STRONG",{});var Xit=s(Nle);Tco=r(Xit,"groupvit"),Xit.forEach(t),Mco=r(Wk," \u2014 "),nI=n(Wk,"A",{href:!0});var zit=s(nI);Eco=r(zit,"CLIPTokenizer"),zit.forEach(t),Cco=r(Wk," or "),sI=n(Wk,"A",{href:!0});var Qit=s(sI);wco=r(Qit,"CLIPTokenizerFast"),Qit.forEach(t),Aco=r(Wk," (GroupViT model)"),Wk.forEach(t),Lco=i(S),ds=n(S,"LI",{});var Hk=s(ds);qle=n(Hk,"STRONG",{});var Wit=s(qle);yco=r(Wit,"herbert"),Wit.forEach(t),xco=r(Hk," \u2014 "),lI=n(Hk,"A",{href:!0});var Hit=s(lI);$co=r(Hit,"HerbertTokenizer"),Hit.forEach(t),kco=r(Hk," or "),iI=n(Hk,"A",{href:!0});var Uit=s(iI);Sco=r(Uit,"HerbertTokenizerFast"),Uit.forEach(t),Rco=r(Hk," (HerBERT model)"),Hk.forEach(t),Pco=i(S),mh=n(S,"LI",{});var kye=s(mh);jle=n(kye,"STRONG",{});var Jit=s(jle);Bco=r(Jit,"hubert"),Jit.forEach(t),Ico=r(kye," \u2014 "),dI=n(kye,"A",{href:!0});var Yit=s(dI);Nco=r(Yit,"Wav2Vec2CTCTokenizer"),Yit.forEach(t),qco=r(kye," (Hubert model)"),kye.forEach(t),jco=i(S),cs=n(S,"LI",{});var Uk=s(cs);Dle=n(Uk,"STRONG",{});var Kit=s(Dle);Dco=r(Kit,"ibert"),Kit.forEach(t),Gco=r(Uk," \u2014 "),cI=n(Uk,"A",{href:!0});var Zit=s(cI);Oco=r(Zit,"RobertaTokenizer"),Zit.forEach(t),Vco=r(Uk," or "),fI=n(Uk,"A",{href:!0});var edt=s(fI);Xco=r(edt,"RobertaTokenizerFast"),edt.forEach(t),zco=r(Uk," (I-BERT model)"),Uk.forEach(t),Qco=i(S),fs=n(S,"LI",{});var Jk=s(fs);Gle=n(Jk,"STRONG",{});var odt=s(Gle);Wco=r(odt,"layoutlm"),odt.forEach(t),Hco=r(Jk," \u2014 "),mI=n(Jk,"A",{href:!0});var rdt=s(mI);Uco=r(rdt,"LayoutLMTokenizer"),rdt.forEach(t),Jco=r(Jk," or "),gI=n(Jk,"A",{href:!0});var tdt=s(gI);Yco=r(tdt,"LayoutLMTokenizerFast"),tdt.forEach(t),Kco=r(Jk," (LayoutLM model)"),Jk.forEach(t),Zco=i(S),ms=n(S,"LI",{});var Yk=s(ms);Ole=n(Yk,"STRONG",{});var adt=s(Ole);efo=r(adt,"layoutlmv2"),adt.forEach(t),ofo=r(Yk," \u2014 "),hI=n(Yk,"A",{href:!0});var ndt=s(hI);rfo=r(ndt,"LayoutLMv2Tokenizer"),ndt.forEach(t),tfo=r(Yk," or "),pI=n(Yk,"A",{href:!0});var sdt=s(pI);afo=r(sdt,"LayoutLMv2TokenizerFast"),sdt.forEach(t),nfo=r(Yk," (LayoutLMv2 model)"),Yk.forEach(t),sfo=i(S),gs=n(S,"LI",{});var Kk=s(gs);Vle=n(Kk,"STRONG",{});var ldt=s(Vle);lfo=r(ldt,"layoutlmv3"),ldt.forEach(t),ifo=r(Kk," \u2014 "),_I=n(Kk,"A",{href:!0});var idt=s(_I);dfo=r(idt,"LayoutLMv3Tokenizer"),idt.forEach(t),cfo=r(Kk," or "),uI=n(Kk,"A",{href:!0});var ddt=s(uI);ffo=r(ddt,"LayoutLMv3TokenizerFast"),ddt.forEach(t),mfo=r(Kk," (LayoutLMv3 model)"),Kk.forEach(t),gfo=i(S),hs=n(S,"LI",{});var Zk=s(hs);Xle=n(Zk,"STRONG",{});var cdt=s(Xle);hfo=r(cdt,"layoutxlm"),cdt.forEach(t),pfo=r(Zk," \u2014 "),bI=n(Zk,"A",{href:!0});var fdt=s(bI);_fo=r(fdt,"LayoutXLMTokenizer"),fdt.forEach(t),ufo=r(Zk," or "),vI=n(Zk,"A",{href:!0});var mdt=s(vI);bfo=r(mdt,"LayoutXLMTokenizerFast"),mdt.forEach(t),vfo=r(Zk," (LayoutXLM model)"),Zk.forEach(t),Ffo=i(S),ps=n(S,"LI",{});var eS=s(ps);zle=n(eS,"STRONG",{});var gdt=s(zle);Tfo=r(gdt,"led"),gdt.forEach(t),Mfo=r(eS," \u2014 "),FI=n(eS,"A",{href:!0});var hdt=s(FI);Efo=r(hdt,"LEDTokenizer"),hdt.forEach(t),Cfo=r(eS," or "),TI=n(eS,"A",{href:!0});var pdt=s(TI);wfo=r(pdt,"LEDTokenizerFast"),pdt.forEach(t),Afo=r(eS," (LED model)"),eS.forEach(t),Lfo=i(S),_s=n(S,"LI",{});var oS=s(_s);Qle=n(oS,"STRONG",{});var _dt=s(Qle);yfo=r(_dt,"longformer"),_dt.forEach(t),xfo=r(oS," \u2014 "),MI=n(oS,"A",{href:!0});var udt=s(MI);$fo=r(udt,"LongformerTokenizer"),udt.forEach(t),kfo=r(oS," or "),EI=n(oS,"A",{href:!0});var bdt=s(EI);Sfo=r(bdt,"LongformerTokenizerFast"),bdt.forEach(t),Rfo=r(oS," (Longformer model)"),oS.forEach(t),Pfo=i(S),us=n(S,"LI",{});var rS=s(us);Wle=n(rS,"STRONG",{});var vdt=s(Wle);Bfo=r(vdt,"longt5"),vdt.forEach(t),Ifo=r(rS," \u2014 "),CI=n(rS,"A",{href:!0});var Fdt=s(CI);Nfo=r(Fdt,"T5Tokenizer"),Fdt.forEach(t),qfo=r(rS," or "),wI=n(rS,"A",{href:!0});var Tdt=s(wI);jfo=r(Tdt,"T5TokenizerFast"),Tdt.forEach(t),Dfo=r(rS," (LongT5 model)"),rS.forEach(t),Gfo=i(S),gh=n(S,"LI",{});var Sye=s(gh);Hle=n(Sye,"STRONG",{});var Mdt=s(Hle);Ofo=r(Mdt,"luke"),Mdt.forEach(t),Vfo=r(Sye," \u2014 "),AI=n(Sye,"A",{href:!0});var Edt=s(AI);Xfo=r(Edt,"LukeTokenizer"),Edt.forEach(t),zfo=r(Sye," (LUKE model)"),Sye.forEach(t),Qfo=i(S),bs=n(S,"LI",{});var tS=s(bs);Ule=n(tS,"STRONG",{});var Cdt=s(Ule);Wfo=r(Cdt,"lxmert"),Cdt.forEach(t),Hfo=r(tS," \u2014 "),LI=n(tS,"A",{href:!0});var wdt=s(LI);Ufo=r(wdt,"LxmertTokenizer"),wdt.forEach(t),Jfo=r(tS," or "),yI=n(tS,"A",{href:!0});var Adt=s(yI);Yfo=r(Adt,"LxmertTokenizerFast"),Adt.forEach(t),Kfo=r(tS," (LXMERT model)"),tS.forEach(t),Zfo=i(S),hh=n(S,"LI",{});var Rye=s(hh);Jle=n(Rye,"STRONG",{});var Ldt=s(Jle);emo=r(Ldt,"m2m_100"),Ldt.forEach(t),omo=r(Rye," \u2014 "),xI=n(Rye,"A",{href:!0});var ydt=s(xI);rmo=r(ydt,"M2M100Tokenizer"),ydt.forEach(t),tmo=r(Rye," (M2M100 model)"),Rye.forEach(t),amo=i(S),ph=n(S,"LI",{});var Pye=s(ph);Yle=n(Pye,"STRONG",{});var xdt=s(Yle);nmo=r(xdt,"marian"),xdt.forEach(t),smo=r(Pye," \u2014 "),$I=n(Pye,"A",{href:!0});var $dt=s($I);lmo=r($dt,"MarianTokenizer"),$dt.forEach(t),imo=r(Pye," (Marian model)"),Pye.forEach(t),dmo=i(S),vs=n(S,"LI",{});var aS=s(vs);Kle=n(aS,"STRONG",{});var kdt=s(Kle);cmo=r(kdt,"mbart"),kdt.forEach(t),fmo=r(aS," \u2014 "),kI=n(aS,"A",{href:!0});var Sdt=s(kI);mmo=r(Sdt,"MBartTokenizer"),Sdt.forEach(t),gmo=r(aS," or "),SI=n(aS,"A",{href:!0});var Rdt=s(SI);hmo=r(Rdt,"MBartTokenizerFast"),Rdt.forEach(t),pmo=r(aS," (mBART model)"),aS.forEach(t),_mo=i(S),Fs=n(S,"LI",{});var nS=s(Fs);Zle=n(nS,"STRONG",{});var Pdt=s(Zle);umo=r(Pdt,"mbart50"),Pdt.forEach(t),bmo=r(nS," \u2014 "),RI=n(nS,"A",{href:!0});var Bdt=s(RI);vmo=r(Bdt,"MBart50Tokenizer"),Bdt.forEach(t),Fmo=r(nS," or "),PI=n(nS,"A",{href:!0});var Idt=s(PI);Tmo=r(Idt,"MBart50TokenizerFast"),Idt.forEach(t),Mmo=r(nS," (mBART-50 model)"),nS.forEach(t),Emo=i(S),Ts=n(S,"LI",{});var sS=s(Ts);eie=n(sS,"STRONG",{});var Ndt=s(eie);Cmo=r(Ndt,"megatron-bert"),Ndt.forEach(t),wmo=r(sS," \u2014 "),BI=n(sS,"A",{href:!0});var qdt=s(BI);Amo=r(qdt,"BertTokenizer"),qdt.forEach(t),Lmo=r(sS," or "),II=n(sS,"A",{href:!0});var jdt=s(II);ymo=r(jdt,"BertTokenizerFast"),jdt.forEach(t),xmo=r(sS," (Megatron-BERT model)"),sS.forEach(t),$mo=i(S),_h=n(S,"LI",{});var Bye=s(_h);oie=n(Bye,"STRONG",{});var Ddt=s(oie);kmo=r(Ddt,"mluke"),Ddt.forEach(t),Smo=r(Bye," \u2014 "),NI=n(Bye,"A",{href:!0});var Gdt=s(NI);Rmo=r(Gdt,"MLukeTokenizer"),Gdt.forEach(t),Pmo=r(Bye," (mLUKE model)"),Bye.forEach(t),Bmo=i(S),Ms=n(S,"LI",{});var lS=s(Ms);rie=n(lS,"STRONG",{});var Odt=s(rie);Imo=r(Odt,"mobilebert"),Odt.forEach(t),Nmo=r(lS," \u2014 "),qI=n(lS,"A",{href:!0});var Vdt=s(qI);qmo=r(Vdt,"MobileBertTokenizer"),Vdt.forEach(t),jmo=r(lS," or "),jI=n(lS,"A",{href:!0});var Xdt=s(jI);Dmo=r(Xdt,"MobileBertTokenizerFast"),Xdt.forEach(t),Gmo=r(lS," (MobileBERT model)"),lS.forEach(t),Omo=i(S),Es=n(S,"LI",{});var iS=s(Es);tie=n(iS,"STRONG",{});var zdt=s(tie);Vmo=r(zdt,"mpnet"),zdt.forEach(t),Xmo=r(iS," \u2014 "),DI=n(iS,"A",{href:!0});var Qdt=s(DI);zmo=r(Qdt,"MPNetTokenizer"),Qdt.forEach(t),Qmo=r(iS," or "),GI=n(iS,"A",{href:!0});var Wdt=s(GI);Wmo=r(Wdt,"MPNetTokenizerFast"),Wdt.forEach(t),Hmo=r(iS," (MPNet model)"),iS.forEach(t),Umo=i(S),Cs=n(S,"LI",{});var dS=s(Cs);aie=n(dS,"STRONG",{});var Hdt=s(aie);Jmo=r(Hdt,"mt5"),Hdt.forEach(t),Ymo=r(dS," \u2014 "),OI=n(dS,"A",{href:!0});var Udt=s(OI);Kmo=r(Udt,"MT5Tokenizer"),Udt.forEach(t),Zmo=r(dS," or "),VI=n(dS,"A",{href:!0});var Jdt=s(VI);ego=r(Jdt,"MT5TokenizerFast"),Jdt.forEach(t),ogo=r(dS," (MT5 model)"),dS.forEach(t),rgo=i(S),ws=n(S,"LI",{});var cS=s(ws);nie=n(cS,"STRONG",{});var Ydt=s(nie);tgo=r(Ydt,"mvp"),Ydt.forEach(t),ago=r(cS," \u2014 "),XI=n(cS,"A",{href:!0});var Kdt=s(XI);ngo=r(Kdt,"MvpTokenizer"),Kdt.forEach(t),sgo=r(cS," or "),zI=n(cS,"A",{href:!0});var Zdt=s(zI);lgo=r(Zdt,"MvpTokenizerFast"),Zdt.forEach(t),igo=r(cS," (MVP model)"),cS.forEach(t),dgo=i(S),As=n(S,"LI",{});var fS=s(As);sie=n(fS,"STRONG",{});var ect=s(sie);cgo=r(ect,"nezha"),ect.forEach(t),fgo=r(fS," \u2014 "),QI=n(fS,"A",{href:!0});var oct=s(QI);mgo=r(oct,"BertTokenizer"),oct.forEach(t),ggo=r(fS," or "),WI=n(fS,"A",{href:!0});var rct=s(WI);hgo=r(rct,"BertTokenizerFast"),rct.forEach(t),pgo=r(fS," (Nezha model)"),fS.forEach(t),_go=i(S),Ls=n(S,"LI",{});var mS=s(Ls);lie=n(mS,"STRONG",{});var tct=s(lie);ugo=r(tct,"nystromformer"),tct.forEach(t),bgo=r(mS," \u2014 "),HI=n(mS,"A",{href:!0});var act=s(HI);vgo=r(act,"AlbertTokenizer"),act.forEach(t),Fgo=r(mS," or "),UI=n(mS,"A",{href:!0});var nct=s(UI);Tgo=r(nct,"AlbertTokenizerFast"),nct.forEach(t),Mgo=r(mS," (Nystr\xF6mformer model)"),mS.forEach(t),Ego=i(S),ys=n(S,"LI",{});var gS=s(ys);iie=n(gS,"STRONG",{});var sct=s(iie);Cgo=r(sct,"openai-gpt"),sct.forEach(t),wgo=r(gS," \u2014 "),JI=n(gS,"A",{href:!0});var lct=s(JI);Ago=r(lct,"OpenAIGPTTokenizer"),lct.forEach(t),Lgo=r(gS," or "),YI=n(gS,"A",{href:!0});var ict=s(YI);ygo=r(ict,"OpenAIGPTTokenizerFast"),ict.forEach(t),xgo=r(gS," (OpenAI GPT model)"),gS.forEach(t),$go=i(S),uh=n(S,"LI",{});var Iye=s(uh);die=n(Iye,"STRONG",{});var dct=s(die);kgo=r(dct,"opt"),dct.forEach(t),Sgo=r(Iye," \u2014 "),KI=n(Iye,"A",{href:!0});var cct=s(KI);Rgo=r(cct,"GPT2Tokenizer"),cct.forEach(t),Pgo=r(Iye," (OPT model)"),Iye.forEach(t),Bgo=i(S),xs=n(S,"LI",{});var hS=s(xs);cie=n(hS,"STRONG",{});var fct=s(cie);Igo=r(fct,"pegasus"),fct.forEach(t),Ngo=r(hS," \u2014 "),ZI=n(hS,"A",{href:!0});var mct=s(ZI);qgo=r(mct,"PegasusTokenizer"),mct.forEach(t),jgo=r(hS," or "),eN=n(hS,"A",{href:!0});var gct=s(eN);Dgo=r(gct,"PegasusTokenizerFast"),gct.forEach(t),Ggo=r(hS," (Pegasus model)"),hS.forEach(t),Ogo=i(S),bh=n(S,"LI",{});var Nye=s(bh);fie=n(Nye,"STRONG",{});var hct=s(fie);Vgo=r(hct,"perceiver"),hct.forEach(t),Xgo=r(Nye," \u2014 "),oN=n(Nye,"A",{href:!0});var pct=s(oN);zgo=r(pct,"PerceiverTokenizer"),pct.forEach(t),Qgo=r(Nye," (Perceiver model)"),Nye.forEach(t),Wgo=i(S),vh=n(S,"LI",{});var qye=s(vh);mie=n(qye,"STRONG",{});var _ct=s(mie);Hgo=r(_ct,"phobert"),_ct.forEach(t),Ugo=r(qye," \u2014 "),rN=n(qye,"A",{href:!0});var uct=s(rN);Jgo=r(uct,"PhobertTokenizer"),uct.forEach(t),Ygo=r(qye," (PhoBERT model)"),qye.forEach(t),Kgo=i(S),Fh=n(S,"LI",{});var jye=s(Fh);gie=n(jye,"STRONG",{});var bct=s(gie);Zgo=r(bct,"plbart"),bct.forEach(t),eho=r(jye," \u2014 "),tN=n(jye,"A",{href:!0});var vct=s(tN);oho=r(vct,"PLBartTokenizer"),vct.forEach(t),rho=r(jye," (PLBart model)"),jye.forEach(t),tho=i(S),Th=n(S,"LI",{});var Dye=s(Th);hie=n(Dye,"STRONG",{});var Fct=s(hie);aho=r(Fct,"prophetnet"),Fct.forEach(t),nho=r(Dye," \u2014 "),aN=n(Dye,"A",{href:!0});var Tct=s(aN);sho=r(Tct,"ProphetNetTokenizer"),Tct.forEach(t),lho=r(Dye," (ProphetNet model)"),Dye.forEach(t),iho=i(S),$s=n(S,"LI",{});var pS=s($s);pie=n(pS,"STRONG",{});var Mct=s(pie);dho=r(Mct,"qdqbert"),Mct.forEach(t),cho=r(pS," \u2014 "),nN=n(pS,"A",{href:!0});var Ect=s(nN);fho=r(Ect,"BertTokenizer"),Ect.forEach(t),mho=r(pS," or "),sN=n(pS,"A",{href:!0});var Cct=s(sN);gho=r(Cct,"BertTokenizerFast"),Cct.forEach(t),hho=r(pS," (QDQBert model)"),pS.forEach(t),pho=i(S),Mh=n(S,"LI",{});var Gye=s(Mh);_ie=n(Gye,"STRONG",{});var wct=s(_ie);_ho=r(wct,"rag"),wct.forEach(t),uho=r(Gye," \u2014 "),lN=n(Gye,"A",{href:!0});var Act=s(lN);bho=r(Act,"RagTokenizer"),Act.forEach(t),vho=r(Gye," (RAG model)"),Gye.forEach(t),Fho=i(S),ks=n(S,"LI",{});var _S=s(ks);uie=n(_S,"STRONG",{});var Lct=s(uie);Tho=r(Lct,"realm"),Lct.forEach(t),Mho=r(_S," \u2014 "),iN=n(_S,"A",{href:!0});var yct=s(iN);Eho=r(yct,"RealmTokenizer"),yct.forEach(t),Cho=r(_S," or "),dN=n(_S,"A",{href:!0});var xct=s(dN);who=r(xct,"RealmTokenizerFast"),xct.forEach(t),Aho=r(_S," (REALM model)"),_S.forEach(t),Lho=i(S),Ss=n(S,"LI",{});var uS=s(Ss);bie=n(uS,"STRONG",{});var $ct=s(bie);yho=r($ct,"reformer"),$ct.forEach(t),xho=r(uS," \u2014 "),cN=n(uS,"A",{href:!0});var kct=s(cN);$ho=r(kct,"ReformerTokenizer"),kct.forEach(t),kho=r(uS," or "),fN=n(uS,"A",{href:!0});var Sct=s(fN);Sho=r(Sct,"ReformerTokenizerFast"),Sct.forEach(t),Rho=r(uS," (Reformer model)"),uS.forEach(t),Pho=i(S),Rs=n(S,"LI",{});var bS=s(Rs);vie=n(bS,"STRONG",{});var Rct=s(vie);Bho=r(Rct,"rembert"),Rct.forEach(t),Iho=r(bS," \u2014 "),mN=n(bS,"A",{href:!0});var Pct=s(mN);Nho=r(Pct,"RemBertTokenizer"),Pct.forEach(t),qho=r(bS," or "),gN=n(bS,"A",{href:!0});var Bct=s(gN);jho=r(Bct,"RemBertTokenizerFast"),Bct.forEach(t),Dho=r(bS," (RemBERT model)"),bS.forEach(t),Gho=i(S),Ps=n(S,"LI",{});var vS=s(Ps);Fie=n(vS,"STRONG",{});var Ict=s(Fie);Oho=r(Ict,"retribert"),Ict.forEach(t),Vho=r(vS," \u2014 "),hN=n(vS,"A",{href:!0});var Nct=s(hN);Xho=r(Nct,"RetriBertTokenizer"),Nct.forEach(t),zho=r(vS," or "),pN=n(vS,"A",{href:!0});var qct=s(pN);Qho=r(qct,"RetriBertTokenizerFast"),qct.forEach(t),Who=r(vS," (RetriBERT model)"),vS.forEach(t),Hho=i(S),Bs=n(S,"LI",{});var FS=s(Bs);Tie=n(FS,"STRONG",{});var jct=s(Tie);Uho=r(jct,"roberta"),jct.forEach(t),Jho=r(FS," \u2014 "),_N=n(FS,"A",{href:!0});var Dct=s(_N);Yho=r(Dct,"RobertaTokenizer"),Dct.forEach(t),Kho=r(FS," or "),uN=n(FS,"A",{href:!0});var Gct=s(uN);Zho=r(Gct,"RobertaTokenizerFast"),Gct.forEach(t),epo=r(FS," (RoBERTa model)"),FS.forEach(t),opo=i(S),Is=n(S,"LI",{});var TS=s(Is);Mie=n(TS,"STRONG",{});var Oct=s(Mie);rpo=r(Oct,"roformer"),Oct.forEach(t),tpo=r(TS," \u2014 "),bN=n(TS,"A",{href:!0});var Vct=s(bN);apo=r(Vct,"RoFormerTokenizer"),Vct.forEach(t),npo=r(TS," or "),vN=n(TS,"A",{href:!0});var Xct=s(vN);spo=r(Xct,"RoFormerTokenizerFast"),Xct.forEach(t),lpo=r(TS," (RoFormer model)"),TS.forEach(t),ipo=i(S),Eh=n(S,"LI",{});var Oye=s(Eh);Eie=n(Oye,"STRONG",{});var zct=s(Eie);dpo=r(zct,"speech_to_text"),zct.forEach(t),cpo=r(Oye," \u2014 "),FN=n(Oye,"A",{href:!0});var Qct=s(FN);fpo=r(Qct,"Speech2TextTokenizer"),Qct.forEach(t),mpo=r(Oye," (Speech2Text model)"),Oye.forEach(t),gpo=i(S),Ch=n(S,"LI",{});var Vye=s(Ch);Cie=n(Vye,"STRONG",{});var Wct=s(Cie);hpo=r(Wct,"speech_to_text_2"),Wct.forEach(t),ppo=r(Vye," \u2014 "),TN=n(Vye,"A",{href:!0});var Hct=s(TN);_po=r(Hct,"Speech2Text2Tokenizer"),Hct.forEach(t),upo=r(Vye," (Speech2Text2 model)"),Vye.forEach(t),bpo=i(S),Ns=n(S,"LI",{});var MS=s(Ns);wie=n(MS,"STRONG",{});var Uct=s(wie);vpo=r(Uct,"splinter"),Uct.forEach(t),Fpo=r(MS," \u2014 "),MN=n(MS,"A",{href:!0});var Jct=s(MN);Tpo=r(Jct,"SplinterTokenizer"),Jct.forEach(t),Mpo=r(MS," or "),EN=n(MS,"A",{href:!0});var Yct=s(EN);Epo=r(Yct,"SplinterTokenizerFast"),Yct.forEach(t),Cpo=r(MS," (Splinter model)"),MS.forEach(t),wpo=i(S),qs=n(S,"LI",{});var ES=s(qs);Aie=n(ES,"STRONG",{});var Kct=s(Aie);Apo=r(Kct,"squeezebert"),Kct.forEach(t),Lpo=r(ES," \u2014 "),CN=n(ES,"A",{href:!0});var Zct=s(CN);ypo=r(Zct,"SqueezeBertTokenizer"),Zct.forEach(t),xpo=r(ES," or "),wN=n(ES,"A",{href:!0});var eft=s(wN);$po=r(eft,"SqueezeBertTokenizerFast"),eft.forEach(t),kpo=r(ES," (SqueezeBERT model)"),ES.forEach(t),Spo=i(S),js=n(S,"LI",{});var CS=s(js);Lie=n(CS,"STRONG",{});var oft=s(Lie);Rpo=r(oft,"t5"),oft.forEach(t),Ppo=r(CS," \u2014 "),AN=n(CS,"A",{href:!0});var rft=s(AN);Bpo=r(rft,"T5Tokenizer"),rft.forEach(t),Ipo=r(CS," or "),LN=n(CS,"A",{href:!0});var tft=s(LN);Npo=r(tft,"T5TokenizerFast"),tft.forEach(t),qpo=r(CS," (T5 model)"),CS.forEach(t),jpo=i(S),wh=n(S,"LI",{});var Xye=s(wh);yie=n(Xye,"STRONG",{});var aft=s(yie);Dpo=r(aft,"tapas"),aft.forEach(t),Gpo=r(Xye," \u2014 "),yN=n(Xye,"A",{href:!0});var nft=s(yN);Opo=r(nft,"TapasTokenizer"),nft.forEach(t),Vpo=r(Xye," (TAPAS model)"),Xye.forEach(t),Xpo=i(S),Ah=n(S,"LI",{});var zye=s(Ah);xie=n(zye,"STRONG",{});var sft=s(xie);zpo=r(sft,"tapex"),sft.forEach(t),Qpo=r(zye," \u2014 "),xN=n(zye,"A",{href:!0});var lft=s(xN);Wpo=r(lft,"TapexTokenizer"),lft.forEach(t),Hpo=r(zye," (TAPEX model)"),zye.forEach(t),Upo=i(S),Lh=n(S,"LI",{});var Qye=s(Lh);$ie=n(Qye,"STRONG",{});var ift=s($ie);Jpo=r(ift,"transfo-xl"),ift.forEach(t),Ypo=r(Qye," \u2014 "),$N=n(Qye,"A",{href:!0});var dft=s($N);Kpo=r(dft,"TransfoXLTokenizer"),dft.forEach(t),Zpo=r(Qye," (Transformer-XL model)"),Qye.forEach(t),e_o=i(S),Ds=n(S,"LI",{});var wS=s(Ds);kie=n(wS,"STRONG",{});var cft=s(kie);o_o=r(cft,"vilt"),cft.forEach(t),r_o=r(wS," \u2014 "),kN=n(wS,"A",{href:!0});var fft=s(kN);t_o=r(fft,"BertTokenizer"),fft.forEach(t),a_o=r(wS," or "),SN=n(wS,"A",{href:!0});var mft=s(SN);n_o=r(mft,"BertTokenizerFast"),mft.forEach(t),s_o=r(wS," (ViLT model)"),wS.forEach(t),l_o=i(S),Gs=n(S,"LI",{});var AS=s(Gs);Sie=n(AS,"STRONG",{});var gft=s(Sie);i_o=r(gft,"visual_bert"),gft.forEach(t),d_o=r(AS," \u2014 "),RN=n(AS,"A",{href:!0});var hft=s(RN);c_o=r(hft,"BertTokenizer"),hft.forEach(t),f_o=r(AS," or "),PN=n(AS,"A",{href:!0});var pft=s(PN);m_o=r(pft,"BertTokenizerFast"),pft.forEach(t),g_o=r(AS," (VisualBERT model)"),AS.forEach(t),h_o=i(S),yh=n(S,"LI",{});var Wye=s(yh);Rie=n(Wye,"STRONG",{});var _ft=s(Rie);p_o=r(_ft,"wav2vec2"),_ft.forEach(t),__o=r(Wye," \u2014 "),BN=n(Wye,"A",{href:!0});var uft=s(BN);u_o=r(uft,"Wav2Vec2CTCTokenizer"),uft.forEach(t),b_o=r(Wye," (Wav2Vec2 model)"),Wye.forEach(t),v_o=i(S),xh=n(S,"LI",{});var Hye=s(xh);Pie=n(Hye,"STRONG",{});var bft=s(Pie);F_o=r(bft,"wav2vec2-conformer"),bft.forEach(t),T_o=r(Hye," \u2014 "),IN=n(Hye,"A",{href:!0});var vft=s(IN);M_o=r(vft,"Wav2Vec2CTCTokenizer"),vft.forEach(t),E_o=r(Hye," (Wav2Vec2-Conformer model)"),Hye.forEach(t),C_o=i(S),$h=n(S,"LI",{});var Uye=s($h);Bie=n(Uye,"STRONG",{});var Fft=s(Bie);w_o=r(Fft,"wav2vec2_phoneme"),Fft.forEach(t),A_o=r(Uye," \u2014 "),NN=n(Uye,"A",{href:!0});var Tft=s(NN);L_o=r(Tft,"Wav2Vec2PhonemeCTCTokenizer"),Tft.forEach(t),y_o=r(Uye," (Wav2Vec2Phoneme model)"),Uye.forEach(t),x_o=i(S),Os=n(S,"LI",{});var LS=s(Os);Iie=n(LS,"STRONG",{});var Mft=s(Iie);$_o=r(Mft,"xglm"),Mft.forEach(t),k_o=r(LS," \u2014 "),qN=n(LS,"A",{href:!0});var Eft=s(qN);S_o=r(Eft,"XGLMTokenizer"),Eft.forEach(t),R_o=r(LS," or "),jN=n(LS,"A",{href:!0});var Cft=s(jN);P_o=r(Cft,"XGLMTokenizerFast"),Cft.forEach(t),B_o=r(LS," (XGLM model)"),LS.forEach(t),I_o=i(S),kh=n(S,"LI",{});var Jye=s(kh);Nie=n(Jye,"STRONG",{});var wft=s(Nie);N_o=r(wft,"xlm"),wft.forEach(t),q_o=r(Jye," \u2014 "),DN=n(Jye,"A",{href:!0});var Aft=s(DN);j_o=r(Aft,"XLMTokenizer"),Aft.forEach(t),D_o=r(Jye," (XLM model)"),Jye.forEach(t),G_o=i(S),Sh=n(S,"LI",{});var Yye=s(Sh);qie=n(Yye,"STRONG",{});var Lft=s(qie);O_o=r(Lft,"xlm-prophetnet"),Lft.forEach(t),V_o=r(Yye," \u2014 "),GN=n(Yye,"A",{href:!0});var yft=s(GN);X_o=r(yft,"XLMProphetNetTokenizer"),yft.forEach(t),z_o=r(Yye," (XLM-ProphetNet model)"),Yye.forEach(t),Q_o=i(S),Vs=n(S,"LI",{});var yS=s(Vs);jie=n(yS,"STRONG",{});var xft=s(jie);W_o=r(xft,"xlm-roberta"),xft.forEach(t),H_o=r(yS," \u2014 "),ON=n(yS,"A",{href:!0});var $ft=s(ON);U_o=r($ft,"XLMRobertaTokenizer"),$ft.forEach(t),J_o=r(yS," or "),VN=n(yS,"A",{href:!0});var kft=s(VN);Y_o=r(kft,"XLMRobertaTokenizerFast"),kft.forEach(t),K_o=r(yS," (XLM-RoBERTa model)"),yS.forEach(t),Z_o=i(S),Xs=n(S,"LI",{});var xS=s(Xs);Die=n(xS,"STRONG",{});var Sft=s(Die);euo=r(Sft,"xlm-roberta-xl"),Sft.forEach(t),ouo=r(xS," \u2014 "),XN=n(xS,"A",{href:!0});var Rft=s(XN);ruo=r(Rft,"RobertaTokenizer"),Rft.forEach(t),tuo=r(xS," or "),zN=n(xS,"A",{href:!0});var Pft=s(zN);auo=r(Pft,"RobertaTokenizerFast"),Pft.forEach(t),nuo=r(xS," (XLM-RoBERTa-XL model)"),xS.forEach(t),suo=i(S),zs=n(S,"LI",{});var $S=s(zs);Gie=n($S,"STRONG",{});var Bft=s(Gie);luo=r(Bft,"xlnet"),Bft.forEach(t),iuo=r($S," \u2014 "),QN=n($S,"A",{href:!0});var Ift=s(QN);duo=r(Ift,"XLNetTokenizer"),Ift.forEach(t),cuo=r($S," or "),WN=n($S,"A",{href:!0});var Nft=s(WN);fuo=r(Nft,"XLNetTokenizerFast"),Nft.forEach(t),muo=r($S," (XLNet model)"),$S.forEach(t),guo=i(S),Qs=n(S,"LI",{});var kS=s(Qs);Oie=n(kS,"STRONG",{});var qft=s(Oie);huo=r(qft,"yoso"),qft.forEach(t),puo=r(kS," \u2014 "),HN=n(kS,"A",{href:!0});var jft=s(HN);_uo=r(jft,"AlbertTokenizer"),jft.forEach(t),uuo=r(kS," or "),UN=n(kS,"A",{href:!0});var Dft=s(UN);buo=r(Dft,"AlbertTokenizerFast"),Dft.forEach(t),vuo=r(kS," (YOSO model)"),kS.forEach(t),S.forEach(t),Fuo=i(Zs),T(Rh.$$.fragment,Zs),Zs.forEach(t),Tuo=i(Ks),Ph=n(Ks,"DIV",{class:!0});var pQe=s(Ph);T(vL.$$.fragment,pQe),Muo=i(pQe),Vie=n(pQe,"P",{});var Gft=s(Vie);Euo=r(Gft,"Register a new tokenizer in this mapping."),Gft.forEach(t),pQe.forEach(t),Ks.forEach(t),hXe=i(f),qi=n(f,"H2",{class:!0});var _Qe=s(qi);Bh=n(_Qe,"A",{id:!0,class:!0,href:!0});var Oft=s(Bh);Xie=n(Oft,"SPAN",{});var Vft=s(Xie);T(FL.$$.fragment,Vft),Vft.forEach(t),Oft.forEach(t),Cuo=i(_Qe),zie=n(_Qe,"SPAN",{});var Xft=s(zie);wuo=r(Xft,"AutoFeatureExtractor"),Xft.forEach(t),_Qe.forEach(t),pXe=i(f),xo=n(f,"DIV",{class:!0});var el=s(xo);T(TL.$$.fragment,el),Auo=i(el),ML=n(el,"P",{});var uQe=s(ML);Luo=r(uQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),JN=n(uQe,"A",{href:!0});var zft=s(JN);yuo=r(zft,"AutoFeatureExtractor.from_pretrained()"),zft.forEach(t),xuo=r(uQe," class method."),uQe.forEach(t),$uo=i(el),EL=n(el,"P",{});var bQe=s(EL);kuo=r(bQe,"This class cannot be instantiated directly using "),Qie=n(bQe,"CODE",{});var Qft=s(Qie);Suo=r(Qft,"__init__()"),Qft.forEach(t),Ruo=r(bQe," (throws an error)."),bQe.forEach(t),Puo=i(el),Ue=n(el,"DIV",{class:!0});var na=s(Ue);T(CL.$$.fragment,na),Buo=i(na),Wie=n(na,"P",{});var Wft=s(Wie);Iuo=r(Wft,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Wft.forEach(t),Nuo=i(na),Ba=n(na,"P",{});var dA=s(Ba);quo=r(dA,"The feature extractor class to instantiate is selected based on the "),Hie=n(dA,"CODE",{});var Hft=s(Hie);juo=r(Hft,"model_type"),Hft.forEach(t),Duo=r(dA,` property of the config object
(either passed as an argument or loaded from `),Uie=n(dA,"CODE",{});var Uft=s(Uie);Guo=r(Uft,"pretrained_model_name_or_path"),Uft.forEach(t),Ouo=r(dA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jie=n(dA,"CODE",{});var Jft=s(Jie);Vuo=r(Jft,"pretrained_model_name_or_path"),Jft.forEach(t),Xuo=r(dA,":"),dA.forEach(t),zuo=i(na),Y=n(na,"UL",{});var K=s(Y);Ih=n(K,"LI",{});var Kye=s(Ih);Yie=n(Kye,"STRONG",{});var Yft=s(Yie);Quo=r(Yft,"beit"),Yft.forEach(t),Wuo=r(Kye," \u2014 "),YN=n(Kye,"A",{href:!0});var Kft=s(YN);Huo=r(Kft,"BeitFeatureExtractor"),Kft.forEach(t),Uuo=r(Kye," (BEiT model)"),Kye.forEach(t),Juo=i(K),Nh=n(K,"LI",{});var Zye=s(Nh);Kie=n(Zye,"STRONG",{});var Zft=s(Kie);Yuo=r(Zft,"clip"),Zft.forEach(t),Kuo=r(Zye," \u2014 "),KN=n(Zye,"A",{href:!0});var emt=s(KN);Zuo=r(emt,"CLIPFeatureExtractor"),emt.forEach(t),e1o=r(Zye," (CLIP model)"),Zye.forEach(t),o1o=i(K),qh=n(K,"LI",{});var e8e=s(qh);Zie=n(e8e,"STRONG",{});var omt=s(Zie);r1o=r(omt,"convnext"),omt.forEach(t),t1o=r(e8e," \u2014 "),ZN=n(e8e,"A",{href:!0});var rmt=s(ZN);a1o=r(rmt,"ConvNextFeatureExtractor"),rmt.forEach(t),n1o=r(e8e," (ConvNeXT model)"),e8e.forEach(t),s1o=i(K),jh=n(K,"LI",{});var o8e=s(jh);ede=n(o8e,"STRONG",{});var tmt=s(ede);l1o=r(tmt,"cvt"),tmt.forEach(t),i1o=r(o8e," \u2014 "),eq=n(o8e,"A",{href:!0});var amt=s(eq);d1o=r(amt,"ConvNextFeatureExtractor"),amt.forEach(t),c1o=r(o8e," (CvT model)"),o8e.forEach(t),f1o=i(K),Dh=n(K,"LI",{});var r8e=s(Dh);ode=n(r8e,"STRONG",{});var nmt=s(ode);m1o=r(nmt,"data2vec-audio"),nmt.forEach(t),g1o=r(r8e," \u2014 "),oq=n(r8e,"A",{href:!0});var smt=s(oq);h1o=r(smt,"Wav2Vec2FeatureExtractor"),smt.forEach(t),p1o=r(r8e," (Data2VecAudio model)"),r8e.forEach(t),_1o=i(K),Gh=n(K,"LI",{});var t8e=s(Gh);rde=n(t8e,"STRONG",{});var lmt=s(rde);u1o=r(lmt,"data2vec-vision"),lmt.forEach(t),b1o=r(t8e," \u2014 "),rq=n(t8e,"A",{href:!0});var imt=s(rq);v1o=r(imt,"BeitFeatureExtractor"),imt.forEach(t),F1o=r(t8e," (Data2VecVision model)"),t8e.forEach(t),T1o=i(K),Oh=n(K,"LI",{});var a8e=s(Oh);tde=n(a8e,"STRONG",{});var dmt=s(tde);M1o=r(dmt,"deit"),dmt.forEach(t),E1o=r(a8e," \u2014 "),tq=n(a8e,"A",{href:!0});var cmt=s(tq);C1o=r(cmt,"DeiTFeatureExtractor"),cmt.forEach(t),w1o=r(a8e," (DeiT model)"),a8e.forEach(t),A1o=i(K),Vh=n(K,"LI",{});var n8e=s(Vh);ade=n(n8e,"STRONG",{});var fmt=s(ade);L1o=r(fmt,"detr"),fmt.forEach(t),y1o=r(n8e," \u2014 "),aq=n(n8e,"A",{href:!0});var mmt=s(aq);x1o=r(mmt,"DetrFeatureExtractor"),mmt.forEach(t),$1o=r(n8e," (DETR model)"),n8e.forEach(t),k1o=i(K),Xh=n(K,"LI",{});var s8e=s(Xh);nde=n(s8e,"STRONG",{});var gmt=s(nde);S1o=r(gmt,"dpt"),gmt.forEach(t),R1o=r(s8e," \u2014 "),nq=n(s8e,"A",{href:!0});var hmt=s(nq);P1o=r(hmt,"DPTFeatureExtractor"),hmt.forEach(t),B1o=r(s8e," (DPT model)"),s8e.forEach(t),I1o=i(K),zh=n(K,"LI",{});var l8e=s(zh);sde=n(l8e,"STRONG",{});var pmt=s(sde);N1o=r(pmt,"flava"),pmt.forEach(t),q1o=r(l8e," \u2014 "),sq=n(l8e,"A",{href:!0});var _mt=s(sq);j1o=r(_mt,"FlavaFeatureExtractor"),_mt.forEach(t),D1o=r(l8e," (FLAVA model)"),l8e.forEach(t),G1o=i(K),Qh=n(K,"LI",{});var i8e=s(Qh);lde=n(i8e,"STRONG",{});var umt=s(lde);O1o=r(umt,"glpn"),umt.forEach(t),V1o=r(i8e," \u2014 "),lq=n(i8e,"A",{href:!0});var bmt=s(lq);X1o=r(bmt,"GLPNFeatureExtractor"),bmt.forEach(t),z1o=r(i8e," (GLPN model)"),i8e.forEach(t),Q1o=i(K),Wh=n(K,"LI",{});var d8e=s(Wh);ide=n(d8e,"STRONG",{});var vmt=s(ide);W1o=r(vmt,"groupvit"),vmt.forEach(t),H1o=r(d8e," \u2014 "),iq=n(d8e,"A",{href:!0});var Fmt=s(iq);U1o=r(Fmt,"CLIPFeatureExtractor"),Fmt.forEach(t),J1o=r(d8e," (GroupViT model)"),d8e.forEach(t),Y1o=i(K),Hh=n(K,"LI",{});var c8e=s(Hh);dde=n(c8e,"STRONG",{});var Tmt=s(dde);K1o=r(Tmt,"hubert"),Tmt.forEach(t),Z1o=r(c8e," \u2014 "),dq=n(c8e,"A",{href:!0});var Mmt=s(dq);e2o=r(Mmt,"Wav2Vec2FeatureExtractor"),Mmt.forEach(t),o2o=r(c8e," (Hubert model)"),c8e.forEach(t),r2o=i(K),Uh=n(K,"LI",{});var f8e=s(Uh);cde=n(f8e,"STRONG",{});var Emt=s(cde);t2o=r(Emt,"imagegpt"),Emt.forEach(t),a2o=r(f8e," \u2014 "),cq=n(f8e,"A",{href:!0});var Cmt=s(cq);n2o=r(Cmt,"ImageGPTFeatureExtractor"),Cmt.forEach(t),s2o=r(f8e," (ImageGPT model)"),f8e.forEach(t),l2o=i(K),Jh=n(K,"LI",{});var m8e=s(Jh);fde=n(m8e,"STRONG",{});var wmt=s(fde);i2o=r(wmt,"layoutlmv2"),wmt.forEach(t),d2o=r(m8e," \u2014 "),fq=n(m8e,"A",{href:!0});var Amt=s(fq);c2o=r(Amt,"LayoutLMv2FeatureExtractor"),Amt.forEach(t),f2o=r(m8e," (LayoutLMv2 model)"),m8e.forEach(t),m2o=i(K),Yh=n(K,"LI",{});var g8e=s(Yh);mde=n(g8e,"STRONG",{});var Lmt=s(mde);g2o=r(Lmt,"layoutlmv3"),Lmt.forEach(t),h2o=r(g8e," \u2014 "),mq=n(g8e,"A",{href:!0});var ymt=s(mq);p2o=r(ymt,"LayoutLMv3FeatureExtractor"),ymt.forEach(t),_2o=r(g8e," (LayoutLMv3 model)"),g8e.forEach(t),u2o=i(K),Kh=n(K,"LI",{});var h8e=s(Kh);gde=n(h8e,"STRONG",{});var xmt=s(gde);b2o=r(xmt,"levit"),xmt.forEach(t),v2o=r(h8e," \u2014 "),gq=n(h8e,"A",{href:!0});var $mt=s(gq);F2o=r($mt,"LevitFeatureExtractor"),$mt.forEach(t),T2o=r(h8e," (LeViT model)"),h8e.forEach(t),M2o=i(K),Zh=n(K,"LI",{});var p8e=s(Zh);hde=n(p8e,"STRONG",{});var kmt=s(hde);E2o=r(kmt,"maskformer"),kmt.forEach(t),C2o=r(p8e," \u2014 "),hq=n(p8e,"A",{href:!0});var Smt=s(hq);w2o=r(Smt,"MaskFormerFeatureExtractor"),Smt.forEach(t),A2o=r(p8e," (MaskFormer model)"),p8e.forEach(t),L2o=i(K),ep=n(K,"LI",{});var _8e=s(ep);pde=n(_8e,"STRONG",{});var Rmt=s(pde);y2o=r(Rmt,"mctct"),Rmt.forEach(t),x2o=r(_8e," \u2014 "),pq=n(_8e,"A",{href:!0});var Pmt=s(pq);$2o=r(Pmt,"MCTCTFeatureExtractor"),Pmt.forEach(t),k2o=r(_8e," (M-CTC-T model)"),_8e.forEach(t),S2o=i(K),op=n(K,"LI",{});var u8e=s(op);_de=n(u8e,"STRONG",{});var Bmt=s(_de);R2o=r(Bmt,"mobilevit"),Bmt.forEach(t),P2o=r(u8e," \u2014 "),_q=n(u8e,"A",{href:!0});var Imt=s(_q);B2o=r(Imt,"MobileViTFeatureExtractor"),Imt.forEach(t),I2o=r(u8e," (MobileViT model)"),u8e.forEach(t),N2o=i(K),rp=n(K,"LI",{});var b8e=s(rp);ude=n(b8e,"STRONG",{});var Nmt=s(ude);q2o=r(Nmt,"perceiver"),Nmt.forEach(t),j2o=r(b8e," \u2014 "),uq=n(b8e,"A",{href:!0});var qmt=s(uq);D2o=r(qmt,"PerceiverFeatureExtractor"),qmt.forEach(t),G2o=r(b8e," (Perceiver model)"),b8e.forEach(t),O2o=i(K),tp=n(K,"LI",{});var v8e=s(tp);bde=n(v8e,"STRONG",{});var jmt=s(bde);V2o=r(jmt,"poolformer"),jmt.forEach(t),X2o=r(v8e," \u2014 "),bq=n(v8e,"A",{href:!0});var Dmt=s(bq);z2o=r(Dmt,"PoolFormerFeatureExtractor"),Dmt.forEach(t),Q2o=r(v8e," (PoolFormer model)"),v8e.forEach(t),W2o=i(K),ap=n(K,"LI",{});var F8e=s(ap);vde=n(F8e,"STRONG",{});var Gmt=s(vde);H2o=r(Gmt,"regnet"),Gmt.forEach(t),U2o=r(F8e," \u2014 "),vq=n(F8e,"A",{href:!0});var Omt=s(vq);J2o=r(Omt,"ConvNextFeatureExtractor"),Omt.forEach(t),Y2o=r(F8e," (RegNet model)"),F8e.forEach(t),K2o=i(K),np=n(K,"LI",{});var T8e=s(np);Fde=n(T8e,"STRONG",{});var Vmt=s(Fde);Z2o=r(Vmt,"resnet"),Vmt.forEach(t),ebo=r(T8e," \u2014 "),Fq=n(T8e,"A",{href:!0});var Xmt=s(Fq);obo=r(Xmt,"ConvNextFeatureExtractor"),Xmt.forEach(t),rbo=r(T8e," (ResNet model)"),T8e.forEach(t),tbo=i(K),sp=n(K,"LI",{});var M8e=s(sp);Tde=n(M8e,"STRONG",{});var zmt=s(Tde);abo=r(zmt,"segformer"),zmt.forEach(t),nbo=r(M8e," \u2014 "),Tq=n(M8e,"A",{href:!0});var Qmt=s(Tq);sbo=r(Qmt,"SegformerFeatureExtractor"),Qmt.forEach(t),lbo=r(M8e," (SegFormer model)"),M8e.forEach(t),ibo=i(K),lp=n(K,"LI",{});var E8e=s(lp);Mde=n(E8e,"STRONG",{});var Wmt=s(Mde);dbo=r(Wmt,"speech_to_text"),Wmt.forEach(t),cbo=r(E8e," \u2014 "),Mq=n(E8e,"A",{href:!0});var Hmt=s(Mq);fbo=r(Hmt,"Speech2TextFeatureExtractor"),Hmt.forEach(t),mbo=r(E8e," (Speech2Text model)"),E8e.forEach(t),gbo=i(K),ip=n(K,"LI",{});var C8e=s(ip);Ede=n(C8e,"STRONG",{});var Umt=s(Ede);hbo=r(Umt,"swin"),Umt.forEach(t),pbo=r(C8e," \u2014 "),Eq=n(C8e,"A",{href:!0});var Jmt=s(Eq);_bo=r(Jmt,"ViTFeatureExtractor"),Jmt.forEach(t),ubo=r(C8e," (Swin Transformer model)"),C8e.forEach(t),bbo=i(K),dp=n(K,"LI",{});var w8e=s(dp);Cde=n(w8e,"STRONG",{});var Ymt=s(Cde);vbo=r(Ymt,"van"),Ymt.forEach(t),Fbo=r(w8e," \u2014 "),Cq=n(w8e,"A",{href:!0});var Kmt=s(Cq);Tbo=r(Kmt,"ConvNextFeatureExtractor"),Kmt.forEach(t),Mbo=r(w8e," (VAN model)"),w8e.forEach(t),Ebo=i(K),cp=n(K,"LI",{});var A8e=s(cp);wde=n(A8e,"STRONG",{});var Zmt=s(wde);Cbo=r(Zmt,"vilt"),Zmt.forEach(t),wbo=r(A8e," \u2014 "),wq=n(A8e,"A",{href:!0});var egt=s(wq);Abo=r(egt,"ViltFeatureExtractor"),egt.forEach(t),Lbo=r(A8e," (ViLT model)"),A8e.forEach(t),ybo=i(K),fp=n(K,"LI",{});var L8e=s(fp);Ade=n(L8e,"STRONG",{});var ogt=s(Ade);xbo=r(ogt,"vit"),ogt.forEach(t),$bo=r(L8e," \u2014 "),Aq=n(L8e,"A",{href:!0});var rgt=s(Aq);kbo=r(rgt,"ViTFeatureExtractor"),rgt.forEach(t),Sbo=r(L8e," (ViT model)"),L8e.forEach(t),Rbo=i(K),mp=n(K,"LI",{});var y8e=s(mp);Lde=n(y8e,"STRONG",{});var tgt=s(Lde);Pbo=r(tgt,"vit_mae"),tgt.forEach(t),Bbo=r(y8e," \u2014 "),Lq=n(y8e,"A",{href:!0});var agt=s(Lq);Ibo=r(agt,"ViTFeatureExtractor"),agt.forEach(t),Nbo=r(y8e," (ViTMAE model)"),y8e.forEach(t),qbo=i(K),gp=n(K,"LI",{});var x8e=s(gp);yde=n(x8e,"STRONG",{});var ngt=s(yde);jbo=r(ngt,"wav2vec2"),ngt.forEach(t),Dbo=r(x8e," \u2014 "),yq=n(x8e,"A",{href:!0});var sgt=s(yq);Gbo=r(sgt,"Wav2Vec2FeatureExtractor"),sgt.forEach(t),Obo=r(x8e," (Wav2Vec2 model)"),x8e.forEach(t),Vbo=i(K),hp=n(K,"LI",{});var $8e=s(hp);xde=n($8e,"STRONG",{});var lgt=s(xde);Xbo=r(lgt,"wav2vec2-conformer"),lgt.forEach(t),zbo=r($8e," \u2014 "),xq=n($8e,"A",{href:!0});var igt=s(xq);Qbo=r(igt,"Wav2Vec2FeatureExtractor"),igt.forEach(t),Wbo=r($8e," (Wav2Vec2-Conformer model)"),$8e.forEach(t),Hbo=i(K),pp=n(K,"LI",{});var k8e=s(pp);$de=n(k8e,"STRONG",{});var dgt=s($de);Ubo=r(dgt,"yolos"),dgt.forEach(t),Jbo=r(k8e," \u2014 "),$q=n(k8e,"A",{href:!0});var cgt=s($q);Ybo=r(cgt,"YolosFeatureExtractor"),cgt.forEach(t),Kbo=r(k8e," (YOLOS model)"),k8e.forEach(t),K.forEach(t),Zbo=i(na),T(_p.$$.fragment,na),evo=i(na),T(up.$$.fragment,na),na.forEach(t),ovo=i(el),bp=n(el,"DIV",{class:!0});var vQe=s(bp);T(wL.$$.fragment,vQe),rvo=i(vQe),kde=n(vQe,"P",{});var fgt=s(kde);tvo=r(fgt,"Register a new feature extractor for this class."),fgt.forEach(t),vQe.forEach(t),el.forEach(t),_Xe=i(f),ji=n(f,"H2",{class:!0});var FQe=s(ji);vp=n(FQe,"A",{id:!0,class:!0,href:!0});var mgt=s(vp);Sde=n(mgt,"SPAN",{});var ggt=s(Sde);T(AL.$$.fragment,ggt),ggt.forEach(t),mgt.forEach(t),avo=i(FQe),Rde=n(FQe,"SPAN",{});var hgt=s(Rde);nvo=r(hgt,"AutoProcessor"),hgt.forEach(t),FQe.forEach(t),uXe=i(f),$o=n(f,"DIV",{class:!0});var ol=s($o);T(LL.$$.fragment,ol),svo=i(ol),yL=n(ol,"P",{});var TQe=s(yL);lvo=r(TQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),kq=n(TQe,"A",{href:!0});var pgt=s(kq);ivo=r(pgt,"AutoProcessor.from_pretrained()"),pgt.forEach(t),dvo=r(TQe," class method."),TQe.forEach(t),cvo=i(ol),xL=n(ol,"P",{});var MQe=s(xL);fvo=r(MQe,"This class cannot be instantiated directly using "),Pde=n(MQe,"CODE",{});var _gt=s(Pde);mvo=r(_gt,"__init__()"),_gt.forEach(t),gvo=r(MQe," (throws an error)."),MQe.forEach(t),hvo=i(ol),Je=n(ol,"DIV",{class:!0});var sa=s(Je);T($L.$$.fragment,sa),pvo=i(sa),Bde=n(sa,"P",{});var ugt=s(Bde);_vo=r(ugt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ugt.forEach(t),uvo=i(sa),Di=n(sa,"P",{});var Pre=s(Di);bvo=r(Pre,"The processor class to instantiate is selected based on the "),Ide=n(Pre,"CODE",{});var bgt=s(Ide);vvo=r(bgt,"model_type"),bgt.forEach(t),Fvo=r(Pre,` property of the config object (either
passed as an argument or loaded from `),Nde=n(Pre,"CODE",{});var vgt=s(Nde);Tvo=r(vgt,"pretrained_model_name_or_path"),vgt.forEach(t),Mvo=r(Pre," if possible):"),Pre.forEach(t),Evo=i(sa),he=n(sa,"UL",{});var ue=s(he);Fp=n(ue,"LI",{});var S8e=s(Fp);qde=n(S8e,"STRONG",{});var Fgt=s(qde);Cvo=r(Fgt,"clip"),Fgt.forEach(t),wvo=r(S8e," \u2014 "),Sq=n(S8e,"A",{href:!0});var Tgt=s(Sq);Avo=r(Tgt,"CLIPProcessor"),Tgt.forEach(t),Lvo=r(S8e," (CLIP model)"),S8e.forEach(t),yvo=i(ue),Tp=n(ue,"LI",{});var R8e=s(Tp);jde=n(R8e,"STRONG",{});var Mgt=s(jde);xvo=r(Mgt,"flava"),Mgt.forEach(t),$vo=r(R8e," \u2014 "),Dde=n(R8e,"CODE",{});var Egt=s(Dde);kvo=r(Egt,"FLAVAProcessor"),Egt.forEach(t),Svo=r(R8e," (FLAVA model)"),R8e.forEach(t),Rvo=i(ue),Mp=n(ue,"LI",{});var P8e=s(Mp);Gde=n(P8e,"STRONG",{});var Cgt=s(Gde);Pvo=r(Cgt,"groupvit"),Cgt.forEach(t),Bvo=r(P8e," \u2014 "),Rq=n(P8e,"A",{href:!0});var wgt=s(Rq);Ivo=r(wgt,"CLIPProcessor"),wgt.forEach(t),Nvo=r(P8e," (GroupViT model)"),P8e.forEach(t),qvo=i(ue),Ep=n(ue,"LI",{});var B8e=s(Ep);Ode=n(B8e,"STRONG",{});var Agt=s(Ode);jvo=r(Agt,"layoutlmv2"),Agt.forEach(t),Dvo=r(B8e," \u2014 "),Pq=n(B8e,"A",{href:!0});var Lgt=s(Pq);Gvo=r(Lgt,"LayoutLMv2Processor"),Lgt.forEach(t),Ovo=r(B8e," (LayoutLMv2 model)"),B8e.forEach(t),Vvo=i(ue),Cp=n(ue,"LI",{});var I8e=s(Cp);Vde=n(I8e,"STRONG",{});var ygt=s(Vde);Xvo=r(ygt,"layoutlmv3"),ygt.forEach(t),zvo=r(I8e," \u2014 "),Bq=n(I8e,"A",{href:!0});var xgt=s(Bq);Qvo=r(xgt,"LayoutLMv3Processor"),xgt.forEach(t),Wvo=r(I8e," (LayoutLMv3 model)"),I8e.forEach(t),Hvo=i(ue),wp=n(ue,"LI",{});var N8e=s(wp);Xde=n(N8e,"STRONG",{});var $gt=s(Xde);Uvo=r($gt,"layoutxlm"),$gt.forEach(t),Jvo=r(N8e," \u2014 "),Iq=n(N8e,"A",{href:!0});var kgt=s(Iq);Yvo=r(kgt,"LayoutXLMProcessor"),kgt.forEach(t),Kvo=r(N8e," (LayoutXLM model)"),N8e.forEach(t),Zvo=i(ue),Ap=n(ue,"LI",{});var q8e=s(Ap);zde=n(q8e,"STRONG",{});var Sgt=s(zde);e0o=r(Sgt,"sew"),Sgt.forEach(t),o0o=r(q8e," \u2014 "),Nq=n(q8e,"A",{href:!0});var Rgt=s(Nq);r0o=r(Rgt,"Wav2Vec2Processor"),Rgt.forEach(t),t0o=r(q8e," (SEW model)"),q8e.forEach(t),a0o=i(ue),Lp=n(ue,"LI",{});var j8e=s(Lp);Qde=n(j8e,"STRONG",{});var Pgt=s(Qde);n0o=r(Pgt,"sew-d"),Pgt.forEach(t),s0o=r(j8e," \u2014 "),qq=n(j8e,"A",{href:!0});var Bgt=s(qq);l0o=r(Bgt,"Wav2Vec2Processor"),Bgt.forEach(t),i0o=r(j8e," (SEW-D model)"),j8e.forEach(t),d0o=i(ue),yp=n(ue,"LI",{});var D8e=s(yp);Wde=n(D8e,"STRONG",{});var Igt=s(Wde);c0o=r(Igt,"speech_to_text"),Igt.forEach(t),f0o=r(D8e," \u2014 "),jq=n(D8e,"A",{href:!0});var Ngt=s(jq);m0o=r(Ngt,"Speech2TextProcessor"),Ngt.forEach(t),g0o=r(D8e," (Speech2Text model)"),D8e.forEach(t),h0o=i(ue),xp=n(ue,"LI",{});var G8e=s(xp);Hde=n(G8e,"STRONG",{});var qgt=s(Hde);p0o=r(qgt,"speech_to_text_2"),qgt.forEach(t),_0o=r(G8e," \u2014 "),Dq=n(G8e,"A",{href:!0});var jgt=s(Dq);u0o=r(jgt,"Speech2Text2Processor"),jgt.forEach(t),b0o=r(G8e," (Speech2Text2 model)"),G8e.forEach(t),v0o=i(ue),$p=n(ue,"LI",{});var O8e=s($p);Ude=n(O8e,"STRONG",{});var Dgt=s(Ude);F0o=r(Dgt,"trocr"),Dgt.forEach(t),T0o=r(O8e," \u2014 "),Gq=n(O8e,"A",{href:!0});var Ggt=s(Gq);M0o=r(Ggt,"TrOCRProcessor"),Ggt.forEach(t),E0o=r(O8e," (TrOCR model)"),O8e.forEach(t),C0o=i(ue),kp=n(ue,"LI",{});var V8e=s(kp);Jde=n(V8e,"STRONG",{});var Ogt=s(Jde);w0o=r(Ogt,"unispeech"),Ogt.forEach(t),A0o=r(V8e," \u2014 "),Oq=n(V8e,"A",{href:!0});var Vgt=s(Oq);L0o=r(Vgt,"Wav2Vec2Processor"),Vgt.forEach(t),y0o=r(V8e," (UniSpeech model)"),V8e.forEach(t),x0o=i(ue),Sp=n(ue,"LI",{});var X8e=s(Sp);Yde=n(X8e,"STRONG",{});var Xgt=s(Yde);$0o=r(Xgt,"unispeech-sat"),Xgt.forEach(t),k0o=r(X8e," \u2014 "),Vq=n(X8e,"A",{href:!0});var zgt=s(Vq);S0o=r(zgt,"Wav2Vec2Processor"),zgt.forEach(t),R0o=r(X8e," (UniSpeechSat model)"),X8e.forEach(t),P0o=i(ue),Rp=n(ue,"LI",{});var z8e=s(Rp);Kde=n(z8e,"STRONG",{});var Qgt=s(Kde);B0o=r(Qgt,"vilt"),Qgt.forEach(t),I0o=r(z8e," \u2014 "),Xq=n(z8e,"A",{href:!0});var Wgt=s(Xq);N0o=r(Wgt,"ViltProcessor"),Wgt.forEach(t),q0o=r(z8e," (ViLT model)"),z8e.forEach(t),j0o=i(ue),Pp=n(ue,"LI",{});var Q8e=s(Pp);Zde=n(Q8e,"STRONG",{});var Hgt=s(Zde);D0o=r(Hgt,"vision-text-dual-encoder"),Hgt.forEach(t),G0o=r(Q8e," \u2014 "),zq=n(Q8e,"A",{href:!0});var Ugt=s(zq);O0o=r(Ugt,"VisionTextDualEncoderProcessor"),Ugt.forEach(t),V0o=r(Q8e," (VisionTextDualEncoder model)"),Q8e.forEach(t),X0o=i(ue),Bp=n(ue,"LI",{});var W8e=s(Bp);ece=n(W8e,"STRONG",{});var Jgt=s(ece);z0o=r(Jgt,"wav2vec2"),Jgt.forEach(t),Q0o=r(W8e," \u2014 "),Qq=n(W8e,"A",{href:!0});var Ygt=s(Qq);W0o=r(Ygt,"Wav2Vec2Processor"),Ygt.forEach(t),H0o=r(W8e," (Wav2Vec2 model)"),W8e.forEach(t),U0o=i(ue),Ip=n(ue,"LI",{});var H8e=s(Ip);oce=n(H8e,"STRONG",{});var Kgt=s(oce);J0o=r(Kgt,"wav2vec2-conformer"),Kgt.forEach(t),Y0o=r(H8e," \u2014 "),Wq=n(H8e,"A",{href:!0});var Zgt=s(Wq);K0o=r(Zgt,"Wav2Vec2Processor"),Zgt.forEach(t),Z0o=r(H8e," (Wav2Vec2-Conformer model)"),H8e.forEach(t),eFo=i(ue),Np=n(ue,"LI",{});var U8e=s(Np);rce=n(U8e,"STRONG",{});var eht=s(rce);oFo=r(eht,"wavlm"),eht.forEach(t),rFo=r(U8e," \u2014 "),Hq=n(U8e,"A",{href:!0});var oht=s(Hq);tFo=r(oht,"Wav2Vec2Processor"),oht.forEach(t),aFo=r(U8e," (WavLM model)"),U8e.forEach(t),ue.forEach(t),nFo=i(sa),T(qp.$$.fragment,sa),sFo=i(sa),T(jp.$$.fragment,sa),sa.forEach(t),lFo=i(ol),Dp=n(ol,"DIV",{class:!0});var EQe=s(Dp);T(kL.$$.fragment,EQe),iFo=i(EQe),tce=n(EQe,"P",{});var rht=s(tce);dFo=r(rht,"Register a new processor for this class."),rht.forEach(t),EQe.forEach(t),ol.forEach(t),bXe=i(f),Gi=n(f,"H2",{class:!0});var CQe=s(Gi);Gp=n(CQe,"A",{id:!0,class:!0,href:!0});var tht=s(Gp);ace=n(tht,"SPAN",{});var aht=s(ace);T(SL.$$.fragment,aht),aht.forEach(t),tht.forEach(t),cFo=i(CQe),nce=n(CQe,"SPAN",{});var nht=s(nce);fFo=r(nht,"AutoModel"),nht.forEach(t),CQe.forEach(t),vXe=i(f),ko=n(f,"DIV",{class:!0});var rl=s(ko);T(RL.$$.fragment,rl),mFo=i(rl),Oi=n(rl,"P",{});var Bre=s(Oi);gFo=r(Bre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Uq=n(Bre,"A",{href:!0});var sht=s(Uq);hFo=r(sht,"from_pretrained()"),sht.forEach(t),pFo=r(Bre," class method or the "),Jq=n(Bre,"A",{href:!0});var lht=s(Jq);_Fo=r(lht,"from_config()"),lht.forEach(t),uFo=r(Bre,` class
method.`),Bre.forEach(t),bFo=i(rl),PL=n(rl,"P",{});var wQe=s(PL);vFo=r(wQe,"This class cannot be instantiated directly using "),sce=n(wQe,"CODE",{});var iht=s(sce);FFo=r(iht,"__init__()"),iht.forEach(t),TFo=r(wQe," (throws an error)."),wQe.forEach(t),MFo=i(rl),it=n(rl,"DIV",{class:!0});var cA=s(it);T(BL.$$.fragment,cA),EFo=i(cA),lce=n(cA,"P",{});var dht=s(lce);CFo=r(dht,"Instantiates one of the base model classes of the library from a configuration."),dht.forEach(t),wFo=i(cA),Vi=n(cA,"P",{});var Ire=s(Vi);AFo=r(Ire,`Note:
Loading a model from its configuration file does `),ice=n(Ire,"STRONG",{});var cht=s(ice);LFo=r(cht,"not"),cht.forEach(t),yFo=r(Ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yq=n(Ire,"A",{href:!0});var fht=s(Yq);xFo=r(fht,"from_pretrained()"),fht.forEach(t),$Fo=r(Ire," to load the model weights."),Ire.forEach(t),kFo=i(cA),T(Op.$$.fragment,cA),cA.forEach(t),SFo=i(rl),Ye=n(rl,"DIV",{class:!0});var la=s(Ye);T(IL.$$.fragment,la),RFo=i(la),dce=n(la,"P",{});var mht=s(dce);PFo=r(mht,"Instantiate one of the base model classes of the library from a pretrained model."),mht.forEach(t),BFo=i(la),Ia=n(la,"P",{});var fA=s(Ia);IFo=r(fA,"The model class to instantiate is selected based on the "),cce=n(fA,"CODE",{});var ght=s(cce);NFo=r(ght,"model_type"),ght.forEach(t),qFo=r(fA,` property of the config object (either
passed as an argument or loaded from `),fce=n(fA,"CODE",{});var hht=s(fce);jFo=r(hht,"pretrained_model_name_or_path"),hht.forEach(t),DFo=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mce=n(fA,"CODE",{});var pht=s(mce);GFo=r(pht,"pretrained_model_name_or_path"),pht.forEach(t),OFo=r(fA,":"),fA.forEach(t),VFo=i(la),y=n(la,"UL",{});var x=s(y);Vp=n(x,"LI",{});var J8e=s(Vp);gce=n(J8e,"STRONG",{});var _ht=s(gce);XFo=r(_ht,"albert"),_ht.forEach(t),zFo=r(J8e," \u2014 "),Kq=n(J8e,"A",{href:!0});var uht=s(Kq);QFo=r(uht,"AlbertModel"),uht.forEach(t),WFo=r(J8e," (ALBERT model)"),J8e.forEach(t),HFo=i(x),Xp=n(x,"LI",{});var Y8e=s(Xp);hce=n(Y8e,"STRONG",{});var bht=s(hce);UFo=r(bht,"bart"),bht.forEach(t),JFo=r(Y8e," \u2014 "),Zq=n(Y8e,"A",{href:!0});var vht=s(Zq);YFo=r(vht,"BartModel"),vht.forEach(t),KFo=r(Y8e," (BART model)"),Y8e.forEach(t),ZFo=i(x),zp=n(x,"LI",{});var K8e=s(zp);pce=n(K8e,"STRONG",{});var Fht=s(pce);eTo=r(Fht,"beit"),Fht.forEach(t),oTo=r(K8e," \u2014 "),ej=n(K8e,"A",{href:!0});var Tht=s(ej);rTo=r(Tht,"BeitModel"),Tht.forEach(t),tTo=r(K8e," (BEiT model)"),K8e.forEach(t),aTo=i(x),Qp=n(x,"LI",{});var Z8e=s(Qp);_ce=n(Z8e,"STRONG",{});var Mht=s(_ce);nTo=r(Mht,"bert"),Mht.forEach(t),sTo=r(Z8e," \u2014 "),oj=n(Z8e,"A",{href:!0});var Eht=s(oj);lTo=r(Eht,"BertModel"),Eht.forEach(t),iTo=r(Z8e," (BERT model)"),Z8e.forEach(t),dTo=i(x),Wp=n(x,"LI",{});var exe=s(Wp);uce=n(exe,"STRONG",{});var Cht=s(uce);cTo=r(Cht,"bert-generation"),Cht.forEach(t),fTo=r(exe," \u2014 "),rj=n(exe,"A",{href:!0});var wht=s(rj);mTo=r(wht,"BertGenerationEncoder"),wht.forEach(t),gTo=r(exe," (Bert Generation model)"),exe.forEach(t),hTo=i(x),Hp=n(x,"LI",{});var oxe=s(Hp);bce=n(oxe,"STRONG",{});var Aht=s(bce);pTo=r(Aht,"big_bird"),Aht.forEach(t),_To=r(oxe," \u2014 "),tj=n(oxe,"A",{href:!0});var Lht=s(tj);uTo=r(Lht,"BigBirdModel"),Lht.forEach(t),bTo=r(oxe," (BigBird model)"),oxe.forEach(t),vTo=i(x),Up=n(x,"LI",{});var rxe=s(Up);vce=n(rxe,"STRONG",{});var yht=s(vce);FTo=r(yht,"bigbird_pegasus"),yht.forEach(t),TTo=r(rxe," \u2014 "),aj=n(rxe,"A",{href:!0});var xht=s(aj);MTo=r(xht,"BigBirdPegasusModel"),xht.forEach(t),ETo=r(rxe," (BigBird-Pegasus model)"),rxe.forEach(t),CTo=i(x),Jp=n(x,"LI",{});var txe=s(Jp);Fce=n(txe,"STRONG",{});var $ht=s(Fce);wTo=r($ht,"blenderbot"),$ht.forEach(t),ATo=r(txe," \u2014 "),nj=n(txe,"A",{href:!0});var kht=s(nj);LTo=r(kht,"BlenderbotModel"),kht.forEach(t),yTo=r(txe," (Blenderbot model)"),txe.forEach(t),xTo=i(x),Yp=n(x,"LI",{});var axe=s(Yp);Tce=n(axe,"STRONG",{});var Sht=s(Tce);$To=r(Sht,"blenderbot-small"),Sht.forEach(t),kTo=r(axe," \u2014 "),sj=n(axe,"A",{href:!0});var Rht=s(sj);STo=r(Rht,"BlenderbotSmallModel"),Rht.forEach(t),RTo=r(axe," (BlenderbotSmall model)"),axe.forEach(t),PTo=i(x),Kp=n(x,"LI",{});var nxe=s(Kp);Mce=n(nxe,"STRONG",{});var Pht=s(Mce);BTo=r(Pht,"bloom"),Pht.forEach(t),ITo=r(nxe," \u2014 "),lj=n(nxe,"A",{href:!0});var Bht=s(lj);NTo=r(Bht,"BloomModel"),Bht.forEach(t),qTo=r(nxe," (BLOOM model)"),nxe.forEach(t),jTo=i(x),Zp=n(x,"LI",{});var sxe=s(Zp);Ece=n(sxe,"STRONG",{});var Iht=s(Ece);DTo=r(Iht,"camembert"),Iht.forEach(t),GTo=r(sxe," \u2014 "),ij=n(sxe,"A",{href:!0});var Nht=s(ij);OTo=r(Nht,"CamembertModel"),Nht.forEach(t),VTo=r(sxe," (CamemBERT model)"),sxe.forEach(t),XTo=i(x),e_=n(x,"LI",{});var lxe=s(e_);Cce=n(lxe,"STRONG",{});var qht=s(Cce);zTo=r(qht,"canine"),qht.forEach(t),QTo=r(lxe," \u2014 "),dj=n(lxe,"A",{href:!0});var jht=s(dj);WTo=r(jht,"CanineModel"),jht.forEach(t),HTo=r(lxe," (CANINE model)"),lxe.forEach(t),UTo=i(x),o_=n(x,"LI",{});var ixe=s(o_);wce=n(ixe,"STRONG",{});var Dht=s(wce);JTo=r(Dht,"clip"),Dht.forEach(t),YTo=r(ixe," \u2014 "),cj=n(ixe,"A",{href:!0});var Ght=s(cj);KTo=r(Ght,"CLIPModel"),Ght.forEach(t),ZTo=r(ixe," (CLIP model)"),ixe.forEach(t),e7o=i(x),r_=n(x,"LI",{});var dxe=s(r_);Ace=n(dxe,"STRONG",{});var Oht=s(Ace);o7o=r(Oht,"codegen"),Oht.forEach(t),r7o=r(dxe," \u2014 "),fj=n(dxe,"A",{href:!0});var Vht=s(fj);t7o=r(Vht,"CodeGenModel"),Vht.forEach(t),a7o=r(dxe," (CodeGen model)"),dxe.forEach(t),n7o=i(x),t_=n(x,"LI",{});var cxe=s(t_);Lce=n(cxe,"STRONG",{});var Xht=s(Lce);s7o=r(Xht,"convbert"),Xht.forEach(t),l7o=r(cxe," \u2014 "),mj=n(cxe,"A",{href:!0});var zht=s(mj);i7o=r(zht,"ConvBertModel"),zht.forEach(t),d7o=r(cxe," (ConvBERT model)"),cxe.forEach(t),c7o=i(x),a_=n(x,"LI",{});var fxe=s(a_);yce=n(fxe,"STRONG",{});var Qht=s(yce);f7o=r(Qht,"convnext"),Qht.forEach(t),m7o=r(fxe," \u2014 "),gj=n(fxe,"A",{href:!0});var Wht=s(gj);g7o=r(Wht,"ConvNextModel"),Wht.forEach(t),h7o=r(fxe," (ConvNeXT model)"),fxe.forEach(t),p7o=i(x),n_=n(x,"LI",{});var mxe=s(n_);xce=n(mxe,"STRONG",{});var Hht=s(xce);_7o=r(Hht,"ctrl"),Hht.forEach(t),u7o=r(mxe," \u2014 "),hj=n(mxe,"A",{href:!0});var Uht=s(hj);b7o=r(Uht,"CTRLModel"),Uht.forEach(t),v7o=r(mxe," (CTRL model)"),mxe.forEach(t),F7o=i(x),s_=n(x,"LI",{});var gxe=s(s_);$ce=n(gxe,"STRONG",{});var Jht=s($ce);T7o=r(Jht,"cvt"),Jht.forEach(t),M7o=r(gxe," \u2014 "),pj=n(gxe,"A",{href:!0});var Yht=s(pj);E7o=r(Yht,"CvtModel"),Yht.forEach(t),C7o=r(gxe," (CvT model)"),gxe.forEach(t),w7o=i(x),l_=n(x,"LI",{});var hxe=s(l_);kce=n(hxe,"STRONG",{});var Kht=s(kce);A7o=r(Kht,"data2vec-audio"),Kht.forEach(t),L7o=r(hxe," \u2014 "),_j=n(hxe,"A",{href:!0});var Zht=s(_j);y7o=r(Zht,"Data2VecAudioModel"),Zht.forEach(t),x7o=r(hxe," (Data2VecAudio model)"),hxe.forEach(t),$7o=i(x),i_=n(x,"LI",{});var pxe=s(i_);Sce=n(pxe,"STRONG",{});var ept=s(Sce);k7o=r(ept,"data2vec-text"),ept.forEach(t),S7o=r(pxe," \u2014 "),uj=n(pxe,"A",{href:!0});var opt=s(uj);R7o=r(opt,"Data2VecTextModel"),opt.forEach(t),P7o=r(pxe," (Data2VecText model)"),pxe.forEach(t),B7o=i(x),d_=n(x,"LI",{});var _xe=s(d_);Rce=n(_xe,"STRONG",{});var rpt=s(Rce);I7o=r(rpt,"data2vec-vision"),rpt.forEach(t),N7o=r(_xe," \u2014 "),bj=n(_xe,"A",{href:!0});var tpt=s(bj);q7o=r(tpt,"Data2VecVisionModel"),tpt.forEach(t),j7o=r(_xe," (Data2VecVision model)"),_xe.forEach(t),D7o=i(x),c_=n(x,"LI",{});var uxe=s(c_);Pce=n(uxe,"STRONG",{});var apt=s(Pce);G7o=r(apt,"deberta"),apt.forEach(t),O7o=r(uxe," \u2014 "),vj=n(uxe,"A",{href:!0});var npt=s(vj);V7o=r(npt,"DebertaModel"),npt.forEach(t),X7o=r(uxe," (DeBERTa model)"),uxe.forEach(t),z7o=i(x),f_=n(x,"LI",{});var bxe=s(f_);Bce=n(bxe,"STRONG",{});var spt=s(Bce);Q7o=r(spt,"deberta-v2"),spt.forEach(t),W7o=r(bxe," \u2014 "),Fj=n(bxe,"A",{href:!0});var lpt=s(Fj);H7o=r(lpt,"DebertaV2Model"),lpt.forEach(t),U7o=r(bxe," (DeBERTa-v2 model)"),bxe.forEach(t),J7o=i(x),m_=n(x,"LI",{});var vxe=s(m_);Ice=n(vxe,"STRONG",{});var ipt=s(Ice);Y7o=r(ipt,"decision_transformer"),ipt.forEach(t),K7o=r(vxe," \u2014 "),Tj=n(vxe,"A",{href:!0});var dpt=s(Tj);Z7o=r(dpt,"DecisionTransformerModel"),dpt.forEach(t),e9o=r(vxe," (Decision Transformer model)"),vxe.forEach(t),o9o=i(x),g_=n(x,"LI",{});var Fxe=s(g_);Nce=n(Fxe,"STRONG",{});var cpt=s(Nce);r9o=r(cpt,"deit"),cpt.forEach(t),t9o=r(Fxe," \u2014 "),Mj=n(Fxe,"A",{href:!0});var fpt=s(Mj);a9o=r(fpt,"DeiTModel"),fpt.forEach(t),n9o=r(Fxe," (DeiT model)"),Fxe.forEach(t),s9o=i(x),h_=n(x,"LI",{});var Txe=s(h_);qce=n(Txe,"STRONG",{});var mpt=s(qce);l9o=r(mpt,"detr"),mpt.forEach(t),i9o=r(Txe," \u2014 "),Ej=n(Txe,"A",{href:!0});var gpt=s(Ej);d9o=r(gpt,"DetrModel"),gpt.forEach(t),c9o=r(Txe," (DETR model)"),Txe.forEach(t),f9o=i(x),p_=n(x,"LI",{});var Mxe=s(p_);jce=n(Mxe,"STRONG",{});var hpt=s(jce);m9o=r(hpt,"distilbert"),hpt.forEach(t),g9o=r(Mxe," \u2014 "),Cj=n(Mxe,"A",{href:!0});var ppt=s(Cj);h9o=r(ppt,"DistilBertModel"),ppt.forEach(t),p9o=r(Mxe," (DistilBERT model)"),Mxe.forEach(t),_9o=i(x),__=n(x,"LI",{});var Exe=s(__);Dce=n(Exe,"STRONG",{});var _pt=s(Dce);u9o=r(_pt,"dpr"),_pt.forEach(t),b9o=r(Exe," \u2014 "),wj=n(Exe,"A",{href:!0});var upt=s(wj);v9o=r(upt,"DPRQuestionEncoder"),upt.forEach(t),F9o=r(Exe," (DPR model)"),Exe.forEach(t),T9o=i(x),u_=n(x,"LI",{});var Cxe=s(u_);Gce=n(Cxe,"STRONG",{});var bpt=s(Gce);M9o=r(bpt,"dpt"),bpt.forEach(t),E9o=r(Cxe," \u2014 "),Aj=n(Cxe,"A",{href:!0});var vpt=s(Aj);C9o=r(vpt,"DPTModel"),vpt.forEach(t),w9o=r(Cxe," (DPT model)"),Cxe.forEach(t),A9o=i(x),b_=n(x,"LI",{});var wxe=s(b_);Oce=n(wxe,"STRONG",{});var Fpt=s(Oce);L9o=r(Fpt,"electra"),Fpt.forEach(t),y9o=r(wxe," \u2014 "),Lj=n(wxe,"A",{href:!0});var Tpt=s(Lj);x9o=r(Tpt,"ElectraModel"),Tpt.forEach(t),$9o=r(wxe," (ELECTRA model)"),wxe.forEach(t),k9o=i(x),v_=n(x,"LI",{});var Axe=s(v_);Vce=n(Axe,"STRONG",{});var Mpt=s(Vce);S9o=r(Mpt,"flaubert"),Mpt.forEach(t),R9o=r(Axe," \u2014 "),yj=n(Axe,"A",{href:!0});var Ept=s(yj);P9o=r(Ept,"FlaubertModel"),Ept.forEach(t),B9o=r(Axe," (FlauBERT model)"),Axe.forEach(t),I9o=i(x),F_=n(x,"LI",{});var Lxe=s(F_);Xce=n(Lxe,"STRONG",{});var Cpt=s(Xce);N9o=r(Cpt,"flava"),Cpt.forEach(t),q9o=r(Lxe," \u2014 "),xj=n(Lxe,"A",{href:!0});var wpt=s(xj);j9o=r(wpt,"FlavaModel"),wpt.forEach(t),D9o=r(Lxe," (FLAVA model)"),Lxe.forEach(t),G9o=i(x),T_=n(x,"LI",{});var yxe=s(T_);zce=n(yxe,"STRONG",{});var Apt=s(zce);O9o=r(Apt,"fnet"),Apt.forEach(t),V9o=r(yxe," \u2014 "),$j=n(yxe,"A",{href:!0});var Lpt=s($j);X9o=r(Lpt,"FNetModel"),Lpt.forEach(t),z9o=r(yxe," (FNet model)"),yxe.forEach(t),Q9o=i(x),M_=n(x,"LI",{});var xxe=s(M_);Qce=n(xxe,"STRONG",{});var ypt=s(Qce);W9o=r(ypt,"fsmt"),ypt.forEach(t),H9o=r(xxe," \u2014 "),kj=n(xxe,"A",{href:!0});var xpt=s(kj);U9o=r(xpt,"FSMTModel"),xpt.forEach(t),J9o=r(xxe," (FairSeq Machine-Translation model)"),xxe.forEach(t),Y9o=i(x),Ws=n(x,"LI",{});var SS=s(Ws);Wce=n(SS,"STRONG",{});var $pt=s(Wce);K9o=r($pt,"funnel"),$pt.forEach(t),Z9o=r(SS," \u2014 "),Sj=n(SS,"A",{href:!0});var kpt=s(Sj);eMo=r(kpt,"FunnelModel"),kpt.forEach(t),oMo=r(SS," or "),Rj=n(SS,"A",{href:!0});var Spt=s(Rj);rMo=r(Spt,"FunnelBaseModel"),Spt.forEach(t),tMo=r(SS," (Funnel Transformer model)"),SS.forEach(t),aMo=i(x),E_=n(x,"LI",{});var $xe=s(E_);Hce=n($xe,"STRONG",{});var Rpt=s(Hce);nMo=r(Rpt,"glpn"),Rpt.forEach(t),sMo=r($xe," \u2014 "),Pj=n($xe,"A",{href:!0});var Ppt=s(Pj);lMo=r(Ppt,"GLPNModel"),Ppt.forEach(t),iMo=r($xe," (GLPN model)"),$xe.forEach(t),dMo=i(x),C_=n(x,"LI",{});var kxe=s(C_);Uce=n(kxe,"STRONG",{});var Bpt=s(Uce);cMo=r(Bpt,"gpt2"),Bpt.forEach(t),fMo=r(kxe," \u2014 "),Bj=n(kxe,"A",{href:!0});var Ipt=s(Bj);mMo=r(Ipt,"GPT2Model"),Ipt.forEach(t),gMo=r(kxe," (OpenAI GPT-2 model)"),kxe.forEach(t),hMo=i(x),w_=n(x,"LI",{});var Sxe=s(w_);Jce=n(Sxe,"STRONG",{});var Npt=s(Jce);pMo=r(Npt,"gpt_neo"),Npt.forEach(t),_Mo=r(Sxe," \u2014 "),Ij=n(Sxe,"A",{href:!0});var qpt=s(Ij);uMo=r(qpt,"GPTNeoModel"),qpt.forEach(t),bMo=r(Sxe," (GPT Neo model)"),Sxe.forEach(t),vMo=i(x),A_=n(x,"LI",{});var Rxe=s(A_);Yce=n(Rxe,"STRONG",{});var jpt=s(Yce);FMo=r(jpt,"gpt_neox"),jpt.forEach(t),TMo=r(Rxe," \u2014 "),Nj=n(Rxe,"A",{href:!0});var Dpt=s(Nj);MMo=r(Dpt,"GPTNeoXModel"),Dpt.forEach(t),EMo=r(Rxe," (GPT NeoX model)"),Rxe.forEach(t),CMo=i(x),L_=n(x,"LI",{});var Pxe=s(L_);Kce=n(Pxe,"STRONG",{});var Gpt=s(Kce);wMo=r(Gpt,"gptj"),Gpt.forEach(t),AMo=r(Pxe," \u2014 "),qj=n(Pxe,"A",{href:!0});var Opt=s(qj);LMo=r(Opt,"GPTJModel"),Opt.forEach(t),yMo=r(Pxe," (GPT-J model)"),Pxe.forEach(t),xMo=i(x),y_=n(x,"LI",{});var Bxe=s(y_);Zce=n(Bxe,"STRONG",{});var Vpt=s(Zce);$Mo=r(Vpt,"groupvit"),Vpt.forEach(t),kMo=r(Bxe," \u2014 "),jj=n(Bxe,"A",{href:!0});var Xpt=s(jj);SMo=r(Xpt,"GroupViTModel"),Xpt.forEach(t),RMo=r(Bxe," (GroupViT model)"),Bxe.forEach(t),PMo=i(x),x_=n(x,"LI",{});var Ixe=s(x_);efe=n(Ixe,"STRONG",{});var zpt=s(efe);BMo=r(zpt,"hubert"),zpt.forEach(t),IMo=r(Ixe," \u2014 "),Dj=n(Ixe,"A",{href:!0});var Qpt=s(Dj);NMo=r(Qpt,"HubertModel"),Qpt.forEach(t),qMo=r(Ixe," (Hubert model)"),Ixe.forEach(t),jMo=i(x),$_=n(x,"LI",{});var Nxe=s($_);ofe=n(Nxe,"STRONG",{});var Wpt=s(ofe);DMo=r(Wpt,"ibert"),Wpt.forEach(t),GMo=r(Nxe," \u2014 "),Gj=n(Nxe,"A",{href:!0});var Hpt=s(Gj);OMo=r(Hpt,"IBertModel"),Hpt.forEach(t),VMo=r(Nxe," (I-BERT model)"),Nxe.forEach(t),XMo=i(x),k_=n(x,"LI",{});var qxe=s(k_);rfe=n(qxe,"STRONG",{});var Upt=s(rfe);zMo=r(Upt,"imagegpt"),Upt.forEach(t),QMo=r(qxe," \u2014 "),Oj=n(qxe,"A",{href:!0});var Jpt=s(Oj);WMo=r(Jpt,"ImageGPTModel"),Jpt.forEach(t),HMo=r(qxe," (ImageGPT model)"),qxe.forEach(t),UMo=i(x),S_=n(x,"LI",{});var jxe=s(S_);tfe=n(jxe,"STRONG",{});var Ypt=s(tfe);JMo=r(Ypt,"layoutlm"),Ypt.forEach(t),YMo=r(jxe," \u2014 "),Vj=n(jxe,"A",{href:!0});var Kpt=s(Vj);KMo=r(Kpt,"LayoutLMModel"),Kpt.forEach(t),ZMo=r(jxe," (LayoutLM model)"),jxe.forEach(t),e4o=i(x),R_=n(x,"LI",{});var Dxe=s(R_);afe=n(Dxe,"STRONG",{});var Zpt=s(afe);o4o=r(Zpt,"layoutlmv2"),Zpt.forEach(t),r4o=r(Dxe," \u2014 "),Xj=n(Dxe,"A",{href:!0});var e_t=s(Xj);t4o=r(e_t,"LayoutLMv2Model"),e_t.forEach(t),a4o=r(Dxe," (LayoutLMv2 model)"),Dxe.forEach(t),n4o=i(x),P_=n(x,"LI",{});var Gxe=s(P_);nfe=n(Gxe,"STRONG",{});var o_t=s(nfe);s4o=r(o_t,"layoutlmv3"),o_t.forEach(t),l4o=r(Gxe," \u2014 "),zj=n(Gxe,"A",{href:!0});var r_t=s(zj);i4o=r(r_t,"LayoutLMv3Model"),r_t.forEach(t),d4o=r(Gxe," (LayoutLMv3 model)"),Gxe.forEach(t),c4o=i(x),B_=n(x,"LI",{});var Oxe=s(B_);sfe=n(Oxe,"STRONG",{});var t_t=s(sfe);f4o=r(t_t,"led"),t_t.forEach(t),m4o=r(Oxe," \u2014 "),Qj=n(Oxe,"A",{href:!0});var a_t=s(Qj);g4o=r(a_t,"LEDModel"),a_t.forEach(t),h4o=r(Oxe," (LED model)"),Oxe.forEach(t),p4o=i(x),I_=n(x,"LI",{});var Vxe=s(I_);lfe=n(Vxe,"STRONG",{});var n_t=s(lfe);_4o=r(n_t,"levit"),n_t.forEach(t),u4o=r(Vxe," \u2014 "),Wj=n(Vxe,"A",{href:!0});var s_t=s(Wj);b4o=r(s_t,"LevitModel"),s_t.forEach(t),v4o=r(Vxe," (LeViT model)"),Vxe.forEach(t),F4o=i(x),N_=n(x,"LI",{});var Xxe=s(N_);ife=n(Xxe,"STRONG",{});var l_t=s(ife);T4o=r(l_t,"longformer"),l_t.forEach(t),M4o=r(Xxe," \u2014 "),Hj=n(Xxe,"A",{href:!0});var i_t=s(Hj);E4o=r(i_t,"LongformerModel"),i_t.forEach(t),C4o=r(Xxe," (Longformer model)"),Xxe.forEach(t),w4o=i(x),q_=n(x,"LI",{});var zxe=s(q_);dfe=n(zxe,"STRONG",{});var d_t=s(dfe);A4o=r(d_t,"longt5"),d_t.forEach(t),L4o=r(zxe," \u2014 "),Uj=n(zxe,"A",{href:!0});var c_t=s(Uj);y4o=r(c_t,"LongT5Model"),c_t.forEach(t),x4o=r(zxe," (LongT5 model)"),zxe.forEach(t),$4o=i(x),j_=n(x,"LI",{});var Qxe=s(j_);cfe=n(Qxe,"STRONG",{});var f_t=s(cfe);k4o=r(f_t,"luke"),f_t.forEach(t),S4o=r(Qxe," \u2014 "),Jj=n(Qxe,"A",{href:!0});var m_t=s(Jj);R4o=r(m_t,"LukeModel"),m_t.forEach(t),P4o=r(Qxe," (LUKE model)"),Qxe.forEach(t),B4o=i(x),D_=n(x,"LI",{});var Wxe=s(D_);ffe=n(Wxe,"STRONG",{});var g_t=s(ffe);I4o=r(g_t,"lxmert"),g_t.forEach(t),N4o=r(Wxe," \u2014 "),Yj=n(Wxe,"A",{href:!0});var h_t=s(Yj);q4o=r(h_t,"LxmertModel"),h_t.forEach(t),j4o=r(Wxe," (LXMERT model)"),Wxe.forEach(t),D4o=i(x),G_=n(x,"LI",{});var Hxe=s(G_);mfe=n(Hxe,"STRONG",{});var p_t=s(mfe);G4o=r(p_t,"m2m_100"),p_t.forEach(t),O4o=r(Hxe," \u2014 "),Kj=n(Hxe,"A",{href:!0});var __t=s(Kj);V4o=r(__t,"M2M100Model"),__t.forEach(t),X4o=r(Hxe," (M2M100 model)"),Hxe.forEach(t),z4o=i(x),O_=n(x,"LI",{});var Uxe=s(O_);gfe=n(Uxe,"STRONG",{});var u_t=s(gfe);Q4o=r(u_t,"marian"),u_t.forEach(t),W4o=r(Uxe," \u2014 "),Zj=n(Uxe,"A",{href:!0});var b_t=s(Zj);H4o=r(b_t,"MarianModel"),b_t.forEach(t),U4o=r(Uxe," (Marian model)"),Uxe.forEach(t),J4o=i(x),V_=n(x,"LI",{});var Jxe=s(V_);hfe=n(Jxe,"STRONG",{});var v_t=s(hfe);Y4o=r(v_t,"maskformer"),v_t.forEach(t),K4o=r(Jxe," \u2014 "),eD=n(Jxe,"A",{href:!0});var F_t=s(eD);Z4o=r(F_t,"MaskFormerModel"),F_t.forEach(t),eEo=r(Jxe," (MaskFormer model)"),Jxe.forEach(t),oEo=i(x),X_=n(x,"LI",{});var Yxe=s(X_);pfe=n(Yxe,"STRONG",{});var T_t=s(pfe);rEo=r(T_t,"mbart"),T_t.forEach(t),tEo=r(Yxe," \u2014 "),oD=n(Yxe,"A",{href:!0});var M_t=s(oD);aEo=r(M_t,"MBartModel"),M_t.forEach(t),nEo=r(Yxe," (mBART model)"),Yxe.forEach(t),sEo=i(x),z_=n(x,"LI",{});var Kxe=s(z_);_fe=n(Kxe,"STRONG",{});var E_t=s(_fe);lEo=r(E_t,"mctct"),E_t.forEach(t),iEo=r(Kxe," \u2014 "),rD=n(Kxe,"A",{href:!0});var C_t=s(rD);dEo=r(C_t,"MCTCTModel"),C_t.forEach(t),cEo=r(Kxe," (M-CTC-T model)"),Kxe.forEach(t),fEo=i(x),Q_=n(x,"LI",{});var Zxe=s(Q_);ufe=n(Zxe,"STRONG",{});var w_t=s(ufe);mEo=r(w_t,"megatron-bert"),w_t.forEach(t),gEo=r(Zxe," \u2014 "),tD=n(Zxe,"A",{href:!0});var A_t=s(tD);hEo=r(A_t,"MegatronBertModel"),A_t.forEach(t),pEo=r(Zxe," (Megatron-BERT model)"),Zxe.forEach(t),_Eo=i(x),W_=n(x,"LI",{});var e$e=s(W_);bfe=n(e$e,"STRONG",{});var L_t=s(bfe);uEo=r(L_t,"mobilebert"),L_t.forEach(t),bEo=r(e$e," \u2014 "),aD=n(e$e,"A",{href:!0});var y_t=s(aD);vEo=r(y_t,"MobileBertModel"),y_t.forEach(t),FEo=r(e$e," (MobileBERT model)"),e$e.forEach(t),TEo=i(x),H_=n(x,"LI",{});var o$e=s(H_);vfe=n(o$e,"STRONG",{});var x_t=s(vfe);MEo=r(x_t,"mobilevit"),x_t.forEach(t),EEo=r(o$e," \u2014 "),nD=n(o$e,"A",{href:!0});var $_t=s(nD);CEo=r($_t,"MobileViTModel"),$_t.forEach(t),wEo=r(o$e," (MobileViT model)"),o$e.forEach(t),AEo=i(x),U_=n(x,"LI",{});var r$e=s(U_);Ffe=n(r$e,"STRONG",{});var k_t=s(Ffe);LEo=r(k_t,"mpnet"),k_t.forEach(t),yEo=r(r$e," \u2014 "),sD=n(r$e,"A",{href:!0});var S_t=s(sD);xEo=r(S_t,"MPNetModel"),S_t.forEach(t),$Eo=r(r$e," (MPNet model)"),r$e.forEach(t),kEo=i(x),J_=n(x,"LI",{});var t$e=s(J_);Tfe=n(t$e,"STRONG",{});var R_t=s(Tfe);SEo=r(R_t,"mt5"),R_t.forEach(t),REo=r(t$e," \u2014 "),lD=n(t$e,"A",{href:!0});var P_t=s(lD);PEo=r(P_t,"MT5Model"),P_t.forEach(t),BEo=r(t$e," (MT5 model)"),t$e.forEach(t),IEo=i(x),Y_=n(x,"LI",{});var a$e=s(Y_);Mfe=n(a$e,"STRONG",{});var B_t=s(Mfe);NEo=r(B_t,"mvp"),B_t.forEach(t),qEo=r(a$e," \u2014 "),iD=n(a$e,"A",{href:!0});var I_t=s(iD);jEo=r(I_t,"MvpModel"),I_t.forEach(t),DEo=r(a$e," (MVP model)"),a$e.forEach(t),GEo=i(x),K_=n(x,"LI",{});var n$e=s(K_);Efe=n(n$e,"STRONG",{});var N_t=s(Efe);OEo=r(N_t,"nezha"),N_t.forEach(t),VEo=r(n$e," \u2014 "),dD=n(n$e,"A",{href:!0});var q_t=s(dD);XEo=r(q_t,"NezhaModel"),q_t.forEach(t),zEo=r(n$e," (Nezha model)"),n$e.forEach(t),QEo=i(x),Z_=n(x,"LI",{});var s$e=s(Z_);Cfe=n(s$e,"STRONG",{});var j_t=s(Cfe);WEo=r(j_t,"nystromformer"),j_t.forEach(t),HEo=r(s$e," \u2014 "),cD=n(s$e,"A",{href:!0});var D_t=s(cD);UEo=r(D_t,"NystromformerModel"),D_t.forEach(t),JEo=r(s$e," (Nystr\xF6mformer model)"),s$e.forEach(t),YEo=i(x),eu=n(x,"LI",{});var l$e=s(eu);wfe=n(l$e,"STRONG",{});var G_t=s(wfe);KEo=r(G_t,"openai-gpt"),G_t.forEach(t),ZEo=r(l$e," \u2014 "),fD=n(l$e,"A",{href:!0});var O_t=s(fD);eCo=r(O_t,"OpenAIGPTModel"),O_t.forEach(t),oCo=r(l$e," (OpenAI GPT model)"),l$e.forEach(t),rCo=i(x),ou=n(x,"LI",{});var i$e=s(ou);Afe=n(i$e,"STRONG",{});var V_t=s(Afe);tCo=r(V_t,"opt"),V_t.forEach(t),aCo=r(i$e," \u2014 "),mD=n(i$e,"A",{href:!0});var X_t=s(mD);nCo=r(X_t,"OPTModel"),X_t.forEach(t),sCo=r(i$e," (OPT model)"),i$e.forEach(t),lCo=i(x),ru=n(x,"LI",{});var d$e=s(ru);Lfe=n(d$e,"STRONG",{});var z_t=s(Lfe);iCo=r(z_t,"pegasus"),z_t.forEach(t),dCo=r(d$e," \u2014 "),gD=n(d$e,"A",{href:!0});var Q_t=s(gD);cCo=r(Q_t,"PegasusModel"),Q_t.forEach(t),fCo=r(d$e," (Pegasus model)"),d$e.forEach(t),mCo=i(x),tu=n(x,"LI",{});var c$e=s(tu);yfe=n(c$e,"STRONG",{});var W_t=s(yfe);gCo=r(W_t,"perceiver"),W_t.forEach(t),hCo=r(c$e," \u2014 "),hD=n(c$e,"A",{href:!0});var H_t=s(hD);pCo=r(H_t,"PerceiverModel"),H_t.forEach(t),_Co=r(c$e," (Perceiver model)"),c$e.forEach(t),uCo=i(x),au=n(x,"LI",{});var f$e=s(au);xfe=n(f$e,"STRONG",{});var U_t=s(xfe);bCo=r(U_t,"plbart"),U_t.forEach(t),vCo=r(f$e," \u2014 "),pD=n(f$e,"A",{href:!0});var J_t=s(pD);FCo=r(J_t,"PLBartModel"),J_t.forEach(t),TCo=r(f$e," (PLBart model)"),f$e.forEach(t),MCo=i(x),nu=n(x,"LI",{});var m$e=s(nu);$fe=n(m$e,"STRONG",{});var Y_t=s($fe);ECo=r(Y_t,"poolformer"),Y_t.forEach(t),CCo=r(m$e," \u2014 "),_D=n(m$e,"A",{href:!0});var K_t=s(_D);wCo=r(K_t,"PoolFormerModel"),K_t.forEach(t),ACo=r(m$e," (PoolFormer model)"),m$e.forEach(t),LCo=i(x),su=n(x,"LI",{});var g$e=s(su);kfe=n(g$e,"STRONG",{});var Z_t=s(kfe);yCo=r(Z_t,"prophetnet"),Z_t.forEach(t),xCo=r(g$e," \u2014 "),uD=n(g$e,"A",{href:!0});var eut=s(uD);$Co=r(eut,"ProphetNetModel"),eut.forEach(t),kCo=r(g$e," (ProphetNet model)"),g$e.forEach(t),SCo=i(x),lu=n(x,"LI",{});var h$e=s(lu);Sfe=n(h$e,"STRONG",{});var out=s(Sfe);RCo=r(out,"qdqbert"),out.forEach(t),PCo=r(h$e," \u2014 "),bD=n(h$e,"A",{href:!0});var rut=s(bD);BCo=r(rut,"QDQBertModel"),rut.forEach(t),ICo=r(h$e," (QDQBert model)"),h$e.forEach(t),NCo=i(x),iu=n(x,"LI",{});var p$e=s(iu);Rfe=n(p$e,"STRONG",{});var tut=s(Rfe);qCo=r(tut,"reformer"),tut.forEach(t),jCo=r(p$e," \u2014 "),vD=n(p$e,"A",{href:!0});var aut=s(vD);DCo=r(aut,"ReformerModel"),aut.forEach(t),GCo=r(p$e," (Reformer model)"),p$e.forEach(t),OCo=i(x),du=n(x,"LI",{});var _$e=s(du);Pfe=n(_$e,"STRONG",{});var nut=s(Pfe);VCo=r(nut,"regnet"),nut.forEach(t),XCo=r(_$e," \u2014 "),FD=n(_$e,"A",{href:!0});var sut=s(FD);zCo=r(sut,"RegNetModel"),sut.forEach(t),QCo=r(_$e," (RegNet model)"),_$e.forEach(t),WCo=i(x),cu=n(x,"LI",{});var u$e=s(cu);Bfe=n(u$e,"STRONG",{});var lut=s(Bfe);HCo=r(lut,"rembert"),lut.forEach(t),UCo=r(u$e," \u2014 "),TD=n(u$e,"A",{href:!0});var iut=s(TD);JCo=r(iut,"RemBertModel"),iut.forEach(t),YCo=r(u$e," (RemBERT model)"),u$e.forEach(t),KCo=i(x),fu=n(x,"LI",{});var b$e=s(fu);Ife=n(b$e,"STRONG",{});var dut=s(Ife);ZCo=r(dut,"resnet"),dut.forEach(t),e3o=r(b$e," \u2014 "),MD=n(b$e,"A",{href:!0});var cut=s(MD);o3o=r(cut,"ResNetModel"),cut.forEach(t),r3o=r(b$e," (ResNet model)"),b$e.forEach(t),t3o=i(x),mu=n(x,"LI",{});var v$e=s(mu);Nfe=n(v$e,"STRONG",{});var fut=s(Nfe);a3o=r(fut,"retribert"),fut.forEach(t),n3o=r(v$e," \u2014 "),ED=n(v$e,"A",{href:!0});var mut=s(ED);s3o=r(mut,"RetriBertModel"),mut.forEach(t),l3o=r(v$e," (RetriBERT model)"),v$e.forEach(t),i3o=i(x),gu=n(x,"LI",{});var F$e=s(gu);qfe=n(F$e,"STRONG",{});var gut=s(qfe);d3o=r(gut,"roberta"),gut.forEach(t),c3o=r(F$e," \u2014 "),CD=n(F$e,"A",{href:!0});var hut=s(CD);f3o=r(hut,"RobertaModel"),hut.forEach(t),m3o=r(F$e," (RoBERTa model)"),F$e.forEach(t),g3o=i(x),hu=n(x,"LI",{});var T$e=s(hu);jfe=n(T$e,"STRONG",{});var put=s(jfe);h3o=r(put,"roformer"),put.forEach(t),p3o=r(T$e," \u2014 "),wD=n(T$e,"A",{href:!0});var _ut=s(wD);_3o=r(_ut,"RoFormerModel"),_ut.forEach(t),u3o=r(T$e," (RoFormer model)"),T$e.forEach(t),b3o=i(x),pu=n(x,"LI",{});var M$e=s(pu);Dfe=n(M$e,"STRONG",{});var uut=s(Dfe);v3o=r(uut,"segformer"),uut.forEach(t),F3o=r(M$e," \u2014 "),AD=n(M$e,"A",{href:!0});var but=s(AD);T3o=r(but,"SegformerModel"),but.forEach(t),M3o=r(M$e," (SegFormer model)"),M$e.forEach(t),E3o=i(x),_u=n(x,"LI",{});var E$e=s(_u);Gfe=n(E$e,"STRONG",{});var vut=s(Gfe);C3o=r(vut,"sew"),vut.forEach(t),w3o=r(E$e," \u2014 "),LD=n(E$e,"A",{href:!0});var Fut=s(LD);A3o=r(Fut,"SEWModel"),Fut.forEach(t),L3o=r(E$e," (SEW model)"),E$e.forEach(t),y3o=i(x),uu=n(x,"LI",{});var C$e=s(uu);Ofe=n(C$e,"STRONG",{});var Tut=s(Ofe);x3o=r(Tut,"sew-d"),Tut.forEach(t),$3o=r(C$e," \u2014 "),yD=n(C$e,"A",{href:!0});var Mut=s(yD);k3o=r(Mut,"SEWDModel"),Mut.forEach(t),S3o=r(C$e," (SEW-D model)"),C$e.forEach(t),R3o=i(x),bu=n(x,"LI",{});var w$e=s(bu);Vfe=n(w$e,"STRONG",{});var Eut=s(Vfe);P3o=r(Eut,"speech_to_text"),Eut.forEach(t),B3o=r(w$e," \u2014 "),xD=n(w$e,"A",{href:!0});var Cut=s(xD);I3o=r(Cut,"Speech2TextModel"),Cut.forEach(t),N3o=r(w$e," (Speech2Text model)"),w$e.forEach(t),q3o=i(x),vu=n(x,"LI",{});var A$e=s(vu);Xfe=n(A$e,"STRONG",{});var wut=s(Xfe);j3o=r(wut,"splinter"),wut.forEach(t),D3o=r(A$e," \u2014 "),$D=n(A$e,"A",{href:!0});var Aut=s($D);G3o=r(Aut,"SplinterModel"),Aut.forEach(t),O3o=r(A$e," (Splinter model)"),A$e.forEach(t),V3o=i(x),Fu=n(x,"LI",{});var L$e=s(Fu);zfe=n(L$e,"STRONG",{});var Lut=s(zfe);X3o=r(Lut,"squeezebert"),Lut.forEach(t),z3o=r(L$e," \u2014 "),kD=n(L$e,"A",{href:!0});var yut=s(kD);Q3o=r(yut,"SqueezeBertModel"),yut.forEach(t),W3o=r(L$e," (SqueezeBERT model)"),L$e.forEach(t),H3o=i(x),Tu=n(x,"LI",{});var y$e=s(Tu);Qfe=n(y$e,"STRONG",{});var xut=s(Qfe);U3o=r(xut,"swin"),xut.forEach(t),J3o=r(y$e," \u2014 "),SD=n(y$e,"A",{href:!0});var $ut=s(SD);Y3o=r($ut,"SwinModel"),$ut.forEach(t),K3o=r(y$e," (Swin Transformer model)"),y$e.forEach(t),Z3o=i(x),Mu=n(x,"LI",{});var x$e=s(Mu);Wfe=n(x$e,"STRONG",{});var kut=s(Wfe);e5o=r(kut,"t5"),kut.forEach(t),o5o=r(x$e," \u2014 "),RD=n(x$e,"A",{href:!0});var Sut=s(RD);r5o=r(Sut,"T5Model"),Sut.forEach(t),t5o=r(x$e," (T5 model)"),x$e.forEach(t),a5o=i(x),Eu=n(x,"LI",{});var $$e=s(Eu);Hfe=n($$e,"STRONG",{});var Rut=s(Hfe);n5o=r(Rut,"tapas"),Rut.forEach(t),s5o=r($$e," \u2014 "),PD=n($$e,"A",{href:!0});var Put=s(PD);l5o=r(Put,"TapasModel"),Put.forEach(t),i5o=r($$e," (TAPAS model)"),$$e.forEach(t),d5o=i(x),Cu=n(x,"LI",{});var k$e=s(Cu);Ufe=n(k$e,"STRONG",{});var But=s(Ufe);c5o=r(But,"trajectory_transformer"),But.forEach(t),f5o=r(k$e," \u2014 "),BD=n(k$e,"A",{href:!0});var Iut=s(BD);m5o=r(Iut,"TrajectoryTransformerModel"),Iut.forEach(t),g5o=r(k$e," (Trajectory Transformer model)"),k$e.forEach(t),h5o=i(x),wu=n(x,"LI",{});var S$e=s(wu);Jfe=n(S$e,"STRONG",{});var Nut=s(Jfe);p5o=r(Nut,"transfo-xl"),Nut.forEach(t),_5o=r(S$e," \u2014 "),ID=n(S$e,"A",{href:!0});var qut=s(ID);u5o=r(qut,"TransfoXLModel"),qut.forEach(t),b5o=r(S$e," (Transformer-XL model)"),S$e.forEach(t),v5o=i(x),Au=n(x,"LI",{});var R$e=s(Au);Yfe=n(R$e,"STRONG",{});var jut=s(Yfe);F5o=r(jut,"unispeech"),jut.forEach(t),T5o=r(R$e," \u2014 "),ND=n(R$e,"A",{href:!0});var Dut=s(ND);M5o=r(Dut,"UniSpeechModel"),Dut.forEach(t),E5o=r(R$e," (UniSpeech model)"),R$e.forEach(t),C5o=i(x),Lu=n(x,"LI",{});var P$e=s(Lu);Kfe=n(P$e,"STRONG",{});var Gut=s(Kfe);w5o=r(Gut,"unispeech-sat"),Gut.forEach(t),A5o=r(P$e," \u2014 "),qD=n(P$e,"A",{href:!0});var Out=s(qD);L5o=r(Out,"UniSpeechSatModel"),Out.forEach(t),y5o=r(P$e," (UniSpeechSat model)"),P$e.forEach(t),x5o=i(x),yu=n(x,"LI",{});var B$e=s(yu);Zfe=n(B$e,"STRONG",{});var Vut=s(Zfe);$5o=r(Vut,"van"),Vut.forEach(t),k5o=r(B$e," \u2014 "),jD=n(B$e,"A",{href:!0});var Xut=s(jD);S5o=r(Xut,"VanModel"),Xut.forEach(t),R5o=r(B$e," (VAN model)"),B$e.forEach(t),P5o=i(x),xu=n(x,"LI",{});var I$e=s(xu);eme=n(I$e,"STRONG",{});var zut=s(eme);B5o=r(zut,"vilt"),zut.forEach(t),I5o=r(I$e," \u2014 "),DD=n(I$e,"A",{href:!0});var Qut=s(DD);N5o=r(Qut,"ViltModel"),Qut.forEach(t),q5o=r(I$e," (ViLT model)"),I$e.forEach(t),j5o=i(x),$u=n(x,"LI",{});var N$e=s($u);ome=n(N$e,"STRONG",{});var Wut=s(ome);D5o=r(Wut,"vision-text-dual-encoder"),Wut.forEach(t),G5o=r(N$e," \u2014 "),GD=n(N$e,"A",{href:!0});var Hut=s(GD);O5o=r(Hut,"VisionTextDualEncoderModel"),Hut.forEach(t),V5o=r(N$e," (VisionTextDualEncoder model)"),N$e.forEach(t),X5o=i(x),ku=n(x,"LI",{});var q$e=s(ku);rme=n(q$e,"STRONG",{});var Uut=s(rme);z5o=r(Uut,"visual_bert"),Uut.forEach(t),Q5o=r(q$e," \u2014 "),OD=n(q$e,"A",{href:!0});var Jut=s(OD);W5o=r(Jut,"VisualBertModel"),Jut.forEach(t),H5o=r(q$e," (VisualBERT model)"),q$e.forEach(t),U5o=i(x),Su=n(x,"LI",{});var j$e=s(Su);tme=n(j$e,"STRONG",{});var Yut=s(tme);J5o=r(Yut,"vit"),Yut.forEach(t),Y5o=r(j$e," \u2014 "),VD=n(j$e,"A",{href:!0});var Kut=s(VD);K5o=r(Kut,"ViTModel"),Kut.forEach(t),Z5o=r(j$e," (ViT model)"),j$e.forEach(t),ewo=i(x),Ru=n(x,"LI",{});var D$e=s(Ru);ame=n(D$e,"STRONG",{});var Zut=s(ame);owo=r(Zut,"vit_mae"),Zut.forEach(t),rwo=r(D$e," \u2014 "),XD=n(D$e,"A",{href:!0});var e1t=s(XD);two=r(e1t,"ViTMAEModel"),e1t.forEach(t),awo=r(D$e," (ViTMAE model)"),D$e.forEach(t),nwo=i(x),Pu=n(x,"LI",{});var G$e=s(Pu);nme=n(G$e,"STRONG",{});var o1t=s(nme);swo=r(o1t,"wav2vec2"),o1t.forEach(t),lwo=r(G$e," \u2014 "),zD=n(G$e,"A",{href:!0});var r1t=s(zD);iwo=r(r1t,"Wav2Vec2Model"),r1t.forEach(t),dwo=r(G$e," (Wav2Vec2 model)"),G$e.forEach(t),cwo=i(x),Bu=n(x,"LI",{});var O$e=s(Bu);sme=n(O$e,"STRONG",{});var t1t=s(sme);fwo=r(t1t,"wav2vec2-conformer"),t1t.forEach(t),mwo=r(O$e," \u2014 "),QD=n(O$e,"A",{href:!0});var a1t=s(QD);gwo=r(a1t,"Wav2Vec2ConformerModel"),a1t.forEach(t),hwo=r(O$e," (Wav2Vec2-Conformer model)"),O$e.forEach(t),pwo=i(x),Iu=n(x,"LI",{});var V$e=s(Iu);lme=n(V$e,"STRONG",{});var n1t=s(lme);_wo=r(n1t,"wavlm"),n1t.forEach(t),uwo=r(V$e," \u2014 "),WD=n(V$e,"A",{href:!0});var s1t=s(WD);bwo=r(s1t,"WavLMModel"),s1t.forEach(t),vwo=r(V$e," (WavLM model)"),V$e.forEach(t),Fwo=i(x),Nu=n(x,"LI",{});var X$e=s(Nu);ime=n(X$e,"STRONG",{});var l1t=s(ime);Two=r(l1t,"xglm"),l1t.forEach(t),Mwo=r(X$e," \u2014 "),HD=n(X$e,"A",{href:!0});var i1t=s(HD);Ewo=r(i1t,"XGLMModel"),i1t.forEach(t),Cwo=r(X$e," (XGLM model)"),X$e.forEach(t),wwo=i(x),qu=n(x,"LI",{});var z$e=s(qu);dme=n(z$e,"STRONG",{});var d1t=s(dme);Awo=r(d1t,"xlm"),d1t.forEach(t),Lwo=r(z$e," \u2014 "),UD=n(z$e,"A",{href:!0});var c1t=s(UD);ywo=r(c1t,"XLMModel"),c1t.forEach(t),xwo=r(z$e," (XLM model)"),z$e.forEach(t),$wo=i(x),ju=n(x,"LI",{});var Q$e=s(ju);cme=n(Q$e,"STRONG",{});var f1t=s(cme);kwo=r(f1t,"xlm-prophetnet"),f1t.forEach(t),Swo=r(Q$e," \u2014 "),JD=n(Q$e,"A",{href:!0});var m1t=s(JD);Rwo=r(m1t,"XLMProphetNetModel"),m1t.forEach(t),Pwo=r(Q$e," (XLM-ProphetNet model)"),Q$e.forEach(t),Bwo=i(x),Du=n(x,"LI",{});var W$e=s(Du);fme=n(W$e,"STRONG",{});var g1t=s(fme);Iwo=r(g1t,"xlm-roberta"),g1t.forEach(t),Nwo=r(W$e," \u2014 "),YD=n(W$e,"A",{href:!0});var h1t=s(YD);qwo=r(h1t,"XLMRobertaModel"),h1t.forEach(t),jwo=r(W$e," (XLM-RoBERTa model)"),W$e.forEach(t),Dwo=i(x),Gu=n(x,"LI",{});var H$e=s(Gu);mme=n(H$e,"STRONG",{});var p1t=s(mme);Gwo=r(p1t,"xlm-roberta-xl"),p1t.forEach(t),Owo=r(H$e," \u2014 "),KD=n(H$e,"A",{href:!0});var _1t=s(KD);Vwo=r(_1t,"XLMRobertaXLModel"),_1t.forEach(t),Xwo=r(H$e," (XLM-RoBERTa-XL model)"),H$e.forEach(t),zwo=i(x),Ou=n(x,"LI",{});var U$e=s(Ou);gme=n(U$e,"STRONG",{});var u1t=s(gme);Qwo=r(u1t,"xlnet"),u1t.forEach(t),Wwo=r(U$e," \u2014 "),ZD=n(U$e,"A",{href:!0});var b1t=s(ZD);Hwo=r(b1t,"XLNetModel"),b1t.forEach(t),Uwo=r(U$e," (XLNet model)"),U$e.forEach(t),Jwo=i(x),Vu=n(x,"LI",{});var J$e=s(Vu);hme=n(J$e,"STRONG",{});var v1t=s(hme);Ywo=r(v1t,"yolos"),v1t.forEach(t),Kwo=r(J$e," \u2014 "),eG=n(J$e,"A",{href:!0});var F1t=s(eG);Zwo=r(F1t,"YolosModel"),F1t.forEach(t),eAo=r(J$e," (YOLOS model)"),J$e.forEach(t),oAo=i(x),Xu=n(x,"LI",{});var Y$e=s(Xu);pme=n(Y$e,"STRONG",{});var T1t=s(pme);rAo=r(T1t,"yoso"),T1t.forEach(t),tAo=r(Y$e," \u2014 "),oG=n(Y$e,"A",{href:!0});var M1t=s(oG);aAo=r(M1t,"YosoModel"),M1t.forEach(t),nAo=r(Y$e," (YOSO model)"),Y$e.forEach(t),x.forEach(t),sAo=i(la),zu=n(la,"P",{});var K$e=s(zu);lAo=r(K$e,"The model is set in evaluation mode by default using "),_me=n(K$e,"CODE",{});var E1t=s(_me);iAo=r(E1t,"model.eval()"),E1t.forEach(t),dAo=r(K$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ume=n(K$e,"CODE",{});var C1t=s(ume);cAo=r(C1t,"model.train()"),C1t.forEach(t),K$e.forEach(t),fAo=i(la),T(Qu.$$.fragment,la),la.forEach(t),rl.forEach(t),FXe=i(f),Xi=n(f,"H2",{class:!0});var AQe=s(Xi);Wu=n(AQe,"A",{id:!0,class:!0,href:!0});var w1t=s(Wu);bme=n(w1t,"SPAN",{});var A1t=s(bme);T(NL.$$.fragment,A1t),A1t.forEach(t),w1t.forEach(t),mAo=i(AQe),vme=n(AQe,"SPAN",{});var L1t=s(vme);gAo=r(L1t,"AutoModelForPreTraining"),L1t.forEach(t),AQe.forEach(t),TXe=i(f),So=n(f,"DIV",{class:!0});var tl=s(So);T(qL.$$.fragment,tl),hAo=i(tl),zi=n(tl,"P",{});var Nre=s(zi);pAo=r(Nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),rG=n(Nre,"A",{href:!0});var y1t=s(rG);_Ao=r(y1t,"from_pretrained()"),y1t.forEach(t),uAo=r(Nre," class method or the "),tG=n(Nre,"A",{href:!0});var x1t=s(tG);bAo=r(x1t,"from_config()"),x1t.forEach(t),vAo=r(Nre,` class
method.`),Nre.forEach(t),FAo=i(tl),jL=n(tl,"P",{});var LQe=s(jL);TAo=r(LQe,"This class cannot be instantiated directly using "),Fme=n(LQe,"CODE",{});var $1t=s(Fme);MAo=r($1t,"__init__()"),$1t.forEach(t),EAo=r(LQe," (throws an error)."),LQe.forEach(t),CAo=i(tl),dt=n(tl,"DIV",{class:!0});var mA=s(dt);T(DL.$$.fragment,mA),wAo=i(mA),Tme=n(mA,"P",{});var k1t=s(Tme);AAo=r(k1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),k1t.forEach(t),LAo=i(mA),Qi=n(mA,"P",{});var qre=s(Qi);yAo=r(qre,`Note:
Loading a model from its configuration file does `),Mme=n(qre,"STRONG",{});var S1t=s(Mme);xAo=r(S1t,"not"),S1t.forEach(t),$Ao=r(qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),aG=n(qre,"A",{href:!0});var R1t=s(aG);kAo=r(R1t,"from_pretrained()"),R1t.forEach(t),SAo=r(qre," to load the model weights."),qre.forEach(t),RAo=i(mA),T(Hu.$$.fragment,mA),mA.forEach(t),PAo=i(tl),Ke=n(tl,"DIV",{class:!0});var ia=s(Ke);T(GL.$$.fragment,ia),BAo=i(ia),Eme=n(ia,"P",{});var P1t=s(Eme);IAo=r(P1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),P1t.forEach(t),NAo=i(ia),Na=n(ia,"P",{});var gA=s(Na);qAo=r(gA,"The model class to instantiate is selected based on the "),Cme=n(gA,"CODE",{});var B1t=s(Cme);jAo=r(B1t,"model_type"),B1t.forEach(t),DAo=r(gA,` property of the config object (either
passed as an argument or loaded from `),wme=n(gA,"CODE",{});var I1t=s(wme);GAo=r(I1t,"pretrained_model_name_or_path"),I1t.forEach(t),OAo=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=n(gA,"CODE",{});var N1t=s(Ame);VAo=r(N1t,"pretrained_model_name_or_path"),N1t.forEach(t),XAo=r(gA,":"),gA.forEach(t),zAo=i(ia),G=n(ia,"UL",{});var O=s(G);Uu=n(O,"LI",{});var Z$e=s(Uu);Lme=n(Z$e,"STRONG",{});var q1t=s(Lme);QAo=r(q1t,"albert"),q1t.forEach(t),WAo=r(Z$e," \u2014 "),nG=n(Z$e,"A",{href:!0});var j1t=s(nG);HAo=r(j1t,"AlbertForPreTraining"),j1t.forEach(t),UAo=r(Z$e," (ALBERT model)"),Z$e.forEach(t),JAo=i(O),Ju=n(O,"LI",{});var eke=s(Ju);yme=n(eke,"STRONG",{});var D1t=s(yme);YAo=r(D1t,"bart"),D1t.forEach(t),KAo=r(eke," \u2014 "),sG=n(eke,"A",{href:!0});var G1t=s(sG);ZAo=r(G1t,"BartForConditionalGeneration"),G1t.forEach(t),e6o=r(eke," (BART model)"),eke.forEach(t),o6o=i(O),Yu=n(O,"LI",{});var oke=s(Yu);xme=n(oke,"STRONG",{});var O1t=s(xme);r6o=r(O1t,"bert"),O1t.forEach(t),t6o=r(oke," \u2014 "),lG=n(oke,"A",{href:!0});var V1t=s(lG);a6o=r(V1t,"BertForPreTraining"),V1t.forEach(t),n6o=r(oke," (BERT model)"),oke.forEach(t),s6o=i(O),Ku=n(O,"LI",{});var rke=s(Ku);$me=n(rke,"STRONG",{});var X1t=s($me);l6o=r(X1t,"big_bird"),X1t.forEach(t),i6o=r(rke," \u2014 "),iG=n(rke,"A",{href:!0});var z1t=s(iG);d6o=r(z1t,"BigBirdForPreTraining"),z1t.forEach(t),c6o=r(rke," (BigBird model)"),rke.forEach(t),f6o=i(O),Zu=n(O,"LI",{});var tke=s(Zu);kme=n(tke,"STRONG",{});var Q1t=s(kme);m6o=r(Q1t,"bloom"),Q1t.forEach(t),g6o=r(tke," \u2014 "),dG=n(tke,"A",{href:!0});var W1t=s(dG);h6o=r(W1t,"BloomForCausalLM"),W1t.forEach(t),p6o=r(tke," (BLOOM model)"),tke.forEach(t),_6o=i(O),e1=n(O,"LI",{});var ake=s(e1);Sme=n(ake,"STRONG",{});var H1t=s(Sme);u6o=r(H1t,"camembert"),H1t.forEach(t),b6o=r(ake," \u2014 "),cG=n(ake,"A",{href:!0});var U1t=s(cG);v6o=r(U1t,"CamembertForMaskedLM"),U1t.forEach(t),F6o=r(ake," (CamemBERT model)"),ake.forEach(t),T6o=i(O),o1=n(O,"LI",{});var nke=s(o1);Rme=n(nke,"STRONG",{});var J1t=s(Rme);M6o=r(J1t,"ctrl"),J1t.forEach(t),E6o=r(nke," \u2014 "),fG=n(nke,"A",{href:!0});var Y1t=s(fG);C6o=r(Y1t,"CTRLLMHeadModel"),Y1t.forEach(t),w6o=r(nke," (CTRL model)"),nke.forEach(t),A6o=i(O),r1=n(O,"LI",{});var ske=s(r1);Pme=n(ske,"STRONG",{});var K1t=s(Pme);L6o=r(K1t,"data2vec-text"),K1t.forEach(t),y6o=r(ske," \u2014 "),mG=n(ske,"A",{href:!0});var Z1t=s(mG);x6o=r(Z1t,"Data2VecTextForMaskedLM"),Z1t.forEach(t),$6o=r(ske," (Data2VecText model)"),ske.forEach(t),k6o=i(O),t1=n(O,"LI",{});var lke=s(t1);Bme=n(lke,"STRONG",{});var e2t=s(Bme);S6o=r(e2t,"deberta"),e2t.forEach(t),R6o=r(lke," \u2014 "),gG=n(lke,"A",{href:!0});var o2t=s(gG);P6o=r(o2t,"DebertaForMaskedLM"),o2t.forEach(t),B6o=r(lke," (DeBERTa model)"),lke.forEach(t),I6o=i(O),a1=n(O,"LI",{});var ike=s(a1);Ime=n(ike,"STRONG",{});var r2t=s(Ime);N6o=r(r2t,"deberta-v2"),r2t.forEach(t),q6o=r(ike," \u2014 "),hG=n(ike,"A",{href:!0});var t2t=s(hG);j6o=r(t2t,"DebertaV2ForMaskedLM"),t2t.forEach(t),D6o=r(ike," (DeBERTa-v2 model)"),ike.forEach(t),G6o=i(O),n1=n(O,"LI",{});var dke=s(n1);Nme=n(dke,"STRONG",{});var a2t=s(Nme);O6o=r(a2t,"distilbert"),a2t.forEach(t),V6o=r(dke," \u2014 "),pG=n(dke,"A",{href:!0});var n2t=s(pG);X6o=r(n2t,"DistilBertForMaskedLM"),n2t.forEach(t),z6o=r(dke," (DistilBERT model)"),dke.forEach(t),Q6o=i(O),s1=n(O,"LI",{});var cke=s(s1);qme=n(cke,"STRONG",{});var s2t=s(qme);W6o=r(s2t,"electra"),s2t.forEach(t),H6o=r(cke," \u2014 "),_G=n(cke,"A",{href:!0});var l2t=s(_G);U6o=r(l2t,"ElectraForPreTraining"),l2t.forEach(t),J6o=r(cke," (ELECTRA model)"),cke.forEach(t),Y6o=i(O),l1=n(O,"LI",{});var fke=s(l1);jme=n(fke,"STRONG",{});var i2t=s(jme);K6o=r(i2t,"flaubert"),i2t.forEach(t),Z6o=r(fke," \u2014 "),uG=n(fke,"A",{href:!0});var d2t=s(uG);eLo=r(d2t,"FlaubertWithLMHeadModel"),d2t.forEach(t),oLo=r(fke," (FlauBERT model)"),fke.forEach(t),rLo=i(O),i1=n(O,"LI",{});var mke=s(i1);Dme=n(mke,"STRONG",{});var c2t=s(Dme);tLo=r(c2t,"flava"),c2t.forEach(t),aLo=r(mke," \u2014 "),bG=n(mke,"A",{href:!0});var f2t=s(bG);nLo=r(f2t,"FlavaForPreTraining"),f2t.forEach(t),sLo=r(mke," (FLAVA model)"),mke.forEach(t),lLo=i(O),d1=n(O,"LI",{});var gke=s(d1);Gme=n(gke,"STRONG",{});var m2t=s(Gme);iLo=r(m2t,"fnet"),m2t.forEach(t),dLo=r(gke," \u2014 "),vG=n(gke,"A",{href:!0});var g2t=s(vG);cLo=r(g2t,"FNetForPreTraining"),g2t.forEach(t),fLo=r(gke," (FNet model)"),gke.forEach(t),mLo=i(O),c1=n(O,"LI",{});var hke=s(c1);Ome=n(hke,"STRONG",{});var h2t=s(Ome);gLo=r(h2t,"fsmt"),h2t.forEach(t),hLo=r(hke," \u2014 "),FG=n(hke,"A",{href:!0});var p2t=s(FG);pLo=r(p2t,"FSMTForConditionalGeneration"),p2t.forEach(t),_Lo=r(hke," (FairSeq Machine-Translation model)"),hke.forEach(t),uLo=i(O),f1=n(O,"LI",{});var pke=s(f1);Vme=n(pke,"STRONG",{});var _2t=s(Vme);bLo=r(_2t,"funnel"),_2t.forEach(t),vLo=r(pke," \u2014 "),TG=n(pke,"A",{href:!0});var u2t=s(TG);FLo=r(u2t,"FunnelForPreTraining"),u2t.forEach(t),TLo=r(pke," (Funnel Transformer model)"),pke.forEach(t),MLo=i(O),m1=n(O,"LI",{});var _ke=s(m1);Xme=n(_ke,"STRONG",{});var b2t=s(Xme);ELo=r(b2t,"gpt2"),b2t.forEach(t),CLo=r(_ke," \u2014 "),MG=n(_ke,"A",{href:!0});var v2t=s(MG);wLo=r(v2t,"GPT2LMHeadModel"),v2t.forEach(t),ALo=r(_ke," (OpenAI GPT-2 model)"),_ke.forEach(t),LLo=i(O),g1=n(O,"LI",{});var uke=s(g1);zme=n(uke,"STRONG",{});var F2t=s(zme);yLo=r(F2t,"ibert"),F2t.forEach(t),xLo=r(uke," \u2014 "),EG=n(uke,"A",{href:!0});var T2t=s(EG);$Lo=r(T2t,"IBertForMaskedLM"),T2t.forEach(t),kLo=r(uke," (I-BERT model)"),uke.forEach(t),SLo=i(O),h1=n(O,"LI",{});var bke=s(h1);Qme=n(bke,"STRONG",{});var M2t=s(Qme);RLo=r(M2t,"layoutlm"),M2t.forEach(t),PLo=r(bke," \u2014 "),CG=n(bke,"A",{href:!0});var E2t=s(CG);BLo=r(E2t,"LayoutLMForMaskedLM"),E2t.forEach(t),ILo=r(bke," (LayoutLM model)"),bke.forEach(t),NLo=i(O),p1=n(O,"LI",{});var vke=s(p1);Wme=n(vke,"STRONG",{});var C2t=s(Wme);qLo=r(C2t,"longformer"),C2t.forEach(t),jLo=r(vke," \u2014 "),wG=n(vke,"A",{href:!0});var w2t=s(wG);DLo=r(w2t,"LongformerForMaskedLM"),w2t.forEach(t),GLo=r(vke," (Longformer model)"),vke.forEach(t),OLo=i(O),_1=n(O,"LI",{});var Fke=s(_1);Hme=n(Fke,"STRONG",{});var A2t=s(Hme);VLo=r(A2t,"lxmert"),A2t.forEach(t),XLo=r(Fke," \u2014 "),AG=n(Fke,"A",{href:!0});var L2t=s(AG);zLo=r(L2t,"LxmertForPreTraining"),L2t.forEach(t),QLo=r(Fke," (LXMERT model)"),Fke.forEach(t),WLo=i(O),u1=n(O,"LI",{});var Tke=s(u1);Ume=n(Tke,"STRONG",{});var y2t=s(Ume);HLo=r(y2t,"megatron-bert"),y2t.forEach(t),ULo=r(Tke," \u2014 "),LG=n(Tke,"A",{href:!0});var x2t=s(LG);JLo=r(x2t,"MegatronBertForPreTraining"),x2t.forEach(t),YLo=r(Tke," (Megatron-BERT model)"),Tke.forEach(t),KLo=i(O),b1=n(O,"LI",{});var Mke=s(b1);Jme=n(Mke,"STRONG",{});var $2t=s(Jme);ZLo=r($2t,"mobilebert"),$2t.forEach(t),eyo=r(Mke," \u2014 "),yG=n(Mke,"A",{href:!0});var k2t=s(yG);oyo=r(k2t,"MobileBertForPreTraining"),k2t.forEach(t),ryo=r(Mke," (MobileBERT model)"),Mke.forEach(t),tyo=i(O),v1=n(O,"LI",{});var Eke=s(v1);Yme=n(Eke,"STRONG",{});var S2t=s(Yme);ayo=r(S2t,"mpnet"),S2t.forEach(t),nyo=r(Eke," \u2014 "),xG=n(Eke,"A",{href:!0});var R2t=s(xG);syo=r(R2t,"MPNetForMaskedLM"),R2t.forEach(t),lyo=r(Eke," (MPNet model)"),Eke.forEach(t),iyo=i(O),F1=n(O,"LI",{});var Cke=s(F1);Kme=n(Cke,"STRONG",{});var P2t=s(Kme);dyo=r(P2t,"mvp"),P2t.forEach(t),cyo=r(Cke," \u2014 "),$G=n(Cke,"A",{href:!0});var B2t=s($G);fyo=r(B2t,"MvpForConditionalGeneration"),B2t.forEach(t),myo=r(Cke," (MVP model)"),Cke.forEach(t),gyo=i(O),T1=n(O,"LI",{});var wke=s(T1);Zme=n(wke,"STRONG",{});var I2t=s(Zme);hyo=r(I2t,"nezha"),I2t.forEach(t),pyo=r(wke," \u2014 "),kG=n(wke,"A",{href:!0});var N2t=s(kG);_yo=r(N2t,"NezhaForPreTraining"),N2t.forEach(t),uyo=r(wke," (Nezha model)"),wke.forEach(t),byo=i(O),M1=n(O,"LI",{});var Ake=s(M1);ege=n(Ake,"STRONG",{});var q2t=s(ege);vyo=r(q2t,"openai-gpt"),q2t.forEach(t),Fyo=r(Ake," \u2014 "),SG=n(Ake,"A",{href:!0});var j2t=s(SG);Tyo=r(j2t,"OpenAIGPTLMHeadModel"),j2t.forEach(t),Myo=r(Ake," (OpenAI GPT model)"),Ake.forEach(t),Eyo=i(O),E1=n(O,"LI",{});var Lke=s(E1);oge=n(Lke,"STRONG",{});var D2t=s(oge);Cyo=r(D2t,"retribert"),D2t.forEach(t),wyo=r(Lke," \u2014 "),RG=n(Lke,"A",{href:!0});var G2t=s(RG);Ayo=r(G2t,"RetriBertModel"),G2t.forEach(t),Lyo=r(Lke," (RetriBERT model)"),Lke.forEach(t),yyo=i(O),C1=n(O,"LI",{});var yke=s(C1);rge=n(yke,"STRONG",{});var O2t=s(rge);xyo=r(O2t,"roberta"),O2t.forEach(t),$yo=r(yke," \u2014 "),PG=n(yke,"A",{href:!0});var V2t=s(PG);kyo=r(V2t,"RobertaForMaskedLM"),V2t.forEach(t),Syo=r(yke," (RoBERTa model)"),yke.forEach(t),Ryo=i(O),w1=n(O,"LI",{});var xke=s(w1);tge=n(xke,"STRONG",{});var X2t=s(tge);Pyo=r(X2t,"splinter"),X2t.forEach(t),Byo=r(xke," \u2014 "),BG=n(xke,"A",{href:!0});var z2t=s(BG);Iyo=r(z2t,"SplinterForPreTraining"),z2t.forEach(t),Nyo=r(xke," (Splinter model)"),xke.forEach(t),qyo=i(O),A1=n(O,"LI",{});var $ke=s(A1);age=n($ke,"STRONG",{});var Q2t=s(age);jyo=r(Q2t,"squeezebert"),Q2t.forEach(t),Dyo=r($ke," \u2014 "),IG=n($ke,"A",{href:!0});var W2t=s(IG);Gyo=r(W2t,"SqueezeBertForMaskedLM"),W2t.forEach(t),Oyo=r($ke," (SqueezeBERT model)"),$ke.forEach(t),Vyo=i(O),L1=n(O,"LI",{});var kke=s(L1);nge=n(kke,"STRONG",{});var H2t=s(nge);Xyo=r(H2t,"t5"),H2t.forEach(t),zyo=r(kke," \u2014 "),NG=n(kke,"A",{href:!0});var U2t=s(NG);Qyo=r(U2t,"T5ForConditionalGeneration"),U2t.forEach(t),Wyo=r(kke," (T5 model)"),kke.forEach(t),Hyo=i(O),y1=n(O,"LI",{});var Ske=s(y1);sge=n(Ske,"STRONG",{});var J2t=s(sge);Uyo=r(J2t,"tapas"),J2t.forEach(t),Jyo=r(Ske," \u2014 "),qG=n(Ske,"A",{href:!0});var Y2t=s(qG);Yyo=r(Y2t,"TapasForMaskedLM"),Y2t.forEach(t),Kyo=r(Ske," (TAPAS model)"),Ske.forEach(t),Zyo=i(O),x1=n(O,"LI",{});var Rke=s(x1);lge=n(Rke,"STRONG",{});var K2t=s(lge);e8o=r(K2t,"transfo-xl"),K2t.forEach(t),o8o=r(Rke," \u2014 "),jG=n(Rke,"A",{href:!0});var Z2t=s(jG);r8o=r(Z2t,"TransfoXLLMHeadModel"),Z2t.forEach(t),t8o=r(Rke," (Transformer-XL model)"),Rke.forEach(t),a8o=i(O),$1=n(O,"LI",{});var Pke=s($1);ige=n(Pke,"STRONG",{});var ebt=s(ige);n8o=r(ebt,"unispeech"),ebt.forEach(t),s8o=r(Pke," \u2014 "),DG=n(Pke,"A",{href:!0});var obt=s(DG);l8o=r(obt,"UniSpeechForPreTraining"),obt.forEach(t),i8o=r(Pke," (UniSpeech model)"),Pke.forEach(t),d8o=i(O),k1=n(O,"LI",{});var Bke=s(k1);dge=n(Bke,"STRONG",{});var rbt=s(dge);c8o=r(rbt,"unispeech-sat"),rbt.forEach(t),f8o=r(Bke," \u2014 "),GG=n(Bke,"A",{href:!0});var tbt=s(GG);m8o=r(tbt,"UniSpeechSatForPreTraining"),tbt.forEach(t),g8o=r(Bke," (UniSpeechSat model)"),Bke.forEach(t),h8o=i(O),S1=n(O,"LI",{});var Ike=s(S1);cge=n(Ike,"STRONG",{});var abt=s(cge);p8o=r(abt,"visual_bert"),abt.forEach(t),_8o=r(Ike," \u2014 "),OG=n(Ike,"A",{href:!0});var nbt=s(OG);u8o=r(nbt,"VisualBertForPreTraining"),nbt.forEach(t),b8o=r(Ike," (VisualBERT model)"),Ike.forEach(t),v8o=i(O),R1=n(O,"LI",{});var Nke=s(R1);fge=n(Nke,"STRONG",{});var sbt=s(fge);F8o=r(sbt,"vit_mae"),sbt.forEach(t),T8o=r(Nke," \u2014 "),VG=n(Nke,"A",{href:!0});var lbt=s(VG);M8o=r(lbt,"ViTMAEForPreTraining"),lbt.forEach(t),E8o=r(Nke," (ViTMAE model)"),Nke.forEach(t),C8o=i(O),P1=n(O,"LI",{});var qke=s(P1);mge=n(qke,"STRONG",{});var ibt=s(mge);w8o=r(ibt,"wav2vec2"),ibt.forEach(t),A8o=r(qke," \u2014 "),XG=n(qke,"A",{href:!0});var dbt=s(XG);L8o=r(dbt,"Wav2Vec2ForPreTraining"),dbt.forEach(t),y8o=r(qke," (Wav2Vec2 model)"),qke.forEach(t),x8o=i(O),B1=n(O,"LI",{});var jke=s(B1);gge=n(jke,"STRONG",{});var cbt=s(gge);$8o=r(cbt,"wav2vec2-conformer"),cbt.forEach(t),k8o=r(jke," \u2014 "),zG=n(jke,"A",{href:!0});var fbt=s(zG);S8o=r(fbt,"Wav2Vec2ConformerForPreTraining"),fbt.forEach(t),R8o=r(jke," (Wav2Vec2-Conformer model)"),jke.forEach(t),P8o=i(O),I1=n(O,"LI",{});var Dke=s(I1);hge=n(Dke,"STRONG",{});var mbt=s(hge);B8o=r(mbt,"xlm"),mbt.forEach(t),I8o=r(Dke," \u2014 "),QG=n(Dke,"A",{href:!0});var gbt=s(QG);N8o=r(gbt,"XLMWithLMHeadModel"),gbt.forEach(t),q8o=r(Dke," (XLM model)"),Dke.forEach(t),j8o=i(O),N1=n(O,"LI",{});var Gke=s(N1);pge=n(Gke,"STRONG",{});var hbt=s(pge);D8o=r(hbt,"xlm-roberta"),hbt.forEach(t),G8o=r(Gke," \u2014 "),WG=n(Gke,"A",{href:!0});var pbt=s(WG);O8o=r(pbt,"XLMRobertaForMaskedLM"),pbt.forEach(t),V8o=r(Gke," (XLM-RoBERTa model)"),Gke.forEach(t),X8o=i(O),q1=n(O,"LI",{});var Oke=s(q1);_ge=n(Oke,"STRONG",{});var _bt=s(_ge);z8o=r(_bt,"xlm-roberta-xl"),_bt.forEach(t),Q8o=r(Oke," \u2014 "),HG=n(Oke,"A",{href:!0});var ubt=s(HG);W8o=r(ubt,"XLMRobertaXLForMaskedLM"),ubt.forEach(t),H8o=r(Oke," (XLM-RoBERTa-XL model)"),Oke.forEach(t),U8o=i(O),j1=n(O,"LI",{});var Vke=s(j1);uge=n(Vke,"STRONG",{});var bbt=s(uge);J8o=r(bbt,"xlnet"),bbt.forEach(t),Y8o=r(Vke," \u2014 "),UG=n(Vke,"A",{href:!0});var vbt=s(UG);K8o=r(vbt,"XLNetLMHeadModel"),vbt.forEach(t),Z8o=r(Vke," (XLNet model)"),Vke.forEach(t),O.forEach(t),exo=i(ia),D1=n(ia,"P",{});var Xke=s(D1);oxo=r(Xke,"The model is set in evaluation mode by default using "),bge=n(Xke,"CODE",{});var Fbt=s(bge);rxo=r(Fbt,"model.eval()"),Fbt.forEach(t),txo=r(Xke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vge=n(Xke,"CODE",{});var Tbt=s(vge);axo=r(Tbt,"model.train()"),Tbt.forEach(t),Xke.forEach(t),nxo=i(ia),T(G1.$$.fragment,ia),ia.forEach(t),tl.forEach(t),MXe=i(f),Wi=n(f,"H2",{class:!0});var yQe=s(Wi);O1=n(yQe,"A",{id:!0,class:!0,href:!0});var Mbt=s(O1);Fge=n(Mbt,"SPAN",{});var Ebt=s(Fge);T(OL.$$.fragment,Ebt),Ebt.forEach(t),Mbt.forEach(t),sxo=i(yQe),Tge=n(yQe,"SPAN",{});var Cbt=s(Tge);lxo=r(Cbt,"AutoModelForCausalLM"),Cbt.forEach(t),yQe.forEach(t),EXe=i(f),Ro=n(f,"DIV",{class:!0});var al=s(Ro);T(VL.$$.fragment,al),ixo=i(al),Hi=n(al,"P",{});var jre=s(Hi);dxo=r(jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JG=n(jre,"A",{href:!0});var wbt=s(JG);cxo=r(wbt,"from_pretrained()"),wbt.forEach(t),fxo=r(jre," class method or the "),YG=n(jre,"A",{href:!0});var Abt=s(YG);mxo=r(Abt,"from_config()"),Abt.forEach(t),gxo=r(jre,` class
method.`),jre.forEach(t),hxo=i(al),XL=n(al,"P",{});var xQe=s(XL);pxo=r(xQe,"This class cannot be instantiated directly using "),Mge=n(xQe,"CODE",{});var Lbt=s(Mge);_xo=r(Lbt,"__init__()"),Lbt.forEach(t),uxo=r(xQe," (throws an error)."),xQe.forEach(t),bxo=i(al),ct=n(al,"DIV",{class:!0});var hA=s(ct);T(zL.$$.fragment,hA),vxo=i(hA),Ege=n(hA,"P",{});var ybt=s(Ege);Fxo=r(ybt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ybt.forEach(t),Txo=i(hA),Ui=n(hA,"P",{});var Dre=s(Ui);Mxo=r(Dre,`Note:
Loading a model from its configuration file does `),Cge=n(Dre,"STRONG",{});var xbt=s(Cge);Exo=r(xbt,"not"),xbt.forEach(t),Cxo=r(Dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=n(Dre,"A",{href:!0});var $bt=s(KG);wxo=r($bt,"from_pretrained()"),$bt.forEach(t),Axo=r(Dre," to load the model weights."),Dre.forEach(t),Lxo=i(hA),T(V1.$$.fragment,hA),hA.forEach(t),yxo=i(al),Ze=n(al,"DIV",{class:!0});var da=s(Ze);T(QL.$$.fragment,da),xxo=i(da),wge=n(da,"P",{});var kbt=s(wge);$xo=r(kbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kbt.forEach(t),kxo=i(da),qa=n(da,"P",{});var pA=s(qa);Sxo=r(pA,"The model class to instantiate is selected based on the "),Age=n(pA,"CODE",{});var Sbt=s(Age);Rxo=r(Sbt,"model_type"),Sbt.forEach(t),Pxo=r(pA,` property of the config object (either
passed as an argument or loaded from `),Lge=n(pA,"CODE",{});var Rbt=s(Lge);Bxo=r(Rbt,"pretrained_model_name_or_path"),Rbt.forEach(t),Ixo=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=n(pA,"CODE",{});var Pbt=s(yge);Nxo=r(Pbt,"pretrained_model_name_or_path"),Pbt.forEach(t),qxo=r(pA,":"),pA.forEach(t),jxo=i(da),z=n(da,"UL",{});var Q=s(z);X1=n(Q,"LI",{});var zke=s(X1);xge=n(zke,"STRONG",{});var Bbt=s(xge);Dxo=r(Bbt,"bart"),Bbt.forEach(t),Gxo=r(zke," \u2014 "),ZG=n(zke,"A",{href:!0});var Ibt=s(ZG);Oxo=r(Ibt,"BartForCausalLM"),Ibt.forEach(t),Vxo=r(zke," (BART model)"),zke.forEach(t),Xxo=i(Q),z1=n(Q,"LI",{});var Qke=s(z1);$ge=n(Qke,"STRONG",{});var Nbt=s($ge);zxo=r(Nbt,"bert"),Nbt.forEach(t),Qxo=r(Qke," \u2014 "),eO=n(Qke,"A",{href:!0});var qbt=s(eO);Wxo=r(qbt,"BertLMHeadModel"),qbt.forEach(t),Hxo=r(Qke," (BERT model)"),Qke.forEach(t),Uxo=i(Q),Q1=n(Q,"LI",{});var Wke=s(Q1);kge=n(Wke,"STRONG",{});var jbt=s(kge);Jxo=r(jbt,"bert-generation"),jbt.forEach(t),Yxo=r(Wke," \u2014 "),oO=n(Wke,"A",{href:!0});var Dbt=s(oO);Kxo=r(Dbt,"BertGenerationDecoder"),Dbt.forEach(t),Zxo=r(Wke," (Bert Generation model)"),Wke.forEach(t),e$o=i(Q),W1=n(Q,"LI",{});var Hke=s(W1);Sge=n(Hke,"STRONG",{});var Gbt=s(Sge);o$o=r(Gbt,"big_bird"),Gbt.forEach(t),r$o=r(Hke," \u2014 "),rO=n(Hke,"A",{href:!0});var Obt=s(rO);t$o=r(Obt,"BigBirdForCausalLM"),Obt.forEach(t),a$o=r(Hke," (BigBird model)"),Hke.forEach(t),n$o=i(Q),H1=n(Q,"LI",{});var Uke=s(H1);Rge=n(Uke,"STRONG",{});var Vbt=s(Rge);s$o=r(Vbt,"bigbird_pegasus"),Vbt.forEach(t),l$o=r(Uke," \u2014 "),tO=n(Uke,"A",{href:!0});var Xbt=s(tO);i$o=r(Xbt,"BigBirdPegasusForCausalLM"),Xbt.forEach(t),d$o=r(Uke," (BigBird-Pegasus model)"),Uke.forEach(t),c$o=i(Q),U1=n(Q,"LI",{});var Jke=s(U1);Pge=n(Jke,"STRONG",{});var zbt=s(Pge);f$o=r(zbt,"blenderbot"),zbt.forEach(t),m$o=r(Jke," \u2014 "),aO=n(Jke,"A",{href:!0});var Qbt=s(aO);g$o=r(Qbt,"BlenderbotForCausalLM"),Qbt.forEach(t),h$o=r(Jke," (Blenderbot model)"),Jke.forEach(t),p$o=i(Q),J1=n(Q,"LI",{});var Yke=s(J1);Bge=n(Yke,"STRONG",{});var Wbt=s(Bge);_$o=r(Wbt,"blenderbot-small"),Wbt.forEach(t),u$o=r(Yke," \u2014 "),nO=n(Yke,"A",{href:!0});var Hbt=s(nO);b$o=r(Hbt,"BlenderbotSmallForCausalLM"),Hbt.forEach(t),v$o=r(Yke," (BlenderbotSmall model)"),Yke.forEach(t),F$o=i(Q),Y1=n(Q,"LI",{});var Kke=s(Y1);Ige=n(Kke,"STRONG",{});var Ubt=s(Ige);T$o=r(Ubt,"bloom"),Ubt.forEach(t),M$o=r(Kke," \u2014 "),sO=n(Kke,"A",{href:!0});var Jbt=s(sO);E$o=r(Jbt,"BloomForCausalLM"),Jbt.forEach(t),C$o=r(Kke," (BLOOM model)"),Kke.forEach(t),w$o=i(Q),K1=n(Q,"LI",{});var Zke=s(K1);Nge=n(Zke,"STRONG",{});var Ybt=s(Nge);A$o=r(Ybt,"camembert"),Ybt.forEach(t),L$o=r(Zke," \u2014 "),lO=n(Zke,"A",{href:!0});var Kbt=s(lO);y$o=r(Kbt,"CamembertForCausalLM"),Kbt.forEach(t),x$o=r(Zke," (CamemBERT model)"),Zke.forEach(t),$$o=i(Q),Z1=n(Q,"LI",{});var eSe=s(Z1);qge=n(eSe,"STRONG",{});var Zbt=s(qge);k$o=r(Zbt,"codegen"),Zbt.forEach(t),S$o=r(eSe," \u2014 "),iO=n(eSe,"A",{href:!0});var evt=s(iO);R$o=r(evt,"CodeGenForCausalLM"),evt.forEach(t),P$o=r(eSe," (CodeGen model)"),eSe.forEach(t),B$o=i(Q),e2=n(Q,"LI",{});var oSe=s(e2);jge=n(oSe,"STRONG",{});var ovt=s(jge);I$o=r(ovt,"ctrl"),ovt.forEach(t),N$o=r(oSe," \u2014 "),dO=n(oSe,"A",{href:!0});var rvt=s(dO);q$o=r(rvt,"CTRLLMHeadModel"),rvt.forEach(t),j$o=r(oSe," (CTRL model)"),oSe.forEach(t),D$o=i(Q),o2=n(Q,"LI",{});var rSe=s(o2);Dge=n(rSe,"STRONG",{});var tvt=s(Dge);G$o=r(tvt,"data2vec-text"),tvt.forEach(t),O$o=r(rSe," \u2014 "),cO=n(rSe,"A",{href:!0});var avt=s(cO);V$o=r(avt,"Data2VecTextForCausalLM"),avt.forEach(t),X$o=r(rSe," (Data2VecText model)"),rSe.forEach(t),z$o=i(Q),r2=n(Q,"LI",{});var tSe=s(r2);Gge=n(tSe,"STRONG",{});var nvt=s(Gge);Q$o=r(nvt,"electra"),nvt.forEach(t),W$o=r(tSe," \u2014 "),fO=n(tSe,"A",{href:!0});var svt=s(fO);H$o=r(svt,"ElectraForCausalLM"),svt.forEach(t),U$o=r(tSe," (ELECTRA model)"),tSe.forEach(t),J$o=i(Q),t2=n(Q,"LI",{});var aSe=s(t2);Oge=n(aSe,"STRONG",{});var lvt=s(Oge);Y$o=r(lvt,"gpt2"),lvt.forEach(t),K$o=r(aSe," \u2014 "),mO=n(aSe,"A",{href:!0});var ivt=s(mO);Z$o=r(ivt,"GPT2LMHeadModel"),ivt.forEach(t),eko=r(aSe," (OpenAI GPT-2 model)"),aSe.forEach(t),oko=i(Q),a2=n(Q,"LI",{});var nSe=s(a2);Vge=n(nSe,"STRONG",{});var dvt=s(Vge);rko=r(dvt,"gpt_neo"),dvt.forEach(t),tko=r(nSe," \u2014 "),gO=n(nSe,"A",{href:!0});var cvt=s(gO);ako=r(cvt,"GPTNeoForCausalLM"),cvt.forEach(t),nko=r(nSe," (GPT Neo model)"),nSe.forEach(t),sko=i(Q),n2=n(Q,"LI",{});var sSe=s(n2);Xge=n(sSe,"STRONG",{});var fvt=s(Xge);lko=r(fvt,"gpt_neox"),fvt.forEach(t),iko=r(sSe," \u2014 "),hO=n(sSe,"A",{href:!0});var mvt=s(hO);dko=r(mvt,"GPTNeoXForCausalLM"),mvt.forEach(t),cko=r(sSe," (GPT NeoX model)"),sSe.forEach(t),fko=i(Q),s2=n(Q,"LI",{});var lSe=s(s2);zge=n(lSe,"STRONG",{});var gvt=s(zge);mko=r(gvt,"gptj"),gvt.forEach(t),gko=r(lSe," \u2014 "),pO=n(lSe,"A",{href:!0});var hvt=s(pO);hko=r(hvt,"GPTJForCausalLM"),hvt.forEach(t),pko=r(lSe," (GPT-J model)"),lSe.forEach(t),_ko=i(Q),l2=n(Q,"LI",{});var iSe=s(l2);Qge=n(iSe,"STRONG",{});var pvt=s(Qge);uko=r(pvt,"marian"),pvt.forEach(t),bko=r(iSe," \u2014 "),_O=n(iSe,"A",{href:!0});var _vt=s(_O);vko=r(_vt,"MarianForCausalLM"),_vt.forEach(t),Fko=r(iSe," (Marian model)"),iSe.forEach(t),Tko=i(Q),i2=n(Q,"LI",{});var dSe=s(i2);Wge=n(dSe,"STRONG",{});var uvt=s(Wge);Mko=r(uvt,"mbart"),uvt.forEach(t),Eko=r(dSe," \u2014 "),uO=n(dSe,"A",{href:!0});var bvt=s(uO);Cko=r(bvt,"MBartForCausalLM"),bvt.forEach(t),wko=r(dSe," (mBART model)"),dSe.forEach(t),Ako=i(Q),d2=n(Q,"LI",{});var cSe=s(d2);Hge=n(cSe,"STRONG",{});var vvt=s(Hge);Lko=r(vvt,"megatron-bert"),vvt.forEach(t),yko=r(cSe," \u2014 "),bO=n(cSe,"A",{href:!0});var Fvt=s(bO);xko=r(Fvt,"MegatronBertForCausalLM"),Fvt.forEach(t),$ko=r(cSe," (Megatron-BERT model)"),cSe.forEach(t),kko=i(Q),c2=n(Q,"LI",{});var fSe=s(c2);Uge=n(fSe,"STRONG",{});var Tvt=s(Uge);Sko=r(Tvt,"mvp"),Tvt.forEach(t),Rko=r(fSe," \u2014 "),vO=n(fSe,"A",{href:!0});var Mvt=s(vO);Pko=r(Mvt,"MvpForCausalLM"),Mvt.forEach(t),Bko=r(fSe," (MVP model)"),fSe.forEach(t),Iko=i(Q),f2=n(Q,"LI",{});var mSe=s(f2);Jge=n(mSe,"STRONG",{});var Evt=s(Jge);Nko=r(Evt,"openai-gpt"),Evt.forEach(t),qko=r(mSe," \u2014 "),FO=n(mSe,"A",{href:!0});var Cvt=s(FO);jko=r(Cvt,"OpenAIGPTLMHeadModel"),Cvt.forEach(t),Dko=r(mSe," (OpenAI GPT model)"),mSe.forEach(t),Gko=i(Q),m2=n(Q,"LI",{});var gSe=s(m2);Yge=n(gSe,"STRONG",{});var wvt=s(Yge);Oko=r(wvt,"opt"),wvt.forEach(t),Vko=r(gSe," \u2014 "),TO=n(gSe,"A",{href:!0});var Avt=s(TO);Xko=r(Avt,"OPTForCausalLM"),Avt.forEach(t),zko=r(gSe," (OPT model)"),gSe.forEach(t),Qko=i(Q),g2=n(Q,"LI",{});var hSe=s(g2);Kge=n(hSe,"STRONG",{});var Lvt=s(Kge);Wko=r(Lvt,"pegasus"),Lvt.forEach(t),Hko=r(hSe," \u2014 "),MO=n(hSe,"A",{href:!0});var yvt=s(MO);Uko=r(yvt,"PegasusForCausalLM"),yvt.forEach(t),Jko=r(hSe," (Pegasus model)"),hSe.forEach(t),Yko=i(Q),h2=n(Q,"LI",{});var pSe=s(h2);Zge=n(pSe,"STRONG",{});var xvt=s(Zge);Kko=r(xvt,"plbart"),xvt.forEach(t),Zko=r(pSe," \u2014 "),EO=n(pSe,"A",{href:!0});var $vt=s(EO);eSo=r($vt,"PLBartForCausalLM"),$vt.forEach(t),oSo=r(pSe," (PLBart model)"),pSe.forEach(t),rSo=i(Q),p2=n(Q,"LI",{});var _Se=s(p2);ehe=n(_Se,"STRONG",{});var kvt=s(ehe);tSo=r(kvt,"prophetnet"),kvt.forEach(t),aSo=r(_Se," \u2014 "),CO=n(_Se,"A",{href:!0});var Svt=s(CO);nSo=r(Svt,"ProphetNetForCausalLM"),Svt.forEach(t),sSo=r(_Se," (ProphetNet model)"),_Se.forEach(t),lSo=i(Q),_2=n(Q,"LI",{});var uSe=s(_2);ohe=n(uSe,"STRONG",{});var Rvt=s(ohe);iSo=r(Rvt,"qdqbert"),Rvt.forEach(t),dSo=r(uSe," \u2014 "),wO=n(uSe,"A",{href:!0});var Pvt=s(wO);cSo=r(Pvt,"QDQBertLMHeadModel"),Pvt.forEach(t),fSo=r(uSe," (QDQBert model)"),uSe.forEach(t),mSo=i(Q),u2=n(Q,"LI",{});var bSe=s(u2);rhe=n(bSe,"STRONG",{});var Bvt=s(rhe);gSo=r(Bvt,"reformer"),Bvt.forEach(t),hSo=r(bSe," \u2014 "),AO=n(bSe,"A",{href:!0});var Ivt=s(AO);pSo=r(Ivt,"ReformerModelWithLMHead"),Ivt.forEach(t),_So=r(bSe," (Reformer model)"),bSe.forEach(t),uSo=i(Q),b2=n(Q,"LI",{});var vSe=s(b2);the=n(vSe,"STRONG",{});var Nvt=s(the);bSo=r(Nvt,"rembert"),Nvt.forEach(t),vSo=r(vSe," \u2014 "),LO=n(vSe,"A",{href:!0});var qvt=s(LO);FSo=r(qvt,"RemBertForCausalLM"),qvt.forEach(t),TSo=r(vSe," (RemBERT model)"),vSe.forEach(t),MSo=i(Q),v2=n(Q,"LI",{});var FSe=s(v2);ahe=n(FSe,"STRONG",{});var jvt=s(ahe);ESo=r(jvt,"roberta"),jvt.forEach(t),CSo=r(FSe," \u2014 "),yO=n(FSe,"A",{href:!0});var Dvt=s(yO);wSo=r(Dvt,"RobertaForCausalLM"),Dvt.forEach(t),ASo=r(FSe," (RoBERTa model)"),FSe.forEach(t),LSo=i(Q),F2=n(Q,"LI",{});var TSe=s(F2);nhe=n(TSe,"STRONG",{});var Gvt=s(nhe);ySo=r(Gvt,"roformer"),Gvt.forEach(t),xSo=r(TSe," \u2014 "),xO=n(TSe,"A",{href:!0});var Ovt=s(xO);$So=r(Ovt,"RoFormerForCausalLM"),Ovt.forEach(t),kSo=r(TSe," (RoFormer model)"),TSe.forEach(t),SSo=i(Q),T2=n(Q,"LI",{});var MSe=s(T2);she=n(MSe,"STRONG",{});var Vvt=s(she);RSo=r(Vvt,"speech_to_text_2"),Vvt.forEach(t),PSo=r(MSe," \u2014 "),$O=n(MSe,"A",{href:!0});var Xvt=s($O);BSo=r(Xvt,"Speech2Text2ForCausalLM"),Xvt.forEach(t),ISo=r(MSe," (Speech2Text2 model)"),MSe.forEach(t),NSo=i(Q),M2=n(Q,"LI",{});var ESe=s(M2);lhe=n(ESe,"STRONG",{});var zvt=s(lhe);qSo=r(zvt,"transfo-xl"),zvt.forEach(t),jSo=r(ESe," \u2014 "),kO=n(ESe,"A",{href:!0});var Qvt=s(kO);DSo=r(Qvt,"TransfoXLLMHeadModel"),Qvt.forEach(t),GSo=r(ESe," (Transformer-XL model)"),ESe.forEach(t),OSo=i(Q),E2=n(Q,"LI",{});var CSe=s(E2);ihe=n(CSe,"STRONG",{});var Wvt=s(ihe);VSo=r(Wvt,"trocr"),Wvt.forEach(t),XSo=r(CSe," \u2014 "),SO=n(CSe,"A",{href:!0});var Hvt=s(SO);zSo=r(Hvt,"TrOCRForCausalLM"),Hvt.forEach(t),QSo=r(CSe," (TrOCR model)"),CSe.forEach(t),WSo=i(Q),C2=n(Q,"LI",{});var wSe=s(C2);dhe=n(wSe,"STRONG",{});var Uvt=s(dhe);HSo=r(Uvt,"xglm"),Uvt.forEach(t),USo=r(wSe," \u2014 "),RO=n(wSe,"A",{href:!0});var Jvt=s(RO);JSo=r(Jvt,"XGLMForCausalLM"),Jvt.forEach(t),YSo=r(wSe," (XGLM model)"),wSe.forEach(t),KSo=i(Q),w2=n(Q,"LI",{});var ASe=s(w2);che=n(ASe,"STRONG",{});var Yvt=s(che);ZSo=r(Yvt,"xlm"),Yvt.forEach(t),eRo=r(ASe," \u2014 "),PO=n(ASe,"A",{href:!0});var Kvt=s(PO);oRo=r(Kvt,"XLMWithLMHeadModel"),Kvt.forEach(t),rRo=r(ASe," (XLM model)"),ASe.forEach(t),tRo=i(Q),A2=n(Q,"LI",{});var LSe=s(A2);fhe=n(LSe,"STRONG",{});var Zvt=s(fhe);aRo=r(Zvt,"xlm-prophetnet"),Zvt.forEach(t),nRo=r(LSe," \u2014 "),BO=n(LSe,"A",{href:!0});var e0t=s(BO);sRo=r(e0t,"XLMProphetNetForCausalLM"),e0t.forEach(t),lRo=r(LSe," (XLM-ProphetNet model)"),LSe.forEach(t),iRo=i(Q),L2=n(Q,"LI",{});var ySe=s(L2);mhe=n(ySe,"STRONG",{});var o0t=s(mhe);dRo=r(o0t,"xlm-roberta"),o0t.forEach(t),cRo=r(ySe," \u2014 "),IO=n(ySe,"A",{href:!0});var r0t=s(IO);fRo=r(r0t,"XLMRobertaForCausalLM"),r0t.forEach(t),mRo=r(ySe," (XLM-RoBERTa model)"),ySe.forEach(t),gRo=i(Q),y2=n(Q,"LI",{});var xSe=s(y2);ghe=n(xSe,"STRONG",{});var t0t=s(ghe);hRo=r(t0t,"xlm-roberta-xl"),t0t.forEach(t),pRo=r(xSe," \u2014 "),NO=n(xSe,"A",{href:!0});var a0t=s(NO);_Ro=r(a0t,"XLMRobertaXLForCausalLM"),a0t.forEach(t),uRo=r(xSe," (XLM-RoBERTa-XL model)"),xSe.forEach(t),bRo=i(Q),x2=n(Q,"LI",{});var $Se=s(x2);hhe=n($Se,"STRONG",{});var n0t=s(hhe);vRo=r(n0t,"xlnet"),n0t.forEach(t),FRo=r($Se," \u2014 "),qO=n($Se,"A",{href:!0});var s0t=s(qO);TRo=r(s0t,"XLNetLMHeadModel"),s0t.forEach(t),MRo=r($Se," (XLNet model)"),$Se.forEach(t),Q.forEach(t),ERo=i(da),$2=n(da,"P",{});var kSe=s($2);CRo=r(kSe,"The model is set in evaluation mode by default using "),phe=n(kSe,"CODE",{});var l0t=s(phe);wRo=r(l0t,"model.eval()"),l0t.forEach(t),ARo=r(kSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_he=n(kSe,"CODE",{});var i0t=s(_he);LRo=r(i0t,"model.train()"),i0t.forEach(t),kSe.forEach(t),yRo=i(da),T(k2.$$.fragment,da),da.forEach(t),al.forEach(t),CXe=i(f),Ji=n(f,"H2",{class:!0});var $Qe=s(Ji);S2=n($Qe,"A",{id:!0,class:!0,href:!0});var d0t=s(S2);uhe=n(d0t,"SPAN",{});var c0t=s(uhe);T(WL.$$.fragment,c0t),c0t.forEach(t),d0t.forEach(t),xRo=i($Qe),bhe=n($Qe,"SPAN",{});var f0t=s(bhe);$Ro=r(f0t,"AutoModelForMaskedLM"),f0t.forEach(t),$Qe.forEach(t),wXe=i(f),Po=n(f,"DIV",{class:!0});var nl=s(Po);T(HL.$$.fragment,nl),kRo=i(nl),Yi=n(nl,"P",{});var Gre=s(Yi);SRo=r(Gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jO=n(Gre,"A",{href:!0});var m0t=s(jO);RRo=r(m0t,"from_pretrained()"),m0t.forEach(t),PRo=r(Gre," class method or the "),DO=n(Gre,"A",{href:!0});var g0t=s(DO);BRo=r(g0t,"from_config()"),g0t.forEach(t),IRo=r(Gre,` class
method.`),Gre.forEach(t),NRo=i(nl),UL=n(nl,"P",{});var kQe=s(UL);qRo=r(kQe,"This class cannot be instantiated directly using "),vhe=n(kQe,"CODE",{});var h0t=s(vhe);jRo=r(h0t,"__init__()"),h0t.forEach(t),DRo=r(kQe," (throws an error)."),kQe.forEach(t),GRo=i(nl),ft=n(nl,"DIV",{class:!0});var _A=s(ft);T(JL.$$.fragment,_A),ORo=i(_A),Fhe=n(_A,"P",{});var p0t=s(Fhe);VRo=r(p0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),p0t.forEach(t),XRo=i(_A),Ki=n(_A,"P",{});var Ore=s(Ki);zRo=r(Ore,`Note:
Loading a model from its configuration file does `),The=n(Ore,"STRONG",{});var _0t=s(The);QRo=r(_0t,"not"),_0t.forEach(t),WRo=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),GO=n(Ore,"A",{href:!0});var u0t=s(GO);HRo=r(u0t,"from_pretrained()"),u0t.forEach(t),URo=r(Ore," to load the model weights."),Ore.forEach(t),JRo=i(_A),T(R2.$$.fragment,_A),_A.forEach(t),YRo=i(nl),eo=n(nl,"DIV",{class:!0});var ca=s(eo);T(YL.$$.fragment,ca),KRo=i(ca),Mhe=n(ca,"P",{});var b0t=s(Mhe);ZRo=r(b0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),b0t.forEach(t),ePo=i(ca),ja=n(ca,"P",{});var uA=s(ja);oPo=r(uA,"The model class to instantiate is selected based on the "),Ehe=n(uA,"CODE",{});var v0t=s(Ehe);rPo=r(v0t,"model_type"),v0t.forEach(t),tPo=r(uA,` property of the config object (either
passed as an argument or loaded from `),Che=n(uA,"CODE",{});var F0t=s(Che);aPo=r(F0t,"pretrained_model_name_or_path"),F0t.forEach(t),nPo=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),whe=n(uA,"CODE",{});var T0t=s(whe);sPo=r(T0t,"pretrained_model_name_or_path"),T0t.forEach(t),lPo=r(uA,":"),uA.forEach(t),iPo=i(ca),W=n(ca,"UL",{});var H=s(W);P2=n(H,"LI",{});var SSe=s(P2);Ahe=n(SSe,"STRONG",{});var M0t=s(Ahe);dPo=r(M0t,"albert"),M0t.forEach(t),cPo=r(SSe," \u2014 "),OO=n(SSe,"A",{href:!0});var E0t=s(OO);fPo=r(E0t,"AlbertForMaskedLM"),E0t.forEach(t),mPo=r(SSe," (ALBERT model)"),SSe.forEach(t),gPo=i(H),B2=n(H,"LI",{});var RSe=s(B2);Lhe=n(RSe,"STRONG",{});var C0t=s(Lhe);hPo=r(C0t,"bart"),C0t.forEach(t),pPo=r(RSe," \u2014 "),VO=n(RSe,"A",{href:!0});var w0t=s(VO);_Po=r(w0t,"BartForConditionalGeneration"),w0t.forEach(t),uPo=r(RSe," (BART model)"),RSe.forEach(t),bPo=i(H),I2=n(H,"LI",{});var PSe=s(I2);yhe=n(PSe,"STRONG",{});var A0t=s(yhe);vPo=r(A0t,"bert"),A0t.forEach(t),FPo=r(PSe," \u2014 "),XO=n(PSe,"A",{href:!0});var L0t=s(XO);TPo=r(L0t,"BertForMaskedLM"),L0t.forEach(t),MPo=r(PSe," (BERT model)"),PSe.forEach(t),EPo=i(H),N2=n(H,"LI",{});var BSe=s(N2);xhe=n(BSe,"STRONG",{});var y0t=s(xhe);CPo=r(y0t,"big_bird"),y0t.forEach(t),wPo=r(BSe," \u2014 "),zO=n(BSe,"A",{href:!0});var x0t=s(zO);APo=r(x0t,"BigBirdForMaskedLM"),x0t.forEach(t),LPo=r(BSe," (BigBird model)"),BSe.forEach(t),yPo=i(H),q2=n(H,"LI",{});var ISe=s(q2);$he=n(ISe,"STRONG",{});var $0t=s($he);xPo=r($0t,"camembert"),$0t.forEach(t),$Po=r(ISe," \u2014 "),QO=n(ISe,"A",{href:!0});var k0t=s(QO);kPo=r(k0t,"CamembertForMaskedLM"),k0t.forEach(t),SPo=r(ISe," (CamemBERT model)"),ISe.forEach(t),RPo=i(H),j2=n(H,"LI",{});var NSe=s(j2);khe=n(NSe,"STRONG",{});var S0t=s(khe);PPo=r(S0t,"convbert"),S0t.forEach(t),BPo=r(NSe," \u2014 "),WO=n(NSe,"A",{href:!0});var R0t=s(WO);IPo=r(R0t,"ConvBertForMaskedLM"),R0t.forEach(t),NPo=r(NSe," (ConvBERT model)"),NSe.forEach(t),qPo=i(H),D2=n(H,"LI",{});var qSe=s(D2);She=n(qSe,"STRONG",{});var P0t=s(She);jPo=r(P0t,"data2vec-text"),P0t.forEach(t),DPo=r(qSe," \u2014 "),HO=n(qSe,"A",{href:!0});var B0t=s(HO);GPo=r(B0t,"Data2VecTextForMaskedLM"),B0t.forEach(t),OPo=r(qSe," (Data2VecText model)"),qSe.forEach(t),VPo=i(H),G2=n(H,"LI",{});var jSe=s(G2);Rhe=n(jSe,"STRONG",{});var I0t=s(Rhe);XPo=r(I0t,"deberta"),I0t.forEach(t),zPo=r(jSe," \u2014 "),UO=n(jSe,"A",{href:!0});var N0t=s(UO);QPo=r(N0t,"DebertaForMaskedLM"),N0t.forEach(t),WPo=r(jSe," (DeBERTa model)"),jSe.forEach(t),HPo=i(H),O2=n(H,"LI",{});var DSe=s(O2);Phe=n(DSe,"STRONG",{});var q0t=s(Phe);UPo=r(q0t,"deberta-v2"),q0t.forEach(t),JPo=r(DSe," \u2014 "),JO=n(DSe,"A",{href:!0});var j0t=s(JO);YPo=r(j0t,"DebertaV2ForMaskedLM"),j0t.forEach(t),KPo=r(DSe," (DeBERTa-v2 model)"),DSe.forEach(t),ZPo=i(H),V2=n(H,"LI",{});var GSe=s(V2);Bhe=n(GSe,"STRONG",{});var D0t=s(Bhe);eBo=r(D0t,"distilbert"),D0t.forEach(t),oBo=r(GSe," \u2014 "),YO=n(GSe,"A",{href:!0});var G0t=s(YO);rBo=r(G0t,"DistilBertForMaskedLM"),G0t.forEach(t),tBo=r(GSe," (DistilBERT model)"),GSe.forEach(t),aBo=i(H),X2=n(H,"LI",{});var OSe=s(X2);Ihe=n(OSe,"STRONG",{});var O0t=s(Ihe);nBo=r(O0t,"electra"),O0t.forEach(t),sBo=r(OSe," \u2014 "),KO=n(OSe,"A",{href:!0});var V0t=s(KO);lBo=r(V0t,"ElectraForMaskedLM"),V0t.forEach(t),iBo=r(OSe," (ELECTRA model)"),OSe.forEach(t),dBo=i(H),z2=n(H,"LI",{});var VSe=s(z2);Nhe=n(VSe,"STRONG",{});var X0t=s(Nhe);cBo=r(X0t,"flaubert"),X0t.forEach(t),fBo=r(VSe," \u2014 "),ZO=n(VSe,"A",{href:!0});var z0t=s(ZO);mBo=r(z0t,"FlaubertWithLMHeadModel"),z0t.forEach(t),gBo=r(VSe," (FlauBERT model)"),VSe.forEach(t),hBo=i(H),Q2=n(H,"LI",{});var XSe=s(Q2);qhe=n(XSe,"STRONG",{});var Q0t=s(qhe);pBo=r(Q0t,"fnet"),Q0t.forEach(t),_Bo=r(XSe," \u2014 "),eV=n(XSe,"A",{href:!0});var W0t=s(eV);uBo=r(W0t,"FNetForMaskedLM"),W0t.forEach(t),bBo=r(XSe," (FNet model)"),XSe.forEach(t),vBo=i(H),W2=n(H,"LI",{});var zSe=s(W2);jhe=n(zSe,"STRONG",{});var H0t=s(jhe);FBo=r(H0t,"funnel"),H0t.forEach(t),TBo=r(zSe," \u2014 "),oV=n(zSe,"A",{href:!0});var U0t=s(oV);MBo=r(U0t,"FunnelForMaskedLM"),U0t.forEach(t),EBo=r(zSe," (Funnel Transformer model)"),zSe.forEach(t),CBo=i(H),H2=n(H,"LI",{});var QSe=s(H2);Dhe=n(QSe,"STRONG",{});var J0t=s(Dhe);wBo=r(J0t,"ibert"),J0t.forEach(t),ABo=r(QSe," \u2014 "),rV=n(QSe,"A",{href:!0});var Y0t=s(rV);LBo=r(Y0t,"IBertForMaskedLM"),Y0t.forEach(t),yBo=r(QSe," (I-BERT model)"),QSe.forEach(t),xBo=i(H),U2=n(H,"LI",{});var WSe=s(U2);Ghe=n(WSe,"STRONG",{});var K0t=s(Ghe);$Bo=r(K0t,"layoutlm"),K0t.forEach(t),kBo=r(WSe," \u2014 "),tV=n(WSe,"A",{href:!0});var Z0t=s(tV);SBo=r(Z0t,"LayoutLMForMaskedLM"),Z0t.forEach(t),RBo=r(WSe," (LayoutLM model)"),WSe.forEach(t),PBo=i(H),J2=n(H,"LI",{});var HSe=s(J2);Ohe=n(HSe,"STRONG",{});var eFt=s(Ohe);BBo=r(eFt,"longformer"),eFt.forEach(t),IBo=r(HSe," \u2014 "),aV=n(HSe,"A",{href:!0});var oFt=s(aV);NBo=r(oFt,"LongformerForMaskedLM"),oFt.forEach(t),qBo=r(HSe," (Longformer model)"),HSe.forEach(t),jBo=i(H),Y2=n(H,"LI",{});var USe=s(Y2);Vhe=n(USe,"STRONG",{});var rFt=s(Vhe);DBo=r(rFt,"luke"),rFt.forEach(t),GBo=r(USe," \u2014 "),nV=n(USe,"A",{href:!0});var tFt=s(nV);OBo=r(tFt,"LukeForMaskedLM"),tFt.forEach(t),VBo=r(USe," (LUKE model)"),USe.forEach(t),XBo=i(H),K2=n(H,"LI",{});var JSe=s(K2);Xhe=n(JSe,"STRONG",{});var aFt=s(Xhe);zBo=r(aFt,"mbart"),aFt.forEach(t),QBo=r(JSe," \u2014 "),sV=n(JSe,"A",{href:!0});var nFt=s(sV);WBo=r(nFt,"MBartForConditionalGeneration"),nFt.forEach(t),HBo=r(JSe," (mBART model)"),JSe.forEach(t),UBo=i(H),Z2=n(H,"LI",{});var YSe=s(Z2);zhe=n(YSe,"STRONG",{});var sFt=s(zhe);JBo=r(sFt,"megatron-bert"),sFt.forEach(t),YBo=r(YSe," \u2014 "),lV=n(YSe,"A",{href:!0});var lFt=s(lV);KBo=r(lFt,"MegatronBertForMaskedLM"),lFt.forEach(t),ZBo=r(YSe," (Megatron-BERT model)"),YSe.forEach(t),eIo=i(H),eb=n(H,"LI",{});var KSe=s(eb);Qhe=n(KSe,"STRONG",{});var iFt=s(Qhe);oIo=r(iFt,"mobilebert"),iFt.forEach(t),rIo=r(KSe," \u2014 "),iV=n(KSe,"A",{href:!0});var dFt=s(iV);tIo=r(dFt,"MobileBertForMaskedLM"),dFt.forEach(t),aIo=r(KSe," (MobileBERT model)"),KSe.forEach(t),nIo=i(H),ob=n(H,"LI",{});var ZSe=s(ob);Whe=n(ZSe,"STRONG",{});var cFt=s(Whe);sIo=r(cFt,"mpnet"),cFt.forEach(t),lIo=r(ZSe," \u2014 "),dV=n(ZSe,"A",{href:!0});var fFt=s(dV);iIo=r(fFt,"MPNetForMaskedLM"),fFt.forEach(t),dIo=r(ZSe," (MPNet model)"),ZSe.forEach(t),cIo=i(H),rb=n(H,"LI",{});var eRe=s(rb);Hhe=n(eRe,"STRONG",{});var mFt=s(Hhe);fIo=r(mFt,"mvp"),mFt.forEach(t),mIo=r(eRe," \u2014 "),cV=n(eRe,"A",{href:!0});var gFt=s(cV);gIo=r(gFt,"MvpForConditionalGeneration"),gFt.forEach(t),hIo=r(eRe," (MVP model)"),eRe.forEach(t),pIo=i(H),tb=n(H,"LI",{});var oRe=s(tb);Uhe=n(oRe,"STRONG",{});var hFt=s(Uhe);_Io=r(hFt,"nezha"),hFt.forEach(t),uIo=r(oRe," \u2014 "),fV=n(oRe,"A",{href:!0});var pFt=s(fV);bIo=r(pFt,"NezhaForMaskedLM"),pFt.forEach(t),vIo=r(oRe," (Nezha model)"),oRe.forEach(t),FIo=i(H),ab=n(H,"LI",{});var rRe=s(ab);Jhe=n(rRe,"STRONG",{});var _Ft=s(Jhe);TIo=r(_Ft,"nystromformer"),_Ft.forEach(t),MIo=r(rRe," \u2014 "),mV=n(rRe,"A",{href:!0});var uFt=s(mV);EIo=r(uFt,"NystromformerForMaskedLM"),uFt.forEach(t),CIo=r(rRe," (Nystr\xF6mformer model)"),rRe.forEach(t),wIo=i(H),nb=n(H,"LI",{});var tRe=s(nb);Yhe=n(tRe,"STRONG",{});var bFt=s(Yhe);AIo=r(bFt,"perceiver"),bFt.forEach(t),LIo=r(tRe," \u2014 "),gV=n(tRe,"A",{href:!0});var vFt=s(gV);yIo=r(vFt,"PerceiverForMaskedLM"),vFt.forEach(t),xIo=r(tRe," (Perceiver model)"),tRe.forEach(t),$Io=i(H),sb=n(H,"LI",{});var aRe=s(sb);Khe=n(aRe,"STRONG",{});var FFt=s(Khe);kIo=r(FFt,"qdqbert"),FFt.forEach(t),SIo=r(aRe," \u2014 "),hV=n(aRe,"A",{href:!0});var TFt=s(hV);RIo=r(TFt,"QDQBertForMaskedLM"),TFt.forEach(t),PIo=r(aRe," (QDQBert model)"),aRe.forEach(t),BIo=i(H),lb=n(H,"LI",{});var nRe=s(lb);Zhe=n(nRe,"STRONG",{});var MFt=s(Zhe);IIo=r(MFt,"reformer"),MFt.forEach(t),NIo=r(nRe," \u2014 "),pV=n(nRe,"A",{href:!0});var EFt=s(pV);qIo=r(EFt,"ReformerForMaskedLM"),EFt.forEach(t),jIo=r(nRe," (Reformer model)"),nRe.forEach(t),DIo=i(H),ib=n(H,"LI",{});var sRe=s(ib);epe=n(sRe,"STRONG",{});var CFt=s(epe);GIo=r(CFt,"rembert"),CFt.forEach(t),OIo=r(sRe," \u2014 "),_V=n(sRe,"A",{href:!0});var wFt=s(_V);VIo=r(wFt,"RemBertForMaskedLM"),wFt.forEach(t),XIo=r(sRe," (RemBERT model)"),sRe.forEach(t),zIo=i(H),db=n(H,"LI",{});var lRe=s(db);ope=n(lRe,"STRONG",{});var AFt=s(ope);QIo=r(AFt,"roberta"),AFt.forEach(t),WIo=r(lRe," \u2014 "),uV=n(lRe,"A",{href:!0});var LFt=s(uV);HIo=r(LFt,"RobertaForMaskedLM"),LFt.forEach(t),UIo=r(lRe," (RoBERTa model)"),lRe.forEach(t),JIo=i(H),cb=n(H,"LI",{});var iRe=s(cb);rpe=n(iRe,"STRONG",{});var yFt=s(rpe);YIo=r(yFt,"roformer"),yFt.forEach(t),KIo=r(iRe," \u2014 "),bV=n(iRe,"A",{href:!0});var xFt=s(bV);ZIo=r(xFt,"RoFormerForMaskedLM"),xFt.forEach(t),eNo=r(iRe," (RoFormer model)"),iRe.forEach(t),oNo=i(H),fb=n(H,"LI",{});var dRe=s(fb);tpe=n(dRe,"STRONG",{});var $Ft=s(tpe);rNo=r($Ft,"squeezebert"),$Ft.forEach(t),tNo=r(dRe," \u2014 "),vV=n(dRe,"A",{href:!0});var kFt=s(vV);aNo=r(kFt,"SqueezeBertForMaskedLM"),kFt.forEach(t),nNo=r(dRe," (SqueezeBERT model)"),dRe.forEach(t),sNo=i(H),mb=n(H,"LI",{});var cRe=s(mb);ape=n(cRe,"STRONG",{});var SFt=s(ape);lNo=r(SFt,"tapas"),SFt.forEach(t),iNo=r(cRe," \u2014 "),FV=n(cRe,"A",{href:!0});var RFt=s(FV);dNo=r(RFt,"TapasForMaskedLM"),RFt.forEach(t),cNo=r(cRe," (TAPAS model)"),cRe.forEach(t),fNo=i(H),gb=n(H,"LI",{});var fRe=s(gb);npe=n(fRe,"STRONG",{});var PFt=s(npe);mNo=r(PFt,"wav2vec2"),PFt.forEach(t),gNo=r(fRe," \u2014 "),spe=n(fRe,"CODE",{});var BFt=s(spe);hNo=r(BFt,"Wav2Vec2ForMaskedLM"),BFt.forEach(t),pNo=r(fRe," (Wav2Vec2 model)"),fRe.forEach(t),_No=i(H),hb=n(H,"LI",{});var mRe=s(hb);lpe=n(mRe,"STRONG",{});var IFt=s(lpe);uNo=r(IFt,"xlm"),IFt.forEach(t),bNo=r(mRe," \u2014 "),TV=n(mRe,"A",{href:!0});var NFt=s(TV);vNo=r(NFt,"XLMWithLMHeadModel"),NFt.forEach(t),FNo=r(mRe," (XLM model)"),mRe.forEach(t),TNo=i(H),pb=n(H,"LI",{});var gRe=s(pb);ipe=n(gRe,"STRONG",{});var qFt=s(ipe);MNo=r(qFt,"xlm-roberta"),qFt.forEach(t),ENo=r(gRe," \u2014 "),MV=n(gRe,"A",{href:!0});var jFt=s(MV);CNo=r(jFt,"XLMRobertaForMaskedLM"),jFt.forEach(t),wNo=r(gRe," (XLM-RoBERTa model)"),gRe.forEach(t),ANo=i(H),_b=n(H,"LI",{});var hRe=s(_b);dpe=n(hRe,"STRONG",{});var DFt=s(dpe);LNo=r(DFt,"xlm-roberta-xl"),DFt.forEach(t),yNo=r(hRe," \u2014 "),EV=n(hRe,"A",{href:!0});var GFt=s(EV);xNo=r(GFt,"XLMRobertaXLForMaskedLM"),GFt.forEach(t),$No=r(hRe," (XLM-RoBERTa-XL model)"),hRe.forEach(t),kNo=i(H),ub=n(H,"LI",{});var pRe=s(ub);cpe=n(pRe,"STRONG",{});var OFt=s(cpe);SNo=r(OFt,"yoso"),OFt.forEach(t),RNo=r(pRe," \u2014 "),CV=n(pRe,"A",{href:!0});var VFt=s(CV);PNo=r(VFt,"YosoForMaskedLM"),VFt.forEach(t),BNo=r(pRe," (YOSO model)"),pRe.forEach(t),H.forEach(t),INo=i(ca),bb=n(ca,"P",{});var _Re=s(bb);NNo=r(_Re,"The model is set in evaluation mode by default using "),fpe=n(_Re,"CODE",{});var XFt=s(fpe);qNo=r(XFt,"model.eval()"),XFt.forEach(t),jNo=r(_Re,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=n(_Re,"CODE",{});var zFt=s(mpe);DNo=r(zFt,"model.train()"),zFt.forEach(t),_Re.forEach(t),GNo=i(ca),T(vb.$$.fragment,ca),ca.forEach(t),nl.forEach(t),AXe=i(f),Zi=n(f,"H2",{class:!0});var SQe=s(Zi);Fb=n(SQe,"A",{id:!0,class:!0,href:!0});var QFt=s(Fb);gpe=n(QFt,"SPAN",{});var WFt=s(gpe);T(KL.$$.fragment,WFt),WFt.forEach(t),QFt.forEach(t),ONo=i(SQe),hpe=n(SQe,"SPAN",{});var HFt=s(hpe);VNo=r(HFt,"AutoModelForSeq2SeqLM"),HFt.forEach(t),SQe.forEach(t),LXe=i(f),Bo=n(f,"DIV",{class:!0});var sl=s(Bo);T(ZL.$$.fragment,sl),XNo=i(sl),ed=n(sl,"P",{});var Vre=s(ed);zNo=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wV=n(Vre,"A",{href:!0});var UFt=s(wV);QNo=r(UFt,"from_pretrained()"),UFt.forEach(t),WNo=r(Vre," class method or the "),AV=n(Vre,"A",{href:!0});var JFt=s(AV);HNo=r(JFt,"from_config()"),JFt.forEach(t),UNo=r(Vre,` class
method.`),Vre.forEach(t),JNo=i(sl),ey=n(sl,"P",{});var RQe=s(ey);YNo=r(RQe,"This class cannot be instantiated directly using "),ppe=n(RQe,"CODE",{});var YFt=s(ppe);KNo=r(YFt,"__init__()"),YFt.forEach(t),ZNo=r(RQe," (throws an error)."),RQe.forEach(t),eqo=i(sl),mt=n(sl,"DIV",{class:!0});var bA=s(mt);T(oy.$$.fragment,bA),oqo=i(bA),_pe=n(bA,"P",{});var KFt=s(_pe);rqo=r(KFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),KFt.forEach(t),tqo=i(bA),od=n(bA,"P",{});var Xre=s(od);aqo=r(Xre,`Note:
Loading a model from its configuration file does `),upe=n(Xre,"STRONG",{});var ZFt=s(upe);nqo=r(ZFt,"not"),ZFt.forEach(t),sqo=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=n(Xre,"A",{href:!0});var eTt=s(LV);lqo=r(eTt,"from_pretrained()"),eTt.forEach(t),iqo=r(Xre," to load the model weights."),Xre.forEach(t),dqo=i(bA),T(Tb.$$.fragment,bA),bA.forEach(t),cqo=i(sl),oo=n(sl,"DIV",{class:!0});var fa=s(oo);T(ry.$$.fragment,fa),fqo=i(fa),bpe=n(fa,"P",{});var oTt=s(bpe);mqo=r(oTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),oTt.forEach(t),gqo=i(fa),Da=n(fa,"P",{});var vA=s(Da);hqo=r(vA,"The model class to instantiate is selected based on the "),vpe=n(vA,"CODE",{});var rTt=s(vpe);pqo=r(rTt,"model_type"),rTt.forEach(t),_qo=r(vA,` property of the config object (either
passed as an argument or loaded from `),Fpe=n(vA,"CODE",{});var tTt=s(Fpe);uqo=r(tTt,"pretrained_model_name_or_path"),tTt.forEach(t),bqo=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=n(vA,"CODE",{});var aTt=s(Tpe);vqo=r(aTt,"pretrained_model_name_or_path"),aTt.forEach(t),Fqo=r(vA,":"),vA.forEach(t),Tqo=i(fa),pe=n(fa,"UL",{});var be=s(pe);Mb=n(be,"LI",{});var uRe=s(Mb);Mpe=n(uRe,"STRONG",{});var nTt=s(Mpe);Mqo=r(nTt,"bart"),nTt.forEach(t),Eqo=r(uRe," \u2014 "),yV=n(uRe,"A",{href:!0});var sTt=s(yV);Cqo=r(sTt,"BartForConditionalGeneration"),sTt.forEach(t),wqo=r(uRe," (BART model)"),uRe.forEach(t),Aqo=i(be),Eb=n(be,"LI",{});var bRe=s(Eb);Epe=n(bRe,"STRONG",{});var lTt=s(Epe);Lqo=r(lTt,"bigbird_pegasus"),lTt.forEach(t),yqo=r(bRe," \u2014 "),xV=n(bRe,"A",{href:!0});var iTt=s(xV);xqo=r(iTt,"BigBirdPegasusForConditionalGeneration"),iTt.forEach(t),$qo=r(bRe," (BigBird-Pegasus model)"),bRe.forEach(t),kqo=i(be),Cb=n(be,"LI",{});var vRe=s(Cb);Cpe=n(vRe,"STRONG",{});var dTt=s(Cpe);Sqo=r(dTt,"blenderbot"),dTt.forEach(t),Rqo=r(vRe," \u2014 "),$V=n(vRe,"A",{href:!0});var cTt=s($V);Pqo=r(cTt,"BlenderbotForConditionalGeneration"),cTt.forEach(t),Bqo=r(vRe," (Blenderbot model)"),vRe.forEach(t),Iqo=i(be),wb=n(be,"LI",{});var FRe=s(wb);wpe=n(FRe,"STRONG",{});var fTt=s(wpe);Nqo=r(fTt,"blenderbot-small"),fTt.forEach(t),qqo=r(FRe," \u2014 "),kV=n(FRe,"A",{href:!0});var mTt=s(kV);jqo=r(mTt,"BlenderbotSmallForConditionalGeneration"),mTt.forEach(t),Dqo=r(FRe," (BlenderbotSmall model)"),FRe.forEach(t),Gqo=i(be),Ab=n(be,"LI",{});var TRe=s(Ab);Ape=n(TRe,"STRONG",{});var gTt=s(Ape);Oqo=r(gTt,"encoder-decoder"),gTt.forEach(t),Vqo=r(TRe," \u2014 "),SV=n(TRe,"A",{href:!0});var hTt=s(SV);Xqo=r(hTt,"EncoderDecoderModel"),hTt.forEach(t),zqo=r(TRe," (Encoder decoder model)"),TRe.forEach(t),Qqo=i(be),Lb=n(be,"LI",{});var MRe=s(Lb);Lpe=n(MRe,"STRONG",{});var pTt=s(Lpe);Wqo=r(pTt,"fsmt"),pTt.forEach(t),Hqo=r(MRe," \u2014 "),RV=n(MRe,"A",{href:!0});var _Tt=s(RV);Uqo=r(_Tt,"FSMTForConditionalGeneration"),_Tt.forEach(t),Jqo=r(MRe," (FairSeq Machine-Translation model)"),MRe.forEach(t),Yqo=i(be),yb=n(be,"LI",{});var ERe=s(yb);ype=n(ERe,"STRONG",{});var uTt=s(ype);Kqo=r(uTt,"led"),uTt.forEach(t),Zqo=r(ERe," \u2014 "),PV=n(ERe,"A",{href:!0});var bTt=s(PV);ejo=r(bTt,"LEDForConditionalGeneration"),bTt.forEach(t),ojo=r(ERe," (LED model)"),ERe.forEach(t),rjo=i(be),xb=n(be,"LI",{});var CRe=s(xb);xpe=n(CRe,"STRONG",{});var vTt=s(xpe);tjo=r(vTt,"longt5"),vTt.forEach(t),ajo=r(CRe," \u2014 "),BV=n(CRe,"A",{href:!0});var FTt=s(BV);njo=r(FTt,"LongT5ForConditionalGeneration"),FTt.forEach(t),sjo=r(CRe," (LongT5 model)"),CRe.forEach(t),ljo=i(be),$b=n(be,"LI",{});var wRe=s($b);$pe=n(wRe,"STRONG",{});var TTt=s($pe);ijo=r(TTt,"m2m_100"),TTt.forEach(t),djo=r(wRe," \u2014 "),IV=n(wRe,"A",{href:!0});var MTt=s(IV);cjo=r(MTt,"M2M100ForConditionalGeneration"),MTt.forEach(t),fjo=r(wRe," (M2M100 model)"),wRe.forEach(t),mjo=i(be),kb=n(be,"LI",{});var ARe=s(kb);kpe=n(ARe,"STRONG",{});var ETt=s(kpe);gjo=r(ETt,"marian"),ETt.forEach(t),hjo=r(ARe," \u2014 "),NV=n(ARe,"A",{href:!0});var CTt=s(NV);pjo=r(CTt,"MarianMTModel"),CTt.forEach(t),_jo=r(ARe," (Marian model)"),ARe.forEach(t),ujo=i(be),Sb=n(be,"LI",{});var LRe=s(Sb);Spe=n(LRe,"STRONG",{});var wTt=s(Spe);bjo=r(wTt,"mbart"),wTt.forEach(t),vjo=r(LRe," \u2014 "),qV=n(LRe,"A",{href:!0});var ATt=s(qV);Fjo=r(ATt,"MBartForConditionalGeneration"),ATt.forEach(t),Tjo=r(LRe," (mBART model)"),LRe.forEach(t),Mjo=i(be),Rb=n(be,"LI",{});var yRe=s(Rb);Rpe=n(yRe,"STRONG",{});var LTt=s(Rpe);Ejo=r(LTt,"mt5"),LTt.forEach(t),Cjo=r(yRe," \u2014 "),jV=n(yRe,"A",{href:!0});var yTt=s(jV);wjo=r(yTt,"MT5ForConditionalGeneration"),yTt.forEach(t),Ajo=r(yRe," (MT5 model)"),yRe.forEach(t),Ljo=i(be),Pb=n(be,"LI",{});var xRe=s(Pb);Ppe=n(xRe,"STRONG",{});var xTt=s(Ppe);yjo=r(xTt,"mvp"),xTt.forEach(t),xjo=r(xRe," \u2014 "),DV=n(xRe,"A",{href:!0});var $Tt=s(DV);$jo=r($Tt,"MvpForConditionalGeneration"),$Tt.forEach(t),kjo=r(xRe," (MVP model)"),xRe.forEach(t),Sjo=i(be),Bb=n(be,"LI",{});var $Re=s(Bb);Bpe=n($Re,"STRONG",{});var kTt=s(Bpe);Rjo=r(kTt,"pegasus"),kTt.forEach(t),Pjo=r($Re," \u2014 "),GV=n($Re,"A",{href:!0});var STt=s(GV);Bjo=r(STt,"PegasusForConditionalGeneration"),STt.forEach(t),Ijo=r($Re," (Pegasus model)"),$Re.forEach(t),Njo=i(be),Ib=n(be,"LI",{});var kRe=s(Ib);Ipe=n(kRe,"STRONG",{});var RTt=s(Ipe);qjo=r(RTt,"plbart"),RTt.forEach(t),jjo=r(kRe," \u2014 "),OV=n(kRe,"A",{href:!0});var PTt=s(OV);Djo=r(PTt,"PLBartForConditionalGeneration"),PTt.forEach(t),Gjo=r(kRe," (PLBart model)"),kRe.forEach(t),Ojo=i(be),Nb=n(be,"LI",{});var SRe=s(Nb);Npe=n(SRe,"STRONG",{});var BTt=s(Npe);Vjo=r(BTt,"prophetnet"),BTt.forEach(t),Xjo=r(SRe," \u2014 "),VV=n(SRe,"A",{href:!0});var ITt=s(VV);zjo=r(ITt,"ProphetNetForConditionalGeneration"),ITt.forEach(t),Qjo=r(SRe," (ProphetNet model)"),SRe.forEach(t),Wjo=i(be),qb=n(be,"LI",{});var RRe=s(qb);qpe=n(RRe,"STRONG",{});var NTt=s(qpe);Hjo=r(NTt,"t5"),NTt.forEach(t),Ujo=r(RRe," \u2014 "),XV=n(RRe,"A",{href:!0});var qTt=s(XV);Jjo=r(qTt,"T5ForConditionalGeneration"),qTt.forEach(t),Yjo=r(RRe," (T5 model)"),RRe.forEach(t),Kjo=i(be),jb=n(be,"LI",{});var PRe=s(jb);jpe=n(PRe,"STRONG",{});var jTt=s(jpe);Zjo=r(jTt,"xlm-prophetnet"),jTt.forEach(t),eDo=r(PRe," \u2014 "),zV=n(PRe,"A",{href:!0});var DTt=s(zV);oDo=r(DTt,"XLMProphetNetForConditionalGeneration"),DTt.forEach(t),rDo=r(PRe," (XLM-ProphetNet model)"),PRe.forEach(t),be.forEach(t),tDo=i(fa),Db=n(fa,"P",{});var BRe=s(Db);aDo=r(BRe,"The model is set in evaluation mode by default using "),Dpe=n(BRe,"CODE",{});var GTt=s(Dpe);nDo=r(GTt,"model.eval()"),GTt.forEach(t),sDo=r(BRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=n(BRe,"CODE",{});var OTt=s(Gpe);lDo=r(OTt,"model.train()"),OTt.forEach(t),BRe.forEach(t),iDo=i(fa),T(Gb.$$.fragment,fa),fa.forEach(t),sl.forEach(t),yXe=i(f),rd=n(f,"H2",{class:!0});var PQe=s(rd);Ob=n(PQe,"A",{id:!0,class:!0,href:!0});var VTt=s(Ob);Ope=n(VTt,"SPAN",{});var XTt=s(Ope);T(ty.$$.fragment,XTt),XTt.forEach(t),VTt.forEach(t),dDo=i(PQe),Vpe=n(PQe,"SPAN",{});var zTt=s(Vpe);cDo=r(zTt,"AutoModelForSequenceClassification"),zTt.forEach(t),PQe.forEach(t),xXe=i(f),Io=n(f,"DIV",{class:!0});var ll=s(Io);T(ay.$$.fragment,ll),fDo=i(ll),td=n(ll,"P",{});var zre=s(td);mDo=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QV=n(zre,"A",{href:!0});var QTt=s(QV);gDo=r(QTt,"from_pretrained()"),QTt.forEach(t),hDo=r(zre," class method or the "),WV=n(zre,"A",{href:!0});var WTt=s(WV);pDo=r(WTt,"from_config()"),WTt.forEach(t),_Do=r(zre,` class
method.`),zre.forEach(t),uDo=i(ll),ny=n(ll,"P",{});var BQe=s(ny);bDo=r(BQe,"This class cannot be instantiated directly using "),Xpe=n(BQe,"CODE",{});var HTt=s(Xpe);vDo=r(HTt,"__init__()"),HTt.forEach(t),FDo=r(BQe," (throws an error)."),BQe.forEach(t),TDo=i(ll),gt=n(ll,"DIV",{class:!0});var FA=s(gt);T(sy.$$.fragment,FA),MDo=i(FA),zpe=n(FA,"P",{});var UTt=s(zpe);EDo=r(UTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),UTt.forEach(t),CDo=i(FA),ad=n(FA,"P",{});var Qre=s(ad);wDo=r(Qre,`Note:
Loading a model from its configuration file does `),Qpe=n(Qre,"STRONG",{});var JTt=s(Qpe);ADo=r(JTt,"not"),JTt.forEach(t),LDo=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=n(Qre,"A",{href:!0});var YTt=s(HV);yDo=r(YTt,"from_pretrained()"),YTt.forEach(t),xDo=r(Qre," to load the model weights."),Qre.forEach(t),$Do=i(FA),T(Vb.$$.fragment,FA),FA.forEach(t),kDo=i(ll),ro=n(ll,"DIV",{class:!0});var ma=s(ro);T(ly.$$.fragment,ma),SDo=i(ma),Wpe=n(ma,"P",{});var KTt=s(Wpe);RDo=r(KTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),KTt.forEach(t),PDo=i(ma),Ga=n(ma,"P",{});var TA=s(Ga);BDo=r(TA,"The model class to instantiate is selected based on the "),Hpe=n(TA,"CODE",{});var ZTt=s(Hpe);IDo=r(ZTt,"model_type"),ZTt.forEach(t),NDo=r(TA,` property of the config object (either
passed as an argument or loaded from `),Upe=n(TA,"CODE",{});var e7t=s(Upe);qDo=r(e7t,"pretrained_model_name_or_path"),e7t.forEach(t),jDo=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=n(TA,"CODE",{});var o7t=s(Jpe);DDo=r(o7t,"pretrained_model_name_or_path"),o7t.forEach(t),GDo=r(TA,":"),TA.forEach(t),ODo=i(ma),q=n(ma,"UL",{});var D=s(q);Xb=n(D,"LI",{});var IRe=s(Xb);Ype=n(IRe,"STRONG",{});var r7t=s(Ype);VDo=r(r7t,"albert"),r7t.forEach(t),XDo=r(IRe," \u2014 "),UV=n(IRe,"A",{href:!0});var t7t=s(UV);zDo=r(t7t,"AlbertForSequenceClassification"),t7t.forEach(t),QDo=r(IRe," (ALBERT model)"),IRe.forEach(t),WDo=i(D),zb=n(D,"LI",{});var NRe=s(zb);Kpe=n(NRe,"STRONG",{});var a7t=s(Kpe);HDo=r(a7t,"bart"),a7t.forEach(t),UDo=r(NRe," \u2014 "),JV=n(NRe,"A",{href:!0});var n7t=s(JV);JDo=r(n7t,"BartForSequenceClassification"),n7t.forEach(t),YDo=r(NRe," (BART model)"),NRe.forEach(t),KDo=i(D),Qb=n(D,"LI",{});var qRe=s(Qb);Zpe=n(qRe,"STRONG",{});var s7t=s(Zpe);ZDo=r(s7t,"bert"),s7t.forEach(t),eGo=r(qRe," \u2014 "),YV=n(qRe,"A",{href:!0});var l7t=s(YV);oGo=r(l7t,"BertForSequenceClassification"),l7t.forEach(t),rGo=r(qRe," (BERT model)"),qRe.forEach(t),tGo=i(D),Wb=n(D,"LI",{});var jRe=s(Wb);e_e=n(jRe,"STRONG",{});var i7t=s(e_e);aGo=r(i7t,"big_bird"),i7t.forEach(t),nGo=r(jRe," \u2014 "),KV=n(jRe,"A",{href:!0});var d7t=s(KV);sGo=r(d7t,"BigBirdForSequenceClassification"),d7t.forEach(t),lGo=r(jRe," (BigBird model)"),jRe.forEach(t),iGo=i(D),Hb=n(D,"LI",{});var DRe=s(Hb);o_e=n(DRe,"STRONG",{});var c7t=s(o_e);dGo=r(c7t,"bigbird_pegasus"),c7t.forEach(t),cGo=r(DRe," \u2014 "),ZV=n(DRe,"A",{href:!0});var f7t=s(ZV);fGo=r(f7t,"BigBirdPegasusForSequenceClassification"),f7t.forEach(t),mGo=r(DRe," (BigBird-Pegasus model)"),DRe.forEach(t),gGo=i(D),Ub=n(D,"LI",{});var GRe=s(Ub);r_e=n(GRe,"STRONG",{});var m7t=s(r_e);hGo=r(m7t,"bloom"),m7t.forEach(t),pGo=r(GRe," \u2014 "),eX=n(GRe,"A",{href:!0});var g7t=s(eX);_Go=r(g7t,"BloomForSequenceClassification"),g7t.forEach(t),uGo=r(GRe," (BLOOM model)"),GRe.forEach(t),bGo=i(D),Jb=n(D,"LI",{});var ORe=s(Jb);t_e=n(ORe,"STRONG",{});var h7t=s(t_e);vGo=r(h7t,"camembert"),h7t.forEach(t),FGo=r(ORe," \u2014 "),oX=n(ORe,"A",{href:!0});var p7t=s(oX);TGo=r(p7t,"CamembertForSequenceClassification"),p7t.forEach(t),MGo=r(ORe," (CamemBERT model)"),ORe.forEach(t),EGo=i(D),Yb=n(D,"LI",{});var VRe=s(Yb);a_e=n(VRe,"STRONG",{});var _7t=s(a_e);CGo=r(_7t,"canine"),_7t.forEach(t),wGo=r(VRe," \u2014 "),rX=n(VRe,"A",{href:!0});var u7t=s(rX);AGo=r(u7t,"CanineForSequenceClassification"),u7t.forEach(t),LGo=r(VRe," (CANINE model)"),VRe.forEach(t),yGo=i(D),Kb=n(D,"LI",{});var XRe=s(Kb);n_e=n(XRe,"STRONG",{});var b7t=s(n_e);xGo=r(b7t,"convbert"),b7t.forEach(t),$Go=r(XRe," \u2014 "),tX=n(XRe,"A",{href:!0});var v7t=s(tX);kGo=r(v7t,"ConvBertForSequenceClassification"),v7t.forEach(t),SGo=r(XRe," (ConvBERT model)"),XRe.forEach(t),RGo=i(D),Zb=n(D,"LI",{});var zRe=s(Zb);s_e=n(zRe,"STRONG",{});var F7t=s(s_e);PGo=r(F7t,"ctrl"),F7t.forEach(t),BGo=r(zRe," \u2014 "),aX=n(zRe,"A",{href:!0});var T7t=s(aX);IGo=r(T7t,"CTRLForSequenceClassification"),T7t.forEach(t),NGo=r(zRe," (CTRL model)"),zRe.forEach(t),qGo=i(D),ev=n(D,"LI",{});var QRe=s(ev);l_e=n(QRe,"STRONG",{});var M7t=s(l_e);jGo=r(M7t,"data2vec-text"),M7t.forEach(t),DGo=r(QRe," \u2014 "),nX=n(QRe,"A",{href:!0});var E7t=s(nX);GGo=r(E7t,"Data2VecTextForSequenceClassification"),E7t.forEach(t),OGo=r(QRe," (Data2VecText model)"),QRe.forEach(t),VGo=i(D),ov=n(D,"LI",{});var WRe=s(ov);i_e=n(WRe,"STRONG",{});var C7t=s(i_e);XGo=r(C7t,"deberta"),C7t.forEach(t),zGo=r(WRe," \u2014 "),sX=n(WRe,"A",{href:!0});var w7t=s(sX);QGo=r(w7t,"DebertaForSequenceClassification"),w7t.forEach(t),WGo=r(WRe," (DeBERTa model)"),WRe.forEach(t),HGo=i(D),rv=n(D,"LI",{});var HRe=s(rv);d_e=n(HRe,"STRONG",{});var A7t=s(d_e);UGo=r(A7t,"deberta-v2"),A7t.forEach(t),JGo=r(HRe," \u2014 "),lX=n(HRe,"A",{href:!0});var L7t=s(lX);YGo=r(L7t,"DebertaV2ForSequenceClassification"),L7t.forEach(t),KGo=r(HRe," (DeBERTa-v2 model)"),HRe.forEach(t),ZGo=i(D),tv=n(D,"LI",{});var URe=s(tv);c_e=n(URe,"STRONG",{});var y7t=s(c_e);eOo=r(y7t,"distilbert"),y7t.forEach(t),oOo=r(URe," \u2014 "),iX=n(URe,"A",{href:!0});var x7t=s(iX);rOo=r(x7t,"DistilBertForSequenceClassification"),x7t.forEach(t),tOo=r(URe," (DistilBERT model)"),URe.forEach(t),aOo=i(D),av=n(D,"LI",{});var JRe=s(av);f_e=n(JRe,"STRONG",{});var $7t=s(f_e);nOo=r($7t,"electra"),$7t.forEach(t),sOo=r(JRe," \u2014 "),dX=n(JRe,"A",{href:!0});var k7t=s(dX);lOo=r(k7t,"ElectraForSequenceClassification"),k7t.forEach(t),iOo=r(JRe," (ELECTRA model)"),JRe.forEach(t),dOo=i(D),nv=n(D,"LI",{});var YRe=s(nv);m_e=n(YRe,"STRONG",{});var S7t=s(m_e);cOo=r(S7t,"flaubert"),S7t.forEach(t),fOo=r(YRe," \u2014 "),cX=n(YRe,"A",{href:!0});var R7t=s(cX);mOo=r(R7t,"FlaubertForSequenceClassification"),R7t.forEach(t),gOo=r(YRe," (FlauBERT model)"),YRe.forEach(t),hOo=i(D),sv=n(D,"LI",{});var KRe=s(sv);g_e=n(KRe,"STRONG",{});var P7t=s(g_e);pOo=r(P7t,"fnet"),P7t.forEach(t),_Oo=r(KRe," \u2014 "),fX=n(KRe,"A",{href:!0});var B7t=s(fX);uOo=r(B7t,"FNetForSequenceClassification"),B7t.forEach(t),bOo=r(KRe," (FNet model)"),KRe.forEach(t),vOo=i(D),lv=n(D,"LI",{});var ZRe=s(lv);h_e=n(ZRe,"STRONG",{});var I7t=s(h_e);FOo=r(I7t,"funnel"),I7t.forEach(t),TOo=r(ZRe," \u2014 "),mX=n(ZRe,"A",{href:!0});var N7t=s(mX);MOo=r(N7t,"FunnelForSequenceClassification"),N7t.forEach(t),EOo=r(ZRe," (Funnel Transformer model)"),ZRe.forEach(t),COo=i(D),iv=n(D,"LI",{});var ePe=s(iv);p_e=n(ePe,"STRONG",{});var q7t=s(p_e);wOo=r(q7t,"gpt2"),q7t.forEach(t),AOo=r(ePe," \u2014 "),gX=n(ePe,"A",{href:!0});var j7t=s(gX);LOo=r(j7t,"GPT2ForSequenceClassification"),j7t.forEach(t),yOo=r(ePe," (OpenAI GPT-2 model)"),ePe.forEach(t),xOo=i(D),dv=n(D,"LI",{});var oPe=s(dv);__e=n(oPe,"STRONG",{});var D7t=s(__e);$Oo=r(D7t,"gpt_neo"),D7t.forEach(t),kOo=r(oPe," \u2014 "),hX=n(oPe,"A",{href:!0});var G7t=s(hX);SOo=r(G7t,"GPTNeoForSequenceClassification"),G7t.forEach(t),ROo=r(oPe," (GPT Neo model)"),oPe.forEach(t),POo=i(D),cv=n(D,"LI",{});var rPe=s(cv);u_e=n(rPe,"STRONG",{});var O7t=s(u_e);BOo=r(O7t,"gptj"),O7t.forEach(t),IOo=r(rPe," \u2014 "),pX=n(rPe,"A",{href:!0});var V7t=s(pX);NOo=r(V7t,"GPTJForSequenceClassification"),V7t.forEach(t),qOo=r(rPe," (GPT-J model)"),rPe.forEach(t),jOo=i(D),fv=n(D,"LI",{});var tPe=s(fv);b_e=n(tPe,"STRONG",{});var X7t=s(b_e);DOo=r(X7t,"ibert"),X7t.forEach(t),GOo=r(tPe," \u2014 "),_X=n(tPe,"A",{href:!0});var z7t=s(_X);OOo=r(z7t,"IBertForSequenceClassification"),z7t.forEach(t),VOo=r(tPe," (I-BERT model)"),tPe.forEach(t),XOo=i(D),mv=n(D,"LI",{});var aPe=s(mv);v_e=n(aPe,"STRONG",{});var Q7t=s(v_e);zOo=r(Q7t,"layoutlm"),Q7t.forEach(t),QOo=r(aPe," \u2014 "),uX=n(aPe,"A",{href:!0});var W7t=s(uX);WOo=r(W7t,"LayoutLMForSequenceClassification"),W7t.forEach(t),HOo=r(aPe," (LayoutLM model)"),aPe.forEach(t),UOo=i(D),gv=n(D,"LI",{});var nPe=s(gv);F_e=n(nPe,"STRONG",{});var H7t=s(F_e);JOo=r(H7t,"layoutlmv2"),H7t.forEach(t),YOo=r(nPe," \u2014 "),bX=n(nPe,"A",{href:!0});var U7t=s(bX);KOo=r(U7t,"LayoutLMv2ForSequenceClassification"),U7t.forEach(t),ZOo=r(nPe," (LayoutLMv2 model)"),nPe.forEach(t),eVo=i(D),hv=n(D,"LI",{});var sPe=s(hv);T_e=n(sPe,"STRONG",{});var J7t=s(T_e);oVo=r(J7t,"layoutlmv3"),J7t.forEach(t),rVo=r(sPe," \u2014 "),vX=n(sPe,"A",{href:!0});var Y7t=s(vX);tVo=r(Y7t,"LayoutLMv3ForSequenceClassification"),Y7t.forEach(t),aVo=r(sPe," (LayoutLMv3 model)"),sPe.forEach(t),nVo=i(D),pv=n(D,"LI",{});var lPe=s(pv);M_e=n(lPe,"STRONG",{});var K7t=s(M_e);sVo=r(K7t,"led"),K7t.forEach(t),lVo=r(lPe," \u2014 "),FX=n(lPe,"A",{href:!0});var Z7t=s(FX);iVo=r(Z7t,"LEDForSequenceClassification"),Z7t.forEach(t),dVo=r(lPe," (LED model)"),lPe.forEach(t),cVo=i(D),_v=n(D,"LI",{});var iPe=s(_v);E_e=n(iPe,"STRONG",{});var e9t=s(E_e);fVo=r(e9t,"longformer"),e9t.forEach(t),mVo=r(iPe," \u2014 "),TX=n(iPe,"A",{href:!0});var o9t=s(TX);gVo=r(o9t,"LongformerForSequenceClassification"),o9t.forEach(t),hVo=r(iPe," (Longformer model)"),iPe.forEach(t),pVo=i(D),uv=n(D,"LI",{});var dPe=s(uv);C_e=n(dPe,"STRONG",{});var r9t=s(C_e);_Vo=r(r9t,"mbart"),r9t.forEach(t),uVo=r(dPe," \u2014 "),MX=n(dPe,"A",{href:!0});var t9t=s(MX);bVo=r(t9t,"MBartForSequenceClassification"),t9t.forEach(t),vVo=r(dPe," (mBART model)"),dPe.forEach(t),FVo=i(D),bv=n(D,"LI",{});var cPe=s(bv);w_e=n(cPe,"STRONG",{});var a9t=s(w_e);TVo=r(a9t,"megatron-bert"),a9t.forEach(t),MVo=r(cPe," \u2014 "),EX=n(cPe,"A",{href:!0});var n9t=s(EX);EVo=r(n9t,"MegatronBertForSequenceClassification"),n9t.forEach(t),CVo=r(cPe," (Megatron-BERT model)"),cPe.forEach(t),wVo=i(D),vv=n(D,"LI",{});var fPe=s(vv);A_e=n(fPe,"STRONG",{});var s9t=s(A_e);AVo=r(s9t,"mobilebert"),s9t.forEach(t),LVo=r(fPe," \u2014 "),CX=n(fPe,"A",{href:!0});var l9t=s(CX);yVo=r(l9t,"MobileBertForSequenceClassification"),l9t.forEach(t),xVo=r(fPe," (MobileBERT model)"),fPe.forEach(t),$Vo=i(D),Fv=n(D,"LI",{});var mPe=s(Fv);L_e=n(mPe,"STRONG",{});var i9t=s(L_e);kVo=r(i9t,"mpnet"),i9t.forEach(t),SVo=r(mPe," \u2014 "),wX=n(mPe,"A",{href:!0});var d9t=s(wX);RVo=r(d9t,"MPNetForSequenceClassification"),d9t.forEach(t),PVo=r(mPe," (MPNet model)"),mPe.forEach(t),BVo=i(D),Tv=n(D,"LI",{});var gPe=s(Tv);y_e=n(gPe,"STRONG",{});var c9t=s(y_e);IVo=r(c9t,"mvp"),c9t.forEach(t),NVo=r(gPe," \u2014 "),AX=n(gPe,"A",{href:!0});var f9t=s(AX);qVo=r(f9t,"MvpForSequenceClassification"),f9t.forEach(t),jVo=r(gPe," (MVP model)"),gPe.forEach(t),DVo=i(D),Mv=n(D,"LI",{});var hPe=s(Mv);x_e=n(hPe,"STRONG",{});var m9t=s(x_e);GVo=r(m9t,"nezha"),m9t.forEach(t),OVo=r(hPe," \u2014 "),LX=n(hPe,"A",{href:!0});var g9t=s(LX);VVo=r(g9t,"NezhaForSequenceClassification"),g9t.forEach(t),XVo=r(hPe," (Nezha model)"),hPe.forEach(t),zVo=i(D),Ev=n(D,"LI",{});var pPe=s(Ev);$_e=n(pPe,"STRONG",{});var h9t=s($_e);QVo=r(h9t,"nystromformer"),h9t.forEach(t),WVo=r(pPe," \u2014 "),yX=n(pPe,"A",{href:!0});var p9t=s(yX);HVo=r(p9t,"NystromformerForSequenceClassification"),p9t.forEach(t),UVo=r(pPe," (Nystr\xF6mformer model)"),pPe.forEach(t),JVo=i(D),Cv=n(D,"LI",{});var _Pe=s(Cv);k_e=n(_Pe,"STRONG",{});var _9t=s(k_e);YVo=r(_9t,"openai-gpt"),_9t.forEach(t),KVo=r(_Pe," \u2014 "),xX=n(_Pe,"A",{href:!0});var u9t=s(xX);ZVo=r(u9t,"OpenAIGPTForSequenceClassification"),u9t.forEach(t),eXo=r(_Pe," (OpenAI GPT model)"),_Pe.forEach(t),oXo=i(D),wv=n(D,"LI",{});var uPe=s(wv);S_e=n(uPe,"STRONG",{});var b9t=s(S_e);rXo=r(b9t,"perceiver"),b9t.forEach(t),tXo=r(uPe," \u2014 "),$X=n(uPe,"A",{href:!0});var v9t=s($X);aXo=r(v9t,"PerceiverForSequenceClassification"),v9t.forEach(t),nXo=r(uPe," (Perceiver model)"),uPe.forEach(t),sXo=i(D),Av=n(D,"LI",{});var bPe=s(Av);R_e=n(bPe,"STRONG",{});var F9t=s(R_e);lXo=r(F9t,"plbart"),F9t.forEach(t),iXo=r(bPe," \u2014 "),kX=n(bPe,"A",{href:!0});var T9t=s(kX);dXo=r(T9t,"PLBartForSequenceClassification"),T9t.forEach(t),cXo=r(bPe," (PLBart model)"),bPe.forEach(t),fXo=i(D),Lv=n(D,"LI",{});var vPe=s(Lv);P_e=n(vPe,"STRONG",{});var M9t=s(P_e);mXo=r(M9t,"qdqbert"),M9t.forEach(t),gXo=r(vPe," \u2014 "),SX=n(vPe,"A",{href:!0});var E9t=s(SX);hXo=r(E9t,"QDQBertForSequenceClassification"),E9t.forEach(t),pXo=r(vPe," (QDQBert model)"),vPe.forEach(t),_Xo=i(D),yv=n(D,"LI",{});var FPe=s(yv);B_e=n(FPe,"STRONG",{});var C9t=s(B_e);uXo=r(C9t,"reformer"),C9t.forEach(t),bXo=r(FPe," \u2014 "),RX=n(FPe,"A",{href:!0});var w9t=s(RX);vXo=r(w9t,"ReformerForSequenceClassification"),w9t.forEach(t),FXo=r(FPe," (Reformer model)"),FPe.forEach(t),TXo=i(D),xv=n(D,"LI",{});var TPe=s(xv);I_e=n(TPe,"STRONG",{});var A9t=s(I_e);MXo=r(A9t,"rembert"),A9t.forEach(t),EXo=r(TPe," \u2014 "),PX=n(TPe,"A",{href:!0});var L9t=s(PX);CXo=r(L9t,"RemBertForSequenceClassification"),L9t.forEach(t),wXo=r(TPe," (RemBERT model)"),TPe.forEach(t),AXo=i(D),$v=n(D,"LI",{});var MPe=s($v);N_e=n(MPe,"STRONG",{});var y9t=s(N_e);LXo=r(y9t,"roberta"),y9t.forEach(t),yXo=r(MPe," \u2014 "),BX=n(MPe,"A",{href:!0});var x9t=s(BX);xXo=r(x9t,"RobertaForSequenceClassification"),x9t.forEach(t),$Xo=r(MPe," (RoBERTa model)"),MPe.forEach(t),kXo=i(D),kv=n(D,"LI",{});var EPe=s(kv);q_e=n(EPe,"STRONG",{});var $9t=s(q_e);SXo=r($9t,"roformer"),$9t.forEach(t),RXo=r(EPe," \u2014 "),IX=n(EPe,"A",{href:!0});var k9t=s(IX);PXo=r(k9t,"RoFormerForSequenceClassification"),k9t.forEach(t),BXo=r(EPe," (RoFormer model)"),EPe.forEach(t),IXo=i(D),Sv=n(D,"LI",{});var CPe=s(Sv);j_e=n(CPe,"STRONG",{});var S9t=s(j_e);NXo=r(S9t,"squeezebert"),S9t.forEach(t),qXo=r(CPe," \u2014 "),NX=n(CPe,"A",{href:!0});var R9t=s(NX);jXo=r(R9t,"SqueezeBertForSequenceClassification"),R9t.forEach(t),DXo=r(CPe," (SqueezeBERT model)"),CPe.forEach(t),GXo=i(D),Rv=n(D,"LI",{});var wPe=s(Rv);D_e=n(wPe,"STRONG",{});var P9t=s(D_e);OXo=r(P9t,"tapas"),P9t.forEach(t),VXo=r(wPe," \u2014 "),qX=n(wPe,"A",{href:!0});var B9t=s(qX);XXo=r(B9t,"TapasForSequenceClassification"),B9t.forEach(t),zXo=r(wPe," (TAPAS model)"),wPe.forEach(t),QXo=i(D),Pv=n(D,"LI",{});var APe=s(Pv);G_e=n(APe,"STRONG",{});var I9t=s(G_e);WXo=r(I9t,"transfo-xl"),I9t.forEach(t),HXo=r(APe," \u2014 "),jX=n(APe,"A",{href:!0});var N9t=s(jX);UXo=r(N9t,"TransfoXLForSequenceClassification"),N9t.forEach(t),JXo=r(APe," (Transformer-XL model)"),APe.forEach(t),YXo=i(D),Bv=n(D,"LI",{});var LPe=s(Bv);O_e=n(LPe,"STRONG",{});var q9t=s(O_e);KXo=r(q9t,"xlm"),q9t.forEach(t),ZXo=r(LPe," \u2014 "),DX=n(LPe,"A",{href:!0});var j9t=s(DX);ezo=r(j9t,"XLMForSequenceClassification"),j9t.forEach(t),ozo=r(LPe," (XLM model)"),LPe.forEach(t),rzo=i(D),Iv=n(D,"LI",{});var yPe=s(Iv);V_e=n(yPe,"STRONG",{});var D9t=s(V_e);tzo=r(D9t,"xlm-roberta"),D9t.forEach(t),azo=r(yPe," \u2014 "),GX=n(yPe,"A",{href:!0});var G9t=s(GX);nzo=r(G9t,"XLMRobertaForSequenceClassification"),G9t.forEach(t),szo=r(yPe," (XLM-RoBERTa model)"),yPe.forEach(t),lzo=i(D),Nv=n(D,"LI",{});var xPe=s(Nv);X_e=n(xPe,"STRONG",{});var O9t=s(X_e);izo=r(O9t,"xlm-roberta-xl"),O9t.forEach(t),dzo=r(xPe," \u2014 "),OX=n(xPe,"A",{href:!0});var V9t=s(OX);czo=r(V9t,"XLMRobertaXLForSequenceClassification"),V9t.forEach(t),fzo=r(xPe," (XLM-RoBERTa-XL model)"),xPe.forEach(t),mzo=i(D),qv=n(D,"LI",{});var $Pe=s(qv);z_e=n($Pe,"STRONG",{});var X9t=s(z_e);gzo=r(X9t,"xlnet"),X9t.forEach(t),hzo=r($Pe," \u2014 "),VX=n($Pe,"A",{href:!0});var z9t=s(VX);pzo=r(z9t,"XLNetForSequenceClassification"),z9t.forEach(t),_zo=r($Pe," (XLNet model)"),$Pe.forEach(t),uzo=i(D),jv=n(D,"LI",{});var kPe=s(jv);Q_e=n(kPe,"STRONG",{});var Q9t=s(Q_e);bzo=r(Q9t,"yoso"),Q9t.forEach(t),vzo=r(kPe," \u2014 "),XX=n(kPe,"A",{href:!0});var W9t=s(XX);Fzo=r(W9t,"YosoForSequenceClassification"),W9t.forEach(t),Tzo=r(kPe," (YOSO model)"),kPe.forEach(t),D.forEach(t),Mzo=i(ma),Dv=n(ma,"P",{});var SPe=s(Dv);Ezo=r(SPe,"The model is set in evaluation mode by default using "),W_e=n(SPe,"CODE",{});var H9t=s(W_e);Czo=r(H9t,"model.eval()"),H9t.forEach(t),wzo=r(SPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H_e=n(SPe,"CODE",{});var U9t=s(H_e);Azo=r(U9t,"model.train()"),U9t.forEach(t),SPe.forEach(t),Lzo=i(ma),T(Gv.$$.fragment,ma),ma.forEach(t),ll.forEach(t),$Xe=i(f),nd=n(f,"H2",{class:!0});var IQe=s(nd);Ov=n(IQe,"A",{id:!0,class:!0,href:!0});var J9t=s(Ov);U_e=n(J9t,"SPAN",{});var Y9t=s(U_e);T(iy.$$.fragment,Y9t),Y9t.forEach(t),J9t.forEach(t),yzo=i(IQe),J_e=n(IQe,"SPAN",{});var K9t=s(J_e);xzo=r(K9t,"AutoModelForMultipleChoice"),K9t.forEach(t),IQe.forEach(t),kXe=i(f),No=n(f,"DIV",{class:!0});var il=s(No);T(dy.$$.fragment,il),$zo=i(il),sd=n(il,"P",{});var Wre=s(sd);kzo=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zX=n(Wre,"A",{href:!0});var Z9t=s(zX);Szo=r(Z9t,"from_pretrained()"),Z9t.forEach(t),Rzo=r(Wre," class method or the "),QX=n(Wre,"A",{href:!0});var eMt=s(QX);Pzo=r(eMt,"from_config()"),eMt.forEach(t),Bzo=r(Wre,` class
method.`),Wre.forEach(t),Izo=i(il),cy=n(il,"P",{});var NQe=s(cy);Nzo=r(NQe,"This class cannot be instantiated directly using "),Y_e=n(NQe,"CODE",{});var oMt=s(Y_e);qzo=r(oMt,"__init__()"),oMt.forEach(t),jzo=r(NQe," (throws an error)."),NQe.forEach(t),Dzo=i(il),ht=n(il,"DIV",{class:!0});var MA=s(ht);T(fy.$$.fragment,MA),Gzo=i(MA),K_e=n(MA,"P",{});var rMt=s(K_e);Ozo=r(rMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rMt.forEach(t),Vzo=i(MA),ld=n(MA,"P",{});var Hre=s(ld);Xzo=r(Hre,`Note:
Loading a model from its configuration file does `),Z_e=n(Hre,"STRONG",{});var tMt=s(Z_e);zzo=r(tMt,"not"),tMt.forEach(t),Qzo=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(Hre,"A",{href:!0});var aMt=s(WX);Wzo=r(aMt,"from_pretrained()"),aMt.forEach(t),Hzo=r(Hre," to load the model weights."),Hre.forEach(t),Uzo=i(MA),T(Vv.$$.fragment,MA),MA.forEach(t),Jzo=i(il),to=n(il,"DIV",{class:!0});var ga=s(to);T(my.$$.fragment,ga),Yzo=i(ga),eue=n(ga,"P",{});var nMt=s(eue);Kzo=r(nMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),nMt.forEach(t),Zzo=i(ga),Oa=n(ga,"P",{});var EA=s(Oa);eQo=r(EA,"The model class to instantiate is selected based on the "),oue=n(EA,"CODE",{});var sMt=s(oue);oQo=r(sMt,"model_type"),sMt.forEach(t),rQo=r(EA,` property of the config object (either
passed as an argument or loaded from `),rue=n(EA,"CODE",{});var lMt=s(rue);tQo=r(lMt,"pretrained_model_name_or_path"),lMt.forEach(t),aQo=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=n(EA,"CODE",{});var iMt=s(tue);nQo=r(iMt,"pretrained_model_name_or_path"),iMt.forEach(t),sQo=r(EA,":"),EA.forEach(t),lQo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);Xv=n(ee,"LI",{});var RPe=s(Xv);aue=n(RPe,"STRONG",{});var dMt=s(aue);iQo=r(dMt,"albert"),dMt.forEach(t),dQo=r(RPe," \u2014 "),HX=n(RPe,"A",{href:!0});var cMt=s(HX);cQo=r(cMt,"AlbertForMultipleChoice"),cMt.forEach(t),fQo=r(RPe," (ALBERT model)"),RPe.forEach(t),mQo=i(ee),zv=n(ee,"LI",{});var PPe=s(zv);nue=n(PPe,"STRONG",{});var fMt=s(nue);gQo=r(fMt,"bert"),fMt.forEach(t),hQo=r(PPe," \u2014 "),UX=n(PPe,"A",{href:!0});var mMt=s(UX);pQo=r(mMt,"BertForMultipleChoice"),mMt.forEach(t),_Qo=r(PPe," (BERT model)"),PPe.forEach(t),uQo=i(ee),Qv=n(ee,"LI",{});var BPe=s(Qv);sue=n(BPe,"STRONG",{});var gMt=s(sue);bQo=r(gMt,"big_bird"),gMt.forEach(t),vQo=r(BPe," \u2014 "),JX=n(BPe,"A",{href:!0});var hMt=s(JX);FQo=r(hMt,"BigBirdForMultipleChoice"),hMt.forEach(t),TQo=r(BPe," (BigBird model)"),BPe.forEach(t),MQo=i(ee),Wv=n(ee,"LI",{});var IPe=s(Wv);lue=n(IPe,"STRONG",{});var pMt=s(lue);EQo=r(pMt,"camembert"),pMt.forEach(t),CQo=r(IPe," \u2014 "),YX=n(IPe,"A",{href:!0});var _Mt=s(YX);wQo=r(_Mt,"CamembertForMultipleChoice"),_Mt.forEach(t),AQo=r(IPe," (CamemBERT model)"),IPe.forEach(t),LQo=i(ee),Hv=n(ee,"LI",{});var NPe=s(Hv);iue=n(NPe,"STRONG",{});var uMt=s(iue);yQo=r(uMt,"canine"),uMt.forEach(t),xQo=r(NPe," \u2014 "),KX=n(NPe,"A",{href:!0});var bMt=s(KX);$Qo=r(bMt,"CanineForMultipleChoice"),bMt.forEach(t),kQo=r(NPe," (CANINE model)"),NPe.forEach(t),SQo=i(ee),Uv=n(ee,"LI",{});var qPe=s(Uv);due=n(qPe,"STRONG",{});var vMt=s(due);RQo=r(vMt,"convbert"),vMt.forEach(t),PQo=r(qPe," \u2014 "),ZX=n(qPe,"A",{href:!0});var FMt=s(ZX);BQo=r(FMt,"ConvBertForMultipleChoice"),FMt.forEach(t),IQo=r(qPe," (ConvBERT model)"),qPe.forEach(t),NQo=i(ee),Jv=n(ee,"LI",{});var jPe=s(Jv);cue=n(jPe,"STRONG",{});var TMt=s(cue);qQo=r(TMt,"data2vec-text"),TMt.forEach(t),jQo=r(jPe," \u2014 "),ez=n(jPe,"A",{href:!0});var MMt=s(ez);DQo=r(MMt,"Data2VecTextForMultipleChoice"),MMt.forEach(t),GQo=r(jPe," (Data2VecText model)"),jPe.forEach(t),OQo=i(ee),Yv=n(ee,"LI",{});var DPe=s(Yv);fue=n(DPe,"STRONG",{});var EMt=s(fue);VQo=r(EMt,"deberta-v2"),EMt.forEach(t),XQo=r(DPe," \u2014 "),oz=n(DPe,"A",{href:!0});var CMt=s(oz);zQo=r(CMt,"DebertaV2ForMultipleChoice"),CMt.forEach(t),QQo=r(DPe," (DeBERTa-v2 model)"),DPe.forEach(t),WQo=i(ee),Kv=n(ee,"LI",{});var GPe=s(Kv);mue=n(GPe,"STRONG",{});var wMt=s(mue);HQo=r(wMt,"distilbert"),wMt.forEach(t),UQo=r(GPe," \u2014 "),rz=n(GPe,"A",{href:!0});var AMt=s(rz);JQo=r(AMt,"DistilBertForMultipleChoice"),AMt.forEach(t),YQo=r(GPe," (DistilBERT model)"),GPe.forEach(t),KQo=i(ee),Zv=n(ee,"LI",{});var OPe=s(Zv);gue=n(OPe,"STRONG",{});var LMt=s(gue);ZQo=r(LMt,"electra"),LMt.forEach(t),eWo=r(OPe," \u2014 "),tz=n(OPe,"A",{href:!0});var yMt=s(tz);oWo=r(yMt,"ElectraForMultipleChoice"),yMt.forEach(t),rWo=r(OPe," (ELECTRA model)"),OPe.forEach(t),tWo=i(ee),e0=n(ee,"LI",{});var VPe=s(e0);hue=n(VPe,"STRONG",{});var xMt=s(hue);aWo=r(xMt,"flaubert"),xMt.forEach(t),nWo=r(VPe," \u2014 "),az=n(VPe,"A",{href:!0});var $Mt=s(az);sWo=r($Mt,"FlaubertForMultipleChoice"),$Mt.forEach(t),lWo=r(VPe," (FlauBERT model)"),VPe.forEach(t),iWo=i(ee),o0=n(ee,"LI",{});var XPe=s(o0);pue=n(XPe,"STRONG",{});var kMt=s(pue);dWo=r(kMt,"fnet"),kMt.forEach(t),cWo=r(XPe," \u2014 "),nz=n(XPe,"A",{href:!0});var SMt=s(nz);fWo=r(SMt,"FNetForMultipleChoice"),SMt.forEach(t),mWo=r(XPe," (FNet model)"),XPe.forEach(t),gWo=i(ee),r0=n(ee,"LI",{});var zPe=s(r0);_ue=n(zPe,"STRONG",{});var RMt=s(_ue);hWo=r(RMt,"funnel"),RMt.forEach(t),pWo=r(zPe," \u2014 "),sz=n(zPe,"A",{href:!0});var PMt=s(sz);_Wo=r(PMt,"FunnelForMultipleChoice"),PMt.forEach(t),uWo=r(zPe," (Funnel Transformer model)"),zPe.forEach(t),bWo=i(ee),t0=n(ee,"LI",{});var QPe=s(t0);uue=n(QPe,"STRONG",{});var BMt=s(uue);vWo=r(BMt,"ibert"),BMt.forEach(t),FWo=r(QPe," \u2014 "),lz=n(QPe,"A",{href:!0});var IMt=s(lz);TWo=r(IMt,"IBertForMultipleChoice"),IMt.forEach(t),MWo=r(QPe," (I-BERT model)"),QPe.forEach(t),EWo=i(ee),a0=n(ee,"LI",{});var WPe=s(a0);bue=n(WPe,"STRONG",{});var NMt=s(bue);CWo=r(NMt,"longformer"),NMt.forEach(t),wWo=r(WPe," \u2014 "),iz=n(WPe,"A",{href:!0});var qMt=s(iz);AWo=r(qMt,"LongformerForMultipleChoice"),qMt.forEach(t),LWo=r(WPe," (Longformer model)"),WPe.forEach(t),yWo=i(ee),n0=n(ee,"LI",{});var HPe=s(n0);vue=n(HPe,"STRONG",{});var jMt=s(vue);xWo=r(jMt,"megatron-bert"),jMt.forEach(t),$Wo=r(HPe," \u2014 "),dz=n(HPe,"A",{href:!0});var DMt=s(dz);kWo=r(DMt,"MegatronBertForMultipleChoice"),DMt.forEach(t),SWo=r(HPe," (Megatron-BERT model)"),HPe.forEach(t),RWo=i(ee),s0=n(ee,"LI",{});var UPe=s(s0);Fue=n(UPe,"STRONG",{});var GMt=s(Fue);PWo=r(GMt,"mobilebert"),GMt.forEach(t),BWo=r(UPe," \u2014 "),cz=n(UPe,"A",{href:!0});var OMt=s(cz);IWo=r(OMt,"MobileBertForMultipleChoice"),OMt.forEach(t),NWo=r(UPe," (MobileBERT model)"),UPe.forEach(t),qWo=i(ee),l0=n(ee,"LI",{});var JPe=s(l0);Tue=n(JPe,"STRONG",{});var VMt=s(Tue);jWo=r(VMt,"mpnet"),VMt.forEach(t),DWo=r(JPe," \u2014 "),fz=n(JPe,"A",{href:!0});var XMt=s(fz);GWo=r(XMt,"MPNetForMultipleChoice"),XMt.forEach(t),OWo=r(JPe," (MPNet model)"),JPe.forEach(t),VWo=i(ee),i0=n(ee,"LI",{});var YPe=s(i0);Mue=n(YPe,"STRONG",{});var zMt=s(Mue);XWo=r(zMt,"nezha"),zMt.forEach(t),zWo=r(YPe," \u2014 "),mz=n(YPe,"A",{href:!0});var QMt=s(mz);QWo=r(QMt,"NezhaForMultipleChoice"),QMt.forEach(t),WWo=r(YPe," (Nezha model)"),YPe.forEach(t),HWo=i(ee),d0=n(ee,"LI",{});var KPe=s(d0);Eue=n(KPe,"STRONG",{});var WMt=s(Eue);UWo=r(WMt,"nystromformer"),WMt.forEach(t),JWo=r(KPe," \u2014 "),gz=n(KPe,"A",{href:!0});var HMt=s(gz);YWo=r(HMt,"NystromformerForMultipleChoice"),HMt.forEach(t),KWo=r(KPe," (Nystr\xF6mformer model)"),KPe.forEach(t),ZWo=i(ee),c0=n(ee,"LI",{});var ZPe=s(c0);Cue=n(ZPe,"STRONG",{});var UMt=s(Cue);eHo=r(UMt,"qdqbert"),UMt.forEach(t),oHo=r(ZPe," \u2014 "),hz=n(ZPe,"A",{href:!0});var JMt=s(hz);rHo=r(JMt,"QDQBertForMultipleChoice"),JMt.forEach(t),tHo=r(ZPe," (QDQBert model)"),ZPe.forEach(t),aHo=i(ee),f0=n(ee,"LI",{});var eBe=s(f0);wue=n(eBe,"STRONG",{});var YMt=s(wue);nHo=r(YMt,"rembert"),YMt.forEach(t),sHo=r(eBe," \u2014 "),pz=n(eBe,"A",{href:!0});var KMt=s(pz);lHo=r(KMt,"RemBertForMultipleChoice"),KMt.forEach(t),iHo=r(eBe," (RemBERT model)"),eBe.forEach(t),dHo=i(ee),m0=n(ee,"LI",{});var oBe=s(m0);Aue=n(oBe,"STRONG",{});var ZMt=s(Aue);cHo=r(ZMt,"roberta"),ZMt.forEach(t),fHo=r(oBe," \u2014 "),_z=n(oBe,"A",{href:!0});var e4t=s(_z);mHo=r(e4t,"RobertaForMultipleChoice"),e4t.forEach(t),gHo=r(oBe," (RoBERTa model)"),oBe.forEach(t),hHo=i(ee),g0=n(ee,"LI",{});var rBe=s(g0);Lue=n(rBe,"STRONG",{});var o4t=s(Lue);pHo=r(o4t,"roformer"),o4t.forEach(t),_Ho=r(rBe," \u2014 "),uz=n(rBe,"A",{href:!0});var r4t=s(uz);uHo=r(r4t,"RoFormerForMultipleChoice"),r4t.forEach(t),bHo=r(rBe," (RoFormer model)"),rBe.forEach(t),vHo=i(ee),h0=n(ee,"LI",{});var tBe=s(h0);yue=n(tBe,"STRONG",{});var t4t=s(yue);FHo=r(t4t,"squeezebert"),t4t.forEach(t),THo=r(tBe," \u2014 "),bz=n(tBe,"A",{href:!0});var a4t=s(bz);MHo=r(a4t,"SqueezeBertForMultipleChoice"),a4t.forEach(t),EHo=r(tBe," (SqueezeBERT model)"),tBe.forEach(t),CHo=i(ee),p0=n(ee,"LI",{});var aBe=s(p0);xue=n(aBe,"STRONG",{});var n4t=s(xue);wHo=r(n4t,"xlm"),n4t.forEach(t),AHo=r(aBe," \u2014 "),vz=n(aBe,"A",{href:!0});var s4t=s(vz);LHo=r(s4t,"XLMForMultipleChoice"),s4t.forEach(t),yHo=r(aBe," (XLM model)"),aBe.forEach(t),xHo=i(ee),_0=n(ee,"LI",{});var nBe=s(_0);$ue=n(nBe,"STRONG",{});var l4t=s($ue);$Ho=r(l4t,"xlm-roberta"),l4t.forEach(t),kHo=r(nBe," \u2014 "),Fz=n(nBe,"A",{href:!0});var i4t=s(Fz);SHo=r(i4t,"XLMRobertaForMultipleChoice"),i4t.forEach(t),RHo=r(nBe," (XLM-RoBERTa model)"),nBe.forEach(t),PHo=i(ee),u0=n(ee,"LI",{});var sBe=s(u0);kue=n(sBe,"STRONG",{});var d4t=s(kue);BHo=r(d4t,"xlm-roberta-xl"),d4t.forEach(t),IHo=r(sBe," \u2014 "),Tz=n(sBe,"A",{href:!0});var c4t=s(Tz);NHo=r(c4t,"XLMRobertaXLForMultipleChoice"),c4t.forEach(t),qHo=r(sBe," (XLM-RoBERTa-XL model)"),sBe.forEach(t),jHo=i(ee),b0=n(ee,"LI",{});var lBe=s(b0);Sue=n(lBe,"STRONG",{});var f4t=s(Sue);DHo=r(f4t,"xlnet"),f4t.forEach(t),GHo=r(lBe," \u2014 "),Mz=n(lBe,"A",{href:!0});var m4t=s(Mz);OHo=r(m4t,"XLNetForMultipleChoice"),m4t.forEach(t),VHo=r(lBe," (XLNet model)"),lBe.forEach(t),XHo=i(ee),v0=n(ee,"LI",{});var iBe=s(v0);Rue=n(iBe,"STRONG",{});var g4t=s(Rue);zHo=r(g4t,"yoso"),g4t.forEach(t),QHo=r(iBe," \u2014 "),Ez=n(iBe,"A",{href:!0});var h4t=s(Ez);WHo=r(h4t,"YosoForMultipleChoice"),h4t.forEach(t),HHo=r(iBe," (YOSO model)"),iBe.forEach(t),ee.forEach(t),UHo=i(ga),F0=n(ga,"P",{});var dBe=s(F0);JHo=r(dBe,"The model is set in evaluation mode by default using "),Pue=n(dBe,"CODE",{});var p4t=s(Pue);YHo=r(p4t,"model.eval()"),p4t.forEach(t),KHo=r(dBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bue=n(dBe,"CODE",{});var _4t=s(Bue);ZHo=r(_4t,"model.train()"),_4t.forEach(t),dBe.forEach(t),eUo=i(ga),T(T0.$$.fragment,ga),ga.forEach(t),il.forEach(t),SXe=i(f),id=n(f,"H2",{class:!0});var qQe=s(id);M0=n(qQe,"A",{id:!0,class:!0,href:!0});var u4t=s(M0);Iue=n(u4t,"SPAN",{});var b4t=s(Iue);T(gy.$$.fragment,b4t),b4t.forEach(t),u4t.forEach(t),oUo=i(qQe),Nue=n(qQe,"SPAN",{});var v4t=s(Nue);rUo=r(v4t,"AutoModelForNextSentencePrediction"),v4t.forEach(t),qQe.forEach(t),RXe=i(f),qo=n(f,"DIV",{class:!0});var dl=s(qo);T(hy.$$.fragment,dl),tUo=i(dl),dd=n(dl,"P",{});var Ure=s(dd);aUo=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Cz=n(Ure,"A",{href:!0});var F4t=s(Cz);nUo=r(F4t,"from_pretrained()"),F4t.forEach(t),sUo=r(Ure," class method or the "),wz=n(Ure,"A",{href:!0});var T4t=s(wz);lUo=r(T4t,"from_config()"),T4t.forEach(t),iUo=r(Ure,` class
method.`),Ure.forEach(t),dUo=i(dl),py=n(dl,"P",{});var jQe=s(py);cUo=r(jQe,"This class cannot be instantiated directly using "),que=n(jQe,"CODE",{});var M4t=s(que);fUo=r(M4t,"__init__()"),M4t.forEach(t),mUo=r(jQe," (throws an error)."),jQe.forEach(t),gUo=i(dl),pt=n(dl,"DIV",{class:!0});var CA=s(pt);T(_y.$$.fragment,CA),hUo=i(CA),jue=n(CA,"P",{});var E4t=s(jue);pUo=r(E4t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),E4t.forEach(t),_Uo=i(CA),cd=n(CA,"P",{});var Jre=s(cd);uUo=r(Jre,`Note:
Loading a model from its configuration file does `),Due=n(Jre,"STRONG",{});var C4t=s(Due);bUo=r(C4t,"not"),C4t.forEach(t),vUo=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=n(Jre,"A",{href:!0});var w4t=s(Az);FUo=r(w4t,"from_pretrained()"),w4t.forEach(t),TUo=r(Jre," to load the model weights."),Jre.forEach(t),MUo=i(CA),T(E0.$$.fragment,CA),CA.forEach(t),EUo=i(dl),ao=n(dl,"DIV",{class:!0});var ha=s(ao);T(uy.$$.fragment,ha),CUo=i(ha),Gue=n(ha,"P",{});var A4t=s(Gue);wUo=r(A4t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),A4t.forEach(t),AUo=i(ha),Va=n(ha,"P",{});var wA=s(Va);LUo=r(wA,"The model class to instantiate is selected based on the "),Oue=n(wA,"CODE",{});var L4t=s(Oue);yUo=r(L4t,"model_type"),L4t.forEach(t),xUo=r(wA,` property of the config object (either
passed as an argument or loaded from `),Vue=n(wA,"CODE",{});var y4t=s(Vue);$Uo=r(y4t,"pretrained_model_name_or_path"),y4t.forEach(t),kUo=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xue=n(wA,"CODE",{});var x4t=s(Xue);SUo=r(x4t,"pretrained_model_name_or_path"),x4t.forEach(t),RUo=r(wA,":"),wA.forEach(t),PUo=i(ha),jo=n(ha,"UL",{});var pa=s(jo);C0=n(pa,"LI",{});var cBe=s(C0);zue=n(cBe,"STRONG",{});var $4t=s(zue);BUo=r($4t,"bert"),$4t.forEach(t),IUo=r(cBe," \u2014 "),Lz=n(cBe,"A",{href:!0});var k4t=s(Lz);NUo=r(k4t,"BertForNextSentencePrediction"),k4t.forEach(t),qUo=r(cBe," (BERT model)"),cBe.forEach(t),jUo=i(pa),w0=n(pa,"LI",{});var fBe=s(w0);Que=n(fBe,"STRONG",{});var S4t=s(Que);DUo=r(S4t,"fnet"),S4t.forEach(t),GUo=r(fBe," \u2014 "),yz=n(fBe,"A",{href:!0});var R4t=s(yz);OUo=r(R4t,"FNetForNextSentencePrediction"),R4t.forEach(t),VUo=r(fBe," (FNet model)"),fBe.forEach(t),XUo=i(pa),A0=n(pa,"LI",{});var mBe=s(A0);Wue=n(mBe,"STRONG",{});var P4t=s(Wue);zUo=r(P4t,"megatron-bert"),P4t.forEach(t),QUo=r(mBe," \u2014 "),xz=n(mBe,"A",{href:!0});var B4t=s(xz);WUo=r(B4t,"MegatronBertForNextSentencePrediction"),B4t.forEach(t),HUo=r(mBe," (Megatron-BERT model)"),mBe.forEach(t),UUo=i(pa),L0=n(pa,"LI",{});var gBe=s(L0);Hue=n(gBe,"STRONG",{});var I4t=s(Hue);JUo=r(I4t,"mobilebert"),I4t.forEach(t),YUo=r(gBe," \u2014 "),$z=n(gBe,"A",{href:!0});var N4t=s($z);KUo=r(N4t,"MobileBertForNextSentencePrediction"),N4t.forEach(t),ZUo=r(gBe," (MobileBERT model)"),gBe.forEach(t),eJo=i(pa),y0=n(pa,"LI",{});var hBe=s(y0);Uue=n(hBe,"STRONG",{});var q4t=s(Uue);oJo=r(q4t,"nezha"),q4t.forEach(t),rJo=r(hBe," \u2014 "),kz=n(hBe,"A",{href:!0});var j4t=s(kz);tJo=r(j4t,"NezhaForNextSentencePrediction"),j4t.forEach(t),aJo=r(hBe," (Nezha model)"),hBe.forEach(t),nJo=i(pa),x0=n(pa,"LI",{});var pBe=s(x0);Jue=n(pBe,"STRONG",{});var D4t=s(Jue);sJo=r(D4t,"qdqbert"),D4t.forEach(t),lJo=r(pBe," \u2014 "),Sz=n(pBe,"A",{href:!0});var G4t=s(Sz);iJo=r(G4t,"QDQBertForNextSentencePrediction"),G4t.forEach(t),dJo=r(pBe," (QDQBert model)"),pBe.forEach(t),pa.forEach(t),cJo=i(ha),$0=n(ha,"P",{});var _Be=s($0);fJo=r(_Be,"The model is set in evaluation mode by default using "),Yue=n(_Be,"CODE",{});var O4t=s(Yue);mJo=r(O4t,"model.eval()"),O4t.forEach(t),gJo=r(_Be,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kue=n(_Be,"CODE",{});var V4t=s(Kue);hJo=r(V4t,"model.train()"),V4t.forEach(t),_Be.forEach(t),pJo=i(ha),T(k0.$$.fragment,ha),ha.forEach(t),dl.forEach(t),PXe=i(f),fd=n(f,"H2",{class:!0});var DQe=s(fd);S0=n(DQe,"A",{id:!0,class:!0,href:!0});var X4t=s(S0);Zue=n(X4t,"SPAN",{});var z4t=s(Zue);T(by.$$.fragment,z4t),z4t.forEach(t),X4t.forEach(t),_Jo=i(DQe),e1e=n(DQe,"SPAN",{});var Q4t=s(e1e);uJo=r(Q4t,"AutoModelForTokenClassification"),Q4t.forEach(t),DQe.forEach(t),BXe=i(f),Do=n(f,"DIV",{class:!0});var cl=s(Do);T(vy.$$.fragment,cl),bJo=i(cl),md=n(cl,"P",{});var Yre=s(md);vJo=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rz=n(Yre,"A",{href:!0});var W4t=s(Rz);FJo=r(W4t,"from_pretrained()"),W4t.forEach(t),TJo=r(Yre," class method or the "),Pz=n(Yre,"A",{href:!0});var H4t=s(Pz);MJo=r(H4t,"from_config()"),H4t.forEach(t),EJo=r(Yre,` class
method.`),Yre.forEach(t),CJo=i(cl),Fy=n(cl,"P",{});var GQe=s(Fy);wJo=r(GQe,"This class cannot be instantiated directly using "),o1e=n(GQe,"CODE",{});var U4t=s(o1e);AJo=r(U4t,"__init__()"),U4t.forEach(t),LJo=r(GQe," (throws an error)."),GQe.forEach(t),yJo=i(cl),_t=n(cl,"DIV",{class:!0});var AA=s(_t);T(Ty.$$.fragment,AA),xJo=i(AA),r1e=n(AA,"P",{});var J4t=s(r1e);$Jo=r(J4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),J4t.forEach(t),kJo=i(AA),gd=n(AA,"P",{});var Kre=s(gd);SJo=r(Kre,`Note:
Loading a model from its configuration file does `),t1e=n(Kre,"STRONG",{});var Y4t=s(t1e);RJo=r(Y4t,"not"),Y4t.forEach(t),PJo=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(Kre,"A",{href:!0});var K4t=s(Bz);BJo=r(K4t,"from_pretrained()"),K4t.forEach(t),IJo=r(Kre," to load the model weights."),Kre.forEach(t),NJo=i(AA),T(R0.$$.fragment,AA),AA.forEach(t),qJo=i(cl),no=n(cl,"DIV",{class:!0});var _a=s(no);T(My.$$.fragment,_a),jJo=i(_a),a1e=n(_a,"P",{});var Z4t=s(a1e);DJo=r(Z4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Z4t.forEach(t),GJo=i(_a),Xa=n(_a,"P",{});var LA=s(Xa);OJo=r(LA,"The model class to instantiate is selected based on the "),n1e=n(LA,"CODE",{});var eEt=s(n1e);VJo=r(eEt,"model_type"),eEt.forEach(t),XJo=r(LA,` property of the config object (either
passed as an argument or loaded from `),s1e=n(LA,"CODE",{});var oEt=s(s1e);zJo=r(oEt,"pretrained_model_name_or_path"),oEt.forEach(t),QJo=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=n(LA,"CODE",{});var rEt=s(l1e);WJo=r(rEt,"pretrained_model_name_or_path"),rEt.forEach(t),HJo=r(LA,":"),LA.forEach(t),UJo=i(_a),U=n(_a,"UL",{});var J=s(U);P0=n(J,"LI",{});var uBe=s(P0);i1e=n(uBe,"STRONG",{});var tEt=s(i1e);JJo=r(tEt,"albert"),tEt.forEach(t),YJo=r(uBe," \u2014 "),Iz=n(uBe,"A",{href:!0});var aEt=s(Iz);KJo=r(aEt,"AlbertForTokenClassification"),aEt.forEach(t),ZJo=r(uBe," (ALBERT model)"),uBe.forEach(t),eYo=i(J),B0=n(J,"LI",{});var bBe=s(B0);d1e=n(bBe,"STRONG",{});var nEt=s(d1e);oYo=r(nEt,"bert"),nEt.forEach(t),rYo=r(bBe," \u2014 "),Nz=n(bBe,"A",{href:!0});var sEt=s(Nz);tYo=r(sEt,"BertForTokenClassification"),sEt.forEach(t),aYo=r(bBe," (BERT model)"),bBe.forEach(t),nYo=i(J),I0=n(J,"LI",{});var vBe=s(I0);c1e=n(vBe,"STRONG",{});var lEt=s(c1e);sYo=r(lEt,"big_bird"),lEt.forEach(t),lYo=r(vBe," \u2014 "),qz=n(vBe,"A",{href:!0});var iEt=s(qz);iYo=r(iEt,"BigBirdForTokenClassification"),iEt.forEach(t),dYo=r(vBe," (BigBird model)"),vBe.forEach(t),cYo=i(J),N0=n(J,"LI",{});var FBe=s(N0);f1e=n(FBe,"STRONG",{});var dEt=s(f1e);fYo=r(dEt,"bloom"),dEt.forEach(t),mYo=r(FBe," \u2014 "),jz=n(FBe,"A",{href:!0});var cEt=s(jz);gYo=r(cEt,"BloomForTokenClassification"),cEt.forEach(t),hYo=r(FBe," (BLOOM model)"),FBe.forEach(t),pYo=i(J),q0=n(J,"LI",{});var TBe=s(q0);m1e=n(TBe,"STRONG",{});var fEt=s(m1e);_Yo=r(fEt,"camembert"),fEt.forEach(t),uYo=r(TBe," \u2014 "),Dz=n(TBe,"A",{href:!0});var mEt=s(Dz);bYo=r(mEt,"CamembertForTokenClassification"),mEt.forEach(t),vYo=r(TBe," (CamemBERT model)"),TBe.forEach(t),FYo=i(J),j0=n(J,"LI",{});var MBe=s(j0);g1e=n(MBe,"STRONG",{});var gEt=s(g1e);TYo=r(gEt,"canine"),gEt.forEach(t),MYo=r(MBe," \u2014 "),Gz=n(MBe,"A",{href:!0});var hEt=s(Gz);EYo=r(hEt,"CanineForTokenClassification"),hEt.forEach(t),CYo=r(MBe," (CANINE model)"),MBe.forEach(t),wYo=i(J),D0=n(J,"LI",{});var EBe=s(D0);h1e=n(EBe,"STRONG",{});var pEt=s(h1e);AYo=r(pEt,"convbert"),pEt.forEach(t),LYo=r(EBe," \u2014 "),Oz=n(EBe,"A",{href:!0});var _Et=s(Oz);yYo=r(_Et,"ConvBertForTokenClassification"),_Et.forEach(t),xYo=r(EBe," (ConvBERT model)"),EBe.forEach(t),$Yo=i(J),G0=n(J,"LI",{});var CBe=s(G0);p1e=n(CBe,"STRONG",{});var uEt=s(p1e);kYo=r(uEt,"data2vec-text"),uEt.forEach(t),SYo=r(CBe," \u2014 "),Vz=n(CBe,"A",{href:!0});var bEt=s(Vz);RYo=r(bEt,"Data2VecTextForTokenClassification"),bEt.forEach(t),PYo=r(CBe," (Data2VecText model)"),CBe.forEach(t),BYo=i(J),O0=n(J,"LI",{});var wBe=s(O0);_1e=n(wBe,"STRONG",{});var vEt=s(_1e);IYo=r(vEt,"deberta"),vEt.forEach(t),NYo=r(wBe," \u2014 "),Xz=n(wBe,"A",{href:!0});var FEt=s(Xz);qYo=r(FEt,"DebertaForTokenClassification"),FEt.forEach(t),jYo=r(wBe," (DeBERTa model)"),wBe.forEach(t),DYo=i(J),V0=n(J,"LI",{});var ABe=s(V0);u1e=n(ABe,"STRONG",{});var TEt=s(u1e);GYo=r(TEt,"deberta-v2"),TEt.forEach(t),OYo=r(ABe," \u2014 "),zz=n(ABe,"A",{href:!0});var MEt=s(zz);VYo=r(MEt,"DebertaV2ForTokenClassification"),MEt.forEach(t),XYo=r(ABe," (DeBERTa-v2 model)"),ABe.forEach(t),zYo=i(J),X0=n(J,"LI",{});var LBe=s(X0);b1e=n(LBe,"STRONG",{});var EEt=s(b1e);QYo=r(EEt,"distilbert"),EEt.forEach(t),WYo=r(LBe," \u2014 "),Qz=n(LBe,"A",{href:!0});var CEt=s(Qz);HYo=r(CEt,"DistilBertForTokenClassification"),CEt.forEach(t),UYo=r(LBe," (DistilBERT model)"),LBe.forEach(t),JYo=i(J),z0=n(J,"LI",{});var yBe=s(z0);v1e=n(yBe,"STRONG",{});var wEt=s(v1e);YYo=r(wEt,"electra"),wEt.forEach(t),KYo=r(yBe," \u2014 "),Wz=n(yBe,"A",{href:!0});var AEt=s(Wz);ZYo=r(AEt,"ElectraForTokenClassification"),AEt.forEach(t),eKo=r(yBe," (ELECTRA model)"),yBe.forEach(t),oKo=i(J),Q0=n(J,"LI",{});var xBe=s(Q0);F1e=n(xBe,"STRONG",{});var LEt=s(F1e);rKo=r(LEt,"flaubert"),LEt.forEach(t),tKo=r(xBe," \u2014 "),Hz=n(xBe,"A",{href:!0});var yEt=s(Hz);aKo=r(yEt,"FlaubertForTokenClassification"),yEt.forEach(t),nKo=r(xBe," (FlauBERT model)"),xBe.forEach(t),sKo=i(J),W0=n(J,"LI",{});var $Be=s(W0);T1e=n($Be,"STRONG",{});var xEt=s(T1e);lKo=r(xEt,"fnet"),xEt.forEach(t),iKo=r($Be," \u2014 "),Uz=n($Be,"A",{href:!0});var $Et=s(Uz);dKo=r($Et,"FNetForTokenClassification"),$Et.forEach(t),cKo=r($Be," (FNet model)"),$Be.forEach(t),fKo=i(J),H0=n(J,"LI",{});var kBe=s(H0);M1e=n(kBe,"STRONG",{});var kEt=s(M1e);mKo=r(kEt,"funnel"),kEt.forEach(t),gKo=r(kBe," \u2014 "),Jz=n(kBe,"A",{href:!0});var SEt=s(Jz);hKo=r(SEt,"FunnelForTokenClassification"),SEt.forEach(t),pKo=r(kBe," (Funnel Transformer model)"),kBe.forEach(t),_Ko=i(J),U0=n(J,"LI",{});var SBe=s(U0);E1e=n(SBe,"STRONG",{});var REt=s(E1e);uKo=r(REt,"gpt2"),REt.forEach(t),bKo=r(SBe," \u2014 "),Yz=n(SBe,"A",{href:!0});var PEt=s(Yz);vKo=r(PEt,"GPT2ForTokenClassification"),PEt.forEach(t),FKo=r(SBe," (OpenAI GPT-2 model)"),SBe.forEach(t),TKo=i(J),J0=n(J,"LI",{});var RBe=s(J0);C1e=n(RBe,"STRONG",{});var BEt=s(C1e);MKo=r(BEt,"ibert"),BEt.forEach(t),EKo=r(RBe," \u2014 "),Kz=n(RBe,"A",{href:!0});var IEt=s(Kz);CKo=r(IEt,"IBertForTokenClassification"),IEt.forEach(t),wKo=r(RBe," (I-BERT model)"),RBe.forEach(t),AKo=i(J),Y0=n(J,"LI",{});var PBe=s(Y0);w1e=n(PBe,"STRONG",{});var NEt=s(w1e);LKo=r(NEt,"layoutlm"),NEt.forEach(t),yKo=r(PBe," \u2014 "),Zz=n(PBe,"A",{href:!0});var qEt=s(Zz);xKo=r(qEt,"LayoutLMForTokenClassification"),qEt.forEach(t),$Ko=r(PBe," (LayoutLM model)"),PBe.forEach(t),kKo=i(J),K0=n(J,"LI",{});var BBe=s(K0);A1e=n(BBe,"STRONG",{});var jEt=s(A1e);SKo=r(jEt,"layoutlmv2"),jEt.forEach(t),RKo=r(BBe," \u2014 "),eQ=n(BBe,"A",{href:!0});var DEt=s(eQ);PKo=r(DEt,"LayoutLMv2ForTokenClassification"),DEt.forEach(t),BKo=r(BBe," (LayoutLMv2 model)"),BBe.forEach(t),IKo=i(J),Z0=n(J,"LI",{});var IBe=s(Z0);L1e=n(IBe,"STRONG",{});var GEt=s(L1e);NKo=r(GEt,"layoutlmv3"),GEt.forEach(t),qKo=r(IBe," \u2014 "),oQ=n(IBe,"A",{href:!0});var OEt=s(oQ);jKo=r(OEt,"LayoutLMv3ForTokenClassification"),OEt.forEach(t),DKo=r(IBe," (LayoutLMv3 model)"),IBe.forEach(t),GKo=i(J),eF=n(J,"LI",{});var NBe=s(eF);y1e=n(NBe,"STRONG",{});var VEt=s(y1e);OKo=r(VEt,"longformer"),VEt.forEach(t),VKo=r(NBe," \u2014 "),rQ=n(NBe,"A",{href:!0});var XEt=s(rQ);XKo=r(XEt,"LongformerForTokenClassification"),XEt.forEach(t),zKo=r(NBe," (Longformer model)"),NBe.forEach(t),QKo=i(J),oF=n(J,"LI",{});var qBe=s(oF);x1e=n(qBe,"STRONG",{});var zEt=s(x1e);WKo=r(zEt,"megatron-bert"),zEt.forEach(t),HKo=r(qBe," \u2014 "),tQ=n(qBe,"A",{href:!0});var QEt=s(tQ);UKo=r(QEt,"MegatronBertForTokenClassification"),QEt.forEach(t),JKo=r(qBe," (Megatron-BERT model)"),qBe.forEach(t),YKo=i(J),rF=n(J,"LI",{});var jBe=s(rF);$1e=n(jBe,"STRONG",{});var WEt=s($1e);KKo=r(WEt,"mobilebert"),WEt.forEach(t),ZKo=r(jBe," \u2014 "),aQ=n(jBe,"A",{href:!0});var HEt=s(aQ);eZo=r(HEt,"MobileBertForTokenClassification"),HEt.forEach(t),oZo=r(jBe," (MobileBERT model)"),jBe.forEach(t),rZo=i(J),tF=n(J,"LI",{});var DBe=s(tF);k1e=n(DBe,"STRONG",{});var UEt=s(k1e);tZo=r(UEt,"mpnet"),UEt.forEach(t),aZo=r(DBe," \u2014 "),nQ=n(DBe,"A",{href:!0});var JEt=s(nQ);nZo=r(JEt,"MPNetForTokenClassification"),JEt.forEach(t),sZo=r(DBe," (MPNet model)"),DBe.forEach(t),lZo=i(J),aF=n(J,"LI",{});var GBe=s(aF);S1e=n(GBe,"STRONG",{});var YEt=s(S1e);iZo=r(YEt,"nezha"),YEt.forEach(t),dZo=r(GBe," \u2014 "),sQ=n(GBe,"A",{href:!0});var KEt=s(sQ);cZo=r(KEt,"NezhaForTokenClassification"),KEt.forEach(t),fZo=r(GBe," (Nezha model)"),GBe.forEach(t),mZo=i(J),nF=n(J,"LI",{});var OBe=s(nF);R1e=n(OBe,"STRONG",{});var ZEt=s(R1e);gZo=r(ZEt,"nystromformer"),ZEt.forEach(t),hZo=r(OBe," \u2014 "),lQ=n(OBe,"A",{href:!0});var eCt=s(lQ);pZo=r(eCt,"NystromformerForTokenClassification"),eCt.forEach(t),_Zo=r(OBe," (Nystr\xF6mformer model)"),OBe.forEach(t),uZo=i(J),sF=n(J,"LI",{});var VBe=s(sF);P1e=n(VBe,"STRONG",{});var oCt=s(P1e);bZo=r(oCt,"qdqbert"),oCt.forEach(t),vZo=r(VBe," \u2014 "),iQ=n(VBe,"A",{href:!0});var rCt=s(iQ);FZo=r(rCt,"QDQBertForTokenClassification"),rCt.forEach(t),TZo=r(VBe," (QDQBert model)"),VBe.forEach(t),MZo=i(J),lF=n(J,"LI",{});var XBe=s(lF);B1e=n(XBe,"STRONG",{});var tCt=s(B1e);EZo=r(tCt,"rembert"),tCt.forEach(t),CZo=r(XBe," \u2014 "),dQ=n(XBe,"A",{href:!0});var aCt=s(dQ);wZo=r(aCt,"RemBertForTokenClassification"),aCt.forEach(t),AZo=r(XBe," (RemBERT model)"),XBe.forEach(t),LZo=i(J),iF=n(J,"LI",{});var zBe=s(iF);I1e=n(zBe,"STRONG",{});var nCt=s(I1e);yZo=r(nCt,"roberta"),nCt.forEach(t),xZo=r(zBe," \u2014 "),cQ=n(zBe,"A",{href:!0});var sCt=s(cQ);$Zo=r(sCt,"RobertaForTokenClassification"),sCt.forEach(t),kZo=r(zBe," (RoBERTa model)"),zBe.forEach(t),SZo=i(J),dF=n(J,"LI",{});var QBe=s(dF);N1e=n(QBe,"STRONG",{});var lCt=s(N1e);RZo=r(lCt,"roformer"),lCt.forEach(t),PZo=r(QBe," \u2014 "),fQ=n(QBe,"A",{href:!0});var iCt=s(fQ);BZo=r(iCt,"RoFormerForTokenClassification"),iCt.forEach(t),IZo=r(QBe," (RoFormer model)"),QBe.forEach(t),NZo=i(J),cF=n(J,"LI",{});var WBe=s(cF);q1e=n(WBe,"STRONG",{});var dCt=s(q1e);qZo=r(dCt,"squeezebert"),dCt.forEach(t),jZo=r(WBe," \u2014 "),mQ=n(WBe,"A",{href:!0});var cCt=s(mQ);DZo=r(cCt,"SqueezeBertForTokenClassification"),cCt.forEach(t),GZo=r(WBe," (SqueezeBERT model)"),WBe.forEach(t),OZo=i(J),fF=n(J,"LI",{});var HBe=s(fF);j1e=n(HBe,"STRONG",{});var fCt=s(j1e);VZo=r(fCt,"xlm"),fCt.forEach(t),XZo=r(HBe," \u2014 "),gQ=n(HBe,"A",{href:!0});var mCt=s(gQ);zZo=r(mCt,"XLMForTokenClassification"),mCt.forEach(t),QZo=r(HBe," (XLM model)"),HBe.forEach(t),WZo=i(J),mF=n(J,"LI",{});var UBe=s(mF);D1e=n(UBe,"STRONG",{});var gCt=s(D1e);HZo=r(gCt,"xlm-roberta"),gCt.forEach(t),UZo=r(UBe," \u2014 "),hQ=n(UBe,"A",{href:!0});var hCt=s(hQ);JZo=r(hCt,"XLMRobertaForTokenClassification"),hCt.forEach(t),YZo=r(UBe," (XLM-RoBERTa model)"),UBe.forEach(t),KZo=i(J),gF=n(J,"LI",{});var JBe=s(gF);G1e=n(JBe,"STRONG",{});var pCt=s(G1e);ZZo=r(pCt,"xlm-roberta-xl"),pCt.forEach(t),eer=r(JBe," \u2014 "),pQ=n(JBe,"A",{href:!0});var _Ct=s(pQ);oer=r(_Ct,"XLMRobertaXLForTokenClassification"),_Ct.forEach(t),rer=r(JBe," (XLM-RoBERTa-XL model)"),JBe.forEach(t),ter=i(J),hF=n(J,"LI",{});var YBe=s(hF);O1e=n(YBe,"STRONG",{});var uCt=s(O1e);aer=r(uCt,"xlnet"),uCt.forEach(t),ner=r(YBe," \u2014 "),_Q=n(YBe,"A",{href:!0});var bCt=s(_Q);ser=r(bCt,"XLNetForTokenClassification"),bCt.forEach(t),ler=r(YBe," (XLNet model)"),YBe.forEach(t),ier=i(J),pF=n(J,"LI",{});var KBe=s(pF);V1e=n(KBe,"STRONG",{});var vCt=s(V1e);der=r(vCt,"yoso"),vCt.forEach(t),cer=r(KBe," \u2014 "),uQ=n(KBe,"A",{href:!0});var FCt=s(uQ);fer=r(FCt,"YosoForTokenClassification"),FCt.forEach(t),mer=r(KBe," (YOSO model)"),KBe.forEach(t),J.forEach(t),ger=i(_a),_F=n(_a,"P",{});var ZBe=s(_F);her=r(ZBe,"The model is set in evaluation mode by default using "),X1e=n(ZBe,"CODE",{});var TCt=s(X1e);per=r(TCt,"model.eval()"),TCt.forEach(t),_er=r(ZBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=n(ZBe,"CODE",{});var MCt=s(z1e);uer=r(MCt,"model.train()"),MCt.forEach(t),ZBe.forEach(t),ber=i(_a),T(uF.$$.fragment,_a),_a.forEach(t),cl.forEach(t),IXe=i(f),hd=n(f,"H2",{class:!0});var OQe=s(hd);bF=n(OQe,"A",{id:!0,class:!0,href:!0});var ECt=s(bF);Q1e=n(ECt,"SPAN",{});var CCt=s(Q1e);T(Ey.$$.fragment,CCt),CCt.forEach(t),ECt.forEach(t),ver=i(OQe),W1e=n(OQe,"SPAN",{});var wCt=s(W1e);Fer=r(wCt,"AutoModelForQuestionAnswering"),wCt.forEach(t),OQe.forEach(t),NXe=i(f),Go=n(f,"DIV",{class:!0});var fl=s(Go);T(Cy.$$.fragment,fl),Ter=i(fl),pd=n(fl,"P",{});var Zre=s(pd);Mer=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bQ=n(Zre,"A",{href:!0});var ACt=s(bQ);Eer=r(ACt,"from_pretrained()"),ACt.forEach(t),Cer=r(Zre," class method or the "),vQ=n(Zre,"A",{href:!0});var LCt=s(vQ);wer=r(LCt,"from_config()"),LCt.forEach(t),Aer=r(Zre,` class
method.`),Zre.forEach(t),Ler=i(fl),wy=n(fl,"P",{});var VQe=s(wy);yer=r(VQe,"This class cannot be instantiated directly using "),H1e=n(VQe,"CODE",{});var yCt=s(H1e);xer=r(yCt,"__init__()"),yCt.forEach(t),$er=r(VQe," (throws an error)."),VQe.forEach(t),ker=i(fl),ut=n(fl,"DIV",{class:!0});var yA=s(ut);T(Ay.$$.fragment,yA),Ser=i(yA),U1e=n(yA,"P",{});var xCt=s(U1e);Rer=r(xCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),xCt.forEach(t),Per=i(yA),_d=n(yA,"P",{});var ete=s(_d);Ber=r(ete,`Note:
Loading a model from its configuration file does `),J1e=n(ete,"STRONG",{});var $Ct=s(J1e);Ier=r($Ct,"not"),$Ct.forEach(t),Ner=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(ete,"A",{href:!0});var kCt=s(FQ);qer=r(kCt,"from_pretrained()"),kCt.forEach(t),jer=r(ete," to load the model weights."),ete.forEach(t),Der=i(yA),T(vF.$$.fragment,yA),yA.forEach(t),Ger=i(fl),so=n(fl,"DIV",{class:!0});var ua=s(so);T(Ly.$$.fragment,ua),Oer=i(ua),Y1e=n(ua,"P",{});var SCt=s(Y1e);Ver=r(SCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),SCt.forEach(t),Xer=i(ua),za=n(ua,"P",{});var xA=s(za);zer=r(xA,"The model class to instantiate is selected based on the "),K1e=n(xA,"CODE",{});var RCt=s(K1e);Qer=r(RCt,"model_type"),RCt.forEach(t),Wer=r(xA,` property of the config object (either
passed as an argument or loaded from `),Z1e=n(xA,"CODE",{});var PCt=s(Z1e);Her=r(PCt,"pretrained_model_name_or_path"),PCt.forEach(t),Uer=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=n(xA,"CODE",{});var BCt=s(e2e);Jer=r(BCt,"pretrained_model_name_or_path"),BCt.forEach(t),Yer=r(xA,":"),xA.forEach(t),Ker=i(ua),V=n(ua,"UL",{});var X=s(V);FF=n(X,"LI",{});var eIe=s(FF);o2e=n(eIe,"STRONG",{});var ICt=s(o2e);Zer=r(ICt,"albert"),ICt.forEach(t),eor=r(eIe," \u2014 "),TQ=n(eIe,"A",{href:!0});var NCt=s(TQ);oor=r(NCt,"AlbertForQuestionAnswering"),NCt.forEach(t),ror=r(eIe," (ALBERT model)"),eIe.forEach(t),tor=i(X),TF=n(X,"LI",{});var oIe=s(TF);r2e=n(oIe,"STRONG",{});var qCt=s(r2e);aor=r(qCt,"bart"),qCt.forEach(t),nor=r(oIe," \u2014 "),MQ=n(oIe,"A",{href:!0});var jCt=s(MQ);sor=r(jCt,"BartForQuestionAnswering"),jCt.forEach(t),lor=r(oIe," (BART model)"),oIe.forEach(t),ior=i(X),MF=n(X,"LI",{});var rIe=s(MF);t2e=n(rIe,"STRONG",{});var DCt=s(t2e);dor=r(DCt,"bert"),DCt.forEach(t),cor=r(rIe," \u2014 "),EQ=n(rIe,"A",{href:!0});var GCt=s(EQ);mor=r(GCt,"BertForQuestionAnswering"),GCt.forEach(t),gor=r(rIe," (BERT model)"),rIe.forEach(t),hor=i(X),EF=n(X,"LI",{});var tIe=s(EF);a2e=n(tIe,"STRONG",{});var OCt=s(a2e);por=r(OCt,"big_bird"),OCt.forEach(t),_or=r(tIe," \u2014 "),CQ=n(tIe,"A",{href:!0});var VCt=s(CQ);uor=r(VCt,"BigBirdForQuestionAnswering"),VCt.forEach(t),bor=r(tIe," (BigBird model)"),tIe.forEach(t),vor=i(X),CF=n(X,"LI",{});var aIe=s(CF);n2e=n(aIe,"STRONG",{});var XCt=s(n2e);For=r(XCt,"bigbird_pegasus"),XCt.forEach(t),Tor=r(aIe," \u2014 "),wQ=n(aIe,"A",{href:!0});var zCt=s(wQ);Mor=r(zCt,"BigBirdPegasusForQuestionAnswering"),zCt.forEach(t),Eor=r(aIe," (BigBird-Pegasus model)"),aIe.forEach(t),Cor=i(X),wF=n(X,"LI",{});var nIe=s(wF);s2e=n(nIe,"STRONG",{});var QCt=s(s2e);wor=r(QCt,"camembert"),QCt.forEach(t),Aor=r(nIe," \u2014 "),AQ=n(nIe,"A",{href:!0});var WCt=s(AQ);Lor=r(WCt,"CamembertForQuestionAnswering"),WCt.forEach(t),yor=r(nIe," (CamemBERT model)"),nIe.forEach(t),xor=i(X),AF=n(X,"LI",{});var sIe=s(AF);l2e=n(sIe,"STRONG",{});var HCt=s(l2e);$or=r(HCt,"canine"),HCt.forEach(t),kor=r(sIe," \u2014 "),LQ=n(sIe,"A",{href:!0});var UCt=s(LQ);Sor=r(UCt,"CanineForQuestionAnswering"),UCt.forEach(t),Ror=r(sIe," (CANINE model)"),sIe.forEach(t),Por=i(X),LF=n(X,"LI",{});var lIe=s(LF);i2e=n(lIe,"STRONG",{});var JCt=s(i2e);Bor=r(JCt,"convbert"),JCt.forEach(t),Ior=r(lIe," \u2014 "),yQ=n(lIe,"A",{href:!0});var YCt=s(yQ);Nor=r(YCt,"ConvBertForQuestionAnswering"),YCt.forEach(t),qor=r(lIe," (ConvBERT model)"),lIe.forEach(t),jor=i(X),yF=n(X,"LI",{});var iIe=s(yF);d2e=n(iIe,"STRONG",{});var KCt=s(d2e);Dor=r(KCt,"data2vec-text"),KCt.forEach(t),Gor=r(iIe," \u2014 "),xQ=n(iIe,"A",{href:!0});var ZCt=s(xQ);Oor=r(ZCt,"Data2VecTextForQuestionAnswering"),ZCt.forEach(t),Vor=r(iIe," (Data2VecText model)"),iIe.forEach(t),Xor=i(X),xF=n(X,"LI",{});var dIe=s(xF);c2e=n(dIe,"STRONG",{});var e3t=s(c2e);zor=r(e3t,"deberta"),e3t.forEach(t),Qor=r(dIe," \u2014 "),$Q=n(dIe,"A",{href:!0});var o3t=s($Q);Wor=r(o3t,"DebertaForQuestionAnswering"),o3t.forEach(t),Hor=r(dIe," (DeBERTa model)"),dIe.forEach(t),Uor=i(X),$F=n(X,"LI",{});var cIe=s($F);f2e=n(cIe,"STRONG",{});var r3t=s(f2e);Jor=r(r3t,"deberta-v2"),r3t.forEach(t),Yor=r(cIe," \u2014 "),kQ=n(cIe,"A",{href:!0});var t3t=s(kQ);Kor=r(t3t,"DebertaV2ForQuestionAnswering"),t3t.forEach(t),Zor=r(cIe," (DeBERTa-v2 model)"),cIe.forEach(t),err=i(X),kF=n(X,"LI",{});var fIe=s(kF);m2e=n(fIe,"STRONG",{});var a3t=s(m2e);orr=r(a3t,"distilbert"),a3t.forEach(t),rrr=r(fIe," \u2014 "),SQ=n(fIe,"A",{href:!0});var n3t=s(SQ);trr=r(n3t,"DistilBertForQuestionAnswering"),n3t.forEach(t),arr=r(fIe," (DistilBERT model)"),fIe.forEach(t),nrr=i(X),SF=n(X,"LI",{});var mIe=s(SF);g2e=n(mIe,"STRONG",{});var s3t=s(g2e);srr=r(s3t,"electra"),s3t.forEach(t),lrr=r(mIe," \u2014 "),RQ=n(mIe,"A",{href:!0});var l3t=s(RQ);irr=r(l3t,"ElectraForQuestionAnswering"),l3t.forEach(t),drr=r(mIe," (ELECTRA model)"),mIe.forEach(t),crr=i(X),RF=n(X,"LI",{});var gIe=s(RF);h2e=n(gIe,"STRONG",{});var i3t=s(h2e);frr=r(i3t,"flaubert"),i3t.forEach(t),mrr=r(gIe," \u2014 "),PQ=n(gIe,"A",{href:!0});var d3t=s(PQ);grr=r(d3t,"FlaubertForQuestionAnsweringSimple"),d3t.forEach(t),hrr=r(gIe," (FlauBERT model)"),gIe.forEach(t),prr=i(X),PF=n(X,"LI",{});var hIe=s(PF);p2e=n(hIe,"STRONG",{});var c3t=s(p2e);_rr=r(c3t,"fnet"),c3t.forEach(t),urr=r(hIe," \u2014 "),BQ=n(hIe,"A",{href:!0});var f3t=s(BQ);brr=r(f3t,"FNetForQuestionAnswering"),f3t.forEach(t),vrr=r(hIe," (FNet model)"),hIe.forEach(t),Frr=i(X),BF=n(X,"LI",{});var pIe=s(BF);_2e=n(pIe,"STRONG",{});var m3t=s(_2e);Trr=r(m3t,"funnel"),m3t.forEach(t),Mrr=r(pIe," \u2014 "),IQ=n(pIe,"A",{href:!0});var g3t=s(IQ);Err=r(g3t,"FunnelForQuestionAnswering"),g3t.forEach(t),Crr=r(pIe," (Funnel Transformer model)"),pIe.forEach(t),wrr=i(X),IF=n(X,"LI",{});var _Ie=s(IF);u2e=n(_Ie,"STRONG",{});var h3t=s(u2e);Arr=r(h3t,"gptj"),h3t.forEach(t),Lrr=r(_Ie," \u2014 "),NQ=n(_Ie,"A",{href:!0});var p3t=s(NQ);yrr=r(p3t,"GPTJForQuestionAnswering"),p3t.forEach(t),xrr=r(_Ie," (GPT-J model)"),_Ie.forEach(t),$rr=i(X),NF=n(X,"LI",{});var uIe=s(NF);b2e=n(uIe,"STRONG",{});var _3t=s(b2e);krr=r(_3t,"ibert"),_3t.forEach(t),Srr=r(uIe," \u2014 "),qQ=n(uIe,"A",{href:!0});var u3t=s(qQ);Rrr=r(u3t,"IBertForQuestionAnswering"),u3t.forEach(t),Prr=r(uIe," (I-BERT model)"),uIe.forEach(t),Brr=i(X),qF=n(X,"LI",{});var bIe=s(qF);v2e=n(bIe,"STRONG",{});var b3t=s(v2e);Irr=r(b3t,"layoutlmv2"),b3t.forEach(t),Nrr=r(bIe," \u2014 "),jQ=n(bIe,"A",{href:!0});var v3t=s(jQ);qrr=r(v3t,"LayoutLMv2ForQuestionAnswering"),v3t.forEach(t),jrr=r(bIe," (LayoutLMv2 model)"),bIe.forEach(t),Drr=i(X),jF=n(X,"LI",{});var vIe=s(jF);F2e=n(vIe,"STRONG",{});var F3t=s(F2e);Grr=r(F3t,"layoutlmv3"),F3t.forEach(t),Orr=r(vIe," \u2014 "),DQ=n(vIe,"A",{href:!0});var T3t=s(DQ);Vrr=r(T3t,"LayoutLMv3ForQuestionAnswering"),T3t.forEach(t),Xrr=r(vIe," (LayoutLMv3 model)"),vIe.forEach(t),zrr=i(X),DF=n(X,"LI",{});var FIe=s(DF);T2e=n(FIe,"STRONG",{});var M3t=s(T2e);Qrr=r(M3t,"led"),M3t.forEach(t),Wrr=r(FIe," \u2014 "),GQ=n(FIe,"A",{href:!0});var E3t=s(GQ);Hrr=r(E3t,"LEDForQuestionAnswering"),E3t.forEach(t),Urr=r(FIe," (LED model)"),FIe.forEach(t),Jrr=i(X),GF=n(X,"LI",{});var TIe=s(GF);M2e=n(TIe,"STRONG",{});var C3t=s(M2e);Yrr=r(C3t,"longformer"),C3t.forEach(t),Krr=r(TIe," \u2014 "),OQ=n(TIe,"A",{href:!0});var w3t=s(OQ);Zrr=r(w3t,"LongformerForQuestionAnswering"),w3t.forEach(t),etr=r(TIe," (Longformer model)"),TIe.forEach(t),otr=i(X),OF=n(X,"LI",{});var MIe=s(OF);E2e=n(MIe,"STRONG",{});var A3t=s(E2e);rtr=r(A3t,"lxmert"),A3t.forEach(t),ttr=r(MIe," \u2014 "),VQ=n(MIe,"A",{href:!0});var L3t=s(VQ);atr=r(L3t,"LxmertForQuestionAnswering"),L3t.forEach(t),ntr=r(MIe," (LXMERT model)"),MIe.forEach(t),str=i(X),VF=n(X,"LI",{});var EIe=s(VF);C2e=n(EIe,"STRONG",{});var y3t=s(C2e);ltr=r(y3t,"mbart"),y3t.forEach(t),itr=r(EIe," \u2014 "),XQ=n(EIe,"A",{href:!0});var x3t=s(XQ);dtr=r(x3t,"MBartForQuestionAnswering"),x3t.forEach(t),ctr=r(EIe," (mBART model)"),EIe.forEach(t),ftr=i(X),XF=n(X,"LI",{});var CIe=s(XF);w2e=n(CIe,"STRONG",{});var $3t=s(w2e);mtr=r($3t,"megatron-bert"),$3t.forEach(t),gtr=r(CIe," \u2014 "),zQ=n(CIe,"A",{href:!0});var k3t=s(zQ);htr=r(k3t,"MegatronBertForQuestionAnswering"),k3t.forEach(t),ptr=r(CIe," (Megatron-BERT model)"),CIe.forEach(t),_tr=i(X),zF=n(X,"LI",{});var wIe=s(zF);A2e=n(wIe,"STRONG",{});var S3t=s(A2e);utr=r(S3t,"mobilebert"),S3t.forEach(t),btr=r(wIe," \u2014 "),QQ=n(wIe,"A",{href:!0});var R3t=s(QQ);vtr=r(R3t,"MobileBertForQuestionAnswering"),R3t.forEach(t),Ftr=r(wIe," (MobileBERT model)"),wIe.forEach(t),Ttr=i(X),QF=n(X,"LI",{});var AIe=s(QF);L2e=n(AIe,"STRONG",{});var P3t=s(L2e);Mtr=r(P3t,"mpnet"),P3t.forEach(t),Etr=r(AIe," \u2014 "),WQ=n(AIe,"A",{href:!0});var B3t=s(WQ);Ctr=r(B3t,"MPNetForQuestionAnswering"),B3t.forEach(t),wtr=r(AIe," (MPNet model)"),AIe.forEach(t),Atr=i(X),WF=n(X,"LI",{});var LIe=s(WF);y2e=n(LIe,"STRONG",{});var I3t=s(y2e);Ltr=r(I3t,"mvp"),I3t.forEach(t),ytr=r(LIe," \u2014 "),HQ=n(LIe,"A",{href:!0});var N3t=s(HQ);xtr=r(N3t,"MvpForQuestionAnswering"),N3t.forEach(t),$tr=r(LIe," (MVP model)"),LIe.forEach(t),ktr=i(X),HF=n(X,"LI",{});var yIe=s(HF);x2e=n(yIe,"STRONG",{});var q3t=s(x2e);Str=r(q3t,"nezha"),q3t.forEach(t),Rtr=r(yIe," \u2014 "),UQ=n(yIe,"A",{href:!0});var j3t=s(UQ);Ptr=r(j3t,"NezhaForQuestionAnswering"),j3t.forEach(t),Btr=r(yIe," (Nezha model)"),yIe.forEach(t),Itr=i(X),UF=n(X,"LI",{});var xIe=s(UF);$2e=n(xIe,"STRONG",{});var D3t=s($2e);Ntr=r(D3t,"nystromformer"),D3t.forEach(t),qtr=r(xIe," \u2014 "),JQ=n(xIe,"A",{href:!0});var G3t=s(JQ);jtr=r(G3t,"NystromformerForQuestionAnswering"),G3t.forEach(t),Dtr=r(xIe," (Nystr\xF6mformer model)"),xIe.forEach(t),Gtr=i(X),JF=n(X,"LI",{});var $Ie=s(JF);k2e=n($Ie,"STRONG",{});var O3t=s(k2e);Otr=r(O3t,"qdqbert"),O3t.forEach(t),Vtr=r($Ie," \u2014 "),YQ=n($Ie,"A",{href:!0});var V3t=s(YQ);Xtr=r(V3t,"QDQBertForQuestionAnswering"),V3t.forEach(t),ztr=r($Ie," (QDQBert model)"),$Ie.forEach(t),Qtr=i(X),YF=n(X,"LI",{});var kIe=s(YF);S2e=n(kIe,"STRONG",{});var X3t=s(S2e);Wtr=r(X3t,"reformer"),X3t.forEach(t),Htr=r(kIe," \u2014 "),KQ=n(kIe,"A",{href:!0});var z3t=s(KQ);Utr=r(z3t,"ReformerForQuestionAnswering"),z3t.forEach(t),Jtr=r(kIe," (Reformer model)"),kIe.forEach(t),Ytr=i(X),KF=n(X,"LI",{});var SIe=s(KF);R2e=n(SIe,"STRONG",{});var Q3t=s(R2e);Ktr=r(Q3t,"rembert"),Q3t.forEach(t),Ztr=r(SIe," \u2014 "),ZQ=n(SIe,"A",{href:!0});var W3t=s(ZQ);ear=r(W3t,"RemBertForQuestionAnswering"),W3t.forEach(t),oar=r(SIe," (RemBERT model)"),SIe.forEach(t),rar=i(X),ZF=n(X,"LI",{});var RIe=s(ZF);P2e=n(RIe,"STRONG",{});var H3t=s(P2e);tar=r(H3t,"roberta"),H3t.forEach(t),aar=r(RIe," \u2014 "),eW=n(RIe,"A",{href:!0});var U3t=s(eW);nar=r(U3t,"RobertaForQuestionAnswering"),U3t.forEach(t),sar=r(RIe," (RoBERTa model)"),RIe.forEach(t),lar=i(X),eT=n(X,"LI",{});var PIe=s(eT);B2e=n(PIe,"STRONG",{});var J3t=s(B2e);iar=r(J3t,"roformer"),J3t.forEach(t),dar=r(PIe," \u2014 "),oW=n(PIe,"A",{href:!0});var Y3t=s(oW);car=r(Y3t,"RoFormerForQuestionAnswering"),Y3t.forEach(t),far=r(PIe," (RoFormer model)"),PIe.forEach(t),mar=i(X),oT=n(X,"LI",{});var BIe=s(oT);I2e=n(BIe,"STRONG",{});var K3t=s(I2e);gar=r(K3t,"splinter"),K3t.forEach(t),har=r(BIe," \u2014 "),rW=n(BIe,"A",{href:!0});var Z3t=s(rW);par=r(Z3t,"SplinterForQuestionAnswering"),Z3t.forEach(t),_ar=r(BIe," (Splinter model)"),BIe.forEach(t),uar=i(X),rT=n(X,"LI",{});var IIe=s(rT);N2e=n(IIe,"STRONG",{});var e5t=s(N2e);bar=r(e5t,"squeezebert"),e5t.forEach(t),Far=r(IIe," \u2014 "),tW=n(IIe,"A",{href:!0});var o5t=s(tW);Tar=r(o5t,"SqueezeBertForQuestionAnswering"),o5t.forEach(t),Mar=r(IIe," (SqueezeBERT model)"),IIe.forEach(t),Ear=i(X),tT=n(X,"LI",{});var NIe=s(tT);q2e=n(NIe,"STRONG",{});var r5t=s(q2e);Car=r(r5t,"xlm"),r5t.forEach(t),war=r(NIe," \u2014 "),aW=n(NIe,"A",{href:!0});var t5t=s(aW);Aar=r(t5t,"XLMForQuestionAnsweringSimple"),t5t.forEach(t),Lar=r(NIe," (XLM model)"),NIe.forEach(t),yar=i(X),aT=n(X,"LI",{});var qIe=s(aT);j2e=n(qIe,"STRONG",{});var a5t=s(j2e);xar=r(a5t,"xlm-roberta"),a5t.forEach(t),$ar=r(qIe," \u2014 "),nW=n(qIe,"A",{href:!0});var n5t=s(nW);kar=r(n5t,"XLMRobertaForQuestionAnswering"),n5t.forEach(t),Sar=r(qIe," (XLM-RoBERTa model)"),qIe.forEach(t),Rar=i(X),nT=n(X,"LI",{});var jIe=s(nT);D2e=n(jIe,"STRONG",{});var s5t=s(D2e);Par=r(s5t,"xlm-roberta-xl"),s5t.forEach(t),Bar=r(jIe," \u2014 "),sW=n(jIe,"A",{href:!0});var l5t=s(sW);Iar=r(l5t,"XLMRobertaXLForQuestionAnswering"),l5t.forEach(t),Nar=r(jIe," (XLM-RoBERTa-XL model)"),jIe.forEach(t),qar=i(X),sT=n(X,"LI",{});var DIe=s(sT);G2e=n(DIe,"STRONG",{});var i5t=s(G2e);jar=r(i5t,"xlnet"),i5t.forEach(t),Dar=r(DIe," \u2014 "),lW=n(DIe,"A",{href:!0});var d5t=s(lW);Gar=r(d5t,"XLNetForQuestionAnsweringSimple"),d5t.forEach(t),Oar=r(DIe," (XLNet model)"),DIe.forEach(t),Var=i(X),lT=n(X,"LI",{});var GIe=s(lT);O2e=n(GIe,"STRONG",{});var c5t=s(O2e);Xar=r(c5t,"yoso"),c5t.forEach(t),zar=r(GIe," \u2014 "),iW=n(GIe,"A",{href:!0});var f5t=s(iW);Qar=r(f5t,"YosoForQuestionAnswering"),f5t.forEach(t),War=r(GIe," (YOSO model)"),GIe.forEach(t),X.forEach(t),Har=i(ua),iT=n(ua,"P",{});var OIe=s(iT);Uar=r(OIe,"The model is set in evaluation mode by default using "),V2e=n(OIe,"CODE",{});var m5t=s(V2e);Jar=r(m5t,"model.eval()"),m5t.forEach(t),Yar=r(OIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X2e=n(OIe,"CODE",{});var g5t=s(X2e);Kar=r(g5t,"model.train()"),g5t.forEach(t),OIe.forEach(t),Zar=i(ua),T(dT.$$.fragment,ua),ua.forEach(t),fl.forEach(t),qXe=i(f),ud=n(f,"H2",{class:!0});var XQe=s(ud);cT=n(XQe,"A",{id:!0,class:!0,href:!0});var h5t=s(cT);z2e=n(h5t,"SPAN",{});var p5t=s(z2e);T(yy.$$.fragment,p5t),p5t.forEach(t),h5t.forEach(t),enr=i(XQe),Q2e=n(XQe,"SPAN",{});var _5t=s(Q2e);onr=r(_5t,"AutoModelForTableQuestionAnswering"),_5t.forEach(t),XQe.forEach(t),jXe=i(f),Oo=n(f,"DIV",{class:!0});var ml=s(Oo);T(xy.$$.fragment,ml),rnr=i(ml),bd=n(ml,"P",{});var ote=s(bd);tnr=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dW=n(ote,"A",{href:!0});var u5t=s(dW);anr=r(u5t,"from_pretrained()"),u5t.forEach(t),nnr=r(ote," class method or the "),cW=n(ote,"A",{href:!0});var b5t=s(cW);snr=r(b5t,"from_config()"),b5t.forEach(t),lnr=r(ote,` class
method.`),ote.forEach(t),inr=i(ml),$y=n(ml,"P",{});var zQe=s($y);dnr=r(zQe,"This class cannot be instantiated directly using "),W2e=n(zQe,"CODE",{});var v5t=s(W2e);cnr=r(v5t,"__init__()"),v5t.forEach(t),fnr=r(zQe," (throws an error)."),zQe.forEach(t),mnr=i(ml),bt=n(ml,"DIV",{class:!0});var $A=s(bt);T(ky.$$.fragment,$A),gnr=i($A),H2e=n($A,"P",{});var F5t=s(H2e);hnr=r(F5t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),F5t.forEach(t),pnr=i($A),vd=n($A,"P",{});var rte=s(vd);_nr=r(rte,`Note:
Loading a model from its configuration file does `),U2e=n(rte,"STRONG",{});var T5t=s(U2e);unr=r(T5t,"not"),T5t.forEach(t),bnr=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(rte,"A",{href:!0});var M5t=s(fW);vnr=r(M5t,"from_pretrained()"),M5t.forEach(t),Fnr=r(rte," to load the model weights."),rte.forEach(t),Tnr=i($A),T(fT.$$.fragment,$A),$A.forEach(t),Mnr=i(ml),lo=n(ml,"DIV",{class:!0});var ba=s(lo);T(Sy.$$.fragment,ba),Enr=i(ba),J2e=n(ba,"P",{});var E5t=s(J2e);Cnr=r(E5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),E5t.forEach(t),wnr=i(ba),Qa=n(ba,"P",{});var kA=s(Qa);Anr=r(kA,"The model class to instantiate is selected based on the "),Y2e=n(kA,"CODE",{});var C5t=s(Y2e);Lnr=r(C5t,"model_type"),C5t.forEach(t),ynr=r(kA,` property of the config object (either
passed as an argument or loaded from `),K2e=n(kA,"CODE",{});var w5t=s(K2e);xnr=r(w5t,"pretrained_model_name_or_path"),w5t.forEach(t),$nr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z2e=n(kA,"CODE",{});var A5t=s(Z2e);knr=r(A5t,"pretrained_model_name_or_path"),A5t.forEach(t),Snr=r(kA,":"),kA.forEach(t),Rnr=i(ba),ebe=n(ba,"UL",{});var L5t=s(ebe);mT=n(L5t,"LI",{});var VIe=s(mT);obe=n(VIe,"STRONG",{});var y5t=s(obe);Pnr=r(y5t,"tapas"),y5t.forEach(t),Bnr=r(VIe," \u2014 "),mW=n(VIe,"A",{href:!0});var x5t=s(mW);Inr=r(x5t,"TapasForQuestionAnswering"),x5t.forEach(t),Nnr=r(VIe," (TAPAS model)"),VIe.forEach(t),L5t.forEach(t),qnr=i(ba),gT=n(ba,"P",{});var XIe=s(gT);jnr=r(XIe,"The model is set in evaluation mode by default using "),rbe=n(XIe,"CODE",{});var $5t=s(rbe);Dnr=r($5t,"model.eval()"),$5t.forEach(t),Gnr=r(XIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tbe=n(XIe,"CODE",{});var k5t=s(tbe);Onr=r(k5t,"model.train()"),k5t.forEach(t),XIe.forEach(t),Vnr=i(ba),T(hT.$$.fragment,ba),ba.forEach(t),ml.forEach(t),DXe=i(f),Fd=n(f,"H2",{class:!0});var QQe=s(Fd);pT=n(QQe,"A",{id:!0,class:!0,href:!0});var S5t=s(pT);abe=n(S5t,"SPAN",{});var R5t=s(abe);T(Ry.$$.fragment,R5t),R5t.forEach(t),S5t.forEach(t),Xnr=i(QQe),nbe=n(QQe,"SPAN",{});var P5t=s(nbe);znr=r(P5t,"AutoModelForImageClassification"),P5t.forEach(t),QQe.forEach(t),GXe=i(f),Vo=n(f,"DIV",{class:!0});var gl=s(Vo);T(Py.$$.fragment,gl),Qnr=i(gl),Td=n(gl,"P",{});var tte=s(Td);Wnr=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gW=n(tte,"A",{href:!0});var B5t=s(gW);Hnr=r(B5t,"from_pretrained()"),B5t.forEach(t),Unr=r(tte," class method or the "),hW=n(tte,"A",{href:!0});var I5t=s(hW);Jnr=r(I5t,"from_config()"),I5t.forEach(t),Ynr=r(tte,` class
method.`),tte.forEach(t),Knr=i(gl),By=n(gl,"P",{});var WQe=s(By);Znr=r(WQe,"This class cannot be instantiated directly using "),sbe=n(WQe,"CODE",{});var N5t=s(sbe);esr=r(N5t,"__init__()"),N5t.forEach(t),osr=r(WQe," (throws an error)."),WQe.forEach(t),rsr=i(gl),vt=n(gl,"DIV",{class:!0});var SA=s(vt);T(Iy.$$.fragment,SA),tsr=i(SA),lbe=n(SA,"P",{});var q5t=s(lbe);asr=r(q5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),q5t.forEach(t),nsr=i(SA),Md=n(SA,"P",{});var ate=s(Md);ssr=r(ate,`Note:
Loading a model from its configuration file does `),ibe=n(ate,"STRONG",{});var j5t=s(ibe);lsr=r(j5t,"not"),j5t.forEach(t),isr=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(ate,"A",{href:!0});var D5t=s(pW);dsr=r(D5t,"from_pretrained()"),D5t.forEach(t),csr=r(ate," to load the model weights."),ate.forEach(t),fsr=i(SA),T(_T.$$.fragment,SA),SA.forEach(t),msr=i(gl),io=n(gl,"DIV",{class:!0});var va=s(io);T(Ny.$$.fragment,va),gsr=i(va),dbe=n(va,"P",{});var G5t=s(dbe);hsr=r(G5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),G5t.forEach(t),psr=i(va),Wa=n(va,"P",{});var RA=s(Wa);_sr=r(RA,"The model class to instantiate is selected based on the "),cbe=n(RA,"CODE",{});var O5t=s(cbe);usr=r(O5t,"model_type"),O5t.forEach(t),bsr=r(RA,` property of the config object (either
passed as an argument or loaded from `),fbe=n(RA,"CODE",{});var V5t=s(fbe);vsr=r(V5t,"pretrained_model_name_or_path"),V5t.forEach(t),Fsr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=n(RA,"CODE",{});var X5t=s(mbe);Tsr=r(X5t,"pretrained_model_name_or_path"),X5t.forEach(t),Msr=r(RA,":"),RA.forEach(t),Esr=i(va),ve=n(va,"UL",{});var Te=s(ve);uT=n(Te,"LI",{});var zIe=s(uT);gbe=n(zIe,"STRONG",{});var z5t=s(gbe);Csr=r(z5t,"beit"),z5t.forEach(t),wsr=r(zIe," \u2014 "),_W=n(zIe,"A",{href:!0});var Q5t=s(_W);Asr=r(Q5t,"BeitForImageClassification"),Q5t.forEach(t),Lsr=r(zIe," (BEiT model)"),zIe.forEach(t),ysr=i(Te),bT=n(Te,"LI",{});var QIe=s(bT);hbe=n(QIe,"STRONG",{});var W5t=s(hbe);xsr=r(W5t,"convnext"),W5t.forEach(t),$sr=r(QIe," \u2014 "),uW=n(QIe,"A",{href:!0});var H5t=s(uW);ksr=r(H5t,"ConvNextForImageClassification"),H5t.forEach(t),Ssr=r(QIe," (ConvNeXT model)"),QIe.forEach(t),Rsr=i(Te),vT=n(Te,"LI",{});var WIe=s(vT);pbe=n(WIe,"STRONG",{});var U5t=s(pbe);Psr=r(U5t,"cvt"),U5t.forEach(t),Bsr=r(WIe," \u2014 "),bW=n(WIe,"A",{href:!0});var J5t=s(bW);Isr=r(J5t,"CvtForImageClassification"),J5t.forEach(t),Nsr=r(WIe," (CvT model)"),WIe.forEach(t),qsr=i(Te),FT=n(Te,"LI",{});var HIe=s(FT);_be=n(HIe,"STRONG",{});var Y5t=s(_be);jsr=r(Y5t,"data2vec-vision"),Y5t.forEach(t),Dsr=r(HIe," \u2014 "),vW=n(HIe,"A",{href:!0});var K5t=s(vW);Gsr=r(K5t,"Data2VecVisionForImageClassification"),K5t.forEach(t),Osr=r(HIe," (Data2VecVision model)"),HIe.forEach(t),Vsr=i(Te),Hs=n(Te,"LI",{});var RS=s(Hs);ube=n(RS,"STRONG",{});var Z5t=s(ube);Xsr=r(Z5t,"deit"),Z5t.forEach(t),zsr=r(RS," \u2014 "),FW=n(RS,"A",{href:!0});var ewt=s(FW);Qsr=r(ewt,"DeiTForImageClassification"),ewt.forEach(t),Wsr=r(RS," or "),TW=n(RS,"A",{href:!0});var owt=s(TW);Hsr=r(owt,"DeiTForImageClassificationWithTeacher"),owt.forEach(t),Usr=r(RS," (DeiT model)"),RS.forEach(t),Jsr=i(Te),TT=n(Te,"LI",{});var UIe=s(TT);bbe=n(UIe,"STRONG",{});var rwt=s(bbe);Ysr=r(rwt,"imagegpt"),rwt.forEach(t),Ksr=r(UIe," \u2014 "),MW=n(UIe,"A",{href:!0});var twt=s(MW);Zsr=r(twt,"ImageGPTForImageClassification"),twt.forEach(t),elr=r(UIe," (ImageGPT model)"),UIe.forEach(t),olr=i(Te),Us=n(Te,"LI",{});var PS=s(Us);vbe=n(PS,"STRONG",{});var awt=s(vbe);rlr=r(awt,"levit"),awt.forEach(t),tlr=r(PS," \u2014 "),EW=n(PS,"A",{href:!0});var nwt=s(EW);alr=r(nwt,"LevitForImageClassification"),nwt.forEach(t),nlr=r(PS," or "),CW=n(PS,"A",{href:!0});var swt=s(CW);slr=r(swt,"LevitForImageClassificationWithTeacher"),swt.forEach(t),llr=r(PS," (LeViT model)"),PS.forEach(t),ilr=i(Te),MT=n(Te,"LI",{});var JIe=s(MT);Fbe=n(JIe,"STRONG",{});var lwt=s(Fbe);dlr=r(lwt,"mobilevit"),lwt.forEach(t),clr=r(JIe," \u2014 "),wW=n(JIe,"A",{href:!0});var iwt=s(wW);flr=r(iwt,"MobileViTForImageClassification"),iwt.forEach(t),mlr=r(JIe," (MobileViT model)"),JIe.forEach(t),glr=i(Te),Ft=n(Te,"LI",{});var Rf=s(Ft);Tbe=n(Rf,"STRONG",{});var dwt=s(Tbe);hlr=r(dwt,"perceiver"),dwt.forEach(t),plr=r(Rf," \u2014 "),AW=n(Rf,"A",{href:!0});var cwt=s(AW);_lr=r(cwt,"PerceiverForImageClassificationLearned"),cwt.forEach(t),ulr=r(Rf," or "),LW=n(Rf,"A",{href:!0});var fwt=s(LW);blr=r(fwt,"PerceiverForImageClassificationFourier"),fwt.forEach(t),vlr=r(Rf," or "),yW=n(Rf,"A",{href:!0});var mwt=s(yW);Flr=r(mwt,"PerceiverForImageClassificationConvProcessing"),mwt.forEach(t),Tlr=r(Rf," (Perceiver model)"),Rf.forEach(t),Mlr=i(Te),ET=n(Te,"LI",{});var YIe=s(ET);Mbe=n(YIe,"STRONG",{});var gwt=s(Mbe);Elr=r(gwt,"poolformer"),gwt.forEach(t),Clr=r(YIe," \u2014 "),xW=n(YIe,"A",{href:!0});var hwt=s(xW);wlr=r(hwt,"PoolFormerForImageClassification"),hwt.forEach(t),Alr=r(YIe," (PoolFormer model)"),YIe.forEach(t),Llr=i(Te),CT=n(Te,"LI",{});var KIe=s(CT);Ebe=n(KIe,"STRONG",{});var pwt=s(Ebe);ylr=r(pwt,"regnet"),pwt.forEach(t),xlr=r(KIe," \u2014 "),$W=n(KIe,"A",{href:!0});var _wt=s($W);$lr=r(_wt,"RegNetForImageClassification"),_wt.forEach(t),klr=r(KIe," (RegNet model)"),KIe.forEach(t),Slr=i(Te),wT=n(Te,"LI",{});var ZIe=s(wT);Cbe=n(ZIe,"STRONG",{});var uwt=s(Cbe);Rlr=r(uwt,"resnet"),uwt.forEach(t),Plr=r(ZIe," \u2014 "),kW=n(ZIe,"A",{href:!0});var bwt=s(kW);Blr=r(bwt,"ResNetForImageClassification"),bwt.forEach(t),Ilr=r(ZIe," (ResNet model)"),ZIe.forEach(t),Nlr=i(Te),AT=n(Te,"LI",{});var eNe=s(AT);wbe=n(eNe,"STRONG",{});var vwt=s(wbe);qlr=r(vwt,"segformer"),vwt.forEach(t),jlr=r(eNe," \u2014 "),SW=n(eNe,"A",{href:!0});var Fwt=s(SW);Dlr=r(Fwt,"SegformerForImageClassification"),Fwt.forEach(t),Glr=r(eNe," (SegFormer model)"),eNe.forEach(t),Olr=i(Te),LT=n(Te,"LI",{});var oNe=s(LT);Abe=n(oNe,"STRONG",{});var Twt=s(Abe);Vlr=r(Twt,"swin"),Twt.forEach(t),Xlr=r(oNe," \u2014 "),RW=n(oNe,"A",{href:!0});var Mwt=s(RW);zlr=r(Mwt,"SwinForImageClassification"),Mwt.forEach(t),Qlr=r(oNe," (Swin Transformer model)"),oNe.forEach(t),Wlr=i(Te),yT=n(Te,"LI",{});var rNe=s(yT);Lbe=n(rNe,"STRONG",{});var Ewt=s(Lbe);Hlr=r(Ewt,"van"),Ewt.forEach(t),Ulr=r(rNe," \u2014 "),PW=n(rNe,"A",{href:!0});var Cwt=s(PW);Jlr=r(Cwt,"VanForImageClassification"),Cwt.forEach(t),Ylr=r(rNe," (VAN model)"),rNe.forEach(t),Klr=i(Te),xT=n(Te,"LI",{});var tNe=s(xT);ybe=n(tNe,"STRONG",{});var wwt=s(ybe);Zlr=r(wwt,"vit"),wwt.forEach(t),eir=r(tNe," \u2014 "),BW=n(tNe,"A",{href:!0});var Awt=s(BW);oir=r(Awt,"ViTForImageClassification"),Awt.forEach(t),rir=r(tNe," (ViT model)"),tNe.forEach(t),Te.forEach(t),tir=i(va),$T=n(va,"P",{});var aNe=s($T);air=r(aNe,"The model is set in evaluation mode by default using "),xbe=n(aNe,"CODE",{});var Lwt=s(xbe);nir=r(Lwt,"model.eval()"),Lwt.forEach(t),sir=r(aNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$be=n(aNe,"CODE",{});var ywt=s($be);lir=r(ywt,"model.train()"),ywt.forEach(t),aNe.forEach(t),iir=i(va),T(kT.$$.fragment,va),va.forEach(t),gl.forEach(t),OXe=i(f),Ed=n(f,"H2",{class:!0});var HQe=s(Ed);ST=n(HQe,"A",{id:!0,class:!0,href:!0});var xwt=s(ST);kbe=n(xwt,"SPAN",{});var $wt=s(kbe);T(qy.$$.fragment,$wt),$wt.forEach(t),xwt.forEach(t),dir=i(HQe),Sbe=n(HQe,"SPAN",{});var kwt=s(Sbe);cir=r(kwt,"AutoModelForVision2Seq"),kwt.forEach(t),HQe.forEach(t),VXe=i(f),Xo=n(f,"DIV",{class:!0});var hl=s(Xo);T(jy.$$.fragment,hl),fir=i(hl),Cd=n(hl,"P",{});var nte=s(Cd);mir=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IW=n(nte,"A",{href:!0});var Swt=s(IW);gir=r(Swt,"from_pretrained()"),Swt.forEach(t),hir=r(nte," class method or the "),NW=n(nte,"A",{href:!0});var Rwt=s(NW);pir=r(Rwt,"from_config()"),Rwt.forEach(t),_ir=r(nte,` class
method.`),nte.forEach(t),uir=i(hl),Dy=n(hl,"P",{});var UQe=s(Dy);bir=r(UQe,"This class cannot be instantiated directly using "),Rbe=n(UQe,"CODE",{});var Pwt=s(Rbe);vir=r(Pwt,"__init__()"),Pwt.forEach(t),Fir=r(UQe," (throws an error)."),UQe.forEach(t),Tir=i(hl),Tt=n(hl,"DIV",{class:!0});var PA=s(Tt);T(Gy.$$.fragment,PA),Mir=i(PA),Pbe=n(PA,"P",{});var Bwt=s(Pbe);Eir=r(Bwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Bwt.forEach(t),Cir=i(PA),wd=n(PA,"P",{});var ste=s(wd);wir=r(ste,`Note:
Loading a model from its configuration file does `),Bbe=n(ste,"STRONG",{});var Iwt=s(Bbe);Air=r(Iwt,"not"),Iwt.forEach(t),Lir=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=n(ste,"A",{href:!0});var Nwt=s(qW);yir=r(Nwt,"from_pretrained()"),Nwt.forEach(t),xir=r(ste," to load the model weights."),ste.forEach(t),$ir=i(PA),T(RT.$$.fragment,PA),PA.forEach(t),kir=i(hl),co=n(hl,"DIV",{class:!0});var Fa=s(co);T(Oy.$$.fragment,Fa),Sir=i(Fa),Ibe=n(Fa,"P",{});var qwt=s(Ibe);Rir=r(qwt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qwt.forEach(t),Pir=i(Fa),Ha=n(Fa,"P",{});var BA=s(Ha);Bir=r(BA,"The model class to instantiate is selected based on the "),Nbe=n(BA,"CODE",{});var jwt=s(Nbe);Iir=r(jwt,"model_type"),jwt.forEach(t),Nir=r(BA,` property of the config object (either
passed as an argument or loaded from `),qbe=n(BA,"CODE",{});var Dwt=s(qbe);qir=r(Dwt,"pretrained_model_name_or_path"),Dwt.forEach(t),jir=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=n(BA,"CODE",{});var Gwt=s(jbe);Dir=r(Gwt,"pretrained_model_name_or_path"),Gwt.forEach(t),Gir=r(BA,":"),BA.forEach(t),Oir=i(Fa),Dbe=n(Fa,"UL",{});var Owt=s(Dbe);PT=n(Owt,"LI",{});var nNe=s(PT);Gbe=n(nNe,"STRONG",{});var Vwt=s(Gbe);Vir=r(Vwt,"vision-encoder-decoder"),Vwt.forEach(t),Xir=r(nNe," \u2014 "),jW=n(nNe,"A",{href:!0});var Xwt=s(jW);zir=r(Xwt,"VisionEncoderDecoderModel"),Xwt.forEach(t),Qir=r(nNe," (Vision Encoder decoder model)"),nNe.forEach(t),Owt.forEach(t),Wir=i(Fa),BT=n(Fa,"P",{});var sNe=s(BT);Hir=r(sNe,"The model is set in evaluation mode by default using "),Obe=n(sNe,"CODE",{});var zwt=s(Obe);Uir=r(zwt,"model.eval()"),zwt.forEach(t),Jir=r(sNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vbe=n(sNe,"CODE",{});var Qwt=s(Vbe);Yir=r(Qwt,"model.train()"),Qwt.forEach(t),sNe.forEach(t),Kir=i(Fa),T(IT.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),XXe=i(f),Ad=n(f,"H2",{class:!0});var JQe=s(Ad);NT=n(JQe,"A",{id:!0,class:!0,href:!0});var Wwt=s(NT);Xbe=n(Wwt,"SPAN",{});var Hwt=s(Xbe);T(Vy.$$.fragment,Hwt),Hwt.forEach(t),Wwt.forEach(t),Zir=i(JQe),zbe=n(JQe,"SPAN",{});var Uwt=s(zbe);edr=r(Uwt,"AutoModelForVisualQuestionAnswering"),Uwt.forEach(t),JQe.forEach(t),zXe=i(f),zo=n(f,"DIV",{class:!0});var pl=s(zo);T(Xy.$$.fragment,pl),odr=i(pl),Ld=n(pl,"P",{});var lte=s(Ld);rdr=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),DW=n(lte,"A",{href:!0});var Jwt=s(DW);tdr=r(Jwt,"from_pretrained()"),Jwt.forEach(t),adr=r(lte," class method or the "),GW=n(lte,"A",{href:!0});var Ywt=s(GW);ndr=r(Ywt,"from_config()"),Ywt.forEach(t),sdr=r(lte,` class
method.`),lte.forEach(t),ldr=i(pl),zy=n(pl,"P",{});var YQe=s(zy);idr=r(YQe,"This class cannot be instantiated directly using "),Qbe=n(YQe,"CODE",{});var Kwt=s(Qbe);ddr=r(Kwt,"__init__()"),Kwt.forEach(t),cdr=r(YQe," (throws an error)."),YQe.forEach(t),fdr=i(pl),Mt=n(pl,"DIV",{class:!0});var IA=s(Mt);T(Qy.$$.fragment,IA),mdr=i(IA),Wbe=n(IA,"P",{});var Zwt=s(Wbe);gdr=r(Zwt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Zwt.forEach(t),hdr=i(IA),yd=n(IA,"P",{});var ite=s(yd);pdr=r(ite,`Note:
Loading a model from its configuration file does `),Hbe=n(ite,"STRONG",{});var eAt=s(Hbe);_dr=r(eAt,"not"),eAt.forEach(t),udr=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=n(ite,"A",{href:!0});var oAt=s(OW);bdr=r(oAt,"from_pretrained()"),oAt.forEach(t),vdr=r(ite," to load the model weights."),ite.forEach(t),Fdr=i(IA),T(qT.$$.fragment,IA),IA.forEach(t),Tdr=i(pl),fo=n(pl,"DIV",{class:!0});var Ta=s(fo);T(Wy.$$.fragment,Ta),Mdr=i(Ta),Ube=n(Ta,"P",{});var rAt=s(Ube);Edr=r(rAt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),rAt.forEach(t),Cdr=i(Ta),Ua=n(Ta,"P",{});var NA=s(Ua);wdr=r(NA,"The model class to instantiate is selected based on the "),Jbe=n(NA,"CODE",{});var tAt=s(Jbe);Adr=r(tAt,"model_type"),tAt.forEach(t),Ldr=r(NA,` property of the config object (either
passed as an argument or loaded from `),Ybe=n(NA,"CODE",{});var aAt=s(Ybe);ydr=r(aAt,"pretrained_model_name_or_path"),aAt.forEach(t),xdr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=n(NA,"CODE",{});var nAt=s(Kbe);$dr=r(nAt,"pretrained_model_name_or_path"),nAt.forEach(t),kdr=r(NA,":"),NA.forEach(t),Sdr=i(Ta),Zbe=n(Ta,"UL",{});var sAt=s(Zbe);jT=n(sAt,"LI",{});var lNe=s(jT);eve=n(lNe,"STRONG",{});var lAt=s(eve);Rdr=r(lAt,"vilt"),lAt.forEach(t),Pdr=r(lNe," \u2014 "),VW=n(lNe,"A",{href:!0});var iAt=s(VW);Bdr=r(iAt,"ViltForQuestionAnswering"),iAt.forEach(t),Idr=r(lNe," (ViLT model)"),lNe.forEach(t),sAt.forEach(t),Ndr=i(Ta),DT=n(Ta,"P",{});var iNe=s(DT);qdr=r(iNe,"The model is set in evaluation mode by default using "),ove=n(iNe,"CODE",{});var dAt=s(ove);jdr=r(dAt,"model.eval()"),dAt.forEach(t),Ddr=r(iNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rve=n(iNe,"CODE",{});var cAt=s(rve);Gdr=r(cAt,"model.train()"),cAt.forEach(t),iNe.forEach(t),Odr=i(Ta),T(GT.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),QXe=i(f),xd=n(f,"H2",{class:!0});var KQe=s(xd);OT=n(KQe,"A",{id:!0,class:!0,href:!0});var fAt=s(OT);tve=n(fAt,"SPAN",{});var mAt=s(tve);T(Hy.$$.fragment,mAt),mAt.forEach(t),fAt.forEach(t),Vdr=i(KQe),ave=n(KQe,"SPAN",{});var gAt=s(ave);Xdr=r(gAt,"AutoModelForAudioClassification"),gAt.forEach(t),KQe.forEach(t),WXe=i(f),Qo=n(f,"DIV",{class:!0});var _l=s(Qo);T(Uy.$$.fragment,_l),zdr=i(_l),$d=n(_l,"P",{});var dte=s($d);Qdr=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),XW=n(dte,"A",{href:!0});var hAt=s(XW);Wdr=r(hAt,"from_pretrained()"),hAt.forEach(t),Hdr=r(dte," class method or the "),zW=n(dte,"A",{href:!0});var pAt=s(zW);Udr=r(pAt,"from_config()"),pAt.forEach(t),Jdr=r(dte,` class
method.`),dte.forEach(t),Ydr=i(_l),Jy=n(_l,"P",{});var ZQe=s(Jy);Kdr=r(ZQe,"This class cannot be instantiated directly using "),nve=n(ZQe,"CODE",{});var _At=s(nve);Zdr=r(_At,"__init__()"),_At.forEach(t),ecr=r(ZQe," (throws an error)."),ZQe.forEach(t),ocr=i(_l),Et=n(_l,"DIV",{class:!0});var qA=s(Et);T(Yy.$$.fragment,qA),rcr=i(qA),sve=n(qA,"P",{});var uAt=s(sve);tcr=r(uAt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),uAt.forEach(t),acr=i(qA),kd=n(qA,"P",{});var cte=s(kd);ncr=r(cte,`Note:
Loading a model from its configuration file does `),lve=n(cte,"STRONG",{});var bAt=s(lve);scr=r(bAt,"not"),bAt.forEach(t),lcr=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(cte,"A",{href:!0});var vAt=s(QW);icr=r(vAt,"from_pretrained()"),vAt.forEach(t),dcr=r(cte," to load the model weights."),cte.forEach(t),ccr=i(qA),T(VT.$$.fragment,qA),qA.forEach(t),fcr=i(_l),mo=n(_l,"DIV",{class:!0});var Ma=s(mo);T(Ky.$$.fragment,Ma),mcr=i(Ma),ive=n(Ma,"P",{});var FAt=s(ive);gcr=r(FAt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),FAt.forEach(t),hcr=i(Ma),Ja=n(Ma,"P",{});var jA=s(Ja);pcr=r(jA,"The model class to instantiate is selected based on the "),dve=n(jA,"CODE",{});var TAt=s(dve);_cr=r(TAt,"model_type"),TAt.forEach(t),ucr=r(jA,` property of the config object (either
passed as an argument or loaded from `),cve=n(jA,"CODE",{});var MAt=s(cve);bcr=r(MAt,"pretrained_model_name_or_path"),MAt.forEach(t),vcr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=n(jA,"CODE",{});var EAt=s(fve);Fcr=r(EAt,"pretrained_model_name_or_path"),EAt.forEach(t),Tcr=r(jA,":"),jA.forEach(t),Mcr=i(Ma),Pe=n(Ma,"UL",{});var Qe=s(Pe);XT=n(Qe,"LI",{});var dNe=s(XT);mve=n(dNe,"STRONG",{});var CAt=s(mve);Ecr=r(CAt,"data2vec-audio"),CAt.forEach(t),Ccr=r(dNe," \u2014 "),WW=n(dNe,"A",{href:!0});var wAt=s(WW);wcr=r(wAt,"Data2VecAudioForSequenceClassification"),wAt.forEach(t),Acr=r(dNe," (Data2VecAudio model)"),dNe.forEach(t),Lcr=i(Qe),zT=n(Qe,"LI",{});var cNe=s(zT);gve=n(cNe,"STRONG",{});var AAt=s(gve);ycr=r(AAt,"hubert"),AAt.forEach(t),xcr=r(cNe," \u2014 "),HW=n(cNe,"A",{href:!0});var LAt=s(HW);$cr=r(LAt,"HubertForSequenceClassification"),LAt.forEach(t),kcr=r(cNe," (Hubert model)"),cNe.forEach(t),Scr=i(Qe),QT=n(Qe,"LI",{});var fNe=s(QT);hve=n(fNe,"STRONG",{});var yAt=s(hve);Rcr=r(yAt,"sew"),yAt.forEach(t),Pcr=r(fNe," \u2014 "),UW=n(fNe,"A",{href:!0});var xAt=s(UW);Bcr=r(xAt,"SEWForSequenceClassification"),xAt.forEach(t),Icr=r(fNe," (SEW model)"),fNe.forEach(t),Ncr=i(Qe),WT=n(Qe,"LI",{});var mNe=s(WT);pve=n(mNe,"STRONG",{});var $At=s(pve);qcr=r($At,"sew-d"),$At.forEach(t),jcr=r(mNe," \u2014 "),JW=n(mNe,"A",{href:!0});var kAt=s(JW);Dcr=r(kAt,"SEWDForSequenceClassification"),kAt.forEach(t),Gcr=r(mNe," (SEW-D model)"),mNe.forEach(t),Ocr=i(Qe),HT=n(Qe,"LI",{});var gNe=s(HT);_ve=n(gNe,"STRONG",{});var SAt=s(_ve);Vcr=r(SAt,"unispeech"),SAt.forEach(t),Xcr=r(gNe," \u2014 "),YW=n(gNe,"A",{href:!0});var RAt=s(YW);zcr=r(RAt,"UniSpeechForSequenceClassification"),RAt.forEach(t),Qcr=r(gNe," (UniSpeech model)"),gNe.forEach(t),Wcr=i(Qe),UT=n(Qe,"LI",{});var hNe=s(UT);uve=n(hNe,"STRONG",{});var PAt=s(uve);Hcr=r(PAt,"unispeech-sat"),PAt.forEach(t),Ucr=r(hNe," \u2014 "),KW=n(hNe,"A",{href:!0});var BAt=s(KW);Jcr=r(BAt,"UniSpeechSatForSequenceClassification"),BAt.forEach(t),Ycr=r(hNe," (UniSpeechSat model)"),hNe.forEach(t),Kcr=i(Qe),JT=n(Qe,"LI",{});var pNe=s(JT);bve=n(pNe,"STRONG",{});var IAt=s(bve);Zcr=r(IAt,"wav2vec2"),IAt.forEach(t),efr=r(pNe," \u2014 "),ZW=n(pNe,"A",{href:!0});var NAt=s(ZW);ofr=r(NAt,"Wav2Vec2ForSequenceClassification"),NAt.forEach(t),rfr=r(pNe," (Wav2Vec2 model)"),pNe.forEach(t),tfr=i(Qe),YT=n(Qe,"LI",{});var _Ne=s(YT);vve=n(_Ne,"STRONG",{});var qAt=s(vve);afr=r(qAt,"wav2vec2-conformer"),qAt.forEach(t),nfr=r(_Ne," \u2014 "),eH=n(_Ne,"A",{href:!0});var jAt=s(eH);sfr=r(jAt,"Wav2Vec2ConformerForSequenceClassification"),jAt.forEach(t),lfr=r(_Ne," (Wav2Vec2-Conformer model)"),_Ne.forEach(t),ifr=i(Qe),KT=n(Qe,"LI",{});var uNe=s(KT);Fve=n(uNe,"STRONG",{});var DAt=s(Fve);dfr=r(DAt,"wavlm"),DAt.forEach(t),cfr=r(uNe," \u2014 "),oH=n(uNe,"A",{href:!0});var GAt=s(oH);ffr=r(GAt,"WavLMForSequenceClassification"),GAt.forEach(t),mfr=r(uNe," (WavLM model)"),uNe.forEach(t),Qe.forEach(t),gfr=i(Ma),ZT=n(Ma,"P",{});var bNe=s(ZT);hfr=r(bNe,"The model is set in evaluation mode by default using "),Tve=n(bNe,"CODE",{});var OAt=s(Tve);pfr=r(OAt,"model.eval()"),OAt.forEach(t),_fr=r(bNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mve=n(bNe,"CODE",{});var VAt=s(Mve);ufr=r(VAt,"model.train()"),VAt.forEach(t),bNe.forEach(t),bfr=i(Ma),T(e7.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),HXe=i(f),Sd=n(f,"H2",{class:!0});var eWe=s(Sd);o7=n(eWe,"A",{id:!0,class:!0,href:!0});var XAt=s(o7);Eve=n(XAt,"SPAN",{});var zAt=s(Eve);T(Zy.$$.fragment,zAt),zAt.forEach(t),XAt.forEach(t),vfr=i(eWe),Cve=n(eWe,"SPAN",{});var QAt=s(Cve);Ffr=r(QAt,"AutoModelForAudioFrameClassification"),QAt.forEach(t),eWe.forEach(t),UXe=i(f),Wo=n(f,"DIV",{class:!0});var ul=s(Wo);T(e8.$$.fragment,ul),Tfr=i(ul),Rd=n(ul,"P",{});var fte=s(Rd);Mfr=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rH=n(fte,"A",{href:!0});var WAt=s(rH);Efr=r(WAt,"from_pretrained()"),WAt.forEach(t),Cfr=r(fte," class method or the "),tH=n(fte,"A",{href:!0});var HAt=s(tH);wfr=r(HAt,"from_config()"),HAt.forEach(t),Afr=r(fte,` class
method.`),fte.forEach(t),Lfr=i(ul),o8=n(ul,"P",{});var oWe=s(o8);yfr=r(oWe,"This class cannot be instantiated directly using "),wve=n(oWe,"CODE",{});var UAt=s(wve);xfr=r(UAt,"__init__()"),UAt.forEach(t),$fr=r(oWe," (throws an error)."),oWe.forEach(t),kfr=i(ul),Ct=n(ul,"DIV",{class:!0});var DA=s(Ct);T(r8.$$.fragment,DA),Sfr=i(DA),Ave=n(DA,"P",{});var JAt=s(Ave);Rfr=r(JAt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),JAt.forEach(t),Pfr=i(DA),Pd=n(DA,"P",{});var mte=s(Pd);Bfr=r(mte,`Note:
Loading a model from its configuration file does `),Lve=n(mte,"STRONG",{});var YAt=s(Lve);Ifr=r(YAt,"not"),YAt.forEach(t),Nfr=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=n(mte,"A",{href:!0});var KAt=s(aH);qfr=r(KAt,"from_pretrained()"),KAt.forEach(t),jfr=r(mte," to load the model weights."),mte.forEach(t),Dfr=i(DA),T(r7.$$.fragment,DA),DA.forEach(t),Gfr=i(ul),go=n(ul,"DIV",{class:!0});var Ea=s(go);T(t8.$$.fragment,Ea),Ofr=i(Ea),yve=n(Ea,"P",{});var ZAt=s(yve);Vfr=r(ZAt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),ZAt.forEach(t),Xfr=i(Ea),Ya=n(Ea,"P",{});var GA=s(Ya);zfr=r(GA,"The model class to instantiate is selected based on the "),xve=n(GA,"CODE",{});var e6t=s(xve);Qfr=r(e6t,"model_type"),e6t.forEach(t),Wfr=r(GA,` property of the config object (either
passed as an argument or loaded from `),$ve=n(GA,"CODE",{});var o6t=s($ve);Hfr=r(o6t,"pretrained_model_name_or_path"),o6t.forEach(t),Ufr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=n(GA,"CODE",{});var r6t=s(kve);Jfr=r(r6t,"pretrained_model_name_or_path"),r6t.forEach(t),Yfr=r(GA,":"),GA.forEach(t),Kfr=i(Ea),rt=n(Ea,"UL",{});var bl=s(rt);t7=n(bl,"LI",{});var vNe=s(t7);Sve=n(vNe,"STRONG",{});var t6t=s(Sve);Zfr=r(t6t,"data2vec-audio"),t6t.forEach(t),emr=r(vNe," \u2014 "),nH=n(vNe,"A",{href:!0});var a6t=s(nH);omr=r(a6t,"Data2VecAudioForAudioFrameClassification"),a6t.forEach(t),rmr=r(vNe," (Data2VecAudio model)"),vNe.forEach(t),tmr=i(bl),a7=n(bl,"LI",{});var FNe=s(a7);Rve=n(FNe,"STRONG",{});var n6t=s(Rve);amr=r(n6t,"unispeech-sat"),n6t.forEach(t),nmr=r(FNe," \u2014 "),sH=n(FNe,"A",{href:!0});var s6t=s(sH);smr=r(s6t,"UniSpeechSatForAudioFrameClassification"),s6t.forEach(t),lmr=r(FNe," (UniSpeechSat model)"),FNe.forEach(t),imr=i(bl),n7=n(bl,"LI",{});var TNe=s(n7);Pve=n(TNe,"STRONG",{});var l6t=s(Pve);dmr=r(l6t,"wav2vec2"),l6t.forEach(t),cmr=r(TNe," \u2014 "),lH=n(TNe,"A",{href:!0});var i6t=s(lH);fmr=r(i6t,"Wav2Vec2ForAudioFrameClassification"),i6t.forEach(t),mmr=r(TNe," (Wav2Vec2 model)"),TNe.forEach(t),gmr=i(bl),s7=n(bl,"LI",{});var MNe=s(s7);Bve=n(MNe,"STRONG",{});var d6t=s(Bve);hmr=r(d6t,"wav2vec2-conformer"),d6t.forEach(t),pmr=r(MNe," \u2014 "),iH=n(MNe,"A",{href:!0});var c6t=s(iH);_mr=r(c6t,"Wav2Vec2ConformerForAudioFrameClassification"),c6t.forEach(t),umr=r(MNe," (Wav2Vec2-Conformer model)"),MNe.forEach(t),bmr=i(bl),l7=n(bl,"LI",{});var ENe=s(l7);Ive=n(ENe,"STRONG",{});var f6t=s(Ive);vmr=r(f6t,"wavlm"),f6t.forEach(t),Fmr=r(ENe," \u2014 "),dH=n(ENe,"A",{href:!0});var m6t=s(dH);Tmr=r(m6t,"WavLMForAudioFrameClassification"),m6t.forEach(t),Mmr=r(ENe," (WavLM model)"),ENe.forEach(t),bl.forEach(t),Emr=i(Ea),i7=n(Ea,"P",{});var CNe=s(i7);Cmr=r(CNe,"The model is set in evaluation mode by default using "),Nve=n(CNe,"CODE",{});var g6t=s(Nve);wmr=r(g6t,"model.eval()"),g6t.forEach(t),Amr=r(CNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qve=n(CNe,"CODE",{});var h6t=s(qve);Lmr=r(h6t,"model.train()"),h6t.forEach(t),CNe.forEach(t),ymr=i(Ea),T(d7.$$.fragment,Ea),Ea.forEach(t),ul.forEach(t),JXe=i(f),Bd=n(f,"H2",{class:!0});var rWe=s(Bd);c7=n(rWe,"A",{id:!0,class:!0,href:!0});var p6t=s(c7);jve=n(p6t,"SPAN",{});var _6t=s(jve);T(a8.$$.fragment,_6t),_6t.forEach(t),p6t.forEach(t),xmr=i(rWe),Dve=n(rWe,"SPAN",{});var u6t=s(Dve);$mr=r(u6t,"AutoModelForCTC"),u6t.forEach(t),rWe.forEach(t),YXe=i(f),Ho=n(f,"DIV",{class:!0});var vl=s(Ho);T(n8.$$.fragment,vl),kmr=i(vl),Id=n(vl,"P",{});var gte=s(Id);Smr=r(gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cH=n(gte,"A",{href:!0});var b6t=s(cH);Rmr=r(b6t,"from_pretrained()"),b6t.forEach(t),Pmr=r(gte," class method or the "),fH=n(gte,"A",{href:!0});var v6t=s(fH);Bmr=r(v6t,"from_config()"),v6t.forEach(t),Imr=r(gte,` class
method.`),gte.forEach(t),Nmr=i(vl),s8=n(vl,"P",{});var tWe=s(s8);qmr=r(tWe,"This class cannot be instantiated directly using "),Gve=n(tWe,"CODE",{});var F6t=s(Gve);jmr=r(F6t,"__init__()"),F6t.forEach(t),Dmr=r(tWe," (throws an error)."),tWe.forEach(t),Gmr=i(vl),wt=n(vl,"DIV",{class:!0});var OA=s(wt);T(l8.$$.fragment,OA),Omr=i(OA),Ove=n(OA,"P",{});var T6t=s(Ove);Vmr=r(T6t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),T6t.forEach(t),Xmr=i(OA),Nd=n(OA,"P",{});var hte=s(Nd);zmr=r(hte,`Note:
Loading a model from its configuration file does `),Vve=n(hte,"STRONG",{});var M6t=s(Vve);Qmr=r(M6t,"not"),M6t.forEach(t),Wmr=r(hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(hte,"A",{href:!0});var E6t=s(mH);Hmr=r(E6t,"from_pretrained()"),E6t.forEach(t),Umr=r(hte," to load the model weights."),hte.forEach(t),Jmr=i(OA),T(f7.$$.fragment,OA),OA.forEach(t),Ymr=i(vl),ho=n(vl,"DIV",{class:!0});var Ca=s(ho);T(i8.$$.fragment,Ca),Kmr=i(Ca),Xve=n(Ca,"P",{});var C6t=s(Xve);Zmr=r(C6t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),C6t.forEach(t),egr=i(Ca),Ka=n(Ca,"P",{});var VA=s(Ka);ogr=r(VA,"The model class to instantiate is selected based on the "),zve=n(VA,"CODE",{});var w6t=s(zve);rgr=r(w6t,"model_type"),w6t.forEach(t),tgr=r(VA,` property of the config object (either
passed as an argument or loaded from `),Qve=n(VA,"CODE",{});var A6t=s(Qve);agr=r(A6t,"pretrained_model_name_or_path"),A6t.forEach(t),ngr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=n(VA,"CODE",{});var L6t=s(Wve);sgr=r(L6t,"pretrained_model_name_or_path"),L6t.forEach(t),lgr=r(VA,":"),VA.forEach(t),igr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);m7=n(Be,"LI",{});var wNe=s(m7);Hve=n(wNe,"STRONG",{});var y6t=s(Hve);dgr=r(y6t,"data2vec-audio"),y6t.forEach(t),cgr=r(wNe," \u2014 "),gH=n(wNe,"A",{href:!0});var x6t=s(gH);fgr=r(x6t,"Data2VecAudioForCTC"),x6t.forEach(t),mgr=r(wNe," (Data2VecAudio model)"),wNe.forEach(t),ggr=i(Be),g7=n(Be,"LI",{});var ANe=s(g7);Uve=n(ANe,"STRONG",{});var $6t=s(Uve);hgr=r($6t,"hubert"),$6t.forEach(t),pgr=r(ANe," \u2014 "),hH=n(ANe,"A",{href:!0});var k6t=s(hH);_gr=r(k6t,"HubertForCTC"),k6t.forEach(t),ugr=r(ANe," (Hubert model)"),ANe.forEach(t),bgr=i(Be),h7=n(Be,"LI",{});var LNe=s(h7);Jve=n(LNe,"STRONG",{});var S6t=s(Jve);vgr=r(S6t,"mctct"),S6t.forEach(t),Fgr=r(LNe," \u2014 "),pH=n(LNe,"A",{href:!0});var R6t=s(pH);Tgr=r(R6t,"MCTCTForCTC"),R6t.forEach(t),Mgr=r(LNe," (M-CTC-T model)"),LNe.forEach(t),Egr=i(Be),p7=n(Be,"LI",{});var yNe=s(p7);Yve=n(yNe,"STRONG",{});var P6t=s(Yve);Cgr=r(P6t,"sew"),P6t.forEach(t),wgr=r(yNe," \u2014 "),_H=n(yNe,"A",{href:!0});var B6t=s(_H);Agr=r(B6t,"SEWForCTC"),B6t.forEach(t),Lgr=r(yNe," (SEW model)"),yNe.forEach(t),ygr=i(Be),_7=n(Be,"LI",{});var xNe=s(_7);Kve=n(xNe,"STRONG",{});var I6t=s(Kve);xgr=r(I6t,"sew-d"),I6t.forEach(t),$gr=r(xNe," \u2014 "),uH=n(xNe,"A",{href:!0});var N6t=s(uH);kgr=r(N6t,"SEWDForCTC"),N6t.forEach(t),Sgr=r(xNe," (SEW-D model)"),xNe.forEach(t),Rgr=i(Be),u7=n(Be,"LI",{});var $Ne=s(u7);Zve=n($Ne,"STRONG",{});var q6t=s(Zve);Pgr=r(q6t,"unispeech"),q6t.forEach(t),Bgr=r($Ne," \u2014 "),bH=n($Ne,"A",{href:!0});var j6t=s(bH);Igr=r(j6t,"UniSpeechForCTC"),j6t.forEach(t),Ngr=r($Ne," (UniSpeech model)"),$Ne.forEach(t),qgr=i(Be),b7=n(Be,"LI",{});var kNe=s(b7);e0e=n(kNe,"STRONG",{});var D6t=s(e0e);jgr=r(D6t,"unispeech-sat"),D6t.forEach(t),Dgr=r(kNe," \u2014 "),vH=n(kNe,"A",{href:!0});var G6t=s(vH);Ggr=r(G6t,"UniSpeechSatForCTC"),G6t.forEach(t),Ogr=r(kNe," (UniSpeechSat model)"),kNe.forEach(t),Vgr=i(Be),v7=n(Be,"LI",{});var SNe=s(v7);o0e=n(SNe,"STRONG",{});var O6t=s(o0e);Xgr=r(O6t,"wav2vec2"),O6t.forEach(t),zgr=r(SNe," \u2014 "),FH=n(SNe,"A",{href:!0});var V6t=s(FH);Qgr=r(V6t,"Wav2Vec2ForCTC"),V6t.forEach(t),Wgr=r(SNe," (Wav2Vec2 model)"),SNe.forEach(t),Hgr=i(Be),F7=n(Be,"LI",{});var RNe=s(F7);r0e=n(RNe,"STRONG",{});var X6t=s(r0e);Ugr=r(X6t,"wav2vec2-conformer"),X6t.forEach(t),Jgr=r(RNe," \u2014 "),TH=n(RNe,"A",{href:!0});var z6t=s(TH);Ygr=r(z6t,"Wav2Vec2ConformerForCTC"),z6t.forEach(t),Kgr=r(RNe," (Wav2Vec2-Conformer model)"),RNe.forEach(t),Zgr=i(Be),T7=n(Be,"LI",{});var PNe=s(T7);t0e=n(PNe,"STRONG",{});var Q6t=s(t0e);ehr=r(Q6t,"wavlm"),Q6t.forEach(t),ohr=r(PNe," \u2014 "),MH=n(PNe,"A",{href:!0});var W6t=s(MH);rhr=r(W6t,"WavLMForCTC"),W6t.forEach(t),thr=r(PNe," (WavLM model)"),PNe.forEach(t),Be.forEach(t),ahr=i(Ca),M7=n(Ca,"P",{});var BNe=s(M7);nhr=r(BNe,"The model is set in evaluation mode by default using "),a0e=n(BNe,"CODE",{});var H6t=s(a0e);shr=r(H6t,"model.eval()"),H6t.forEach(t),lhr=r(BNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n0e=n(BNe,"CODE",{});var U6t=s(n0e);ihr=r(U6t,"model.train()"),U6t.forEach(t),BNe.forEach(t),dhr=i(Ca),T(E7.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),KXe=i(f),qd=n(f,"H2",{class:!0});var aWe=s(qd);C7=n(aWe,"A",{id:!0,class:!0,href:!0});var J6t=s(C7);s0e=n(J6t,"SPAN",{});var Y6t=s(s0e);T(d8.$$.fragment,Y6t),Y6t.forEach(t),J6t.forEach(t),chr=i(aWe),l0e=n(aWe,"SPAN",{});var K6t=s(l0e);fhr=r(K6t,"AutoModelForSpeechSeq2Seq"),K6t.forEach(t),aWe.forEach(t),ZXe=i(f),Uo=n(f,"DIV",{class:!0});var Fl=s(Uo);T(c8.$$.fragment,Fl),mhr=i(Fl),jd=n(Fl,"P",{});var pte=s(jd);ghr=r(pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EH=n(pte,"A",{href:!0});var Z6t=s(EH);hhr=r(Z6t,"from_pretrained()"),Z6t.forEach(t),phr=r(pte," class method or the "),CH=n(pte,"A",{href:!0});var eLt=s(CH);_hr=r(eLt,"from_config()"),eLt.forEach(t),uhr=r(pte,` class
method.`),pte.forEach(t),bhr=i(Fl),f8=n(Fl,"P",{});var nWe=s(f8);vhr=r(nWe,"This class cannot be instantiated directly using "),i0e=n(nWe,"CODE",{});var oLt=s(i0e);Fhr=r(oLt,"__init__()"),oLt.forEach(t),Thr=r(nWe," (throws an error)."),nWe.forEach(t),Mhr=i(Fl),At=n(Fl,"DIV",{class:!0});var XA=s(At);T(m8.$$.fragment,XA),Ehr=i(XA),d0e=n(XA,"P",{});var rLt=s(d0e);Chr=r(rLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rLt.forEach(t),whr=i(XA),Dd=n(XA,"P",{});var _te=s(Dd);Ahr=r(_te,`Note:
Loading a model from its configuration file does `),c0e=n(_te,"STRONG",{});var tLt=s(c0e);Lhr=r(tLt,"not"),tLt.forEach(t),yhr=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(_te,"A",{href:!0});var aLt=s(wH);xhr=r(aLt,"from_pretrained()"),aLt.forEach(t),$hr=r(_te," to load the model weights."),_te.forEach(t),khr=i(XA),T(w7.$$.fragment,XA),XA.forEach(t),Shr=i(Fl),po=n(Fl,"DIV",{class:!0});var wa=s(po);T(g8.$$.fragment,wa),Rhr=i(wa),f0e=n(wa,"P",{});var nLt=s(f0e);Phr=r(nLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),nLt.forEach(t),Bhr=i(wa),Za=n(wa,"P",{});var zA=s(Za);Ihr=r(zA,"The model class to instantiate is selected based on the "),m0e=n(zA,"CODE",{});var sLt=s(m0e);Nhr=r(sLt,"model_type"),sLt.forEach(t),qhr=r(zA,` property of the config object (either
passed as an argument or loaded from `),g0e=n(zA,"CODE",{});var lLt=s(g0e);jhr=r(lLt,"pretrained_model_name_or_path"),lLt.forEach(t),Dhr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h0e=n(zA,"CODE",{});var iLt=s(h0e);Ghr=r(iLt,"pretrained_model_name_or_path"),iLt.forEach(t),Ohr=r(zA,":"),zA.forEach(t),Vhr=i(wa),h8=n(wa,"UL",{});var sWe=s(h8);A7=n(sWe,"LI",{});var INe=s(A7);p0e=n(INe,"STRONG",{});var dLt=s(p0e);Xhr=r(dLt,"speech-encoder-decoder"),dLt.forEach(t),zhr=r(INe," \u2014 "),AH=n(INe,"A",{href:!0});var cLt=s(AH);Qhr=r(cLt,"SpeechEncoderDecoderModel"),cLt.forEach(t),Whr=r(INe," (Speech Encoder decoder model)"),INe.forEach(t),Hhr=i(sWe),L7=n(sWe,"LI",{});var NNe=s(L7);_0e=n(NNe,"STRONG",{});var fLt=s(_0e);Uhr=r(fLt,"speech_to_text"),fLt.forEach(t),Jhr=r(NNe," \u2014 "),LH=n(NNe,"A",{href:!0});var mLt=s(LH);Yhr=r(mLt,"Speech2TextForConditionalGeneration"),mLt.forEach(t),Khr=r(NNe," (Speech2Text model)"),NNe.forEach(t),sWe.forEach(t),Zhr=i(wa),y7=n(wa,"P",{});var qNe=s(y7);epr=r(qNe,"The model is set in evaluation mode by default using "),u0e=n(qNe,"CODE",{});var gLt=s(u0e);opr=r(gLt,"model.eval()"),gLt.forEach(t),rpr=r(qNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b0e=n(qNe,"CODE",{});var hLt=s(b0e);tpr=r(hLt,"model.train()"),hLt.forEach(t),qNe.forEach(t),apr=i(wa),T(x7.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),eze=i(f),Gd=n(f,"H2",{class:!0});var lWe=s(Gd);$7=n(lWe,"A",{id:!0,class:!0,href:!0});var pLt=s($7);v0e=n(pLt,"SPAN",{});var _Lt=s(v0e);T(p8.$$.fragment,_Lt),_Lt.forEach(t),pLt.forEach(t),npr=i(lWe),F0e=n(lWe,"SPAN",{});var uLt=s(F0e);spr=r(uLt,"AutoModelForAudioXVector"),uLt.forEach(t),lWe.forEach(t),oze=i(f),Jo=n(f,"DIV",{class:!0});var Tl=s(Jo);T(_8.$$.fragment,Tl),lpr=i(Tl),Od=n(Tl,"P",{});var ute=s(Od);ipr=r(ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yH=n(ute,"A",{href:!0});var bLt=s(yH);dpr=r(bLt,"from_pretrained()"),bLt.forEach(t),cpr=r(ute," class method or the "),xH=n(ute,"A",{href:!0});var vLt=s(xH);fpr=r(vLt,"from_config()"),vLt.forEach(t),mpr=r(ute,` class
method.`),ute.forEach(t),gpr=i(Tl),u8=n(Tl,"P",{});var iWe=s(u8);hpr=r(iWe,"This class cannot be instantiated directly using "),T0e=n(iWe,"CODE",{});var FLt=s(T0e);ppr=r(FLt,"__init__()"),FLt.forEach(t),_pr=r(iWe," (throws an error)."),iWe.forEach(t),upr=i(Tl),Lt=n(Tl,"DIV",{class:!0});var QA=s(Lt);T(b8.$$.fragment,QA),bpr=i(QA),M0e=n(QA,"P",{});var TLt=s(M0e);vpr=r(TLt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),TLt.forEach(t),Fpr=i(QA),Vd=n(QA,"P",{});var bte=s(Vd);Tpr=r(bte,`Note:
Loading a model from its configuration file does `),E0e=n(bte,"STRONG",{});var MLt=s(E0e);Mpr=r(MLt,"not"),MLt.forEach(t),Epr=r(bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(bte,"A",{href:!0});var ELt=s($H);Cpr=r(ELt,"from_pretrained()"),ELt.forEach(t),wpr=r(bte," to load the model weights."),bte.forEach(t),Apr=i(QA),T(k7.$$.fragment,QA),QA.forEach(t),Lpr=i(Tl),_o=n(Tl,"DIV",{class:!0});var Aa=s(_o);T(v8.$$.fragment,Aa),ypr=i(Aa),C0e=n(Aa,"P",{});var CLt=s(C0e);xpr=r(CLt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),CLt.forEach(t),$pr=i(Aa),en=n(Aa,"P",{});var WA=s(en);kpr=r(WA,"The model class to instantiate is selected based on the "),w0e=n(WA,"CODE",{});var wLt=s(w0e);Spr=r(wLt,"model_type"),wLt.forEach(t),Rpr=r(WA,` property of the config object (either
passed as an argument or loaded from `),A0e=n(WA,"CODE",{});var ALt=s(A0e);Ppr=r(ALt,"pretrained_model_name_or_path"),ALt.forEach(t),Bpr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L0e=n(WA,"CODE",{});var LLt=s(L0e);Ipr=r(LLt,"pretrained_model_name_or_path"),LLt.forEach(t),Npr=r(WA,":"),WA.forEach(t),qpr=i(Aa),tt=n(Aa,"UL",{});var Ml=s(tt);S7=n(Ml,"LI",{});var jNe=s(S7);y0e=n(jNe,"STRONG",{});var yLt=s(y0e);jpr=r(yLt,"data2vec-audio"),yLt.forEach(t),Dpr=r(jNe," \u2014 "),kH=n(jNe,"A",{href:!0});var xLt=s(kH);Gpr=r(xLt,"Data2VecAudioForXVector"),xLt.forEach(t),Opr=r(jNe," (Data2VecAudio model)"),jNe.forEach(t),Vpr=i(Ml),R7=n(Ml,"LI",{});var DNe=s(R7);x0e=n(DNe,"STRONG",{});var $Lt=s(x0e);Xpr=r($Lt,"unispeech-sat"),$Lt.forEach(t),zpr=r(DNe," \u2014 "),SH=n(DNe,"A",{href:!0});var kLt=s(SH);Qpr=r(kLt,"UniSpeechSatForXVector"),kLt.forEach(t),Wpr=r(DNe," (UniSpeechSat model)"),DNe.forEach(t),Hpr=i(Ml),P7=n(Ml,"LI",{});var GNe=s(P7);$0e=n(GNe,"STRONG",{});var SLt=s($0e);Upr=r(SLt,"wav2vec2"),SLt.forEach(t),Jpr=r(GNe," \u2014 "),RH=n(GNe,"A",{href:!0});var RLt=s(RH);Ypr=r(RLt,"Wav2Vec2ForXVector"),RLt.forEach(t),Kpr=r(GNe," (Wav2Vec2 model)"),GNe.forEach(t),Zpr=i(Ml),B7=n(Ml,"LI",{});var ONe=s(B7);k0e=n(ONe,"STRONG",{});var PLt=s(k0e);e_r=r(PLt,"wav2vec2-conformer"),PLt.forEach(t),o_r=r(ONe," \u2014 "),PH=n(ONe,"A",{href:!0});var BLt=s(PH);r_r=r(BLt,"Wav2Vec2ConformerForXVector"),BLt.forEach(t),t_r=r(ONe," (Wav2Vec2-Conformer model)"),ONe.forEach(t),a_r=i(Ml),I7=n(Ml,"LI",{});var VNe=s(I7);S0e=n(VNe,"STRONG",{});var ILt=s(S0e);n_r=r(ILt,"wavlm"),ILt.forEach(t),s_r=r(VNe," \u2014 "),BH=n(VNe,"A",{href:!0});var NLt=s(BH);l_r=r(NLt,"WavLMForXVector"),NLt.forEach(t),i_r=r(VNe," (WavLM model)"),VNe.forEach(t),Ml.forEach(t),d_r=i(Aa),N7=n(Aa,"P",{});var XNe=s(N7);c_r=r(XNe,"The model is set in evaluation mode by default using "),R0e=n(XNe,"CODE",{});var qLt=s(R0e);f_r=r(qLt,"model.eval()"),qLt.forEach(t),m_r=r(XNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P0e=n(XNe,"CODE",{});var jLt=s(P0e);g_r=r(jLt,"model.train()"),jLt.forEach(t),XNe.forEach(t),h_r=i(Aa),T(q7.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),rze=i(f),Xd=n(f,"H2",{class:!0});var dWe=s(Xd);j7=n(dWe,"A",{id:!0,class:!0,href:!0});var DLt=s(j7);B0e=n(DLt,"SPAN",{});var GLt=s(B0e);T(F8.$$.fragment,GLt),GLt.forEach(t),DLt.forEach(t),p_r=i(dWe),I0e=n(dWe,"SPAN",{});var OLt=s(I0e);__r=r(OLt,"AutoModelForMaskedImageModeling"),OLt.forEach(t),dWe.forEach(t),tze=i(f),Yo=n(f,"DIV",{class:!0});var El=s(Yo);T(T8.$$.fragment,El),u_r=i(El),zd=n(El,"P",{});var vte=s(zd);b_r=r(vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),IH=n(vte,"A",{href:!0});var VLt=s(IH);v_r=r(VLt,"from_pretrained()"),VLt.forEach(t),F_r=r(vte," class method or the "),NH=n(vte,"A",{href:!0});var XLt=s(NH);T_r=r(XLt,"from_config()"),XLt.forEach(t),M_r=r(vte,` class
method.`),vte.forEach(t),E_r=i(El),M8=n(El,"P",{});var cWe=s(M8);C_r=r(cWe,"This class cannot be instantiated directly using "),N0e=n(cWe,"CODE",{});var zLt=s(N0e);w_r=r(zLt,"__init__()"),zLt.forEach(t),A_r=r(cWe," (throws an error)."),cWe.forEach(t),L_r=i(El),yt=n(El,"DIV",{class:!0});var HA=s(yt);T(E8.$$.fragment,HA),y_r=i(HA),q0e=n(HA,"P",{});var QLt=s(q0e);x_r=r(QLt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),QLt.forEach(t),$_r=i(HA),Qd=n(HA,"P",{});var Fte=s(Qd);k_r=r(Fte,`Note:
Loading a model from its configuration file does `),j0e=n(Fte,"STRONG",{});var WLt=s(j0e);S_r=r(WLt,"not"),WLt.forEach(t),R_r=r(Fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=n(Fte,"A",{href:!0});var HLt=s(qH);P_r=r(HLt,"from_pretrained()"),HLt.forEach(t),B_r=r(Fte," to load the model weights."),Fte.forEach(t),I_r=i(HA),T(D7.$$.fragment,HA),HA.forEach(t),N_r=i(El),uo=n(El,"DIV",{class:!0});var La=s(uo);T(C8.$$.fragment,La),q_r=i(La),D0e=n(La,"P",{});var ULt=s(D0e);j_r=r(ULt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ULt.forEach(t),D_r=i(La),on=n(La,"P",{});var UA=s(on);G_r=r(UA,"The model class to instantiate is selected based on the "),G0e=n(UA,"CODE",{});var JLt=s(G0e);O_r=r(JLt,"model_type"),JLt.forEach(t),V_r=r(UA,` property of the config object (either
passed as an argument or loaded from `),O0e=n(UA,"CODE",{});var YLt=s(O0e);X_r=r(YLt,"pretrained_model_name_or_path"),YLt.forEach(t),z_r=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V0e=n(UA,"CODE",{});var KLt=s(V0e);Q_r=r(KLt,"pretrained_model_name_or_path"),KLt.forEach(t),W_r=r(UA,":"),UA.forEach(t),H_r=i(La),Wd=n(La,"UL",{});var Tte=s(Wd);G7=n(Tte,"LI",{});var zNe=s(G7);X0e=n(zNe,"STRONG",{});var ZLt=s(X0e);U_r=r(ZLt,"deit"),ZLt.forEach(t),J_r=r(zNe," \u2014 "),jH=n(zNe,"A",{href:!0});var eyt=s(jH);Y_r=r(eyt,"DeiTForMaskedImageModeling"),eyt.forEach(t),K_r=r(zNe," (DeiT model)"),zNe.forEach(t),Z_r=i(Tte),O7=n(Tte,"LI",{});var QNe=s(O7);z0e=n(QNe,"STRONG",{});var oyt=s(z0e);eur=r(oyt,"swin"),oyt.forEach(t),our=r(QNe," \u2014 "),DH=n(QNe,"A",{href:!0});var ryt=s(DH);rur=r(ryt,"SwinForMaskedImageModeling"),ryt.forEach(t),tur=r(QNe," (Swin Transformer model)"),QNe.forEach(t),aur=i(Tte),V7=n(Tte,"LI",{});var WNe=s(V7);Q0e=n(WNe,"STRONG",{});var tyt=s(Q0e);nur=r(tyt,"vit"),tyt.forEach(t),sur=r(WNe," \u2014 "),GH=n(WNe,"A",{href:!0});var ayt=s(GH);lur=r(ayt,"ViTForMaskedImageModeling"),ayt.forEach(t),iur=r(WNe," (ViT model)"),WNe.forEach(t),Tte.forEach(t),dur=i(La),X7=n(La,"P",{});var HNe=s(X7);cur=r(HNe,"The model is set in evaluation mode by default using "),W0e=n(HNe,"CODE",{});var nyt=s(W0e);fur=r(nyt,"model.eval()"),nyt.forEach(t),mur=r(HNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H0e=n(HNe,"CODE",{});var syt=s(H0e);gur=r(syt,"model.train()"),syt.forEach(t),HNe.forEach(t),hur=i(La),T(z7.$$.fragment,La),La.forEach(t),El.forEach(t),aze=i(f),Hd=n(f,"H2",{class:!0});var fWe=s(Hd);Q7=n(fWe,"A",{id:!0,class:!0,href:!0});var lyt=s(Q7);U0e=n(lyt,"SPAN",{});var iyt=s(U0e);T(w8.$$.fragment,iyt),iyt.forEach(t),lyt.forEach(t),pur=i(fWe),J0e=n(fWe,"SPAN",{});var dyt=s(J0e);_ur=r(dyt,"AutoModelForObjectDetection"),dyt.forEach(t),fWe.forEach(t),nze=i(f),Ko=n(f,"DIV",{class:!0});var Cl=s(Ko);T(A8.$$.fragment,Cl),uur=i(Cl),Ud=n(Cl,"P",{});var Mte=s(Ud);bur=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),OH=n(Mte,"A",{href:!0});var cyt=s(OH);vur=r(cyt,"from_pretrained()"),cyt.forEach(t),Fur=r(Mte," class method or the "),VH=n(Mte,"A",{href:!0});var fyt=s(VH);Tur=r(fyt,"from_config()"),fyt.forEach(t),Mur=r(Mte,` class
method.`),Mte.forEach(t),Eur=i(Cl),L8=n(Cl,"P",{});var mWe=s(L8);Cur=r(mWe,"This class cannot be instantiated directly using "),Y0e=n(mWe,"CODE",{});var myt=s(Y0e);wur=r(myt,"__init__()"),myt.forEach(t),Aur=r(mWe," (throws an error)."),mWe.forEach(t),Lur=i(Cl),xt=n(Cl,"DIV",{class:!0});var JA=s(xt);T(y8.$$.fragment,JA),yur=i(JA),K0e=n(JA,"P",{});var gyt=s(K0e);xur=r(gyt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),gyt.forEach(t),$ur=i(JA),Jd=n(JA,"P",{});var Ete=s(Jd);kur=r(Ete,`Note:
Loading a model from its configuration file does `),Z0e=n(Ete,"STRONG",{});var hyt=s(Z0e);Sur=r(hyt,"not"),hyt.forEach(t),Rur=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(Ete,"A",{href:!0});var pyt=s(XH);Pur=r(pyt,"from_pretrained()"),pyt.forEach(t),Bur=r(Ete," to load the model weights."),Ete.forEach(t),Iur=i(JA),T(W7.$$.fragment,JA),JA.forEach(t),Nur=i(Cl),bo=n(Cl,"DIV",{class:!0});var ya=s(bo);T(x8.$$.fragment,ya),qur=i(ya),eFe=n(ya,"P",{});var _yt=s(eFe);jur=r(_yt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_yt.forEach(t),Dur=i(ya),rn=n(ya,"P",{});var YA=s(rn);Gur=r(YA,"The model class to instantiate is selected based on the "),oFe=n(YA,"CODE",{});var uyt=s(oFe);Our=r(uyt,"model_type"),uyt.forEach(t),Vur=r(YA,` property of the config object (either
passed as an argument or loaded from `),rFe=n(YA,"CODE",{});var byt=s(rFe);Xur=r(byt,"pretrained_model_name_or_path"),byt.forEach(t),zur=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=n(YA,"CODE",{});var vyt=s(tFe);Qur=r(vyt,"pretrained_model_name_or_path"),vyt.forEach(t),Wur=r(YA,":"),YA.forEach(t),Hur=i(ya),$8=n(ya,"UL",{});var gWe=s($8);H7=n(gWe,"LI",{});var UNe=s(H7);aFe=n(UNe,"STRONG",{});var Fyt=s(aFe);Uur=r(Fyt,"detr"),Fyt.forEach(t),Jur=r(UNe," \u2014 "),zH=n(UNe,"A",{href:!0});var Tyt=s(zH);Yur=r(Tyt,"DetrForObjectDetection"),Tyt.forEach(t),Kur=r(UNe," (DETR model)"),UNe.forEach(t),Zur=i(gWe),U7=n(gWe,"LI",{});var JNe=s(U7);nFe=n(JNe,"STRONG",{});var Myt=s(nFe);e1r=r(Myt,"yolos"),Myt.forEach(t),o1r=r(JNe," \u2014 "),QH=n(JNe,"A",{href:!0});var Eyt=s(QH);r1r=r(Eyt,"YolosForObjectDetection"),Eyt.forEach(t),t1r=r(JNe," (YOLOS model)"),JNe.forEach(t),gWe.forEach(t),a1r=i(ya),J7=n(ya,"P",{});var YNe=s(J7);n1r=r(YNe,"The model is set in evaluation mode by default using "),sFe=n(YNe,"CODE",{});var Cyt=s(sFe);s1r=r(Cyt,"model.eval()"),Cyt.forEach(t),l1r=r(YNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lFe=n(YNe,"CODE",{});var wyt=s(lFe);i1r=r(wyt,"model.train()"),wyt.forEach(t),YNe.forEach(t),d1r=i(ya),T(Y7.$$.fragment,ya),ya.forEach(t),Cl.forEach(t),sze=i(f),Yd=n(f,"H2",{class:!0});var hWe=s(Yd);K7=n(hWe,"A",{id:!0,class:!0,href:!0});var Ayt=s(K7);iFe=n(Ayt,"SPAN",{});var Lyt=s(iFe);T(k8.$$.fragment,Lyt),Lyt.forEach(t),Ayt.forEach(t),c1r=i(hWe),dFe=n(hWe,"SPAN",{});var yyt=s(dFe);f1r=r(yyt,"AutoModelForImageSegmentation"),yyt.forEach(t),hWe.forEach(t),lze=i(f),Zo=n(f,"DIV",{class:!0});var wl=s(Zo);T(S8.$$.fragment,wl),m1r=i(wl),Kd=n(wl,"P",{});var Cte=s(Kd);g1r=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),WH=n(Cte,"A",{href:!0});var xyt=s(WH);h1r=r(xyt,"from_pretrained()"),xyt.forEach(t),p1r=r(Cte," class method or the "),HH=n(Cte,"A",{href:!0});var $yt=s(HH);_1r=r($yt,"from_config()"),$yt.forEach(t),u1r=r(Cte,` class
method.`),Cte.forEach(t),b1r=i(wl),R8=n(wl,"P",{});var pWe=s(R8);v1r=r(pWe,"This class cannot be instantiated directly using "),cFe=n(pWe,"CODE",{});var kyt=s(cFe);F1r=r(kyt,"__init__()"),kyt.forEach(t),T1r=r(pWe," (throws an error)."),pWe.forEach(t),M1r=i(wl),$t=n(wl,"DIV",{class:!0});var KA=s($t);T(P8.$$.fragment,KA),E1r=i(KA),fFe=n(KA,"P",{});var Syt=s(fFe);C1r=r(Syt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Syt.forEach(t),w1r=i(KA),Zd=n(KA,"P",{});var wte=s(Zd);A1r=r(wte,`Note:
Loading a model from its configuration file does `),mFe=n(wte,"STRONG",{});var Ryt=s(mFe);L1r=r(Ryt,"not"),Ryt.forEach(t),y1r=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=n(wte,"A",{href:!0});var Pyt=s(UH);x1r=r(Pyt,"from_pretrained()"),Pyt.forEach(t),$1r=r(wte," to load the model weights."),wte.forEach(t),k1r=i(KA),T(Z7.$$.fragment,KA),KA.forEach(t),S1r=i(wl),vo=n(wl,"DIV",{class:!0});var xa=s(vo);T(B8.$$.fragment,xa),R1r=i(xa),gFe=n(xa,"P",{});var Byt=s(gFe);P1r=r(Byt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Byt.forEach(t),B1r=i(xa),tn=n(xa,"P",{});var ZA=s(tn);I1r=r(ZA,"The model class to instantiate is selected based on the "),hFe=n(ZA,"CODE",{});var Iyt=s(hFe);N1r=r(Iyt,"model_type"),Iyt.forEach(t),q1r=r(ZA,` property of the config object (either
passed as an argument or loaded from `),pFe=n(ZA,"CODE",{});var Nyt=s(pFe);j1r=r(Nyt,"pretrained_model_name_or_path"),Nyt.forEach(t),D1r=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=n(ZA,"CODE",{});var qyt=s(_Fe);G1r=r(qyt,"pretrained_model_name_or_path"),qyt.forEach(t),O1r=r(ZA,":"),ZA.forEach(t),V1r=i(xa),uFe=n(xa,"UL",{});var jyt=s(uFe);e9=n(jyt,"LI",{});var KNe=s(e9);bFe=n(KNe,"STRONG",{});var Dyt=s(bFe);X1r=r(Dyt,"detr"),Dyt.forEach(t),z1r=r(KNe," \u2014 "),JH=n(KNe,"A",{href:!0});var Gyt=s(JH);Q1r=r(Gyt,"DetrForSegmentation"),Gyt.forEach(t),W1r=r(KNe," (DETR model)"),KNe.forEach(t),jyt.forEach(t),H1r=i(xa),o9=n(xa,"P",{});var ZNe=s(o9);U1r=r(ZNe,"The model is set in evaluation mode by default using "),vFe=n(ZNe,"CODE",{});var Oyt=s(vFe);J1r=r(Oyt,"model.eval()"),Oyt.forEach(t),Y1r=r(ZNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FFe=n(ZNe,"CODE",{});var Vyt=s(FFe);K1r=r(Vyt,"model.train()"),Vyt.forEach(t),ZNe.forEach(t),Z1r=i(xa),T(r9.$$.fragment,xa),xa.forEach(t),wl.forEach(t),ize=i(f),ec=n(f,"H2",{class:!0});var _We=s(ec);t9=n(_We,"A",{id:!0,class:!0,href:!0});var Xyt=s(t9);TFe=n(Xyt,"SPAN",{});var zyt=s(TFe);T(I8.$$.fragment,zyt),zyt.forEach(t),Xyt.forEach(t),e2r=i(_We),MFe=n(_We,"SPAN",{});var Qyt=s(MFe);o2r=r(Qyt,"AutoModelForSemanticSegmentation"),Qyt.forEach(t),_We.forEach(t),dze=i(f),er=n(f,"DIV",{class:!0});var Al=s(er);T(N8.$$.fragment,Al),r2r=i(Al),oc=n(Al,"P",{});var Ate=s(oc);t2r=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),YH=n(Ate,"A",{href:!0});var Wyt=s(YH);a2r=r(Wyt,"from_pretrained()"),Wyt.forEach(t),n2r=r(Ate," class method or the "),KH=n(Ate,"A",{href:!0});var Hyt=s(KH);s2r=r(Hyt,"from_config()"),Hyt.forEach(t),l2r=r(Ate,` class
method.`),Ate.forEach(t),i2r=i(Al),q8=n(Al,"P",{});var uWe=s(q8);d2r=r(uWe,"This class cannot be instantiated directly using "),EFe=n(uWe,"CODE",{});var Uyt=s(EFe);c2r=r(Uyt,"__init__()"),Uyt.forEach(t),f2r=r(uWe," (throws an error)."),uWe.forEach(t),m2r=i(Al),kt=n(Al,"DIV",{class:!0});var e6=s(kt);T(j8.$$.fragment,e6),g2r=i(e6),CFe=n(e6,"P",{});var Jyt=s(CFe);h2r=r(Jyt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Jyt.forEach(t),p2r=i(e6),rc=n(e6,"P",{});var Lte=s(rc);_2r=r(Lte,`Note:
Loading a model from its configuration file does `),wFe=n(Lte,"STRONG",{});var Yyt=s(wFe);u2r=r(Yyt,"not"),Yyt.forEach(t),b2r=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=n(Lte,"A",{href:!0});var Kyt=s(ZH);v2r=r(Kyt,"from_pretrained()"),Kyt.forEach(t),F2r=r(Lte," to load the model weights."),Lte.forEach(t),T2r=i(e6),T(a9.$$.fragment,e6),e6.forEach(t),M2r=i(Al),Fo=n(Al,"DIV",{class:!0});var $a=s(Fo);T(D8.$$.fragment,$a),E2r=i($a),AFe=n($a,"P",{});var Zyt=s(AFe);C2r=r(Zyt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Zyt.forEach(t),w2r=i($a),an=n($a,"P",{});var o6=s(an);A2r=r(o6,"The model class to instantiate is selected based on the "),LFe=n(o6,"CODE",{});var e8t=s(LFe);L2r=r(e8t,"model_type"),e8t.forEach(t),y2r=r(o6,` property of the config object (either
passed as an argument or loaded from `),yFe=n(o6,"CODE",{});var o8t=s(yFe);x2r=r(o8t,"pretrained_model_name_or_path"),o8t.forEach(t),$2r=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=n(o6,"CODE",{});var r8t=s(xFe);k2r=r(r8t,"pretrained_model_name_or_path"),r8t.forEach(t),S2r=r(o6,":"),o6.forEach(t),R2r=i($a),at=n($a,"UL",{});var Ll=s(at);n9=n(Ll,"LI",{});var eqe=s(n9);$Fe=n(eqe,"STRONG",{});var t8t=s($Fe);P2r=r(t8t,"beit"),t8t.forEach(t),B2r=r(eqe," \u2014 "),eU=n(eqe,"A",{href:!0});var a8t=s(eU);I2r=r(a8t,"BeitForSemanticSegmentation"),a8t.forEach(t),N2r=r(eqe," (BEiT model)"),eqe.forEach(t),q2r=i(Ll),s9=n(Ll,"LI",{});var oqe=s(s9);kFe=n(oqe,"STRONG",{});var n8t=s(kFe);j2r=r(n8t,"data2vec-vision"),n8t.forEach(t),D2r=r(oqe," \u2014 "),oU=n(oqe,"A",{href:!0});var s8t=s(oU);G2r=r(s8t,"Data2VecVisionForSemanticSegmentation"),s8t.forEach(t),O2r=r(oqe," (Data2VecVision model)"),oqe.forEach(t),V2r=i(Ll),l9=n(Ll,"LI",{});var rqe=s(l9);SFe=n(rqe,"STRONG",{});var l8t=s(SFe);X2r=r(l8t,"dpt"),l8t.forEach(t),z2r=r(rqe," \u2014 "),rU=n(rqe,"A",{href:!0});var i8t=s(rU);Q2r=r(i8t,"DPTForSemanticSegmentation"),i8t.forEach(t),W2r=r(rqe," (DPT model)"),rqe.forEach(t),H2r=i(Ll),i9=n(Ll,"LI",{});var tqe=s(i9);RFe=n(tqe,"STRONG",{});var d8t=s(RFe);U2r=r(d8t,"mobilevit"),d8t.forEach(t),J2r=r(tqe," \u2014 "),tU=n(tqe,"A",{href:!0});var c8t=s(tU);Y2r=r(c8t,"MobileViTForSemanticSegmentation"),c8t.forEach(t),K2r=r(tqe," (MobileViT model)"),tqe.forEach(t),Z2r=i(Ll),d9=n(Ll,"LI",{});var aqe=s(d9);PFe=n(aqe,"STRONG",{});var f8t=s(PFe);ebr=r(f8t,"segformer"),f8t.forEach(t),obr=r(aqe," \u2014 "),aU=n(aqe,"A",{href:!0});var m8t=s(aU);rbr=r(m8t,"SegformerForSemanticSegmentation"),m8t.forEach(t),tbr=r(aqe," (SegFormer model)"),aqe.forEach(t),Ll.forEach(t),abr=i($a),c9=n($a,"P",{});var nqe=s(c9);nbr=r(nqe,"The model is set in evaluation mode by default using "),BFe=n(nqe,"CODE",{});var g8t=s(BFe);sbr=r(g8t,"model.eval()"),g8t.forEach(t),lbr=r(nqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IFe=n(nqe,"CODE",{});var h8t=s(IFe);ibr=r(h8t,"model.train()"),h8t.forEach(t),nqe.forEach(t),dbr=i($a),T(f9.$$.fragment,$a),$a.forEach(t),Al.forEach(t),cze=i(f),tc=n(f,"H2",{class:!0});var bWe=s(tc);m9=n(bWe,"A",{id:!0,class:!0,href:!0});var p8t=s(m9);NFe=n(p8t,"SPAN",{});var _8t=s(NFe);T(G8.$$.fragment,_8t),_8t.forEach(t),p8t.forEach(t),cbr=i(bWe),qFe=n(bWe,"SPAN",{});var u8t=s(qFe);fbr=r(u8t,"AutoModelForInstanceSegmentation"),u8t.forEach(t),bWe.forEach(t),fze=i(f),or=n(f,"DIV",{class:!0});var yl=s(or);T(O8.$$.fragment,yl),mbr=i(yl),ac=n(yl,"P",{});var yte=s(ac);gbr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),nU=n(yte,"A",{href:!0});var b8t=s(nU);hbr=r(b8t,"from_pretrained()"),b8t.forEach(t),pbr=r(yte," class method or the "),sU=n(yte,"A",{href:!0});var v8t=s(sU);_br=r(v8t,"from_config()"),v8t.forEach(t),ubr=r(yte,` class
method.`),yte.forEach(t),bbr=i(yl),V8=n(yl,"P",{});var vWe=s(V8);vbr=r(vWe,"This class cannot be instantiated directly using "),jFe=n(vWe,"CODE",{});var F8t=s(jFe);Fbr=r(F8t,"__init__()"),F8t.forEach(t),Tbr=r(vWe," (throws an error)."),vWe.forEach(t),Mbr=i(yl),St=n(yl,"DIV",{class:!0});var r6=s(St);T(X8.$$.fragment,r6),Ebr=i(r6),DFe=n(r6,"P",{});var T8t=s(DFe);Cbr=r(T8t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),T8t.forEach(t),wbr=i(r6),nc=n(r6,"P",{});var xte=s(nc);Abr=r(xte,`Note:
Loading a model from its configuration file does `),GFe=n(xte,"STRONG",{});var M8t=s(GFe);Lbr=r(M8t,"not"),M8t.forEach(t),ybr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(xte,"A",{href:!0});var E8t=s(lU);xbr=r(E8t,"from_pretrained()"),E8t.forEach(t),$br=r(xte," to load the model weights."),xte.forEach(t),kbr=i(r6),T(g9.$$.fragment,r6),r6.forEach(t),Sbr=i(yl),To=n(yl,"DIV",{class:!0});var ka=s(To);T(z8.$$.fragment,ka),Rbr=i(ka),OFe=n(ka,"P",{});var C8t=s(OFe);Pbr=r(C8t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),C8t.forEach(t),Bbr=i(ka),nn=n(ka,"P",{});var t6=s(nn);Ibr=r(t6,"The model class to instantiate is selected based on the "),VFe=n(t6,"CODE",{});var w8t=s(VFe);Nbr=r(w8t,"model_type"),w8t.forEach(t),qbr=r(t6,` property of the config object (either
passed as an argument or loaded from `),XFe=n(t6,"CODE",{});var A8t=s(XFe);jbr=r(A8t,"pretrained_model_name_or_path"),A8t.forEach(t),Dbr=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=n(t6,"CODE",{});var L8t=s(zFe);Gbr=r(L8t,"pretrained_model_name_or_path"),L8t.forEach(t),Obr=r(t6,":"),t6.forEach(t),Vbr=i(ka),QFe=n(ka,"UL",{});var y8t=s(QFe);h9=n(y8t,"LI",{});var sqe=s(h9);WFe=n(sqe,"STRONG",{});var x8t=s(WFe);Xbr=r(x8t,"maskformer"),x8t.forEach(t),zbr=r(sqe," \u2014 "),iU=n(sqe,"A",{href:!0});var $8t=s(iU);Qbr=r($8t,"MaskFormerForInstanceSegmentation"),$8t.forEach(t),Wbr=r(sqe," (MaskFormer model)"),sqe.forEach(t),y8t.forEach(t),Hbr=i(ka),p9=n(ka,"P",{});var lqe=s(p9);Ubr=r(lqe,"The model is set in evaluation mode by default using "),HFe=n(lqe,"CODE",{});var k8t=s(HFe);Jbr=r(k8t,"model.eval()"),k8t.forEach(t),Ybr=r(lqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UFe=n(lqe,"CODE",{});var S8t=s(UFe);Kbr=r(S8t,"model.train()"),S8t.forEach(t),lqe.forEach(t),Zbr=i(ka),T(_9.$$.fragment,ka),ka.forEach(t),yl.forEach(t),mze=i(f),sc=n(f,"H2",{class:!0});var FWe=s(sc);u9=n(FWe,"A",{id:!0,class:!0,href:!0});var R8t=s(u9);JFe=n(R8t,"SPAN",{});var P8t=s(JFe);T(Q8.$$.fragment,P8t),P8t.forEach(t),R8t.forEach(t),evr=i(FWe),YFe=n(FWe,"SPAN",{});var B8t=s(YFe);ovr=r(B8t,"TFAutoModel"),B8t.forEach(t),FWe.forEach(t),gze=i(f),rr=n(f,"DIV",{class:!0});var xl=s(rr);T(W8.$$.fragment,xl),rvr=i(xl),lc=n(xl,"P",{});var $te=s(lc);tvr=r($te,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dU=n($te,"A",{href:!0});var I8t=s(dU);avr=r(I8t,"from_pretrained()"),I8t.forEach(t),nvr=r($te," class method or the "),cU=n($te,"A",{href:!0});var N8t=s(cU);svr=r(N8t,"from_config()"),N8t.forEach(t),lvr=r($te,` class
method.`),$te.forEach(t),ivr=i(xl),H8=n(xl,"P",{});var TWe=s(H8);dvr=r(TWe,"This class cannot be instantiated directly using "),KFe=n(TWe,"CODE",{});var q8t=s(KFe);cvr=r(q8t,"__init__()"),q8t.forEach(t),fvr=r(TWe," (throws an error)."),TWe.forEach(t),mvr=i(xl),Rt=n(xl,"DIV",{class:!0});var a6=s(Rt);T(U8.$$.fragment,a6),gvr=i(a6),ZFe=n(a6,"P",{});var j8t=s(ZFe);hvr=r(j8t,"Instantiates one of the base model classes of the library from a configuration."),j8t.forEach(t),pvr=i(a6),ic=n(a6,"P",{});var kte=s(ic);_vr=r(kte,`Note:
Loading a model from its configuration file does `),eTe=n(kte,"STRONG",{});var D8t=s(eTe);uvr=r(D8t,"not"),D8t.forEach(t),bvr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(kte,"A",{href:!0});var G8t=s(fU);vvr=r(G8t,"from_pretrained()"),G8t.forEach(t),Fvr=r(kte," to load the model weights."),kte.forEach(t),Tvr=i(a6),T(b9.$$.fragment,a6),a6.forEach(t),Mvr=i(xl),$r=n(xl,"DIV",{class:!0});var $l=s($r);T(J8.$$.fragment,$l),Evr=i($l),oTe=n($l,"P",{});var O8t=s(oTe);Cvr=r(O8t,"Instantiate one of the base model classes of the library from a pretrained model."),O8t.forEach(t),wvr=i($l),sn=n($l,"P",{});var n6=s(sn);Avr=r(n6,"The model class to instantiate is selected based on the "),rTe=n(n6,"CODE",{});var V8t=s(rTe);Lvr=r(V8t,"model_type"),V8t.forEach(t),yvr=r(n6,` property of the config object (either
passed as an argument or loaded from `),tTe=n(n6,"CODE",{});var X8t=s(tTe);xvr=r(X8t,"pretrained_model_name_or_path"),X8t.forEach(t),$vr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=n(n6,"CODE",{});var z8t=s(aTe);kvr=r(z8t,"pretrained_model_name_or_path"),z8t.forEach(t),Svr=r(n6,":"),n6.forEach(t),Rvr=i($l),B=n($l,"UL",{});var j=s(B);v9=n(j,"LI",{});var iqe=s(v9);nTe=n(iqe,"STRONG",{});var Q8t=s(nTe);Pvr=r(Q8t,"albert"),Q8t.forEach(t),Bvr=r(iqe," \u2014 "),mU=n(iqe,"A",{href:!0});var W8t=s(mU);Ivr=r(W8t,"TFAlbertModel"),W8t.forEach(t),Nvr=r(iqe," (ALBERT model)"),iqe.forEach(t),qvr=i(j),F9=n(j,"LI",{});var dqe=s(F9);sTe=n(dqe,"STRONG",{});var H8t=s(sTe);jvr=r(H8t,"bart"),H8t.forEach(t),Dvr=r(dqe," \u2014 "),gU=n(dqe,"A",{href:!0});var U8t=s(gU);Gvr=r(U8t,"TFBartModel"),U8t.forEach(t),Ovr=r(dqe," (BART model)"),dqe.forEach(t),Vvr=i(j),T9=n(j,"LI",{});var cqe=s(T9);lTe=n(cqe,"STRONG",{});var J8t=s(lTe);Xvr=r(J8t,"bert"),J8t.forEach(t),zvr=r(cqe," \u2014 "),hU=n(cqe,"A",{href:!0});var Y8t=s(hU);Qvr=r(Y8t,"TFBertModel"),Y8t.forEach(t),Wvr=r(cqe," (BERT model)"),cqe.forEach(t),Hvr=i(j),M9=n(j,"LI",{});var fqe=s(M9);iTe=n(fqe,"STRONG",{});var K8t=s(iTe);Uvr=r(K8t,"blenderbot"),K8t.forEach(t),Jvr=r(fqe," \u2014 "),pU=n(fqe,"A",{href:!0});var Z8t=s(pU);Yvr=r(Z8t,"TFBlenderbotModel"),Z8t.forEach(t),Kvr=r(fqe," (Blenderbot model)"),fqe.forEach(t),Zvr=i(j),E9=n(j,"LI",{});var mqe=s(E9);dTe=n(mqe,"STRONG",{});var ext=s(dTe);e0r=r(ext,"blenderbot-small"),ext.forEach(t),o0r=r(mqe," \u2014 "),_U=n(mqe,"A",{href:!0});var oxt=s(_U);r0r=r(oxt,"TFBlenderbotSmallModel"),oxt.forEach(t),t0r=r(mqe," (BlenderbotSmall model)"),mqe.forEach(t),a0r=i(j),C9=n(j,"LI",{});var gqe=s(C9);cTe=n(gqe,"STRONG",{});var rxt=s(cTe);n0r=r(rxt,"camembert"),rxt.forEach(t),s0r=r(gqe," \u2014 "),uU=n(gqe,"A",{href:!0});var txt=s(uU);l0r=r(txt,"TFCamembertModel"),txt.forEach(t),i0r=r(gqe," (CamemBERT model)"),gqe.forEach(t),d0r=i(j),w9=n(j,"LI",{});var hqe=s(w9);fTe=n(hqe,"STRONG",{});var axt=s(fTe);c0r=r(axt,"clip"),axt.forEach(t),f0r=r(hqe," \u2014 "),bU=n(hqe,"A",{href:!0});var nxt=s(bU);m0r=r(nxt,"TFCLIPModel"),nxt.forEach(t),g0r=r(hqe," (CLIP model)"),hqe.forEach(t),h0r=i(j),A9=n(j,"LI",{});var pqe=s(A9);mTe=n(pqe,"STRONG",{});var sxt=s(mTe);p0r=r(sxt,"convbert"),sxt.forEach(t),_0r=r(pqe," \u2014 "),vU=n(pqe,"A",{href:!0});var lxt=s(vU);u0r=r(lxt,"TFConvBertModel"),lxt.forEach(t),b0r=r(pqe," (ConvBERT model)"),pqe.forEach(t),v0r=i(j),L9=n(j,"LI",{});var _qe=s(L9);gTe=n(_qe,"STRONG",{});var ixt=s(gTe);F0r=r(ixt,"convnext"),ixt.forEach(t),T0r=r(_qe," \u2014 "),FU=n(_qe,"A",{href:!0});var dxt=s(FU);M0r=r(dxt,"TFConvNextModel"),dxt.forEach(t),E0r=r(_qe," (ConvNeXT model)"),_qe.forEach(t),C0r=i(j),y9=n(j,"LI",{});var uqe=s(y9);hTe=n(uqe,"STRONG",{});var cxt=s(hTe);w0r=r(cxt,"ctrl"),cxt.forEach(t),A0r=r(uqe," \u2014 "),TU=n(uqe,"A",{href:!0});var fxt=s(TU);L0r=r(fxt,"TFCTRLModel"),fxt.forEach(t),y0r=r(uqe," (CTRL model)"),uqe.forEach(t),x0r=i(j),x9=n(j,"LI",{});var bqe=s(x9);pTe=n(bqe,"STRONG",{});var mxt=s(pTe);$0r=r(mxt,"data2vec-vision"),mxt.forEach(t),k0r=r(bqe," \u2014 "),MU=n(bqe,"A",{href:!0});var gxt=s(MU);S0r=r(gxt,"TFData2VecVisionModel"),gxt.forEach(t),R0r=r(bqe," (Data2VecVision model)"),bqe.forEach(t),P0r=i(j),$9=n(j,"LI",{});var vqe=s($9);_Te=n(vqe,"STRONG",{});var hxt=s(_Te);B0r=r(hxt,"deberta"),hxt.forEach(t),I0r=r(vqe," \u2014 "),EU=n(vqe,"A",{href:!0});var pxt=s(EU);N0r=r(pxt,"TFDebertaModel"),pxt.forEach(t),q0r=r(vqe," (DeBERTa model)"),vqe.forEach(t),j0r=i(j),k9=n(j,"LI",{});var Fqe=s(k9);uTe=n(Fqe,"STRONG",{});var _xt=s(uTe);D0r=r(_xt,"deberta-v2"),_xt.forEach(t),G0r=r(Fqe," \u2014 "),CU=n(Fqe,"A",{href:!0});var uxt=s(CU);O0r=r(uxt,"TFDebertaV2Model"),uxt.forEach(t),V0r=r(Fqe," (DeBERTa-v2 model)"),Fqe.forEach(t),X0r=i(j),S9=n(j,"LI",{});var Tqe=s(S9);bTe=n(Tqe,"STRONG",{});var bxt=s(bTe);z0r=r(bxt,"deit"),bxt.forEach(t),Q0r=r(Tqe," \u2014 "),wU=n(Tqe,"A",{href:!0});var vxt=s(wU);W0r=r(vxt,"TFDeiTModel"),vxt.forEach(t),H0r=r(Tqe," (DeiT model)"),Tqe.forEach(t),U0r=i(j),R9=n(j,"LI",{});var Mqe=s(R9);vTe=n(Mqe,"STRONG",{});var Fxt=s(vTe);J0r=r(Fxt,"distilbert"),Fxt.forEach(t),Y0r=r(Mqe," \u2014 "),AU=n(Mqe,"A",{href:!0});var Txt=s(AU);K0r=r(Txt,"TFDistilBertModel"),Txt.forEach(t),Z0r=r(Mqe," (DistilBERT model)"),Mqe.forEach(t),eFr=i(j),P9=n(j,"LI",{});var Eqe=s(P9);FTe=n(Eqe,"STRONG",{});var Mxt=s(FTe);oFr=r(Mxt,"dpr"),Mxt.forEach(t),rFr=r(Eqe," \u2014 "),LU=n(Eqe,"A",{href:!0});var Ext=s(LU);tFr=r(Ext,"TFDPRQuestionEncoder"),Ext.forEach(t),aFr=r(Eqe," (DPR model)"),Eqe.forEach(t),nFr=i(j),B9=n(j,"LI",{});var Cqe=s(B9);TTe=n(Cqe,"STRONG",{});var Cxt=s(TTe);sFr=r(Cxt,"electra"),Cxt.forEach(t),lFr=r(Cqe," \u2014 "),yU=n(Cqe,"A",{href:!0});var wxt=s(yU);iFr=r(wxt,"TFElectraModel"),wxt.forEach(t),dFr=r(Cqe," (ELECTRA model)"),Cqe.forEach(t),cFr=i(j),I9=n(j,"LI",{});var wqe=s(I9);MTe=n(wqe,"STRONG",{});var Axt=s(MTe);fFr=r(Axt,"flaubert"),Axt.forEach(t),mFr=r(wqe," \u2014 "),xU=n(wqe,"A",{href:!0});var Lxt=s(xU);gFr=r(Lxt,"TFFlaubertModel"),Lxt.forEach(t),hFr=r(wqe," (FlauBERT model)"),wqe.forEach(t),pFr=i(j),Js=n(j,"LI",{});var BS=s(Js);ETe=n(BS,"STRONG",{});var yxt=s(ETe);_Fr=r(yxt,"funnel"),yxt.forEach(t),uFr=r(BS," \u2014 "),$U=n(BS,"A",{href:!0});var xxt=s($U);bFr=r(xxt,"TFFunnelModel"),xxt.forEach(t),vFr=r(BS," or "),kU=n(BS,"A",{href:!0});var $xt=s(kU);FFr=r($xt,"TFFunnelBaseModel"),$xt.forEach(t),TFr=r(BS," (Funnel Transformer model)"),BS.forEach(t),MFr=i(j),N9=n(j,"LI",{});var Aqe=s(N9);CTe=n(Aqe,"STRONG",{});var kxt=s(CTe);EFr=r(kxt,"gpt2"),kxt.forEach(t),CFr=r(Aqe," \u2014 "),SU=n(Aqe,"A",{href:!0});var Sxt=s(SU);wFr=r(Sxt,"TFGPT2Model"),Sxt.forEach(t),AFr=r(Aqe," (OpenAI GPT-2 model)"),Aqe.forEach(t),LFr=i(j),q9=n(j,"LI",{});var Lqe=s(q9);wTe=n(Lqe,"STRONG",{});var Rxt=s(wTe);yFr=r(Rxt,"gptj"),Rxt.forEach(t),xFr=r(Lqe," \u2014 "),RU=n(Lqe,"A",{href:!0});var Pxt=s(RU);$Fr=r(Pxt,"TFGPTJModel"),Pxt.forEach(t),kFr=r(Lqe," (GPT-J model)"),Lqe.forEach(t),SFr=i(j),j9=n(j,"LI",{});var yqe=s(j9);ATe=n(yqe,"STRONG",{});var Bxt=s(ATe);RFr=r(Bxt,"hubert"),Bxt.forEach(t),PFr=r(yqe," \u2014 "),PU=n(yqe,"A",{href:!0});var Ixt=s(PU);BFr=r(Ixt,"TFHubertModel"),Ixt.forEach(t),IFr=r(yqe," (Hubert model)"),yqe.forEach(t),NFr=i(j),D9=n(j,"LI",{});var xqe=s(D9);LTe=n(xqe,"STRONG",{});var Nxt=s(LTe);qFr=r(Nxt,"layoutlm"),Nxt.forEach(t),jFr=r(xqe," \u2014 "),BU=n(xqe,"A",{href:!0});var qxt=s(BU);DFr=r(qxt,"TFLayoutLMModel"),qxt.forEach(t),GFr=r(xqe," (LayoutLM model)"),xqe.forEach(t),OFr=i(j),G9=n(j,"LI",{});var $qe=s(G9);yTe=n($qe,"STRONG",{});var jxt=s(yTe);VFr=r(jxt,"led"),jxt.forEach(t),XFr=r($qe," \u2014 "),IU=n($qe,"A",{href:!0});var Dxt=s(IU);zFr=r(Dxt,"TFLEDModel"),Dxt.forEach(t),QFr=r($qe," (LED model)"),$qe.forEach(t),WFr=i(j),O9=n(j,"LI",{});var kqe=s(O9);xTe=n(kqe,"STRONG",{});var Gxt=s(xTe);HFr=r(Gxt,"longformer"),Gxt.forEach(t),UFr=r(kqe," \u2014 "),NU=n(kqe,"A",{href:!0});var Oxt=s(NU);JFr=r(Oxt,"TFLongformerModel"),Oxt.forEach(t),YFr=r(kqe," (Longformer model)"),kqe.forEach(t),KFr=i(j),V9=n(j,"LI",{});var Sqe=s(V9);$Te=n(Sqe,"STRONG",{});var Vxt=s($Te);ZFr=r(Vxt,"lxmert"),Vxt.forEach(t),eTr=r(Sqe," \u2014 "),qU=n(Sqe,"A",{href:!0});var Xxt=s(qU);oTr=r(Xxt,"TFLxmertModel"),Xxt.forEach(t),rTr=r(Sqe," (LXMERT model)"),Sqe.forEach(t),tTr=i(j),X9=n(j,"LI",{});var Rqe=s(X9);kTe=n(Rqe,"STRONG",{});var zxt=s(kTe);aTr=r(zxt,"marian"),zxt.forEach(t),nTr=r(Rqe," \u2014 "),jU=n(Rqe,"A",{href:!0});var Qxt=s(jU);sTr=r(Qxt,"TFMarianModel"),Qxt.forEach(t),lTr=r(Rqe," (Marian model)"),Rqe.forEach(t),iTr=i(j),z9=n(j,"LI",{});var Pqe=s(z9);STe=n(Pqe,"STRONG",{});var Wxt=s(STe);dTr=r(Wxt,"mbart"),Wxt.forEach(t),cTr=r(Pqe," \u2014 "),DU=n(Pqe,"A",{href:!0});var Hxt=s(DU);fTr=r(Hxt,"TFMBartModel"),Hxt.forEach(t),mTr=r(Pqe," (mBART model)"),Pqe.forEach(t),gTr=i(j),Q9=n(j,"LI",{});var Bqe=s(Q9);RTe=n(Bqe,"STRONG",{});var Uxt=s(RTe);hTr=r(Uxt,"mobilebert"),Uxt.forEach(t),pTr=r(Bqe," \u2014 "),GU=n(Bqe,"A",{href:!0});var Jxt=s(GU);_Tr=r(Jxt,"TFMobileBertModel"),Jxt.forEach(t),uTr=r(Bqe," (MobileBERT model)"),Bqe.forEach(t),bTr=i(j),W9=n(j,"LI",{});var Iqe=s(W9);PTe=n(Iqe,"STRONG",{});var Yxt=s(PTe);vTr=r(Yxt,"mpnet"),Yxt.forEach(t),FTr=r(Iqe," \u2014 "),OU=n(Iqe,"A",{href:!0});var Kxt=s(OU);TTr=r(Kxt,"TFMPNetModel"),Kxt.forEach(t),MTr=r(Iqe," (MPNet model)"),Iqe.forEach(t),ETr=i(j),H9=n(j,"LI",{});var Nqe=s(H9);BTe=n(Nqe,"STRONG",{});var Zxt=s(BTe);CTr=r(Zxt,"mt5"),Zxt.forEach(t),wTr=r(Nqe," \u2014 "),VU=n(Nqe,"A",{href:!0});var e$t=s(VU);ATr=r(e$t,"TFMT5Model"),e$t.forEach(t),LTr=r(Nqe," (MT5 model)"),Nqe.forEach(t),yTr=i(j),U9=n(j,"LI",{});var qqe=s(U9);ITe=n(qqe,"STRONG",{});var o$t=s(ITe);xTr=r(o$t,"openai-gpt"),o$t.forEach(t),$Tr=r(qqe," \u2014 "),XU=n(qqe,"A",{href:!0});var r$t=s(XU);kTr=r(r$t,"TFOpenAIGPTModel"),r$t.forEach(t),STr=r(qqe," (OpenAI GPT model)"),qqe.forEach(t),RTr=i(j),J9=n(j,"LI",{});var jqe=s(J9);NTe=n(jqe,"STRONG",{});var t$t=s(NTe);PTr=r(t$t,"opt"),t$t.forEach(t),BTr=r(jqe," \u2014 "),zU=n(jqe,"A",{href:!0});var a$t=s(zU);ITr=r(a$t,"TFOPTModel"),a$t.forEach(t),NTr=r(jqe," (OPT model)"),jqe.forEach(t),qTr=i(j),Y9=n(j,"LI",{});var Dqe=s(Y9);qTe=n(Dqe,"STRONG",{});var n$t=s(qTe);jTr=r(n$t,"pegasus"),n$t.forEach(t),DTr=r(Dqe," \u2014 "),QU=n(Dqe,"A",{href:!0});var s$t=s(QU);GTr=r(s$t,"TFPegasusModel"),s$t.forEach(t),OTr=r(Dqe," (Pegasus model)"),Dqe.forEach(t),VTr=i(j),K9=n(j,"LI",{});var Gqe=s(K9);jTe=n(Gqe,"STRONG",{});var l$t=s(jTe);XTr=r(l$t,"regnet"),l$t.forEach(t),zTr=r(Gqe," \u2014 "),WU=n(Gqe,"A",{href:!0});var i$t=s(WU);QTr=r(i$t,"TFRegNetModel"),i$t.forEach(t),WTr=r(Gqe," (RegNet model)"),Gqe.forEach(t),HTr=i(j),Z9=n(j,"LI",{});var Oqe=s(Z9);DTe=n(Oqe,"STRONG",{});var d$t=s(DTe);UTr=r(d$t,"rembert"),d$t.forEach(t),JTr=r(Oqe," \u2014 "),HU=n(Oqe,"A",{href:!0});var c$t=s(HU);YTr=r(c$t,"TFRemBertModel"),c$t.forEach(t),KTr=r(Oqe," (RemBERT model)"),Oqe.forEach(t),ZTr=i(j),eM=n(j,"LI",{});var Vqe=s(eM);GTe=n(Vqe,"STRONG",{});var f$t=s(GTe);e7r=r(f$t,"resnet"),f$t.forEach(t),o7r=r(Vqe," \u2014 "),UU=n(Vqe,"A",{href:!0});var m$t=s(UU);r7r=r(m$t,"TFResNetModel"),m$t.forEach(t),t7r=r(Vqe," (ResNet model)"),Vqe.forEach(t),a7r=i(j),oM=n(j,"LI",{});var Xqe=s(oM);OTe=n(Xqe,"STRONG",{});var g$t=s(OTe);n7r=r(g$t,"roberta"),g$t.forEach(t),s7r=r(Xqe," \u2014 "),JU=n(Xqe,"A",{href:!0});var h$t=s(JU);l7r=r(h$t,"TFRobertaModel"),h$t.forEach(t),i7r=r(Xqe," (RoBERTa model)"),Xqe.forEach(t),d7r=i(j),rM=n(j,"LI",{});var zqe=s(rM);VTe=n(zqe,"STRONG",{});var p$t=s(VTe);c7r=r(p$t,"roformer"),p$t.forEach(t),f7r=r(zqe," \u2014 "),YU=n(zqe,"A",{href:!0});var _$t=s(YU);m7r=r(_$t,"TFRoFormerModel"),_$t.forEach(t),g7r=r(zqe," (RoFormer model)"),zqe.forEach(t),h7r=i(j),tM=n(j,"LI",{});var Qqe=s(tM);XTe=n(Qqe,"STRONG",{});var u$t=s(XTe);p7r=r(u$t,"segformer"),u$t.forEach(t),_7r=r(Qqe," \u2014 "),KU=n(Qqe,"A",{href:!0});var b$t=s(KU);u7r=r(b$t,"TFSegformerModel"),b$t.forEach(t),b7r=r(Qqe," (SegFormer model)"),Qqe.forEach(t),v7r=i(j),aM=n(j,"LI",{});var Wqe=s(aM);zTe=n(Wqe,"STRONG",{});var v$t=s(zTe);F7r=r(v$t,"speech_to_text"),v$t.forEach(t),T7r=r(Wqe," \u2014 "),ZU=n(Wqe,"A",{href:!0});var F$t=s(ZU);M7r=r(F$t,"TFSpeech2TextModel"),F$t.forEach(t),E7r=r(Wqe," (Speech2Text model)"),Wqe.forEach(t),C7r=i(j),nM=n(j,"LI",{});var Hqe=s(nM);QTe=n(Hqe,"STRONG",{});var T$t=s(QTe);w7r=r(T$t,"swin"),T$t.forEach(t),A7r=r(Hqe," \u2014 "),eJ=n(Hqe,"A",{href:!0});var M$t=s(eJ);L7r=r(M$t,"TFSwinModel"),M$t.forEach(t),y7r=r(Hqe," (Swin Transformer model)"),Hqe.forEach(t),x7r=i(j),sM=n(j,"LI",{});var Uqe=s(sM);WTe=n(Uqe,"STRONG",{});var E$t=s(WTe);$7r=r(E$t,"t5"),E$t.forEach(t),k7r=r(Uqe," \u2014 "),oJ=n(Uqe,"A",{href:!0});var C$t=s(oJ);S7r=r(C$t,"TFT5Model"),C$t.forEach(t),R7r=r(Uqe," (T5 model)"),Uqe.forEach(t),P7r=i(j),lM=n(j,"LI",{});var Jqe=s(lM);HTe=n(Jqe,"STRONG",{});var w$t=s(HTe);B7r=r(w$t,"tapas"),w$t.forEach(t),I7r=r(Jqe," \u2014 "),rJ=n(Jqe,"A",{href:!0});var A$t=s(rJ);N7r=r(A$t,"TFTapasModel"),A$t.forEach(t),q7r=r(Jqe," (TAPAS model)"),Jqe.forEach(t),j7r=i(j),iM=n(j,"LI",{});var Yqe=s(iM);UTe=n(Yqe,"STRONG",{});var L$t=s(UTe);D7r=r(L$t,"transfo-xl"),L$t.forEach(t),G7r=r(Yqe," \u2014 "),tJ=n(Yqe,"A",{href:!0});var y$t=s(tJ);O7r=r(y$t,"TFTransfoXLModel"),y$t.forEach(t),V7r=r(Yqe," (Transformer-XL model)"),Yqe.forEach(t),X7r=i(j),dM=n(j,"LI",{});var Kqe=s(dM);JTe=n(Kqe,"STRONG",{});var x$t=s(JTe);z7r=r(x$t,"vit"),x$t.forEach(t),Q7r=r(Kqe," \u2014 "),aJ=n(Kqe,"A",{href:!0});var $$t=s(aJ);W7r=r($$t,"TFViTModel"),$$t.forEach(t),H7r=r(Kqe," (ViT model)"),Kqe.forEach(t),U7r=i(j),cM=n(j,"LI",{});var Zqe=s(cM);YTe=n(Zqe,"STRONG",{});var k$t=s(YTe);J7r=r(k$t,"vit_mae"),k$t.forEach(t),Y7r=r(Zqe," \u2014 "),nJ=n(Zqe,"A",{href:!0});var S$t=s(nJ);K7r=r(S$t,"TFViTMAEModel"),S$t.forEach(t),Z7r=r(Zqe," (ViTMAE model)"),Zqe.forEach(t),e9r=i(j),fM=n(j,"LI",{});var eje=s(fM);KTe=n(eje,"STRONG",{});var R$t=s(KTe);o9r=r(R$t,"wav2vec2"),R$t.forEach(t),r9r=r(eje," \u2014 "),sJ=n(eje,"A",{href:!0});var P$t=s(sJ);t9r=r(P$t,"TFWav2Vec2Model"),P$t.forEach(t),a9r=r(eje," (Wav2Vec2 model)"),eje.forEach(t),n9r=i(j),mM=n(j,"LI",{});var oje=s(mM);ZTe=n(oje,"STRONG",{});var B$t=s(ZTe);s9r=r(B$t,"xlm"),B$t.forEach(t),l9r=r(oje," \u2014 "),lJ=n(oje,"A",{href:!0});var I$t=s(lJ);i9r=r(I$t,"TFXLMModel"),I$t.forEach(t),d9r=r(oje," (XLM model)"),oje.forEach(t),c9r=i(j),gM=n(j,"LI",{});var rje=s(gM);e7e=n(rje,"STRONG",{});var N$t=s(e7e);f9r=r(N$t,"xlm-roberta"),N$t.forEach(t),m9r=r(rje," \u2014 "),iJ=n(rje,"A",{href:!0});var q$t=s(iJ);g9r=r(q$t,"TFXLMRobertaModel"),q$t.forEach(t),h9r=r(rje," (XLM-RoBERTa model)"),rje.forEach(t),p9r=i(j),hM=n(j,"LI",{});var tje=s(hM);o7e=n(tje,"STRONG",{});var j$t=s(o7e);_9r=r(j$t,"xlnet"),j$t.forEach(t),u9r=r(tje," \u2014 "),dJ=n(tje,"A",{href:!0});var D$t=s(dJ);b9r=r(D$t,"TFXLNetModel"),D$t.forEach(t),v9r=r(tje," (XLNet model)"),tje.forEach(t),j.forEach(t),F9r=i($l),T(pM.$$.fragment,$l),$l.forEach(t),xl.forEach(t),hze=i(f),dc=n(f,"H2",{class:!0});var MWe=s(dc);_M=n(MWe,"A",{id:!0,class:!0,href:!0});var G$t=s(_M);r7e=n(G$t,"SPAN",{});var O$t=s(r7e);T(Y8.$$.fragment,O$t),O$t.forEach(t),G$t.forEach(t),T9r=i(MWe),t7e=n(MWe,"SPAN",{});var V$t=s(t7e);M9r=r(V$t,"TFAutoModelForPreTraining"),V$t.forEach(t),MWe.forEach(t),pze=i(f),tr=n(f,"DIV",{class:!0});var kl=s(tr);T(K8.$$.fragment,kl),E9r=i(kl),cc=n(kl,"P",{});var Ste=s(cc);C9r=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),cJ=n(Ste,"A",{href:!0});var X$t=s(cJ);w9r=r(X$t,"from_pretrained()"),X$t.forEach(t),A9r=r(Ste," class method or the "),fJ=n(Ste,"A",{href:!0});var z$t=s(fJ);L9r=r(z$t,"from_config()"),z$t.forEach(t),y9r=r(Ste,` class
method.`),Ste.forEach(t),x9r=i(kl),Z8=n(kl,"P",{});var EWe=s(Z8);$9r=r(EWe,"This class cannot be instantiated directly using "),a7e=n(EWe,"CODE",{});var Q$t=s(a7e);k9r=r(Q$t,"__init__()"),Q$t.forEach(t),S9r=r(EWe," (throws an error)."),EWe.forEach(t),R9r=i(kl),Pt=n(kl,"DIV",{class:!0});var s6=s(Pt);T(ex.$$.fragment,s6),P9r=i(s6),n7e=n(s6,"P",{});var W$t=s(n7e);B9r=r(W$t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),W$t.forEach(t),I9r=i(s6),fc=n(s6,"P",{});var Rte=s(fc);N9r=r(Rte,`Note:
Loading a model from its configuration file does `),s7e=n(Rte,"STRONG",{});var H$t=s(s7e);q9r=r(H$t,"not"),H$t.forEach(t),j9r=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=n(Rte,"A",{href:!0});var U$t=s(mJ);D9r=r(U$t,"from_pretrained()"),U$t.forEach(t),G9r=r(Rte," to load the model weights."),Rte.forEach(t),O9r=i(s6),T(uM.$$.fragment,s6),s6.forEach(t),V9r=i(kl),kr=n(kl,"DIV",{class:!0});var Sl=s(kr);T(ox.$$.fragment,Sl),X9r=i(Sl),l7e=n(Sl,"P",{});var J$t=s(l7e);z9r=r(J$t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),J$t.forEach(t),Q9r=i(Sl),ln=n(Sl,"P",{});var l6=s(ln);W9r=r(l6,"The model class to instantiate is selected based on the "),i7e=n(l6,"CODE",{});var Y$t=s(i7e);H9r=r(Y$t,"model_type"),Y$t.forEach(t),U9r=r(l6,` property of the config object (either
passed as an argument or loaded from `),d7e=n(l6,"CODE",{});var K$t=s(d7e);J9r=r(K$t,"pretrained_model_name_or_path"),K$t.forEach(t),Y9r=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c7e=n(l6,"CODE",{});var Z$t=s(c7e);K9r=r(Z$t,"pretrained_model_name_or_path"),Z$t.forEach(t),Z9r=r(l6,":"),l6.forEach(t),eMr=i(Sl),se=n(Sl,"UL",{});var le=s(se);bM=n(le,"LI",{});var aje=s(bM);f7e=n(aje,"STRONG",{});var ekt=s(f7e);oMr=r(ekt,"albert"),ekt.forEach(t),rMr=r(aje," \u2014 "),gJ=n(aje,"A",{href:!0});var okt=s(gJ);tMr=r(okt,"TFAlbertForPreTraining"),okt.forEach(t),aMr=r(aje," (ALBERT model)"),aje.forEach(t),nMr=i(le),vM=n(le,"LI",{});var nje=s(vM);m7e=n(nje,"STRONG",{});var rkt=s(m7e);sMr=r(rkt,"bart"),rkt.forEach(t),lMr=r(nje," \u2014 "),hJ=n(nje,"A",{href:!0});var tkt=s(hJ);iMr=r(tkt,"TFBartForConditionalGeneration"),tkt.forEach(t),dMr=r(nje," (BART model)"),nje.forEach(t),cMr=i(le),FM=n(le,"LI",{});var sje=s(FM);g7e=n(sje,"STRONG",{});var akt=s(g7e);fMr=r(akt,"bert"),akt.forEach(t),mMr=r(sje," \u2014 "),pJ=n(sje,"A",{href:!0});var nkt=s(pJ);gMr=r(nkt,"TFBertForPreTraining"),nkt.forEach(t),hMr=r(sje," (BERT model)"),sje.forEach(t),pMr=i(le),TM=n(le,"LI",{});var lje=s(TM);h7e=n(lje,"STRONG",{});var skt=s(h7e);_Mr=r(skt,"camembert"),skt.forEach(t),uMr=r(lje," \u2014 "),_J=n(lje,"A",{href:!0});var lkt=s(_J);bMr=r(lkt,"TFCamembertForMaskedLM"),lkt.forEach(t),vMr=r(lje," (CamemBERT model)"),lje.forEach(t),FMr=i(le),MM=n(le,"LI",{});var ije=s(MM);p7e=n(ije,"STRONG",{});var ikt=s(p7e);TMr=r(ikt,"ctrl"),ikt.forEach(t),MMr=r(ije," \u2014 "),uJ=n(ije,"A",{href:!0});var dkt=s(uJ);EMr=r(dkt,"TFCTRLLMHeadModel"),dkt.forEach(t),CMr=r(ije," (CTRL model)"),ije.forEach(t),wMr=i(le),EM=n(le,"LI",{});var dje=s(EM);_7e=n(dje,"STRONG",{});var ckt=s(_7e);AMr=r(ckt,"distilbert"),ckt.forEach(t),LMr=r(dje," \u2014 "),bJ=n(dje,"A",{href:!0});var fkt=s(bJ);yMr=r(fkt,"TFDistilBertForMaskedLM"),fkt.forEach(t),xMr=r(dje," (DistilBERT model)"),dje.forEach(t),$Mr=i(le),CM=n(le,"LI",{});var cje=s(CM);u7e=n(cje,"STRONG",{});var mkt=s(u7e);kMr=r(mkt,"electra"),mkt.forEach(t),SMr=r(cje," \u2014 "),vJ=n(cje,"A",{href:!0});var gkt=s(vJ);RMr=r(gkt,"TFElectraForPreTraining"),gkt.forEach(t),PMr=r(cje," (ELECTRA model)"),cje.forEach(t),BMr=i(le),wM=n(le,"LI",{});var fje=s(wM);b7e=n(fje,"STRONG",{});var hkt=s(b7e);IMr=r(hkt,"flaubert"),hkt.forEach(t),NMr=r(fje," \u2014 "),FJ=n(fje,"A",{href:!0});var pkt=s(FJ);qMr=r(pkt,"TFFlaubertWithLMHeadModel"),pkt.forEach(t),jMr=r(fje," (FlauBERT model)"),fje.forEach(t),DMr=i(le),AM=n(le,"LI",{});var mje=s(AM);v7e=n(mje,"STRONG",{});var _kt=s(v7e);GMr=r(_kt,"funnel"),_kt.forEach(t),OMr=r(mje," \u2014 "),TJ=n(mje,"A",{href:!0});var ukt=s(TJ);VMr=r(ukt,"TFFunnelForPreTraining"),ukt.forEach(t),XMr=r(mje," (Funnel Transformer model)"),mje.forEach(t),zMr=i(le),LM=n(le,"LI",{});var gje=s(LM);F7e=n(gje,"STRONG",{});var bkt=s(F7e);QMr=r(bkt,"gpt2"),bkt.forEach(t),WMr=r(gje," \u2014 "),MJ=n(gje,"A",{href:!0});var vkt=s(MJ);HMr=r(vkt,"TFGPT2LMHeadModel"),vkt.forEach(t),UMr=r(gje," (OpenAI GPT-2 model)"),gje.forEach(t),JMr=i(le),yM=n(le,"LI",{});var hje=s(yM);T7e=n(hje,"STRONG",{});var Fkt=s(T7e);YMr=r(Fkt,"layoutlm"),Fkt.forEach(t),KMr=r(hje," \u2014 "),EJ=n(hje,"A",{href:!0});var Tkt=s(EJ);ZMr=r(Tkt,"TFLayoutLMForMaskedLM"),Tkt.forEach(t),e4r=r(hje," (LayoutLM model)"),hje.forEach(t),o4r=i(le),xM=n(le,"LI",{});var pje=s(xM);M7e=n(pje,"STRONG",{});var Mkt=s(M7e);r4r=r(Mkt,"lxmert"),Mkt.forEach(t),t4r=r(pje," \u2014 "),CJ=n(pje,"A",{href:!0});var Ekt=s(CJ);a4r=r(Ekt,"TFLxmertForPreTraining"),Ekt.forEach(t),n4r=r(pje," (LXMERT model)"),pje.forEach(t),s4r=i(le),$M=n(le,"LI",{});var _je=s($M);E7e=n(_je,"STRONG",{});var Ckt=s(E7e);l4r=r(Ckt,"mobilebert"),Ckt.forEach(t),i4r=r(_je," \u2014 "),wJ=n(_je,"A",{href:!0});var wkt=s(wJ);d4r=r(wkt,"TFMobileBertForPreTraining"),wkt.forEach(t),c4r=r(_je," (MobileBERT model)"),_je.forEach(t),f4r=i(le),kM=n(le,"LI",{});var uje=s(kM);C7e=n(uje,"STRONG",{});var Akt=s(C7e);m4r=r(Akt,"mpnet"),Akt.forEach(t),g4r=r(uje," \u2014 "),AJ=n(uje,"A",{href:!0});var Lkt=s(AJ);h4r=r(Lkt,"TFMPNetForMaskedLM"),Lkt.forEach(t),p4r=r(uje," (MPNet model)"),uje.forEach(t),_4r=i(le),SM=n(le,"LI",{});var bje=s(SM);w7e=n(bje,"STRONG",{});var ykt=s(w7e);u4r=r(ykt,"openai-gpt"),ykt.forEach(t),b4r=r(bje," \u2014 "),LJ=n(bje,"A",{href:!0});var xkt=s(LJ);v4r=r(xkt,"TFOpenAIGPTLMHeadModel"),xkt.forEach(t),F4r=r(bje," (OpenAI GPT model)"),bje.forEach(t),T4r=i(le),RM=n(le,"LI",{});var vje=s(RM);A7e=n(vje,"STRONG",{});var $kt=s(A7e);M4r=r($kt,"roberta"),$kt.forEach(t),E4r=r(vje," \u2014 "),yJ=n(vje,"A",{href:!0});var kkt=s(yJ);C4r=r(kkt,"TFRobertaForMaskedLM"),kkt.forEach(t),w4r=r(vje," (RoBERTa model)"),vje.forEach(t),A4r=i(le),PM=n(le,"LI",{});var Fje=s(PM);L7e=n(Fje,"STRONG",{});var Skt=s(L7e);L4r=r(Skt,"t5"),Skt.forEach(t),y4r=r(Fje," \u2014 "),xJ=n(Fje,"A",{href:!0});var Rkt=s(xJ);x4r=r(Rkt,"TFT5ForConditionalGeneration"),Rkt.forEach(t),$4r=r(Fje," (T5 model)"),Fje.forEach(t),k4r=i(le),BM=n(le,"LI",{});var Tje=s(BM);y7e=n(Tje,"STRONG",{});var Pkt=s(y7e);S4r=r(Pkt,"tapas"),Pkt.forEach(t),R4r=r(Tje," \u2014 "),$J=n(Tje,"A",{href:!0});var Bkt=s($J);P4r=r(Bkt,"TFTapasForMaskedLM"),Bkt.forEach(t),B4r=r(Tje," (TAPAS model)"),Tje.forEach(t),I4r=i(le),IM=n(le,"LI",{});var Mje=s(IM);x7e=n(Mje,"STRONG",{});var Ikt=s(x7e);N4r=r(Ikt,"transfo-xl"),Ikt.forEach(t),q4r=r(Mje," \u2014 "),kJ=n(Mje,"A",{href:!0});var Nkt=s(kJ);j4r=r(Nkt,"TFTransfoXLLMHeadModel"),Nkt.forEach(t),D4r=r(Mje," (Transformer-XL model)"),Mje.forEach(t),G4r=i(le),NM=n(le,"LI",{});var Eje=s(NM);$7e=n(Eje,"STRONG",{});var qkt=s($7e);O4r=r(qkt,"vit_mae"),qkt.forEach(t),V4r=r(Eje," \u2014 "),SJ=n(Eje,"A",{href:!0});var jkt=s(SJ);X4r=r(jkt,"TFViTMAEForPreTraining"),jkt.forEach(t),z4r=r(Eje," (ViTMAE model)"),Eje.forEach(t),Q4r=i(le),qM=n(le,"LI",{});var Cje=s(qM);k7e=n(Cje,"STRONG",{});var Dkt=s(k7e);W4r=r(Dkt,"xlm"),Dkt.forEach(t),H4r=r(Cje," \u2014 "),RJ=n(Cje,"A",{href:!0});var Gkt=s(RJ);U4r=r(Gkt,"TFXLMWithLMHeadModel"),Gkt.forEach(t),J4r=r(Cje," (XLM model)"),Cje.forEach(t),Y4r=i(le),jM=n(le,"LI",{});var wje=s(jM);S7e=n(wje,"STRONG",{});var Okt=s(S7e);K4r=r(Okt,"xlm-roberta"),Okt.forEach(t),Z4r=r(wje," \u2014 "),PJ=n(wje,"A",{href:!0});var Vkt=s(PJ);eEr=r(Vkt,"TFXLMRobertaForMaskedLM"),Vkt.forEach(t),oEr=r(wje," (XLM-RoBERTa model)"),wje.forEach(t),rEr=i(le),DM=n(le,"LI",{});var Aje=s(DM);R7e=n(Aje,"STRONG",{});var Xkt=s(R7e);tEr=r(Xkt,"xlnet"),Xkt.forEach(t),aEr=r(Aje," \u2014 "),BJ=n(Aje,"A",{href:!0});var zkt=s(BJ);nEr=r(zkt,"TFXLNetLMHeadModel"),zkt.forEach(t),sEr=r(Aje," (XLNet model)"),Aje.forEach(t),le.forEach(t),lEr=i(Sl),T(GM.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),_ze=i(f),mc=n(f,"H2",{class:!0});var CWe=s(mc);OM=n(CWe,"A",{id:!0,class:!0,href:!0});var Qkt=s(OM);P7e=n(Qkt,"SPAN",{});var Wkt=s(P7e);T(rx.$$.fragment,Wkt),Wkt.forEach(t),Qkt.forEach(t),iEr=i(CWe),B7e=n(CWe,"SPAN",{});var Hkt=s(B7e);dEr=r(Hkt,"TFAutoModelForCausalLM"),Hkt.forEach(t),CWe.forEach(t),uze=i(f),ar=n(f,"DIV",{class:!0});var Rl=s(ar);T(tx.$$.fragment,Rl),cEr=i(Rl),gc=n(Rl,"P",{});var Pte=s(gc);fEr=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IJ=n(Pte,"A",{href:!0});var Ukt=s(IJ);mEr=r(Ukt,"from_pretrained()"),Ukt.forEach(t),gEr=r(Pte," class method or the "),NJ=n(Pte,"A",{href:!0});var Jkt=s(NJ);hEr=r(Jkt,"from_config()"),Jkt.forEach(t),pEr=r(Pte,` class
method.`),Pte.forEach(t),_Er=i(Rl),ax=n(Rl,"P",{});var wWe=s(ax);uEr=r(wWe,"This class cannot be instantiated directly using "),I7e=n(wWe,"CODE",{});var Ykt=s(I7e);bEr=r(Ykt,"__init__()"),Ykt.forEach(t),vEr=r(wWe," (throws an error)."),wWe.forEach(t),FEr=i(Rl),Bt=n(Rl,"DIV",{class:!0});var i6=s(Bt);T(nx.$$.fragment,i6),TEr=i(i6),N7e=n(i6,"P",{});var Kkt=s(N7e);MEr=r(Kkt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Kkt.forEach(t),EEr=i(i6),hc=n(i6,"P",{});var Bte=s(hc);CEr=r(Bte,`Note:
Loading a model from its configuration file does `),q7e=n(Bte,"STRONG",{});var Zkt=s(q7e);wEr=r(Zkt,"not"),Zkt.forEach(t),AEr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=n(Bte,"A",{href:!0});var eSt=s(qJ);LEr=r(eSt,"from_pretrained()"),eSt.forEach(t),yEr=r(Bte," to load the model weights."),Bte.forEach(t),xEr=i(i6),T(VM.$$.fragment,i6),i6.forEach(t),$Er=i(Rl),Sr=n(Rl,"DIV",{class:!0});var Pl=s(Sr);T(sx.$$.fragment,Pl),kEr=i(Pl),j7e=n(Pl,"P",{});var oSt=s(j7e);SEr=r(oSt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),oSt.forEach(t),REr=i(Pl),dn=n(Pl,"P",{});var d6=s(dn);PEr=r(d6,"The model class to instantiate is selected based on the "),D7e=n(d6,"CODE",{});var rSt=s(D7e);BEr=r(rSt,"model_type"),rSt.forEach(t),IEr=r(d6,` property of the config object (either
passed as an argument or loaded from `),G7e=n(d6,"CODE",{});var tSt=s(G7e);NEr=r(tSt,"pretrained_model_name_or_path"),tSt.forEach(t),qEr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=n(d6,"CODE",{});var aSt=s(O7e);jEr=r(aSt,"pretrained_model_name_or_path"),aSt.forEach(t),DEr=r(d6,":"),d6.forEach(t),GEr=i(Pl),Me=n(Pl,"UL",{});var Ce=s(Me);XM=n(Ce,"LI",{});var Lje=s(XM);V7e=n(Lje,"STRONG",{});var nSt=s(V7e);OEr=r(nSt,"bert"),nSt.forEach(t),VEr=r(Lje," \u2014 "),jJ=n(Lje,"A",{href:!0});var sSt=s(jJ);XEr=r(sSt,"TFBertLMHeadModel"),sSt.forEach(t),zEr=r(Lje," (BERT model)"),Lje.forEach(t),QEr=i(Ce),zM=n(Ce,"LI",{});var yje=s(zM);X7e=n(yje,"STRONG",{});var lSt=s(X7e);WEr=r(lSt,"camembert"),lSt.forEach(t),HEr=r(yje," \u2014 "),DJ=n(yje,"A",{href:!0});var iSt=s(DJ);UEr=r(iSt,"TFCamembertForCausalLM"),iSt.forEach(t),JEr=r(yje," (CamemBERT model)"),yje.forEach(t),YEr=i(Ce),QM=n(Ce,"LI",{});var xje=s(QM);z7e=n(xje,"STRONG",{});var dSt=s(z7e);KEr=r(dSt,"ctrl"),dSt.forEach(t),ZEr=r(xje," \u2014 "),GJ=n(xje,"A",{href:!0});var cSt=s(GJ);eCr=r(cSt,"TFCTRLLMHeadModel"),cSt.forEach(t),oCr=r(xje," (CTRL model)"),xje.forEach(t),rCr=i(Ce),WM=n(Ce,"LI",{});var $je=s(WM);Q7e=n($je,"STRONG",{});var fSt=s(Q7e);tCr=r(fSt,"gpt2"),fSt.forEach(t),aCr=r($je," \u2014 "),OJ=n($je,"A",{href:!0});var mSt=s(OJ);nCr=r(mSt,"TFGPT2LMHeadModel"),mSt.forEach(t),sCr=r($je," (OpenAI GPT-2 model)"),$je.forEach(t),lCr=i(Ce),HM=n(Ce,"LI",{});var kje=s(HM);W7e=n(kje,"STRONG",{});var gSt=s(W7e);iCr=r(gSt,"gptj"),gSt.forEach(t),dCr=r(kje," \u2014 "),VJ=n(kje,"A",{href:!0});var hSt=s(VJ);cCr=r(hSt,"TFGPTJForCausalLM"),hSt.forEach(t),fCr=r(kje," (GPT-J model)"),kje.forEach(t),mCr=i(Ce),UM=n(Ce,"LI",{});var Sje=s(UM);H7e=n(Sje,"STRONG",{});var pSt=s(H7e);gCr=r(pSt,"openai-gpt"),pSt.forEach(t),hCr=r(Sje," \u2014 "),XJ=n(Sje,"A",{href:!0});var _St=s(XJ);pCr=r(_St,"TFOpenAIGPTLMHeadModel"),_St.forEach(t),_Cr=r(Sje," (OpenAI GPT model)"),Sje.forEach(t),uCr=i(Ce),JM=n(Ce,"LI",{});var Rje=s(JM);U7e=n(Rje,"STRONG",{});var uSt=s(U7e);bCr=r(uSt,"opt"),uSt.forEach(t),vCr=r(Rje," \u2014 "),zJ=n(Rje,"A",{href:!0});var bSt=s(zJ);FCr=r(bSt,"TFOPTForCausalLM"),bSt.forEach(t),TCr=r(Rje," (OPT model)"),Rje.forEach(t),MCr=i(Ce),YM=n(Ce,"LI",{});var Pje=s(YM);J7e=n(Pje,"STRONG",{});var vSt=s(J7e);ECr=r(vSt,"rembert"),vSt.forEach(t),CCr=r(Pje," \u2014 "),QJ=n(Pje,"A",{href:!0});var FSt=s(QJ);wCr=r(FSt,"TFRemBertForCausalLM"),FSt.forEach(t),ACr=r(Pje," (RemBERT model)"),Pje.forEach(t),LCr=i(Ce),KM=n(Ce,"LI",{});var Bje=s(KM);Y7e=n(Bje,"STRONG",{});var TSt=s(Y7e);yCr=r(TSt,"roberta"),TSt.forEach(t),xCr=r(Bje," \u2014 "),WJ=n(Bje,"A",{href:!0});var MSt=s(WJ);$Cr=r(MSt,"TFRobertaForCausalLM"),MSt.forEach(t),kCr=r(Bje," (RoBERTa model)"),Bje.forEach(t),SCr=i(Ce),ZM=n(Ce,"LI",{});var Ije=s(ZM);K7e=n(Ije,"STRONG",{});var ESt=s(K7e);RCr=r(ESt,"roformer"),ESt.forEach(t),PCr=r(Ije," \u2014 "),HJ=n(Ije,"A",{href:!0});var CSt=s(HJ);BCr=r(CSt,"TFRoFormerForCausalLM"),CSt.forEach(t),ICr=r(Ije," (RoFormer model)"),Ije.forEach(t),NCr=i(Ce),e4=n(Ce,"LI",{});var Nje=s(e4);Z7e=n(Nje,"STRONG",{});var wSt=s(Z7e);qCr=r(wSt,"transfo-xl"),wSt.forEach(t),jCr=r(Nje," \u2014 "),UJ=n(Nje,"A",{href:!0});var ASt=s(UJ);DCr=r(ASt,"TFTransfoXLLMHeadModel"),ASt.forEach(t),GCr=r(Nje," (Transformer-XL model)"),Nje.forEach(t),OCr=i(Ce),o4=n(Ce,"LI",{});var qje=s(o4);e9e=n(qje,"STRONG",{});var LSt=s(e9e);VCr=r(LSt,"xlm"),LSt.forEach(t),XCr=r(qje," \u2014 "),JJ=n(qje,"A",{href:!0});var ySt=s(JJ);zCr=r(ySt,"TFXLMWithLMHeadModel"),ySt.forEach(t),QCr=r(qje," (XLM model)"),qje.forEach(t),WCr=i(Ce),r4=n(Ce,"LI",{});var jje=s(r4);o9e=n(jje,"STRONG",{});var xSt=s(o9e);HCr=r(xSt,"xlnet"),xSt.forEach(t),UCr=r(jje," \u2014 "),YJ=n(jje,"A",{href:!0});var $St=s(YJ);JCr=r($St,"TFXLNetLMHeadModel"),$St.forEach(t),YCr=r(jje," (XLNet model)"),jje.forEach(t),Ce.forEach(t),KCr=i(Pl),T(t4.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),bze=i(f),pc=n(f,"H2",{class:!0});var AWe=s(pc);a4=n(AWe,"A",{id:!0,class:!0,href:!0});var kSt=s(a4);r9e=n(kSt,"SPAN",{});var SSt=s(r9e);T(lx.$$.fragment,SSt),SSt.forEach(t),kSt.forEach(t),ZCr=i(AWe),t9e=n(AWe,"SPAN",{});var RSt=s(t9e);e3r=r(RSt,"TFAutoModelForImageClassification"),RSt.forEach(t),AWe.forEach(t),vze=i(f),nr=n(f,"DIV",{class:!0});var Bl=s(nr);T(ix.$$.fragment,Bl),o3r=i(Bl),_c=n(Bl,"P",{});var Ite=s(_c);r3r=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KJ=n(Ite,"A",{href:!0});var PSt=s(KJ);t3r=r(PSt,"from_pretrained()"),PSt.forEach(t),a3r=r(Ite," class method or the "),ZJ=n(Ite,"A",{href:!0});var BSt=s(ZJ);n3r=r(BSt,"from_config()"),BSt.forEach(t),s3r=r(Ite,` class
method.`),Ite.forEach(t),l3r=i(Bl),dx=n(Bl,"P",{});var LWe=s(dx);i3r=r(LWe,"This class cannot be instantiated directly using "),a9e=n(LWe,"CODE",{});var ISt=s(a9e);d3r=r(ISt,"__init__()"),ISt.forEach(t),c3r=r(LWe," (throws an error)."),LWe.forEach(t),f3r=i(Bl),It=n(Bl,"DIV",{class:!0});var c6=s(It);T(cx.$$.fragment,c6),m3r=i(c6),n9e=n(c6,"P",{});var NSt=s(n9e);g3r=r(NSt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),NSt.forEach(t),h3r=i(c6),uc=n(c6,"P",{});var Nte=s(uc);p3r=r(Nte,`Note:
Loading a model from its configuration file does `),s9e=n(Nte,"STRONG",{});var qSt=s(s9e);_3r=r(qSt,"not"),qSt.forEach(t),u3r=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=n(Nte,"A",{href:!0});var jSt=s(eY);b3r=r(jSt,"from_pretrained()"),jSt.forEach(t),v3r=r(Nte," to load the model weights."),Nte.forEach(t),F3r=i(c6),T(n4.$$.fragment,c6),c6.forEach(t),T3r=i(Bl),Rr=n(Bl,"DIV",{class:!0});var Il=s(Rr);T(fx.$$.fragment,Il),M3r=i(Il),l9e=n(Il,"P",{});var DSt=s(l9e);E3r=r(DSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),DSt.forEach(t),C3r=i(Il),cn=n(Il,"P",{});var f6=s(cn);w3r=r(f6,"The model class to instantiate is selected based on the "),i9e=n(f6,"CODE",{});var GSt=s(i9e);A3r=r(GSt,"model_type"),GSt.forEach(t),L3r=r(f6,` property of the config object (either
passed as an argument or loaded from `),d9e=n(f6,"CODE",{});var OSt=s(d9e);y3r=r(OSt,"pretrained_model_name_or_path"),OSt.forEach(t),x3r=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c9e=n(f6,"CODE",{});var VSt=s(c9e);$3r=r(VSt,"pretrained_model_name_or_path"),VSt.forEach(t),k3r=r(f6,":"),f6.forEach(t),S3r=i(Il),Ve=n(Il,"UL",{});var Mo=s(Ve);s4=n(Mo,"LI",{});var Dje=s(s4);f9e=n(Dje,"STRONG",{});var XSt=s(f9e);R3r=r(XSt,"convnext"),XSt.forEach(t),P3r=r(Dje," \u2014 "),oY=n(Dje,"A",{href:!0});var zSt=s(oY);B3r=r(zSt,"TFConvNextForImageClassification"),zSt.forEach(t),I3r=r(Dje," (ConvNeXT model)"),Dje.forEach(t),N3r=i(Mo),l4=n(Mo,"LI",{});var Gje=s(l4);m9e=n(Gje,"STRONG",{});var QSt=s(m9e);q3r=r(QSt,"data2vec-vision"),QSt.forEach(t),j3r=r(Gje," \u2014 "),rY=n(Gje,"A",{href:!0});var WSt=s(rY);D3r=r(WSt,"TFData2VecVisionForImageClassification"),WSt.forEach(t),G3r=r(Gje," (Data2VecVision model)"),Gje.forEach(t),O3r=i(Mo),Ys=n(Mo,"LI",{});var IS=s(Ys);g9e=n(IS,"STRONG",{});var HSt=s(g9e);V3r=r(HSt,"deit"),HSt.forEach(t),X3r=r(IS," \u2014 "),tY=n(IS,"A",{href:!0});var USt=s(tY);z3r=r(USt,"TFDeiTForImageClassification"),USt.forEach(t),Q3r=r(IS," or "),aY=n(IS,"A",{href:!0});var JSt=s(aY);W3r=r(JSt,"TFDeiTForImageClassificationWithTeacher"),JSt.forEach(t),H3r=r(IS," (DeiT model)"),IS.forEach(t),U3r=i(Mo),i4=n(Mo,"LI",{});var Oje=s(i4);h9e=n(Oje,"STRONG",{});var YSt=s(h9e);J3r=r(YSt,"regnet"),YSt.forEach(t),Y3r=r(Oje," \u2014 "),nY=n(Oje,"A",{href:!0});var KSt=s(nY);K3r=r(KSt,"TFRegNetForImageClassification"),KSt.forEach(t),Z3r=r(Oje," (RegNet model)"),Oje.forEach(t),e5r=i(Mo),d4=n(Mo,"LI",{});var Vje=s(d4);p9e=n(Vje,"STRONG",{});var ZSt=s(p9e);o5r=r(ZSt,"resnet"),ZSt.forEach(t),r5r=r(Vje," \u2014 "),sY=n(Vje,"A",{href:!0});var eRt=s(sY);t5r=r(eRt,"TFResNetForImageClassification"),eRt.forEach(t),a5r=r(Vje," (ResNet model)"),Vje.forEach(t),n5r=i(Mo),c4=n(Mo,"LI",{});var Xje=s(c4);_9e=n(Xje,"STRONG",{});var oRt=s(_9e);s5r=r(oRt,"segformer"),oRt.forEach(t),l5r=r(Xje," \u2014 "),lY=n(Xje,"A",{href:!0});var rRt=s(lY);i5r=r(rRt,"TFSegformerForImageClassification"),rRt.forEach(t),d5r=r(Xje," (SegFormer model)"),Xje.forEach(t),c5r=i(Mo),f4=n(Mo,"LI",{});var zje=s(f4);u9e=n(zje,"STRONG",{});var tRt=s(u9e);f5r=r(tRt,"swin"),tRt.forEach(t),m5r=r(zje," \u2014 "),iY=n(zje,"A",{href:!0});var aRt=s(iY);g5r=r(aRt,"TFSwinForImageClassification"),aRt.forEach(t),h5r=r(zje," (Swin Transformer model)"),zje.forEach(t),p5r=i(Mo),m4=n(Mo,"LI",{});var Qje=s(m4);b9e=n(Qje,"STRONG",{});var nRt=s(b9e);_5r=r(nRt,"vit"),nRt.forEach(t),u5r=r(Qje," \u2014 "),dY=n(Qje,"A",{href:!0});var sRt=s(dY);b5r=r(sRt,"TFViTForImageClassification"),sRt.forEach(t),v5r=r(Qje," (ViT model)"),Qje.forEach(t),Mo.forEach(t),F5r=i(Il),T(g4.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),Fze=i(f),bc=n(f,"H2",{class:!0});var yWe=s(bc);h4=n(yWe,"A",{id:!0,class:!0,href:!0});var lRt=s(h4);v9e=n(lRt,"SPAN",{});var iRt=s(v9e);T(mx.$$.fragment,iRt),iRt.forEach(t),lRt.forEach(t),T5r=i(yWe),F9e=n(yWe,"SPAN",{});var dRt=s(F9e);M5r=r(dRt,"TFAutoModelForMaskedLM"),dRt.forEach(t),yWe.forEach(t),Tze=i(f),sr=n(f,"DIV",{class:!0});var Nl=s(sr);T(gx.$$.fragment,Nl),E5r=i(Nl),vc=n(Nl,"P",{});var qte=s(vc);C5r=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cY=n(qte,"A",{href:!0});var cRt=s(cY);w5r=r(cRt,"from_pretrained()"),cRt.forEach(t),A5r=r(qte," class method or the "),fY=n(qte,"A",{href:!0});var fRt=s(fY);L5r=r(fRt,"from_config()"),fRt.forEach(t),y5r=r(qte,` class
method.`),qte.forEach(t),x5r=i(Nl),hx=n(Nl,"P",{});var xWe=s(hx);$5r=r(xWe,"This class cannot be instantiated directly using "),T9e=n(xWe,"CODE",{});var mRt=s(T9e);k5r=r(mRt,"__init__()"),mRt.forEach(t),S5r=r(xWe," (throws an error)."),xWe.forEach(t),R5r=i(Nl),Nt=n(Nl,"DIV",{class:!0});var m6=s(Nt);T(px.$$.fragment,m6),P5r=i(m6),M9e=n(m6,"P",{});var gRt=s(M9e);B5r=r(gRt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gRt.forEach(t),I5r=i(m6),Fc=n(m6,"P",{});var jte=s(Fc);N5r=r(jte,`Note:
Loading a model from its configuration file does `),E9e=n(jte,"STRONG",{});var hRt=s(E9e);q5r=r(hRt,"not"),hRt.forEach(t),j5r=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=n(jte,"A",{href:!0});var pRt=s(mY);D5r=r(pRt,"from_pretrained()"),pRt.forEach(t),G5r=r(jte," to load the model weights."),jte.forEach(t),O5r=i(m6),T(p4.$$.fragment,m6),m6.forEach(t),V5r=i(Nl),Pr=n(Nl,"DIV",{class:!0});var ql=s(Pr);T(_x.$$.fragment,ql),X5r=i(ql),C9e=n(ql,"P",{});var _Rt=s(C9e);z5r=r(_Rt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_Rt.forEach(t),Q5r=i(ql),fn=n(ql,"P",{});var g6=s(fn);W5r=r(g6,"The model class to instantiate is selected based on the "),w9e=n(g6,"CODE",{});var uRt=s(w9e);H5r=r(uRt,"model_type"),uRt.forEach(t),U5r=r(g6,` property of the config object (either
passed as an argument or loaded from `),A9e=n(g6,"CODE",{});var bRt=s(A9e);J5r=r(bRt,"pretrained_model_name_or_path"),bRt.forEach(t),Y5r=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L9e=n(g6,"CODE",{});var vRt=s(L9e);K5r=r(vRt,"pretrained_model_name_or_path"),vRt.forEach(t),Z5r=r(g6,":"),g6.forEach(t),ewr=i(ql),ie=n(ql,"UL",{});var fe=s(ie);_4=n(fe,"LI",{});var Wje=s(_4);y9e=n(Wje,"STRONG",{});var FRt=s(y9e);owr=r(FRt,"albert"),FRt.forEach(t),rwr=r(Wje," \u2014 "),gY=n(Wje,"A",{href:!0});var TRt=s(gY);twr=r(TRt,"TFAlbertForMaskedLM"),TRt.forEach(t),awr=r(Wje," (ALBERT model)"),Wje.forEach(t),nwr=i(fe),u4=n(fe,"LI",{});var Hje=s(u4);x9e=n(Hje,"STRONG",{});var MRt=s(x9e);swr=r(MRt,"bert"),MRt.forEach(t),lwr=r(Hje," \u2014 "),hY=n(Hje,"A",{href:!0});var ERt=s(hY);iwr=r(ERt,"TFBertForMaskedLM"),ERt.forEach(t),dwr=r(Hje," (BERT model)"),Hje.forEach(t),cwr=i(fe),b4=n(fe,"LI",{});var Uje=s(b4);$9e=n(Uje,"STRONG",{});var CRt=s($9e);fwr=r(CRt,"camembert"),CRt.forEach(t),mwr=r(Uje," \u2014 "),pY=n(Uje,"A",{href:!0});var wRt=s(pY);gwr=r(wRt,"TFCamembertForMaskedLM"),wRt.forEach(t),hwr=r(Uje," (CamemBERT model)"),Uje.forEach(t),pwr=i(fe),v4=n(fe,"LI",{});var Jje=s(v4);k9e=n(Jje,"STRONG",{});var ARt=s(k9e);_wr=r(ARt,"convbert"),ARt.forEach(t),uwr=r(Jje," \u2014 "),_Y=n(Jje,"A",{href:!0});var LRt=s(_Y);bwr=r(LRt,"TFConvBertForMaskedLM"),LRt.forEach(t),vwr=r(Jje," (ConvBERT model)"),Jje.forEach(t),Fwr=i(fe),F4=n(fe,"LI",{});var Yje=s(F4);S9e=n(Yje,"STRONG",{});var yRt=s(S9e);Twr=r(yRt,"deberta"),yRt.forEach(t),Mwr=r(Yje," \u2014 "),uY=n(Yje,"A",{href:!0});var xRt=s(uY);Ewr=r(xRt,"TFDebertaForMaskedLM"),xRt.forEach(t),Cwr=r(Yje," (DeBERTa model)"),Yje.forEach(t),wwr=i(fe),T4=n(fe,"LI",{});var Kje=s(T4);R9e=n(Kje,"STRONG",{});var $Rt=s(R9e);Awr=r($Rt,"deberta-v2"),$Rt.forEach(t),Lwr=r(Kje," \u2014 "),bY=n(Kje,"A",{href:!0});var kRt=s(bY);ywr=r(kRt,"TFDebertaV2ForMaskedLM"),kRt.forEach(t),xwr=r(Kje," (DeBERTa-v2 model)"),Kje.forEach(t),$wr=i(fe),M4=n(fe,"LI",{});var Zje=s(M4);P9e=n(Zje,"STRONG",{});var SRt=s(P9e);kwr=r(SRt,"distilbert"),SRt.forEach(t),Swr=r(Zje," \u2014 "),vY=n(Zje,"A",{href:!0});var RRt=s(vY);Rwr=r(RRt,"TFDistilBertForMaskedLM"),RRt.forEach(t),Pwr=r(Zje," (DistilBERT model)"),Zje.forEach(t),Bwr=i(fe),E4=n(fe,"LI",{});var eDe=s(E4);B9e=n(eDe,"STRONG",{});var PRt=s(B9e);Iwr=r(PRt,"electra"),PRt.forEach(t),Nwr=r(eDe," \u2014 "),FY=n(eDe,"A",{href:!0});var BRt=s(FY);qwr=r(BRt,"TFElectraForMaskedLM"),BRt.forEach(t),jwr=r(eDe," (ELECTRA model)"),eDe.forEach(t),Dwr=i(fe),C4=n(fe,"LI",{});var oDe=s(C4);I9e=n(oDe,"STRONG",{});var IRt=s(I9e);Gwr=r(IRt,"flaubert"),IRt.forEach(t),Owr=r(oDe," \u2014 "),TY=n(oDe,"A",{href:!0});var NRt=s(TY);Vwr=r(NRt,"TFFlaubertWithLMHeadModel"),NRt.forEach(t),Xwr=r(oDe," (FlauBERT model)"),oDe.forEach(t),zwr=i(fe),w4=n(fe,"LI",{});var rDe=s(w4);N9e=n(rDe,"STRONG",{});var qRt=s(N9e);Qwr=r(qRt,"funnel"),qRt.forEach(t),Wwr=r(rDe," \u2014 "),MY=n(rDe,"A",{href:!0});var jRt=s(MY);Hwr=r(jRt,"TFFunnelForMaskedLM"),jRt.forEach(t),Uwr=r(rDe," (Funnel Transformer model)"),rDe.forEach(t),Jwr=i(fe),A4=n(fe,"LI",{});var tDe=s(A4);q9e=n(tDe,"STRONG",{});var DRt=s(q9e);Ywr=r(DRt,"layoutlm"),DRt.forEach(t),Kwr=r(tDe," \u2014 "),EY=n(tDe,"A",{href:!0});var GRt=s(EY);Zwr=r(GRt,"TFLayoutLMForMaskedLM"),GRt.forEach(t),eAr=r(tDe," (LayoutLM model)"),tDe.forEach(t),oAr=i(fe),L4=n(fe,"LI",{});var aDe=s(L4);j9e=n(aDe,"STRONG",{});var ORt=s(j9e);rAr=r(ORt,"longformer"),ORt.forEach(t),tAr=r(aDe," \u2014 "),CY=n(aDe,"A",{href:!0});var VRt=s(CY);aAr=r(VRt,"TFLongformerForMaskedLM"),VRt.forEach(t),nAr=r(aDe," (Longformer model)"),aDe.forEach(t),sAr=i(fe),y4=n(fe,"LI",{});var nDe=s(y4);D9e=n(nDe,"STRONG",{});var XRt=s(D9e);lAr=r(XRt,"mobilebert"),XRt.forEach(t),iAr=r(nDe," \u2014 "),wY=n(nDe,"A",{href:!0});var zRt=s(wY);dAr=r(zRt,"TFMobileBertForMaskedLM"),zRt.forEach(t),cAr=r(nDe," (MobileBERT model)"),nDe.forEach(t),fAr=i(fe),x4=n(fe,"LI",{});var sDe=s(x4);G9e=n(sDe,"STRONG",{});var QRt=s(G9e);mAr=r(QRt,"mpnet"),QRt.forEach(t),gAr=r(sDe," \u2014 "),AY=n(sDe,"A",{href:!0});var WRt=s(AY);hAr=r(WRt,"TFMPNetForMaskedLM"),WRt.forEach(t),pAr=r(sDe," (MPNet model)"),sDe.forEach(t),_Ar=i(fe),$4=n(fe,"LI",{});var lDe=s($4);O9e=n(lDe,"STRONG",{});var HRt=s(O9e);uAr=r(HRt,"rembert"),HRt.forEach(t),bAr=r(lDe," \u2014 "),LY=n(lDe,"A",{href:!0});var URt=s(LY);vAr=r(URt,"TFRemBertForMaskedLM"),URt.forEach(t),FAr=r(lDe," (RemBERT model)"),lDe.forEach(t),TAr=i(fe),k4=n(fe,"LI",{});var iDe=s(k4);V9e=n(iDe,"STRONG",{});var JRt=s(V9e);MAr=r(JRt,"roberta"),JRt.forEach(t),EAr=r(iDe," \u2014 "),yY=n(iDe,"A",{href:!0});var YRt=s(yY);CAr=r(YRt,"TFRobertaForMaskedLM"),YRt.forEach(t),wAr=r(iDe," (RoBERTa model)"),iDe.forEach(t),AAr=i(fe),S4=n(fe,"LI",{});var dDe=s(S4);X9e=n(dDe,"STRONG",{});var KRt=s(X9e);LAr=r(KRt,"roformer"),KRt.forEach(t),yAr=r(dDe," \u2014 "),xY=n(dDe,"A",{href:!0});var ZRt=s(xY);xAr=r(ZRt,"TFRoFormerForMaskedLM"),ZRt.forEach(t),$Ar=r(dDe," (RoFormer model)"),dDe.forEach(t),kAr=i(fe),R4=n(fe,"LI",{});var cDe=s(R4);z9e=n(cDe,"STRONG",{});var ePt=s(z9e);SAr=r(ePt,"tapas"),ePt.forEach(t),RAr=r(cDe," \u2014 "),$Y=n(cDe,"A",{href:!0});var oPt=s($Y);PAr=r(oPt,"TFTapasForMaskedLM"),oPt.forEach(t),BAr=r(cDe," (TAPAS model)"),cDe.forEach(t),IAr=i(fe),P4=n(fe,"LI",{});var fDe=s(P4);Q9e=n(fDe,"STRONG",{});var rPt=s(Q9e);NAr=r(rPt,"xlm"),rPt.forEach(t),qAr=r(fDe," \u2014 "),kY=n(fDe,"A",{href:!0});var tPt=s(kY);jAr=r(tPt,"TFXLMWithLMHeadModel"),tPt.forEach(t),DAr=r(fDe," (XLM model)"),fDe.forEach(t),GAr=i(fe),B4=n(fe,"LI",{});var mDe=s(B4);W9e=n(mDe,"STRONG",{});var aPt=s(W9e);OAr=r(aPt,"xlm-roberta"),aPt.forEach(t),VAr=r(mDe," \u2014 "),SY=n(mDe,"A",{href:!0});var nPt=s(SY);XAr=r(nPt,"TFXLMRobertaForMaskedLM"),nPt.forEach(t),zAr=r(mDe," (XLM-RoBERTa model)"),mDe.forEach(t),fe.forEach(t),QAr=i(ql),T(I4.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),Mze=i(f),Tc=n(f,"H2",{class:!0});var $We=s(Tc);N4=n($We,"A",{id:!0,class:!0,href:!0});var sPt=s(N4);H9e=n(sPt,"SPAN",{});var lPt=s(H9e);T(ux.$$.fragment,lPt),lPt.forEach(t),sPt.forEach(t),WAr=i($We),U9e=n($We,"SPAN",{});var iPt=s(U9e);HAr=r(iPt,"TFAutoModelForSeq2SeqLM"),iPt.forEach(t),$We.forEach(t),Eze=i(f),lr=n(f,"DIV",{class:!0});var jl=s(lr);T(bx.$$.fragment,jl),UAr=i(jl),Mc=n(jl,"P",{});var Dte=s(Mc);JAr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RY=n(Dte,"A",{href:!0});var dPt=s(RY);YAr=r(dPt,"from_pretrained()"),dPt.forEach(t),KAr=r(Dte," class method or the "),PY=n(Dte,"A",{href:!0});var cPt=s(PY);ZAr=r(cPt,"from_config()"),cPt.forEach(t),e6r=r(Dte,` class
method.`),Dte.forEach(t),o6r=i(jl),vx=n(jl,"P",{});var kWe=s(vx);r6r=r(kWe,"This class cannot be instantiated directly using "),J9e=n(kWe,"CODE",{});var fPt=s(J9e);t6r=r(fPt,"__init__()"),fPt.forEach(t),a6r=r(kWe," (throws an error)."),kWe.forEach(t),n6r=i(jl),qt=n(jl,"DIV",{class:!0});var h6=s(qt);T(Fx.$$.fragment,h6),s6r=i(h6),Y9e=n(h6,"P",{});var mPt=s(Y9e);l6r=r(mPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),mPt.forEach(t),i6r=i(h6),Ec=n(h6,"P",{});var Gte=s(Ec);d6r=r(Gte,`Note:
Loading a model from its configuration file does `),K9e=n(Gte,"STRONG",{});var gPt=s(K9e);c6r=r(gPt,"not"),gPt.forEach(t),f6r=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=n(Gte,"A",{href:!0});var hPt=s(BY);m6r=r(hPt,"from_pretrained()"),hPt.forEach(t),g6r=r(Gte," to load the model weights."),Gte.forEach(t),h6r=i(h6),T(q4.$$.fragment,h6),h6.forEach(t),p6r=i(jl),Br=n(jl,"DIV",{class:!0});var Dl=s(Br);T(Tx.$$.fragment,Dl),_6r=i(Dl),Z9e=n(Dl,"P",{});var pPt=s(Z9e);u6r=r(pPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pPt.forEach(t),b6r=i(Dl),mn=n(Dl,"P",{});var p6=s(mn);v6r=r(p6,"The model class to instantiate is selected based on the "),eMe=n(p6,"CODE",{});var _Pt=s(eMe);F6r=r(_Pt,"model_type"),_Pt.forEach(t),T6r=r(p6,` property of the config object (either
passed as an argument or loaded from `),oMe=n(p6,"CODE",{});var uPt=s(oMe);M6r=r(uPt,"pretrained_model_name_or_path"),uPt.forEach(t),E6r=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rMe=n(p6,"CODE",{});var bPt=s(rMe);C6r=r(bPt,"pretrained_model_name_or_path"),bPt.forEach(t),w6r=r(p6,":"),p6.forEach(t),A6r=i(Dl),ye=n(Dl,"UL",{});var Ie=s(ye);j4=n(Ie,"LI",{});var gDe=s(j4);tMe=n(gDe,"STRONG",{});var vPt=s(tMe);L6r=r(vPt,"bart"),vPt.forEach(t),y6r=r(gDe," \u2014 "),IY=n(gDe,"A",{href:!0});var FPt=s(IY);x6r=r(FPt,"TFBartForConditionalGeneration"),FPt.forEach(t),$6r=r(gDe," (BART model)"),gDe.forEach(t),k6r=i(Ie),D4=n(Ie,"LI",{});var hDe=s(D4);aMe=n(hDe,"STRONG",{});var TPt=s(aMe);S6r=r(TPt,"blenderbot"),TPt.forEach(t),R6r=r(hDe," \u2014 "),NY=n(hDe,"A",{href:!0});var MPt=s(NY);P6r=r(MPt,"TFBlenderbotForConditionalGeneration"),MPt.forEach(t),B6r=r(hDe," (Blenderbot model)"),hDe.forEach(t),I6r=i(Ie),G4=n(Ie,"LI",{});var pDe=s(G4);nMe=n(pDe,"STRONG",{});var EPt=s(nMe);N6r=r(EPt,"blenderbot-small"),EPt.forEach(t),q6r=r(pDe," \u2014 "),qY=n(pDe,"A",{href:!0});var CPt=s(qY);j6r=r(CPt,"TFBlenderbotSmallForConditionalGeneration"),CPt.forEach(t),D6r=r(pDe," (BlenderbotSmall model)"),pDe.forEach(t),G6r=i(Ie),O4=n(Ie,"LI",{});var _De=s(O4);sMe=n(_De,"STRONG",{});var wPt=s(sMe);O6r=r(wPt,"encoder-decoder"),wPt.forEach(t),V6r=r(_De," \u2014 "),jY=n(_De,"A",{href:!0});var APt=s(jY);X6r=r(APt,"TFEncoderDecoderModel"),APt.forEach(t),z6r=r(_De," (Encoder decoder model)"),_De.forEach(t),Q6r=i(Ie),V4=n(Ie,"LI",{});var uDe=s(V4);lMe=n(uDe,"STRONG",{});var LPt=s(lMe);W6r=r(LPt,"led"),LPt.forEach(t),H6r=r(uDe," \u2014 "),DY=n(uDe,"A",{href:!0});var yPt=s(DY);U6r=r(yPt,"TFLEDForConditionalGeneration"),yPt.forEach(t),J6r=r(uDe," (LED model)"),uDe.forEach(t),Y6r=i(Ie),X4=n(Ie,"LI",{});var bDe=s(X4);iMe=n(bDe,"STRONG",{});var xPt=s(iMe);K6r=r(xPt,"marian"),xPt.forEach(t),Z6r=r(bDe," \u2014 "),GY=n(bDe,"A",{href:!0});var $Pt=s(GY);eLr=r($Pt,"TFMarianMTModel"),$Pt.forEach(t),oLr=r(bDe," (Marian model)"),bDe.forEach(t),rLr=i(Ie),z4=n(Ie,"LI",{});var vDe=s(z4);dMe=n(vDe,"STRONG",{});var kPt=s(dMe);tLr=r(kPt,"mbart"),kPt.forEach(t),aLr=r(vDe," \u2014 "),OY=n(vDe,"A",{href:!0});var SPt=s(OY);nLr=r(SPt,"TFMBartForConditionalGeneration"),SPt.forEach(t),sLr=r(vDe," (mBART model)"),vDe.forEach(t),lLr=i(Ie),Q4=n(Ie,"LI",{});var FDe=s(Q4);cMe=n(FDe,"STRONG",{});var RPt=s(cMe);iLr=r(RPt,"mt5"),RPt.forEach(t),dLr=r(FDe," \u2014 "),VY=n(FDe,"A",{href:!0});var PPt=s(VY);cLr=r(PPt,"TFMT5ForConditionalGeneration"),PPt.forEach(t),fLr=r(FDe," (MT5 model)"),FDe.forEach(t),mLr=i(Ie),W4=n(Ie,"LI",{});var TDe=s(W4);fMe=n(TDe,"STRONG",{});var BPt=s(fMe);gLr=r(BPt,"pegasus"),BPt.forEach(t),hLr=r(TDe," \u2014 "),XY=n(TDe,"A",{href:!0});var IPt=s(XY);pLr=r(IPt,"TFPegasusForConditionalGeneration"),IPt.forEach(t),_Lr=r(TDe," (Pegasus model)"),TDe.forEach(t),uLr=i(Ie),H4=n(Ie,"LI",{});var MDe=s(H4);mMe=n(MDe,"STRONG",{});var NPt=s(mMe);bLr=r(NPt,"t5"),NPt.forEach(t),vLr=r(MDe," \u2014 "),zY=n(MDe,"A",{href:!0});var qPt=s(zY);FLr=r(qPt,"TFT5ForConditionalGeneration"),qPt.forEach(t),TLr=r(MDe," (T5 model)"),MDe.forEach(t),Ie.forEach(t),MLr=i(Dl),T(U4.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Cze=i(f),Cc=n(f,"H2",{class:!0});var SWe=s(Cc);J4=n(SWe,"A",{id:!0,class:!0,href:!0});var jPt=s(J4);gMe=n(jPt,"SPAN",{});var DPt=s(gMe);T(Mx.$$.fragment,DPt),DPt.forEach(t),jPt.forEach(t),ELr=i(SWe),hMe=n(SWe,"SPAN",{});var GPt=s(hMe);CLr=r(GPt,"TFAutoModelForSequenceClassification"),GPt.forEach(t),SWe.forEach(t),wze=i(f),ir=n(f,"DIV",{class:!0});var Gl=s(ir);T(Ex.$$.fragment,Gl),wLr=i(Gl),wc=n(Gl,"P",{});var Ote=s(wc);ALr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QY=n(Ote,"A",{href:!0});var OPt=s(QY);LLr=r(OPt,"from_pretrained()"),OPt.forEach(t),yLr=r(Ote," class method or the "),WY=n(Ote,"A",{href:!0});var VPt=s(WY);xLr=r(VPt,"from_config()"),VPt.forEach(t),$Lr=r(Ote,` class
method.`),Ote.forEach(t),kLr=i(Gl),Cx=n(Gl,"P",{});var RWe=s(Cx);SLr=r(RWe,"This class cannot be instantiated directly using "),pMe=n(RWe,"CODE",{});var XPt=s(pMe);RLr=r(XPt,"__init__()"),XPt.forEach(t),PLr=r(RWe," (throws an error)."),RWe.forEach(t),BLr=i(Gl),jt=n(Gl,"DIV",{class:!0});var _6=s(jt);T(wx.$$.fragment,_6),ILr=i(_6),_Me=n(_6,"P",{});var zPt=s(_Me);NLr=r(zPt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zPt.forEach(t),qLr=i(_6),Ac=n(_6,"P",{});var Vte=s(Ac);jLr=r(Vte,`Note:
Loading a model from its configuration file does `),uMe=n(Vte,"STRONG",{});var QPt=s(uMe);DLr=r(QPt,"not"),QPt.forEach(t),GLr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=n(Vte,"A",{href:!0});var WPt=s(HY);OLr=r(WPt,"from_pretrained()"),WPt.forEach(t),VLr=r(Vte," to load the model weights."),Vte.forEach(t),XLr=i(_6),T(Y4.$$.fragment,_6),_6.forEach(t),zLr=i(Gl),Ir=n(Gl,"DIV",{class:!0});var Ol=s(Ir);T(Ax.$$.fragment,Ol),QLr=i(Ol),bMe=n(Ol,"P",{});var HPt=s(bMe);WLr=r(HPt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),HPt.forEach(t),HLr=i(Ol),gn=n(Ol,"P",{});var u6=s(gn);ULr=r(u6,"The model class to instantiate is selected based on the "),vMe=n(u6,"CODE",{});var UPt=s(vMe);JLr=r(UPt,"model_type"),UPt.forEach(t),YLr=r(u6,` property of the config object (either
passed as an argument or loaded from `),FMe=n(u6,"CODE",{});var JPt=s(FMe);KLr=r(JPt,"pretrained_model_name_or_path"),JPt.forEach(t),ZLr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TMe=n(u6,"CODE",{});var YPt=s(TMe);eyr=r(YPt,"pretrained_model_name_or_path"),YPt.forEach(t),oyr=r(u6,":"),u6.forEach(t),ryr=i(Ol),te=n(Ol,"UL",{});var ne=s(te);K4=n(ne,"LI",{});var EDe=s(K4);MMe=n(EDe,"STRONG",{});var KPt=s(MMe);tyr=r(KPt,"albert"),KPt.forEach(t),ayr=r(EDe," \u2014 "),UY=n(EDe,"A",{href:!0});var ZPt=s(UY);nyr=r(ZPt,"TFAlbertForSequenceClassification"),ZPt.forEach(t),syr=r(EDe," (ALBERT model)"),EDe.forEach(t),lyr=i(ne),Z4=n(ne,"LI",{});var CDe=s(Z4);EMe=n(CDe,"STRONG",{});var eBt=s(EMe);iyr=r(eBt,"bert"),eBt.forEach(t),dyr=r(CDe," \u2014 "),JY=n(CDe,"A",{href:!0});var oBt=s(JY);cyr=r(oBt,"TFBertForSequenceClassification"),oBt.forEach(t),fyr=r(CDe," (BERT model)"),CDe.forEach(t),myr=i(ne),eE=n(ne,"LI",{});var wDe=s(eE);CMe=n(wDe,"STRONG",{});var rBt=s(CMe);gyr=r(rBt,"camembert"),rBt.forEach(t),hyr=r(wDe," \u2014 "),YY=n(wDe,"A",{href:!0});var tBt=s(YY);pyr=r(tBt,"TFCamembertForSequenceClassification"),tBt.forEach(t),_yr=r(wDe," (CamemBERT model)"),wDe.forEach(t),uyr=i(ne),oE=n(ne,"LI",{});var ADe=s(oE);wMe=n(ADe,"STRONG",{});var aBt=s(wMe);byr=r(aBt,"convbert"),aBt.forEach(t),vyr=r(ADe," \u2014 "),KY=n(ADe,"A",{href:!0});var nBt=s(KY);Fyr=r(nBt,"TFConvBertForSequenceClassification"),nBt.forEach(t),Tyr=r(ADe," (ConvBERT model)"),ADe.forEach(t),Myr=i(ne),rE=n(ne,"LI",{});var LDe=s(rE);AMe=n(LDe,"STRONG",{});var sBt=s(AMe);Eyr=r(sBt,"ctrl"),sBt.forEach(t),Cyr=r(LDe," \u2014 "),ZY=n(LDe,"A",{href:!0});var lBt=s(ZY);wyr=r(lBt,"TFCTRLForSequenceClassification"),lBt.forEach(t),Ayr=r(LDe," (CTRL model)"),LDe.forEach(t),Lyr=i(ne),tE=n(ne,"LI",{});var yDe=s(tE);LMe=n(yDe,"STRONG",{});var iBt=s(LMe);yyr=r(iBt,"deberta"),iBt.forEach(t),xyr=r(yDe," \u2014 "),eK=n(yDe,"A",{href:!0});var dBt=s(eK);$yr=r(dBt,"TFDebertaForSequenceClassification"),dBt.forEach(t),kyr=r(yDe," (DeBERTa model)"),yDe.forEach(t),Syr=i(ne),aE=n(ne,"LI",{});var xDe=s(aE);yMe=n(xDe,"STRONG",{});var cBt=s(yMe);Ryr=r(cBt,"deberta-v2"),cBt.forEach(t),Pyr=r(xDe," \u2014 "),oK=n(xDe,"A",{href:!0});var fBt=s(oK);Byr=r(fBt,"TFDebertaV2ForSequenceClassification"),fBt.forEach(t),Iyr=r(xDe," (DeBERTa-v2 model)"),xDe.forEach(t),Nyr=i(ne),nE=n(ne,"LI",{});var $De=s(nE);xMe=n($De,"STRONG",{});var mBt=s(xMe);qyr=r(mBt,"distilbert"),mBt.forEach(t),jyr=r($De," \u2014 "),rK=n($De,"A",{href:!0});var gBt=s(rK);Dyr=r(gBt,"TFDistilBertForSequenceClassification"),gBt.forEach(t),Gyr=r($De," (DistilBERT model)"),$De.forEach(t),Oyr=i(ne),sE=n(ne,"LI",{});var kDe=s(sE);$Me=n(kDe,"STRONG",{});var hBt=s($Me);Vyr=r(hBt,"electra"),hBt.forEach(t),Xyr=r(kDe," \u2014 "),tK=n(kDe,"A",{href:!0});var pBt=s(tK);zyr=r(pBt,"TFElectraForSequenceClassification"),pBt.forEach(t),Qyr=r(kDe," (ELECTRA model)"),kDe.forEach(t),Wyr=i(ne),lE=n(ne,"LI",{});var SDe=s(lE);kMe=n(SDe,"STRONG",{});var _Bt=s(kMe);Hyr=r(_Bt,"flaubert"),_Bt.forEach(t),Uyr=r(SDe," \u2014 "),aK=n(SDe,"A",{href:!0});var uBt=s(aK);Jyr=r(uBt,"TFFlaubertForSequenceClassification"),uBt.forEach(t),Yyr=r(SDe," (FlauBERT model)"),SDe.forEach(t),Kyr=i(ne),iE=n(ne,"LI",{});var RDe=s(iE);SMe=n(RDe,"STRONG",{});var bBt=s(SMe);Zyr=r(bBt,"funnel"),bBt.forEach(t),e8r=r(RDe," \u2014 "),nK=n(RDe,"A",{href:!0});var vBt=s(nK);o8r=r(vBt,"TFFunnelForSequenceClassification"),vBt.forEach(t),r8r=r(RDe," (Funnel Transformer model)"),RDe.forEach(t),t8r=i(ne),dE=n(ne,"LI",{});var PDe=s(dE);RMe=n(PDe,"STRONG",{});var FBt=s(RMe);a8r=r(FBt,"gpt2"),FBt.forEach(t),n8r=r(PDe," \u2014 "),sK=n(PDe,"A",{href:!0});var TBt=s(sK);s8r=r(TBt,"TFGPT2ForSequenceClassification"),TBt.forEach(t),l8r=r(PDe," (OpenAI GPT-2 model)"),PDe.forEach(t),i8r=i(ne),cE=n(ne,"LI",{});var BDe=s(cE);PMe=n(BDe,"STRONG",{});var MBt=s(PMe);d8r=r(MBt,"gptj"),MBt.forEach(t),c8r=r(BDe," \u2014 "),lK=n(BDe,"A",{href:!0});var EBt=s(lK);f8r=r(EBt,"TFGPTJForSequenceClassification"),EBt.forEach(t),m8r=r(BDe," (GPT-J model)"),BDe.forEach(t),g8r=i(ne),fE=n(ne,"LI",{});var IDe=s(fE);BMe=n(IDe,"STRONG",{});var CBt=s(BMe);h8r=r(CBt,"layoutlm"),CBt.forEach(t),p8r=r(IDe," \u2014 "),iK=n(IDe,"A",{href:!0});var wBt=s(iK);_8r=r(wBt,"TFLayoutLMForSequenceClassification"),wBt.forEach(t),u8r=r(IDe," (LayoutLM model)"),IDe.forEach(t),b8r=i(ne),mE=n(ne,"LI",{});var NDe=s(mE);IMe=n(NDe,"STRONG",{});var ABt=s(IMe);v8r=r(ABt,"longformer"),ABt.forEach(t),F8r=r(NDe," \u2014 "),dK=n(NDe,"A",{href:!0});var LBt=s(dK);T8r=r(LBt,"TFLongformerForSequenceClassification"),LBt.forEach(t),M8r=r(NDe," (Longformer model)"),NDe.forEach(t),E8r=i(ne),gE=n(ne,"LI",{});var qDe=s(gE);NMe=n(qDe,"STRONG",{});var yBt=s(NMe);C8r=r(yBt,"mobilebert"),yBt.forEach(t),w8r=r(qDe," \u2014 "),cK=n(qDe,"A",{href:!0});var xBt=s(cK);A8r=r(xBt,"TFMobileBertForSequenceClassification"),xBt.forEach(t),L8r=r(qDe," (MobileBERT model)"),qDe.forEach(t),y8r=i(ne),hE=n(ne,"LI",{});var jDe=s(hE);qMe=n(jDe,"STRONG",{});var $Bt=s(qMe);x8r=r($Bt,"mpnet"),$Bt.forEach(t),$8r=r(jDe," \u2014 "),fK=n(jDe,"A",{href:!0});var kBt=s(fK);k8r=r(kBt,"TFMPNetForSequenceClassification"),kBt.forEach(t),S8r=r(jDe," (MPNet model)"),jDe.forEach(t),R8r=i(ne),pE=n(ne,"LI",{});var DDe=s(pE);jMe=n(DDe,"STRONG",{});var SBt=s(jMe);P8r=r(SBt,"openai-gpt"),SBt.forEach(t),B8r=r(DDe," \u2014 "),mK=n(DDe,"A",{href:!0});var RBt=s(mK);I8r=r(RBt,"TFOpenAIGPTForSequenceClassification"),RBt.forEach(t),N8r=r(DDe," (OpenAI GPT model)"),DDe.forEach(t),q8r=i(ne),_E=n(ne,"LI",{});var GDe=s(_E);DMe=n(GDe,"STRONG",{});var PBt=s(DMe);j8r=r(PBt,"rembert"),PBt.forEach(t),D8r=r(GDe," \u2014 "),gK=n(GDe,"A",{href:!0});var BBt=s(gK);G8r=r(BBt,"TFRemBertForSequenceClassification"),BBt.forEach(t),O8r=r(GDe," (RemBERT model)"),GDe.forEach(t),V8r=i(ne),uE=n(ne,"LI",{});var ODe=s(uE);GMe=n(ODe,"STRONG",{});var IBt=s(GMe);X8r=r(IBt,"roberta"),IBt.forEach(t),z8r=r(ODe," \u2014 "),hK=n(ODe,"A",{href:!0});var NBt=s(hK);Q8r=r(NBt,"TFRobertaForSequenceClassification"),NBt.forEach(t),W8r=r(ODe," (RoBERTa model)"),ODe.forEach(t),H8r=i(ne),bE=n(ne,"LI",{});var VDe=s(bE);OMe=n(VDe,"STRONG",{});var qBt=s(OMe);U8r=r(qBt,"roformer"),qBt.forEach(t),J8r=r(VDe," \u2014 "),pK=n(VDe,"A",{href:!0});var jBt=s(pK);Y8r=r(jBt,"TFRoFormerForSequenceClassification"),jBt.forEach(t),K8r=r(VDe," (RoFormer model)"),VDe.forEach(t),Z8r=i(ne),vE=n(ne,"LI",{});var XDe=s(vE);VMe=n(XDe,"STRONG",{});var DBt=s(VMe);exr=r(DBt,"tapas"),DBt.forEach(t),oxr=r(XDe," \u2014 "),_K=n(XDe,"A",{href:!0});var GBt=s(_K);rxr=r(GBt,"TFTapasForSequenceClassification"),GBt.forEach(t),txr=r(XDe," (TAPAS model)"),XDe.forEach(t),axr=i(ne),FE=n(ne,"LI",{});var zDe=s(FE);XMe=n(zDe,"STRONG",{});var OBt=s(XMe);nxr=r(OBt,"transfo-xl"),OBt.forEach(t),sxr=r(zDe," \u2014 "),uK=n(zDe,"A",{href:!0});var VBt=s(uK);lxr=r(VBt,"TFTransfoXLForSequenceClassification"),VBt.forEach(t),ixr=r(zDe," (Transformer-XL model)"),zDe.forEach(t),dxr=i(ne),TE=n(ne,"LI",{});var QDe=s(TE);zMe=n(QDe,"STRONG",{});var XBt=s(zMe);cxr=r(XBt,"xlm"),XBt.forEach(t),fxr=r(QDe," \u2014 "),bK=n(QDe,"A",{href:!0});var zBt=s(bK);mxr=r(zBt,"TFXLMForSequenceClassification"),zBt.forEach(t),gxr=r(QDe," (XLM model)"),QDe.forEach(t),hxr=i(ne),ME=n(ne,"LI",{});var WDe=s(ME);QMe=n(WDe,"STRONG",{});var QBt=s(QMe);pxr=r(QBt,"xlm-roberta"),QBt.forEach(t),_xr=r(WDe," \u2014 "),vK=n(WDe,"A",{href:!0});var WBt=s(vK);uxr=r(WBt,"TFXLMRobertaForSequenceClassification"),WBt.forEach(t),bxr=r(WDe," (XLM-RoBERTa model)"),WDe.forEach(t),vxr=i(ne),EE=n(ne,"LI",{});var HDe=s(EE);WMe=n(HDe,"STRONG",{});var HBt=s(WMe);Fxr=r(HBt,"xlnet"),HBt.forEach(t),Txr=r(HDe," \u2014 "),FK=n(HDe,"A",{href:!0});var UBt=s(FK);Mxr=r(UBt,"TFXLNetForSequenceClassification"),UBt.forEach(t),Exr=r(HDe," (XLNet model)"),HDe.forEach(t),ne.forEach(t),Cxr=i(Ol),T(CE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Aze=i(f),Lc=n(f,"H2",{class:!0});var PWe=s(Lc);wE=n(PWe,"A",{id:!0,class:!0,href:!0});var JBt=s(wE);HMe=n(JBt,"SPAN",{});var YBt=s(HMe);T(Lx.$$.fragment,YBt),YBt.forEach(t),JBt.forEach(t),wxr=i(PWe),UMe=n(PWe,"SPAN",{});var KBt=s(UMe);Axr=r(KBt,"TFAutoModelForMultipleChoice"),KBt.forEach(t),PWe.forEach(t),Lze=i(f),dr=n(f,"DIV",{class:!0});var Vl=s(dr);T(yx.$$.fragment,Vl),Lxr=i(Vl),yc=n(Vl,"P",{});var Xte=s(yc);yxr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),TK=n(Xte,"A",{href:!0});var ZBt=s(TK);xxr=r(ZBt,"from_pretrained()"),ZBt.forEach(t),$xr=r(Xte," class method or the "),MK=n(Xte,"A",{href:!0});var eIt=s(MK);kxr=r(eIt,"from_config()"),eIt.forEach(t),Sxr=r(Xte,` class
method.`),Xte.forEach(t),Rxr=i(Vl),xx=n(Vl,"P",{});var BWe=s(xx);Pxr=r(BWe,"This class cannot be instantiated directly using "),JMe=n(BWe,"CODE",{});var oIt=s(JMe);Bxr=r(oIt,"__init__()"),oIt.forEach(t),Ixr=r(BWe," (throws an error)."),BWe.forEach(t),Nxr=i(Vl),Dt=n(Vl,"DIV",{class:!0});var b6=s(Dt);T($x.$$.fragment,b6),qxr=i(b6),YMe=n(b6,"P",{});var rIt=s(YMe);jxr=r(rIt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rIt.forEach(t),Dxr=i(b6),xc=n(b6,"P",{});var zte=s(xc);Gxr=r(zte,`Note:
Loading a model from its configuration file does `),KMe=n(zte,"STRONG",{});var tIt=s(KMe);Oxr=r(tIt,"not"),tIt.forEach(t),Vxr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=n(zte,"A",{href:!0});var aIt=s(EK);Xxr=r(aIt,"from_pretrained()"),aIt.forEach(t),zxr=r(zte," to load the model weights."),zte.forEach(t),Qxr=i(b6),T(AE.$$.fragment,b6),b6.forEach(t),Wxr=i(Vl),Nr=n(Vl,"DIV",{class:!0});var Xl=s(Nr);T(kx.$$.fragment,Xl),Hxr=i(Xl),ZMe=n(Xl,"P",{});var nIt=s(ZMe);Uxr=r(nIt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),nIt.forEach(t),Jxr=i(Xl),hn=n(Xl,"P",{});var v6=s(hn);Yxr=r(v6,"The model class to instantiate is selected based on the "),e4e=n(v6,"CODE",{});var sIt=s(e4e);Kxr=r(sIt,"model_type"),sIt.forEach(t),Zxr=r(v6,` property of the config object (either
passed as an argument or loaded from `),o4e=n(v6,"CODE",{});var lIt=s(o4e);e$r=r(lIt,"pretrained_model_name_or_path"),lIt.forEach(t),o$r=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=n(v6,"CODE",{});var iIt=s(r4e);r$r=r(iIt,"pretrained_model_name_or_path"),iIt.forEach(t),t$r=r(v6,":"),v6.forEach(t),a$r=i(Xl),_e=n(Xl,"UL",{});var Fe=s(_e);LE=n(Fe,"LI",{});var UDe=s(LE);t4e=n(UDe,"STRONG",{});var dIt=s(t4e);n$r=r(dIt,"albert"),dIt.forEach(t),s$r=r(UDe," \u2014 "),CK=n(UDe,"A",{href:!0});var cIt=s(CK);l$r=r(cIt,"TFAlbertForMultipleChoice"),cIt.forEach(t),i$r=r(UDe," (ALBERT model)"),UDe.forEach(t),d$r=i(Fe),yE=n(Fe,"LI",{});var JDe=s(yE);a4e=n(JDe,"STRONG",{});var fIt=s(a4e);c$r=r(fIt,"bert"),fIt.forEach(t),f$r=r(JDe," \u2014 "),wK=n(JDe,"A",{href:!0});var mIt=s(wK);m$r=r(mIt,"TFBertForMultipleChoice"),mIt.forEach(t),g$r=r(JDe," (BERT model)"),JDe.forEach(t),h$r=i(Fe),xE=n(Fe,"LI",{});var YDe=s(xE);n4e=n(YDe,"STRONG",{});var gIt=s(n4e);p$r=r(gIt,"camembert"),gIt.forEach(t),_$r=r(YDe," \u2014 "),AK=n(YDe,"A",{href:!0});var hIt=s(AK);u$r=r(hIt,"TFCamembertForMultipleChoice"),hIt.forEach(t),b$r=r(YDe," (CamemBERT model)"),YDe.forEach(t),v$r=i(Fe),$E=n(Fe,"LI",{});var KDe=s($E);s4e=n(KDe,"STRONG",{});var pIt=s(s4e);F$r=r(pIt,"convbert"),pIt.forEach(t),T$r=r(KDe," \u2014 "),LK=n(KDe,"A",{href:!0});var _It=s(LK);M$r=r(_It,"TFConvBertForMultipleChoice"),_It.forEach(t),E$r=r(KDe," (ConvBERT model)"),KDe.forEach(t),C$r=i(Fe),kE=n(Fe,"LI",{});var ZDe=s(kE);l4e=n(ZDe,"STRONG",{});var uIt=s(l4e);w$r=r(uIt,"distilbert"),uIt.forEach(t),A$r=r(ZDe," \u2014 "),yK=n(ZDe,"A",{href:!0});var bIt=s(yK);L$r=r(bIt,"TFDistilBertForMultipleChoice"),bIt.forEach(t),y$r=r(ZDe," (DistilBERT model)"),ZDe.forEach(t),x$r=i(Fe),SE=n(Fe,"LI",{});var eGe=s(SE);i4e=n(eGe,"STRONG",{});var vIt=s(i4e);$$r=r(vIt,"electra"),vIt.forEach(t),k$r=r(eGe," \u2014 "),xK=n(eGe,"A",{href:!0});var FIt=s(xK);S$r=r(FIt,"TFElectraForMultipleChoice"),FIt.forEach(t),R$r=r(eGe," (ELECTRA model)"),eGe.forEach(t),P$r=i(Fe),RE=n(Fe,"LI",{});var oGe=s(RE);d4e=n(oGe,"STRONG",{});var TIt=s(d4e);B$r=r(TIt,"flaubert"),TIt.forEach(t),I$r=r(oGe," \u2014 "),$K=n(oGe,"A",{href:!0});var MIt=s($K);N$r=r(MIt,"TFFlaubertForMultipleChoice"),MIt.forEach(t),q$r=r(oGe," (FlauBERT model)"),oGe.forEach(t),j$r=i(Fe),PE=n(Fe,"LI",{});var rGe=s(PE);c4e=n(rGe,"STRONG",{});var EIt=s(c4e);D$r=r(EIt,"funnel"),EIt.forEach(t),G$r=r(rGe," \u2014 "),kK=n(rGe,"A",{href:!0});var CIt=s(kK);O$r=r(CIt,"TFFunnelForMultipleChoice"),CIt.forEach(t),V$r=r(rGe," (Funnel Transformer model)"),rGe.forEach(t),X$r=i(Fe),BE=n(Fe,"LI",{});var tGe=s(BE);f4e=n(tGe,"STRONG",{});var wIt=s(f4e);z$r=r(wIt,"longformer"),wIt.forEach(t),Q$r=r(tGe," \u2014 "),SK=n(tGe,"A",{href:!0});var AIt=s(SK);W$r=r(AIt,"TFLongformerForMultipleChoice"),AIt.forEach(t),H$r=r(tGe," (Longformer model)"),tGe.forEach(t),U$r=i(Fe),IE=n(Fe,"LI",{});var aGe=s(IE);m4e=n(aGe,"STRONG",{});var LIt=s(m4e);J$r=r(LIt,"mobilebert"),LIt.forEach(t),Y$r=r(aGe," \u2014 "),RK=n(aGe,"A",{href:!0});var yIt=s(RK);K$r=r(yIt,"TFMobileBertForMultipleChoice"),yIt.forEach(t),Z$r=r(aGe," (MobileBERT model)"),aGe.forEach(t),ekr=i(Fe),NE=n(Fe,"LI",{});var nGe=s(NE);g4e=n(nGe,"STRONG",{});var xIt=s(g4e);okr=r(xIt,"mpnet"),xIt.forEach(t),rkr=r(nGe," \u2014 "),PK=n(nGe,"A",{href:!0});var $It=s(PK);tkr=r($It,"TFMPNetForMultipleChoice"),$It.forEach(t),akr=r(nGe," (MPNet model)"),nGe.forEach(t),nkr=i(Fe),qE=n(Fe,"LI",{});var sGe=s(qE);h4e=n(sGe,"STRONG",{});var kIt=s(h4e);skr=r(kIt,"rembert"),kIt.forEach(t),lkr=r(sGe," \u2014 "),BK=n(sGe,"A",{href:!0});var SIt=s(BK);ikr=r(SIt,"TFRemBertForMultipleChoice"),SIt.forEach(t),dkr=r(sGe," (RemBERT model)"),sGe.forEach(t),ckr=i(Fe),jE=n(Fe,"LI",{});var lGe=s(jE);p4e=n(lGe,"STRONG",{});var RIt=s(p4e);fkr=r(RIt,"roberta"),RIt.forEach(t),mkr=r(lGe," \u2014 "),IK=n(lGe,"A",{href:!0});var PIt=s(IK);gkr=r(PIt,"TFRobertaForMultipleChoice"),PIt.forEach(t),hkr=r(lGe," (RoBERTa model)"),lGe.forEach(t),pkr=i(Fe),DE=n(Fe,"LI",{});var iGe=s(DE);_4e=n(iGe,"STRONG",{});var BIt=s(_4e);_kr=r(BIt,"roformer"),BIt.forEach(t),ukr=r(iGe," \u2014 "),NK=n(iGe,"A",{href:!0});var IIt=s(NK);bkr=r(IIt,"TFRoFormerForMultipleChoice"),IIt.forEach(t),vkr=r(iGe," (RoFormer model)"),iGe.forEach(t),Fkr=i(Fe),GE=n(Fe,"LI",{});var dGe=s(GE);u4e=n(dGe,"STRONG",{});var NIt=s(u4e);Tkr=r(NIt,"xlm"),NIt.forEach(t),Mkr=r(dGe," \u2014 "),qK=n(dGe,"A",{href:!0});var qIt=s(qK);Ekr=r(qIt,"TFXLMForMultipleChoice"),qIt.forEach(t),Ckr=r(dGe," (XLM model)"),dGe.forEach(t),wkr=i(Fe),OE=n(Fe,"LI",{});var cGe=s(OE);b4e=n(cGe,"STRONG",{});var jIt=s(b4e);Akr=r(jIt,"xlm-roberta"),jIt.forEach(t),Lkr=r(cGe," \u2014 "),jK=n(cGe,"A",{href:!0});var DIt=s(jK);ykr=r(DIt,"TFXLMRobertaForMultipleChoice"),DIt.forEach(t),xkr=r(cGe," (XLM-RoBERTa model)"),cGe.forEach(t),$kr=i(Fe),VE=n(Fe,"LI",{});var fGe=s(VE);v4e=n(fGe,"STRONG",{});var GIt=s(v4e);kkr=r(GIt,"xlnet"),GIt.forEach(t),Skr=r(fGe," \u2014 "),DK=n(fGe,"A",{href:!0});var OIt=s(DK);Rkr=r(OIt,"TFXLNetForMultipleChoice"),OIt.forEach(t),Pkr=r(fGe," (XLNet model)"),fGe.forEach(t),Fe.forEach(t),Bkr=i(Xl),T(XE.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),yze=i(f),$c=n(f,"H2",{class:!0});var IWe=s($c);zE=n(IWe,"A",{id:!0,class:!0,href:!0});var VIt=s(zE);F4e=n(VIt,"SPAN",{});var XIt=s(F4e);T(Sx.$$.fragment,XIt),XIt.forEach(t),VIt.forEach(t),Ikr=i(IWe),T4e=n(IWe,"SPAN",{});var zIt=s(T4e);Nkr=r(zIt,"TFAutoModelForNextSentencePrediction"),zIt.forEach(t),IWe.forEach(t),xze=i(f),cr=n(f,"DIV",{class:!0});var zl=s(cr);T(Rx.$$.fragment,zl),qkr=i(zl),kc=n(zl,"P",{});var Qte=s(kc);jkr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GK=n(Qte,"A",{href:!0});var QIt=s(GK);Dkr=r(QIt,"from_pretrained()"),QIt.forEach(t),Gkr=r(Qte," class method or the "),OK=n(Qte,"A",{href:!0});var WIt=s(OK);Okr=r(WIt,"from_config()"),WIt.forEach(t),Vkr=r(Qte,` class
method.`),Qte.forEach(t),Xkr=i(zl),Px=n(zl,"P",{});var NWe=s(Px);zkr=r(NWe,"This class cannot be instantiated directly using "),M4e=n(NWe,"CODE",{});var HIt=s(M4e);Qkr=r(HIt,"__init__()"),HIt.forEach(t),Wkr=r(NWe," (throws an error)."),NWe.forEach(t),Hkr=i(zl),Gt=n(zl,"DIV",{class:!0});var F6=s(Gt);T(Bx.$$.fragment,F6),Ukr=i(F6),E4e=n(F6,"P",{});var UIt=s(E4e);Jkr=r(UIt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),UIt.forEach(t),Ykr=i(F6),Sc=n(F6,"P",{});var Wte=s(Sc);Kkr=r(Wte,`Note:
Loading a model from its configuration file does `),C4e=n(Wte,"STRONG",{});var JIt=s(C4e);Zkr=r(JIt,"not"),JIt.forEach(t),eSr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=n(Wte,"A",{href:!0});var YIt=s(VK);oSr=r(YIt,"from_pretrained()"),YIt.forEach(t),rSr=r(Wte," to load the model weights."),Wte.forEach(t),tSr=i(F6),T(QE.$$.fragment,F6),F6.forEach(t),aSr=i(zl),qr=n(zl,"DIV",{class:!0});var Ql=s(qr);T(Ix.$$.fragment,Ql),nSr=i(Ql),w4e=n(Ql,"P",{});var KIt=s(w4e);sSr=r(KIt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),KIt.forEach(t),lSr=i(Ql),pn=n(Ql,"P",{});var T6=s(pn);iSr=r(T6,"The model class to instantiate is selected based on the "),A4e=n(T6,"CODE",{});var ZIt=s(A4e);dSr=r(ZIt,"model_type"),ZIt.forEach(t),cSr=r(T6,` property of the config object (either
passed as an argument or loaded from `),L4e=n(T6,"CODE",{});var eNt=s(L4e);fSr=r(eNt,"pretrained_model_name_or_path"),eNt.forEach(t),mSr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y4e=n(T6,"CODE",{});var oNt=s(y4e);gSr=r(oNt,"pretrained_model_name_or_path"),oNt.forEach(t),hSr=r(T6,":"),T6.forEach(t),pSr=i(Ql),Nx=n(Ql,"UL",{});var qWe=s(Nx);WE=n(qWe,"LI",{});var mGe=s(WE);x4e=n(mGe,"STRONG",{});var rNt=s(x4e);_Sr=r(rNt,"bert"),rNt.forEach(t),uSr=r(mGe," \u2014 "),XK=n(mGe,"A",{href:!0});var tNt=s(XK);bSr=r(tNt,"TFBertForNextSentencePrediction"),tNt.forEach(t),vSr=r(mGe," (BERT model)"),mGe.forEach(t),FSr=i(qWe),HE=n(qWe,"LI",{});var gGe=s(HE);$4e=n(gGe,"STRONG",{});var aNt=s($4e);TSr=r(aNt,"mobilebert"),aNt.forEach(t),MSr=r(gGe," \u2014 "),zK=n(gGe,"A",{href:!0});var nNt=s(zK);ESr=r(nNt,"TFMobileBertForNextSentencePrediction"),nNt.forEach(t),CSr=r(gGe," (MobileBERT model)"),gGe.forEach(t),qWe.forEach(t),wSr=i(Ql),T(UE.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),$ze=i(f),Rc=n(f,"H2",{class:!0});var jWe=s(Rc);JE=n(jWe,"A",{id:!0,class:!0,href:!0});var sNt=s(JE);k4e=n(sNt,"SPAN",{});var lNt=s(k4e);T(qx.$$.fragment,lNt),lNt.forEach(t),sNt.forEach(t),ASr=i(jWe),S4e=n(jWe,"SPAN",{});var iNt=s(S4e);LSr=r(iNt,"TFAutoModelForTableQuestionAnswering"),iNt.forEach(t),jWe.forEach(t),kze=i(f),fr=n(f,"DIV",{class:!0});var Wl=s(fr);T(jx.$$.fragment,Wl),ySr=i(Wl),Pc=n(Wl,"P",{});var Hte=s(Pc);xSr=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),QK=n(Hte,"A",{href:!0});var dNt=s(QK);$Sr=r(dNt,"from_pretrained()"),dNt.forEach(t),kSr=r(Hte," class method or the "),WK=n(Hte,"A",{href:!0});var cNt=s(WK);SSr=r(cNt,"from_config()"),cNt.forEach(t),RSr=r(Hte,` class
method.`),Hte.forEach(t),PSr=i(Wl),Dx=n(Wl,"P",{});var DWe=s(Dx);BSr=r(DWe,"This class cannot be instantiated directly using "),R4e=n(DWe,"CODE",{});var fNt=s(R4e);ISr=r(fNt,"__init__()"),fNt.forEach(t),NSr=r(DWe," (throws an error)."),DWe.forEach(t),qSr=i(Wl),Ot=n(Wl,"DIV",{class:!0});var M6=s(Ot);T(Gx.$$.fragment,M6),jSr=i(M6),P4e=n(M6,"P",{});var mNt=s(P4e);DSr=r(mNt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),mNt.forEach(t),GSr=i(M6),Bc=n(M6,"P",{});var Ute=s(Bc);OSr=r(Ute,`Note:
Loading a model from its configuration file does `),B4e=n(Ute,"STRONG",{});var gNt=s(B4e);VSr=r(gNt,"not"),gNt.forEach(t),XSr=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=n(Ute,"A",{href:!0});var hNt=s(HK);zSr=r(hNt,"from_pretrained()"),hNt.forEach(t),QSr=r(Ute," to load the model weights."),Ute.forEach(t),WSr=i(M6),T(YE.$$.fragment,M6),M6.forEach(t),HSr=i(Wl),jr=n(Wl,"DIV",{class:!0});var Hl=s(jr);T(Ox.$$.fragment,Hl),USr=i(Hl),I4e=n(Hl,"P",{});var pNt=s(I4e);JSr=r(pNt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),pNt.forEach(t),YSr=i(Hl),_n=n(Hl,"P",{});var E6=s(_n);KSr=r(E6,"The model class to instantiate is selected based on the "),N4e=n(E6,"CODE",{});var _Nt=s(N4e);ZSr=r(_Nt,"model_type"),_Nt.forEach(t),eRr=r(E6,` property of the config object (either
passed as an argument or loaded from `),q4e=n(E6,"CODE",{});var uNt=s(q4e);oRr=r(uNt,"pretrained_model_name_or_path"),uNt.forEach(t),rRr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j4e=n(E6,"CODE",{});var bNt=s(j4e);tRr=r(bNt,"pretrained_model_name_or_path"),bNt.forEach(t),aRr=r(E6,":"),E6.forEach(t),nRr=i(Hl),D4e=n(Hl,"UL",{});var vNt=s(D4e);KE=n(vNt,"LI",{});var hGe=s(KE);G4e=n(hGe,"STRONG",{});var FNt=s(G4e);sRr=r(FNt,"tapas"),FNt.forEach(t),lRr=r(hGe," \u2014 "),UK=n(hGe,"A",{href:!0});var TNt=s(UK);iRr=r(TNt,"TFTapasForQuestionAnswering"),TNt.forEach(t),dRr=r(hGe," (TAPAS model)"),hGe.forEach(t),vNt.forEach(t),cRr=i(Hl),T(ZE.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),Sze=i(f),Ic=n(f,"H2",{class:!0});var GWe=s(Ic);eC=n(GWe,"A",{id:!0,class:!0,href:!0});var MNt=s(eC);O4e=n(MNt,"SPAN",{});var ENt=s(O4e);T(Vx.$$.fragment,ENt),ENt.forEach(t),MNt.forEach(t),fRr=i(GWe),V4e=n(GWe,"SPAN",{});var CNt=s(V4e);mRr=r(CNt,"TFAutoModelForTokenClassification"),CNt.forEach(t),GWe.forEach(t),Rze=i(f),mr=n(f,"DIV",{class:!0});var Ul=s(mr);T(Xx.$$.fragment,Ul),gRr=i(Ul),Nc=n(Ul,"P",{});var Jte=s(Nc);hRr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),JK=n(Jte,"A",{href:!0});var wNt=s(JK);pRr=r(wNt,"from_pretrained()"),wNt.forEach(t),_Rr=r(Jte," class method or the "),YK=n(Jte,"A",{href:!0});var ANt=s(YK);uRr=r(ANt,"from_config()"),ANt.forEach(t),bRr=r(Jte,` class
method.`),Jte.forEach(t),vRr=i(Ul),zx=n(Ul,"P",{});var OWe=s(zx);FRr=r(OWe,"This class cannot be instantiated directly using "),X4e=n(OWe,"CODE",{});var LNt=s(X4e);TRr=r(LNt,"__init__()"),LNt.forEach(t),MRr=r(OWe," (throws an error)."),OWe.forEach(t),ERr=i(Ul),Vt=n(Ul,"DIV",{class:!0});var C6=s(Vt);T(Qx.$$.fragment,C6),CRr=i(C6),z4e=n(C6,"P",{});var yNt=s(z4e);wRr=r(yNt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yNt.forEach(t),ARr=i(C6),qc=n(C6,"P",{});var Yte=s(qc);LRr=r(Yte,`Note:
Loading a model from its configuration file does `),Q4e=n(Yte,"STRONG",{});var xNt=s(Q4e);yRr=r(xNt,"not"),xNt.forEach(t),xRr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),KK=n(Yte,"A",{href:!0});var $Nt=s(KK);$Rr=r($Nt,"from_pretrained()"),$Nt.forEach(t),kRr=r(Yte," to load the model weights."),Yte.forEach(t),SRr=i(C6),T(oC.$$.fragment,C6),C6.forEach(t),RRr=i(Ul),Dr=n(Ul,"DIV",{class:!0});var Jl=s(Dr);T(Wx.$$.fragment,Jl),PRr=i(Jl),W4e=n(Jl,"P",{});var kNt=s(W4e);BRr=r(kNt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kNt.forEach(t),IRr=i(Jl),un=n(Jl,"P",{});var w6=s(un);NRr=r(w6,"The model class to instantiate is selected based on the "),H4e=n(w6,"CODE",{});var SNt=s(H4e);qRr=r(SNt,"model_type"),SNt.forEach(t),jRr=r(w6,` property of the config object (either
passed as an argument or loaded from `),U4e=n(w6,"CODE",{});var RNt=s(U4e);DRr=r(RNt,"pretrained_model_name_or_path"),RNt.forEach(t),GRr=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=n(w6,"CODE",{});var PNt=s(J4e);ORr=r(PNt,"pretrained_model_name_or_path"),PNt.forEach(t),VRr=r(w6,":"),w6.forEach(t),XRr=i(Jl),de=n(Jl,"UL",{});var me=s(de);rC=n(me,"LI",{});var pGe=s(rC);Y4e=n(pGe,"STRONG",{});var BNt=s(Y4e);zRr=r(BNt,"albert"),BNt.forEach(t),QRr=r(pGe," \u2014 "),ZK=n(pGe,"A",{href:!0});var INt=s(ZK);WRr=r(INt,"TFAlbertForTokenClassification"),INt.forEach(t),HRr=r(pGe," (ALBERT model)"),pGe.forEach(t),URr=i(me),tC=n(me,"LI",{});var _Ge=s(tC);K4e=n(_Ge,"STRONG",{});var NNt=s(K4e);JRr=r(NNt,"bert"),NNt.forEach(t),YRr=r(_Ge," \u2014 "),eZ=n(_Ge,"A",{href:!0});var qNt=s(eZ);KRr=r(qNt,"TFBertForTokenClassification"),qNt.forEach(t),ZRr=r(_Ge," (BERT model)"),_Ge.forEach(t),ePr=i(me),aC=n(me,"LI",{});var uGe=s(aC);Z4e=n(uGe,"STRONG",{});var jNt=s(Z4e);oPr=r(jNt,"camembert"),jNt.forEach(t),rPr=r(uGe," \u2014 "),oZ=n(uGe,"A",{href:!0});var DNt=s(oZ);tPr=r(DNt,"TFCamembertForTokenClassification"),DNt.forEach(t),aPr=r(uGe," (CamemBERT model)"),uGe.forEach(t),nPr=i(me),nC=n(me,"LI",{});var bGe=s(nC);eEe=n(bGe,"STRONG",{});var GNt=s(eEe);sPr=r(GNt,"convbert"),GNt.forEach(t),lPr=r(bGe," \u2014 "),rZ=n(bGe,"A",{href:!0});var ONt=s(rZ);iPr=r(ONt,"TFConvBertForTokenClassification"),ONt.forEach(t),dPr=r(bGe," (ConvBERT model)"),bGe.forEach(t),cPr=i(me),sC=n(me,"LI",{});var vGe=s(sC);oEe=n(vGe,"STRONG",{});var VNt=s(oEe);fPr=r(VNt,"deberta"),VNt.forEach(t),mPr=r(vGe," \u2014 "),tZ=n(vGe,"A",{href:!0});var XNt=s(tZ);gPr=r(XNt,"TFDebertaForTokenClassification"),XNt.forEach(t),hPr=r(vGe," (DeBERTa model)"),vGe.forEach(t),pPr=i(me),lC=n(me,"LI",{});var FGe=s(lC);rEe=n(FGe,"STRONG",{});var zNt=s(rEe);_Pr=r(zNt,"deberta-v2"),zNt.forEach(t),uPr=r(FGe," \u2014 "),aZ=n(FGe,"A",{href:!0});var QNt=s(aZ);bPr=r(QNt,"TFDebertaV2ForTokenClassification"),QNt.forEach(t),vPr=r(FGe," (DeBERTa-v2 model)"),FGe.forEach(t),FPr=i(me),iC=n(me,"LI",{});var TGe=s(iC);tEe=n(TGe,"STRONG",{});var WNt=s(tEe);TPr=r(WNt,"distilbert"),WNt.forEach(t),MPr=r(TGe," \u2014 "),nZ=n(TGe,"A",{href:!0});var HNt=s(nZ);EPr=r(HNt,"TFDistilBertForTokenClassification"),HNt.forEach(t),CPr=r(TGe," (DistilBERT model)"),TGe.forEach(t),wPr=i(me),dC=n(me,"LI",{});var MGe=s(dC);aEe=n(MGe,"STRONG",{});var UNt=s(aEe);APr=r(UNt,"electra"),UNt.forEach(t),LPr=r(MGe," \u2014 "),sZ=n(MGe,"A",{href:!0});var JNt=s(sZ);yPr=r(JNt,"TFElectraForTokenClassification"),JNt.forEach(t),xPr=r(MGe," (ELECTRA model)"),MGe.forEach(t),$Pr=i(me),cC=n(me,"LI",{});var EGe=s(cC);nEe=n(EGe,"STRONG",{});var YNt=s(nEe);kPr=r(YNt,"flaubert"),YNt.forEach(t),SPr=r(EGe," \u2014 "),lZ=n(EGe,"A",{href:!0});var KNt=s(lZ);RPr=r(KNt,"TFFlaubertForTokenClassification"),KNt.forEach(t),PPr=r(EGe," (FlauBERT model)"),EGe.forEach(t),BPr=i(me),fC=n(me,"LI",{});var CGe=s(fC);sEe=n(CGe,"STRONG",{});var ZNt=s(sEe);IPr=r(ZNt,"funnel"),ZNt.forEach(t),NPr=r(CGe," \u2014 "),iZ=n(CGe,"A",{href:!0});var eqt=s(iZ);qPr=r(eqt,"TFFunnelForTokenClassification"),eqt.forEach(t),jPr=r(CGe," (Funnel Transformer model)"),CGe.forEach(t),DPr=i(me),mC=n(me,"LI",{});var wGe=s(mC);lEe=n(wGe,"STRONG",{});var oqt=s(lEe);GPr=r(oqt,"layoutlm"),oqt.forEach(t),OPr=r(wGe," \u2014 "),dZ=n(wGe,"A",{href:!0});var rqt=s(dZ);VPr=r(rqt,"TFLayoutLMForTokenClassification"),rqt.forEach(t),XPr=r(wGe," (LayoutLM model)"),wGe.forEach(t),zPr=i(me),gC=n(me,"LI",{});var AGe=s(gC);iEe=n(AGe,"STRONG",{});var tqt=s(iEe);QPr=r(tqt,"longformer"),tqt.forEach(t),WPr=r(AGe," \u2014 "),cZ=n(AGe,"A",{href:!0});var aqt=s(cZ);HPr=r(aqt,"TFLongformerForTokenClassification"),aqt.forEach(t),UPr=r(AGe," (Longformer model)"),AGe.forEach(t),JPr=i(me),hC=n(me,"LI",{});var LGe=s(hC);dEe=n(LGe,"STRONG",{});var nqt=s(dEe);YPr=r(nqt,"mobilebert"),nqt.forEach(t),KPr=r(LGe," \u2014 "),fZ=n(LGe,"A",{href:!0});var sqt=s(fZ);ZPr=r(sqt,"TFMobileBertForTokenClassification"),sqt.forEach(t),eBr=r(LGe," (MobileBERT model)"),LGe.forEach(t),oBr=i(me),pC=n(me,"LI",{});var yGe=s(pC);cEe=n(yGe,"STRONG",{});var lqt=s(cEe);rBr=r(lqt,"mpnet"),lqt.forEach(t),tBr=r(yGe," \u2014 "),mZ=n(yGe,"A",{href:!0});var iqt=s(mZ);aBr=r(iqt,"TFMPNetForTokenClassification"),iqt.forEach(t),nBr=r(yGe," (MPNet model)"),yGe.forEach(t),sBr=i(me),_C=n(me,"LI",{});var xGe=s(_C);fEe=n(xGe,"STRONG",{});var dqt=s(fEe);lBr=r(dqt,"rembert"),dqt.forEach(t),iBr=r(xGe," \u2014 "),gZ=n(xGe,"A",{href:!0});var cqt=s(gZ);dBr=r(cqt,"TFRemBertForTokenClassification"),cqt.forEach(t),cBr=r(xGe," (RemBERT model)"),xGe.forEach(t),fBr=i(me),uC=n(me,"LI",{});var $Ge=s(uC);mEe=n($Ge,"STRONG",{});var fqt=s(mEe);mBr=r(fqt,"roberta"),fqt.forEach(t),gBr=r($Ge," \u2014 "),hZ=n($Ge,"A",{href:!0});var mqt=s(hZ);hBr=r(mqt,"TFRobertaForTokenClassification"),mqt.forEach(t),pBr=r($Ge," (RoBERTa model)"),$Ge.forEach(t),_Br=i(me),bC=n(me,"LI",{});var kGe=s(bC);gEe=n(kGe,"STRONG",{});var gqt=s(gEe);uBr=r(gqt,"roformer"),gqt.forEach(t),bBr=r(kGe," \u2014 "),pZ=n(kGe,"A",{href:!0});var hqt=s(pZ);vBr=r(hqt,"TFRoFormerForTokenClassification"),hqt.forEach(t),FBr=r(kGe," (RoFormer model)"),kGe.forEach(t),TBr=i(me),vC=n(me,"LI",{});var SGe=s(vC);hEe=n(SGe,"STRONG",{});var pqt=s(hEe);MBr=r(pqt,"xlm"),pqt.forEach(t),EBr=r(SGe," \u2014 "),_Z=n(SGe,"A",{href:!0});var _qt=s(_Z);CBr=r(_qt,"TFXLMForTokenClassification"),_qt.forEach(t),wBr=r(SGe," (XLM model)"),SGe.forEach(t),ABr=i(me),FC=n(me,"LI",{});var RGe=s(FC);pEe=n(RGe,"STRONG",{});var uqt=s(pEe);LBr=r(uqt,"xlm-roberta"),uqt.forEach(t),yBr=r(RGe," \u2014 "),uZ=n(RGe,"A",{href:!0});var bqt=s(uZ);xBr=r(bqt,"TFXLMRobertaForTokenClassification"),bqt.forEach(t),$Br=r(RGe," (XLM-RoBERTa model)"),RGe.forEach(t),kBr=i(me),TC=n(me,"LI",{});var PGe=s(TC);_Ee=n(PGe,"STRONG",{});var vqt=s(_Ee);SBr=r(vqt,"xlnet"),vqt.forEach(t),RBr=r(PGe," \u2014 "),bZ=n(PGe,"A",{href:!0});var Fqt=s(bZ);PBr=r(Fqt,"TFXLNetForTokenClassification"),Fqt.forEach(t),BBr=r(PGe," (XLNet model)"),PGe.forEach(t),me.forEach(t),IBr=i(Jl),T(MC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Pze=i(f),jc=n(f,"H2",{class:!0});var VWe=s(jc);EC=n(VWe,"A",{id:!0,class:!0,href:!0});var Tqt=s(EC);uEe=n(Tqt,"SPAN",{});var Mqt=s(uEe);T(Hx.$$.fragment,Mqt),Mqt.forEach(t),Tqt.forEach(t),NBr=i(VWe),bEe=n(VWe,"SPAN",{});var Eqt=s(bEe);qBr=r(Eqt,"TFAutoModelForQuestionAnswering"),Eqt.forEach(t),VWe.forEach(t),Bze=i(f),gr=n(f,"DIV",{class:!0});var Yl=s(gr);T(Ux.$$.fragment,Yl),jBr=i(Yl),Dc=n(Yl,"P",{});var Kte=s(Dc);DBr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vZ=n(Kte,"A",{href:!0});var Cqt=s(vZ);GBr=r(Cqt,"from_pretrained()"),Cqt.forEach(t),OBr=r(Kte," class method or the "),FZ=n(Kte,"A",{href:!0});var wqt=s(FZ);VBr=r(wqt,"from_config()"),wqt.forEach(t),XBr=r(Kte,` class
method.`),Kte.forEach(t),zBr=i(Yl),Jx=n(Yl,"P",{});var XWe=s(Jx);QBr=r(XWe,"This class cannot be instantiated directly using "),vEe=n(XWe,"CODE",{});var Aqt=s(vEe);WBr=r(Aqt,"__init__()"),Aqt.forEach(t),HBr=r(XWe," (throws an error)."),XWe.forEach(t),UBr=i(Yl),Xt=n(Yl,"DIV",{class:!0});var A6=s(Xt);T(Yx.$$.fragment,A6),JBr=i(A6),FEe=n(A6,"P",{});var Lqt=s(FEe);YBr=r(Lqt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Lqt.forEach(t),KBr=i(A6),Gc=n(A6,"P",{});var Zte=s(Gc);ZBr=r(Zte,`Note:
Loading a model from its configuration file does `),TEe=n(Zte,"STRONG",{});var yqt=s(TEe);eIr=r(yqt,"not"),yqt.forEach(t),oIr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=n(Zte,"A",{href:!0});var xqt=s(TZ);rIr=r(xqt,"from_pretrained()"),xqt.forEach(t),tIr=r(Zte," to load the model weights."),Zte.forEach(t),aIr=i(A6),T(CC.$$.fragment,A6),A6.forEach(t),nIr=i(Yl),Gr=n(Yl,"DIV",{class:!0});var Kl=s(Gr);T(Kx.$$.fragment,Kl),sIr=i(Kl),MEe=n(Kl,"P",{});var $qt=s(MEe);lIr=r($qt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$qt.forEach(t),iIr=i(Kl),bn=n(Kl,"P",{});var L6=s(bn);dIr=r(L6,"The model class to instantiate is selected based on the "),EEe=n(L6,"CODE",{});var kqt=s(EEe);cIr=r(kqt,"model_type"),kqt.forEach(t),fIr=r(L6,` property of the config object (either
passed as an argument or loaded from `),CEe=n(L6,"CODE",{});var Sqt=s(CEe);mIr=r(Sqt,"pretrained_model_name_or_path"),Sqt.forEach(t),gIr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wEe=n(L6,"CODE",{});var Rqt=s(wEe);hIr=r(Rqt,"pretrained_model_name_or_path"),Rqt.forEach(t),pIr=r(L6,":"),L6.forEach(t),_Ir=i(Kl),ce=n(Kl,"UL",{});var ge=s(ce);wC=n(ge,"LI",{});var BGe=s(wC);AEe=n(BGe,"STRONG",{});var Pqt=s(AEe);uIr=r(Pqt,"albert"),Pqt.forEach(t),bIr=r(BGe," \u2014 "),MZ=n(BGe,"A",{href:!0});var Bqt=s(MZ);vIr=r(Bqt,"TFAlbertForQuestionAnswering"),Bqt.forEach(t),FIr=r(BGe," (ALBERT model)"),BGe.forEach(t),TIr=i(ge),AC=n(ge,"LI",{});var IGe=s(AC);LEe=n(IGe,"STRONG",{});var Iqt=s(LEe);MIr=r(Iqt,"bert"),Iqt.forEach(t),EIr=r(IGe," \u2014 "),EZ=n(IGe,"A",{href:!0});var Nqt=s(EZ);CIr=r(Nqt,"TFBertForQuestionAnswering"),Nqt.forEach(t),wIr=r(IGe," (BERT model)"),IGe.forEach(t),AIr=i(ge),LC=n(ge,"LI",{});var NGe=s(LC);yEe=n(NGe,"STRONG",{});var qqt=s(yEe);LIr=r(qqt,"camembert"),qqt.forEach(t),yIr=r(NGe," \u2014 "),CZ=n(NGe,"A",{href:!0});var jqt=s(CZ);xIr=r(jqt,"TFCamembertForQuestionAnswering"),jqt.forEach(t),$Ir=r(NGe," (CamemBERT model)"),NGe.forEach(t),kIr=i(ge),yC=n(ge,"LI",{});var qGe=s(yC);xEe=n(qGe,"STRONG",{});var Dqt=s(xEe);SIr=r(Dqt,"convbert"),Dqt.forEach(t),RIr=r(qGe," \u2014 "),wZ=n(qGe,"A",{href:!0});var Gqt=s(wZ);PIr=r(Gqt,"TFConvBertForQuestionAnswering"),Gqt.forEach(t),BIr=r(qGe," (ConvBERT model)"),qGe.forEach(t),IIr=i(ge),xC=n(ge,"LI",{});var jGe=s(xC);$Ee=n(jGe,"STRONG",{});var Oqt=s($Ee);NIr=r(Oqt,"deberta"),Oqt.forEach(t),qIr=r(jGe," \u2014 "),AZ=n(jGe,"A",{href:!0});var Vqt=s(AZ);jIr=r(Vqt,"TFDebertaForQuestionAnswering"),Vqt.forEach(t),DIr=r(jGe," (DeBERTa model)"),jGe.forEach(t),GIr=i(ge),$C=n(ge,"LI",{});var DGe=s($C);kEe=n(DGe,"STRONG",{});var Xqt=s(kEe);OIr=r(Xqt,"deberta-v2"),Xqt.forEach(t),VIr=r(DGe," \u2014 "),LZ=n(DGe,"A",{href:!0});var zqt=s(LZ);XIr=r(zqt,"TFDebertaV2ForQuestionAnswering"),zqt.forEach(t),zIr=r(DGe," (DeBERTa-v2 model)"),DGe.forEach(t),QIr=i(ge),kC=n(ge,"LI",{});var GGe=s(kC);SEe=n(GGe,"STRONG",{});var Qqt=s(SEe);WIr=r(Qqt,"distilbert"),Qqt.forEach(t),HIr=r(GGe," \u2014 "),yZ=n(GGe,"A",{href:!0});var Wqt=s(yZ);UIr=r(Wqt,"TFDistilBertForQuestionAnswering"),Wqt.forEach(t),JIr=r(GGe," (DistilBERT model)"),GGe.forEach(t),YIr=i(ge),SC=n(ge,"LI",{});var OGe=s(SC);REe=n(OGe,"STRONG",{});var Hqt=s(REe);KIr=r(Hqt,"electra"),Hqt.forEach(t),ZIr=r(OGe," \u2014 "),xZ=n(OGe,"A",{href:!0});var Uqt=s(xZ);eNr=r(Uqt,"TFElectraForQuestionAnswering"),Uqt.forEach(t),oNr=r(OGe," (ELECTRA model)"),OGe.forEach(t),rNr=i(ge),RC=n(ge,"LI",{});var VGe=s(RC);PEe=n(VGe,"STRONG",{});var Jqt=s(PEe);tNr=r(Jqt,"flaubert"),Jqt.forEach(t),aNr=r(VGe," \u2014 "),$Z=n(VGe,"A",{href:!0});var Yqt=s($Z);nNr=r(Yqt,"TFFlaubertForQuestionAnsweringSimple"),Yqt.forEach(t),sNr=r(VGe," (FlauBERT model)"),VGe.forEach(t),lNr=i(ge),PC=n(ge,"LI",{});var XGe=s(PC);BEe=n(XGe,"STRONG",{});var Kqt=s(BEe);iNr=r(Kqt,"funnel"),Kqt.forEach(t),dNr=r(XGe," \u2014 "),kZ=n(XGe,"A",{href:!0});var Zqt=s(kZ);cNr=r(Zqt,"TFFunnelForQuestionAnswering"),Zqt.forEach(t),fNr=r(XGe," (Funnel Transformer model)"),XGe.forEach(t),mNr=i(ge),BC=n(ge,"LI",{});var zGe=s(BC);IEe=n(zGe,"STRONG",{});var ejt=s(IEe);gNr=r(ejt,"gptj"),ejt.forEach(t),hNr=r(zGe," \u2014 "),SZ=n(zGe,"A",{href:!0});var ojt=s(SZ);pNr=r(ojt,"TFGPTJForQuestionAnswering"),ojt.forEach(t),_Nr=r(zGe," (GPT-J model)"),zGe.forEach(t),uNr=i(ge),IC=n(ge,"LI",{});var QGe=s(IC);NEe=n(QGe,"STRONG",{});var rjt=s(NEe);bNr=r(rjt,"longformer"),rjt.forEach(t),vNr=r(QGe," \u2014 "),RZ=n(QGe,"A",{href:!0});var tjt=s(RZ);FNr=r(tjt,"TFLongformerForQuestionAnswering"),tjt.forEach(t),TNr=r(QGe," (Longformer model)"),QGe.forEach(t),MNr=i(ge),NC=n(ge,"LI",{});var WGe=s(NC);qEe=n(WGe,"STRONG",{});var ajt=s(qEe);ENr=r(ajt,"mobilebert"),ajt.forEach(t),CNr=r(WGe," \u2014 "),PZ=n(WGe,"A",{href:!0});var njt=s(PZ);wNr=r(njt,"TFMobileBertForQuestionAnswering"),njt.forEach(t),ANr=r(WGe," (MobileBERT model)"),WGe.forEach(t),LNr=i(ge),qC=n(ge,"LI",{});var HGe=s(qC);jEe=n(HGe,"STRONG",{});var sjt=s(jEe);yNr=r(sjt,"mpnet"),sjt.forEach(t),xNr=r(HGe," \u2014 "),BZ=n(HGe,"A",{href:!0});var ljt=s(BZ);$Nr=r(ljt,"TFMPNetForQuestionAnswering"),ljt.forEach(t),kNr=r(HGe," (MPNet model)"),HGe.forEach(t),SNr=i(ge),jC=n(ge,"LI",{});var UGe=s(jC);DEe=n(UGe,"STRONG",{});var ijt=s(DEe);RNr=r(ijt,"rembert"),ijt.forEach(t),PNr=r(UGe," \u2014 "),IZ=n(UGe,"A",{href:!0});var djt=s(IZ);BNr=r(djt,"TFRemBertForQuestionAnswering"),djt.forEach(t),INr=r(UGe," (RemBERT model)"),UGe.forEach(t),NNr=i(ge),DC=n(ge,"LI",{});var JGe=s(DC);GEe=n(JGe,"STRONG",{});var cjt=s(GEe);qNr=r(cjt,"roberta"),cjt.forEach(t),jNr=r(JGe," \u2014 "),NZ=n(JGe,"A",{href:!0});var fjt=s(NZ);DNr=r(fjt,"TFRobertaForQuestionAnswering"),fjt.forEach(t),GNr=r(JGe," (RoBERTa model)"),JGe.forEach(t),ONr=i(ge),GC=n(ge,"LI",{});var YGe=s(GC);OEe=n(YGe,"STRONG",{});var mjt=s(OEe);VNr=r(mjt,"roformer"),mjt.forEach(t),XNr=r(YGe," \u2014 "),qZ=n(YGe,"A",{href:!0});var gjt=s(qZ);zNr=r(gjt,"TFRoFormerForQuestionAnswering"),gjt.forEach(t),QNr=r(YGe," (RoFormer model)"),YGe.forEach(t),WNr=i(ge),OC=n(ge,"LI",{});var KGe=s(OC);VEe=n(KGe,"STRONG",{});var hjt=s(VEe);HNr=r(hjt,"xlm"),hjt.forEach(t),UNr=r(KGe," \u2014 "),jZ=n(KGe,"A",{href:!0});var pjt=s(jZ);JNr=r(pjt,"TFXLMForQuestionAnsweringSimple"),pjt.forEach(t),YNr=r(KGe," (XLM model)"),KGe.forEach(t),KNr=i(ge),VC=n(ge,"LI",{});var ZGe=s(VC);XEe=n(ZGe,"STRONG",{});var _jt=s(XEe);ZNr=r(_jt,"xlm-roberta"),_jt.forEach(t),eqr=r(ZGe," \u2014 "),DZ=n(ZGe,"A",{href:!0});var ujt=s(DZ);oqr=r(ujt,"TFXLMRobertaForQuestionAnswering"),ujt.forEach(t),rqr=r(ZGe," (XLM-RoBERTa model)"),ZGe.forEach(t),tqr=i(ge),XC=n(ge,"LI",{});var eOe=s(XC);zEe=n(eOe,"STRONG",{});var bjt=s(zEe);aqr=r(bjt,"xlnet"),bjt.forEach(t),nqr=r(eOe," \u2014 "),GZ=n(eOe,"A",{href:!0});var vjt=s(GZ);sqr=r(vjt,"TFXLNetForQuestionAnsweringSimple"),vjt.forEach(t),lqr=r(eOe," (XLNet model)"),eOe.forEach(t),ge.forEach(t),iqr=i(Kl),T(zC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Ize=i(f),Oc=n(f,"H2",{class:!0});var zWe=s(Oc);QC=n(zWe,"A",{id:!0,class:!0,href:!0});var Fjt=s(QC);QEe=n(Fjt,"SPAN",{});var Tjt=s(QEe);T(Zx.$$.fragment,Tjt),Tjt.forEach(t),Fjt.forEach(t),dqr=i(zWe),WEe=n(zWe,"SPAN",{});var Mjt=s(WEe);cqr=r(Mjt,"TFAutoModelForVision2Seq"),Mjt.forEach(t),zWe.forEach(t),Nze=i(f),hr=n(f,"DIV",{class:!0});var Zl=s(hr);T(e$.$$.fragment,Zl),fqr=i(Zl),Vc=n(Zl,"P",{});var eae=s(Vc);mqr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OZ=n(eae,"A",{href:!0});var Ejt=s(OZ);gqr=r(Ejt,"from_pretrained()"),Ejt.forEach(t),hqr=r(eae," class method or the "),VZ=n(eae,"A",{href:!0});var Cjt=s(VZ);pqr=r(Cjt,"from_config()"),Cjt.forEach(t),_qr=r(eae,` class
method.`),eae.forEach(t),uqr=i(Zl),o$=n(Zl,"P",{});var QWe=s(o$);bqr=r(QWe,"This class cannot be instantiated directly using "),HEe=n(QWe,"CODE",{});var wjt=s(HEe);vqr=r(wjt,"__init__()"),wjt.forEach(t),Fqr=r(QWe," (throws an error)."),QWe.forEach(t),Tqr=i(Zl),zt=n(Zl,"DIV",{class:!0});var y6=s(zt);T(r$.$$.fragment,y6),Mqr=i(y6),UEe=n(y6,"P",{});var Ajt=s(UEe);Eqr=r(Ajt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ajt.forEach(t),Cqr=i(y6),Xc=n(y6,"P",{});var oae=s(Xc);wqr=r(oae,`Note:
Loading a model from its configuration file does `),JEe=n(oae,"STRONG",{});var Ljt=s(JEe);Aqr=r(Ljt,"not"),Ljt.forEach(t),Lqr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=n(oae,"A",{href:!0});var yjt=s(XZ);yqr=r(yjt,"from_pretrained()"),yjt.forEach(t),xqr=r(oae," to load the model weights."),oae.forEach(t),$qr=i(y6),T(WC.$$.fragment,y6),y6.forEach(t),kqr=i(Zl),Or=n(Zl,"DIV",{class:!0});var ei=s(Or);T(t$.$$.fragment,ei),Sqr=i(ei),YEe=n(ei,"P",{});var xjt=s(YEe);Rqr=r(xjt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xjt.forEach(t),Pqr=i(ei),vn=n(ei,"P",{});var x6=s(vn);Bqr=r(x6,"The model class to instantiate is selected based on the "),KEe=n(x6,"CODE",{});var $jt=s(KEe);Iqr=r($jt,"model_type"),$jt.forEach(t),Nqr=r(x6,` property of the config object (either
passed as an argument or loaded from `),ZEe=n(x6,"CODE",{});var kjt=s(ZEe);qqr=r(kjt,"pretrained_model_name_or_path"),kjt.forEach(t),jqr=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eCe=n(x6,"CODE",{});var Sjt=s(eCe);Dqr=r(Sjt,"pretrained_model_name_or_path"),Sjt.forEach(t),Gqr=r(x6,":"),x6.forEach(t),Oqr=i(ei),oCe=n(ei,"UL",{});var Rjt=s(oCe);HC=n(Rjt,"LI",{});var oOe=s(HC);rCe=n(oOe,"STRONG",{});var Pjt=s(rCe);Vqr=r(Pjt,"vision-encoder-decoder"),Pjt.forEach(t),Xqr=r(oOe," \u2014 "),zZ=n(oOe,"A",{href:!0});var Bjt=s(zZ);zqr=r(Bjt,"TFVisionEncoderDecoderModel"),Bjt.forEach(t),Qqr=r(oOe," (Vision Encoder decoder model)"),oOe.forEach(t),Rjt.forEach(t),Wqr=i(ei),T(UC.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),qze=i(f),zc=n(f,"H2",{class:!0});var WWe=s(zc);JC=n(WWe,"A",{id:!0,class:!0,href:!0});var Ijt=s(JC);tCe=n(Ijt,"SPAN",{});var Njt=s(tCe);T(a$.$$.fragment,Njt),Njt.forEach(t),Ijt.forEach(t),Hqr=i(WWe),aCe=n(WWe,"SPAN",{});var qjt=s(aCe);Uqr=r(qjt,"TFAutoModelForSpeechSeq2Seq"),qjt.forEach(t),WWe.forEach(t),jze=i(f),pr=n(f,"DIV",{class:!0});var oi=s(pr);T(n$.$$.fragment,oi),Jqr=i(oi),Qc=n(oi,"P",{});var rae=s(Qc);Yqr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QZ=n(rae,"A",{href:!0});var jjt=s(QZ);Kqr=r(jjt,"from_pretrained()"),jjt.forEach(t),Zqr=r(rae," class method or the "),WZ=n(rae,"A",{href:!0});var Djt=s(WZ);ejr=r(Djt,"from_config()"),Djt.forEach(t),ojr=r(rae,` class
method.`),rae.forEach(t),rjr=i(oi),s$=n(oi,"P",{});var HWe=s(s$);tjr=r(HWe,"This class cannot be instantiated directly using "),nCe=n(HWe,"CODE",{});var Gjt=s(nCe);ajr=r(Gjt,"__init__()"),Gjt.forEach(t),njr=r(HWe," (throws an error)."),HWe.forEach(t),sjr=i(oi),Qt=n(oi,"DIV",{class:!0});var $6=s(Qt);T(l$.$$.fragment,$6),ljr=i($6),sCe=n($6,"P",{});var Ojt=s(sCe);ijr=r(Ojt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ojt.forEach(t),djr=i($6),Wc=n($6,"P",{});var tae=s(Wc);cjr=r(tae,`Note:
Loading a model from its configuration file does `),lCe=n(tae,"STRONG",{});var Vjt=s(lCe);fjr=r(Vjt,"not"),Vjt.forEach(t),mjr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=n(tae,"A",{href:!0});var Xjt=s(HZ);gjr=r(Xjt,"from_pretrained()"),Xjt.forEach(t),hjr=r(tae," to load the model weights."),tae.forEach(t),pjr=i($6),T(YC.$$.fragment,$6),$6.forEach(t),_jr=i(oi),Vr=n(oi,"DIV",{class:!0});var ri=s(Vr);T(i$.$$.fragment,ri),ujr=i(ri),iCe=n(ri,"P",{});var zjt=s(iCe);bjr=r(zjt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zjt.forEach(t),vjr=i(ri),Fn=n(ri,"P",{});var k6=s(Fn);Fjr=r(k6,"The model class to instantiate is selected based on the "),dCe=n(k6,"CODE",{});var Qjt=s(dCe);Tjr=r(Qjt,"model_type"),Qjt.forEach(t),Mjr=r(k6,` property of the config object (either
passed as an argument or loaded from `),cCe=n(k6,"CODE",{});var Wjt=s(cCe);Ejr=r(Wjt,"pretrained_model_name_or_path"),Wjt.forEach(t),Cjr=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fCe=n(k6,"CODE",{});var Hjt=s(fCe);wjr=r(Hjt,"pretrained_model_name_or_path"),Hjt.forEach(t),Ajr=r(k6,":"),k6.forEach(t),Ljr=i(ri),mCe=n(ri,"UL",{});var Ujt=s(mCe);KC=n(Ujt,"LI",{});var rOe=s(KC);gCe=n(rOe,"STRONG",{});var Jjt=s(gCe);yjr=r(Jjt,"speech_to_text"),Jjt.forEach(t),xjr=r(rOe," \u2014 "),UZ=n(rOe,"A",{href:!0});var Yjt=s(UZ);$jr=r(Yjt,"TFSpeech2TextForConditionalGeneration"),Yjt.forEach(t),kjr=r(rOe," (Speech2Text model)"),rOe.forEach(t),Ujt.forEach(t),Sjr=i(ri),T(ZC.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Dze=i(f),Hc=n(f,"H2",{class:!0});var UWe=s(Hc);e3=n(UWe,"A",{id:!0,class:!0,href:!0});var Kjt=s(e3);hCe=n(Kjt,"SPAN",{});var Zjt=s(hCe);T(d$.$$.fragment,Zjt),Zjt.forEach(t),Kjt.forEach(t),Rjr=i(UWe),pCe=n(UWe,"SPAN",{});var eDt=s(pCe);Pjr=r(eDt,"FlaxAutoModel"),eDt.forEach(t),UWe.forEach(t),Gze=i(f),_r=n(f,"DIV",{class:!0});var ti=s(_r);T(c$.$$.fragment,ti),Bjr=i(ti),Uc=n(ti,"P",{});var aae=s(Uc);Ijr=r(aae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JZ=n(aae,"A",{href:!0});var oDt=s(JZ);Njr=r(oDt,"from_pretrained()"),oDt.forEach(t),qjr=r(aae," class method or the "),YZ=n(aae,"A",{href:!0});var rDt=s(YZ);jjr=r(rDt,"from_config()"),rDt.forEach(t),Djr=r(aae,` class
method.`),aae.forEach(t),Gjr=i(ti),f$=n(ti,"P",{});var JWe=s(f$);Ojr=r(JWe,"This class cannot be instantiated directly using "),_Ce=n(JWe,"CODE",{});var tDt=s(_Ce);Vjr=r(tDt,"__init__()"),tDt.forEach(t),Xjr=r(JWe," (throws an error)."),JWe.forEach(t),zjr=i(ti),Wt=n(ti,"DIV",{class:!0});var S6=s(Wt);T(m$.$$.fragment,S6),Qjr=i(S6),uCe=n(S6,"P",{});var aDt=s(uCe);Wjr=r(aDt,"Instantiates one of the base model classes of the library from a configuration."),aDt.forEach(t),Hjr=i(S6),Jc=n(S6,"P",{});var nae=s(Jc);Ujr=r(nae,`Note:
Loading a model from its configuration file does `),bCe=n(nae,"STRONG",{});var nDt=s(bCe);Jjr=r(nDt,"not"),nDt.forEach(t),Yjr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),KZ=n(nae,"A",{href:!0});var sDt=s(KZ);Kjr=r(sDt,"from_pretrained()"),sDt.forEach(t),Zjr=r(nae," to load the model weights."),nae.forEach(t),eDr=i(S6),T(o3.$$.fragment,S6),S6.forEach(t),oDr=i(ti),Xr=n(ti,"DIV",{class:!0});var ai=s(Xr);T(g$.$$.fragment,ai),rDr=i(ai),vCe=n(ai,"P",{});var lDt=s(vCe);tDr=r(lDt,"Instantiate one of the base model classes of the library from a pretrained model."),lDt.forEach(t),aDr=i(ai),Tn=n(ai,"P",{});var R6=s(Tn);nDr=r(R6,"The model class to instantiate is selected based on the "),FCe=n(R6,"CODE",{});var iDt=s(FCe);sDr=r(iDt,"model_type"),iDt.forEach(t),lDr=r(R6,` property of the config object (either
passed as an argument or loaded from `),TCe=n(R6,"CODE",{});var dDt=s(TCe);iDr=r(dDt,"pretrained_model_name_or_path"),dDt.forEach(t),dDr=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MCe=n(R6,"CODE",{});var cDt=s(MCe);cDr=r(cDt,"pretrained_model_name_or_path"),cDt.forEach(t),fDr=r(R6,":"),R6.forEach(t),mDr=i(ai),oe=n(ai,"UL",{});var ae=s(oe);r3=n(ae,"LI",{});var tOe=s(r3);ECe=n(tOe,"STRONG",{});var fDt=s(ECe);gDr=r(fDt,"albert"),fDt.forEach(t),hDr=r(tOe," \u2014 "),ZZ=n(tOe,"A",{href:!0});var mDt=s(ZZ);pDr=r(mDt,"FlaxAlbertModel"),mDt.forEach(t),_Dr=r(tOe," (ALBERT model)"),tOe.forEach(t),uDr=i(ae),t3=n(ae,"LI",{});var aOe=s(t3);CCe=n(aOe,"STRONG",{});var gDt=s(CCe);bDr=r(gDt,"bart"),gDt.forEach(t),vDr=r(aOe," \u2014 "),eee=n(aOe,"A",{href:!0});var hDt=s(eee);FDr=r(hDt,"FlaxBartModel"),hDt.forEach(t),TDr=r(aOe," (BART model)"),aOe.forEach(t),MDr=i(ae),a3=n(ae,"LI",{});var nOe=s(a3);wCe=n(nOe,"STRONG",{});var pDt=s(wCe);EDr=r(pDt,"beit"),pDt.forEach(t),CDr=r(nOe," \u2014 "),oee=n(nOe,"A",{href:!0});var _Dt=s(oee);wDr=r(_Dt,"FlaxBeitModel"),_Dt.forEach(t),ADr=r(nOe," (BEiT model)"),nOe.forEach(t),LDr=i(ae),n3=n(ae,"LI",{});var sOe=s(n3);ACe=n(sOe,"STRONG",{});var uDt=s(ACe);yDr=r(uDt,"bert"),uDt.forEach(t),xDr=r(sOe," \u2014 "),ree=n(sOe,"A",{href:!0});var bDt=s(ree);$Dr=r(bDt,"FlaxBertModel"),bDt.forEach(t),kDr=r(sOe," (BERT model)"),sOe.forEach(t),SDr=i(ae),s3=n(ae,"LI",{});var lOe=s(s3);LCe=n(lOe,"STRONG",{});var vDt=s(LCe);RDr=r(vDt,"big_bird"),vDt.forEach(t),PDr=r(lOe," \u2014 "),tee=n(lOe,"A",{href:!0});var FDt=s(tee);BDr=r(FDt,"FlaxBigBirdModel"),FDt.forEach(t),IDr=r(lOe," (BigBird model)"),lOe.forEach(t),NDr=i(ae),l3=n(ae,"LI",{});var iOe=s(l3);yCe=n(iOe,"STRONG",{});var TDt=s(yCe);qDr=r(TDt,"blenderbot"),TDt.forEach(t),jDr=r(iOe," \u2014 "),aee=n(iOe,"A",{href:!0});var MDt=s(aee);DDr=r(MDt,"FlaxBlenderbotModel"),MDt.forEach(t),GDr=r(iOe," (Blenderbot model)"),iOe.forEach(t),ODr=i(ae),i3=n(ae,"LI",{});var dOe=s(i3);xCe=n(dOe,"STRONG",{});var EDt=s(xCe);VDr=r(EDt,"blenderbot-small"),EDt.forEach(t),XDr=r(dOe," \u2014 "),nee=n(dOe,"A",{href:!0});var CDt=s(nee);zDr=r(CDt,"FlaxBlenderbotSmallModel"),CDt.forEach(t),QDr=r(dOe," (BlenderbotSmall model)"),dOe.forEach(t),WDr=i(ae),d3=n(ae,"LI",{});var cOe=s(d3);$Ce=n(cOe,"STRONG",{});var wDt=s($Ce);HDr=r(wDt,"clip"),wDt.forEach(t),UDr=r(cOe," \u2014 "),see=n(cOe,"A",{href:!0});var ADt=s(see);JDr=r(ADt,"FlaxCLIPModel"),ADt.forEach(t),YDr=r(cOe," (CLIP model)"),cOe.forEach(t),KDr=i(ae),c3=n(ae,"LI",{});var fOe=s(c3);kCe=n(fOe,"STRONG",{});var LDt=s(kCe);ZDr=r(LDt,"distilbert"),LDt.forEach(t),eGr=r(fOe," \u2014 "),lee=n(fOe,"A",{href:!0});var yDt=s(lee);oGr=r(yDt,"FlaxDistilBertModel"),yDt.forEach(t),rGr=r(fOe," (DistilBERT model)"),fOe.forEach(t),tGr=i(ae),f3=n(ae,"LI",{});var mOe=s(f3);SCe=n(mOe,"STRONG",{});var xDt=s(SCe);aGr=r(xDt,"electra"),xDt.forEach(t),nGr=r(mOe," \u2014 "),iee=n(mOe,"A",{href:!0});var $Dt=s(iee);sGr=r($Dt,"FlaxElectraModel"),$Dt.forEach(t),lGr=r(mOe," (ELECTRA model)"),mOe.forEach(t),iGr=i(ae),m3=n(ae,"LI",{});var gOe=s(m3);RCe=n(gOe,"STRONG",{});var kDt=s(RCe);dGr=r(kDt,"gpt2"),kDt.forEach(t),cGr=r(gOe," \u2014 "),dee=n(gOe,"A",{href:!0});var SDt=s(dee);fGr=r(SDt,"FlaxGPT2Model"),SDt.forEach(t),mGr=r(gOe," (OpenAI GPT-2 model)"),gOe.forEach(t),gGr=i(ae),g3=n(ae,"LI",{});var hOe=s(g3);PCe=n(hOe,"STRONG",{});var RDt=s(PCe);hGr=r(RDt,"gpt_neo"),RDt.forEach(t),pGr=r(hOe," \u2014 "),cee=n(hOe,"A",{href:!0});var PDt=s(cee);_Gr=r(PDt,"FlaxGPTNeoModel"),PDt.forEach(t),uGr=r(hOe," (GPT Neo model)"),hOe.forEach(t),bGr=i(ae),h3=n(ae,"LI",{});var pOe=s(h3);BCe=n(pOe,"STRONG",{});var BDt=s(BCe);vGr=r(BDt,"gptj"),BDt.forEach(t),FGr=r(pOe," \u2014 "),fee=n(pOe,"A",{href:!0});var IDt=s(fee);TGr=r(IDt,"FlaxGPTJModel"),IDt.forEach(t),MGr=r(pOe," (GPT-J model)"),pOe.forEach(t),EGr=i(ae),p3=n(ae,"LI",{});var _Oe=s(p3);ICe=n(_Oe,"STRONG",{});var NDt=s(ICe);CGr=r(NDt,"longt5"),NDt.forEach(t),wGr=r(_Oe," \u2014 "),mee=n(_Oe,"A",{href:!0});var qDt=s(mee);AGr=r(qDt,"FlaxLongT5Model"),qDt.forEach(t),LGr=r(_Oe," (LongT5 model)"),_Oe.forEach(t),yGr=i(ae),_3=n(ae,"LI",{});var uOe=s(_3);NCe=n(uOe,"STRONG",{});var jDt=s(NCe);xGr=r(jDt,"marian"),jDt.forEach(t),$Gr=r(uOe," \u2014 "),gee=n(uOe,"A",{href:!0});var DDt=s(gee);kGr=r(DDt,"FlaxMarianModel"),DDt.forEach(t),SGr=r(uOe," (Marian model)"),uOe.forEach(t),RGr=i(ae),u3=n(ae,"LI",{});var bOe=s(u3);qCe=n(bOe,"STRONG",{});var GDt=s(qCe);PGr=r(GDt,"mbart"),GDt.forEach(t),BGr=r(bOe," \u2014 "),hee=n(bOe,"A",{href:!0});var ODt=s(hee);IGr=r(ODt,"FlaxMBartModel"),ODt.forEach(t),NGr=r(bOe," (mBART model)"),bOe.forEach(t),qGr=i(ae),b3=n(ae,"LI",{});var vOe=s(b3);jCe=n(vOe,"STRONG",{});var VDt=s(jCe);jGr=r(VDt,"mt5"),VDt.forEach(t),DGr=r(vOe," \u2014 "),pee=n(vOe,"A",{href:!0});var XDt=s(pee);GGr=r(XDt,"FlaxMT5Model"),XDt.forEach(t),OGr=r(vOe," (MT5 model)"),vOe.forEach(t),VGr=i(ae),v3=n(ae,"LI",{});var FOe=s(v3);DCe=n(FOe,"STRONG",{});var zDt=s(DCe);XGr=r(zDt,"opt"),zDt.forEach(t),zGr=r(FOe," \u2014 "),_ee=n(FOe,"A",{href:!0});var QDt=s(_ee);QGr=r(QDt,"FlaxOPTModel"),QDt.forEach(t),WGr=r(FOe," (OPT model)"),FOe.forEach(t),HGr=i(ae),F3=n(ae,"LI",{});var TOe=s(F3);GCe=n(TOe,"STRONG",{});var WDt=s(GCe);UGr=r(WDt,"pegasus"),WDt.forEach(t),JGr=r(TOe," \u2014 "),uee=n(TOe,"A",{href:!0});var HDt=s(uee);YGr=r(HDt,"FlaxPegasusModel"),HDt.forEach(t),KGr=r(TOe," (Pegasus model)"),TOe.forEach(t),ZGr=i(ae),T3=n(ae,"LI",{});var MOe=s(T3);OCe=n(MOe,"STRONG",{});var UDt=s(OCe);eOr=r(UDt,"roberta"),UDt.forEach(t),oOr=r(MOe," \u2014 "),bee=n(MOe,"A",{href:!0});var JDt=s(bee);rOr=r(JDt,"FlaxRobertaModel"),JDt.forEach(t),tOr=r(MOe," (RoBERTa model)"),MOe.forEach(t),aOr=i(ae),M3=n(ae,"LI",{});var EOe=s(M3);VCe=n(EOe,"STRONG",{});var YDt=s(VCe);nOr=r(YDt,"roformer"),YDt.forEach(t),sOr=r(EOe," \u2014 "),vee=n(EOe,"A",{href:!0});var KDt=s(vee);lOr=r(KDt,"FlaxRoFormerModel"),KDt.forEach(t),iOr=r(EOe," (RoFormer model)"),EOe.forEach(t),dOr=i(ae),E3=n(ae,"LI",{});var COe=s(E3);XCe=n(COe,"STRONG",{});var ZDt=s(XCe);cOr=r(ZDt,"t5"),ZDt.forEach(t),fOr=r(COe," \u2014 "),Fee=n(COe,"A",{href:!0});var eGt=s(Fee);mOr=r(eGt,"FlaxT5Model"),eGt.forEach(t),gOr=r(COe," (T5 model)"),COe.forEach(t),hOr=i(ae),C3=n(ae,"LI",{});var wOe=s(C3);zCe=n(wOe,"STRONG",{});var oGt=s(zCe);pOr=r(oGt,"vision-text-dual-encoder"),oGt.forEach(t),_Or=r(wOe," \u2014 "),Tee=n(wOe,"A",{href:!0});var rGt=s(Tee);uOr=r(rGt,"FlaxVisionTextDualEncoderModel"),rGt.forEach(t),bOr=r(wOe," (VisionTextDualEncoder model)"),wOe.forEach(t),vOr=i(ae),w3=n(ae,"LI",{});var AOe=s(w3);QCe=n(AOe,"STRONG",{});var tGt=s(QCe);FOr=r(tGt,"vit"),tGt.forEach(t),TOr=r(AOe," \u2014 "),Mee=n(AOe,"A",{href:!0});var aGt=s(Mee);MOr=r(aGt,"FlaxViTModel"),aGt.forEach(t),EOr=r(AOe," (ViT model)"),AOe.forEach(t),COr=i(ae),A3=n(ae,"LI",{});var LOe=s(A3);WCe=n(LOe,"STRONG",{});var nGt=s(WCe);wOr=r(nGt,"wav2vec2"),nGt.forEach(t),AOr=r(LOe," \u2014 "),Eee=n(LOe,"A",{href:!0});var sGt=s(Eee);LOr=r(sGt,"FlaxWav2Vec2Model"),sGt.forEach(t),yOr=r(LOe," (Wav2Vec2 model)"),LOe.forEach(t),xOr=i(ae),L3=n(ae,"LI",{});var yOe=s(L3);HCe=n(yOe,"STRONG",{});var lGt=s(HCe);$Or=r(lGt,"xglm"),lGt.forEach(t),kOr=r(yOe," \u2014 "),Cee=n(yOe,"A",{href:!0});var iGt=s(Cee);SOr=r(iGt,"FlaxXGLMModel"),iGt.forEach(t),ROr=r(yOe," (XGLM model)"),yOe.forEach(t),POr=i(ae),y3=n(ae,"LI",{});var xOe=s(y3);UCe=n(xOe,"STRONG",{});var dGt=s(UCe);BOr=r(dGt,"xlm-roberta"),dGt.forEach(t),IOr=r(xOe," \u2014 "),wee=n(xOe,"A",{href:!0});var cGt=s(wee);NOr=r(cGt,"FlaxXLMRobertaModel"),cGt.forEach(t),qOr=r(xOe," (XLM-RoBERTa model)"),xOe.forEach(t),ae.forEach(t),jOr=i(ai),T(x3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Oze=i(f),Yc=n(f,"H2",{class:!0});var YWe=s(Yc);$3=n(YWe,"A",{id:!0,class:!0,href:!0});var fGt=s($3);JCe=n(fGt,"SPAN",{});var mGt=s(JCe);T(h$.$$.fragment,mGt),mGt.forEach(t),fGt.forEach(t),DOr=i(YWe),YCe=n(YWe,"SPAN",{});var gGt=s(YCe);GOr=r(gGt,"FlaxAutoModelForCausalLM"),gGt.forEach(t),YWe.forEach(t),Vze=i(f),ur=n(f,"DIV",{class:!0});var ni=s(ur);T(p$.$$.fragment,ni),OOr=i(ni),Kc=n(ni,"P",{});var sae=s(Kc);VOr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Aee=n(sae,"A",{href:!0});var hGt=s(Aee);XOr=r(hGt,"from_pretrained()"),hGt.forEach(t),zOr=r(sae," class method or the "),Lee=n(sae,"A",{href:!0});var pGt=s(Lee);QOr=r(pGt,"from_config()"),pGt.forEach(t),WOr=r(sae,` class
method.`),sae.forEach(t),HOr=i(ni),_$=n(ni,"P",{});var KWe=s(_$);UOr=r(KWe,"This class cannot be instantiated directly using "),KCe=n(KWe,"CODE",{});var _Gt=s(KCe);JOr=r(_Gt,"__init__()"),_Gt.forEach(t),YOr=r(KWe," (throws an error)."),KWe.forEach(t),KOr=i(ni),Ht=n(ni,"DIV",{class:!0});var P6=s(Ht);T(u$.$$.fragment,P6),ZOr=i(P6),ZCe=n(P6,"P",{});var uGt=s(ZCe);eVr=r(uGt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uGt.forEach(t),oVr=i(P6),Zc=n(P6,"P",{});var lae=s(Zc);rVr=r(lae,`Note:
Loading a model from its configuration file does `),e3e=n(lae,"STRONG",{});var bGt=s(e3e);tVr=r(bGt,"not"),bGt.forEach(t),aVr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=n(lae,"A",{href:!0});var vGt=s(yee);nVr=r(vGt,"from_pretrained()"),vGt.forEach(t),sVr=r(lae," to load the model weights."),lae.forEach(t),lVr=i(P6),T(k3.$$.fragment,P6),P6.forEach(t),iVr=i(ni),zr=n(ni,"DIV",{class:!0});var si=s(zr);T(b$.$$.fragment,si),dVr=i(si),o3e=n(si,"P",{});var FGt=s(o3e);cVr=r(FGt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),FGt.forEach(t),fVr=i(si),Mn=n(si,"P",{});var B6=s(Mn);mVr=r(B6,"The model class to instantiate is selected based on the "),r3e=n(B6,"CODE",{});var TGt=s(r3e);gVr=r(TGt,"model_type"),TGt.forEach(t),hVr=r(B6,` property of the config object (either
passed as an argument or loaded from `),t3e=n(B6,"CODE",{});var MGt=s(t3e);pVr=r(MGt,"pretrained_model_name_or_path"),MGt.forEach(t),_Vr=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a3e=n(B6,"CODE",{});var EGt=s(a3e);uVr=r(EGt,"pretrained_model_name_or_path"),EGt.forEach(t),bVr=r(B6,":"),B6.forEach(t),vVr=i(si),xe=n(si,"UL",{});var Ne=s(xe);S3=n(Ne,"LI",{});var $Oe=s(S3);n3e=n($Oe,"STRONG",{});var CGt=s(n3e);FVr=r(CGt,"bart"),CGt.forEach(t),TVr=r($Oe," \u2014 "),xee=n($Oe,"A",{href:!0});var wGt=s(xee);MVr=r(wGt,"FlaxBartForCausalLM"),wGt.forEach(t),EVr=r($Oe," (BART model)"),$Oe.forEach(t),CVr=i(Ne),R3=n(Ne,"LI",{});var kOe=s(R3);s3e=n(kOe,"STRONG",{});var AGt=s(s3e);wVr=r(AGt,"bert"),AGt.forEach(t),AVr=r(kOe," \u2014 "),$ee=n(kOe,"A",{href:!0});var LGt=s($ee);LVr=r(LGt,"FlaxBertForCausalLM"),LGt.forEach(t),yVr=r(kOe," (BERT model)"),kOe.forEach(t),xVr=i(Ne),P3=n(Ne,"LI",{});var SOe=s(P3);l3e=n(SOe,"STRONG",{});var yGt=s(l3e);$Vr=r(yGt,"big_bird"),yGt.forEach(t),kVr=r(SOe," \u2014 "),kee=n(SOe,"A",{href:!0});var xGt=s(kee);SVr=r(xGt,"FlaxBigBirdForCausalLM"),xGt.forEach(t),RVr=r(SOe," (BigBird model)"),SOe.forEach(t),PVr=i(Ne),B3=n(Ne,"LI",{});var ROe=s(B3);i3e=n(ROe,"STRONG",{});var $Gt=s(i3e);BVr=r($Gt,"electra"),$Gt.forEach(t),IVr=r(ROe," \u2014 "),See=n(ROe,"A",{href:!0});var kGt=s(See);NVr=r(kGt,"FlaxElectraForCausalLM"),kGt.forEach(t),qVr=r(ROe," (ELECTRA model)"),ROe.forEach(t),jVr=i(Ne),I3=n(Ne,"LI",{});var POe=s(I3);d3e=n(POe,"STRONG",{});var SGt=s(d3e);DVr=r(SGt,"gpt2"),SGt.forEach(t),GVr=r(POe," \u2014 "),Ree=n(POe,"A",{href:!0});var RGt=s(Ree);OVr=r(RGt,"FlaxGPT2LMHeadModel"),RGt.forEach(t),VVr=r(POe," (OpenAI GPT-2 model)"),POe.forEach(t),XVr=i(Ne),N3=n(Ne,"LI",{});var BOe=s(N3);c3e=n(BOe,"STRONG",{});var PGt=s(c3e);zVr=r(PGt,"gpt_neo"),PGt.forEach(t),QVr=r(BOe," \u2014 "),Pee=n(BOe,"A",{href:!0});var BGt=s(Pee);WVr=r(BGt,"FlaxGPTNeoForCausalLM"),BGt.forEach(t),HVr=r(BOe," (GPT Neo model)"),BOe.forEach(t),UVr=i(Ne),q3=n(Ne,"LI",{});var IOe=s(q3);f3e=n(IOe,"STRONG",{});var IGt=s(f3e);JVr=r(IGt,"gptj"),IGt.forEach(t),YVr=r(IOe," \u2014 "),Bee=n(IOe,"A",{href:!0});var NGt=s(Bee);KVr=r(NGt,"FlaxGPTJForCausalLM"),NGt.forEach(t),ZVr=r(IOe," (GPT-J model)"),IOe.forEach(t),eXr=i(Ne),j3=n(Ne,"LI",{});var NOe=s(j3);m3e=n(NOe,"STRONG",{});var qGt=s(m3e);oXr=r(qGt,"opt"),qGt.forEach(t),rXr=r(NOe," \u2014 "),Iee=n(NOe,"A",{href:!0});var jGt=s(Iee);tXr=r(jGt,"FlaxOPTForCausalLM"),jGt.forEach(t),aXr=r(NOe," (OPT model)"),NOe.forEach(t),nXr=i(Ne),D3=n(Ne,"LI",{});var qOe=s(D3);g3e=n(qOe,"STRONG",{});var DGt=s(g3e);sXr=r(DGt,"roberta"),DGt.forEach(t),lXr=r(qOe," \u2014 "),Nee=n(qOe,"A",{href:!0});var GGt=s(Nee);iXr=r(GGt,"FlaxRobertaForCausalLM"),GGt.forEach(t),dXr=r(qOe," (RoBERTa model)"),qOe.forEach(t),cXr=i(Ne),G3=n(Ne,"LI",{});var jOe=s(G3);h3e=n(jOe,"STRONG",{});var OGt=s(h3e);fXr=r(OGt,"xglm"),OGt.forEach(t),mXr=r(jOe," \u2014 "),qee=n(jOe,"A",{href:!0});var VGt=s(qee);gXr=r(VGt,"FlaxXGLMForCausalLM"),VGt.forEach(t),hXr=r(jOe," (XGLM model)"),jOe.forEach(t),Ne.forEach(t),pXr=i(si),T(O3.$$.fragment,si),si.forEach(t),ni.forEach(t),Xze=i(f),ef=n(f,"H2",{class:!0});var ZWe=s(ef);V3=n(ZWe,"A",{id:!0,class:!0,href:!0});var XGt=s(V3);p3e=n(XGt,"SPAN",{});var zGt=s(p3e);T(v$.$$.fragment,zGt),zGt.forEach(t),XGt.forEach(t),_Xr=i(ZWe),_3e=n(ZWe,"SPAN",{});var QGt=s(_3e);uXr=r(QGt,"FlaxAutoModelForPreTraining"),QGt.forEach(t),ZWe.forEach(t),zze=i(f),br=n(f,"DIV",{class:!0});var li=s(br);T(F$.$$.fragment,li),bXr=i(li),of=n(li,"P",{});var iae=s(of);vXr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jee=n(iae,"A",{href:!0});var WGt=s(jee);FXr=r(WGt,"from_pretrained()"),WGt.forEach(t),TXr=r(iae," class method or the "),Dee=n(iae,"A",{href:!0});var HGt=s(Dee);MXr=r(HGt,"from_config()"),HGt.forEach(t),EXr=r(iae,` class
method.`),iae.forEach(t),CXr=i(li),T$=n(li,"P",{});var eHe=s(T$);wXr=r(eHe,"This class cannot be instantiated directly using "),u3e=n(eHe,"CODE",{});var UGt=s(u3e);AXr=r(UGt,"__init__()"),UGt.forEach(t),LXr=r(eHe," (throws an error)."),eHe.forEach(t),yXr=i(li),Ut=n(li,"DIV",{class:!0});var I6=s(Ut);T(M$.$$.fragment,I6),xXr=i(I6),b3e=n(I6,"P",{});var JGt=s(b3e);$Xr=r(JGt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),JGt.forEach(t),kXr=i(I6),rf=n(I6,"P",{});var dae=s(rf);SXr=r(dae,`Note:
Loading a model from its configuration file does `),v3e=n(dae,"STRONG",{});var YGt=s(v3e);RXr=r(YGt,"not"),YGt.forEach(t),PXr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gee=n(dae,"A",{href:!0});var KGt=s(Gee);BXr=r(KGt,"from_pretrained()"),KGt.forEach(t),IXr=r(dae," to load the model weights."),dae.forEach(t),NXr=i(I6),T(X3.$$.fragment,I6),I6.forEach(t),qXr=i(li),Qr=n(li,"DIV",{class:!0});var ii=s(Qr);T(E$.$$.fragment,ii),jXr=i(ii),F3e=n(ii,"P",{});var ZGt=s(F3e);DXr=r(ZGt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ZGt.forEach(t),GXr=i(ii),En=n(ii,"P",{});var N6=s(En);OXr=r(N6,"The model class to instantiate is selected based on the "),T3e=n(N6,"CODE",{});var eOt=s(T3e);VXr=r(eOt,"model_type"),eOt.forEach(t),XXr=r(N6,` property of the config object (either
passed as an argument or loaded from `),M3e=n(N6,"CODE",{});var oOt=s(M3e);zXr=r(oOt,"pretrained_model_name_or_path"),oOt.forEach(t),QXr=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E3e=n(N6,"CODE",{});var rOt=s(E3e);WXr=r(rOt,"pretrained_model_name_or_path"),rOt.forEach(t),HXr=r(N6,":"),N6.forEach(t),UXr=i(ii),Ee=n(ii,"UL",{});var we=s(Ee);z3=n(we,"LI",{});var DOe=s(z3);C3e=n(DOe,"STRONG",{});var tOt=s(C3e);JXr=r(tOt,"albert"),tOt.forEach(t),YXr=r(DOe," \u2014 "),Oee=n(DOe,"A",{href:!0});var aOt=s(Oee);KXr=r(aOt,"FlaxAlbertForPreTraining"),aOt.forEach(t),ZXr=r(DOe," (ALBERT model)"),DOe.forEach(t),ezr=i(we),Q3=n(we,"LI",{});var GOe=s(Q3);w3e=n(GOe,"STRONG",{});var nOt=s(w3e);ozr=r(nOt,"bart"),nOt.forEach(t),rzr=r(GOe," \u2014 "),Vee=n(GOe,"A",{href:!0});var sOt=s(Vee);tzr=r(sOt,"FlaxBartForConditionalGeneration"),sOt.forEach(t),azr=r(GOe," (BART model)"),GOe.forEach(t),nzr=i(we),W3=n(we,"LI",{});var OOe=s(W3);A3e=n(OOe,"STRONG",{});var lOt=s(A3e);szr=r(lOt,"bert"),lOt.forEach(t),lzr=r(OOe," \u2014 "),Xee=n(OOe,"A",{href:!0});var iOt=s(Xee);izr=r(iOt,"FlaxBertForPreTraining"),iOt.forEach(t),dzr=r(OOe," (BERT model)"),OOe.forEach(t),czr=i(we),H3=n(we,"LI",{});var VOe=s(H3);L3e=n(VOe,"STRONG",{});var dOt=s(L3e);fzr=r(dOt,"big_bird"),dOt.forEach(t),mzr=r(VOe," \u2014 "),zee=n(VOe,"A",{href:!0});var cOt=s(zee);gzr=r(cOt,"FlaxBigBirdForPreTraining"),cOt.forEach(t),hzr=r(VOe," (BigBird model)"),VOe.forEach(t),pzr=i(we),U3=n(we,"LI",{});var XOe=s(U3);y3e=n(XOe,"STRONG",{});var fOt=s(y3e);_zr=r(fOt,"electra"),fOt.forEach(t),uzr=r(XOe," \u2014 "),Qee=n(XOe,"A",{href:!0});var mOt=s(Qee);bzr=r(mOt,"FlaxElectraForPreTraining"),mOt.forEach(t),vzr=r(XOe," (ELECTRA model)"),XOe.forEach(t),Fzr=i(we),J3=n(we,"LI",{});var zOe=s(J3);x3e=n(zOe,"STRONG",{});var gOt=s(x3e);Tzr=r(gOt,"longt5"),gOt.forEach(t),Mzr=r(zOe," \u2014 "),Wee=n(zOe,"A",{href:!0});var hOt=s(Wee);Ezr=r(hOt,"FlaxLongT5ForConditionalGeneration"),hOt.forEach(t),Czr=r(zOe," (LongT5 model)"),zOe.forEach(t),wzr=i(we),Y3=n(we,"LI",{});var QOe=s(Y3);$3e=n(QOe,"STRONG",{});var pOt=s($3e);Azr=r(pOt,"mbart"),pOt.forEach(t),Lzr=r(QOe," \u2014 "),Hee=n(QOe,"A",{href:!0});var _Ot=s(Hee);yzr=r(_Ot,"FlaxMBartForConditionalGeneration"),_Ot.forEach(t),xzr=r(QOe," (mBART model)"),QOe.forEach(t),$zr=i(we),K3=n(we,"LI",{});var WOe=s(K3);k3e=n(WOe,"STRONG",{});var uOt=s(k3e);kzr=r(uOt,"mt5"),uOt.forEach(t),Szr=r(WOe," \u2014 "),Uee=n(WOe,"A",{href:!0});var bOt=s(Uee);Rzr=r(bOt,"FlaxMT5ForConditionalGeneration"),bOt.forEach(t),Pzr=r(WOe," (MT5 model)"),WOe.forEach(t),Bzr=i(we),Z3=n(we,"LI",{});var HOe=s(Z3);S3e=n(HOe,"STRONG",{});var vOt=s(S3e);Izr=r(vOt,"roberta"),vOt.forEach(t),Nzr=r(HOe," \u2014 "),Jee=n(HOe,"A",{href:!0});var FOt=s(Jee);qzr=r(FOt,"FlaxRobertaForMaskedLM"),FOt.forEach(t),jzr=r(HOe," (RoBERTa model)"),HOe.forEach(t),Dzr=i(we),e5=n(we,"LI",{});var UOe=s(e5);R3e=n(UOe,"STRONG",{});var TOt=s(R3e);Gzr=r(TOt,"roformer"),TOt.forEach(t),Ozr=r(UOe," \u2014 "),Yee=n(UOe,"A",{href:!0});var MOt=s(Yee);Vzr=r(MOt,"FlaxRoFormerForMaskedLM"),MOt.forEach(t),Xzr=r(UOe," (RoFormer model)"),UOe.forEach(t),zzr=i(we),o5=n(we,"LI",{});var JOe=s(o5);P3e=n(JOe,"STRONG",{});var EOt=s(P3e);Qzr=r(EOt,"t5"),EOt.forEach(t),Wzr=r(JOe," \u2014 "),Kee=n(JOe,"A",{href:!0});var COt=s(Kee);Hzr=r(COt,"FlaxT5ForConditionalGeneration"),COt.forEach(t),Uzr=r(JOe," (T5 model)"),JOe.forEach(t),Jzr=i(we),r5=n(we,"LI",{});var YOe=s(r5);B3e=n(YOe,"STRONG",{});var wOt=s(B3e);Yzr=r(wOt,"wav2vec2"),wOt.forEach(t),Kzr=r(YOe," \u2014 "),Zee=n(YOe,"A",{href:!0});var AOt=s(Zee);Zzr=r(AOt,"FlaxWav2Vec2ForPreTraining"),AOt.forEach(t),eQr=r(YOe," (Wav2Vec2 model)"),YOe.forEach(t),oQr=i(we),t5=n(we,"LI",{});var KOe=s(t5);I3e=n(KOe,"STRONG",{});var LOt=s(I3e);rQr=r(LOt,"xlm-roberta"),LOt.forEach(t),tQr=r(KOe," \u2014 "),eoe=n(KOe,"A",{href:!0});var yOt=s(eoe);aQr=r(yOt,"FlaxXLMRobertaForMaskedLM"),yOt.forEach(t),nQr=r(KOe," (XLM-RoBERTa model)"),KOe.forEach(t),we.forEach(t),sQr=i(ii),T(a5.$$.fragment,ii),ii.forEach(t),li.forEach(t),Qze=i(f),tf=n(f,"H2",{class:!0});var oHe=s(tf);n5=n(oHe,"A",{id:!0,class:!0,href:!0});var xOt=s(n5);N3e=n(xOt,"SPAN",{});var $Ot=s(N3e);T(C$.$$.fragment,$Ot),$Ot.forEach(t),xOt.forEach(t),lQr=i(oHe),q3e=n(oHe,"SPAN",{});var kOt=s(q3e);iQr=r(kOt,"FlaxAutoModelForMaskedLM"),kOt.forEach(t),oHe.forEach(t),Wze=i(f),vr=n(f,"DIV",{class:!0});var di=s(vr);T(w$.$$.fragment,di),dQr=i(di),af=n(di,"P",{});var cae=s(af);cQr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ooe=n(cae,"A",{href:!0});var SOt=s(ooe);fQr=r(SOt,"from_pretrained()"),SOt.forEach(t),mQr=r(cae," class method or the "),roe=n(cae,"A",{href:!0});var ROt=s(roe);gQr=r(ROt,"from_config()"),ROt.forEach(t),hQr=r(cae,` class
method.`),cae.forEach(t),pQr=i(di),A$=n(di,"P",{});var rHe=s(A$);_Qr=r(rHe,"This class cannot be instantiated directly using "),j3e=n(rHe,"CODE",{});var POt=s(j3e);uQr=r(POt,"__init__()"),POt.forEach(t),bQr=r(rHe," (throws an error)."),rHe.forEach(t),vQr=i(di),Jt=n(di,"DIV",{class:!0});var q6=s(Jt);T(L$.$$.fragment,q6),FQr=i(q6),D3e=n(q6,"P",{});var BOt=s(D3e);TQr=r(BOt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),BOt.forEach(t),MQr=i(q6),nf=n(q6,"P",{});var fae=s(nf);EQr=r(fae,`Note:
Loading a model from its configuration file does `),G3e=n(fae,"STRONG",{});var IOt=s(G3e);CQr=r(IOt,"not"),IOt.forEach(t),wQr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),toe=n(fae,"A",{href:!0});var NOt=s(toe);AQr=r(NOt,"from_pretrained()"),NOt.forEach(t),LQr=r(fae," to load the model weights."),fae.forEach(t),yQr=i(q6),T(s5.$$.fragment,q6),q6.forEach(t),xQr=i(di),Wr=n(di,"DIV",{class:!0});var ci=s(Wr);T(y$.$$.fragment,ci),$Qr=i(ci),O3e=n(ci,"P",{});var qOt=s(O3e);kQr=r(qOt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qOt.forEach(t),SQr=i(ci),Cn=n(ci,"P",{});var j6=s(Cn);RQr=r(j6,"The model class to instantiate is selected based on the "),V3e=n(j6,"CODE",{});var jOt=s(V3e);PQr=r(jOt,"model_type"),jOt.forEach(t),BQr=r(j6,` property of the config object (either
passed as an argument or loaded from `),X3e=n(j6,"CODE",{});var DOt=s(X3e);IQr=r(DOt,"pretrained_model_name_or_path"),DOt.forEach(t),NQr=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z3e=n(j6,"CODE",{});var GOt=s(z3e);qQr=r(GOt,"pretrained_model_name_or_path"),GOt.forEach(t),jQr=r(j6,":"),j6.forEach(t),DQr=i(ci),$e=n(ci,"UL",{});var qe=s($e);l5=n(qe,"LI",{});var ZOe=s(l5);Q3e=n(ZOe,"STRONG",{});var OOt=s(Q3e);GQr=r(OOt,"albert"),OOt.forEach(t),OQr=r(ZOe," \u2014 "),aoe=n(ZOe,"A",{href:!0});var VOt=s(aoe);VQr=r(VOt,"FlaxAlbertForMaskedLM"),VOt.forEach(t),XQr=r(ZOe," (ALBERT model)"),ZOe.forEach(t),zQr=i(qe),i5=n(qe,"LI",{});var eVe=s(i5);W3e=n(eVe,"STRONG",{});var XOt=s(W3e);QQr=r(XOt,"bart"),XOt.forEach(t),WQr=r(eVe," \u2014 "),noe=n(eVe,"A",{href:!0});var zOt=s(noe);HQr=r(zOt,"FlaxBartForConditionalGeneration"),zOt.forEach(t),UQr=r(eVe," (BART model)"),eVe.forEach(t),JQr=i(qe),d5=n(qe,"LI",{});var oVe=s(d5);H3e=n(oVe,"STRONG",{});var QOt=s(H3e);YQr=r(QOt,"bert"),QOt.forEach(t),KQr=r(oVe," \u2014 "),soe=n(oVe,"A",{href:!0});var WOt=s(soe);ZQr=r(WOt,"FlaxBertForMaskedLM"),WOt.forEach(t),eWr=r(oVe," (BERT model)"),oVe.forEach(t),oWr=i(qe),c5=n(qe,"LI",{});var rVe=s(c5);U3e=n(rVe,"STRONG",{});var HOt=s(U3e);rWr=r(HOt,"big_bird"),HOt.forEach(t),tWr=r(rVe," \u2014 "),loe=n(rVe,"A",{href:!0});var UOt=s(loe);aWr=r(UOt,"FlaxBigBirdForMaskedLM"),UOt.forEach(t),nWr=r(rVe," (BigBird model)"),rVe.forEach(t),sWr=i(qe),f5=n(qe,"LI",{});var tVe=s(f5);J3e=n(tVe,"STRONG",{});var JOt=s(J3e);lWr=r(JOt,"distilbert"),JOt.forEach(t),iWr=r(tVe," \u2014 "),ioe=n(tVe,"A",{href:!0});var YOt=s(ioe);dWr=r(YOt,"FlaxDistilBertForMaskedLM"),YOt.forEach(t),cWr=r(tVe," (DistilBERT model)"),tVe.forEach(t),fWr=i(qe),m5=n(qe,"LI",{});var aVe=s(m5);Y3e=n(aVe,"STRONG",{});var KOt=s(Y3e);mWr=r(KOt,"electra"),KOt.forEach(t),gWr=r(aVe," \u2014 "),doe=n(aVe,"A",{href:!0});var ZOt=s(doe);hWr=r(ZOt,"FlaxElectraForMaskedLM"),ZOt.forEach(t),pWr=r(aVe," (ELECTRA model)"),aVe.forEach(t),_Wr=i(qe),g5=n(qe,"LI",{});var nVe=s(g5);K3e=n(nVe,"STRONG",{});var eVt=s(K3e);uWr=r(eVt,"mbart"),eVt.forEach(t),bWr=r(nVe," \u2014 "),coe=n(nVe,"A",{href:!0});var oVt=s(coe);vWr=r(oVt,"FlaxMBartForConditionalGeneration"),oVt.forEach(t),FWr=r(nVe," (mBART model)"),nVe.forEach(t),TWr=i(qe),h5=n(qe,"LI",{});var sVe=s(h5);Z3e=n(sVe,"STRONG",{});var rVt=s(Z3e);MWr=r(rVt,"roberta"),rVt.forEach(t),EWr=r(sVe," \u2014 "),foe=n(sVe,"A",{href:!0});var tVt=s(foe);CWr=r(tVt,"FlaxRobertaForMaskedLM"),tVt.forEach(t),wWr=r(sVe," (RoBERTa model)"),sVe.forEach(t),AWr=i(qe),p5=n(qe,"LI",{});var lVe=s(p5);e5e=n(lVe,"STRONG",{});var aVt=s(e5e);LWr=r(aVt,"roformer"),aVt.forEach(t),yWr=r(lVe," \u2014 "),moe=n(lVe,"A",{href:!0});var nVt=s(moe);xWr=r(nVt,"FlaxRoFormerForMaskedLM"),nVt.forEach(t),$Wr=r(lVe," (RoFormer model)"),lVe.forEach(t),kWr=i(qe),_5=n(qe,"LI",{});var iVe=s(_5);o5e=n(iVe,"STRONG",{});var sVt=s(o5e);SWr=r(sVt,"xlm-roberta"),sVt.forEach(t),RWr=r(iVe," \u2014 "),goe=n(iVe,"A",{href:!0});var lVt=s(goe);PWr=r(lVt,"FlaxXLMRobertaForMaskedLM"),lVt.forEach(t),BWr=r(iVe," (XLM-RoBERTa model)"),iVe.forEach(t),qe.forEach(t),IWr=i(ci),T(u5.$$.fragment,ci),ci.forEach(t),di.forEach(t),Hze=i(f),sf=n(f,"H2",{class:!0});var tHe=s(sf);b5=n(tHe,"A",{id:!0,class:!0,href:!0});var iVt=s(b5);r5e=n(iVt,"SPAN",{});var dVt=s(r5e);T(x$.$$.fragment,dVt),dVt.forEach(t),iVt.forEach(t),NWr=i(tHe),t5e=n(tHe,"SPAN",{});var cVt=s(t5e);qWr=r(cVt,"FlaxAutoModelForSeq2SeqLM"),cVt.forEach(t),tHe.forEach(t),Uze=i(f),Fr=n(f,"DIV",{class:!0});var fi=s(Fr);T($$.$$.fragment,fi),jWr=i(fi),lf=n(fi,"P",{});var mae=s(lf);DWr=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hoe=n(mae,"A",{href:!0});var fVt=s(hoe);GWr=r(fVt,"from_pretrained()"),fVt.forEach(t),OWr=r(mae," class method or the "),poe=n(mae,"A",{href:!0});var mVt=s(poe);VWr=r(mVt,"from_config()"),mVt.forEach(t),XWr=r(mae,` class
method.`),mae.forEach(t),zWr=i(fi),k$=n(fi,"P",{});var aHe=s(k$);QWr=r(aHe,"This class cannot be instantiated directly using "),a5e=n(aHe,"CODE",{});var gVt=s(a5e);WWr=r(gVt,"__init__()"),gVt.forEach(t),HWr=r(aHe," (throws an error)."),aHe.forEach(t),UWr=i(fi),Yt=n(fi,"DIV",{class:!0});var D6=s(Yt);T(S$.$$.fragment,D6),JWr=i(D6),n5e=n(D6,"P",{});var hVt=s(n5e);YWr=r(hVt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hVt.forEach(t),KWr=i(D6),df=n(D6,"P",{});var gae=s(df);ZWr=r(gae,`Note:
Loading a model from its configuration file does `),s5e=n(gae,"STRONG",{});var pVt=s(s5e);eHr=r(pVt,"not"),pVt.forEach(t),oHr=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),_oe=n(gae,"A",{href:!0});var _Vt=s(_oe);rHr=r(_Vt,"from_pretrained()"),_Vt.forEach(t),tHr=r(gae," to load the model weights."),gae.forEach(t),aHr=i(D6),T(v5.$$.fragment,D6),D6.forEach(t),nHr=i(fi),Hr=n(fi,"DIV",{class:!0});var mi=s(Hr);T(R$.$$.fragment,mi),sHr=i(mi),l5e=n(mi,"P",{});var uVt=s(l5e);lHr=r(uVt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uVt.forEach(t),iHr=i(mi),wn=n(mi,"P",{});var G6=s(wn);dHr=r(G6,"The model class to instantiate is selected based on the "),i5e=n(G6,"CODE",{});var bVt=s(i5e);cHr=r(bVt,"model_type"),bVt.forEach(t),fHr=r(G6,` property of the config object (either
passed as an argument or loaded from `),d5e=n(G6,"CODE",{});var vVt=s(d5e);mHr=r(vVt,"pretrained_model_name_or_path"),vVt.forEach(t),gHr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c5e=n(G6,"CODE",{});var FVt=s(c5e);hHr=r(FVt,"pretrained_model_name_or_path"),FVt.forEach(t),pHr=r(G6,":"),G6.forEach(t),_Hr=i(mi),ke=n(mi,"UL",{});var je=s(ke);F5=n(je,"LI",{});var dVe=s(F5);f5e=n(dVe,"STRONG",{});var TVt=s(f5e);uHr=r(TVt,"bart"),TVt.forEach(t),bHr=r(dVe," \u2014 "),uoe=n(dVe,"A",{href:!0});var MVt=s(uoe);vHr=r(MVt,"FlaxBartForConditionalGeneration"),MVt.forEach(t),FHr=r(dVe," (BART model)"),dVe.forEach(t),THr=i(je),T5=n(je,"LI",{});var cVe=s(T5);m5e=n(cVe,"STRONG",{});var EVt=s(m5e);MHr=r(EVt,"blenderbot"),EVt.forEach(t),EHr=r(cVe," \u2014 "),boe=n(cVe,"A",{href:!0});var CVt=s(boe);CHr=r(CVt,"FlaxBlenderbotForConditionalGeneration"),CVt.forEach(t),wHr=r(cVe," (Blenderbot model)"),cVe.forEach(t),AHr=i(je),M5=n(je,"LI",{});var fVe=s(M5);g5e=n(fVe,"STRONG",{});var wVt=s(g5e);LHr=r(wVt,"blenderbot-small"),wVt.forEach(t),yHr=r(fVe," \u2014 "),voe=n(fVe,"A",{href:!0});var AVt=s(voe);xHr=r(AVt,"FlaxBlenderbotSmallForConditionalGeneration"),AVt.forEach(t),$Hr=r(fVe," (BlenderbotSmall model)"),fVe.forEach(t),kHr=i(je),E5=n(je,"LI",{});var mVe=s(E5);h5e=n(mVe,"STRONG",{});var LVt=s(h5e);SHr=r(LVt,"encoder-decoder"),LVt.forEach(t),RHr=r(mVe," \u2014 "),Foe=n(mVe,"A",{href:!0});var yVt=s(Foe);PHr=r(yVt,"FlaxEncoderDecoderModel"),yVt.forEach(t),BHr=r(mVe," (Encoder decoder model)"),mVe.forEach(t),IHr=i(je),C5=n(je,"LI",{});var gVe=s(C5);p5e=n(gVe,"STRONG",{});var xVt=s(p5e);NHr=r(xVt,"longt5"),xVt.forEach(t),qHr=r(gVe," \u2014 "),Toe=n(gVe,"A",{href:!0});var $Vt=s(Toe);jHr=r($Vt,"FlaxLongT5ForConditionalGeneration"),$Vt.forEach(t),DHr=r(gVe," (LongT5 model)"),gVe.forEach(t),GHr=i(je),w5=n(je,"LI",{});var hVe=s(w5);_5e=n(hVe,"STRONG",{});var kVt=s(_5e);OHr=r(kVt,"marian"),kVt.forEach(t),VHr=r(hVe," \u2014 "),Moe=n(hVe,"A",{href:!0});var SVt=s(Moe);XHr=r(SVt,"FlaxMarianMTModel"),SVt.forEach(t),zHr=r(hVe," (Marian model)"),hVe.forEach(t),QHr=i(je),A5=n(je,"LI",{});var pVe=s(A5);u5e=n(pVe,"STRONG",{});var RVt=s(u5e);WHr=r(RVt,"mbart"),RVt.forEach(t),HHr=r(pVe," \u2014 "),Eoe=n(pVe,"A",{href:!0});var PVt=s(Eoe);UHr=r(PVt,"FlaxMBartForConditionalGeneration"),PVt.forEach(t),JHr=r(pVe," (mBART model)"),pVe.forEach(t),YHr=i(je),L5=n(je,"LI",{});var _Ve=s(L5);b5e=n(_Ve,"STRONG",{});var BVt=s(b5e);KHr=r(BVt,"mt5"),BVt.forEach(t),ZHr=r(_Ve," \u2014 "),Coe=n(_Ve,"A",{href:!0});var IVt=s(Coe);eUr=r(IVt,"FlaxMT5ForConditionalGeneration"),IVt.forEach(t),oUr=r(_Ve," (MT5 model)"),_Ve.forEach(t),rUr=i(je),y5=n(je,"LI",{});var uVe=s(y5);v5e=n(uVe,"STRONG",{});var NVt=s(v5e);tUr=r(NVt,"pegasus"),NVt.forEach(t),aUr=r(uVe," \u2014 "),woe=n(uVe,"A",{href:!0});var qVt=s(woe);nUr=r(qVt,"FlaxPegasusForConditionalGeneration"),qVt.forEach(t),sUr=r(uVe," (Pegasus model)"),uVe.forEach(t),lUr=i(je),x5=n(je,"LI",{});var bVe=s(x5);F5e=n(bVe,"STRONG",{});var jVt=s(F5e);iUr=r(jVt,"t5"),jVt.forEach(t),dUr=r(bVe," \u2014 "),Aoe=n(bVe,"A",{href:!0});var DVt=s(Aoe);cUr=r(DVt,"FlaxT5ForConditionalGeneration"),DVt.forEach(t),fUr=r(bVe," (T5 model)"),bVe.forEach(t),je.forEach(t),mUr=i(mi),T($5.$$.fragment,mi),mi.forEach(t),fi.forEach(t),Jze=i(f),cf=n(f,"H2",{class:!0});var nHe=s(cf);k5=n(nHe,"A",{id:!0,class:!0,href:!0});var GVt=s(k5);T5e=n(GVt,"SPAN",{});var OVt=s(T5e);T(P$.$$.fragment,OVt),OVt.forEach(t),GVt.forEach(t),gUr=i(nHe),M5e=n(nHe,"SPAN",{});var VVt=s(M5e);hUr=r(VVt,"FlaxAutoModelForSequenceClassification"),VVt.forEach(t),nHe.forEach(t),Yze=i(f),Tr=n(f,"DIV",{class:!0});var gi=s(Tr);T(B$.$$.fragment,gi),pUr=i(gi),ff=n(gi,"P",{});var hae=s(ff);_Ur=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Loe=n(hae,"A",{href:!0});var XVt=s(Loe);uUr=r(XVt,"from_pretrained()"),XVt.forEach(t),bUr=r(hae," class method or the "),yoe=n(hae,"A",{href:!0});var zVt=s(yoe);vUr=r(zVt,"from_config()"),zVt.forEach(t),FUr=r(hae,` class
method.`),hae.forEach(t),TUr=i(gi),I$=n(gi,"P",{});var sHe=s(I$);MUr=r(sHe,"This class cannot be instantiated directly using "),E5e=n(sHe,"CODE",{});var QVt=s(E5e);EUr=r(QVt,"__init__()"),QVt.forEach(t),CUr=r(sHe," (throws an error)."),sHe.forEach(t),wUr=i(gi),Kt=n(gi,"DIV",{class:!0});var O6=s(Kt);T(N$.$$.fragment,O6),AUr=i(O6),C5e=n(O6,"P",{});var WVt=s(C5e);LUr=r(WVt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),WVt.forEach(t),yUr=i(O6),mf=n(O6,"P",{});var pae=s(mf);xUr=r(pae,`Note:
Loading a model from its configuration file does `),w5e=n(pae,"STRONG",{});var HVt=s(w5e);$Ur=r(HVt,"not"),HVt.forEach(t),kUr=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),xoe=n(pae,"A",{href:!0});var UVt=s(xoe);SUr=r(UVt,"from_pretrained()"),UVt.forEach(t),RUr=r(pae," to load the model weights."),pae.forEach(t),PUr=i(O6),T(S5.$$.fragment,O6),O6.forEach(t),BUr=i(gi),Ur=n(gi,"DIV",{class:!0});var hi=s(Ur);T(q$.$$.fragment,hi),IUr=i(hi),A5e=n(hi,"P",{});var JVt=s(A5e);NUr=r(JVt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),JVt.forEach(t),qUr=i(hi),An=n(hi,"P",{});var V6=s(An);jUr=r(V6,"The model class to instantiate is selected based on the "),L5e=n(V6,"CODE",{});var YVt=s(L5e);DUr=r(YVt,"model_type"),YVt.forEach(t),GUr=r(V6,` property of the config object (either
passed as an argument or loaded from `),y5e=n(V6,"CODE",{});var KVt=s(y5e);OUr=r(KVt,"pretrained_model_name_or_path"),KVt.forEach(t),VUr=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x5e=n(V6,"CODE",{});var ZVt=s(x5e);XUr=r(ZVt,"pretrained_model_name_or_path"),ZVt.forEach(t),zUr=r(V6,":"),V6.forEach(t),QUr=i(hi),Se=n(hi,"UL",{});var De=s(Se);R5=n(De,"LI",{});var vVe=s(R5);$5e=n(vVe,"STRONG",{});var eXt=s($5e);WUr=r(eXt,"albert"),eXt.forEach(t),HUr=r(vVe," \u2014 "),$oe=n(vVe,"A",{href:!0});var oXt=s($oe);UUr=r(oXt,"FlaxAlbertForSequenceClassification"),oXt.forEach(t),JUr=r(vVe," (ALBERT model)"),vVe.forEach(t),YUr=i(De),P5=n(De,"LI",{});var FVe=s(P5);k5e=n(FVe,"STRONG",{});var rXt=s(k5e);KUr=r(rXt,"bart"),rXt.forEach(t),ZUr=r(FVe," \u2014 "),koe=n(FVe,"A",{href:!0});var tXt=s(koe);eJr=r(tXt,"FlaxBartForSequenceClassification"),tXt.forEach(t),oJr=r(FVe," (BART model)"),FVe.forEach(t),rJr=i(De),B5=n(De,"LI",{});var TVe=s(B5);S5e=n(TVe,"STRONG",{});var aXt=s(S5e);tJr=r(aXt,"bert"),aXt.forEach(t),aJr=r(TVe," \u2014 "),Soe=n(TVe,"A",{href:!0});var nXt=s(Soe);nJr=r(nXt,"FlaxBertForSequenceClassification"),nXt.forEach(t),sJr=r(TVe," (BERT model)"),TVe.forEach(t),lJr=i(De),I5=n(De,"LI",{});var MVe=s(I5);R5e=n(MVe,"STRONG",{});var sXt=s(R5e);iJr=r(sXt,"big_bird"),sXt.forEach(t),dJr=r(MVe," \u2014 "),Roe=n(MVe,"A",{href:!0});var lXt=s(Roe);cJr=r(lXt,"FlaxBigBirdForSequenceClassification"),lXt.forEach(t),fJr=r(MVe," (BigBird model)"),MVe.forEach(t),mJr=i(De),N5=n(De,"LI",{});var EVe=s(N5);P5e=n(EVe,"STRONG",{});var iXt=s(P5e);gJr=r(iXt,"distilbert"),iXt.forEach(t),hJr=r(EVe," \u2014 "),Poe=n(EVe,"A",{href:!0});var dXt=s(Poe);pJr=r(dXt,"FlaxDistilBertForSequenceClassification"),dXt.forEach(t),_Jr=r(EVe," (DistilBERT model)"),EVe.forEach(t),uJr=i(De),q5=n(De,"LI",{});var CVe=s(q5);B5e=n(CVe,"STRONG",{});var cXt=s(B5e);bJr=r(cXt,"electra"),cXt.forEach(t),vJr=r(CVe," \u2014 "),Boe=n(CVe,"A",{href:!0});var fXt=s(Boe);FJr=r(fXt,"FlaxElectraForSequenceClassification"),fXt.forEach(t),TJr=r(CVe," (ELECTRA model)"),CVe.forEach(t),MJr=i(De),j5=n(De,"LI",{});var wVe=s(j5);I5e=n(wVe,"STRONG",{});var mXt=s(I5e);EJr=r(mXt,"mbart"),mXt.forEach(t),CJr=r(wVe," \u2014 "),Ioe=n(wVe,"A",{href:!0});var gXt=s(Ioe);wJr=r(gXt,"FlaxMBartForSequenceClassification"),gXt.forEach(t),AJr=r(wVe," (mBART model)"),wVe.forEach(t),LJr=i(De),D5=n(De,"LI",{});var AVe=s(D5);N5e=n(AVe,"STRONG",{});var hXt=s(N5e);yJr=r(hXt,"roberta"),hXt.forEach(t),xJr=r(AVe," \u2014 "),Noe=n(AVe,"A",{href:!0});var pXt=s(Noe);$Jr=r(pXt,"FlaxRobertaForSequenceClassification"),pXt.forEach(t),kJr=r(AVe," (RoBERTa model)"),AVe.forEach(t),SJr=i(De),G5=n(De,"LI",{});var LVe=s(G5);q5e=n(LVe,"STRONG",{});var _Xt=s(q5e);RJr=r(_Xt,"roformer"),_Xt.forEach(t),PJr=r(LVe," \u2014 "),qoe=n(LVe,"A",{href:!0});var uXt=s(qoe);BJr=r(uXt,"FlaxRoFormerForSequenceClassification"),uXt.forEach(t),IJr=r(LVe," (RoFormer model)"),LVe.forEach(t),NJr=i(De),O5=n(De,"LI",{});var yVe=s(O5);j5e=n(yVe,"STRONG",{});var bXt=s(j5e);qJr=r(bXt,"xlm-roberta"),bXt.forEach(t),jJr=r(yVe," \u2014 "),joe=n(yVe,"A",{href:!0});var vXt=s(joe);DJr=r(vXt,"FlaxXLMRobertaForSequenceClassification"),vXt.forEach(t),GJr=r(yVe," (XLM-RoBERTa model)"),yVe.forEach(t),De.forEach(t),OJr=i(hi),T(V5.$$.fragment,hi),hi.forEach(t),gi.forEach(t),Kze=i(f),gf=n(f,"H2",{class:!0});var lHe=s(gf);X5=n(lHe,"A",{id:!0,class:!0,href:!0});var FXt=s(X5);D5e=n(FXt,"SPAN",{});var TXt=s(D5e);T(j$.$$.fragment,TXt),TXt.forEach(t),FXt.forEach(t),VJr=i(lHe),G5e=n(lHe,"SPAN",{});var MXt=s(G5e);XJr=r(MXt,"FlaxAutoModelForQuestionAnswering"),MXt.forEach(t),lHe.forEach(t),Zze=i(f),Mr=n(f,"DIV",{class:!0});var pi=s(Mr);T(D$.$$.fragment,pi),zJr=i(pi),hf=n(pi,"P",{});var _ae=s(hf);QJr=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Doe=n(_ae,"A",{href:!0});var EXt=s(Doe);WJr=r(EXt,"from_pretrained()"),EXt.forEach(t),HJr=r(_ae," class method or the "),Goe=n(_ae,"A",{href:!0});var CXt=s(Goe);UJr=r(CXt,"from_config()"),CXt.forEach(t),JJr=r(_ae,` class
method.`),_ae.forEach(t),YJr=i(pi),G$=n(pi,"P",{});var iHe=s(G$);KJr=r(iHe,"This class cannot be instantiated directly using "),O5e=n(iHe,"CODE",{});var wXt=s(O5e);ZJr=r(wXt,"__init__()"),wXt.forEach(t),eYr=r(iHe," (throws an error)."),iHe.forEach(t),oYr=i(pi),Zt=n(pi,"DIV",{class:!0});var X6=s(Zt);T(O$.$$.fragment,X6),rYr=i(X6),V5e=n(X6,"P",{});var AXt=s(V5e);tYr=r(AXt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),AXt.forEach(t),aYr=i(X6),pf=n(X6,"P",{});var uae=s(pf);nYr=r(uae,`Note:
Loading a model from its configuration file does `),X5e=n(uae,"STRONG",{});var LXt=s(X5e);sYr=r(LXt,"not"),LXt.forEach(t),lYr=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ooe=n(uae,"A",{href:!0});var yXt=s(Ooe);iYr=r(yXt,"from_pretrained()"),yXt.forEach(t),dYr=r(uae," to load the model weights."),uae.forEach(t),cYr=i(X6),T(z5.$$.fragment,X6),X6.forEach(t),fYr=i(pi),Jr=n(pi,"DIV",{class:!0});var _i=s(Jr);T(V$.$$.fragment,_i),mYr=i(_i),z5e=n(_i,"P",{});var xXt=s(z5e);gYr=r(xXt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xXt.forEach(t),hYr=i(_i),Ln=n(_i,"P",{});var z6=s(Ln);pYr=r(z6,"The model class to instantiate is selected based on the "),Q5e=n(z6,"CODE",{});var $Xt=s(Q5e);_Yr=r($Xt,"model_type"),$Xt.forEach(t),uYr=r(z6,` property of the config object (either
passed as an argument or loaded from `),W5e=n(z6,"CODE",{});var kXt=s(W5e);bYr=r(kXt,"pretrained_model_name_or_path"),kXt.forEach(t),vYr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=n(z6,"CODE",{});var SXt=s(H5e);FYr=r(SXt,"pretrained_model_name_or_path"),SXt.forEach(t),TYr=r(z6,":"),z6.forEach(t),MYr=i(_i),Re=n(_i,"UL",{});var Ge=s(Re);Q5=n(Ge,"LI",{});var xVe=s(Q5);U5e=n(xVe,"STRONG",{});var RXt=s(U5e);EYr=r(RXt,"albert"),RXt.forEach(t),CYr=r(xVe," \u2014 "),Voe=n(xVe,"A",{href:!0});var PXt=s(Voe);wYr=r(PXt,"FlaxAlbertForQuestionAnswering"),PXt.forEach(t),AYr=r(xVe," (ALBERT model)"),xVe.forEach(t),LYr=i(Ge),W5=n(Ge,"LI",{});var $Ve=s(W5);J5e=n($Ve,"STRONG",{});var BXt=s(J5e);yYr=r(BXt,"bart"),BXt.forEach(t),xYr=r($Ve," \u2014 "),Xoe=n($Ve,"A",{href:!0});var IXt=s(Xoe);$Yr=r(IXt,"FlaxBartForQuestionAnswering"),IXt.forEach(t),kYr=r($Ve," (BART model)"),$Ve.forEach(t),SYr=i(Ge),H5=n(Ge,"LI",{});var kVe=s(H5);Y5e=n(kVe,"STRONG",{});var NXt=s(Y5e);RYr=r(NXt,"bert"),NXt.forEach(t),PYr=r(kVe," \u2014 "),zoe=n(kVe,"A",{href:!0});var qXt=s(zoe);BYr=r(qXt,"FlaxBertForQuestionAnswering"),qXt.forEach(t),IYr=r(kVe," (BERT model)"),kVe.forEach(t),NYr=i(Ge),U5=n(Ge,"LI",{});var SVe=s(U5);K5e=n(SVe,"STRONG",{});var jXt=s(K5e);qYr=r(jXt,"big_bird"),jXt.forEach(t),jYr=r(SVe," \u2014 "),Qoe=n(SVe,"A",{href:!0});var DXt=s(Qoe);DYr=r(DXt,"FlaxBigBirdForQuestionAnswering"),DXt.forEach(t),GYr=r(SVe," (BigBird model)"),SVe.forEach(t),OYr=i(Ge),J5=n(Ge,"LI",{});var RVe=s(J5);Z5e=n(RVe,"STRONG",{});var GXt=s(Z5e);VYr=r(GXt,"distilbert"),GXt.forEach(t),XYr=r(RVe," \u2014 "),Woe=n(RVe,"A",{href:!0});var OXt=s(Woe);zYr=r(OXt,"FlaxDistilBertForQuestionAnswering"),OXt.forEach(t),QYr=r(RVe," (DistilBERT model)"),RVe.forEach(t),WYr=i(Ge),Y5=n(Ge,"LI",{});var PVe=s(Y5);ewe=n(PVe,"STRONG",{});var VXt=s(ewe);HYr=r(VXt,"electra"),VXt.forEach(t),UYr=r(PVe," \u2014 "),Hoe=n(PVe,"A",{href:!0});var XXt=s(Hoe);JYr=r(XXt,"FlaxElectraForQuestionAnswering"),XXt.forEach(t),YYr=r(PVe," (ELECTRA model)"),PVe.forEach(t),KYr=i(Ge),K5=n(Ge,"LI",{});var BVe=s(K5);owe=n(BVe,"STRONG",{});var zXt=s(owe);ZYr=r(zXt,"mbart"),zXt.forEach(t),eKr=r(BVe," \u2014 "),Uoe=n(BVe,"A",{href:!0});var QXt=s(Uoe);oKr=r(QXt,"FlaxMBartForQuestionAnswering"),QXt.forEach(t),rKr=r(BVe," (mBART model)"),BVe.forEach(t),tKr=i(Ge),Z5=n(Ge,"LI",{});var IVe=s(Z5);rwe=n(IVe,"STRONG",{});var WXt=s(rwe);aKr=r(WXt,"roberta"),WXt.forEach(t),nKr=r(IVe," \u2014 "),Joe=n(IVe,"A",{href:!0});var HXt=s(Joe);sKr=r(HXt,"FlaxRobertaForQuestionAnswering"),HXt.forEach(t),lKr=r(IVe," (RoBERTa model)"),IVe.forEach(t),iKr=i(Ge),ew=n(Ge,"LI",{});var NVe=s(ew);twe=n(NVe,"STRONG",{});var UXt=s(twe);dKr=r(UXt,"roformer"),UXt.forEach(t),cKr=r(NVe," \u2014 "),Yoe=n(NVe,"A",{href:!0});var JXt=s(Yoe);fKr=r(JXt,"FlaxRoFormerForQuestionAnswering"),JXt.forEach(t),mKr=r(NVe," (RoFormer model)"),NVe.forEach(t),gKr=i(Ge),ow=n(Ge,"LI",{});var qVe=s(ow);awe=n(qVe,"STRONG",{});var YXt=s(awe);hKr=r(YXt,"xlm-roberta"),YXt.forEach(t),pKr=r(qVe," \u2014 "),Koe=n(qVe,"A",{href:!0});var KXt=s(Koe);_Kr=r(KXt,"FlaxXLMRobertaForQuestionAnswering"),KXt.forEach(t),uKr=r(qVe," (XLM-RoBERTa model)"),qVe.forEach(t),Ge.forEach(t),bKr=i(_i),T(rw.$$.fragment,_i),_i.forEach(t),pi.forEach(t),eQe=i(f),_f=n(f,"H2",{class:!0});var dHe=s(_f);tw=n(dHe,"A",{id:!0,class:!0,href:!0});var ZXt=s(tw);nwe=n(ZXt,"SPAN",{});var ezt=s(nwe);T(X$.$$.fragment,ezt),ezt.forEach(t),ZXt.forEach(t),vKr=i(dHe),swe=n(dHe,"SPAN",{});var ozt=s(swe);FKr=r(ozt,"FlaxAutoModelForTokenClassification"),ozt.forEach(t),dHe.forEach(t),oQe=i(f),Er=n(f,"DIV",{class:!0});var ui=s(Er);T(z$.$$.fragment,ui),TKr=i(ui),uf=n(ui,"P",{});var bae=s(uf);MKr=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Zoe=n(bae,"A",{href:!0});var rzt=s(Zoe);EKr=r(rzt,"from_pretrained()"),rzt.forEach(t),CKr=r(bae," class method or the "),ere=n(bae,"A",{href:!0});var tzt=s(ere);wKr=r(tzt,"from_config()"),tzt.forEach(t),AKr=r(bae,` class
method.`),bae.forEach(t),LKr=i(ui),Q$=n(ui,"P",{});var cHe=s(Q$);yKr=r(cHe,"This class cannot be instantiated directly using "),lwe=n(cHe,"CODE",{});var azt=s(lwe);xKr=r(azt,"__init__()"),azt.forEach(t),$Kr=r(cHe," (throws an error)."),cHe.forEach(t),kKr=i(ui),ea=n(ui,"DIV",{class:!0});var Q6=s(ea);T(W$.$$.fragment,Q6),SKr=i(Q6),iwe=n(Q6,"P",{});var nzt=s(iwe);RKr=r(nzt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nzt.forEach(t),PKr=i(Q6),bf=n(Q6,"P",{});var vae=s(bf);BKr=r(vae,`Note:
Loading a model from its configuration file does `),dwe=n(vae,"STRONG",{});var szt=s(dwe);IKr=r(szt,"not"),szt.forEach(t),NKr=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ore=n(vae,"A",{href:!0});var lzt=s(ore);qKr=r(lzt,"from_pretrained()"),lzt.forEach(t),jKr=r(vae," to load the model weights."),vae.forEach(t),DKr=i(Q6),T(aw.$$.fragment,Q6),Q6.forEach(t),GKr=i(ui),Yr=n(ui,"DIV",{class:!0});var bi=s(Yr);T(H$.$$.fragment,bi),OKr=i(bi),cwe=n(bi,"P",{});var izt=s(cwe);VKr=r(izt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),izt.forEach(t),XKr=i(bi),yn=n(bi,"P",{});var W6=s(yn);zKr=r(W6,"The model class to instantiate is selected based on the "),fwe=n(W6,"CODE",{});var dzt=s(fwe);QKr=r(dzt,"model_type"),dzt.forEach(t),WKr=r(W6,` property of the config object (either
passed as an argument or loaded from `),mwe=n(W6,"CODE",{});var czt=s(mwe);HKr=r(czt,"pretrained_model_name_or_path"),czt.forEach(t),UKr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gwe=n(W6,"CODE",{});var fzt=s(gwe);JKr=r(fzt,"pretrained_model_name_or_path"),fzt.forEach(t),YKr=r(W6,":"),W6.forEach(t),KKr=i(bi),Xe=n(bi,"UL",{});var Eo=s(Xe);nw=n(Eo,"LI",{});var jVe=s(nw);hwe=n(jVe,"STRONG",{});var mzt=s(hwe);ZKr=r(mzt,"albert"),mzt.forEach(t),eZr=r(jVe," \u2014 "),rre=n(jVe,"A",{href:!0});var gzt=s(rre);oZr=r(gzt,"FlaxAlbertForTokenClassification"),gzt.forEach(t),rZr=r(jVe," (ALBERT model)"),jVe.forEach(t),tZr=i(Eo),sw=n(Eo,"LI",{});var DVe=s(sw);pwe=n(DVe,"STRONG",{});var hzt=s(pwe);aZr=r(hzt,"bert"),hzt.forEach(t),nZr=r(DVe," \u2014 "),tre=n(DVe,"A",{href:!0});var pzt=s(tre);sZr=r(pzt,"FlaxBertForTokenClassification"),pzt.forEach(t),lZr=r(DVe," (BERT model)"),DVe.forEach(t),iZr=i(Eo),lw=n(Eo,"LI",{});var GVe=s(lw);_we=n(GVe,"STRONG",{});var _zt=s(_we);dZr=r(_zt,"big_bird"),_zt.forEach(t),cZr=r(GVe," \u2014 "),are=n(GVe,"A",{href:!0});var uzt=s(are);fZr=r(uzt,"FlaxBigBirdForTokenClassification"),uzt.forEach(t),mZr=r(GVe," (BigBird model)"),GVe.forEach(t),gZr=i(Eo),iw=n(Eo,"LI",{});var OVe=s(iw);uwe=n(OVe,"STRONG",{});var bzt=s(uwe);hZr=r(bzt,"distilbert"),bzt.forEach(t),pZr=r(OVe," \u2014 "),nre=n(OVe,"A",{href:!0});var vzt=s(nre);_Zr=r(vzt,"FlaxDistilBertForTokenClassification"),vzt.forEach(t),uZr=r(OVe," (DistilBERT model)"),OVe.forEach(t),bZr=i(Eo),dw=n(Eo,"LI",{});var VVe=s(dw);bwe=n(VVe,"STRONG",{});var Fzt=s(bwe);vZr=r(Fzt,"electra"),Fzt.forEach(t),FZr=r(VVe," \u2014 "),sre=n(VVe,"A",{href:!0});var Tzt=s(sre);TZr=r(Tzt,"FlaxElectraForTokenClassification"),Tzt.forEach(t),MZr=r(VVe," (ELECTRA model)"),VVe.forEach(t),EZr=i(Eo),cw=n(Eo,"LI",{});var XVe=s(cw);vwe=n(XVe,"STRONG",{});var Mzt=s(vwe);CZr=r(Mzt,"roberta"),Mzt.forEach(t),wZr=r(XVe," \u2014 "),lre=n(XVe,"A",{href:!0});var Ezt=s(lre);AZr=r(Ezt,"FlaxRobertaForTokenClassification"),Ezt.forEach(t),LZr=r(XVe," (RoBERTa model)"),XVe.forEach(t),yZr=i(Eo),fw=n(Eo,"LI",{});var zVe=s(fw);Fwe=n(zVe,"STRONG",{});var Czt=s(Fwe);xZr=r(Czt,"roformer"),Czt.forEach(t),$Zr=r(zVe," \u2014 "),ire=n(zVe,"A",{href:!0});var wzt=s(ire);kZr=r(wzt,"FlaxRoFormerForTokenClassification"),wzt.forEach(t),SZr=r(zVe," (RoFormer model)"),zVe.forEach(t),RZr=i(Eo),mw=n(Eo,"LI",{});var QVe=s(mw);Twe=n(QVe,"STRONG",{});var Azt=s(Twe);PZr=r(Azt,"xlm-roberta"),Azt.forEach(t),BZr=r(QVe," \u2014 "),dre=n(QVe,"A",{href:!0});var Lzt=s(dre);IZr=r(Lzt,"FlaxXLMRobertaForTokenClassification"),Lzt.forEach(t),NZr=r(QVe," (XLM-RoBERTa model)"),QVe.forEach(t),Eo.forEach(t),qZr=i(bi),T(gw.$$.fragment,bi),bi.forEach(t),ui.forEach(t),rQe=i(f),vf=n(f,"H2",{class:!0});var fHe=s(vf);hw=n(fHe,"A",{id:!0,class:!0,href:!0});var yzt=s(hw);Mwe=n(yzt,"SPAN",{});var xzt=s(Mwe);T(U$.$$.fragment,xzt),xzt.forEach(t),yzt.forEach(t),jZr=i(fHe),Ewe=n(fHe,"SPAN",{});var $zt=s(Ewe);DZr=r($zt,"FlaxAutoModelForMultipleChoice"),$zt.forEach(t),fHe.forEach(t),tQe=i(f),Cr=n(f,"DIV",{class:!0});var vi=s(Cr);T(J$.$$.fragment,vi),GZr=i(vi),Ff=n(vi,"P",{});var Fae=s(Ff);OZr=r(Fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cre=n(Fae,"A",{href:!0});var kzt=s(cre);VZr=r(kzt,"from_pretrained()"),kzt.forEach(t),XZr=r(Fae," class method or the "),fre=n(Fae,"A",{href:!0});var Szt=s(fre);zZr=r(Szt,"from_config()"),Szt.forEach(t),QZr=r(Fae,` class
method.`),Fae.forEach(t),WZr=i(vi),Y$=n(vi,"P",{});var mHe=s(Y$);HZr=r(mHe,"This class cannot be instantiated directly using "),Cwe=n(mHe,"CODE",{});var Rzt=s(Cwe);UZr=r(Rzt,"__init__()"),Rzt.forEach(t),JZr=r(mHe," (throws an error)."),mHe.forEach(t),YZr=i(vi),oa=n(vi,"DIV",{class:!0});var H6=s(oa);T(K$.$$.fragment,H6),KZr=i(H6),wwe=n(H6,"P",{});var Pzt=s(wwe);ZZr=r(Pzt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Pzt.forEach(t),eet=i(H6),Tf=n(H6,"P",{});var Tae=s(Tf);oet=r(Tae,`Note:
Loading a model from its configuration file does `),Awe=n(Tae,"STRONG",{});var Bzt=s(Awe);ret=r(Bzt,"not"),Bzt.forEach(t),tet=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),mre=n(Tae,"A",{href:!0});var Izt=s(mre);aet=r(Izt,"from_pretrained()"),Izt.forEach(t),net=r(Tae," to load the model weights."),Tae.forEach(t),set=i(H6),T(pw.$$.fragment,H6),H6.forEach(t),iet=i(vi),Kr=n(vi,"DIV",{class:!0});var Fi=s(Kr);T(Z$.$$.fragment,Fi),det=i(Fi),Lwe=n(Fi,"P",{});var Nzt=s(Lwe);cet=r(Nzt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Nzt.forEach(t),fet=i(Fi),xn=n(Fi,"P",{});var U6=s(xn);met=r(U6,"The model class to instantiate is selected based on the "),ywe=n(U6,"CODE",{});var qzt=s(ywe);get=r(qzt,"model_type"),qzt.forEach(t),het=r(U6,` property of the config object (either
passed as an argument or loaded from `),xwe=n(U6,"CODE",{});var jzt=s(xwe);pet=r(jzt,"pretrained_model_name_or_path"),jzt.forEach(t),_et=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$we=n(U6,"CODE",{});var Dzt=s($we);uet=r(Dzt,"pretrained_model_name_or_path"),Dzt.forEach(t),bet=r(U6,":"),U6.forEach(t),vet=i(Fi),ze=n(Fi,"UL",{});var Co=s(ze);_w=n(Co,"LI",{});var WVe=s(_w);kwe=n(WVe,"STRONG",{});var Gzt=s(kwe);Fet=r(Gzt,"albert"),Gzt.forEach(t),Tet=r(WVe," \u2014 "),gre=n(WVe,"A",{href:!0});var Ozt=s(gre);Met=r(Ozt,"FlaxAlbertForMultipleChoice"),Ozt.forEach(t),Eet=r(WVe," (ALBERT model)"),WVe.forEach(t),Cet=i(Co),uw=n(Co,"LI",{});var HVe=s(uw);Swe=n(HVe,"STRONG",{});var Vzt=s(Swe);wet=r(Vzt,"bert"),Vzt.forEach(t),Aet=r(HVe," \u2014 "),hre=n(HVe,"A",{href:!0});var Xzt=s(hre);Let=r(Xzt,"FlaxBertForMultipleChoice"),Xzt.forEach(t),yet=r(HVe," (BERT model)"),HVe.forEach(t),xet=i(Co),bw=n(Co,"LI",{});var UVe=s(bw);Rwe=n(UVe,"STRONG",{});var zzt=s(Rwe);$et=r(zzt,"big_bird"),zzt.forEach(t),ket=r(UVe," \u2014 "),pre=n(UVe,"A",{href:!0});var Qzt=s(pre);Set=r(Qzt,"FlaxBigBirdForMultipleChoice"),Qzt.forEach(t),Ret=r(UVe," (BigBird model)"),UVe.forEach(t),Pet=i(Co),vw=n(Co,"LI",{});var JVe=s(vw);Pwe=n(JVe,"STRONG",{});var Wzt=s(Pwe);Bet=r(Wzt,"distilbert"),Wzt.forEach(t),Iet=r(JVe," \u2014 "),_re=n(JVe,"A",{href:!0});var Hzt=s(_re);Net=r(Hzt,"FlaxDistilBertForMultipleChoice"),Hzt.forEach(t),qet=r(JVe," (DistilBERT model)"),JVe.forEach(t),jet=i(Co),Fw=n(Co,"LI",{});var YVe=s(Fw);Bwe=n(YVe,"STRONG",{});var Uzt=s(Bwe);Det=r(Uzt,"electra"),Uzt.forEach(t),Get=r(YVe," \u2014 "),ure=n(YVe,"A",{href:!0});var Jzt=s(ure);Oet=r(Jzt,"FlaxElectraForMultipleChoice"),Jzt.forEach(t),Vet=r(YVe," (ELECTRA model)"),YVe.forEach(t),Xet=i(Co),Tw=n(Co,"LI",{});var KVe=s(Tw);Iwe=n(KVe,"STRONG",{});var Yzt=s(Iwe);zet=r(Yzt,"roberta"),Yzt.forEach(t),Qet=r(KVe," \u2014 "),bre=n(KVe,"A",{href:!0});var Kzt=s(bre);Wet=r(Kzt,"FlaxRobertaForMultipleChoice"),Kzt.forEach(t),Het=r(KVe," (RoBERTa model)"),KVe.forEach(t),Uet=i(Co),Mw=n(Co,"LI",{});var ZVe=s(Mw);Nwe=n(ZVe,"STRONG",{});var Zzt=s(Nwe);Jet=r(Zzt,"roformer"),Zzt.forEach(t),Yet=r(ZVe," \u2014 "),vre=n(ZVe,"A",{href:!0});var eQt=s(vre);Ket=r(eQt,"FlaxRoFormerForMultipleChoice"),eQt.forEach(t),Zet=r(ZVe," (RoFormer model)"),ZVe.forEach(t),eot=i(Co),Ew=n(Co,"LI",{});var eXe=s(Ew);qwe=n(eXe,"STRONG",{});var oQt=s(qwe);oot=r(oQt,"xlm-roberta"),oQt.forEach(t),rot=r(eXe," \u2014 "),Fre=n(eXe,"A",{href:!0});var rQt=s(Fre);tot=r(rQt,"FlaxXLMRobertaForMultipleChoice"),rQt.forEach(t),aot=r(eXe," (XLM-RoBERTa model)"),eXe.forEach(t),Co.forEach(t),not=i(Fi),T(Cw.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),aQe=i(f),Mf=n(f,"H2",{class:!0});var gHe=s(Mf);ww=n(gHe,"A",{id:!0,class:!0,href:!0});var tQt=s(ww);jwe=n(tQt,"SPAN",{});var aQt=s(jwe);T(ek.$$.fragment,aQt),aQt.forEach(t),tQt.forEach(t),sot=i(gHe),Dwe=n(gHe,"SPAN",{});var nQt=s(Dwe);lot=r(nQt,"FlaxAutoModelForNextSentencePrediction"),nQt.forEach(t),gHe.forEach(t),nQe=i(f),wr=n(f,"DIV",{class:!0});var Ti=s(wr);T(ok.$$.fragment,Ti),iot=i(Ti),Ef=n(Ti,"P",{});var Mae=s(Ef);dot=r(Mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Tre=n(Mae,"A",{href:!0});var sQt=s(Tre);cot=r(sQt,"from_pretrained()"),sQt.forEach(t),fot=r(Mae," class method or the "),Mre=n(Mae,"A",{href:!0});var lQt=s(Mre);mot=r(lQt,"from_config()"),lQt.forEach(t),got=r(Mae,` class
method.`),Mae.forEach(t),hot=i(Ti),rk=n(Ti,"P",{});var hHe=s(rk);pot=r(hHe,"This class cannot be instantiated directly using "),Gwe=n(hHe,"CODE",{});var iQt=s(Gwe);_ot=r(iQt,"__init__()"),iQt.forEach(t),uot=r(hHe," (throws an error)."),hHe.forEach(t),bot=i(Ti),ra=n(Ti,"DIV",{class:!0});var J6=s(ra);T(tk.$$.fragment,J6),vot=i(J6),Owe=n(J6,"P",{});var dQt=s(Owe);Fot=r(dQt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dQt.forEach(t),Tot=i(J6),Cf=n(J6,"P",{});var Eae=s(Cf);Mot=r(Eae,`Note:
Loading a model from its configuration file does `),Vwe=n(Eae,"STRONG",{});var cQt=s(Vwe);Eot=r(cQt,"not"),cQt.forEach(t),Cot=r(Eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ere=n(Eae,"A",{href:!0});var fQt=s(Ere);wot=r(fQt,"from_pretrained()"),fQt.forEach(t),Aot=r(Eae," to load the model weights."),Eae.forEach(t),Lot=i(J6),T(Aw.$$.fragment,J6),J6.forEach(t),yot=i(Ti),Zr=n(Ti,"DIV",{class:!0});var Mi=s(Zr);T(ak.$$.fragment,Mi),xot=i(Mi),Xwe=n(Mi,"P",{});var mQt=s(Xwe);$ot=r(mQt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mQt.forEach(t),kot=i(Mi),$n=n(Mi,"P",{});var Y6=s($n);Sot=r(Y6,"The model class to instantiate is selected based on the "),zwe=n(Y6,"CODE",{});var gQt=s(zwe);Rot=r(gQt,"model_type"),gQt.forEach(t),Pot=r(Y6,` property of the config object (either
passed as an argument or loaded from `),Qwe=n(Y6,"CODE",{});var hQt=s(Qwe);Bot=r(hQt,"pretrained_model_name_or_path"),hQt.forEach(t),Iot=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wwe=n(Y6,"CODE",{});var pQt=s(Wwe);Not=r(pQt,"pretrained_model_name_or_path"),pQt.forEach(t),qot=r(Y6,":"),Y6.forEach(t),jot=i(Mi),Hwe=n(Mi,"UL",{});var _Qt=s(Hwe);Lw=n(_Qt,"LI",{});var oXe=s(Lw);Uwe=n(oXe,"STRONG",{});var uQt=s(Uwe);Dot=r(uQt,"bert"),uQt.forEach(t),Got=r(oXe," \u2014 "),Cre=n(oXe,"A",{href:!0});var bQt=s(Cre);Oot=r(bQt,"FlaxBertForNextSentencePrediction"),bQt.forEach(t),Vot=r(oXe," (BERT model)"),oXe.forEach(t),_Qt.forEach(t),Xot=i(Mi),T(yw.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),sQe=i(f),wf=n(f,"H2",{class:!0});var pHe=s(wf);xw=n(pHe,"A",{id:!0,class:!0,href:!0});var vQt=s(xw);Jwe=n(vQt,"SPAN",{});var FQt=s(Jwe);T(nk.$$.fragment,FQt),FQt.forEach(t),vQt.forEach(t),zot=i(pHe),Ywe=n(pHe,"SPAN",{});var TQt=s(Ywe);Qot=r(TQt,"FlaxAutoModelForImageClassification"),TQt.forEach(t),pHe.forEach(t),lQe=i(f),Ar=n(f,"DIV",{class:!0});var Ei=s(Ar);T(sk.$$.fragment,Ei),Wot=i(Ei),Af=n(Ei,"P",{});var Cae=s(Af);Hot=r(Cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wre=n(Cae,"A",{href:!0});var MQt=s(wre);Uot=r(MQt,"from_pretrained()"),MQt.forEach(t),Jot=r(Cae," class method or the "),Are=n(Cae,"A",{href:!0});var EQt=s(Are);Yot=r(EQt,"from_config()"),EQt.forEach(t),Kot=r(Cae,` class
method.`),Cae.forEach(t),Zot=i(Ei),lk=n(Ei,"P",{});var _He=s(lk);ert=r(_He,"This class cannot be instantiated directly using "),Kwe=n(_He,"CODE",{});var CQt=s(Kwe);ort=r(CQt,"__init__()"),CQt.forEach(t),rrt=r(_He," (throws an error)."),_He.forEach(t),trt=i(Ei),ta=n(Ei,"DIV",{class:!0});var K6=s(ta);T(ik.$$.fragment,K6),art=i(K6),Zwe=n(K6,"P",{});var wQt=s(Zwe);nrt=r(wQt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wQt.forEach(t),srt=i(K6),Lf=n(K6,"P",{});var wae=s(Lf);lrt=r(wae,`Note:
Loading a model from its configuration file does `),eAe=n(wae,"STRONG",{});var AQt=s(eAe);irt=r(AQt,"not"),AQt.forEach(t),drt=r(wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lre=n(wae,"A",{href:!0});var LQt=s(Lre);crt=r(LQt,"from_pretrained()"),LQt.forEach(t),frt=r(wae," to load the model weights."),wae.forEach(t),mrt=i(K6),T($w.$$.fragment,K6),K6.forEach(t),grt=i(Ei),et=n(Ei,"DIV",{class:!0});var Ci=s(et);T(dk.$$.fragment,Ci),hrt=i(Ci),oAe=n(Ci,"P",{});var yQt=s(oAe);prt=r(yQt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),yQt.forEach(t),_rt=i(Ci),kn=n(Ci,"P",{});var Z6=s(kn);urt=r(Z6,"The model class to instantiate is selected based on the "),rAe=n(Z6,"CODE",{});var xQt=s(rAe);brt=r(xQt,"model_type"),xQt.forEach(t),vrt=r(Z6,` property of the config object (either
passed as an argument or loaded from `),tAe=n(Z6,"CODE",{});var $Qt=s(tAe);Frt=r($Qt,"pretrained_model_name_or_path"),$Qt.forEach(t),Trt=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aAe=n(Z6,"CODE",{});var kQt=s(aAe);Mrt=r(kQt,"pretrained_model_name_or_path"),kQt.forEach(t),Ert=r(Z6,":"),Z6.forEach(t),Crt=i(Ci),ck=n(Ci,"UL",{});var uHe=s(ck);kw=n(uHe,"LI",{});var rXe=s(kw);nAe=n(rXe,"STRONG",{});var SQt=s(nAe);wrt=r(SQt,"beit"),SQt.forEach(t),Art=r(rXe," \u2014 "),yre=n(rXe,"A",{href:!0});var RQt=s(yre);Lrt=r(RQt,"FlaxBeitForImageClassification"),RQt.forEach(t),yrt=r(rXe," (BEiT model)"),rXe.forEach(t),xrt=i(uHe),Sw=n(uHe,"LI",{});var tXe=s(Sw);sAe=n(tXe,"STRONG",{});var PQt=s(sAe);$rt=r(PQt,"vit"),PQt.forEach(t),krt=r(tXe," \u2014 "),xre=n(tXe,"A",{href:!0});var BQt=s(xre);Srt=r(BQt,"FlaxViTForImageClassification"),BQt.forEach(t),Rrt=r(tXe," (ViT model)"),tXe.forEach(t),uHe.forEach(t),Prt=i(Ci),T(Rw.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),iQe=i(f),yf=n(f,"H2",{class:!0});var bHe=s(yf);Pw=n(bHe,"A",{id:!0,class:!0,href:!0});var IQt=s(Pw);lAe=n(IQt,"SPAN",{});var NQt=s(lAe);T(fk.$$.fragment,NQt),NQt.forEach(t),IQt.forEach(t),Brt=i(bHe),iAe=n(bHe,"SPAN",{});var qQt=s(iAe);Irt=r(qQt,"FlaxAutoModelForVision2Seq"),qQt.forEach(t),bHe.forEach(t),dQe=i(f),Lr=n(f,"DIV",{class:!0});var wi=s(Lr);T(mk.$$.fragment,wi),Nrt=i(wi),xf=n(wi,"P",{});var Aae=s(xf);qrt=r(Aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$re=n(Aae,"A",{href:!0});var jQt=s($re);jrt=r(jQt,"from_pretrained()"),jQt.forEach(t),Drt=r(Aae," class method or the "),kre=n(Aae,"A",{href:!0});var DQt=s(kre);Grt=r(DQt,"from_config()"),DQt.forEach(t),Ort=r(Aae,` class
method.`),Aae.forEach(t),Vrt=i(wi),gk=n(wi,"P",{});var vHe=s(gk);Xrt=r(vHe,"This class cannot be instantiated directly using "),dAe=n(vHe,"CODE",{});var GQt=s(dAe);zrt=r(GQt,"__init__()"),GQt.forEach(t),Qrt=r(vHe," (throws an error)."),vHe.forEach(t),Wrt=i(wi),aa=n(wi,"DIV",{class:!0});var eL=s(aa);T(hk.$$.fragment,eL),Hrt=i(eL),cAe=n(eL,"P",{});var OQt=s(cAe);Urt=r(OQt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OQt.forEach(t),Jrt=i(eL),$f=n(eL,"P",{});var Lae=s($f);Yrt=r(Lae,`Note:
Loading a model from its configuration file does `),fAe=n(Lae,"STRONG",{});var VQt=s(fAe);Krt=r(VQt,"not"),VQt.forEach(t),Zrt=r(Lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sre=n(Lae,"A",{href:!0});var XQt=s(Sre);ett=r(XQt,"from_pretrained()"),XQt.forEach(t),ott=r(Lae," to load the model weights."),Lae.forEach(t),rtt=i(eL),T(Bw.$$.fragment,eL),eL.forEach(t),ttt=i(wi),ot=n(wi,"DIV",{class:!0});var Ai=s(ot);T(pk.$$.fragment,Ai),att=i(Ai),mAe=n(Ai,"P",{});var zQt=s(mAe);ntt=r(zQt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zQt.forEach(t),stt=i(Ai),Sn=n(Ai,"P",{});var oL=s(Sn);ltt=r(oL,"The model class to instantiate is selected based on the "),gAe=n(oL,"CODE",{});var QQt=s(gAe);itt=r(QQt,"model_type"),QQt.forEach(t),dtt=r(oL,` property of the config object (either
passed as an argument or loaded from `),hAe=n(oL,"CODE",{});var WQt=s(hAe);ctt=r(WQt,"pretrained_model_name_or_path"),WQt.forEach(t),ftt=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pAe=n(oL,"CODE",{});var HQt=s(pAe);mtt=r(HQt,"pretrained_model_name_or_path"),HQt.forEach(t),gtt=r(oL,":"),oL.forEach(t),htt=i(Ai),_Ae=n(Ai,"UL",{});var UQt=s(_Ae);Iw=n(UQt,"LI",{});var aXe=s(Iw);uAe=n(aXe,"STRONG",{});var JQt=s(uAe);ptt=r(JQt,"vision-encoder-decoder"),JQt.forEach(t),_tt=r(aXe," \u2014 "),Rre=n(aXe,"A",{href:!0});var YQt=s(Rre);utt=r(YQt,"FlaxVisionEncoderDecoderModel"),YQt.forEach(t),btt=r(aXe," (Vision Encoder decoder model)"),aXe.forEach(t),UQt.forEach(t),vtt=i(Ai),T(Nw.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(tUt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Pn,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.AutoConfig"),c(In,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.AutoModel"),c(Nn,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.AutoTokenizer"),c(Ri,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertModel"),c(qf,"id","extending-the-auto-classes"),c(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qf,"href","#extending-the-auto-classes"),c(Pi,"class","relative group"),c(Df,"id","transformers.AutoConfig"),c(Df,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Df,"href","#transformers.AutoConfig"),c(Bi,"class","relative group"),c(VS,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(XS,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertConfig"),c(zS,"href","/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartConfig"),c(QS,"href","/docs/transformers/pr_17910/en/model_doc/beit#transformers.BeitConfig"),c(WS,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertConfig"),c(HS,"href","/docs/transformers/pr_17910/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(US,"href","/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdConfig"),c(JS,"href","/docs/transformers/pr_17910/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(YS,"href","/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(KS,"href","/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(ZS,"href","/docs/transformers/pr_17910/en/model_doc/bloom#transformers.BloomConfig"),c(eR,"href","/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertConfig"),c(oR,"href","/docs/transformers/pr_17910/en/model_doc/canine#transformers.CanineConfig"),c(rR,"href","/docs/transformers/pr_17910/en/model_doc/clip#transformers.CLIPConfig"),c(tR,"href","/docs/transformers/pr_17910/en/model_doc/codegen#transformers.CodeGenConfig"),c(aR,"href","/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertConfig"),c(nR,"href","/docs/transformers/pr_17910/en/model_doc/convnext#transformers.ConvNextConfig"),c(sR,"href","/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.CTRLConfig"),c(lR,"href","/docs/transformers/pr_17910/en/model_doc/cvt#transformers.CvtConfig"),c(iR,"href","/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(dR,"href","/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(cR,"href","/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(fR,"href","/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaConfig"),c(mR,"href","/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(gR,"href","/docs/transformers/pr_17910/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(hR,"href","/docs/transformers/pr_17910/en/model_doc/deit#transformers.DeiTConfig"),c(pR,"href","/docs/transformers/pr_17910/en/model_doc/detr#transformers.DetrConfig"),c(_R,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertConfig"),c(uR,"href","/docs/transformers/pr_17910/en/model_doc/dpr#transformers.DPRConfig"),c(bR,"href","/docs/transformers/pr_17910/en/model_doc/dpt#transformers.DPTConfig"),c(vR,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraConfig"),c(FR,"href","/docs/transformers/pr_17910/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(TR,"href","/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertConfig"),c(MR,"href","/docs/transformers/pr_17910/en/model_doc/flava#transformers.FlavaConfig"),c(ER,"href","/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetConfig"),c(CR,"href","/docs/transformers/pr_17910/en/model_doc/fsmt#transformers.FSMTConfig"),c(wR,"href","/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelConfig"),c(AR,"href","/docs/transformers/pr_17910/en/model_doc/glpn#transformers.GLPNConfig"),c(LR,"href","/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2Config"),c(yR,"href","/docs/transformers/pr_17910/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(xR,"href","/docs/transformers/pr_17910/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c($R,"href","/docs/transformers/pr_17910/en/model_doc/gptj#transformers.GPTJConfig"),c(kR,"href","/docs/transformers/pr_17910/en/model_doc/groupvit#transformers.GroupViTConfig"),c(SR,"href","/docs/transformers/pr_17910/en/model_doc/hubert#transformers.HubertConfig"),c(RR,"href","/docs/transformers/pr_17910/en/model_doc/ibert#transformers.IBertConfig"),c(PR,"href","/docs/transformers/pr_17910/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(BR,"href","/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(IR,"href","/docs/transformers/pr_17910/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(NR,"href","/docs/transformers/pr_17910/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(qR,"href","/docs/transformers/pr_17910/en/model_doc/led#transformers.LEDConfig"),c(jR,"href","/docs/transformers/pr_17910/en/model_doc/levit#transformers.LevitConfig"),c(DR,"href","/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerConfig"),c(GR,"href","/docs/transformers/pr_17910/en/model_doc/longt5#transformers.LongT5Config"),c(OR,"href","/docs/transformers/pr_17910/en/model_doc/luke#transformers.LukeConfig"),c(VR,"href","/docs/transformers/pr_17910/en/model_doc/lxmert#transformers.LxmertConfig"),c(XR,"href","/docs/transformers/pr_17910/en/model_doc/m2m_100#transformers.M2M100Config"),c(zR,"href","/docs/transformers/pr_17910/en/model_doc/marian#transformers.MarianConfig"),c(QR,"href","/docs/transformers/pr_17910/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(WR,"href","/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartConfig"),c(HR,"href","/docs/transformers/pr_17910/en/model_doc/mctct#transformers.MCTCTConfig"),c(UR,"href","/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(JR,"href","/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(YR,"href","/docs/transformers/pr_17910/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(KR,"href","/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetConfig"),c(ZR,"href","/docs/transformers/pr_17910/en/model_doc/mt5#transformers.MT5Config"),c(eP,"href","/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpConfig"),c(oP,"href","/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaConfig"),c(rP,"href","/docs/transformers/pr_17910/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(tP,"href","/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(aP,"href","/docs/transformers/pr_17910/en/model_doc/opt#transformers.OPTConfig"),c(nP,"href","/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.PegasusConfig"),c(sP,"href","/docs/transformers/pr_17910/en/model_doc/perceiver#transformers.PerceiverConfig"),c(lP,"href","/docs/transformers/pr_17910/en/model_doc/plbart#transformers.PLBartConfig"),c(iP,"href","/docs/transformers/pr_17910/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(dP,"href","/docs/transformers/pr_17910/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(cP,"href","/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(fP,"href","/docs/transformers/pr_17910/en/model_doc/rag#transformers.RagConfig"),c(mP,"href","/docs/transformers/pr_17910/en/model_doc/realm#transformers.RealmConfig"),c(gP,"href","/docs/transformers/pr_17910/en/model_doc/reformer#transformers.ReformerConfig"),c(hP,"href","/docs/transformers/pr_17910/en/model_doc/regnet#transformers.RegNetConfig"),c(pP,"href","/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertConfig"),c(_P,"href","/docs/transformers/pr_17910/en/model_doc/resnet#transformers.ResNetConfig"),c(uP,"href","/docs/transformers/pr_17910/en/model_doc/retribert#transformers.RetriBertConfig"),c(bP,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaConfig"),c(vP,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerConfig"),c(FP,"href","/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerConfig"),c(TP,"href","/docs/transformers/pr_17910/en/model_doc/sew#transformers.SEWConfig"),c(MP,"href","/docs/transformers/pr_17910/en/model_doc/sew-d#transformers.SEWDConfig"),c(EP,"href","/docs/transformers/pr_17910/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(CP,"href","/docs/transformers/pr_17910/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(wP,"href","/docs/transformers/pr_17910/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(AP,"href","/docs/transformers/pr_17910/en/model_doc/splinter#transformers.SplinterConfig"),c(LP,"href","/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(yP,"href","/docs/transformers/pr_17910/en/model_doc/swin#transformers.SwinConfig"),c(xP,"href","/docs/transformers/pr_17910/en/model_doc/t5#transformers.T5Config"),c($P,"href","/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TapasConfig"),c(kP,"href","/docs/transformers/pr_17910/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(SP,"href","/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(RP,"href","/docs/transformers/pr_17910/en/model_doc/trocr#transformers.TrOCRConfig"),c(PP,"href","/docs/transformers/pr_17910/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(BP,"href","/docs/transformers/pr_17910/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(IP,"href","/docs/transformers/pr_17910/en/model_doc/van#transformers.VanConfig"),c(NP,"href","/docs/transformers/pr_17910/en/model_doc/vilt#transformers.ViltConfig"),c(qP,"href","/docs/transformers/pr_17910/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(jP,"href","/docs/transformers/pr_17910/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(DP,"href","/docs/transformers/pr_17910/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(GP,"href","/docs/transformers/pr_17910/en/model_doc/vit#transformers.ViTConfig"),c(OP,"href","/docs/transformers/pr_17910/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(VP,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(XP,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(zP,"href","/docs/transformers/pr_17910/en/model_doc/wavlm#transformers.WavLMConfig"),c(QP,"href","/docs/transformers/pr_17910/en/model_doc/xglm#transformers.XGLMConfig"),c(WP,"href","/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMConfig"),c(HP,"href","/docs/transformers/pr_17910/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(UP,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(JP,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(YP,"href","/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetConfig"),c(KP,"href","/docs/transformers/pr_17910/en/model_doc/yolos#transformers.YolosConfig"),c(ZP,"href","/docs/transformers/pr_17910/en/model_doc/yoso#transformers.YosoConfig"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"id","transformers.AutoTokenizer"),c(Zg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zg,"href","#transformers.AutoTokenizer"),c(Ni,"class","relative group"),c(eB,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(oB,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertTokenizer"),c(rB,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(tB,"href","/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartTokenizer"),c(aB,"href","/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartTokenizerFast"),c(nB,"href","/docs/transformers/pr_17910/en/model_doc/barthez#transformers.BarthezTokenizer"),c(sB,"href","/docs/transformers/pr_17910/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(lB,"href","/docs/transformers/pr_17910/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(iB,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertTokenizer"),c(dB,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertTokenizerFast"),c(cB,"href","/docs/transformers/pr_17910/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(fB,"href","/docs/transformers/pr_17910/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(mB,"href","/docs/transformers/pr_17910/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(gB,"href","/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(hB,"href","/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(pB,"href","/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(_B,"href","/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(uB,"href","/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(bB,"href","/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(vB,"href","/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(FB,"href","/docs/transformers/pr_17910/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(TB,"href","/docs/transformers/pr_17910/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(MB,"href","/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertTokenizer"),c(EB,"href","/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(CB,"href","/docs/transformers/pr_17910/en/model_doc/canine#transformers.CanineTokenizer"),c(wB,"href","/docs/transformers/pr_17910/en/model_doc/clip#transformers.CLIPTokenizer"),c(AB,"href","/docs/transformers/pr_17910/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(LB,"href","/docs/transformers/pr_17910/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(yB,"href","/docs/transformers/pr_17910/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(xB,"href","/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertTokenizer"),c($B,"href","/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(kB,"href","/docs/transformers/pr_17910/en/model_doc/cpm#transformers.CpmTokenizer"),c(SB,"href","/docs/transformers/pr_17910/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(RB,"href","/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(PB,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BB,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(IB,"href","/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaTokenizer"),c(NB,"href","/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(qB,"href","/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(jB,"href","/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(DB,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(GB,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(OB,"href","/docs/transformers/pr_17910/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(VB,"href","/docs/transformers/pr_17910/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(XB,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraTokenizer"),c(zB,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(QB,"href","/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(WB,"href","/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetTokenizer"),c(HB,"href","/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(UB,"href","/docs/transformers/pr_17910/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(JB,"href","/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelTokenizer"),c(YB,"href","/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(KB,"href","/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZB,"href","/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(eI,"href","/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(oI,"href","/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(rI,"href","/docs/transformers/pr_17910/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(tI,"href","/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aI,"href","/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(nI,"href","/docs/transformers/pr_17910/en/model_doc/clip#transformers.CLIPTokenizer"),c(sI,"href","/docs/transformers/pr_17910/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(lI,"href","/docs/transformers/pr_17910/en/model_doc/herbert#transformers.HerbertTokenizer"),c(iI,"href","/docs/transformers/pr_17910/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(dI,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(cI,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fI,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mI,"href","/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(gI,"href","/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(hI,"href","/docs/transformers/pr_17910/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(pI,"href","/docs/transformers/pr_17910/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(_I,"href","/docs/transformers/pr_17910/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(uI,"href","/docs/transformers/pr_17910/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(bI,"href","/docs/transformers/pr_17910/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(vI,"href","/docs/transformers/pr_17910/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(FI,"href","/docs/transformers/pr_17910/en/model_doc/led#transformers.LEDTokenizer"),c(TI,"href","/docs/transformers/pr_17910/en/model_doc/led#transformers.LEDTokenizerFast"),c(MI,"href","/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerTokenizer"),c(EI,"href","/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(CI,"href","/docs/transformers/pr_17910/en/model_doc/t5#transformers.T5Tokenizer"),c(wI,"href","/docs/transformers/pr_17910/en/model_doc/t5#transformers.T5TokenizerFast"),c(AI,"href","/docs/transformers/pr_17910/en/model_doc/luke#transformers.LukeTokenizer"),c(LI,"href","/docs/transformers/pr_17910/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(yI,"href","/docs/transformers/pr_17910/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(xI,"href","/docs/transformers/pr_17910/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c($I,"href","/docs/transformers/pr_17910/en/model_doc/marian#transformers.MarianTokenizer"),c(kI,"href","/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartTokenizer"),c(SI,"href","/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(RI,"href","/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(PI,"href","/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(BI,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertTokenizer"),c(II,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertTokenizerFast"),c(NI,"href","/docs/transformers/pr_17910/en/model_doc/mluke#transformers.MLukeTokenizer"),c(qI,"href","/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(jI,"href","/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(DI,"href","/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(GI,"href","/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(OI,"href","/docs/transformers/pr_17910/en/model_doc/t5#transformers.T5Tokenizer"),c(VI,"href","/docs/transformers/pr_17910/en/model_doc/t5#transformers.T5TokenizerFast"),c(XI,"href","/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpTokenizer"),c(zI,"href","/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(QI,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertTokenizer"),c(WI,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertTokenizerFast"),c(HI,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertTokenizer"),c(UI,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(JI,"href","/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(YI,"href","/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(KI,"href","/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZI,"href","/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(eN,"href","/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(oN,"href","/docs/transformers/pr_17910/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(rN,"href","/docs/transformers/pr_17910/en/model_doc/phobert#transformers.PhobertTokenizer"),c(tN,"href","/docs/transformers/pr_17910/en/model_doc/plbart#transformers.PLBartTokenizer"),c(aN,"href","/docs/transformers/pr_17910/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(nN,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertTokenizer"),c(sN,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertTokenizerFast"),c(lN,"href","/docs/transformers/pr_17910/en/model_doc/rag#transformers.RagTokenizer"),c(iN,"href","/docs/transformers/pr_17910/en/model_doc/realm#transformers.RealmTokenizer"),c(dN,"href","/docs/transformers/pr_17910/en/model_doc/realm#transformers.RealmTokenizerFast"),c(cN,"href","/docs/transformers/pr_17910/en/model_doc/reformer#transformers.ReformerTokenizer"),c(fN,"href","/docs/transformers/pr_17910/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(mN,"href","/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertTokenizer"),c(gN,"href","/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(hN,"href","/docs/transformers/pr_17910/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(pN,"href","/docs/transformers/pr_17910/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(_N,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaTokenizer"),c(uN,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bN,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(vN,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(FN,"href","/docs/transformers/pr_17910/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(TN,"href","/docs/transformers/pr_17910/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(MN,"href","/docs/transformers/pr_17910/en/model_doc/splinter#transformers.SplinterTokenizer"),c(EN,"href","/docs/transformers/pr_17910/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(CN,"href","/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(wN,"href","/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(AN,"href","/docs/transformers/pr_17910/en/model_doc/t5#transformers.T5Tokenizer"),c(LN,"href","/docs/transformers/pr_17910/en/model_doc/t5#transformers.T5TokenizerFast"),c(yN,"href","/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TapasTokenizer"),c(xN,"href","/docs/transformers/pr_17910/en/model_doc/tapex#transformers.TapexTokenizer"),c($N,"href","/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(kN,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertTokenizer"),c(SN,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertTokenizerFast"),c(RN,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertTokenizer"),c(PN,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertTokenizerFast"),c(BN,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(IN,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(NN,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(qN,"href","/docs/transformers/pr_17910/en/model_doc/xglm#transformers.XGLMTokenizer"),c(jN,"href","/docs/transformers/pr_17910/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(DN,"href","/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMTokenizer"),c(GN,"href","/docs/transformers/pr_17910/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(ON,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(VN,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(XN,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zN,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(QN,"href","/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(WN,"href","/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(HN,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertTokenizer"),c(UN,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ph,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"id","transformers.AutoFeatureExtractor"),c(Bh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bh,"href","#transformers.AutoFeatureExtractor"),c(qi,"class","relative group"),c(JN,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(YN,"href","/docs/transformers/pr_17910/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(KN,"href","/docs/transformers/pr_17910/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(ZN,"href","/docs/transformers/pr_17910/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eq,"href","/docs/transformers/pr_17910/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oq,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rq,"href","/docs/transformers/pr_17910/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(tq,"href","/docs/transformers/pr_17910/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(aq,"href","/docs/transformers/pr_17910/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(nq,"href","/docs/transformers/pr_17910/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(sq,"href","/docs/transformers/pr_17910/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(lq,"href","/docs/transformers/pr_17910/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(iq,"href","/docs/transformers/pr_17910/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(dq,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cq,"href","/docs/transformers/pr_17910/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(fq,"href","/docs/transformers/pr_17910/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(mq,"href","/docs/transformers/pr_17910/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(gq,"href","/docs/transformers/pr_17910/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(hq,"href","/docs/transformers/pr_17910/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(pq,"href","/docs/transformers/pr_17910/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(_q,"href","/docs/transformers/pr_17910/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(uq,"href","/docs/transformers/pr_17910/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(bq,"href","/docs/transformers/pr_17910/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(vq,"href","/docs/transformers/pr_17910/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_17910/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_17910/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_17910/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_17910/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wq,"href","/docs/transformers/pr_17910/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(Aq,"href","/docs/transformers/pr_17910/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Lq,"href","/docs/transformers/pr_17910/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yq,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xq,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($q,"href","/docs/transformers/pr_17910/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vp,"id","transformers.AutoProcessor"),c(vp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vp,"href","#transformers.AutoProcessor"),c(ji,"class","relative group"),c(kq,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Sq,"href","/docs/transformers/pr_17910/en/model_doc/clip#transformers.CLIPProcessor"),c(Rq,"href","/docs/transformers/pr_17910/en/model_doc/clip#transformers.CLIPProcessor"),c(Pq,"href","/docs/transformers/pr_17910/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Bq,"href","/docs/transformers/pr_17910/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Iq,"href","/docs/transformers/pr_17910/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Nq,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qq,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jq,"href","/docs/transformers/pr_17910/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Dq,"href","/docs/transformers/pr_17910/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Gq,"href","/docs/transformers/pr_17910/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Oq,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Vq,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Xq,"href","/docs/transformers/pr_17910/en/model_doc/vilt#transformers.ViltProcessor"),c(zq,"href","/docs/transformers/pr_17910/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Qq,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Wq,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Hq,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gp,"id","transformers.AutoModel"),c(Gp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gp,"href","#transformers.AutoModel"),c(Gi,"class","relative group"),c(Uq,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jq,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yq,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kq,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertModel"),c(Zq,"href","/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartModel"),c(ej,"href","/docs/transformers/pr_17910/en/model_doc/beit#transformers.BeitModel"),c(oj,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertModel"),c(rj,"href","/docs/transformers/pr_17910/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(tj,"href","/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdModel"),c(aj,"href","/docs/transformers/pr_17910/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(nj,"href","/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(sj,"href","/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(lj,"href","/docs/transformers/pr_17910/en/model_doc/bloom#transformers.BloomModel"),c(ij,"href","/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertModel"),c(dj,"href","/docs/transformers/pr_17910/en/model_doc/canine#transformers.CanineModel"),c(cj,"href","/docs/transformers/pr_17910/en/model_doc/clip#transformers.CLIPModel"),c(fj,"href","/docs/transformers/pr_17910/en/model_doc/codegen#transformers.CodeGenModel"),c(mj,"href","/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertModel"),c(gj,"href","/docs/transformers/pr_17910/en/model_doc/convnext#transformers.ConvNextModel"),c(hj,"href","/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.CTRLModel"),c(pj,"href","/docs/transformers/pr_17910/en/model_doc/cvt#transformers.CvtModel"),c(_j,"href","/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(uj,"href","/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(bj,"href","/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(vj,"href","/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaModel"),c(Fj,"href","/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Tj,"href","/docs/transformers/pr_17910/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Mj,"href","/docs/transformers/pr_17910/en/model_doc/deit#transformers.DeiTModel"),c(Ej,"href","/docs/transformers/pr_17910/en/model_doc/detr#transformers.DetrModel"),c(Cj,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertModel"),c(wj,"href","/docs/transformers/pr_17910/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Aj,"href","/docs/transformers/pr_17910/en/model_doc/dpt#transformers.DPTModel"),c(Lj,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraModel"),c(yj,"href","/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertModel"),c(xj,"href","/docs/transformers/pr_17910/en/model_doc/flava#transformers.FlavaModel"),c($j,"href","/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetModel"),c(kj,"href","/docs/transformers/pr_17910/en/model_doc/fsmt#transformers.FSMTModel"),c(Sj,"href","/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelModel"),c(Rj,"href","/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Pj,"href","/docs/transformers/pr_17910/en/model_doc/glpn#transformers.GLPNModel"),c(Bj,"href","/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2Model"),c(Ij,"href","/docs/transformers/pr_17910/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Nj,"href","/docs/transformers/pr_17910/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(qj,"href","/docs/transformers/pr_17910/en/model_doc/gptj#transformers.GPTJModel"),c(jj,"href","/docs/transformers/pr_17910/en/model_doc/groupvit#transformers.GroupViTModel"),c(Dj,"href","/docs/transformers/pr_17910/en/model_doc/hubert#transformers.HubertModel"),c(Gj,"href","/docs/transformers/pr_17910/en/model_doc/ibert#transformers.IBertModel"),c(Oj,"href","/docs/transformers/pr_17910/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Vj,"href","/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Xj,"href","/docs/transformers/pr_17910/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(zj,"href","/docs/transformers/pr_17910/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Qj,"href","/docs/transformers/pr_17910/en/model_doc/led#transformers.LEDModel"),c(Wj,"href","/docs/transformers/pr_17910/en/model_doc/levit#transformers.LevitModel"),c(Hj,"href","/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerModel"),c(Uj,"href","/docs/transformers/pr_17910/en/model_doc/longt5#transformers.LongT5Model"),c(Jj,"href","/docs/transformers/pr_17910/en/model_doc/luke#transformers.LukeModel"),c(Yj,"href","/docs/transformers/pr_17910/en/model_doc/lxmert#transformers.LxmertModel"),c(Kj,"href","/docs/transformers/pr_17910/en/model_doc/m2m_100#transformers.M2M100Model"),c(Zj,"href","/docs/transformers/pr_17910/en/model_doc/marian#transformers.MarianModel"),c(eD,"href","/docs/transformers/pr_17910/en/model_doc/maskformer#transformers.MaskFormerModel"),c(oD,"href","/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartModel"),c(rD,"href","/docs/transformers/pr_17910/en/model_doc/mctct#transformers.MCTCTModel"),c(tD,"href","/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(aD,"href","/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertModel"),c(nD,"href","/docs/transformers/pr_17910/en/model_doc/mobilevit#transformers.MobileViTModel"),c(sD,"href","/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetModel"),c(lD,"href","/docs/transformers/pr_17910/en/model_doc/mt5#transformers.MT5Model"),c(iD,"href","/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpModel"),c(dD,"href","/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaModel"),c(cD,"href","/docs/transformers/pr_17910/en/model_doc/nystromformer#transformers.NystromformerModel"),c(fD,"href","/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(mD,"href","/docs/transformers/pr_17910/en/model_doc/opt#transformers.OPTModel"),c(gD,"href","/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.PegasusModel"),c(hD,"href","/docs/transformers/pr_17910/en/model_doc/perceiver#transformers.PerceiverModel"),c(pD,"href","/docs/transformers/pr_17910/en/model_doc/plbart#transformers.PLBartModel"),c(_D,"href","/docs/transformers/pr_17910/en/model_doc/poolformer#transformers.PoolFormerModel"),c(uD,"href","/docs/transformers/pr_17910/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(bD,"href","/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertModel"),c(vD,"href","/docs/transformers/pr_17910/en/model_doc/reformer#transformers.ReformerModel"),c(FD,"href","/docs/transformers/pr_17910/en/model_doc/regnet#transformers.RegNetModel"),c(TD,"href","/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertModel"),c(MD,"href","/docs/transformers/pr_17910/en/model_doc/resnet#transformers.ResNetModel"),c(ED,"href","/docs/transformers/pr_17910/en/model_doc/retribert#transformers.RetriBertModel"),c(CD,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaModel"),c(wD,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerModel"),c(AD,"href","/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerModel"),c(LD,"href","/docs/transformers/pr_17910/en/model_doc/sew#transformers.SEWModel"),c(yD,"href","/docs/transformers/pr_17910/en/model_doc/sew-d#transformers.SEWDModel"),c(xD,"href","/docs/transformers/pr_17910/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c($D,"href","/docs/transformers/pr_17910/en/model_doc/splinter#transformers.SplinterModel"),c(kD,"href","/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(SD,"href","/docs/transformers/pr_17910/en/model_doc/swin#transformers.SwinModel"),c(RD,"href","/docs/transformers/pr_17910/en/model_doc/t5#transformers.T5Model"),c(PD,"href","/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TapasModel"),c(BD,"href","/docs/transformers/pr_17910/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(ID,"href","/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(ND,"href","/docs/transformers/pr_17910/en/model_doc/unispeech#transformers.UniSpeechModel"),c(qD,"href","/docs/transformers/pr_17910/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(jD,"href","/docs/transformers/pr_17910/en/model_doc/van#transformers.VanModel"),c(DD,"href","/docs/transformers/pr_17910/en/model_doc/vilt#transformers.ViltModel"),c(GD,"href","/docs/transformers/pr_17910/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(OD,"href","/docs/transformers/pr_17910/en/model_doc/visual_bert#transformers.VisualBertModel"),c(VD,"href","/docs/transformers/pr_17910/en/model_doc/vit#transformers.ViTModel"),c(XD,"href","/docs/transformers/pr_17910/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(zD,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(QD,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(WD,"href","/docs/transformers/pr_17910/en/model_doc/wavlm#transformers.WavLMModel"),c(HD,"href","/docs/transformers/pr_17910/en/model_doc/xglm#transformers.XGLMModel"),c(UD,"href","/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMModel"),c(JD,"href","/docs/transformers/pr_17910/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(YD,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(KD,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(ZD,"href","/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetModel"),c(eG,"href","/docs/transformers/pr_17910/en/model_doc/yolos#transformers.YolosModel"),c(oG,"href","/docs/transformers/pr_17910/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wu,"id","transformers.AutoModelForPreTraining"),c(Wu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wu,"href","#transformers.AutoModelForPreTraining"),c(Xi,"class","relative group"),c(rG,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tG,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aG,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nG,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertForPreTraining"),c(sG,"href","/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(lG,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertForPreTraining"),c(iG,"href","/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(dG,"href","/docs/transformers/pr_17910/en/model_doc/bloom#transformers.BloomForCausalLM"),c(cG,"href","/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(fG,"href","/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(mG,"href","/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(gG,"href","/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(hG,"href","/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(pG,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(_G,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraForPreTraining"),c(uG,"href","/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(bG,"href","/docs/transformers/pr_17910/en/model_doc/flava#transformers.FlavaForPreTraining"),c(vG,"href","/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetForPreTraining"),c(FG,"href","/docs/transformers/pr_17910/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(TG,"href","/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(MG,"href","/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(EG,"href","/docs/transformers/pr_17910/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(CG,"href","/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(wG,"href","/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(AG,"href","/docs/transformers/pr_17910/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(LG,"href","/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(yG,"href","/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(xG,"href","/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c($G,"href","/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(kG,"href","/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(SG,"href","/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(RG,"href","/docs/transformers/pr_17910/en/model_doc/retribert#transformers.RetriBertModel"),c(PG,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(BG,"href","/docs/transformers/pr_17910/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(IG,"href","/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(NG,"href","/docs/transformers/pr_17910/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(qG,"href","/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(jG,"href","/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(DG,"href","/docs/transformers/pr_17910/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(GG,"href","/docs/transformers/pr_17910/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(OG,"href","/docs/transformers/pr_17910/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(VG,"href","/docs/transformers/pr_17910/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(XG,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(zG,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(QG,"href","/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(WG,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(HG,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(UG,"href","/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O1,"id","transformers.AutoModelForCausalLM"),c(O1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O1,"href","#transformers.AutoModelForCausalLM"),c(Wi,"class","relative group"),c(JG,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YG,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KG,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZG,"href","/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartForCausalLM"),c(eO,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertLMHeadModel"),c(oO,"href","/docs/transformers/pr_17910/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(rO,"href","/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(tO,"href","/docs/transformers/pr_17910/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(aO,"href","/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(nO,"href","/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(sO,"href","/docs/transformers/pr_17910/en/model_doc/bloom#transformers.BloomForCausalLM"),c(lO,"href","/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(iO,"href","/docs/transformers/pr_17910/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(dO,"href","/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(cO,"href","/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(fO,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraForCausalLM"),c(mO,"href","/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(gO,"href","/docs/transformers/pr_17910/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(hO,"href","/docs/transformers/pr_17910/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(pO,"href","/docs/transformers/pr_17910/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(_O,"href","/docs/transformers/pr_17910/en/model_doc/marian#transformers.MarianForCausalLM"),c(uO,"href","/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartForCausalLM"),c(bO,"href","/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(vO,"href","/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpForCausalLM"),c(FO,"href","/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(TO,"href","/docs/transformers/pr_17910/en/model_doc/opt#transformers.OPTForCausalLM"),c(MO,"href","/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(EO,"href","/docs/transformers/pr_17910/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(CO,"href","/docs/transformers/pr_17910/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(wO,"href","/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(AO,"href","/docs/transformers/pr_17910/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(LO,"href","/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(yO,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(xO,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c($O,"href","/docs/transformers/pr_17910/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(kO,"href","/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(SO,"href","/docs/transformers/pr_17910/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(RO,"href","/docs/transformers/pr_17910/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(PO,"href","/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(BO,"href","/docs/transformers/pr_17910/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(IO,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(NO,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(qO,"href","/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S2,"id","transformers.AutoModelForMaskedLM"),c(S2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S2,"href","#transformers.AutoModelForMaskedLM"),c(Ji,"class","relative group"),c(jO,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DO,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GO,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OO,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(VO,"href","/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(XO,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertForMaskedLM"),c(zO,"href","/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(QO,"href","/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(WO,"href","/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(HO,"href","/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(UO,"href","/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(JO,"href","/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(YO,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(KO,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(ZO,"href","/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(eV,"href","/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(oV,"href","/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(rV,"href","/docs/transformers/pr_17910/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(tV,"href","/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(aV,"href","/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(nV,"href","/docs/transformers/pr_17910/en/model_doc/luke#transformers.LukeForMaskedLM"),c(sV,"href","/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(lV,"href","/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(iV,"href","/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(dV,"href","/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(cV,"href","/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(fV,"href","/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(mV,"href","/docs/transformers/pr_17910/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(gV,"href","/docs/transformers/pr_17910/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(hV,"href","/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(pV,"href","/docs/transformers/pr_17910/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(_V,"href","/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(uV,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(bV,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(vV,"href","/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(FV,"href","/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(TV,"href","/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(MV,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(EV,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(CV,"href","/docs/transformers/pr_17910/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fb,"id","transformers.AutoModelForSeq2SeqLM"),c(Fb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Zi,"class","relative group"),c(wV,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AV,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LV,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yV,"href","/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(xV,"href","/docs/transformers/pr_17910/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c($V,"href","/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(kV,"href","/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(SV,"href","/docs/transformers/pr_17910/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(RV,"href","/docs/transformers/pr_17910/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(PV,"href","/docs/transformers/pr_17910/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(BV,"href","/docs/transformers/pr_17910/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(IV,"href","/docs/transformers/pr_17910/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(NV,"href","/docs/transformers/pr_17910/en/model_doc/marian#transformers.MarianMTModel"),c(qV,"href","/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(jV,"href","/docs/transformers/pr_17910/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(DV,"href","/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(OV,"href","/docs/transformers/pr_17910/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(VV,"href","/docs/transformers/pr_17910/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(XV,"href","/docs/transformers/pr_17910/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(zV,"href","/docs/transformers/pr_17910/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ob,"id","transformers.AutoModelForSequenceClassification"),c(Ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ob,"href","#transformers.AutoModelForSequenceClassification"),c(rd,"class","relative group"),c(QV,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WV,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HV,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UV,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_17910/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(eX,"href","/docs/transformers/pr_17910/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(oX,"href","/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(rX,"href","/docs/transformers/pr_17910/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(mX,"href","/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17910/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17910/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17910/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17910/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17910/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17910/en/model_doc/led#transformers.LEDForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17910/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c($X,"href","/docs/transformers/pr_17910/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(kX,"href","/docs/transformers/pr_17910/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(SX,"href","/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(RX,"href","/docs/transformers/pr_17910/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(PX,"href","/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(BX,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(IX,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(NX,"href","/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(qX,"href","/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(jX,"href","/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(DX,"href","/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(GX,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(OX,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(VX,"href","/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(XX,"href","/docs/transformers/pr_17910/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ov,"id","transformers.AutoModelForMultipleChoice"),c(Ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ov,"href","#transformers.AutoModelForMultipleChoice"),c(nd,"class","relative group"),c(zX,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QX,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WX,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HX,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(UX,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertForMultipleChoice"),c(JX,"href","/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(YX,"href","/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(KX,"href","/docs/transformers/pr_17910/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(ZX,"href","/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(ez,"href","/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(oz,"href","/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(rz,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(tz,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(az,"href","/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(nz,"href","/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(sz,"href","/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(lz,"href","/docs/transformers/pr_17910/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(iz,"href","/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(dz,"href","/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(cz,"href","/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(fz,"href","/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(mz,"href","/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(gz,"href","/docs/transformers/pr_17910/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(hz,"href","/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(pz,"href","/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(_z,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(uz,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(bz,"href","/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(vz,"href","/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(Tz,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Mz,"href","/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Ez,"href","/docs/transformers/pr_17910/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M0,"id","transformers.AutoModelForNextSentencePrediction"),c(M0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M0,"href","#transformers.AutoModelForNextSentencePrediction"),c(id,"class","relative group"),c(Cz,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wz,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Az,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lz,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(yz,"href","/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(xz,"href","/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c($z,"href","/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(kz,"href","/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(Sz,"href","/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S0,"id","transformers.AutoModelForTokenClassification"),c(S0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S0,"href","#transformers.AutoModelForTokenClassification"),c(fd,"class","relative group"),c(Rz,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pz,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bz,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Nz,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertForTokenClassification"),c(qz,"href","/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(jz,"href","/docs/transformers/pr_17910/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Dz,"href","/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Gz,"href","/docs/transformers/pr_17910/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Oz,"href","/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Vz,"href","/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Xz,"href","/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(zz,"href","/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Qz,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Wz,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Hz,"href","/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Uz,"href","/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Jz,"href","/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Yz,"href","/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(Kz,"href","/docs/transformers/pr_17910/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(Zz,"href","/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(eQ,"href","/docs/transformers/pr_17910/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(oQ,"href","/docs/transformers/pr_17910/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(rQ,"href","/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(tQ,"href","/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(aQ,"href","/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(nQ,"href","/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(sQ,"href","/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(lQ,"href","/docs/transformers/pr_17910/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(iQ,"href","/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(dQ,"href","/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(cQ,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(fQ,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(mQ,"href","/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(gQ,"href","/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(hQ,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(pQ,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(_Q,"href","/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(uQ,"href","/docs/transformers/pr_17910/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bF,"id","transformers.AutoModelForQuestionAnswering"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.AutoModelForQuestionAnswering"),c(hd,"class","relative group"),c(bQ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TQ,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(MQ,"href","/docs/transformers/pr_17910/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(EQ,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(CQ,"href","/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(wQ,"href","/docs/transformers/pr_17910/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(AQ,"href","/docs/transformers/pr_17910/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(LQ,"href","/docs/transformers/pr_17910/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(yQ,"href","/docs/transformers/pr_17910/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(xQ,"href","/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c($Q,"href","/docs/transformers/pr_17910/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(SQ,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(BQ,"href","/docs/transformers/pr_17910/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_17910/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_17910/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_17910/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_17910/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_17910/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_17910/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_17910/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_17910/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_17910/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_17910/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_17910/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_17910/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_17910/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_17910/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_17910/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_17910/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(rW,"href","/docs/transformers/pr_17910/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(tW,"href","/docs/transformers/pr_17910/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(aW,"href","/docs/transformers/pr_17910/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(nW,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(sW,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(lW,"href","/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(iW,"href","/docs/transformers/pr_17910/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cT,"id","transformers.AutoModelForTableQuestionAnswering"),c(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ud,"class","relative group"),c(dW,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cW,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fW,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mW,"href","/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pT,"id","transformers.AutoModelForImageClassification"),c(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pT,"href","#transformers.AutoModelForImageClassification"),c(Fd,"class","relative group"),c(gW,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hW,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pW,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_W,"href","/docs/transformers/pr_17910/en/model_doc/beit#transformers.BeitForImageClassification"),c(uW,"href","/docs/transformers/pr_17910/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(bW,"href","/docs/transformers/pr_17910/en/model_doc/cvt#transformers.CvtForImageClassification"),c(vW,"href","/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(FW,"href","/docs/transformers/pr_17910/en/model_doc/deit#transformers.DeiTForImageClassification"),c(TW,"href","/docs/transformers/pr_17910/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(MW,"href","/docs/transformers/pr_17910/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(EW,"href","/docs/transformers/pr_17910/en/model_doc/levit#transformers.LevitForImageClassification"),c(CW,"href","/docs/transformers/pr_17910/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(wW,"href","/docs/transformers/pr_17910/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(AW,"href","/docs/transformers/pr_17910/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(LW,"href","/docs/transformers/pr_17910/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(yW,"href","/docs/transformers/pr_17910/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(xW,"href","/docs/transformers/pr_17910/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c($W,"href","/docs/transformers/pr_17910/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(kW,"href","/docs/transformers/pr_17910/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(SW,"href","/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(RW,"href","/docs/transformers/pr_17910/en/model_doc/swin#transformers.SwinForImageClassification"),c(PW,"href","/docs/transformers/pr_17910/en/model_doc/van#transformers.VanForImageClassification"),c(BW,"href","/docs/transformers/pr_17910/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.AutoModelForVision2Seq"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.AutoModelForVision2Seq"),c(Ed,"class","relative group"),c(IW,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NW,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qW,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jW,"href","/docs/transformers/pr_17910/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Ad,"class","relative group"),c(DW,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GW,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OW,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VW,"href","/docs/transformers/pr_17910/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OT,"id","transformers.AutoModelForAudioClassification"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.AutoModelForAudioClassification"),c(xd,"class","relative group"),c(XW,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zW,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WW,"href","/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(HW,"href","/docs/transformers/pr_17910/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(UW,"href","/docs/transformers/pr_17910/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(JW,"href","/docs/transformers/pr_17910/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(YW,"href","/docs/transformers/pr_17910/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(KW,"href","/docs/transformers/pr_17910/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(eH,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(oH,"href","/docs/transformers/pr_17910/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o7,"id","transformers.AutoModelForAudioFrameClassification"),c(o7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o7,"href","#transformers.AutoModelForAudioFrameClassification"),c(Sd,"class","relative group"),c(rH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nH,"href","/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(sH,"href","/docs/transformers/pr_17910/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(lH,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(iH,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(dH,"href","/docs/transformers/pr_17910/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c7,"id","transformers.AutoModelForCTC"),c(c7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c7,"href","#transformers.AutoModelForCTC"),c(Bd,"class","relative group"),c(cH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gH,"href","/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(hH,"href","/docs/transformers/pr_17910/en/model_doc/hubert#transformers.HubertForCTC"),c(pH,"href","/docs/transformers/pr_17910/en/model_doc/mctct#transformers.MCTCTForCTC"),c(_H,"href","/docs/transformers/pr_17910/en/model_doc/sew#transformers.SEWForCTC"),c(uH,"href","/docs/transformers/pr_17910/en/model_doc/sew-d#transformers.SEWDForCTC"),c(bH,"href","/docs/transformers/pr_17910/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(vH,"href","/docs/transformers/pr_17910/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(FH,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(TH,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(MH,"href","/docs/transformers/pr_17910/en/model_doc/wavlm#transformers.WavLMForCTC"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C7,"id","transformers.AutoModelForSpeechSeq2Seq"),c(C7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C7,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(qd,"class","relative group"),c(EH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/pr_17910/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(LH,"href","/docs/transformers/pr_17910/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($7,"id","transformers.AutoModelForAudioXVector"),c($7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($7,"href","#transformers.AutoModelForAudioXVector"),c(Gd,"class","relative group"),c(yH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($H,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kH,"href","/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(SH,"href","/docs/transformers/pr_17910/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(RH,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(PH,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(BH,"href","/docs/transformers/pr_17910/en/model_doc/wavlm#transformers.WavLMForXVector"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j7,"id","transformers.AutoModelForMaskedImageModeling"),c(j7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j7,"href","#transformers.AutoModelForMaskedImageModeling"),c(Xd,"class","relative group"),c(IH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jH,"href","/docs/transformers/pr_17910/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(DH,"href","/docs/transformers/pr_17910/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(GH,"href","/docs/transformers/pr_17910/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q7,"id","transformers.AutoModelForObjectDetection"),c(Q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q7,"href","#transformers.AutoModelForObjectDetection"),c(Hd,"class","relative group"),c(OH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/pr_17910/en/model_doc/detr#transformers.DetrForObjectDetection"),c(QH,"href","/docs/transformers/pr_17910/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K7,"id","transformers.AutoModelForImageSegmentation"),c(K7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K7,"href","#transformers.AutoModelForImageSegmentation"),c(Yd,"class","relative group"),c(WH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JH,"href","/docs/transformers/pr_17910/en/model_doc/detr#transformers.DetrForSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t9,"id","transformers.AutoModelForSemanticSegmentation"),c(t9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t9,"href","#transformers.AutoModelForSemanticSegmentation"),c(ec,"class","relative group"),c(YH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZH,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eU,"href","/docs/transformers/pr_17910/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(oU,"href","/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(rU,"href","/docs/transformers/pr_17910/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(tU,"href","/docs/transformers/pr_17910/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(aU,"href","/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m9,"id","transformers.AutoModelForInstanceSegmentation"),c(m9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m9,"href","#transformers.AutoModelForInstanceSegmentation"),c(tc,"class","relative group"),c(nU,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sU,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lU,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iU,"href","/docs/transformers/pr_17910/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u9,"id","transformers.TFAutoModel"),c(u9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u9,"href","#transformers.TFAutoModel"),c(sc,"class","relative group"),c(dU,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cU,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fU,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mU,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.TFAlbertModel"),c(gU,"href","/docs/transformers/pr_17910/en/model_doc/bart#transformers.TFBartModel"),c(hU,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.TFBertModel"),c(pU,"href","/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(_U,"href","/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(uU,"href","/docs/transformers/pr_17910/en/model_doc/camembert#transformers.TFCamembertModel"),c(bU,"href","/docs/transformers/pr_17910/en/model_doc/clip#transformers.TFCLIPModel"),c(vU,"href","/docs/transformers/pr_17910/en/model_doc/convbert#transformers.TFConvBertModel"),c(FU,"href","/docs/transformers/pr_17910/en/model_doc/convnext#transformers.TFConvNextModel"),c(TU,"href","/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.TFCTRLModel"),c(MU,"href","/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(EU,"href","/docs/transformers/pr_17910/en/model_doc/deberta#transformers.TFDebertaModel"),c(CU,"href","/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(wU,"href","/docs/transformers/pr_17910/en/model_doc/deit#transformers.TFDeiTModel"),c(AU,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(LU,"href","/docs/transformers/pr_17910/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(yU,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.TFElectraModel"),c(xU,"href","/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.TFFlaubertModel"),c($U,"href","/docs/transformers/pr_17910/en/model_doc/funnel#transformers.TFFunnelModel"),c(kU,"href","/docs/transformers/pr_17910/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(SU,"href","/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.TFGPT2Model"),c(RU,"href","/docs/transformers/pr_17910/en/model_doc/gptj#transformers.TFGPTJModel"),c(PU,"href","/docs/transformers/pr_17910/en/model_doc/hubert#transformers.TFHubertModel"),c(BU,"href","/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(IU,"href","/docs/transformers/pr_17910/en/model_doc/led#transformers.TFLEDModel"),c(NU,"href","/docs/transformers/pr_17910/en/model_doc/longformer#transformers.TFLongformerModel"),c(qU,"href","/docs/transformers/pr_17910/en/model_doc/lxmert#transformers.TFLxmertModel"),c(jU,"href","/docs/transformers/pr_17910/en/model_doc/marian#transformers.TFMarianModel"),c(DU,"href","/docs/transformers/pr_17910/en/model_doc/mbart#transformers.TFMBartModel"),c(GU,"href","/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(OU,"href","/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.TFMPNetModel"),c(VU,"href","/docs/transformers/pr_17910/en/model_doc/mt5#transformers.TFMT5Model"),c(XU,"href","/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(zU,"href","/docs/transformers/pr_17910/en/model_doc/opt#transformers.TFOPTModel"),c(QU,"href","/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.TFPegasusModel"),c(WU,"href","/docs/transformers/pr_17910/en/model_doc/regnet#transformers.TFRegNetModel"),c(HU,"href","/docs/transformers/pr_17910/en/model_doc/rembert#transformers.TFRemBertModel"),c(UU,"href","/docs/transformers/pr_17910/en/model_doc/resnet#transformers.TFResNetModel"),c(JU,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.TFRobertaModel"),c(YU,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.TFRoFormerModel"),c(KU,"href","/docs/transformers/pr_17910/en/model_doc/segformer#transformers.TFSegformerModel"),c(ZU,"href","/docs/transformers/pr_17910/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(eJ,"href","/docs/transformers/pr_17910/en/model_doc/swin#transformers.TFSwinModel"),c(oJ,"href","/docs/transformers/pr_17910/en/model_doc/t5#transformers.TFT5Model"),c(rJ,"href","/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TFTapasModel"),c(tJ,"href","/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(aJ,"href","/docs/transformers/pr_17910/en/model_doc/vit#transformers.TFViTModel"),c(nJ,"href","/docs/transformers/pr_17910/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(sJ,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(lJ,"href","/docs/transformers/pr_17910/en/model_doc/xlm#transformers.TFXLMModel"),c(iJ,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(dJ,"href","/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.TFXLNetModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_M,"id","transformers.TFAutoModelForPreTraining"),c(_M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_M,"href","#transformers.TFAutoModelForPreTraining"),c(dc,"class","relative group"),c(cJ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fJ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mJ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gJ,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(hJ,"href","/docs/transformers/pr_17910/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(pJ,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.TFBertForPreTraining"),c(_J,"href","/docs/transformers/pr_17910/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(uJ,"href","/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(bJ,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(vJ,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(FJ,"href","/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(TJ,"href","/docs/transformers/pr_17910/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(MJ,"href","/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(EJ,"href","/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(CJ,"href","/docs/transformers/pr_17910/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(wJ,"href","/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(AJ,"href","/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(LJ,"href","/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(yJ,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(xJ,"href","/docs/transformers/pr_17910/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($J,"href","/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(kJ,"href","/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(SJ,"href","/docs/transformers/pr_17910/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(RJ,"href","/docs/transformers/pr_17910/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(PJ,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(BJ,"href","/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OM,"id","transformers.TFAutoModelForCausalLM"),c(OM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OM,"href","#transformers.TFAutoModelForCausalLM"),c(mc,"class","relative group"),c(IJ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NJ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qJ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jJ,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(DJ,"href","/docs/transformers/pr_17910/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(GJ,"href","/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(OJ,"href","/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(VJ,"href","/docs/transformers/pr_17910/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(XJ,"href","/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(zJ,"href","/docs/transformers/pr_17910/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(QJ,"href","/docs/transformers/pr_17910/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(WJ,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(HJ,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(UJ,"href","/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(JJ,"href","/docs/transformers/pr_17910/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(YJ,"href","/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a4,"id","transformers.TFAutoModelForImageClassification"),c(a4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a4,"href","#transformers.TFAutoModelForImageClassification"),c(pc,"class","relative group"),c(KJ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZJ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eY,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oY,"href","/docs/transformers/pr_17910/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(rY,"href","/docs/transformers/pr_17910/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(tY,"href","/docs/transformers/pr_17910/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(aY,"href","/docs/transformers/pr_17910/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(nY,"href","/docs/transformers/pr_17910/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(sY,"href","/docs/transformers/pr_17910/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(lY,"href","/docs/transformers/pr_17910/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(iY,"href","/docs/transformers/pr_17910/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(dY,"href","/docs/transformers/pr_17910/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h4,"id","transformers.TFAutoModelForMaskedLM"),c(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h4,"href","#transformers.TFAutoModelForMaskedLM"),c(bc,"class","relative group"),c(cY,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fY,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mY,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gY,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(hY,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(pY,"href","/docs/transformers/pr_17910/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(_Y,"href","/docs/transformers/pr_17910/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(uY,"href","/docs/transformers/pr_17910/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(bY,"href","/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(vY,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(FY,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(TY,"href","/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(MY,"href","/docs/transformers/pr_17910/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(EY,"href","/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(CY,"href","/docs/transformers/pr_17910/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(wY,"href","/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(AY,"href","/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(LY,"href","/docs/transformers/pr_17910/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(yY,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(xY,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c($Y,"href","/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(kY,"href","/docs/transformers/pr_17910/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(SY,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Tc,"class","relative group"),c(RY,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PY,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BY,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IY,"href","/docs/transformers/pr_17910/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(NY,"href","/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(qY,"href","/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(jY,"href","/docs/transformers/pr_17910/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(DY,"href","/docs/transformers/pr_17910/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(GY,"href","/docs/transformers/pr_17910/en/model_doc/marian#transformers.TFMarianMTModel"),c(OY,"href","/docs/transformers/pr_17910/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(VY,"href","/docs/transformers/pr_17910/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(XY,"href","/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(zY,"href","/docs/transformers/pr_17910/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J4,"id","transformers.TFAutoModelForSequenceClassification"),c(J4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J4,"href","#transformers.TFAutoModelForSequenceClassification"),c(Cc,"class","relative group"),c(QY,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WY,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HY,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UY,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(JY,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(YY,"href","/docs/transformers/pr_17910/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(KY,"href","/docs/transformers/pr_17910/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(ZY,"href","/docs/transformers/pr_17910/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(eK,"href","/docs/transformers/pr_17910/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(oK,"href","/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(rK,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(tK,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(aK,"href","/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(nK,"href","/docs/transformers/pr_17910/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(sK,"href","/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(lK,"href","/docs/transformers/pr_17910/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(iK,"href","/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(dK,"href","/docs/transformers/pr_17910/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(cK,"href","/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(fK,"href","/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(mK,"href","/docs/transformers/pr_17910/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(gK,"href","/docs/transformers/pr_17910/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(hK,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(pK,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(_K,"href","/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(uK,"href","/docs/transformers/pr_17910/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(bK,"href","/docs/transformers/pr_17910/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(vK,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(FK,"href","/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wE,"id","transformers.TFAutoModelForMultipleChoice"),c(wE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wE,"href","#transformers.TFAutoModelForMultipleChoice"),c(Lc,"class","relative group"),c(TK,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MK,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EK,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CK,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(wK,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(AK,"href","/docs/transformers/pr_17910/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(LK,"href","/docs/transformers/pr_17910/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(yK,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(xK,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c($K,"href","/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(kK,"href","/docs/transformers/pr_17910/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(SK,"href","/docs/transformers/pr_17910/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(RK,"href","/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(PK,"href","/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(BK,"href","/docs/transformers/pr_17910/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(IK,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(NK,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(qK,"href","/docs/transformers/pr_17910/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(jK,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(DK,"href","/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(zE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c($c,"class","relative group"),c(GK,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OK,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VK,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XK,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(zK,"href","/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Rc,"class","relative group"),c(QK,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WK,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HK,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UK,"href","/docs/transformers/pr_17910/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.TFAutoModelForTokenClassification"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.TFAutoModelForTokenClassification"),c(Ic,"class","relative group"),c(JK,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YK,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KK,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZK,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(eZ,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(oZ,"href","/docs/transformers/pr_17910/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(rZ,"href","/docs/transformers/pr_17910/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(tZ,"href","/docs/transformers/pr_17910/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(aZ,"href","/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(nZ,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(sZ,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(lZ,"href","/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(iZ,"href","/docs/transformers/pr_17910/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(dZ,"href","/docs/transformers/pr_17910/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(cZ,"href","/docs/transformers/pr_17910/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(fZ,"href","/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(mZ,"href","/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(gZ,"href","/docs/transformers/pr_17910/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(hZ,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(pZ,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(_Z,"href","/docs/transformers/pr_17910/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(uZ,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(bZ,"href","/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.TFAutoModelForQuestionAnswering"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(jc,"class","relative group"),c(vZ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FZ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TZ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MZ,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(EZ,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(CZ,"href","/docs/transformers/pr_17910/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(wZ,"href","/docs/transformers/pr_17910/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(AZ,"href","/docs/transformers/pr_17910/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(LZ,"href","/docs/transformers/pr_17910/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(yZ,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(xZ,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c($Z,"href","/docs/transformers/pr_17910/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(kZ,"href","/docs/transformers/pr_17910/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(SZ,"href","/docs/transformers/pr_17910/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(RZ,"href","/docs/transformers/pr_17910/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(PZ,"href","/docs/transformers/pr_17910/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(BZ,"href","/docs/transformers/pr_17910/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(IZ,"href","/docs/transformers/pr_17910/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(NZ,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(qZ,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(jZ,"href","/docs/transformers/pr_17910/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(DZ,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(GZ,"href","/docs/transformers/pr_17910/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QC,"id","transformers.TFAutoModelForVision2Seq"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.TFAutoModelForVision2Seq"),c(Oc,"class","relative group"),c(OZ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VZ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XZ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zZ,"href","/docs/transformers/pr_17910/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(JC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(zc,"class","relative group"),c(QZ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WZ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HZ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UZ,"href","/docs/transformers/pr_17910/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e3,"id","transformers.FlaxAutoModel"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.FlaxAutoModel"),c(Hc,"class","relative group"),c(JZ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YZ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KZ,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZZ,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.FlaxAlbertModel"),c(eee,"href","/docs/transformers/pr_17910/en/model_doc/bart#transformers.FlaxBartModel"),c(oee,"href","/docs/transformers/pr_17910/en/model_doc/beit#transformers.FlaxBeitModel"),c(ree,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.FlaxBertModel"),c(tee,"href","/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(aee,"href","/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(nee,"href","/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(see,"href","/docs/transformers/pr_17910/en/model_doc/clip#transformers.FlaxCLIPModel"),c(lee,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(iee,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.FlaxElectraModel"),c(dee,"href","/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(cee,"href","/docs/transformers/pr_17910/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(fee,"href","/docs/transformers/pr_17910/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(mee,"href","/docs/transformers/pr_17910/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(gee,"href","/docs/transformers/pr_17910/en/model_doc/marian#transformers.FlaxMarianModel"),c(hee,"href","/docs/transformers/pr_17910/en/model_doc/mbart#transformers.FlaxMBartModel"),c(pee,"href","/docs/transformers/pr_17910/en/model_doc/mt5#transformers.FlaxMT5Model"),c(_ee,"href","/docs/transformers/pr_17910/en/model_doc/opt#transformers.FlaxOPTModel"),c(uee,"href","/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(bee,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(vee,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Fee,"href","/docs/transformers/pr_17910/en/model_doc/t5#transformers.FlaxT5Model"),c(Tee,"href","/docs/transformers/pr_17910/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Mee,"href","/docs/transformers/pr_17910/en/model_doc/vit#transformers.FlaxViTModel"),c(Eee,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Cee,"href","/docs/transformers/pr_17910/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(wee,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($3,"id","transformers.FlaxAutoModelForCausalLM"),c($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Yc,"class","relative group"),c(Aee,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lee,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yee,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xee,"href","/docs/transformers/pr_17910/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c($ee,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(kee,"href","/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(See,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Ree,"href","/docs/transformers/pr_17910/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Pee,"href","/docs/transformers/pr_17910/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Bee,"href","/docs/transformers/pr_17910/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Iee,"href","/docs/transformers/pr_17910/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Nee,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(qee,"href","/docs/transformers/pr_17910/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V3,"id","transformers.FlaxAutoModelForPreTraining"),c(V3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V3,"href","#transformers.FlaxAutoModelForPreTraining"),c(ef,"class","relative group"),c(jee,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dee,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gee,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oee,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Vee,"href","/docs/transformers/pr_17910/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Xee,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(zee,"href","/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Qee,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Wee,"href","/docs/transformers/pr_17910/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Hee,"href","/docs/transformers/pr_17910/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Uee,"href","/docs/transformers/pr_17910/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Jee,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Yee,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Kee,"href","/docs/transformers/pr_17910/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Zee,"href","/docs/transformers/pr_17910/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(eoe,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n5,"id","transformers.FlaxAutoModelForMaskedLM"),c(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(tf,"class","relative group"),c(ooe,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(roe,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(toe,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aoe,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(noe,"href","/docs/transformers/pr_17910/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(soe,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(loe,"href","/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(ioe,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(doe,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(coe,"href","/docs/transformers/pr_17910/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(foe,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(moe,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(goe,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(b5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(sf,"class","relative group"),c(hoe,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(poe,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_oe,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uoe,"href","/docs/transformers/pr_17910/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(boe,"href","/docs/transformers/pr_17910/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(voe,"href","/docs/transformers/pr_17910/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Foe,"href","/docs/transformers/pr_17910/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Toe,"href","/docs/transformers/pr_17910/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Moe,"href","/docs/transformers/pr_17910/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Eoe,"href","/docs/transformers/pr_17910/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Coe,"href","/docs/transformers/pr_17910/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(woe,"href","/docs/transformers/pr_17910/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Aoe,"href","/docs/transformers/pr_17910/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(cf,"class","relative group"),c(Loe,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yoe,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xoe,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($oe,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(koe,"href","/docs/transformers/pr_17910/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Soe,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Roe,"href","/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Poe,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Boe,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Ioe,"href","/docs/transformers/pr_17910/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Noe,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(qoe,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(joe,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(X5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(gf,"class","relative group"),c(Doe,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Goe,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ooe,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Voe,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Xoe,"href","/docs/transformers/pr_17910/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(zoe,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Qoe,"href","/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Woe,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Hoe,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Uoe,"href","/docs/transformers/pr_17910/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Joe,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Yoe,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Koe,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tw,"id","transformers.FlaxAutoModelForTokenClassification"),c(tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(_f,"class","relative group"),c(Zoe,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ere,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ore,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rre,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(tre,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(are,"href","/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(nre,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(sre,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(lre,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(ire,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(dre,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(hw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(vf,"class","relative group"),c(cre,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fre,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mre,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gre,"href","/docs/transformers/pr_17910/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(hre,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(pre,"href","/docs/transformers/pr_17910/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(_re,"href","/docs/transformers/pr_17910/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(ure,"href","/docs/transformers/pr_17910/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(bre,"href","/docs/transformers/pr_17910/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(vre,"href","/docs/transformers/pr_17910/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Fre,"href","/docs/transformers/pr_17910/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ww,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(ww,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ww,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Mf,"class","relative group"),c(Tre,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mre,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ere,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cre,"href","/docs/transformers/pr_17910/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xw,"id","transformers.FlaxAutoModelForImageClassification"),c(xw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xw,"href","#transformers.FlaxAutoModelForImageClassification"),c(wf,"class","relative group"),c(wre,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Are,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lre,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yre,"href","/docs/transformers/pr_17910/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(xre,"href","/docs/transformers/pr_17910/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(yf,"class","relative group"),c($re,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kre,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sre,"href","/docs/transformers/pr_17910/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rre,"href","/docs/transformers/pr_17910/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,wo),e(wo,Li),b(f,Pf,u),b(f,lt,u),e(lt,yi),e(lt,xi),e(xi,rL),e(lt,Bf),b(f,Oe,u),b(f,We,u),e(We,$i),e(We,Pn),e(Pn,tL),e(We,Bn),e(We,In),e(In,aL),e(We,ki),e(We,Nn),e(Nn,nL),e(We,Si),b(f,If,u),M(Sa,f,u),b(f,He,u),b(f,Ae,u),e(Ae,NS),e(Ae,Ri),e(Ri,qS),e(Ae,jS),b(f,Ao,u),b(f,Ra,u),e(Ra,DS),e(Ra,Nf),e(Nf,GS),e(Ra,FHe),b(f,nXe,u),b(f,Pi,u),e(Pi,qf),e(qf,yae),M(sL,yae,null),e(Pi,THe),e(Pi,xae),e(xae,MHe),b(f,sXe,u),b(f,qn,u),e(qn,EHe),e(qn,$ae),e($ae,CHe),e(qn,wHe),e(qn,kae),e(kae,AHe),e(qn,LHe),b(f,lXe,u),M(lL,f,u),b(f,iXe,u),b(f,OS,u),e(OS,yHe),b(f,dXe,u),M(jf,f,u),b(f,cXe,u),b(f,Bi,u),e(Bi,Df),e(Df,Sae),M(iL,Sae,null),e(Bi,xHe),e(Bi,Rae),e(Rae,$He),b(f,fXe,u),b(f,Lo,u),M(dL,Lo,null),e(Lo,kHe),e(Lo,cL),e(cL,SHe),e(cL,VS),e(VS,RHe),e(cL,PHe),e(Lo,BHe),e(Lo,fL),e(fL,IHe),e(fL,Pae),e(Pae,NHe),e(fL,qHe),e(Lo,jHe),e(Lo,yr),M(mL,yr,null),e(yr,DHe),e(yr,Bae),e(Bae,GHe),e(yr,OHe),e(yr,Ii),e(Ii,VHe),e(Ii,Iae),e(Iae,XHe),e(Ii,zHe),e(Ii,Nae),e(Nae,QHe),e(Ii,WHe),e(yr,HHe),e(yr,A),e(A,Gf),e(Gf,qae),e(qae,UHe),e(Gf,JHe),e(Gf,XS),e(XS,YHe),e(Gf,KHe),e(A,ZHe),e(A,Of),e(Of,jae),e(jae,eUe),e(Of,oUe),e(Of,zS),e(zS,rUe),e(Of,tUe),e(A,aUe),e(A,Vf),e(Vf,Dae),e(Dae,nUe),e(Vf,sUe),e(Vf,QS),e(QS,lUe),e(Vf,iUe),e(A,dUe),e(A,Xf),e(Xf,Gae),e(Gae,cUe),e(Xf,fUe),e(Xf,WS),e(WS,mUe),e(Xf,gUe),e(A,hUe),e(A,zf),e(zf,Oae),e(Oae,pUe),e(zf,_Ue),e(zf,HS),e(HS,uUe),e(zf,bUe),e(A,vUe),e(A,Qf),e(Qf,Vae),e(Vae,FUe),e(Qf,TUe),e(Qf,US),e(US,MUe),e(Qf,EUe),e(A,CUe),e(A,Wf),e(Wf,Xae),e(Xae,wUe),e(Wf,AUe),e(Wf,JS),e(JS,LUe),e(Wf,yUe),e(A,xUe),e(A,Hf),e(Hf,zae),e(zae,$Ue),e(Hf,kUe),e(Hf,YS),e(YS,SUe),e(Hf,RUe),e(A,PUe),e(A,Uf),e(Uf,Qae),e(Qae,BUe),e(Uf,IUe),e(Uf,KS),e(KS,NUe),e(Uf,qUe),e(A,jUe),e(A,Jf),e(Jf,Wae),e(Wae,DUe),e(Jf,GUe),e(Jf,ZS),e(ZS,OUe),e(Jf,VUe),e(A,XUe),e(A,Yf),e(Yf,Hae),e(Hae,zUe),e(Yf,QUe),e(Yf,eR),e(eR,WUe),e(Yf,HUe),e(A,UUe),e(A,Kf),e(Kf,Uae),e(Uae,JUe),e(Kf,YUe),e(Kf,oR),e(oR,KUe),e(Kf,ZUe),e(A,eJe),e(A,Zf),e(Zf,Jae),e(Jae,oJe),e(Zf,rJe),e(Zf,rR),e(rR,tJe),e(Zf,aJe),e(A,nJe),e(A,em),e(em,Yae),e(Yae,sJe),e(em,lJe),e(em,tR),e(tR,iJe),e(em,dJe),e(A,cJe),e(A,om),e(om,Kae),e(Kae,fJe),e(om,mJe),e(om,aR),e(aR,gJe),e(om,hJe),e(A,pJe),e(A,rm),e(rm,Zae),e(Zae,_Je),e(rm,uJe),e(rm,nR),e(nR,bJe),e(rm,vJe),e(A,FJe),e(A,tm),e(tm,ene),e(ene,TJe),e(tm,MJe),e(tm,sR),e(sR,EJe),e(tm,CJe),e(A,wJe),e(A,am),e(am,one),e(one,AJe),e(am,LJe),e(am,lR),e(lR,yJe),e(am,xJe),e(A,$Je),e(A,nm),e(nm,rne),e(rne,kJe),e(nm,SJe),e(nm,iR),e(iR,RJe),e(nm,PJe),e(A,BJe),e(A,sm),e(sm,tne),e(tne,IJe),e(sm,NJe),e(sm,dR),e(dR,qJe),e(sm,jJe),e(A,DJe),e(A,lm),e(lm,ane),e(ane,GJe),e(lm,OJe),e(lm,cR),e(cR,VJe),e(lm,XJe),e(A,zJe),e(A,im),e(im,nne),e(nne,QJe),e(im,WJe),e(im,fR),e(fR,HJe),e(im,UJe),e(A,JJe),e(A,dm),e(dm,sne),e(sne,YJe),e(dm,KJe),e(dm,mR),e(mR,ZJe),e(dm,eYe),e(A,oYe),e(A,cm),e(cm,lne),e(lne,rYe),e(cm,tYe),e(cm,gR),e(gR,aYe),e(cm,nYe),e(A,sYe),e(A,fm),e(fm,ine),e(ine,lYe),e(fm,iYe),e(fm,hR),e(hR,dYe),e(fm,cYe),e(A,fYe),e(A,mm),e(mm,dne),e(dne,mYe),e(mm,gYe),e(mm,pR),e(pR,hYe),e(mm,pYe),e(A,_Ye),e(A,gm),e(gm,cne),e(cne,uYe),e(gm,bYe),e(gm,_R),e(_R,vYe),e(gm,FYe),e(A,TYe),e(A,hm),e(hm,fne),e(fne,MYe),e(hm,EYe),e(hm,uR),e(uR,CYe),e(hm,wYe),e(A,AYe),e(A,pm),e(pm,mne),e(mne,LYe),e(pm,yYe),e(pm,bR),e(bR,xYe),e(pm,$Ye),e(A,kYe),e(A,_m),e(_m,gne),e(gne,SYe),e(_m,RYe),e(_m,vR),e(vR,PYe),e(_m,BYe),e(A,IYe),e(A,um),e(um,hne),e(hne,NYe),e(um,qYe),e(um,FR),e(FR,jYe),e(um,DYe),e(A,GYe),e(A,bm),e(bm,pne),e(pne,OYe),e(bm,VYe),e(bm,TR),e(TR,XYe),e(bm,zYe),e(A,QYe),e(A,vm),e(vm,_ne),e(_ne,WYe),e(vm,HYe),e(vm,MR),e(MR,UYe),e(vm,JYe),e(A,YYe),e(A,Fm),e(Fm,une),e(une,KYe),e(Fm,ZYe),e(Fm,ER),e(ER,eKe),e(Fm,oKe),e(A,rKe),e(A,Tm),e(Tm,bne),e(bne,tKe),e(Tm,aKe),e(Tm,CR),e(CR,nKe),e(Tm,sKe),e(A,lKe),e(A,Mm),e(Mm,vne),e(vne,iKe),e(Mm,dKe),e(Mm,wR),e(wR,cKe),e(Mm,fKe),e(A,mKe),e(A,Em),e(Em,Fne),e(Fne,gKe),e(Em,hKe),e(Em,AR),e(AR,pKe),e(Em,_Ke),e(A,uKe),e(A,Cm),e(Cm,Tne),e(Tne,bKe),e(Cm,vKe),e(Cm,LR),e(LR,FKe),e(Cm,TKe),e(A,MKe),e(A,wm),e(wm,Mne),e(Mne,EKe),e(wm,CKe),e(wm,yR),e(yR,wKe),e(wm,AKe),e(A,LKe),e(A,Am),e(Am,Ene),e(Ene,yKe),e(Am,xKe),e(Am,xR),e(xR,$Ke),e(Am,kKe),e(A,SKe),e(A,Lm),e(Lm,Cne),e(Cne,RKe),e(Lm,PKe),e(Lm,$R),e($R,BKe),e(Lm,IKe),e(A,NKe),e(A,ym),e(ym,wne),e(wne,qKe),e(ym,jKe),e(ym,kR),e(kR,DKe),e(ym,GKe),e(A,OKe),e(A,xm),e(xm,Ane),e(Ane,VKe),e(xm,XKe),e(xm,SR),e(SR,zKe),e(xm,QKe),e(A,WKe),e(A,$m),e($m,Lne),e(Lne,HKe),e($m,UKe),e($m,RR),e(RR,JKe),e($m,YKe),e(A,KKe),e(A,km),e(km,yne),e(yne,ZKe),e(km,eZe),e(km,PR),e(PR,oZe),e(km,rZe),e(A,tZe),e(A,Sm),e(Sm,xne),e(xne,aZe),e(Sm,nZe),e(Sm,BR),e(BR,sZe),e(Sm,lZe),e(A,iZe),e(A,Rm),e(Rm,$ne),e($ne,dZe),e(Rm,cZe),e(Rm,IR),e(IR,fZe),e(Rm,mZe),e(A,gZe),e(A,Pm),e(Pm,kne),e(kne,hZe),e(Pm,pZe),e(Pm,NR),e(NR,_Ze),e(Pm,uZe),e(A,bZe),e(A,Bm),e(Bm,Sne),e(Sne,vZe),e(Bm,FZe),e(Bm,qR),e(qR,TZe),e(Bm,MZe),e(A,EZe),e(A,Im),e(Im,Rne),e(Rne,CZe),e(Im,wZe),e(Im,jR),e(jR,AZe),e(Im,LZe),e(A,yZe),e(A,Nm),e(Nm,Pne),e(Pne,xZe),e(Nm,$Ze),e(Nm,DR),e(DR,kZe),e(Nm,SZe),e(A,RZe),e(A,qm),e(qm,Bne),e(Bne,PZe),e(qm,BZe),e(qm,GR),e(GR,IZe),e(qm,NZe),e(A,qZe),e(A,jm),e(jm,Ine),e(Ine,jZe),e(jm,DZe),e(jm,OR),e(OR,GZe),e(jm,OZe),e(A,VZe),e(A,Dm),e(Dm,Nne),e(Nne,XZe),e(Dm,zZe),e(Dm,VR),e(VR,QZe),e(Dm,WZe),e(A,HZe),e(A,Gm),e(Gm,qne),e(qne,UZe),e(Gm,JZe),e(Gm,XR),e(XR,YZe),e(Gm,KZe),e(A,ZZe),e(A,Om),e(Om,jne),e(jne,eeo),e(Om,oeo),e(Om,zR),e(zR,reo),e(Om,teo),e(A,aeo),e(A,Vm),e(Vm,Dne),e(Dne,neo),e(Vm,seo),e(Vm,QR),e(QR,leo),e(Vm,ieo),e(A,deo),e(A,Xm),e(Xm,Gne),e(Gne,ceo),e(Xm,feo),e(Xm,WR),e(WR,meo),e(Xm,geo),e(A,heo),e(A,zm),e(zm,One),e(One,peo),e(zm,_eo),e(zm,HR),e(HR,ueo),e(zm,beo),e(A,veo),e(A,Qm),e(Qm,Vne),e(Vne,Feo),e(Qm,Teo),e(Qm,UR),e(UR,Meo),e(Qm,Eeo),e(A,Ceo),e(A,Wm),e(Wm,Xne),e(Xne,weo),e(Wm,Aeo),e(Wm,JR),e(JR,Leo),e(Wm,yeo),e(A,xeo),e(A,Hm),e(Hm,zne),e(zne,$eo),e(Hm,keo),e(Hm,YR),e(YR,Seo),e(Hm,Reo),e(A,Peo),e(A,Um),e(Um,Qne),e(Qne,Beo),e(Um,Ieo),e(Um,KR),e(KR,Neo),e(Um,qeo),e(A,jeo),e(A,Jm),e(Jm,Wne),e(Wne,Deo),e(Jm,Geo),e(Jm,ZR),e(ZR,Oeo),e(Jm,Veo),e(A,Xeo),e(A,Ym),e(Ym,Hne),e(Hne,zeo),e(Ym,Qeo),e(Ym,eP),e(eP,Weo),e(Ym,Heo),e(A,Ueo),e(A,Km),e(Km,Une),e(Une,Jeo),e(Km,Yeo),e(Km,oP),e(oP,Keo),e(Km,Zeo),e(A,eoo),e(A,Zm),e(Zm,Jne),e(Jne,ooo),e(Zm,roo),e(Zm,rP),e(rP,too),e(Zm,aoo),e(A,noo),e(A,eg),e(eg,Yne),e(Yne,soo),e(eg,loo),e(eg,tP),e(tP,ioo),e(eg,doo),e(A,coo),e(A,og),e(og,Kne),e(Kne,foo),e(og,moo),e(og,aP),e(aP,goo),e(og,hoo),e(A,poo),e(A,rg),e(rg,Zne),e(Zne,_oo),e(rg,uoo),e(rg,nP),e(nP,boo),e(rg,voo),e(A,Foo),e(A,tg),e(tg,ese),e(ese,Too),e(tg,Moo),e(tg,sP),e(sP,Eoo),e(tg,Coo),e(A,woo),e(A,ag),e(ag,ose),e(ose,Aoo),e(ag,Loo),e(ag,lP),e(lP,yoo),e(ag,xoo),e(A,$oo),e(A,ng),e(ng,rse),e(rse,koo),e(ng,Soo),e(ng,iP),e(iP,Roo),e(ng,Poo),e(A,Boo),e(A,sg),e(sg,tse),e(tse,Ioo),e(sg,Noo),e(sg,dP),e(dP,qoo),e(sg,joo),e(A,Doo),e(A,lg),e(lg,ase),e(ase,Goo),e(lg,Ooo),e(lg,cP),e(cP,Voo),e(lg,Xoo),e(A,zoo),e(A,ig),e(ig,nse),e(nse,Qoo),e(ig,Woo),e(ig,fP),e(fP,Hoo),e(ig,Uoo),e(A,Joo),e(A,dg),e(dg,sse),e(sse,Yoo),e(dg,Koo),e(dg,mP),e(mP,Zoo),e(dg,ero),e(A,oro),e(A,cg),e(cg,lse),e(lse,rro),e(cg,tro),e(cg,gP),e(gP,aro),e(cg,nro),e(A,sro),e(A,fg),e(fg,ise),e(ise,lro),e(fg,iro),e(fg,hP),e(hP,dro),e(fg,cro),e(A,fro),e(A,mg),e(mg,dse),e(dse,mro),e(mg,gro),e(mg,pP),e(pP,hro),e(mg,pro),e(A,_ro),e(A,gg),e(gg,cse),e(cse,uro),e(gg,bro),e(gg,_P),e(_P,vro),e(gg,Fro),e(A,Tro),e(A,hg),e(hg,fse),e(fse,Mro),e(hg,Ero),e(hg,uP),e(uP,Cro),e(hg,wro),e(A,Aro),e(A,pg),e(pg,mse),e(mse,Lro),e(pg,yro),e(pg,bP),e(bP,xro),e(pg,$ro),e(A,kro),e(A,_g),e(_g,gse),e(gse,Sro),e(_g,Rro),e(_g,vP),e(vP,Pro),e(_g,Bro),e(A,Iro),e(A,ug),e(ug,hse),e(hse,Nro),e(ug,qro),e(ug,FP),e(FP,jro),e(ug,Dro),e(A,Gro),e(A,bg),e(bg,pse),e(pse,Oro),e(bg,Vro),e(bg,TP),e(TP,Xro),e(bg,zro),e(A,Qro),e(A,vg),e(vg,_se),e(_se,Wro),e(vg,Hro),e(vg,MP),e(MP,Uro),e(vg,Jro),e(A,Yro),e(A,Fg),e(Fg,use),e(use,Kro),e(Fg,Zro),e(Fg,EP),e(EP,eto),e(Fg,oto),e(A,rto),e(A,Tg),e(Tg,bse),e(bse,tto),e(Tg,ato),e(Tg,CP),e(CP,nto),e(Tg,sto),e(A,lto),e(A,Mg),e(Mg,vse),e(vse,ito),e(Mg,dto),e(Mg,wP),e(wP,cto),e(Mg,fto),e(A,mto),e(A,Eg),e(Eg,Fse),e(Fse,gto),e(Eg,hto),e(Eg,AP),e(AP,pto),e(Eg,_to),e(A,uto),e(A,Cg),e(Cg,Tse),e(Tse,bto),e(Cg,vto),e(Cg,LP),e(LP,Fto),e(Cg,Tto),e(A,Mto),e(A,wg),e(wg,Mse),e(Mse,Eto),e(wg,Cto),e(wg,yP),e(yP,wto),e(wg,Ato),e(A,Lto),e(A,Ag),e(Ag,Ese),e(Ese,yto),e(Ag,xto),e(Ag,xP),e(xP,$to),e(Ag,kto),e(A,Sto),e(A,Lg),e(Lg,Cse),e(Cse,Rto),e(Lg,Pto),e(Lg,$P),e($P,Bto),e(Lg,Ito),e(A,Nto),e(A,yg),e(yg,wse),e(wse,qto),e(yg,jto),e(yg,kP),e(kP,Dto),e(yg,Gto),e(A,Oto),e(A,xg),e(xg,Ase),e(Ase,Vto),e(xg,Xto),e(xg,SP),e(SP,zto),e(xg,Qto),e(A,Wto),e(A,$g),e($g,Lse),e(Lse,Hto),e($g,Uto),e($g,RP),e(RP,Jto),e($g,Yto),e(A,Kto),e(A,kg),e(kg,yse),e(yse,Zto),e(kg,eao),e(kg,PP),e(PP,oao),e(kg,rao),e(A,tao),e(A,Sg),e(Sg,xse),e(xse,aao),e(Sg,nao),e(Sg,BP),e(BP,sao),e(Sg,lao),e(A,iao),e(A,Rg),e(Rg,$se),e($se,dao),e(Rg,cao),e(Rg,IP),e(IP,fao),e(Rg,mao),e(A,gao),e(A,Pg),e(Pg,kse),e(kse,hao),e(Pg,pao),e(Pg,NP),e(NP,_ao),e(Pg,uao),e(A,bao),e(A,Bg),e(Bg,Sse),e(Sse,vao),e(Bg,Fao),e(Bg,qP),e(qP,Tao),e(Bg,Mao),e(A,Eao),e(A,Ig),e(Ig,Rse),e(Rse,Cao),e(Ig,wao),e(Ig,jP),e(jP,Aao),e(Ig,Lao),e(A,yao),e(A,Ng),e(Ng,Pse),e(Pse,xao),e(Ng,$ao),e(Ng,DP),e(DP,kao),e(Ng,Sao),e(A,Rao),e(A,qg),e(qg,Bse),e(Bse,Pao),e(qg,Bao),e(qg,GP),e(GP,Iao),e(qg,Nao),e(A,qao),e(A,jg),e(jg,Ise),e(Ise,jao),e(jg,Dao),e(jg,OP),e(OP,Gao),e(jg,Oao),e(A,Vao),e(A,Dg),e(Dg,Nse),e(Nse,Xao),e(Dg,zao),e(Dg,VP),e(VP,Qao),e(Dg,Wao),e(A,Hao),e(A,Gg),e(Gg,qse),e(qse,Uao),e(Gg,Jao),e(Gg,XP),e(XP,Yao),e(Gg,Kao),e(A,Zao),e(A,Og),e(Og,jse),e(jse,eno),e(Og,ono),e(Og,zP),e(zP,rno),e(Og,tno),e(A,ano),e(A,Vg),e(Vg,Dse),e(Dse,nno),e(Vg,sno),e(Vg,QP),e(QP,lno),e(Vg,ino),e(A,dno),e(A,Xg),e(Xg,Gse),e(Gse,cno),e(Xg,fno),e(Xg,WP),e(WP,mno),e(Xg,gno),e(A,hno),e(A,zg),e(zg,Ose),e(Ose,pno),e(zg,_no),e(zg,HP),e(HP,uno),e(zg,bno),e(A,vno),e(A,Qg),e(Qg,Vse),e(Vse,Fno),e(Qg,Tno),e(Qg,UP),e(UP,Mno),e(Qg,Eno),e(A,Cno),e(A,Wg),e(Wg,Xse),e(Xse,wno),e(Wg,Ano),e(Wg,JP),e(JP,Lno),e(Wg,yno),e(A,xno),e(A,Hg),e(Hg,zse),e(zse,$no),e(Hg,kno),e(Hg,YP),e(YP,Sno),e(Hg,Rno),e(A,Pno),e(A,Ug),e(Ug,Qse),e(Qse,Bno),e(Ug,Ino),e(Ug,KP),e(KP,Nno),e(Ug,qno),e(A,jno),e(A,Jg),e(Jg,Wse),e(Wse,Dno),e(Jg,Gno),e(Jg,ZP),e(ZP,Ono),e(Jg,Vno),e(yr,Xno),M(Yg,yr,null),e(Lo,zno),e(Lo,Kg),M(gL,Kg,null),e(Kg,Qno),e(Kg,Hse),e(Hse,Wno),b(f,mXe,u),b(f,Ni,u),e(Ni,Zg),e(Zg,Use),M(hL,Use,null),e(Ni,Hno),e(Ni,Jse),e(Jse,Uno),b(f,gXe,u),b(f,yo,u),M(pL,yo,null),e(yo,Jno),e(yo,_L),e(_L,Yno),e(_L,eB),e(eB,Kno),e(_L,Zno),e(yo,eso),e(yo,uL),e(uL,oso),e(uL,Yse),e(Yse,rso),e(uL,tso),e(yo,aso),e(yo,xr),M(bL,xr,null),e(xr,nso),e(xr,Kse),e(Kse,sso),e(xr,lso),e(xr,Pa),e(Pa,iso),e(Pa,Zse),e(Zse,dso),e(Pa,cso),e(Pa,ele),e(ele,fso),e(Pa,mso),e(Pa,ole),e(ole,gso),e(Pa,hso),e(xr,pso),e(xr,k),e(k,jn),e(jn,rle),e(rle,_so),e(jn,uso),e(jn,oB),e(oB,bso),e(jn,vso),e(jn,rB),e(rB,Fso),e(jn,Tso),e(k,Mso),e(k,Dn),e(Dn,tle),e(tle,Eso),e(Dn,Cso),e(Dn,tB),e(tB,wso),e(Dn,Aso),e(Dn,aB),e(aB,Lso),e(Dn,yso),e(k,xso),e(k,Gn),e(Gn,ale),e(ale,$so),e(Gn,kso),e(Gn,nB),e(nB,Sso),e(Gn,Rso),e(Gn,sB),e(sB,Pso),e(Gn,Bso),e(k,Iso),e(k,eh),e(eh,nle),e(nle,Nso),e(eh,qso),e(eh,lB),e(lB,jso),e(eh,Dso),e(k,Gso),e(k,On),e(On,sle),e(sle,Oso),e(On,Vso),e(On,iB),e(iB,Xso),e(On,zso),e(On,dB),e(dB,Qso),e(On,Wso),e(k,Hso),e(k,oh),e(oh,lle),e(lle,Uso),e(oh,Jso),e(oh,cB),e(cB,Yso),e(oh,Kso),e(k,Zso),e(k,rh),e(rh,ile),e(ile,elo),e(rh,olo),e(rh,fB),e(fB,rlo),e(rh,tlo),e(k,alo),e(k,th),e(th,dle),e(dle,nlo),e(th,slo),e(th,mB),e(mB,llo),e(th,ilo),e(k,dlo),e(k,Vn),e(Vn,cle),e(cle,clo),e(Vn,flo),e(Vn,gB),e(gB,mlo),e(Vn,glo),e(Vn,hB),e(hB,hlo),e(Vn,plo),e(k,_lo),e(k,Xn),e(Xn,fle),e(fle,ulo),e(Xn,blo),e(Xn,pB),e(pB,vlo),e(Xn,Flo),e(Xn,_B),e(_B,Tlo),e(Xn,Mlo),e(k,Elo),e(k,zn),e(zn,mle),e(mle,Clo),e(zn,wlo),e(zn,uB),e(uB,Alo),e(zn,Llo),e(zn,bB),e(bB,ylo),e(zn,xlo),e(k,$lo),e(k,ah),e(ah,gle),e(gle,klo),e(ah,Slo),e(ah,vB),e(vB,Rlo),e(ah,Plo),e(k,Blo),e(k,nh),e(nh,hle),e(hle,Ilo),e(nh,Nlo),e(nh,FB),e(FB,qlo),e(nh,jlo),e(k,Dlo),e(k,sh),e(sh,ple),e(ple,Glo),e(sh,Olo),e(sh,TB),e(TB,Vlo),e(sh,Xlo),e(k,zlo),e(k,Qn),e(Qn,_le),e(_le,Qlo),e(Qn,Wlo),e(Qn,MB),e(MB,Hlo),e(Qn,Ulo),e(Qn,EB),e(EB,Jlo),e(Qn,Ylo),e(k,Klo),e(k,lh),e(lh,ule),e(ule,Zlo),e(lh,eio),e(lh,CB),e(CB,oio),e(lh,rio),e(k,tio),e(k,Wn),e(Wn,ble),e(ble,aio),e(Wn,nio),e(Wn,wB),e(wB,sio),e(Wn,lio),e(Wn,AB),e(AB,iio),e(Wn,dio),e(k,cio),e(k,Hn),e(Hn,vle),e(vle,fio),e(Hn,mio),e(Hn,LB),e(LB,gio),e(Hn,hio),e(Hn,yB),e(yB,pio),e(Hn,_io),e(k,uio),e(k,Un),e(Un,Fle),e(Fle,bio),e(Un,vio),e(Un,xB),e(xB,Fio),e(Un,Tio),e(Un,$B),e($B,Mio),e(Un,Eio),e(k,Cio),e(k,Jn),e(Jn,Tle),e(Tle,wio),e(Jn,Aio),e(Jn,kB),e(kB,Lio),e(Jn,yio),e(Jn,SB),e(SB,xio),e(Jn,$io),e(k,kio),e(k,ih),e(ih,Mle),e(Mle,Sio),e(ih,Rio),e(ih,RB),e(RB,Pio),e(ih,Bio),e(k,Iio),e(k,Yn),e(Yn,Ele),e(Ele,Nio),e(Yn,qio),e(Yn,PB),e(PB,jio),e(Yn,Dio),e(Yn,BB),e(BB,Gio),e(Yn,Oio),e(k,Vio),e(k,Kn),e(Kn,Cle),e(Cle,Xio),e(Kn,zio),e(Kn,IB),e(IB,Qio),e(Kn,Wio),e(Kn,NB),e(NB,Hio),e(Kn,Uio),e(k,Jio),e(k,Zn),e(Zn,wle),e(wle,Yio),e(Zn,Kio),e(Zn,qB),e(qB,Zio),e(Zn,edo),e(Zn,jB),e(jB,odo),e(Zn,rdo),e(k,tdo),e(k,es),e(es,Ale),e(Ale,ado),e(es,ndo),e(es,DB),e(DB,sdo),e(es,ldo),e(es,GB),e(GB,ido),e(es,ddo),e(k,cdo),e(k,os),e(os,Lle),e(Lle,fdo),e(os,mdo),e(os,OB),e(OB,gdo),e(os,hdo),e(os,VB),e(VB,pdo),e(os,_do),e(k,udo),e(k,rs),e(rs,yle),e(yle,bdo),e(rs,vdo),e(rs,XB),e(XB,Fdo),e(rs,Tdo),e(rs,zB),e(zB,Mdo),e(rs,Edo),e(k,Cdo),e(k,dh),e(dh,xle),e(xle,wdo),e(dh,Ado),e(dh,QB),e(QB,Ldo),e(dh,ydo),e(k,xdo),e(k,ts),e(ts,$le),e($le,$do),e(ts,kdo),e(ts,WB),e(WB,Sdo),e(ts,Rdo),e(ts,HB),e(HB,Pdo),e(ts,Bdo),e(k,Ido),e(k,ch),e(ch,kle),e(kle,Ndo),e(ch,qdo),e(ch,UB),e(UB,jdo),e(ch,Ddo),e(k,Gdo),e(k,as),e(as,Sle),e(Sle,Odo),e(as,Vdo),e(as,JB),e(JB,Xdo),e(as,zdo),e(as,YB),e(YB,Qdo),e(as,Wdo),e(k,Hdo),e(k,ns),e(ns,Rle),e(Rle,Udo),e(ns,Jdo),e(ns,KB),e(KB,Ydo),e(ns,Kdo),e(ns,ZB),e(ZB,Zdo),e(ns,eco),e(k,oco),e(k,ss),e(ss,Ple),e(Ple,rco),e(ss,tco),e(ss,eI),e(eI,aco),e(ss,nco),e(ss,oI),e(oI,sco),e(ss,lco),e(k,ico),e(k,fh),e(fh,Ble),e(Ble,dco),e(fh,cco),e(fh,rI),e(rI,fco),e(fh,mco),e(k,gco),e(k,ls),e(ls,Ile),e(Ile,hco),e(ls,pco),e(ls,tI),e(tI,_co),e(ls,uco),e(ls,aI),e(aI,bco),e(ls,vco),e(k,Fco),e(k,is),e(is,Nle),e(Nle,Tco),e(is,Mco),e(is,nI),e(nI,Eco),e(is,Cco),e(is,sI),e(sI,wco),e(is,Aco),e(k,Lco),e(k,ds),e(ds,qle),e(qle,yco),e(ds,xco),e(ds,lI),e(lI,$co),e(ds,kco),e(ds,iI),e(iI,Sco),e(ds,Rco),e(k,Pco),e(k,mh),e(mh,jle),e(jle,Bco),e(mh,Ico),e(mh,dI),e(dI,Nco),e(mh,qco),e(k,jco),e(k,cs),e(cs,Dle),e(Dle,Dco),e(cs,Gco),e(cs,cI),e(cI,Oco),e(cs,Vco),e(cs,fI),e(fI,Xco),e(cs,zco),e(k,Qco),e(k,fs),e(fs,Gle),e(Gle,Wco),e(fs,Hco),e(fs,mI),e(mI,Uco),e(fs,Jco),e(fs,gI),e(gI,Yco),e(fs,Kco),e(k,Zco),e(k,ms),e(ms,Ole),e(Ole,efo),e(ms,ofo),e(ms,hI),e(hI,rfo),e(ms,tfo),e(ms,pI),e(pI,afo),e(ms,nfo),e(k,sfo),e(k,gs),e(gs,Vle),e(Vle,lfo),e(gs,ifo),e(gs,_I),e(_I,dfo),e(gs,cfo),e(gs,uI),e(uI,ffo),e(gs,mfo),e(k,gfo),e(k,hs),e(hs,Xle),e(Xle,hfo),e(hs,pfo),e(hs,bI),e(bI,_fo),e(hs,ufo),e(hs,vI),e(vI,bfo),e(hs,vfo),e(k,Ffo),e(k,ps),e(ps,zle),e(zle,Tfo),e(ps,Mfo),e(ps,FI),e(FI,Efo),e(ps,Cfo),e(ps,TI),e(TI,wfo),e(ps,Afo),e(k,Lfo),e(k,_s),e(_s,Qle),e(Qle,yfo),e(_s,xfo),e(_s,MI),e(MI,$fo),e(_s,kfo),e(_s,EI),e(EI,Sfo),e(_s,Rfo),e(k,Pfo),e(k,us),e(us,Wle),e(Wle,Bfo),e(us,Ifo),e(us,CI),e(CI,Nfo),e(us,qfo),e(us,wI),e(wI,jfo),e(us,Dfo),e(k,Gfo),e(k,gh),e(gh,Hle),e(Hle,Ofo),e(gh,Vfo),e(gh,AI),e(AI,Xfo),e(gh,zfo),e(k,Qfo),e(k,bs),e(bs,Ule),e(Ule,Wfo),e(bs,Hfo),e(bs,LI),e(LI,Ufo),e(bs,Jfo),e(bs,yI),e(yI,Yfo),e(bs,Kfo),e(k,Zfo),e(k,hh),e(hh,Jle),e(Jle,emo),e(hh,omo),e(hh,xI),e(xI,rmo),e(hh,tmo),e(k,amo),e(k,ph),e(ph,Yle),e(Yle,nmo),e(ph,smo),e(ph,$I),e($I,lmo),e(ph,imo),e(k,dmo),e(k,vs),e(vs,Kle),e(Kle,cmo),e(vs,fmo),e(vs,kI),e(kI,mmo),e(vs,gmo),e(vs,SI),e(SI,hmo),e(vs,pmo),e(k,_mo),e(k,Fs),e(Fs,Zle),e(Zle,umo),e(Fs,bmo),e(Fs,RI),e(RI,vmo),e(Fs,Fmo),e(Fs,PI),e(PI,Tmo),e(Fs,Mmo),e(k,Emo),e(k,Ts),e(Ts,eie),e(eie,Cmo),e(Ts,wmo),e(Ts,BI),e(BI,Amo),e(Ts,Lmo),e(Ts,II),e(II,ymo),e(Ts,xmo),e(k,$mo),e(k,_h),e(_h,oie),e(oie,kmo),e(_h,Smo),e(_h,NI),e(NI,Rmo),e(_h,Pmo),e(k,Bmo),e(k,Ms),e(Ms,rie),e(rie,Imo),e(Ms,Nmo),e(Ms,qI),e(qI,qmo),e(Ms,jmo),e(Ms,jI),e(jI,Dmo),e(Ms,Gmo),e(k,Omo),e(k,Es),e(Es,tie),e(tie,Vmo),e(Es,Xmo),e(Es,DI),e(DI,zmo),e(Es,Qmo),e(Es,GI),e(GI,Wmo),e(Es,Hmo),e(k,Umo),e(k,Cs),e(Cs,aie),e(aie,Jmo),e(Cs,Ymo),e(Cs,OI),e(OI,Kmo),e(Cs,Zmo),e(Cs,VI),e(VI,ego),e(Cs,ogo),e(k,rgo),e(k,ws),e(ws,nie),e(nie,tgo),e(ws,ago),e(ws,XI),e(XI,ngo),e(ws,sgo),e(ws,zI),e(zI,lgo),e(ws,igo),e(k,dgo),e(k,As),e(As,sie),e(sie,cgo),e(As,fgo),e(As,QI),e(QI,mgo),e(As,ggo),e(As,WI),e(WI,hgo),e(As,pgo),e(k,_go),e(k,Ls),e(Ls,lie),e(lie,ugo),e(Ls,bgo),e(Ls,HI),e(HI,vgo),e(Ls,Fgo),e(Ls,UI),e(UI,Tgo),e(Ls,Mgo),e(k,Ego),e(k,ys),e(ys,iie),e(iie,Cgo),e(ys,wgo),e(ys,JI),e(JI,Ago),e(ys,Lgo),e(ys,YI),e(YI,ygo),e(ys,xgo),e(k,$go),e(k,uh),e(uh,die),e(die,kgo),e(uh,Sgo),e(uh,KI),e(KI,Rgo),e(uh,Pgo),e(k,Bgo),e(k,xs),e(xs,cie),e(cie,Igo),e(xs,Ngo),e(xs,ZI),e(ZI,qgo),e(xs,jgo),e(xs,eN),e(eN,Dgo),e(xs,Ggo),e(k,Ogo),e(k,bh),e(bh,fie),e(fie,Vgo),e(bh,Xgo),e(bh,oN),e(oN,zgo),e(bh,Qgo),e(k,Wgo),e(k,vh),e(vh,mie),e(mie,Hgo),e(vh,Ugo),e(vh,rN),e(rN,Jgo),e(vh,Ygo),e(k,Kgo),e(k,Fh),e(Fh,gie),e(gie,Zgo),e(Fh,eho),e(Fh,tN),e(tN,oho),e(Fh,rho),e(k,tho),e(k,Th),e(Th,hie),e(hie,aho),e(Th,nho),e(Th,aN),e(aN,sho),e(Th,lho),e(k,iho),e(k,$s),e($s,pie),e(pie,dho),e($s,cho),e($s,nN),e(nN,fho),e($s,mho),e($s,sN),e(sN,gho),e($s,hho),e(k,pho),e(k,Mh),e(Mh,_ie),e(_ie,_ho),e(Mh,uho),e(Mh,lN),e(lN,bho),e(Mh,vho),e(k,Fho),e(k,ks),e(ks,uie),e(uie,Tho),e(ks,Mho),e(ks,iN),e(iN,Eho),e(ks,Cho),e(ks,dN),e(dN,who),e(ks,Aho),e(k,Lho),e(k,Ss),e(Ss,bie),e(bie,yho),e(Ss,xho),e(Ss,cN),e(cN,$ho),e(Ss,kho),e(Ss,fN),e(fN,Sho),e(Ss,Rho),e(k,Pho),e(k,Rs),e(Rs,vie),e(vie,Bho),e(Rs,Iho),e(Rs,mN),e(mN,Nho),e(Rs,qho),e(Rs,gN),e(gN,jho),e(Rs,Dho),e(k,Gho),e(k,Ps),e(Ps,Fie),e(Fie,Oho),e(Ps,Vho),e(Ps,hN),e(hN,Xho),e(Ps,zho),e(Ps,pN),e(pN,Qho),e(Ps,Who),e(k,Hho),e(k,Bs),e(Bs,Tie),e(Tie,Uho),e(Bs,Jho),e(Bs,_N),e(_N,Yho),e(Bs,Kho),e(Bs,uN),e(uN,Zho),e(Bs,epo),e(k,opo),e(k,Is),e(Is,Mie),e(Mie,rpo),e(Is,tpo),e(Is,bN),e(bN,apo),e(Is,npo),e(Is,vN),e(vN,spo),e(Is,lpo),e(k,ipo),e(k,Eh),e(Eh,Eie),e(Eie,dpo),e(Eh,cpo),e(Eh,FN),e(FN,fpo),e(Eh,mpo),e(k,gpo),e(k,Ch),e(Ch,Cie),e(Cie,hpo),e(Ch,ppo),e(Ch,TN),e(TN,_po),e(Ch,upo),e(k,bpo),e(k,Ns),e(Ns,wie),e(wie,vpo),e(Ns,Fpo),e(Ns,MN),e(MN,Tpo),e(Ns,Mpo),e(Ns,EN),e(EN,Epo),e(Ns,Cpo),e(k,wpo),e(k,qs),e(qs,Aie),e(Aie,Apo),e(qs,Lpo),e(qs,CN),e(CN,ypo),e(qs,xpo),e(qs,wN),e(wN,$po),e(qs,kpo),e(k,Spo),e(k,js),e(js,Lie),e(Lie,Rpo),e(js,Ppo),e(js,AN),e(AN,Bpo),e(js,Ipo),e(js,LN),e(LN,Npo),e(js,qpo),e(k,jpo),e(k,wh),e(wh,yie),e(yie,Dpo),e(wh,Gpo),e(wh,yN),e(yN,Opo),e(wh,Vpo),e(k,Xpo),e(k,Ah),e(Ah,xie),e(xie,zpo),e(Ah,Qpo),e(Ah,xN),e(xN,Wpo),e(Ah,Hpo),e(k,Upo),e(k,Lh),e(Lh,$ie),e($ie,Jpo),e(Lh,Ypo),e(Lh,$N),e($N,Kpo),e(Lh,Zpo),e(k,e_o),e(k,Ds),e(Ds,kie),e(kie,o_o),e(Ds,r_o),e(Ds,kN),e(kN,t_o),e(Ds,a_o),e(Ds,SN),e(SN,n_o),e(Ds,s_o),e(k,l_o),e(k,Gs),e(Gs,Sie),e(Sie,i_o),e(Gs,d_o),e(Gs,RN),e(RN,c_o),e(Gs,f_o),e(Gs,PN),e(PN,m_o),e(Gs,g_o),e(k,h_o),e(k,yh),e(yh,Rie),e(Rie,p_o),e(yh,__o),e(yh,BN),e(BN,u_o),e(yh,b_o),e(k,v_o),e(k,xh),e(xh,Pie),e(Pie,F_o),e(xh,T_o),e(xh,IN),e(IN,M_o),e(xh,E_o),e(k,C_o),e(k,$h),e($h,Bie),e(Bie,w_o),e($h,A_o),e($h,NN),e(NN,L_o),e($h,y_o),e(k,x_o),e(k,Os),e(Os,Iie),e(Iie,$_o),e(Os,k_o),e(Os,qN),e(qN,S_o),e(Os,R_o),e(Os,jN),e(jN,P_o),e(Os,B_o),e(k,I_o),e(k,kh),e(kh,Nie),e(Nie,N_o),e(kh,q_o),e(kh,DN),e(DN,j_o),e(kh,D_o),e(k,G_o),e(k,Sh),e(Sh,qie),e(qie,O_o),e(Sh,V_o),e(Sh,GN),e(GN,X_o),e(Sh,z_o),e(k,Q_o),e(k,Vs),e(Vs,jie),e(jie,W_o),e(Vs,H_o),e(Vs,ON),e(ON,U_o),e(Vs,J_o),e(Vs,VN),e(VN,Y_o),e(Vs,K_o),e(k,Z_o),e(k,Xs),e(Xs,Die),e(Die,euo),e(Xs,ouo),e(Xs,XN),e(XN,ruo),e(Xs,tuo),e(Xs,zN),e(zN,auo),e(Xs,nuo),e(k,suo),e(k,zs),e(zs,Gie),e(Gie,luo),e(zs,iuo),e(zs,QN),e(QN,duo),e(zs,cuo),e(zs,WN),e(WN,fuo),e(zs,muo),e(k,guo),e(k,Qs),e(Qs,Oie),e(Oie,huo),e(Qs,puo),e(Qs,HN),e(HN,_uo),e(Qs,uuo),e(Qs,UN),e(UN,buo),e(Qs,vuo),e(xr,Fuo),M(Rh,xr,null),e(yo,Tuo),e(yo,Ph),M(vL,Ph,null),e(Ph,Muo),e(Ph,Vie),e(Vie,Euo),b(f,hXe,u),b(f,qi,u),e(qi,Bh),e(Bh,Xie),M(FL,Xie,null),e(qi,Cuo),e(qi,zie),e(zie,wuo),b(f,pXe,u),b(f,xo,u),M(TL,xo,null),e(xo,Auo),e(xo,ML),e(ML,Luo),e(ML,JN),e(JN,yuo),e(ML,xuo),e(xo,$uo),e(xo,EL),e(EL,kuo),e(EL,Qie),e(Qie,Suo),e(EL,Ruo),e(xo,Puo),e(xo,Ue),M(CL,Ue,null),e(Ue,Buo),e(Ue,Wie),e(Wie,Iuo),e(Ue,Nuo),e(Ue,Ba),e(Ba,quo),e(Ba,Hie),e(Hie,juo),e(Ba,Duo),e(Ba,Uie),e(Uie,Guo),e(Ba,Ouo),e(Ba,Jie),e(Jie,Vuo),e(Ba,Xuo),e(Ue,zuo),e(Ue,Y),e(Y,Ih),e(Ih,Yie),e(Yie,Quo),e(Ih,Wuo),e(Ih,YN),e(YN,Huo),e(Ih,Uuo),e(Y,Juo),e(Y,Nh),e(Nh,Kie),e(Kie,Yuo),e(Nh,Kuo),e(Nh,KN),e(KN,Zuo),e(Nh,e1o),e(Y,o1o),e(Y,qh),e(qh,Zie),e(Zie,r1o),e(qh,t1o),e(qh,ZN),e(ZN,a1o),e(qh,n1o),e(Y,s1o),e(Y,jh),e(jh,ede),e(ede,l1o),e(jh,i1o),e(jh,eq),e(eq,d1o),e(jh,c1o),e(Y,f1o),e(Y,Dh),e(Dh,ode),e(ode,m1o),e(Dh,g1o),e(Dh,oq),e(oq,h1o),e(Dh,p1o),e(Y,_1o),e(Y,Gh),e(Gh,rde),e(rde,u1o),e(Gh,b1o),e(Gh,rq),e(rq,v1o),e(Gh,F1o),e(Y,T1o),e(Y,Oh),e(Oh,tde),e(tde,M1o),e(Oh,E1o),e(Oh,tq),e(tq,C1o),e(Oh,w1o),e(Y,A1o),e(Y,Vh),e(Vh,ade),e(ade,L1o),e(Vh,y1o),e(Vh,aq),e(aq,x1o),e(Vh,$1o),e(Y,k1o),e(Y,Xh),e(Xh,nde),e(nde,S1o),e(Xh,R1o),e(Xh,nq),e(nq,P1o),e(Xh,B1o),e(Y,I1o),e(Y,zh),e(zh,sde),e(sde,N1o),e(zh,q1o),e(zh,sq),e(sq,j1o),e(zh,D1o),e(Y,G1o),e(Y,Qh),e(Qh,lde),e(lde,O1o),e(Qh,V1o),e(Qh,lq),e(lq,X1o),e(Qh,z1o),e(Y,Q1o),e(Y,Wh),e(Wh,ide),e(ide,W1o),e(Wh,H1o),e(Wh,iq),e(iq,U1o),e(Wh,J1o),e(Y,Y1o),e(Y,Hh),e(Hh,dde),e(dde,K1o),e(Hh,Z1o),e(Hh,dq),e(dq,e2o),e(Hh,o2o),e(Y,r2o),e(Y,Uh),e(Uh,cde),e(cde,t2o),e(Uh,a2o),e(Uh,cq),e(cq,n2o),e(Uh,s2o),e(Y,l2o),e(Y,Jh),e(Jh,fde),e(fde,i2o),e(Jh,d2o),e(Jh,fq),e(fq,c2o),e(Jh,f2o),e(Y,m2o),e(Y,Yh),e(Yh,mde),e(mde,g2o),e(Yh,h2o),e(Yh,mq),e(mq,p2o),e(Yh,_2o),e(Y,u2o),e(Y,Kh),e(Kh,gde),e(gde,b2o),e(Kh,v2o),e(Kh,gq),e(gq,F2o),e(Kh,T2o),e(Y,M2o),e(Y,Zh),e(Zh,hde),e(hde,E2o),e(Zh,C2o),e(Zh,hq),e(hq,w2o),e(Zh,A2o),e(Y,L2o),e(Y,ep),e(ep,pde),e(pde,y2o),e(ep,x2o),e(ep,pq),e(pq,$2o),e(ep,k2o),e(Y,S2o),e(Y,op),e(op,_de),e(_de,R2o),e(op,P2o),e(op,_q),e(_q,B2o),e(op,I2o),e(Y,N2o),e(Y,rp),e(rp,ude),e(ude,q2o),e(rp,j2o),e(rp,uq),e(uq,D2o),e(rp,G2o),e(Y,O2o),e(Y,tp),e(tp,bde),e(bde,V2o),e(tp,X2o),e(tp,bq),e(bq,z2o),e(tp,Q2o),e(Y,W2o),e(Y,ap),e(ap,vde),e(vde,H2o),e(ap,U2o),e(ap,vq),e(vq,J2o),e(ap,Y2o),e(Y,K2o),e(Y,np),e(np,Fde),e(Fde,Z2o),e(np,ebo),e(np,Fq),e(Fq,obo),e(np,rbo),e(Y,tbo),e(Y,sp),e(sp,Tde),e(Tde,abo),e(sp,nbo),e(sp,Tq),e(Tq,sbo),e(sp,lbo),e(Y,ibo),e(Y,lp),e(lp,Mde),e(Mde,dbo),e(lp,cbo),e(lp,Mq),e(Mq,fbo),e(lp,mbo),e(Y,gbo),e(Y,ip),e(ip,Ede),e(Ede,hbo),e(ip,pbo),e(ip,Eq),e(Eq,_bo),e(ip,ubo),e(Y,bbo),e(Y,dp),e(dp,Cde),e(Cde,vbo),e(dp,Fbo),e(dp,Cq),e(Cq,Tbo),e(dp,Mbo),e(Y,Ebo),e(Y,cp),e(cp,wde),e(wde,Cbo),e(cp,wbo),e(cp,wq),e(wq,Abo),e(cp,Lbo),e(Y,ybo),e(Y,fp),e(fp,Ade),e(Ade,xbo),e(fp,$bo),e(fp,Aq),e(Aq,kbo),e(fp,Sbo),e(Y,Rbo),e(Y,mp),e(mp,Lde),e(Lde,Pbo),e(mp,Bbo),e(mp,Lq),e(Lq,Ibo),e(mp,Nbo),e(Y,qbo),e(Y,gp),e(gp,yde),e(yde,jbo),e(gp,Dbo),e(gp,yq),e(yq,Gbo),e(gp,Obo),e(Y,Vbo),e(Y,hp),e(hp,xde),e(xde,Xbo),e(hp,zbo),e(hp,xq),e(xq,Qbo),e(hp,Wbo),e(Y,Hbo),e(Y,pp),e(pp,$de),e($de,Ubo),e(pp,Jbo),e(pp,$q),e($q,Ybo),e(pp,Kbo),e(Ue,Zbo),M(_p,Ue,null),e(Ue,evo),M(up,Ue,null),e(xo,ovo),e(xo,bp),M(wL,bp,null),e(bp,rvo),e(bp,kde),e(kde,tvo),b(f,_Xe,u),b(f,ji,u),e(ji,vp),e(vp,Sde),M(AL,Sde,null),e(ji,avo),e(ji,Rde),e(Rde,nvo),b(f,uXe,u),b(f,$o,u),M(LL,$o,null),e($o,svo),e($o,yL),e(yL,lvo),e(yL,kq),e(kq,ivo),e(yL,dvo),e($o,cvo),e($o,xL),e(xL,fvo),e(xL,Pde),e(Pde,mvo),e(xL,gvo),e($o,hvo),e($o,Je),M($L,Je,null),e(Je,pvo),e(Je,Bde),e(Bde,_vo),e(Je,uvo),e(Je,Di),e(Di,bvo),e(Di,Ide),e(Ide,vvo),e(Di,Fvo),e(Di,Nde),e(Nde,Tvo),e(Di,Mvo),e(Je,Evo),e(Je,he),e(he,Fp),e(Fp,qde),e(qde,Cvo),e(Fp,wvo),e(Fp,Sq),e(Sq,Avo),e(Fp,Lvo),e(he,yvo),e(he,Tp),e(Tp,jde),e(jde,xvo),e(Tp,$vo),e(Tp,Dde),e(Dde,kvo),e(Tp,Svo),e(he,Rvo),e(he,Mp),e(Mp,Gde),e(Gde,Pvo),e(Mp,Bvo),e(Mp,Rq),e(Rq,Ivo),e(Mp,Nvo),e(he,qvo),e(he,Ep),e(Ep,Ode),e(Ode,jvo),e(Ep,Dvo),e(Ep,Pq),e(Pq,Gvo),e(Ep,Ovo),e(he,Vvo),e(he,Cp),e(Cp,Vde),e(Vde,Xvo),e(Cp,zvo),e(Cp,Bq),e(Bq,Qvo),e(Cp,Wvo),e(he,Hvo),e(he,wp),e(wp,Xde),e(Xde,Uvo),e(wp,Jvo),e(wp,Iq),e(Iq,Yvo),e(wp,Kvo),e(he,Zvo),e(he,Ap),e(Ap,zde),e(zde,e0o),e(Ap,o0o),e(Ap,Nq),e(Nq,r0o),e(Ap,t0o),e(he,a0o),e(he,Lp),e(Lp,Qde),e(Qde,n0o),e(Lp,s0o),e(Lp,qq),e(qq,l0o),e(Lp,i0o),e(he,d0o),e(he,yp),e(yp,Wde),e(Wde,c0o),e(yp,f0o),e(yp,jq),e(jq,m0o),e(yp,g0o),e(he,h0o),e(he,xp),e(xp,Hde),e(Hde,p0o),e(xp,_0o),e(xp,Dq),e(Dq,u0o),e(xp,b0o),e(he,v0o),e(he,$p),e($p,Ude),e(Ude,F0o),e($p,T0o),e($p,Gq),e(Gq,M0o),e($p,E0o),e(he,C0o),e(he,kp),e(kp,Jde),e(Jde,w0o),e(kp,A0o),e(kp,Oq),e(Oq,L0o),e(kp,y0o),e(he,x0o),e(he,Sp),e(Sp,Yde),e(Yde,$0o),e(Sp,k0o),e(Sp,Vq),e(Vq,S0o),e(Sp,R0o),e(he,P0o),e(he,Rp),e(Rp,Kde),e(Kde,B0o),e(Rp,I0o),e(Rp,Xq),e(Xq,N0o),e(Rp,q0o),e(he,j0o),e(he,Pp),e(Pp,Zde),e(Zde,D0o),e(Pp,G0o),e(Pp,zq),e(zq,O0o),e(Pp,V0o),e(he,X0o),e(he,Bp),e(Bp,ece),e(ece,z0o),e(Bp,Q0o),e(Bp,Qq),e(Qq,W0o),e(Bp,H0o),e(he,U0o),e(he,Ip),e(Ip,oce),e(oce,J0o),e(Ip,Y0o),e(Ip,Wq),e(Wq,K0o),e(Ip,Z0o),e(he,eFo),e(he,Np),e(Np,rce),e(rce,oFo),e(Np,rFo),e(Np,Hq),e(Hq,tFo),e(Np,aFo),e(Je,nFo),M(qp,Je,null),e(Je,sFo),M(jp,Je,null),e($o,lFo),e($o,Dp),M(kL,Dp,null),e(Dp,iFo),e(Dp,tce),e(tce,dFo),b(f,bXe,u),b(f,Gi,u),e(Gi,Gp),e(Gp,ace),M(SL,ace,null),e(Gi,cFo),e(Gi,nce),e(nce,fFo),b(f,vXe,u),b(f,ko,u),M(RL,ko,null),e(ko,mFo),e(ko,Oi),e(Oi,gFo),e(Oi,Uq),e(Uq,hFo),e(Oi,pFo),e(Oi,Jq),e(Jq,_Fo),e(Oi,uFo),e(ko,bFo),e(ko,PL),e(PL,vFo),e(PL,sce),e(sce,FFo),e(PL,TFo),e(ko,MFo),e(ko,it),M(BL,it,null),e(it,EFo),e(it,lce),e(lce,CFo),e(it,wFo),e(it,Vi),e(Vi,AFo),e(Vi,ice),e(ice,LFo),e(Vi,yFo),e(Vi,Yq),e(Yq,xFo),e(Vi,$Fo),e(it,kFo),M(Op,it,null),e(ko,SFo),e(ko,Ye),M(IL,Ye,null),e(Ye,RFo),e(Ye,dce),e(dce,PFo),e(Ye,BFo),e(Ye,Ia),e(Ia,IFo),e(Ia,cce),e(cce,NFo),e(Ia,qFo),e(Ia,fce),e(fce,jFo),e(Ia,DFo),e(Ia,mce),e(mce,GFo),e(Ia,OFo),e(Ye,VFo),e(Ye,y),e(y,Vp),e(Vp,gce),e(gce,XFo),e(Vp,zFo),e(Vp,Kq),e(Kq,QFo),e(Vp,WFo),e(y,HFo),e(y,Xp),e(Xp,hce),e(hce,UFo),e(Xp,JFo),e(Xp,Zq),e(Zq,YFo),e(Xp,KFo),e(y,ZFo),e(y,zp),e(zp,pce),e(pce,eTo),e(zp,oTo),e(zp,ej),e(ej,rTo),e(zp,tTo),e(y,aTo),e(y,Qp),e(Qp,_ce),e(_ce,nTo),e(Qp,sTo),e(Qp,oj),e(oj,lTo),e(Qp,iTo),e(y,dTo),e(y,Wp),e(Wp,uce),e(uce,cTo),e(Wp,fTo),e(Wp,rj),e(rj,mTo),e(Wp,gTo),e(y,hTo),e(y,Hp),e(Hp,bce),e(bce,pTo),e(Hp,_To),e(Hp,tj),e(tj,uTo),e(Hp,bTo),e(y,vTo),e(y,Up),e(Up,vce),e(vce,FTo),e(Up,TTo),e(Up,aj),e(aj,MTo),e(Up,ETo),e(y,CTo),e(y,Jp),e(Jp,Fce),e(Fce,wTo),e(Jp,ATo),e(Jp,nj),e(nj,LTo),e(Jp,yTo),e(y,xTo),e(y,Yp),e(Yp,Tce),e(Tce,$To),e(Yp,kTo),e(Yp,sj),e(sj,STo),e(Yp,RTo),e(y,PTo),e(y,Kp),e(Kp,Mce),e(Mce,BTo),e(Kp,ITo),e(Kp,lj),e(lj,NTo),e(Kp,qTo),e(y,jTo),e(y,Zp),e(Zp,Ece),e(Ece,DTo),e(Zp,GTo),e(Zp,ij),e(ij,OTo),e(Zp,VTo),e(y,XTo),e(y,e_),e(e_,Cce),e(Cce,zTo),e(e_,QTo),e(e_,dj),e(dj,WTo),e(e_,HTo),e(y,UTo),e(y,o_),e(o_,wce),e(wce,JTo),e(o_,YTo),e(o_,cj),e(cj,KTo),e(o_,ZTo),e(y,e7o),e(y,r_),e(r_,Ace),e(Ace,o7o),e(r_,r7o),e(r_,fj),e(fj,t7o),e(r_,a7o),e(y,n7o),e(y,t_),e(t_,Lce),e(Lce,s7o),e(t_,l7o),e(t_,mj),e(mj,i7o),e(t_,d7o),e(y,c7o),e(y,a_),e(a_,yce),e(yce,f7o),e(a_,m7o),e(a_,gj),e(gj,g7o),e(a_,h7o),e(y,p7o),e(y,n_),e(n_,xce),e(xce,_7o),e(n_,u7o),e(n_,hj),e(hj,b7o),e(n_,v7o),e(y,F7o),e(y,s_),e(s_,$ce),e($ce,T7o),e(s_,M7o),e(s_,pj),e(pj,E7o),e(s_,C7o),e(y,w7o),e(y,l_),e(l_,kce),e(kce,A7o),e(l_,L7o),e(l_,_j),e(_j,y7o),e(l_,x7o),e(y,$7o),e(y,i_),e(i_,Sce),e(Sce,k7o),e(i_,S7o),e(i_,uj),e(uj,R7o),e(i_,P7o),e(y,B7o),e(y,d_),e(d_,Rce),e(Rce,I7o),e(d_,N7o),e(d_,bj),e(bj,q7o),e(d_,j7o),e(y,D7o),e(y,c_),e(c_,Pce),e(Pce,G7o),e(c_,O7o),e(c_,vj),e(vj,V7o),e(c_,X7o),e(y,z7o),e(y,f_),e(f_,Bce),e(Bce,Q7o),e(f_,W7o),e(f_,Fj),e(Fj,H7o),e(f_,U7o),e(y,J7o),e(y,m_),e(m_,Ice),e(Ice,Y7o),e(m_,K7o),e(m_,Tj),e(Tj,Z7o),e(m_,e9o),e(y,o9o),e(y,g_),e(g_,Nce),e(Nce,r9o),e(g_,t9o),e(g_,Mj),e(Mj,a9o),e(g_,n9o),e(y,s9o),e(y,h_),e(h_,qce),e(qce,l9o),e(h_,i9o),e(h_,Ej),e(Ej,d9o),e(h_,c9o),e(y,f9o),e(y,p_),e(p_,jce),e(jce,m9o),e(p_,g9o),e(p_,Cj),e(Cj,h9o),e(p_,p9o),e(y,_9o),e(y,__),e(__,Dce),e(Dce,u9o),e(__,b9o),e(__,wj),e(wj,v9o),e(__,F9o),e(y,T9o),e(y,u_),e(u_,Gce),e(Gce,M9o),e(u_,E9o),e(u_,Aj),e(Aj,C9o),e(u_,w9o),e(y,A9o),e(y,b_),e(b_,Oce),e(Oce,L9o),e(b_,y9o),e(b_,Lj),e(Lj,x9o),e(b_,$9o),e(y,k9o),e(y,v_),e(v_,Vce),e(Vce,S9o),e(v_,R9o),e(v_,yj),e(yj,P9o),e(v_,B9o),e(y,I9o),e(y,F_),e(F_,Xce),e(Xce,N9o),e(F_,q9o),e(F_,xj),e(xj,j9o),e(F_,D9o),e(y,G9o),e(y,T_),e(T_,zce),e(zce,O9o),e(T_,V9o),e(T_,$j),e($j,X9o),e(T_,z9o),e(y,Q9o),e(y,M_),e(M_,Qce),e(Qce,W9o),e(M_,H9o),e(M_,kj),e(kj,U9o),e(M_,J9o),e(y,Y9o),e(y,Ws),e(Ws,Wce),e(Wce,K9o),e(Ws,Z9o),e(Ws,Sj),e(Sj,eMo),e(Ws,oMo),e(Ws,Rj),e(Rj,rMo),e(Ws,tMo),e(y,aMo),e(y,E_),e(E_,Hce),e(Hce,nMo),e(E_,sMo),e(E_,Pj),e(Pj,lMo),e(E_,iMo),e(y,dMo),e(y,C_),e(C_,Uce),e(Uce,cMo),e(C_,fMo),e(C_,Bj),e(Bj,mMo),e(C_,gMo),e(y,hMo),e(y,w_),e(w_,Jce),e(Jce,pMo),e(w_,_Mo),e(w_,Ij),e(Ij,uMo),e(w_,bMo),e(y,vMo),e(y,A_),e(A_,Yce),e(Yce,FMo),e(A_,TMo),e(A_,Nj),e(Nj,MMo),e(A_,EMo),e(y,CMo),e(y,L_),e(L_,Kce),e(Kce,wMo),e(L_,AMo),e(L_,qj),e(qj,LMo),e(L_,yMo),e(y,xMo),e(y,y_),e(y_,Zce),e(Zce,$Mo),e(y_,kMo),e(y_,jj),e(jj,SMo),e(y_,RMo),e(y,PMo),e(y,x_),e(x_,efe),e(efe,BMo),e(x_,IMo),e(x_,Dj),e(Dj,NMo),e(x_,qMo),e(y,jMo),e(y,$_),e($_,ofe),e(ofe,DMo),e($_,GMo),e($_,Gj),e(Gj,OMo),e($_,VMo),e(y,XMo),e(y,k_),e(k_,rfe),e(rfe,zMo),e(k_,QMo),e(k_,Oj),e(Oj,WMo),e(k_,HMo),e(y,UMo),e(y,S_),e(S_,tfe),e(tfe,JMo),e(S_,YMo),e(S_,Vj),e(Vj,KMo),e(S_,ZMo),e(y,e4o),e(y,R_),e(R_,afe),e(afe,o4o),e(R_,r4o),e(R_,Xj),e(Xj,t4o),e(R_,a4o),e(y,n4o),e(y,P_),e(P_,nfe),e(nfe,s4o),e(P_,l4o),e(P_,zj),e(zj,i4o),e(P_,d4o),e(y,c4o),e(y,B_),e(B_,sfe),e(sfe,f4o),e(B_,m4o),e(B_,Qj),e(Qj,g4o),e(B_,h4o),e(y,p4o),e(y,I_),e(I_,lfe),e(lfe,_4o),e(I_,u4o),e(I_,Wj),e(Wj,b4o),e(I_,v4o),e(y,F4o),e(y,N_),e(N_,ife),e(ife,T4o),e(N_,M4o),e(N_,Hj),e(Hj,E4o),e(N_,C4o),e(y,w4o),e(y,q_),e(q_,dfe),e(dfe,A4o),e(q_,L4o),e(q_,Uj),e(Uj,y4o),e(q_,x4o),e(y,$4o),e(y,j_),e(j_,cfe),e(cfe,k4o),e(j_,S4o),e(j_,Jj),e(Jj,R4o),e(j_,P4o),e(y,B4o),e(y,D_),e(D_,ffe),e(ffe,I4o),e(D_,N4o),e(D_,Yj),e(Yj,q4o),e(D_,j4o),e(y,D4o),e(y,G_),e(G_,mfe),e(mfe,G4o),e(G_,O4o),e(G_,Kj),e(Kj,V4o),e(G_,X4o),e(y,z4o),e(y,O_),e(O_,gfe),e(gfe,Q4o),e(O_,W4o),e(O_,Zj),e(Zj,H4o),e(O_,U4o),e(y,J4o),e(y,V_),e(V_,hfe),e(hfe,Y4o),e(V_,K4o),e(V_,eD),e(eD,Z4o),e(V_,eEo),e(y,oEo),e(y,X_),e(X_,pfe),e(pfe,rEo),e(X_,tEo),e(X_,oD),e(oD,aEo),e(X_,nEo),e(y,sEo),e(y,z_),e(z_,_fe),e(_fe,lEo),e(z_,iEo),e(z_,rD),e(rD,dEo),e(z_,cEo),e(y,fEo),e(y,Q_),e(Q_,ufe),e(ufe,mEo),e(Q_,gEo),e(Q_,tD),e(tD,hEo),e(Q_,pEo),e(y,_Eo),e(y,W_),e(W_,bfe),e(bfe,uEo),e(W_,bEo),e(W_,aD),e(aD,vEo),e(W_,FEo),e(y,TEo),e(y,H_),e(H_,vfe),e(vfe,MEo),e(H_,EEo),e(H_,nD),e(nD,CEo),e(H_,wEo),e(y,AEo),e(y,U_),e(U_,Ffe),e(Ffe,LEo),e(U_,yEo),e(U_,sD),e(sD,xEo),e(U_,$Eo),e(y,kEo),e(y,J_),e(J_,Tfe),e(Tfe,SEo),e(J_,REo),e(J_,lD),e(lD,PEo),e(J_,BEo),e(y,IEo),e(y,Y_),e(Y_,Mfe),e(Mfe,NEo),e(Y_,qEo),e(Y_,iD),e(iD,jEo),e(Y_,DEo),e(y,GEo),e(y,K_),e(K_,Efe),e(Efe,OEo),e(K_,VEo),e(K_,dD),e(dD,XEo),e(K_,zEo),e(y,QEo),e(y,Z_),e(Z_,Cfe),e(Cfe,WEo),e(Z_,HEo),e(Z_,cD),e(cD,UEo),e(Z_,JEo),e(y,YEo),e(y,eu),e(eu,wfe),e(wfe,KEo),e(eu,ZEo),e(eu,fD),e(fD,eCo),e(eu,oCo),e(y,rCo),e(y,ou),e(ou,Afe),e(Afe,tCo),e(ou,aCo),e(ou,mD),e(mD,nCo),e(ou,sCo),e(y,lCo),e(y,ru),e(ru,Lfe),e(Lfe,iCo),e(ru,dCo),e(ru,gD),e(gD,cCo),e(ru,fCo),e(y,mCo),e(y,tu),e(tu,yfe),e(yfe,gCo),e(tu,hCo),e(tu,hD),e(hD,pCo),e(tu,_Co),e(y,uCo),e(y,au),e(au,xfe),e(xfe,bCo),e(au,vCo),e(au,pD),e(pD,FCo),e(au,TCo),e(y,MCo),e(y,nu),e(nu,$fe),e($fe,ECo),e(nu,CCo),e(nu,_D),e(_D,wCo),e(nu,ACo),e(y,LCo),e(y,su),e(su,kfe),e(kfe,yCo),e(su,xCo),e(su,uD),e(uD,$Co),e(su,kCo),e(y,SCo),e(y,lu),e(lu,Sfe),e(Sfe,RCo),e(lu,PCo),e(lu,bD),e(bD,BCo),e(lu,ICo),e(y,NCo),e(y,iu),e(iu,Rfe),e(Rfe,qCo),e(iu,jCo),e(iu,vD),e(vD,DCo),e(iu,GCo),e(y,OCo),e(y,du),e(du,Pfe),e(Pfe,VCo),e(du,XCo),e(du,FD),e(FD,zCo),e(du,QCo),e(y,WCo),e(y,cu),e(cu,Bfe),e(Bfe,HCo),e(cu,UCo),e(cu,TD),e(TD,JCo),e(cu,YCo),e(y,KCo),e(y,fu),e(fu,Ife),e(Ife,ZCo),e(fu,e3o),e(fu,MD),e(MD,o3o),e(fu,r3o),e(y,t3o),e(y,mu),e(mu,Nfe),e(Nfe,a3o),e(mu,n3o),e(mu,ED),e(ED,s3o),e(mu,l3o),e(y,i3o),e(y,gu),e(gu,qfe),e(qfe,d3o),e(gu,c3o),e(gu,CD),e(CD,f3o),e(gu,m3o),e(y,g3o),e(y,hu),e(hu,jfe),e(jfe,h3o),e(hu,p3o),e(hu,wD),e(wD,_3o),e(hu,u3o),e(y,b3o),e(y,pu),e(pu,Dfe),e(Dfe,v3o),e(pu,F3o),e(pu,AD),e(AD,T3o),e(pu,M3o),e(y,E3o),e(y,_u),e(_u,Gfe),e(Gfe,C3o),e(_u,w3o),e(_u,LD),e(LD,A3o),e(_u,L3o),e(y,y3o),e(y,uu),e(uu,Ofe),e(Ofe,x3o),e(uu,$3o),e(uu,yD),e(yD,k3o),e(uu,S3o),e(y,R3o),e(y,bu),e(bu,Vfe),e(Vfe,P3o),e(bu,B3o),e(bu,xD),e(xD,I3o),e(bu,N3o),e(y,q3o),e(y,vu),e(vu,Xfe),e(Xfe,j3o),e(vu,D3o),e(vu,$D),e($D,G3o),e(vu,O3o),e(y,V3o),e(y,Fu),e(Fu,zfe),e(zfe,X3o),e(Fu,z3o),e(Fu,kD),e(kD,Q3o),e(Fu,W3o),e(y,H3o),e(y,Tu),e(Tu,Qfe),e(Qfe,U3o),e(Tu,J3o),e(Tu,SD),e(SD,Y3o),e(Tu,K3o),e(y,Z3o),e(y,Mu),e(Mu,Wfe),e(Wfe,e5o),e(Mu,o5o),e(Mu,RD),e(RD,r5o),e(Mu,t5o),e(y,a5o),e(y,Eu),e(Eu,Hfe),e(Hfe,n5o),e(Eu,s5o),e(Eu,PD),e(PD,l5o),e(Eu,i5o),e(y,d5o),e(y,Cu),e(Cu,Ufe),e(Ufe,c5o),e(Cu,f5o),e(Cu,BD),e(BD,m5o),e(Cu,g5o),e(y,h5o),e(y,wu),e(wu,Jfe),e(Jfe,p5o),e(wu,_5o),e(wu,ID),e(ID,u5o),e(wu,b5o),e(y,v5o),e(y,Au),e(Au,Yfe),e(Yfe,F5o),e(Au,T5o),e(Au,ND),e(ND,M5o),e(Au,E5o),e(y,C5o),e(y,Lu),e(Lu,Kfe),e(Kfe,w5o),e(Lu,A5o),e(Lu,qD),e(qD,L5o),e(Lu,y5o),e(y,x5o),e(y,yu),e(yu,Zfe),e(Zfe,$5o),e(yu,k5o),e(yu,jD),e(jD,S5o),e(yu,R5o),e(y,P5o),e(y,xu),e(xu,eme),e(eme,B5o),e(xu,I5o),e(xu,DD),e(DD,N5o),e(xu,q5o),e(y,j5o),e(y,$u),e($u,ome),e(ome,D5o),e($u,G5o),e($u,GD),e(GD,O5o),e($u,V5o),e(y,X5o),e(y,ku),e(ku,rme),e(rme,z5o),e(ku,Q5o),e(ku,OD),e(OD,W5o),e(ku,H5o),e(y,U5o),e(y,Su),e(Su,tme),e(tme,J5o),e(Su,Y5o),e(Su,VD),e(VD,K5o),e(Su,Z5o),e(y,ewo),e(y,Ru),e(Ru,ame),e(ame,owo),e(Ru,rwo),e(Ru,XD),e(XD,two),e(Ru,awo),e(y,nwo),e(y,Pu),e(Pu,nme),e(nme,swo),e(Pu,lwo),e(Pu,zD),e(zD,iwo),e(Pu,dwo),e(y,cwo),e(y,Bu),e(Bu,sme),e(sme,fwo),e(Bu,mwo),e(Bu,QD),e(QD,gwo),e(Bu,hwo),e(y,pwo),e(y,Iu),e(Iu,lme),e(lme,_wo),e(Iu,uwo),e(Iu,WD),e(WD,bwo),e(Iu,vwo),e(y,Fwo),e(y,Nu),e(Nu,ime),e(ime,Two),e(Nu,Mwo),e(Nu,HD),e(HD,Ewo),e(Nu,Cwo),e(y,wwo),e(y,qu),e(qu,dme),e(dme,Awo),e(qu,Lwo),e(qu,UD),e(UD,ywo),e(qu,xwo),e(y,$wo),e(y,ju),e(ju,cme),e(cme,kwo),e(ju,Swo),e(ju,JD),e(JD,Rwo),e(ju,Pwo),e(y,Bwo),e(y,Du),e(Du,fme),e(fme,Iwo),e(Du,Nwo),e(Du,YD),e(YD,qwo),e(Du,jwo),e(y,Dwo),e(y,Gu),e(Gu,mme),e(mme,Gwo),e(Gu,Owo),e(Gu,KD),e(KD,Vwo),e(Gu,Xwo),e(y,zwo),e(y,Ou),e(Ou,gme),e(gme,Qwo),e(Ou,Wwo),e(Ou,ZD),e(ZD,Hwo),e(Ou,Uwo),e(y,Jwo),e(y,Vu),e(Vu,hme),e(hme,Ywo),e(Vu,Kwo),e(Vu,eG),e(eG,Zwo),e(Vu,eAo),e(y,oAo),e(y,Xu),e(Xu,pme),e(pme,rAo),e(Xu,tAo),e(Xu,oG),e(oG,aAo),e(Xu,nAo),e(Ye,sAo),e(Ye,zu),e(zu,lAo),e(zu,_me),e(_me,iAo),e(zu,dAo),e(zu,ume),e(ume,cAo),e(Ye,fAo),M(Qu,Ye,null),b(f,FXe,u),b(f,Xi,u),e(Xi,Wu),e(Wu,bme),M(NL,bme,null),e(Xi,mAo),e(Xi,vme),e(vme,gAo),b(f,TXe,u),b(f,So,u),M(qL,So,null),e(So,hAo),e(So,zi),e(zi,pAo),e(zi,rG),e(rG,_Ao),e(zi,uAo),e(zi,tG),e(tG,bAo),e(zi,vAo),e(So,FAo),e(So,jL),e(jL,TAo),e(jL,Fme),e(Fme,MAo),e(jL,EAo),e(So,CAo),e(So,dt),M(DL,dt,null),e(dt,wAo),e(dt,Tme),e(Tme,AAo),e(dt,LAo),e(dt,Qi),e(Qi,yAo),e(Qi,Mme),e(Mme,xAo),e(Qi,$Ao),e(Qi,aG),e(aG,kAo),e(Qi,SAo),e(dt,RAo),M(Hu,dt,null),e(So,PAo),e(So,Ke),M(GL,Ke,null),e(Ke,BAo),e(Ke,Eme),e(Eme,IAo),e(Ke,NAo),e(Ke,Na),e(Na,qAo),e(Na,Cme),e(Cme,jAo),e(Na,DAo),e(Na,wme),e(wme,GAo),e(Na,OAo),e(Na,Ame),e(Ame,VAo),e(Na,XAo),e(Ke,zAo),e(Ke,G),e(G,Uu),e(Uu,Lme),e(Lme,QAo),e(Uu,WAo),e(Uu,nG),e(nG,HAo),e(Uu,UAo),e(G,JAo),e(G,Ju),e(Ju,yme),e(yme,YAo),e(Ju,KAo),e(Ju,sG),e(sG,ZAo),e(Ju,e6o),e(G,o6o),e(G,Yu),e(Yu,xme),e(xme,r6o),e(Yu,t6o),e(Yu,lG),e(lG,a6o),e(Yu,n6o),e(G,s6o),e(G,Ku),e(Ku,$me),e($me,l6o),e(Ku,i6o),e(Ku,iG),e(iG,d6o),e(Ku,c6o),e(G,f6o),e(G,Zu),e(Zu,kme),e(kme,m6o),e(Zu,g6o),e(Zu,dG),e(dG,h6o),e(Zu,p6o),e(G,_6o),e(G,e1),e(e1,Sme),e(Sme,u6o),e(e1,b6o),e(e1,cG),e(cG,v6o),e(e1,F6o),e(G,T6o),e(G,o1),e(o1,Rme),e(Rme,M6o),e(o1,E6o),e(o1,fG),e(fG,C6o),e(o1,w6o),e(G,A6o),e(G,r1),e(r1,Pme),e(Pme,L6o),e(r1,y6o),e(r1,mG),e(mG,x6o),e(r1,$6o),e(G,k6o),e(G,t1),e(t1,Bme),e(Bme,S6o),e(t1,R6o),e(t1,gG),e(gG,P6o),e(t1,B6o),e(G,I6o),e(G,a1),e(a1,Ime),e(Ime,N6o),e(a1,q6o),e(a1,hG),e(hG,j6o),e(a1,D6o),e(G,G6o),e(G,n1),e(n1,Nme),e(Nme,O6o),e(n1,V6o),e(n1,pG),e(pG,X6o),e(n1,z6o),e(G,Q6o),e(G,s1),e(s1,qme),e(qme,W6o),e(s1,H6o),e(s1,_G),e(_G,U6o),e(s1,J6o),e(G,Y6o),e(G,l1),e(l1,jme),e(jme,K6o),e(l1,Z6o),e(l1,uG),e(uG,eLo),e(l1,oLo),e(G,rLo),e(G,i1),e(i1,Dme),e(Dme,tLo),e(i1,aLo),e(i1,bG),e(bG,nLo),e(i1,sLo),e(G,lLo),e(G,d1),e(d1,Gme),e(Gme,iLo),e(d1,dLo),e(d1,vG),e(vG,cLo),e(d1,fLo),e(G,mLo),e(G,c1),e(c1,Ome),e(Ome,gLo),e(c1,hLo),e(c1,FG),e(FG,pLo),e(c1,_Lo),e(G,uLo),e(G,f1),e(f1,Vme),e(Vme,bLo),e(f1,vLo),e(f1,TG),e(TG,FLo),e(f1,TLo),e(G,MLo),e(G,m1),e(m1,Xme),e(Xme,ELo),e(m1,CLo),e(m1,MG),e(MG,wLo),e(m1,ALo),e(G,LLo),e(G,g1),e(g1,zme),e(zme,yLo),e(g1,xLo),e(g1,EG),e(EG,$Lo),e(g1,kLo),e(G,SLo),e(G,h1),e(h1,Qme),e(Qme,RLo),e(h1,PLo),e(h1,CG),e(CG,BLo),e(h1,ILo),e(G,NLo),e(G,p1),e(p1,Wme),e(Wme,qLo),e(p1,jLo),e(p1,wG),e(wG,DLo),e(p1,GLo),e(G,OLo),e(G,_1),e(_1,Hme),e(Hme,VLo),e(_1,XLo),e(_1,AG),e(AG,zLo),e(_1,QLo),e(G,WLo),e(G,u1),e(u1,Ume),e(Ume,HLo),e(u1,ULo),e(u1,LG),e(LG,JLo),e(u1,YLo),e(G,KLo),e(G,b1),e(b1,Jme),e(Jme,ZLo),e(b1,eyo),e(b1,yG),e(yG,oyo),e(b1,ryo),e(G,tyo),e(G,v1),e(v1,Yme),e(Yme,ayo),e(v1,nyo),e(v1,xG),e(xG,syo),e(v1,lyo),e(G,iyo),e(G,F1),e(F1,Kme),e(Kme,dyo),e(F1,cyo),e(F1,$G),e($G,fyo),e(F1,myo),e(G,gyo),e(G,T1),e(T1,Zme),e(Zme,hyo),e(T1,pyo),e(T1,kG),e(kG,_yo),e(T1,uyo),e(G,byo),e(G,M1),e(M1,ege),e(ege,vyo),e(M1,Fyo),e(M1,SG),e(SG,Tyo),e(M1,Myo),e(G,Eyo),e(G,E1),e(E1,oge),e(oge,Cyo),e(E1,wyo),e(E1,RG),e(RG,Ayo),e(E1,Lyo),e(G,yyo),e(G,C1),e(C1,rge),e(rge,xyo),e(C1,$yo),e(C1,PG),e(PG,kyo),e(C1,Syo),e(G,Ryo),e(G,w1),e(w1,tge),e(tge,Pyo),e(w1,Byo),e(w1,BG),e(BG,Iyo),e(w1,Nyo),e(G,qyo),e(G,A1),e(A1,age),e(age,jyo),e(A1,Dyo),e(A1,IG),e(IG,Gyo),e(A1,Oyo),e(G,Vyo),e(G,L1),e(L1,nge),e(nge,Xyo),e(L1,zyo),e(L1,NG),e(NG,Qyo),e(L1,Wyo),e(G,Hyo),e(G,y1),e(y1,sge),e(sge,Uyo),e(y1,Jyo),e(y1,qG),e(qG,Yyo),e(y1,Kyo),e(G,Zyo),e(G,x1),e(x1,lge),e(lge,e8o),e(x1,o8o),e(x1,jG),e(jG,r8o),e(x1,t8o),e(G,a8o),e(G,$1),e($1,ige),e(ige,n8o),e($1,s8o),e($1,DG),e(DG,l8o),e($1,i8o),e(G,d8o),e(G,k1),e(k1,dge),e(dge,c8o),e(k1,f8o),e(k1,GG),e(GG,m8o),e(k1,g8o),e(G,h8o),e(G,S1),e(S1,cge),e(cge,p8o),e(S1,_8o),e(S1,OG),e(OG,u8o),e(S1,b8o),e(G,v8o),e(G,R1),e(R1,fge),e(fge,F8o),e(R1,T8o),e(R1,VG),e(VG,M8o),e(R1,E8o),e(G,C8o),e(G,P1),e(P1,mge),e(mge,w8o),e(P1,A8o),e(P1,XG),e(XG,L8o),e(P1,y8o),e(G,x8o),e(G,B1),e(B1,gge),e(gge,$8o),e(B1,k8o),e(B1,zG),e(zG,S8o),e(B1,R8o),e(G,P8o),e(G,I1),e(I1,hge),e(hge,B8o),e(I1,I8o),e(I1,QG),e(QG,N8o),e(I1,q8o),e(G,j8o),e(G,N1),e(N1,pge),e(pge,D8o),e(N1,G8o),e(N1,WG),e(WG,O8o),e(N1,V8o),e(G,X8o),e(G,q1),e(q1,_ge),e(_ge,z8o),e(q1,Q8o),e(q1,HG),e(HG,W8o),e(q1,H8o),e(G,U8o),e(G,j1),e(j1,uge),e(uge,J8o),e(j1,Y8o),e(j1,UG),e(UG,K8o),e(j1,Z8o),e(Ke,exo),e(Ke,D1),e(D1,oxo),e(D1,bge),e(bge,rxo),e(D1,txo),e(D1,vge),e(vge,axo),e(Ke,nxo),M(G1,Ke,null),b(f,MXe,u),b(f,Wi,u),e(Wi,O1),e(O1,Fge),M(OL,Fge,null),e(Wi,sxo),e(Wi,Tge),e(Tge,lxo),b(f,EXe,u),b(f,Ro,u),M(VL,Ro,null),e(Ro,ixo),e(Ro,Hi),e(Hi,dxo),e(Hi,JG),e(JG,cxo),e(Hi,fxo),e(Hi,YG),e(YG,mxo),e(Hi,gxo),e(Ro,hxo),e(Ro,XL),e(XL,pxo),e(XL,Mge),e(Mge,_xo),e(XL,uxo),e(Ro,bxo),e(Ro,ct),M(zL,ct,null),e(ct,vxo),e(ct,Ege),e(Ege,Fxo),e(ct,Txo),e(ct,Ui),e(Ui,Mxo),e(Ui,Cge),e(Cge,Exo),e(Ui,Cxo),e(Ui,KG),e(KG,wxo),e(Ui,Axo),e(ct,Lxo),M(V1,ct,null),e(Ro,yxo),e(Ro,Ze),M(QL,Ze,null),e(Ze,xxo),e(Ze,wge),e(wge,$xo),e(Ze,kxo),e(Ze,qa),e(qa,Sxo),e(qa,Age),e(Age,Rxo),e(qa,Pxo),e(qa,Lge),e(Lge,Bxo),e(qa,Ixo),e(qa,yge),e(yge,Nxo),e(qa,qxo),e(Ze,jxo),e(Ze,z),e(z,X1),e(X1,xge),e(xge,Dxo),e(X1,Gxo),e(X1,ZG),e(ZG,Oxo),e(X1,Vxo),e(z,Xxo),e(z,z1),e(z1,$ge),e($ge,zxo),e(z1,Qxo),e(z1,eO),e(eO,Wxo),e(z1,Hxo),e(z,Uxo),e(z,Q1),e(Q1,kge),e(kge,Jxo),e(Q1,Yxo),e(Q1,oO),e(oO,Kxo),e(Q1,Zxo),e(z,e$o),e(z,W1),e(W1,Sge),e(Sge,o$o),e(W1,r$o),e(W1,rO),e(rO,t$o),e(W1,a$o),e(z,n$o),e(z,H1),e(H1,Rge),e(Rge,s$o),e(H1,l$o),e(H1,tO),e(tO,i$o),e(H1,d$o),e(z,c$o),e(z,U1),e(U1,Pge),e(Pge,f$o),e(U1,m$o),e(U1,aO),e(aO,g$o),e(U1,h$o),e(z,p$o),e(z,J1),e(J1,Bge),e(Bge,_$o),e(J1,u$o),e(J1,nO),e(nO,b$o),e(J1,v$o),e(z,F$o),e(z,Y1),e(Y1,Ige),e(Ige,T$o),e(Y1,M$o),e(Y1,sO),e(sO,E$o),e(Y1,C$o),e(z,w$o),e(z,K1),e(K1,Nge),e(Nge,A$o),e(K1,L$o),e(K1,lO),e(lO,y$o),e(K1,x$o),e(z,$$o),e(z,Z1),e(Z1,qge),e(qge,k$o),e(Z1,S$o),e(Z1,iO),e(iO,R$o),e(Z1,P$o),e(z,B$o),e(z,e2),e(e2,jge),e(jge,I$o),e(e2,N$o),e(e2,dO),e(dO,q$o),e(e2,j$o),e(z,D$o),e(z,o2),e(o2,Dge),e(Dge,G$o),e(o2,O$o),e(o2,cO),e(cO,V$o),e(o2,X$o),e(z,z$o),e(z,r2),e(r2,Gge),e(Gge,Q$o),e(r2,W$o),e(r2,fO),e(fO,H$o),e(r2,U$o),e(z,J$o),e(z,t2),e(t2,Oge),e(Oge,Y$o),e(t2,K$o),e(t2,mO),e(mO,Z$o),e(t2,eko),e(z,oko),e(z,a2),e(a2,Vge),e(Vge,rko),e(a2,tko),e(a2,gO),e(gO,ako),e(a2,nko),e(z,sko),e(z,n2),e(n2,Xge),e(Xge,lko),e(n2,iko),e(n2,hO),e(hO,dko),e(n2,cko),e(z,fko),e(z,s2),e(s2,zge),e(zge,mko),e(s2,gko),e(s2,pO),e(pO,hko),e(s2,pko),e(z,_ko),e(z,l2),e(l2,Qge),e(Qge,uko),e(l2,bko),e(l2,_O),e(_O,vko),e(l2,Fko),e(z,Tko),e(z,i2),e(i2,Wge),e(Wge,Mko),e(i2,Eko),e(i2,uO),e(uO,Cko),e(i2,wko),e(z,Ako),e(z,d2),e(d2,Hge),e(Hge,Lko),e(d2,yko),e(d2,bO),e(bO,xko),e(d2,$ko),e(z,kko),e(z,c2),e(c2,Uge),e(Uge,Sko),e(c2,Rko),e(c2,vO),e(vO,Pko),e(c2,Bko),e(z,Iko),e(z,f2),e(f2,Jge),e(Jge,Nko),e(f2,qko),e(f2,FO),e(FO,jko),e(f2,Dko),e(z,Gko),e(z,m2),e(m2,Yge),e(Yge,Oko),e(m2,Vko),e(m2,TO),e(TO,Xko),e(m2,zko),e(z,Qko),e(z,g2),e(g2,Kge),e(Kge,Wko),e(g2,Hko),e(g2,MO),e(MO,Uko),e(g2,Jko),e(z,Yko),e(z,h2),e(h2,Zge),e(Zge,Kko),e(h2,Zko),e(h2,EO),e(EO,eSo),e(h2,oSo),e(z,rSo),e(z,p2),e(p2,ehe),e(ehe,tSo),e(p2,aSo),e(p2,CO),e(CO,nSo),e(p2,sSo),e(z,lSo),e(z,_2),e(_2,ohe),e(ohe,iSo),e(_2,dSo),e(_2,wO),e(wO,cSo),e(_2,fSo),e(z,mSo),e(z,u2),e(u2,rhe),e(rhe,gSo),e(u2,hSo),e(u2,AO),e(AO,pSo),e(u2,_So),e(z,uSo),e(z,b2),e(b2,the),e(the,bSo),e(b2,vSo),e(b2,LO),e(LO,FSo),e(b2,TSo),e(z,MSo),e(z,v2),e(v2,ahe),e(ahe,ESo),e(v2,CSo),e(v2,yO),e(yO,wSo),e(v2,ASo),e(z,LSo),e(z,F2),e(F2,nhe),e(nhe,ySo),e(F2,xSo),e(F2,xO),e(xO,$So),e(F2,kSo),e(z,SSo),e(z,T2),e(T2,she),e(she,RSo),e(T2,PSo),e(T2,$O),e($O,BSo),e(T2,ISo),e(z,NSo),e(z,M2),e(M2,lhe),e(lhe,qSo),e(M2,jSo),e(M2,kO),e(kO,DSo),e(M2,GSo),e(z,OSo),e(z,E2),e(E2,ihe),e(ihe,VSo),e(E2,XSo),e(E2,SO),e(SO,zSo),e(E2,QSo),e(z,WSo),e(z,C2),e(C2,dhe),e(dhe,HSo),e(C2,USo),e(C2,RO),e(RO,JSo),e(C2,YSo),e(z,KSo),e(z,w2),e(w2,che),e(che,ZSo),e(w2,eRo),e(w2,PO),e(PO,oRo),e(w2,rRo),e(z,tRo),e(z,A2),e(A2,fhe),e(fhe,aRo),e(A2,nRo),e(A2,BO),e(BO,sRo),e(A2,lRo),e(z,iRo),e(z,L2),e(L2,mhe),e(mhe,dRo),e(L2,cRo),e(L2,IO),e(IO,fRo),e(L2,mRo),e(z,gRo),e(z,y2),e(y2,ghe),e(ghe,hRo),e(y2,pRo),e(y2,NO),e(NO,_Ro),e(y2,uRo),e(z,bRo),e(z,x2),e(x2,hhe),e(hhe,vRo),e(x2,FRo),e(x2,qO),e(qO,TRo),e(x2,MRo),e(Ze,ERo),e(Ze,$2),e($2,CRo),e($2,phe),e(phe,wRo),e($2,ARo),e($2,_he),e(_he,LRo),e(Ze,yRo),M(k2,Ze,null),b(f,CXe,u),b(f,Ji,u),e(Ji,S2),e(S2,uhe),M(WL,uhe,null),e(Ji,xRo),e(Ji,bhe),e(bhe,$Ro),b(f,wXe,u),b(f,Po,u),M(HL,Po,null),e(Po,kRo),e(Po,Yi),e(Yi,SRo),e(Yi,jO),e(jO,RRo),e(Yi,PRo),e(Yi,DO),e(DO,BRo),e(Yi,IRo),e(Po,NRo),e(Po,UL),e(UL,qRo),e(UL,vhe),e(vhe,jRo),e(UL,DRo),e(Po,GRo),e(Po,ft),M(JL,ft,null),e(ft,ORo),e(ft,Fhe),e(Fhe,VRo),e(ft,XRo),e(ft,Ki),e(Ki,zRo),e(Ki,The),e(The,QRo),e(Ki,WRo),e(Ki,GO),e(GO,HRo),e(Ki,URo),e(ft,JRo),M(R2,ft,null),e(Po,YRo),e(Po,eo),M(YL,eo,null),e(eo,KRo),e(eo,Mhe),e(Mhe,ZRo),e(eo,ePo),e(eo,ja),e(ja,oPo),e(ja,Ehe),e(Ehe,rPo),e(ja,tPo),e(ja,Che),e(Che,aPo),e(ja,nPo),e(ja,whe),e(whe,sPo),e(ja,lPo),e(eo,iPo),e(eo,W),e(W,P2),e(P2,Ahe),e(Ahe,dPo),e(P2,cPo),e(P2,OO),e(OO,fPo),e(P2,mPo),e(W,gPo),e(W,B2),e(B2,Lhe),e(Lhe,hPo),e(B2,pPo),e(B2,VO),e(VO,_Po),e(B2,uPo),e(W,bPo),e(W,I2),e(I2,yhe),e(yhe,vPo),e(I2,FPo),e(I2,XO),e(XO,TPo),e(I2,MPo),e(W,EPo),e(W,N2),e(N2,xhe),e(xhe,CPo),e(N2,wPo),e(N2,zO),e(zO,APo),e(N2,LPo),e(W,yPo),e(W,q2),e(q2,$he),e($he,xPo),e(q2,$Po),e(q2,QO),e(QO,kPo),e(q2,SPo),e(W,RPo),e(W,j2),e(j2,khe),e(khe,PPo),e(j2,BPo),e(j2,WO),e(WO,IPo),e(j2,NPo),e(W,qPo),e(W,D2),e(D2,She),e(She,jPo),e(D2,DPo),e(D2,HO),e(HO,GPo),e(D2,OPo),e(W,VPo),e(W,G2),e(G2,Rhe),e(Rhe,XPo),e(G2,zPo),e(G2,UO),e(UO,QPo),e(G2,WPo),e(W,HPo),e(W,O2),e(O2,Phe),e(Phe,UPo),e(O2,JPo),e(O2,JO),e(JO,YPo),e(O2,KPo),e(W,ZPo),e(W,V2),e(V2,Bhe),e(Bhe,eBo),e(V2,oBo),e(V2,YO),e(YO,rBo),e(V2,tBo),e(W,aBo),e(W,X2),e(X2,Ihe),e(Ihe,nBo),e(X2,sBo),e(X2,KO),e(KO,lBo),e(X2,iBo),e(W,dBo),e(W,z2),e(z2,Nhe),e(Nhe,cBo),e(z2,fBo),e(z2,ZO),e(ZO,mBo),e(z2,gBo),e(W,hBo),e(W,Q2),e(Q2,qhe),e(qhe,pBo),e(Q2,_Bo),e(Q2,eV),e(eV,uBo),e(Q2,bBo),e(W,vBo),e(W,W2),e(W2,jhe),e(jhe,FBo),e(W2,TBo),e(W2,oV),e(oV,MBo),e(W2,EBo),e(W,CBo),e(W,H2),e(H2,Dhe),e(Dhe,wBo),e(H2,ABo),e(H2,rV),e(rV,LBo),e(H2,yBo),e(W,xBo),e(W,U2),e(U2,Ghe),e(Ghe,$Bo),e(U2,kBo),e(U2,tV),e(tV,SBo),e(U2,RBo),e(W,PBo),e(W,J2),e(J2,Ohe),e(Ohe,BBo),e(J2,IBo),e(J2,aV),e(aV,NBo),e(J2,qBo),e(W,jBo),e(W,Y2),e(Y2,Vhe),e(Vhe,DBo),e(Y2,GBo),e(Y2,nV),e(nV,OBo),e(Y2,VBo),e(W,XBo),e(W,K2),e(K2,Xhe),e(Xhe,zBo),e(K2,QBo),e(K2,sV),e(sV,WBo),e(K2,HBo),e(W,UBo),e(W,Z2),e(Z2,zhe),e(zhe,JBo),e(Z2,YBo),e(Z2,lV),e(lV,KBo),e(Z2,ZBo),e(W,eIo),e(W,eb),e(eb,Qhe),e(Qhe,oIo),e(eb,rIo),e(eb,iV),e(iV,tIo),e(eb,aIo),e(W,nIo),e(W,ob),e(ob,Whe),e(Whe,sIo),e(ob,lIo),e(ob,dV),e(dV,iIo),e(ob,dIo),e(W,cIo),e(W,rb),e(rb,Hhe),e(Hhe,fIo),e(rb,mIo),e(rb,cV),e(cV,gIo),e(rb,hIo),e(W,pIo),e(W,tb),e(tb,Uhe),e(Uhe,_Io),e(tb,uIo),e(tb,fV),e(fV,bIo),e(tb,vIo),e(W,FIo),e(W,ab),e(ab,Jhe),e(Jhe,TIo),e(ab,MIo),e(ab,mV),e(mV,EIo),e(ab,CIo),e(W,wIo),e(W,nb),e(nb,Yhe),e(Yhe,AIo),e(nb,LIo),e(nb,gV),e(gV,yIo),e(nb,xIo),e(W,$Io),e(W,sb),e(sb,Khe),e(Khe,kIo),e(sb,SIo),e(sb,hV),e(hV,RIo),e(sb,PIo),e(W,BIo),e(W,lb),e(lb,Zhe),e(Zhe,IIo),e(lb,NIo),e(lb,pV),e(pV,qIo),e(lb,jIo),e(W,DIo),e(W,ib),e(ib,epe),e(epe,GIo),e(ib,OIo),e(ib,_V),e(_V,VIo),e(ib,XIo),e(W,zIo),e(W,db),e(db,ope),e(ope,QIo),e(db,WIo),e(db,uV),e(uV,HIo),e(db,UIo),e(W,JIo),e(W,cb),e(cb,rpe),e(rpe,YIo),e(cb,KIo),e(cb,bV),e(bV,ZIo),e(cb,eNo),e(W,oNo),e(W,fb),e(fb,tpe),e(tpe,rNo),e(fb,tNo),e(fb,vV),e(vV,aNo),e(fb,nNo),e(W,sNo),e(W,mb),e(mb,ape),e(ape,lNo),e(mb,iNo),e(mb,FV),e(FV,dNo),e(mb,cNo),e(W,fNo),e(W,gb),e(gb,npe),e(npe,mNo),e(gb,gNo),e(gb,spe),e(spe,hNo),e(gb,pNo),e(W,_No),e(W,hb),e(hb,lpe),e(lpe,uNo),e(hb,bNo),e(hb,TV),e(TV,vNo),e(hb,FNo),e(W,TNo),e(W,pb),e(pb,ipe),e(ipe,MNo),e(pb,ENo),e(pb,MV),e(MV,CNo),e(pb,wNo),e(W,ANo),e(W,_b),e(_b,dpe),e(dpe,LNo),e(_b,yNo),e(_b,EV),e(EV,xNo),e(_b,$No),e(W,kNo),e(W,ub),e(ub,cpe),e(cpe,SNo),e(ub,RNo),e(ub,CV),e(CV,PNo),e(ub,BNo),e(eo,INo),e(eo,bb),e(bb,NNo),e(bb,fpe),e(fpe,qNo),e(bb,jNo),e(bb,mpe),e(mpe,DNo),e(eo,GNo),M(vb,eo,null),b(f,AXe,u),b(f,Zi,u),e(Zi,Fb),e(Fb,gpe),M(KL,gpe,null),e(Zi,ONo),e(Zi,hpe),e(hpe,VNo),b(f,LXe,u),b(f,Bo,u),M(ZL,Bo,null),e(Bo,XNo),e(Bo,ed),e(ed,zNo),e(ed,wV),e(wV,QNo),e(ed,WNo),e(ed,AV),e(AV,HNo),e(ed,UNo),e(Bo,JNo),e(Bo,ey),e(ey,YNo),e(ey,ppe),e(ppe,KNo),e(ey,ZNo),e(Bo,eqo),e(Bo,mt),M(oy,mt,null),e(mt,oqo),e(mt,_pe),e(_pe,rqo),e(mt,tqo),e(mt,od),e(od,aqo),e(od,upe),e(upe,nqo),e(od,sqo),e(od,LV),e(LV,lqo),e(od,iqo),e(mt,dqo),M(Tb,mt,null),e(Bo,cqo),e(Bo,oo),M(ry,oo,null),e(oo,fqo),e(oo,bpe),e(bpe,mqo),e(oo,gqo),e(oo,Da),e(Da,hqo),e(Da,vpe),e(vpe,pqo),e(Da,_qo),e(Da,Fpe),e(Fpe,uqo),e(Da,bqo),e(Da,Tpe),e(Tpe,vqo),e(Da,Fqo),e(oo,Tqo),e(oo,pe),e(pe,Mb),e(Mb,Mpe),e(Mpe,Mqo),e(Mb,Eqo),e(Mb,yV),e(yV,Cqo),e(Mb,wqo),e(pe,Aqo),e(pe,Eb),e(Eb,Epe),e(Epe,Lqo),e(Eb,yqo),e(Eb,xV),e(xV,xqo),e(Eb,$qo),e(pe,kqo),e(pe,Cb),e(Cb,Cpe),e(Cpe,Sqo),e(Cb,Rqo),e(Cb,$V),e($V,Pqo),e(Cb,Bqo),e(pe,Iqo),e(pe,wb),e(wb,wpe),e(wpe,Nqo),e(wb,qqo),e(wb,kV),e(kV,jqo),e(wb,Dqo),e(pe,Gqo),e(pe,Ab),e(Ab,Ape),e(Ape,Oqo),e(Ab,Vqo),e(Ab,SV),e(SV,Xqo),e(Ab,zqo),e(pe,Qqo),e(pe,Lb),e(Lb,Lpe),e(Lpe,Wqo),e(Lb,Hqo),e(Lb,RV),e(RV,Uqo),e(Lb,Jqo),e(pe,Yqo),e(pe,yb),e(yb,ype),e(ype,Kqo),e(yb,Zqo),e(yb,PV),e(PV,ejo),e(yb,ojo),e(pe,rjo),e(pe,xb),e(xb,xpe),e(xpe,tjo),e(xb,ajo),e(xb,BV),e(BV,njo),e(xb,sjo),e(pe,ljo),e(pe,$b),e($b,$pe),e($pe,ijo),e($b,djo),e($b,IV),e(IV,cjo),e($b,fjo),e(pe,mjo),e(pe,kb),e(kb,kpe),e(kpe,gjo),e(kb,hjo),e(kb,NV),e(NV,pjo),e(kb,_jo),e(pe,ujo),e(pe,Sb),e(Sb,Spe),e(Spe,bjo),e(Sb,vjo),e(Sb,qV),e(qV,Fjo),e(Sb,Tjo),e(pe,Mjo),e(pe,Rb),e(Rb,Rpe),e(Rpe,Ejo),e(Rb,Cjo),e(Rb,jV),e(jV,wjo),e(Rb,Ajo),e(pe,Ljo),e(pe,Pb),e(Pb,Ppe),e(Ppe,yjo),e(Pb,xjo),e(Pb,DV),e(DV,$jo),e(Pb,kjo),e(pe,Sjo),e(pe,Bb),e(Bb,Bpe),e(Bpe,Rjo),e(Bb,Pjo),e(Bb,GV),e(GV,Bjo),e(Bb,Ijo),e(pe,Njo),e(pe,Ib),e(Ib,Ipe),e(Ipe,qjo),e(Ib,jjo),e(Ib,OV),e(OV,Djo),e(Ib,Gjo),e(pe,Ojo),e(pe,Nb),e(Nb,Npe),e(Npe,Vjo),e(Nb,Xjo),e(Nb,VV),e(VV,zjo),e(Nb,Qjo),e(pe,Wjo),e(pe,qb),e(qb,qpe),e(qpe,Hjo),e(qb,Ujo),e(qb,XV),e(XV,Jjo),e(qb,Yjo),e(pe,Kjo),e(pe,jb),e(jb,jpe),e(jpe,Zjo),e(jb,eDo),e(jb,zV),e(zV,oDo),e(jb,rDo),e(oo,tDo),e(oo,Db),e(Db,aDo),e(Db,Dpe),e(Dpe,nDo),e(Db,sDo),e(Db,Gpe),e(Gpe,lDo),e(oo,iDo),M(Gb,oo,null),b(f,yXe,u),b(f,rd,u),e(rd,Ob),e(Ob,Ope),M(ty,Ope,null),e(rd,dDo),e(rd,Vpe),e(Vpe,cDo),b(f,xXe,u),b(f,Io,u),M(ay,Io,null),e(Io,fDo),e(Io,td),e(td,mDo),e(td,QV),e(QV,gDo),e(td,hDo),e(td,WV),e(WV,pDo),e(td,_Do),e(Io,uDo),e(Io,ny),e(ny,bDo),e(ny,Xpe),e(Xpe,vDo),e(ny,FDo),e(Io,TDo),e(Io,gt),M(sy,gt,null),e(gt,MDo),e(gt,zpe),e(zpe,EDo),e(gt,CDo),e(gt,ad),e(ad,wDo),e(ad,Qpe),e(Qpe,ADo),e(ad,LDo),e(ad,HV),e(HV,yDo),e(ad,xDo),e(gt,$Do),M(Vb,gt,null),e(Io,kDo),e(Io,ro),M(ly,ro,null),e(ro,SDo),e(ro,Wpe),e(Wpe,RDo),e(ro,PDo),e(ro,Ga),e(Ga,BDo),e(Ga,Hpe),e(Hpe,IDo),e(Ga,NDo),e(Ga,Upe),e(Upe,qDo),e(Ga,jDo),e(Ga,Jpe),e(Jpe,DDo),e(Ga,GDo),e(ro,ODo),e(ro,q),e(q,Xb),e(Xb,Ype),e(Ype,VDo),e(Xb,XDo),e(Xb,UV),e(UV,zDo),e(Xb,QDo),e(q,WDo),e(q,zb),e(zb,Kpe),e(Kpe,HDo),e(zb,UDo),e(zb,JV),e(JV,JDo),e(zb,YDo),e(q,KDo),e(q,Qb),e(Qb,Zpe),e(Zpe,ZDo),e(Qb,eGo),e(Qb,YV),e(YV,oGo),e(Qb,rGo),e(q,tGo),e(q,Wb),e(Wb,e_e),e(e_e,aGo),e(Wb,nGo),e(Wb,KV),e(KV,sGo),e(Wb,lGo),e(q,iGo),e(q,Hb),e(Hb,o_e),e(o_e,dGo),e(Hb,cGo),e(Hb,ZV),e(ZV,fGo),e(Hb,mGo),e(q,gGo),e(q,Ub),e(Ub,r_e),e(r_e,hGo),e(Ub,pGo),e(Ub,eX),e(eX,_Go),e(Ub,uGo),e(q,bGo),e(q,Jb),e(Jb,t_e),e(t_e,vGo),e(Jb,FGo),e(Jb,oX),e(oX,TGo),e(Jb,MGo),e(q,EGo),e(q,Yb),e(Yb,a_e),e(a_e,CGo),e(Yb,wGo),e(Yb,rX),e(rX,AGo),e(Yb,LGo),e(q,yGo),e(q,Kb),e(Kb,n_e),e(n_e,xGo),e(Kb,$Go),e(Kb,tX),e(tX,kGo),e(Kb,SGo),e(q,RGo),e(q,Zb),e(Zb,s_e),e(s_e,PGo),e(Zb,BGo),e(Zb,aX),e(aX,IGo),e(Zb,NGo),e(q,qGo),e(q,ev),e(ev,l_e),e(l_e,jGo),e(ev,DGo),e(ev,nX),e(nX,GGo),e(ev,OGo),e(q,VGo),e(q,ov),e(ov,i_e),e(i_e,XGo),e(ov,zGo),e(ov,sX),e(sX,QGo),e(ov,WGo),e(q,HGo),e(q,rv),e(rv,d_e),e(d_e,UGo),e(rv,JGo),e(rv,lX),e(lX,YGo),e(rv,KGo),e(q,ZGo),e(q,tv),e(tv,c_e),e(c_e,eOo),e(tv,oOo),e(tv,iX),e(iX,rOo),e(tv,tOo),e(q,aOo),e(q,av),e(av,f_e),e(f_e,nOo),e(av,sOo),e(av,dX),e(dX,lOo),e(av,iOo),e(q,dOo),e(q,nv),e(nv,m_e),e(m_e,cOo),e(nv,fOo),e(nv,cX),e(cX,mOo),e(nv,gOo),e(q,hOo),e(q,sv),e(sv,g_e),e(g_e,pOo),e(sv,_Oo),e(sv,fX),e(fX,uOo),e(sv,bOo),e(q,vOo),e(q,lv),e(lv,h_e),e(h_e,FOo),e(lv,TOo),e(lv,mX),e(mX,MOo),e(lv,EOo),e(q,COo),e(q,iv),e(iv,p_e),e(p_e,wOo),e(iv,AOo),e(iv,gX),e(gX,LOo),e(iv,yOo),e(q,xOo),e(q,dv),e(dv,__e),e(__e,$Oo),e(dv,kOo),e(dv,hX),e(hX,SOo),e(dv,ROo),e(q,POo),e(q,cv),e(cv,u_e),e(u_e,BOo),e(cv,IOo),e(cv,pX),e(pX,NOo),e(cv,qOo),e(q,jOo),e(q,fv),e(fv,b_e),e(b_e,DOo),e(fv,GOo),e(fv,_X),e(_X,OOo),e(fv,VOo),e(q,XOo),e(q,mv),e(mv,v_e),e(v_e,zOo),e(mv,QOo),e(mv,uX),e(uX,WOo),e(mv,HOo),e(q,UOo),e(q,gv),e(gv,F_e),e(F_e,JOo),e(gv,YOo),e(gv,bX),e(bX,KOo),e(gv,ZOo),e(q,eVo),e(q,hv),e(hv,T_e),e(T_e,oVo),e(hv,rVo),e(hv,vX),e(vX,tVo),e(hv,aVo),e(q,nVo),e(q,pv),e(pv,M_e),e(M_e,sVo),e(pv,lVo),e(pv,FX),e(FX,iVo),e(pv,dVo),e(q,cVo),e(q,_v),e(_v,E_e),e(E_e,fVo),e(_v,mVo),e(_v,TX),e(TX,gVo),e(_v,hVo),e(q,pVo),e(q,uv),e(uv,C_e),e(C_e,_Vo),e(uv,uVo),e(uv,MX),e(MX,bVo),e(uv,vVo),e(q,FVo),e(q,bv),e(bv,w_e),e(w_e,TVo),e(bv,MVo),e(bv,EX),e(EX,EVo),e(bv,CVo),e(q,wVo),e(q,vv),e(vv,A_e),e(A_e,AVo),e(vv,LVo),e(vv,CX),e(CX,yVo),e(vv,xVo),e(q,$Vo),e(q,Fv),e(Fv,L_e),e(L_e,kVo),e(Fv,SVo),e(Fv,wX),e(wX,RVo),e(Fv,PVo),e(q,BVo),e(q,Tv),e(Tv,y_e),e(y_e,IVo),e(Tv,NVo),e(Tv,AX),e(AX,qVo),e(Tv,jVo),e(q,DVo),e(q,Mv),e(Mv,x_e),e(x_e,GVo),e(Mv,OVo),e(Mv,LX),e(LX,VVo),e(Mv,XVo),e(q,zVo),e(q,Ev),e(Ev,$_e),e($_e,QVo),e(Ev,WVo),e(Ev,yX),e(yX,HVo),e(Ev,UVo),e(q,JVo),e(q,Cv),e(Cv,k_e),e(k_e,YVo),e(Cv,KVo),e(Cv,xX),e(xX,ZVo),e(Cv,eXo),e(q,oXo),e(q,wv),e(wv,S_e),e(S_e,rXo),e(wv,tXo),e(wv,$X),e($X,aXo),e(wv,nXo),e(q,sXo),e(q,Av),e(Av,R_e),e(R_e,lXo),e(Av,iXo),e(Av,kX),e(kX,dXo),e(Av,cXo),e(q,fXo),e(q,Lv),e(Lv,P_e),e(P_e,mXo),e(Lv,gXo),e(Lv,SX),e(SX,hXo),e(Lv,pXo),e(q,_Xo),e(q,yv),e(yv,B_e),e(B_e,uXo),e(yv,bXo),e(yv,RX),e(RX,vXo),e(yv,FXo),e(q,TXo),e(q,xv),e(xv,I_e),e(I_e,MXo),e(xv,EXo),e(xv,PX),e(PX,CXo),e(xv,wXo),e(q,AXo),e(q,$v),e($v,N_e),e(N_e,LXo),e($v,yXo),e($v,BX),e(BX,xXo),e($v,$Xo),e(q,kXo),e(q,kv),e(kv,q_e),e(q_e,SXo),e(kv,RXo),e(kv,IX),e(IX,PXo),e(kv,BXo),e(q,IXo),e(q,Sv),e(Sv,j_e),e(j_e,NXo),e(Sv,qXo),e(Sv,NX),e(NX,jXo),e(Sv,DXo),e(q,GXo),e(q,Rv),e(Rv,D_e),e(D_e,OXo),e(Rv,VXo),e(Rv,qX),e(qX,XXo),e(Rv,zXo),e(q,QXo),e(q,Pv),e(Pv,G_e),e(G_e,WXo),e(Pv,HXo),e(Pv,jX),e(jX,UXo),e(Pv,JXo),e(q,YXo),e(q,Bv),e(Bv,O_e),e(O_e,KXo),e(Bv,ZXo),e(Bv,DX),e(DX,ezo),e(Bv,ozo),e(q,rzo),e(q,Iv),e(Iv,V_e),e(V_e,tzo),e(Iv,azo),e(Iv,GX),e(GX,nzo),e(Iv,szo),e(q,lzo),e(q,Nv),e(Nv,X_e),e(X_e,izo),e(Nv,dzo),e(Nv,OX),e(OX,czo),e(Nv,fzo),e(q,mzo),e(q,qv),e(qv,z_e),e(z_e,gzo),e(qv,hzo),e(qv,VX),e(VX,pzo),e(qv,_zo),e(q,uzo),e(q,jv),e(jv,Q_e),e(Q_e,bzo),e(jv,vzo),e(jv,XX),e(XX,Fzo),e(jv,Tzo),e(ro,Mzo),e(ro,Dv),e(Dv,Ezo),e(Dv,W_e),e(W_e,Czo),e(Dv,wzo),e(Dv,H_e),e(H_e,Azo),e(ro,Lzo),M(Gv,ro,null),b(f,$Xe,u),b(f,nd,u),e(nd,Ov),e(Ov,U_e),M(iy,U_e,null),e(nd,yzo),e(nd,J_e),e(J_e,xzo),b(f,kXe,u),b(f,No,u),M(dy,No,null),e(No,$zo),e(No,sd),e(sd,kzo),e(sd,zX),e(zX,Szo),e(sd,Rzo),e(sd,QX),e(QX,Pzo),e(sd,Bzo),e(No,Izo),e(No,cy),e(cy,Nzo),e(cy,Y_e),e(Y_e,qzo),e(cy,jzo),e(No,Dzo),e(No,ht),M(fy,ht,null),e(ht,Gzo),e(ht,K_e),e(K_e,Ozo),e(ht,Vzo),e(ht,ld),e(ld,Xzo),e(ld,Z_e),e(Z_e,zzo),e(ld,Qzo),e(ld,WX),e(WX,Wzo),e(ld,Hzo),e(ht,Uzo),M(Vv,ht,null),e(No,Jzo),e(No,to),M(my,to,null),e(to,Yzo),e(to,eue),e(eue,Kzo),e(to,Zzo),e(to,Oa),e(Oa,eQo),e(Oa,oue),e(oue,oQo),e(Oa,rQo),e(Oa,rue),e(rue,tQo),e(Oa,aQo),e(Oa,tue),e(tue,nQo),e(Oa,sQo),e(to,lQo),e(to,Z),e(Z,Xv),e(Xv,aue),e(aue,iQo),e(Xv,dQo),e(Xv,HX),e(HX,cQo),e(Xv,fQo),e(Z,mQo),e(Z,zv),e(zv,nue),e(nue,gQo),e(zv,hQo),e(zv,UX),e(UX,pQo),e(zv,_Qo),e(Z,uQo),e(Z,Qv),e(Qv,sue),e(sue,bQo),e(Qv,vQo),e(Qv,JX),e(JX,FQo),e(Qv,TQo),e(Z,MQo),e(Z,Wv),e(Wv,lue),e(lue,EQo),e(Wv,CQo),e(Wv,YX),e(YX,wQo),e(Wv,AQo),e(Z,LQo),e(Z,Hv),e(Hv,iue),e(iue,yQo),e(Hv,xQo),e(Hv,KX),e(KX,$Qo),e(Hv,kQo),e(Z,SQo),e(Z,Uv),e(Uv,due),e(due,RQo),e(Uv,PQo),e(Uv,ZX),e(ZX,BQo),e(Uv,IQo),e(Z,NQo),e(Z,Jv),e(Jv,cue),e(cue,qQo),e(Jv,jQo),e(Jv,ez),e(ez,DQo),e(Jv,GQo),e(Z,OQo),e(Z,Yv),e(Yv,fue),e(fue,VQo),e(Yv,XQo),e(Yv,oz),e(oz,zQo),e(Yv,QQo),e(Z,WQo),e(Z,Kv),e(Kv,mue),e(mue,HQo),e(Kv,UQo),e(Kv,rz),e(rz,JQo),e(Kv,YQo),e(Z,KQo),e(Z,Zv),e(Zv,gue),e(gue,ZQo),e(Zv,eWo),e(Zv,tz),e(tz,oWo),e(Zv,rWo),e(Z,tWo),e(Z,e0),e(e0,hue),e(hue,aWo),e(e0,nWo),e(e0,az),e(az,sWo),e(e0,lWo),e(Z,iWo),e(Z,o0),e(o0,pue),e(pue,dWo),e(o0,cWo),e(o0,nz),e(nz,fWo),e(o0,mWo),e(Z,gWo),e(Z,r0),e(r0,_ue),e(_ue,hWo),e(r0,pWo),e(r0,sz),e(sz,_Wo),e(r0,uWo),e(Z,bWo),e(Z,t0),e(t0,uue),e(uue,vWo),e(t0,FWo),e(t0,lz),e(lz,TWo),e(t0,MWo),e(Z,EWo),e(Z,a0),e(a0,bue),e(bue,CWo),e(a0,wWo),e(a0,iz),e(iz,AWo),e(a0,LWo),e(Z,yWo),e(Z,n0),e(n0,vue),e(vue,xWo),e(n0,$Wo),e(n0,dz),e(dz,kWo),e(n0,SWo),e(Z,RWo),e(Z,s0),e(s0,Fue),e(Fue,PWo),e(s0,BWo),e(s0,cz),e(cz,IWo),e(s0,NWo),e(Z,qWo),e(Z,l0),e(l0,Tue),e(Tue,jWo),e(l0,DWo),e(l0,fz),e(fz,GWo),e(l0,OWo),e(Z,VWo),e(Z,i0),e(i0,Mue),e(Mue,XWo),e(i0,zWo),e(i0,mz),e(mz,QWo),e(i0,WWo),e(Z,HWo),e(Z,d0),e(d0,Eue),e(Eue,UWo),e(d0,JWo),e(d0,gz),e(gz,YWo),e(d0,KWo),e(Z,ZWo),e(Z,c0),e(c0,Cue),e(Cue,eHo),e(c0,oHo),e(c0,hz),e(hz,rHo),e(c0,tHo),e(Z,aHo),e(Z,f0),e(f0,wue),e(wue,nHo),e(f0,sHo),e(f0,pz),e(pz,lHo),e(f0,iHo),e(Z,dHo),e(Z,m0),e(m0,Aue),e(Aue,cHo),e(m0,fHo),e(m0,_z),e(_z,mHo),e(m0,gHo),e(Z,hHo),e(Z,g0),e(g0,Lue),e(Lue,pHo),e(g0,_Ho),e(g0,uz),e(uz,uHo),e(g0,bHo),e(Z,vHo),e(Z,h0),e(h0,yue),e(yue,FHo),e(h0,THo),e(h0,bz),e(bz,MHo),e(h0,EHo),e(Z,CHo),e(Z,p0),e(p0,xue),e(xue,wHo),e(p0,AHo),e(p0,vz),e(vz,LHo),e(p0,yHo),e(Z,xHo),e(Z,_0),e(_0,$ue),e($ue,$Ho),e(_0,kHo),e(_0,Fz),e(Fz,SHo),e(_0,RHo),e(Z,PHo),e(Z,u0),e(u0,kue),e(kue,BHo),e(u0,IHo),e(u0,Tz),e(Tz,NHo),e(u0,qHo),e(Z,jHo),e(Z,b0),e(b0,Sue),e(Sue,DHo),e(b0,GHo),e(b0,Mz),e(Mz,OHo),e(b0,VHo),e(Z,XHo),e(Z,v0),e(v0,Rue),e(Rue,zHo),e(v0,QHo),e(v0,Ez),e(Ez,WHo),e(v0,HHo),e(to,UHo),e(to,F0),e(F0,JHo),e(F0,Pue),e(Pue,YHo),e(F0,KHo),e(F0,Bue),e(Bue,ZHo),e(to,eUo),M(T0,to,null),b(f,SXe,u),b(f,id,u),e(id,M0),e(M0,Iue),M(gy,Iue,null),e(id,oUo),e(id,Nue),e(Nue,rUo),b(f,RXe,u),b(f,qo,u),M(hy,qo,null),e(qo,tUo),e(qo,dd),e(dd,aUo),e(dd,Cz),e(Cz,nUo),e(dd,sUo),e(dd,wz),e(wz,lUo),e(dd,iUo),e(qo,dUo),e(qo,py),e(py,cUo),e(py,que),e(que,fUo),e(py,mUo),e(qo,gUo),e(qo,pt),M(_y,pt,null),e(pt,hUo),e(pt,jue),e(jue,pUo),e(pt,_Uo),e(pt,cd),e(cd,uUo),e(cd,Due),e(Due,bUo),e(cd,vUo),e(cd,Az),e(Az,FUo),e(cd,TUo),e(pt,MUo),M(E0,pt,null),e(qo,EUo),e(qo,ao),M(uy,ao,null),e(ao,CUo),e(ao,Gue),e(Gue,wUo),e(ao,AUo),e(ao,Va),e(Va,LUo),e(Va,Oue),e(Oue,yUo),e(Va,xUo),e(Va,Vue),e(Vue,$Uo),e(Va,kUo),e(Va,Xue),e(Xue,SUo),e(Va,RUo),e(ao,PUo),e(ao,jo),e(jo,C0),e(C0,zue),e(zue,BUo),e(C0,IUo),e(C0,Lz),e(Lz,NUo),e(C0,qUo),e(jo,jUo),e(jo,w0),e(w0,Que),e(Que,DUo),e(w0,GUo),e(w0,yz),e(yz,OUo),e(w0,VUo),e(jo,XUo),e(jo,A0),e(A0,Wue),e(Wue,zUo),e(A0,QUo),e(A0,xz),e(xz,WUo),e(A0,HUo),e(jo,UUo),e(jo,L0),e(L0,Hue),e(Hue,JUo),e(L0,YUo),e(L0,$z),e($z,KUo),e(L0,ZUo),e(jo,eJo),e(jo,y0),e(y0,Uue),e(Uue,oJo),e(y0,rJo),e(y0,kz),e(kz,tJo),e(y0,aJo),e(jo,nJo),e(jo,x0),e(x0,Jue),e(Jue,sJo),e(x0,lJo),e(x0,Sz),e(Sz,iJo),e(x0,dJo),e(ao,cJo),e(ao,$0),e($0,fJo),e($0,Yue),e(Yue,mJo),e($0,gJo),e($0,Kue),e(Kue,hJo),e(ao,pJo),M(k0,ao,null),b(f,PXe,u),b(f,fd,u),e(fd,S0),e(S0,Zue),M(by,Zue,null),e(fd,_Jo),e(fd,e1e),e(e1e,uJo),b(f,BXe,u),b(f,Do,u),M(vy,Do,null),e(Do,bJo),e(Do,md),e(md,vJo),e(md,Rz),e(Rz,FJo),e(md,TJo),e(md,Pz),e(Pz,MJo),e(md,EJo),e(Do,CJo),e(Do,Fy),e(Fy,wJo),e(Fy,o1e),e(o1e,AJo),e(Fy,LJo),e(Do,yJo),e(Do,_t),M(Ty,_t,null),e(_t,xJo),e(_t,r1e),e(r1e,$Jo),e(_t,kJo),e(_t,gd),e(gd,SJo),e(gd,t1e),e(t1e,RJo),e(gd,PJo),e(gd,Bz),e(Bz,BJo),e(gd,IJo),e(_t,NJo),M(R0,_t,null),e(Do,qJo),e(Do,no),M(My,no,null),e(no,jJo),e(no,a1e),e(a1e,DJo),e(no,GJo),e(no,Xa),e(Xa,OJo),e(Xa,n1e),e(n1e,VJo),e(Xa,XJo),e(Xa,s1e),e(s1e,zJo),e(Xa,QJo),e(Xa,l1e),e(l1e,WJo),e(Xa,HJo),e(no,UJo),e(no,U),e(U,P0),e(P0,i1e),e(i1e,JJo),e(P0,YJo),e(P0,Iz),e(Iz,KJo),e(P0,ZJo),e(U,eYo),e(U,B0),e(B0,d1e),e(d1e,oYo),e(B0,rYo),e(B0,Nz),e(Nz,tYo),e(B0,aYo),e(U,nYo),e(U,I0),e(I0,c1e),e(c1e,sYo),e(I0,lYo),e(I0,qz),e(qz,iYo),e(I0,dYo),e(U,cYo),e(U,N0),e(N0,f1e),e(f1e,fYo),e(N0,mYo),e(N0,jz),e(jz,gYo),e(N0,hYo),e(U,pYo),e(U,q0),e(q0,m1e),e(m1e,_Yo),e(q0,uYo),e(q0,Dz),e(Dz,bYo),e(q0,vYo),e(U,FYo),e(U,j0),e(j0,g1e),e(g1e,TYo),e(j0,MYo),e(j0,Gz),e(Gz,EYo),e(j0,CYo),e(U,wYo),e(U,D0),e(D0,h1e),e(h1e,AYo),e(D0,LYo),e(D0,Oz),e(Oz,yYo),e(D0,xYo),e(U,$Yo),e(U,G0),e(G0,p1e),e(p1e,kYo),e(G0,SYo),e(G0,Vz),e(Vz,RYo),e(G0,PYo),e(U,BYo),e(U,O0),e(O0,_1e),e(_1e,IYo),e(O0,NYo),e(O0,Xz),e(Xz,qYo),e(O0,jYo),e(U,DYo),e(U,V0),e(V0,u1e),e(u1e,GYo),e(V0,OYo),e(V0,zz),e(zz,VYo),e(V0,XYo),e(U,zYo),e(U,X0),e(X0,b1e),e(b1e,QYo),e(X0,WYo),e(X0,Qz),e(Qz,HYo),e(X0,UYo),e(U,JYo),e(U,z0),e(z0,v1e),e(v1e,YYo),e(z0,KYo),e(z0,Wz),e(Wz,ZYo),e(z0,eKo),e(U,oKo),e(U,Q0),e(Q0,F1e),e(F1e,rKo),e(Q0,tKo),e(Q0,Hz),e(Hz,aKo),e(Q0,nKo),e(U,sKo),e(U,W0),e(W0,T1e),e(T1e,lKo),e(W0,iKo),e(W0,Uz),e(Uz,dKo),e(W0,cKo),e(U,fKo),e(U,H0),e(H0,M1e),e(M1e,mKo),e(H0,gKo),e(H0,Jz),e(Jz,hKo),e(H0,pKo),e(U,_Ko),e(U,U0),e(U0,E1e),e(E1e,uKo),e(U0,bKo),e(U0,Yz),e(Yz,vKo),e(U0,FKo),e(U,TKo),e(U,J0),e(J0,C1e),e(C1e,MKo),e(J0,EKo),e(J0,Kz),e(Kz,CKo),e(J0,wKo),e(U,AKo),e(U,Y0),e(Y0,w1e),e(w1e,LKo),e(Y0,yKo),e(Y0,Zz),e(Zz,xKo),e(Y0,$Ko),e(U,kKo),e(U,K0),e(K0,A1e),e(A1e,SKo),e(K0,RKo),e(K0,eQ),e(eQ,PKo),e(K0,BKo),e(U,IKo),e(U,Z0),e(Z0,L1e),e(L1e,NKo),e(Z0,qKo),e(Z0,oQ),e(oQ,jKo),e(Z0,DKo),e(U,GKo),e(U,eF),e(eF,y1e),e(y1e,OKo),e(eF,VKo),e(eF,rQ),e(rQ,XKo),e(eF,zKo),e(U,QKo),e(U,oF),e(oF,x1e),e(x1e,WKo),e(oF,HKo),e(oF,tQ),e(tQ,UKo),e(oF,JKo),e(U,YKo),e(U,rF),e(rF,$1e),e($1e,KKo),e(rF,ZKo),e(rF,aQ),e(aQ,eZo),e(rF,oZo),e(U,rZo),e(U,tF),e(tF,k1e),e(k1e,tZo),e(tF,aZo),e(tF,nQ),e(nQ,nZo),e(tF,sZo),e(U,lZo),e(U,aF),e(aF,S1e),e(S1e,iZo),e(aF,dZo),e(aF,sQ),e(sQ,cZo),e(aF,fZo),e(U,mZo),e(U,nF),e(nF,R1e),e(R1e,gZo),e(nF,hZo),e(nF,lQ),e(lQ,pZo),e(nF,_Zo),e(U,uZo),e(U,sF),e(sF,P1e),e(P1e,bZo),e(sF,vZo),e(sF,iQ),e(iQ,FZo),e(sF,TZo),e(U,MZo),e(U,lF),e(lF,B1e),e(B1e,EZo),e(lF,CZo),e(lF,dQ),e(dQ,wZo),e(lF,AZo),e(U,LZo),e(U,iF),e(iF,I1e),e(I1e,yZo),e(iF,xZo),e(iF,cQ),e(cQ,$Zo),e(iF,kZo),e(U,SZo),e(U,dF),e(dF,N1e),e(N1e,RZo),e(dF,PZo),e(dF,fQ),e(fQ,BZo),e(dF,IZo),e(U,NZo),e(U,cF),e(cF,q1e),e(q1e,qZo),e(cF,jZo),e(cF,mQ),e(mQ,DZo),e(cF,GZo),e(U,OZo),e(U,fF),e(fF,j1e),e(j1e,VZo),e(fF,XZo),e(fF,gQ),e(gQ,zZo),e(fF,QZo),e(U,WZo),e(U,mF),e(mF,D1e),e(D1e,HZo),e(mF,UZo),e(mF,hQ),e(hQ,JZo),e(mF,YZo),e(U,KZo),e(U,gF),e(gF,G1e),e(G1e,ZZo),e(gF,eer),e(gF,pQ),e(pQ,oer),e(gF,rer),e(U,ter),e(U,hF),e(hF,O1e),e(O1e,aer),e(hF,ner),e(hF,_Q),e(_Q,ser),e(hF,ler),e(U,ier),e(U,pF),e(pF,V1e),e(V1e,der),e(pF,cer),e(pF,uQ),e(uQ,fer),e(pF,mer),e(no,ger),e(no,_F),e(_F,her),e(_F,X1e),e(X1e,per),e(_F,_er),e(_F,z1e),e(z1e,uer),e(no,ber),M(uF,no,null),b(f,IXe,u),b(f,hd,u),e(hd,bF),e(bF,Q1e),M(Ey,Q1e,null),e(hd,ver),e(hd,W1e),e(W1e,Fer),b(f,NXe,u),b(f,Go,u),M(Cy,Go,null),e(Go,Ter),e(Go,pd),e(pd,Mer),e(pd,bQ),e(bQ,Eer),e(pd,Cer),e(pd,vQ),e(vQ,wer),e(pd,Aer),e(Go,Ler),e(Go,wy),e(wy,yer),e(wy,H1e),e(H1e,xer),e(wy,$er),e(Go,ker),e(Go,ut),M(Ay,ut,null),e(ut,Ser),e(ut,U1e),e(U1e,Rer),e(ut,Per),e(ut,_d),e(_d,Ber),e(_d,J1e),e(J1e,Ier),e(_d,Ner),e(_d,FQ),e(FQ,qer),e(_d,jer),e(ut,Der),M(vF,ut,null),e(Go,Ger),e(Go,so),M(Ly,so,null),e(so,Oer),e(so,Y1e),e(Y1e,Ver),e(so,Xer),e(so,za),e(za,zer),e(za,K1e),e(K1e,Qer),e(za,Wer),e(za,Z1e),e(Z1e,Her),e(za,Uer),e(za,e2e),e(e2e,Jer),e(za,Yer),e(so,Ker),e(so,V),e(V,FF),e(FF,o2e),e(o2e,Zer),e(FF,eor),e(FF,TQ),e(TQ,oor),e(FF,ror),e(V,tor),e(V,TF),e(TF,r2e),e(r2e,aor),e(TF,nor),e(TF,MQ),e(MQ,sor),e(TF,lor),e(V,ior),e(V,MF),e(MF,t2e),e(t2e,dor),e(MF,cor),e(MF,EQ),e(EQ,mor),e(MF,gor),e(V,hor),e(V,EF),e(EF,a2e),e(a2e,por),e(EF,_or),e(EF,CQ),e(CQ,uor),e(EF,bor),e(V,vor),e(V,CF),e(CF,n2e),e(n2e,For),e(CF,Tor),e(CF,wQ),e(wQ,Mor),e(CF,Eor),e(V,Cor),e(V,wF),e(wF,s2e),e(s2e,wor),e(wF,Aor),e(wF,AQ),e(AQ,Lor),e(wF,yor),e(V,xor),e(V,AF),e(AF,l2e),e(l2e,$or),e(AF,kor),e(AF,LQ),e(LQ,Sor),e(AF,Ror),e(V,Por),e(V,LF),e(LF,i2e),e(i2e,Bor),e(LF,Ior),e(LF,yQ),e(yQ,Nor),e(LF,qor),e(V,jor),e(V,yF),e(yF,d2e),e(d2e,Dor),e(yF,Gor),e(yF,xQ),e(xQ,Oor),e(yF,Vor),e(V,Xor),e(V,xF),e(xF,c2e),e(c2e,zor),e(xF,Qor),e(xF,$Q),e($Q,Wor),e(xF,Hor),e(V,Uor),e(V,$F),e($F,f2e),e(f2e,Jor),e($F,Yor),e($F,kQ),e(kQ,Kor),e($F,Zor),e(V,err),e(V,kF),e(kF,m2e),e(m2e,orr),e(kF,rrr),e(kF,SQ),e(SQ,trr),e(kF,arr),e(V,nrr),e(V,SF),e(SF,g2e),e(g2e,srr),e(SF,lrr),e(SF,RQ),e(RQ,irr),e(SF,drr),e(V,crr),e(V,RF),e(RF,h2e),e(h2e,frr),e(RF,mrr),e(RF,PQ),e(PQ,grr),e(RF,hrr),e(V,prr),e(V,PF),e(PF,p2e),e(p2e,_rr),e(PF,urr),e(PF,BQ),e(BQ,brr),e(PF,vrr),e(V,Frr),e(V,BF),e(BF,_2e),e(_2e,Trr),e(BF,Mrr),e(BF,IQ),e(IQ,Err),e(BF,Crr),e(V,wrr),e(V,IF),e(IF,u2e),e(u2e,Arr),e(IF,Lrr),e(IF,NQ),e(NQ,yrr),e(IF,xrr),e(V,$rr),e(V,NF),e(NF,b2e),e(b2e,krr),e(NF,Srr),e(NF,qQ),e(qQ,Rrr),e(NF,Prr),e(V,Brr),e(V,qF),e(qF,v2e),e(v2e,Irr),e(qF,Nrr),e(qF,jQ),e(jQ,qrr),e(qF,jrr),e(V,Drr),e(V,jF),e(jF,F2e),e(F2e,Grr),e(jF,Orr),e(jF,DQ),e(DQ,Vrr),e(jF,Xrr),e(V,zrr),e(V,DF),e(DF,T2e),e(T2e,Qrr),e(DF,Wrr),e(DF,GQ),e(GQ,Hrr),e(DF,Urr),e(V,Jrr),e(V,GF),e(GF,M2e),e(M2e,Yrr),e(GF,Krr),e(GF,OQ),e(OQ,Zrr),e(GF,etr),e(V,otr),e(V,OF),e(OF,E2e),e(E2e,rtr),e(OF,ttr),e(OF,VQ),e(VQ,atr),e(OF,ntr),e(V,str),e(V,VF),e(VF,C2e),e(C2e,ltr),e(VF,itr),e(VF,XQ),e(XQ,dtr),e(VF,ctr),e(V,ftr),e(V,XF),e(XF,w2e),e(w2e,mtr),e(XF,gtr),e(XF,zQ),e(zQ,htr),e(XF,ptr),e(V,_tr),e(V,zF),e(zF,A2e),e(A2e,utr),e(zF,btr),e(zF,QQ),e(QQ,vtr),e(zF,Ftr),e(V,Ttr),e(V,QF),e(QF,L2e),e(L2e,Mtr),e(QF,Etr),e(QF,WQ),e(WQ,Ctr),e(QF,wtr),e(V,Atr),e(V,WF),e(WF,y2e),e(y2e,Ltr),e(WF,ytr),e(WF,HQ),e(HQ,xtr),e(WF,$tr),e(V,ktr),e(V,HF),e(HF,x2e),e(x2e,Str),e(HF,Rtr),e(HF,UQ),e(UQ,Ptr),e(HF,Btr),e(V,Itr),e(V,UF),e(UF,$2e),e($2e,Ntr),e(UF,qtr),e(UF,JQ),e(JQ,jtr),e(UF,Dtr),e(V,Gtr),e(V,JF),e(JF,k2e),e(k2e,Otr),e(JF,Vtr),e(JF,YQ),e(YQ,Xtr),e(JF,ztr),e(V,Qtr),e(V,YF),e(YF,S2e),e(S2e,Wtr),e(YF,Htr),e(YF,KQ),e(KQ,Utr),e(YF,Jtr),e(V,Ytr),e(V,KF),e(KF,R2e),e(R2e,Ktr),e(KF,Ztr),e(KF,ZQ),e(ZQ,ear),e(KF,oar),e(V,rar),e(V,ZF),e(ZF,P2e),e(P2e,tar),e(ZF,aar),e(ZF,eW),e(eW,nar),e(ZF,sar),e(V,lar),e(V,eT),e(eT,B2e),e(B2e,iar),e(eT,dar),e(eT,oW),e(oW,car),e(eT,far),e(V,mar),e(V,oT),e(oT,I2e),e(I2e,gar),e(oT,har),e(oT,rW),e(rW,par),e(oT,_ar),e(V,uar),e(V,rT),e(rT,N2e),e(N2e,bar),e(rT,Far),e(rT,tW),e(tW,Tar),e(rT,Mar),e(V,Ear),e(V,tT),e(tT,q2e),e(q2e,Car),e(tT,war),e(tT,aW),e(aW,Aar),e(tT,Lar),e(V,yar),e(V,aT),e(aT,j2e),e(j2e,xar),e(aT,$ar),e(aT,nW),e(nW,kar),e(aT,Sar),e(V,Rar),e(V,nT),e(nT,D2e),e(D2e,Par),e(nT,Bar),e(nT,sW),e(sW,Iar),e(nT,Nar),e(V,qar),e(V,sT),e(sT,G2e),e(G2e,jar),e(sT,Dar),e(sT,lW),e(lW,Gar),e(sT,Oar),e(V,Var),e(V,lT),e(lT,O2e),e(O2e,Xar),e(lT,zar),e(lT,iW),e(iW,Qar),e(lT,War),e(so,Har),e(so,iT),e(iT,Uar),e(iT,V2e),e(V2e,Jar),e(iT,Yar),e(iT,X2e),e(X2e,Kar),e(so,Zar),M(dT,so,null),b(f,qXe,u),b(f,ud,u),e(ud,cT),e(cT,z2e),M(yy,z2e,null),e(ud,enr),e(ud,Q2e),e(Q2e,onr),b(f,jXe,u),b(f,Oo,u),M(xy,Oo,null),e(Oo,rnr),e(Oo,bd),e(bd,tnr),e(bd,dW),e(dW,anr),e(bd,nnr),e(bd,cW),e(cW,snr),e(bd,lnr),e(Oo,inr),e(Oo,$y),e($y,dnr),e($y,W2e),e(W2e,cnr),e($y,fnr),e(Oo,mnr),e(Oo,bt),M(ky,bt,null),e(bt,gnr),e(bt,H2e),e(H2e,hnr),e(bt,pnr),e(bt,vd),e(vd,_nr),e(vd,U2e),e(U2e,unr),e(vd,bnr),e(vd,fW),e(fW,vnr),e(vd,Fnr),e(bt,Tnr),M(fT,bt,null),e(Oo,Mnr),e(Oo,lo),M(Sy,lo,null),e(lo,Enr),e(lo,J2e),e(J2e,Cnr),e(lo,wnr),e(lo,Qa),e(Qa,Anr),e(Qa,Y2e),e(Y2e,Lnr),e(Qa,ynr),e(Qa,K2e),e(K2e,xnr),e(Qa,$nr),e(Qa,Z2e),e(Z2e,knr),e(Qa,Snr),e(lo,Rnr),e(lo,ebe),e(ebe,mT),e(mT,obe),e(obe,Pnr),e(mT,Bnr),e(mT,mW),e(mW,Inr),e(mT,Nnr),e(lo,qnr),e(lo,gT),e(gT,jnr),e(gT,rbe),e(rbe,Dnr),e(gT,Gnr),e(gT,tbe),e(tbe,Onr),e(lo,Vnr),M(hT,lo,null),b(f,DXe,u),b(f,Fd,u),e(Fd,pT),e(pT,abe),M(Ry,abe,null),e(Fd,Xnr),e(Fd,nbe),e(nbe,znr),b(f,GXe,u),b(f,Vo,u),M(Py,Vo,null),e(Vo,Qnr),e(Vo,Td),e(Td,Wnr),e(Td,gW),e(gW,Hnr),e(Td,Unr),e(Td,hW),e(hW,Jnr),e(Td,Ynr),e(Vo,Knr),e(Vo,By),e(By,Znr),e(By,sbe),e(sbe,esr),e(By,osr),e(Vo,rsr),e(Vo,vt),M(Iy,vt,null),e(vt,tsr),e(vt,lbe),e(lbe,asr),e(vt,nsr),e(vt,Md),e(Md,ssr),e(Md,ibe),e(ibe,lsr),e(Md,isr),e(Md,pW),e(pW,dsr),e(Md,csr),e(vt,fsr),M(_T,vt,null),e(Vo,msr),e(Vo,io),M(Ny,io,null),e(io,gsr),e(io,dbe),e(dbe,hsr),e(io,psr),e(io,Wa),e(Wa,_sr),e(Wa,cbe),e(cbe,usr),e(Wa,bsr),e(Wa,fbe),e(fbe,vsr),e(Wa,Fsr),e(Wa,mbe),e(mbe,Tsr),e(Wa,Msr),e(io,Esr),e(io,ve),e(ve,uT),e(uT,gbe),e(gbe,Csr),e(uT,wsr),e(uT,_W),e(_W,Asr),e(uT,Lsr),e(ve,ysr),e(ve,bT),e(bT,hbe),e(hbe,xsr),e(bT,$sr),e(bT,uW),e(uW,ksr),e(bT,Ssr),e(ve,Rsr),e(ve,vT),e(vT,pbe),e(pbe,Psr),e(vT,Bsr),e(vT,bW),e(bW,Isr),e(vT,Nsr),e(ve,qsr),e(ve,FT),e(FT,_be),e(_be,jsr),e(FT,Dsr),e(FT,vW),e(vW,Gsr),e(FT,Osr),e(ve,Vsr),e(ve,Hs),e(Hs,ube),e(ube,Xsr),e(Hs,zsr),e(Hs,FW),e(FW,Qsr),e(Hs,Wsr),e(Hs,TW),e(TW,Hsr),e(Hs,Usr),e(ve,Jsr),e(ve,TT),e(TT,bbe),e(bbe,Ysr),e(TT,Ksr),e(TT,MW),e(MW,Zsr),e(TT,elr),e(ve,olr),e(ve,Us),e(Us,vbe),e(vbe,rlr),e(Us,tlr),e(Us,EW),e(EW,alr),e(Us,nlr),e(Us,CW),e(CW,slr),e(Us,llr),e(ve,ilr),e(ve,MT),e(MT,Fbe),e(Fbe,dlr),e(MT,clr),e(MT,wW),e(wW,flr),e(MT,mlr),e(ve,glr),e(ve,Ft),e(Ft,Tbe),e(Tbe,hlr),e(Ft,plr),e(Ft,AW),e(AW,_lr),e(Ft,ulr),e(Ft,LW),e(LW,blr),e(Ft,vlr),e(Ft,yW),e(yW,Flr),e(Ft,Tlr),e(ve,Mlr),e(ve,ET),e(ET,Mbe),e(Mbe,Elr),e(ET,Clr),e(ET,xW),e(xW,wlr),e(ET,Alr),e(ve,Llr),e(ve,CT),e(CT,Ebe),e(Ebe,ylr),e(CT,xlr),e(CT,$W),e($W,$lr),e(CT,klr),e(ve,Slr),e(ve,wT),e(wT,Cbe),e(Cbe,Rlr),e(wT,Plr),e(wT,kW),e(kW,Blr),e(wT,Ilr),e(ve,Nlr),e(ve,AT),e(AT,wbe),e(wbe,qlr),e(AT,jlr),e(AT,SW),e(SW,Dlr),e(AT,Glr),e(ve,Olr),e(ve,LT),e(LT,Abe),e(Abe,Vlr),e(LT,Xlr),e(LT,RW),e(RW,zlr),e(LT,Qlr),e(ve,Wlr),e(ve,yT),e(yT,Lbe),e(Lbe,Hlr),e(yT,Ulr),e(yT,PW),e(PW,Jlr),e(yT,Ylr),e(ve,Klr),e(ve,xT),e(xT,ybe),e(ybe,Zlr),e(xT,eir),e(xT,BW),e(BW,oir),e(xT,rir),e(io,tir),e(io,$T),e($T,air),e($T,xbe),e(xbe,nir),e($T,sir),e($T,$be),e($be,lir),e(io,iir),M(kT,io,null),b(f,OXe,u),b(f,Ed,u),e(Ed,ST),e(ST,kbe),M(qy,kbe,null),e(Ed,dir),e(Ed,Sbe),e(Sbe,cir),b(f,VXe,u),b(f,Xo,u),M(jy,Xo,null),e(Xo,fir),e(Xo,Cd),e(Cd,mir),e(Cd,IW),e(IW,gir),e(Cd,hir),e(Cd,NW),e(NW,pir),e(Cd,_ir),e(Xo,uir),e(Xo,Dy),e(Dy,bir),e(Dy,Rbe),e(Rbe,vir),e(Dy,Fir),e(Xo,Tir),e(Xo,Tt),M(Gy,Tt,null),e(Tt,Mir),e(Tt,Pbe),e(Pbe,Eir),e(Tt,Cir),e(Tt,wd),e(wd,wir),e(wd,Bbe),e(Bbe,Air),e(wd,Lir),e(wd,qW),e(qW,yir),e(wd,xir),e(Tt,$ir),M(RT,Tt,null),e(Xo,kir),e(Xo,co),M(Oy,co,null),e(co,Sir),e(co,Ibe),e(Ibe,Rir),e(co,Pir),e(co,Ha),e(Ha,Bir),e(Ha,Nbe),e(Nbe,Iir),e(Ha,Nir),e(Ha,qbe),e(qbe,qir),e(Ha,jir),e(Ha,jbe),e(jbe,Dir),e(Ha,Gir),e(co,Oir),e(co,Dbe),e(Dbe,PT),e(PT,Gbe),e(Gbe,Vir),e(PT,Xir),e(PT,jW),e(jW,zir),e(PT,Qir),e(co,Wir),e(co,BT),e(BT,Hir),e(BT,Obe),e(Obe,Uir),e(BT,Jir),e(BT,Vbe),e(Vbe,Yir),e(co,Kir),M(IT,co,null),b(f,XXe,u),b(f,Ad,u),e(Ad,NT),e(NT,Xbe),M(Vy,Xbe,null),e(Ad,Zir),e(Ad,zbe),e(zbe,edr),b(f,zXe,u),b(f,zo,u),M(Xy,zo,null),e(zo,odr),e(zo,Ld),e(Ld,rdr),e(Ld,DW),e(DW,tdr),e(Ld,adr),e(Ld,GW),e(GW,ndr),e(Ld,sdr),e(zo,ldr),e(zo,zy),e(zy,idr),e(zy,Qbe),e(Qbe,ddr),e(zy,cdr),e(zo,fdr),e(zo,Mt),M(Qy,Mt,null),e(Mt,mdr),e(Mt,Wbe),e(Wbe,gdr),e(Mt,hdr),e(Mt,yd),e(yd,pdr),e(yd,Hbe),e(Hbe,_dr),e(yd,udr),e(yd,OW),e(OW,bdr),e(yd,vdr),e(Mt,Fdr),M(qT,Mt,null),e(zo,Tdr),e(zo,fo),M(Wy,fo,null),e(fo,Mdr),e(fo,Ube),e(Ube,Edr),e(fo,Cdr),e(fo,Ua),e(Ua,wdr),e(Ua,Jbe),e(Jbe,Adr),e(Ua,Ldr),e(Ua,Ybe),e(Ybe,ydr),e(Ua,xdr),e(Ua,Kbe),e(Kbe,$dr),e(Ua,kdr),e(fo,Sdr),e(fo,Zbe),e(Zbe,jT),e(jT,eve),e(eve,Rdr),e(jT,Pdr),e(jT,VW),e(VW,Bdr),e(jT,Idr),e(fo,Ndr),e(fo,DT),e(DT,qdr),e(DT,ove),e(ove,jdr),e(DT,Ddr),e(DT,rve),e(rve,Gdr),e(fo,Odr),M(GT,fo,null),b(f,QXe,u),b(f,xd,u),e(xd,OT),e(OT,tve),M(Hy,tve,null),e(xd,Vdr),e(xd,ave),e(ave,Xdr),b(f,WXe,u),b(f,Qo,u),M(Uy,Qo,null),e(Qo,zdr),e(Qo,$d),e($d,Qdr),e($d,XW),e(XW,Wdr),e($d,Hdr),e($d,zW),e(zW,Udr),e($d,Jdr),e(Qo,Ydr),e(Qo,Jy),e(Jy,Kdr),e(Jy,nve),e(nve,Zdr),e(Jy,ecr),e(Qo,ocr),e(Qo,Et),M(Yy,Et,null),e(Et,rcr),e(Et,sve),e(sve,tcr),e(Et,acr),e(Et,kd),e(kd,ncr),e(kd,lve),e(lve,scr),e(kd,lcr),e(kd,QW),e(QW,icr),e(kd,dcr),e(Et,ccr),M(VT,Et,null),e(Qo,fcr),e(Qo,mo),M(Ky,mo,null),e(mo,mcr),e(mo,ive),e(ive,gcr),e(mo,hcr),e(mo,Ja),e(Ja,pcr),e(Ja,dve),e(dve,_cr),e(Ja,ucr),e(Ja,cve),e(cve,bcr),e(Ja,vcr),e(Ja,fve),e(fve,Fcr),e(Ja,Tcr),e(mo,Mcr),e(mo,Pe),e(Pe,XT),e(XT,mve),e(mve,Ecr),e(XT,Ccr),e(XT,WW),e(WW,wcr),e(XT,Acr),e(Pe,Lcr),e(Pe,zT),e(zT,gve),e(gve,ycr),e(zT,xcr),e(zT,HW),e(HW,$cr),e(zT,kcr),e(Pe,Scr),e(Pe,QT),e(QT,hve),e(hve,Rcr),e(QT,Pcr),e(QT,UW),e(UW,Bcr),e(QT,Icr),e(Pe,Ncr),e(Pe,WT),e(WT,pve),e(pve,qcr),e(WT,jcr),e(WT,JW),e(JW,Dcr),e(WT,Gcr),e(Pe,Ocr),e(Pe,HT),e(HT,_ve),e(_ve,Vcr),e(HT,Xcr),e(HT,YW),e(YW,zcr),e(HT,Qcr),e(Pe,Wcr),e(Pe,UT),e(UT,uve),e(uve,Hcr),e(UT,Ucr),e(UT,KW),e(KW,Jcr),e(UT,Ycr),e(Pe,Kcr),e(Pe,JT),e(JT,bve),e(bve,Zcr),e(JT,efr),e(JT,ZW),e(ZW,ofr),e(JT,rfr),e(Pe,tfr),e(Pe,YT),e(YT,vve),e(vve,afr),e(YT,nfr),e(YT,eH),e(eH,sfr),e(YT,lfr),e(Pe,ifr),e(Pe,KT),e(KT,Fve),e(Fve,dfr),e(KT,cfr),e(KT,oH),e(oH,ffr),e(KT,mfr),e(mo,gfr),e(mo,ZT),e(ZT,hfr),e(ZT,Tve),e(Tve,pfr),e(ZT,_fr),e(ZT,Mve),e(Mve,ufr),e(mo,bfr),M(e7,mo,null),b(f,HXe,u),b(f,Sd,u),e(Sd,o7),e(o7,Eve),M(Zy,Eve,null),e(Sd,vfr),e(Sd,Cve),e(Cve,Ffr),b(f,UXe,u),b(f,Wo,u),M(e8,Wo,null),e(Wo,Tfr),e(Wo,Rd),e(Rd,Mfr),e(Rd,rH),e(rH,Efr),e(Rd,Cfr),e(Rd,tH),e(tH,wfr),e(Rd,Afr),e(Wo,Lfr),e(Wo,o8),e(o8,yfr),e(o8,wve),e(wve,xfr),e(o8,$fr),e(Wo,kfr),e(Wo,Ct),M(r8,Ct,null),e(Ct,Sfr),e(Ct,Ave),e(Ave,Rfr),e(Ct,Pfr),e(Ct,Pd),e(Pd,Bfr),e(Pd,Lve),e(Lve,Ifr),e(Pd,Nfr),e(Pd,aH),e(aH,qfr),e(Pd,jfr),e(Ct,Dfr),M(r7,Ct,null),e(Wo,Gfr),e(Wo,go),M(t8,go,null),e(go,Ofr),e(go,yve),e(yve,Vfr),e(go,Xfr),e(go,Ya),e(Ya,zfr),e(Ya,xve),e(xve,Qfr),e(Ya,Wfr),e(Ya,$ve),e($ve,Hfr),e(Ya,Ufr),e(Ya,kve),e(kve,Jfr),e(Ya,Yfr),e(go,Kfr),e(go,rt),e(rt,t7),e(t7,Sve),e(Sve,Zfr),e(t7,emr),e(t7,nH),e(nH,omr),e(t7,rmr),e(rt,tmr),e(rt,a7),e(a7,Rve),e(Rve,amr),e(a7,nmr),e(a7,sH),e(sH,smr),e(a7,lmr),e(rt,imr),e(rt,n7),e(n7,Pve),e(Pve,dmr),e(n7,cmr),e(n7,lH),e(lH,fmr),e(n7,mmr),e(rt,gmr),e(rt,s7),e(s7,Bve),e(Bve,hmr),e(s7,pmr),e(s7,iH),e(iH,_mr),e(s7,umr),e(rt,bmr),e(rt,l7),e(l7,Ive),e(Ive,vmr),e(l7,Fmr),e(l7,dH),e(dH,Tmr),e(l7,Mmr),e(go,Emr),e(go,i7),e(i7,Cmr),e(i7,Nve),e(Nve,wmr),e(i7,Amr),e(i7,qve),e(qve,Lmr),e(go,ymr),M(d7,go,null),b(f,JXe,u),b(f,Bd,u),e(Bd,c7),e(c7,jve),M(a8,jve,null),e(Bd,xmr),e(Bd,Dve),e(Dve,$mr),b(f,YXe,u),b(f,Ho,u),M(n8,Ho,null),e(Ho,kmr),e(Ho,Id),e(Id,Smr),e(Id,cH),e(cH,Rmr),e(Id,Pmr),e(Id,fH),e(fH,Bmr),e(Id,Imr),e(Ho,Nmr),e(Ho,s8),e(s8,qmr),e(s8,Gve),e(Gve,jmr),e(s8,Dmr),e(Ho,Gmr),e(Ho,wt),M(l8,wt,null),e(wt,Omr),e(wt,Ove),e(Ove,Vmr),e(wt,Xmr),e(wt,Nd),e(Nd,zmr),e(Nd,Vve),e(Vve,Qmr),e(Nd,Wmr),e(Nd,mH),e(mH,Hmr),e(Nd,Umr),e(wt,Jmr),M(f7,wt,null),e(Ho,Ymr),e(Ho,ho),M(i8,ho,null),e(ho,Kmr),e(ho,Xve),e(Xve,Zmr),e(ho,egr),e(ho,Ka),e(Ka,ogr),e(Ka,zve),e(zve,rgr),e(Ka,tgr),e(Ka,Qve),e(Qve,agr),e(Ka,ngr),e(Ka,Wve),e(Wve,sgr),e(Ka,lgr),e(ho,igr),e(ho,Le),e(Le,m7),e(m7,Hve),e(Hve,dgr),e(m7,cgr),e(m7,gH),e(gH,fgr),e(m7,mgr),e(Le,ggr),e(Le,g7),e(g7,Uve),e(Uve,hgr),e(g7,pgr),e(g7,hH),e(hH,_gr),e(g7,ugr),e(Le,bgr),e(Le,h7),e(h7,Jve),e(Jve,vgr),e(h7,Fgr),e(h7,pH),e(pH,Tgr),e(h7,Mgr),e(Le,Egr),e(Le,p7),e(p7,Yve),e(Yve,Cgr),e(p7,wgr),e(p7,_H),e(_H,Agr),e(p7,Lgr),e(Le,ygr),e(Le,_7),e(_7,Kve),e(Kve,xgr),e(_7,$gr),e(_7,uH),e(uH,kgr),e(_7,Sgr),e(Le,Rgr),e(Le,u7),e(u7,Zve),e(Zve,Pgr),e(u7,Bgr),e(u7,bH),e(bH,Igr),e(u7,Ngr),e(Le,qgr),e(Le,b7),e(b7,e0e),e(e0e,jgr),e(b7,Dgr),e(b7,vH),e(vH,Ggr),e(b7,Ogr),e(Le,Vgr),e(Le,v7),e(v7,o0e),e(o0e,Xgr),e(v7,zgr),e(v7,FH),e(FH,Qgr),e(v7,Wgr),e(Le,Hgr),e(Le,F7),e(F7,r0e),e(r0e,Ugr),e(F7,Jgr),e(F7,TH),e(TH,Ygr),e(F7,Kgr),e(Le,Zgr),e(Le,T7),e(T7,t0e),e(t0e,ehr),e(T7,ohr),e(T7,MH),e(MH,rhr),e(T7,thr),e(ho,ahr),e(ho,M7),e(M7,nhr),e(M7,a0e),e(a0e,shr),e(M7,lhr),e(M7,n0e),e(n0e,ihr),e(ho,dhr),M(E7,ho,null),b(f,KXe,u),b(f,qd,u),e(qd,C7),e(C7,s0e),M(d8,s0e,null),e(qd,chr),e(qd,l0e),e(l0e,fhr),b(f,ZXe,u),b(f,Uo,u),M(c8,Uo,null),e(Uo,mhr),e(Uo,jd),e(jd,ghr),e(jd,EH),e(EH,hhr),e(jd,phr),e(jd,CH),e(CH,_hr),e(jd,uhr),e(Uo,bhr),e(Uo,f8),e(f8,vhr),e(f8,i0e),e(i0e,Fhr),e(f8,Thr),e(Uo,Mhr),e(Uo,At),M(m8,At,null),e(At,Ehr),e(At,d0e),e(d0e,Chr),e(At,whr),e(At,Dd),e(Dd,Ahr),e(Dd,c0e),e(c0e,Lhr),e(Dd,yhr),e(Dd,wH),e(wH,xhr),e(Dd,$hr),e(At,khr),M(w7,At,null),e(Uo,Shr),e(Uo,po),M(g8,po,null),e(po,Rhr),e(po,f0e),e(f0e,Phr),e(po,Bhr),e(po,Za),e(Za,Ihr),e(Za,m0e),e(m0e,Nhr),e(Za,qhr),e(Za,g0e),e(g0e,jhr),e(Za,Dhr),e(Za,h0e),e(h0e,Ghr),e(Za,Ohr),e(po,Vhr),e(po,h8),e(h8,A7),e(A7,p0e),e(p0e,Xhr),e(A7,zhr),e(A7,AH),e(AH,Qhr),e(A7,Whr),e(h8,Hhr),e(h8,L7),e(L7,_0e),e(_0e,Uhr),e(L7,Jhr),e(L7,LH),e(LH,Yhr),e(L7,Khr),e(po,Zhr),e(po,y7),e(y7,epr),e(y7,u0e),e(u0e,opr),e(y7,rpr),e(y7,b0e),e(b0e,tpr),e(po,apr),M(x7,po,null),b(f,eze,u),b(f,Gd,u),e(Gd,$7),e($7,v0e),M(p8,v0e,null),e(Gd,npr),e(Gd,F0e),e(F0e,spr),b(f,oze,u),b(f,Jo,u),M(_8,Jo,null),e(Jo,lpr),e(Jo,Od),e(Od,ipr),e(Od,yH),e(yH,dpr),e(Od,cpr),e(Od,xH),e(xH,fpr),e(Od,mpr),e(Jo,gpr),e(Jo,u8),e(u8,hpr),e(u8,T0e),e(T0e,ppr),e(u8,_pr),e(Jo,upr),e(Jo,Lt),M(b8,Lt,null),e(Lt,bpr),e(Lt,M0e),e(M0e,vpr),e(Lt,Fpr),e(Lt,Vd),e(Vd,Tpr),e(Vd,E0e),e(E0e,Mpr),e(Vd,Epr),e(Vd,$H),e($H,Cpr),e(Vd,wpr),e(Lt,Apr),M(k7,Lt,null),e(Jo,Lpr),e(Jo,_o),M(v8,_o,null),e(_o,ypr),e(_o,C0e),e(C0e,xpr),e(_o,$pr),e(_o,en),e(en,kpr),e(en,w0e),e(w0e,Spr),e(en,Rpr),e(en,A0e),e(A0e,Ppr),e(en,Bpr),e(en,L0e),e(L0e,Ipr),e(en,Npr),e(_o,qpr),e(_o,tt),e(tt,S7),e(S7,y0e),e(y0e,jpr),e(S7,Dpr),e(S7,kH),e(kH,Gpr),e(S7,Opr),e(tt,Vpr),e(tt,R7),e(R7,x0e),e(x0e,Xpr),e(R7,zpr),e(R7,SH),e(SH,Qpr),e(R7,Wpr),e(tt,Hpr),e(tt,P7),e(P7,$0e),e($0e,Upr),e(P7,Jpr),e(P7,RH),e(RH,Ypr),e(P7,Kpr),e(tt,Zpr),e(tt,B7),e(B7,k0e),e(k0e,e_r),e(B7,o_r),e(B7,PH),e(PH,r_r),e(B7,t_r),e(tt,a_r),e(tt,I7),e(I7,S0e),e(S0e,n_r),e(I7,s_r),e(I7,BH),e(BH,l_r),e(I7,i_r),e(_o,d_r),e(_o,N7),e(N7,c_r),e(N7,R0e),e(R0e,f_r),e(N7,m_r),e(N7,P0e),e(P0e,g_r),e(_o,h_r),M(q7,_o,null),b(f,rze,u),b(f,Xd,u),e(Xd,j7),e(j7,B0e),M(F8,B0e,null),e(Xd,p_r),e(Xd,I0e),e(I0e,__r),b(f,tze,u),b(f,Yo,u),M(T8,Yo,null),e(Yo,u_r),e(Yo,zd),e(zd,b_r),e(zd,IH),e(IH,v_r),e(zd,F_r),e(zd,NH),e(NH,T_r),e(zd,M_r),e(Yo,E_r),e(Yo,M8),e(M8,C_r),e(M8,N0e),e(N0e,w_r),e(M8,A_r),e(Yo,L_r),e(Yo,yt),M(E8,yt,null),e(yt,y_r),e(yt,q0e),e(q0e,x_r),e(yt,$_r),e(yt,Qd),e(Qd,k_r),e(Qd,j0e),e(j0e,S_r),e(Qd,R_r),e(Qd,qH),e(qH,P_r),e(Qd,B_r),e(yt,I_r),M(D7,yt,null),e(Yo,N_r),e(Yo,uo),M(C8,uo,null),e(uo,q_r),e(uo,D0e),e(D0e,j_r),e(uo,D_r),e(uo,on),e(on,G_r),e(on,G0e),e(G0e,O_r),e(on,V_r),e(on,O0e),e(O0e,X_r),e(on,z_r),e(on,V0e),e(V0e,Q_r),e(on,W_r),e(uo,H_r),e(uo,Wd),e(Wd,G7),e(G7,X0e),e(X0e,U_r),e(G7,J_r),e(G7,jH),e(jH,Y_r),e(G7,K_r),e(Wd,Z_r),e(Wd,O7),e(O7,z0e),e(z0e,eur),e(O7,our),e(O7,DH),e(DH,rur),e(O7,tur),e(Wd,aur),e(Wd,V7),e(V7,Q0e),e(Q0e,nur),e(V7,sur),e(V7,GH),e(GH,lur),e(V7,iur),e(uo,dur),e(uo,X7),e(X7,cur),e(X7,W0e),e(W0e,fur),e(X7,mur),e(X7,H0e),e(H0e,gur),e(uo,hur),M(z7,uo,null),b(f,aze,u),b(f,Hd,u),e(Hd,Q7),e(Q7,U0e),M(w8,U0e,null),e(Hd,pur),e(Hd,J0e),e(J0e,_ur),b(f,nze,u),b(f,Ko,u),M(A8,Ko,null),e(Ko,uur),e(Ko,Ud),e(Ud,bur),e(Ud,OH),e(OH,vur),e(Ud,Fur),e(Ud,VH),e(VH,Tur),e(Ud,Mur),e(Ko,Eur),e(Ko,L8),e(L8,Cur),e(L8,Y0e),e(Y0e,wur),e(L8,Aur),e(Ko,Lur),e(Ko,xt),M(y8,xt,null),e(xt,yur),e(xt,K0e),e(K0e,xur),e(xt,$ur),e(xt,Jd),e(Jd,kur),e(Jd,Z0e),e(Z0e,Sur),e(Jd,Rur),e(Jd,XH),e(XH,Pur),e(Jd,Bur),e(xt,Iur),M(W7,xt,null),e(Ko,Nur),e(Ko,bo),M(x8,bo,null),e(bo,qur),e(bo,eFe),e(eFe,jur),e(bo,Dur),e(bo,rn),e(rn,Gur),e(rn,oFe),e(oFe,Our),e(rn,Vur),e(rn,rFe),e(rFe,Xur),e(rn,zur),e(rn,tFe),e(tFe,Qur),e(rn,Wur),e(bo,Hur),e(bo,$8),e($8,H7),e(H7,aFe),e(aFe,Uur),e(H7,Jur),e(H7,zH),e(zH,Yur),e(H7,Kur),e($8,Zur),e($8,U7),e(U7,nFe),e(nFe,e1r),e(U7,o1r),e(U7,QH),e(QH,r1r),e(U7,t1r),e(bo,a1r),e(bo,J7),e(J7,n1r),e(J7,sFe),e(sFe,s1r),e(J7,l1r),e(J7,lFe),e(lFe,i1r),e(bo,d1r),M(Y7,bo,null),b(f,sze,u),b(f,Yd,u),e(Yd,K7),e(K7,iFe),M(k8,iFe,null),e(Yd,c1r),e(Yd,dFe),e(dFe,f1r),b(f,lze,u),b(f,Zo,u),M(S8,Zo,null),e(Zo,m1r),e(Zo,Kd),e(Kd,g1r),e(Kd,WH),e(WH,h1r),e(Kd,p1r),e(Kd,HH),e(HH,_1r),e(Kd,u1r),e(Zo,b1r),e(Zo,R8),e(R8,v1r),e(R8,cFe),e(cFe,F1r),e(R8,T1r),e(Zo,M1r),e(Zo,$t),M(P8,$t,null),e($t,E1r),e($t,fFe),e(fFe,C1r),e($t,w1r),e($t,Zd),e(Zd,A1r),e(Zd,mFe),e(mFe,L1r),e(Zd,y1r),e(Zd,UH),e(UH,x1r),e(Zd,$1r),e($t,k1r),M(Z7,$t,null),e(Zo,S1r),e(Zo,vo),M(B8,vo,null),e(vo,R1r),e(vo,gFe),e(gFe,P1r),e(vo,B1r),e(vo,tn),e(tn,I1r),e(tn,hFe),e(hFe,N1r),e(tn,q1r),e(tn,pFe),e(pFe,j1r),e(tn,D1r),e(tn,_Fe),e(_Fe,G1r),e(tn,O1r),e(vo,V1r),e(vo,uFe),e(uFe,e9),e(e9,bFe),e(bFe,X1r),e(e9,z1r),e(e9,JH),e(JH,Q1r),e(e9,W1r),e(vo,H1r),e(vo,o9),e(o9,U1r),e(o9,vFe),e(vFe,J1r),e(o9,Y1r),e(o9,FFe),e(FFe,K1r),e(vo,Z1r),M(r9,vo,null),b(f,ize,u),b(f,ec,u),e(ec,t9),e(t9,TFe),M(I8,TFe,null),e(ec,e2r),e(ec,MFe),e(MFe,o2r),b(f,dze,u),b(f,er,u),M(N8,er,null),e(er,r2r),e(er,oc),e(oc,t2r),e(oc,YH),e(YH,a2r),e(oc,n2r),e(oc,KH),e(KH,s2r),e(oc,l2r),e(er,i2r),e(er,q8),e(q8,d2r),e(q8,EFe),e(EFe,c2r),e(q8,f2r),e(er,m2r),e(er,kt),M(j8,kt,null),e(kt,g2r),e(kt,CFe),e(CFe,h2r),e(kt,p2r),e(kt,rc),e(rc,_2r),e(rc,wFe),e(wFe,u2r),e(rc,b2r),e(rc,ZH),e(ZH,v2r),e(rc,F2r),e(kt,T2r),M(a9,kt,null),e(er,M2r),e(er,Fo),M(D8,Fo,null),e(Fo,E2r),e(Fo,AFe),e(AFe,C2r),e(Fo,w2r),e(Fo,an),e(an,A2r),e(an,LFe),e(LFe,L2r),e(an,y2r),e(an,yFe),e(yFe,x2r),e(an,$2r),e(an,xFe),e(xFe,k2r),e(an,S2r),e(Fo,R2r),e(Fo,at),e(at,n9),e(n9,$Fe),e($Fe,P2r),e(n9,B2r),e(n9,eU),e(eU,I2r),e(n9,N2r),e(at,q2r),e(at,s9),e(s9,kFe),e(kFe,j2r),e(s9,D2r),e(s9,oU),e(oU,G2r),e(s9,O2r),e(at,V2r),e(at,l9),e(l9,SFe),e(SFe,X2r),e(l9,z2r),e(l9,rU),e(rU,Q2r),e(l9,W2r),e(at,H2r),e(at,i9),e(i9,RFe),e(RFe,U2r),e(i9,J2r),e(i9,tU),e(tU,Y2r),e(i9,K2r),e(at,Z2r),e(at,d9),e(d9,PFe),e(PFe,ebr),e(d9,obr),e(d9,aU),e(aU,rbr),e(d9,tbr),e(Fo,abr),e(Fo,c9),e(c9,nbr),e(c9,BFe),e(BFe,sbr),e(c9,lbr),e(c9,IFe),e(IFe,ibr),e(Fo,dbr),M(f9,Fo,null),b(f,cze,u),b(f,tc,u),e(tc,m9),e(m9,NFe),M(G8,NFe,null),e(tc,cbr),e(tc,qFe),e(qFe,fbr),b(f,fze,u),b(f,or,u),M(O8,or,null),e(or,mbr),e(or,ac),e(ac,gbr),e(ac,nU),e(nU,hbr),e(ac,pbr),e(ac,sU),e(sU,_br),e(ac,ubr),e(or,bbr),e(or,V8),e(V8,vbr),e(V8,jFe),e(jFe,Fbr),e(V8,Tbr),e(or,Mbr),e(or,St),M(X8,St,null),e(St,Ebr),e(St,DFe),e(DFe,Cbr),e(St,wbr),e(St,nc),e(nc,Abr),e(nc,GFe),e(GFe,Lbr),e(nc,ybr),e(nc,lU),e(lU,xbr),e(nc,$br),e(St,kbr),M(g9,St,null),e(or,Sbr),e(or,To),M(z8,To,null),e(To,Rbr),e(To,OFe),e(OFe,Pbr),e(To,Bbr),e(To,nn),e(nn,Ibr),e(nn,VFe),e(VFe,Nbr),e(nn,qbr),e(nn,XFe),e(XFe,jbr),e(nn,Dbr),e(nn,zFe),e(zFe,Gbr),e(nn,Obr),e(To,Vbr),e(To,QFe),e(QFe,h9),e(h9,WFe),e(WFe,Xbr),e(h9,zbr),e(h9,iU),e(iU,Qbr),e(h9,Wbr),e(To,Hbr),e(To,p9),e(p9,Ubr),e(p9,HFe),e(HFe,Jbr),e(p9,Ybr),e(p9,UFe),e(UFe,Kbr),e(To,Zbr),M(_9,To,null),b(f,mze,u),b(f,sc,u),e(sc,u9),e(u9,JFe),M(Q8,JFe,null),e(sc,evr),e(sc,YFe),e(YFe,ovr),b(f,gze,u),b(f,rr,u),M(W8,rr,null),e(rr,rvr),e(rr,lc),e(lc,tvr),e(lc,dU),e(dU,avr),e(lc,nvr),e(lc,cU),e(cU,svr),e(lc,lvr),e(rr,ivr),e(rr,H8),e(H8,dvr),e(H8,KFe),e(KFe,cvr),e(H8,fvr),e(rr,mvr),e(rr,Rt),M(U8,Rt,null),e(Rt,gvr),e(Rt,ZFe),e(ZFe,hvr),e(Rt,pvr),e(Rt,ic),e(ic,_vr),e(ic,eTe),e(eTe,uvr),e(ic,bvr),e(ic,fU),e(fU,vvr),e(ic,Fvr),e(Rt,Tvr),M(b9,Rt,null),e(rr,Mvr),e(rr,$r),M(J8,$r,null),e($r,Evr),e($r,oTe),e(oTe,Cvr),e($r,wvr),e($r,sn),e(sn,Avr),e(sn,rTe),e(rTe,Lvr),e(sn,yvr),e(sn,tTe),e(tTe,xvr),e(sn,$vr),e(sn,aTe),e(aTe,kvr),e(sn,Svr),e($r,Rvr),e($r,B),e(B,v9),e(v9,nTe),e(nTe,Pvr),e(v9,Bvr),e(v9,mU),e(mU,Ivr),e(v9,Nvr),e(B,qvr),e(B,F9),e(F9,sTe),e(sTe,jvr),e(F9,Dvr),e(F9,gU),e(gU,Gvr),e(F9,Ovr),e(B,Vvr),e(B,T9),e(T9,lTe),e(lTe,Xvr),e(T9,zvr),e(T9,hU),e(hU,Qvr),e(T9,Wvr),e(B,Hvr),e(B,M9),e(M9,iTe),e(iTe,Uvr),e(M9,Jvr),e(M9,pU),e(pU,Yvr),e(M9,Kvr),e(B,Zvr),e(B,E9),e(E9,dTe),e(dTe,e0r),e(E9,o0r),e(E9,_U),e(_U,r0r),e(E9,t0r),e(B,a0r),e(B,C9),e(C9,cTe),e(cTe,n0r),e(C9,s0r),e(C9,uU),e(uU,l0r),e(C9,i0r),e(B,d0r),e(B,w9),e(w9,fTe),e(fTe,c0r),e(w9,f0r),e(w9,bU),e(bU,m0r),e(w9,g0r),e(B,h0r),e(B,A9),e(A9,mTe),e(mTe,p0r),e(A9,_0r),e(A9,vU),e(vU,u0r),e(A9,b0r),e(B,v0r),e(B,L9),e(L9,gTe),e(gTe,F0r),e(L9,T0r),e(L9,FU),e(FU,M0r),e(L9,E0r),e(B,C0r),e(B,y9),e(y9,hTe),e(hTe,w0r),e(y9,A0r),e(y9,TU),e(TU,L0r),e(y9,y0r),e(B,x0r),e(B,x9),e(x9,pTe),e(pTe,$0r),e(x9,k0r),e(x9,MU),e(MU,S0r),e(x9,R0r),e(B,P0r),e(B,$9),e($9,_Te),e(_Te,B0r),e($9,I0r),e($9,EU),e(EU,N0r),e($9,q0r),e(B,j0r),e(B,k9),e(k9,uTe),e(uTe,D0r),e(k9,G0r),e(k9,CU),e(CU,O0r),e(k9,V0r),e(B,X0r),e(B,S9),e(S9,bTe),e(bTe,z0r),e(S9,Q0r),e(S9,wU),e(wU,W0r),e(S9,H0r),e(B,U0r),e(B,R9),e(R9,vTe),e(vTe,J0r),e(R9,Y0r),e(R9,AU),e(AU,K0r),e(R9,Z0r),e(B,eFr),e(B,P9),e(P9,FTe),e(FTe,oFr),e(P9,rFr),e(P9,LU),e(LU,tFr),e(P9,aFr),e(B,nFr),e(B,B9),e(B9,TTe),e(TTe,sFr),e(B9,lFr),e(B9,yU),e(yU,iFr),e(B9,dFr),e(B,cFr),e(B,I9),e(I9,MTe),e(MTe,fFr),e(I9,mFr),e(I9,xU),e(xU,gFr),e(I9,hFr),e(B,pFr),e(B,Js),e(Js,ETe),e(ETe,_Fr),e(Js,uFr),e(Js,$U),e($U,bFr),e(Js,vFr),e(Js,kU),e(kU,FFr),e(Js,TFr),e(B,MFr),e(B,N9),e(N9,CTe),e(CTe,EFr),e(N9,CFr),e(N9,SU),e(SU,wFr),e(N9,AFr),e(B,LFr),e(B,q9),e(q9,wTe),e(wTe,yFr),e(q9,xFr),e(q9,RU),e(RU,$Fr),e(q9,kFr),e(B,SFr),e(B,j9),e(j9,ATe),e(ATe,RFr),e(j9,PFr),e(j9,PU),e(PU,BFr),e(j9,IFr),e(B,NFr),e(B,D9),e(D9,LTe),e(LTe,qFr),e(D9,jFr),e(D9,BU),e(BU,DFr),e(D9,GFr),e(B,OFr),e(B,G9),e(G9,yTe),e(yTe,VFr),e(G9,XFr),e(G9,IU),e(IU,zFr),e(G9,QFr),e(B,WFr),e(B,O9),e(O9,xTe),e(xTe,HFr),e(O9,UFr),e(O9,NU),e(NU,JFr),e(O9,YFr),e(B,KFr),e(B,V9),e(V9,$Te),e($Te,ZFr),e(V9,eTr),e(V9,qU),e(qU,oTr),e(V9,rTr),e(B,tTr),e(B,X9),e(X9,kTe),e(kTe,aTr),e(X9,nTr),e(X9,jU),e(jU,sTr),e(X9,lTr),e(B,iTr),e(B,z9),e(z9,STe),e(STe,dTr),e(z9,cTr),e(z9,DU),e(DU,fTr),e(z9,mTr),e(B,gTr),e(B,Q9),e(Q9,RTe),e(RTe,hTr),e(Q9,pTr),e(Q9,GU),e(GU,_Tr),e(Q9,uTr),e(B,bTr),e(B,W9),e(W9,PTe),e(PTe,vTr),e(W9,FTr),e(W9,OU),e(OU,TTr),e(W9,MTr),e(B,ETr),e(B,H9),e(H9,BTe),e(BTe,CTr),e(H9,wTr),e(H9,VU),e(VU,ATr),e(H9,LTr),e(B,yTr),e(B,U9),e(U9,ITe),e(ITe,xTr),e(U9,$Tr),e(U9,XU),e(XU,kTr),e(U9,STr),e(B,RTr),e(B,J9),e(J9,NTe),e(NTe,PTr),e(J9,BTr),e(J9,zU),e(zU,ITr),e(J9,NTr),e(B,qTr),e(B,Y9),e(Y9,qTe),e(qTe,jTr),e(Y9,DTr),e(Y9,QU),e(QU,GTr),e(Y9,OTr),e(B,VTr),e(B,K9),e(K9,jTe),e(jTe,XTr),e(K9,zTr),e(K9,WU),e(WU,QTr),e(K9,WTr),e(B,HTr),e(B,Z9),e(Z9,DTe),e(DTe,UTr),e(Z9,JTr),e(Z9,HU),e(HU,YTr),e(Z9,KTr),e(B,ZTr),e(B,eM),e(eM,GTe),e(GTe,e7r),e(eM,o7r),e(eM,UU),e(UU,r7r),e(eM,t7r),e(B,a7r),e(B,oM),e(oM,OTe),e(OTe,n7r),e(oM,s7r),e(oM,JU),e(JU,l7r),e(oM,i7r),e(B,d7r),e(B,rM),e(rM,VTe),e(VTe,c7r),e(rM,f7r),e(rM,YU),e(YU,m7r),e(rM,g7r),e(B,h7r),e(B,tM),e(tM,XTe),e(XTe,p7r),e(tM,_7r),e(tM,KU),e(KU,u7r),e(tM,b7r),e(B,v7r),e(B,aM),e(aM,zTe),e(zTe,F7r),e(aM,T7r),e(aM,ZU),e(ZU,M7r),e(aM,E7r),e(B,C7r),e(B,nM),e(nM,QTe),e(QTe,w7r),e(nM,A7r),e(nM,eJ),e(eJ,L7r),e(nM,y7r),e(B,x7r),e(B,sM),e(sM,WTe),e(WTe,$7r),e(sM,k7r),e(sM,oJ),e(oJ,S7r),e(sM,R7r),e(B,P7r),e(B,lM),e(lM,HTe),e(HTe,B7r),e(lM,I7r),e(lM,rJ),e(rJ,N7r),e(lM,q7r),e(B,j7r),e(B,iM),e(iM,UTe),e(UTe,D7r),e(iM,G7r),e(iM,tJ),e(tJ,O7r),e(iM,V7r),e(B,X7r),e(B,dM),e(dM,JTe),e(JTe,z7r),e(dM,Q7r),e(dM,aJ),e(aJ,W7r),e(dM,H7r),e(B,U7r),e(B,cM),e(cM,YTe),e(YTe,J7r),e(cM,Y7r),e(cM,nJ),e(nJ,K7r),e(cM,Z7r),e(B,e9r),e(B,fM),e(fM,KTe),e(KTe,o9r),e(fM,r9r),e(fM,sJ),e(sJ,t9r),e(fM,a9r),e(B,n9r),e(B,mM),e(mM,ZTe),e(ZTe,s9r),e(mM,l9r),e(mM,lJ),e(lJ,i9r),e(mM,d9r),e(B,c9r),e(B,gM),e(gM,e7e),e(e7e,f9r),e(gM,m9r),e(gM,iJ),e(iJ,g9r),e(gM,h9r),e(B,p9r),e(B,hM),e(hM,o7e),e(o7e,_9r),e(hM,u9r),e(hM,dJ),e(dJ,b9r),e(hM,v9r),e($r,F9r),M(pM,$r,null),b(f,hze,u),b(f,dc,u),e(dc,_M),e(_M,r7e),M(Y8,r7e,null),e(dc,T9r),e(dc,t7e),e(t7e,M9r),b(f,pze,u),b(f,tr,u),M(K8,tr,null),e(tr,E9r),e(tr,cc),e(cc,C9r),e(cc,cJ),e(cJ,w9r),e(cc,A9r),e(cc,fJ),e(fJ,L9r),e(cc,y9r),e(tr,x9r),e(tr,Z8),e(Z8,$9r),e(Z8,a7e),e(a7e,k9r),e(Z8,S9r),e(tr,R9r),e(tr,Pt),M(ex,Pt,null),e(Pt,P9r),e(Pt,n7e),e(n7e,B9r),e(Pt,I9r),e(Pt,fc),e(fc,N9r),e(fc,s7e),e(s7e,q9r),e(fc,j9r),e(fc,mJ),e(mJ,D9r),e(fc,G9r),e(Pt,O9r),M(uM,Pt,null),e(tr,V9r),e(tr,kr),M(ox,kr,null),e(kr,X9r),e(kr,l7e),e(l7e,z9r),e(kr,Q9r),e(kr,ln),e(ln,W9r),e(ln,i7e),e(i7e,H9r),e(ln,U9r),e(ln,d7e),e(d7e,J9r),e(ln,Y9r),e(ln,c7e),e(c7e,K9r),e(ln,Z9r),e(kr,eMr),e(kr,se),e(se,bM),e(bM,f7e),e(f7e,oMr),e(bM,rMr),e(bM,gJ),e(gJ,tMr),e(bM,aMr),e(se,nMr),e(se,vM),e(vM,m7e),e(m7e,sMr),e(vM,lMr),e(vM,hJ),e(hJ,iMr),e(vM,dMr),e(se,cMr),e(se,FM),e(FM,g7e),e(g7e,fMr),e(FM,mMr),e(FM,pJ),e(pJ,gMr),e(FM,hMr),e(se,pMr),e(se,TM),e(TM,h7e),e(h7e,_Mr),e(TM,uMr),e(TM,_J),e(_J,bMr),e(TM,vMr),e(se,FMr),e(se,MM),e(MM,p7e),e(p7e,TMr),e(MM,MMr),e(MM,uJ),e(uJ,EMr),e(MM,CMr),e(se,wMr),e(se,EM),e(EM,_7e),e(_7e,AMr),e(EM,LMr),e(EM,bJ),e(bJ,yMr),e(EM,xMr),e(se,$Mr),e(se,CM),e(CM,u7e),e(u7e,kMr),e(CM,SMr),e(CM,vJ),e(vJ,RMr),e(CM,PMr),e(se,BMr),e(se,wM),e(wM,b7e),e(b7e,IMr),e(wM,NMr),e(wM,FJ),e(FJ,qMr),e(wM,jMr),e(se,DMr),e(se,AM),e(AM,v7e),e(v7e,GMr),e(AM,OMr),e(AM,TJ),e(TJ,VMr),e(AM,XMr),e(se,zMr),e(se,LM),e(LM,F7e),e(F7e,QMr),e(LM,WMr),e(LM,MJ),e(MJ,HMr),e(LM,UMr),e(se,JMr),e(se,yM),e(yM,T7e),e(T7e,YMr),e(yM,KMr),e(yM,EJ),e(EJ,ZMr),e(yM,e4r),e(se,o4r),e(se,xM),e(xM,M7e),e(M7e,r4r),e(xM,t4r),e(xM,CJ),e(CJ,a4r),e(xM,n4r),e(se,s4r),e(se,$M),e($M,E7e),e(E7e,l4r),e($M,i4r),e($M,wJ),e(wJ,d4r),e($M,c4r),e(se,f4r),e(se,kM),e(kM,C7e),e(C7e,m4r),e(kM,g4r),e(kM,AJ),e(AJ,h4r),e(kM,p4r),e(se,_4r),e(se,SM),e(SM,w7e),e(w7e,u4r),e(SM,b4r),e(SM,LJ),e(LJ,v4r),e(SM,F4r),e(se,T4r),e(se,RM),e(RM,A7e),e(A7e,M4r),e(RM,E4r),e(RM,yJ),e(yJ,C4r),e(RM,w4r),e(se,A4r),e(se,PM),e(PM,L7e),e(L7e,L4r),e(PM,y4r),e(PM,xJ),e(xJ,x4r),e(PM,$4r),e(se,k4r),e(se,BM),e(BM,y7e),e(y7e,S4r),e(BM,R4r),e(BM,$J),e($J,P4r),e(BM,B4r),e(se,I4r),e(se,IM),e(IM,x7e),e(x7e,N4r),e(IM,q4r),e(IM,kJ),e(kJ,j4r),e(IM,D4r),e(se,G4r),e(se,NM),e(NM,$7e),e($7e,O4r),e(NM,V4r),e(NM,SJ),e(SJ,X4r),e(NM,z4r),e(se,Q4r),e(se,qM),e(qM,k7e),e(k7e,W4r),e(qM,H4r),e(qM,RJ),e(RJ,U4r),e(qM,J4r),e(se,Y4r),e(se,jM),e(jM,S7e),e(S7e,K4r),e(jM,Z4r),e(jM,PJ),e(PJ,eEr),e(jM,oEr),e(se,rEr),e(se,DM),e(DM,R7e),e(R7e,tEr),e(DM,aEr),e(DM,BJ),e(BJ,nEr),e(DM,sEr),e(kr,lEr),M(GM,kr,null),b(f,_ze,u),b(f,mc,u),e(mc,OM),e(OM,P7e),M(rx,P7e,null),e(mc,iEr),e(mc,B7e),e(B7e,dEr),b(f,uze,u),b(f,ar,u),M(tx,ar,null),e(ar,cEr),e(ar,gc),e(gc,fEr),e(gc,IJ),e(IJ,mEr),e(gc,gEr),e(gc,NJ),e(NJ,hEr),e(gc,pEr),e(ar,_Er),e(ar,ax),e(ax,uEr),e(ax,I7e),e(I7e,bEr),e(ax,vEr),e(ar,FEr),e(ar,Bt),M(nx,Bt,null),e(Bt,TEr),e(Bt,N7e),e(N7e,MEr),e(Bt,EEr),e(Bt,hc),e(hc,CEr),e(hc,q7e),e(q7e,wEr),e(hc,AEr),e(hc,qJ),e(qJ,LEr),e(hc,yEr),e(Bt,xEr),M(VM,Bt,null),e(ar,$Er),e(ar,Sr),M(sx,Sr,null),e(Sr,kEr),e(Sr,j7e),e(j7e,SEr),e(Sr,REr),e(Sr,dn),e(dn,PEr),e(dn,D7e),e(D7e,BEr),e(dn,IEr),e(dn,G7e),e(G7e,NEr),e(dn,qEr),e(dn,O7e),e(O7e,jEr),e(dn,DEr),e(Sr,GEr),e(Sr,Me),e(Me,XM),e(XM,V7e),e(V7e,OEr),e(XM,VEr),e(XM,jJ),e(jJ,XEr),e(XM,zEr),e(Me,QEr),e(Me,zM),e(zM,X7e),e(X7e,WEr),e(zM,HEr),e(zM,DJ),e(DJ,UEr),e(zM,JEr),e(Me,YEr),e(Me,QM),e(QM,z7e),e(z7e,KEr),e(QM,ZEr),e(QM,GJ),e(GJ,eCr),e(QM,oCr),e(Me,rCr),e(Me,WM),e(WM,Q7e),e(Q7e,tCr),e(WM,aCr),e(WM,OJ),e(OJ,nCr),e(WM,sCr),e(Me,lCr),e(Me,HM),e(HM,W7e),e(W7e,iCr),e(HM,dCr),e(HM,VJ),e(VJ,cCr),e(HM,fCr),e(Me,mCr),e(Me,UM),e(UM,H7e),e(H7e,gCr),e(UM,hCr),e(UM,XJ),e(XJ,pCr),e(UM,_Cr),e(Me,uCr),e(Me,JM),e(JM,U7e),e(U7e,bCr),e(JM,vCr),e(JM,zJ),e(zJ,FCr),e(JM,TCr),e(Me,MCr),e(Me,YM),e(YM,J7e),e(J7e,ECr),e(YM,CCr),e(YM,QJ),e(QJ,wCr),e(YM,ACr),e(Me,LCr),e(Me,KM),e(KM,Y7e),e(Y7e,yCr),e(KM,xCr),e(KM,WJ),e(WJ,$Cr),e(KM,kCr),e(Me,SCr),e(Me,ZM),e(ZM,K7e),e(K7e,RCr),e(ZM,PCr),e(ZM,HJ),e(HJ,BCr),e(ZM,ICr),e(Me,NCr),e(Me,e4),e(e4,Z7e),e(Z7e,qCr),e(e4,jCr),e(e4,UJ),e(UJ,DCr),e(e4,GCr),e(Me,OCr),e(Me,o4),e(o4,e9e),e(e9e,VCr),e(o4,XCr),e(o4,JJ),e(JJ,zCr),e(o4,QCr),e(Me,WCr),e(Me,r4),e(r4,o9e),e(o9e,HCr),e(r4,UCr),e(r4,YJ),e(YJ,JCr),e(r4,YCr),e(Sr,KCr),M(t4,Sr,null),b(f,bze,u),b(f,pc,u),e(pc,a4),e(a4,r9e),M(lx,r9e,null),e(pc,ZCr),e(pc,t9e),e(t9e,e3r),b(f,vze,u),b(f,nr,u),M(ix,nr,null),e(nr,o3r),e(nr,_c),e(_c,r3r),e(_c,KJ),e(KJ,t3r),e(_c,a3r),e(_c,ZJ),e(ZJ,n3r),e(_c,s3r),e(nr,l3r),e(nr,dx),e(dx,i3r),e(dx,a9e),e(a9e,d3r),e(dx,c3r),e(nr,f3r),e(nr,It),M(cx,It,null),e(It,m3r),e(It,n9e),e(n9e,g3r),e(It,h3r),e(It,uc),e(uc,p3r),e(uc,s9e),e(s9e,_3r),e(uc,u3r),e(uc,eY),e(eY,b3r),e(uc,v3r),e(It,F3r),M(n4,It,null),e(nr,T3r),e(nr,Rr),M(fx,Rr,null),e(Rr,M3r),e(Rr,l9e),e(l9e,E3r),e(Rr,C3r),e(Rr,cn),e(cn,w3r),e(cn,i9e),e(i9e,A3r),e(cn,L3r),e(cn,d9e),e(d9e,y3r),e(cn,x3r),e(cn,c9e),e(c9e,$3r),e(cn,k3r),e(Rr,S3r),e(Rr,Ve),e(Ve,s4),e(s4,f9e),e(f9e,R3r),e(s4,P3r),e(s4,oY),e(oY,B3r),e(s4,I3r),e(Ve,N3r),e(Ve,l4),e(l4,m9e),e(m9e,q3r),e(l4,j3r),e(l4,rY),e(rY,D3r),e(l4,G3r),e(Ve,O3r),e(Ve,Ys),e(Ys,g9e),e(g9e,V3r),e(Ys,X3r),e(Ys,tY),e(tY,z3r),e(Ys,Q3r),e(Ys,aY),e(aY,W3r),e(Ys,H3r),e(Ve,U3r),e(Ve,i4),e(i4,h9e),e(h9e,J3r),e(i4,Y3r),e(i4,nY),e(nY,K3r),e(i4,Z3r),e(Ve,e5r),e(Ve,d4),e(d4,p9e),e(p9e,o5r),e(d4,r5r),e(d4,sY),e(sY,t5r),e(d4,a5r),e(Ve,n5r),e(Ve,c4),e(c4,_9e),e(_9e,s5r),e(c4,l5r),e(c4,lY),e(lY,i5r),e(c4,d5r),e(Ve,c5r),e(Ve,f4),e(f4,u9e),e(u9e,f5r),e(f4,m5r),e(f4,iY),e(iY,g5r),e(f4,h5r),e(Ve,p5r),e(Ve,m4),e(m4,b9e),e(b9e,_5r),e(m4,u5r),e(m4,dY),e(dY,b5r),e(m4,v5r),e(Rr,F5r),M(g4,Rr,null),b(f,Fze,u),b(f,bc,u),e(bc,h4),e(h4,v9e),M(mx,v9e,null),e(bc,T5r),e(bc,F9e),e(F9e,M5r),b(f,Tze,u),b(f,sr,u),M(gx,sr,null),e(sr,E5r),e(sr,vc),e(vc,C5r),e(vc,cY),e(cY,w5r),e(vc,A5r),e(vc,fY),e(fY,L5r),e(vc,y5r),e(sr,x5r),e(sr,hx),e(hx,$5r),e(hx,T9e),e(T9e,k5r),e(hx,S5r),e(sr,R5r),e(sr,Nt),M(px,Nt,null),e(Nt,P5r),e(Nt,M9e),e(M9e,B5r),e(Nt,I5r),e(Nt,Fc),e(Fc,N5r),e(Fc,E9e),e(E9e,q5r),e(Fc,j5r),e(Fc,mY),e(mY,D5r),e(Fc,G5r),e(Nt,O5r),M(p4,Nt,null),e(sr,V5r),e(sr,Pr),M(_x,Pr,null),e(Pr,X5r),e(Pr,C9e),e(C9e,z5r),e(Pr,Q5r),e(Pr,fn),e(fn,W5r),e(fn,w9e),e(w9e,H5r),e(fn,U5r),e(fn,A9e),e(A9e,J5r),e(fn,Y5r),e(fn,L9e),e(L9e,K5r),e(fn,Z5r),e(Pr,ewr),e(Pr,ie),e(ie,_4),e(_4,y9e),e(y9e,owr),e(_4,rwr),e(_4,gY),e(gY,twr),e(_4,awr),e(ie,nwr),e(ie,u4),e(u4,x9e),e(x9e,swr),e(u4,lwr),e(u4,hY),e(hY,iwr),e(u4,dwr),e(ie,cwr),e(ie,b4),e(b4,$9e),e($9e,fwr),e(b4,mwr),e(b4,pY),e(pY,gwr),e(b4,hwr),e(ie,pwr),e(ie,v4),e(v4,k9e),e(k9e,_wr),e(v4,uwr),e(v4,_Y),e(_Y,bwr),e(v4,vwr),e(ie,Fwr),e(ie,F4),e(F4,S9e),e(S9e,Twr),e(F4,Mwr),e(F4,uY),e(uY,Ewr),e(F4,Cwr),e(ie,wwr),e(ie,T4),e(T4,R9e),e(R9e,Awr),e(T4,Lwr),e(T4,bY),e(bY,ywr),e(T4,xwr),e(ie,$wr),e(ie,M4),e(M4,P9e),e(P9e,kwr),e(M4,Swr),e(M4,vY),e(vY,Rwr),e(M4,Pwr),e(ie,Bwr),e(ie,E4),e(E4,B9e),e(B9e,Iwr),e(E4,Nwr),e(E4,FY),e(FY,qwr),e(E4,jwr),e(ie,Dwr),e(ie,C4),e(C4,I9e),e(I9e,Gwr),e(C4,Owr),e(C4,TY),e(TY,Vwr),e(C4,Xwr),e(ie,zwr),e(ie,w4),e(w4,N9e),e(N9e,Qwr),e(w4,Wwr),e(w4,MY),e(MY,Hwr),e(w4,Uwr),e(ie,Jwr),e(ie,A4),e(A4,q9e),e(q9e,Ywr),e(A4,Kwr),e(A4,EY),e(EY,Zwr),e(A4,eAr),e(ie,oAr),e(ie,L4),e(L4,j9e),e(j9e,rAr),e(L4,tAr),e(L4,CY),e(CY,aAr),e(L4,nAr),e(ie,sAr),e(ie,y4),e(y4,D9e),e(D9e,lAr),e(y4,iAr),e(y4,wY),e(wY,dAr),e(y4,cAr),e(ie,fAr),e(ie,x4),e(x4,G9e),e(G9e,mAr),e(x4,gAr),e(x4,AY),e(AY,hAr),e(x4,pAr),e(ie,_Ar),e(ie,$4),e($4,O9e),e(O9e,uAr),e($4,bAr),e($4,LY),e(LY,vAr),e($4,FAr),e(ie,TAr),e(ie,k4),e(k4,V9e),e(V9e,MAr),e(k4,EAr),e(k4,yY),e(yY,CAr),e(k4,wAr),e(ie,AAr),e(ie,S4),e(S4,X9e),e(X9e,LAr),e(S4,yAr),e(S4,xY),e(xY,xAr),e(S4,$Ar),e(ie,kAr),e(ie,R4),e(R4,z9e),e(z9e,SAr),e(R4,RAr),e(R4,$Y),e($Y,PAr),e(R4,BAr),e(ie,IAr),e(ie,P4),e(P4,Q9e),e(Q9e,NAr),e(P4,qAr),e(P4,kY),e(kY,jAr),e(P4,DAr),e(ie,GAr),e(ie,B4),e(B4,W9e),e(W9e,OAr),e(B4,VAr),e(B4,SY),e(SY,XAr),e(B4,zAr),e(Pr,QAr),M(I4,Pr,null),b(f,Mze,u),b(f,Tc,u),e(Tc,N4),e(N4,H9e),M(ux,H9e,null),e(Tc,WAr),e(Tc,U9e),e(U9e,HAr),b(f,Eze,u),b(f,lr,u),M(bx,lr,null),e(lr,UAr),e(lr,Mc),e(Mc,JAr),e(Mc,RY),e(RY,YAr),e(Mc,KAr),e(Mc,PY),e(PY,ZAr),e(Mc,e6r),e(lr,o6r),e(lr,vx),e(vx,r6r),e(vx,J9e),e(J9e,t6r),e(vx,a6r),e(lr,n6r),e(lr,qt),M(Fx,qt,null),e(qt,s6r),e(qt,Y9e),e(Y9e,l6r),e(qt,i6r),e(qt,Ec),e(Ec,d6r),e(Ec,K9e),e(K9e,c6r),e(Ec,f6r),e(Ec,BY),e(BY,m6r),e(Ec,g6r),e(qt,h6r),M(q4,qt,null),e(lr,p6r),e(lr,Br),M(Tx,Br,null),e(Br,_6r),e(Br,Z9e),e(Z9e,u6r),e(Br,b6r),e(Br,mn),e(mn,v6r),e(mn,eMe),e(eMe,F6r),e(mn,T6r),e(mn,oMe),e(oMe,M6r),e(mn,E6r),e(mn,rMe),e(rMe,C6r),e(mn,w6r),e(Br,A6r),e(Br,ye),e(ye,j4),e(j4,tMe),e(tMe,L6r),e(j4,y6r),e(j4,IY),e(IY,x6r),e(j4,$6r),e(ye,k6r),e(ye,D4),e(D4,aMe),e(aMe,S6r),e(D4,R6r),e(D4,NY),e(NY,P6r),e(D4,B6r),e(ye,I6r),e(ye,G4),e(G4,nMe),e(nMe,N6r),e(G4,q6r),e(G4,qY),e(qY,j6r),e(G4,D6r),e(ye,G6r),e(ye,O4),e(O4,sMe),e(sMe,O6r),e(O4,V6r),e(O4,jY),e(jY,X6r),e(O4,z6r),e(ye,Q6r),e(ye,V4),e(V4,lMe),e(lMe,W6r),e(V4,H6r),e(V4,DY),e(DY,U6r),e(V4,J6r),e(ye,Y6r),e(ye,X4),e(X4,iMe),e(iMe,K6r),e(X4,Z6r),e(X4,GY),e(GY,eLr),e(X4,oLr),e(ye,rLr),e(ye,z4),e(z4,dMe),e(dMe,tLr),e(z4,aLr),e(z4,OY),e(OY,nLr),e(z4,sLr),e(ye,lLr),e(ye,Q4),e(Q4,cMe),e(cMe,iLr),e(Q4,dLr),e(Q4,VY),e(VY,cLr),e(Q4,fLr),e(ye,mLr),e(ye,W4),e(W4,fMe),e(fMe,gLr),e(W4,hLr),e(W4,XY),e(XY,pLr),e(W4,_Lr),e(ye,uLr),e(ye,H4),e(H4,mMe),e(mMe,bLr),e(H4,vLr),e(H4,zY),e(zY,FLr),e(H4,TLr),e(Br,MLr),M(U4,Br,null),b(f,Cze,u),b(f,Cc,u),e(Cc,J4),e(J4,gMe),M(Mx,gMe,null),e(Cc,ELr),e(Cc,hMe),e(hMe,CLr),b(f,wze,u),b(f,ir,u),M(Ex,ir,null),e(ir,wLr),e(ir,wc),e(wc,ALr),e(wc,QY),e(QY,LLr),e(wc,yLr),e(wc,WY),e(WY,xLr),e(wc,$Lr),e(ir,kLr),e(ir,Cx),e(Cx,SLr),e(Cx,pMe),e(pMe,RLr),e(Cx,PLr),e(ir,BLr),e(ir,jt),M(wx,jt,null),e(jt,ILr),e(jt,_Me),e(_Me,NLr),e(jt,qLr),e(jt,Ac),e(Ac,jLr),e(Ac,uMe),e(uMe,DLr),e(Ac,GLr),e(Ac,HY),e(HY,OLr),e(Ac,VLr),e(jt,XLr),M(Y4,jt,null),e(ir,zLr),e(ir,Ir),M(Ax,Ir,null),e(Ir,QLr),e(Ir,bMe),e(bMe,WLr),e(Ir,HLr),e(Ir,gn),e(gn,ULr),e(gn,vMe),e(vMe,JLr),e(gn,YLr),e(gn,FMe),e(FMe,KLr),e(gn,ZLr),e(gn,TMe),e(TMe,eyr),e(gn,oyr),e(Ir,ryr),e(Ir,te),e(te,K4),e(K4,MMe),e(MMe,tyr),e(K4,ayr),e(K4,UY),e(UY,nyr),e(K4,syr),e(te,lyr),e(te,Z4),e(Z4,EMe),e(EMe,iyr),e(Z4,dyr),e(Z4,JY),e(JY,cyr),e(Z4,fyr),e(te,myr),e(te,eE),e(eE,CMe),e(CMe,gyr),e(eE,hyr),e(eE,YY),e(YY,pyr),e(eE,_yr),e(te,uyr),e(te,oE),e(oE,wMe),e(wMe,byr),e(oE,vyr),e(oE,KY),e(KY,Fyr),e(oE,Tyr),e(te,Myr),e(te,rE),e(rE,AMe),e(AMe,Eyr),e(rE,Cyr),e(rE,ZY),e(ZY,wyr),e(rE,Ayr),e(te,Lyr),e(te,tE),e(tE,LMe),e(LMe,yyr),e(tE,xyr),e(tE,eK),e(eK,$yr),e(tE,kyr),e(te,Syr),e(te,aE),e(aE,yMe),e(yMe,Ryr),e(aE,Pyr),e(aE,oK),e(oK,Byr),e(aE,Iyr),e(te,Nyr),e(te,nE),e(nE,xMe),e(xMe,qyr),e(nE,jyr),e(nE,rK),e(rK,Dyr),e(nE,Gyr),e(te,Oyr),e(te,sE),e(sE,$Me),e($Me,Vyr),e(sE,Xyr),e(sE,tK),e(tK,zyr),e(sE,Qyr),e(te,Wyr),e(te,lE),e(lE,kMe),e(kMe,Hyr),e(lE,Uyr),e(lE,aK),e(aK,Jyr),e(lE,Yyr),e(te,Kyr),e(te,iE),e(iE,SMe),e(SMe,Zyr),e(iE,e8r),e(iE,nK),e(nK,o8r),e(iE,r8r),e(te,t8r),e(te,dE),e(dE,RMe),e(RMe,a8r),e(dE,n8r),e(dE,sK),e(sK,s8r),e(dE,l8r),e(te,i8r),e(te,cE),e(cE,PMe),e(PMe,d8r),e(cE,c8r),e(cE,lK),e(lK,f8r),e(cE,m8r),e(te,g8r),e(te,fE),e(fE,BMe),e(BMe,h8r),e(fE,p8r),e(fE,iK),e(iK,_8r),e(fE,u8r),e(te,b8r),e(te,mE),e(mE,IMe),e(IMe,v8r),e(mE,F8r),e(mE,dK),e(dK,T8r),e(mE,M8r),e(te,E8r),e(te,gE),e(gE,NMe),e(NMe,C8r),e(gE,w8r),e(gE,cK),e(cK,A8r),e(gE,L8r),e(te,y8r),e(te,hE),e(hE,qMe),e(qMe,x8r),e(hE,$8r),e(hE,fK),e(fK,k8r),e(hE,S8r),e(te,R8r),e(te,pE),e(pE,jMe),e(jMe,P8r),e(pE,B8r),e(pE,mK),e(mK,I8r),e(pE,N8r),e(te,q8r),e(te,_E),e(_E,DMe),e(DMe,j8r),e(_E,D8r),e(_E,gK),e(gK,G8r),e(_E,O8r),e(te,V8r),e(te,uE),e(uE,GMe),e(GMe,X8r),e(uE,z8r),e(uE,hK),e(hK,Q8r),e(uE,W8r),e(te,H8r),e(te,bE),e(bE,OMe),e(OMe,U8r),e(bE,J8r),e(bE,pK),e(pK,Y8r),e(bE,K8r),e(te,Z8r),e(te,vE),e(vE,VMe),e(VMe,exr),e(vE,oxr),e(vE,_K),e(_K,rxr),e(vE,txr),e(te,axr),e(te,FE),e(FE,XMe),e(XMe,nxr),e(FE,sxr),e(FE,uK),e(uK,lxr),e(FE,ixr),e(te,dxr),e(te,TE),e(TE,zMe),e(zMe,cxr),e(TE,fxr),e(TE,bK),e(bK,mxr),e(TE,gxr),e(te,hxr),e(te,ME),e(ME,QMe),e(QMe,pxr),e(ME,_xr),e(ME,vK),e(vK,uxr),e(ME,bxr),e(te,vxr),e(te,EE),e(EE,WMe),e(WMe,Fxr),e(EE,Txr),e(EE,FK),e(FK,Mxr),e(EE,Exr),e(Ir,Cxr),M(CE,Ir,null),b(f,Aze,u),b(f,Lc,u),e(Lc,wE),e(wE,HMe),M(Lx,HMe,null),e(Lc,wxr),e(Lc,UMe),e(UMe,Axr),b(f,Lze,u),b(f,dr,u),M(yx,dr,null),e(dr,Lxr),e(dr,yc),e(yc,yxr),e(yc,TK),e(TK,xxr),e(yc,$xr),e(yc,MK),e(MK,kxr),e(yc,Sxr),e(dr,Rxr),e(dr,xx),e(xx,Pxr),e(xx,JMe),e(JMe,Bxr),e(xx,Ixr),e(dr,Nxr),e(dr,Dt),M($x,Dt,null),e(Dt,qxr),e(Dt,YMe),e(YMe,jxr),e(Dt,Dxr),e(Dt,xc),e(xc,Gxr),e(xc,KMe),e(KMe,Oxr),e(xc,Vxr),e(xc,EK),e(EK,Xxr),e(xc,zxr),e(Dt,Qxr),M(AE,Dt,null),e(dr,Wxr),e(dr,Nr),M(kx,Nr,null),e(Nr,Hxr),e(Nr,ZMe),e(ZMe,Uxr),e(Nr,Jxr),e(Nr,hn),e(hn,Yxr),e(hn,e4e),e(e4e,Kxr),e(hn,Zxr),e(hn,o4e),e(o4e,e$r),e(hn,o$r),e(hn,r4e),e(r4e,r$r),e(hn,t$r),e(Nr,a$r),e(Nr,_e),e(_e,LE),e(LE,t4e),e(t4e,n$r),e(LE,s$r),e(LE,CK),e(CK,l$r),e(LE,i$r),e(_e,d$r),e(_e,yE),e(yE,a4e),e(a4e,c$r),e(yE,f$r),e(yE,wK),e(wK,m$r),e(yE,g$r),e(_e,h$r),e(_e,xE),e(xE,n4e),e(n4e,p$r),e(xE,_$r),e(xE,AK),e(AK,u$r),e(xE,b$r),e(_e,v$r),e(_e,$E),e($E,s4e),e(s4e,F$r),e($E,T$r),e($E,LK),e(LK,M$r),e($E,E$r),e(_e,C$r),e(_e,kE),e(kE,l4e),e(l4e,w$r),e(kE,A$r),e(kE,yK),e(yK,L$r),e(kE,y$r),e(_e,x$r),e(_e,SE),e(SE,i4e),e(i4e,$$r),e(SE,k$r),e(SE,xK),e(xK,S$r),e(SE,R$r),e(_e,P$r),e(_e,RE),e(RE,d4e),e(d4e,B$r),e(RE,I$r),e(RE,$K),e($K,N$r),e(RE,q$r),e(_e,j$r),e(_e,PE),e(PE,c4e),e(c4e,D$r),e(PE,G$r),e(PE,kK),e(kK,O$r),e(PE,V$r),e(_e,X$r),e(_e,BE),e(BE,f4e),e(f4e,z$r),e(BE,Q$r),e(BE,SK),e(SK,W$r),e(BE,H$r),e(_e,U$r),e(_e,IE),e(IE,m4e),e(m4e,J$r),e(IE,Y$r),e(IE,RK),e(RK,K$r),e(IE,Z$r),e(_e,ekr),e(_e,NE),e(NE,g4e),e(g4e,okr),e(NE,rkr),e(NE,PK),e(PK,tkr),e(NE,akr),e(_e,nkr),e(_e,qE),e(qE,h4e),e(h4e,skr),e(qE,lkr),e(qE,BK),e(BK,ikr),e(qE,dkr),e(_e,ckr),e(_e,jE),e(jE,p4e),e(p4e,fkr),e(jE,mkr),e(jE,IK),e(IK,gkr),e(jE,hkr),e(_e,pkr),e(_e,DE),e(DE,_4e),e(_4e,_kr),e(DE,ukr),e(DE,NK),e(NK,bkr),e(DE,vkr),e(_e,Fkr),e(_e,GE),e(GE,u4e),e(u4e,Tkr),e(GE,Mkr),e(GE,qK),e(qK,Ekr),e(GE,Ckr),e(_e,wkr),e(_e,OE),e(OE,b4e),e(b4e,Akr),e(OE,Lkr),e(OE,jK),e(jK,ykr),e(OE,xkr),e(_e,$kr),e(_e,VE),e(VE,v4e),e(v4e,kkr),e(VE,Skr),e(VE,DK),e(DK,Rkr),e(VE,Pkr),e(Nr,Bkr),M(XE,Nr,null),b(f,yze,u),b(f,$c,u),e($c,zE),e(zE,F4e),M(Sx,F4e,null),e($c,Ikr),e($c,T4e),e(T4e,Nkr),b(f,xze,u),b(f,cr,u),M(Rx,cr,null),e(cr,qkr),e(cr,kc),e(kc,jkr),e(kc,GK),e(GK,Dkr),e(kc,Gkr),e(kc,OK),e(OK,Okr),e(kc,Vkr),e(cr,Xkr),e(cr,Px),e(Px,zkr),e(Px,M4e),e(M4e,Qkr),e(Px,Wkr),e(cr,Hkr),e(cr,Gt),M(Bx,Gt,null),e(Gt,Ukr),e(Gt,E4e),e(E4e,Jkr),e(Gt,Ykr),e(Gt,Sc),e(Sc,Kkr),e(Sc,C4e),e(C4e,Zkr),e(Sc,eSr),e(Sc,VK),e(VK,oSr),e(Sc,rSr),e(Gt,tSr),M(QE,Gt,null),e(cr,aSr),e(cr,qr),M(Ix,qr,null),e(qr,nSr),e(qr,w4e),e(w4e,sSr),e(qr,lSr),e(qr,pn),e(pn,iSr),e(pn,A4e),e(A4e,dSr),e(pn,cSr),e(pn,L4e),e(L4e,fSr),e(pn,mSr),e(pn,y4e),e(y4e,gSr),e(pn,hSr),e(qr,pSr),e(qr,Nx),e(Nx,WE),e(WE,x4e),e(x4e,_Sr),e(WE,uSr),e(WE,XK),e(XK,bSr),e(WE,vSr),e(Nx,FSr),e(Nx,HE),e(HE,$4e),e($4e,TSr),e(HE,MSr),e(HE,zK),e(zK,ESr),e(HE,CSr),e(qr,wSr),M(UE,qr,null),b(f,$ze,u),b(f,Rc,u),e(Rc,JE),e(JE,k4e),M(qx,k4e,null),e(Rc,ASr),e(Rc,S4e),e(S4e,LSr),b(f,kze,u),b(f,fr,u),M(jx,fr,null),e(fr,ySr),e(fr,Pc),e(Pc,xSr),e(Pc,QK),e(QK,$Sr),e(Pc,kSr),e(Pc,WK),e(WK,SSr),e(Pc,RSr),e(fr,PSr),e(fr,Dx),e(Dx,BSr),e(Dx,R4e),e(R4e,ISr),e(Dx,NSr),e(fr,qSr),e(fr,Ot),M(Gx,Ot,null),e(Ot,jSr),e(Ot,P4e),e(P4e,DSr),e(Ot,GSr),e(Ot,Bc),e(Bc,OSr),e(Bc,B4e),e(B4e,VSr),e(Bc,XSr),e(Bc,HK),e(HK,zSr),e(Bc,QSr),e(Ot,WSr),M(YE,Ot,null),e(fr,HSr),e(fr,jr),M(Ox,jr,null),e(jr,USr),e(jr,I4e),e(I4e,JSr),e(jr,YSr),e(jr,_n),e(_n,KSr),e(_n,N4e),e(N4e,ZSr),e(_n,eRr),e(_n,q4e),e(q4e,oRr),e(_n,rRr),e(_n,j4e),e(j4e,tRr),e(_n,aRr),e(jr,nRr),e(jr,D4e),e(D4e,KE),e(KE,G4e),e(G4e,sRr),e(KE,lRr),e(KE,UK),e(UK,iRr),e(KE,dRr),e(jr,cRr),M(ZE,jr,null),b(f,Sze,u),b(f,Ic,u),e(Ic,eC),e(eC,O4e),M(Vx,O4e,null),e(Ic,fRr),e(Ic,V4e),e(V4e,mRr),b(f,Rze,u),b(f,mr,u),M(Xx,mr,null),e(mr,gRr),e(mr,Nc),e(Nc,hRr),e(Nc,JK),e(JK,pRr),e(Nc,_Rr),e(Nc,YK),e(YK,uRr),e(Nc,bRr),e(mr,vRr),e(mr,zx),e(zx,FRr),e(zx,X4e),e(X4e,TRr),e(zx,MRr),e(mr,ERr),e(mr,Vt),M(Qx,Vt,null),e(Vt,CRr),e(Vt,z4e),e(z4e,wRr),e(Vt,ARr),e(Vt,qc),e(qc,LRr),e(qc,Q4e),e(Q4e,yRr),e(qc,xRr),e(qc,KK),e(KK,$Rr),e(qc,kRr),e(Vt,SRr),M(oC,Vt,null),e(mr,RRr),e(mr,Dr),M(Wx,Dr,null),e(Dr,PRr),e(Dr,W4e),e(W4e,BRr),e(Dr,IRr),e(Dr,un),e(un,NRr),e(un,H4e),e(H4e,qRr),e(un,jRr),e(un,U4e),e(U4e,DRr),e(un,GRr),e(un,J4e),e(J4e,ORr),e(un,VRr),e(Dr,XRr),e(Dr,de),e(de,rC),e(rC,Y4e),e(Y4e,zRr),e(rC,QRr),e(rC,ZK),e(ZK,WRr),e(rC,HRr),e(de,URr),e(de,tC),e(tC,K4e),e(K4e,JRr),e(tC,YRr),e(tC,eZ),e(eZ,KRr),e(tC,ZRr),e(de,ePr),e(de,aC),e(aC,Z4e),e(Z4e,oPr),e(aC,rPr),e(aC,oZ),e(oZ,tPr),e(aC,aPr),e(de,nPr),e(de,nC),e(nC,eEe),e(eEe,sPr),e(nC,lPr),e(nC,rZ),e(rZ,iPr),e(nC,dPr),e(de,cPr),e(de,sC),e(sC,oEe),e(oEe,fPr),e(sC,mPr),e(sC,tZ),e(tZ,gPr),e(sC,hPr),e(de,pPr),e(de,lC),e(lC,rEe),e(rEe,_Pr),e(lC,uPr),e(lC,aZ),e(aZ,bPr),e(lC,vPr),e(de,FPr),e(de,iC),e(iC,tEe),e(tEe,TPr),e(iC,MPr),e(iC,nZ),e(nZ,EPr),e(iC,CPr),e(de,wPr),e(de,dC),e(dC,aEe),e(aEe,APr),e(dC,LPr),e(dC,sZ),e(sZ,yPr),e(dC,xPr),e(de,$Pr),e(de,cC),e(cC,nEe),e(nEe,kPr),e(cC,SPr),e(cC,lZ),e(lZ,RPr),e(cC,PPr),e(de,BPr),e(de,fC),e(fC,sEe),e(sEe,IPr),e(fC,NPr),e(fC,iZ),e(iZ,qPr),e(fC,jPr),e(de,DPr),e(de,mC),e(mC,lEe),e(lEe,GPr),e(mC,OPr),e(mC,dZ),e(dZ,VPr),e(mC,XPr),e(de,zPr),e(de,gC),e(gC,iEe),e(iEe,QPr),e(gC,WPr),e(gC,cZ),e(cZ,HPr),e(gC,UPr),e(de,JPr),e(de,hC),e(hC,dEe),e(dEe,YPr),e(hC,KPr),e(hC,fZ),e(fZ,ZPr),e(hC,eBr),e(de,oBr),e(de,pC),e(pC,cEe),e(cEe,rBr),e(pC,tBr),e(pC,mZ),e(mZ,aBr),e(pC,nBr),e(de,sBr),e(de,_C),e(_C,fEe),e(fEe,lBr),e(_C,iBr),e(_C,gZ),e(gZ,dBr),e(_C,cBr),e(de,fBr),e(de,uC),e(uC,mEe),e(mEe,mBr),e(uC,gBr),e(uC,hZ),e(hZ,hBr),e(uC,pBr),e(de,_Br),e(de,bC),e(bC,gEe),e(gEe,uBr),e(bC,bBr),e(bC,pZ),e(pZ,vBr),e(bC,FBr),e(de,TBr),e(de,vC),e(vC,hEe),e(hEe,MBr),e(vC,EBr),e(vC,_Z),e(_Z,CBr),e(vC,wBr),e(de,ABr),e(de,FC),e(FC,pEe),e(pEe,LBr),e(FC,yBr),e(FC,uZ),e(uZ,xBr),e(FC,$Br),e(de,kBr),e(de,TC),e(TC,_Ee),e(_Ee,SBr),e(TC,RBr),e(TC,bZ),e(bZ,PBr),e(TC,BBr),e(Dr,IBr),M(MC,Dr,null),b(f,Pze,u),b(f,jc,u),e(jc,EC),e(EC,uEe),M(Hx,uEe,null),e(jc,NBr),e(jc,bEe),e(bEe,qBr),b(f,Bze,u),b(f,gr,u),M(Ux,gr,null),e(gr,jBr),e(gr,Dc),e(Dc,DBr),e(Dc,vZ),e(vZ,GBr),e(Dc,OBr),e(Dc,FZ),e(FZ,VBr),e(Dc,XBr),e(gr,zBr),e(gr,Jx),e(Jx,QBr),e(Jx,vEe),e(vEe,WBr),e(Jx,HBr),e(gr,UBr),e(gr,Xt),M(Yx,Xt,null),e(Xt,JBr),e(Xt,FEe),e(FEe,YBr),e(Xt,KBr),e(Xt,Gc),e(Gc,ZBr),e(Gc,TEe),e(TEe,eIr),e(Gc,oIr),e(Gc,TZ),e(TZ,rIr),e(Gc,tIr),e(Xt,aIr),M(CC,Xt,null),e(gr,nIr),e(gr,Gr),M(Kx,Gr,null),e(Gr,sIr),e(Gr,MEe),e(MEe,lIr),e(Gr,iIr),e(Gr,bn),e(bn,dIr),e(bn,EEe),e(EEe,cIr),e(bn,fIr),e(bn,CEe),e(CEe,mIr),e(bn,gIr),e(bn,wEe),e(wEe,hIr),e(bn,pIr),e(Gr,_Ir),e(Gr,ce),e(ce,wC),e(wC,AEe),e(AEe,uIr),e(wC,bIr),e(wC,MZ),e(MZ,vIr),e(wC,FIr),e(ce,TIr),e(ce,AC),e(AC,LEe),e(LEe,MIr),e(AC,EIr),e(AC,EZ),e(EZ,CIr),e(AC,wIr),e(ce,AIr),e(ce,LC),e(LC,yEe),e(yEe,LIr),e(LC,yIr),e(LC,CZ),e(CZ,xIr),e(LC,$Ir),e(ce,kIr),e(ce,yC),e(yC,xEe),e(xEe,SIr),e(yC,RIr),e(yC,wZ),e(wZ,PIr),e(yC,BIr),e(ce,IIr),e(ce,xC),e(xC,$Ee),e($Ee,NIr),e(xC,qIr),e(xC,AZ),e(AZ,jIr),e(xC,DIr),e(ce,GIr),e(ce,$C),e($C,kEe),e(kEe,OIr),e($C,VIr),e($C,LZ),e(LZ,XIr),e($C,zIr),e(ce,QIr),e(ce,kC),e(kC,SEe),e(SEe,WIr),e(kC,HIr),e(kC,yZ),e(yZ,UIr),e(kC,JIr),e(ce,YIr),e(ce,SC),e(SC,REe),e(REe,KIr),e(SC,ZIr),e(SC,xZ),e(xZ,eNr),e(SC,oNr),e(ce,rNr),e(ce,RC),e(RC,PEe),e(PEe,tNr),e(RC,aNr),e(RC,$Z),e($Z,nNr),e(RC,sNr),e(ce,lNr),e(ce,PC),e(PC,BEe),e(BEe,iNr),e(PC,dNr),e(PC,kZ),e(kZ,cNr),e(PC,fNr),e(ce,mNr),e(ce,BC),e(BC,IEe),e(IEe,gNr),e(BC,hNr),e(BC,SZ),e(SZ,pNr),e(BC,_Nr),e(ce,uNr),e(ce,IC),e(IC,NEe),e(NEe,bNr),e(IC,vNr),e(IC,RZ),e(RZ,FNr),e(IC,TNr),e(ce,MNr),e(ce,NC),e(NC,qEe),e(qEe,ENr),e(NC,CNr),e(NC,PZ),e(PZ,wNr),e(NC,ANr),e(ce,LNr),e(ce,qC),e(qC,jEe),e(jEe,yNr),e(qC,xNr),e(qC,BZ),e(BZ,$Nr),e(qC,kNr),e(ce,SNr),e(ce,jC),e(jC,DEe),e(DEe,RNr),e(jC,PNr),e(jC,IZ),e(IZ,BNr),e(jC,INr),e(ce,NNr),e(ce,DC),e(DC,GEe),e(GEe,qNr),e(DC,jNr),e(DC,NZ),e(NZ,DNr),e(DC,GNr),e(ce,ONr),e(ce,GC),e(GC,OEe),e(OEe,VNr),e(GC,XNr),e(GC,qZ),e(qZ,zNr),e(GC,QNr),e(ce,WNr),e(ce,OC),e(OC,VEe),e(VEe,HNr),e(OC,UNr),e(OC,jZ),e(jZ,JNr),e(OC,YNr),e(ce,KNr),e(ce,VC),e(VC,XEe),e(XEe,ZNr),e(VC,eqr),e(VC,DZ),e(DZ,oqr),e(VC,rqr),e(ce,tqr),e(ce,XC),e(XC,zEe),e(zEe,aqr),e(XC,nqr),e(XC,GZ),e(GZ,sqr),e(XC,lqr),e(Gr,iqr),M(zC,Gr,null),b(f,Ize,u),b(f,Oc,u),e(Oc,QC),e(QC,QEe),M(Zx,QEe,null),e(Oc,dqr),e(Oc,WEe),e(WEe,cqr),b(f,Nze,u),b(f,hr,u),M(e$,hr,null),e(hr,fqr),e(hr,Vc),e(Vc,mqr),e(Vc,OZ),e(OZ,gqr),e(Vc,hqr),e(Vc,VZ),e(VZ,pqr),e(Vc,_qr),e(hr,uqr),e(hr,o$),e(o$,bqr),e(o$,HEe),e(HEe,vqr),e(o$,Fqr),e(hr,Tqr),e(hr,zt),M(r$,zt,null),e(zt,Mqr),e(zt,UEe),e(UEe,Eqr),e(zt,Cqr),e(zt,Xc),e(Xc,wqr),e(Xc,JEe),e(JEe,Aqr),e(Xc,Lqr),e(Xc,XZ),e(XZ,yqr),e(Xc,xqr),e(zt,$qr),M(WC,zt,null),e(hr,kqr),e(hr,Or),M(t$,Or,null),e(Or,Sqr),e(Or,YEe),e(YEe,Rqr),e(Or,Pqr),e(Or,vn),e(vn,Bqr),e(vn,KEe),e(KEe,Iqr),e(vn,Nqr),e(vn,ZEe),e(ZEe,qqr),e(vn,jqr),e(vn,eCe),e(eCe,Dqr),e(vn,Gqr),e(Or,Oqr),e(Or,oCe),e(oCe,HC),e(HC,rCe),e(rCe,Vqr),e(HC,Xqr),e(HC,zZ),e(zZ,zqr),e(HC,Qqr),e(Or,Wqr),M(UC,Or,null),b(f,qze,u),b(f,zc,u),e(zc,JC),e(JC,tCe),M(a$,tCe,null),e(zc,Hqr),e(zc,aCe),e(aCe,Uqr),b(f,jze,u),b(f,pr,u),M(n$,pr,null),e(pr,Jqr),e(pr,Qc),e(Qc,Yqr),e(Qc,QZ),e(QZ,Kqr),e(Qc,Zqr),e(Qc,WZ),e(WZ,ejr),e(Qc,ojr),e(pr,rjr),e(pr,s$),e(s$,tjr),e(s$,nCe),e(nCe,ajr),e(s$,njr),e(pr,sjr),e(pr,Qt),M(l$,Qt,null),e(Qt,ljr),e(Qt,sCe),e(sCe,ijr),e(Qt,djr),e(Qt,Wc),e(Wc,cjr),e(Wc,lCe),e(lCe,fjr),e(Wc,mjr),e(Wc,HZ),e(HZ,gjr),e(Wc,hjr),e(Qt,pjr),M(YC,Qt,null),e(pr,_jr),e(pr,Vr),M(i$,Vr,null),e(Vr,ujr),e(Vr,iCe),e(iCe,bjr),e(Vr,vjr),e(Vr,Fn),e(Fn,Fjr),e(Fn,dCe),e(dCe,Tjr),e(Fn,Mjr),e(Fn,cCe),e(cCe,Ejr),e(Fn,Cjr),e(Fn,fCe),e(fCe,wjr),e(Fn,Ajr),e(Vr,Ljr),e(Vr,mCe),e(mCe,KC),e(KC,gCe),e(gCe,yjr),e(KC,xjr),e(KC,UZ),e(UZ,$jr),e(KC,kjr),e(Vr,Sjr),M(ZC,Vr,null),b(f,Dze,u),b(f,Hc,u),e(Hc,e3),e(e3,hCe),M(d$,hCe,null),e(Hc,Rjr),e(Hc,pCe),e(pCe,Pjr),b(f,Gze,u),b(f,_r,u),M(c$,_r,null),e(_r,Bjr),e(_r,Uc),e(Uc,Ijr),e(Uc,JZ),e(JZ,Njr),e(Uc,qjr),e(Uc,YZ),e(YZ,jjr),e(Uc,Djr),e(_r,Gjr),e(_r,f$),e(f$,Ojr),e(f$,_Ce),e(_Ce,Vjr),e(f$,Xjr),e(_r,zjr),e(_r,Wt),M(m$,Wt,null),e(Wt,Qjr),e(Wt,uCe),e(uCe,Wjr),e(Wt,Hjr),e(Wt,Jc),e(Jc,Ujr),e(Jc,bCe),e(bCe,Jjr),e(Jc,Yjr),e(Jc,KZ),e(KZ,Kjr),e(Jc,Zjr),e(Wt,eDr),M(o3,Wt,null),e(_r,oDr),e(_r,Xr),M(g$,Xr,null),e(Xr,rDr),e(Xr,vCe),e(vCe,tDr),e(Xr,aDr),e(Xr,Tn),e(Tn,nDr),e(Tn,FCe),e(FCe,sDr),e(Tn,lDr),e(Tn,TCe),e(TCe,iDr),e(Tn,dDr),e(Tn,MCe),e(MCe,cDr),e(Tn,fDr),e(Xr,mDr),e(Xr,oe),e(oe,r3),e(r3,ECe),e(ECe,gDr),e(r3,hDr),e(r3,ZZ),e(ZZ,pDr),e(r3,_Dr),e(oe,uDr),e(oe,t3),e(t3,CCe),e(CCe,bDr),e(t3,vDr),e(t3,eee),e(eee,FDr),e(t3,TDr),e(oe,MDr),e(oe,a3),e(a3,wCe),e(wCe,EDr),e(a3,CDr),e(a3,oee),e(oee,wDr),e(a3,ADr),e(oe,LDr),e(oe,n3),e(n3,ACe),e(ACe,yDr),e(n3,xDr),e(n3,ree),e(ree,$Dr),e(n3,kDr),e(oe,SDr),e(oe,s3),e(s3,LCe),e(LCe,RDr),e(s3,PDr),e(s3,tee),e(tee,BDr),e(s3,IDr),e(oe,NDr),e(oe,l3),e(l3,yCe),e(yCe,qDr),e(l3,jDr),e(l3,aee),e(aee,DDr),e(l3,GDr),e(oe,ODr),e(oe,i3),e(i3,xCe),e(xCe,VDr),e(i3,XDr),e(i3,nee),e(nee,zDr),e(i3,QDr),e(oe,WDr),e(oe,d3),e(d3,$Ce),e($Ce,HDr),e(d3,UDr),e(d3,see),e(see,JDr),e(d3,YDr),e(oe,KDr),e(oe,c3),e(c3,kCe),e(kCe,ZDr),e(c3,eGr),e(c3,lee),e(lee,oGr),e(c3,rGr),e(oe,tGr),e(oe,f3),e(f3,SCe),e(SCe,aGr),e(f3,nGr),e(f3,iee),e(iee,sGr),e(f3,lGr),e(oe,iGr),e(oe,m3),e(m3,RCe),e(RCe,dGr),e(m3,cGr),e(m3,dee),e(dee,fGr),e(m3,mGr),e(oe,gGr),e(oe,g3),e(g3,PCe),e(PCe,hGr),e(g3,pGr),e(g3,cee),e(cee,_Gr),e(g3,uGr),e(oe,bGr),e(oe,h3),e(h3,BCe),e(BCe,vGr),e(h3,FGr),e(h3,fee),e(fee,TGr),e(h3,MGr),e(oe,EGr),e(oe,p3),e(p3,ICe),e(ICe,CGr),e(p3,wGr),e(p3,mee),e(mee,AGr),e(p3,LGr),e(oe,yGr),e(oe,_3),e(_3,NCe),e(NCe,xGr),e(_3,$Gr),e(_3,gee),e(gee,kGr),e(_3,SGr),e(oe,RGr),e(oe,u3),e(u3,qCe),e(qCe,PGr),e(u3,BGr),e(u3,hee),e(hee,IGr),e(u3,NGr),e(oe,qGr),e(oe,b3),e(b3,jCe),e(jCe,jGr),e(b3,DGr),e(b3,pee),e(pee,GGr),e(b3,OGr),e(oe,VGr),e(oe,v3),e(v3,DCe),e(DCe,XGr),e(v3,zGr),e(v3,_ee),e(_ee,QGr),e(v3,WGr),e(oe,HGr),e(oe,F3),e(F3,GCe),e(GCe,UGr),e(F3,JGr),e(F3,uee),e(uee,YGr),e(F3,KGr),e(oe,ZGr),e(oe,T3),e(T3,OCe),e(OCe,eOr),e(T3,oOr),e(T3,bee),e(bee,rOr),e(T3,tOr),e(oe,aOr),e(oe,M3),e(M3,VCe),e(VCe,nOr),e(M3,sOr),e(M3,vee),e(vee,lOr),e(M3,iOr),e(oe,dOr),e(oe,E3),e(E3,XCe),e(XCe,cOr),e(E3,fOr),e(E3,Fee),e(Fee,mOr),e(E3,gOr),e(oe,hOr),e(oe,C3),e(C3,zCe),e(zCe,pOr),e(C3,_Or),e(C3,Tee),e(Tee,uOr),e(C3,bOr),e(oe,vOr),e(oe,w3),e(w3,QCe),e(QCe,FOr),e(w3,TOr),e(w3,Mee),e(Mee,MOr),e(w3,EOr),e(oe,COr),e(oe,A3),e(A3,WCe),e(WCe,wOr),e(A3,AOr),e(A3,Eee),e(Eee,LOr),e(A3,yOr),e(oe,xOr),e(oe,L3),e(L3,HCe),e(HCe,$Or),e(L3,kOr),e(L3,Cee),e(Cee,SOr),e(L3,ROr),e(oe,POr),e(oe,y3),e(y3,UCe),e(UCe,BOr),e(y3,IOr),e(y3,wee),e(wee,NOr),e(y3,qOr),e(Xr,jOr),M(x3,Xr,null),b(f,Oze,u),b(f,Yc,u),e(Yc,$3),e($3,JCe),M(h$,JCe,null),e(Yc,DOr),e(Yc,YCe),e(YCe,GOr),b(f,Vze,u),b(f,ur,u),M(p$,ur,null),e(ur,OOr),e(ur,Kc),e(Kc,VOr),e(Kc,Aee),e(Aee,XOr),e(Kc,zOr),e(Kc,Lee),e(Lee,QOr),e(Kc,WOr),e(ur,HOr),e(ur,_$),e(_$,UOr),e(_$,KCe),e(KCe,JOr),e(_$,YOr),e(ur,KOr),e(ur,Ht),M(u$,Ht,null),e(Ht,ZOr),e(Ht,ZCe),e(ZCe,eVr),e(Ht,oVr),e(Ht,Zc),e(Zc,rVr),e(Zc,e3e),e(e3e,tVr),e(Zc,aVr),e(Zc,yee),e(yee,nVr),e(Zc,sVr),e(Ht,lVr),M(k3,Ht,null),e(ur,iVr),e(ur,zr),M(b$,zr,null),e(zr,dVr),e(zr,o3e),e(o3e,cVr),e(zr,fVr),e(zr,Mn),e(Mn,mVr),e(Mn,r3e),e(r3e,gVr),e(Mn,hVr),e(Mn,t3e),e(t3e,pVr),e(Mn,_Vr),e(Mn,a3e),e(a3e,uVr),e(Mn,bVr),e(zr,vVr),e(zr,xe),e(xe,S3),e(S3,n3e),e(n3e,FVr),e(S3,TVr),e(S3,xee),e(xee,MVr),e(S3,EVr),e(xe,CVr),e(xe,R3),e(R3,s3e),e(s3e,wVr),e(R3,AVr),e(R3,$ee),e($ee,LVr),e(R3,yVr),e(xe,xVr),e(xe,P3),e(P3,l3e),e(l3e,$Vr),e(P3,kVr),e(P3,kee),e(kee,SVr),e(P3,RVr),e(xe,PVr),e(xe,B3),e(B3,i3e),e(i3e,BVr),e(B3,IVr),e(B3,See),e(See,NVr),e(B3,qVr),e(xe,jVr),e(xe,I3),e(I3,d3e),e(d3e,DVr),e(I3,GVr),e(I3,Ree),e(Ree,OVr),e(I3,VVr),e(xe,XVr),e(xe,N3),e(N3,c3e),e(c3e,zVr),e(N3,QVr),e(N3,Pee),e(Pee,WVr),e(N3,HVr),e(xe,UVr),e(xe,q3),e(q3,f3e),e(f3e,JVr),e(q3,YVr),e(q3,Bee),e(Bee,KVr),e(q3,ZVr),e(xe,eXr),e(xe,j3),e(j3,m3e),e(m3e,oXr),e(j3,rXr),e(j3,Iee),e(Iee,tXr),e(j3,aXr),e(xe,nXr),e(xe,D3),e(D3,g3e),e(g3e,sXr),e(D3,lXr),e(D3,Nee),e(Nee,iXr),e(D3,dXr),e(xe,cXr),e(xe,G3),e(G3,h3e),e(h3e,fXr),e(G3,mXr),e(G3,qee),e(qee,gXr),e(G3,hXr),e(zr,pXr),M(O3,zr,null),b(f,Xze,u),b(f,ef,u),e(ef,V3),e(V3,p3e),M(v$,p3e,null),e(ef,_Xr),e(ef,_3e),e(_3e,uXr),b(f,zze,u),b(f,br,u),M(F$,br,null),e(br,bXr),e(br,of),e(of,vXr),e(of,jee),e(jee,FXr),e(of,TXr),e(of,Dee),e(Dee,MXr),e(of,EXr),e(br,CXr),e(br,T$),e(T$,wXr),e(T$,u3e),e(u3e,AXr),e(T$,LXr),e(br,yXr),e(br,Ut),M(M$,Ut,null),e(Ut,xXr),e(Ut,b3e),e(b3e,$Xr),e(Ut,kXr),e(Ut,rf),e(rf,SXr),e(rf,v3e),e(v3e,RXr),e(rf,PXr),e(rf,Gee),e(Gee,BXr),e(rf,IXr),e(Ut,NXr),M(X3,Ut,null),e(br,qXr),e(br,Qr),M(E$,Qr,null),e(Qr,jXr),e(Qr,F3e),e(F3e,DXr),e(Qr,GXr),e(Qr,En),e(En,OXr),e(En,T3e),e(T3e,VXr),e(En,XXr),e(En,M3e),e(M3e,zXr),e(En,QXr),e(En,E3e),e(E3e,WXr),e(En,HXr),e(Qr,UXr),e(Qr,Ee),e(Ee,z3),e(z3,C3e),e(C3e,JXr),e(z3,YXr),e(z3,Oee),e(Oee,KXr),e(z3,ZXr),e(Ee,ezr),e(Ee,Q3),e(Q3,w3e),e(w3e,ozr),e(Q3,rzr),e(Q3,Vee),e(Vee,tzr),e(Q3,azr),e(Ee,nzr),e(Ee,W3),e(W3,A3e),e(A3e,szr),e(W3,lzr),e(W3,Xee),e(Xee,izr),e(W3,dzr),e(Ee,czr),e(Ee,H3),e(H3,L3e),e(L3e,fzr),e(H3,mzr),e(H3,zee),e(zee,gzr),e(H3,hzr),e(Ee,pzr),e(Ee,U3),e(U3,y3e),e(y3e,_zr),e(U3,uzr),e(U3,Qee),e(Qee,bzr),e(U3,vzr),e(Ee,Fzr),e(Ee,J3),e(J3,x3e),e(x3e,Tzr),e(J3,Mzr),e(J3,Wee),e(Wee,Ezr),e(J3,Czr),e(Ee,wzr),e(Ee,Y3),e(Y3,$3e),e($3e,Azr),e(Y3,Lzr),e(Y3,Hee),e(Hee,yzr),e(Y3,xzr),e(Ee,$zr),e(Ee,K3),e(K3,k3e),e(k3e,kzr),e(K3,Szr),e(K3,Uee),e(Uee,Rzr),e(K3,Pzr),e(Ee,Bzr),e(Ee,Z3),e(Z3,S3e),e(S3e,Izr),e(Z3,Nzr),e(Z3,Jee),e(Jee,qzr),e(Z3,jzr),e(Ee,Dzr),e(Ee,e5),e(e5,R3e),e(R3e,Gzr),e(e5,Ozr),e(e5,Yee),e(Yee,Vzr),e(e5,Xzr),e(Ee,zzr),e(Ee,o5),e(o5,P3e),e(P3e,Qzr),e(o5,Wzr),e(o5,Kee),e(Kee,Hzr),e(o5,Uzr),e(Ee,Jzr),e(Ee,r5),e(r5,B3e),e(B3e,Yzr),e(r5,Kzr),e(r5,Zee),e(Zee,Zzr),e(r5,eQr),e(Ee,oQr),e(Ee,t5),e(t5,I3e),e(I3e,rQr),e(t5,tQr),e(t5,eoe),e(eoe,aQr),e(t5,nQr),e(Qr,sQr),M(a5,Qr,null),b(f,Qze,u),b(f,tf,u),e(tf,n5),e(n5,N3e),M(C$,N3e,null),e(tf,lQr),e(tf,q3e),e(q3e,iQr),b(f,Wze,u),b(f,vr,u),M(w$,vr,null),e(vr,dQr),e(vr,af),e(af,cQr),e(af,ooe),e(ooe,fQr),e(af,mQr),e(af,roe),e(roe,gQr),e(af,hQr),e(vr,pQr),e(vr,A$),e(A$,_Qr),e(A$,j3e),e(j3e,uQr),e(A$,bQr),e(vr,vQr),e(vr,Jt),M(L$,Jt,null),e(Jt,FQr),e(Jt,D3e),e(D3e,TQr),e(Jt,MQr),e(Jt,nf),e(nf,EQr),e(nf,G3e),e(G3e,CQr),e(nf,wQr),e(nf,toe),e(toe,AQr),e(nf,LQr),e(Jt,yQr),M(s5,Jt,null),e(vr,xQr),e(vr,Wr),M(y$,Wr,null),e(Wr,$Qr),e(Wr,O3e),e(O3e,kQr),e(Wr,SQr),e(Wr,Cn),e(Cn,RQr),e(Cn,V3e),e(V3e,PQr),e(Cn,BQr),e(Cn,X3e),e(X3e,IQr),e(Cn,NQr),e(Cn,z3e),e(z3e,qQr),e(Cn,jQr),e(Wr,DQr),e(Wr,$e),e($e,l5),e(l5,Q3e),e(Q3e,GQr),e(l5,OQr),e(l5,aoe),e(aoe,VQr),e(l5,XQr),e($e,zQr),e($e,i5),e(i5,W3e),e(W3e,QQr),e(i5,WQr),e(i5,noe),e(noe,HQr),e(i5,UQr),e($e,JQr),e($e,d5),e(d5,H3e),e(H3e,YQr),e(d5,KQr),e(d5,soe),e(soe,ZQr),e(d5,eWr),e($e,oWr),e($e,c5),e(c5,U3e),e(U3e,rWr),e(c5,tWr),e(c5,loe),e(loe,aWr),e(c5,nWr),e($e,sWr),e($e,f5),e(f5,J3e),e(J3e,lWr),e(f5,iWr),e(f5,ioe),e(ioe,dWr),e(f5,cWr),e($e,fWr),e($e,m5),e(m5,Y3e),e(Y3e,mWr),e(m5,gWr),e(m5,doe),e(doe,hWr),e(m5,pWr),e($e,_Wr),e($e,g5),e(g5,K3e),e(K3e,uWr),e(g5,bWr),e(g5,coe),e(coe,vWr),e(g5,FWr),e($e,TWr),e($e,h5),e(h5,Z3e),e(Z3e,MWr),e(h5,EWr),e(h5,foe),e(foe,CWr),e(h5,wWr),e($e,AWr),e($e,p5),e(p5,e5e),e(e5e,LWr),e(p5,yWr),e(p5,moe),e(moe,xWr),e(p5,$Wr),e($e,kWr),e($e,_5),e(_5,o5e),e(o5e,SWr),e(_5,RWr),e(_5,goe),e(goe,PWr),e(_5,BWr),e(Wr,IWr),M(u5,Wr,null),b(f,Hze,u),b(f,sf,u),e(sf,b5),e(b5,r5e),M(x$,r5e,null),e(sf,NWr),e(sf,t5e),e(t5e,qWr),b(f,Uze,u),b(f,Fr,u),M($$,Fr,null),e(Fr,jWr),e(Fr,lf),e(lf,DWr),e(lf,hoe),e(hoe,GWr),e(lf,OWr),e(lf,poe),e(poe,VWr),e(lf,XWr),e(Fr,zWr),e(Fr,k$),e(k$,QWr),e(k$,a5e),e(a5e,WWr),e(k$,HWr),e(Fr,UWr),e(Fr,Yt),M(S$,Yt,null),e(Yt,JWr),e(Yt,n5e),e(n5e,YWr),e(Yt,KWr),e(Yt,df),e(df,ZWr),e(df,s5e),e(s5e,eHr),e(df,oHr),e(df,_oe),e(_oe,rHr),e(df,tHr),e(Yt,aHr),M(v5,Yt,null),e(Fr,nHr),e(Fr,Hr),M(R$,Hr,null),e(Hr,sHr),e(Hr,l5e),e(l5e,lHr),e(Hr,iHr),e(Hr,wn),e(wn,dHr),e(wn,i5e),e(i5e,cHr),e(wn,fHr),e(wn,d5e),e(d5e,mHr),e(wn,gHr),e(wn,c5e),e(c5e,hHr),e(wn,pHr),e(Hr,_Hr),e(Hr,ke),e(ke,F5),e(F5,f5e),e(f5e,uHr),e(F5,bHr),e(F5,uoe),e(uoe,vHr),e(F5,FHr),e(ke,THr),e(ke,T5),e(T5,m5e),e(m5e,MHr),e(T5,EHr),e(T5,boe),e(boe,CHr),e(T5,wHr),e(ke,AHr),e(ke,M5),e(M5,g5e),e(g5e,LHr),e(M5,yHr),e(M5,voe),e(voe,xHr),e(M5,$Hr),e(ke,kHr),e(ke,E5),e(E5,h5e),e(h5e,SHr),e(E5,RHr),e(E5,Foe),e(Foe,PHr),e(E5,BHr),e(ke,IHr),e(ke,C5),e(C5,p5e),e(p5e,NHr),e(C5,qHr),e(C5,Toe),e(Toe,jHr),e(C5,DHr),e(ke,GHr),e(ke,w5),e(w5,_5e),e(_5e,OHr),e(w5,VHr),e(w5,Moe),e(Moe,XHr),e(w5,zHr),e(ke,QHr),e(ke,A5),e(A5,u5e),e(u5e,WHr),e(A5,HHr),e(A5,Eoe),e(Eoe,UHr),e(A5,JHr),e(ke,YHr),e(ke,L5),e(L5,b5e),e(b5e,KHr),e(L5,ZHr),e(L5,Coe),e(Coe,eUr),e(L5,oUr),e(ke,rUr),e(ke,y5),e(y5,v5e),e(v5e,tUr),e(y5,aUr),e(y5,woe),e(woe,nUr),e(y5,sUr),e(ke,lUr),e(ke,x5),e(x5,F5e),e(F5e,iUr),e(x5,dUr),e(x5,Aoe),e(Aoe,cUr),e(x5,fUr),e(Hr,mUr),M($5,Hr,null),b(f,Jze,u),b(f,cf,u),e(cf,k5),e(k5,T5e),M(P$,T5e,null),e(cf,gUr),e(cf,M5e),e(M5e,hUr),b(f,Yze,u),b(f,Tr,u),M(B$,Tr,null),e(Tr,pUr),e(Tr,ff),e(ff,_Ur),e(ff,Loe),e(Loe,uUr),e(ff,bUr),e(ff,yoe),e(yoe,vUr),e(ff,FUr),e(Tr,TUr),e(Tr,I$),e(I$,MUr),e(I$,E5e),e(E5e,EUr),e(I$,CUr),e(Tr,wUr),e(Tr,Kt),M(N$,Kt,null),e(Kt,AUr),e(Kt,C5e),e(C5e,LUr),e(Kt,yUr),e(Kt,mf),e(mf,xUr),e(mf,w5e),e(w5e,$Ur),e(mf,kUr),e(mf,xoe),e(xoe,SUr),e(mf,RUr),e(Kt,PUr),M(S5,Kt,null),e(Tr,BUr),e(Tr,Ur),M(q$,Ur,null),e(Ur,IUr),e(Ur,A5e),e(A5e,NUr),e(Ur,qUr),e(Ur,An),e(An,jUr),e(An,L5e),e(L5e,DUr),e(An,GUr),e(An,y5e),e(y5e,OUr),e(An,VUr),e(An,x5e),e(x5e,XUr),e(An,zUr),e(Ur,QUr),e(Ur,Se),e(Se,R5),e(R5,$5e),e($5e,WUr),e(R5,HUr),e(R5,$oe),e($oe,UUr),e(R5,JUr),e(Se,YUr),e(Se,P5),e(P5,k5e),e(k5e,KUr),e(P5,ZUr),e(P5,koe),e(koe,eJr),e(P5,oJr),e(Se,rJr),e(Se,B5),e(B5,S5e),e(S5e,tJr),e(B5,aJr),e(B5,Soe),e(Soe,nJr),e(B5,sJr),e(Se,lJr),e(Se,I5),e(I5,R5e),e(R5e,iJr),e(I5,dJr),e(I5,Roe),e(Roe,cJr),e(I5,fJr),e(Se,mJr),e(Se,N5),e(N5,P5e),e(P5e,gJr),e(N5,hJr),e(N5,Poe),e(Poe,pJr),e(N5,_Jr),e(Se,uJr),e(Se,q5),e(q5,B5e),e(B5e,bJr),e(q5,vJr),e(q5,Boe),e(Boe,FJr),e(q5,TJr),e(Se,MJr),e(Se,j5),e(j5,I5e),e(I5e,EJr),e(j5,CJr),e(j5,Ioe),e(Ioe,wJr),e(j5,AJr),e(Se,LJr),e(Se,D5),e(D5,N5e),e(N5e,yJr),e(D5,xJr),e(D5,Noe),e(Noe,$Jr),e(D5,kJr),e(Se,SJr),e(Se,G5),e(G5,q5e),e(q5e,RJr),e(G5,PJr),e(G5,qoe),e(qoe,BJr),e(G5,IJr),e(Se,NJr),e(Se,O5),e(O5,j5e),e(j5e,qJr),e(O5,jJr),e(O5,joe),e(joe,DJr),e(O5,GJr),e(Ur,OJr),M(V5,Ur,null),b(f,Kze,u),b(f,gf,u),e(gf,X5),e(X5,D5e),M(j$,D5e,null),e(gf,VJr),e(gf,G5e),e(G5e,XJr),b(f,Zze,u),b(f,Mr,u),M(D$,Mr,null),e(Mr,zJr),e(Mr,hf),e(hf,QJr),e(hf,Doe),e(Doe,WJr),e(hf,HJr),e(hf,Goe),e(Goe,UJr),e(hf,JJr),e(Mr,YJr),e(Mr,G$),e(G$,KJr),e(G$,O5e),e(O5e,ZJr),e(G$,eYr),e(Mr,oYr),e(Mr,Zt),M(O$,Zt,null),e(Zt,rYr),e(Zt,V5e),e(V5e,tYr),e(Zt,aYr),e(Zt,pf),e(pf,nYr),e(pf,X5e),e(X5e,sYr),e(pf,lYr),e(pf,Ooe),e(Ooe,iYr),e(pf,dYr),e(Zt,cYr),M(z5,Zt,null),e(Mr,fYr),e(Mr,Jr),M(V$,Jr,null),e(Jr,mYr),e(Jr,z5e),e(z5e,gYr),e(Jr,hYr),e(Jr,Ln),e(Ln,pYr),e(Ln,Q5e),e(Q5e,_Yr),e(Ln,uYr),e(Ln,W5e),e(W5e,bYr),e(Ln,vYr),e(Ln,H5e),e(H5e,FYr),e(Ln,TYr),e(Jr,MYr),e(Jr,Re),e(Re,Q5),e(Q5,U5e),e(U5e,EYr),e(Q5,CYr),e(Q5,Voe),e(Voe,wYr),e(Q5,AYr),e(Re,LYr),e(Re,W5),e(W5,J5e),e(J5e,yYr),e(W5,xYr),e(W5,Xoe),e(Xoe,$Yr),e(W5,kYr),e(Re,SYr),e(Re,H5),e(H5,Y5e),e(Y5e,RYr),e(H5,PYr),e(H5,zoe),e(zoe,BYr),e(H5,IYr),e(Re,NYr),e(Re,U5),e(U5,K5e),e(K5e,qYr),e(U5,jYr),e(U5,Qoe),e(Qoe,DYr),e(U5,GYr),e(Re,OYr),e(Re,J5),e(J5,Z5e),e(Z5e,VYr),e(J5,XYr),e(J5,Woe),e(Woe,zYr),e(J5,QYr),e(Re,WYr),e(Re,Y5),e(Y5,ewe),e(ewe,HYr),e(Y5,UYr),e(Y5,Hoe),e(Hoe,JYr),e(Y5,YYr),e(Re,KYr),e(Re,K5),e(K5,owe),e(owe,ZYr),e(K5,eKr),e(K5,Uoe),e(Uoe,oKr),e(K5,rKr),e(Re,tKr),e(Re,Z5),e(Z5,rwe),e(rwe,aKr),e(Z5,nKr),e(Z5,Joe),e(Joe,sKr),e(Z5,lKr),e(Re,iKr),e(Re,ew),e(ew,twe),e(twe,dKr),e(ew,cKr),e(ew,Yoe),e(Yoe,fKr),e(ew,mKr),e(Re,gKr),e(Re,ow),e(ow,awe),e(awe,hKr),e(ow,pKr),e(ow,Koe),e(Koe,_Kr),e(ow,uKr),e(Jr,bKr),M(rw,Jr,null),b(f,eQe,u),b(f,_f,u),e(_f,tw),e(tw,nwe),M(X$,nwe,null),e(_f,vKr),e(_f,swe),e(swe,FKr),b(f,oQe,u),b(f,Er,u),M(z$,Er,null),e(Er,TKr),e(Er,uf),e(uf,MKr),e(uf,Zoe),e(Zoe,EKr),e(uf,CKr),e(uf,ere),e(ere,wKr),e(uf,AKr),e(Er,LKr),e(Er,Q$),e(Q$,yKr),e(Q$,lwe),e(lwe,xKr),e(Q$,$Kr),e(Er,kKr),e(Er,ea),M(W$,ea,null),e(ea,SKr),e(ea,iwe),e(iwe,RKr),e(ea,PKr),e(ea,bf),e(bf,BKr),e(bf,dwe),e(dwe,IKr),e(bf,NKr),e(bf,ore),e(ore,qKr),e(bf,jKr),e(ea,DKr),M(aw,ea,null),e(Er,GKr),e(Er,Yr),M(H$,Yr,null),e(Yr,OKr),e(Yr,cwe),e(cwe,VKr),e(Yr,XKr),e(Yr,yn),e(yn,zKr),e(yn,fwe),e(fwe,QKr),e(yn,WKr),e(yn,mwe),e(mwe,HKr),e(yn,UKr),e(yn,gwe),e(gwe,JKr),e(yn,YKr),e(Yr,KKr),e(Yr,Xe),e(Xe,nw),e(nw,hwe),e(hwe,ZKr),e(nw,eZr),e(nw,rre),e(rre,oZr),e(nw,rZr),e(Xe,tZr),e(Xe,sw),e(sw,pwe),e(pwe,aZr),e(sw,nZr),e(sw,tre),e(tre,sZr),e(sw,lZr),e(Xe,iZr),e(Xe,lw),e(lw,_we),e(_we,dZr),e(lw,cZr),e(lw,are),e(are,fZr),e(lw,mZr),e(Xe,gZr),e(Xe,iw),e(iw,uwe),e(uwe,hZr),e(iw,pZr),e(iw,nre),e(nre,_Zr),e(iw,uZr),e(Xe,bZr),e(Xe,dw),e(dw,bwe),e(bwe,vZr),e(dw,FZr),e(dw,sre),e(sre,TZr),e(dw,MZr),e(Xe,EZr),e(Xe,cw),e(cw,vwe),e(vwe,CZr),e(cw,wZr),e(cw,lre),e(lre,AZr),e(cw,LZr),e(Xe,yZr),e(Xe,fw),e(fw,Fwe),e(Fwe,xZr),e(fw,$Zr),e(fw,ire),e(ire,kZr),e(fw,SZr),e(Xe,RZr),e(Xe,mw),e(mw,Twe),e(Twe,PZr),e(mw,BZr),e(mw,dre),e(dre,IZr),e(mw,NZr),e(Yr,qZr),M(gw,Yr,null),b(f,rQe,u),b(f,vf,u),e(vf,hw),e(hw,Mwe),M(U$,Mwe,null),e(vf,jZr),e(vf,Ewe),e(Ewe,DZr),b(f,tQe,u),b(f,Cr,u),M(J$,Cr,null),e(Cr,GZr),e(Cr,Ff),e(Ff,OZr),e(Ff,cre),e(cre,VZr),e(Ff,XZr),e(Ff,fre),e(fre,zZr),e(Ff,QZr),e(Cr,WZr),e(Cr,Y$),e(Y$,HZr),e(Y$,Cwe),e(Cwe,UZr),e(Y$,JZr),e(Cr,YZr),e(Cr,oa),M(K$,oa,null),e(oa,KZr),e(oa,wwe),e(wwe,ZZr),e(oa,eet),e(oa,Tf),e(Tf,oet),e(Tf,Awe),e(Awe,ret),e(Tf,tet),e(Tf,mre),e(mre,aet),e(Tf,net),e(oa,set),M(pw,oa,null),e(Cr,iet),e(Cr,Kr),M(Z$,Kr,null),e(Kr,det),e(Kr,Lwe),e(Lwe,cet),e(Kr,fet),e(Kr,xn),e(xn,met),e(xn,ywe),e(ywe,get),e(xn,het),e(xn,xwe),e(xwe,pet),e(xn,_et),e(xn,$we),e($we,uet),e(xn,bet),e(Kr,vet),e(Kr,ze),e(ze,_w),e(_w,kwe),e(kwe,Fet),e(_w,Tet),e(_w,gre),e(gre,Met),e(_w,Eet),e(ze,Cet),e(ze,uw),e(uw,Swe),e(Swe,wet),e(uw,Aet),e(uw,hre),e(hre,Let),e(uw,yet),e(ze,xet),e(ze,bw),e(bw,Rwe),e(Rwe,$et),e(bw,ket),e(bw,pre),e(pre,Set),e(bw,Ret),e(ze,Pet),e(ze,vw),e(vw,Pwe),e(Pwe,Bet),e(vw,Iet),e(vw,_re),e(_re,Net),e(vw,qet),e(ze,jet),e(ze,Fw),e(Fw,Bwe),e(Bwe,Det),e(Fw,Get),e(Fw,ure),e(ure,Oet),e(Fw,Vet),e(ze,Xet),e(ze,Tw),e(Tw,Iwe),e(Iwe,zet),e(Tw,Qet),e(Tw,bre),e(bre,Wet),e(Tw,Het),e(ze,Uet),e(ze,Mw),e(Mw,Nwe),e(Nwe,Jet),e(Mw,Yet),e(Mw,vre),e(vre,Ket),e(Mw,Zet),e(ze,eot),e(ze,Ew),e(Ew,qwe),e(qwe,oot),e(Ew,rot),e(Ew,Fre),e(Fre,tot),e(Ew,aot),e(Kr,not),M(Cw,Kr,null),b(f,aQe,u),b(f,Mf,u),e(Mf,ww),e(ww,jwe),M(ek,jwe,null),e(Mf,sot),e(Mf,Dwe),e(Dwe,lot),b(f,nQe,u),b(f,wr,u),M(ok,wr,null),e(wr,iot),e(wr,Ef),e(Ef,dot),e(Ef,Tre),e(Tre,cot),e(Ef,fot),e(Ef,Mre),e(Mre,mot),e(Ef,got),e(wr,hot),e(wr,rk),e(rk,pot),e(rk,Gwe),e(Gwe,_ot),e(rk,uot),e(wr,bot),e(wr,ra),M(tk,ra,null),e(ra,vot),e(ra,Owe),e(Owe,Fot),e(ra,Tot),e(ra,Cf),e(Cf,Mot),e(Cf,Vwe),e(Vwe,Eot),e(Cf,Cot),e(Cf,Ere),e(Ere,wot),e(Cf,Aot),e(ra,Lot),M(Aw,ra,null),e(wr,yot),e(wr,Zr),M(ak,Zr,null),e(Zr,xot),e(Zr,Xwe),e(Xwe,$ot),e(Zr,kot),e(Zr,$n),e($n,Sot),e($n,zwe),e(zwe,Rot),e($n,Pot),e($n,Qwe),e(Qwe,Bot),e($n,Iot),e($n,Wwe),e(Wwe,Not),e($n,qot),e(Zr,jot),e(Zr,Hwe),e(Hwe,Lw),e(Lw,Uwe),e(Uwe,Dot),e(Lw,Got),e(Lw,Cre),e(Cre,Oot),e(Lw,Vot),e(Zr,Xot),M(yw,Zr,null),b(f,sQe,u),b(f,wf,u),e(wf,xw),e(xw,Jwe),M(nk,Jwe,null),e(wf,zot),e(wf,Ywe),e(Ywe,Qot),b(f,lQe,u),b(f,Ar,u),M(sk,Ar,null),e(Ar,Wot),e(Ar,Af),e(Af,Hot),e(Af,wre),e(wre,Uot),e(Af,Jot),e(Af,Are),e(Are,Yot),e(Af,Kot),e(Ar,Zot),e(Ar,lk),e(lk,ert),e(lk,Kwe),e(Kwe,ort),e(lk,rrt),e(Ar,trt),e(Ar,ta),M(ik,ta,null),e(ta,art),e(ta,Zwe),e(Zwe,nrt),e(ta,srt),e(ta,Lf),e(Lf,lrt),e(Lf,eAe),e(eAe,irt),e(Lf,drt),e(Lf,Lre),e(Lre,crt),e(Lf,frt),e(ta,mrt),M($w,ta,null),e(Ar,grt),e(Ar,et),M(dk,et,null),e(et,hrt),e(et,oAe),e(oAe,prt),e(et,_rt),e(et,kn),e(kn,urt),e(kn,rAe),e(rAe,brt),e(kn,vrt),e(kn,tAe),e(tAe,Frt),e(kn,Trt),e(kn,aAe),e(aAe,Mrt),e(kn,Ert),e(et,Crt),e(et,ck),e(ck,kw),e(kw,nAe),e(nAe,wrt),e(kw,Art),e(kw,yre),e(yre,Lrt),e(kw,yrt),e(ck,xrt),e(ck,Sw),e(Sw,sAe),e(sAe,$rt),e(Sw,krt),e(Sw,xre),e(xre,Srt),e(Sw,Rrt),e(et,Prt),M(Rw,et,null),b(f,iQe,u),b(f,yf,u),e(yf,Pw),e(Pw,lAe),M(fk,lAe,null),e(yf,Brt),e(yf,iAe),e(iAe,Irt),b(f,dQe,u),b(f,Lr,u),M(mk,Lr,null),e(Lr,Nrt),e(Lr,xf),e(xf,qrt),e(xf,$re),e($re,jrt),e(xf,Drt),e(xf,kre),e(kre,Grt),e(xf,Ort),e(Lr,Vrt),e(Lr,gk),e(gk,Xrt),e(gk,dAe),e(dAe,zrt),e(gk,Qrt),e(Lr,Wrt),e(Lr,aa),M(hk,aa,null),e(aa,Hrt),e(aa,cAe),e(cAe,Urt),e(aa,Jrt),e(aa,$f),e($f,Yrt),e($f,fAe),e(fAe,Krt),e($f,Zrt),e($f,Sre),e(Sre,ett),e($f,ott),e(aa,rtt),M(Bw,aa,null),e(Lr,ttt),e(Lr,ot),M(pk,ot,null),e(ot,att),e(ot,mAe),e(mAe,ntt),e(ot,stt),e(ot,Sn),e(Sn,ltt),e(Sn,gAe),e(gAe,itt),e(Sn,dtt),e(Sn,hAe),e(hAe,ctt),e(Sn,ftt),e(Sn,pAe),e(pAe,mtt),e(Sn,gtt),e(ot,htt),e(ot,_Ae),e(_Ae,Iw),e(Iw,uAe),e(uAe,ptt),e(Iw,_tt),e(Iw,Rre),e(Rre,utt),e(Iw,btt),e(ot,vtt),M(Nw,ot,null),cQe=!0},p(f,[u]){const _k={};u&2&&(_k.$$scope={dirty:u,ctx:f}),jf.$set(_k);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),Yg.$set(bAe);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),Rh.$set(vAe);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),_p.$set(FAe);const uk={};u&2&&(uk.$$scope={dirty:u,ctx:f}),up.$set(uk);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),qp.$set(TAe);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),jp.$set(Rn);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),Op.$set(MAe);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),Qu.$set(EAe);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),Hu.$set(CAe);const bk={};u&2&&(bk.$$scope={dirty:u,ctx:f}),G1.$set(bk);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),V1.$set(wAe);const vk={};u&2&&(vk.$$scope={dirty:u,ctx:f}),k2.$set(vk);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),R2.$set(AAe);const Fk={};u&2&&(Fk.$$scope={dirty:u,ctx:f}),vb.$set(Fk);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),Tb.$set(LAe);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),Gb.$set(yAe);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),Vb.$set(xAe);const kf={};u&2&&(kf.$$scope={dirty:u,ctx:f}),Gv.$set(kf);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),Vv.$set($Ae);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),T0.$set(kAe);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),E0.$set(SAe);const Tk={};u&2&&(Tk.$$scope={dirty:u,ctx:f}),k0.$set(Tk);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),R0.$set(RAe);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),uF.$set(PAe);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),vF.$set(BAe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),dT.$set(nt);const Mk={};u&2&&(Mk.$$scope={dirty:u,ctx:f}),fT.$set(Mk);const IAe={};u&2&&(IAe.$$scope={dirty:u,ctx:f}),hT.$set(IAe);const Ek={};u&2&&(Ek.$$scope={dirty:u,ctx:f}),_T.$set(Ek);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),kT.$set(NAe);const st={};u&2&&(st.$$scope={dirty:u,ctx:f}),RT.$set(st);const qAe={};u&2&&(qAe.$$scope={dirty:u,ctx:f}),IT.$set(qAe);const Sf={};u&2&&(Sf.$$scope={dirty:u,ctx:f}),qT.$set(Sf);const jAe={};u&2&&(jAe.$$scope={dirty:u,ctx:f}),GT.$set(jAe);const DAe={};u&2&&(DAe.$$scope={dirty:u,ctx:f}),VT.$set(DAe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),e7.$set(L);const qw={};u&2&&(qw.$$scope={dirty:u,ctx:f}),r7.$set(qw);const GAe={};u&2&&(GAe.$$scope={dirty:u,ctx:f}),d7.$set(GAe);const OAe={};u&2&&(OAe.$$scope={dirty:u,ctx:f}),f7.$set(OAe);const jw={};u&2&&(jw.$$scope={dirty:u,ctx:f}),E7.$set(jw);const VAe={};u&2&&(VAe.$$scope={dirty:u,ctx:f}),w7.$set(VAe);const XAe={};u&2&&(XAe.$$scope={dirty:u,ctx:f}),x7.$set(XAe);const Dw={};u&2&&(Dw.$$scope={dirty:u,ctx:f}),k7.$set(Dw);const zAe={};u&2&&(zAe.$$scope={dirty:u,ctx:f}),q7.$set(zAe);const QAe={};u&2&&(QAe.$$scope={dirty:u,ctx:f}),D7.$set(QAe);const Gw={};u&2&&(Gw.$$scope={dirty:u,ctx:f}),z7.$set(Gw);const WAe={};u&2&&(WAe.$$scope={dirty:u,ctx:f}),W7.$set(WAe);const HAe={};u&2&&(HAe.$$scope={dirty:u,ctx:f}),Y7.$set(HAe);const Ow={};u&2&&(Ow.$$scope={dirty:u,ctx:f}),Z7.$set(Ow);const UAe={};u&2&&(UAe.$$scope={dirty:u,ctx:f}),r9.$set(UAe);const JAe={};u&2&&(JAe.$$scope={dirty:u,ctx:f}),a9.$set(JAe);const Vw={};u&2&&(Vw.$$scope={dirty:u,ctx:f}),f9.$set(Vw);const YAe={};u&2&&(YAe.$$scope={dirty:u,ctx:f}),g9.$set(YAe);const KAe={};u&2&&(KAe.$$scope={dirty:u,ctx:f}),_9.$set(KAe);const Xw={};u&2&&(Xw.$$scope={dirty:u,ctx:f}),b9.$set(Xw);const ZAe={};u&2&&(ZAe.$$scope={dirty:u,ctx:f}),pM.$set(ZAe);const e6e={};u&2&&(e6e.$$scope={dirty:u,ctx:f}),uM.$set(e6e);const zw={};u&2&&(zw.$$scope={dirty:u,ctx:f}),GM.$set(zw);const o6e={};u&2&&(o6e.$$scope={dirty:u,ctx:f}),VM.$set(o6e);const r6e={};u&2&&(r6e.$$scope={dirty:u,ctx:f}),t4.$set(r6e);const Qw={};u&2&&(Qw.$$scope={dirty:u,ctx:f}),n4.$set(Qw);const t6e={};u&2&&(t6e.$$scope={dirty:u,ctx:f}),g4.$set(t6e);const a6e={};u&2&&(a6e.$$scope={dirty:u,ctx:f}),p4.$set(a6e);const Ww={};u&2&&(Ww.$$scope={dirty:u,ctx:f}),I4.$set(Ww);const n6e={};u&2&&(n6e.$$scope={dirty:u,ctx:f}),q4.$set(n6e);const s6e={};u&2&&(s6e.$$scope={dirty:u,ctx:f}),U4.$set(s6e);const Hw={};u&2&&(Hw.$$scope={dirty:u,ctx:f}),Y4.$set(Hw);const l6e={};u&2&&(l6e.$$scope={dirty:u,ctx:f}),CE.$set(l6e);const i6e={};u&2&&(i6e.$$scope={dirty:u,ctx:f}),AE.$set(i6e);const Uw={};u&2&&(Uw.$$scope={dirty:u,ctx:f}),XE.$set(Uw);const d6e={};u&2&&(d6e.$$scope={dirty:u,ctx:f}),QE.$set(d6e);const c6e={};u&2&&(c6e.$$scope={dirty:u,ctx:f}),UE.$set(c6e);const Jw={};u&2&&(Jw.$$scope={dirty:u,ctx:f}),YE.$set(Jw);const f6e={};u&2&&(f6e.$$scope={dirty:u,ctx:f}),ZE.$set(f6e);const m6e={};u&2&&(m6e.$$scope={dirty:u,ctx:f}),oC.$set(m6e);const Yw={};u&2&&(Yw.$$scope={dirty:u,ctx:f}),MC.$set(Yw);const g6e={};u&2&&(g6e.$$scope={dirty:u,ctx:f}),CC.$set(g6e);const h6e={};u&2&&(h6e.$$scope={dirty:u,ctx:f}),zC.$set(h6e);const Kw={};u&2&&(Kw.$$scope={dirty:u,ctx:f}),WC.$set(Kw);const p6e={};u&2&&(p6e.$$scope={dirty:u,ctx:f}),UC.$set(p6e);const _6e={};u&2&&(_6e.$$scope={dirty:u,ctx:f}),YC.$set(_6e);const Zw={};u&2&&(Zw.$$scope={dirty:u,ctx:f}),ZC.$set(Zw);const u6e={};u&2&&(u6e.$$scope={dirty:u,ctx:f}),o3.$set(u6e);const b6e={};u&2&&(b6e.$$scope={dirty:u,ctx:f}),x3.$set(b6e);const eA={};u&2&&(eA.$$scope={dirty:u,ctx:f}),k3.$set(eA);const v6e={};u&2&&(v6e.$$scope={dirty:u,ctx:f}),O3.$set(v6e);const F6e={};u&2&&(F6e.$$scope={dirty:u,ctx:f}),X3.$set(F6e);const oA={};u&2&&(oA.$$scope={dirty:u,ctx:f}),a5.$set(oA);const T6e={};u&2&&(T6e.$$scope={dirty:u,ctx:f}),s5.$set(T6e);const M6e={};u&2&&(M6e.$$scope={dirty:u,ctx:f}),u5.$set(M6e);const rA={};u&2&&(rA.$$scope={dirty:u,ctx:f}),v5.$set(rA);const E6e={};u&2&&(E6e.$$scope={dirty:u,ctx:f}),$5.$set(E6e);const C6e={};u&2&&(C6e.$$scope={dirty:u,ctx:f}),S5.$set(C6e);const tA={};u&2&&(tA.$$scope={dirty:u,ctx:f}),V5.$set(tA);const w6e={};u&2&&(w6e.$$scope={dirty:u,ctx:f}),z5.$set(w6e);const A6e={};u&2&&(A6e.$$scope={dirty:u,ctx:f}),rw.$set(A6e);const aA={};u&2&&(aA.$$scope={dirty:u,ctx:f}),aw.$set(aA);const L6e={};u&2&&(L6e.$$scope={dirty:u,ctx:f}),gw.$set(L6e);const y6e={};u&2&&(y6e.$$scope={dirty:u,ctx:f}),pw.$set(y6e);const nA={};u&2&&(nA.$$scope={dirty:u,ctx:f}),Cw.$set(nA);const x6e={};u&2&&(x6e.$$scope={dirty:u,ctx:f}),Aw.$set(x6e);const $6e={};u&2&&($6e.$$scope={dirty:u,ctx:f}),yw.$set($6e);const sA={};u&2&&(sA.$$scope={dirty:u,ctx:f}),$w.$set(sA);const k6e={};u&2&&(k6e.$$scope={dirty:u,ctx:f}),Rw.$set(k6e);const S6e={};u&2&&(S6e.$$scope={dirty:u,ctx:f}),Bw.$set(S6e);const lA={};u&2&&(lA.$$scope={dirty:u,ctx:f}),Nw.$set(lA)},i(f){cQe||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(jf.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(mL.$$.fragment,f),E(Yg.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(bL.$$.fragment,f),E(Rh.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(CL.$$.fragment,f),E(_p.$$.fragment,f),E(up.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(qp.$$.fragment,f),E(jp.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(Op.$$.fragment,f),E(IL.$$.fragment,f),E(Qu.$$.fragment,f),E(NL.$$.fragment,f),E(qL.$$.fragment,f),E(DL.$$.fragment,f),E(Hu.$$.fragment,f),E(GL.$$.fragment,f),E(G1.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(V1.$$.fragment,f),E(QL.$$.fragment,f),E(k2.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(R2.$$.fragment,f),E(YL.$$.fragment,f),E(vb.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(oy.$$.fragment,f),E(Tb.$$.fragment,f),E(ry.$$.fragment,f),E(Gb.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(Vb.$$.fragment,f),E(ly.$$.fragment,f),E(Gv.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(Vv.$$.fragment,f),E(my.$$.fragment,f),E(T0.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(_y.$$.fragment,f),E(E0.$$.fragment,f),E(uy.$$.fragment,f),E(k0.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(R0.$$.fragment,f),E(My.$$.fragment,f),E(uF.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(vF.$$.fragment,f),E(Ly.$$.fragment,f),E(dT.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(fT.$$.fragment,f),E(Sy.$$.fragment,f),E(hT.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(Iy.$$.fragment,f),E(_T.$$.fragment,f),E(Ny.$$.fragment,f),E(kT.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(RT.$$.fragment,f),E(Oy.$$.fragment,f),E(IT.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Qy.$$.fragment,f),E(qT.$$.fragment,f),E(Wy.$$.fragment,f),E(GT.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(VT.$$.fragment,f),E(Ky.$$.fragment,f),E(e7.$$.fragment,f),E(Zy.$$.fragment,f),E(e8.$$.fragment,f),E(r8.$$.fragment,f),E(r7.$$.fragment,f),E(t8.$$.fragment,f),E(d7.$$.fragment,f),E(a8.$$.fragment,f),E(n8.$$.fragment,f),E(l8.$$.fragment,f),E(f7.$$.fragment,f),E(i8.$$.fragment,f),E(E7.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E(w7.$$.fragment,f),E(g8.$$.fragment,f),E(x7.$$.fragment,f),E(p8.$$.fragment,f),E(_8.$$.fragment,f),E(b8.$$.fragment,f),E(k7.$$.fragment,f),E(v8.$$.fragment,f),E(q7.$$.fragment,f),E(F8.$$.fragment,f),E(T8.$$.fragment,f),E(E8.$$.fragment,f),E(D7.$$.fragment,f),E(C8.$$.fragment,f),E(z7.$$.fragment,f),E(w8.$$.fragment,f),E(A8.$$.fragment,f),E(y8.$$.fragment,f),E(W7.$$.fragment,f),E(x8.$$.fragment,f),E(Y7.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(P8.$$.fragment,f),E(Z7.$$.fragment,f),E(B8.$$.fragment,f),E(r9.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(a9.$$.fragment,f),E(D8.$$.fragment,f),E(f9.$$.fragment,f),E(G8.$$.fragment,f),E(O8.$$.fragment,f),E(X8.$$.fragment,f),E(g9.$$.fragment,f),E(z8.$$.fragment,f),E(_9.$$.fragment,f),E(Q8.$$.fragment,f),E(W8.$$.fragment,f),E(U8.$$.fragment,f),E(b9.$$.fragment,f),E(J8.$$.fragment,f),E(pM.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(ex.$$.fragment,f),E(uM.$$.fragment,f),E(ox.$$.fragment,f),E(GM.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(VM.$$.fragment,f),E(sx.$$.fragment,f),E(t4.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(n4.$$.fragment,f),E(fx.$$.fragment,f),E(g4.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(p4.$$.fragment,f),E(_x.$$.fragment,f),E(I4.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(q4.$$.fragment,f),E(Tx.$$.fragment,f),E(U4.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(Y4.$$.fragment,f),E(Ax.$$.fragment,f),E(CE.$$.fragment,f),E(Lx.$$.fragment,f),E(yx.$$.fragment,f),E($x.$$.fragment,f),E(AE.$$.fragment,f),E(kx.$$.fragment,f),E(XE.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(QE.$$.fragment,f),E(Ix.$$.fragment,f),E(UE.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E(YE.$$.fragment,f),E(Ox.$$.fragment,f),E(ZE.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Qx.$$.fragment,f),E(oC.$$.fragment,f),E(Wx.$$.fragment,f),E(MC.$$.fragment,f),E(Hx.$$.fragment,f),E(Ux.$$.fragment,f),E(Yx.$$.fragment,f),E(CC.$$.fragment,f),E(Kx.$$.fragment,f),E(zC.$$.fragment,f),E(Zx.$$.fragment,f),E(e$.$$.fragment,f),E(r$.$$.fragment,f),E(WC.$$.fragment,f),E(t$.$$.fragment,f),E(UC.$$.fragment,f),E(a$.$$.fragment,f),E(n$.$$.fragment,f),E(l$.$$.fragment,f),E(YC.$$.fragment,f),E(i$.$$.fragment,f),E(ZC.$$.fragment,f),E(d$.$$.fragment,f),E(c$.$$.fragment,f),E(m$.$$.fragment,f),E(o3.$$.fragment,f),E(g$.$$.fragment,f),E(x3.$$.fragment,f),E(h$.$$.fragment,f),E(p$.$$.fragment,f),E(u$.$$.fragment,f),E(k3.$$.fragment,f),E(b$.$$.fragment,f),E(O3.$$.fragment,f),E(v$.$$.fragment,f),E(F$.$$.fragment,f),E(M$.$$.fragment,f),E(X3.$$.fragment,f),E(E$.$$.fragment,f),E(a5.$$.fragment,f),E(C$.$$.fragment,f),E(w$.$$.fragment,f),E(L$.$$.fragment,f),E(s5.$$.fragment,f),E(y$.$$.fragment,f),E(u5.$$.fragment,f),E(x$.$$.fragment,f),E($$.$$.fragment,f),E(S$.$$.fragment,f),E(v5.$$.fragment,f),E(R$.$$.fragment,f),E($5.$$.fragment,f),E(P$.$$.fragment,f),E(B$.$$.fragment,f),E(N$.$$.fragment,f),E(S5.$$.fragment,f),E(q$.$$.fragment,f),E(V5.$$.fragment,f),E(j$.$$.fragment,f),E(D$.$$.fragment,f),E(O$.$$.fragment,f),E(z5.$$.fragment,f),E(V$.$$.fragment,f),E(rw.$$.fragment,f),E(X$.$$.fragment,f),E(z$.$$.fragment,f),E(W$.$$.fragment,f),E(aw.$$.fragment,f),E(H$.$$.fragment,f),E(gw.$$.fragment,f),E(U$.$$.fragment,f),E(J$.$$.fragment,f),E(K$.$$.fragment,f),E(pw.$$.fragment,f),E(Z$.$$.fragment,f),E(Cw.$$.fragment,f),E(ek.$$.fragment,f),E(ok.$$.fragment,f),E(tk.$$.fragment,f),E(Aw.$$.fragment,f),E(ak.$$.fragment,f),E(yw.$$.fragment,f),E(nk.$$.fragment,f),E(sk.$$.fragment,f),E(ik.$$.fragment,f),E($w.$$.fragment,f),E(dk.$$.fragment,f),E(Rw.$$.fragment,f),E(fk.$$.fragment,f),E(mk.$$.fragment,f),E(hk.$$.fragment,f),E(Bw.$$.fragment,f),E(pk.$$.fragment,f),E(Nw.$$.fragment,f),cQe=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(jf.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(mL.$$.fragment,f),C(Yg.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(bL.$$.fragment,f),C(Rh.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(CL.$$.fragment,f),C(_p.$$.fragment,f),C(up.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(qp.$$.fragment,f),C(jp.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(Op.$$.fragment,f),C(IL.$$.fragment,f),C(Qu.$$.fragment,f),C(NL.$$.fragment,f),C(qL.$$.fragment,f),C(DL.$$.fragment,f),C(Hu.$$.fragment,f),C(GL.$$.fragment,f),C(G1.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(V1.$$.fragment,f),C(QL.$$.fragment,f),C(k2.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(R2.$$.fragment,f),C(YL.$$.fragment,f),C(vb.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(oy.$$.fragment,f),C(Tb.$$.fragment,f),C(ry.$$.fragment,f),C(Gb.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(Vb.$$.fragment,f),C(ly.$$.fragment,f),C(Gv.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(Vv.$$.fragment,f),C(my.$$.fragment,f),C(T0.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(_y.$$.fragment,f),C(E0.$$.fragment,f),C(uy.$$.fragment,f),C(k0.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(R0.$$.fragment,f),C(My.$$.fragment,f),C(uF.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(vF.$$.fragment,f),C(Ly.$$.fragment,f),C(dT.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(fT.$$.fragment,f),C(Sy.$$.fragment,f),C(hT.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(Iy.$$.fragment,f),C(_T.$$.fragment,f),C(Ny.$$.fragment,f),C(kT.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(RT.$$.fragment,f),C(Oy.$$.fragment,f),C(IT.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Qy.$$.fragment,f),C(qT.$$.fragment,f),C(Wy.$$.fragment,f),C(GT.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(VT.$$.fragment,f),C(Ky.$$.fragment,f),C(e7.$$.fragment,f),C(Zy.$$.fragment,f),C(e8.$$.fragment,f),C(r8.$$.fragment,f),C(r7.$$.fragment,f),C(t8.$$.fragment,f),C(d7.$$.fragment,f),C(a8.$$.fragment,f),C(n8.$$.fragment,f),C(l8.$$.fragment,f),C(f7.$$.fragment,f),C(i8.$$.fragment,f),C(E7.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C(w7.$$.fragment,f),C(g8.$$.fragment,f),C(x7.$$.fragment,f),C(p8.$$.fragment,f),C(_8.$$.fragment,f),C(b8.$$.fragment,f),C(k7.$$.fragment,f),C(v8.$$.fragment,f),C(q7.$$.fragment,f),C(F8.$$.fragment,f),C(T8.$$.fragment,f),C(E8.$$.fragment,f),C(D7.$$.fragment,f),C(C8.$$.fragment,f),C(z7.$$.fragment,f),C(w8.$$.fragment,f),C(A8.$$.fragment,f),C(y8.$$.fragment,f),C(W7.$$.fragment,f),C(x8.$$.fragment,f),C(Y7.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(P8.$$.fragment,f),C(Z7.$$.fragment,f),C(B8.$$.fragment,f),C(r9.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(a9.$$.fragment,f),C(D8.$$.fragment,f),C(f9.$$.fragment,f),C(G8.$$.fragment,f),C(O8.$$.fragment,f),C(X8.$$.fragment,f),C(g9.$$.fragment,f),C(z8.$$.fragment,f),C(_9.$$.fragment,f),C(Q8.$$.fragment,f),C(W8.$$.fragment,f),C(U8.$$.fragment,f),C(b9.$$.fragment,f),C(J8.$$.fragment,f),C(pM.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(ex.$$.fragment,f),C(uM.$$.fragment,f),C(ox.$$.fragment,f),C(GM.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(VM.$$.fragment,f),C(sx.$$.fragment,f),C(t4.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(n4.$$.fragment,f),C(fx.$$.fragment,f),C(g4.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(p4.$$.fragment,f),C(_x.$$.fragment,f),C(I4.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(q4.$$.fragment,f),C(Tx.$$.fragment,f),C(U4.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(Y4.$$.fragment,f),C(Ax.$$.fragment,f),C(CE.$$.fragment,f),C(Lx.$$.fragment,f),C(yx.$$.fragment,f),C($x.$$.fragment,f),C(AE.$$.fragment,f),C(kx.$$.fragment,f),C(XE.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(QE.$$.fragment,f),C(Ix.$$.fragment,f),C(UE.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C(YE.$$.fragment,f),C(Ox.$$.fragment,f),C(ZE.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Qx.$$.fragment,f),C(oC.$$.fragment,f),C(Wx.$$.fragment,f),C(MC.$$.fragment,f),C(Hx.$$.fragment,f),C(Ux.$$.fragment,f),C(Yx.$$.fragment,f),C(CC.$$.fragment,f),C(Kx.$$.fragment,f),C(zC.$$.fragment,f),C(Zx.$$.fragment,f),C(e$.$$.fragment,f),C(r$.$$.fragment,f),C(WC.$$.fragment,f),C(t$.$$.fragment,f),C(UC.$$.fragment,f),C(a$.$$.fragment,f),C(n$.$$.fragment,f),C(l$.$$.fragment,f),C(YC.$$.fragment,f),C(i$.$$.fragment,f),C(ZC.$$.fragment,f),C(d$.$$.fragment,f),C(c$.$$.fragment,f),C(m$.$$.fragment,f),C(o3.$$.fragment,f),C(g$.$$.fragment,f),C(x3.$$.fragment,f),C(h$.$$.fragment,f),C(p$.$$.fragment,f),C(u$.$$.fragment,f),C(k3.$$.fragment,f),C(b$.$$.fragment,f),C(O3.$$.fragment,f),C(v$.$$.fragment,f),C(F$.$$.fragment,f),C(M$.$$.fragment,f),C(X3.$$.fragment,f),C(E$.$$.fragment,f),C(a5.$$.fragment,f),C(C$.$$.fragment,f),C(w$.$$.fragment,f),C(L$.$$.fragment,f),C(s5.$$.fragment,f),C(y$.$$.fragment,f),C(u5.$$.fragment,f),C(x$.$$.fragment,f),C($$.$$.fragment,f),C(S$.$$.fragment,f),C(v5.$$.fragment,f),C(R$.$$.fragment,f),C($5.$$.fragment,f),C(P$.$$.fragment,f),C(B$.$$.fragment,f),C(N$.$$.fragment,f),C(S5.$$.fragment,f),C(q$.$$.fragment,f),C(V5.$$.fragment,f),C(j$.$$.fragment,f),C(D$.$$.fragment,f),C(O$.$$.fragment,f),C(z5.$$.fragment,f),C(V$.$$.fragment,f),C(rw.$$.fragment,f),C(X$.$$.fragment,f),C(z$.$$.fragment,f),C(W$.$$.fragment,f),C(aw.$$.fragment,f),C(H$.$$.fragment,f),C(gw.$$.fragment,f),C(U$.$$.fragment,f),C(J$.$$.fragment,f),C(K$.$$.fragment,f),C(pw.$$.fragment,f),C(Z$.$$.fragment,f),C(Cw.$$.fragment,f),C(ek.$$.fragment,f),C(ok.$$.fragment,f),C(tk.$$.fragment,f),C(Aw.$$.fragment,f),C(ak.$$.fragment,f),C(yw.$$.fragment,f),C(nk.$$.fragment,f),C(sk.$$.fragment,f),C(ik.$$.fragment,f),C($w.$$.fragment,f),C(dk.$$.fragment,f),C(Rw.$$.fragment,f),C(fk.$$.fragment,f),C(mk.$$.fragment,f),C(hk.$$.fragment,f),C(Bw.$$.fragment,f),C(pk.$$.fragment,f),C(Nw.$$.fragment,f),cQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Pf),f&&t(lt),f&&t(Oe),f&&t(We),f&&t(If),w(Sa,f),f&&t(He),f&&t(Ae),f&&t(Ao),f&&t(Ra),f&&t(nXe),f&&t(Pi),w(sL),f&&t(sXe),f&&t(qn),f&&t(lXe),w(lL,f),f&&t(iXe),f&&t(OS),f&&t(dXe),w(jf,f),f&&t(cXe),f&&t(Bi),w(iL),f&&t(fXe),f&&t(Lo),w(dL),w(mL),w(Yg),w(gL),f&&t(mXe),f&&t(Ni),w(hL),f&&t(gXe),f&&t(yo),w(pL),w(bL),w(Rh),w(vL),f&&t(hXe),f&&t(qi),w(FL),f&&t(pXe),f&&t(xo),w(TL),w(CL),w(_p),w(up),w(wL),f&&t(_Xe),f&&t(ji),w(AL),f&&t(uXe),f&&t($o),w(LL),w($L),w(qp),w(jp),w(kL),f&&t(bXe),f&&t(Gi),w(SL),f&&t(vXe),f&&t(ko),w(RL),w(BL),w(Op),w(IL),w(Qu),f&&t(FXe),f&&t(Xi),w(NL),f&&t(TXe),f&&t(So),w(qL),w(DL),w(Hu),w(GL),w(G1),f&&t(MXe),f&&t(Wi),w(OL),f&&t(EXe),f&&t(Ro),w(VL),w(zL),w(V1),w(QL),w(k2),f&&t(CXe),f&&t(Ji),w(WL),f&&t(wXe),f&&t(Po),w(HL),w(JL),w(R2),w(YL),w(vb),f&&t(AXe),f&&t(Zi),w(KL),f&&t(LXe),f&&t(Bo),w(ZL),w(oy),w(Tb),w(ry),w(Gb),f&&t(yXe),f&&t(rd),w(ty),f&&t(xXe),f&&t(Io),w(ay),w(sy),w(Vb),w(ly),w(Gv),f&&t($Xe),f&&t(nd),w(iy),f&&t(kXe),f&&t(No),w(dy),w(fy),w(Vv),w(my),w(T0),f&&t(SXe),f&&t(id),w(gy),f&&t(RXe),f&&t(qo),w(hy),w(_y),w(E0),w(uy),w(k0),f&&t(PXe),f&&t(fd),w(by),f&&t(BXe),f&&t(Do),w(vy),w(Ty),w(R0),w(My),w(uF),f&&t(IXe),f&&t(hd),w(Ey),f&&t(NXe),f&&t(Go),w(Cy),w(Ay),w(vF),w(Ly),w(dT),f&&t(qXe),f&&t(ud),w(yy),f&&t(jXe),f&&t(Oo),w(xy),w(ky),w(fT),w(Sy),w(hT),f&&t(DXe),f&&t(Fd),w(Ry),f&&t(GXe),f&&t(Vo),w(Py),w(Iy),w(_T),w(Ny),w(kT),f&&t(OXe),f&&t(Ed),w(qy),f&&t(VXe),f&&t(Xo),w(jy),w(Gy),w(RT),w(Oy),w(IT),f&&t(XXe),f&&t(Ad),w(Vy),f&&t(zXe),f&&t(zo),w(Xy),w(Qy),w(qT),w(Wy),w(GT),f&&t(QXe),f&&t(xd),w(Hy),f&&t(WXe),f&&t(Qo),w(Uy),w(Yy),w(VT),w(Ky),w(e7),f&&t(HXe),f&&t(Sd),w(Zy),f&&t(UXe),f&&t(Wo),w(e8),w(r8),w(r7),w(t8),w(d7),f&&t(JXe),f&&t(Bd),w(a8),f&&t(YXe),f&&t(Ho),w(n8),w(l8),w(f7),w(i8),w(E7),f&&t(KXe),f&&t(qd),w(d8),f&&t(ZXe),f&&t(Uo),w(c8),w(m8),w(w7),w(g8),w(x7),f&&t(eze),f&&t(Gd),w(p8),f&&t(oze),f&&t(Jo),w(_8),w(b8),w(k7),w(v8),w(q7),f&&t(rze),f&&t(Xd),w(F8),f&&t(tze),f&&t(Yo),w(T8),w(E8),w(D7),w(C8),w(z7),f&&t(aze),f&&t(Hd),w(w8),f&&t(nze),f&&t(Ko),w(A8),w(y8),w(W7),w(x8),w(Y7),f&&t(sze),f&&t(Yd),w(k8),f&&t(lze),f&&t(Zo),w(S8),w(P8),w(Z7),w(B8),w(r9),f&&t(ize),f&&t(ec),w(I8),f&&t(dze),f&&t(er),w(N8),w(j8),w(a9),w(D8),w(f9),f&&t(cze),f&&t(tc),w(G8),f&&t(fze),f&&t(or),w(O8),w(X8),w(g9),w(z8),w(_9),f&&t(mze),f&&t(sc),w(Q8),f&&t(gze),f&&t(rr),w(W8),w(U8),w(b9),w(J8),w(pM),f&&t(hze),f&&t(dc),w(Y8),f&&t(pze),f&&t(tr),w(K8),w(ex),w(uM),w(ox),w(GM),f&&t(_ze),f&&t(mc),w(rx),f&&t(uze),f&&t(ar),w(tx),w(nx),w(VM),w(sx),w(t4),f&&t(bze),f&&t(pc),w(lx),f&&t(vze),f&&t(nr),w(ix),w(cx),w(n4),w(fx),w(g4),f&&t(Fze),f&&t(bc),w(mx),f&&t(Tze),f&&t(sr),w(gx),w(px),w(p4),w(_x),w(I4),f&&t(Mze),f&&t(Tc),w(ux),f&&t(Eze),f&&t(lr),w(bx),w(Fx),w(q4),w(Tx),w(U4),f&&t(Cze),f&&t(Cc),w(Mx),f&&t(wze),f&&t(ir),w(Ex),w(wx),w(Y4),w(Ax),w(CE),f&&t(Aze),f&&t(Lc),w(Lx),f&&t(Lze),f&&t(dr),w(yx),w($x),w(AE),w(kx),w(XE),f&&t(yze),f&&t($c),w(Sx),f&&t(xze),f&&t(cr),w(Rx),w(Bx),w(QE),w(Ix),w(UE),f&&t($ze),f&&t(Rc),w(qx),f&&t(kze),f&&t(fr),w(jx),w(Gx),w(YE),w(Ox),w(ZE),f&&t(Sze),f&&t(Ic),w(Vx),f&&t(Rze),f&&t(mr),w(Xx),w(Qx),w(oC),w(Wx),w(MC),f&&t(Pze),f&&t(jc),w(Hx),f&&t(Bze),f&&t(gr),w(Ux),w(Yx),w(CC),w(Kx),w(zC),f&&t(Ize),f&&t(Oc),w(Zx),f&&t(Nze),f&&t(hr),w(e$),w(r$),w(WC),w(t$),w(UC),f&&t(qze),f&&t(zc),w(a$),f&&t(jze),f&&t(pr),w(n$),w(l$),w(YC),w(i$),w(ZC),f&&t(Dze),f&&t(Hc),w(d$),f&&t(Gze),f&&t(_r),w(c$),w(m$),w(o3),w(g$),w(x3),f&&t(Oze),f&&t(Yc),w(h$),f&&t(Vze),f&&t(ur),w(p$),w(u$),w(k3),w(b$),w(O3),f&&t(Xze),f&&t(ef),w(v$),f&&t(zze),f&&t(br),w(F$),w(M$),w(X3),w(E$),w(a5),f&&t(Qze),f&&t(tf),w(C$),f&&t(Wze),f&&t(vr),w(w$),w(L$),w(s5),w(y$),w(u5),f&&t(Hze),f&&t(sf),w(x$),f&&t(Uze),f&&t(Fr),w($$),w(S$),w(v5),w(R$),w($5),f&&t(Jze),f&&t(cf),w(P$),f&&t(Yze),f&&t(Tr),w(B$),w(N$),w(S5),w(q$),w(V5),f&&t(Kze),f&&t(gf),w(j$),f&&t(Zze),f&&t(Mr),w(D$),w(O$),w(z5),w(V$),w(rw),f&&t(eQe),f&&t(_f),w(X$),f&&t(oQe),f&&t(Er),w(z$),w(W$),w(aw),w(H$),w(gw),f&&t(rQe),f&&t(vf),w(U$),f&&t(tQe),f&&t(Cr),w(J$),w(K$),w(pw),w(Z$),w(Cw),f&&t(aQe),f&&t(Mf),w(ek),f&&t(nQe),f&&t(wr),w(ok),w(tk),w(Aw),w(ak),w(yw),f&&t(sQe),f&&t(wf),w(nk),f&&t(lQe),f&&t(Ar),w(sk),w(ik),w($w),w(dk),w(Rw),f&&t(iQe),f&&t(yf),w(fk),f&&t(dQe),f&&t(Lr),w(mk),w(hk),w(Bw),w(pk),w(Nw)}}}const tUt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function aUt($){return rWt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class fUt extends KQt{constructor(g){super();ZQt(this,g,aUt,rUt,eWt,{})}}export{fUt as default,tUt as metadata};
