import{S as kg,i as Mg,s as Ig,e as o,k as c,w as S,t as s,M as Cg,c as a,d as t,m,a as n,x as w,h as i,b as l,N as jg,G as e,g as _,y as $,q as T,o as F,B as y,v as Pg,L as Nr}from"../../chunks/vendor-hf-doc-builder.js";import{T as Or}from"../../chunks/Tip-hf-doc-builder.js";import{D as I}from"../../chunks/Docstring-hf-doc-builder.js";import{C as Hr}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as de}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Lr}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Dg(E){let f,v,u,p,b;return p=new Hr({props:{code:`from transformers import SegformerModel, SegformerConfig

# Initializing a SegFormer nvidia/segformer-b0-finetuned-ade-512-512 style configuration
configuration = SegformerConfig()

# Initializing a model from the nvidia/segformer-b0-finetuned-ade-512-512 style configuration
model = SegformerModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SegformerModel, SegformerConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a SegFormer nvidia/segformer-b0-finetuned-ade-512-512 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = SegformerConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the nvidia/segformer-b0-finetuned-ade-512-512 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SegformerModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){f=o("p"),v=s("Example:"),u=c(),S(p.$$.fragment)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Example:"),g.forEach(t),u=m(d),w(p.$$.fragment,d)},m(d,g){_(d,f,g),e(f,v),_(d,u,g),$(p,d,g),b=!0},p:Nr,i(d){b||(T(p.$$.fragment,d),b=!0)},o(d){F(p.$$.fragment,d),b=!1},d(d){d&&t(f),d&&t(u),y(p,d)}}}function Ag(E){let f,v;return{c(){f=o("p"),v=s(`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`)},l(u){f=a(u,"P",{});var p=n(f);v=i(p,`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`),p.forEach(t)},m(u,p){_(u,f,p),e(f,v)},d(u){u&&t(f)}}}function zg(E){let f,v,u,p,b;return{c(){f=o("p"),v=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=o("code"),p=s("Module"),b=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(g,"CODE",{});var x=n(u);p=i(x,"Module"),x.forEach(t),b=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(t)},m(d,g){_(d,f,g),e(f,v),e(f,u),e(u,p),e(f,b)},d(d){d&&t(f)}}}function qg(E){let f,v,u,p,b;return p=new Hr({props:{code:`from transformers import SegformerFeatureExtractor, SegformerModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = SegformerFeatureExtractor.from_pretrained("nvidia/mit-b0")
model = SegformerModel.from_pretrained("nvidia/mit-b0")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SegformerFeatureExtractor, SegformerModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = SegformerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SegformerModel.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">256</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>]`}}),{c(){f=o("p"),v=s("Example:"),u=c(),S(p.$$.fragment)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Example:"),g.forEach(t),u=m(d),w(p.$$.fragment,d)},m(d,g){_(d,f,g),e(f,v),_(d,u,g),$(p,d,g),b=!0},p:Nr,i(d){b||(T(p.$$.fragment,d),b=!0)},o(d){F(p.$$.fragment,d),b=!1},d(d){d&&t(f),d&&t(u),y(p,d)}}}function Og(E){let f,v,u,p,b;return{c(){f=o("p"),v=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=o("code"),p=s("Module"),b=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(g,"CODE",{});var x=n(u);p=i(x,"Module"),x.forEach(t),b=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(t)},m(d,g){_(d,f,g),e(f,v),e(f,u),e(u,p),e(f,b)},d(d){d&&t(f)}}}function Lg(E){let f,v,u,p,b;return p=new Hr({props:{code:`from transformers import SegformerFeatureExtractor, SegformerForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = SegformerFeatureExtractor.from_pretrained("nvidia/mit-b0")
model = SegformerForImageClassification.from_pretrained("nvidia/mit-b0")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SegformerFeatureExtractor, SegformerForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = SegformerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SegformerForImageClassification.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),{c(){f=o("p"),v=s("Example:"),u=c(),S(p.$$.fragment)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Example:"),g.forEach(t),u=m(d),w(p.$$.fragment,d)},m(d,g){_(d,f,g),e(f,v),_(d,u,g),$(p,d,g),b=!0},p:Nr,i(d){b||(T(p.$$.fragment,d),b=!0)},o(d){F(p.$$.fragment,d),b=!1},d(d){d&&t(f),d&&t(u),y(p,d)}}}function Ng(E){let f,v,u,p,b;return{c(){f=o("p"),v=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=o("code"),p=s("Module"),b=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(g,"CODE",{});var x=n(u);p=i(x,"Module"),x.forEach(t),b=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(t)},m(d,g){_(d,f,g),e(f,v),e(f,u),e(u,p),e(f,b)},d(d){d&&t(f)}}}function Hg(E){let f,v,u,p,b;return p=new Hr({props:{code:`from transformers import SegformerFeatureExtractor, SegformerForSemanticSegmentation
from PIL import Image
import requests

feature_extractor = SegformerFeatureExtractor.from_pretrained("nvidia/segformer-b0-finetuned-ade-512-512")
model = SegformerForSemanticSegmentation.from_pretrained("nvidia/segformer-b0-finetuned-ade-512-512")

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

inputs = feature_extractor(images=image, return_tensors="pt")
outputs = model(**inputs)
logits = outputs.logits  # shape (batch_size, num_labels, height, width)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SegformerFeatureExtractor, SegformerForSemanticSegmentation
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = SegformerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;nvidia/segformer-b0-finetuned-ade-512-512&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SegformerForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;nvidia/segformer-b0-finetuned-ade-512-512&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits  <span class="hljs-comment"># shape (batch_size, num_labels, height, width)</span>`}}),{c(){f=o("p"),v=s("Examples:"),u=c(),S(p.$$.fragment)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Examples:"),g.forEach(t),u=m(d),w(p.$$.fragment,d)},m(d,g){_(d,f,g),e(f,v),_(d,u,g),$(p,d,g),b=!0},p:Nr,i(d){b||(T(p.$$.fragment,d),b=!0)},o(d){F(p.$$.fragment,d),b=!1},d(d){d&&t(f),d&&t(u),y(p,d)}}}function Wg(E){let f,v,u,p,b;return{c(){f=o("p"),v=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=o("code"),p=s("Module"),b=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(g,"CODE",{});var x=n(u);p=i(x,"Module"),x.forEach(t),b=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(t)},m(d,g){_(d,f,g),e(f,v),e(f,u),e(u,p),e(f,b)},d(d){d&&t(f)}}}function Rg(E){let f,v,u,p,b;return p=new Hr({props:{code:`from transformers import SegformerFeatureExtractor, TFSegformerModel
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = SegformerFeatureExtractor.from_pretrained("nvidia/mit-b0")
model = TFSegformerModel.from_pretrained("nvidia/mit-b0")

inputs = feature_extractor(image, return_tensors="tf")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SegformerFeatureExtractor, TFSegformerModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = SegformerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFSegformerModel.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">256</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>]`}}),{c(){f=o("p"),v=s("Example:"),u=c(),S(p.$$.fragment)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Example:"),g.forEach(t),u=m(d),w(p.$$.fragment,d)},m(d,g){_(d,f,g),e(f,v),_(d,u,g),$(p,d,g),b=!0},p:Nr,i(d){b||(T(p.$$.fragment,d),b=!0)},o(d){F(p.$$.fragment,d),b=!1},d(d){d&&t(f),d&&t(u),y(p,d)}}}function Bg(E){let f,v,u,p,b;return{c(){f=o("p"),v=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=o("code"),p=s("Module"),b=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(g,"CODE",{});var x=n(u);p=i(x,"Module"),x.forEach(t),b=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(t)},m(d,g){_(d,f,g),e(f,v),e(f,u),e(u,p),e(f,b)},d(d){d&&t(f)}}}function Ug(E){let f,v,u,p,b;return p=new Hr({props:{code:`from transformers import SegformerFeatureExtractor, TFSegformerForImageClassification
import tensorflow as tf
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = SegformerFeatureExtractor.from_pretrained("nvidia/mit-b0")
model = TFSegformerForImageClassification.from_pretrained("nvidia/mit-b0")

inputs = feature_extractor(image, return_tensors="tf")
logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = int(tf.math.argmax(logits, axis=-1))
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SegformerFeatureExtractor, TFSegformerForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = SegformerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFSegformerForImageClassification.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = <span class="hljs-built_in">int</span>(tf.math.argmax(logits, axis=-<span class="hljs-number">1</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),{c(){f=o("p"),v=s("Example:"),u=c(),S(p.$$.fragment)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Example:"),g.forEach(t),u=m(d),w(p.$$.fragment,d)},m(d,g){_(d,f,g),e(f,v),_(d,u,g),$(p,d,g),b=!0},p:Nr,i(d){b||(T(p.$$.fragment,d),b=!0)},o(d){F(p.$$.fragment,d),b=!1},d(d){d&&t(f),d&&t(u),y(p,d)}}}function Vg(E){let f,v,u,p,b;return{c(){f=o("p"),v=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=o("code"),p=s("Module"),b=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(g,"CODE",{});var x=n(u);p=i(x,"Module"),x.forEach(t),b=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(t)},m(d,g){_(d,f,g),e(f,v),e(f,u),e(u,p),e(f,b)},d(d){d&&t(f)}}}function Kg(E){let f,v,u,p,b;return p=new Hr({props:{code:`from transformers import SegformerFeatureExtractor, TFSegformerForSemanticSegmentation
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = SegformerFeatureExtractor.from_pretrained("nvidia/segformer-b0-finetuned-ade-512-512")
model = TFSegformerForSemanticSegmentation.from_pretrained("nvidia/segformer-b0-finetuned-ade-512-512")

inputs = feature_extractor(images=image, return_tensors="tf")
outputs = model(**inputs, training=False)
# logits are of shape (batch_size, num_labels, height, width)
logits = outputs.logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SegformerFeatureExtractor, TFSegformerForSemanticSegmentation
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = SegformerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;nvidia/segformer-b0-finetuned-ade-512-512&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFSegformerForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;nvidia/segformer-b0-finetuned-ade-512-512&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, training=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># logits are of shape (batch_size, num_labels, height, width)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`}}),{c(){f=o("p"),v=s("Examples:"),u=c(),S(p.$$.fragment)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Examples:"),g.forEach(t),u=m(d),w(p.$$.fragment,d)},m(d,g){_(d,f,g),e(f,v),_(d,u,g),$(p,d,g),b=!0},p:Nr,i(d){b||(T(p.$$.fragment,d),b=!0)},o(d){F(p.$$.fragment,d),b=!1},d(d){d&&t(f),d&&t(u),y(p,d)}}}function Gg(E){let f,v,u,p,b,d,g,x,Fs,vn,pe,Oe,ea,yt,ys,ta,Es,Sn,Le,xs,Et,ks,Ms,wn,Wr,Is,$n,Rr,ra,Cs,Tn,Ne,js,xt,Ps,Ds,Fn,kt,Xm,yn,G,As,Mt,zs,qs,It,Os,Ls,Ct,Ns,Hs,En,Br,Ws,xn,C,W,Rs,Ur,Bs,Us,Vr,Vs,Ks,Kr,Gs,Ys,jt,Js,Xs,Zs,ue,Qs,Pt,ei,ti,Dt,ri,oi,ai,At,ni,zt,si,ii,li,qt,di,oa,ci,mi,fi,_e,hi,Gr,gi,pi,Ot,ui,_i,bi,k,vi,Yr,Si,wi,aa,$i,Ti,na,Fi,yi,sa,Ei,xi,ia,ki,Mi,la,Ii,Ci,Jr,ji,Pi,da,Di,Ai,ca,zi,qi,Oi,Lt,Li,Nt,Ni,Hi,kn,He,ma,j,Xr,fa,Wi,Ri,ha,ga,Bi,Ui,pa,ua,Vi,Ki,Zr,_a,Gi,Yi,Qr,ba,Ji,Xi,eo,va,Zi,Qi,P,D,to,el,tl,Sa,rl,ol,wa,al,nl,ro,sl,il,oo,ll,dl,ao,cl,ml,A,no,fl,hl,$a,gl,pl,Ta,ul,_l,so,bl,vl,io,Sl,wl,lo,$l,Tl,z,co,Fl,yl,Fa,El,xl,ya,kl,Ml,mo,Il,Cl,fo,jl,Pl,ho,Dl,Al,q,go,zl,ql,Ea,Ol,Ll,xa,Nl,Hl,po,Wl,Rl,uo,Bl,Ul,_o,Vl,Kl,O,bo,Gl,Yl,ka,Jl,Xl,Ma,Zl,Ql,vo,ed,td,So,rd,od,wo,ad,nd,L,$o,sd,id,Ia,ld,dd,Ca,cd,md,To,fd,hd,Fo,gd,pd,yo,ud,Mn,We,_d,Ht,bd,vd,In,be,Re,ja,Wt,Sd,Pa,wd,Cn,R,Rt,$d,ve,Td,Eo,Fd,yd,Bt,Ed,xd,kd,Se,Md,xo,Id,Cd,ko,jd,Pd,Dd,Be,jn,we,Ue,Da,Ut,Ad,Aa,zd,Pn,B,Vt,qd,za,Od,Ld,Kt,Nd,Mo,Hd,Wd,Rd,fe,Gt,Bd,qa,Ud,Vd,Ve,Dn,$e,Ke,Oa,Yt,Kd,La,Gd,An,ce,Jt,Yd,Xt,Jd,Zt,Xd,Zd,Qd,Y,Qt,ec,Te,tc,Io,rc,oc,Na,ac,nc,sc,Ge,ic,Ye,zn,Fe,Je,Ha,er,lc,Wa,dc,qn,ye,tr,cc,Co,rr,On,Ee,Xe,Ra,or,mc,Ba,fc,Ln,U,ar,hc,Ua,gc,pc,nr,uc,sr,_c,bc,vc,J,ir,Sc,xe,wc,jo,$c,Tc,Va,Fc,yc,Ec,Ze,xc,Qe,Nn,ke,et,Ka,lr,kc,Ga,Mc,Hn,me,dr,Ic,cr,Cc,mr,jc,Pc,Dc,X,fr,Ac,Me,zc,Po,qc,Oc,Ya,Lc,Nc,Hc,tt,Wc,rt,Wn,Ie,ot,Ja,hr,Rc,Xa,Bc,Rn,Ce,gr,Uc,Do,pr,Bn,je,at,Za,ur,Vc,Qa,Kc,Un,V,_r,Gc,br,Yc,Ao,Jc,Xc,Zc,vr,Qc,Sr,em,tm,rm,Z,wr,om,Pe,am,zo,nm,sm,en,im,lm,dm,nt,cm,st,Vn,De,it,tn,$r,mm,rn,fm,Kn,N,Tr,hm,on,gm,pm,Fr,um,qo,_m,bm,vm,yr,Sm,Er,wm,$m,Tm,Q,xr,Fm,Ae,ym,Oo,Em,xm,an,km,Mm,Im,lt,Cm,dt,Gn,ze,ct,nn,kr,jm,sn,Pm,Yn,K,Mr,Dm,Ir,Am,Lo,zm,qm,Om,Cr,Lm,jr,Nm,Hm,Wm,ee,Pr,Rm,qe,Bm,No,Um,Vm,ln,Km,Gm,Ym,mt,Jm,ft,Jn;return d=new de({}),yt=new de({}),Wt=new de({}),Rt=new I({props:{name:"class transformers.SegformerConfig",anchor:"transformers.SegformerConfig",parameters:[{name:"num_channels",val:" = 3"},{name:"num_encoder_blocks",val:" = 4"},{name:"depths",val:" = [2, 2, 2, 2]"},{name:"sr_ratios",val:" = [8, 4, 2, 1]"},{name:"hidden_sizes",val:" = [32, 64, 160, 256]"},{name:"patch_sizes",val:" = [7, 3, 3, 3]"},{name:"strides",val:" = [4, 2, 2, 2]"},{name:"num_attention_heads",val:" = [1, 2, 5, 8]"},{name:"mlp_ratios",val:" = [4, 4, 4, 4]"},{name:"hidden_act",val:" = 'gelu'"},{name:"hidden_dropout_prob",val:" = 0.0"},{name:"attention_probs_dropout_prob",val:" = 0.0"},{name:"classifier_dropout_prob",val:" = 0.1"},{name:"initializer_range",val:" = 0.02"},{name:"drop_path_rate",val:" = 0.1"},{name:"layer_norm_eps",val:" = 1e-06"},{name:"decoder_hidden_size",val:" = 256"},{name:"is_encoder_decoder",val:" = False"},{name:"semantic_loss_ignore_index",val:" = 255"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SegformerConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.SegformerConfig.num_encoder_blocks",description:`<strong>num_encoder_blocks</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
The number of encoder blocks (i.e. stages in the Mix Transformer encoder).`,name:"num_encoder_blocks"},{anchor:"transformers.SegformerConfig.depths",description:`<strong>depths</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [2, 2, 2, 2]) &#x2014;
The number of layers in each encoder block.`,name:"depths"},{anchor:"transformers.SegformerConfig.sr_ratios",description:`<strong>sr_ratios</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [8, 4, 2, 1]) &#x2014;
Sequence reduction ratios in each encoder block.`,name:"sr_ratios"},{anchor:"transformers.SegformerConfig.hidden_sizes",description:`<strong>hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [32, 64, 160, 256]) &#x2014;
Dimension of each of the encoder blocks.`,name:"hidden_sizes"},{anchor:"transformers.SegformerConfig.patch_sizes",description:`<strong>patch_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [7, 3, 3, 3]) &#x2014;
Patch size before each encoder block.`,name:"patch_sizes"},{anchor:"transformers.SegformerConfig.strides",description:`<strong>strides</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [4, 2, 2, 2]) &#x2014;
Stride before each encoder block.`,name:"strides"},{anchor:"transformers.SegformerConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [1, 2, 5, 8]) &#x2014;
Number of attention heads for each attention layer in each block of the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.SegformerConfig.mlp_ratios",description:`<strong>mlp_ratios</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [4, 4, 4, 4]) &#x2014;
Ratio of the size of the hidden layer compared to the size of the input layer of the Mix FFNs in the
encoder blocks.`,name:"mlp_ratios"},{anchor:"transformers.SegformerConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.SegformerConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.`,name:"hidden_dropout_prob"},{anchor:"transformers.SegformerConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.SegformerConfig.classifier_dropout_prob",description:`<strong>classifier_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probability before the classification head.`,name:"classifier_dropout_prob"},{anchor:"transformers.SegformerConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.SegformerConfig.drop_path_rate",description:`<strong>drop_path_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probability for stochastic depth, used in the blocks of the Transformer encoder.`,name:"drop_path_rate"},{anchor:"transformers.SegformerConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-6) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.SegformerConfig.decoder_hidden_size",description:`<strong>decoder_hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
The dimension of the all-MLP decode head.`,name:"decoder_hidden_size"},{anchor:"transformers.SegformerConfig.semantic_loss_ignore_index",description:`<strong>semantic_loss_ignore_index</strong> (<code>int</code>, <em>optional</em>, defaults to 255) &#x2014;
The index that is ignored by the loss function of the semantic segmentation model.`,name:"semantic_loss_ignore_index"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/segformer/configuration_segformer.py#L33"}}),Be=new Lr({props:{anchor:"transformers.SegformerConfig.example",$$slots:{default:[Dg]},$$scope:{ctx:E}}}),Ut=new de({}),Vt=new I({props:{name:"class transformers.SegformerFeatureExtractor",anchor:"transformers.SegformerFeatureExtractor",parameters:[{name:"do_resize",val:" = True"},{name:"size",val:" = 512"},{name:"resample",val:" = <Resampling.BILINEAR: 2>"},{name:"do_normalize",val:" = True"},{name:"image_mean",val:" = None"},{name:"image_std",val:" = None"},{name:"reduce_labels",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SegformerFeatureExtractor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the input based on a certain <code>size</code>.`,name:"do_resize"},{anchor:"transformers.SegformerFeatureExtractor.size",description:`<strong>size</strong> (<code>int</code> or <code>Tuple(int)</code>, <em>optional</em>, defaults to 512) &#x2014;
Resize the input to the given size. If a tuple is provided, it should be (width, height). If only an
integer is provided, then the input will be resized to (size, size). Only has an effect if <code>do_resize</code> is
set to <code>True</code>.`,name:"size"},{anchor:"transformers.SegformerFeatureExtractor.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>PIL.Image.BILINEAR</code>) &#x2014;
An optional resampling filter. This can be one of <code>PIL.Image.NEAREST</code>, <code>PIL.Image.BOX</code>,
<code>PIL.Image.BILINEAR</code>, <code>PIL.Image.HAMMING</code>, <code>PIL.Image.BICUBIC</code> or <code>PIL.Image.LANCZOS</code>. Only has an effect
if <code>do_resize</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.SegformerFeatureExtractor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to normalize the input with mean and standard deviation.`,name:"do_normalize"},{anchor:"transformers.SegformerFeatureExtractor.image_mean",description:`<strong>image_mean</strong> (<code>int</code>, <em>optional</em>, defaults to <code>[0.485, 0.456, 0.406]</code>) &#x2014;
The sequence of means for each channel, to be used when normalizing images. Defaults to the ImageNet mean.`,name:"image_mean"},{anchor:"transformers.SegformerFeatureExtractor.image_std",description:`<strong>image_std</strong> (<code>int</code>, <em>optional</em>, defaults to <code>[0.229, 0.224, 0.225]</code>) &#x2014;
The sequence of standard deviations for each channel, to be used when normalizing images. Defaults to the
ImageNet std.`,name:"image_std"},{anchor:"transformers.SegformerFeatureExtractor.reduce_labels",description:`<strong>reduce_labels</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to reduce all label values of segmentation maps by 1. Usually used for datasets where 0 is
used for background, and background itself is not included in all classes of a dataset (e.g. ADE20k). The
background label will be replaced by 255.`,name:"reduce_labels"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/segformer/feature_extraction_segformer.py#L36"}}),Gt=new I({props:{name:"__call__",anchor:"transformers.SegformerFeatureExtractor.__call__",parameters:[{name:"images",val:": typing.Union[PIL.Image.Image, numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[PIL.Image.Image], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]]"},{name:"segmentation_maps",val:": typing.Union[PIL.Image.Image, numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[PIL.Image.Image], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]] = None"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SegformerFeatureExtractor.__call__.images",description:`<strong>images</strong> (<code>PIL.Image.Image</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>, <code>List[PIL.Image.Image]</code>, <code>List[np.ndarray]</code>, <code>List[torch.Tensor]</code>) &#x2014;
The image or batch of images to be prepared. Each image can be a PIL image, NumPy array or PyTorch
tensor. In case of a NumPy array/PyTorch tensor, each image should be of shape (C, H, W), where C is
the number of channels, H and W are image height and width.`,name:"images"},{anchor:"transformers.SegformerFeatureExtractor.__call__.segmentation_maps",description:`<strong>segmentation_maps</strong> (<code>PIL.Image.Image</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>, <code>List[PIL.Image.Image]</code>, <code>List[np.ndarray]</code>, <code>List[torch.Tensor]</code>, <em>optional</em>) &#x2014;
Optionally, the corresponding semantic segmentation maps with the pixel-wise annotations.`,name:"segmentation_maps"},{anchor:"transformers.SegformerFeatureExtractor.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/pr_17910/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>, defaults to <code>&apos;np&apos;</code>) &#x2014;
If set, will return tensors of a particular framework. Acceptable values are:</p>
<ul>
<li><code>&apos;tf&apos;</code>: Return TensorFlow <code>tf.constant</code> objects.</li>
<li><code>&apos;pt&apos;</code>: Return PyTorch <code>torch.Tensor</code> objects.</li>
<li><code>&apos;np&apos;</code>: Return NumPy <code>np.ndarray</code> objects.</li>
<li><code>&apos;jax&apos;</code>: Return JAX <code>jnp.ndarray</code> objects.</li>
</ul>`,name:"return_tensors"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/segformer/feature_extraction_segformer.py#L89",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_17910/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a> with the following fields:</p>
<ul>
<li><strong>pixel_values</strong> \u2014 Pixel values to be fed to a model, of shape (batch_size, num_channels, height,
width).</li>
<li><strong>labels</strong> \u2014 Optional labels to be fed to a model (when <code>segmentation_maps</code> are provided)</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_17910/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a></p>
`}}),Ve=new Or({props:{warning:!0,$$slots:{default:[Ag]},$$scope:{ctx:E}}}),Yt=new de({}),Jt=new I({props:{name:"class transformers.SegformerModel",anchor:"transformers.SegformerModel",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.SegformerModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/segformer/modeling_segformer.py#L511"}}),Qt=new I({props:{name:"forward",anchor:"transformers.SegformerModel.forward",parameters:[{name:"pixel_values",val:": FloatTensor"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.SegformerModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Padding will be ignored by default should you provide it. Pixel values can be obtained using
<a href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerFeatureExtractor">SegformerFeatureExtractor</a>. See <a href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerFeatureExtractor.__call__">SegformerFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.SegformerModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.SegformerModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.SegformerModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17910/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/segformer/modeling_segformer.py#L530",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_17910/en/main_classes/output#transformers.modeling_outputs.BaseModelOutput"
>transformers.modeling_outputs.BaseModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerConfig"
>SegformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_17910/en/main_classes/output#transformers.modeling_outputs.BaseModelOutput"
>transformers.modeling_outputs.BaseModelOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Ge=new Or({props:{$$slots:{default:[zg]},$$scope:{ctx:E}}}),Ye=new Lr({props:{anchor:"transformers.SegformerModel.forward.example",$$slots:{default:[qg]},$$scope:{ctx:E}}}),er=new de({}),tr=new I({props:{name:"class transformers.SegformerDecodeHead",anchor:"transformers.SegformerDecodeHead",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/segformer/modeling_segformer.py#L684"}}),rr=new I({props:{name:"forward",anchor:"transformers.SegformerDecodeHead.forward",parameters:[{name:"encoder_hidden_states",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/segformer/modeling_segformer.py#L709"}}),or=new de({}),ar=new I({props:{name:"class transformers.SegformerForImageClassification",anchor:"transformers.SegformerForImageClassification",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.SegformerForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/segformer/modeling_segformer.py#L577"}}),ir=new I({props:{name:"forward",anchor:"transformers.SegformerForImageClassification.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.FloatTensor] = None"},{name:"labels",val:": typing.Optional[torch.LongTensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.SegformerForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Padding will be ignored by default should you provide it. Pixel values can be obtained using
<a href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerFeatureExtractor">SegformerFeatureExtractor</a>. See <a href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerFeatureExtractor.__call__">SegformerFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.SegformerForImageClassification.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.SegformerForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.SegformerForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17910/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.SegformerForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/segformer/modeling_segformer.py#L590",returnDescription:`
<p>A <code>transformers.models.segformer.modeling_segformer.SegFormerImageClassifierOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerConfig"
>SegformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also
called feature maps) of the model at the output of each stage.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, patch_size, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.models.segformer.modeling_segformer.SegFormerImageClassifierOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Ze=new Or({props:{$$slots:{default:[Og]},$$scope:{ctx:E}}}),Qe=new Lr({props:{anchor:"transformers.SegformerForImageClassification.forward.example",$$slots:{default:[Lg]},$$scope:{ctx:E}}}),lr=new de({}),dr=new I({props:{name:"class transformers.SegformerForSemanticSegmentation",anchor:"transformers.SegformerForSemanticSegmentation",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.SegformerForSemanticSegmentation.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/segformer/modeling_segformer.py#L746"}}),fr=new I({props:{name:"forward",anchor:"transformers.SegformerForSemanticSegmentation.forward",parameters:[{name:"pixel_values",val:": FloatTensor"},{name:"labels",val:": typing.Optional[torch.LongTensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.SegformerForSemanticSegmentation.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Padding will be ignored by default should you provide it. Pixel values can be obtained using
<a href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerFeatureExtractor">SegformerFeatureExtractor</a>. See <a href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerFeatureExtractor.__call__">SegformerFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.SegformerForSemanticSegmentation.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.SegformerForSemanticSegmentation.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.SegformerForSemanticSegmentation.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17910/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.SegformerForSemanticSegmentation.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Ground truth semantic segmentation maps for computing the loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels &gt; 1</code>, a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/segformer/modeling_segformer.py#L755",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_17910/en/main_classes/output#transformers.modeling_outputs.SemanticSegmenterOutput"
>transformers.modeling_outputs.SemanticSegmenterOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerConfig"
>SegformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels, logits_height, logits_width)</code>) \u2014 Classification scores for each pixel.</p>
<Tip warning={true}>
<p>The logits returned do not necessarily have the same size as the <code>pixel_values</code> passed as inputs. This is
to avoid doing two interpolations and lose some quality when a user needs to resize the logits to the
original image size as post-processing. You should always check your logits shape and resize as needed.</p>
</Tip>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, patch_size, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, patch_size, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_17910/en/main_classes/output#transformers.modeling_outputs.SemanticSegmenterOutput"
>transformers.modeling_outputs.SemanticSegmenterOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),tt=new Or({props:{$$slots:{default:[Ng]},$$scope:{ctx:E}}}),rt=new Lr({props:{anchor:"transformers.SegformerForSemanticSegmentation.forward.example",$$slots:{default:[Hg]},$$scope:{ctx:E}}}),hr=new de({}),gr=new I({props:{name:"class transformers.TFSegformerDecodeHead",anchor:"transformers.TFSegformerDecodeHead",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/segformer/modeling_tf_segformer.py#L715"}}),pr=new I({props:{name:"call",anchor:"transformers.TFSegformerDecodeHead.call",parameters:[{name:"encoder_hidden_states",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/segformer/modeling_tf_segformer.py#L737"}}),ur=new de({}),_r=new I({props:{name:"class transformers.TFSegformerModel",anchor:"transformers.TFSegformerModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFSegformerModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/segformer/modeling_tf_segformer.py#L597"}}),wr=new I({props:{name:"call",anchor:"transformers.TFSegformerModel.call",parameters:[{name:"pixel_values",val:": Tensor"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": bool = False"}],parametersDescription:[{anchor:"transformers.TFSegformerModel.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_17910/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.TFSegformerModel.call.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail. This argument can be used only in eager mode, in graph mode the value in the
config will be used instead.`,name:"output_attentions"},{anchor:"transformers.TFSegformerModel.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFSegformerModel.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17910/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFSegformerModel.call.training",description:`<strong>training</strong> (<code>bool</code>, <em>optional</em>, defaults to \`False&#x201C;) &#x2014;
Whether or not to use the model in training mode (some modules like dropout modules have different
behaviors between training and evaluation).`,name:"training"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/segformer/modeling_tf_segformer.py#L605",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_17910/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutput"
>transformers.modeling_tf_outputs.TFBaseModelOutput</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerConfig"
>SegformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_17910/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutput"
>transformers.modeling_tf_outputs.TFBaseModelOutput</a> or <code>tuple(tf.Tensor)</code></p>
`}}),nt=new Or({props:{$$slots:{default:[Wg]},$$scope:{ctx:E}}}),st=new Lr({props:{anchor:"transformers.TFSegformerModel.call.example",$$slots:{default:[Rg]},$$scope:{ctx:E}}}),$r=new de({}),Tr=new I({props:{name:"class transformers.TFSegformerForImageClassification",anchor:"transformers.TFSegformerForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFSegformerForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/segformer/modeling_tf_segformer.py#L640"}}),xr=new I({props:{name:"call",anchor:"transformers.TFSegformerForImageClassification.call",parameters:[{name:"pixel_values",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"labels",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.TFSegformerForImageClassification.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_17910/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.TFSegformerForImageClassification.call.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail. This argument can be used only in eager mode, in graph mode the value in the
config will be used instead.`,name:"output_attentions"},{anchor:"transformers.TFSegformerForImageClassification.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFSegformerForImageClassification.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17910/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFSegformerForImageClassification.call.training",description:`<strong>training</strong> (<code>bool</code>, <em>optional</em>, defaults to \`False&#x201C;) &#x2014;
Whether or not to use the model in training mode (some modules like dropout modules have different
behaviors between training and evaluation).`,name:"training"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/segformer/modeling_tf_segformer.py#L650",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_17910/en/main_classes/output#transformers.modeling_tf_outputs.TFSequenceClassifierOutput"
>transformers.modeling_tf_outputs.TFSequenceClassifierOutput</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerConfig"
>SegformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, )</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_17910/en/main_classes/output#transformers.modeling_tf_outputs.TFSequenceClassifierOutput"
>transformers.modeling_tf_outputs.TFSequenceClassifierOutput</a> or <code>tuple(tf.Tensor)</code></p>
`}}),lt=new Or({props:{$$slots:{default:[Bg]},$$scope:{ctx:E}}}),dt=new Lr({props:{anchor:"transformers.TFSegformerForImageClassification.call.example",$$slots:{default:[Ug]},$$scope:{ctx:E}}}),kr=new de({}),Mr=new I({props:{name:"class transformers.TFSegformerForSemanticSegmentation",anchor:"transformers.TFSegformerForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFSegformerForSemanticSegmentation.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_17910/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/segformer/modeling_tf_segformer.py#L775"}}),Pr=new I({props:{name:"call",anchor:"transformers.TFSegformerForSemanticSegmentation.call",parameters:[{name:"pixel_values",val:": Tensor"},{name:"labels",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.TFSegformerForSemanticSegmentation.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_17910/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.TFSegformerForSemanticSegmentation.call.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail. This argument can be used only in eager mode, in graph mode the value in the
config will be used instead.`,name:"output_attentions"},{anchor:"transformers.TFSegformerForSemanticSegmentation.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFSegformerForSemanticSegmentation.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17910/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFSegformerForSemanticSegmentation.call.training",description:`<strong>training</strong> (<code>bool</code>, <em>optional</em>, defaults to \`False&#x201C;) &#x2014;
Whether or not to use the model in training mode (some modules like dropout modules have different
behaviors between training and evaluation).`,name:"training"},{anchor:"transformers.TFSegformerForSemanticSegmentation.call.labels",description:`<strong>labels</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Ground truth semantic segmentation maps for computing the loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels &gt; 1</code>, a (per-pixel) classification loss is computed
(Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/vr_17910/src/transformers/models/segformer/modeling_tf_segformer.py#L801",returnDescription:`
<p>A <code>transformers.modeling_tf_outputs.TFSemanticSegmenterOutput</code> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerConfig"
>SegformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.num_labels, logits_height, logits_width)</code>) \u2014 Classification scores for each pixel.</p>
<Tip warning={true}>
<p>The logits returned do not necessarily have the same size as the <code>pixel_values</code> passed as inputs. This is
to avoid doing two interpolations and lose some quality when a user needs to resize the logits to the
original image size as post-processing. You should always check your logits shape and resize as needed.</p>
</Tip>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings, if the model has an embedding layer, + one for
the output of each layer) of shape <code>(batch_size, patch_size, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, patch_size, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_tf_outputs.TFSemanticSegmenterOutput</code> or <code>tuple(tf.Tensor)</code></p>
`}}),mt=new Or({props:{$$slots:{default:[Vg]},$$scope:{ctx:E}}}),ft=new Lr({props:{anchor:"transformers.TFSegformerForSemanticSegmentation.call.example",$$slots:{default:[Kg]},$$scope:{ctx:E}}}),{c(){f=o("meta"),v=c(),u=o("h1"),p=o("a"),b=o("span"),S(d.$$.fragment),g=c(),x=o("span"),Fs=s("SegFormer"),vn=c(),pe=o("h2"),Oe=o("a"),ea=o("span"),S(yt.$$.fragment),ys=c(),ta=o("span"),Es=s("Overview"),Sn=c(),Le=o("p"),xs=s("The SegFormer model was proposed in "),Et=o("a"),ks=s("SegFormer: Simple and Efficient Design for Semantic Segmentation with Transformers"),Ms=s(` by Enze Xie, Wenhai Wang, Zhiding Yu, Anima Anandkumar, Jose M. Alvarez, Ping
Luo. The model consists of a hierarchical Transformer encoder and a lightweight all-MLP decode head to achieve great
results on image segmentation benchmarks such as ADE20K and Cityscapes.`),wn=c(),Wr=o("p"),Is=s("The abstract from the paper is the following:"),$n=c(),Rr=o("p"),ra=o("em"),Cs=s(`We present SegFormer, a simple, efficient yet powerful semantic segmentation framework which unifies Transformers with
lightweight multilayer perception (MLP) decoders. SegFormer has two appealing features: 1) SegFormer comprises a novel
hierarchically structured Transformer encoder which outputs multiscale features. It does not need positional encoding,
thereby avoiding the interpolation of positional codes which leads to decreased performance when the testing resolution
differs from training. 2) SegFormer avoids complex decoders. The proposed MLP decoder aggregates information from
different layers, and thus combining both local attention and global attention to render powerful representations. We
show that this simple and lightweight design is the key to efficient segmentation on Transformers. We scale our
approach up to obtain a series of models from SegFormer-B0 to SegFormer-B5, reaching significantly better performance
and efficiency than previous counterparts. For example, SegFormer-B4 achieves 50.3% mIoU on ADE20K with 64M parameters,
being 5x smaller and 2.2% better than the previous best method. Our best model, SegFormer-B5, achieves 84.0% mIoU on
Cityscapes validation set and shows excellent zero-shot robustness on Cityscapes-C.`),Tn=c(),Ne=o("p"),js=s("The figure below illustrates the architecture of SegFormer. Taken from the "),xt=o("a"),Ps=s("original paper"),Ds=s("."),Fn=c(),kt=o("img"),yn=c(),G=o("p"),As=s("This model was contributed by "),Mt=o("a"),zs=s("nielsr"),qs=s(`. The TensorFlow version
of the model was contributed by `),It=o("a"),Os=s("sayakpaul"),Ls=s(". The original code can be found "),Ct=o("a"),Ns=s("here"),Hs=s("."),En=c(),Br=o("p"),Ws=s("Tips:"),xn=c(),C=o("ul"),W=o("li"),Rs=s(`SegFormer consists of a hierarchical Transformer encoder, and a lightweight all-MLP decoder head.
`),Ur=o("a"),Bs=s("SegformerModel"),Us=s(` is the hierarchical Transformer encoder (which in the paper is also referred to
as Mix Transformer or MiT). `),Vr=o("a"),Vs=s("SegformerForSemanticSegmentation"),Ks=s(` adds the all-MLP decoder head on
top to perform semantic segmentation of images. In addition, there\u2019s
`),Kr=o("a"),Gs=s("SegformerForImageClassification"),Ys=s(` which can be used to - you guessed it - classify images. The
authors of SegFormer first pre-trained the Transformer encoder on ImageNet-1k to classify images. Next, they throw
away the classification head, and replace it by the all-MLP decode head. Next, they fine-tune the model altogether on
ADE20K, Cityscapes and COCO-stuff, which are important benchmarks for semantic segmentation. All checkpoints can be
found on the `),jt=o("a"),Js=s("hub"),Xs=s("."),Zs=c(),ue=o("li"),Qs=s("The quickest way to get started with SegFormer is by checking the "),Pt=o("a"),ei=s("example notebooks"),ti=s(` (which showcase both inference and
fine-tuning on custom data). One can also check out the `),Dt=o("a"),ri=s("blog post"),oi=s(" introducing SegFormer and illustrating how it can be fine-tuned on custom data."),ai=c(),At=o("li"),ni=s("One can also check out "),zt=o("a"),si=s("this interactive demo on Hugging Face Spaces"),ii=s(`
to try out a SegFormer model on custom images.`),li=c(),qt=o("li"),di=s("SegFormer works on any input size, as it pads the input to be divisible by "),oa=o("code"),ci=s("config.patch_sizes"),mi=s("."),fi=c(),_e=o("li"),hi=s("One can use "),Gr=o("a"),gi=s("SegformerFeatureExtractor"),pi=s(` to prepare images and corresponding segmentation maps
for the model. Note that this feature extractor is fairly basic and does not include all data augmentations used in
the original paper. The original preprocessing pipelines (for the ADE20k dataset for instance) can be found `),Ot=o("a"),ui=s("here"),_i=s(`. The most
important preprocessing step is that images and segmentation maps are randomly cropped and padded to the same size,
such as 512x512 or 640x640, after which they are normalized.`),bi=c(),k=o("li"),vi=s("One additional thing to keep in mind is that one can initialize "),Yr=o("a"),Si=s("SegformerFeatureExtractor"),wi=s(` with
`),aa=o("code"),$i=s("reduce_labels"),Ti=s(" set to "),na=o("code"),Fi=s("True"),yi=s(" or "),sa=o("code"),Ei=s("False"),xi=s(`. In some datasets (like ADE20k), the 0 index is used in the annotated
segmentation maps for background. However, ADE20k doesn\u2019t include the \u201Cbackground\u201D class in its 150 labels.
Therefore, `),ia=o("code"),ki=s("reduce_labels"),Mi=s(` is used to reduce all labels by 1, and to make sure no loss is computed for the
background class (i.e. it replaces 0 in the annotated maps by 255, which is the `),la=o("em"),Ii=s("ignore_index"),Ci=s(` of the loss function
used by `),Jr=o("a"),ji=s("SegformerForSemanticSegmentation"),Pi=s(`). However, other datasets use the 0 index as
background class and include this class as part of all labels. In that case, `),da=o("code"),Di=s("reduce_labels"),Ai=s(` should be set to
`),ca=o("code"),zi=s("False"),qi=s(", as loss should also be computed for the background class."),Oi=c(),Lt=o("li"),Li=s(`As most models, SegFormer comes in different sizes, the details of which can be found in the table below
(taken from Table 7 of the `),Nt=o("a"),Ni=s("original paper"),Hi=s(")."),kn=c(),He=o("table"),ma=o("thead"),j=o("tr"),Xr=o("th"),fa=o("strong"),Wi=s("Model variant"),Ri=c(),ha=o("th"),ga=o("strong"),Bi=s("Depths"),Ui=c(),pa=o("th"),ua=o("strong"),Vi=s("Hidden sizes"),Ki=c(),Zr=o("th"),_a=o("strong"),Gi=s("Decoder hidden size"),Yi=c(),Qr=o("th"),ba=o("strong"),Ji=s("Params (M)"),Xi=c(),eo=o("th"),va=o("strong"),Zi=s("ImageNet-1k Top 1"),Qi=c(),P=o("tbody"),D=o("tr"),to=o("td"),el=s("MiT-b0"),tl=c(),Sa=o("td"),rl=s("[2, 2, 2, 2]"),ol=c(),wa=o("td"),al=s("[32, 64, 160, 256]"),nl=c(),ro=o("td"),sl=s("256"),il=c(),oo=o("td"),ll=s("3.7"),dl=c(),ao=o("td"),cl=s("70.5"),ml=c(),A=o("tr"),no=o("td"),fl=s("MiT-b1"),hl=c(),$a=o("td"),gl=s("[2, 2, 2, 2]"),pl=c(),Ta=o("td"),ul=s("[64, 128, 320, 512]"),_l=c(),so=o("td"),bl=s("256"),vl=c(),io=o("td"),Sl=s("14.0"),wl=c(),lo=o("td"),$l=s("78.7"),Tl=c(),z=o("tr"),co=o("td"),Fl=s("MiT-b2"),yl=c(),Fa=o("td"),El=s("[3, 4, 6, 3]"),xl=c(),ya=o("td"),kl=s("[64, 128, 320, 512]"),Ml=c(),mo=o("td"),Il=s("768"),Cl=c(),fo=o("td"),jl=s("25.4"),Pl=c(),ho=o("td"),Dl=s("81.6"),Al=c(),q=o("tr"),go=o("td"),zl=s("MiT-b3"),ql=c(),Ea=o("td"),Ol=s("[3, 4, 18, 3]"),Ll=c(),xa=o("td"),Nl=s("[64, 128, 320, 512]"),Hl=c(),po=o("td"),Wl=s("768"),Rl=c(),uo=o("td"),Bl=s("45.2"),Ul=c(),_o=o("td"),Vl=s("83.1"),Kl=c(),O=o("tr"),bo=o("td"),Gl=s("MiT-b4"),Yl=c(),ka=o("td"),Jl=s("[3, 8, 27, 3]"),Xl=c(),Ma=o("td"),Zl=s("[64, 128, 320, 512]"),Ql=c(),vo=o("td"),ed=s("768"),td=c(),So=o("td"),rd=s("62.6"),od=c(),wo=o("td"),ad=s("83.6"),nd=c(),L=o("tr"),$o=o("td"),sd=s("MiT-b5"),id=c(),Ia=o("td"),ld=s("[3, 6, 40, 3]"),dd=c(),Ca=o("td"),cd=s("[64, 128, 320, 512]"),md=c(),To=o("td"),fd=s("768"),hd=c(),Fo=o("td"),gd=s("82.0"),pd=c(),yo=o("td"),ud=s("83.8"),Mn=c(),We=o("p"),_d=s(`Note that MiT in the above table refers to the Mix Transformer encoder backbone introduced in SegFormer. For
SegFormer\u2019s results on the segmentation datasets like ADE20k, refer to the `),Ht=o("a"),bd=s("paper"),vd=s("."),In=c(),be=o("h2"),Re=o("a"),ja=o("span"),S(Wt.$$.fragment),Sd=c(),Pa=o("span"),wd=s("SegformerConfig"),Cn=c(),R=o("div"),S(Rt.$$.fragment),$d=c(),ve=o("p"),Td=s("This is the configuration class to store the configuration of a "),Eo=o("a"),Fd=s("SegformerModel"),yd=s(`. It is used to instantiate an
SegFormer model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the SegFormer
`),Bt=o("a"),Ed=s("nvidia/segformer-b0-finetuned-ade-512-512"),xd=s(`
architecture.`),kd=c(),Se=o("p"),Md=s("Configuration objects inherit from "),xo=o("a"),Id=s("PretrainedConfig"),Cd=s(` and can be used to control the model outputs. Read the
documentation from `),ko=o("a"),jd=s("PretrainedConfig"),Pd=s(" for more information."),Dd=c(),S(Be.$$.fragment),jn=c(),we=o("h2"),Ue=o("a"),Da=o("span"),S(Ut.$$.fragment),Ad=c(),Aa=o("span"),zd=s("SegformerFeatureExtractor"),Pn=c(),B=o("div"),S(Vt.$$.fragment),qd=c(),za=o("p"),Od=s("Constructs a SegFormer feature extractor."),Ld=c(),Kt=o("p"),Nd=s("This feature extractor inherits from "),Mo=o("a"),Hd=s("FeatureExtractionMixin"),Wd=s(` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),Rd=c(),fe=o("div"),S(Gt.$$.fragment),Bd=c(),qa=o("p"),Ud=s("Main method to prepare for the model one or several image(s) and optional corresponding segmentation maps."),Vd=c(),S(Ve.$$.fragment),Dn=c(),$e=o("h2"),Ke=o("a"),Oa=o("span"),S(Yt.$$.fragment),Kd=c(),La=o("span"),Gd=s("SegformerModel"),An=c(),ce=o("div"),S(Jt.$$.fragment),Yd=c(),Xt=o("p"),Jd=s(`The bare SegFormer encoder (Mix-Transformer) outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),Zt=o("a"),Xd=s("torch.nn.Module"),Zd=s(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Qd=c(),Y=o("div"),S(Qt.$$.fragment),ec=c(),Te=o("p"),tc=s("The "),Io=o("a"),rc=s("SegformerModel"),oc=s(" forward method, overrides the "),Na=o("code"),ac=s("__call__"),nc=s(" special method."),sc=c(),S(Ge.$$.fragment),ic=c(),S(Ye.$$.fragment),zn=c(),Fe=o("h2"),Je=o("a"),Ha=o("span"),S(er.$$.fragment),lc=c(),Wa=o("span"),dc=s("SegformerDecodeHead"),qn=c(),ye=o("div"),S(tr.$$.fragment),cc=c(),Co=o("div"),S(rr.$$.fragment),On=c(),Ee=o("h2"),Xe=o("a"),Ra=o("span"),S(or.$$.fragment),mc=c(),Ba=o("span"),fc=s("SegformerForImageClassification"),Ln=c(),U=o("div"),S(ar.$$.fragment),hc=c(),Ua=o("p"),gc=s(`SegFormer Model transformer with an image classification head on top (a linear layer on top of the final hidden
states) e.g. for ImageNet.`),pc=c(),nr=o("p"),uc=s("This model is a PyTorch "),sr=o("a"),_c=s("torch.nn.Module"),bc=s(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),vc=c(),J=o("div"),S(ir.$$.fragment),Sc=c(),xe=o("p"),wc=s("The "),jo=o("a"),$c=s("SegformerForImageClassification"),Tc=s(" forward method, overrides the "),Va=o("code"),Fc=s("__call__"),yc=s(" special method."),Ec=c(),S(Ze.$$.fragment),xc=c(),S(Qe.$$.fragment),Nn=c(),ke=o("h2"),et=o("a"),Ka=o("span"),S(lr.$$.fragment),kc=c(),Ga=o("span"),Mc=s("SegformerForSemanticSegmentation"),Hn=c(),me=o("div"),S(dr.$$.fragment),Ic=c(),cr=o("p"),Cc=s(`SegFormer Model transformer with an all-MLP decode head on top e.g. for ADE20k, CityScapes.
This model is a PyTorch `),mr=o("a"),jc=s("torch.nn.Module"),Pc=s(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Dc=c(),X=o("div"),S(fr.$$.fragment),Ac=c(),Me=o("p"),zc=s("The "),Po=o("a"),qc=s("SegformerForSemanticSegmentation"),Oc=s(" forward method, overrides the "),Ya=o("code"),Lc=s("__call__"),Nc=s(" special method."),Hc=c(),S(tt.$$.fragment),Wc=c(),S(rt.$$.fragment),Wn=c(),Ie=o("h2"),ot=o("a"),Ja=o("span"),S(hr.$$.fragment),Rc=c(),Xa=o("span"),Bc=s("TFSegformerDecodeHead"),Rn=c(),Ce=o("div"),S(gr.$$.fragment),Uc=c(),Do=o("div"),S(pr.$$.fragment),Bn=c(),je=o("h2"),at=o("a"),Za=o("span"),S(ur.$$.fragment),Vc=c(),Qa=o("span"),Kc=s("TFSegformerModel"),Un=c(),V=o("div"),S(_r.$$.fragment),Gc=c(),br=o("p"),Yc=s(`The bare SegFormer encoder (Mix-Transformer) outputting raw hidden-states without any specific head on top.
This model inherits from `),Ao=o("a"),Jc=s("TFPreTrainedModel"),Xc=s(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Zc=c(),vr=o("p"),Qc=s("This model is also a "),Sr=o("a"),em=s("tf.keras.Model"),tm=s(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),rm=c(),Z=o("div"),S(wr.$$.fragment),om=c(),Pe=o("p"),am=s("The "),zo=o("a"),nm=s("TFSegformerModel"),sm=s(" forward method, overrides the "),en=o("code"),im=s("__call__"),lm=s(" special method."),dm=c(),S(nt.$$.fragment),cm=c(),S(st.$$.fragment),Vn=c(),De=o("h2"),it=o("a"),tn=o("span"),S($r.$$.fragment),mm=c(),rn=o("span"),fm=s("TFSegformerForImageClassification"),Kn=c(),N=o("div"),S(Tr.$$.fragment),hm=c(),on=o("p"),gm=s(`SegFormer Model transformer with an image classification head on top (a linear layer on top of the final hidden
states) e.g. for ImageNet.`),pm=c(),Fr=o("p"),um=s("This model inherits from "),qo=o("a"),_m=s("TFPreTrainedModel"),bm=s(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),vm=c(),yr=o("p"),Sm=s("This model is also a "),Er=o("a"),wm=s("tf.keras.Model"),$m=s(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Tm=c(),Q=o("div"),S(xr.$$.fragment),Fm=c(),Ae=o("p"),ym=s("The "),Oo=o("a"),Em=s("TFSegformerForImageClassification"),xm=s(" forward method, overrides the "),an=o("code"),km=s("__call__"),Mm=s(" special method."),Im=c(),S(lt.$$.fragment),Cm=c(),S(dt.$$.fragment),Gn=c(),ze=o("h2"),ct=o("a"),nn=o("span"),S(kr.$$.fragment),jm=c(),sn=o("span"),Pm=s("TFSegformerForSemanticSegmentation"),Yn=c(),K=o("div"),S(Mr.$$.fragment),Dm=c(),Ir=o("p"),Am=s(`SegFormer Model transformer with an all-MLP decode head on top e.g. for ADE20k, CityScapes.
This model inherits from `),Lo=o("a"),zm=s("TFPreTrainedModel"),qm=s(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Om=c(),Cr=o("p"),Lm=s("This model is also a "),jr=o("a"),Nm=s("tf.keras.Model"),Hm=s(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Wm=c(),ee=o("div"),S(Pr.$$.fragment),Rm=c(),qe=o("p"),Bm=s("The "),No=o("a"),Um=s("TFSegformerForSemanticSegmentation"),Vm=s(" forward method, overrides the "),ln=o("code"),Km=s("__call__"),Gm=s(" special method."),Ym=c(),S(mt.$$.fragment),Jm=c(),S(ft.$$.fragment),this.h()},l(r){const h=Cg('[data-svelte="svelte-1phssyn"]',document.head);f=a(h,"META",{name:!0,content:!0}),h.forEach(t),v=m(r),u=a(r,"H1",{class:!0});var Dr=n(u);p=a(Dr,"A",{id:!0,class:!0,href:!0});var dn=n(p);b=a(dn,"SPAN",{});var cn=n(b);w(d.$$.fragment,cn),cn.forEach(t),dn.forEach(t),g=m(Dr),x=a(Dr,"SPAN",{});var mn=n(x);Fs=i(mn,"SegFormer"),mn.forEach(t),Dr.forEach(t),vn=m(r),pe=a(r,"H2",{class:!0});var Ar=n(pe);Oe=a(Ar,"A",{id:!0,class:!0,href:!0});var fn=n(Oe);ea=a(fn,"SPAN",{});var hn=n(ea);w(yt.$$.fragment,hn),hn.forEach(t),fn.forEach(t),ys=m(Ar),ta=a(Ar,"SPAN",{});var gn=n(ta);Es=i(gn,"Overview"),gn.forEach(t),Ar.forEach(t),Sn=m(r),Le=a(r,"P",{});var zr=n(Le);xs=i(zr,"The SegFormer model was proposed in "),Et=a(zr,"A",{href:!0,rel:!0});var pn=n(Et);ks=i(pn,"SegFormer: Simple and Efficient Design for Semantic Segmentation with Transformers"),pn.forEach(t),Ms=i(zr,` by Enze Xie, Wenhai Wang, Zhiding Yu, Anima Anandkumar, Jose M. Alvarez, Ping
Luo. The model consists of a hierarchical Transformer encoder and a lightweight all-MLP decode head to achieve great
results on image segmentation benchmarks such as ADE20K and Cityscapes.`),zr.forEach(t),wn=m(r),Wr=a(r,"P",{});var un=n(Wr);Is=i(un,"The abstract from the paper is the following:"),un.forEach(t),$n=m(r),Rr=a(r,"P",{});var _n=n(Rr);ra=a(_n,"EM",{});var bn=n(ra);Cs=i(bn,`We present SegFormer, a simple, efficient yet powerful semantic segmentation framework which unifies Transformers with
lightweight multilayer perception (MLP) decoders. SegFormer has two appealing features: 1) SegFormer comprises a novel
hierarchically structured Transformer encoder which outputs multiscale features. It does not need positional encoding,
thereby avoiding the interpolation of positional codes which leads to decreased performance when the testing resolution
differs from training. 2) SegFormer avoids complex decoders. The proposed MLP decoder aggregates information from
different layers, and thus combining both local attention and global attention to render powerful representations. We
show that this simple and lightweight design is the key to efficient segmentation on Transformers. We scale our
approach up to obtain a series of models from SegFormer-B0 to SegFormer-B5, reaching significantly better performance
and efficiency than previous counterparts. For example, SegFormer-B4 achieves 50.3% mIoU on ADE20K with 64M parameters,
being 5x smaller and 2.2% better than the previous best method. Our best model, SegFormer-B5, achieves 84.0% mIoU on
Cityscapes validation set and shows excellent zero-shot robustness on Cityscapes-C.`),bn.forEach(t),_n.forEach(t),Tn=m(r),Ne=a(r,"P",{});var qr=n(Ne);js=i(qr,"The figure below illustrates the architecture of SegFormer. Taken from the "),xt=a(qr,"A",{href:!0,rel:!0});var Zm=n(xt);Ps=i(Zm,"original paper"),Zm.forEach(t),Ds=i(qr,"."),qr.forEach(t),Fn=m(r),kt=a(r,"IMG",{width:!0,src:!0}),yn=m(r),G=a(r,"P",{});var ht=n(G);As=i(ht,"This model was contributed by "),Mt=a(ht,"A",{href:!0,rel:!0});var Qm=n(Mt);zs=i(Qm,"nielsr"),Qm.forEach(t),qs=i(ht,`. The TensorFlow version
of the model was contributed by `),It=a(ht,"A",{href:!0,rel:!0});var ef=n(It);Os=i(ef,"sayakpaul"),ef.forEach(t),Ls=i(ht,". The original code can be found "),Ct=a(ht,"A",{href:!0,rel:!0});var tf=n(Ct);Ns=i(tf,"here"),tf.forEach(t),Hs=i(ht,"."),ht.forEach(t),En=m(r),Br=a(r,"P",{});var rf=n(Br);Ws=i(rf,"Tips:"),rf.forEach(t),xn=m(r),C=a(r,"UL",{});var H=n(C);W=a(H,"LI",{});var he=n(W);Rs=i(he,`SegFormer consists of a hierarchical Transformer encoder, and a lightweight all-MLP decoder head.
`),Ur=a(he,"A",{href:!0});var of=n(Ur);Bs=i(of,"SegformerModel"),of.forEach(t),Us=i(he,` is the hierarchical Transformer encoder (which in the paper is also referred to
as Mix Transformer or MiT). `),Vr=a(he,"A",{href:!0});var af=n(Vr);Vs=i(af,"SegformerForSemanticSegmentation"),af.forEach(t),Ks=i(he,` adds the all-MLP decoder head on
top to perform semantic segmentation of images. In addition, there\u2019s
`),Kr=a(he,"A",{href:!0});var nf=n(Kr);Gs=i(nf,"SegformerForImageClassification"),nf.forEach(t),Ys=i(he,` which can be used to - you guessed it - classify images. The
authors of SegFormer first pre-trained the Transformer encoder on ImageNet-1k to classify images. Next, they throw
away the classification head, and replace it by the all-MLP decode head. Next, they fine-tune the model altogether on
ADE20K, Cityscapes and COCO-stuff, which are important benchmarks for semantic segmentation. All checkpoints can be
found on the `),jt=a(he,"A",{href:!0,rel:!0});var sf=n(jt);Js=i(sf,"hub"),sf.forEach(t),Xs=i(he,"."),he.forEach(t),Zs=m(H),ue=a(H,"LI",{});var Ho=n(ue);Qs=i(Ho,"The quickest way to get started with SegFormer is by checking the "),Pt=a(Ho,"A",{href:!0,rel:!0});var lf=n(Pt);ei=i(lf,"example notebooks"),lf.forEach(t),ti=i(Ho,` (which showcase both inference and
fine-tuning on custom data). One can also check out the `),Dt=a(Ho,"A",{href:!0,rel:!0});var df=n(Dt);ri=i(df,"blog post"),df.forEach(t),oi=i(Ho," introducing SegFormer and illustrating how it can be fine-tuned on custom data."),Ho.forEach(t),ai=m(H),At=a(H,"LI",{});var Xn=n(At);ni=i(Xn,"One can also check out "),zt=a(Xn,"A",{href:!0,rel:!0});var cf=n(zt);si=i(cf,"this interactive demo on Hugging Face Spaces"),cf.forEach(t),ii=i(Xn,`
to try out a SegFormer model on custom images.`),Xn.forEach(t),li=m(H),qt=a(H,"LI",{});var Zn=n(qt);di=i(Zn,"SegFormer works on any input size, as it pads the input to be divisible by "),oa=a(Zn,"CODE",{});var mf=n(oa);ci=i(mf,"config.patch_sizes"),mf.forEach(t),mi=i(Zn,"."),Zn.forEach(t),fi=m(H),_e=a(H,"LI",{});var Wo=n(_e);hi=i(Wo,"One can use "),Gr=a(Wo,"A",{href:!0});var ff=n(Gr);gi=i(ff,"SegformerFeatureExtractor"),ff.forEach(t),pi=i(Wo,` to prepare images and corresponding segmentation maps
for the model. Note that this feature extractor is fairly basic and does not include all data augmentations used in
the original paper. The original preprocessing pipelines (for the ADE20k dataset for instance) can be found `),Ot=a(Wo,"A",{href:!0,rel:!0});var hf=n(Ot);ui=i(hf,"here"),hf.forEach(t),_i=i(Wo,`. The most
important preprocessing step is that images and segmentation maps are randomly cropped and padded to the same size,
such as 512x512 or 640x640, after which they are normalized.`),Wo.forEach(t),bi=m(H),k=a(H,"LI",{});var M=n(k);vi=i(M,"One additional thing to keep in mind is that one can initialize "),Yr=a(M,"A",{href:!0});var gf=n(Yr);Si=i(gf,"SegformerFeatureExtractor"),gf.forEach(t),wi=i(M,` with
`),aa=a(M,"CODE",{});var pf=n(aa);$i=i(pf,"reduce_labels"),pf.forEach(t),Ti=i(M," set to "),na=a(M,"CODE",{});var uf=n(na);Fi=i(uf,"True"),uf.forEach(t),yi=i(M," or "),sa=a(M,"CODE",{});var _f=n(sa);Ei=i(_f,"False"),_f.forEach(t),xi=i(M,`. In some datasets (like ADE20k), the 0 index is used in the annotated
segmentation maps for background. However, ADE20k doesn\u2019t include the \u201Cbackground\u201D class in its 150 labels.
Therefore, `),ia=a(M,"CODE",{});var bf=n(ia);ki=i(bf,"reduce_labels"),bf.forEach(t),Mi=i(M,` is used to reduce all labels by 1, and to make sure no loss is computed for the
background class (i.e. it replaces 0 in the annotated maps by 255, which is the `),la=a(M,"EM",{});var vf=n(la);Ii=i(vf,"ignore_index"),vf.forEach(t),Ci=i(M,` of the loss function
used by `),Jr=a(M,"A",{href:!0});var Sf=n(Jr);ji=i(Sf,"SegformerForSemanticSegmentation"),Sf.forEach(t),Pi=i(M,`). However, other datasets use the 0 index as
background class and include this class as part of all labels. In that case, `),da=a(M,"CODE",{});var wf=n(da);Di=i(wf,"reduce_labels"),wf.forEach(t),Ai=i(M,` should be set to
`),ca=a(M,"CODE",{});var $f=n(ca);zi=i($f,"False"),$f.forEach(t),qi=i(M,", as loss should also be computed for the background class."),M.forEach(t),Oi=m(H),Lt=a(H,"LI",{});var Qn=n(Lt);Li=i(Qn,`As most models, SegFormer comes in different sizes, the details of which can be found in the table below
(taken from Table 7 of the `),Nt=a(Qn,"A",{href:!0,rel:!0});var Tf=n(Nt);Ni=i(Tf,"original paper"),Tf.forEach(t),Hi=i(Qn,")."),Qn.forEach(t),H.forEach(t),kn=m(r),He=a(r,"TABLE",{});var es=n(He);ma=a(es,"THEAD",{});var Ff=n(ma);j=a(Ff,"TR",{});var te=n(j);Xr=a(te,"TH",{align:!0});var yf=n(Xr);fa=a(yf,"STRONG",{});var Ef=n(fa);Wi=i(Ef,"Model variant"),Ef.forEach(t),yf.forEach(t),Ri=m(te),ha=a(te,"TH",{});var xf=n(ha);ga=a(xf,"STRONG",{});var kf=n(ga);Bi=i(kf,"Depths"),kf.forEach(t),xf.forEach(t),Ui=m(te),pa=a(te,"TH",{});var Mf=n(pa);ua=a(Mf,"STRONG",{});var If=n(ua);Vi=i(If,"Hidden sizes"),If.forEach(t),Mf.forEach(t),Ki=m(te),Zr=a(te,"TH",{align:!0});var Cf=n(Zr);_a=a(Cf,"STRONG",{});var jf=n(_a);Gi=i(jf,"Decoder hidden size"),jf.forEach(t),Cf.forEach(t),Yi=m(te),Qr=a(te,"TH",{align:!0});var Pf=n(Qr);ba=a(Pf,"STRONG",{});var Df=n(ba);Ji=i(Df,"Params (M)"),Df.forEach(t),Pf.forEach(t),Xi=m(te),eo=a(te,"TH",{align:!0});var Af=n(eo);va=a(Af,"STRONG",{});var zf=n(va);Zi=i(zf,"ImageNet-1k Top 1"),zf.forEach(t),Af.forEach(t),te.forEach(t),Ff.forEach(t),Qi=m(es),P=a(es,"TBODY",{});var re=n(P);D=a(re,"TR",{});var oe=n(D);to=a(oe,"TD",{align:!0});var qf=n(to);el=i(qf,"MiT-b0"),qf.forEach(t),tl=m(oe),Sa=a(oe,"TD",{});var Of=n(Sa);rl=i(Of,"[2, 2, 2, 2]"),Of.forEach(t),ol=m(oe),wa=a(oe,"TD",{});var Lf=n(wa);al=i(Lf,"[32, 64, 160, 256]"),Lf.forEach(t),nl=m(oe),ro=a(oe,"TD",{align:!0});var Nf=n(ro);sl=i(Nf,"256"),Nf.forEach(t),il=m(oe),oo=a(oe,"TD",{align:!0});var Hf=n(oo);ll=i(Hf,"3.7"),Hf.forEach(t),dl=m(oe),ao=a(oe,"TD",{align:!0});var Wf=n(ao);cl=i(Wf,"70.5"),Wf.forEach(t),oe.forEach(t),ml=m(re),A=a(re,"TR",{});var ae=n(A);no=a(ae,"TD",{align:!0});var Rf=n(no);fl=i(Rf,"MiT-b1"),Rf.forEach(t),hl=m(ae),$a=a(ae,"TD",{});var Bf=n($a);gl=i(Bf,"[2, 2, 2, 2]"),Bf.forEach(t),pl=m(ae),Ta=a(ae,"TD",{});var Uf=n(Ta);ul=i(Uf,"[64, 128, 320, 512]"),Uf.forEach(t),_l=m(ae),so=a(ae,"TD",{align:!0});var Vf=n(so);bl=i(Vf,"256"),Vf.forEach(t),vl=m(ae),io=a(ae,"TD",{align:!0});var Kf=n(io);Sl=i(Kf,"14.0"),Kf.forEach(t),wl=m(ae),lo=a(ae,"TD",{align:!0});var Gf=n(lo);$l=i(Gf,"78.7"),Gf.forEach(t),ae.forEach(t),Tl=m(re),z=a(re,"TR",{});var ne=n(z);co=a(ne,"TD",{align:!0});var Yf=n(co);Fl=i(Yf,"MiT-b2"),Yf.forEach(t),yl=m(ne),Fa=a(ne,"TD",{});var Jf=n(Fa);El=i(Jf,"[3, 4, 6, 3]"),Jf.forEach(t),xl=m(ne),ya=a(ne,"TD",{});var Xf=n(ya);kl=i(Xf,"[64, 128, 320, 512]"),Xf.forEach(t),Ml=m(ne),mo=a(ne,"TD",{align:!0});var Zf=n(mo);Il=i(Zf,"768"),Zf.forEach(t),Cl=m(ne),fo=a(ne,"TD",{align:!0});var Qf=n(fo);jl=i(Qf,"25.4"),Qf.forEach(t),Pl=m(ne),ho=a(ne,"TD",{align:!0});var eh=n(ho);Dl=i(eh,"81.6"),eh.forEach(t),ne.forEach(t),Al=m(re),q=a(re,"TR",{});var se=n(q);go=a(se,"TD",{align:!0});var th=n(go);zl=i(th,"MiT-b3"),th.forEach(t),ql=m(se),Ea=a(se,"TD",{});var rh=n(Ea);Ol=i(rh,"[3, 4, 18, 3]"),rh.forEach(t),Ll=m(se),xa=a(se,"TD",{});var oh=n(xa);Nl=i(oh,"[64, 128, 320, 512]"),oh.forEach(t),Hl=m(se),po=a(se,"TD",{align:!0});var ah=n(po);Wl=i(ah,"768"),ah.forEach(t),Rl=m(se),uo=a(se,"TD",{align:!0});var nh=n(uo);Bl=i(nh,"45.2"),nh.forEach(t),Ul=m(se),_o=a(se,"TD",{align:!0});var sh=n(_o);Vl=i(sh,"83.1"),sh.forEach(t),se.forEach(t),Kl=m(re),O=a(re,"TR",{});var ie=n(O);bo=a(ie,"TD",{align:!0});var ih=n(bo);Gl=i(ih,"MiT-b4"),ih.forEach(t),Yl=m(ie),ka=a(ie,"TD",{});var lh=n(ka);Jl=i(lh,"[3, 8, 27, 3]"),lh.forEach(t),Xl=m(ie),Ma=a(ie,"TD",{});var dh=n(Ma);Zl=i(dh,"[64, 128, 320, 512]"),dh.forEach(t),Ql=m(ie),vo=a(ie,"TD",{align:!0});var ch=n(vo);ed=i(ch,"768"),ch.forEach(t),td=m(ie),So=a(ie,"TD",{align:!0});var mh=n(So);rd=i(mh,"62.6"),mh.forEach(t),od=m(ie),wo=a(ie,"TD",{align:!0});var fh=n(wo);ad=i(fh,"83.6"),fh.forEach(t),ie.forEach(t),nd=m(re),L=a(re,"TR",{});var le=n(L);$o=a(le,"TD",{align:!0});var hh=n($o);sd=i(hh,"MiT-b5"),hh.forEach(t),id=m(le),Ia=a(le,"TD",{});var gh=n(Ia);ld=i(gh,"[3, 6, 40, 3]"),gh.forEach(t),dd=m(le),Ca=a(le,"TD",{});var ph=n(Ca);cd=i(ph,"[64, 128, 320, 512]"),ph.forEach(t),md=m(le),To=a(le,"TD",{align:!0});var uh=n(To);fd=i(uh,"768"),uh.forEach(t),hd=m(le),Fo=a(le,"TD",{align:!0});var _h=n(Fo);gd=i(_h,"82.0"),_h.forEach(t),pd=m(le),yo=a(le,"TD",{align:!0});var bh=n(yo);ud=i(bh,"83.8"),bh.forEach(t),le.forEach(t),re.forEach(t),es.forEach(t),Mn=m(r),We=a(r,"P",{});var ts=n(We);_d=i(ts,`Note that MiT in the above table refers to the Mix Transformer encoder backbone introduced in SegFormer. For
SegFormer\u2019s results on the segmentation datasets like ADE20k, refer to the `),Ht=a(ts,"A",{href:!0,rel:!0});var vh=n(Ht);bd=i(vh,"paper"),vh.forEach(t),vd=i(ts,"."),ts.forEach(t),In=m(r),be=a(r,"H2",{class:!0});var rs=n(be);Re=a(rs,"A",{id:!0,class:!0,href:!0});var Sh=n(Re);ja=a(Sh,"SPAN",{});var wh=n(ja);w(Wt.$$.fragment,wh),wh.forEach(t),Sh.forEach(t),Sd=m(rs),Pa=a(rs,"SPAN",{});var $h=n(Pa);wd=i($h,"SegformerConfig"),$h.forEach(t),rs.forEach(t),Cn=m(r),R=a(r,"DIV",{class:!0});var gt=n(R);w(Rt.$$.fragment,gt),$d=m(gt),ve=a(gt,"P",{});var Ro=n(ve);Td=i(Ro,"This is the configuration class to store the configuration of a "),Eo=a(Ro,"A",{href:!0});var Th=n(Eo);Fd=i(Th,"SegformerModel"),Th.forEach(t),yd=i(Ro,`. It is used to instantiate an
SegFormer model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the SegFormer
`),Bt=a(Ro,"A",{href:!0,rel:!0});var Fh=n(Bt);Ed=i(Fh,"nvidia/segformer-b0-finetuned-ade-512-512"),Fh.forEach(t),xd=i(Ro,`
architecture.`),Ro.forEach(t),kd=m(gt),Se=a(gt,"P",{});var Bo=n(Se);Md=i(Bo,"Configuration objects inherit from "),xo=a(Bo,"A",{href:!0});var yh=n(xo);Id=i(yh,"PretrainedConfig"),yh.forEach(t),Cd=i(Bo,` and can be used to control the model outputs. Read the
documentation from `),ko=a(Bo,"A",{href:!0});var Eh=n(ko);jd=i(Eh,"PretrainedConfig"),Eh.forEach(t),Pd=i(Bo," for more information."),Bo.forEach(t),Dd=m(gt),w(Be.$$.fragment,gt),gt.forEach(t),jn=m(r),we=a(r,"H2",{class:!0});var os=n(we);Ue=a(os,"A",{id:!0,class:!0,href:!0});var xh=n(Ue);Da=a(xh,"SPAN",{});var kh=n(Da);w(Ut.$$.fragment,kh),kh.forEach(t),xh.forEach(t),Ad=m(os),Aa=a(os,"SPAN",{});var Mh=n(Aa);zd=i(Mh,"SegformerFeatureExtractor"),Mh.forEach(t),os.forEach(t),Pn=m(r),B=a(r,"DIV",{class:!0});var pt=n(B);w(Vt.$$.fragment,pt),qd=m(pt),za=a(pt,"P",{});var Ih=n(za);Od=i(Ih,"Constructs a SegFormer feature extractor."),Ih.forEach(t),Ld=m(pt),Kt=a(pt,"P",{});var as=n(Kt);Nd=i(as,"This feature extractor inherits from "),Mo=a(as,"A",{href:!0});var Ch=n(Mo);Hd=i(Ch,"FeatureExtractionMixin"),Ch.forEach(t),Wd=i(as,` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),as.forEach(t),Rd=m(pt),fe=a(pt,"DIV",{class:!0});var Uo=n(fe);w(Gt.$$.fragment,Uo),Bd=m(Uo),qa=a(Uo,"P",{});var jh=n(qa);Ud=i(jh,"Main method to prepare for the model one or several image(s) and optional corresponding segmentation maps."),jh.forEach(t),Vd=m(Uo),w(Ve.$$.fragment,Uo),Uo.forEach(t),pt.forEach(t),Dn=m(r),$e=a(r,"H2",{class:!0});var ns=n($e);Ke=a(ns,"A",{id:!0,class:!0,href:!0});var Ph=n(Ke);Oa=a(Ph,"SPAN",{});var Dh=n(Oa);w(Yt.$$.fragment,Dh),Dh.forEach(t),Ph.forEach(t),Kd=m(ns),La=a(ns,"SPAN",{});var Ah=n(La);Gd=i(Ah,"SegformerModel"),Ah.forEach(t),ns.forEach(t),An=m(r),ce=a(r,"DIV",{class:!0});var Vo=n(ce);w(Jt.$$.fragment,Vo),Yd=m(Vo),Xt=a(Vo,"P",{});var ss=n(Xt);Jd=i(ss,`The bare SegFormer encoder (Mix-Transformer) outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),Zt=a(ss,"A",{href:!0,rel:!0});var zh=n(Zt);Xd=i(zh,"torch.nn.Module"),zh.forEach(t),Zd=i(ss,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),ss.forEach(t),Qd=m(Vo),Y=a(Vo,"DIV",{class:!0});var ut=n(Y);w(Qt.$$.fragment,ut),ec=m(ut),Te=a(ut,"P",{});var Ko=n(Te);tc=i(Ko,"The "),Io=a(Ko,"A",{href:!0});var qh=n(Io);rc=i(qh,"SegformerModel"),qh.forEach(t),oc=i(Ko," forward method, overrides the "),Na=a(Ko,"CODE",{});var Oh=n(Na);ac=i(Oh,"__call__"),Oh.forEach(t),nc=i(Ko," special method."),Ko.forEach(t),sc=m(ut),w(Ge.$$.fragment,ut),ic=m(ut),w(Ye.$$.fragment,ut),ut.forEach(t),Vo.forEach(t),zn=m(r),Fe=a(r,"H2",{class:!0});var is=n(Fe);Je=a(is,"A",{id:!0,class:!0,href:!0});var Lh=n(Je);Ha=a(Lh,"SPAN",{});var Nh=n(Ha);w(er.$$.fragment,Nh),Nh.forEach(t),Lh.forEach(t),lc=m(is),Wa=a(is,"SPAN",{});var Hh=n(Wa);dc=i(Hh,"SegformerDecodeHead"),Hh.forEach(t),is.forEach(t),qn=m(r),ye=a(r,"DIV",{class:!0});var ls=n(ye);w(tr.$$.fragment,ls),cc=m(ls),Co=a(ls,"DIV",{class:!0});var Wh=n(Co);w(rr.$$.fragment,Wh),Wh.forEach(t),ls.forEach(t),On=m(r),Ee=a(r,"H2",{class:!0});var ds=n(Ee);Xe=a(ds,"A",{id:!0,class:!0,href:!0});var Rh=n(Xe);Ra=a(Rh,"SPAN",{});var Bh=n(Ra);w(or.$$.fragment,Bh),Bh.forEach(t),Rh.forEach(t),mc=m(ds),Ba=a(ds,"SPAN",{});var Uh=n(Ba);fc=i(Uh,"SegformerForImageClassification"),Uh.forEach(t),ds.forEach(t),Ln=m(r),U=a(r,"DIV",{class:!0});var _t=n(U);w(ar.$$.fragment,_t),hc=m(_t),Ua=a(_t,"P",{});var Vh=n(Ua);gc=i(Vh,`SegFormer Model transformer with an image classification head on top (a linear layer on top of the final hidden
states) e.g. for ImageNet.`),Vh.forEach(t),pc=m(_t),nr=a(_t,"P",{});var cs=n(nr);uc=i(cs,"This model is a PyTorch "),sr=a(cs,"A",{href:!0,rel:!0});var Kh=n(sr);_c=i(Kh,"torch.nn.Module"),Kh.forEach(t),bc=i(cs,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),cs.forEach(t),vc=m(_t),J=a(_t,"DIV",{class:!0});var bt=n(J);w(ir.$$.fragment,bt),Sc=m(bt),xe=a(bt,"P",{});var Go=n(xe);wc=i(Go,"The "),jo=a(Go,"A",{href:!0});var Gh=n(jo);$c=i(Gh,"SegformerForImageClassification"),Gh.forEach(t),Tc=i(Go," forward method, overrides the "),Va=a(Go,"CODE",{});var Yh=n(Va);Fc=i(Yh,"__call__"),Yh.forEach(t),yc=i(Go," special method."),Go.forEach(t),Ec=m(bt),w(Ze.$$.fragment,bt),xc=m(bt),w(Qe.$$.fragment,bt),bt.forEach(t),_t.forEach(t),Nn=m(r),ke=a(r,"H2",{class:!0});var ms=n(ke);et=a(ms,"A",{id:!0,class:!0,href:!0});var Jh=n(et);Ka=a(Jh,"SPAN",{});var Xh=n(Ka);w(lr.$$.fragment,Xh),Xh.forEach(t),Jh.forEach(t),kc=m(ms),Ga=a(ms,"SPAN",{});var Zh=n(Ga);Mc=i(Zh,"SegformerForSemanticSegmentation"),Zh.forEach(t),ms.forEach(t),Hn=m(r),me=a(r,"DIV",{class:!0});var Yo=n(me);w(dr.$$.fragment,Yo),Ic=m(Yo),cr=a(Yo,"P",{});var fs=n(cr);Cc=i(fs,`SegFormer Model transformer with an all-MLP decode head on top e.g. for ADE20k, CityScapes.
This model is a PyTorch `),mr=a(fs,"A",{href:!0,rel:!0});var Qh=n(mr);jc=i(Qh,"torch.nn.Module"),Qh.forEach(t),Pc=i(fs,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),fs.forEach(t),Dc=m(Yo),X=a(Yo,"DIV",{class:!0});var vt=n(X);w(fr.$$.fragment,vt),Ac=m(vt),Me=a(vt,"P",{});var Jo=n(Me);zc=i(Jo,"The "),Po=a(Jo,"A",{href:!0});var eg=n(Po);qc=i(eg,"SegformerForSemanticSegmentation"),eg.forEach(t),Oc=i(Jo," forward method, overrides the "),Ya=a(Jo,"CODE",{});var tg=n(Ya);Lc=i(tg,"__call__"),tg.forEach(t),Nc=i(Jo," special method."),Jo.forEach(t),Hc=m(vt),w(tt.$$.fragment,vt),Wc=m(vt),w(rt.$$.fragment,vt),vt.forEach(t),Yo.forEach(t),Wn=m(r),Ie=a(r,"H2",{class:!0});var hs=n(Ie);ot=a(hs,"A",{id:!0,class:!0,href:!0});var rg=n(ot);Ja=a(rg,"SPAN",{});var og=n(Ja);w(hr.$$.fragment,og),og.forEach(t),rg.forEach(t),Rc=m(hs),Xa=a(hs,"SPAN",{});var ag=n(Xa);Bc=i(ag,"TFSegformerDecodeHead"),ag.forEach(t),hs.forEach(t),Rn=m(r),Ce=a(r,"DIV",{class:!0});var gs=n(Ce);w(gr.$$.fragment,gs),Uc=m(gs),Do=a(gs,"DIV",{class:!0});var ng=n(Do);w(pr.$$.fragment,ng),ng.forEach(t),gs.forEach(t),Bn=m(r),je=a(r,"H2",{class:!0});var ps=n(je);at=a(ps,"A",{id:!0,class:!0,href:!0});var sg=n(at);Za=a(sg,"SPAN",{});var ig=n(Za);w(ur.$$.fragment,ig),ig.forEach(t),sg.forEach(t),Vc=m(ps),Qa=a(ps,"SPAN",{});var lg=n(Qa);Kc=i(lg,"TFSegformerModel"),lg.forEach(t),ps.forEach(t),Un=m(r),V=a(r,"DIV",{class:!0});var St=n(V);w(_r.$$.fragment,St),Gc=m(St),br=a(St,"P",{});var us=n(br);Yc=i(us,`The bare SegFormer encoder (Mix-Transformer) outputting raw hidden-states without any specific head on top.
This model inherits from `),Ao=a(us,"A",{href:!0});var dg=n(Ao);Jc=i(dg,"TFPreTrainedModel"),dg.forEach(t),Xc=i(us,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),us.forEach(t),Zc=m(St),vr=a(St,"P",{});var _s=n(vr);Qc=i(_s,"This model is also a "),Sr=a(_s,"A",{href:!0,rel:!0});var cg=n(Sr);em=i(cg,"tf.keras.Model"),cg.forEach(t),tm=i(_s,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),_s.forEach(t),rm=m(St),Z=a(St,"DIV",{class:!0});var wt=n(Z);w(wr.$$.fragment,wt),om=m(wt),Pe=a(wt,"P",{});var Xo=n(Pe);am=i(Xo,"The "),zo=a(Xo,"A",{href:!0});var mg=n(zo);nm=i(mg,"TFSegformerModel"),mg.forEach(t),sm=i(Xo," forward method, overrides the "),en=a(Xo,"CODE",{});var fg=n(en);im=i(fg,"__call__"),fg.forEach(t),lm=i(Xo," special method."),Xo.forEach(t),dm=m(wt),w(nt.$$.fragment,wt),cm=m(wt),w(st.$$.fragment,wt),wt.forEach(t),St.forEach(t),Vn=m(r),De=a(r,"H2",{class:!0});var bs=n(De);it=a(bs,"A",{id:!0,class:!0,href:!0});var hg=n(it);tn=a(hg,"SPAN",{});var gg=n(tn);w($r.$$.fragment,gg),gg.forEach(t),hg.forEach(t),mm=m(bs),rn=a(bs,"SPAN",{});var pg=n(rn);fm=i(pg,"TFSegformerForImageClassification"),pg.forEach(t),bs.forEach(t),Kn=m(r),N=a(r,"DIV",{class:!0});var ge=n(N);w(Tr.$$.fragment,ge),hm=m(ge),on=a(ge,"P",{});var ug=n(on);gm=i(ug,`SegFormer Model transformer with an image classification head on top (a linear layer on top of the final hidden
states) e.g. for ImageNet.`),ug.forEach(t),pm=m(ge),Fr=a(ge,"P",{});var vs=n(Fr);um=i(vs,"This model inherits from "),qo=a(vs,"A",{href:!0});var _g=n(qo);_m=i(_g,"TFPreTrainedModel"),_g.forEach(t),bm=i(vs,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),vs.forEach(t),vm=m(ge),yr=a(ge,"P",{});var Ss=n(yr);Sm=i(Ss,"This model is also a "),Er=a(Ss,"A",{href:!0,rel:!0});var bg=n(Er);wm=i(bg,"tf.keras.Model"),bg.forEach(t),$m=i(Ss,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Ss.forEach(t),Tm=m(ge),Q=a(ge,"DIV",{class:!0});var $t=n(Q);w(xr.$$.fragment,$t),Fm=m($t),Ae=a($t,"P",{});var Zo=n(Ae);ym=i(Zo,"The "),Oo=a(Zo,"A",{href:!0});var vg=n(Oo);Em=i(vg,"TFSegformerForImageClassification"),vg.forEach(t),xm=i(Zo," forward method, overrides the "),an=a(Zo,"CODE",{});var Sg=n(an);km=i(Sg,"__call__"),Sg.forEach(t),Mm=i(Zo," special method."),Zo.forEach(t),Im=m($t),w(lt.$$.fragment,$t),Cm=m($t),w(dt.$$.fragment,$t),$t.forEach(t),ge.forEach(t),Gn=m(r),ze=a(r,"H2",{class:!0});var ws=n(ze);ct=a(ws,"A",{id:!0,class:!0,href:!0});var wg=n(ct);nn=a(wg,"SPAN",{});var $g=n(nn);w(kr.$$.fragment,$g),$g.forEach(t),wg.forEach(t),jm=m(ws),sn=a(ws,"SPAN",{});var Tg=n(sn);Pm=i(Tg,"TFSegformerForSemanticSegmentation"),Tg.forEach(t),ws.forEach(t),Yn=m(r),K=a(r,"DIV",{class:!0});var Tt=n(K);w(Mr.$$.fragment,Tt),Dm=m(Tt),Ir=a(Tt,"P",{});var $s=n(Ir);Am=i($s,`SegFormer Model transformer with an all-MLP decode head on top e.g. for ADE20k, CityScapes.
This model inherits from `),Lo=a($s,"A",{href:!0});var Fg=n(Lo);zm=i(Fg,"TFPreTrainedModel"),Fg.forEach(t),qm=i($s,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),$s.forEach(t),Om=m(Tt),Cr=a(Tt,"P",{});var Ts=n(Cr);Lm=i(Ts,"This model is also a "),jr=a(Ts,"A",{href:!0,rel:!0});var yg=n(jr);Nm=i(yg,"tf.keras.Model"),yg.forEach(t),Hm=i(Ts,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Ts.forEach(t),Wm=m(Tt),ee=a(Tt,"DIV",{class:!0});var Ft=n(ee);w(Pr.$$.fragment,Ft),Rm=m(Ft),qe=a(Ft,"P",{});var Qo=n(qe);Bm=i(Qo,"The "),No=a(Qo,"A",{href:!0});var Eg=n(No);Um=i(Eg,"TFSegformerForSemanticSegmentation"),Eg.forEach(t),Vm=i(Qo," forward method, overrides the "),ln=a(Qo,"CODE",{});var xg=n(ln);Km=i(xg,"__call__"),xg.forEach(t),Gm=i(Qo," special method."),Qo.forEach(t),Ym=m(Ft),w(mt.$$.fragment,Ft),Jm=m(Ft),w(ft.$$.fragment,Ft),Ft.forEach(t),Tt.forEach(t),this.h()},h(){l(f,"name","hf:doc:metadata"),l(f,"content",JSON.stringify(Yg)),l(p,"id","segformer"),l(p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(p,"href","#segformer"),l(u,"class","relative group"),l(Oe,"id","overview"),l(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Oe,"href","#overview"),l(pe,"class","relative group"),l(Et,"href","https://arxiv.org/abs/2105.15203"),l(Et,"rel","nofollow"),l(xt,"href","https://arxiv.org/abs/2105.15203"),l(xt,"rel","nofollow"),l(kt,"width","600"),jg(kt.src,Xm="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/segformer_architecture.png")||l(kt,"src",Xm),l(Mt,"href","https://huggingface.co/nielsr"),l(Mt,"rel","nofollow"),l(It,"href","https://huggingface.co/sayakpaul"),l(It,"rel","nofollow"),l(Ct,"href","https://github.com/NVlabs/SegFormer"),l(Ct,"rel","nofollow"),l(Ur,"href","/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerModel"),l(Vr,"href","/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),l(Kr,"href","/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerForImageClassification"),l(jt,"href","https://huggingface.co/models?other=segformer"),l(jt,"rel","nofollow"),l(Pt,"href","https://github.com/NielsRogge/Transformers-Tutorials/tree/master/SegFormer"),l(Pt,"rel","nofollow"),l(Dt,"href","https://huggingface.co/blog/fine-tune-segformer"),l(Dt,"rel","nofollow"),l(zt,"href","https://huggingface.co/spaces/chansung/segformer-tf-transformers"),l(zt,"rel","nofollow"),l(Gr,"href","/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),l(Ot,"href","https://github.com/NVlabs/SegFormer/blob/master/local_configs/_base_/datasets/ade20k_repeat.py"),l(Ot,"rel","nofollow"),l(Yr,"href","/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),l(Jr,"href","/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),l(Nt,"href","https://arxiv.org/abs/2105.15203"),l(Nt,"rel","nofollow"),l(Xr,"align","center"),l(Zr,"align","center"),l(Qr,"align","center"),l(eo,"align","center"),l(to,"align","center"),l(ro,"align","center"),l(oo,"align","center"),l(ao,"align","center"),l(no,"align","center"),l(so,"align","center"),l(io,"align","center"),l(lo,"align","center"),l(co,"align","center"),l(mo,"align","center"),l(fo,"align","center"),l(ho,"align","center"),l(go,"align","center"),l(po,"align","center"),l(uo,"align","center"),l(_o,"align","center"),l(bo,"align","center"),l(vo,"align","center"),l(So,"align","center"),l(wo,"align","center"),l($o,"align","center"),l(To,"align","center"),l(Fo,"align","center"),l(yo,"align","center"),l(Ht,"href","https://arxiv.org/abs/2105.15203"),l(Ht,"rel","nofollow"),l(Re,"id","transformers.SegformerConfig"),l(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Re,"href","#transformers.SegformerConfig"),l(be,"class","relative group"),l(Eo,"href","/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerModel"),l(Bt,"href","https://huggingface.co/nvidia/segformer-b0-finetuned-ade-512-512"),l(Bt,"rel","nofollow"),l(xo,"href","/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig"),l(ko,"href","/docs/transformers/pr_17910/en/main_classes/configuration#transformers.PretrainedConfig"),l(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Ue,"id","transformers.SegformerFeatureExtractor"),l(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Ue,"href","#transformers.SegformerFeatureExtractor"),l(we,"class","relative group"),l(Mo,"href","/docs/transformers/pr_17910/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"),l(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Ke,"id","transformers.SegformerModel"),l(Ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Ke,"href","#transformers.SegformerModel"),l($e,"class","relative group"),l(Zt,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(Zt,"rel","nofollow"),l(Io,"href","/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerModel"),l(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Je,"id","transformers.SegformerDecodeHead"),l(Je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Je,"href","#transformers.SegformerDecodeHead"),l(Fe,"class","relative group"),l(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Xe,"id","transformers.SegformerForImageClassification"),l(Xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Xe,"href","#transformers.SegformerForImageClassification"),l(Ee,"class","relative group"),l(sr,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(sr,"rel","nofollow"),l(jo,"href","/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerForImageClassification"),l(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(et,"id","transformers.SegformerForSemanticSegmentation"),l(et,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(et,"href","#transformers.SegformerForSemanticSegmentation"),l(ke,"class","relative group"),l(mr,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(mr,"rel","nofollow"),l(Po,"href","/docs/transformers/pr_17910/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),l(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ot,"id","transformers.TFSegformerDecodeHead"),l(ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ot,"href","#transformers.TFSegformerDecodeHead"),l(Ie,"class","relative group"),l(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(at,"id","transformers.TFSegformerModel"),l(at,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(at,"href","#transformers.TFSegformerModel"),l(je,"class","relative group"),l(Ao,"href","/docs/transformers/pr_17910/en/main_classes/model#transformers.TFPreTrainedModel"),l(Sr,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),l(Sr,"rel","nofollow"),l(zo,"href","/docs/transformers/pr_17910/en/model_doc/segformer#transformers.TFSegformerModel"),l(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(it,"id","transformers.TFSegformerForImageClassification"),l(it,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(it,"href","#transformers.TFSegformerForImageClassification"),l(De,"class","relative group"),l(qo,"href","/docs/transformers/pr_17910/en/main_classes/model#transformers.TFPreTrainedModel"),l(Er,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),l(Er,"rel","nofollow"),l(Oo,"href","/docs/transformers/pr_17910/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),l(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ct,"id","transformers.TFSegformerForSemanticSegmentation"),l(ct,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ct,"href","#transformers.TFSegformerForSemanticSegmentation"),l(ze,"class","relative group"),l(Lo,"href","/docs/transformers/pr_17910/en/main_classes/model#transformers.TFPreTrainedModel"),l(jr,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),l(jr,"rel","nofollow"),l(No,"href","/docs/transformers/pr_17910/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),l(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(r,h){e(document.head,f),_(r,v,h),_(r,u,h),e(u,p),e(p,b),$(d,b,null),e(u,g),e(u,x),e(x,Fs),_(r,vn,h),_(r,pe,h),e(pe,Oe),e(Oe,ea),$(yt,ea,null),e(pe,ys),e(pe,ta),e(ta,Es),_(r,Sn,h),_(r,Le,h),e(Le,xs),e(Le,Et),e(Et,ks),e(Le,Ms),_(r,wn,h),_(r,Wr,h),e(Wr,Is),_(r,$n,h),_(r,Rr,h),e(Rr,ra),e(ra,Cs),_(r,Tn,h),_(r,Ne,h),e(Ne,js),e(Ne,xt),e(xt,Ps),e(Ne,Ds),_(r,Fn,h),_(r,kt,h),_(r,yn,h),_(r,G,h),e(G,As),e(G,Mt),e(Mt,zs),e(G,qs),e(G,It),e(It,Os),e(G,Ls),e(G,Ct),e(Ct,Ns),e(G,Hs),_(r,En,h),_(r,Br,h),e(Br,Ws),_(r,xn,h),_(r,C,h),e(C,W),e(W,Rs),e(W,Ur),e(Ur,Bs),e(W,Us),e(W,Vr),e(Vr,Vs),e(W,Ks),e(W,Kr),e(Kr,Gs),e(W,Ys),e(W,jt),e(jt,Js),e(W,Xs),e(C,Zs),e(C,ue),e(ue,Qs),e(ue,Pt),e(Pt,ei),e(ue,ti),e(ue,Dt),e(Dt,ri),e(ue,oi),e(C,ai),e(C,At),e(At,ni),e(At,zt),e(zt,si),e(At,ii),e(C,li),e(C,qt),e(qt,di),e(qt,oa),e(oa,ci),e(qt,mi),e(C,fi),e(C,_e),e(_e,hi),e(_e,Gr),e(Gr,gi),e(_e,pi),e(_e,Ot),e(Ot,ui),e(_e,_i),e(C,bi),e(C,k),e(k,vi),e(k,Yr),e(Yr,Si),e(k,wi),e(k,aa),e(aa,$i),e(k,Ti),e(k,na),e(na,Fi),e(k,yi),e(k,sa),e(sa,Ei),e(k,xi),e(k,ia),e(ia,ki),e(k,Mi),e(k,la),e(la,Ii),e(k,Ci),e(k,Jr),e(Jr,ji),e(k,Pi),e(k,da),e(da,Di),e(k,Ai),e(k,ca),e(ca,zi),e(k,qi),e(C,Oi),e(C,Lt),e(Lt,Li),e(Lt,Nt),e(Nt,Ni),e(Lt,Hi),_(r,kn,h),_(r,He,h),e(He,ma),e(ma,j),e(j,Xr),e(Xr,fa),e(fa,Wi),e(j,Ri),e(j,ha),e(ha,ga),e(ga,Bi),e(j,Ui),e(j,pa),e(pa,ua),e(ua,Vi),e(j,Ki),e(j,Zr),e(Zr,_a),e(_a,Gi),e(j,Yi),e(j,Qr),e(Qr,ba),e(ba,Ji),e(j,Xi),e(j,eo),e(eo,va),e(va,Zi),e(He,Qi),e(He,P),e(P,D),e(D,to),e(to,el),e(D,tl),e(D,Sa),e(Sa,rl),e(D,ol),e(D,wa),e(wa,al),e(D,nl),e(D,ro),e(ro,sl),e(D,il),e(D,oo),e(oo,ll),e(D,dl),e(D,ao),e(ao,cl),e(P,ml),e(P,A),e(A,no),e(no,fl),e(A,hl),e(A,$a),e($a,gl),e(A,pl),e(A,Ta),e(Ta,ul),e(A,_l),e(A,so),e(so,bl),e(A,vl),e(A,io),e(io,Sl),e(A,wl),e(A,lo),e(lo,$l),e(P,Tl),e(P,z),e(z,co),e(co,Fl),e(z,yl),e(z,Fa),e(Fa,El),e(z,xl),e(z,ya),e(ya,kl),e(z,Ml),e(z,mo),e(mo,Il),e(z,Cl),e(z,fo),e(fo,jl),e(z,Pl),e(z,ho),e(ho,Dl),e(P,Al),e(P,q),e(q,go),e(go,zl),e(q,ql),e(q,Ea),e(Ea,Ol),e(q,Ll),e(q,xa),e(xa,Nl),e(q,Hl),e(q,po),e(po,Wl),e(q,Rl),e(q,uo),e(uo,Bl),e(q,Ul),e(q,_o),e(_o,Vl),e(P,Kl),e(P,O),e(O,bo),e(bo,Gl),e(O,Yl),e(O,ka),e(ka,Jl),e(O,Xl),e(O,Ma),e(Ma,Zl),e(O,Ql),e(O,vo),e(vo,ed),e(O,td),e(O,So),e(So,rd),e(O,od),e(O,wo),e(wo,ad),e(P,nd),e(P,L),e(L,$o),e($o,sd),e(L,id),e(L,Ia),e(Ia,ld),e(L,dd),e(L,Ca),e(Ca,cd),e(L,md),e(L,To),e(To,fd),e(L,hd),e(L,Fo),e(Fo,gd),e(L,pd),e(L,yo),e(yo,ud),_(r,Mn,h),_(r,We,h),e(We,_d),e(We,Ht),e(Ht,bd),e(We,vd),_(r,In,h),_(r,be,h),e(be,Re),e(Re,ja),$(Wt,ja,null),e(be,Sd),e(be,Pa),e(Pa,wd),_(r,Cn,h),_(r,R,h),$(Rt,R,null),e(R,$d),e(R,ve),e(ve,Td),e(ve,Eo),e(Eo,Fd),e(ve,yd),e(ve,Bt),e(Bt,Ed),e(ve,xd),e(R,kd),e(R,Se),e(Se,Md),e(Se,xo),e(xo,Id),e(Se,Cd),e(Se,ko),e(ko,jd),e(Se,Pd),e(R,Dd),$(Be,R,null),_(r,jn,h),_(r,we,h),e(we,Ue),e(Ue,Da),$(Ut,Da,null),e(we,Ad),e(we,Aa),e(Aa,zd),_(r,Pn,h),_(r,B,h),$(Vt,B,null),e(B,qd),e(B,za),e(za,Od),e(B,Ld),e(B,Kt),e(Kt,Nd),e(Kt,Mo),e(Mo,Hd),e(Kt,Wd),e(B,Rd),e(B,fe),$(Gt,fe,null),e(fe,Bd),e(fe,qa),e(qa,Ud),e(fe,Vd),$(Ve,fe,null),_(r,Dn,h),_(r,$e,h),e($e,Ke),e(Ke,Oa),$(Yt,Oa,null),e($e,Kd),e($e,La),e(La,Gd),_(r,An,h),_(r,ce,h),$(Jt,ce,null),e(ce,Yd),e(ce,Xt),e(Xt,Jd),e(Xt,Zt),e(Zt,Xd),e(Xt,Zd),e(ce,Qd),e(ce,Y),$(Qt,Y,null),e(Y,ec),e(Y,Te),e(Te,tc),e(Te,Io),e(Io,rc),e(Te,oc),e(Te,Na),e(Na,ac),e(Te,nc),e(Y,sc),$(Ge,Y,null),e(Y,ic),$(Ye,Y,null),_(r,zn,h),_(r,Fe,h),e(Fe,Je),e(Je,Ha),$(er,Ha,null),e(Fe,lc),e(Fe,Wa),e(Wa,dc),_(r,qn,h),_(r,ye,h),$(tr,ye,null),e(ye,cc),e(ye,Co),$(rr,Co,null),_(r,On,h),_(r,Ee,h),e(Ee,Xe),e(Xe,Ra),$(or,Ra,null),e(Ee,mc),e(Ee,Ba),e(Ba,fc),_(r,Ln,h),_(r,U,h),$(ar,U,null),e(U,hc),e(U,Ua),e(Ua,gc),e(U,pc),e(U,nr),e(nr,uc),e(nr,sr),e(sr,_c),e(nr,bc),e(U,vc),e(U,J),$(ir,J,null),e(J,Sc),e(J,xe),e(xe,wc),e(xe,jo),e(jo,$c),e(xe,Tc),e(xe,Va),e(Va,Fc),e(xe,yc),e(J,Ec),$(Ze,J,null),e(J,xc),$(Qe,J,null),_(r,Nn,h),_(r,ke,h),e(ke,et),e(et,Ka),$(lr,Ka,null),e(ke,kc),e(ke,Ga),e(Ga,Mc),_(r,Hn,h),_(r,me,h),$(dr,me,null),e(me,Ic),e(me,cr),e(cr,Cc),e(cr,mr),e(mr,jc),e(cr,Pc),e(me,Dc),e(me,X),$(fr,X,null),e(X,Ac),e(X,Me),e(Me,zc),e(Me,Po),e(Po,qc),e(Me,Oc),e(Me,Ya),e(Ya,Lc),e(Me,Nc),e(X,Hc),$(tt,X,null),e(X,Wc),$(rt,X,null),_(r,Wn,h),_(r,Ie,h),e(Ie,ot),e(ot,Ja),$(hr,Ja,null),e(Ie,Rc),e(Ie,Xa),e(Xa,Bc),_(r,Rn,h),_(r,Ce,h),$(gr,Ce,null),e(Ce,Uc),e(Ce,Do),$(pr,Do,null),_(r,Bn,h),_(r,je,h),e(je,at),e(at,Za),$(ur,Za,null),e(je,Vc),e(je,Qa),e(Qa,Kc),_(r,Un,h),_(r,V,h),$(_r,V,null),e(V,Gc),e(V,br),e(br,Yc),e(br,Ao),e(Ao,Jc),e(br,Xc),e(V,Zc),e(V,vr),e(vr,Qc),e(vr,Sr),e(Sr,em),e(vr,tm),e(V,rm),e(V,Z),$(wr,Z,null),e(Z,om),e(Z,Pe),e(Pe,am),e(Pe,zo),e(zo,nm),e(Pe,sm),e(Pe,en),e(en,im),e(Pe,lm),e(Z,dm),$(nt,Z,null),e(Z,cm),$(st,Z,null),_(r,Vn,h),_(r,De,h),e(De,it),e(it,tn),$($r,tn,null),e(De,mm),e(De,rn),e(rn,fm),_(r,Kn,h),_(r,N,h),$(Tr,N,null),e(N,hm),e(N,on),e(on,gm),e(N,pm),e(N,Fr),e(Fr,um),e(Fr,qo),e(qo,_m),e(Fr,bm),e(N,vm),e(N,yr),e(yr,Sm),e(yr,Er),e(Er,wm),e(yr,$m),e(N,Tm),e(N,Q),$(xr,Q,null),e(Q,Fm),e(Q,Ae),e(Ae,ym),e(Ae,Oo),e(Oo,Em),e(Ae,xm),e(Ae,an),e(an,km),e(Ae,Mm),e(Q,Im),$(lt,Q,null),e(Q,Cm),$(dt,Q,null),_(r,Gn,h),_(r,ze,h),e(ze,ct),e(ct,nn),$(kr,nn,null),e(ze,jm),e(ze,sn),e(sn,Pm),_(r,Yn,h),_(r,K,h),$(Mr,K,null),e(K,Dm),e(K,Ir),e(Ir,Am),e(Ir,Lo),e(Lo,zm),e(Ir,qm),e(K,Om),e(K,Cr),e(Cr,Lm),e(Cr,jr),e(jr,Nm),e(Cr,Hm),e(K,Wm),e(K,ee),$(Pr,ee,null),e(ee,Rm),e(ee,qe),e(qe,Bm),e(qe,No),e(No,Um),e(qe,Vm),e(qe,ln),e(ln,Km),e(qe,Gm),e(ee,Ym),$(mt,ee,null),e(ee,Jm),$(ft,ee,null),Jn=!0},p(r,[h]){const Dr={};h&2&&(Dr.$$scope={dirty:h,ctx:r}),Be.$set(Dr);const dn={};h&2&&(dn.$$scope={dirty:h,ctx:r}),Ve.$set(dn);const cn={};h&2&&(cn.$$scope={dirty:h,ctx:r}),Ge.$set(cn);const mn={};h&2&&(mn.$$scope={dirty:h,ctx:r}),Ye.$set(mn);const Ar={};h&2&&(Ar.$$scope={dirty:h,ctx:r}),Ze.$set(Ar);const fn={};h&2&&(fn.$$scope={dirty:h,ctx:r}),Qe.$set(fn);const hn={};h&2&&(hn.$$scope={dirty:h,ctx:r}),tt.$set(hn);const gn={};h&2&&(gn.$$scope={dirty:h,ctx:r}),rt.$set(gn);const zr={};h&2&&(zr.$$scope={dirty:h,ctx:r}),nt.$set(zr);const pn={};h&2&&(pn.$$scope={dirty:h,ctx:r}),st.$set(pn);const un={};h&2&&(un.$$scope={dirty:h,ctx:r}),lt.$set(un);const _n={};h&2&&(_n.$$scope={dirty:h,ctx:r}),dt.$set(_n);const bn={};h&2&&(bn.$$scope={dirty:h,ctx:r}),mt.$set(bn);const qr={};h&2&&(qr.$$scope={dirty:h,ctx:r}),ft.$set(qr)},i(r){Jn||(T(d.$$.fragment,r),T(yt.$$.fragment,r),T(Wt.$$.fragment,r),T(Rt.$$.fragment,r),T(Be.$$.fragment,r),T(Ut.$$.fragment,r),T(Vt.$$.fragment,r),T(Gt.$$.fragment,r),T(Ve.$$.fragment,r),T(Yt.$$.fragment,r),T(Jt.$$.fragment,r),T(Qt.$$.fragment,r),T(Ge.$$.fragment,r),T(Ye.$$.fragment,r),T(er.$$.fragment,r),T(tr.$$.fragment,r),T(rr.$$.fragment,r),T(or.$$.fragment,r),T(ar.$$.fragment,r),T(ir.$$.fragment,r),T(Ze.$$.fragment,r),T(Qe.$$.fragment,r),T(lr.$$.fragment,r),T(dr.$$.fragment,r),T(fr.$$.fragment,r),T(tt.$$.fragment,r),T(rt.$$.fragment,r),T(hr.$$.fragment,r),T(gr.$$.fragment,r),T(pr.$$.fragment,r),T(ur.$$.fragment,r),T(_r.$$.fragment,r),T(wr.$$.fragment,r),T(nt.$$.fragment,r),T(st.$$.fragment,r),T($r.$$.fragment,r),T(Tr.$$.fragment,r),T(xr.$$.fragment,r),T(lt.$$.fragment,r),T(dt.$$.fragment,r),T(kr.$$.fragment,r),T(Mr.$$.fragment,r),T(Pr.$$.fragment,r),T(mt.$$.fragment,r),T(ft.$$.fragment,r),Jn=!0)},o(r){F(d.$$.fragment,r),F(yt.$$.fragment,r),F(Wt.$$.fragment,r),F(Rt.$$.fragment,r),F(Be.$$.fragment,r),F(Ut.$$.fragment,r),F(Vt.$$.fragment,r),F(Gt.$$.fragment,r),F(Ve.$$.fragment,r),F(Yt.$$.fragment,r),F(Jt.$$.fragment,r),F(Qt.$$.fragment,r),F(Ge.$$.fragment,r),F(Ye.$$.fragment,r),F(er.$$.fragment,r),F(tr.$$.fragment,r),F(rr.$$.fragment,r),F(or.$$.fragment,r),F(ar.$$.fragment,r),F(ir.$$.fragment,r),F(Ze.$$.fragment,r),F(Qe.$$.fragment,r),F(lr.$$.fragment,r),F(dr.$$.fragment,r),F(fr.$$.fragment,r),F(tt.$$.fragment,r),F(rt.$$.fragment,r),F(hr.$$.fragment,r),F(gr.$$.fragment,r),F(pr.$$.fragment,r),F(ur.$$.fragment,r),F(_r.$$.fragment,r),F(wr.$$.fragment,r),F(nt.$$.fragment,r),F(st.$$.fragment,r),F($r.$$.fragment,r),F(Tr.$$.fragment,r),F(xr.$$.fragment,r),F(lt.$$.fragment,r),F(dt.$$.fragment,r),F(kr.$$.fragment,r),F(Mr.$$.fragment,r),F(Pr.$$.fragment,r),F(mt.$$.fragment,r),F(ft.$$.fragment,r),Jn=!1},d(r){t(f),r&&t(v),r&&t(u),y(d),r&&t(vn),r&&t(pe),y(yt),r&&t(Sn),r&&t(Le),r&&t(wn),r&&t(Wr),r&&t($n),r&&t(Rr),r&&t(Tn),r&&t(Ne),r&&t(Fn),r&&t(kt),r&&t(yn),r&&t(G),r&&t(En),r&&t(Br),r&&t(xn),r&&t(C),r&&t(kn),r&&t(He),r&&t(Mn),r&&t(We),r&&t(In),r&&t(be),y(Wt),r&&t(Cn),r&&t(R),y(Rt),y(Be),r&&t(jn),r&&t(we),y(Ut),r&&t(Pn),r&&t(B),y(Vt),y(Gt),y(Ve),r&&t(Dn),r&&t($e),y(Yt),r&&t(An),r&&t(ce),y(Jt),y(Qt),y(Ge),y(Ye),r&&t(zn),r&&t(Fe),y(er),r&&t(qn),r&&t(ye),y(tr),y(rr),r&&t(On),r&&t(Ee),y(or),r&&t(Ln),r&&t(U),y(ar),y(ir),y(Ze),y(Qe),r&&t(Nn),r&&t(ke),y(lr),r&&t(Hn),r&&t(me),y(dr),y(fr),y(tt),y(rt),r&&t(Wn),r&&t(Ie),y(hr),r&&t(Rn),r&&t(Ce),y(gr),y(pr),r&&t(Bn),r&&t(je),y(ur),r&&t(Un),r&&t(V),y(_r),y(wr),y(nt),y(st),r&&t(Vn),r&&t(De),y($r),r&&t(Kn),r&&t(N),y(Tr),y(xr),y(lt),y(dt),r&&t(Gn),r&&t(ze),y(kr),r&&t(Yn),r&&t(K),y(Mr),y(Pr),y(mt),y(ft)}}}const Yg={local:"segformer",sections:[{local:"overview",title:"Overview"},{local:"transformers.SegformerConfig",title:"SegformerConfig"},{local:"transformers.SegformerFeatureExtractor",title:"SegformerFeatureExtractor"},{local:"transformers.SegformerModel",title:"SegformerModel"},{local:"transformers.SegformerDecodeHead",title:"SegformerDecodeHead"},{local:"transformers.SegformerForImageClassification",title:"SegformerForImageClassification"},{local:"transformers.SegformerForSemanticSegmentation",title:"SegformerForSemanticSegmentation"},{local:"transformers.TFSegformerDecodeHead",title:"TFSegformerDecodeHead"},{local:"transformers.TFSegformerModel",title:"TFSegformerModel"},{local:"transformers.TFSegformerForImageClassification",title:"TFSegformerForImageClassification"},{local:"transformers.TFSegformerForSemanticSegmentation",title:"TFSegformerForSemanticSegmentation"}],title:"SegFormer"};function Jg(E){return Pg(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class op extends kg{constructor(f){super();Mg(this,f,Jg,Gg,Ig,{})}}export{op as default,Yg as metadata};
