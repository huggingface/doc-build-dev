import{S as ys,i as xs,s as Es,e as a,k as m,w as T,t as i,M as Cs,c as r,d as o,m as h,a as s,x as w,h as l,b as d,G as e,g as _,y as M,q as $,o as V,B as y,v as Fs,L as Io}from"../../chunks/vendor-hf-doc-builder.js";import{T as Fo}from"../../chunks/Tip-hf-doc-builder.js";import{D as Z}from"../../chunks/Docstring-hf-doc-builder.js";import{C as Po}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as et}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as ko}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function ks(x){let c,v,u,p,b;return p=new Po({props:{code:`from transformers import MobileViTModel, MobileViTConfig

# Initializing a mobilevit-small style configuration
configuration = MobileViTConfig()

# Initializing a model from the mobilevit-small style configuration
model = MobileViTModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTModel, MobileViTConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a mobilevit-small style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = MobileViTConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the mobilevit-small style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileViTModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){c=a("p"),v=i("Example:"),u=m(),T(p.$$.fragment)},l(n){c=r(n,"P",{});var g=s(c);v=l(g,"Example:"),g.forEach(o),u=h(n),w(p.$$.fragment,n)},m(n,g){_(n,c,g),e(c,v),_(n,u,g),M(p,n,g),b=!0},p:Io,i(n){b||($(p.$$.fragment,n),b=!0)},o(n){V(p.$$.fragment,n),b=!1},d(n){n&&o(c),n&&o(u),y(p,n)}}}function Is(x){let c,v;return{c(){c=a("p"),v=i(`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`)},l(u){c=r(u,"P",{});var p=s(c);v=l(p,`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`),p.forEach(o)},m(u,p){_(u,c,p),e(c,v)},d(u){u&&o(c)}}}function Ps(x){let c,v,u,p,b;return{c(){c=a("p"),v=i("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a("code"),p=i("Module"),b=i(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){c=r(n,"P",{});var g=s(c);v=l(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=r(g,"CODE",{});var E=s(u);p=l(E,"Module"),E.forEach(o),b=l(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(o)},m(n,g){_(n,c,g),e(c,v),e(c,u),e(u,p),e(c,b)},d(n){n&&o(c)}}}function js(x){let c,v,u,p,b;return p=new Po({props:{code:`from transformers import MobileViTFeatureExtractor, MobileViTModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = MobileViTFeatureExtractor.from_pretrained("apple/mobilevit-small")
model = MobileViTModel.from_pretrained("apple/mobilevit-small")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, MobileViTModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileViTModel.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">640</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>]`}}),{c(){c=a("p"),v=i("Example:"),u=m(),T(p.$$.fragment)},l(n){c=r(n,"P",{});var g=s(c);v=l(g,"Example:"),g.forEach(o),u=h(n),w(p.$$.fragment,n)},m(n,g){_(n,c,g),e(c,v),_(n,u,g),M(p,n,g),b=!0},p:Io,i(n){b||($(p.$$.fragment,n),b=!0)},o(n){V(p.$$.fragment,n),b=!1},d(n){n&&o(c),n&&o(u),y(p,n)}}}function Ss(x){let c,v,u,p,b;return{c(){c=a("p"),v=i("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a("code"),p=i("Module"),b=i(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){c=r(n,"P",{});var g=s(c);v=l(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=r(g,"CODE",{});var E=s(u);p=l(E,"Module"),E.forEach(o),b=l(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(o)},m(n,g){_(n,c,g),e(c,v),e(c,u),e(u,p),e(c,b)},d(n){n&&o(c)}}}function Ns(x){let c,v,u,p,b;return p=new Po({props:{code:`from transformers import MobileViTFeatureExtractor, MobileViTForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = MobileViTFeatureExtractor.from_pretrained("apple/mobilevit-small")
model = MobileViTForImageClassification.from_pretrained("apple/mobilevit-small")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, MobileViTForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileViTForImageClassification.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),{c(){c=a("p"),v=i("Example:"),u=m(),T(p.$$.fragment)},l(n){c=r(n,"P",{});var g=s(c);v=l(g,"Example:"),g.forEach(o),u=h(n),w(p.$$.fragment,n)},m(n,g){_(n,c,g),e(c,v),_(n,u,g),M(p,n,g),b=!0},p:Io,i(n){b||($(p.$$.fragment,n),b=!0)},o(n){V(p.$$.fragment,n),b=!1},d(n){n&&o(c),n&&o(u),y(p,n)}}}function zs(x){let c,v,u,p,b;return{c(){c=a("p"),v=i("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a("code"),p=i("Module"),b=i(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){c=r(n,"P",{});var g=s(c);v=l(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=r(g,"CODE",{});var E=s(u);p=l(E,"Module"),E.forEach(o),b=l(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(o)},m(n,g){_(n,c,g),e(c,v),e(c,u),e(u,p),e(c,b)},d(n){n&&o(c)}}}function As(x){let c,v,u,p,b;return p=new Po({props:{code:`from transformers import MobileViTFeatureExtractor, MobileViTForSemanticSegmentation
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = MobileViTFeatureExtractor.from_pretrained("apple/deeplabv3-mobilevit-small")
model = MobileViTForSemanticSegmentation.from_pretrained("apple/deeplabv3-mobilevit-small")

inputs = feature_extractor(images=image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

# logits are of shape (batch_size, num_labels, height, width)
logits = outputs.logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, MobileViTForSemanticSegmentation
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;apple/deeplabv3-mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileViTForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;apple/deeplabv3-mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># logits are of shape (batch_size, num_labels, height, width)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`}}),{c(){c=a("p"),v=i("Examples:"),u=m(),T(p.$$.fragment)},l(n){c=r(n,"P",{});var g=s(c);v=l(g,"Examples:"),g.forEach(o),u=h(n),w(p.$$.fragment,n)},m(n,g){_(n,c,g),e(c,v),_(n,u,g),M(p,n,g),b=!0},p:Io,i(n){b||($(p.$$.fragment,n),b=!0)},o(n){V(p.$$.fragment,n),b=!1},d(n){n&&o(c),n&&o(u),y(p,n)}}}function Ls(x){let c,v,u,p,b,n,g,E,jo,Kt,O,K,wt,we,So,Mt,No,Qt,Q,zo,Me,Ao,Lo,eo,tt,Oo,to,ot,$t,qo,oo,at,Do,ao,P,Vt,yt,Ro,Bo,xt,$e,Wo,rt,Uo,Ho,Go,Et,Ve,Jo,ye,Xo,Yo,Zo,Ct,q,Ko,xe,Qo,ea,Ee,ta,oa,ro,A,aa,Ce,ra,sa,Fe,na,ia,so,D,ee,Ft,ke,la,kt,ca,no,C,Ie,da,R,pa,st,ma,ha,Pe,fa,ua,ga,B,_a,nt,ba,va,it,Ta,wa,Ma,te,io,W,oe,It,je,$a,Pt,Va,lo,F,Se,ya,jt,xa,Ea,Ne,Ca,lt,Fa,ka,Ia,L,ze,Pa,St,ja,Sa,ae,co,U,re,Nt,Ae,Na,zt,za,po,z,Le,Aa,Oe,La,qe,Oa,qa,Da,j,De,Ra,H,Ba,ct,Wa,Ua,At,Ha,Ga,Ja,se,Xa,ne,mo,G,ie,Lt,Re,Ya,Ot,Za,ho,k,Be,Ka,qt,Qa,er,We,tr,Ue,or,ar,rr,S,He,sr,J,nr,dt,ir,lr,Dt,cr,dr,pr,le,mr,ce,fo,X,de,Rt,Ge,hr,Bt,fr,uo,I,Je,ur,Wt,gr,_r,Xe,br,Ye,vr,Tr,wr,N,Ze,Mr,Y,$r,pt,Vr,yr,Ut,xr,Er,Cr,pe,Fr,me,go;return n=new et({}),we=new et({}),ke=new et({}),Ie=new Z({props:{name:"class transformers.MobileViTConfig",anchor:"transformers.MobileViTConfig",parameters:[{name:"num_channels",val:" = 3"},{name:"image_size",val:" = 256"},{name:"patch_size",val:" = 2"},{name:"hidden_sizes",val:" = None"},{name:"neck_hidden_sizes",val:" = None"},{name:"num_attention_heads",val:" = 4"},{name:"mlp_ratio",val:" = 2.0"},{name:"expand_ratio",val:" = 4.0"},{name:"hidden_act",val:" = 'silu'"},{name:"conv_kernel_size",val:" = 3"},{name:"output_stride",val:" = 32"},{name:"hidden_dropout_prob",val:" = 0.1"},{name:"attention_probs_dropout_prob",val:" = 0.0"},{name:"classifier_dropout_prob",val:" = 0.1"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-05"},{name:"qkv_bias",val:" = True"},{name:"is_encoder_decoder",val:" = False"},{name:"aspp_out_channels",val:" = 256"},{name:"atrous_rates",val:" = None"},{name:"aspp_dropout_prob",val:" = 0.1"},{name:"semantic_loss_ignore_index",val:" = 255"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MobileViTConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to <code>3</code>) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.MobileViTConfig.image_size",description:`<strong>image_size</strong> (<code>int</code>, <em>optional</em>, defaults to <code>256</code>) &#x2014;
The size (resolution) of each image.`,name:"image_size"},{anchor:"transformers.MobileViTConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, <em>optional</em>, defaults to <code>2</code>) &#x2014;
The size (resolution) of each patch.`,name:"patch_size"},{anchor:"transformers.MobileViTConfig.hidden_sizes",description:`<strong>hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [144, 192, 240]) &#x2014;
Dimensionality (hidden size) of the Transformer encoders at each stage.`,name:"hidden_sizes"},{anchor:"transformers.MobileViTConfig.neck_hidden_sizes",description:`<strong>neck_hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [16, 32, 64, 96, 128, 160, 640]) &#x2014;
The number of channels for the feature maps of the backbone.`,name:"neck_hidden_sizes"},{anchor:"transformers.MobileViTConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.MobileViTConfig.mlp_ratio",description:`<strong>mlp_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 2.0) &#x2014;
The ratio of the number of channels in the output of the MLP to the number of channels in the input.`,name:"mlp_ratio"},{anchor:"transformers.MobileViTConfig.expand_ratio",description:`<strong>expand_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 4.0) &#x2014;
Expansion factor for the MobileNetv2 layers.`,name:"expand_ratio"},{anchor:"transformers.MobileViTConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;silu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the Transformer encoder and convolution layers.`,name:"hidden_act"},{anchor:"transformers.MobileViTConfig.conv_kernel_size",description:`<strong>conv_kernel_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The size of the convolutional kernel in the MobileViT layer.`,name:"conv_kernel_size"},{anchor:"transformers.MobileViTConfig.output_stride",description:`<strong>output_stride</strong> (<code>int</code>, <code>optional</code>, defaults to 32) &#x2014;
The ratio of the spatial resolution of the output to the resolution of the input image.`,name:"output_stride"},{anchor:"transformers.MobileViTConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probabilitiy for all fully connected layers in the Transformer encoder.`,name:"hidden_dropout_prob"},{anchor:"transformers.MobileViTConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.MobileViTConfig.classifier_dropout_prob",description:`<strong>classifier_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for attached classifiers.`,name:"classifier_dropout_prob"},{anchor:"transformers.MobileViTConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.MobileViTConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-5) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.MobileViTConfig.qkv_bias",description:`<strong>qkv_bias</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to add a bias to the queries, keys and values.`,name:"qkv_bias"},{anchor:"transformers.MobileViTConfig.aspp_out_channels",description:`<strong>aspp_out_channels</strong> (<code>int</code>, <code>optional</code>, defaults to 256) &#x2014;
Number of output channels used in the ASPP layer for semantic segmentation.`,name:"aspp_out_channels"},{anchor:"transformers.MobileViTConfig.atrous_rates",description:`<strong>atrous_rates</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [6, 12, 18]) &#x2014;
Dilation factors used in the ASPP layer for semantic segmentation.`,name:"atrous_rates"},{anchor:"transformers.MobileViTConfig.aspp_dropout_prob",description:`<strong>aspp_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the ASPP layer for semantic segmentation.`,name:"aspp_dropout_prob"},{anchor:"transformers.MobileViTConfig.semantic_loss_ignore_index",description:`<strong>semantic_loss_ignore_index</strong> (<code>int</code>, <em>optional</em>, defaults to 255) &#x2014;
The index that is ignored by the loss function of the semantic segmentation model.`,name:"semantic_loss_ignore_index"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/mobilevit/configuration_mobilevit.py#L46"}}),te=new ko({props:{anchor:"transformers.MobileViTConfig.example",$$slots:{default:[ks]},$$scope:{ctx:x}}}),je=new et({}),Se=new Z({props:{name:"class transformers.MobileViTFeatureExtractor",anchor:"transformers.MobileViTFeatureExtractor",parameters:[{name:"do_resize",val:" = True"},{name:"size",val:" = 288"},{name:"resample",val:" = <Resampling.BILINEAR: 2>"},{name:"do_center_crop",val:" = True"},{name:"crop_size",val:" = 256"},{name:"do_flip_channels",val:" = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MobileViTFeatureExtractor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the input to a certain <code>size</code>.`,name:"do_resize"},{anchor:"transformers.MobileViTFeatureExtractor.size",description:`<strong>size</strong> (<code>int</code> or <code>Tuple(int)</code>, <em>optional</em>, defaults to 288) &#x2014;
Resize the input to the given size. If a tuple is provided, it should be (width, height). If only an
integer is provided, then the input will be resized to (size, size). Only has an effect if <code>do_resize</code> is
set to <code>True</code>.`,name:"size"},{anchor:"transformers.MobileViTFeatureExtractor.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>PIL.Image.BILINEAR</code>) &#x2014;
An optional resampling filter. This can be one of <code>PIL.Image.NEAREST</code>, <code>PIL.Image.BOX</code>,
<code>PIL.Image.BILINEAR</code>, <code>PIL.Image.HAMMING</code>, <code>PIL.Image.BICUBIC</code> or <code>PIL.Image.LANCZOS</code>. Only has an effect
if <code>do_resize</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.MobileViTFeatureExtractor.do_center_crop",description:`<strong>do_center_crop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to crop the input at the center. If the input size is smaller than <code>crop_size</code> along any edge, the
image is padded with 0&#x2019;s and then center cropped.`,name:"do_center_crop"},{anchor:"transformers.MobileViTFeatureExtractor.crop_size",description:`<strong>crop_size</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
Desired output size when applying center-cropping. Only has an effect if <code>do_center_crop</code> is set to <code>True</code>.`,name:"crop_size"},{anchor:"transformers.MobileViTFeatureExtractor.do_flip_channels",description:`<strong>do_flip_channels</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to flip the color channels from RGB to BGR.`,name:"do_flip_channels"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/mobilevit/feature_extraction_mobilevit.py#L30"}}),ze=new Z({props:{name:"__call__",anchor:"transformers.MobileViTFeatureExtractor.__call__",parameters:[{name:"images",val:": typing.Union[PIL.Image.Image, numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[PIL.Image.Image], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]]"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MobileViTFeatureExtractor.__call__.images",description:`<strong>images</strong> (<code>PIL.Image.Image</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>, <code>List[PIL.Image.Image]</code>, <code>List[np.ndarray]</code>, <code>List[torch.Tensor]</code>) &#x2014;
The image or batch of images to be prepared. Each image can be a PIL image, NumPy array or PyTorch
tensor. In case of a NumPy array/PyTorch tensor, each image should be of shape (C, H, W), where C is a
number of channels, H and W are image height and width.`,name:"images"},{anchor:"transformers.MobileViTFeatureExtractor.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/pr_17354/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>, defaults to <code>&apos;np&apos;</code>) &#x2014;
If set, will return tensors of a particular framework. Acceptable values are:</p>
<ul>
<li><code>&apos;tf&apos;</code>: Return TensorFlow <code>tf.constant</code> objects.</li>
<li><code>&apos;pt&apos;</code>: Return PyTorch <code>torch.Tensor</code> objects.</li>
<li><code>&apos;np&apos;</code>: Return NumPy <code>np.ndarray</code> objects.</li>
<li><code>&apos;jax&apos;</code>: Return JAX <code>jnp.ndarray</code> objects.</li>
</ul>`,name:"return_tensors"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/mobilevit/feature_extraction_mobilevit.py#L77",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_17354/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a> with the following fields:</p>
<ul>
<li><strong>pixel_values</strong> \u2014 Pixel values to be fed to a model, of shape (batch_size, num_channels, height,
width).</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_17354/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a></p>
`}}),ae=new Fo({props:{warning:!0,$$slots:{default:[Is]},$$scope:{ctx:x}}}),Ae=new et({}),Le=new Z({props:{name:"class transformers.MobileViTModel",anchor:"transformers.MobileViTModel",parameters:[{name:"config",val:": MobileViTConfig"},{name:"expand_output",val:": bool = True"}],parametersDescription:[{anchor:"transformers.MobileViTModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/mobilevit/modeling_mobilevit.py#L714"}}),De=new Z({props:{name:"forward",anchor:"transformers.MobileViTModel.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[torch.Tensor] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.MobileViTModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.MobileViTModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MobileViTModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17354/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/mobilevit/modeling_mobilevit.py#L751",returnDescription:`
<p>A <code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state after a pooling operation on the spatial dimensions.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, num_channels, height, width)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),se=new Fo({props:{$$slots:{default:[Ps]},$$scope:{ctx:x}}}),ne=new ko({props:{anchor:"transformers.MobileViTModel.forward.example",$$slots:{default:[js]},$$scope:{ctx:x}}}),Re=new et({}),Be=new Z({props:{name:"class transformers.MobileViTForImageClassification",anchor:"transformers.MobileViTForImageClassification",parameters:[{name:"config",val:": MobileViTConfig"}],parametersDescription:[{anchor:"transformers.MobileViTForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/mobilevit/modeling_mobilevit.py#L809"}}),He=new Z({props:{name:"forward",anchor:"transformers.MobileViTForImageClassification.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[torch.Tensor] = None"},{name:"labels",val:": typing.Optional[torch.Tensor] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.MobileViTForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.MobileViTForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MobileViTForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17354/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.MobileViTForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss). If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/mobilevit/modeling_mobilevit.py#L825",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_17354/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also
called feature maps) of the model at the output of each stage.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_17354/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),le=new Fo({props:{$$slots:{default:[Ss]},$$scope:{ctx:x}}}),ce=new ko({props:{anchor:"transformers.MobileViTForImageClassification.forward.example",$$slots:{default:[Ns]},$$scope:{ctx:x}}}),Ge=new et({}),Je=new Z({props:{name:"class transformers.MobileViTForSemanticSegmentation",anchor:"transformers.MobileViTForSemanticSegmentation",parameters:[{name:"config",val:": MobileViTConfig"}],parametersDescription:[{anchor:"transformers.MobileViTForSemanticSegmentation.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/mobilevit/modeling_mobilevit.py#L1007"}}),Ze=new Z({props:{name:"forward",anchor:"transformers.MobileViTForSemanticSegmentation.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"labels",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.MobileViTForSemanticSegmentation.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.MobileViTForSemanticSegmentation.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MobileViTForSemanticSegmentation.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17354/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.MobileViTForSemanticSegmentation.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Ground truth semantic segmentation maps for computing the loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels &gt; 1</code>, a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/mobilevit/modeling_mobilevit.py#L1027",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_17354/en/main_classes/output#transformers.modeling_outputs.SemanticSegmenterOutput"
>transformers.modeling_outputs.SemanticSegmenterOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels, logits_height, logits_width)</code>) \u2014 Classification scores for each pixel.</p>
<Tip warning={true}>
<p>The logits returned do not necessarily have the same size as the <code>pixel_values</code> passed as inputs. This is
to avoid doing two interpolations and lose some quality when a user needs to resize the logits to the
original image size as post-processing. You should always check your logits shape and resize as needed.</p>
</Tip>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, patch_size, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, patch_size, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_17354/en/main_classes/output#transformers.modeling_outputs.SemanticSegmenterOutput"
>transformers.modeling_outputs.SemanticSegmenterOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),pe=new Fo({props:{$$slots:{default:[zs]},$$scope:{ctx:x}}}),me=new ko({props:{anchor:"transformers.MobileViTForSemanticSegmentation.forward.example",$$slots:{default:[As]},$$scope:{ctx:x}}}),{c(){c=a("meta"),v=m(),u=a("h1"),p=a("a"),b=a("span"),T(n.$$.fragment),g=m(),E=a("span"),jo=i("MobileViT"),Kt=m(),O=a("h2"),K=a("a"),wt=a("span"),T(we.$$.fragment),So=m(),Mt=a("span"),No=i("Overview"),Qt=m(),Q=a("p"),zo=i("The MobileViT model was proposed in "),Me=a("a"),Ao=i("MobileViT: Light-weight, General-purpose, and Mobile-friendly Vision Transformer"),Lo=i(" by Sachin Mehta and Mohammad Rastegari. MobileViT introduces a new layer that replaces local processing in convolutions with global processing using transformers."),eo=m(),tt=a("p"),Oo=i("The abstract from the paper is the following:"),to=m(),ot=a("p"),$t=a("em"),qo=i("Light-weight convolutional neural networks (CNNs) are the de-facto for mobile vision tasks. Their spatial inductive biases allow them to learn representations with fewer parameters across different vision tasks. However, these networks are spatially local. To learn global representations, self-attention-based vision trans-formers (ViTs) have been adopted. Unlike CNNs, ViTs are heavy-weight. In this paper, we ask the following question: is it possible to combine the strengths of CNNs and ViTs to build a light-weight and low latency network for mobile vision tasks? Towards this end, we introduce MobileViT, a light-weight and general-purpose vision transformer for mobile devices. MobileViT presents a different perspective for the global processing of information with transformers, i.e., transformers as convolutions. Our results show that MobileViT significantly outperforms CNN- and ViT-based networks across different tasks and datasets. On the ImageNet-1k dataset, MobileViT achieves top-1 accuracy of 78.4% with about 6 million parameters, which is 3.2% and 6.2% more accurate than MobileNetv3 (CNN-based) and DeIT (ViT-based) for a similar number of parameters. On the MS-COCO object detection task, MobileViT is 5.7% more accurate than MobileNetv3 for a similar number of parameters."),oo=m(),at=a("p"),Do=i("Tips:"),ao=m(),P=a("ul"),Vt=a("li"),yt=a("p"),Ro=i("MobileViT is more like a CNN than a Transformer model. It does not work on sequence data but on batches of images. Unlike ViT, there are no embeddings. The backbone model outputs a feature map."),Bo=m(),xt=a("li"),$e=a("p"),Wo=i("One can use "),rt=a("a"),Uo=i("MobileViTFeatureExtractor"),Ho=i(" to prepare images for the model. Note that if you do your own preprocessing, the pretrained checkpoints expect images to be in BGR pixel order (not RGB)."),Go=m(),Et=a("li"),Ve=a("p"),Jo=i("The available image classification checkpoints are pre-trained on "),ye=a("a"),Xo=i("ImageNet"),Yo=i(" (also referred to as ILSVRC 2012, a collection of 1.3 million images and 1,000 classes)."),Zo=m(),Ct=a("li"),q=a("p"),Ko=i("The segmentation model uses a "),xe=a("a"),Qo=i("DeepLabV3"),ea=i(" head. The available semantic segmentation checkpoints are pre-trained on "),Ee=a("a"),ta=i("PASCAL VOC"),oa=i("."),ro=m(),A=a("p"),aa=i("This model was contributed by "),Ce=a("a"),ra=i("matthijs"),sa=i(". The original code and weights can be found "),Fe=a("a"),na=i("here"),ia=i("."),so=m(),D=a("h2"),ee=a("a"),Ft=a("span"),T(ke.$$.fragment),la=m(),kt=a("span"),ca=i("MobileViTConfig"),no=m(),C=a("div"),T(Ie.$$.fragment),da=m(),R=a("p"),pa=i("This is the configuration class to store the configuration of a "),st=a("a"),ma=i("MobileViTModel"),ha=i(`. It is used to instantiate a
MobileViT model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the MobileViT
`),Pe=a("a"),fa=i("apple/mobilevit-small"),ua=i(" architecture."),ga=m(),B=a("p"),_a=i("Configuration objects inherit from "),nt=a("a"),ba=i("PretrainedConfig"),va=i(` and can be used to control the model outputs. Read the
documentation from `),it=a("a"),Ta=i("PretrainedConfig"),wa=i(" for more information."),Ma=m(),T(te.$$.fragment),io=m(),W=a("h2"),oe=a("a"),It=a("span"),T(je.$$.fragment),$a=m(),Pt=a("span"),Va=i("MobileViTFeatureExtractor"),lo=m(),F=a("div"),T(Se.$$.fragment),ya=m(),jt=a("p"),xa=i("Constructs a MobileViT feature extractor."),Ea=m(),Ne=a("p"),Ca=i("This feature extractor inherits from "),lt=a("a"),Fa=i("FeatureExtractionMixin"),ka=i(` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),Ia=m(),L=a("div"),T(ze.$$.fragment),Pa=m(),St=a("p"),ja=i("Main method to prepare for the model one or several image(s)."),Sa=m(),T(ae.$$.fragment),co=m(),U=a("h2"),re=a("a"),Nt=a("span"),T(Ae.$$.fragment),Na=m(),zt=a("span"),za=i("MobileViTModel"),po=m(),z=a("div"),T(Le.$$.fragment),Aa=m(),Oe=a("p"),La=i(`The bare MobileViT model outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),qe=a("a"),Oa=i("torch.nn.Module"),qa=i(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Da=m(),j=a("div"),T(De.$$.fragment),Ra=m(),H=a("p"),Ba=i("The "),ct=a("a"),Wa=i("MobileViTModel"),Ua=i(" forward method, overrides the "),At=a("code"),Ha=i("__call__"),Ga=i(" special method."),Ja=m(),T(se.$$.fragment),Xa=m(),T(ne.$$.fragment),mo=m(),G=a("h2"),ie=a("a"),Lt=a("span"),T(Re.$$.fragment),Ya=m(),Ot=a("span"),Za=i("MobileViTForImageClassification"),ho=m(),k=a("div"),T(Be.$$.fragment),Ka=m(),qt=a("p"),Qa=i(`MobileViT model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),er=m(),We=a("p"),tr=i("This model is a PyTorch "),Ue=a("a"),or=i("torch.nn.Module"),ar=i(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),rr=m(),S=a("div"),T(He.$$.fragment),sr=m(),J=a("p"),nr=i("The "),dt=a("a"),ir=i("MobileViTForImageClassification"),lr=i(" forward method, overrides the "),Dt=a("code"),cr=i("__call__"),dr=i(" special method."),pr=m(),T(le.$$.fragment),mr=m(),T(ce.$$.fragment),fo=m(),X=a("h2"),de=a("a"),Rt=a("span"),T(Ge.$$.fragment),hr=m(),Bt=a("span"),fr=i("MobileViTForSemanticSegmentation"),uo=m(),I=a("div"),T(Je.$$.fragment),ur=m(),Wt=a("p"),gr=i("MobileViT model with a semantic segmentation head on top, e.g. for Pascal VOC."),_r=m(),Xe=a("p"),br=i("This model is a PyTorch "),Ye=a("a"),vr=i("torch.nn.Module"),Tr=i(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),wr=m(),N=a("div"),T(Ze.$$.fragment),Mr=m(),Y=a("p"),$r=i("The "),pt=a("a"),Vr=i("MobileViTForSemanticSegmentation"),yr=i(" forward method, overrides the "),Ut=a("code"),xr=i("__call__"),Er=i(" special method."),Cr=m(),T(pe.$$.fragment),Fr=m(),T(me.$$.fragment),this.h()},l(t){const f=Cs('[data-svelte="svelte-1phssyn"]',document.head);c=r(f,"META",{name:!0,content:!0}),f.forEach(o),v=h(t),u=r(t,"H1",{class:!0});var Ke=s(u);p=r(Ke,"A",{id:!0,class:!0,href:!0});var Ht=s(p);b=r(Ht,"SPAN",{});var Gt=s(b);w(n.$$.fragment,Gt),Gt.forEach(o),Ht.forEach(o),g=h(Ke),E=r(Ke,"SPAN",{});var Jt=s(E);jo=l(Jt,"MobileViT"),Jt.forEach(o),Ke.forEach(o),Kt=h(t),O=r(t,"H2",{class:!0});var Qe=s(O);K=r(Qe,"A",{id:!0,class:!0,href:!0});var Xt=s(K);wt=r(Xt,"SPAN",{});var Yt=s(wt);w(we.$$.fragment,Yt),Yt.forEach(o),Xt.forEach(o),So=h(Qe),Mt=r(Qe,"SPAN",{});var Zt=s(Mt);No=l(Zt,"Overview"),Zt.forEach(o),Qe.forEach(o),Qt=h(t),Q=r(t,"P",{});var _o=s(Q);zo=l(_o,"The MobileViT model was proposed in "),Me=r(_o,"A",{href:!0,rel:!0});var kr=s(Me);Ao=l(kr,"MobileViT: Light-weight, General-purpose, and Mobile-friendly Vision Transformer"),kr.forEach(o),Lo=l(_o," by Sachin Mehta and Mohammad Rastegari. MobileViT introduces a new layer that replaces local processing in convolutions with global processing using transformers."),_o.forEach(o),eo=h(t),tt=r(t,"P",{});var Ir=s(tt);Oo=l(Ir,"The abstract from the paper is the following:"),Ir.forEach(o),to=h(t),ot=r(t,"P",{});var Pr=s(ot);$t=r(Pr,"EM",{});var jr=s($t);qo=l(jr,"Light-weight convolutional neural networks (CNNs) are the de-facto for mobile vision tasks. Their spatial inductive biases allow them to learn representations with fewer parameters across different vision tasks. However, these networks are spatially local. To learn global representations, self-attention-based vision trans-formers (ViTs) have been adopted. Unlike CNNs, ViTs are heavy-weight. In this paper, we ask the following question: is it possible to combine the strengths of CNNs and ViTs to build a light-weight and low latency network for mobile vision tasks? Towards this end, we introduce MobileViT, a light-weight and general-purpose vision transformer for mobile devices. MobileViT presents a different perspective for the global processing of information with transformers, i.e., transformers as convolutions. Our results show that MobileViT significantly outperforms CNN- and ViT-based networks across different tasks and datasets. On the ImageNet-1k dataset, MobileViT achieves top-1 accuracy of 78.4% with about 6 million parameters, which is 3.2% and 6.2% more accurate than MobileNetv3 (CNN-based) and DeIT (ViT-based) for a similar number of parameters. On the MS-COCO object detection task, MobileViT is 5.7% more accurate than MobileNetv3 for a similar number of parameters."),jr.forEach(o),Pr.forEach(o),oo=h(t),at=r(t,"P",{});var Sr=s(at);Do=l(Sr,"Tips:"),Sr.forEach(o),ao=h(t),P=r(t,"UL",{});var he=s(P);Vt=r(he,"LI",{});var Nr=s(Vt);yt=r(Nr,"P",{});var zr=s(yt);Ro=l(zr,"MobileViT is more like a CNN than a Transformer model. It does not work on sequence data but on batches of images. Unlike ViT, there are no embeddings. The backbone model outputs a feature map."),zr.forEach(o),Nr.forEach(o),Bo=h(he),xt=r(he,"LI",{});var Ar=s(xt);$e=r(Ar,"P",{});var bo=s($e);Wo=l(bo,"One can use "),rt=r(bo,"A",{href:!0});var Lr=s(rt);Uo=l(Lr,"MobileViTFeatureExtractor"),Lr.forEach(o),Ho=l(bo," to prepare images for the model. Note that if you do your own preprocessing, the pretrained checkpoints expect images to be in BGR pixel order (not RGB)."),bo.forEach(o),Ar.forEach(o),Go=h(he),Et=r(he,"LI",{});var Or=s(Et);Ve=r(Or,"P",{});var vo=s(Ve);Jo=l(vo,"The available image classification checkpoints are pre-trained on "),ye=r(vo,"A",{href:!0,rel:!0});var qr=s(ye);Xo=l(qr,"ImageNet"),qr.forEach(o),Yo=l(vo," (also referred to as ILSVRC 2012, a collection of 1.3 million images and 1,000 classes)."),vo.forEach(o),Or.forEach(o),Zo=h(he),Ct=r(he,"LI",{});var Dr=s(Ct);q=r(Dr,"P",{});var mt=s(q);Ko=l(mt,"The segmentation model uses a "),xe=r(mt,"A",{href:!0,rel:!0});var Rr=s(xe);Qo=l(Rr,"DeepLabV3"),Rr.forEach(o),ea=l(mt," head. The available semantic segmentation checkpoints are pre-trained on "),Ee=r(mt,"A",{href:!0,rel:!0});var Br=s(Ee);ta=l(Br,"PASCAL VOC"),Br.forEach(o),oa=l(mt,"."),mt.forEach(o),Dr.forEach(o),he.forEach(o),ro=h(t),A=r(t,"P",{});var ht=s(A);aa=l(ht,"This model was contributed by "),Ce=r(ht,"A",{href:!0,rel:!0});var Wr=s(Ce);ra=l(Wr,"matthijs"),Wr.forEach(o),sa=l(ht,". The original code and weights can be found "),Fe=r(ht,"A",{href:!0,rel:!0});var Ur=s(Fe);na=l(Ur,"here"),Ur.forEach(o),ia=l(ht,"."),ht.forEach(o),so=h(t),D=r(t,"H2",{class:!0});var To=s(D);ee=r(To,"A",{id:!0,class:!0,href:!0});var Hr=s(ee);Ft=r(Hr,"SPAN",{});var Gr=s(Ft);w(ke.$$.fragment,Gr),Gr.forEach(o),Hr.forEach(o),la=h(To),kt=r(To,"SPAN",{});var Jr=s(kt);ca=l(Jr,"MobileViTConfig"),Jr.forEach(o),To.forEach(o),no=h(t),C=r(t,"DIV",{class:!0});var fe=s(C);w(Ie.$$.fragment,fe),da=h(fe),R=r(fe,"P",{});var ft=s(R);pa=l(ft,"This is the configuration class to store the configuration of a "),st=r(ft,"A",{href:!0});var Xr=s(st);ma=l(Xr,"MobileViTModel"),Xr.forEach(o),ha=l(ft,`. It is used to instantiate a
MobileViT model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the MobileViT
`),Pe=r(ft,"A",{href:!0,rel:!0});var Yr=s(Pe);fa=l(Yr,"apple/mobilevit-small"),Yr.forEach(o),ua=l(ft," architecture."),ft.forEach(o),ga=h(fe),B=r(fe,"P",{});var ut=s(B);_a=l(ut,"Configuration objects inherit from "),nt=r(ut,"A",{href:!0});var Zr=s(nt);ba=l(Zr,"PretrainedConfig"),Zr.forEach(o),va=l(ut,` and can be used to control the model outputs. Read the
documentation from `),it=r(ut,"A",{href:!0});var Kr=s(it);Ta=l(Kr,"PretrainedConfig"),Kr.forEach(o),wa=l(ut," for more information."),ut.forEach(o),Ma=h(fe),w(te.$$.fragment,fe),fe.forEach(o),io=h(t),W=r(t,"H2",{class:!0});var wo=s(W);oe=r(wo,"A",{id:!0,class:!0,href:!0});var Qr=s(oe);It=r(Qr,"SPAN",{});var es=s(It);w(je.$$.fragment,es),es.forEach(o),Qr.forEach(o),$a=h(wo),Pt=r(wo,"SPAN",{});var ts=s(Pt);Va=l(ts,"MobileViTFeatureExtractor"),ts.forEach(o),wo.forEach(o),lo=h(t),F=r(t,"DIV",{class:!0});var ue=s(F);w(Se.$$.fragment,ue),ya=h(ue),jt=r(ue,"P",{});var os=s(jt);xa=l(os,"Constructs a MobileViT feature extractor."),os.forEach(o),Ea=h(ue),Ne=r(ue,"P",{});var Mo=s(Ne);Ca=l(Mo,"This feature extractor inherits from "),lt=r(Mo,"A",{href:!0});var as=s(lt);Fa=l(as,"FeatureExtractionMixin"),as.forEach(o),ka=l(Mo,` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),Mo.forEach(o),Ia=h(ue),L=r(ue,"DIV",{class:!0});var gt=s(L);w(ze.$$.fragment,gt),Pa=h(gt),St=r(gt,"P",{});var rs=s(St);ja=l(rs,"Main method to prepare for the model one or several image(s)."),rs.forEach(o),Sa=h(gt),w(ae.$$.fragment,gt),gt.forEach(o),ue.forEach(o),co=h(t),U=r(t,"H2",{class:!0});var $o=s(U);re=r($o,"A",{id:!0,class:!0,href:!0});var ss=s(re);Nt=r(ss,"SPAN",{});var ns=s(Nt);w(Ae.$$.fragment,ns),ns.forEach(o),ss.forEach(o),Na=h($o),zt=r($o,"SPAN",{});var is=s(zt);za=l(is,"MobileViTModel"),is.forEach(o),$o.forEach(o),po=h(t),z=r(t,"DIV",{class:!0});var _t=s(z);w(Le.$$.fragment,_t),Aa=h(_t),Oe=r(_t,"P",{});var Vo=s(Oe);La=l(Vo,`The bare MobileViT model outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),qe=r(Vo,"A",{href:!0,rel:!0});var ls=s(qe);Oa=l(ls,"torch.nn.Module"),ls.forEach(o),qa=l(Vo,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Vo.forEach(o),Da=h(_t),j=r(_t,"DIV",{class:!0});var ge=s(j);w(De.$$.fragment,ge),Ra=h(ge),H=r(ge,"P",{});var bt=s(H);Ba=l(bt,"The "),ct=r(bt,"A",{href:!0});var cs=s(ct);Wa=l(cs,"MobileViTModel"),cs.forEach(o),Ua=l(bt," forward method, overrides the "),At=r(bt,"CODE",{});var ds=s(At);Ha=l(ds,"__call__"),ds.forEach(o),Ga=l(bt," special method."),bt.forEach(o),Ja=h(ge),w(se.$$.fragment,ge),Xa=h(ge),w(ne.$$.fragment,ge),ge.forEach(o),_t.forEach(o),mo=h(t),G=r(t,"H2",{class:!0});var yo=s(G);ie=r(yo,"A",{id:!0,class:!0,href:!0});var ps=s(ie);Lt=r(ps,"SPAN",{});var ms=s(Lt);w(Re.$$.fragment,ms),ms.forEach(o),ps.forEach(o),Ya=h(yo),Ot=r(yo,"SPAN",{});var hs=s(Ot);Za=l(hs,"MobileViTForImageClassification"),hs.forEach(o),yo.forEach(o),ho=h(t),k=r(t,"DIV",{class:!0});var _e=s(k);w(Be.$$.fragment,_e),Ka=h(_e),qt=r(_e,"P",{});var fs=s(qt);Qa=l(fs,`MobileViT model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),fs.forEach(o),er=h(_e),We=r(_e,"P",{});var xo=s(We);tr=l(xo,"This model is a PyTorch "),Ue=r(xo,"A",{href:!0,rel:!0});var us=s(Ue);or=l(us,"torch.nn.Module"),us.forEach(o),ar=l(xo,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),xo.forEach(o),rr=h(_e),S=r(_e,"DIV",{class:!0});var be=s(S);w(He.$$.fragment,be),sr=h(be),J=r(be,"P",{});var vt=s(J);nr=l(vt,"The "),dt=r(vt,"A",{href:!0});var gs=s(dt);ir=l(gs,"MobileViTForImageClassification"),gs.forEach(o),lr=l(vt," forward method, overrides the "),Dt=r(vt,"CODE",{});var _s=s(Dt);cr=l(_s,"__call__"),_s.forEach(o),dr=l(vt," special method."),vt.forEach(o),pr=h(be),w(le.$$.fragment,be),mr=h(be),w(ce.$$.fragment,be),be.forEach(o),_e.forEach(o),fo=h(t),X=r(t,"H2",{class:!0});var Eo=s(X);de=r(Eo,"A",{id:!0,class:!0,href:!0});var bs=s(de);Rt=r(bs,"SPAN",{});var vs=s(Rt);w(Ge.$$.fragment,vs),vs.forEach(o),bs.forEach(o),hr=h(Eo),Bt=r(Eo,"SPAN",{});var Ts=s(Bt);fr=l(Ts,"MobileViTForSemanticSegmentation"),Ts.forEach(o),Eo.forEach(o),uo=h(t),I=r(t,"DIV",{class:!0});var ve=s(I);w(Je.$$.fragment,ve),ur=h(ve),Wt=r(ve,"P",{});var ws=s(Wt);gr=l(ws,"MobileViT model with a semantic segmentation head on top, e.g. for Pascal VOC."),ws.forEach(o),_r=h(ve),Xe=r(ve,"P",{});var Co=s(Xe);br=l(Co,"This model is a PyTorch "),Ye=r(Co,"A",{href:!0,rel:!0});var Ms=s(Ye);vr=l(Ms,"torch.nn.Module"),Ms.forEach(o),Tr=l(Co,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Co.forEach(o),wr=h(ve),N=r(ve,"DIV",{class:!0});var Te=s(N);w(Ze.$$.fragment,Te),Mr=h(Te),Y=r(Te,"P",{});var Tt=s(Y);$r=l(Tt,"The "),pt=r(Tt,"A",{href:!0});var $s=s(pt);Vr=l($s,"MobileViTForSemanticSegmentation"),$s.forEach(o),yr=l(Tt," forward method, overrides the "),Ut=r(Tt,"CODE",{});var Vs=s(Ut);xr=l(Vs,"__call__"),Vs.forEach(o),Er=l(Tt," special method."),Tt.forEach(o),Cr=h(Te),w(pe.$$.fragment,Te),Fr=h(Te),w(me.$$.fragment,Te),Te.forEach(o),ve.forEach(o),this.h()},h(){d(c,"name","hf:doc:metadata"),d(c,"content",JSON.stringify(Os)),d(p,"id","mobilevit"),d(p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p,"href","#mobilevit"),d(u,"class","relative group"),d(K,"id","overview"),d(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K,"href","#overview"),d(O,"class","relative group"),d(Me,"href","https://arxiv.org/abs/2110.02178"),d(Me,"rel","nofollow"),d(rt,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),d(ye,"href","http://www.image-net.org/challenges/LSVRC/2012/"),d(ye,"rel","nofollow"),d(xe,"href","https://arxiv.org/abs/1706.05587"),d(xe,"rel","nofollow"),d(Ee,"href","http://host.robots.ox.ac.uk/pascal/VOC/"),d(Ee,"rel","nofollow"),d(Ce,"href","https://huggingface.co/Matthijs"),d(Ce,"rel","nofollow"),d(Fe,"href","https://github.com/apple/ml-cvnets"),d(Fe,"rel","nofollow"),d(ee,"id","transformers.MobileViTConfig"),d(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ee,"href","#transformers.MobileViTConfig"),d(D,"class","relative group"),d(st,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTModel"),d(Pe,"href","https://huggingface.co/apple/mobilevit-small"),d(Pe,"rel","nofollow"),d(nt,"href","/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig"),d(it,"href","/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig"),d(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oe,"id","transformers.MobileViTFeatureExtractor"),d(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oe,"href","#transformers.MobileViTFeatureExtractor"),d(W,"class","relative group"),d(lt,"href","/docs/transformers/pr_17354/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"),d(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(re,"id","transformers.MobileViTModel"),d(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(re,"href","#transformers.MobileViTModel"),d(U,"class","relative group"),d(qe,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(qe,"rel","nofollow"),d(ct,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTModel"),d(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ie,"id","transformers.MobileViTForImageClassification"),d(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ie,"href","#transformers.MobileViTForImageClassification"),d(G,"class","relative group"),d(Ue,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(Ue,"rel","nofollow"),d(dt,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),d(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(de,"id","transformers.MobileViTForSemanticSegmentation"),d(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(de,"href","#transformers.MobileViTForSemanticSegmentation"),d(X,"class","relative group"),d(Ye,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(Ye,"rel","nofollow"),d(pt,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),d(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,f){e(document.head,c),_(t,v,f),_(t,u,f),e(u,p),e(p,b),M(n,b,null),e(u,g),e(u,E),e(E,jo),_(t,Kt,f),_(t,O,f),e(O,K),e(K,wt),M(we,wt,null),e(O,So),e(O,Mt),e(Mt,No),_(t,Qt,f),_(t,Q,f),e(Q,zo),e(Q,Me),e(Me,Ao),e(Q,Lo),_(t,eo,f),_(t,tt,f),e(tt,Oo),_(t,to,f),_(t,ot,f),e(ot,$t),e($t,qo),_(t,oo,f),_(t,at,f),e(at,Do),_(t,ao,f),_(t,P,f),e(P,Vt),e(Vt,yt),e(yt,Ro),e(P,Bo),e(P,xt),e(xt,$e),e($e,Wo),e($e,rt),e(rt,Uo),e($e,Ho),e(P,Go),e(P,Et),e(Et,Ve),e(Ve,Jo),e(Ve,ye),e(ye,Xo),e(Ve,Yo),e(P,Zo),e(P,Ct),e(Ct,q),e(q,Ko),e(q,xe),e(xe,Qo),e(q,ea),e(q,Ee),e(Ee,ta),e(q,oa),_(t,ro,f),_(t,A,f),e(A,aa),e(A,Ce),e(Ce,ra),e(A,sa),e(A,Fe),e(Fe,na),e(A,ia),_(t,so,f),_(t,D,f),e(D,ee),e(ee,Ft),M(ke,Ft,null),e(D,la),e(D,kt),e(kt,ca),_(t,no,f),_(t,C,f),M(Ie,C,null),e(C,da),e(C,R),e(R,pa),e(R,st),e(st,ma),e(R,ha),e(R,Pe),e(Pe,fa),e(R,ua),e(C,ga),e(C,B),e(B,_a),e(B,nt),e(nt,ba),e(B,va),e(B,it),e(it,Ta),e(B,wa),e(C,Ma),M(te,C,null),_(t,io,f),_(t,W,f),e(W,oe),e(oe,It),M(je,It,null),e(W,$a),e(W,Pt),e(Pt,Va),_(t,lo,f),_(t,F,f),M(Se,F,null),e(F,ya),e(F,jt),e(jt,xa),e(F,Ea),e(F,Ne),e(Ne,Ca),e(Ne,lt),e(lt,Fa),e(Ne,ka),e(F,Ia),e(F,L),M(ze,L,null),e(L,Pa),e(L,St),e(St,ja),e(L,Sa),M(ae,L,null),_(t,co,f),_(t,U,f),e(U,re),e(re,Nt),M(Ae,Nt,null),e(U,Na),e(U,zt),e(zt,za),_(t,po,f),_(t,z,f),M(Le,z,null),e(z,Aa),e(z,Oe),e(Oe,La),e(Oe,qe),e(qe,Oa),e(Oe,qa),e(z,Da),e(z,j),M(De,j,null),e(j,Ra),e(j,H),e(H,Ba),e(H,ct),e(ct,Wa),e(H,Ua),e(H,At),e(At,Ha),e(H,Ga),e(j,Ja),M(se,j,null),e(j,Xa),M(ne,j,null),_(t,mo,f),_(t,G,f),e(G,ie),e(ie,Lt),M(Re,Lt,null),e(G,Ya),e(G,Ot),e(Ot,Za),_(t,ho,f),_(t,k,f),M(Be,k,null),e(k,Ka),e(k,qt),e(qt,Qa),e(k,er),e(k,We),e(We,tr),e(We,Ue),e(Ue,or),e(We,ar),e(k,rr),e(k,S),M(He,S,null),e(S,sr),e(S,J),e(J,nr),e(J,dt),e(dt,ir),e(J,lr),e(J,Dt),e(Dt,cr),e(J,dr),e(S,pr),M(le,S,null),e(S,mr),M(ce,S,null),_(t,fo,f),_(t,X,f),e(X,de),e(de,Rt),M(Ge,Rt,null),e(X,hr),e(X,Bt),e(Bt,fr),_(t,uo,f),_(t,I,f),M(Je,I,null),e(I,ur),e(I,Wt),e(Wt,gr),e(I,_r),e(I,Xe),e(Xe,br),e(Xe,Ye),e(Ye,vr),e(Xe,Tr),e(I,wr),e(I,N),M(Ze,N,null),e(N,Mr),e(N,Y),e(Y,$r),e(Y,pt),e(pt,Vr),e(Y,yr),e(Y,Ut),e(Ut,xr),e(Y,Er),e(N,Cr),M(pe,N,null),e(N,Fr),M(me,N,null),go=!0},p(t,[f]){const Ke={};f&2&&(Ke.$$scope={dirty:f,ctx:t}),te.$set(Ke);const Ht={};f&2&&(Ht.$$scope={dirty:f,ctx:t}),ae.$set(Ht);const Gt={};f&2&&(Gt.$$scope={dirty:f,ctx:t}),se.$set(Gt);const Jt={};f&2&&(Jt.$$scope={dirty:f,ctx:t}),ne.$set(Jt);const Qe={};f&2&&(Qe.$$scope={dirty:f,ctx:t}),le.$set(Qe);const Xt={};f&2&&(Xt.$$scope={dirty:f,ctx:t}),ce.$set(Xt);const Yt={};f&2&&(Yt.$$scope={dirty:f,ctx:t}),pe.$set(Yt);const Zt={};f&2&&(Zt.$$scope={dirty:f,ctx:t}),me.$set(Zt)},i(t){go||($(n.$$.fragment,t),$(we.$$.fragment,t),$(ke.$$.fragment,t),$(Ie.$$.fragment,t),$(te.$$.fragment,t),$(je.$$.fragment,t),$(Se.$$.fragment,t),$(ze.$$.fragment,t),$(ae.$$.fragment,t),$(Ae.$$.fragment,t),$(Le.$$.fragment,t),$(De.$$.fragment,t),$(se.$$.fragment,t),$(ne.$$.fragment,t),$(Re.$$.fragment,t),$(Be.$$.fragment,t),$(He.$$.fragment,t),$(le.$$.fragment,t),$(ce.$$.fragment,t),$(Ge.$$.fragment,t),$(Je.$$.fragment,t),$(Ze.$$.fragment,t),$(pe.$$.fragment,t),$(me.$$.fragment,t),go=!0)},o(t){V(n.$$.fragment,t),V(we.$$.fragment,t),V(ke.$$.fragment,t),V(Ie.$$.fragment,t),V(te.$$.fragment,t),V(je.$$.fragment,t),V(Se.$$.fragment,t),V(ze.$$.fragment,t),V(ae.$$.fragment,t),V(Ae.$$.fragment,t),V(Le.$$.fragment,t),V(De.$$.fragment,t),V(se.$$.fragment,t),V(ne.$$.fragment,t),V(Re.$$.fragment,t),V(Be.$$.fragment,t),V(He.$$.fragment,t),V(le.$$.fragment,t),V(ce.$$.fragment,t),V(Ge.$$.fragment,t),V(Je.$$.fragment,t),V(Ze.$$.fragment,t),V(pe.$$.fragment,t),V(me.$$.fragment,t),go=!1},d(t){o(c),t&&o(v),t&&o(u),y(n),t&&o(Kt),t&&o(O),y(we),t&&o(Qt),t&&o(Q),t&&o(eo),t&&o(tt),t&&o(to),t&&o(ot),t&&o(oo),t&&o(at),t&&o(ao),t&&o(P),t&&o(ro),t&&o(A),t&&o(so),t&&o(D),y(ke),t&&o(no),t&&o(C),y(Ie),y(te),t&&o(io),t&&o(W),y(je),t&&o(lo),t&&o(F),y(Se),y(ze),y(ae),t&&o(co),t&&o(U),y(Ae),t&&o(po),t&&o(z),y(Le),y(De),y(se),y(ne),t&&o(mo),t&&o(G),y(Re),t&&o(ho),t&&o(k),y(Be),y(He),y(le),y(ce),t&&o(fo),t&&o(X),y(Ge),t&&o(uo),t&&o(I),y(Je),y(Ze),y(pe),y(me)}}}const Os={local:"mobilevit",sections:[{local:"overview",title:"Overview"},{local:"transformers.MobileViTConfig",title:"MobileViTConfig"},{local:"transformers.MobileViTFeatureExtractor",title:"MobileViTFeatureExtractor"},{local:"transformers.MobileViTModel",title:"MobileViTModel"},{local:"transformers.MobileViTForImageClassification",title:"MobileViTForImageClassification"},{local:"transformers.MobileViTForSemanticSegmentation",title:"MobileViTForSemanticSegmentation"}],title:"MobileViT"};function qs(x){return Fs(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Gs extends ys{constructor(c){super();xs(this,c,qs,Ls,Es,{})}}export{Gs as default,Os as metadata};
