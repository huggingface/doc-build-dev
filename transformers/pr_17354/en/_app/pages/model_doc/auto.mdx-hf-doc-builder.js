import{S as hjt,i as pjt,s as _jt,e as a,k as l,w as F,t as o,M as ujt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as bjt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as aYr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function vjt(x){let g,v,p,m,_,d,h,Eo,Ti,yf,nt,Mi,Ei,FL,xf,Oe,We,Ci,Sn,TL,Rn,Pn,ML,wi,Bn,EL,Ai,$f,xa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ti=a("code"),yf=o("model_type"),nt=o(" attribute is set to the same key you use when registering the config (here "),Mi=a("code"),Ei=o('"new-model"'),FL=o(")."),xf=l(),Oe=a("p"),We=o("Likewise, if your "),Ci=a("code"),Sn=o("NewModel"),TL=o(" is a subclass of "),Rn=a("a"),Pn=o("PreTrainedModel"),ML=o(`, make sure its
`),wi=a("code"),Bn=o("config_class"),EL=o(` attribute is set to the same class you use when registering the model (here
`),Ai=a("code"),$f=o("NewModelConfig"),xa=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Jk=s(p);m=r(Jk,"NewModelConfig"),Jk.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Li=s(d);h=r(Li,"PretrainedConfig"),Li.forEach(t),Eo=r(Ae,`, make sure its
`),Ti=n(Ae,"CODE",{});var Yk=s(Ti);yf=r(Yk,"model_type"),Yk.forEach(t),nt=r(Ae," attribute is set to the same key you use when registering the config (here "),Mi=n(Ae,"CODE",{});var Kk=s(Mi);Ei=r(Kk,'"new-model"'),Kk.forEach(t),FL=r(Ae,")."),Ae.forEach(t),xf=i(Qe),Oe=n(Qe,"P",{});var Co=s(Oe);We=r(Co,"Likewise, if your "),Ci=n(Co,"CODE",{});var $a=s(Ci);Sn=r($a,"NewModel"),$a.forEach(t),TL=r(Co," is a subclass of "),Rn=n(Co,"A",{href:!0});var Zk=s(Rn);Pn=r(Zk,"PreTrainedModel"),Zk.forEach(t),ML=r(Co,`, make sure its
`),wi=n(Co,"CODE",{});var kf=s(wi);Bn=r(kf,"config_class"),kf.forEach(t),EL=r(Co,` attribute is set to the same class you use when registering the model (here
`),Ai=n(Co,"CODE",{});var eS=s(Ai);$f=r(eS,"NewModelConfig"),eS.forEach(t),xa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Rn,"href","/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Ti),e(Ti,yf),e(g,nt),e(g,Mi),e(Mi,Ei),e(g,FL),b(Qe,xf,Ae),b(Qe,Oe,Ae),e(Oe,We),e(Oe,Ci),e(Ci,Sn),e(Oe,TL),e(Oe,Rn),e(Rn,Pn),e(Oe,ML),e(Oe,wi),e(wi,Bn),e(Oe,EL),e(Oe,Ai),e(Ai,$f),e(Oe,xa)},d(Qe){Qe&&t(g),Qe&&t(xf),Qe&&t(Oe)}}}function Fjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mjt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Ejt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cjt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function wjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ajt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ljt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $jt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ijt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Njt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Djt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ojt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ujt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Dt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ADt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Dt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ODt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Gt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bGt(x){let g,v,p,m,_,d,h,Eo,Ti,yf,nt,Mi,Ei,FL,xf,Oe,We,Ci,Sn,TL,Rn,Pn,ML,wi,Bn,EL,Ai,$f,xa,Qe,Ae,Jk,Li,Yk,Kk,Co,$a,Zk,kf,eS,Rze,bGe,yi,Sf,ete,CL,Pze,ote,Bze,vGe,In,Ize,rte,Nze,qze,tte,jze,Dze,FGe,wL,TGe,oS,Gze,MGe,Rf,EGe,xi,Pf,ate,AL,Oze,nte,Vze,CGe,wo,LL,Xze,yL,zze,rS,Wze,Qze,Hze,xL,Uze,ste,Jze,Yze,Kze,wr,$L,Zze,lte,eWe,oWe,$i,rWe,ite,tWe,aWe,dte,nWe,sWe,lWe,A,Bf,cte,iWe,dWe,tS,cWe,fWe,mWe,If,fte,gWe,hWe,aS,pWe,_We,uWe,Nf,mte,bWe,vWe,nS,FWe,TWe,MWe,qf,gte,EWe,CWe,sS,wWe,AWe,LWe,jf,hte,yWe,xWe,lS,$We,kWe,SWe,Df,pte,RWe,PWe,iS,BWe,IWe,NWe,Gf,_te,qWe,jWe,dS,DWe,GWe,OWe,Of,ute,VWe,XWe,cS,zWe,WWe,QWe,Vf,bte,HWe,UWe,fS,JWe,YWe,KWe,Xf,vte,ZWe,eQe,mS,oQe,rQe,tQe,zf,Fte,aQe,nQe,gS,sQe,lQe,iQe,Wf,Tte,dQe,cQe,hS,fQe,mQe,gQe,Qf,Mte,hQe,pQe,pS,_Qe,uQe,bQe,Hf,Ete,vQe,FQe,_S,TQe,MQe,EQe,Uf,Cte,CQe,wQe,uS,AQe,LQe,yQe,Jf,wte,xQe,$Qe,bS,kQe,SQe,RQe,Yf,Ate,PQe,BQe,vS,IQe,NQe,qQe,Kf,Lte,jQe,DQe,FS,GQe,OQe,VQe,Zf,yte,XQe,zQe,TS,WQe,QQe,HQe,em,xte,UQe,JQe,MS,YQe,KQe,ZQe,om,$te,eHe,oHe,ES,rHe,tHe,aHe,rm,kte,nHe,sHe,CS,lHe,iHe,dHe,tm,Ste,cHe,fHe,wS,mHe,gHe,hHe,am,Rte,pHe,_He,AS,uHe,bHe,vHe,nm,Pte,FHe,THe,LS,MHe,EHe,CHe,sm,Bte,wHe,AHe,yS,LHe,yHe,xHe,lm,Ite,$He,kHe,xS,SHe,RHe,PHe,im,Nte,BHe,IHe,$S,NHe,qHe,jHe,dm,qte,DHe,GHe,kS,OHe,VHe,XHe,cm,jte,zHe,WHe,SS,QHe,HHe,UHe,fm,Dte,JHe,YHe,RS,KHe,ZHe,eUe,mm,Gte,oUe,rUe,PS,tUe,aUe,nUe,gm,Ote,sUe,lUe,BS,iUe,dUe,cUe,hm,Vte,fUe,mUe,IS,gUe,hUe,pUe,pm,Xte,_Ue,uUe,NS,bUe,vUe,FUe,_m,zte,TUe,MUe,qS,EUe,CUe,wUe,um,Wte,AUe,LUe,jS,yUe,xUe,$Ue,bm,Qte,kUe,SUe,DS,RUe,PUe,BUe,vm,Hte,IUe,NUe,GS,qUe,jUe,DUe,Fm,Ute,GUe,OUe,OS,VUe,XUe,zUe,Tm,Jte,WUe,QUe,VS,HUe,UUe,JUe,Mm,Yte,YUe,KUe,XS,ZUe,eJe,oJe,Em,Kte,rJe,tJe,zS,aJe,nJe,sJe,Cm,Zte,lJe,iJe,WS,dJe,cJe,fJe,wm,eae,mJe,gJe,QS,hJe,pJe,_Je,Am,oae,uJe,bJe,HS,vJe,FJe,TJe,Lm,rae,MJe,EJe,US,CJe,wJe,AJe,ym,tae,LJe,yJe,JS,xJe,$Je,kJe,xm,aae,SJe,RJe,YS,PJe,BJe,IJe,$m,nae,NJe,qJe,KS,jJe,DJe,GJe,km,sae,OJe,VJe,ZS,XJe,zJe,WJe,Sm,lae,QJe,HJe,eR,UJe,JJe,YJe,Rm,iae,KJe,ZJe,oR,eYe,oYe,rYe,Pm,dae,tYe,aYe,rR,nYe,sYe,lYe,Bm,cae,iYe,dYe,tR,cYe,fYe,mYe,Im,fae,gYe,hYe,aR,pYe,_Ye,uYe,Nm,mae,bYe,vYe,nR,FYe,TYe,MYe,qm,gae,EYe,CYe,sR,wYe,AYe,LYe,jm,hae,yYe,xYe,lR,$Ye,kYe,SYe,Dm,pae,RYe,PYe,iR,BYe,IYe,NYe,Gm,_ae,qYe,jYe,dR,DYe,GYe,OYe,Om,uae,VYe,XYe,cR,zYe,WYe,QYe,Vm,bae,HYe,UYe,fR,JYe,YYe,KYe,Xm,vae,ZYe,eKe,mR,oKe,rKe,tKe,zm,Fae,aKe,nKe,gR,sKe,lKe,iKe,Wm,Tae,dKe,cKe,hR,fKe,mKe,gKe,Qm,Mae,hKe,pKe,pR,_Ke,uKe,bKe,Hm,Eae,vKe,FKe,_R,TKe,MKe,EKe,Um,Cae,CKe,wKe,uR,AKe,LKe,yKe,Jm,wae,xKe,$Ke,bR,kKe,SKe,RKe,Ym,Aae,PKe,BKe,vR,IKe,NKe,qKe,Km,Lae,jKe,DKe,FR,GKe,OKe,VKe,Zm,yae,XKe,zKe,TR,WKe,QKe,HKe,eg,xae,UKe,JKe,MR,YKe,KKe,ZKe,og,$ae,eZe,oZe,ER,rZe,tZe,aZe,rg,kae,nZe,sZe,CR,lZe,iZe,dZe,tg,Sae,cZe,fZe,wR,mZe,gZe,hZe,ag,Rae,pZe,_Ze,AR,uZe,bZe,vZe,ng,Pae,FZe,TZe,LR,MZe,EZe,CZe,sg,Bae,wZe,AZe,yR,LZe,yZe,xZe,lg,Iae,$Ze,kZe,xR,SZe,RZe,PZe,ig,Nae,BZe,IZe,$R,NZe,qZe,jZe,dg,qae,DZe,GZe,kR,OZe,VZe,XZe,cg,jae,zZe,WZe,SR,QZe,HZe,UZe,fg,Dae,JZe,YZe,RR,KZe,ZZe,eeo,mg,Gae,oeo,reo,PR,teo,aeo,neo,gg,Oae,seo,leo,BR,ieo,deo,ceo,hg,Vae,feo,meo,IR,geo,heo,peo,pg,Xae,_eo,ueo,NR,beo,veo,Feo,_g,zae,Teo,Meo,qR,Eeo,Ceo,weo,ug,Wae,Aeo,Leo,jR,yeo,xeo,$eo,bg,Qae,keo,Seo,DR,Reo,Peo,Beo,vg,Hae,Ieo,Neo,GR,qeo,jeo,Deo,Fg,Uae,Geo,Oeo,OR,Veo,Xeo,zeo,Tg,Jae,Weo,Qeo,VR,Heo,Ueo,Jeo,Mg,Yae,Yeo,Keo,XR,Zeo,eoo,ooo,Eg,Kae,roo,too,zR,aoo,noo,soo,Cg,Zae,loo,ioo,WR,doo,coo,foo,wg,ene,moo,goo,QR,hoo,poo,_oo,Ag,one,uoo,boo,HR,voo,Foo,Too,Lg,rne,Moo,Eoo,UR,Coo,woo,Aoo,yg,tne,Loo,yoo,JR,xoo,$oo,koo,xg,ane,Soo,Roo,YR,Poo,Boo,Ioo,$g,nne,Noo,qoo,KR,joo,Doo,Goo,kg,sne,Ooo,Voo,ZR,Xoo,zoo,Woo,Sg,lne,Qoo,Hoo,eP,Uoo,Joo,Yoo,Rg,ine,Koo,Zoo,oP,ero,oro,rro,Pg,dne,tro,aro,rP,nro,sro,lro,Bg,cne,iro,dro,tP,cro,fro,mro,Ig,fne,gro,hro,aP,pro,_ro,uro,Ng,mne,bro,vro,nP,Fro,Tro,Mro,qg,gne,Ero,Cro,sP,wro,Aro,Lro,jg,hne,yro,xro,lP,$ro,kro,Sro,Dg,pne,Rro,Pro,iP,Bro,Iro,Nro,Gg,qro,Og,kL,jro,_ne,Dro,wGe,ki,Vg,une,SL,Gro,bne,Oro,AGe,Ao,RL,Vro,PL,Xro,dP,zro,Wro,Qro,BL,Hro,vne,Uro,Jro,Yro,Ar,IL,Kro,Fne,Zro,eto,ka,oto,Tne,rto,tto,Mne,ato,nto,Ene,sto,lto,ito,k,Nn,Cne,dto,cto,cP,fto,mto,fP,gto,hto,pto,qn,wne,_to,uto,mP,bto,vto,gP,Fto,Tto,Mto,jn,Ane,Eto,Cto,hP,wto,Ato,pP,Lto,yto,xto,Xg,Lne,$to,kto,_P,Sto,Rto,Pto,Dn,yne,Bto,Ito,uP,Nto,qto,bP,jto,Dto,Gto,zg,xne,Oto,Vto,vP,Xto,zto,Wto,Wg,$ne,Qto,Hto,FP,Uto,Jto,Yto,Qg,kne,Kto,Zto,TP,eao,oao,rao,Gn,Sne,tao,aao,MP,nao,sao,EP,lao,iao,dao,On,Rne,cao,fao,CP,mao,gao,wP,hao,pao,_ao,Vn,Pne,uao,bao,AP,vao,Fao,LP,Tao,Mao,Eao,Hg,Bne,Cao,wao,yP,Aao,Lao,yao,Ug,Ine,xao,$ao,xP,kao,Sao,Rao,Jg,Nne,Pao,Bao,$P,Iao,Nao,qao,Xn,qne,jao,Dao,kP,Gao,Oao,SP,Vao,Xao,zao,Yg,jne,Wao,Qao,RP,Hao,Uao,Jao,zn,Dne,Yao,Kao,PP,Zao,eno,BP,ono,rno,tno,Wn,Gne,ano,nno,IP,sno,lno,NP,ino,dno,cno,Qn,One,fno,mno,qP,gno,hno,jP,pno,_no,uno,Kg,Vne,bno,vno,DP,Fno,Tno,Mno,Hn,Xne,Eno,Cno,GP,wno,Ano,OP,Lno,yno,xno,Un,zne,$no,kno,VP,Sno,Rno,XP,Pno,Bno,Ino,Jn,Wne,Nno,qno,zP,jno,Dno,WP,Gno,Ono,Vno,Yn,Qne,Xno,zno,QP,Wno,Qno,HP,Hno,Uno,Jno,Kn,Hne,Yno,Kno,UP,Zno,eso,JP,oso,rso,tso,Zn,Une,aso,nso,YP,sso,lso,KP,iso,dso,cso,Zg,Jne,fso,mso,ZP,gso,hso,pso,es,Yne,_so,uso,eB,bso,vso,oB,Fso,Tso,Mso,eh,Kne,Eso,Cso,rB,wso,Aso,Lso,os,Zne,yso,xso,tB,$so,kso,aB,Sso,Rso,Pso,rs,ese,Bso,Iso,nB,Nso,qso,sB,jso,Dso,Gso,ts,ose,Oso,Vso,lB,Xso,zso,iB,Wso,Qso,Hso,oh,rse,Uso,Jso,dB,Yso,Kso,Zso,as,tse,elo,olo,cB,rlo,tlo,fB,alo,nlo,slo,ns,ase,llo,ilo,mB,dlo,clo,gB,flo,mlo,glo,rh,nse,hlo,plo,hB,_lo,ulo,blo,ss,sse,vlo,Flo,pB,Tlo,Mlo,_B,Elo,Clo,wlo,ls,lse,Alo,Llo,uB,ylo,xlo,bB,$lo,klo,Slo,is,ise,Rlo,Plo,vB,Blo,Ilo,FB,Nlo,qlo,jlo,ds,dse,Dlo,Glo,TB,Olo,Vlo,MB,Xlo,zlo,Wlo,cs,cse,Qlo,Hlo,EB,Ulo,Jlo,CB,Ylo,Klo,Zlo,fs,fse,eio,oio,wB,rio,tio,AB,aio,nio,sio,ms,mse,lio,iio,LB,dio,cio,yB,fio,mio,gio,gs,gse,hio,pio,xB,_io,uio,$B,bio,vio,Fio,th,hse,Tio,Mio,kB,Eio,Cio,wio,hs,pse,Aio,Lio,SB,yio,xio,RB,$io,kio,Sio,ah,_se,Rio,Pio,PB,Bio,Iio,Nio,nh,use,qio,jio,BB,Dio,Gio,Oio,ps,bse,Vio,Xio,IB,zio,Wio,NB,Qio,Hio,Uio,_s,vse,Jio,Yio,qB,Kio,Zio,jB,edo,odo,rdo,us,Fse,tdo,ado,DB,ndo,sdo,GB,ldo,ido,ddo,sh,Tse,cdo,fdo,OB,mdo,gdo,hdo,bs,Mse,pdo,_do,VB,udo,bdo,XB,vdo,Fdo,Tdo,vs,Ese,Mdo,Edo,zB,Cdo,wdo,WB,Ado,Ldo,ydo,Fs,Cse,xdo,$do,QB,kdo,Sdo,HB,Rdo,Pdo,Bdo,Ts,wse,Ido,Ndo,UB,qdo,jdo,JB,Ddo,Gdo,Odo,Ms,Ase,Vdo,Xdo,YB,zdo,Wdo,KB,Qdo,Hdo,Udo,lh,Lse,Jdo,Ydo,ZB,Kdo,Zdo,eco,Es,yse,oco,rco,eI,tco,aco,oI,nco,sco,lco,ih,xse,ico,dco,rI,cco,fco,mco,dh,$se,gco,hco,tI,pco,_co,uco,ch,kse,bco,vco,aI,Fco,Tco,Mco,fh,Sse,Eco,Cco,nI,wco,Aco,Lco,Cs,Rse,yco,xco,sI,$co,kco,lI,Sco,Rco,Pco,mh,Pse,Bco,Ico,iI,Nco,qco,jco,ws,Bse,Dco,Gco,dI,Oco,Vco,cI,Xco,zco,Wco,As,Ise,Qco,Hco,fI,Uco,Jco,mI,Yco,Kco,Zco,Ls,Nse,efo,ofo,gI,rfo,tfo,hI,afo,nfo,sfo,ys,qse,lfo,ifo,pI,dfo,cfo,_I,ffo,mfo,gfo,xs,jse,hfo,pfo,uI,_fo,ufo,bI,bfo,vfo,Ffo,$s,Dse,Tfo,Mfo,vI,Efo,Cfo,FI,wfo,Afo,Lfo,gh,Gse,yfo,xfo,TI,$fo,kfo,Sfo,hh,Ose,Rfo,Pfo,MI,Bfo,Ifo,Nfo,ks,Vse,qfo,jfo,EI,Dfo,Gfo,CI,Ofo,Vfo,Xfo,Ss,Xse,zfo,Wfo,wI,Qfo,Hfo,AI,Ufo,Jfo,Yfo,Rs,zse,Kfo,Zfo,LI,emo,omo,yI,rmo,tmo,amo,ph,Wse,nmo,smo,xI,lmo,imo,dmo,_h,Qse,cmo,fmo,$I,mmo,gmo,hmo,uh,Hse,pmo,_mo,kI,umo,bmo,vmo,Ps,Use,Fmo,Tmo,SI,Mmo,Emo,RI,Cmo,wmo,Amo,Bs,Jse,Lmo,ymo,PI,xmo,$mo,BI,kmo,Smo,Rmo,bh,Yse,Pmo,Bmo,II,Imo,Nmo,qmo,vh,Kse,jmo,Dmo,NI,Gmo,Omo,Vmo,Fh,Zse,Xmo,zmo,qI,Wmo,Qmo,Hmo,Is,ele,Umo,Jmo,jI,Ymo,Kmo,DI,Zmo,ego,ogo,Th,ole,rgo,tgo,GI,ago,ngo,sgo,Mh,rle,lgo,igo,OI,dgo,cgo,fgo,Ns,tle,mgo,ggo,VI,hgo,pgo,XI,_go,ugo,bgo,qs,ale,vgo,Fgo,zI,Tgo,Mgo,WI,Ego,Cgo,wgo,js,nle,Ago,Lgo,QI,ygo,xgo,HI,$go,kgo,Sgo,Ds,sle,Rgo,Pgo,UI,Bgo,Igo,JI,Ngo,qgo,jgo,Eh,Dgo,Ch,NL,Ggo,lle,Ogo,LGe,Si,wh,ile,qL,Vgo,dle,Xgo,yGe,Lo,jL,zgo,DL,Wgo,YI,Qgo,Hgo,Ugo,GL,Jgo,cle,Ygo,Kgo,Zgo,He,OL,eho,fle,oho,rho,Sa,tho,mle,aho,nho,gle,sho,lho,hle,iho,dho,cho,Y,Ah,ple,fho,mho,KI,gho,hho,pho,Lh,_le,_ho,uho,ZI,bho,vho,Fho,yh,ule,Tho,Mho,eN,Eho,Cho,who,xh,ble,Aho,Lho,oN,yho,xho,$ho,$h,vle,kho,Sho,rN,Rho,Pho,Bho,kh,Fle,Iho,Nho,tN,qho,jho,Dho,Sh,Tle,Gho,Oho,aN,Vho,Xho,zho,Rh,Mle,Who,Qho,nN,Hho,Uho,Jho,Ph,Ele,Yho,Kho,sN,Zho,epo,opo,Bh,Cle,rpo,tpo,lN,apo,npo,spo,Ih,wle,lpo,ipo,iN,dpo,cpo,fpo,Nh,Ale,mpo,gpo,dN,hpo,ppo,_po,qh,Lle,upo,bpo,cN,vpo,Fpo,Tpo,jh,yle,Mpo,Epo,fN,Cpo,wpo,Apo,Dh,xle,Lpo,ypo,mN,xpo,$po,kpo,Gh,$le,Spo,Rpo,gN,Ppo,Bpo,Ipo,Oh,kle,Npo,qpo,hN,jpo,Dpo,Gpo,Vh,Sle,Opo,Vpo,pN,Xpo,zpo,Wpo,Xh,Rle,Qpo,Hpo,_N,Upo,Jpo,Ypo,zh,Ple,Kpo,Zpo,uN,e_o,o_o,r_o,Wh,Ble,t_o,a_o,bN,n_o,s_o,l_o,Qh,Ile,i_o,d_o,vN,c_o,f_o,m_o,Hh,Nle,g_o,h_o,FN,p_o,__o,u_o,Uh,qle,b_o,v_o,TN,F_o,T_o,M_o,Jh,jle,E_o,C_o,MN,w_o,A_o,L_o,Yh,Dle,y_o,x_o,EN,$_o,k_o,S_o,Kh,Gle,R_o,P_o,CN,B_o,I_o,N_o,Zh,Ole,q_o,j_o,wN,D_o,G_o,O_o,ep,Vle,V_o,X_o,AN,z_o,W_o,Q_o,op,Xle,H_o,U_o,LN,J_o,Y_o,K_o,rp,zle,Z_o,euo,yN,ouo,ruo,tuo,tp,Wle,auo,nuo,xN,suo,luo,iuo,ap,Qle,duo,cuo,$N,fuo,muo,guo,np,huo,sp,puo,lp,VL,_uo,Hle,uuo,xGe,Ri,ip,Ule,XL,buo,Jle,vuo,$Ge,yo,zL,Fuo,WL,Tuo,kN,Muo,Euo,Cuo,QL,wuo,Yle,Auo,Luo,yuo,Ue,HL,xuo,Kle,$uo,kuo,Pi,Suo,Zle,Ruo,Puo,eie,Buo,Iuo,Nuo,he,dp,oie,quo,juo,SN,Duo,Guo,Ouo,cp,rie,Vuo,Xuo,tie,zuo,Wuo,Quo,fp,aie,Huo,Uuo,RN,Juo,Yuo,Kuo,mp,nie,Zuo,e1o,PN,o1o,r1o,t1o,gp,sie,a1o,n1o,BN,s1o,l1o,i1o,hp,lie,d1o,c1o,IN,f1o,m1o,g1o,pp,iie,h1o,p1o,NN,_1o,u1o,b1o,_p,die,v1o,F1o,qN,T1o,M1o,E1o,up,cie,C1o,w1o,jN,A1o,L1o,y1o,bp,fie,x1o,$1o,DN,k1o,S1o,R1o,vp,mie,P1o,B1o,GN,I1o,N1o,q1o,Fp,gie,j1o,D1o,ON,G1o,O1o,V1o,Tp,hie,X1o,z1o,VN,W1o,Q1o,H1o,Mp,pie,U1o,J1o,XN,Y1o,K1o,Z1o,Ep,_ie,ebo,obo,zN,rbo,tbo,abo,Cp,uie,nbo,sbo,WN,lbo,ibo,dbo,wp,bie,cbo,fbo,QN,mbo,gbo,hbo,Ap,pbo,Lp,_bo,yp,UL,ubo,vie,bbo,kGe,Bi,xp,Fie,JL,vbo,Tie,Fbo,SGe,xo,YL,Tbo,Ii,Mbo,HN,Ebo,Cbo,UN,wbo,Abo,Lbo,KL,ybo,Mie,xbo,$bo,kbo,st,ZL,Sbo,Eie,Rbo,Pbo,Ni,Bbo,Cie,Ibo,Nbo,JN,qbo,jbo,Dbo,$p,Gbo,Je,ey,Obo,wie,Vbo,Xbo,Ra,zbo,Aie,Wbo,Qbo,Lie,Hbo,Ubo,yie,Jbo,Ybo,Kbo,y,kp,xie,Zbo,e2o,YN,o2o,r2o,t2o,Sp,$ie,a2o,n2o,KN,s2o,l2o,i2o,Rp,kie,d2o,c2o,ZN,f2o,m2o,g2o,Pp,Sie,h2o,p2o,eq,_2o,u2o,b2o,Bp,Rie,v2o,F2o,oq,T2o,M2o,E2o,Ip,Pie,C2o,w2o,rq,A2o,L2o,y2o,Np,Bie,x2o,$2o,tq,k2o,S2o,R2o,qp,Iie,P2o,B2o,aq,I2o,N2o,q2o,jp,Nie,j2o,D2o,nq,G2o,O2o,V2o,Dp,qie,X2o,z2o,sq,W2o,Q2o,H2o,Gp,jie,U2o,J2o,lq,Y2o,K2o,Z2o,Op,Die,e4o,o4o,iq,r4o,t4o,a4o,Vp,Gie,n4o,s4o,dq,l4o,i4o,d4o,Xp,Oie,c4o,f4o,cq,m4o,g4o,h4o,zp,Vie,p4o,_4o,fq,u4o,b4o,v4o,Wp,Xie,F4o,T4o,mq,M4o,E4o,C4o,Qp,zie,w4o,A4o,gq,L4o,y4o,x4o,Hp,Wie,$4o,k4o,hq,S4o,R4o,P4o,Up,Qie,B4o,I4o,pq,N4o,q4o,j4o,Jp,Hie,D4o,G4o,_q,O4o,V4o,X4o,Yp,Uie,z4o,W4o,uq,Q4o,H4o,U4o,Kp,Jie,J4o,Y4o,bq,K4o,Z4o,e5o,Zp,Yie,o5o,r5o,vq,t5o,a5o,n5o,e_,Kie,s5o,l5o,Fq,i5o,d5o,c5o,o_,Zie,f5o,m5o,Tq,g5o,h5o,p5o,r_,ede,_5o,u5o,Mq,b5o,v5o,F5o,t_,ode,T5o,M5o,Eq,E5o,C5o,w5o,a_,rde,A5o,L5o,Cq,y5o,x5o,$5o,n_,tde,k5o,S5o,wq,R5o,P5o,B5o,s_,ade,I5o,N5o,Aq,q5o,j5o,D5o,l_,nde,G5o,O5o,Lq,V5o,X5o,z5o,i_,sde,W5o,Q5o,yq,H5o,U5o,J5o,d_,lde,Y5o,K5o,xq,Z5o,evo,ovo,Gs,ide,rvo,tvo,$q,avo,nvo,kq,svo,lvo,ivo,c_,dde,dvo,cvo,Sq,fvo,mvo,gvo,f_,cde,hvo,pvo,Rq,_vo,uvo,bvo,m_,fde,vvo,Fvo,Pq,Tvo,Mvo,Evo,g_,mde,Cvo,wvo,Bq,Avo,Lvo,yvo,h_,gde,xvo,$vo,Iq,kvo,Svo,Rvo,p_,hde,Pvo,Bvo,Nq,Ivo,Nvo,qvo,__,pde,jvo,Dvo,qq,Gvo,Ovo,Vvo,u_,_de,Xvo,zvo,jq,Wvo,Qvo,Hvo,b_,ude,Uvo,Jvo,Dq,Yvo,Kvo,Zvo,v_,bde,e3o,o3o,Gq,r3o,t3o,a3o,F_,vde,n3o,s3o,Oq,l3o,i3o,d3o,T_,Fde,c3o,f3o,Vq,m3o,g3o,h3o,M_,Tde,p3o,_3o,Xq,u3o,b3o,v3o,E_,Mde,F3o,T3o,zq,M3o,E3o,C3o,C_,Ede,w3o,A3o,Wq,L3o,y3o,x3o,w_,Cde,$3o,k3o,Qq,S3o,R3o,P3o,A_,wde,B3o,I3o,Hq,N3o,q3o,j3o,L_,Ade,D3o,G3o,Uq,O3o,V3o,X3o,y_,Lde,z3o,W3o,Jq,Q3o,H3o,U3o,x_,yde,J3o,Y3o,Yq,K3o,Z3o,eFo,$_,xde,oFo,rFo,Kq,tFo,aFo,nFo,k_,$de,sFo,lFo,Zq,iFo,dFo,cFo,S_,kde,fFo,mFo,ej,gFo,hFo,pFo,R_,Sde,_Fo,uFo,oj,bFo,vFo,FFo,P_,Rde,TFo,MFo,rj,EFo,CFo,wFo,B_,Pde,AFo,LFo,tj,yFo,xFo,$Fo,I_,Bde,kFo,SFo,aj,RFo,PFo,BFo,N_,Ide,IFo,NFo,nj,qFo,jFo,DFo,q_,Nde,GFo,OFo,sj,VFo,XFo,zFo,j_,qde,WFo,QFo,lj,HFo,UFo,JFo,D_,jde,YFo,KFo,ij,ZFo,eTo,oTo,G_,Dde,rTo,tTo,dj,aTo,nTo,sTo,O_,Gde,lTo,iTo,cj,dTo,cTo,fTo,V_,Ode,mTo,gTo,fj,hTo,pTo,_To,X_,Vde,uTo,bTo,mj,vTo,FTo,TTo,z_,Xde,MTo,ETo,gj,CTo,wTo,ATo,W_,zde,LTo,yTo,hj,xTo,$To,kTo,Q_,Wde,STo,RTo,pj,PTo,BTo,ITo,H_,Qde,NTo,qTo,_j,jTo,DTo,GTo,U_,Hde,OTo,VTo,uj,XTo,zTo,WTo,J_,Ude,QTo,HTo,bj,UTo,JTo,YTo,Y_,Jde,KTo,ZTo,vj,e7o,o7o,r7o,K_,Yde,t7o,a7o,Fj,n7o,s7o,l7o,Z_,Kde,i7o,d7o,Tj,c7o,f7o,m7o,eu,Zde,g7o,h7o,Mj,p7o,_7o,u7o,ou,ece,b7o,v7o,Ej,F7o,T7o,M7o,ru,oce,E7o,C7o,Cj,w7o,A7o,L7o,tu,rce,y7o,x7o,wj,$7o,k7o,S7o,au,tce,R7o,P7o,Aj,B7o,I7o,N7o,nu,ace,q7o,j7o,Lj,D7o,G7o,O7o,su,nce,V7o,X7o,yj,z7o,W7o,Q7o,lu,sce,H7o,U7o,xj,J7o,Y7o,K7o,iu,lce,Z7o,eMo,$j,oMo,rMo,tMo,du,ice,aMo,nMo,kj,sMo,lMo,iMo,cu,dce,dMo,cMo,Sj,fMo,mMo,gMo,fu,cce,hMo,pMo,Rj,_Mo,uMo,bMo,mu,fce,vMo,FMo,Pj,TMo,MMo,EMo,gu,mce,CMo,wMo,Bj,AMo,LMo,yMo,hu,gce,xMo,$Mo,Ij,kMo,SMo,RMo,pu,hce,PMo,BMo,Nj,IMo,NMo,qMo,_u,pce,jMo,DMo,qj,GMo,OMo,VMo,uu,_ce,XMo,zMo,jj,WMo,QMo,HMo,bu,uce,UMo,JMo,Dj,YMo,KMo,ZMo,vu,bce,eEo,oEo,Gj,rEo,tEo,aEo,Fu,vce,nEo,sEo,Oj,lEo,iEo,dEo,Tu,Fce,cEo,fEo,Vj,mEo,gEo,hEo,Mu,Tce,pEo,_Eo,Xj,uEo,bEo,vEo,Eu,Mce,FEo,TEo,zj,MEo,EEo,CEo,Cu,Ece,wEo,AEo,Wj,LEo,yEo,xEo,wu,Cce,$Eo,kEo,Qj,SEo,REo,PEo,Au,wce,BEo,IEo,Hj,NEo,qEo,jEo,Lu,Ace,DEo,GEo,Uj,OEo,VEo,XEo,yu,Lce,zEo,WEo,Jj,QEo,HEo,UEo,xu,JEo,yce,YEo,KEo,xce,ZEo,eCo,$u,RGe,qi,ku,$ce,oy,oCo,kce,rCo,PGe,$o,ry,tCo,ji,aCo,Yj,nCo,sCo,Kj,lCo,iCo,dCo,ty,cCo,Sce,fCo,mCo,gCo,lt,ay,hCo,Rce,pCo,_Co,Di,uCo,Pce,bCo,vCo,Zj,FCo,TCo,MCo,Su,ECo,Ye,ny,CCo,Bce,wCo,ACo,Pa,LCo,Ice,yCo,xCo,Nce,$Co,kCo,qce,SCo,RCo,PCo,G,Ru,jce,BCo,ICo,eD,NCo,qCo,jCo,Pu,Dce,DCo,GCo,oD,OCo,VCo,XCo,Bu,Gce,zCo,WCo,rD,QCo,HCo,UCo,Iu,Oce,JCo,YCo,tD,KCo,ZCo,e0o,Nu,Vce,o0o,r0o,aD,t0o,a0o,n0o,qu,Xce,s0o,l0o,nD,i0o,d0o,c0o,ju,zce,f0o,m0o,sD,g0o,h0o,p0o,Du,Wce,_0o,u0o,lD,b0o,v0o,F0o,Gu,Qce,T0o,M0o,iD,E0o,C0o,w0o,Ou,Hce,A0o,L0o,dD,y0o,x0o,$0o,Vu,Uce,k0o,S0o,cD,R0o,P0o,B0o,Xu,Jce,I0o,N0o,fD,q0o,j0o,D0o,zu,Yce,G0o,O0o,mD,V0o,X0o,z0o,Wu,Kce,W0o,Q0o,gD,H0o,U0o,J0o,Qu,Zce,Y0o,K0o,hD,Z0o,ewo,owo,Hu,efe,rwo,two,pD,awo,nwo,swo,Uu,ofe,lwo,iwo,_D,dwo,cwo,fwo,Ju,rfe,mwo,gwo,uD,hwo,pwo,_wo,Yu,tfe,uwo,bwo,bD,vwo,Fwo,Two,Ku,afe,Mwo,Ewo,vD,Cwo,wwo,Awo,Zu,nfe,Lwo,ywo,FD,xwo,$wo,kwo,e1,sfe,Swo,Rwo,TD,Pwo,Bwo,Iwo,o1,lfe,Nwo,qwo,MD,jwo,Dwo,Gwo,r1,ife,Owo,Vwo,ED,Xwo,zwo,Wwo,t1,dfe,Qwo,Hwo,CD,Uwo,Jwo,Ywo,a1,cfe,Kwo,Zwo,wD,eAo,oAo,rAo,n1,ffe,tAo,aAo,AD,nAo,sAo,lAo,s1,mfe,iAo,dAo,LD,cAo,fAo,mAo,l1,gfe,gAo,hAo,yD,pAo,_Ao,uAo,i1,hfe,bAo,vAo,xD,FAo,TAo,MAo,d1,pfe,EAo,CAo,$D,wAo,AAo,LAo,c1,_fe,yAo,xAo,kD,$Ao,kAo,SAo,f1,ufe,RAo,PAo,SD,BAo,IAo,NAo,m1,bfe,qAo,jAo,RD,DAo,GAo,OAo,g1,vfe,VAo,XAo,PD,zAo,WAo,QAo,h1,Ffe,HAo,UAo,BD,JAo,YAo,KAo,p1,Tfe,ZAo,e6o,ID,o6o,r6o,t6o,_1,Mfe,a6o,n6o,ND,s6o,l6o,i6o,u1,Efe,d6o,c6o,qD,f6o,m6o,g6o,b1,Cfe,h6o,p6o,jD,_6o,u6o,b6o,v1,wfe,v6o,F6o,DD,T6o,M6o,E6o,F1,Afe,C6o,w6o,GD,A6o,L6o,y6o,T1,Lfe,x6o,$6o,OD,k6o,S6o,R6o,M1,P6o,yfe,B6o,I6o,xfe,N6o,q6o,E1,BGe,Gi,C1,$fe,sy,j6o,kfe,D6o,IGe,ko,ly,G6o,Oi,O6o,VD,V6o,X6o,XD,z6o,W6o,Q6o,iy,H6o,Sfe,U6o,J6o,Y6o,it,dy,K6o,Rfe,Z6o,eLo,Vi,oLo,Pfe,rLo,tLo,zD,aLo,nLo,sLo,w1,lLo,Ke,cy,iLo,Bfe,dLo,cLo,Ba,fLo,Ife,mLo,gLo,Nfe,hLo,pLo,qfe,_Lo,uLo,bLo,z,A1,jfe,vLo,FLo,WD,TLo,MLo,ELo,L1,Dfe,CLo,wLo,QD,ALo,LLo,yLo,y1,Gfe,xLo,$Lo,HD,kLo,SLo,RLo,x1,Ofe,PLo,BLo,UD,ILo,NLo,qLo,$1,Vfe,jLo,DLo,JD,GLo,OLo,VLo,k1,Xfe,XLo,zLo,YD,WLo,QLo,HLo,S1,zfe,ULo,JLo,KD,YLo,KLo,ZLo,R1,Wfe,eyo,oyo,ZD,ryo,tyo,ayo,P1,Qfe,nyo,syo,eG,lyo,iyo,dyo,B1,Hfe,cyo,fyo,oG,myo,gyo,hyo,I1,Ufe,pyo,_yo,rG,uyo,byo,vyo,N1,Jfe,Fyo,Tyo,tG,Myo,Eyo,Cyo,q1,Yfe,wyo,Ayo,aG,Lyo,yyo,xyo,j1,Kfe,$yo,kyo,nG,Syo,Ryo,Pyo,D1,Zfe,Byo,Iyo,sG,Nyo,qyo,jyo,G1,eme,Dyo,Gyo,lG,Oyo,Vyo,Xyo,O1,ome,zyo,Wyo,iG,Qyo,Hyo,Uyo,V1,rme,Jyo,Yyo,dG,Kyo,Zyo,e8o,X1,tme,o8o,r8o,cG,t8o,a8o,n8o,z1,ame,s8o,l8o,fG,i8o,d8o,c8o,W1,nme,f8o,m8o,mG,g8o,h8o,p8o,Q1,sme,_8o,u8o,gG,b8o,v8o,F8o,H1,lme,T8o,M8o,hG,E8o,C8o,w8o,U1,ime,A8o,L8o,pG,y8o,x8o,$8o,J1,dme,k8o,S8o,_G,R8o,P8o,B8o,Y1,cme,I8o,N8o,uG,q8o,j8o,D8o,K1,fme,G8o,O8o,bG,V8o,X8o,z8o,Z1,mme,W8o,Q8o,vG,H8o,U8o,J8o,eb,gme,Y8o,K8o,FG,Z8o,e9o,o9o,ob,hme,r9o,t9o,TG,a9o,n9o,s9o,rb,pme,l9o,i9o,MG,d9o,c9o,f9o,tb,_me,m9o,g9o,EG,h9o,p9o,_9o,ab,ume,u9o,b9o,CG,v9o,F9o,T9o,nb,bme,M9o,E9o,wG,C9o,w9o,A9o,sb,vme,L9o,y9o,AG,x9o,$9o,k9o,lb,Fme,S9o,R9o,LG,P9o,B9o,I9o,ib,Tme,N9o,q9o,yG,j9o,D9o,G9o,db,Mme,O9o,V9o,xG,X9o,z9o,W9o,cb,Q9o,Eme,H9o,U9o,Cme,J9o,Y9o,fb,NGe,Xi,mb,wme,fy,K9o,Ame,Z9o,qGe,So,my,exo,zi,oxo,$G,rxo,txo,kG,axo,nxo,sxo,gy,lxo,Lme,ixo,dxo,cxo,dt,hy,fxo,yme,mxo,gxo,Wi,hxo,xme,pxo,_xo,SG,uxo,bxo,vxo,gb,Fxo,Ze,py,Txo,$me,Mxo,Exo,Ia,Cxo,kme,wxo,Axo,Sme,Lxo,yxo,Rme,xxo,$xo,kxo,Q,hb,Pme,Sxo,Rxo,RG,Pxo,Bxo,Ixo,pb,Bme,Nxo,qxo,PG,jxo,Dxo,Gxo,_b,Ime,Oxo,Vxo,BG,Xxo,zxo,Wxo,ub,Nme,Qxo,Hxo,IG,Uxo,Jxo,Yxo,bb,qme,Kxo,Zxo,NG,e$o,o$o,r$o,vb,jme,t$o,a$o,qG,n$o,s$o,l$o,Fb,Dme,i$o,d$o,jG,c$o,f$o,m$o,Tb,Gme,g$o,h$o,DG,p$o,_$o,u$o,Mb,Ome,b$o,v$o,GG,F$o,T$o,M$o,Eb,Vme,E$o,C$o,OG,w$o,A$o,L$o,Cb,Xme,y$o,x$o,VG,$$o,k$o,S$o,wb,zme,R$o,P$o,XG,B$o,I$o,N$o,Ab,Wme,q$o,j$o,zG,D$o,G$o,O$o,Lb,Qme,V$o,X$o,WG,z$o,W$o,Q$o,yb,Hme,H$o,U$o,QG,J$o,Y$o,K$o,xb,Ume,Z$o,eko,HG,oko,rko,tko,$b,Jme,ako,nko,UG,sko,lko,iko,kb,Yme,dko,cko,JG,fko,mko,gko,Sb,Kme,hko,pko,YG,_ko,uko,bko,Rb,Zme,vko,Fko,KG,Tko,Mko,Eko,Pb,ege,Cko,wko,ZG,Ako,Lko,yko,Bb,oge,xko,$ko,eO,kko,Sko,Rko,Ib,rge,Pko,Bko,oO,Iko,Nko,qko,Nb,tge,jko,Dko,rO,Gko,Oko,Vko,qb,age,Xko,zko,tO,Wko,Qko,Hko,jb,nge,Uko,Jko,aO,Yko,Kko,Zko,Db,sge,eSo,oSo,nO,rSo,tSo,aSo,Gb,lge,nSo,sSo,sO,lSo,iSo,dSo,Ob,ige,cSo,fSo,lO,mSo,gSo,hSo,Vb,dge,pSo,_So,iO,uSo,bSo,vSo,Xb,cge,FSo,TSo,dO,MSo,ESo,CSo,zb,fge,wSo,ASo,mge,LSo,ySo,xSo,Wb,gge,$So,kSo,cO,SSo,RSo,PSo,Qb,hge,BSo,ISo,fO,NSo,qSo,jSo,Hb,pge,DSo,GSo,mO,OSo,VSo,XSo,Ub,_ge,zSo,WSo,gO,QSo,HSo,USo,Jb,JSo,uge,YSo,KSo,bge,ZSo,eRo,Yb,jGe,Qi,Kb,vge,_y,oRo,Fge,rRo,DGe,Ro,uy,tRo,Hi,aRo,hO,nRo,sRo,pO,lRo,iRo,dRo,by,cRo,Tge,fRo,mRo,gRo,ct,vy,hRo,Mge,pRo,_Ro,Ui,uRo,Ege,bRo,vRo,_O,FRo,TRo,MRo,Zb,ERo,eo,Fy,CRo,Cge,wRo,ARo,Na,LRo,wge,yRo,xRo,Age,$Ro,kRo,Lge,SRo,RRo,PRo,pe,e2,yge,BRo,IRo,uO,NRo,qRo,jRo,o2,xge,DRo,GRo,bO,ORo,VRo,XRo,r2,$ge,zRo,WRo,vO,QRo,HRo,URo,t2,kge,JRo,YRo,FO,KRo,ZRo,ePo,a2,Sge,oPo,rPo,TO,tPo,aPo,nPo,n2,Rge,sPo,lPo,MO,iPo,dPo,cPo,s2,Pge,fPo,mPo,EO,gPo,hPo,pPo,l2,Bge,_Po,uPo,CO,bPo,vPo,FPo,i2,Ige,TPo,MPo,wO,EPo,CPo,wPo,d2,Nge,APo,LPo,AO,yPo,xPo,$Po,c2,qge,kPo,SPo,LO,RPo,PPo,BPo,f2,jge,IPo,NPo,yO,qPo,jPo,DPo,m2,Dge,GPo,OPo,xO,VPo,XPo,zPo,g2,Gge,WPo,QPo,$O,HPo,UPo,JPo,h2,Oge,YPo,KPo,kO,ZPo,eBo,oBo,p2,Vge,rBo,tBo,SO,aBo,nBo,sBo,_2,Xge,lBo,iBo,RO,dBo,cBo,fBo,u2,mBo,zge,gBo,hBo,Wge,pBo,_Bo,b2,GGe,Ji,v2,Qge,Ty,uBo,Hge,bBo,OGe,Po,My,vBo,Yi,FBo,PO,TBo,MBo,BO,EBo,CBo,wBo,Ey,ABo,Uge,LBo,yBo,xBo,ft,Cy,$Bo,Jge,kBo,SBo,Ki,RBo,Yge,PBo,BBo,IO,IBo,NBo,qBo,F2,jBo,oo,wy,DBo,Kge,GBo,OBo,qa,VBo,Zge,XBo,zBo,ehe,WBo,QBo,ohe,HBo,UBo,JBo,N,T2,rhe,YBo,KBo,NO,ZBo,eIo,oIo,M2,the,rIo,tIo,qO,aIo,nIo,sIo,E2,ahe,lIo,iIo,jO,dIo,cIo,fIo,C2,nhe,mIo,gIo,DO,hIo,pIo,_Io,w2,she,uIo,bIo,GO,vIo,FIo,TIo,A2,lhe,MIo,EIo,OO,CIo,wIo,AIo,L2,ihe,LIo,yIo,VO,xIo,$Io,kIo,y2,dhe,SIo,RIo,XO,PIo,BIo,IIo,x2,che,NIo,qIo,zO,jIo,DIo,GIo,$2,fhe,OIo,VIo,WO,XIo,zIo,WIo,k2,mhe,QIo,HIo,QO,UIo,JIo,YIo,S2,ghe,KIo,ZIo,HO,eNo,oNo,rNo,R2,hhe,tNo,aNo,UO,nNo,sNo,lNo,P2,phe,iNo,dNo,JO,cNo,fNo,mNo,B2,_he,gNo,hNo,YO,pNo,_No,uNo,I2,uhe,bNo,vNo,KO,FNo,TNo,MNo,N2,bhe,ENo,CNo,ZO,wNo,ANo,LNo,q2,vhe,yNo,xNo,eV,$No,kNo,SNo,j2,Fhe,RNo,PNo,oV,BNo,INo,NNo,D2,The,qNo,jNo,rV,DNo,GNo,ONo,G2,Mhe,VNo,XNo,tV,zNo,WNo,QNo,O2,Ehe,HNo,UNo,aV,JNo,YNo,KNo,V2,Che,ZNo,eqo,nV,oqo,rqo,tqo,X2,whe,aqo,nqo,sV,sqo,lqo,iqo,z2,Ahe,dqo,cqo,lV,fqo,mqo,gqo,W2,Lhe,hqo,pqo,iV,_qo,uqo,bqo,Q2,yhe,vqo,Fqo,dV,Tqo,Mqo,Eqo,H2,xhe,Cqo,wqo,cV,Aqo,Lqo,yqo,U2,$he,xqo,$qo,fV,kqo,Sqo,Rqo,J2,khe,Pqo,Bqo,mV,Iqo,Nqo,qqo,Y2,She,jqo,Dqo,gV,Gqo,Oqo,Vqo,K2,Rhe,Xqo,zqo,hV,Wqo,Qqo,Hqo,Z2,Phe,Uqo,Jqo,pV,Yqo,Kqo,Zqo,e4,Bhe,ejo,ojo,_V,rjo,tjo,ajo,o4,Ihe,njo,sjo,uV,ljo,ijo,djo,r4,Nhe,cjo,fjo,bV,mjo,gjo,hjo,t4,qhe,pjo,_jo,vV,ujo,bjo,vjo,a4,jhe,Fjo,Tjo,FV,Mjo,Ejo,Cjo,n4,Dhe,wjo,Ajo,TV,Ljo,yjo,xjo,s4,Ghe,$jo,kjo,MV,Sjo,Rjo,Pjo,l4,Ohe,Bjo,Ijo,EV,Njo,qjo,jjo,i4,Vhe,Djo,Gjo,CV,Ojo,Vjo,Xjo,d4,Xhe,zjo,Wjo,wV,Qjo,Hjo,Ujo,c4,zhe,Jjo,Yjo,AV,Kjo,Zjo,eDo,f4,Whe,oDo,rDo,LV,tDo,aDo,nDo,m4,Qhe,sDo,lDo,yV,iDo,dDo,cDo,g4,Hhe,fDo,mDo,xV,gDo,hDo,pDo,h4,Uhe,_Do,uDo,$V,bDo,vDo,FDo,p4,TDo,Jhe,MDo,EDo,Yhe,CDo,wDo,_4,VGe,Zi,u4,Khe,Ay,ADo,Zhe,LDo,XGe,Bo,Ly,yDo,ed,xDo,kV,$Do,kDo,SV,SDo,RDo,PDo,yy,BDo,epe,IDo,NDo,qDo,mt,xy,jDo,ope,DDo,GDo,od,ODo,rpe,VDo,XDo,RV,zDo,WDo,QDo,b4,HDo,ro,$y,UDo,tpe,JDo,YDo,ja,KDo,ape,ZDo,eGo,npe,oGo,rGo,spe,tGo,aGo,nGo,Z,v4,lpe,sGo,lGo,PV,iGo,dGo,cGo,F4,ipe,fGo,mGo,BV,gGo,hGo,pGo,T4,dpe,_Go,uGo,IV,bGo,vGo,FGo,M4,cpe,TGo,MGo,NV,EGo,CGo,wGo,E4,fpe,AGo,LGo,qV,yGo,xGo,$Go,C4,mpe,kGo,SGo,jV,RGo,PGo,BGo,w4,gpe,IGo,NGo,DV,qGo,jGo,DGo,A4,hpe,GGo,OGo,GV,VGo,XGo,zGo,L4,ppe,WGo,QGo,OV,HGo,UGo,JGo,y4,_pe,YGo,KGo,VV,ZGo,eOo,oOo,x4,upe,rOo,tOo,XV,aOo,nOo,sOo,$4,bpe,lOo,iOo,zV,dOo,cOo,fOo,k4,vpe,mOo,gOo,WV,hOo,pOo,_Oo,S4,Fpe,uOo,bOo,QV,vOo,FOo,TOo,R4,Tpe,MOo,EOo,HV,COo,wOo,AOo,P4,Mpe,LOo,yOo,UV,xOo,$Oo,kOo,B4,Epe,SOo,ROo,JV,POo,BOo,IOo,I4,Cpe,NOo,qOo,YV,jOo,DOo,GOo,N4,wpe,OOo,VOo,KV,XOo,zOo,WOo,q4,Ape,QOo,HOo,ZV,UOo,JOo,YOo,j4,Lpe,KOo,ZOo,eX,eVo,oVo,rVo,D4,ype,tVo,aVo,oX,nVo,sVo,lVo,G4,xpe,iVo,dVo,rX,cVo,fVo,mVo,O4,$pe,gVo,hVo,tX,pVo,_Vo,uVo,V4,kpe,bVo,vVo,aX,FVo,TVo,MVo,X4,Spe,EVo,CVo,nX,wVo,AVo,LVo,z4,Rpe,yVo,xVo,sX,$Vo,kVo,SVo,W4,Ppe,RVo,PVo,lX,BVo,IVo,NVo,Q4,Bpe,qVo,jVo,iX,DVo,GVo,OVo,H4,VVo,Ipe,XVo,zVo,Npe,WVo,QVo,U4,zGe,rd,J4,qpe,ky,HVo,jpe,UVo,WGe,Io,Sy,JVo,td,YVo,dX,KVo,ZVo,cX,eXo,oXo,rXo,Ry,tXo,Dpe,aXo,nXo,sXo,gt,Py,lXo,Gpe,iXo,dXo,ad,cXo,Ope,fXo,mXo,fX,gXo,hXo,pXo,Y4,_Xo,to,By,uXo,Vpe,bXo,vXo,Da,FXo,Xpe,TXo,MXo,zpe,EXo,CXo,Wpe,wXo,AXo,LXo,Zr,K4,Qpe,yXo,xXo,mX,$Xo,kXo,SXo,Z4,Hpe,RXo,PXo,gX,BXo,IXo,NXo,e5,Upe,qXo,jXo,hX,DXo,GXo,OXo,o5,Jpe,VXo,XXo,pX,zXo,WXo,QXo,r5,Ype,HXo,UXo,_X,JXo,YXo,KXo,t5,ZXo,Kpe,ezo,ozo,Zpe,rzo,tzo,a5,QGe,nd,n5,e_e,Iy,azo,o_e,nzo,HGe,No,Ny,szo,sd,lzo,uX,izo,dzo,bX,czo,fzo,mzo,qy,gzo,r_e,hzo,pzo,_zo,ht,jy,uzo,t_e,bzo,vzo,ld,Fzo,a_e,Tzo,Mzo,vX,Ezo,Czo,wzo,s5,Azo,ao,Dy,Lzo,n_e,yzo,xzo,Ga,$zo,s_e,kzo,Szo,l_e,Rzo,Pzo,i_e,Bzo,Izo,Nzo,H,l5,d_e,qzo,jzo,FX,Dzo,Gzo,Ozo,i5,c_e,Vzo,Xzo,TX,zzo,Wzo,Qzo,d5,f_e,Hzo,Uzo,MX,Jzo,Yzo,Kzo,c5,m_e,Zzo,eWo,EX,oWo,rWo,tWo,f5,g_e,aWo,nWo,CX,sWo,lWo,iWo,m5,h_e,dWo,cWo,wX,fWo,mWo,gWo,g5,p_e,hWo,pWo,AX,_Wo,uWo,bWo,h5,__e,vWo,FWo,LX,TWo,MWo,EWo,p5,u_e,CWo,wWo,yX,AWo,LWo,yWo,_5,b_e,xWo,$Wo,xX,kWo,SWo,RWo,u5,v_e,PWo,BWo,$X,IWo,NWo,qWo,b5,F_e,jWo,DWo,kX,GWo,OWo,VWo,v5,T_e,XWo,zWo,SX,WWo,QWo,HWo,F5,M_e,UWo,JWo,RX,YWo,KWo,ZWo,T5,E_e,eQo,oQo,PX,rQo,tQo,aQo,M5,C_e,nQo,sQo,BX,lQo,iQo,dQo,E5,w_e,cQo,fQo,IX,mQo,gQo,hQo,C5,A_e,pQo,_Qo,NX,uQo,bQo,vQo,w5,L_e,FQo,TQo,qX,MQo,EQo,CQo,A5,y_e,wQo,AQo,jX,LQo,yQo,xQo,L5,x_e,$Qo,kQo,DX,SQo,RQo,PQo,y5,$_e,BQo,IQo,GX,NQo,qQo,jQo,x5,k_e,DQo,GQo,OX,OQo,VQo,XQo,$5,S_e,zQo,WQo,VX,QQo,HQo,UQo,k5,R_e,JQo,YQo,XX,KQo,ZQo,eHo,S5,P_e,oHo,rHo,zX,tHo,aHo,nHo,R5,B_e,sHo,lHo,WX,iHo,dHo,cHo,P5,I_e,fHo,mHo,QX,gHo,hHo,pHo,B5,N_e,_Ho,uHo,HX,bHo,vHo,FHo,I5,q_e,THo,MHo,UX,EHo,CHo,wHo,N5,j_e,AHo,LHo,JX,yHo,xHo,$Ho,q5,D_e,kHo,SHo,YX,RHo,PHo,BHo,j5,G_e,IHo,NHo,KX,qHo,jHo,DHo,D5,O_e,GHo,OHo,ZX,VHo,XHo,zHo,G5,V_e,WHo,QHo,ez,HHo,UHo,JHo,O5,YHo,X_e,KHo,ZHo,z_e,eUo,oUo,V5,UGe,id,X5,W_e,Gy,rUo,Q_e,tUo,JGe,qo,Oy,aUo,dd,nUo,oz,sUo,lUo,rz,iUo,dUo,cUo,Vy,fUo,H_e,mUo,gUo,hUo,pt,Xy,pUo,U_e,_Uo,uUo,cd,bUo,J_e,vUo,FUo,tz,TUo,MUo,EUo,z5,CUo,no,zy,wUo,Y_e,AUo,LUo,Oa,yUo,K_e,xUo,$Uo,Z_e,kUo,SUo,eue,RUo,PUo,BUo,V,W5,oue,IUo,NUo,az,qUo,jUo,DUo,Q5,rue,GUo,OUo,nz,VUo,XUo,zUo,H5,tue,WUo,QUo,sz,HUo,UUo,JUo,U5,aue,YUo,KUo,lz,ZUo,eJo,oJo,J5,nue,rJo,tJo,iz,aJo,nJo,sJo,Y5,sue,lJo,iJo,dz,dJo,cJo,fJo,K5,lue,mJo,gJo,cz,hJo,pJo,_Jo,Z5,iue,uJo,bJo,fz,vJo,FJo,TJo,ev,due,MJo,EJo,mz,CJo,wJo,AJo,ov,cue,LJo,yJo,gz,xJo,$Jo,kJo,rv,fue,SJo,RJo,hz,PJo,BJo,IJo,tv,mue,NJo,qJo,pz,jJo,DJo,GJo,av,gue,OJo,VJo,_z,XJo,zJo,WJo,nv,hue,QJo,HJo,uz,UJo,JJo,YJo,sv,pue,KJo,ZJo,bz,eYo,oYo,rYo,lv,_ue,tYo,aYo,vz,nYo,sYo,lYo,iv,uue,iYo,dYo,Fz,cYo,fYo,mYo,dv,bue,gYo,hYo,Tz,pYo,_Yo,uYo,cv,vue,bYo,vYo,Mz,FYo,TYo,MYo,fv,Fue,EYo,CYo,Ez,wYo,AYo,LYo,mv,Tue,yYo,xYo,Cz,$Yo,kYo,SYo,gv,Mue,RYo,PYo,wz,BYo,IYo,NYo,hv,Eue,qYo,jYo,Az,DYo,GYo,OYo,pv,Cue,VYo,XYo,Lz,zYo,WYo,QYo,_v,wue,HYo,UYo,yz,JYo,YYo,KYo,uv,Aue,ZYo,eKo,xz,oKo,rKo,tKo,bv,Lue,aKo,nKo,$z,sKo,lKo,iKo,vv,yue,dKo,cKo,kz,fKo,mKo,gKo,Fv,xue,hKo,pKo,Sz,_Ko,uKo,bKo,Tv,$ue,vKo,FKo,Rz,TKo,MKo,EKo,Mv,kue,CKo,wKo,Pz,AKo,LKo,yKo,Ev,Sue,xKo,$Ko,Bz,kKo,SKo,RKo,Cv,Rue,PKo,BKo,Iz,IKo,NKo,qKo,wv,Pue,jKo,DKo,Nz,GKo,OKo,VKo,Av,Bue,XKo,zKo,qz,WKo,QKo,HKo,Lv,Iue,UKo,JKo,jz,YKo,KKo,ZKo,yv,Nue,eZo,oZo,Dz,rZo,tZo,aZo,xv,que,nZo,sZo,Gz,lZo,iZo,dZo,$v,jue,cZo,fZo,Oz,mZo,gZo,hZo,kv,Due,pZo,_Zo,Vz,uZo,bZo,vZo,Sv,FZo,Gue,TZo,MZo,Oue,EZo,CZo,Rv,YGe,fd,Pv,Vue,Wy,wZo,Xue,AZo,KGe,jo,Qy,LZo,md,yZo,Xz,xZo,$Zo,zz,kZo,SZo,RZo,Hy,PZo,zue,BZo,IZo,NZo,_t,Uy,qZo,Wue,jZo,DZo,gd,GZo,Que,OZo,VZo,Wz,XZo,zZo,WZo,Bv,QZo,so,Jy,HZo,Hue,UZo,JZo,Va,YZo,Uue,KZo,ZZo,Jue,eer,oer,Yue,rer,ter,aer,Kue,Iv,Zue,ner,ser,Qz,ler,ier,der,Nv,cer,e1e,fer,mer,o1e,ger,her,qv,ZGe,hd,jv,r1e,Yy,per,t1e,_er,eOe,Do,Ky,uer,pd,ber,Hz,ver,Fer,Uz,Ter,Mer,Eer,Zy,Cer,a1e,wer,Aer,Ler,ut,e8,yer,n1e,xer,$er,_d,ker,s1e,Ser,Rer,Jz,Per,Ber,Ier,Dv,Ner,lo,o8,qer,l1e,jer,Der,Xa,Ger,i1e,Oer,Ver,d1e,Xer,zer,c1e,Wer,Qer,Her,ue,Gv,f1e,Uer,Jer,Yz,Yer,Ker,Zer,Ov,m1e,eor,oor,Kz,ror,tor,aor,Vv,g1e,nor,sor,Zz,lor,ior,dor,Xv,h1e,cor,mor,eW,gor,hor,por,Os,p1e,_or,uor,oW,bor,vor,rW,For,Tor,Mor,zv,_1e,Eor,Cor,tW,wor,Aor,Lor,Vs,u1e,yor,xor,aW,$or,kor,nW,Sor,Ror,Por,Wv,b1e,Bor,Ior,sW,Nor,qor,jor,bt,v1e,Dor,Gor,lW,Oor,Vor,iW,Xor,zor,dW,Wor,Qor,Hor,Qv,F1e,Uor,Jor,cW,Yor,Kor,Zor,Hv,T1e,err,orr,fW,rrr,trr,arr,Uv,M1e,nrr,srr,mW,lrr,irr,drr,Jv,E1e,crr,frr,gW,mrr,grr,hrr,Yv,C1e,prr,_rr,hW,urr,brr,vrr,Kv,w1e,Frr,Trr,pW,Mrr,Err,Crr,Zv,A1e,wrr,Arr,_W,Lrr,yrr,xrr,e3,$rr,L1e,krr,Srr,y1e,Rrr,Prr,o3,oOe,ud,r3,x1e,r8,Brr,$1e,Irr,rOe,Go,t8,Nrr,bd,qrr,uW,jrr,Drr,bW,Grr,Orr,Vrr,a8,Xrr,k1e,zrr,Wrr,Qrr,vt,n8,Hrr,S1e,Urr,Jrr,vd,Yrr,R1e,Krr,Zrr,vW,etr,otr,rtr,t3,ttr,io,s8,atr,P1e,ntr,str,za,ltr,B1e,itr,dtr,I1e,ctr,ftr,N1e,mtr,gtr,htr,q1e,a3,j1e,ptr,_tr,FW,utr,btr,vtr,n3,Ftr,D1e,Ttr,Mtr,G1e,Etr,Ctr,s3,tOe,Fd,l3,O1e,l8,wtr,V1e,Atr,aOe,Oo,i8,Ltr,Td,ytr,TW,xtr,$tr,MW,ktr,Str,Rtr,d8,Ptr,X1e,Btr,Itr,Ntr,Ft,c8,qtr,z1e,jtr,Dtr,Md,Gtr,W1e,Otr,Vtr,EW,Xtr,ztr,Wtr,i3,Qtr,co,f8,Htr,Q1e,Utr,Jtr,Wa,Ytr,H1e,Ktr,Ztr,U1e,ear,oar,J1e,rar,tar,aar,Y1e,d3,K1e,nar,sar,CW,lar,iar,dar,c3,car,Z1e,far,mar,ebe,gar,har,f3,nOe,Ed,m3,obe,m8,par,rbe,_ar,sOe,Vo,g8,uar,Cd,bar,wW,Far,Tar,AW,Mar,Ear,Car,h8,war,tbe,Aar,Lar,yar,Tt,p8,xar,abe,$ar,kar,wd,Sar,nbe,Rar,Par,LW,Bar,Iar,Nar,g3,qar,fo,_8,jar,sbe,Dar,Gar,Qa,Oar,lbe,Var,Xar,ibe,zar,War,dbe,Qar,Har,Uar,Pe,h3,cbe,Jar,Yar,yW,Kar,Zar,enr,p3,fbe,onr,rnr,xW,tnr,anr,nnr,_3,mbe,snr,lnr,$W,inr,dnr,cnr,u3,gbe,fnr,mnr,kW,gnr,hnr,pnr,b3,hbe,_nr,unr,SW,bnr,vnr,Fnr,v3,pbe,Tnr,Mnr,RW,Enr,Cnr,wnr,F3,_be,Anr,Lnr,PW,ynr,xnr,$nr,T3,ube,knr,Snr,BW,Rnr,Pnr,Bnr,M3,bbe,Inr,Nnr,IW,qnr,jnr,Dnr,E3,Gnr,vbe,Onr,Vnr,Fbe,Xnr,znr,C3,lOe,Ad,w3,Tbe,u8,Wnr,Mbe,Qnr,iOe,Xo,b8,Hnr,Ld,Unr,NW,Jnr,Ynr,qW,Knr,Znr,esr,v8,osr,Ebe,rsr,tsr,asr,Mt,F8,nsr,Cbe,ssr,lsr,yd,isr,wbe,dsr,csr,jW,fsr,msr,gsr,A3,hsr,mo,T8,psr,Abe,_sr,usr,Ha,bsr,Lbe,vsr,Fsr,ybe,Tsr,Msr,xbe,Esr,Csr,wsr,et,L3,$be,Asr,Lsr,DW,ysr,xsr,$sr,y3,kbe,ksr,Ssr,GW,Rsr,Psr,Bsr,x3,Sbe,Isr,Nsr,OW,qsr,jsr,Dsr,$3,Rbe,Gsr,Osr,VW,Vsr,Xsr,zsr,k3,Pbe,Wsr,Qsr,XW,Hsr,Usr,Jsr,S3,Ysr,Bbe,Ksr,Zsr,Ibe,elr,olr,R3,dOe,xd,P3,Nbe,M8,rlr,qbe,tlr,cOe,zo,E8,alr,$d,nlr,zW,slr,llr,WW,ilr,dlr,clr,C8,flr,jbe,mlr,glr,hlr,Et,w8,plr,Dbe,_lr,ulr,kd,blr,Gbe,vlr,Flr,QW,Tlr,Mlr,Elr,B3,Clr,go,A8,wlr,Obe,Alr,Llr,Ua,ylr,Vbe,xlr,$lr,Xbe,klr,Slr,zbe,Rlr,Plr,Blr,Le,I3,Wbe,Ilr,Nlr,HW,qlr,jlr,Dlr,N3,Qbe,Glr,Olr,UW,Vlr,Xlr,zlr,q3,Hbe,Wlr,Qlr,JW,Hlr,Ulr,Jlr,j3,Ube,Ylr,Klr,YW,Zlr,eir,oir,D3,Jbe,rir,tir,KW,air,nir,sir,G3,Ybe,lir,iir,ZW,dir,cir,fir,O3,Kbe,mir,gir,eQ,hir,pir,_ir,V3,Zbe,uir,bir,oQ,vir,Fir,Tir,X3,e2e,Mir,Eir,rQ,Cir,wir,Air,z3,o2e,Lir,yir,tQ,xir,$ir,kir,W3,Sir,r2e,Rir,Pir,t2e,Bir,Iir,Q3,fOe,Sd,H3,a2e,L8,Nir,n2e,qir,mOe,Wo,y8,jir,Rd,Dir,aQ,Gir,Oir,nQ,Vir,Xir,zir,x8,Wir,s2e,Qir,Hir,Uir,Ct,$8,Jir,l2e,Yir,Kir,Pd,Zir,i2e,edr,odr,sQ,rdr,tdr,adr,U3,ndr,ho,k8,sdr,d2e,ldr,idr,Ja,ddr,c2e,cdr,fdr,f2e,mdr,gdr,m2e,hdr,pdr,_dr,S8,J3,g2e,udr,bdr,lQ,vdr,Fdr,Tdr,Y3,h2e,Mdr,Edr,iQ,Cdr,wdr,Adr,K3,Ldr,p2e,ydr,xdr,_2e,$dr,kdr,Z3,gOe,Bd,eF,u2e,R8,Sdr,b2e,Rdr,hOe,Qo,P8,Pdr,Id,Bdr,dQ,Idr,Ndr,cQ,qdr,jdr,Ddr,B8,Gdr,v2e,Odr,Vdr,Xdr,wt,I8,zdr,F2e,Wdr,Qdr,Nd,Hdr,T2e,Udr,Jdr,fQ,Ydr,Kdr,Zdr,oF,ecr,po,N8,ocr,M2e,rcr,tcr,Ya,acr,E2e,ncr,scr,C2e,lcr,icr,w2e,dcr,ccr,fcr,ot,rF,A2e,mcr,gcr,mQ,hcr,pcr,_cr,tF,L2e,ucr,bcr,gQ,vcr,Fcr,Tcr,aF,y2e,Mcr,Ecr,hQ,Ccr,wcr,Acr,nF,x2e,Lcr,ycr,pQ,xcr,$cr,kcr,sF,$2e,Scr,Rcr,_Q,Pcr,Bcr,Icr,lF,Ncr,k2e,qcr,jcr,S2e,Dcr,Gcr,iF,pOe,qd,dF,R2e,q8,Ocr,P2e,Vcr,_Oe,Ho,j8,Xcr,jd,zcr,uQ,Wcr,Qcr,bQ,Hcr,Ucr,Jcr,D8,Ycr,B2e,Kcr,Zcr,efr,At,G8,ofr,I2e,rfr,tfr,Dd,afr,N2e,nfr,sfr,vQ,lfr,ifr,dfr,cF,cfr,_o,O8,ffr,q2e,mfr,gfr,Ka,hfr,j2e,pfr,_fr,D2e,ufr,bfr,G2e,vfr,Ffr,Tfr,Gd,fF,O2e,Mfr,Efr,FQ,Cfr,wfr,Afr,mF,V2e,Lfr,yfr,TQ,xfr,$fr,kfr,gF,X2e,Sfr,Rfr,MQ,Pfr,Bfr,Ifr,hF,Nfr,z2e,qfr,jfr,W2e,Dfr,Gfr,pF,uOe,Od,_F,Q2e,V8,Ofr,H2e,Vfr,bOe,Uo,X8,Xfr,Vd,zfr,EQ,Wfr,Qfr,CQ,Hfr,Ufr,Jfr,z8,Yfr,U2e,Kfr,Zfr,emr,Lt,W8,omr,J2e,rmr,tmr,Xd,amr,Y2e,nmr,smr,wQ,lmr,imr,dmr,uF,cmr,uo,Q8,fmr,K2e,mmr,gmr,Za,hmr,Z2e,pmr,_mr,e4e,umr,bmr,o4e,vmr,Fmr,Tmr,H8,bF,r4e,Mmr,Emr,AQ,Cmr,wmr,Amr,vF,t4e,Lmr,ymr,LQ,xmr,$mr,kmr,FF,Smr,a4e,Rmr,Pmr,n4e,Bmr,Imr,TF,vOe,zd,MF,s4e,U8,Nmr,l4e,qmr,FOe,Jo,J8,jmr,Wd,Dmr,yQ,Gmr,Omr,xQ,Vmr,Xmr,zmr,Y8,Wmr,i4e,Qmr,Hmr,Umr,yt,K8,Jmr,d4e,Ymr,Kmr,Qd,Zmr,c4e,egr,ogr,$Q,rgr,tgr,agr,EF,ngr,bo,Z8,sgr,f4e,lgr,igr,en,dgr,m4e,cgr,fgr,g4e,mgr,ggr,h4e,hgr,pgr,_gr,p4e,CF,_4e,ugr,bgr,kQ,vgr,Fgr,Tgr,wF,Mgr,u4e,Egr,Cgr,b4e,wgr,Agr,AF,TOe,Hd,LF,v4e,e9,Lgr,F4e,ygr,MOe,Yo,o9,xgr,Ud,$gr,SQ,kgr,Sgr,RQ,Rgr,Pgr,Bgr,r9,Igr,T4e,Ngr,qgr,jgr,xt,t9,Dgr,M4e,Ggr,Ogr,Jd,Vgr,E4e,Xgr,zgr,PQ,Wgr,Qgr,Hgr,yF,Ugr,vo,a9,Jgr,C4e,Ygr,Kgr,on,Zgr,w4e,ehr,ohr,A4e,rhr,thr,L4e,ahr,nhr,shr,rt,xF,y4e,lhr,ihr,BQ,dhr,chr,fhr,$F,x4e,mhr,ghr,IQ,hhr,phr,_hr,kF,$4e,uhr,bhr,NQ,vhr,Fhr,Thr,SF,k4e,Mhr,Ehr,qQ,Chr,whr,Ahr,RF,S4e,Lhr,yhr,jQ,xhr,$hr,khr,PF,Shr,R4e,Rhr,Phr,P4e,Bhr,Ihr,BF,EOe,Yd,IF,B4e,n9,Nhr,I4e,qhr,COe,Ko,s9,jhr,Kd,Dhr,DQ,Ghr,Ohr,GQ,Vhr,Xhr,zhr,l9,Whr,N4e,Qhr,Hhr,Uhr,$t,i9,Jhr,q4e,Yhr,Khr,Zd,Zhr,j4e,epr,opr,OQ,rpr,tpr,apr,NF,npr,Fo,d9,spr,D4e,lpr,ipr,rn,dpr,G4e,cpr,fpr,O4e,mpr,gpr,V4e,hpr,ppr,_pr,X4e,qF,z4e,upr,bpr,VQ,vpr,Fpr,Tpr,jF,Mpr,W4e,Epr,Cpr,Q4e,wpr,Apr,DF,wOe,ec,GF,H4e,c9,Lpr,U4e,ypr,AOe,Zo,f9,xpr,oc,$pr,XQ,kpr,Spr,zQ,Rpr,Ppr,Bpr,m9,Ipr,J4e,Npr,qpr,jpr,kt,g9,Dpr,Y4e,Gpr,Opr,rc,Vpr,K4e,Xpr,zpr,WQ,Wpr,Qpr,Hpr,OF,Upr,Lr,h9,Jpr,Z4e,Ypr,Kpr,tn,Zpr,e5e,e_r,o_r,o5e,r_r,t_r,r5e,a_r,n_r,s_r,q,VF,t5e,l_r,i_r,QQ,d_r,c_r,f_r,XF,a5e,m_r,g_r,HQ,h_r,p_r,__r,zF,n5e,u_r,b_r,UQ,v_r,F_r,T_r,WF,s5e,M_r,E_r,JQ,C_r,w_r,A_r,QF,l5e,L_r,y_r,YQ,x_r,$_r,k_r,HF,i5e,S_r,R_r,KQ,P_r,B_r,I_r,UF,d5e,N_r,q_r,ZQ,j_r,D_r,G_r,JF,c5e,O_r,V_r,eH,X_r,z_r,W_r,YF,f5e,Q_r,H_r,oH,U_r,J_r,Y_r,KF,m5e,K_r,Z_r,rH,eur,our,rur,ZF,g5e,tur,aur,tH,nur,sur,lur,eT,h5e,iur,dur,aH,cur,fur,mur,oT,p5e,gur,hur,nH,pur,_ur,uur,rT,_5e,bur,vur,sH,Fur,Tur,Mur,tT,u5e,Eur,Cur,lH,wur,Aur,Lur,aT,b5e,yur,xur,iH,$ur,kur,Sur,nT,v5e,Rur,Pur,dH,Bur,Iur,Nur,Xs,F5e,qur,jur,cH,Dur,Gur,fH,Our,Vur,Xur,sT,T5e,zur,Wur,mH,Qur,Hur,Uur,lT,M5e,Jur,Yur,gH,Kur,Zur,e1r,iT,E5e,o1r,r1r,hH,t1r,a1r,n1r,dT,C5e,s1r,l1r,pH,i1r,d1r,c1r,cT,w5e,f1r,m1r,_H,g1r,h1r,p1r,fT,A5e,_1r,u1r,uH,b1r,v1r,F1r,mT,L5e,T1r,M1r,bH,E1r,C1r,w1r,gT,y5e,A1r,L1r,vH,y1r,x1r,$1r,hT,x5e,k1r,S1r,FH,R1r,P1r,B1r,pT,$5e,I1r,N1r,TH,q1r,j1r,D1r,_T,k5e,G1r,O1r,MH,V1r,X1r,z1r,uT,S5e,W1r,Q1r,EH,H1r,U1r,J1r,bT,R5e,Y1r,K1r,CH,Z1r,ebr,obr,vT,P5e,rbr,tbr,wH,abr,nbr,sbr,FT,B5e,lbr,ibr,AH,dbr,cbr,fbr,TT,I5e,mbr,gbr,LH,hbr,pbr,_br,MT,N5e,ubr,bbr,yH,vbr,Fbr,Tbr,ET,q5e,Mbr,Ebr,xH,Cbr,wbr,Abr,CT,j5e,Lbr,ybr,$H,xbr,$br,kbr,wT,D5e,Sbr,Rbr,kH,Pbr,Bbr,Ibr,AT,G5e,Nbr,qbr,SH,jbr,Dbr,Gbr,LT,O5e,Obr,Vbr,RH,Xbr,zbr,Wbr,yT,V5e,Qbr,Hbr,PH,Ubr,Jbr,Ybr,xT,X5e,Kbr,Zbr,BH,e2r,o2r,r2r,$T,z5e,t2r,a2r,IH,n2r,s2r,l2r,kT,W5e,i2r,d2r,NH,c2r,f2r,m2r,ST,Q5e,g2r,h2r,qH,p2r,_2r,u2r,RT,H5e,b2r,v2r,jH,F2r,T2r,M2r,PT,U5e,E2r,C2r,DH,w2r,A2r,L2r,BT,LOe,tc,IT,J5e,p9,y2r,Y5e,x2r,yOe,er,_9,$2r,ac,k2r,GH,S2r,R2r,OH,P2r,B2r,I2r,u9,N2r,K5e,q2r,j2r,D2r,St,b9,G2r,Z5e,O2r,V2r,nc,X2r,eve,z2r,W2r,VH,Q2r,H2r,U2r,NT,J2r,yr,v9,Y2r,ove,K2r,Z2r,an,e4r,rve,o4r,r4r,tve,t4r,a4r,ave,n4r,s4r,l4r,se,qT,nve,i4r,d4r,XH,c4r,f4r,m4r,jT,sve,g4r,h4r,zH,p4r,_4r,u4r,DT,lve,b4r,v4r,WH,F4r,T4r,M4r,GT,ive,E4r,C4r,QH,w4r,A4r,L4r,OT,dve,y4r,x4r,HH,$4r,k4r,S4r,VT,cve,R4r,P4r,UH,B4r,I4r,N4r,XT,fve,q4r,j4r,JH,D4r,G4r,O4r,zT,mve,V4r,X4r,YH,z4r,W4r,Q4r,WT,gve,H4r,U4r,KH,J4r,Y4r,K4r,QT,hve,Z4r,e5r,ZH,o5r,r5r,t5r,HT,pve,a5r,n5r,eU,s5r,l5r,i5r,UT,_ve,d5r,c5r,oU,f5r,m5r,g5r,JT,uve,h5r,p5r,rU,_5r,u5r,b5r,YT,bve,v5r,F5r,tU,T5r,M5r,E5r,KT,vve,C5r,w5r,aU,A5r,L5r,y5r,ZT,Fve,x5r,$5r,nU,k5r,S5r,R5r,e7,Tve,P5r,B5r,sU,I5r,N5r,q5r,o7,Mve,j5r,D5r,lU,G5r,O5r,V5r,r7,Eve,X5r,z5r,iU,W5r,Q5r,H5r,t7,Cve,U5r,J5r,dU,Y5r,K5r,Z5r,a7,wve,evr,ovr,cU,rvr,tvr,avr,n7,Ave,nvr,svr,fU,lvr,ivr,dvr,s7,Lve,cvr,fvr,mU,mvr,gvr,hvr,l7,xOe,sc,i7,yve,F9,pvr,xve,_vr,$Oe,or,T9,uvr,lc,bvr,gU,vvr,Fvr,hU,Tvr,Mvr,Evr,M9,Cvr,$ve,wvr,Avr,Lvr,Rt,E9,yvr,kve,xvr,$vr,ic,kvr,Sve,Svr,Rvr,pU,Pvr,Bvr,Ivr,d7,Nvr,xr,C9,qvr,Rve,jvr,Dvr,nn,Gvr,Pve,Ovr,Vvr,Bve,Xvr,zvr,Ive,Wvr,Qvr,Hvr,Me,c7,Nve,Uvr,Jvr,_U,Yvr,Kvr,Zvr,f7,qve,e3r,o3r,uU,r3r,t3r,a3r,m7,jve,n3r,s3r,bU,l3r,i3r,d3r,g7,Dve,c3r,f3r,vU,m3r,g3r,h3r,h7,Gve,p3r,_3r,FU,u3r,b3r,v3r,p7,Ove,F3r,T3r,TU,M3r,E3r,C3r,_7,Vve,w3r,A3r,MU,L3r,y3r,x3r,u7,Xve,$3r,k3r,EU,S3r,R3r,P3r,b7,zve,B3r,I3r,CU,N3r,q3r,j3r,v7,Wve,D3r,G3r,wU,O3r,V3r,X3r,F7,Qve,z3r,W3r,AU,Q3r,H3r,U3r,T7,Hve,J3r,Y3r,LU,K3r,Z3r,eFr,M7,Uve,oFr,rFr,yU,tFr,aFr,nFr,E7,kOe,dc,C7,Jve,w9,sFr,Yve,lFr,SOe,rr,A9,iFr,cc,dFr,xU,cFr,fFr,$U,mFr,gFr,hFr,L9,pFr,Kve,_Fr,uFr,bFr,Pt,y9,vFr,Zve,FFr,TFr,fc,MFr,e3e,EFr,CFr,kU,wFr,AFr,LFr,w7,yFr,$r,x9,xFr,o3e,$Fr,kFr,sn,SFr,r3e,RFr,PFr,t3e,BFr,IFr,a3e,NFr,qFr,jFr,ln,A7,n3e,DFr,GFr,SU,OFr,VFr,XFr,L7,s3e,zFr,WFr,RU,QFr,HFr,UFr,y7,l3e,JFr,YFr,PU,KFr,ZFr,eTr,x7,i3e,oTr,rTr,BU,tTr,aTr,nTr,$7,ROe,mc,k7,d3e,$9,sTr,c3e,lTr,POe,tr,k9,iTr,gc,dTr,IU,cTr,fTr,NU,mTr,gTr,hTr,S9,pTr,f3e,_Tr,uTr,bTr,Bt,R9,vTr,m3e,FTr,TTr,hc,MTr,g3e,ETr,CTr,qU,wTr,ATr,LTr,S7,yTr,kr,P9,xTr,h3e,$Tr,kTr,dn,STr,p3e,RTr,PTr,_3e,BTr,ITr,u3e,NTr,qTr,jTr,ie,R7,b3e,DTr,GTr,jU,OTr,VTr,XTr,P7,v3e,zTr,WTr,DU,QTr,HTr,UTr,B7,F3e,JTr,YTr,GU,KTr,ZTr,e7r,I7,T3e,o7r,r7r,OU,t7r,a7r,n7r,N7,M3e,s7r,l7r,VU,i7r,d7r,c7r,q7,E3e,f7r,m7r,XU,g7r,h7r,p7r,j7,C3e,_7r,u7r,zU,b7r,v7r,F7r,D7,w3e,T7r,M7r,WU,E7r,C7r,w7r,G7,A3e,A7r,L7r,QU,y7r,x7r,$7r,O7,L3e,k7r,S7r,HU,R7r,P7r,B7r,V7,y3e,I7r,N7r,UU,q7r,j7r,D7r,X7,x3e,G7r,O7r,JU,V7r,X7r,z7r,z7,$3e,W7r,Q7r,YU,H7r,U7r,J7r,W7,k3e,Y7r,K7r,KU,Z7r,eMr,oMr,Q7,S3e,rMr,tMr,ZU,aMr,nMr,sMr,H7,R3e,lMr,iMr,eJ,dMr,cMr,fMr,U7,P3e,mMr,gMr,oJ,hMr,pMr,_Mr,J7,B3e,uMr,bMr,rJ,vMr,FMr,TMr,Y7,I3e,MMr,EMr,tJ,CMr,wMr,AMr,K7,N3e,LMr,yMr,aJ,xMr,$Mr,kMr,Z7,BOe,pc,eM,q3e,B9,SMr,j3e,RMr,IOe,ar,I9,PMr,_c,BMr,nJ,IMr,NMr,sJ,qMr,jMr,DMr,N9,GMr,D3e,OMr,VMr,XMr,It,q9,zMr,G3e,WMr,QMr,uc,HMr,O3e,UMr,JMr,lJ,YMr,KMr,ZMr,oM,eEr,Sr,j9,oEr,V3e,rEr,tEr,cn,aEr,X3e,nEr,sEr,z3e,lEr,iEr,W3e,dEr,cEr,fEr,ye,rM,Q3e,mEr,gEr,iJ,hEr,pEr,_Er,tM,H3e,uEr,bEr,dJ,vEr,FEr,TEr,aM,U3e,MEr,EEr,cJ,CEr,wEr,AEr,nM,J3e,LEr,yEr,fJ,xEr,$Er,kEr,sM,Y3e,SEr,REr,mJ,PEr,BEr,IEr,lM,K3e,NEr,qEr,gJ,jEr,DEr,GEr,iM,Z3e,OEr,VEr,hJ,XEr,zEr,WEr,dM,eFe,QEr,HEr,pJ,UEr,JEr,YEr,cM,oFe,KEr,ZEr,_J,eCr,oCr,rCr,fM,rFe,tCr,aCr,uJ,nCr,sCr,lCr,mM,NOe,bc,gM,tFe,D9,iCr,aFe,dCr,qOe,nr,G9,cCr,vc,fCr,bJ,mCr,gCr,vJ,hCr,pCr,_Cr,O9,uCr,nFe,bCr,vCr,FCr,Nt,V9,TCr,sFe,MCr,ECr,Fc,CCr,lFe,wCr,ACr,FJ,LCr,yCr,xCr,hM,$Cr,Rr,X9,kCr,iFe,SCr,RCr,fn,PCr,dFe,BCr,ICr,cFe,NCr,qCr,fFe,jCr,DCr,GCr,te,pM,mFe,OCr,VCr,TJ,XCr,zCr,WCr,_M,gFe,QCr,HCr,MJ,UCr,JCr,YCr,uM,hFe,KCr,ZCr,EJ,e0r,o0r,r0r,bM,pFe,t0r,a0r,CJ,n0r,s0r,l0r,vM,_Fe,i0r,d0r,wJ,c0r,f0r,m0r,FM,uFe,g0r,h0r,AJ,p0r,_0r,u0r,TM,bFe,b0r,v0r,LJ,F0r,T0r,M0r,MM,vFe,E0r,C0r,yJ,w0r,A0r,L0r,EM,FFe,y0r,x0r,xJ,$0r,k0r,S0r,CM,TFe,R0r,P0r,$J,B0r,I0r,N0r,wM,MFe,q0r,j0r,kJ,D0r,G0r,O0r,AM,EFe,V0r,X0r,SJ,z0r,W0r,Q0r,LM,CFe,H0r,U0r,RJ,J0r,Y0r,K0r,yM,wFe,Z0r,ewr,PJ,owr,rwr,twr,xM,AFe,awr,nwr,BJ,swr,lwr,iwr,$M,LFe,dwr,cwr,IJ,fwr,mwr,gwr,kM,yFe,hwr,pwr,NJ,_wr,uwr,bwr,SM,xFe,vwr,Fwr,qJ,Twr,Mwr,Ewr,RM,$Fe,Cwr,wwr,jJ,Awr,Lwr,ywr,PM,kFe,xwr,$wr,DJ,kwr,Swr,Rwr,BM,SFe,Pwr,Bwr,GJ,Iwr,Nwr,qwr,IM,RFe,jwr,Dwr,OJ,Gwr,Owr,Vwr,NM,PFe,Xwr,zwr,VJ,Wwr,Qwr,Hwr,qM,BFe,Uwr,Jwr,XJ,Ywr,Kwr,Zwr,jM,IFe,eAr,oAr,zJ,rAr,tAr,aAr,DM,NFe,nAr,sAr,WJ,lAr,iAr,dAr,GM,jOe,Tc,OM,qFe,z9,cAr,jFe,fAr,DOe,sr,W9,mAr,Mc,gAr,QJ,hAr,pAr,HJ,_Ar,uAr,bAr,Q9,vAr,DFe,FAr,TAr,MAr,qt,H9,EAr,GFe,CAr,wAr,Ec,AAr,OFe,LAr,yAr,UJ,xAr,$Ar,kAr,VM,SAr,Pr,U9,RAr,VFe,PAr,BAr,mn,IAr,XFe,NAr,qAr,zFe,jAr,DAr,WFe,GAr,OAr,VAr,_e,XM,QFe,XAr,zAr,JJ,WAr,QAr,HAr,zM,HFe,UAr,JAr,YJ,YAr,KAr,ZAr,WM,UFe,e6r,o6r,KJ,r6r,t6r,a6r,QM,JFe,n6r,s6r,ZJ,l6r,i6r,d6r,HM,YFe,c6r,f6r,eY,m6r,g6r,h6r,UM,KFe,p6r,_6r,oY,u6r,b6r,v6r,JM,ZFe,F6r,T6r,rY,M6r,E6r,C6r,YM,eTe,w6r,A6r,tY,L6r,y6r,x6r,KM,oTe,$6r,k6r,aY,S6r,R6r,P6r,ZM,rTe,B6r,I6r,nY,N6r,q6r,j6r,eE,tTe,D6r,G6r,sY,O6r,V6r,X6r,oE,aTe,z6r,W6r,lY,Q6r,H6r,U6r,rE,nTe,J6r,Y6r,iY,K6r,Z6r,eLr,tE,sTe,oLr,rLr,dY,tLr,aLr,nLr,aE,lTe,sLr,lLr,cY,iLr,dLr,cLr,nE,iTe,fLr,mLr,fY,gLr,hLr,pLr,sE,dTe,_Lr,uLr,mY,bLr,vLr,FLr,lE,GOe,Cc,iE,cTe,J9,TLr,fTe,MLr,OOe,lr,Y9,ELr,wc,CLr,gY,wLr,ALr,hY,LLr,yLr,xLr,K9,$Lr,mTe,kLr,SLr,RLr,jt,Z9,PLr,gTe,BLr,ILr,Ac,NLr,hTe,qLr,jLr,pY,DLr,GLr,OLr,dE,VLr,Br,ex,XLr,pTe,zLr,WLr,gn,QLr,_Te,HLr,ULr,uTe,JLr,YLr,bTe,KLr,ZLr,eyr,ox,cE,vTe,oyr,ryr,_Y,tyr,ayr,nyr,fE,FTe,syr,lyr,uY,iyr,dyr,cyr,mE,VOe,Lc,gE,TTe,rx,fyr,MTe,myr,XOe,ir,tx,gyr,yc,hyr,bY,pyr,_yr,vY,uyr,byr,vyr,ax,Fyr,ETe,Tyr,Myr,Eyr,Dt,nx,Cyr,CTe,wyr,Ayr,xc,Lyr,wTe,yyr,xyr,FY,$yr,kyr,Syr,hE,Ryr,Ir,sx,Pyr,ATe,Byr,Iyr,hn,Nyr,LTe,qyr,jyr,yTe,Dyr,Gyr,xTe,Oyr,Vyr,Xyr,$Te,pE,kTe,zyr,Wyr,TY,Qyr,Hyr,Uyr,_E,zOe,$c,uE,STe,lx,Jyr,RTe,Yyr,WOe,dr,ix,Kyr,kc,Zyr,MY,e8r,o8r,EY,r8r,t8r,a8r,dx,n8r,PTe,s8r,l8r,i8r,Gt,cx,d8r,BTe,c8r,f8r,Sc,m8r,ITe,g8r,h8r,CY,p8r,_8r,u8r,bE,b8r,Nr,fx,v8r,NTe,F8r,T8r,pn,M8r,qTe,E8r,C8r,jTe,w8r,A8r,DTe,L8r,y8r,x8r,de,vE,GTe,$8r,k8r,wY,S8r,R8r,P8r,FE,OTe,B8r,I8r,AY,N8r,q8r,j8r,TE,VTe,D8r,G8r,LY,O8r,V8r,X8r,ME,XTe,z8r,W8r,yY,Q8r,H8r,U8r,EE,zTe,J8r,Y8r,xY,K8r,Z8r,e9r,CE,WTe,o9r,r9r,$Y,t9r,a9r,n9r,wE,QTe,s9r,l9r,kY,i9r,d9r,c9r,AE,HTe,f9r,m9r,SY,g9r,h9r,p9r,LE,UTe,_9r,u9r,RY,b9r,v9r,F9r,yE,JTe,T9r,M9r,PY,E9r,C9r,w9r,xE,YTe,A9r,L9r,BY,y9r,x9r,$9r,$E,KTe,k9r,S9r,IY,R9r,P9r,B9r,kE,ZTe,I9r,N9r,NY,q9r,j9r,D9r,SE,e7e,G9r,O9r,qY,V9r,X9r,z9r,RE,o7e,W9r,Q9r,jY,H9r,U9r,J9r,PE,r7e,Y9r,K9r,DY,Z9r,exr,oxr,BE,t7e,rxr,txr,GY,axr,nxr,sxr,IE,a7e,lxr,ixr,OY,dxr,cxr,fxr,NE,n7e,mxr,gxr,VY,hxr,pxr,_xr,qE,s7e,uxr,bxr,XY,vxr,Fxr,Txr,jE,QOe,Rc,DE,l7e,mx,Mxr,i7e,Exr,HOe,cr,gx,Cxr,Pc,wxr,zY,Axr,Lxr,WY,yxr,xxr,$xr,hx,kxr,d7e,Sxr,Rxr,Pxr,Ot,px,Bxr,c7e,Ixr,Nxr,Bc,qxr,f7e,jxr,Dxr,QY,Gxr,Oxr,Vxr,GE,Xxr,qr,_x,zxr,m7e,Wxr,Qxr,_n,Hxr,g7e,Uxr,Jxr,h7e,Yxr,Kxr,p7e,Zxr,e$r,o$r,ce,OE,_7e,r$r,t$r,HY,a$r,n$r,s$r,VE,u7e,l$r,i$r,UY,d$r,c$r,f$r,XE,b7e,m$r,g$r,JY,h$r,p$r,_$r,zE,v7e,u$r,b$r,YY,v$r,F$r,T$r,WE,F7e,M$r,E$r,KY,C$r,w$r,A$r,QE,T7e,L$r,y$r,ZY,x$r,$$r,k$r,HE,M7e,S$r,R$r,eK,P$r,B$r,I$r,UE,E7e,N$r,q$r,oK,j$r,D$r,G$r,JE,C7e,O$r,V$r,rK,X$r,z$r,W$r,YE,w7e,Q$r,H$r,tK,U$r,J$r,Y$r,KE,A7e,K$r,Z$r,aK,ekr,okr,rkr,ZE,L7e,tkr,akr,nK,nkr,skr,lkr,eC,y7e,ikr,dkr,sK,ckr,fkr,mkr,oC,x7e,gkr,hkr,lK,pkr,_kr,ukr,rC,$7e,bkr,vkr,iK,Fkr,Tkr,Mkr,tC,k7e,Ekr,Ckr,dK,wkr,Akr,Lkr,aC,S7e,ykr,xkr,cK,$kr,kkr,Skr,nC,R7e,Rkr,Pkr,fK,Bkr,Ikr,Nkr,sC,P7e,qkr,jkr,mK,Dkr,Gkr,Okr,lC,B7e,Vkr,Xkr,gK,zkr,Wkr,Qkr,iC,UOe,Ic,dC,I7e,ux,Hkr,N7e,Ukr,JOe,fr,bx,Jkr,Nc,Ykr,hK,Kkr,Zkr,pK,eSr,oSr,rSr,vx,tSr,q7e,aSr,nSr,sSr,Vt,Fx,lSr,j7e,iSr,dSr,qc,cSr,D7e,fSr,mSr,_K,gSr,hSr,pSr,cC,_Sr,jr,Tx,uSr,G7e,bSr,vSr,un,FSr,O7e,TSr,MSr,V7e,ESr,CSr,X7e,wSr,ASr,LSr,z7e,fC,W7e,ySr,xSr,uK,$Sr,kSr,SSr,mC,YOe,jc,gC,Q7e,Mx,RSr,H7e,PSr,KOe,mr,Ex,BSr,Dc,ISr,bK,NSr,qSr,vK,jSr,DSr,GSr,Cx,OSr,U7e,VSr,XSr,zSr,Xt,wx,WSr,J7e,QSr,HSr,Gc,USr,Y7e,JSr,YSr,FK,KSr,ZSr,eRr,hC,oRr,Dr,Ax,rRr,K7e,tRr,aRr,bn,nRr,Z7e,sRr,lRr,eMe,iRr,dRr,oMe,cRr,fRr,mRr,rMe,pC,tMe,gRr,hRr,TK,pRr,_Rr,uRr,_C,ZOe,Oc,uC,aMe,Lx,bRr,nMe,vRr,eVe,gr,yx,FRr,Vc,TRr,MK,MRr,ERr,EK,CRr,wRr,ARr,xx,LRr,sMe,yRr,xRr,$Rr,zt,$x,kRr,lMe,SRr,RRr,Xc,PRr,iMe,BRr,IRr,CK,NRr,qRr,jRr,bC,DRr,Gr,kx,GRr,dMe,ORr,VRr,vn,XRr,cMe,zRr,WRr,fMe,QRr,HRr,mMe,URr,JRr,YRr,oe,vC,gMe,KRr,ZRr,wK,ePr,oPr,rPr,FC,hMe,tPr,aPr,AK,nPr,sPr,lPr,TC,pMe,iPr,dPr,LK,cPr,fPr,mPr,MC,_Me,gPr,hPr,yK,pPr,_Pr,uPr,EC,uMe,bPr,vPr,xK,FPr,TPr,MPr,CC,bMe,EPr,CPr,$K,wPr,APr,LPr,wC,vMe,yPr,xPr,kK,$Pr,kPr,SPr,AC,FMe,RPr,PPr,SK,BPr,IPr,NPr,LC,TMe,qPr,jPr,RK,DPr,GPr,OPr,yC,MMe,VPr,XPr,PK,zPr,WPr,QPr,xC,EMe,HPr,UPr,BK,JPr,YPr,KPr,$C,CMe,ZPr,eBr,IK,oBr,rBr,tBr,kC,wMe,aBr,nBr,NK,sBr,lBr,iBr,SC,AMe,dBr,cBr,qK,fBr,mBr,gBr,RC,LMe,hBr,pBr,jK,_Br,uBr,bBr,PC,yMe,vBr,FBr,DK,TBr,MBr,EBr,BC,xMe,CBr,wBr,GK,ABr,LBr,yBr,IC,$Me,xBr,$Br,OK,kBr,SBr,RBr,NC,kMe,PBr,BBr,VK,IBr,NBr,qBr,qC,SMe,jBr,DBr,XK,GBr,OBr,VBr,jC,RMe,XBr,zBr,zK,WBr,QBr,HBr,DC,PMe,UBr,JBr,WK,YBr,KBr,ZBr,GC,BMe,eIr,oIr,QK,rIr,tIr,aIr,OC,IMe,nIr,sIr,HK,lIr,iIr,dIr,VC,NMe,cIr,fIr,UK,mIr,gIr,hIr,XC,qMe,pIr,_Ir,JK,uIr,bIr,vIr,zC,jMe,FIr,TIr,YK,MIr,EIr,CIr,WC,oVe,zc,QC,DMe,Sx,wIr,GMe,AIr,rVe,hr,Rx,LIr,Wc,yIr,KK,xIr,$Ir,ZK,kIr,SIr,RIr,Px,PIr,OMe,BIr,IIr,NIr,Wt,Bx,qIr,VMe,jIr,DIr,Qc,GIr,XMe,OIr,VIr,eZ,XIr,zIr,WIr,HC,QIr,Or,Ix,HIr,zMe,UIr,JIr,Fn,YIr,WMe,KIr,ZIr,QMe,eNr,oNr,HMe,rNr,tNr,aNr,xe,UC,UMe,nNr,sNr,oZ,lNr,iNr,dNr,JC,JMe,cNr,fNr,rZ,mNr,gNr,hNr,YC,YMe,pNr,_Nr,tZ,uNr,bNr,vNr,KC,KMe,FNr,TNr,aZ,MNr,ENr,CNr,ZC,ZMe,wNr,ANr,nZ,LNr,yNr,xNr,e0,eEe,$Nr,kNr,sZ,SNr,RNr,PNr,o0,oEe,BNr,INr,lZ,NNr,qNr,jNr,r0,rEe,DNr,GNr,iZ,ONr,VNr,XNr,t0,tEe,zNr,WNr,dZ,QNr,HNr,UNr,a0,aEe,JNr,YNr,cZ,KNr,ZNr,eqr,n0,tVe,Hc,s0,nEe,Nx,oqr,sEe,rqr,aVe,pr,qx,tqr,Uc,aqr,fZ,nqr,sqr,mZ,lqr,iqr,dqr,jx,cqr,lEe,fqr,mqr,gqr,Qt,Dx,hqr,iEe,pqr,_qr,Jc,uqr,dEe,bqr,vqr,gZ,Fqr,Tqr,Mqr,l0,Eqr,Vr,Gx,Cqr,cEe,wqr,Aqr,Tn,Lqr,fEe,yqr,xqr,mEe,$qr,kqr,gEe,Sqr,Rqr,Pqr,Ee,i0,hEe,Bqr,Iqr,hZ,Nqr,qqr,jqr,d0,pEe,Dqr,Gqr,pZ,Oqr,Vqr,Xqr,c0,_Ee,zqr,Wqr,_Z,Qqr,Hqr,Uqr,f0,uEe,Jqr,Yqr,uZ,Kqr,Zqr,ejr,m0,bEe,ojr,rjr,bZ,tjr,ajr,njr,g0,vEe,sjr,ljr,vZ,ijr,djr,cjr,h0,FEe,fjr,mjr,FZ,gjr,hjr,pjr,p0,TEe,_jr,ujr,TZ,bjr,vjr,Fjr,_0,MEe,Tjr,Mjr,MZ,Ejr,Cjr,wjr,u0,EEe,Ajr,Ljr,EZ,yjr,xjr,$jr,b0,CEe,kjr,Sjr,CZ,Rjr,Pjr,Bjr,v0,wEe,Ijr,Njr,wZ,qjr,jjr,Djr,F0,AEe,Gjr,Ojr,AZ,Vjr,Xjr,zjr,T0,nVe,Yc,M0,LEe,Ox,Wjr,yEe,Qjr,sVe,_r,Vx,Hjr,Kc,Ujr,LZ,Jjr,Yjr,yZ,Kjr,Zjr,eDr,Xx,oDr,xEe,rDr,tDr,aDr,Ht,zx,nDr,$Ee,sDr,lDr,Zc,iDr,kEe,dDr,cDr,xZ,fDr,mDr,gDr,E0,hDr,Xr,Wx,pDr,SEe,_Dr,uDr,Mn,bDr,REe,vDr,FDr,PEe,TDr,MDr,BEe,EDr,CDr,wDr,$e,C0,IEe,ADr,LDr,$Z,yDr,xDr,$Dr,w0,NEe,kDr,SDr,kZ,RDr,PDr,BDr,A0,qEe,IDr,NDr,SZ,qDr,jDr,DDr,L0,jEe,GDr,ODr,RZ,VDr,XDr,zDr,y0,DEe,WDr,QDr,PZ,HDr,UDr,JDr,x0,GEe,YDr,KDr,BZ,ZDr,eGr,oGr,$0,OEe,rGr,tGr,IZ,aGr,nGr,sGr,k0,VEe,lGr,iGr,NZ,dGr,cGr,fGr,S0,XEe,mGr,gGr,qZ,hGr,pGr,_Gr,R0,zEe,uGr,bGr,jZ,vGr,FGr,TGr,P0,lVe,ef,B0,WEe,Qx,MGr,QEe,EGr,iVe,ur,Hx,CGr,of,wGr,DZ,AGr,LGr,GZ,yGr,xGr,$Gr,Ux,kGr,HEe,SGr,RGr,PGr,Ut,Jx,BGr,UEe,IGr,NGr,rf,qGr,JEe,jGr,DGr,OZ,GGr,OGr,VGr,I0,XGr,zr,Yx,zGr,YEe,WGr,QGr,En,HGr,KEe,UGr,JGr,ZEe,YGr,KGr,eCe,ZGr,eOr,oOr,ke,N0,oCe,rOr,tOr,VZ,aOr,nOr,sOr,q0,rCe,lOr,iOr,XZ,dOr,cOr,fOr,j0,tCe,mOr,gOr,zZ,hOr,pOr,_Or,D0,aCe,uOr,bOr,WZ,vOr,FOr,TOr,G0,nCe,MOr,EOr,QZ,COr,wOr,AOr,O0,sCe,LOr,yOr,HZ,xOr,$Or,kOr,V0,lCe,SOr,ROr,UZ,POr,BOr,IOr,X0,iCe,NOr,qOr,JZ,jOr,DOr,GOr,z0,dCe,OOr,VOr,YZ,XOr,zOr,WOr,W0,cCe,QOr,HOr,KZ,UOr,JOr,YOr,Q0,dVe,tf,H0,fCe,Kx,KOr,mCe,ZOr,cVe,br,Zx,eVr,af,oVr,ZZ,rVr,tVr,eee,aVr,nVr,sVr,e$,lVr,gCe,iVr,dVr,cVr,Jt,o$,fVr,hCe,mVr,gVr,nf,hVr,pCe,pVr,_Vr,oee,uVr,bVr,vVr,U0,FVr,Wr,r$,TVr,_Ce,MVr,EVr,Cn,CVr,uCe,wVr,AVr,bCe,LVr,yVr,vCe,xVr,$Vr,kVr,Se,J0,FCe,SVr,RVr,ree,PVr,BVr,IVr,Y0,TCe,NVr,qVr,tee,jVr,DVr,GVr,K0,MCe,OVr,VVr,aee,XVr,zVr,WVr,Z0,ECe,QVr,HVr,nee,UVr,JVr,YVr,ew,CCe,KVr,ZVr,see,eXr,oXr,rXr,ow,wCe,tXr,aXr,lee,nXr,sXr,lXr,rw,ACe,iXr,dXr,iee,cXr,fXr,mXr,tw,LCe,gXr,hXr,dee,pXr,_Xr,uXr,aw,yCe,bXr,vXr,cee,FXr,TXr,MXr,nw,xCe,EXr,CXr,fee,wXr,AXr,LXr,sw,fVe,sf,lw,$Ce,t$,yXr,kCe,xXr,mVe,vr,a$,$Xr,lf,kXr,mee,SXr,RXr,gee,PXr,BXr,IXr,n$,NXr,SCe,qXr,jXr,DXr,Yt,s$,GXr,RCe,OXr,VXr,df,XXr,PCe,zXr,WXr,hee,QXr,HXr,UXr,iw,JXr,Qr,l$,YXr,BCe,KXr,ZXr,wn,ezr,ICe,ozr,rzr,NCe,tzr,azr,qCe,nzr,szr,lzr,Re,dw,jCe,izr,dzr,pee,czr,fzr,mzr,cw,DCe,gzr,hzr,_ee,pzr,_zr,uzr,fw,GCe,bzr,vzr,uee,Fzr,Tzr,Mzr,mw,OCe,Ezr,Czr,bee,wzr,Azr,Lzr,gw,VCe,yzr,xzr,vee,$zr,kzr,Szr,hw,XCe,Rzr,Pzr,Fee,Bzr,Izr,Nzr,pw,zCe,qzr,jzr,Tee,Dzr,Gzr,Ozr,_w,WCe,Vzr,Xzr,Mee,zzr,Wzr,Qzr,uw,QCe,Hzr,Uzr,Eee,Jzr,Yzr,Kzr,bw,HCe,Zzr,eWr,Cee,oWr,rWr,tWr,vw,gVe,cf,Fw,UCe,i$,aWr,JCe,nWr,hVe,Fr,d$,sWr,ff,lWr,wee,iWr,dWr,Aee,cWr,fWr,mWr,c$,gWr,YCe,hWr,pWr,_Wr,Kt,f$,uWr,KCe,bWr,vWr,mf,FWr,ZCe,TWr,MWr,Lee,EWr,CWr,wWr,Tw,AWr,Hr,m$,LWr,e0e,yWr,xWr,An,$Wr,o0e,kWr,SWr,r0e,RWr,PWr,t0e,BWr,IWr,NWr,Ve,Mw,a0e,qWr,jWr,yee,DWr,GWr,OWr,Ew,n0e,VWr,XWr,xee,zWr,WWr,QWr,Cw,s0e,HWr,UWr,$ee,JWr,YWr,KWr,ww,l0e,ZWr,eQr,kee,oQr,rQr,tQr,Aw,i0e,aQr,nQr,See,sQr,lQr,iQr,Lw,d0e,dQr,cQr,Ree,fQr,mQr,gQr,yw,c0e,hQr,pQr,Pee,_Qr,uQr,bQr,xw,f0e,vQr,FQr,Bee,TQr,MQr,EQr,$w,pVe,gf,kw,m0e,g$,CQr,g0e,wQr,_Ve,Tr,h$,AQr,hf,LQr,Iee,yQr,xQr,Nee,$Qr,kQr,SQr,p$,RQr,h0e,PQr,BQr,IQr,Zt,_$,NQr,p0e,qQr,jQr,pf,DQr,_0e,GQr,OQr,qee,VQr,XQr,zQr,Sw,WQr,Ur,u$,QQr,u0e,HQr,UQr,Ln,JQr,b0e,YQr,KQr,v0e,ZQr,eHr,F0e,oHr,rHr,tHr,Xe,Rw,T0e,aHr,nHr,jee,sHr,lHr,iHr,Pw,M0e,dHr,cHr,Dee,fHr,mHr,gHr,Bw,E0e,hHr,pHr,Gee,_Hr,uHr,bHr,Iw,C0e,vHr,FHr,Oee,THr,MHr,EHr,Nw,w0e,CHr,wHr,Vee,AHr,LHr,yHr,qw,A0e,xHr,$Hr,Xee,kHr,SHr,RHr,jw,L0e,PHr,BHr,zee,IHr,NHr,qHr,Dw,y0e,jHr,DHr,Wee,GHr,OHr,VHr,Gw,uVe,_f,Ow,x0e,b$,XHr,$0e,zHr,bVe,Mr,v$,WHr,uf,QHr,Qee,HHr,UHr,Hee,JHr,YHr,KHr,F$,ZHr,k0e,eUr,oUr,rUr,ea,T$,tUr,S0e,aUr,nUr,bf,sUr,R0e,lUr,iUr,Uee,dUr,cUr,fUr,Vw,mUr,Jr,M$,gUr,P0e,hUr,pUr,yn,_Ur,B0e,uUr,bUr,I0e,vUr,FUr,N0e,TUr,MUr,EUr,q0e,Xw,j0e,CUr,wUr,Jee,AUr,LUr,yUr,zw,vVe,vf,Ww,D0e,E$,xUr,G0e,$Ur,FVe,Er,C$,kUr,Ff,SUr,Yee,RUr,PUr,Kee,BUr,IUr,NUr,w$,qUr,O0e,jUr,DUr,GUr,oa,A$,OUr,V0e,VUr,XUr,Tf,zUr,X0e,WUr,QUr,Zee,HUr,UUr,JUr,Qw,YUr,Yr,L$,KUr,z0e,ZUr,eJr,xn,oJr,W0e,rJr,tJr,Q0e,aJr,nJr,H0e,sJr,lJr,iJr,y$,Hw,U0e,dJr,cJr,eoe,fJr,mJr,gJr,Uw,J0e,hJr,pJr,ooe,_Jr,uJr,bJr,Jw,TVe,Mf,Yw,Y0e,x$,vJr,K0e,FJr,MVe,Cr,$$,TJr,Ef,MJr,roe,EJr,CJr,toe,wJr,AJr,LJr,k$,yJr,Z0e,xJr,$Jr,kJr,ra,S$,SJr,ewe,RJr,PJr,Cf,BJr,owe,IJr,NJr,aoe,qJr,jJr,DJr,Kw,GJr,Kr,R$,OJr,rwe,VJr,XJr,$n,zJr,twe,WJr,QJr,awe,HJr,UJr,nwe,JJr,YJr,KJr,swe,Zw,lwe,ZJr,eYr,noe,oYr,rYr,tYr,eA,EVe;return d=new re({}),xa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),CL=new re({}),wL=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Rf=new aYr({props:{warning:!0,$$slots:{default:[vjt]},$$scope:{ctx:x}}}),AL=new re({}),LL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/configuration_auto.py#L598"}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/configuration_auto.py#L621"}}),Gg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Fjt]},$$scope:{ctx:x}}}),kL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/configuration_auto.py#L744"}}),SL=new re({}),RL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/tokenization_auto.py#L399"}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17354/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/tokenization_auto.py#L413"}}),Eh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Tjt]},$$scope:{ctx:x}}}),NL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/tokenization_auto.py#L612"}}),qL=new re({}),jL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/feature_extraction_auto.py#L194"}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17354/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/feature_extraction_auto.py#L208"}}),np=new aYr({props:{$$slots:{default:[Mjt]},$$scope:{ctx:x}}}),sp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Ejt]},$$scope:{ctx:x}}}),VL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/feature_extraction_auto.py#L335"}}),XL=new re({}),zL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/processing_auto.py#L88"}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/processing_auto.py#L102"}}),Ap=new aYr({props:{$$slots:{default:[Cjt]},$$scope:{ctx:x}}}),Lp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[wjt]},$$scope:{ctx:x}}}),UL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/processing_auto.py#L255"}}),JL=new re({}),YL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L761"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),$p=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Ajt]},$$scope:{ctx:x}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),$u=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Ljt]},$$scope:{ctx:x}}}),oy=new re({}),ry=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L768"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Su=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[yjt]},$$scope:{ctx:x}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),E1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[xjt]},$$scope:{ctx:x}}}),sy=new re({}),ly=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L783"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),w1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[$jt]},$$scope:{ctx:x}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),fb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[kjt]},$$scope:{ctx:x}}}),fy=new re({}),my=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L790"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),gb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Sjt]},$$scope:{ctx:x}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Yb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Rjt]},$$scope:{ctx:x}}}),_y=new re({}),uy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L797"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Zb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Pjt]},$$scope:{ctx:x}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),b2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Bjt]},$$scope:{ctx:x}}}),Ty=new re({}),My=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L806"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),F2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Ijt]},$$scope:{ctx:x}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),_4=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Njt]},$$scope:{ctx:x}}}),Ay=new re({}),Ly=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L851"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),b4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[qjt]},$$scope:{ctx:x}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),U4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[jjt]},$$scope:{ctx:x}}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L858"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Y4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Djt]},$$scope:{ctx:x}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),a5=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Gjt]},$$scope:{ctx:x}}}),Iy=new re({}),Ny=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L844"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),s5=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Ojt]},$$scope:{ctx:x}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),V5=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Vjt]},$$scope:{ctx:x}}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L815"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),z5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Xjt]},$$scope:{ctx:x}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Rv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[zjt]},$$scope:{ctx:x}}}),Wy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L822"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Bv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Wjt]},$$scope:{ctx:x}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),qv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Qjt]},$$scope:{ctx:x}}}),Yy=new re({}),Ky=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L867"}}),e8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Dv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Hjt]},$$scope:{ctx:x}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),o3=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Ujt]},$$scope:{ctx:x}}}),r8=new re({}),t8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L906"}}),n8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),t3=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Jjt]},$$scope:{ctx:x}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),s3=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Yjt]},$$scope:{ctx:x}}}),l8=new re({}),i8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L833"}}),c8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),i3=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[Kjt]},$$scope:{ctx:x}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),f3=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Zjt]},$$scope:{ctx:x}}}),m8=new re({}),g8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L913"}}),p8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),g3=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[eDt]},$$scope:{ctx:x}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[oDt]},$$scope:{ctx:x}}}),u8=new re({}),b8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L936"}}),F8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),A3=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[rDt]},$$scope:{ctx:x}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),R3=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[tDt]},$$scope:{ctx:x}}}),M8=new re({}),E8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L920"}}),w8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),B3=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[aDt]},$$scope:{ctx:x}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Q3=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[nDt]},$$scope:{ctx:x}}}),L8=new re({}),y8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L927"}}),$8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[sDt]},$$scope:{ctx:x}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Z3=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[lDt]},$$scope:{ctx:x}}}),R8=new re({}),P8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L945"}}),I8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[iDt]},$$scope:{ctx:x}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[dDt]},$$scope:{ctx:x}}}),q8=new re({}),j8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L952"}}),G8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[cDt]},$$scope:{ctx:x}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),pF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[fDt]},$$scope:{ctx:x}}}),V8=new re({}),X8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L899"}}),W8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),uF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[mDt]},$$scope:{ctx:x}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[gDt]},$$scope:{ctx:x}}}),U8=new re({}),J8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L874"}}),K8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[hDt]},$$scope:{ctx:x}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[pDt]},$$scope:{ctx:x}}}),e9=new re({}),o9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L881"}}),t9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),yF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[_Dt]},$$scope:{ctx:x}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),BF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[uDt]},$$scope:{ctx:x}}}),n9=new re({}),s9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L890"}}),i9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),NF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[bDt]},$$scope:{ctx:x}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),DF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[vDt]},$$scope:{ctx:x}}}),c9=new re({}),f9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),g9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),OF=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[FDt]},$$scope:{ctx:x}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),BT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[TDt]},$$scope:{ctx:x}}}),p9=new re({}),_9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),b9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),NT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[MDt]},$$scope:{ctx:x}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),l7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[EDt]},$$scope:{ctx:x}}}),F9=new re({}),T9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),E9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),d7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[CDt]},$$scope:{ctx:x}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),E7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[wDt]},$$scope:{ctx:x}}}),w9=new re({}),A9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),y9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),w7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[ADt]},$$scope:{ctx:x}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),$7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[LDt]},$$scope:{ctx:x}}}),$9=new re({}),k9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),R9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),S7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[yDt]},$$scope:{ctx:x}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Z7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[xDt]},$$scope:{ctx:x}}}),B9=new re({}),I9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),q9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),oM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[$Dt]},$$scope:{ctx:x}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),mM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[kDt]},$$scope:{ctx:x}}}),D9=new re({}),G9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),V9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),hM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[SDt]},$$scope:{ctx:x}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),GM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[RDt]},$$scope:{ctx:x}}}),z9=new re({}),W9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),H9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),VM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[PDt]},$$scope:{ctx:x}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),lE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[BDt]},$$scope:{ctx:x}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),dE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[IDt]},$$scope:{ctx:x}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),mE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[NDt]},$$scope:{ctx:x}}}),rx=new re({}),tx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[qDt]},$$scope:{ctx:x}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[jDt]},$$scope:{ctx:x}}}),lx=new re({}),ix=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),bE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[DDt]},$$scope:{ctx:x}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),jE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[GDt]},$$scope:{ctx:x}}}),mx=new re({}),gx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),GE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ODt]},$$scope:{ctx:x}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),iC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[VDt]},$$scope:{ctx:x}}}),ux=new re({}),bx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),cC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[XDt]},$$scope:{ctx:x}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),mC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[zDt]},$$scope:{ctx:x}}}),Mx=new re({}),Ex=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),wx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),hC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[WDt]},$$scope:{ctx:x}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),_C=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[QDt]},$$scope:{ctx:x}}}),Lx=new re({}),yx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),$x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),bC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[HDt]},$$scope:{ctx:x}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[UDt]},$$scope:{ctx:x}}}),Sx=new re({}),Rx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[JDt]},$$scope:{ctx:x}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),n0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[YDt]},$$scope:{ctx:x}}}),Nx=new re({}),qx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),l0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[KDt]},$$scope:{ctx:x}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),T0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ZDt]},$$scope:{ctx:x}}}),Ox=new re({}),Vx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),E0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[eGt]},$$scope:{ctx:x}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),P0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[oGt]},$$scope:{ctx:x}}}),Qx=new re({}),Hx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),I0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[rGt]},$$scope:{ctx:x}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Q0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[tGt]},$$scope:{ctx:x}}}),Kx=new re({}),Zx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),o$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),U0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[aGt]},$$scope:{ctx:x}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[nGt]},$$scope:{ctx:x}}}),t$=new re({}),a$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),s$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),iw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[sGt]},$$scope:{ctx:x}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),vw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[lGt]},$$scope:{ctx:x}}}),i$=new re({}),d$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),f$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Tw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[iGt]},$$scope:{ctx:x}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),$w=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[dGt]},$$scope:{ctx:x}}}),g$=new re({}),h$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),_$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Sw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[cGt]},$$scope:{ctx:x}}}),u$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Gw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[fGt]},$$scope:{ctx:x}}}),b$=new re({}),v$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),T$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Vw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[mGt]},$$scope:{ctx:x}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),zw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[gGt]},$$scope:{ctx:x}}}),E$=new re({}),C$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),A$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Qw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[hGt]},$$scope:{ctx:x}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Jw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[pGt]},$$scope:{ctx:x}}}),x$=new re({}),$$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),S$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Kw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[_Gt]},$$scope:{ctx:x}}}),R$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),eA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[uGt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ti=o("Auto Classes"),yf=l(),nt=a("p"),Mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ei=a("code"),FL=o("from_pretrained()"),xf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),Ci=o("Instantiating one of "),Sn=a("a"),TL=o("AutoConfig"),Rn=o(", "),Pn=a("a"),ML=o("AutoModel"),wi=o(`, and
`),Bn=a("a"),EL=o("AutoTokenizer"),Ai=o(" will directly create a class of the relevant architecture. For instance"),$f=l(),F(xa.$$.fragment),Qe=l(),Ae=a("p"),Jk=o("will create a model that is an instance of "),Li=a("a"),Yk=o("BertModel"),Kk=o("."),Co=l(),$a=a("p"),Zk=o("There is one class of "),kf=a("code"),eS=o("AutoModel"),Rze=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),bGe=l(),yi=a("h2"),Sf=a("a"),ete=a("span"),F(CL.$$.fragment),Pze=l(),ote=a("span"),Bze=o("Extending the Auto Classes"),vGe=l(),In=a("p"),Ize=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),rte=a("code"),Nze=o("NewModel"),qze=o(", make sure you have a "),tte=a("code"),jze=o("NewModelConfig"),Dze=o(` then you can add those to the auto
classes like this:`),FGe=l(),F(wL.$$.fragment),TGe=l(),oS=a("p"),Gze=o("You will then be able to use the auto classes like you would usually do!"),MGe=l(),F(Rf.$$.fragment),EGe=l(),xi=a("h2"),Pf=a("a"),ate=a("span"),F(AL.$$.fragment),Oze=l(),nte=a("span"),Vze=o("AutoConfig"),CGe=l(),wo=a("div"),F(LL.$$.fragment),Xze=l(),yL=a("p"),zze=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),rS=a("a"),Wze=o("from_pretrained()"),Qze=o(" class method."),Hze=l(),xL=a("p"),Uze=o("This class cannot be instantiated directly using "),ste=a("code"),Jze=o("__init__()"),Yze=o(" (throws an error)."),Kze=l(),wr=a("div"),F($L.$$.fragment),Zze=l(),lte=a("p"),eWe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),oWe=l(),$i=a("p"),rWe=o("The configuration class to instantiate is selected based on the "),ite=a("code"),tWe=o("model_type"),aWe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),dte=a("code"),nWe=o("pretrained_model_name_or_path"),sWe=o(":"),lWe=l(),A=a("ul"),Bf=a("li"),cte=a("strong"),iWe=o("albert"),dWe=o(" \u2014 "),tS=a("a"),cWe=o("AlbertConfig"),fWe=o(" (ALBERT model)"),mWe=l(),If=a("li"),fte=a("strong"),gWe=o("bart"),hWe=o(" \u2014 "),aS=a("a"),pWe=o("BartConfig"),_We=o(" (BART model)"),uWe=l(),Nf=a("li"),mte=a("strong"),bWe=o("beit"),vWe=o(" \u2014 "),nS=a("a"),FWe=o("BeitConfig"),TWe=o(" (BEiT model)"),MWe=l(),qf=a("li"),gte=a("strong"),EWe=o("bert"),CWe=o(" \u2014 "),sS=a("a"),wWe=o("BertConfig"),AWe=o(" (BERT model)"),LWe=l(),jf=a("li"),hte=a("strong"),yWe=o("bert-generation"),xWe=o(" \u2014 "),lS=a("a"),$We=o("BertGenerationConfig"),kWe=o(" (Bert Generation model)"),SWe=l(),Df=a("li"),pte=a("strong"),RWe=o("big_bird"),PWe=o(" \u2014 "),iS=a("a"),BWe=o("BigBirdConfig"),IWe=o(" (BigBird model)"),NWe=l(),Gf=a("li"),_te=a("strong"),qWe=o("bigbird_pegasus"),jWe=o(" \u2014 "),dS=a("a"),DWe=o("BigBirdPegasusConfig"),GWe=o(" (BigBird-Pegasus model)"),OWe=l(),Of=a("li"),ute=a("strong"),VWe=o("blenderbot"),XWe=o(" \u2014 "),cS=a("a"),zWe=o("BlenderbotConfig"),WWe=o(" (Blenderbot model)"),QWe=l(),Vf=a("li"),bte=a("strong"),HWe=o("blenderbot-small"),UWe=o(" \u2014 "),fS=a("a"),JWe=o("BlenderbotSmallConfig"),YWe=o(" (BlenderbotSmall model)"),KWe=l(),Xf=a("li"),vte=a("strong"),ZWe=o("bloom"),eQe=o(" \u2014 "),mS=a("a"),oQe=o("BloomConfig"),rQe=o(" (BLOOM model)"),tQe=l(),zf=a("li"),Fte=a("strong"),aQe=o("camembert"),nQe=o(" \u2014 "),gS=a("a"),sQe=o("CamembertConfig"),lQe=o(" (CamemBERT model)"),iQe=l(),Wf=a("li"),Tte=a("strong"),dQe=o("canine"),cQe=o(" \u2014 "),hS=a("a"),fQe=o("CanineConfig"),mQe=o(" (CANINE model)"),gQe=l(),Qf=a("li"),Mte=a("strong"),hQe=o("clip"),pQe=o(" \u2014 "),pS=a("a"),_Qe=o("CLIPConfig"),uQe=o(" (CLIP model)"),bQe=l(),Hf=a("li"),Ete=a("strong"),vQe=o("convbert"),FQe=o(" \u2014 "),_S=a("a"),TQe=o("ConvBertConfig"),MQe=o(" (ConvBERT model)"),EQe=l(),Uf=a("li"),Cte=a("strong"),CQe=o("convnext"),wQe=o(" \u2014 "),uS=a("a"),AQe=o("ConvNextConfig"),LQe=o(" (ConvNeXT model)"),yQe=l(),Jf=a("li"),wte=a("strong"),xQe=o("ctrl"),$Qe=o(" \u2014 "),bS=a("a"),kQe=o("CTRLConfig"),SQe=o(" (CTRL model)"),RQe=l(),Yf=a("li"),Ate=a("strong"),PQe=o("cvt"),BQe=o(" \u2014 "),vS=a("a"),IQe=o("CvtConfig"),NQe=o(" (CvT model)"),qQe=l(),Kf=a("li"),Lte=a("strong"),jQe=o("data2vec-audio"),DQe=o(" \u2014 "),FS=a("a"),GQe=o("Data2VecAudioConfig"),OQe=o(" (Data2VecAudio model)"),VQe=l(),Zf=a("li"),yte=a("strong"),XQe=o("data2vec-text"),zQe=o(" \u2014 "),TS=a("a"),WQe=o("Data2VecTextConfig"),QQe=o(" (Data2VecText model)"),HQe=l(),em=a("li"),xte=a("strong"),UQe=o("data2vec-vision"),JQe=o(" \u2014 "),MS=a("a"),YQe=o("Data2VecVisionConfig"),KQe=o(" (Data2VecVision model)"),ZQe=l(),om=a("li"),$te=a("strong"),eHe=o("deberta"),oHe=o(" \u2014 "),ES=a("a"),rHe=o("DebertaConfig"),tHe=o(" (DeBERTa model)"),aHe=l(),rm=a("li"),kte=a("strong"),nHe=o("deberta-v2"),sHe=o(" \u2014 "),CS=a("a"),lHe=o("DebertaV2Config"),iHe=o(" (DeBERTa-v2 model)"),dHe=l(),tm=a("li"),Ste=a("strong"),cHe=o("decision_transformer"),fHe=o(" \u2014 "),wS=a("a"),mHe=o("DecisionTransformerConfig"),gHe=o(" (Decision Transformer model)"),hHe=l(),am=a("li"),Rte=a("strong"),pHe=o("deit"),_He=o(" \u2014 "),AS=a("a"),uHe=o("DeiTConfig"),bHe=o(" (DeiT model)"),vHe=l(),nm=a("li"),Pte=a("strong"),FHe=o("detr"),THe=o(" \u2014 "),LS=a("a"),MHe=o("DetrConfig"),EHe=o(" (DETR model)"),CHe=l(),sm=a("li"),Bte=a("strong"),wHe=o("distilbert"),AHe=o(" \u2014 "),yS=a("a"),LHe=o("DistilBertConfig"),yHe=o(" (DistilBERT model)"),xHe=l(),lm=a("li"),Ite=a("strong"),$He=o("dpr"),kHe=o(" \u2014 "),xS=a("a"),SHe=o("DPRConfig"),RHe=o(" (DPR model)"),PHe=l(),im=a("li"),Nte=a("strong"),BHe=o("dpt"),IHe=o(" \u2014 "),$S=a("a"),NHe=o("DPTConfig"),qHe=o(" (DPT model)"),jHe=l(),dm=a("li"),qte=a("strong"),DHe=o("electra"),GHe=o(" \u2014 "),kS=a("a"),OHe=o("ElectraConfig"),VHe=o(" (ELECTRA model)"),XHe=l(),cm=a("li"),jte=a("strong"),zHe=o("encoder-decoder"),WHe=o(" \u2014 "),SS=a("a"),QHe=o("EncoderDecoderConfig"),HHe=o(" (Encoder decoder model)"),UHe=l(),fm=a("li"),Dte=a("strong"),JHe=o("flaubert"),YHe=o(" \u2014 "),RS=a("a"),KHe=o("FlaubertConfig"),ZHe=o(" (FlauBERT model)"),eUe=l(),mm=a("li"),Gte=a("strong"),oUe=o("flava"),rUe=o(" \u2014 "),PS=a("a"),tUe=o("FlavaConfig"),aUe=o(" (FLAVA model)"),nUe=l(),gm=a("li"),Ote=a("strong"),sUe=o("fnet"),lUe=o(" \u2014 "),BS=a("a"),iUe=o("FNetConfig"),dUe=o(" (FNet model)"),cUe=l(),hm=a("li"),Vte=a("strong"),fUe=o("fsmt"),mUe=o(" \u2014 "),IS=a("a"),gUe=o("FSMTConfig"),hUe=o(" (FairSeq Machine-Translation model)"),pUe=l(),pm=a("li"),Xte=a("strong"),_Ue=o("funnel"),uUe=o(" \u2014 "),NS=a("a"),bUe=o("FunnelConfig"),vUe=o(" (Funnel Transformer model)"),FUe=l(),_m=a("li"),zte=a("strong"),TUe=o("glpn"),MUe=o(" \u2014 "),qS=a("a"),EUe=o("GLPNConfig"),CUe=o(" (GLPN model)"),wUe=l(),um=a("li"),Wte=a("strong"),AUe=o("gpt2"),LUe=o(" \u2014 "),jS=a("a"),yUe=o("GPT2Config"),xUe=o(" (OpenAI GPT-2 model)"),$Ue=l(),bm=a("li"),Qte=a("strong"),kUe=o("gpt_neo"),SUe=o(" \u2014 "),DS=a("a"),RUe=o("GPTNeoConfig"),PUe=o(" (GPT Neo model)"),BUe=l(),vm=a("li"),Hte=a("strong"),IUe=o("gpt_neox"),NUe=o(" \u2014 "),GS=a("a"),qUe=o("GPTNeoXConfig"),jUe=o(" (GPT NeoX model)"),DUe=l(),Fm=a("li"),Ute=a("strong"),GUe=o("gptj"),OUe=o(" \u2014 "),OS=a("a"),VUe=o("GPTJConfig"),XUe=o(" (GPT-J model)"),zUe=l(),Tm=a("li"),Jte=a("strong"),WUe=o("hubert"),QUe=o(" \u2014 "),VS=a("a"),HUe=o("HubertConfig"),UUe=o(" (Hubert model)"),JUe=l(),Mm=a("li"),Yte=a("strong"),YUe=o("ibert"),KUe=o(" \u2014 "),XS=a("a"),ZUe=o("IBertConfig"),eJe=o(" (I-BERT model)"),oJe=l(),Em=a("li"),Kte=a("strong"),rJe=o("imagegpt"),tJe=o(" \u2014 "),zS=a("a"),aJe=o("ImageGPTConfig"),nJe=o(" (ImageGPT model)"),sJe=l(),Cm=a("li"),Zte=a("strong"),lJe=o("layoutlm"),iJe=o(" \u2014 "),WS=a("a"),dJe=o("LayoutLMConfig"),cJe=o(" (LayoutLM model)"),fJe=l(),wm=a("li"),eae=a("strong"),mJe=o("layoutlmv2"),gJe=o(" \u2014 "),QS=a("a"),hJe=o("LayoutLMv2Config"),pJe=o(" (LayoutLMv2 model)"),_Je=l(),Am=a("li"),oae=a("strong"),uJe=o("layoutlmv3"),bJe=o(" \u2014 "),HS=a("a"),vJe=o("LayoutLMv3Config"),FJe=o(" (LayoutLMv3 model)"),TJe=l(),Lm=a("li"),rae=a("strong"),MJe=o("led"),EJe=o(" \u2014 "),US=a("a"),CJe=o("LEDConfig"),wJe=o(" (LED model)"),AJe=l(),ym=a("li"),tae=a("strong"),LJe=o("levit"),yJe=o(" \u2014 "),JS=a("a"),xJe=o("LevitConfig"),$Je=o(" (LeViT model)"),kJe=l(),xm=a("li"),aae=a("strong"),SJe=o("longformer"),RJe=o(" \u2014 "),YS=a("a"),PJe=o("LongformerConfig"),BJe=o(" (Longformer model)"),IJe=l(),$m=a("li"),nae=a("strong"),NJe=o("longt5"),qJe=o(" \u2014 "),KS=a("a"),jJe=o("LongT5Config"),DJe=o(" (LongT5 model)"),GJe=l(),km=a("li"),sae=a("strong"),OJe=o("luke"),VJe=o(" \u2014 "),ZS=a("a"),XJe=o("LukeConfig"),zJe=o(" (LUKE model)"),WJe=l(),Sm=a("li"),lae=a("strong"),QJe=o("lxmert"),HJe=o(" \u2014 "),eR=a("a"),UJe=o("LxmertConfig"),JJe=o(" (LXMERT model)"),YJe=l(),Rm=a("li"),iae=a("strong"),KJe=o("m2m_100"),ZJe=o(" \u2014 "),oR=a("a"),eYe=o("M2M100Config"),oYe=o(" (M2M100 model)"),rYe=l(),Pm=a("li"),dae=a("strong"),tYe=o("marian"),aYe=o(" \u2014 "),rR=a("a"),nYe=o("MarianConfig"),sYe=o(" (Marian model)"),lYe=l(),Bm=a("li"),cae=a("strong"),iYe=o("maskformer"),dYe=o(" \u2014 "),tR=a("a"),cYe=o("MaskFormerConfig"),fYe=o(" (MaskFormer model)"),mYe=l(),Im=a("li"),fae=a("strong"),gYe=o("mbart"),hYe=o(" \u2014 "),aR=a("a"),pYe=o("MBartConfig"),_Ye=o(" (mBART model)"),uYe=l(),Nm=a("li"),mae=a("strong"),bYe=o("mctct"),vYe=o(" \u2014 "),nR=a("a"),FYe=o("MCTCTConfig"),TYe=o(" (M-CTC-T model)"),MYe=l(),qm=a("li"),gae=a("strong"),EYe=o("megatron-bert"),CYe=o(" \u2014 "),sR=a("a"),wYe=o("MegatronBertConfig"),AYe=o(" (Megatron-BERT model)"),LYe=l(),jm=a("li"),hae=a("strong"),yYe=o("mobilebert"),xYe=o(" \u2014 "),lR=a("a"),$Ye=o("MobileBertConfig"),kYe=o(" (MobileBERT model)"),SYe=l(),Dm=a("li"),pae=a("strong"),RYe=o("mobilevit"),PYe=o(" \u2014 "),iR=a("a"),BYe=o("MobileViTConfig"),IYe=o(" (MobileViT model)"),NYe=l(),Gm=a("li"),_ae=a("strong"),qYe=o("mpnet"),jYe=o(" \u2014 "),dR=a("a"),DYe=o("MPNetConfig"),GYe=o(" (MPNet model)"),OYe=l(),Om=a("li"),uae=a("strong"),VYe=o("mt5"),XYe=o(" \u2014 "),cR=a("a"),zYe=o("MT5Config"),WYe=o(" (MT5 model)"),QYe=l(),Vm=a("li"),bae=a("strong"),HYe=o("nystromformer"),UYe=o(" \u2014 "),fR=a("a"),JYe=o("NystromformerConfig"),YYe=o(" (Nystr\xF6mformer model)"),KYe=l(),Xm=a("li"),vae=a("strong"),ZYe=o("openai-gpt"),eKe=o(" \u2014 "),mR=a("a"),oKe=o("OpenAIGPTConfig"),rKe=o(" (OpenAI GPT model)"),tKe=l(),zm=a("li"),Fae=a("strong"),aKe=o("opt"),nKe=o(" \u2014 "),gR=a("a"),sKe=o("OPTConfig"),lKe=o(" (OPT model)"),iKe=l(),Wm=a("li"),Tae=a("strong"),dKe=o("pegasus"),cKe=o(" \u2014 "),hR=a("a"),fKe=o("PegasusConfig"),mKe=o(" (Pegasus model)"),gKe=l(),Qm=a("li"),Mae=a("strong"),hKe=o("perceiver"),pKe=o(" \u2014 "),pR=a("a"),_Ke=o("PerceiverConfig"),uKe=o(" (Perceiver model)"),bKe=l(),Hm=a("li"),Eae=a("strong"),vKe=o("plbart"),FKe=o(" \u2014 "),_R=a("a"),TKe=o("PLBartConfig"),MKe=o(" (PLBart model)"),EKe=l(),Um=a("li"),Cae=a("strong"),CKe=o("poolformer"),wKe=o(" \u2014 "),uR=a("a"),AKe=o("PoolFormerConfig"),LKe=o(" (PoolFormer model)"),yKe=l(),Jm=a("li"),wae=a("strong"),xKe=o("prophetnet"),$Ke=o(" \u2014 "),bR=a("a"),kKe=o("ProphetNetConfig"),SKe=o(" (ProphetNet model)"),RKe=l(),Ym=a("li"),Aae=a("strong"),PKe=o("qdqbert"),BKe=o(" \u2014 "),vR=a("a"),IKe=o("QDQBertConfig"),NKe=o(" (QDQBert model)"),qKe=l(),Km=a("li"),Lae=a("strong"),jKe=o("rag"),DKe=o(" \u2014 "),FR=a("a"),GKe=o("RagConfig"),OKe=o(" (RAG model)"),VKe=l(),Zm=a("li"),yae=a("strong"),XKe=o("realm"),zKe=o(" \u2014 "),TR=a("a"),WKe=o("RealmConfig"),QKe=o(" (REALM model)"),HKe=l(),eg=a("li"),xae=a("strong"),UKe=o("reformer"),JKe=o(" \u2014 "),MR=a("a"),YKe=o("ReformerConfig"),KKe=o(" (Reformer model)"),ZKe=l(),og=a("li"),$ae=a("strong"),eZe=o("regnet"),oZe=o(" \u2014 "),ER=a("a"),rZe=o("RegNetConfig"),tZe=o(" (RegNet model)"),aZe=l(),rg=a("li"),kae=a("strong"),nZe=o("rembert"),sZe=o(" \u2014 "),CR=a("a"),lZe=o("RemBertConfig"),iZe=o(" (RemBERT model)"),dZe=l(),tg=a("li"),Sae=a("strong"),cZe=o("resnet"),fZe=o(" \u2014 "),wR=a("a"),mZe=o("ResNetConfig"),gZe=o(" (ResNet model)"),hZe=l(),ag=a("li"),Rae=a("strong"),pZe=o("retribert"),_Ze=o(" \u2014 "),AR=a("a"),uZe=o("RetriBertConfig"),bZe=o(" (RetriBERT model)"),vZe=l(),ng=a("li"),Pae=a("strong"),FZe=o("roberta"),TZe=o(" \u2014 "),LR=a("a"),MZe=o("RobertaConfig"),EZe=o(" (RoBERTa model)"),CZe=l(),sg=a("li"),Bae=a("strong"),wZe=o("roformer"),AZe=o(" \u2014 "),yR=a("a"),LZe=o("RoFormerConfig"),yZe=o(" (RoFormer model)"),xZe=l(),lg=a("li"),Iae=a("strong"),$Ze=o("segformer"),kZe=o(" \u2014 "),xR=a("a"),SZe=o("SegformerConfig"),RZe=o(" (SegFormer model)"),PZe=l(),ig=a("li"),Nae=a("strong"),BZe=o("sew"),IZe=o(" \u2014 "),$R=a("a"),NZe=o("SEWConfig"),qZe=o(" (SEW model)"),jZe=l(),dg=a("li"),qae=a("strong"),DZe=o("sew-d"),GZe=o(" \u2014 "),kR=a("a"),OZe=o("SEWDConfig"),VZe=o(" (SEW-D model)"),XZe=l(),cg=a("li"),jae=a("strong"),zZe=o("speech-encoder-decoder"),WZe=o(" \u2014 "),SR=a("a"),QZe=o("SpeechEncoderDecoderConfig"),HZe=o(" (Speech Encoder decoder model)"),UZe=l(),fg=a("li"),Dae=a("strong"),JZe=o("speech_to_text"),YZe=o(" \u2014 "),RR=a("a"),KZe=o("Speech2TextConfig"),ZZe=o(" (Speech2Text model)"),eeo=l(),mg=a("li"),Gae=a("strong"),oeo=o("speech_to_text_2"),reo=o(" \u2014 "),PR=a("a"),teo=o("Speech2Text2Config"),aeo=o(" (Speech2Text2 model)"),neo=l(),gg=a("li"),Oae=a("strong"),seo=o("splinter"),leo=o(" \u2014 "),BR=a("a"),ieo=o("SplinterConfig"),deo=o(" (Splinter model)"),ceo=l(),hg=a("li"),Vae=a("strong"),feo=o("squeezebert"),meo=o(" \u2014 "),IR=a("a"),geo=o("SqueezeBertConfig"),heo=o(" (SqueezeBERT model)"),peo=l(),pg=a("li"),Xae=a("strong"),_eo=o("swin"),ueo=o(" \u2014 "),NR=a("a"),beo=o("SwinConfig"),veo=o(" (Swin Transformer model)"),Feo=l(),_g=a("li"),zae=a("strong"),Teo=o("t5"),Meo=o(" \u2014 "),qR=a("a"),Eeo=o("T5Config"),Ceo=o(" (T5 model)"),weo=l(),ug=a("li"),Wae=a("strong"),Aeo=o("tapas"),Leo=o(" \u2014 "),jR=a("a"),yeo=o("TapasConfig"),xeo=o(" (TAPAS model)"),$eo=l(),bg=a("li"),Qae=a("strong"),keo=o("trajectory_transformer"),Seo=o(" \u2014 "),DR=a("a"),Reo=o("TrajectoryTransformerConfig"),Peo=o(" (Trajectory Transformer model)"),Beo=l(),vg=a("li"),Hae=a("strong"),Ieo=o("transfo-xl"),Neo=o(" \u2014 "),GR=a("a"),qeo=o("TransfoXLConfig"),jeo=o(" (Transformer-XL model)"),Deo=l(),Fg=a("li"),Uae=a("strong"),Geo=o("trocr"),Oeo=o(" \u2014 "),OR=a("a"),Veo=o("TrOCRConfig"),Xeo=o(" (TrOCR model)"),zeo=l(),Tg=a("li"),Jae=a("strong"),Weo=o("unispeech"),Qeo=o(" \u2014 "),VR=a("a"),Heo=o("UniSpeechConfig"),Ueo=o(" (UniSpeech model)"),Jeo=l(),Mg=a("li"),Yae=a("strong"),Yeo=o("unispeech-sat"),Keo=o(" \u2014 "),XR=a("a"),Zeo=o("UniSpeechSatConfig"),eoo=o(" (UniSpeechSat model)"),ooo=l(),Eg=a("li"),Kae=a("strong"),roo=o("van"),too=o(" \u2014 "),zR=a("a"),aoo=o("VanConfig"),noo=o(" (VAN model)"),soo=l(),Cg=a("li"),Zae=a("strong"),loo=o("vilt"),ioo=o(" \u2014 "),WR=a("a"),doo=o("ViltConfig"),coo=o(" (ViLT model)"),foo=l(),wg=a("li"),ene=a("strong"),moo=o("vision-encoder-decoder"),goo=o(" \u2014 "),QR=a("a"),hoo=o("VisionEncoderDecoderConfig"),poo=o(" (Vision Encoder decoder model)"),_oo=l(),Ag=a("li"),one=a("strong"),uoo=o("vision-text-dual-encoder"),boo=o(" \u2014 "),HR=a("a"),voo=o("VisionTextDualEncoderConfig"),Foo=o(" (VisionTextDualEncoder model)"),Too=l(),Lg=a("li"),rne=a("strong"),Moo=o("visual_bert"),Eoo=o(" \u2014 "),UR=a("a"),Coo=o("VisualBertConfig"),woo=o(" (VisualBERT model)"),Aoo=l(),yg=a("li"),tne=a("strong"),Loo=o("vit"),yoo=o(" \u2014 "),JR=a("a"),xoo=o("ViTConfig"),$oo=o(" (ViT model)"),koo=l(),xg=a("li"),ane=a("strong"),Soo=o("vit_mae"),Roo=o(" \u2014 "),YR=a("a"),Poo=o("ViTMAEConfig"),Boo=o(" (ViTMAE model)"),Ioo=l(),$g=a("li"),nne=a("strong"),Noo=o("wav2vec2"),qoo=o(" \u2014 "),KR=a("a"),joo=o("Wav2Vec2Config"),Doo=o(" (Wav2Vec2 model)"),Goo=l(),kg=a("li"),sne=a("strong"),Ooo=o("wav2vec2-conformer"),Voo=o(" \u2014 "),ZR=a("a"),Xoo=o("Wav2Vec2ConformerConfig"),zoo=o(" (Wav2Vec2-Conformer model)"),Woo=l(),Sg=a("li"),lne=a("strong"),Qoo=o("wavlm"),Hoo=o(" \u2014 "),eP=a("a"),Uoo=o("WavLMConfig"),Joo=o(" (WavLM model)"),Yoo=l(),Rg=a("li"),ine=a("strong"),Koo=o("xglm"),Zoo=o(" \u2014 "),oP=a("a"),ero=o("XGLMConfig"),oro=o(" (XGLM model)"),rro=l(),Pg=a("li"),dne=a("strong"),tro=o("xlm"),aro=o(" \u2014 "),rP=a("a"),nro=o("XLMConfig"),sro=o(" (XLM model)"),lro=l(),Bg=a("li"),cne=a("strong"),iro=o("xlm-prophetnet"),dro=o(" \u2014 "),tP=a("a"),cro=o("XLMProphetNetConfig"),fro=o(" (XLM-ProphetNet model)"),mro=l(),Ig=a("li"),fne=a("strong"),gro=o("xlm-roberta"),hro=o(" \u2014 "),aP=a("a"),pro=o("XLMRobertaConfig"),_ro=o(" (XLM-RoBERTa model)"),uro=l(),Ng=a("li"),mne=a("strong"),bro=o("xlm-roberta-xl"),vro=o(" \u2014 "),nP=a("a"),Fro=o("XLMRobertaXLConfig"),Tro=o(" (XLM-RoBERTa-XL model)"),Mro=l(),qg=a("li"),gne=a("strong"),Ero=o("xlnet"),Cro=o(" \u2014 "),sP=a("a"),wro=o("XLNetConfig"),Aro=o(" (XLNet model)"),Lro=l(),jg=a("li"),hne=a("strong"),yro=o("yolos"),xro=o(" \u2014 "),lP=a("a"),$ro=o("YolosConfig"),kro=o(" (YOLOS model)"),Sro=l(),Dg=a("li"),pne=a("strong"),Rro=o("yoso"),Pro=o(" \u2014 "),iP=a("a"),Bro=o("YosoConfig"),Iro=o(" (YOSO model)"),Nro=l(),F(Gg.$$.fragment),qro=l(),Og=a("div"),F(kL.$$.fragment),jro=l(),_ne=a("p"),Dro=o("Register a new configuration for this class."),wGe=l(),ki=a("h2"),Vg=a("a"),une=a("span"),F(SL.$$.fragment),Gro=l(),bne=a("span"),Oro=o("AutoTokenizer"),AGe=l(),Ao=a("div"),F(RL.$$.fragment),Vro=l(),PL=a("p"),Xro=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),dP=a("a"),zro=o("AutoTokenizer.from_pretrained()"),Wro=o(" class method."),Qro=l(),BL=a("p"),Hro=o("This class cannot be instantiated directly using "),vne=a("code"),Uro=o("__init__()"),Jro=o(" (throws an error)."),Yro=l(),Ar=a("div"),F(IL.$$.fragment),Kro=l(),Fne=a("p"),Zro=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),eto=l(),ka=a("p"),oto=o("The tokenizer class to instantiate is selected based on the "),Tne=a("code"),rto=o("model_type"),tto=o(` property of the config object (either
passed as an argument or loaded from `),Mne=a("code"),ato=o("pretrained_model_name_or_path"),nto=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ene=a("code"),sto=o("pretrained_model_name_or_path"),lto=o(":"),ito=l(),k=a("ul"),Nn=a("li"),Cne=a("strong"),dto=o("albert"),cto=o(" \u2014 "),cP=a("a"),fto=o("AlbertTokenizer"),mto=o(" or "),fP=a("a"),gto=o("AlbertTokenizerFast"),hto=o(" (ALBERT model)"),pto=l(),qn=a("li"),wne=a("strong"),_to=o("bart"),uto=o(" \u2014 "),mP=a("a"),bto=o("BartTokenizer"),vto=o(" or "),gP=a("a"),Fto=o("BartTokenizerFast"),Tto=o(" (BART model)"),Mto=l(),jn=a("li"),Ane=a("strong"),Eto=o("barthez"),Cto=o(" \u2014 "),hP=a("a"),wto=o("BarthezTokenizer"),Ato=o(" or "),pP=a("a"),Lto=o("BarthezTokenizerFast"),yto=o(" (BARThez model)"),xto=l(),Xg=a("li"),Lne=a("strong"),$to=o("bartpho"),kto=o(" \u2014 "),_P=a("a"),Sto=o("BartphoTokenizer"),Rto=o(" (BARTpho model)"),Pto=l(),Dn=a("li"),yne=a("strong"),Bto=o("bert"),Ito=o(" \u2014 "),uP=a("a"),Nto=o("BertTokenizer"),qto=o(" or "),bP=a("a"),jto=o("BertTokenizerFast"),Dto=o(" (BERT model)"),Gto=l(),zg=a("li"),xne=a("strong"),Oto=o("bert-generation"),Vto=o(" \u2014 "),vP=a("a"),Xto=o("BertGenerationTokenizer"),zto=o(" (Bert Generation model)"),Wto=l(),Wg=a("li"),$ne=a("strong"),Qto=o("bert-japanese"),Hto=o(" \u2014 "),FP=a("a"),Uto=o("BertJapaneseTokenizer"),Jto=o(" (BertJapanese model)"),Yto=l(),Qg=a("li"),kne=a("strong"),Kto=o("bertweet"),Zto=o(" \u2014 "),TP=a("a"),eao=o("BertweetTokenizer"),oao=o(" (BERTweet model)"),rao=l(),Gn=a("li"),Sne=a("strong"),tao=o("big_bird"),aao=o(" \u2014 "),MP=a("a"),nao=o("BigBirdTokenizer"),sao=o(" or "),EP=a("a"),lao=o("BigBirdTokenizerFast"),iao=o(" (BigBird model)"),dao=l(),On=a("li"),Rne=a("strong"),cao=o("bigbird_pegasus"),fao=o(" \u2014 "),CP=a("a"),mao=o("PegasusTokenizer"),gao=o(" or "),wP=a("a"),hao=o("PegasusTokenizerFast"),pao=o(" (BigBird-Pegasus model)"),_ao=l(),Vn=a("li"),Pne=a("strong"),uao=o("blenderbot"),bao=o(" \u2014 "),AP=a("a"),vao=o("BlenderbotTokenizer"),Fao=o(" or "),LP=a("a"),Tao=o("BlenderbotTokenizerFast"),Mao=o(" (Blenderbot model)"),Eao=l(),Hg=a("li"),Bne=a("strong"),Cao=o("blenderbot-small"),wao=o(" \u2014 "),yP=a("a"),Aao=o("BlenderbotSmallTokenizer"),Lao=o(" (BlenderbotSmall model)"),yao=l(),Ug=a("li"),Ine=a("strong"),xao=o("bloom"),$ao=o(" \u2014 "),xP=a("a"),kao=o("BloomTokenizerFast"),Sao=o(" (BLOOM model)"),Rao=l(),Jg=a("li"),Nne=a("strong"),Pao=o("byt5"),Bao=o(" \u2014 "),$P=a("a"),Iao=o("ByT5Tokenizer"),Nao=o(" (ByT5 model)"),qao=l(),Xn=a("li"),qne=a("strong"),jao=o("camembert"),Dao=o(" \u2014 "),kP=a("a"),Gao=o("CamembertTokenizer"),Oao=o(" or "),SP=a("a"),Vao=o("CamembertTokenizerFast"),Xao=o(" (CamemBERT model)"),zao=l(),Yg=a("li"),jne=a("strong"),Wao=o("canine"),Qao=o(" \u2014 "),RP=a("a"),Hao=o("CanineTokenizer"),Uao=o(" (CANINE model)"),Jao=l(),zn=a("li"),Dne=a("strong"),Yao=o("clip"),Kao=o(" \u2014 "),PP=a("a"),Zao=o("CLIPTokenizer"),eno=o(" or "),BP=a("a"),ono=o("CLIPTokenizerFast"),rno=o(" (CLIP model)"),tno=l(),Wn=a("li"),Gne=a("strong"),ano=o("convbert"),nno=o(" \u2014 "),IP=a("a"),sno=o("ConvBertTokenizer"),lno=o(" or "),NP=a("a"),ino=o("ConvBertTokenizerFast"),dno=o(" (ConvBERT model)"),cno=l(),Qn=a("li"),One=a("strong"),fno=o("cpm"),mno=o(" \u2014 "),qP=a("a"),gno=o("CpmTokenizer"),hno=o(" or "),jP=a("a"),pno=o("CpmTokenizerFast"),_no=o(" (CPM model)"),uno=l(),Kg=a("li"),Vne=a("strong"),bno=o("ctrl"),vno=o(" \u2014 "),DP=a("a"),Fno=o("CTRLTokenizer"),Tno=o(" (CTRL model)"),Mno=l(),Hn=a("li"),Xne=a("strong"),Eno=o("data2vec-text"),Cno=o(" \u2014 "),GP=a("a"),wno=o("RobertaTokenizer"),Ano=o(" or "),OP=a("a"),Lno=o("RobertaTokenizerFast"),yno=o(" (Data2VecText model)"),xno=l(),Un=a("li"),zne=a("strong"),$no=o("deberta"),kno=o(" \u2014 "),VP=a("a"),Sno=o("DebertaTokenizer"),Rno=o(" or "),XP=a("a"),Pno=o("DebertaTokenizerFast"),Bno=o(" (DeBERTa model)"),Ino=l(),Jn=a("li"),Wne=a("strong"),Nno=o("deberta-v2"),qno=o(" \u2014 "),zP=a("a"),jno=o("DebertaV2Tokenizer"),Dno=o(" or "),WP=a("a"),Gno=o("DebertaV2TokenizerFast"),Ono=o(" (DeBERTa-v2 model)"),Vno=l(),Yn=a("li"),Qne=a("strong"),Xno=o("distilbert"),zno=o(" \u2014 "),QP=a("a"),Wno=o("DistilBertTokenizer"),Qno=o(" or "),HP=a("a"),Hno=o("DistilBertTokenizerFast"),Uno=o(" (DistilBERT model)"),Jno=l(),Kn=a("li"),Hne=a("strong"),Yno=o("dpr"),Kno=o(" \u2014 "),UP=a("a"),Zno=o("DPRQuestionEncoderTokenizer"),eso=o(" or "),JP=a("a"),oso=o("DPRQuestionEncoderTokenizerFast"),rso=o(" (DPR model)"),tso=l(),Zn=a("li"),Une=a("strong"),aso=o("electra"),nso=o(" \u2014 "),YP=a("a"),sso=o("ElectraTokenizer"),lso=o(" or "),KP=a("a"),iso=o("ElectraTokenizerFast"),dso=o(" (ELECTRA model)"),cso=l(),Zg=a("li"),Jne=a("strong"),fso=o("flaubert"),mso=o(" \u2014 "),ZP=a("a"),gso=o("FlaubertTokenizer"),hso=o(" (FlauBERT model)"),pso=l(),es=a("li"),Yne=a("strong"),_so=o("fnet"),uso=o(" \u2014 "),eB=a("a"),bso=o("FNetTokenizer"),vso=o(" or "),oB=a("a"),Fso=o("FNetTokenizerFast"),Tso=o(" (FNet model)"),Mso=l(),eh=a("li"),Kne=a("strong"),Eso=o("fsmt"),Cso=o(" \u2014 "),rB=a("a"),wso=o("FSMTTokenizer"),Aso=o(" (FairSeq Machine-Translation model)"),Lso=l(),os=a("li"),Zne=a("strong"),yso=o("funnel"),xso=o(" \u2014 "),tB=a("a"),$so=o("FunnelTokenizer"),kso=o(" or "),aB=a("a"),Sso=o("FunnelTokenizerFast"),Rso=o(" (Funnel Transformer model)"),Pso=l(),rs=a("li"),ese=a("strong"),Bso=o("gpt2"),Iso=o(" \u2014 "),nB=a("a"),Nso=o("GPT2Tokenizer"),qso=o(" or "),sB=a("a"),jso=o("GPT2TokenizerFast"),Dso=o(" (OpenAI GPT-2 model)"),Gso=l(),ts=a("li"),ose=a("strong"),Oso=o("gpt_neo"),Vso=o(" \u2014 "),lB=a("a"),Xso=o("GPT2Tokenizer"),zso=o(" or "),iB=a("a"),Wso=o("GPT2TokenizerFast"),Qso=o(" (GPT Neo model)"),Hso=l(),oh=a("li"),rse=a("strong"),Uso=o("gpt_neox"),Jso=o(" \u2014 "),dB=a("a"),Yso=o("GPTNeoXTokenizerFast"),Kso=o(" (GPT NeoX model)"),Zso=l(),as=a("li"),tse=a("strong"),elo=o("gptj"),olo=o(" \u2014 "),cB=a("a"),rlo=o("GPT2Tokenizer"),tlo=o(" or "),fB=a("a"),alo=o("GPT2TokenizerFast"),nlo=o(" (GPT-J model)"),slo=l(),ns=a("li"),ase=a("strong"),llo=o("herbert"),ilo=o(" \u2014 "),mB=a("a"),dlo=o("HerbertTokenizer"),clo=o(" or "),gB=a("a"),flo=o("HerbertTokenizerFast"),mlo=o(" (HerBERT model)"),glo=l(),rh=a("li"),nse=a("strong"),hlo=o("hubert"),plo=o(" \u2014 "),hB=a("a"),_lo=o("Wav2Vec2CTCTokenizer"),ulo=o(" (Hubert model)"),blo=l(),ss=a("li"),sse=a("strong"),vlo=o("ibert"),Flo=o(" \u2014 "),pB=a("a"),Tlo=o("RobertaTokenizer"),Mlo=o(" or "),_B=a("a"),Elo=o("RobertaTokenizerFast"),Clo=o(" (I-BERT model)"),wlo=l(),ls=a("li"),lse=a("strong"),Alo=o("layoutlm"),Llo=o(" \u2014 "),uB=a("a"),ylo=o("LayoutLMTokenizer"),xlo=o(" or "),bB=a("a"),$lo=o("LayoutLMTokenizerFast"),klo=o(" (LayoutLM model)"),Slo=l(),is=a("li"),ise=a("strong"),Rlo=o("layoutlmv2"),Plo=o(" \u2014 "),vB=a("a"),Blo=o("LayoutLMv2Tokenizer"),Ilo=o(" or "),FB=a("a"),Nlo=o("LayoutLMv2TokenizerFast"),qlo=o(" (LayoutLMv2 model)"),jlo=l(),ds=a("li"),dse=a("strong"),Dlo=o("layoutlmv3"),Glo=o(" \u2014 "),TB=a("a"),Olo=o("LayoutLMv3Tokenizer"),Vlo=o(" or "),MB=a("a"),Xlo=o("LayoutLMv3TokenizerFast"),zlo=o(" (LayoutLMv3 model)"),Wlo=l(),cs=a("li"),cse=a("strong"),Qlo=o("layoutxlm"),Hlo=o(" \u2014 "),EB=a("a"),Ulo=o("LayoutXLMTokenizer"),Jlo=o(" or "),CB=a("a"),Ylo=o("LayoutXLMTokenizerFast"),Klo=o(" (LayoutXLM model)"),Zlo=l(),fs=a("li"),fse=a("strong"),eio=o("led"),oio=o(" \u2014 "),wB=a("a"),rio=o("LEDTokenizer"),tio=o(" or "),AB=a("a"),aio=o("LEDTokenizerFast"),nio=o(" (LED model)"),sio=l(),ms=a("li"),mse=a("strong"),lio=o("longformer"),iio=o(" \u2014 "),LB=a("a"),dio=o("LongformerTokenizer"),cio=o(" or "),yB=a("a"),fio=o("LongformerTokenizerFast"),mio=o(" (Longformer model)"),gio=l(),gs=a("li"),gse=a("strong"),hio=o("longt5"),pio=o(" \u2014 "),xB=a("a"),_io=o("T5Tokenizer"),uio=o(" or "),$B=a("a"),bio=o("T5TokenizerFast"),vio=o(" (LongT5 model)"),Fio=l(),th=a("li"),hse=a("strong"),Tio=o("luke"),Mio=o(" \u2014 "),kB=a("a"),Eio=o("LukeTokenizer"),Cio=o(" (LUKE model)"),wio=l(),hs=a("li"),pse=a("strong"),Aio=o("lxmert"),Lio=o(" \u2014 "),SB=a("a"),yio=o("LxmertTokenizer"),xio=o(" or "),RB=a("a"),$io=o("LxmertTokenizerFast"),kio=o(" (LXMERT model)"),Sio=l(),ah=a("li"),_se=a("strong"),Rio=o("m2m_100"),Pio=o(" \u2014 "),PB=a("a"),Bio=o("M2M100Tokenizer"),Iio=o(" (M2M100 model)"),Nio=l(),nh=a("li"),use=a("strong"),qio=o("marian"),jio=o(" \u2014 "),BB=a("a"),Dio=o("MarianTokenizer"),Gio=o(" (Marian model)"),Oio=l(),ps=a("li"),bse=a("strong"),Vio=o("mbart"),Xio=o(" \u2014 "),IB=a("a"),zio=o("MBartTokenizer"),Wio=o(" or "),NB=a("a"),Qio=o("MBartTokenizerFast"),Hio=o(" (mBART model)"),Uio=l(),_s=a("li"),vse=a("strong"),Jio=o("mbart50"),Yio=o(" \u2014 "),qB=a("a"),Kio=o("MBart50Tokenizer"),Zio=o(" or "),jB=a("a"),edo=o("MBart50TokenizerFast"),odo=o(" (mBART-50 model)"),rdo=l(),us=a("li"),Fse=a("strong"),tdo=o("megatron-bert"),ado=o(" \u2014 "),DB=a("a"),ndo=o("BertTokenizer"),sdo=o(" or "),GB=a("a"),ldo=o("BertTokenizerFast"),ido=o(" (Megatron-BERT model)"),ddo=l(),sh=a("li"),Tse=a("strong"),cdo=o("mluke"),fdo=o(" \u2014 "),OB=a("a"),mdo=o("MLukeTokenizer"),gdo=o(" (mLUKE model)"),hdo=l(),bs=a("li"),Mse=a("strong"),pdo=o("mobilebert"),_do=o(" \u2014 "),VB=a("a"),udo=o("MobileBertTokenizer"),bdo=o(" or "),XB=a("a"),vdo=o("MobileBertTokenizerFast"),Fdo=o(" (MobileBERT model)"),Tdo=l(),vs=a("li"),Ese=a("strong"),Mdo=o("mpnet"),Edo=o(" \u2014 "),zB=a("a"),Cdo=o("MPNetTokenizer"),wdo=o(" or "),WB=a("a"),Ado=o("MPNetTokenizerFast"),Ldo=o(" (MPNet model)"),ydo=l(),Fs=a("li"),Cse=a("strong"),xdo=o("mt5"),$do=o(" \u2014 "),QB=a("a"),kdo=o("MT5Tokenizer"),Sdo=o(" or "),HB=a("a"),Rdo=o("MT5TokenizerFast"),Pdo=o(" (MT5 model)"),Bdo=l(),Ts=a("li"),wse=a("strong"),Ido=o("nystromformer"),Ndo=o(" \u2014 "),UB=a("a"),qdo=o("AlbertTokenizer"),jdo=o(" or "),JB=a("a"),Ddo=o("AlbertTokenizerFast"),Gdo=o(" (Nystr\xF6mformer model)"),Odo=l(),Ms=a("li"),Ase=a("strong"),Vdo=o("openai-gpt"),Xdo=o(" \u2014 "),YB=a("a"),zdo=o("OpenAIGPTTokenizer"),Wdo=o(" or "),KB=a("a"),Qdo=o("OpenAIGPTTokenizerFast"),Hdo=o(" (OpenAI GPT model)"),Udo=l(),lh=a("li"),Lse=a("strong"),Jdo=o("opt"),Ydo=o(" \u2014 "),ZB=a("a"),Kdo=o("GPT2Tokenizer"),Zdo=o(" (OPT model)"),eco=l(),Es=a("li"),yse=a("strong"),oco=o("pegasus"),rco=o(" \u2014 "),eI=a("a"),tco=o("PegasusTokenizer"),aco=o(" or "),oI=a("a"),nco=o("PegasusTokenizerFast"),sco=o(" (Pegasus model)"),lco=l(),ih=a("li"),xse=a("strong"),ico=o("perceiver"),dco=o(" \u2014 "),rI=a("a"),cco=o("PerceiverTokenizer"),fco=o(" (Perceiver model)"),mco=l(),dh=a("li"),$se=a("strong"),gco=o("phobert"),hco=o(" \u2014 "),tI=a("a"),pco=o("PhobertTokenizer"),_co=o(" (PhoBERT model)"),uco=l(),ch=a("li"),kse=a("strong"),bco=o("plbart"),vco=o(" \u2014 "),aI=a("a"),Fco=o("PLBartTokenizer"),Tco=o(" (PLBart model)"),Mco=l(),fh=a("li"),Sse=a("strong"),Eco=o("prophetnet"),Cco=o(" \u2014 "),nI=a("a"),wco=o("ProphetNetTokenizer"),Aco=o(" (ProphetNet model)"),Lco=l(),Cs=a("li"),Rse=a("strong"),yco=o("qdqbert"),xco=o(" \u2014 "),sI=a("a"),$co=o("BertTokenizer"),kco=o(" or "),lI=a("a"),Sco=o("BertTokenizerFast"),Rco=o(" (QDQBert model)"),Pco=l(),mh=a("li"),Pse=a("strong"),Bco=o("rag"),Ico=o(" \u2014 "),iI=a("a"),Nco=o("RagTokenizer"),qco=o(" (RAG model)"),jco=l(),ws=a("li"),Bse=a("strong"),Dco=o("realm"),Gco=o(" \u2014 "),dI=a("a"),Oco=o("RealmTokenizer"),Vco=o(" or "),cI=a("a"),Xco=o("RealmTokenizerFast"),zco=o(" (REALM model)"),Wco=l(),As=a("li"),Ise=a("strong"),Qco=o("reformer"),Hco=o(" \u2014 "),fI=a("a"),Uco=o("ReformerTokenizer"),Jco=o(" or "),mI=a("a"),Yco=o("ReformerTokenizerFast"),Kco=o(" (Reformer model)"),Zco=l(),Ls=a("li"),Nse=a("strong"),efo=o("rembert"),ofo=o(" \u2014 "),gI=a("a"),rfo=o("RemBertTokenizer"),tfo=o(" or "),hI=a("a"),afo=o("RemBertTokenizerFast"),nfo=o(" (RemBERT model)"),sfo=l(),ys=a("li"),qse=a("strong"),lfo=o("retribert"),ifo=o(" \u2014 "),pI=a("a"),dfo=o("RetriBertTokenizer"),cfo=o(" or "),_I=a("a"),ffo=o("RetriBertTokenizerFast"),mfo=o(" (RetriBERT model)"),gfo=l(),xs=a("li"),jse=a("strong"),hfo=o("roberta"),pfo=o(" \u2014 "),uI=a("a"),_fo=o("RobertaTokenizer"),ufo=o(" or "),bI=a("a"),bfo=o("RobertaTokenizerFast"),vfo=o(" (RoBERTa model)"),Ffo=l(),$s=a("li"),Dse=a("strong"),Tfo=o("roformer"),Mfo=o(" \u2014 "),vI=a("a"),Efo=o("RoFormerTokenizer"),Cfo=o(" or "),FI=a("a"),wfo=o("RoFormerTokenizerFast"),Afo=o(" (RoFormer model)"),Lfo=l(),gh=a("li"),Gse=a("strong"),yfo=o("speech_to_text"),xfo=o(" \u2014 "),TI=a("a"),$fo=o("Speech2TextTokenizer"),kfo=o(" (Speech2Text model)"),Sfo=l(),hh=a("li"),Ose=a("strong"),Rfo=o("speech_to_text_2"),Pfo=o(" \u2014 "),MI=a("a"),Bfo=o("Speech2Text2Tokenizer"),Ifo=o(" (Speech2Text2 model)"),Nfo=l(),ks=a("li"),Vse=a("strong"),qfo=o("splinter"),jfo=o(" \u2014 "),EI=a("a"),Dfo=o("SplinterTokenizer"),Gfo=o(" or "),CI=a("a"),Ofo=o("SplinterTokenizerFast"),Vfo=o(" (Splinter model)"),Xfo=l(),Ss=a("li"),Xse=a("strong"),zfo=o("squeezebert"),Wfo=o(" \u2014 "),wI=a("a"),Qfo=o("SqueezeBertTokenizer"),Hfo=o(" or "),AI=a("a"),Ufo=o("SqueezeBertTokenizerFast"),Jfo=o(" (SqueezeBERT model)"),Yfo=l(),Rs=a("li"),zse=a("strong"),Kfo=o("t5"),Zfo=o(" \u2014 "),LI=a("a"),emo=o("T5Tokenizer"),omo=o(" or "),yI=a("a"),rmo=o("T5TokenizerFast"),tmo=o(" (T5 model)"),amo=l(),ph=a("li"),Wse=a("strong"),nmo=o("tapas"),smo=o(" \u2014 "),xI=a("a"),lmo=o("TapasTokenizer"),imo=o(" (TAPAS model)"),dmo=l(),_h=a("li"),Qse=a("strong"),cmo=o("tapex"),fmo=o(" \u2014 "),$I=a("a"),mmo=o("TapexTokenizer"),gmo=o(" (TAPEX model)"),hmo=l(),uh=a("li"),Hse=a("strong"),pmo=o("transfo-xl"),_mo=o(" \u2014 "),kI=a("a"),umo=o("TransfoXLTokenizer"),bmo=o(" (Transformer-XL model)"),vmo=l(),Ps=a("li"),Use=a("strong"),Fmo=o("vilt"),Tmo=o(" \u2014 "),SI=a("a"),Mmo=o("BertTokenizer"),Emo=o(" or "),RI=a("a"),Cmo=o("BertTokenizerFast"),wmo=o(" (ViLT model)"),Amo=l(),Bs=a("li"),Jse=a("strong"),Lmo=o("visual_bert"),ymo=o(" \u2014 "),PI=a("a"),xmo=o("BertTokenizer"),$mo=o(" or "),BI=a("a"),kmo=o("BertTokenizerFast"),Smo=o(" (VisualBERT model)"),Rmo=l(),bh=a("li"),Yse=a("strong"),Pmo=o("wav2vec2"),Bmo=o(" \u2014 "),II=a("a"),Imo=o("Wav2Vec2CTCTokenizer"),Nmo=o(" (Wav2Vec2 model)"),qmo=l(),vh=a("li"),Kse=a("strong"),jmo=o("wav2vec2-conformer"),Dmo=o(" \u2014 "),NI=a("a"),Gmo=o("Wav2Vec2CTCTokenizer"),Omo=o(" (Wav2Vec2-Conformer model)"),Vmo=l(),Fh=a("li"),Zse=a("strong"),Xmo=o("wav2vec2_phoneme"),zmo=o(" \u2014 "),qI=a("a"),Wmo=o("Wav2Vec2PhonemeCTCTokenizer"),Qmo=o(" (Wav2Vec2Phoneme model)"),Hmo=l(),Is=a("li"),ele=a("strong"),Umo=o("xglm"),Jmo=o(" \u2014 "),jI=a("a"),Ymo=o("XGLMTokenizer"),Kmo=o(" or "),DI=a("a"),Zmo=o("XGLMTokenizerFast"),ego=o(" (XGLM model)"),ogo=l(),Th=a("li"),ole=a("strong"),rgo=o("xlm"),tgo=o(" \u2014 "),GI=a("a"),ago=o("XLMTokenizer"),ngo=o(" (XLM model)"),sgo=l(),Mh=a("li"),rle=a("strong"),lgo=o("xlm-prophetnet"),igo=o(" \u2014 "),OI=a("a"),dgo=o("XLMProphetNetTokenizer"),cgo=o(" (XLM-ProphetNet model)"),fgo=l(),Ns=a("li"),tle=a("strong"),mgo=o("xlm-roberta"),ggo=o(" \u2014 "),VI=a("a"),hgo=o("XLMRobertaTokenizer"),pgo=o(" or "),XI=a("a"),_go=o("XLMRobertaTokenizerFast"),ugo=o(" (XLM-RoBERTa model)"),bgo=l(),qs=a("li"),ale=a("strong"),vgo=o("xlm-roberta-xl"),Fgo=o(" \u2014 "),zI=a("a"),Tgo=o("RobertaTokenizer"),Mgo=o(" or "),WI=a("a"),Ego=o("RobertaTokenizerFast"),Cgo=o(" (XLM-RoBERTa-XL model)"),wgo=l(),js=a("li"),nle=a("strong"),Ago=o("xlnet"),Lgo=o(" \u2014 "),QI=a("a"),ygo=o("XLNetTokenizer"),xgo=o(" or "),HI=a("a"),$go=o("XLNetTokenizerFast"),kgo=o(" (XLNet model)"),Sgo=l(),Ds=a("li"),sle=a("strong"),Rgo=o("yoso"),Pgo=o(" \u2014 "),UI=a("a"),Bgo=o("AlbertTokenizer"),Igo=o(" or "),JI=a("a"),Ngo=o("AlbertTokenizerFast"),qgo=o(" (YOSO model)"),jgo=l(),F(Eh.$$.fragment),Dgo=l(),Ch=a("div"),F(NL.$$.fragment),Ggo=l(),lle=a("p"),Ogo=o("Register a new tokenizer in this mapping."),LGe=l(),Si=a("h2"),wh=a("a"),ile=a("span"),F(qL.$$.fragment),Vgo=l(),dle=a("span"),Xgo=o("AutoFeatureExtractor"),yGe=l(),Lo=a("div"),F(jL.$$.fragment),zgo=l(),DL=a("p"),Wgo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),YI=a("a"),Qgo=o("AutoFeatureExtractor.from_pretrained()"),Hgo=o(" class method."),Ugo=l(),GL=a("p"),Jgo=o("This class cannot be instantiated directly using "),cle=a("code"),Ygo=o("__init__()"),Kgo=o(" (throws an error)."),Zgo=l(),He=a("div"),F(OL.$$.fragment),eho=l(),fle=a("p"),oho=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),rho=l(),Sa=a("p"),tho=o("The feature extractor class to instantiate is selected based on the "),mle=a("code"),aho=o("model_type"),nho=o(` property of the config object
(either passed as an argument or loaded from `),gle=a("code"),sho=o("pretrained_model_name_or_path"),lho=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),hle=a("code"),iho=o("pretrained_model_name_or_path"),dho=o(":"),cho=l(),Y=a("ul"),Ah=a("li"),ple=a("strong"),fho=o("beit"),mho=o(" \u2014 "),KI=a("a"),gho=o("BeitFeatureExtractor"),hho=o(" (BEiT model)"),pho=l(),Lh=a("li"),_le=a("strong"),_ho=o("clip"),uho=o(" \u2014 "),ZI=a("a"),bho=o("CLIPFeatureExtractor"),vho=o(" (CLIP model)"),Fho=l(),yh=a("li"),ule=a("strong"),Tho=o("convnext"),Mho=o(" \u2014 "),eN=a("a"),Eho=o("ConvNextFeatureExtractor"),Cho=o(" (ConvNeXT model)"),who=l(),xh=a("li"),ble=a("strong"),Aho=o("cvt"),Lho=o(" \u2014 "),oN=a("a"),yho=o("ConvNextFeatureExtractor"),xho=o(" (CvT model)"),$ho=l(),$h=a("li"),vle=a("strong"),kho=o("data2vec-audio"),Sho=o(" \u2014 "),rN=a("a"),Rho=o("Wav2Vec2FeatureExtractor"),Pho=o(" (Data2VecAudio model)"),Bho=l(),kh=a("li"),Fle=a("strong"),Iho=o("data2vec-vision"),Nho=o(" \u2014 "),tN=a("a"),qho=o("BeitFeatureExtractor"),jho=o(" (Data2VecVision model)"),Dho=l(),Sh=a("li"),Tle=a("strong"),Gho=o("deit"),Oho=o(" \u2014 "),aN=a("a"),Vho=o("DeiTFeatureExtractor"),Xho=o(" (DeiT model)"),zho=l(),Rh=a("li"),Mle=a("strong"),Who=o("detr"),Qho=o(" \u2014 "),nN=a("a"),Hho=o("DetrFeatureExtractor"),Uho=o(" (DETR model)"),Jho=l(),Ph=a("li"),Ele=a("strong"),Yho=o("dpt"),Kho=o(" \u2014 "),sN=a("a"),Zho=o("DPTFeatureExtractor"),epo=o(" (DPT model)"),opo=l(),Bh=a("li"),Cle=a("strong"),rpo=o("flava"),tpo=o(" \u2014 "),lN=a("a"),apo=o("FlavaFeatureExtractor"),npo=o(" (FLAVA model)"),spo=l(),Ih=a("li"),wle=a("strong"),lpo=o("glpn"),ipo=o(" \u2014 "),iN=a("a"),dpo=o("GLPNFeatureExtractor"),cpo=o(" (GLPN model)"),fpo=l(),Nh=a("li"),Ale=a("strong"),mpo=o("hubert"),gpo=o(" \u2014 "),dN=a("a"),hpo=o("Wav2Vec2FeatureExtractor"),ppo=o(" (Hubert model)"),_po=l(),qh=a("li"),Lle=a("strong"),upo=o("imagegpt"),bpo=o(" \u2014 "),cN=a("a"),vpo=o("ImageGPTFeatureExtractor"),Fpo=o(" (ImageGPT model)"),Tpo=l(),jh=a("li"),yle=a("strong"),Mpo=o("layoutlmv2"),Epo=o(" \u2014 "),fN=a("a"),Cpo=o("LayoutLMv2FeatureExtractor"),wpo=o(" (LayoutLMv2 model)"),Apo=l(),Dh=a("li"),xle=a("strong"),Lpo=o("layoutlmv3"),ypo=o(" \u2014 "),mN=a("a"),xpo=o("LayoutLMv3FeatureExtractor"),$po=o(" (LayoutLMv3 model)"),kpo=l(),Gh=a("li"),$le=a("strong"),Spo=o("levit"),Rpo=o(" \u2014 "),gN=a("a"),Ppo=o("LevitFeatureExtractor"),Bpo=o(" (LeViT model)"),Ipo=l(),Oh=a("li"),kle=a("strong"),Npo=o("maskformer"),qpo=o(" \u2014 "),hN=a("a"),jpo=o("MaskFormerFeatureExtractor"),Dpo=o(" (MaskFormer model)"),Gpo=l(),Vh=a("li"),Sle=a("strong"),Opo=o("mctct"),Vpo=o(" \u2014 "),pN=a("a"),Xpo=o("MCTCTFeatureExtractor"),zpo=o(" (M-CTC-T model)"),Wpo=l(),Xh=a("li"),Rle=a("strong"),Qpo=o("mobilevit"),Hpo=o(" \u2014 "),_N=a("a"),Upo=o("MobileViTFeatureExtractor"),Jpo=o(" (MobileViT model)"),Ypo=l(),zh=a("li"),Ple=a("strong"),Kpo=o("perceiver"),Zpo=o(" \u2014 "),uN=a("a"),e_o=o("PerceiverFeatureExtractor"),o_o=o(" (Perceiver model)"),r_o=l(),Wh=a("li"),Ble=a("strong"),t_o=o("poolformer"),a_o=o(" \u2014 "),bN=a("a"),n_o=o("PoolFormerFeatureExtractor"),s_o=o(" (PoolFormer model)"),l_o=l(),Qh=a("li"),Ile=a("strong"),i_o=o("regnet"),d_o=o(" \u2014 "),vN=a("a"),c_o=o("ConvNextFeatureExtractor"),f_o=o(" (RegNet model)"),m_o=l(),Hh=a("li"),Nle=a("strong"),g_o=o("resnet"),h_o=o(" \u2014 "),FN=a("a"),p_o=o("ConvNextFeatureExtractor"),__o=o(" (ResNet model)"),u_o=l(),Uh=a("li"),qle=a("strong"),b_o=o("segformer"),v_o=o(" \u2014 "),TN=a("a"),F_o=o("SegformerFeatureExtractor"),T_o=o(" (SegFormer model)"),M_o=l(),Jh=a("li"),jle=a("strong"),E_o=o("speech_to_text"),C_o=o(" \u2014 "),MN=a("a"),w_o=o("Speech2TextFeatureExtractor"),A_o=o(" (Speech2Text model)"),L_o=l(),Yh=a("li"),Dle=a("strong"),y_o=o("swin"),x_o=o(" \u2014 "),EN=a("a"),$_o=o("ViTFeatureExtractor"),k_o=o(" (Swin Transformer model)"),S_o=l(),Kh=a("li"),Gle=a("strong"),R_o=o("van"),P_o=o(" \u2014 "),CN=a("a"),B_o=o("ConvNextFeatureExtractor"),I_o=o(" (VAN model)"),N_o=l(),Zh=a("li"),Ole=a("strong"),q_o=o("vilt"),j_o=o(" \u2014 "),wN=a("a"),D_o=o("ViltFeatureExtractor"),G_o=o(" (ViLT model)"),O_o=l(),ep=a("li"),Vle=a("strong"),V_o=o("vit"),X_o=o(" \u2014 "),AN=a("a"),z_o=o("ViTFeatureExtractor"),W_o=o(" (ViT model)"),Q_o=l(),op=a("li"),Xle=a("strong"),H_o=o("vit_mae"),U_o=o(" \u2014 "),LN=a("a"),J_o=o("ViTFeatureExtractor"),Y_o=o(" (ViTMAE model)"),K_o=l(),rp=a("li"),zle=a("strong"),Z_o=o("wav2vec2"),euo=o(" \u2014 "),yN=a("a"),ouo=o("Wav2Vec2FeatureExtractor"),ruo=o(" (Wav2Vec2 model)"),tuo=l(),tp=a("li"),Wle=a("strong"),auo=o("wav2vec2-conformer"),nuo=o(" \u2014 "),xN=a("a"),suo=o("Wav2Vec2FeatureExtractor"),luo=o(" (Wav2Vec2-Conformer model)"),iuo=l(),ap=a("li"),Qle=a("strong"),duo=o("yolos"),cuo=o(" \u2014 "),$N=a("a"),fuo=o("YolosFeatureExtractor"),muo=o(" (YOLOS model)"),guo=l(),F(np.$$.fragment),huo=l(),F(sp.$$.fragment),puo=l(),lp=a("div"),F(VL.$$.fragment),_uo=l(),Hle=a("p"),uuo=o("Register a new feature extractor for this class."),xGe=l(),Ri=a("h2"),ip=a("a"),Ule=a("span"),F(XL.$$.fragment),buo=l(),Jle=a("span"),vuo=o("AutoProcessor"),$Ge=l(),yo=a("div"),F(zL.$$.fragment),Fuo=l(),WL=a("p"),Tuo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),kN=a("a"),Muo=o("AutoProcessor.from_pretrained()"),Euo=o(" class method."),Cuo=l(),QL=a("p"),wuo=o("This class cannot be instantiated directly using "),Yle=a("code"),Auo=o("__init__()"),Luo=o(" (throws an error)."),yuo=l(),Ue=a("div"),F(HL.$$.fragment),xuo=l(),Kle=a("p"),$uo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),kuo=l(),Pi=a("p"),Suo=o("The processor class to instantiate is selected based on the "),Zle=a("code"),Ruo=o("model_type"),Puo=o(` property of the config object (either
passed as an argument or loaded from `),eie=a("code"),Buo=o("pretrained_model_name_or_path"),Iuo=o(" if possible):"),Nuo=l(),he=a("ul"),dp=a("li"),oie=a("strong"),quo=o("clip"),juo=o(" \u2014 "),SN=a("a"),Duo=o("CLIPProcessor"),Guo=o(" (CLIP model)"),Ouo=l(),cp=a("li"),rie=a("strong"),Vuo=o("flava"),Xuo=o(" \u2014 "),tie=a("code"),zuo=o("FLAVAProcessor"),Wuo=o(" (FLAVA model)"),Quo=l(),fp=a("li"),aie=a("strong"),Huo=o("layoutlmv2"),Uuo=o(" \u2014 "),RN=a("a"),Juo=o("LayoutLMv2Processor"),Yuo=o(" (LayoutLMv2 model)"),Kuo=l(),mp=a("li"),nie=a("strong"),Zuo=o("layoutlmv3"),e1o=o(" \u2014 "),PN=a("a"),o1o=o("LayoutLMv3Processor"),r1o=o(" (LayoutLMv3 model)"),t1o=l(),gp=a("li"),sie=a("strong"),a1o=o("layoutxlm"),n1o=o(" \u2014 "),BN=a("a"),s1o=o("LayoutXLMProcessor"),l1o=o(" (LayoutXLM model)"),i1o=l(),hp=a("li"),lie=a("strong"),d1o=o("sew"),c1o=o(" \u2014 "),IN=a("a"),f1o=o("Wav2Vec2Processor"),m1o=o(" (SEW model)"),g1o=l(),pp=a("li"),iie=a("strong"),h1o=o("sew-d"),p1o=o(" \u2014 "),NN=a("a"),_1o=o("Wav2Vec2Processor"),u1o=o(" (SEW-D model)"),b1o=l(),_p=a("li"),die=a("strong"),v1o=o("speech_to_text"),F1o=o(" \u2014 "),qN=a("a"),T1o=o("Speech2TextProcessor"),M1o=o(" (Speech2Text model)"),E1o=l(),up=a("li"),cie=a("strong"),C1o=o("speech_to_text_2"),w1o=o(" \u2014 "),jN=a("a"),A1o=o("Speech2Text2Processor"),L1o=o(" (Speech2Text2 model)"),y1o=l(),bp=a("li"),fie=a("strong"),x1o=o("trocr"),$1o=o(" \u2014 "),DN=a("a"),k1o=o("TrOCRProcessor"),S1o=o(" (TrOCR model)"),R1o=l(),vp=a("li"),mie=a("strong"),P1o=o("unispeech"),B1o=o(" \u2014 "),GN=a("a"),I1o=o("Wav2Vec2Processor"),N1o=o(" (UniSpeech model)"),q1o=l(),Fp=a("li"),gie=a("strong"),j1o=o("unispeech-sat"),D1o=o(" \u2014 "),ON=a("a"),G1o=o("Wav2Vec2Processor"),O1o=o(" (UniSpeechSat model)"),V1o=l(),Tp=a("li"),hie=a("strong"),X1o=o("vilt"),z1o=o(" \u2014 "),VN=a("a"),W1o=o("ViltProcessor"),Q1o=o(" (ViLT model)"),H1o=l(),Mp=a("li"),pie=a("strong"),U1o=o("vision-text-dual-encoder"),J1o=o(" \u2014 "),XN=a("a"),Y1o=o("VisionTextDualEncoderProcessor"),K1o=o(" (VisionTextDualEncoder model)"),Z1o=l(),Ep=a("li"),_ie=a("strong"),ebo=o("wav2vec2"),obo=o(" \u2014 "),zN=a("a"),rbo=o("Wav2Vec2Processor"),tbo=o(" (Wav2Vec2 model)"),abo=l(),Cp=a("li"),uie=a("strong"),nbo=o("wav2vec2-conformer"),sbo=o(" \u2014 "),WN=a("a"),lbo=o("Wav2Vec2Processor"),ibo=o(" (Wav2Vec2-Conformer model)"),dbo=l(),wp=a("li"),bie=a("strong"),cbo=o("wavlm"),fbo=o(" \u2014 "),QN=a("a"),mbo=o("Wav2Vec2Processor"),gbo=o(" (WavLM model)"),hbo=l(),F(Ap.$$.fragment),pbo=l(),F(Lp.$$.fragment),_bo=l(),yp=a("div"),F(UL.$$.fragment),ubo=l(),vie=a("p"),bbo=o("Register a new processor for this class."),kGe=l(),Bi=a("h2"),xp=a("a"),Fie=a("span"),F(JL.$$.fragment),vbo=l(),Tie=a("span"),Fbo=o("AutoModel"),SGe=l(),xo=a("div"),F(YL.$$.fragment),Tbo=l(),Ii=a("p"),Mbo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HN=a("a"),Ebo=o("from_pretrained()"),Cbo=o(" class method or the "),UN=a("a"),wbo=o("from_config()"),Abo=o(` class
method.`),Lbo=l(),KL=a("p"),ybo=o("This class cannot be instantiated directly using "),Mie=a("code"),xbo=o("__init__()"),$bo=o(" (throws an error)."),kbo=l(),st=a("div"),F(ZL.$$.fragment),Sbo=l(),Eie=a("p"),Rbo=o("Instantiates one of the base model classes of the library from a configuration."),Pbo=l(),Ni=a("p"),Bbo=o(`Note:
Loading a model from its configuration file does `),Cie=a("strong"),Ibo=o("not"),Nbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JN=a("a"),qbo=o("from_pretrained()"),jbo=o(" to load the model weights."),Dbo=l(),F($p.$$.fragment),Gbo=l(),Je=a("div"),F(ey.$$.fragment),Obo=l(),wie=a("p"),Vbo=o("Instantiate one of the base model classes of the library from a pretrained model."),Xbo=l(),Ra=a("p"),zbo=o("The model class to instantiate is selected based on the "),Aie=a("code"),Wbo=o("model_type"),Qbo=o(` property of the config object (either
passed as an argument or loaded from `),Lie=a("code"),Hbo=o("pretrained_model_name_or_path"),Ubo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=a("code"),Jbo=o("pretrained_model_name_or_path"),Ybo=o(":"),Kbo=l(),y=a("ul"),kp=a("li"),xie=a("strong"),Zbo=o("albert"),e2o=o(" \u2014 "),YN=a("a"),o2o=o("AlbertModel"),r2o=o(" (ALBERT model)"),t2o=l(),Sp=a("li"),$ie=a("strong"),a2o=o("bart"),n2o=o(" \u2014 "),KN=a("a"),s2o=o("BartModel"),l2o=o(" (BART model)"),i2o=l(),Rp=a("li"),kie=a("strong"),d2o=o("beit"),c2o=o(" \u2014 "),ZN=a("a"),f2o=o("BeitModel"),m2o=o(" (BEiT model)"),g2o=l(),Pp=a("li"),Sie=a("strong"),h2o=o("bert"),p2o=o(" \u2014 "),eq=a("a"),_2o=o("BertModel"),u2o=o(" (BERT model)"),b2o=l(),Bp=a("li"),Rie=a("strong"),v2o=o("bert-generation"),F2o=o(" \u2014 "),oq=a("a"),T2o=o("BertGenerationEncoder"),M2o=o(" (Bert Generation model)"),E2o=l(),Ip=a("li"),Pie=a("strong"),C2o=o("big_bird"),w2o=o(" \u2014 "),rq=a("a"),A2o=o("BigBirdModel"),L2o=o(" (BigBird model)"),y2o=l(),Np=a("li"),Bie=a("strong"),x2o=o("bigbird_pegasus"),$2o=o(" \u2014 "),tq=a("a"),k2o=o("BigBirdPegasusModel"),S2o=o(" (BigBird-Pegasus model)"),R2o=l(),qp=a("li"),Iie=a("strong"),P2o=o("blenderbot"),B2o=o(" \u2014 "),aq=a("a"),I2o=o("BlenderbotModel"),N2o=o(" (Blenderbot model)"),q2o=l(),jp=a("li"),Nie=a("strong"),j2o=o("blenderbot-small"),D2o=o(" \u2014 "),nq=a("a"),G2o=o("BlenderbotSmallModel"),O2o=o(" (BlenderbotSmall model)"),V2o=l(),Dp=a("li"),qie=a("strong"),X2o=o("bloom"),z2o=o(" \u2014 "),sq=a("a"),W2o=o("BloomModel"),Q2o=o(" (BLOOM model)"),H2o=l(),Gp=a("li"),jie=a("strong"),U2o=o("camembert"),J2o=o(" \u2014 "),lq=a("a"),Y2o=o("CamembertModel"),K2o=o(" (CamemBERT model)"),Z2o=l(),Op=a("li"),Die=a("strong"),e4o=o("canine"),o4o=o(" \u2014 "),iq=a("a"),r4o=o("CanineModel"),t4o=o(" (CANINE model)"),a4o=l(),Vp=a("li"),Gie=a("strong"),n4o=o("clip"),s4o=o(" \u2014 "),dq=a("a"),l4o=o("CLIPModel"),i4o=o(" (CLIP model)"),d4o=l(),Xp=a("li"),Oie=a("strong"),c4o=o("convbert"),f4o=o(" \u2014 "),cq=a("a"),m4o=o("ConvBertModel"),g4o=o(" (ConvBERT model)"),h4o=l(),zp=a("li"),Vie=a("strong"),p4o=o("convnext"),_4o=o(" \u2014 "),fq=a("a"),u4o=o("ConvNextModel"),b4o=o(" (ConvNeXT model)"),v4o=l(),Wp=a("li"),Xie=a("strong"),F4o=o("ctrl"),T4o=o(" \u2014 "),mq=a("a"),M4o=o("CTRLModel"),E4o=o(" (CTRL model)"),C4o=l(),Qp=a("li"),zie=a("strong"),w4o=o("cvt"),A4o=o(" \u2014 "),gq=a("a"),L4o=o("CvtModel"),y4o=o(" (CvT model)"),x4o=l(),Hp=a("li"),Wie=a("strong"),$4o=o("data2vec-audio"),k4o=o(" \u2014 "),hq=a("a"),S4o=o("Data2VecAudioModel"),R4o=o(" (Data2VecAudio model)"),P4o=l(),Up=a("li"),Qie=a("strong"),B4o=o("data2vec-text"),I4o=o(" \u2014 "),pq=a("a"),N4o=o("Data2VecTextModel"),q4o=o(" (Data2VecText model)"),j4o=l(),Jp=a("li"),Hie=a("strong"),D4o=o("data2vec-vision"),G4o=o(" \u2014 "),_q=a("a"),O4o=o("Data2VecVisionModel"),V4o=o(" (Data2VecVision model)"),X4o=l(),Yp=a("li"),Uie=a("strong"),z4o=o("deberta"),W4o=o(" \u2014 "),uq=a("a"),Q4o=o("DebertaModel"),H4o=o(" (DeBERTa model)"),U4o=l(),Kp=a("li"),Jie=a("strong"),J4o=o("deberta-v2"),Y4o=o(" \u2014 "),bq=a("a"),K4o=o("DebertaV2Model"),Z4o=o(" (DeBERTa-v2 model)"),e5o=l(),Zp=a("li"),Yie=a("strong"),o5o=o("decision_transformer"),r5o=o(" \u2014 "),vq=a("a"),t5o=o("DecisionTransformerModel"),a5o=o(" (Decision Transformer model)"),n5o=l(),e_=a("li"),Kie=a("strong"),s5o=o("deit"),l5o=o(" \u2014 "),Fq=a("a"),i5o=o("DeiTModel"),d5o=o(" (DeiT model)"),c5o=l(),o_=a("li"),Zie=a("strong"),f5o=o("detr"),m5o=o(" \u2014 "),Tq=a("a"),g5o=o("DetrModel"),h5o=o(" (DETR model)"),p5o=l(),r_=a("li"),ede=a("strong"),_5o=o("distilbert"),u5o=o(" \u2014 "),Mq=a("a"),b5o=o("DistilBertModel"),v5o=o(" (DistilBERT model)"),F5o=l(),t_=a("li"),ode=a("strong"),T5o=o("dpr"),M5o=o(" \u2014 "),Eq=a("a"),E5o=o("DPRQuestionEncoder"),C5o=o(" (DPR model)"),w5o=l(),a_=a("li"),rde=a("strong"),A5o=o("dpt"),L5o=o(" \u2014 "),Cq=a("a"),y5o=o("DPTModel"),x5o=o(" (DPT model)"),$5o=l(),n_=a("li"),tde=a("strong"),k5o=o("electra"),S5o=o(" \u2014 "),wq=a("a"),R5o=o("ElectraModel"),P5o=o(" (ELECTRA model)"),B5o=l(),s_=a("li"),ade=a("strong"),I5o=o("flaubert"),N5o=o(" \u2014 "),Aq=a("a"),q5o=o("FlaubertModel"),j5o=o(" (FlauBERT model)"),D5o=l(),l_=a("li"),nde=a("strong"),G5o=o("flava"),O5o=o(" \u2014 "),Lq=a("a"),V5o=o("FlavaModel"),X5o=o(" (FLAVA model)"),z5o=l(),i_=a("li"),sde=a("strong"),W5o=o("fnet"),Q5o=o(" \u2014 "),yq=a("a"),H5o=o("FNetModel"),U5o=o(" (FNet model)"),J5o=l(),d_=a("li"),lde=a("strong"),Y5o=o("fsmt"),K5o=o(" \u2014 "),xq=a("a"),Z5o=o("FSMTModel"),evo=o(" (FairSeq Machine-Translation model)"),ovo=l(),Gs=a("li"),ide=a("strong"),rvo=o("funnel"),tvo=o(" \u2014 "),$q=a("a"),avo=o("FunnelModel"),nvo=o(" or "),kq=a("a"),svo=o("FunnelBaseModel"),lvo=o(" (Funnel Transformer model)"),ivo=l(),c_=a("li"),dde=a("strong"),dvo=o("glpn"),cvo=o(" \u2014 "),Sq=a("a"),fvo=o("GLPNModel"),mvo=o(" (GLPN model)"),gvo=l(),f_=a("li"),cde=a("strong"),hvo=o("gpt2"),pvo=o(" \u2014 "),Rq=a("a"),_vo=o("GPT2Model"),uvo=o(" (OpenAI GPT-2 model)"),bvo=l(),m_=a("li"),fde=a("strong"),vvo=o("gpt_neo"),Fvo=o(" \u2014 "),Pq=a("a"),Tvo=o("GPTNeoModel"),Mvo=o(" (GPT Neo model)"),Evo=l(),g_=a("li"),mde=a("strong"),Cvo=o("gpt_neox"),wvo=o(" \u2014 "),Bq=a("a"),Avo=o("GPTNeoXModel"),Lvo=o(" (GPT NeoX model)"),yvo=l(),h_=a("li"),gde=a("strong"),xvo=o("gptj"),$vo=o(" \u2014 "),Iq=a("a"),kvo=o("GPTJModel"),Svo=o(" (GPT-J model)"),Rvo=l(),p_=a("li"),hde=a("strong"),Pvo=o("hubert"),Bvo=o(" \u2014 "),Nq=a("a"),Ivo=o("HubertModel"),Nvo=o(" (Hubert model)"),qvo=l(),__=a("li"),pde=a("strong"),jvo=o("ibert"),Dvo=o(" \u2014 "),qq=a("a"),Gvo=o("IBertModel"),Ovo=o(" (I-BERT model)"),Vvo=l(),u_=a("li"),_de=a("strong"),Xvo=o("imagegpt"),zvo=o(" \u2014 "),jq=a("a"),Wvo=o("ImageGPTModel"),Qvo=o(" (ImageGPT model)"),Hvo=l(),b_=a("li"),ude=a("strong"),Uvo=o("layoutlm"),Jvo=o(" \u2014 "),Dq=a("a"),Yvo=o("LayoutLMModel"),Kvo=o(" (LayoutLM model)"),Zvo=l(),v_=a("li"),bde=a("strong"),e3o=o("layoutlmv2"),o3o=o(" \u2014 "),Gq=a("a"),r3o=o("LayoutLMv2Model"),t3o=o(" (LayoutLMv2 model)"),a3o=l(),F_=a("li"),vde=a("strong"),n3o=o("layoutlmv3"),s3o=o(" \u2014 "),Oq=a("a"),l3o=o("LayoutLMv3Model"),i3o=o(" (LayoutLMv3 model)"),d3o=l(),T_=a("li"),Fde=a("strong"),c3o=o("led"),f3o=o(" \u2014 "),Vq=a("a"),m3o=o("LEDModel"),g3o=o(" (LED model)"),h3o=l(),M_=a("li"),Tde=a("strong"),p3o=o("levit"),_3o=o(" \u2014 "),Xq=a("a"),u3o=o("LevitModel"),b3o=o(" (LeViT model)"),v3o=l(),E_=a("li"),Mde=a("strong"),F3o=o("longformer"),T3o=o(" \u2014 "),zq=a("a"),M3o=o("LongformerModel"),E3o=o(" (Longformer model)"),C3o=l(),C_=a("li"),Ede=a("strong"),w3o=o("longt5"),A3o=o(" \u2014 "),Wq=a("a"),L3o=o("LongT5Model"),y3o=o(" (LongT5 model)"),x3o=l(),w_=a("li"),Cde=a("strong"),$3o=o("luke"),k3o=o(" \u2014 "),Qq=a("a"),S3o=o("LukeModel"),R3o=o(" (LUKE model)"),P3o=l(),A_=a("li"),wde=a("strong"),B3o=o("lxmert"),I3o=o(" \u2014 "),Hq=a("a"),N3o=o("LxmertModel"),q3o=o(" (LXMERT model)"),j3o=l(),L_=a("li"),Ade=a("strong"),D3o=o("m2m_100"),G3o=o(" \u2014 "),Uq=a("a"),O3o=o("M2M100Model"),V3o=o(" (M2M100 model)"),X3o=l(),y_=a("li"),Lde=a("strong"),z3o=o("marian"),W3o=o(" \u2014 "),Jq=a("a"),Q3o=o("MarianModel"),H3o=o(" (Marian model)"),U3o=l(),x_=a("li"),yde=a("strong"),J3o=o("maskformer"),Y3o=o(" \u2014 "),Yq=a("a"),K3o=o("MaskFormerModel"),Z3o=o(" (MaskFormer model)"),eFo=l(),$_=a("li"),xde=a("strong"),oFo=o("mbart"),rFo=o(" \u2014 "),Kq=a("a"),tFo=o("MBartModel"),aFo=o(" (mBART model)"),nFo=l(),k_=a("li"),$de=a("strong"),sFo=o("mctct"),lFo=o(" \u2014 "),Zq=a("a"),iFo=o("MCTCTModel"),dFo=o(" (M-CTC-T model)"),cFo=l(),S_=a("li"),kde=a("strong"),fFo=o("megatron-bert"),mFo=o(" \u2014 "),ej=a("a"),gFo=o("MegatronBertModel"),hFo=o(" (Megatron-BERT model)"),pFo=l(),R_=a("li"),Sde=a("strong"),_Fo=o("mobilebert"),uFo=o(" \u2014 "),oj=a("a"),bFo=o("MobileBertModel"),vFo=o(" (MobileBERT model)"),FFo=l(),P_=a("li"),Rde=a("strong"),TFo=o("mobilevit"),MFo=o(" \u2014 "),rj=a("a"),EFo=o("MobileViTModel"),CFo=o(" (MobileViT model)"),wFo=l(),B_=a("li"),Pde=a("strong"),AFo=o("mpnet"),LFo=o(" \u2014 "),tj=a("a"),yFo=o("MPNetModel"),xFo=o(" (MPNet model)"),$Fo=l(),I_=a("li"),Bde=a("strong"),kFo=o("mt5"),SFo=o(" \u2014 "),aj=a("a"),RFo=o("MT5Model"),PFo=o(" (MT5 model)"),BFo=l(),N_=a("li"),Ide=a("strong"),IFo=o("nystromformer"),NFo=o(" \u2014 "),nj=a("a"),qFo=o("NystromformerModel"),jFo=o(" (Nystr\xF6mformer model)"),DFo=l(),q_=a("li"),Nde=a("strong"),GFo=o("openai-gpt"),OFo=o(" \u2014 "),sj=a("a"),VFo=o("OpenAIGPTModel"),XFo=o(" (OpenAI GPT model)"),zFo=l(),j_=a("li"),qde=a("strong"),WFo=o("opt"),QFo=o(" \u2014 "),lj=a("a"),HFo=o("OPTModel"),UFo=o(" (OPT model)"),JFo=l(),D_=a("li"),jde=a("strong"),YFo=o("pegasus"),KFo=o(" \u2014 "),ij=a("a"),ZFo=o("PegasusModel"),eTo=o(" (Pegasus model)"),oTo=l(),G_=a("li"),Dde=a("strong"),rTo=o("perceiver"),tTo=o(" \u2014 "),dj=a("a"),aTo=o("PerceiverModel"),nTo=o(" (Perceiver model)"),sTo=l(),O_=a("li"),Gde=a("strong"),lTo=o("plbart"),iTo=o(" \u2014 "),cj=a("a"),dTo=o("PLBartModel"),cTo=o(" (PLBart model)"),fTo=l(),V_=a("li"),Ode=a("strong"),mTo=o("poolformer"),gTo=o(" \u2014 "),fj=a("a"),hTo=o("PoolFormerModel"),pTo=o(" (PoolFormer model)"),_To=l(),X_=a("li"),Vde=a("strong"),uTo=o("prophetnet"),bTo=o(" \u2014 "),mj=a("a"),vTo=o("ProphetNetModel"),FTo=o(" (ProphetNet model)"),TTo=l(),z_=a("li"),Xde=a("strong"),MTo=o("qdqbert"),ETo=o(" \u2014 "),gj=a("a"),CTo=o("QDQBertModel"),wTo=o(" (QDQBert model)"),ATo=l(),W_=a("li"),zde=a("strong"),LTo=o("reformer"),yTo=o(" \u2014 "),hj=a("a"),xTo=o("ReformerModel"),$To=o(" (Reformer model)"),kTo=l(),Q_=a("li"),Wde=a("strong"),STo=o("regnet"),RTo=o(" \u2014 "),pj=a("a"),PTo=o("RegNetModel"),BTo=o(" (RegNet model)"),ITo=l(),H_=a("li"),Qde=a("strong"),NTo=o("rembert"),qTo=o(" \u2014 "),_j=a("a"),jTo=o("RemBertModel"),DTo=o(" (RemBERT model)"),GTo=l(),U_=a("li"),Hde=a("strong"),OTo=o("resnet"),VTo=o(" \u2014 "),uj=a("a"),XTo=o("ResNetModel"),zTo=o(" (ResNet model)"),WTo=l(),J_=a("li"),Ude=a("strong"),QTo=o("retribert"),HTo=o(" \u2014 "),bj=a("a"),UTo=o("RetriBertModel"),JTo=o(" (RetriBERT model)"),YTo=l(),Y_=a("li"),Jde=a("strong"),KTo=o("roberta"),ZTo=o(" \u2014 "),vj=a("a"),e7o=o("RobertaModel"),o7o=o(" (RoBERTa model)"),r7o=l(),K_=a("li"),Yde=a("strong"),t7o=o("roformer"),a7o=o(" \u2014 "),Fj=a("a"),n7o=o("RoFormerModel"),s7o=o(" (RoFormer model)"),l7o=l(),Z_=a("li"),Kde=a("strong"),i7o=o("segformer"),d7o=o(" \u2014 "),Tj=a("a"),c7o=o("SegformerModel"),f7o=o(" (SegFormer model)"),m7o=l(),eu=a("li"),Zde=a("strong"),g7o=o("sew"),h7o=o(" \u2014 "),Mj=a("a"),p7o=o("SEWModel"),_7o=o(" (SEW model)"),u7o=l(),ou=a("li"),ece=a("strong"),b7o=o("sew-d"),v7o=o(" \u2014 "),Ej=a("a"),F7o=o("SEWDModel"),T7o=o(" (SEW-D model)"),M7o=l(),ru=a("li"),oce=a("strong"),E7o=o("speech_to_text"),C7o=o(" \u2014 "),Cj=a("a"),w7o=o("Speech2TextModel"),A7o=o(" (Speech2Text model)"),L7o=l(),tu=a("li"),rce=a("strong"),y7o=o("splinter"),x7o=o(" \u2014 "),wj=a("a"),$7o=o("SplinterModel"),k7o=o(" (Splinter model)"),S7o=l(),au=a("li"),tce=a("strong"),R7o=o("squeezebert"),P7o=o(" \u2014 "),Aj=a("a"),B7o=o("SqueezeBertModel"),I7o=o(" (SqueezeBERT model)"),N7o=l(),nu=a("li"),ace=a("strong"),q7o=o("swin"),j7o=o(" \u2014 "),Lj=a("a"),D7o=o("SwinModel"),G7o=o(" (Swin Transformer model)"),O7o=l(),su=a("li"),nce=a("strong"),V7o=o("t5"),X7o=o(" \u2014 "),yj=a("a"),z7o=o("T5Model"),W7o=o(" (T5 model)"),Q7o=l(),lu=a("li"),sce=a("strong"),H7o=o("tapas"),U7o=o(" \u2014 "),xj=a("a"),J7o=o("TapasModel"),Y7o=o(" (TAPAS model)"),K7o=l(),iu=a("li"),lce=a("strong"),Z7o=o("trajectory_transformer"),eMo=o(" \u2014 "),$j=a("a"),oMo=o("TrajectoryTransformerModel"),rMo=o(" (Trajectory Transformer model)"),tMo=l(),du=a("li"),ice=a("strong"),aMo=o("transfo-xl"),nMo=o(" \u2014 "),kj=a("a"),sMo=o("TransfoXLModel"),lMo=o(" (Transformer-XL model)"),iMo=l(),cu=a("li"),dce=a("strong"),dMo=o("unispeech"),cMo=o(" \u2014 "),Sj=a("a"),fMo=o("UniSpeechModel"),mMo=o(" (UniSpeech model)"),gMo=l(),fu=a("li"),cce=a("strong"),hMo=o("unispeech-sat"),pMo=o(" \u2014 "),Rj=a("a"),_Mo=o("UniSpeechSatModel"),uMo=o(" (UniSpeechSat model)"),bMo=l(),mu=a("li"),fce=a("strong"),vMo=o("van"),FMo=o(" \u2014 "),Pj=a("a"),TMo=o("VanModel"),MMo=o(" (VAN model)"),EMo=l(),gu=a("li"),mce=a("strong"),CMo=o("vilt"),wMo=o(" \u2014 "),Bj=a("a"),AMo=o("ViltModel"),LMo=o(" (ViLT model)"),yMo=l(),hu=a("li"),gce=a("strong"),xMo=o("vision-text-dual-encoder"),$Mo=o(" \u2014 "),Ij=a("a"),kMo=o("VisionTextDualEncoderModel"),SMo=o(" (VisionTextDualEncoder model)"),RMo=l(),pu=a("li"),hce=a("strong"),PMo=o("visual_bert"),BMo=o(" \u2014 "),Nj=a("a"),IMo=o("VisualBertModel"),NMo=o(" (VisualBERT model)"),qMo=l(),_u=a("li"),pce=a("strong"),jMo=o("vit"),DMo=o(" \u2014 "),qj=a("a"),GMo=o("ViTModel"),OMo=o(" (ViT model)"),VMo=l(),uu=a("li"),_ce=a("strong"),XMo=o("vit_mae"),zMo=o(" \u2014 "),jj=a("a"),WMo=o("ViTMAEModel"),QMo=o(" (ViTMAE model)"),HMo=l(),bu=a("li"),uce=a("strong"),UMo=o("wav2vec2"),JMo=o(" \u2014 "),Dj=a("a"),YMo=o("Wav2Vec2Model"),KMo=o(" (Wav2Vec2 model)"),ZMo=l(),vu=a("li"),bce=a("strong"),eEo=o("wav2vec2-conformer"),oEo=o(" \u2014 "),Gj=a("a"),rEo=o("Wav2Vec2ConformerModel"),tEo=o(" (Wav2Vec2-Conformer model)"),aEo=l(),Fu=a("li"),vce=a("strong"),nEo=o("wavlm"),sEo=o(" \u2014 "),Oj=a("a"),lEo=o("WavLMModel"),iEo=o(" (WavLM model)"),dEo=l(),Tu=a("li"),Fce=a("strong"),cEo=o("xglm"),fEo=o(" \u2014 "),Vj=a("a"),mEo=o("XGLMModel"),gEo=o(" (XGLM model)"),hEo=l(),Mu=a("li"),Tce=a("strong"),pEo=o("xlm"),_Eo=o(" \u2014 "),Xj=a("a"),uEo=o("XLMModel"),bEo=o(" (XLM model)"),vEo=l(),Eu=a("li"),Mce=a("strong"),FEo=o("xlm-prophetnet"),TEo=o(" \u2014 "),zj=a("a"),MEo=o("XLMProphetNetModel"),EEo=o(" (XLM-ProphetNet model)"),CEo=l(),Cu=a("li"),Ece=a("strong"),wEo=o("xlm-roberta"),AEo=o(" \u2014 "),Wj=a("a"),LEo=o("XLMRobertaModel"),yEo=o(" (XLM-RoBERTa model)"),xEo=l(),wu=a("li"),Cce=a("strong"),$Eo=o("xlm-roberta-xl"),kEo=o(" \u2014 "),Qj=a("a"),SEo=o("XLMRobertaXLModel"),REo=o(" (XLM-RoBERTa-XL model)"),PEo=l(),Au=a("li"),wce=a("strong"),BEo=o("xlnet"),IEo=o(" \u2014 "),Hj=a("a"),NEo=o("XLNetModel"),qEo=o(" (XLNet model)"),jEo=l(),Lu=a("li"),Ace=a("strong"),DEo=o("yolos"),GEo=o(" \u2014 "),Uj=a("a"),OEo=o("YolosModel"),VEo=o(" (YOLOS model)"),XEo=l(),yu=a("li"),Lce=a("strong"),zEo=o("yoso"),WEo=o(" \u2014 "),Jj=a("a"),QEo=o("YosoModel"),HEo=o(" (YOSO model)"),UEo=l(),xu=a("p"),JEo=o("The model is set in evaluation mode by default using "),yce=a("code"),YEo=o("model.eval()"),KEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xce=a("code"),ZEo=o("model.train()"),eCo=l(),F($u.$$.fragment),RGe=l(),qi=a("h2"),ku=a("a"),$ce=a("span"),F(oy.$$.fragment),oCo=l(),kce=a("span"),rCo=o("AutoModelForPreTraining"),PGe=l(),$o=a("div"),F(ry.$$.fragment),tCo=l(),ji=a("p"),aCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Yj=a("a"),nCo=o("from_pretrained()"),sCo=o(" class method or the "),Kj=a("a"),lCo=o("from_config()"),iCo=o(` class
method.`),dCo=l(),ty=a("p"),cCo=o("This class cannot be instantiated directly using "),Sce=a("code"),fCo=o("__init__()"),mCo=o(" (throws an error)."),gCo=l(),lt=a("div"),F(ay.$$.fragment),hCo=l(),Rce=a("p"),pCo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_Co=l(),Di=a("p"),uCo=o(`Note:
Loading a model from its configuration file does `),Pce=a("strong"),bCo=o("not"),vCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zj=a("a"),FCo=o("from_pretrained()"),TCo=o(" to load the model weights."),MCo=l(),F(Su.$$.fragment),ECo=l(),Ye=a("div"),F(ny.$$.fragment),CCo=l(),Bce=a("p"),wCo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ACo=l(),Pa=a("p"),LCo=o("The model class to instantiate is selected based on the "),Ice=a("code"),yCo=o("model_type"),xCo=o(` property of the config object (either
passed as an argument or loaded from `),Nce=a("code"),$Co=o("pretrained_model_name_or_path"),kCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qce=a("code"),SCo=o("pretrained_model_name_or_path"),RCo=o(":"),PCo=l(),G=a("ul"),Ru=a("li"),jce=a("strong"),BCo=o("albert"),ICo=o(" \u2014 "),eD=a("a"),NCo=o("AlbertForPreTraining"),qCo=o(" (ALBERT model)"),jCo=l(),Pu=a("li"),Dce=a("strong"),DCo=o("bart"),GCo=o(" \u2014 "),oD=a("a"),OCo=o("BartForConditionalGeneration"),VCo=o(" (BART model)"),XCo=l(),Bu=a("li"),Gce=a("strong"),zCo=o("bert"),WCo=o(" \u2014 "),rD=a("a"),QCo=o("BertForPreTraining"),HCo=o(" (BERT model)"),UCo=l(),Iu=a("li"),Oce=a("strong"),JCo=o("big_bird"),YCo=o(" \u2014 "),tD=a("a"),KCo=o("BigBirdForPreTraining"),ZCo=o(" (BigBird model)"),e0o=l(),Nu=a("li"),Vce=a("strong"),o0o=o("bloom"),r0o=o(" \u2014 "),aD=a("a"),t0o=o("BloomForCausalLM"),a0o=o(" (BLOOM model)"),n0o=l(),qu=a("li"),Xce=a("strong"),s0o=o("camembert"),l0o=o(" \u2014 "),nD=a("a"),i0o=o("CamembertForMaskedLM"),d0o=o(" (CamemBERT model)"),c0o=l(),ju=a("li"),zce=a("strong"),f0o=o("ctrl"),m0o=o(" \u2014 "),sD=a("a"),g0o=o("CTRLLMHeadModel"),h0o=o(" (CTRL model)"),p0o=l(),Du=a("li"),Wce=a("strong"),_0o=o("data2vec-text"),u0o=o(" \u2014 "),lD=a("a"),b0o=o("Data2VecTextForMaskedLM"),v0o=o(" (Data2VecText model)"),F0o=l(),Gu=a("li"),Qce=a("strong"),T0o=o("deberta"),M0o=o(" \u2014 "),iD=a("a"),E0o=o("DebertaForMaskedLM"),C0o=o(" (DeBERTa model)"),w0o=l(),Ou=a("li"),Hce=a("strong"),A0o=o("deberta-v2"),L0o=o(" \u2014 "),dD=a("a"),y0o=o("DebertaV2ForMaskedLM"),x0o=o(" (DeBERTa-v2 model)"),$0o=l(),Vu=a("li"),Uce=a("strong"),k0o=o("distilbert"),S0o=o(" \u2014 "),cD=a("a"),R0o=o("DistilBertForMaskedLM"),P0o=o(" (DistilBERT model)"),B0o=l(),Xu=a("li"),Jce=a("strong"),I0o=o("electra"),N0o=o(" \u2014 "),fD=a("a"),q0o=o("ElectraForPreTraining"),j0o=o(" (ELECTRA model)"),D0o=l(),zu=a("li"),Yce=a("strong"),G0o=o("flaubert"),O0o=o(" \u2014 "),mD=a("a"),V0o=o("FlaubertWithLMHeadModel"),X0o=o(" (FlauBERT model)"),z0o=l(),Wu=a("li"),Kce=a("strong"),W0o=o("flava"),Q0o=o(" \u2014 "),gD=a("a"),H0o=o("FlavaForPreTraining"),U0o=o(" (FLAVA model)"),J0o=l(),Qu=a("li"),Zce=a("strong"),Y0o=o("fnet"),K0o=o(" \u2014 "),hD=a("a"),Z0o=o("FNetForPreTraining"),ewo=o(" (FNet model)"),owo=l(),Hu=a("li"),efe=a("strong"),rwo=o("fsmt"),two=o(" \u2014 "),pD=a("a"),awo=o("FSMTForConditionalGeneration"),nwo=o(" (FairSeq Machine-Translation model)"),swo=l(),Uu=a("li"),ofe=a("strong"),lwo=o("funnel"),iwo=o(" \u2014 "),_D=a("a"),dwo=o("FunnelForPreTraining"),cwo=o(" (Funnel Transformer model)"),fwo=l(),Ju=a("li"),rfe=a("strong"),mwo=o("gpt2"),gwo=o(" \u2014 "),uD=a("a"),hwo=o("GPT2LMHeadModel"),pwo=o(" (OpenAI GPT-2 model)"),_wo=l(),Yu=a("li"),tfe=a("strong"),uwo=o("ibert"),bwo=o(" \u2014 "),bD=a("a"),vwo=o("IBertForMaskedLM"),Fwo=o(" (I-BERT model)"),Two=l(),Ku=a("li"),afe=a("strong"),Mwo=o("layoutlm"),Ewo=o(" \u2014 "),vD=a("a"),Cwo=o("LayoutLMForMaskedLM"),wwo=o(" (LayoutLM model)"),Awo=l(),Zu=a("li"),nfe=a("strong"),Lwo=o("longformer"),ywo=o(" \u2014 "),FD=a("a"),xwo=o("LongformerForMaskedLM"),$wo=o(" (Longformer model)"),kwo=l(),e1=a("li"),sfe=a("strong"),Swo=o("lxmert"),Rwo=o(" \u2014 "),TD=a("a"),Pwo=o("LxmertForPreTraining"),Bwo=o(" (LXMERT model)"),Iwo=l(),o1=a("li"),lfe=a("strong"),Nwo=o("megatron-bert"),qwo=o(" \u2014 "),MD=a("a"),jwo=o("MegatronBertForPreTraining"),Dwo=o(" (Megatron-BERT model)"),Gwo=l(),r1=a("li"),ife=a("strong"),Owo=o("mobilebert"),Vwo=o(" \u2014 "),ED=a("a"),Xwo=o("MobileBertForPreTraining"),zwo=o(" (MobileBERT model)"),Wwo=l(),t1=a("li"),dfe=a("strong"),Qwo=o("mpnet"),Hwo=o(" \u2014 "),CD=a("a"),Uwo=o("MPNetForMaskedLM"),Jwo=o(" (MPNet model)"),Ywo=l(),a1=a("li"),cfe=a("strong"),Kwo=o("openai-gpt"),Zwo=o(" \u2014 "),wD=a("a"),eAo=o("OpenAIGPTLMHeadModel"),oAo=o(" (OpenAI GPT model)"),rAo=l(),n1=a("li"),ffe=a("strong"),tAo=o("retribert"),aAo=o(" \u2014 "),AD=a("a"),nAo=o("RetriBertModel"),sAo=o(" (RetriBERT model)"),lAo=l(),s1=a("li"),mfe=a("strong"),iAo=o("roberta"),dAo=o(" \u2014 "),LD=a("a"),cAo=o("RobertaForMaskedLM"),fAo=o(" (RoBERTa model)"),mAo=l(),l1=a("li"),gfe=a("strong"),gAo=o("splinter"),hAo=o(" \u2014 "),yD=a("a"),pAo=o("SplinterForPreTraining"),_Ao=o(" (Splinter model)"),uAo=l(),i1=a("li"),hfe=a("strong"),bAo=o("squeezebert"),vAo=o(" \u2014 "),xD=a("a"),FAo=o("SqueezeBertForMaskedLM"),TAo=o(" (SqueezeBERT model)"),MAo=l(),d1=a("li"),pfe=a("strong"),EAo=o("t5"),CAo=o(" \u2014 "),$D=a("a"),wAo=o("T5ForConditionalGeneration"),AAo=o(" (T5 model)"),LAo=l(),c1=a("li"),_fe=a("strong"),yAo=o("tapas"),xAo=o(" \u2014 "),kD=a("a"),$Ao=o("TapasForMaskedLM"),kAo=o(" (TAPAS model)"),SAo=l(),f1=a("li"),ufe=a("strong"),RAo=o("transfo-xl"),PAo=o(" \u2014 "),SD=a("a"),BAo=o("TransfoXLLMHeadModel"),IAo=o(" (Transformer-XL model)"),NAo=l(),m1=a("li"),bfe=a("strong"),qAo=o("unispeech"),jAo=o(" \u2014 "),RD=a("a"),DAo=o("UniSpeechForPreTraining"),GAo=o(" (UniSpeech model)"),OAo=l(),g1=a("li"),vfe=a("strong"),VAo=o("unispeech-sat"),XAo=o(" \u2014 "),PD=a("a"),zAo=o("UniSpeechSatForPreTraining"),WAo=o(" (UniSpeechSat model)"),QAo=l(),h1=a("li"),Ffe=a("strong"),HAo=o("visual_bert"),UAo=o(" \u2014 "),BD=a("a"),JAo=o("VisualBertForPreTraining"),YAo=o(" (VisualBERT model)"),KAo=l(),p1=a("li"),Tfe=a("strong"),ZAo=o("vit_mae"),e6o=o(" \u2014 "),ID=a("a"),o6o=o("ViTMAEForPreTraining"),r6o=o(" (ViTMAE model)"),t6o=l(),_1=a("li"),Mfe=a("strong"),a6o=o("wav2vec2"),n6o=o(" \u2014 "),ND=a("a"),s6o=o("Wav2Vec2ForPreTraining"),l6o=o(" (Wav2Vec2 model)"),i6o=l(),u1=a("li"),Efe=a("strong"),d6o=o("wav2vec2-conformer"),c6o=o(" \u2014 "),qD=a("a"),f6o=o("Wav2Vec2ConformerForPreTraining"),m6o=o(" (Wav2Vec2-Conformer model)"),g6o=l(),b1=a("li"),Cfe=a("strong"),h6o=o("xlm"),p6o=o(" \u2014 "),jD=a("a"),_6o=o("XLMWithLMHeadModel"),u6o=o(" (XLM model)"),b6o=l(),v1=a("li"),wfe=a("strong"),v6o=o("xlm-roberta"),F6o=o(" \u2014 "),DD=a("a"),T6o=o("XLMRobertaForMaskedLM"),M6o=o(" (XLM-RoBERTa model)"),E6o=l(),F1=a("li"),Afe=a("strong"),C6o=o("xlm-roberta-xl"),w6o=o(" \u2014 "),GD=a("a"),A6o=o("XLMRobertaXLForMaskedLM"),L6o=o(" (XLM-RoBERTa-XL model)"),y6o=l(),T1=a("li"),Lfe=a("strong"),x6o=o("xlnet"),$6o=o(" \u2014 "),OD=a("a"),k6o=o("XLNetLMHeadModel"),S6o=o(" (XLNet model)"),R6o=l(),M1=a("p"),P6o=o("The model is set in evaluation mode by default using "),yfe=a("code"),B6o=o("model.eval()"),I6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=a("code"),N6o=o("model.train()"),q6o=l(),F(E1.$$.fragment),BGe=l(),Gi=a("h2"),C1=a("a"),$fe=a("span"),F(sy.$$.fragment),j6o=l(),kfe=a("span"),D6o=o("AutoModelForCausalLM"),IGe=l(),ko=a("div"),F(ly.$$.fragment),G6o=l(),Oi=a("p"),O6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VD=a("a"),V6o=o("from_pretrained()"),X6o=o(" class method or the "),XD=a("a"),z6o=o("from_config()"),W6o=o(` class
method.`),Q6o=l(),iy=a("p"),H6o=o("This class cannot be instantiated directly using "),Sfe=a("code"),U6o=o("__init__()"),J6o=o(" (throws an error)."),Y6o=l(),it=a("div"),F(dy.$$.fragment),K6o=l(),Rfe=a("p"),Z6o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),eLo=l(),Vi=a("p"),oLo=o(`Note:
Loading a model from its configuration file does `),Pfe=a("strong"),rLo=o("not"),tLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=a("a"),aLo=o("from_pretrained()"),nLo=o(" to load the model weights."),sLo=l(),F(w1.$$.fragment),lLo=l(),Ke=a("div"),F(cy.$$.fragment),iLo=l(),Bfe=a("p"),dLo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),cLo=l(),Ba=a("p"),fLo=o("The model class to instantiate is selected based on the "),Ife=a("code"),mLo=o("model_type"),gLo=o(` property of the config object (either
passed as an argument or loaded from `),Nfe=a("code"),hLo=o("pretrained_model_name_or_path"),pLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qfe=a("code"),_Lo=o("pretrained_model_name_or_path"),uLo=o(":"),bLo=l(),z=a("ul"),A1=a("li"),jfe=a("strong"),vLo=o("bart"),FLo=o(" \u2014 "),WD=a("a"),TLo=o("BartForCausalLM"),MLo=o(" (BART model)"),ELo=l(),L1=a("li"),Dfe=a("strong"),CLo=o("bert"),wLo=o(" \u2014 "),QD=a("a"),ALo=o("BertLMHeadModel"),LLo=o(" (BERT model)"),yLo=l(),y1=a("li"),Gfe=a("strong"),xLo=o("bert-generation"),$Lo=o(" \u2014 "),HD=a("a"),kLo=o("BertGenerationDecoder"),SLo=o(" (Bert Generation model)"),RLo=l(),x1=a("li"),Ofe=a("strong"),PLo=o("big_bird"),BLo=o(" \u2014 "),UD=a("a"),ILo=o("BigBirdForCausalLM"),NLo=o(" (BigBird model)"),qLo=l(),$1=a("li"),Vfe=a("strong"),jLo=o("bigbird_pegasus"),DLo=o(" \u2014 "),JD=a("a"),GLo=o("BigBirdPegasusForCausalLM"),OLo=o(" (BigBird-Pegasus model)"),VLo=l(),k1=a("li"),Xfe=a("strong"),XLo=o("blenderbot"),zLo=o(" \u2014 "),YD=a("a"),WLo=o("BlenderbotForCausalLM"),QLo=o(" (Blenderbot model)"),HLo=l(),S1=a("li"),zfe=a("strong"),ULo=o("blenderbot-small"),JLo=o(" \u2014 "),KD=a("a"),YLo=o("BlenderbotSmallForCausalLM"),KLo=o(" (BlenderbotSmall model)"),ZLo=l(),R1=a("li"),Wfe=a("strong"),eyo=o("bloom"),oyo=o(" \u2014 "),ZD=a("a"),ryo=o("BloomForCausalLM"),tyo=o(" (BLOOM model)"),ayo=l(),P1=a("li"),Qfe=a("strong"),nyo=o("camembert"),syo=o(" \u2014 "),eG=a("a"),lyo=o("CamembertForCausalLM"),iyo=o(" (CamemBERT model)"),dyo=l(),B1=a("li"),Hfe=a("strong"),cyo=o("ctrl"),fyo=o(" \u2014 "),oG=a("a"),myo=o("CTRLLMHeadModel"),gyo=o(" (CTRL model)"),hyo=l(),I1=a("li"),Ufe=a("strong"),pyo=o("data2vec-text"),_yo=o(" \u2014 "),rG=a("a"),uyo=o("Data2VecTextForCausalLM"),byo=o(" (Data2VecText model)"),vyo=l(),N1=a("li"),Jfe=a("strong"),Fyo=o("electra"),Tyo=o(" \u2014 "),tG=a("a"),Myo=o("ElectraForCausalLM"),Eyo=o(" (ELECTRA model)"),Cyo=l(),q1=a("li"),Yfe=a("strong"),wyo=o("gpt2"),Ayo=o(" \u2014 "),aG=a("a"),Lyo=o("GPT2LMHeadModel"),yyo=o(" (OpenAI GPT-2 model)"),xyo=l(),j1=a("li"),Kfe=a("strong"),$yo=o("gpt_neo"),kyo=o(" \u2014 "),nG=a("a"),Syo=o("GPTNeoForCausalLM"),Ryo=o(" (GPT Neo model)"),Pyo=l(),D1=a("li"),Zfe=a("strong"),Byo=o("gpt_neox"),Iyo=o(" \u2014 "),sG=a("a"),Nyo=o("GPTNeoXForCausalLM"),qyo=o(" (GPT NeoX model)"),jyo=l(),G1=a("li"),eme=a("strong"),Dyo=o("gptj"),Gyo=o(" \u2014 "),lG=a("a"),Oyo=o("GPTJForCausalLM"),Vyo=o(" (GPT-J model)"),Xyo=l(),O1=a("li"),ome=a("strong"),zyo=o("marian"),Wyo=o(" \u2014 "),iG=a("a"),Qyo=o("MarianForCausalLM"),Hyo=o(" (Marian model)"),Uyo=l(),V1=a("li"),rme=a("strong"),Jyo=o("mbart"),Yyo=o(" \u2014 "),dG=a("a"),Kyo=o("MBartForCausalLM"),Zyo=o(" (mBART model)"),e8o=l(),X1=a("li"),tme=a("strong"),o8o=o("megatron-bert"),r8o=o(" \u2014 "),cG=a("a"),t8o=o("MegatronBertForCausalLM"),a8o=o(" (Megatron-BERT model)"),n8o=l(),z1=a("li"),ame=a("strong"),s8o=o("openai-gpt"),l8o=o(" \u2014 "),fG=a("a"),i8o=o("OpenAIGPTLMHeadModel"),d8o=o(" (OpenAI GPT model)"),c8o=l(),W1=a("li"),nme=a("strong"),f8o=o("opt"),m8o=o(" \u2014 "),mG=a("a"),g8o=o("OPTForCausalLM"),h8o=o(" (OPT model)"),p8o=l(),Q1=a("li"),sme=a("strong"),_8o=o("pegasus"),u8o=o(" \u2014 "),gG=a("a"),b8o=o("PegasusForCausalLM"),v8o=o(" (Pegasus model)"),F8o=l(),H1=a("li"),lme=a("strong"),T8o=o("plbart"),M8o=o(" \u2014 "),hG=a("a"),E8o=o("PLBartForCausalLM"),C8o=o(" (PLBart model)"),w8o=l(),U1=a("li"),ime=a("strong"),A8o=o("prophetnet"),L8o=o(" \u2014 "),pG=a("a"),y8o=o("ProphetNetForCausalLM"),x8o=o(" (ProphetNet model)"),$8o=l(),J1=a("li"),dme=a("strong"),k8o=o("qdqbert"),S8o=o(" \u2014 "),_G=a("a"),R8o=o("QDQBertLMHeadModel"),P8o=o(" (QDQBert model)"),B8o=l(),Y1=a("li"),cme=a("strong"),I8o=o("reformer"),N8o=o(" \u2014 "),uG=a("a"),q8o=o("ReformerModelWithLMHead"),j8o=o(" (Reformer model)"),D8o=l(),K1=a("li"),fme=a("strong"),G8o=o("rembert"),O8o=o(" \u2014 "),bG=a("a"),V8o=o("RemBertForCausalLM"),X8o=o(" (RemBERT model)"),z8o=l(),Z1=a("li"),mme=a("strong"),W8o=o("roberta"),Q8o=o(" \u2014 "),vG=a("a"),H8o=o("RobertaForCausalLM"),U8o=o(" (RoBERTa model)"),J8o=l(),eb=a("li"),gme=a("strong"),Y8o=o("roformer"),K8o=o(" \u2014 "),FG=a("a"),Z8o=o("RoFormerForCausalLM"),e9o=o(" (RoFormer model)"),o9o=l(),ob=a("li"),hme=a("strong"),r9o=o("speech_to_text_2"),t9o=o(" \u2014 "),TG=a("a"),a9o=o("Speech2Text2ForCausalLM"),n9o=o(" (Speech2Text2 model)"),s9o=l(),rb=a("li"),pme=a("strong"),l9o=o("transfo-xl"),i9o=o(" \u2014 "),MG=a("a"),d9o=o("TransfoXLLMHeadModel"),c9o=o(" (Transformer-XL model)"),f9o=l(),tb=a("li"),_me=a("strong"),m9o=o("trocr"),g9o=o(" \u2014 "),EG=a("a"),h9o=o("TrOCRForCausalLM"),p9o=o(" (TrOCR model)"),_9o=l(),ab=a("li"),ume=a("strong"),u9o=o("xglm"),b9o=o(" \u2014 "),CG=a("a"),v9o=o("XGLMForCausalLM"),F9o=o(" (XGLM model)"),T9o=l(),nb=a("li"),bme=a("strong"),M9o=o("xlm"),E9o=o(" \u2014 "),wG=a("a"),C9o=o("XLMWithLMHeadModel"),w9o=o(" (XLM model)"),A9o=l(),sb=a("li"),vme=a("strong"),L9o=o("xlm-prophetnet"),y9o=o(" \u2014 "),AG=a("a"),x9o=o("XLMProphetNetForCausalLM"),$9o=o(" (XLM-ProphetNet model)"),k9o=l(),lb=a("li"),Fme=a("strong"),S9o=o("xlm-roberta"),R9o=o(" \u2014 "),LG=a("a"),P9o=o("XLMRobertaForCausalLM"),B9o=o(" (XLM-RoBERTa model)"),I9o=l(),ib=a("li"),Tme=a("strong"),N9o=o("xlm-roberta-xl"),q9o=o(" \u2014 "),yG=a("a"),j9o=o("XLMRobertaXLForCausalLM"),D9o=o(" (XLM-RoBERTa-XL model)"),G9o=l(),db=a("li"),Mme=a("strong"),O9o=o("xlnet"),V9o=o(" \u2014 "),xG=a("a"),X9o=o("XLNetLMHeadModel"),z9o=o(" (XLNet model)"),W9o=l(),cb=a("p"),Q9o=o("The model is set in evaluation mode by default using "),Eme=a("code"),H9o=o("model.eval()"),U9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cme=a("code"),J9o=o("model.train()"),Y9o=l(),F(fb.$$.fragment),NGe=l(),Xi=a("h2"),mb=a("a"),wme=a("span"),F(fy.$$.fragment),K9o=l(),Ame=a("span"),Z9o=o("AutoModelForMaskedLM"),qGe=l(),So=a("div"),F(my.$$.fragment),exo=l(),zi=a("p"),oxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$G=a("a"),rxo=o("from_pretrained()"),txo=o(" class method or the "),kG=a("a"),axo=o("from_config()"),nxo=o(` class
method.`),sxo=l(),gy=a("p"),lxo=o("This class cannot be instantiated directly using "),Lme=a("code"),ixo=o("__init__()"),dxo=o(" (throws an error)."),cxo=l(),dt=a("div"),F(hy.$$.fragment),fxo=l(),yme=a("p"),mxo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gxo=l(),Wi=a("p"),hxo=o(`Note:
Loading a model from its configuration file does `),xme=a("strong"),pxo=o("not"),_xo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=a("a"),uxo=o("from_pretrained()"),bxo=o(" to load the model weights."),vxo=l(),F(gb.$$.fragment),Fxo=l(),Ze=a("div"),F(py.$$.fragment),Txo=l(),$me=a("p"),Mxo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Exo=l(),Ia=a("p"),Cxo=o("The model class to instantiate is selected based on the "),kme=a("code"),wxo=o("model_type"),Axo=o(` property of the config object (either
passed as an argument or loaded from `),Sme=a("code"),Lxo=o("pretrained_model_name_or_path"),yxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rme=a("code"),xxo=o("pretrained_model_name_or_path"),$xo=o(":"),kxo=l(),Q=a("ul"),hb=a("li"),Pme=a("strong"),Sxo=o("albert"),Rxo=o(" \u2014 "),RG=a("a"),Pxo=o("AlbertForMaskedLM"),Bxo=o(" (ALBERT model)"),Ixo=l(),pb=a("li"),Bme=a("strong"),Nxo=o("bart"),qxo=o(" \u2014 "),PG=a("a"),jxo=o("BartForConditionalGeneration"),Dxo=o(" (BART model)"),Gxo=l(),_b=a("li"),Ime=a("strong"),Oxo=o("bert"),Vxo=o(" \u2014 "),BG=a("a"),Xxo=o("BertForMaskedLM"),zxo=o(" (BERT model)"),Wxo=l(),ub=a("li"),Nme=a("strong"),Qxo=o("big_bird"),Hxo=o(" \u2014 "),IG=a("a"),Uxo=o("BigBirdForMaskedLM"),Jxo=o(" (BigBird model)"),Yxo=l(),bb=a("li"),qme=a("strong"),Kxo=o("camembert"),Zxo=o(" \u2014 "),NG=a("a"),e$o=o("CamembertForMaskedLM"),o$o=o(" (CamemBERT model)"),r$o=l(),vb=a("li"),jme=a("strong"),t$o=o("convbert"),a$o=o(" \u2014 "),qG=a("a"),n$o=o("ConvBertForMaskedLM"),s$o=o(" (ConvBERT model)"),l$o=l(),Fb=a("li"),Dme=a("strong"),i$o=o("data2vec-text"),d$o=o(" \u2014 "),jG=a("a"),c$o=o("Data2VecTextForMaskedLM"),f$o=o(" (Data2VecText model)"),m$o=l(),Tb=a("li"),Gme=a("strong"),g$o=o("deberta"),h$o=o(" \u2014 "),DG=a("a"),p$o=o("DebertaForMaskedLM"),_$o=o(" (DeBERTa model)"),u$o=l(),Mb=a("li"),Ome=a("strong"),b$o=o("deberta-v2"),v$o=o(" \u2014 "),GG=a("a"),F$o=o("DebertaV2ForMaskedLM"),T$o=o(" (DeBERTa-v2 model)"),M$o=l(),Eb=a("li"),Vme=a("strong"),E$o=o("distilbert"),C$o=o(" \u2014 "),OG=a("a"),w$o=o("DistilBertForMaskedLM"),A$o=o(" (DistilBERT model)"),L$o=l(),Cb=a("li"),Xme=a("strong"),y$o=o("electra"),x$o=o(" \u2014 "),VG=a("a"),$$o=o("ElectraForMaskedLM"),k$o=o(" (ELECTRA model)"),S$o=l(),wb=a("li"),zme=a("strong"),R$o=o("flaubert"),P$o=o(" \u2014 "),XG=a("a"),B$o=o("FlaubertWithLMHeadModel"),I$o=o(" (FlauBERT model)"),N$o=l(),Ab=a("li"),Wme=a("strong"),q$o=o("fnet"),j$o=o(" \u2014 "),zG=a("a"),D$o=o("FNetForMaskedLM"),G$o=o(" (FNet model)"),O$o=l(),Lb=a("li"),Qme=a("strong"),V$o=o("funnel"),X$o=o(" \u2014 "),WG=a("a"),z$o=o("FunnelForMaskedLM"),W$o=o(" (Funnel Transformer model)"),Q$o=l(),yb=a("li"),Hme=a("strong"),H$o=o("ibert"),U$o=o(" \u2014 "),QG=a("a"),J$o=o("IBertForMaskedLM"),Y$o=o(" (I-BERT model)"),K$o=l(),xb=a("li"),Ume=a("strong"),Z$o=o("layoutlm"),eko=o(" \u2014 "),HG=a("a"),oko=o("LayoutLMForMaskedLM"),rko=o(" (LayoutLM model)"),tko=l(),$b=a("li"),Jme=a("strong"),ako=o("longformer"),nko=o(" \u2014 "),UG=a("a"),sko=o("LongformerForMaskedLM"),lko=o(" (Longformer model)"),iko=l(),kb=a("li"),Yme=a("strong"),dko=o("luke"),cko=o(" \u2014 "),JG=a("a"),fko=o("LukeForMaskedLM"),mko=o(" (LUKE model)"),gko=l(),Sb=a("li"),Kme=a("strong"),hko=o("mbart"),pko=o(" \u2014 "),YG=a("a"),_ko=o("MBartForConditionalGeneration"),uko=o(" (mBART model)"),bko=l(),Rb=a("li"),Zme=a("strong"),vko=o("megatron-bert"),Fko=o(" \u2014 "),KG=a("a"),Tko=o("MegatronBertForMaskedLM"),Mko=o(" (Megatron-BERT model)"),Eko=l(),Pb=a("li"),ege=a("strong"),Cko=o("mobilebert"),wko=o(" \u2014 "),ZG=a("a"),Ako=o("MobileBertForMaskedLM"),Lko=o(" (MobileBERT model)"),yko=l(),Bb=a("li"),oge=a("strong"),xko=o("mpnet"),$ko=o(" \u2014 "),eO=a("a"),kko=o("MPNetForMaskedLM"),Sko=o(" (MPNet model)"),Rko=l(),Ib=a("li"),rge=a("strong"),Pko=o("nystromformer"),Bko=o(" \u2014 "),oO=a("a"),Iko=o("NystromformerForMaskedLM"),Nko=o(" (Nystr\xF6mformer model)"),qko=l(),Nb=a("li"),tge=a("strong"),jko=o("perceiver"),Dko=o(" \u2014 "),rO=a("a"),Gko=o("PerceiverForMaskedLM"),Oko=o(" (Perceiver model)"),Vko=l(),qb=a("li"),age=a("strong"),Xko=o("qdqbert"),zko=o(" \u2014 "),tO=a("a"),Wko=o("QDQBertForMaskedLM"),Qko=o(" (QDQBert model)"),Hko=l(),jb=a("li"),nge=a("strong"),Uko=o("reformer"),Jko=o(" \u2014 "),aO=a("a"),Yko=o("ReformerForMaskedLM"),Kko=o(" (Reformer model)"),Zko=l(),Db=a("li"),sge=a("strong"),eSo=o("rembert"),oSo=o(" \u2014 "),nO=a("a"),rSo=o("RemBertForMaskedLM"),tSo=o(" (RemBERT model)"),aSo=l(),Gb=a("li"),lge=a("strong"),nSo=o("roberta"),sSo=o(" \u2014 "),sO=a("a"),lSo=o("RobertaForMaskedLM"),iSo=o(" (RoBERTa model)"),dSo=l(),Ob=a("li"),ige=a("strong"),cSo=o("roformer"),fSo=o(" \u2014 "),lO=a("a"),mSo=o("RoFormerForMaskedLM"),gSo=o(" (RoFormer model)"),hSo=l(),Vb=a("li"),dge=a("strong"),pSo=o("squeezebert"),_So=o(" \u2014 "),iO=a("a"),uSo=o("SqueezeBertForMaskedLM"),bSo=o(" (SqueezeBERT model)"),vSo=l(),Xb=a("li"),cge=a("strong"),FSo=o("tapas"),TSo=o(" \u2014 "),dO=a("a"),MSo=o("TapasForMaskedLM"),ESo=o(" (TAPAS model)"),CSo=l(),zb=a("li"),fge=a("strong"),wSo=o("wav2vec2"),ASo=o(" \u2014 "),mge=a("code"),LSo=o("Wav2Vec2ForMaskedLM"),ySo=o(" (Wav2Vec2 model)"),xSo=l(),Wb=a("li"),gge=a("strong"),$So=o("xlm"),kSo=o(" \u2014 "),cO=a("a"),SSo=o("XLMWithLMHeadModel"),RSo=o(" (XLM model)"),PSo=l(),Qb=a("li"),hge=a("strong"),BSo=o("xlm-roberta"),ISo=o(" \u2014 "),fO=a("a"),NSo=o("XLMRobertaForMaskedLM"),qSo=o(" (XLM-RoBERTa model)"),jSo=l(),Hb=a("li"),pge=a("strong"),DSo=o("xlm-roberta-xl"),GSo=o(" \u2014 "),mO=a("a"),OSo=o("XLMRobertaXLForMaskedLM"),VSo=o(" (XLM-RoBERTa-XL model)"),XSo=l(),Ub=a("li"),_ge=a("strong"),zSo=o("yoso"),WSo=o(" \u2014 "),gO=a("a"),QSo=o("YosoForMaskedLM"),HSo=o(" (YOSO model)"),USo=l(),Jb=a("p"),JSo=o("The model is set in evaluation mode by default using "),uge=a("code"),YSo=o("model.eval()"),KSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=a("code"),ZSo=o("model.train()"),eRo=l(),F(Yb.$$.fragment),jGe=l(),Qi=a("h2"),Kb=a("a"),vge=a("span"),F(_y.$$.fragment),oRo=l(),Fge=a("span"),rRo=o("AutoModelForSeq2SeqLM"),DGe=l(),Ro=a("div"),F(uy.$$.fragment),tRo=l(),Hi=a("p"),aRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hO=a("a"),nRo=o("from_pretrained()"),sRo=o(" class method or the "),pO=a("a"),lRo=o("from_config()"),iRo=o(` class
method.`),dRo=l(),by=a("p"),cRo=o("This class cannot be instantiated directly using "),Tge=a("code"),fRo=o("__init__()"),mRo=o(" (throws an error)."),gRo=l(),ct=a("div"),F(vy.$$.fragment),hRo=l(),Mge=a("p"),pRo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_Ro=l(),Ui=a("p"),uRo=o(`Note:
Loading a model from its configuration file does `),Ege=a("strong"),bRo=o("not"),vRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_O=a("a"),FRo=o("from_pretrained()"),TRo=o(" to load the model weights."),MRo=l(),F(Zb.$$.fragment),ERo=l(),eo=a("div"),F(Fy.$$.fragment),CRo=l(),Cge=a("p"),wRo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ARo=l(),Na=a("p"),LRo=o("The model class to instantiate is selected based on the "),wge=a("code"),yRo=o("model_type"),xRo=o(` property of the config object (either
passed as an argument or loaded from `),Age=a("code"),$Ro=o("pretrained_model_name_or_path"),kRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lge=a("code"),SRo=o("pretrained_model_name_or_path"),RRo=o(":"),PRo=l(),pe=a("ul"),e2=a("li"),yge=a("strong"),BRo=o("bart"),IRo=o(" \u2014 "),uO=a("a"),NRo=o("BartForConditionalGeneration"),qRo=o(" (BART model)"),jRo=l(),o2=a("li"),xge=a("strong"),DRo=o("bigbird_pegasus"),GRo=o(" \u2014 "),bO=a("a"),ORo=o("BigBirdPegasusForConditionalGeneration"),VRo=o(" (BigBird-Pegasus model)"),XRo=l(),r2=a("li"),$ge=a("strong"),zRo=o("blenderbot"),WRo=o(" \u2014 "),vO=a("a"),QRo=o("BlenderbotForConditionalGeneration"),HRo=o(" (Blenderbot model)"),URo=l(),t2=a("li"),kge=a("strong"),JRo=o("blenderbot-small"),YRo=o(" \u2014 "),FO=a("a"),KRo=o("BlenderbotSmallForConditionalGeneration"),ZRo=o(" (BlenderbotSmall model)"),ePo=l(),a2=a("li"),Sge=a("strong"),oPo=o("encoder-decoder"),rPo=o(" \u2014 "),TO=a("a"),tPo=o("EncoderDecoderModel"),aPo=o(" (Encoder decoder model)"),nPo=l(),n2=a("li"),Rge=a("strong"),sPo=o("fsmt"),lPo=o(" \u2014 "),MO=a("a"),iPo=o("FSMTForConditionalGeneration"),dPo=o(" (FairSeq Machine-Translation model)"),cPo=l(),s2=a("li"),Pge=a("strong"),fPo=o("led"),mPo=o(" \u2014 "),EO=a("a"),gPo=o("LEDForConditionalGeneration"),hPo=o(" (LED model)"),pPo=l(),l2=a("li"),Bge=a("strong"),_Po=o("longt5"),uPo=o(" \u2014 "),CO=a("a"),bPo=o("LongT5ForConditionalGeneration"),vPo=o(" (LongT5 model)"),FPo=l(),i2=a("li"),Ige=a("strong"),TPo=o("m2m_100"),MPo=o(" \u2014 "),wO=a("a"),EPo=o("M2M100ForConditionalGeneration"),CPo=o(" (M2M100 model)"),wPo=l(),d2=a("li"),Nge=a("strong"),APo=o("marian"),LPo=o(" \u2014 "),AO=a("a"),yPo=o("MarianMTModel"),xPo=o(" (Marian model)"),$Po=l(),c2=a("li"),qge=a("strong"),kPo=o("mbart"),SPo=o(" \u2014 "),LO=a("a"),RPo=o("MBartForConditionalGeneration"),PPo=o(" (mBART model)"),BPo=l(),f2=a("li"),jge=a("strong"),IPo=o("mt5"),NPo=o(" \u2014 "),yO=a("a"),qPo=o("MT5ForConditionalGeneration"),jPo=o(" (MT5 model)"),DPo=l(),m2=a("li"),Dge=a("strong"),GPo=o("pegasus"),OPo=o(" \u2014 "),xO=a("a"),VPo=o("PegasusForConditionalGeneration"),XPo=o(" (Pegasus model)"),zPo=l(),g2=a("li"),Gge=a("strong"),WPo=o("plbart"),QPo=o(" \u2014 "),$O=a("a"),HPo=o("PLBartForConditionalGeneration"),UPo=o(" (PLBart model)"),JPo=l(),h2=a("li"),Oge=a("strong"),YPo=o("prophetnet"),KPo=o(" \u2014 "),kO=a("a"),ZPo=o("ProphetNetForConditionalGeneration"),eBo=o(" (ProphetNet model)"),oBo=l(),p2=a("li"),Vge=a("strong"),rBo=o("t5"),tBo=o(" \u2014 "),SO=a("a"),aBo=o("T5ForConditionalGeneration"),nBo=o(" (T5 model)"),sBo=l(),_2=a("li"),Xge=a("strong"),lBo=o("xlm-prophetnet"),iBo=o(" \u2014 "),RO=a("a"),dBo=o("XLMProphetNetForConditionalGeneration"),cBo=o(" (XLM-ProphetNet model)"),fBo=l(),u2=a("p"),mBo=o("The model is set in evaluation mode by default using "),zge=a("code"),gBo=o("model.eval()"),hBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wge=a("code"),pBo=o("model.train()"),_Bo=l(),F(b2.$$.fragment),GGe=l(),Ji=a("h2"),v2=a("a"),Qge=a("span"),F(Ty.$$.fragment),uBo=l(),Hge=a("span"),bBo=o("AutoModelForSequenceClassification"),OGe=l(),Po=a("div"),F(My.$$.fragment),vBo=l(),Yi=a("p"),FBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),PO=a("a"),TBo=o("from_pretrained()"),MBo=o(" class method or the "),BO=a("a"),EBo=o("from_config()"),CBo=o(` class
method.`),wBo=l(),Ey=a("p"),ABo=o("This class cannot be instantiated directly using "),Uge=a("code"),LBo=o("__init__()"),yBo=o(" (throws an error)."),xBo=l(),ft=a("div"),F(Cy.$$.fragment),$Bo=l(),Jge=a("p"),kBo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),SBo=l(),Ki=a("p"),RBo=o(`Note:
Loading a model from its configuration file does `),Yge=a("strong"),PBo=o("not"),BBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=a("a"),IBo=o("from_pretrained()"),NBo=o(" to load the model weights."),qBo=l(),F(F2.$$.fragment),jBo=l(),oo=a("div"),F(wy.$$.fragment),DBo=l(),Kge=a("p"),GBo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),OBo=l(),qa=a("p"),VBo=o("The model class to instantiate is selected based on the "),Zge=a("code"),XBo=o("model_type"),zBo=o(` property of the config object (either
passed as an argument or loaded from `),ehe=a("code"),WBo=o("pretrained_model_name_or_path"),QBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ohe=a("code"),HBo=o("pretrained_model_name_or_path"),UBo=o(":"),JBo=l(),N=a("ul"),T2=a("li"),rhe=a("strong"),YBo=o("albert"),KBo=o(" \u2014 "),NO=a("a"),ZBo=o("AlbertForSequenceClassification"),eIo=o(" (ALBERT model)"),oIo=l(),M2=a("li"),the=a("strong"),rIo=o("bart"),tIo=o(" \u2014 "),qO=a("a"),aIo=o("BartForSequenceClassification"),nIo=o(" (BART model)"),sIo=l(),E2=a("li"),ahe=a("strong"),lIo=o("bert"),iIo=o(" \u2014 "),jO=a("a"),dIo=o("BertForSequenceClassification"),cIo=o(" (BERT model)"),fIo=l(),C2=a("li"),nhe=a("strong"),mIo=o("big_bird"),gIo=o(" \u2014 "),DO=a("a"),hIo=o("BigBirdForSequenceClassification"),pIo=o(" (BigBird model)"),_Io=l(),w2=a("li"),she=a("strong"),uIo=o("bigbird_pegasus"),bIo=o(" \u2014 "),GO=a("a"),vIo=o("BigBirdPegasusForSequenceClassification"),FIo=o(" (BigBird-Pegasus model)"),TIo=l(),A2=a("li"),lhe=a("strong"),MIo=o("bloom"),EIo=o(" \u2014 "),OO=a("a"),CIo=o("BloomForSequenceClassification"),wIo=o(" (BLOOM model)"),AIo=l(),L2=a("li"),ihe=a("strong"),LIo=o("camembert"),yIo=o(" \u2014 "),VO=a("a"),xIo=o("CamembertForSequenceClassification"),$Io=o(" (CamemBERT model)"),kIo=l(),y2=a("li"),dhe=a("strong"),SIo=o("canine"),RIo=o(" \u2014 "),XO=a("a"),PIo=o("CanineForSequenceClassification"),BIo=o(" (CANINE model)"),IIo=l(),x2=a("li"),che=a("strong"),NIo=o("convbert"),qIo=o(" \u2014 "),zO=a("a"),jIo=o("ConvBertForSequenceClassification"),DIo=o(" (ConvBERT model)"),GIo=l(),$2=a("li"),fhe=a("strong"),OIo=o("ctrl"),VIo=o(" \u2014 "),WO=a("a"),XIo=o("CTRLForSequenceClassification"),zIo=o(" (CTRL model)"),WIo=l(),k2=a("li"),mhe=a("strong"),QIo=o("data2vec-text"),HIo=o(" \u2014 "),QO=a("a"),UIo=o("Data2VecTextForSequenceClassification"),JIo=o(" (Data2VecText model)"),YIo=l(),S2=a("li"),ghe=a("strong"),KIo=o("deberta"),ZIo=o(" \u2014 "),HO=a("a"),eNo=o("DebertaForSequenceClassification"),oNo=o(" (DeBERTa model)"),rNo=l(),R2=a("li"),hhe=a("strong"),tNo=o("deberta-v2"),aNo=o(" \u2014 "),UO=a("a"),nNo=o("DebertaV2ForSequenceClassification"),sNo=o(" (DeBERTa-v2 model)"),lNo=l(),P2=a("li"),phe=a("strong"),iNo=o("distilbert"),dNo=o(" \u2014 "),JO=a("a"),cNo=o("DistilBertForSequenceClassification"),fNo=o(" (DistilBERT model)"),mNo=l(),B2=a("li"),_he=a("strong"),gNo=o("electra"),hNo=o(" \u2014 "),YO=a("a"),pNo=o("ElectraForSequenceClassification"),_No=o(" (ELECTRA model)"),uNo=l(),I2=a("li"),uhe=a("strong"),bNo=o("flaubert"),vNo=o(" \u2014 "),KO=a("a"),FNo=o("FlaubertForSequenceClassification"),TNo=o(" (FlauBERT model)"),MNo=l(),N2=a("li"),bhe=a("strong"),ENo=o("fnet"),CNo=o(" \u2014 "),ZO=a("a"),wNo=o("FNetForSequenceClassification"),ANo=o(" (FNet model)"),LNo=l(),q2=a("li"),vhe=a("strong"),yNo=o("funnel"),xNo=o(" \u2014 "),eV=a("a"),$No=o("FunnelForSequenceClassification"),kNo=o(" (Funnel Transformer model)"),SNo=l(),j2=a("li"),Fhe=a("strong"),RNo=o("gpt2"),PNo=o(" \u2014 "),oV=a("a"),BNo=o("GPT2ForSequenceClassification"),INo=o(" (OpenAI GPT-2 model)"),NNo=l(),D2=a("li"),The=a("strong"),qNo=o("gpt_neo"),jNo=o(" \u2014 "),rV=a("a"),DNo=o("GPTNeoForSequenceClassification"),GNo=o(" (GPT Neo model)"),ONo=l(),G2=a("li"),Mhe=a("strong"),VNo=o("gptj"),XNo=o(" \u2014 "),tV=a("a"),zNo=o("GPTJForSequenceClassification"),WNo=o(" (GPT-J model)"),QNo=l(),O2=a("li"),Ehe=a("strong"),HNo=o("ibert"),UNo=o(" \u2014 "),aV=a("a"),JNo=o("IBertForSequenceClassification"),YNo=o(" (I-BERT model)"),KNo=l(),V2=a("li"),Che=a("strong"),ZNo=o("layoutlm"),eqo=o(" \u2014 "),nV=a("a"),oqo=o("LayoutLMForSequenceClassification"),rqo=o(" (LayoutLM model)"),tqo=l(),X2=a("li"),whe=a("strong"),aqo=o("layoutlmv2"),nqo=o(" \u2014 "),sV=a("a"),sqo=o("LayoutLMv2ForSequenceClassification"),lqo=o(" (LayoutLMv2 model)"),iqo=l(),z2=a("li"),Ahe=a("strong"),dqo=o("layoutlmv3"),cqo=o(" \u2014 "),lV=a("a"),fqo=o("LayoutLMv3ForSequenceClassification"),mqo=o(" (LayoutLMv3 model)"),gqo=l(),W2=a("li"),Lhe=a("strong"),hqo=o("led"),pqo=o(" \u2014 "),iV=a("a"),_qo=o("LEDForSequenceClassification"),uqo=o(" (LED model)"),bqo=l(),Q2=a("li"),yhe=a("strong"),vqo=o("longformer"),Fqo=o(" \u2014 "),dV=a("a"),Tqo=o("LongformerForSequenceClassification"),Mqo=o(" (Longformer model)"),Eqo=l(),H2=a("li"),xhe=a("strong"),Cqo=o("mbart"),wqo=o(" \u2014 "),cV=a("a"),Aqo=o("MBartForSequenceClassification"),Lqo=o(" (mBART model)"),yqo=l(),U2=a("li"),$he=a("strong"),xqo=o("megatron-bert"),$qo=o(" \u2014 "),fV=a("a"),kqo=o("MegatronBertForSequenceClassification"),Sqo=o(" (Megatron-BERT model)"),Rqo=l(),J2=a("li"),khe=a("strong"),Pqo=o("mobilebert"),Bqo=o(" \u2014 "),mV=a("a"),Iqo=o("MobileBertForSequenceClassification"),Nqo=o(" (MobileBERT model)"),qqo=l(),Y2=a("li"),She=a("strong"),jqo=o("mpnet"),Dqo=o(" \u2014 "),gV=a("a"),Gqo=o("MPNetForSequenceClassification"),Oqo=o(" (MPNet model)"),Vqo=l(),K2=a("li"),Rhe=a("strong"),Xqo=o("nystromformer"),zqo=o(" \u2014 "),hV=a("a"),Wqo=o("NystromformerForSequenceClassification"),Qqo=o(" (Nystr\xF6mformer model)"),Hqo=l(),Z2=a("li"),Phe=a("strong"),Uqo=o("openai-gpt"),Jqo=o(" \u2014 "),pV=a("a"),Yqo=o("OpenAIGPTForSequenceClassification"),Kqo=o(" (OpenAI GPT model)"),Zqo=l(),e4=a("li"),Bhe=a("strong"),ejo=o("perceiver"),ojo=o(" \u2014 "),_V=a("a"),rjo=o("PerceiverForSequenceClassification"),tjo=o(" (Perceiver model)"),ajo=l(),o4=a("li"),Ihe=a("strong"),njo=o("plbart"),sjo=o(" \u2014 "),uV=a("a"),ljo=o("PLBartForSequenceClassification"),ijo=o(" (PLBart model)"),djo=l(),r4=a("li"),Nhe=a("strong"),cjo=o("qdqbert"),fjo=o(" \u2014 "),bV=a("a"),mjo=o("QDQBertForSequenceClassification"),gjo=o(" (QDQBert model)"),hjo=l(),t4=a("li"),qhe=a("strong"),pjo=o("reformer"),_jo=o(" \u2014 "),vV=a("a"),ujo=o("ReformerForSequenceClassification"),bjo=o(" (Reformer model)"),vjo=l(),a4=a("li"),jhe=a("strong"),Fjo=o("rembert"),Tjo=o(" \u2014 "),FV=a("a"),Mjo=o("RemBertForSequenceClassification"),Ejo=o(" (RemBERT model)"),Cjo=l(),n4=a("li"),Dhe=a("strong"),wjo=o("roberta"),Ajo=o(" \u2014 "),TV=a("a"),Ljo=o("RobertaForSequenceClassification"),yjo=o(" (RoBERTa model)"),xjo=l(),s4=a("li"),Ghe=a("strong"),$jo=o("roformer"),kjo=o(" \u2014 "),MV=a("a"),Sjo=o("RoFormerForSequenceClassification"),Rjo=o(" (RoFormer model)"),Pjo=l(),l4=a("li"),Ohe=a("strong"),Bjo=o("squeezebert"),Ijo=o(" \u2014 "),EV=a("a"),Njo=o("SqueezeBertForSequenceClassification"),qjo=o(" (SqueezeBERT model)"),jjo=l(),i4=a("li"),Vhe=a("strong"),Djo=o("tapas"),Gjo=o(" \u2014 "),CV=a("a"),Ojo=o("TapasForSequenceClassification"),Vjo=o(" (TAPAS model)"),Xjo=l(),d4=a("li"),Xhe=a("strong"),zjo=o("transfo-xl"),Wjo=o(" \u2014 "),wV=a("a"),Qjo=o("TransfoXLForSequenceClassification"),Hjo=o(" (Transformer-XL model)"),Ujo=l(),c4=a("li"),zhe=a("strong"),Jjo=o("xlm"),Yjo=o(" \u2014 "),AV=a("a"),Kjo=o("XLMForSequenceClassification"),Zjo=o(" (XLM model)"),eDo=l(),f4=a("li"),Whe=a("strong"),oDo=o("xlm-roberta"),rDo=o(" \u2014 "),LV=a("a"),tDo=o("XLMRobertaForSequenceClassification"),aDo=o(" (XLM-RoBERTa model)"),nDo=l(),m4=a("li"),Qhe=a("strong"),sDo=o("xlm-roberta-xl"),lDo=o(" \u2014 "),yV=a("a"),iDo=o("XLMRobertaXLForSequenceClassification"),dDo=o(" (XLM-RoBERTa-XL model)"),cDo=l(),g4=a("li"),Hhe=a("strong"),fDo=o("xlnet"),mDo=o(" \u2014 "),xV=a("a"),gDo=o("XLNetForSequenceClassification"),hDo=o(" (XLNet model)"),pDo=l(),h4=a("li"),Uhe=a("strong"),_Do=o("yoso"),uDo=o(" \u2014 "),$V=a("a"),bDo=o("YosoForSequenceClassification"),vDo=o(" (YOSO model)"),FDo=l(),p4=a("p"),TDo=o("The model is set in evaluation mode by default using "),Jhe=a("code"),MDo=o("model.eval()"),EDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=a("code"),CDo=o("model.train()"),wDo=l(),F(_4.$$.fragment),VGe=l(),Zi=a("h2"),u4=a("a"),Khe=a("span"),F(Ay.$$.fragment),ADo=l(),Zhe=a("span"),LDo=o("AutoModelForMultipleChoice"),XGe=l(),Bo=a("div"),F(Ly.$$.fragment),yDo=l(),ed=a("p"),xDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kV=a("a"),$Do=o("from_pretrained()"),kDo=o(" class method or the "),SV=a("a"),SDo=o("from_config()"),RDo=o(` class
method.`),PDo=l(),yy=a("p"),BDo=o("This class cannot be instantiated directly using "),epe=a("code"),IDo=o("__init__()"),NDo=o(" (throws an error)."),qDo=l(),mt=a("div"),F(xy.$$.fragment),jDo=l(),ope=a("p"),DDo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),GDo=l(),od=a("p"),ODo=o(`Note:
Loading a model from its configuration file does `),rpe=a("strong"),VDo=o("not"),XDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),zDo=o("from_pretrained()"),WDo=o(" to load the model weights."),QDo=l(),F(b4.$$.fragment),HDo=l(),ro=a("div"),F($y.$$.fragment),UDo=l(),tpe=a("p"),JDo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),YDo=l(),ja=a("p"),KDo=o("The model class to instantiate is selected based on the "),ape=a("code"),ZDo=o("model_type"),eGo=o(` property of the config object (either
passed as an argument or loaded from `),npe=a("code"),oGo=o("pretrained_model_name_or_path"),rGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=a("code"),tGo=o("pretrained_model_name_or_path"),aGo=o(":"),nGo=l(),Z=a("ul"),v4=a("li"),lpe=a("strong"),sGo=o("albert"),lGo=o(" \u2014 "),PV=a("a"),iGo=o("AlbertForMultipleChoice"),dGo=o(" (ALBERT model)"),cGo=l(),F4=a("li"),ipe=a("strong"),fGo=o("bert"),mGo=o(" \u2014 "),BV=a("a"),gGo=o("BertForMultipleChoice"),hGo=o(" (BERT model)"),pGo=l(),T4=a("li"),dpe=a("strong"),_Go=o("big_bird"),uGo=o(" \u2014 "),IV=a("a"),bGo=o("BigBirdForMultipleChoice"),vGo=o(" (BigBird model)"),FGo=l(),M4=a("li"),cpe=a("strong"),TGo=o("camembert"),MGo=o(" \u2014 "),NV=a("a"),EGo=o("CamembertForMultipleChoice"),CGo=o(" (CamemBERT model)"),wGo=l(),E4=a("li"),fpe=a("strong"),AGo=o("canine"),LGo=o(" \u2014 "),qV=a("a"),yGo=o("CanineForMultipleChoice"),xGo=o(" (CANINE model)"),$Go=l(),C4=a("li"),mpe=a("strong"),kGo=o("convbert"),SGo=o(" \u2014 "),jV=a("a"),RGo=o("ConvBertForMultipleChoice"),PGo=o(" (ConvBERT model)"),BGo=l(),w4=a("li"),gpe=a("strong"),IGo=o("data2vec-text"),NGo=o(" \u2014 "),DV=a("a"),qGo=o("Data2VecTextForMultipleChoice"),jGo=o(" (Data2VecText model)"),DGo=l(),A4=a("li"),hpe=a("strong"),GGo=o("deberta-v2"),OGo=o(" \u2014 "),GV=a("a"),VGo=o("DebertaV2ForMultipleChoice"),XGo=o(" (DeBERTa-v2 model)"),zGo=l(),L4=a("li"),ppe=a("strong"),WGo=o("distilbert"),QGo=o(" \u2014 "),OV=a("a"),HGo=o("DistilBertForMultipleChoice"),UGo=o(" (DistilBERT model)"),JGo=l(),y4=a("li"),_pe=a("strong"),YGo=o("electra"),KGo=o(" \u2014 "),VV=a("a"),ZGo=o("ElectraForMultipleChoice"),eOo=o(" (ELECTRA model)"),oOo=l(),x4=a("li"),upe=a("strong"),rOo=o("flaubert"),tOo=o(" \u2014 "),XV=a("a"),aOo=o("FlaubertForMultipleChoice"),nOo=o(" (FlauBERT model)"),sOo=l(),$4=a("li"),bpe=a("strong"),lOo=o("fnet"),iOo=o(" \u2014 "),zV=a("a"),dOo=o("FNetForMultipleChoice"),cOo=o(" (FNet model)"),fOo=l(),k4=a("li"),vpe=a("strong"),mOo=o("funnel"),gOo=o(" \u2014 "),WV=a("a"),hOo=o("FunnelForMultipleChoice"),pOo=o(" (Funnel Transformer model)"),_Oo=l(),S4=a("li"),Fpe=a("strong"),uOo=o("ibert"),bOo=o(" \u2014 "),QV=a("a"),vOo=o("IBertForMultipleChoice"),FOo=o(" (I-BERT model)"),TOo=l(),R4=a("li"),Tpe=a("strong"),MOo=o("longformer"),EOo=o(" \u2014 "),HV=a("a"),COo=o("LongformerForMultipleChoice"),wOo=o(" (Longformer model)"),AOo=l(),P4=a("li"),Mpe=a("strong"),LOo=o("megatron-bert"),yOo=o(" \u2014 "),UV=a("a"),xOo=o("MegatronBertForMultipleChoice"),$Oo=o(" (Megatron-BERT model)"),kOo=l(),B4=a("li"),Epe=a("strong"),SOo=o("mobilebert"),ROo=o(" \u2014 "),JV=a("a"),POo=o("MobileBertForMultipleChoice"),BOo=o(" (MobileBERT model)"),IOo=l(),I4=a("li"),Cpe=a("strong"),NOo=o("mpnet"),qOo=o(" \u2014 "),YV=a("a"),jOo=o("MPNetForMultipleChoice"),DOo=o(" (MPNet model)"),GOo=l(),N4=a("li"),wpe=a("strong"),OOo=o("nystromformer"),VOo=o(" \u2014 "),KV=a("a"),XOo=o("NystromformerForMultipleChoice"),zOo=o(" (Nystr\xF6mformer model)"),WOo=l(),q4=a("li"),Ape=a("strong"),QOo=o("qdqbert"),HOo=o(" \u2014 "),ZV=a("a"),UOo=o("QDQBertForMultipleChoice"),JOo=o(" (QDQBert model)"),YOo=l(),j4=a("li"),Lpe=a("strong"),KOo=o("rembert"),ZOo=o(" \u2014 "),eX=a("a"),eVo=o("RemBertForMultipleChoice"),oVo=o(" (RemBERT model)"),rVo=l(),D4=a("li"),ype=a("strong"),tVo=o("roberta"),aVo=o(" \u2014 "),oX=a("a"),nVo=o("RobertaForMultipleChoice"),sVo=o(" (RoBERTa model)"),lVo=l(),G4=a("li"),xpe=a("strong"),iVo=o("roformer"),dVo=o(" \u2014 "),rX=a("a"),cVo=o("RoFormerForMultipleChoice"),fVo=o(" (RoFormer model)"),mVo=l(),O4=a("li"),$pe=a("strong"),gVo=o("squeezebert"),hVo=o(" \u2014 "),tX=a("a"),pVo=o("SqueezeBertForMultipleChoice"),_Vo=o(" (SqueezeBERT model)"),uVo=l(),V4=a("li"),kpe=a("strong"),bVo=o("xlm"),vVo=o(" \u2014 "),aX=a("a"),FVo=o("XLMForMultipleChoice"),TVo=o(" (XLM model)"),MVo=l(),X4=a("li"),Spe=a("strong"),EVo=o("xlm-roberta"),CVo=o(" \u2014 "),nX=a("a"),wVo=o("XLMRobertaForMultipleChoice"),AVo=o(" (XLM-RoBERTa model)"),LVo=l(),z4=a("li"),Rpe=a("strong"),yVo=o("xlm-roberta-xl"),xVo=o(" \u2014 "),sX=a("a"),$Vo=o("XLMRobertaXLForMultipleChoice"),kVo=o(" (XLM-RoBERTa-XL model)"),SVo=l(),W4=a("li"),Ppe=a("strong"),RVo=o("xlnet"),PVo=o(" \u2014 "),lX=a("a"),BVo=o("XLNetForMultipleChoice"),IVo=o(" (XLNet model)"),NVo=l(),Q4=a("li"),Bpe=a("strong"),qVo=o("yoso"),jVo=o(" \u2014 "),iX=a("a"),DVo=o("YosoForMultipleChoice"),GVo=o(" (YOSO model)"),OVo=l(),H4=a("p"),VVo=o("The model is set in evaluation mode by default using "),Ipe=a("code"),XVo=o("model.eval()"),zVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=a("code"),WVo=o("model.train()"),QVo=l(),F(U4.$$.fragment),zGe=l(),rd=a("h2"),J4=a("a"),qpe=a("span"),F(ky.$$.fragment),HVo=l(),jpe=a("span"),UVo=o("AutoModelForNextSentencePrediction"),WGe=l(),Io=a("div"),F(Sy.$$.fragment),JVo=l(),td=a("p"),YVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dX=a("a"),KVo=o("from_pretrained()"),ZVo=o(" class method or the "),cX=a("a"),eXo=o("from_config()"),oXo=o(` class
method.`),rXo=l(),Ry=a("p"),tXo=o("This class cannot be instantiated directly using "),Dpe=a("code"),aXo=o("__init__()"),nXo=o(" (throws an error)."),sXo=l(),gt=a("div"),F(Py.$$.fragment),lXo=l(),Gpe=a("p"),iXo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dXo=l(),ad=a("p"),cXo=o(`Note:
Loading a model from its configuration file does `),Ope=a("strong"),fXo=o("not"),mXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=a("a"),gXo=o("from_pretrained()"),hXo=o(" to load the model weights."),pXo=l(),F(Y4.$$.fragment),_Xo=l(),to=a("div"),F(By.$$.fragment),uXo=l(),Vpe=a("p"),bXo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vXo=l(),Da=a("p"),FXo=o("The model class to instantiate is selected based on the "),Xpe=a("code"),TXo=o("model_type"),MXo=o(` property of the config object (either
passed as an argument or loaded from `),zpe=a("code"),EXo=o("pretrained_model_name_or_path"),CXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=a("code"),wXo=o("pretrained_model_name_or_path"),AXo=o(":"),LXo=l(),Zr=a("ul"),K4=a("li"),Qpe=a("strong"),yXo=o("bert"),xXo=o(" \u2014 "),mX=a("a"),$Xo=o("BertForNextSentencePrediction"),kXo=o(" (BERT model)"),SXo=l(),Z4=a("li"),Hpe=a("strong"),RXo=o("fnet"),PXo=o(" \u2014 "),gX=a("a"),BXo=o("FNetForNextSentencePrediction"),IXo=o(" (FNet model)"),NXo=l(),e5=a("li"),Upe=a("strong"),qXo=o("megatron-bert"),jXo=o(" \u2014 "),hX=a("a"),DXo=o("MegatronBertForNextSentencePrediction"),GXo=o(" (Megatron-BERT model)"),OXo=l(),o5=a("li"),Jpe=a("strong"),VXo=o("mobilebert"),XXo=o(" \u2014 "),pX=a("a"),zXo=o("MobileBertForNextSentencePrediction"),WXo=o(" (MobileBERT model)"),QXo=l(),r5=a("li"),Ype=a("strong"),HXo=o("qdqbert"),UXo=o(" \u2014 "),_X=a("a"),JXo=o("QDQBertForNextSentencePrediction"),YXo=o(" (QDQBert model)"),KXo=l(),t5=a("p"),ZXo=o("The model is set in evaluation mode by default using "),Kpe=a("code"),ezo=o("model.eval()"),ozo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zpe=a("code"),rzo=o("model.train()"),tzo=l(),F(a5.$$.fragment),QGe=l(),nd=a("h2"),n5=a("a"),e_e=a("span"),F(Iy.$$.fragment),azo=l(),o_e=a("span"),nzo=o("AutoModelForTokenClassification"),HGe=l(),No=a("div"),F(Ny.$$.fragment),szo=l(),sd=a("p"),lzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uX=a("a"),izo=o("from_pretrained()"),dzo=o(" class method or the "),bX=a("a"),czo=o("from_config()"),fzo=o(` class
method.`),mzo=l(),qy=a("p"),gzo=o("This class cannot be instantiated directly using "),r_e=a("code"),hzo=o("__init__()"),pzo=o(" (throws an error)."),_zo=l(),ht=a("div"),F(jy.$$.fragment),uzo=l(),t_e=a("p"),bzo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),vzo=l(),ld=a("p"),Fzo=o(`Note:
Loading a model from its configuration file does `),a_e=a("strong"),Tzo=o("not"),Mzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=a("a"),Ezo=o("from_pretrained()"),Czo=o(" to load the model weights."),wzo=l(),F(s5.$$.fragment),Azo=l(),ao=a("div"),F(Dy.$$.fragment),Lzo=l(),n_e=a("p"),yzo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xzo=l(),Ga=a("p"),$zo=o("The model class to instantiate is selected based on the "),s_e=a("code"),kzo=o("model_type"),Szo=o(` property of the config object (either
passed as an argument or loaded from `),l_e=a("code"),Rzo=o("pretrained_model_name_or_path"),Pzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i_e=a("code"),Bzo=o("pretrained_model_name_or_path"),Izo=o(":"),Nzo=l(),H=a("ul"),l5=a("li"),d_e=a("strong"),qzo=o("albert"),jzo=o(" \u2014 "),FX=a("a"),Dzo=o("AlbertForTokenClassification"),Gzo=o(" (ALBERT model)"),Ozo=l(),i5=a("li"),c_e=a("strong"),Vzo=o("bert"),Xzo=o(" \u2014 "),TX=a("a"),zzo=o("BertForTokenClassification"),Wzo=o(" (BERT model)"),Qzo=l(),d5=a("li"),f_e=a("strong"),Hzo=o("big_bird"),Uzo=o(" \u2014 "),MX=a("a"),Jzo=o("BigBirdForTokenClassification"),Yzo=o(" (BigBird model)"),Kzo=l(),c5=a("li"),m_e=a("strong"),Zzo=o("bloom"),eWo=o(" \u2014 "),EX=a("a"),oWo=o("BloomForTokenClassification"),rWo=o(" (BLOOM model)"),tWo=l(),f5=a("li"),g_e=a("strong"),aWo=o("camembert"),nWo=o(" \u2014 "),CX=a("a"),sWo=o("CamembertForTokenClassification"),lWo=o(" (CamemBERT model)"),iWo=l(),m5=a("li"),h_e=a("strong"),dWo=o("canine"),cWo=o(" \u2014 "),wX=a("a"),fWo=o("CanineForTokenClassification"),mWo=o(" (CANINE model)"),gWo=l(),g5=a("li"),p_e=a("strong"),hWo=o("convbert"),pWo=o(" \u2014 "),AX=a("a"),_Wo=o("ConvBertForTokenClassification"),uWo=o(" (ConvBERT model)"),bWo=l(),h5=a("li"),__e=a("strong"),vWo=o("data2vec-text"),FWo=o(" \u2014 "),LX=a("a"),TWo=o("Data2VecTextForTokenClassification"),MWo=o(" (Data2VecText model)"),EWo=l(),p5=a("li"),u_e=a("strong"),CWo=o("deberta"),wWo=o(" \u2014 "),yX=a("a"),AWo=o("DebertaForTokenClassification"),LWo=o(" (DeBERTa model)"),yWo=l(),_5=a("li"),b_e=a("strong"),xWo=o("deberta-v2"),$Wo=o(" \u2014 "),xX=a("a"),kWo=o("DebertaV2ForTokenClassification"),SWo=o(" (DeBERTa-v2 model)"),RWo=l(),u5=a("li"),v_e=a("strong"),PWo=o("distilbert"),BWo=o(" \u2014 "),$X=a("a"),IWo=o("DistilBertForTokenClassification"),NWo=o(" (DistilBERT model)"),qWo=l(),b5=a("li"),F_e=a("strong"),jWo=o("electra"),DWo=o(" \u2014 "),kX=a("a"),GWo=o("ElectraForTokenClassification"),OWo=o(" (ELECTRA model)"),VWo=l(),v5=a("li"),T_e=a("strong"),XWo=o("flaubert"),zWo=o(" \u2014 "),SX=a("a"),WWo=o("FlaubertForTokenClassification"),QWo=o(" (FlauBERT model)"),HWo=l(),F5=a("li"),M_e=a("strong"),UWo=o("fnet"),JWo=o(" \u2014 "),RX=a("a"),YWo=o("FNetForTokenClassification"),KWo=o(" (FNet model)"),ZWo=l(),T5=a("li"),E_e=a("strong"),eQo=o("funnel"),oQo=o(" \u2014 "),PX=a("a"),rQo=o("FunnelForTokenClassification"),tQo=o(" (Funnel Transformer model)"),aQo=l(),M5=a("li"),C_e=a("strong"),nQo=o("gpt2"),sQo=o(" \u2014 "),BX=a("a"),lQo=o("GPT2ForTokenClassification"),iQo=o(" (OpenAI GPT-2 model)"),dQo=l(),E5=a("li"),w_e=a("strong"),cQo=o("ibert"),fQo=o(" \u2014 "),IX=a("a"),mQo=o("IBertForTokenClassification"),gQo=o(" (I-BERT model)"),hQo=l(),C5=a("li"),A_e=a("strong"),pQo=o("layoutlm"),_Qo=o(" \u2014 "),NX=a("a"),uQo=o("LayoutLMForTokenClassification"),bQo=o(" (LayoutLM model)"),vQo=l(),w5=a("li"),L_e=a("strong"),FQo=o("layoutlmv2"),TQo=o(" \u2014 "),qX=a("a"),MQo=o("LayoutLMv2ForTokenClassification"),EQo=o(" (LayoutLMv2 model)"),CQo=l(),A5=a("li"),y_e=a("strong"),wQo=o("layoutlmv3"),AQo=o(" \u2014 "),jX=a("a"),LQo=o("LayoutLMv3ForTokenClassification"),yQo=o(" (LayoutLMv3 model)"),xQo=l(),L5=a("li"),x_e=a("strong"),$Qo=o("longformer"),kQo=o(" \u2014 "),DX=a("a"),SQo=o("LongformerForTokenClassification"),RQo=o(" (Longformer model)"),PQo=l(),y5=a("li"),$_e=a("strong"),BQo=o("megatron-bert"),IQo=o(" \u2014 "),GX=a("a"),NQo=o("MegatronBertForTokenClassification"),qQo=o(" (Megatron-BERT model)"),jQo=l(),x5=a("li"),k_e=a("strong"),DQo=o("mobilebert"),GQo=o(" \u2014 "),OX=a("a"),OQo=o("MobileBertForTokenClassification"),VQo=o(" (MobileBERT model)"),XQo=l(),$5=a("li"),S_e=a("strong"),zQo=o("mpnet"),WQo=o(" \u2014 "),VX=a("a"),QQo=o("MPNetForTokenClassification"),HQo=o(" (MPNet model)"),UQo=l(),k5=a("li"),R_e=a("strong"),JQo=o("nystromformer"),YQo=o(" \u2014 "),XX=a("a"),KQo=o("NystromformerForTokenClassification"),ZQo=o(" (Nystr\xF6mformer model)"),eHo=l(),S5=a("li"),P_e=a("strong"),oHo=o("qdqbert"),rHo=o(" \u2014 "),zX=a("a"),tHo=o("QDQBertForTokenClassification"),aHo=o(" (QDQBert model)"),nHo=l(),R5=a("li"),B_e=a("strong"),sHo=o("rembert"),lHo=o(" \u2014 "),WX=a("a"),iHo=o("RemBertForTokenClassification"),dHo=o(" (RemBERT model)"),cHo=l(),P5=a("li"),I_e=a("strong"),fHo=o("roberta"),mHo=o(" \u2014 "),QX=a("a"),gHo=o("RobertaForTokenClassification"),hHo=o(" (RoBERTa model)"),pHo=l(),B5=a("li"),N_e=a("strong"),_Ho=o("roformer"),uHo=o(" \u2014 "),HX=a("a"),bHo=o("RoFormerForTokenClassification"),vHo=o(" (RoFormer model)"),FHo=l(),I5=a("li"),q_e=a("strong"),THo=o("squeezebert"),MHo=o(" \u2014 "),UX=a("a"),EHo=o("SqueezeBertForTokenClassification"),CHo=o(" (SqueezeBERT model)"),wHo=l(),N5=a("li"),j_e=a("strong"),AHo=o("xlm"),LHo=o(" \u2014 "),JX=a("a"),yHo=o("XLMForTokenClassification"),xHo=o(" (XLM model)"),$Ho=l(),q5=a("li"),D_e=a("strong"),kHo=o("xlm-roberta"),SHo=o(" \u2014 "),YX=a("a"),RHo=o("XLMRobertaForTokenClassification"),PHo=o(" (XLM-RoBERTa model)"),BHo=l(),j5=a("li"),G_e=a("strong"),IHo=o("xlm-roberta-xl"),NHo=o(" \u2014 "),KX=a("a"),qHo=o("XLMRobertaXLForTokenClassification"),jHo=o(" (XLM-RoBERTa-XL model)"),DHo=l(),D5=a("li"),O_e=a("strong"),GHo=o("xlnet"),OHo=o(" \u2014 "),ZX=a("a"),VHo=o("XLNetForTokenClassification"),XHo=o(" (XLNet model)"),zHo=l(),G5=a("li"),V_e=a("strong"),WHo=o("yoso"),QHo=o(" \u2014 "),ez=a("a"),HHo=o("YosoForTokenClassification"),UHo=o(" (YOSO model)"),JHo=l(),O5=a("p"),YHo=o("The model is set in evaluation mode by default using "),X_e=a("code"),KHo=o("model.eval()"),ZHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z_e=a("code"),eUo=o("model.train()"),oUo=l(),F(V5.$$.fragment),UGe=l(),id=a("h2"),X5=a("a"),W_e=a("span"),F(Gy.$$.fragment),rUo=l(),Q_e=a("span"),tUo=o("AutoModelForQuestionAnswering"),JGe=l(),qo=a("div"),F(Oy.$$.fragment),aUo=l(),dd=a("p"),nUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),oz=a("a"),sUo=o("from_pretrained()"),lUo=o(" class method or the "),rz=a("a"),iUo=o("from_config()"),dUo=o(` class
method.`),cUo=l(),Vy=a("p"),fUo=o("This class cannot be instantiated directly using "),H_e=a("code"),mUo=o("__init__()"),gUo=o(" (throws an error)."),hUo=l(),pt=a("div"),F(Xy.$$.fragment),pUo=l(),U_e=a("p"),_Uo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uUo=l(),cd=a("p"),bUo=o(`Note:
Loading a model from its configuration file does `),J_e=a("strong"),vUo=o("not"),FUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=a("a"),TUo=o("from_pretrained()"),MUo=o(" to load the model weights."),EUo=l(),F(z5.$$.fragment),CUo=l(),no=a("div"),F(zy.$$.fragment),wUo=l(),Y_e=a("p"),AUo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),LUo=l(),Oa=a("p"),yUo=o("The model class to instantiate is selected based on the "),K_e=a("code"),xUo=o("model_type"),$Uo=o(` property of the config object (either
passed as an argument or loaded from `),Z_e=a("code"),kUo=o("pretrained_model_name_or_path"),SUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=a("code"),RUo=o("pretrained_model_name_or_path"),PUo=o(":"),BUo=l(),V=a("ul"),W5=a("li"),oue=a("strong"),IUo=o("albert"),NUo=o(" \u2014 "),az=a("a"),qUo=o("AlbertForQuestionAnswering"),jUo=o(" (ALBERT model)"),DUo=l(),Q5=a("li"),rue=a("strong"),GUo=o("bart"),OUo=o(" \u2014 "),nz=a("a"),VUo=o("BartForQuestionAnswering"),XUo=o(" (BART model)"),zUo=l(),H5=a("li"),tue=a("strong"),WUo=o("bert"),QUo=o(" \u2014 "),sz=a("a"),HUo=o("BertForQuestionAnswering"),UUo=o(" (BERT model)"),JUo=l(),U5=a("li"),aue=a("strong"),YUo=o("big_bird"),KUo=o(" \u2014 "),lz=a("a"),ZUo=o("BigBirdForQuestionAnswering"),eJo=o(" (BigBird model)"),oJo=l(),J5=a("li"),nue=a("strong"),rJo=o("bigbird_pegasus"),tJo=o(" \u2014 "),iz=a("a"),aJo=o("BigBirdPegasusForQuestionAnswering"),nJo=o(" (BigBird-Pegasus model)"),sJo=l(),Y5=a("li"),sue=a("strong"),lJo=o("camembert"),iJo=o(" \u2014 "),dz=a("a"),dJo=o("CamembertForQuestionAnswering"),cJo=o(" (CamemBERT model)"),fJo=l(),K5=a("li"),lue=a("strong"),mJo=o("canine"),gJo=o(" \u2014 "),cz=a("a"),hJo=o("CanineForQuestionAnswering"),pJo=o(" (CANINE model)"),_Jo=l(),Z5=a("li"),iue=a("strong"),uJo=o("convbert"),bJo=o(" \u2014 "),fz=a("a"),vJo=o("ConvBertForQuestionAnswering"),FJo=o(" (ConvBERT model)"),TJo=l(),ev=a("li"),due=a("strong"),MJo=o("data2vec-text"),EJo=o(" \u2014 "),mz=a("a"),CJo=o("Data2VecTextForQuestionAnswering"),wJo=o(" (Data2VecText model)"),AJo=l(),ov=a("li"),cue=a("strong"),LJo=o("deberta"),yJo=o(" \u2014 "),gz=a("a"),xJo=o("DebertaForQuestionAnswering"),$Jo=o(" (DeBERTa model)"),kJo=l(),rv=a("li"),fue=a("strong"),SJo=o("deberta-v2"),RJo=o(" \u2014 "),hz=a("a"),PJo=o("DebertaV2ForQuestionAnswering"),BJo=o(" (DeBERTa-v2 model)"),IJo=l(),tv=a("li"),mue=a("strong"),NJo=o("distilbert"),qJo=o(" \u2014 "),pz=a("a"),jJo=o("DistilBertForQuestionAnswering"),DJo=o(" (DistilBERT model)"),GJo=l(),av=a("li"),gue=a("strong"),OJo=o("electra"),VJo=o(" \u2014 "),_z=a("a"),XJo=o("ElectraForQuestionAnswering"),zJo=o(" (ELECTRA model)"),WJo=l(),nv=a("li"),hue=a("strong"),QJo=o("flaubert"),HJo=o(" \u2014 "),uz=a("a"),UJo=o("FlaubertForQuestionAnsweringSimple"),JJo=o(" (FlauBERT model)"),YJo=l(),sv=a("li"),pue=a("strong"),KJo=o("fnet"),ZJo=o(" \u2014 "),bz=a("a"),eYo=o("FNetForQuestionAnswering"),oYo=o(" (FNet model)"),rYo=l(),lv=a("li"),_ue=a("strong"),tYo=o("funnel"),aYo=o(" \u2014 "),vz=a("a"),nYo=o("FunnelForQuestionAnswering"),sYo=o(" (Funnel Transformer model)"),lYo=l(),iv=a("li"),uue=a("strong"),iYo=o("gptj"),dYo=o(" \u2014 "),Fz=a("a"),cYo=o("GPTJForQuestionAnswering"),fYo=o(" (GPT-J model)"),mYo=l(),dv=a("li"),bue=a("strong"),gYo=o("ibert"),hYo=o(" \u2014 "),Tz=a("a"),pYo=o("IBertForQuestionAnswering"),_Yo=o(" (I-BERT model)"),uYo=l(),cv=a("li"),vue=a("strong"),bYo=o("layoutlmv2"),vYo=o(" \u2014 "),Mz=a("a"),FYo=o("LayoutLMv2ForQuestionAnswering"),TYo=o(" (LayoutLMv2 model)"),MYo=l(),fv=a("li"),Fue=a("strong"),EYo=o("layoutlmv3"),CYo=o(" \u2014 "),Ez=a("a"),wYo=o("LayoutLMv3ForQuestionAnswering"),AYo=o(" (LayoutLMv3 model)"),LYo=l(),mv=a("li"),Tue=a("strong"),yYo=o("led"),xYo=o(" \u2014 "),Cz=a("a"),$Yo=o("LEDForQuestionAnswering"),kYo=o(" (LED model)"),SYo=l(),gv=a("li"),Mue=a("strong"),RYo=o("longformer"),PYo=o(" \u2014 "),wz=a("a"),BYo=o("LongformerForQuestionAnswering"),IYo=o(" (Longformer model)"),NYo=l(),hv=a("li"),Eue=a("strong"),qYo=o("lxmert"),jYo=o(" \u2014 "),Az=a("a"),DYo=o("LxmertForQuestionAnswering"),GYo=o(" (LXMERT model)"),OYo=l(),pv=a("li"),Cue=a("strong"),VYo=o("mbart"),XYo=o(" \u2014 "),Lz=a("a"),zYo=o("MBartForQuestionAnswering"),WYo=o(" (mBART model)"),QYo=l(),_v=a("li"),wue=a("strong"),HYo=o("megatron-bert"),UYo=o(" \u2014 "),yz=a("a"),JYo=o("MegatronBertForQuestionAnswering"),YYo=o(" (Megatron-BERT model)"),KYo=l(),uv=a("li"),Aue=a("strong"),ZYo=o("mobilebert"),eKo=o(" \u2014 "),xz=a("a"),oKo=o("MobileBertForQuestionAnswering"),rKo=o(" (MobileBERT model)"),tKo=l(),bv=a("li"),Lue=a("strong"),aKo=o("mpnet"),nKo=o(" \u2014 "),$z=a("a"),sKo=o("MPNetForQuestionAnswering"),lKo=o(" (MPNet model)"),iKo=l(),vv=a("li"),yue=a("strong"),dKo=o("nystromformer"),cKo=o(" \u2014 "),kz=a("a"),fKo=o("NystromformerForQuestionAnswering"),mKo=o(" (Nystr\xF6mformer model)"),gKo=l(),Fv=a("li"),xue=a("strong"),hKo=o("qdqbert"),pKo=o(" \u2014 "),Sz=a("a"),_Ko=o("QDQBertForQuestionAnswering"),uKo=o(" (QDQBert model)"),bKo=l(),Tv=a("li"),$ue=a("strong"),vKo=o("reformer"),FKo=o(" \u2014 "),Rz=a("a"),TKo=o("ReformerForQuestionAnswering"),MKo=o(" (Reformer model)"),EKo=l(),Mv=a("li"),kue=a("strong"),CKo=o("rembert"),wKo=o(" \u2014 "),Pz=a("a"),AKo=o("RemBertForQuestionAnswering"),LKo=o(" (RemBERT model)"),yKo=l(),Ev=a("li"),Sue=a("strong"),xKo=o("roberta"),$Ko=o(" \u2014 "),Bz=a("a"),kKo=o("RobertaForQuestionAnswering"),SKo=o(" (RoBERTa model)"),RKo=l(),Cv=a("li"),Rue=a("strong"),PKo=o("roformer"),BKo=o(" \u2014 "),Iz=a("a"),IKo=o("RoFormerForQuestionAnswering"),NKo=o(" (RoFormer model)"),qKo=l(),wv=a("li"),Pue=a("strong"),jKo=o("splinter"),DKo=o(" \u2014 "),Nz=a("a"),GKo=o("SplinterForQuestionAnswering"),OKo=o(" (Splinter model)"),VKo=l(),Av=a("li"),Bue=a("strong"),XKo=o("squeezebert"),zKo=o(" \u2014 "),qz=a("a"),WKo=o("SqueezeBertForQuestionAnswering"),QKo=o(" (SqueezeBERT model)"),HKo=l(),Lv=a("li"),Iue=a("strong"),UKo=o("xlm"),JKo=o(" \u2014 "),jz=a("a"),YKo=o("XLMForQuestionAnsweringSimple"),KKo=o(" (XLM model)"),ZKo=l(),yv=a("li"),Nue=a("strong"),eZo=o("xlm-roberta"),oZo=o(" \u2014 "),Dz=a("a"),rZo=o("XLMRobertaForQuestionAnswering"),tZo=o(" (XLM-RoBERTa model)"),aZo=l(),xv=a("li"),que=a("strong"),nZo=o("xlm-roberta-xl"),sZo=o(" \u2014 "),Gz=a("a"),lZo=o("XLMRobertaXLForQuestionAnswering"),iZo=o(" (XLM-RoBERTa-XL model)"),dZo=l(),$v=a("li"),jue=a("strong"),cZo=o("xlnet"),fZo=o(" \u2014 "),Oz=a("a"),mZo=o("XLNetForQuestionAnsweringSimple"),gZo=o(" (XLNet model)"),hZo=l(),kv=a("li"),Due=a("strong"),pZo=o("yoso"),_Zo=o(" \u2014 "),Vz=a("a"),uZo=o("YosoForQuestionAnswering"),bZo=o(" (YOSO model)"),vZo=l(),Sv=a("p"),FZo=o("The model is set in evaluation mode by default using "),Gue=a("code"),TZo=o("model.eval()"),MZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=a("code"),EZo=o("model.train()"),CZo=l(),F(Rv.$$.fragment),YGe=l(),fd=a("h2"),Pv=a("a"),Vue=a("span"),F(Wy.$$.fragment),wZo=l(),Xue=a("span"),AZo=o("AutoModelForTableQuestionAnswering"),KGe=l(),jo=a("div"),F(Qy.$$.fragment),LZo=l(),md=a("p"),yZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Xz=a("a"),xZo=o("from_pretrained()"),$Zo=o(" class method or the "),zz=a("a"),kZo=o("from_config()"),SZo=o(` class
method.`),RZo=l(),Hy=a("p"),PZo=o("This class cannot be instantiated directly using "),zue=a("code"),BZo=o("__init__()"),IZo=o(" (throws an error)."),NZo=l(),_t=a("div"),F(Uy.$$.fragment),qZo=l(),Wue=a("p"),jZo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),DZo=l(),gd=a("p"),GZo=o(`Note:
Loading a model from its configuration file does `),Que=a("strong"),OZo=o("not"),VZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=a("a"),XZo=o("from_pretrained()"),zZo=o(" to load the model weights."),WZo=l(),F(Bv.$$.fragment),QZo=l(),so=a("div"),F(Jy.$$.fragment),HZo=l(),Hue=a("p"),UZo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),JZo=l(),Va=a("p"),YZo=o("The model class to instantiate is selected based on the "),Uue=a("code"),KZo=o("model_type"),ZZo=o(` property of the config object (either
passed as an argument or loaded from `),Jue=a("code"),eer=o("pretrained_model_name_or_path"),oer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=a("code"),rer=o("pretrained_model_name_or_path"),ter=o(":"),aer=l(),Kue=a("ul"),Iv=a("li"),Zue=a("strong"),ner=o("tapas"),ser=o(" \u2014 "),Qz=a("a"),ler=o("TapasForQuestionAnswering"),ier=o(" (TAPAS model)"),der=l(),Nv=a("p"),cer=o("The model is set in evaluation mode by default using "),e1e=a("code"),fer=o("model.eval()"),mer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=a("code"),ger=o("model.train()"),her=l(),F(qv.$$.fragment),ZGe=l(),hd=a("h2"),jv=a("a"),r1e=a("span"),F(Yy.$$.fragment),per=l(),t1e=a("span"),_er=o("AutoModelForImageClassification"),eOe=l(),Do=a("div"),F(Ky.$$.fragment),uer=l(),pd=a("p"),ber=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Hz=a("a"),ver=o("from_pretrained()"),Fer=o(" class method or the "),Uz=a("a"),Ter=o("from_config()"),Mer=o(` class
method.`),Eer=l(),Zy=a("p"),Cer=o("This class cannot be instantiated directly using "),a1e=a("code"),wer=o("__init__()"),Aer=o(" (throws an error)."),Ler=l(),ut=a("div"),F(e8.$$.fragment),yer=l(),n1e=a("p"),xer=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$er=l(),_d=a("p"),ker=o(`Note:
Loading a model from its configuration file does `),s1e=a("strong"),Ser=o("not"),Rer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),Per=o("from_pretrained()"),Ber=o(" to load the model weights."),Ier=l(),F(Dv.$$.fragment),Ner=l(),lo=a("div"),F(o8.$$.fragment),qer=l(),l1e=a("p"),jer=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Der=l(),Xa=a("p"),Ger=o("The model class to instantiate is selected based on the "),i1e=a("code"),Oer=o("model_type"),Ver=o(` property of the config object (either
passed as an argument or loaded from `),d1e=a("code"),Xer=o("pretrained_model_name_or_path"),zer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=a("code"),Wer=o("pretrained_model_name_or_path"),Qer=o(":"),Her=l(),ue=a("ul"),Gv=a("li"),f1e=a("strong"),Uer=o("beit"),Jer=o(" \u2014 "),Yz=a("a"),Yer=o("BeitForImageClassification"),Ker=o(" (BEiT model)"),Zer=l(),Ov=a("li"),m1e=a("strong"),eor=o("convnext"),oor=o(" \u2014 "),Kz=a("a"),ror=o("ConvNextForImageClassification"),tor=o(" (ConvNeXT model)"),aor=l(),Vv=a("li"),g1e=a("strong"),nor=o("cvt"),sor=o(" \u2014 "),Zz=a("a"),lor=o("CvtForImageClassification"),ior=o(" (CvT model)"),dor=l(),Xv=a("li"),h1e=a("strong"),cor=o("data2vec-vision"),mor=o(" \u2014 "),eW=a("a"),gor=o("Data2VecVisionForImageClassification"),hor=o(" (Data2VecVision model)"),por=l(),Os=a("li"),p1e=a("strong"),_or=o("deit"),uor=o(" \u2014 "),oW=a("a"),bor=o("DeiTForImageClassification"),vor=o(" or "),rW=a("a"),For=o("DeiTForImageClassificationWithTeacher"),Tor=o(" (DeiT model)"),Mor=l(),zv=a("li"),_1e=a("strong"),Eor=o("imagegpt"),Cor=o(" \u2014 "),tW=a("a"),wor=o("ImageGPTForImageClassification"),Aor=o(" (ImageGPT model)"),Lor=l(),Vs=a("li"),u1e=a("strong"),yor=o("levit"),xor=o(" \u2014 "),aW=a("a"),$or=o("LevitForImageClassification"),kor=o(" or "),nW=a("a"),Sor=o("LevitForImageClassificationWithTeacher"),Ror=o(" (LeViT model)"),Por=l(),Wv=a("li"),b1e=a("strong"),Bor=o("mobilevit"),Ior=o(" \u2014 "),sW=a("a"),Nor=o("MobileViTForImageClassification"),qor=o(" (MobileViT model)"),jor=l(),bt=a("li"),v1e=a("strong"),Dor=o("perceiver"),Gor=o(" \u2014 "),lW=a("a"),Oor=o("PerceiverForImageClassificationLearned"),Vor=o(" or "),iW=a("a"),Xor=o("PerceiverForImageClassificationFourier"),zor=o(" or "),dW=a("a"),Wor=o("PerceiverForImageClassificationConvProcessing"),Qor=o(" (Perceiver model)"),Hor=l(),Qv=a("li"),F1e=a("strong"),Uor=o("poolformer"),Jor=o(" \u2014 "),cW=a("a"),Yor=o("PoolFormerForImageClassification"),Kor=o(" (PoolFormer model)"),Zor=l(),Hv=a("li"),T1e=a("strong"),err=o("regnet"),orr=o(" \u2014 "),fW=a("a"),rrr=o("RegNetForImageClassification"),trr=o(" (RegNet model)"),arr=l(),Uv=a("li"),M1e=a("strong"),nrr=o("resnet"),srr=o(" \u2014 "),mW=a("a"),lrr=o("ResNetForImageClassification"),irr=o(" (ResNet model)"),drr=l(),Jv=a("li"),E1e=a("strong"),crr=o("segformer"),frr=o(" \u2014 "),gW=a("a"),mrr=o("SegformerForImageClassification"),grr=o(" (SegFormer model)"),hrr=l(),Yv=a("li"),C1e=a("strong"),prr=o("swin"),_rr=o(" \u2014 "),hW=a("a"),urr=o("SwinForImageClassification"),brr=o(" (Swin Transformer model)"),vrr=l(),Kv=a("li"),w1e=a("strong"),Frr=o("van"),Trr=o(" \u2014 "),pW=a("a"),Mrr=o("VanForImageClassification"),Err=o(" (VAN model)"),Crr=l(),Zv=a("li"),A1e=a("strong"),wrr=o("vit"),Arr=o(" \u2014 "),_W=a("a"),Lrr=o("ViTForImageClassification"),yrr=o(" (ViT model)"),xrr=l(),e3=a("p"),$rr=o("The model is set in evaluation mode by default using "),L1e=a("code"),krr=o("model.eval()"),Srr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y1e=a("code"),Rrr=o("model.train()"),Prr=l(),F(o3.$$.fragment),oOe=l(),ud=a("h2"),r3=a("a"),x1e=a("span"),F(r8.$$.fragment),Brr=l(),$1e=a("span"),Irr=o("AutoModelForVision2Seq"),rOe=l(),Go=a("div"),F(t8.$$.fragment),Nrr=l(),bd=a("p"),qrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),uW=a("a"),jrr=o("from_pretrained()"),Drr=o(" class method or the "),bW=a("a"),Grr=o("from_config()"),Orr=o(` class
method.`),Vrr=l(),a8=a("p"),Xrr=o("This class cannot be instantiated directly using "),k1e=a("code"),zrr=o("__init__()"),Wrr=o(" (throws an error)."),Qrr=l(),vt=a("div"),F(n8.$$.fragment),Hrr=l(),S1e=a("p"),Urr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Jrr=l(),vd=a("p"),Yrr=o(`Note:
Loading a model from its configuration file does `),R1e=a("strong"),Krr=o("not"),Zrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=a("a"),etr=o("from_pretrained()"),otr=o(" to load the model weights."),rtr=l(),F(t3.$$.fragment),ttr=l(),io=a("div"),F(s8.$$.fragment),atr=l(),P1e=a("p"),ntr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),str=l(),za=a("p"),ltr=o("The model class to instantiate is selected based on the "),B1e=a("code"),itr=o("model_type"),dtr=o(` property of the config object (either
passed as an argument or loaded from `),I1e=a("code"),ctr=o("pretrained_model_name_or_path"),ftr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=a("code"),mtr=o("pretrained_model_name_or_path"),gtr=o(":"),htr=l(),q1e=a("ul"),a3=a("li"),j1e=a("strong"),ptr=o("vision-encoder-decoder"),_tr=o(" \u2014 "),FW=a("a"),utr=o("VisionEncoderDecoderModel"),btr=o(" (Vision Encoder decoder model)"),vtr=l(),n3=a("p"),Ftr=o("The model is set in evaluation mode by default using "),D1e=a("code"),Ttr=o("model.eval()"),Mtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G1e=a("code"),Etr=o("model.train()"),Ctr=l(),F(s3.$$.fragment),tOe=l(),Fd=a("h2"),l3=a("a"),O1e=a("span"),F(l8.$$.fragment),wtr=l(),V1e=a("span"),Atr=o("AutoModelForVisualQuestionAnswering"),aOe=l(),Oo=a("div"),F(i8.$$.fragment),Ltr=l(),Td=a("p"),ytr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),TW=a("a"),xtr=o("from_pretrained()"),$tr=o(" class method or the "),MW=a("a"),ktr=o("from_config()"),Str=o(` class
method.`),Rtr=l(),d8=a("p"),Ptr=o("This class cannot be instantiated directly using "),X1e=a("code"),Btr=o("__init__()"),Itr=o(" (throws an error)."),Ntr=l(),Ft=a("div"),F(c8.$$.fragment),qtr=l(),z1e=a("p"),jtr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Dtr=l(),Md=a("p"),Gtr=o(`Note:
Loading a model from its configuration file does `),W1e=a("strong"),Otr=o("not"),Vtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=a("a"),Xtr=o("from_pretrained()"),ztr=o(" to load the model weights."),Wtr=l(),F(i3.$$.fragment),Qtr=l(),co=a("div"),F(f8.$$.fragment),Htr=l(),Q1e=a("p"),Utr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Jtr=l(),Wa=a("p"),Ytr=o("The model class to instantiate is selected based on the "),H1e=a("code"),Ktr=o("model_type"),Ztr=o(` property of the config object (either
passed as an argument or loaded from `),U1e=a("code"),ear=o("pretrained_model_name_or_path"),oar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=a("code"),rar=o("pretrained_model_name_or_path"),tar=o(":"),aar=l(),Y1e=a("ul"),d3=a("li"),K1e=a("strong"),nar=o("vilt"),sar=o(" \u2014 "),CW=a("a"),lar=o("ViltForQuestionAnswering"),iar=o(" (ViLT model)"),dar=l(),c3=a("p"),car=o("The model is set in evaluation mode by default using "),Z1e=a("code"),far=o("model.eval()"),mar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ebe=a("code"),gar=o("model.train()"),har=l(),F(f3.$$.fragment),nOe=l(),Ed=a("h2"),m3=a("a"),obe=a("span"),F(m8.$$.fragment),par=l(),rbe=a("span"),_ar=o("AutoModelForAudioClassification"),sOe=l(),Vo=a("div"),F(g8.$$.fragment),uar=l(),Cd=a("p"),bar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),wW=a("a"),Far=o("from_pretrained()"),Tar=o(" class method or the "),AW=a("a"),Mar=o("from_config()"),Ear=o(` class
method.`),Car=l(),h8=a("p"),war=o("This class cannot be instantiated directly using "),tbe=a("code"),Aar=o("__init__()"),Lar=o(" (throws an error)."),yar=l(),Tt=a("div"),F(p8.$$.fragment),xar=l(),abe=a("p"),$ar=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),kar=l(),wd=a("p"),Sar=o(`Note:
Loading a model from its configuration file does `),nbe=a("strong"),Rar=o("not"),Par=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LW=a("a"),Bar=o("from_pretrained()"),Iar=o(" to load the model weights."),Nar=l(),F(g3.$$.fragment),qar=l(),fo=a("div"),F(_8.$$.fragment),jar=l(),sbe=a("p"),Dar=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Gar=l(),Qa=a("p"),Oar=o("The model class to instantiate is selected based on the "),lbe=a("code"),Var=o("model_type"),Xar=o(` property of the config object (either
passed as an argument or loaded from `),ibe=a("code"),zar=o("pretrained_model_name_or_path"),War=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=a("code"),Qar=o("pretrained_model_name_or_path"),Har=o(":"),Uar=l(),Pe=a("ul"),h3=a("li"),cbe=a("strong"),Jar=o("data2vec-audio"),Yar=o(" \u2014 "),yW=a("a"),Kar=o("Data2VecAudioForSequenceClassification"),Zar=o(" (Data2VecAudio model)"),enr=l(),p3=a("li"),fbe=a("strong"),onr=o("hubert"),rnr=o(" \u2014 "),xW=a("a"),tnr=o("HubertForSequenceClassification"),anr=o(" (Hubert model)"),nnr=l(),_3=a("li"),mbe=a("strong"),snr=o("sew"),lnr=o(" \u2014 "),$W=a("a"),inr=o("SEWForSequenceClassification"),dnr=o(" (SEW model)"),cnr=l(),u3=a("li"),gbe=a("strong"),fnr=o("sew-d"),mnr=o(" \u2014 "),kW=a("a"),gnr=o("SEWDForSequenceClassification"),hnr=o(" (SEW-D model)"),pnr=l(),b3=a("li"),hbe=a("strong"),_nr=o("unispeech"),unr=o(" \u2014 "),SW=a("a"),bnr=o("UniSpeechForSequenceClassification"),vnr=o(" (UniSpeech model)"),Fnr=l(),v3=a("li"),pbe=a("strong"),Tnr=o("unispeech-sat"),Mnr=o(" \u2014 "),RW=a("a"),Enr=o("UniSpeechSatForSequenceClassification"),Cnr=o(" (UniSpeechSat model)"),wnr=l(),F3=a("li"),_be=a("strong"),Anr=o("wav2vec2"),Lnr=o(" \u2014 "),PW=a("a"),ynr=o("Wav2Vec2ForSequenceClassification"),xnr=o(" (Wav2Vec2 model)"),$nr=l(),T3=a("li"),ube=a("strong"),knr=o("wav2vec2-conformer"),Snr=o(" \u2014 "),BW=a("a"),Rnr=o("Wav2Vec2ConformerForSequenceClassification"),Pnr=o(" (Wav2Vec2-Conformer model)"),Bnr=l(),M3=a("li"),bbe=a("strong"),Inr=o("wavlm"),Nnr=o(" \u2014 "),IW=a("a"),qnr=o("WavLMForSequenceClassification"),jnr=o(" (WavLM model)"),Dnr=l(),E3=a("p"),Gnr=o("The model is set in evaluation mode by default using "),vbe=a("code"),Onr=o("model.eval()"),Vnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fbe=a("code"),Xnr=o("model.train()"),znr=l(),F(C3.$$.fragment),lOe=l(),Ad=a("h2"),w3=a("a"),Tbe=a("span"),F(u8.$$.fragment),Wnr=l(),Mbe=a("span"),Qnr=o("AutoModelForAudioFrameClassification"),iOe=l(),Xo=a("div"),F(b8.$$.fragment),Hnr=l(),Ld=a("p"),Unr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),NW=a("a"),Jnr=o("from_pretrained()"),Ynr=o(" class method or the "),qW=a("a"),Knr=o("from_config()"),Znr=o(` class
method.`),esr=l(),v8=a("p"),osr=o("This class cannot be instantiated directly using "),Ebe=a("code"),rsr=o("__init__()"),tsr=o(" (throws an error)."),asr=l(),Mt=a("div"),F(F8.$$.fragment),nsr=l(),Cbe=a("p"),ssr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),lsr=l(),yd=a("p"),isr=o(`Note:
Loading a model from its configuration file does `),wbe=a("strong"),dsr=o("not"),csr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=a("a"),fsr=o("from_pretrained()"),msr=o(" to load the model weights."),gsr=l(),F(A3.$$.fragment),hsr=l(),mo=a("div"),F(T8.$$.fragment),psr=l(),Abe=a("p"),_sr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),usr=l(),Ha=a("p"),bsr=o("The model class to instantiate is selected based on the "),Lbe=a("code"),vsr=o("model_type"),Fsr=o(` property of the config object (either
passed as an argument or loaded from `),ybe=a("code"),Tsr=o("pretrained_model_name_or_path"),Msr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),Esr=o("pretrained_model_name_or_path"),Csr=o(":"),wsr=l(),et=a("ul"),L3=a("li"),$be=a("strong"),Asr=o("data2vec-audio"),Lsr=o(" \u2014 "),DW=a("a"),ysr=o("Data2VecAudioForAudioFrameClassification"),xsr=o(" (Data2VecAudio model)"),$sr=l(),y3=a("li"),kbe=a("strong"),ksr=o("unispeech-sat"),Ssr=o(" \u2014 "),GW=a("a"),Rsr=o("UniSpeechSatForAudioFrameClassification"),Psr=o(" (UniSpeechSat model)"),Bsr=l(),x3=a("li"),Sbe=a("strong"),Isr=o("wav2vec2"),Nsr=o(" \u2014 "),OW=a("a"),qsr=o("Wav2Vec2ForAudioFrameClassification"),jsr=o(" (Wav2Vec2 model)"),Dsr=l(),$3=a("li"),Rbe=a("strong"),Gsr=o("wav2vec2-conformer"),Osr=o(" \u2014 "),VW=a("a"),Vsr=o("Wav2Vec2ConformerForAudioFrameClassification"),Xsr=o(" (Wav2Vec2-Conformer model)"),zsr=l(),k3=a("li"),Pbe=a("strong"),Wsr=o("wavlm"),Qsr=o(" \u2014 "),XW=a("a"),Hsr=o("WavLMForAudioFrameClassification"),Usr=o(" (WavLM model)"),Jsr=l(),S3=a("p"),Ysr=o("The model is set in evaluation mode by default using "),Bbe=a("code"),Ksr=o("model.eval()"),Zsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ibe=a("code"),elr=o("model.train()"),olr=l(),F(R3.$$.fragment),dOe=l(),xd=a("h2"),P3=a("a"),Nbe=a("span"),F(M8.$$.fragment),rlr=l(),qbe=a("span"),tlr=o("AutoModelForCTC"),cOe=l(),zo=a("div"),F(E8.$$.fragment),alr=l(),$d=a("p"),nlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),zW=a("a"),slr=o("from_pretrained()"),llr=o(" class method or the "),WW=a("a"),ilr=o("from_config()"),dlr=o(` class
method.`),clr=l(),C8=a("p"),flr=o("This class cannot be instantiated directly using "),jbe=a("code"),mlr=o("__init__()"),glr=o(" (throws an error)."),hlr=l(),Et=a("div"),F(w8.$$.fragment),plr=l(),Dbe=a("p"),_lr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ulr=l(),kd=a("p"),blr=o(`Note:
Loading a model from its configuration file does `),Gbe=a("strong"),vlr=o("not"),Flr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),Tlr=o("from_pretrained()"),Mlr=o(" to load the model weights."),Elr=l(),F(B3.$$.fragment),Clr=l(),go=a("div"),F(A8.$$.fragment),wlr=l(),Obe=a("p"),Alr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Llr=l(),Ua=a("p"),ylr=o("The model class to instantiate is selected based on the "),Vbe=a("code"),xlr=o("model_type"),$lr=o(` property of the config object (either
passed as an argument or loaded from `),Xbe=a("code"),klr=o("pretrained_model_name_or_path"),Slr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=a("code"),Rlr=o("pretrained_model_name_or_path"),Plr=o(":"),Blr=l(),Le=a("ul"),I3=a("li"),Wbe=a("strong"),Ilr=o("data2vec-audio"),Nlr=o(" \u2014 "),HW=a("a"),qlr=o("Data2VecAudioForCTC"),jlr=o(" (Data2VecAudio model)"),Dlr=l(),N3=a("li"),Qbe=a("strong"),Glr=o("hubert"),Olr=o(" \u2014 "),UW=a("a"),Vlr=o("HubertForCTC"),Xlr=o(" (Hubert model)"),zlr=l(),q3=a("li"),Hbe=a("strong"),Wlr=o("mctct"),Qlr=o(" \u2014 "),JW=a("a"),Hlr=o("MCTCTForCTC"),Ulr=o(" (M-CTC-T model)"),Jlr=l(),j3=a("li"),Ube=a("strong"),Ylr=o("sew"),Klr=o(" \u2014 "),YW=a("a"),Zlr=o("SEWForCTC"),eir=o(" (SEW model)"),oir=l(),D3=a("li"),Jbe=a("strong"),rir=o("sew-d"),tir=o(" \u2014 "),KW=a("a"),air=o("SEWDForCTC"),nir=o(" (SEW-D model)"),sir=l(),G3=a("li"),Ybe=a("strong"),lir=o("unispeech"),iir=o(" \u2014 "),ZW=a("a"),dir=o("UniSpeechForCTC"),cir=o(" (UniSpeech model)"),fir=l(),O3=a("li"),Kbe=a("strong"),mir=o("unispeech-sat"),gir=o(" \u2014 "),eQ=a("a"),hir=o("UniSpeechSatForCTC"),pir=o(" (UniSpeechSat model)"),_ir=l(),V3=a("li"),Zbe=a("strong"),uir=o("wav2vec2"),bir=o(" \u2014 "),oQ=a("a"),vir=o("Wav2Vec2ForCTC"),Fir=o(" (Wav2Vec2 model)"),Tir=l(),X3=a("li"),e2e=a("strong"),Mir=o("wav2vec2-conformer"),Eir=o(" \u2014 "),rQ=a("a"),Cir=o("Wav2Vec2ConformerForCTC"),wir=o(" (Wav2Vec2-Conformer model)"),Air=l(),z3=a("li"),o2e=a("strong"),Lir=o("wavlm"),yir=o(" \u2014 "),tQ=a("a"),xir=o("WavLMForCTC"),$ir=o(" (WavLM model)"),kir=l(),W3=a("p"),Sir=o("The model is set in evaluation mode by default using "),r2e=a("code"),Rir=o("model.eval()"),Pir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t2e=a("code"),Bir=o("model.train()"),Iir=l(),F(Q3.$$.fragment),fOe=l(),Sd=a("h2"),H3=a("a"),a2e=a("span"),F(L8.$$.fragment),Nir=l(),n2e=a("span"),qir=o("AutoModelForSpeechSeq2Seq"),mOe=l(),Wo=a("div"),F(y8.$$.fragment),jir=l(),Rd=a("p"),Dir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),aQ=a("a"),Gir=o("from_pretrained()"),Oir=o(" class method or the "),nQ=a("a"),Vir=o("from_config()"),Xir=o(` class
method.`),zir=l(),x8=a("p"),Wir=o("This class cannot be instantiated directly using "),s2e=a("code"),Qir=o("__init__()"),Hir=o(" (throws an error)."),Uir=l(),Ct=a("div"),F($8.$$.fragment),Jir=l(),l2e=a("p"),Yir=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Kir=l(),Pd=a("p"),Zir=o(`Note:
Loading a model from its configuration file does `),i2e=a("strong"),edr=o("not"),odr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=a("a"),rdr=o("from_pretrained()"),tdr=o(" to load the model weights."),adr=l(),F(U3.$$.fragment),ndr=l(),ho=a("div"),F(k8.$$.fragment),sdr=l(),d2e=a("p"),ldr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),idr=l(),Ja=a("p"),ddr=o("The model class to instantiate is selected based on the "),c2e=a("code"),cdr=o("model_type"),fdr=o(` property of the config object (either
passed as an argument or loaded from `),f2e=a("code"),mdr=o("pretrained_model_name_or_path"),gdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=a("code"),hdr=o("pretrained_model_name_or_path"),pdr=o(":"),_dr=l(),S8=a("ul"),J3=a("li"),g2e=a("strong"),udr=o("speech-encoder-decoder"),bdr=o(" \u2014 "),lQ=a("a"),vdr=o("SpeechEncoderDecoderModel"),Fdr=o(" (Speech Encoder decoder model)"),Tdr=l(),Y3=a("li"),h2e=a("strong"),Mdr=o("speech_to_text"),Edr=o(" \u2014 "),iQ=a("a"),Cdr=o("Speech2TextForConditionalGeneration"),wdr=o(" (Speech2Text model)"),Adr=l(),K3=a("p"),Ldr=o("The model is set in evaluation mode by default using "),p2e=a("code"),ydr=o("model.eval()"),xdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_2e=a("code"),$dr=o("model.train()"),kdr=l(),F(Z3.$$.fragment),gOe=l(),Bd=a("h2"),eF=a("a"),u2e=a("span"),F(R8.$$.fragment),Sdr=l(),b2e=a("span"),Rdr=o("AutoModelForAudioXVector"),hOe=l(),Qo=a("div"),F(P8.$$.fragment),Pdr=l(),Id=a("p"),Bdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),dQ=a("a"),Idr=o("from_pretrained()"),Ndr=o(" class method or the "),cQ=a("a"),qdr=o("from_config()"),jdr=o(` class
method.`),Ddr=l(),B8=a("p"),Gdr=o("This class cannot be instantiated directly using "),v2e=a("code"),Odr=o("__init__()"),Vdr=o(" (throws an error)."),Xdr=l(),wt=a("div"),F(I8.$$.fragment),zdr=l(),F2e=a("p"),Wdr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Qdr=l(),Nd=a("p"),Hdr=o(`Note:
Loading a model from its configuration file does `),T2e=a("strong"),Udr=o("not"),Jdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=a("a"),Ydr=o("from_pretrained()"),Kdr=o(" to load the model weights."),Zdr=l(),F(oF.$$.fragment),ecr=l(),po=a("div"),F(N8.$$.fragment),ocr=l(),M2e=a("p"),rcr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),tcr=l(),Ya=a("p"),acr=o("The model class to instantiate is selected based on the "),E2e=a("code"),ncr=o("model_type"),scr=o(` property of the config object (either
passed as an argument or loaded from `),C2e=a("code"),lcr=o("pretrained_model_name_or_path"),icr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=a("code"),dcr=o("pretrained_model_name_or_path"),ccr=o(":"),fcr=l(),ot=a("ul"),rF=a("li"),A2e=a("strong"),mcr=o("data2vec-audio"),gcr=o(" \u2014 "),mQ=a("a"),hcr=o("Data2VecAudioForXVector"),pcr=o(" (Data2VecAudio model)"),_cr=l(),tF=a("li"),L2e=a("strong"),ucr=o("unispeech-sat"),bcr=o(" \u2014 "),gQ=a("a"),vcr=o("UniSpeechSatForXVector"),Fcr=o(" (UniSpeechSat model)"),Tcr=l(),aF=a("li"),y2e=a("strong"),Mcr=o("wav2vec2"),Ecr=o(" \u2014 "),hQ=a("a"),Ccr=o("Wav2Vec2ForXVector"),wcr=o(" (Wav2Vec2 model)"),Acr=l(),nF=a("li"),x2e=a("strong"),Lcr=o("wav2vec2-conformer"),ycr=o(" \u2014 "),pQ=a("a"),xcr=o("Wav2Vec2ConformerForXVector"),$cr=o(" (Wav2Vec2-Conformer model)"),kcr=l(),sF=a("li"),$2e=a("strong"),Scr=o("wavlm"),Rcr=o(" \u2014 "),_Q=a("a"),Pcr=o("WavLMForXVector"),Bcr=o(" (WavLM model)"),Icr=l(),lF=a("p"),Ncr=o("The model is set in evaluation mode by default using "),k2e=a("code"),qcr=o("model.eval()"),jcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S2e=a("code"),Dcr=o("model.train()"),Gcr=l(),F(iF.$$.fragment),pOe=l(),qd=a("h2"),dF=a("a"),R2e=a("span"),F(q8.$$.fragment),Ocr=l(),P2e=a("span"),Vcr=o("AutoModelForMaskedImageModeling"),_Oe=l(),Ho=a("div"),F(j8.$$.fragment),Xcr=l(),jd=a("p"),zcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),uQ=a("a"),Wcr=o("from_pretrained()"),Qcr=o(" class method or the "),bQ=a("a"),Hcr=o("from_config()"),Ucr=o(` class
method.`),Jcr=l(),D8=a("p"),Ycr=o("This class cannot be instantiated directly using "),B2e=a("code"),Kcr=o("__init__()"),Zcr=o(" (throws an error)."),efr=l(),At=a("div"),F(G8.$$.fragment),ofr=l(),I2e=a("p"),rfr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),tfr=l(),Dd=a("p"),afr=o(`Note:
Loading a model from its configuration file does `),N2e=a("strong"),nfr=o("not"),sfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=a("a"),lfr=o("from_pretrained()"),ifr=o(" to load the model weights."),dfr=l(),F(cF.$$.fragment),cfr=l(),_o=a("div"),F(O8.$$.fragment),ffr=l(),q2e=a("p"),mfr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),gfr=l(),Ka=a("p"),hfr=o("The model class to instantiate is selected based on the "),j2e=a("code"),pfr=o("model_type"),_fr=o(` property of the config object (either
passed as an argument or loaded from `),D2e=a("code"),ufr=o("pretrained_model_name_or_path"),bfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G2e=a("code"),vfr=o("pretrained_model_name_or_path"),Ffr=o(":"),Tfr=l(),Gd=a("ul"),fF=a("li"),O2e=a("strong"),Mfr=o("deit"),Efr=o(" \u2014 "),FQ=a("a"),Cfr=o("DeiTForMaskedImageModeling"),wfr=o(" (DeiT model)"),Afr=l(),mF=a("li"),V2e=a("strong"),Lfr=o("swin"),yfr=o(" \u2014 "),TQ=a("a"),xfr=o("SwinForMaskedImageModeling"),$fr=o(" (Swin Transformer model)"),kfr=l(),gF=a("li"),X2e=a("strong"),Sfr=o("vit"),Rfr=o(" \u2014 "),MQ=a("a"),Pfr=o("ViTForMaskedImageModeling"),Bfr=o(" (ViT model)"),Ifr=l(),hF=a("p"),Nfr=o("The model is set in evaluation mode by default using "),z2e=a("code"),qfr=o("model.eval()"),jfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W2e=a("code"),Dfr=o("model.train()"),Gfr=l(),F(pF.$$.fragment),uOe=l(),Od=a("h2"),_F=a("a"),Q2e=a("span"),F(V8.$$.fragment),Ofr=l(),H2e=a("span"),Vfr=o("AutoModelForObjectDetection"),bOe=l(),Uo=a("div"),F(X8.$$.fragment),Xfr=l(),Vd=a("p"),zfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),EQ=a("a"),Wfr=o("from_pretrained()"),Qfr=o(" class method or the "),CQ=a("a"),Hfr=o("from_config()"),Ufr=o(` class
method.`),Jfr=l(),z8=a("p"),Yfr=o("This class cannot be instantiated directly using "),U2e=a("code"),Kfr=o("__init__()"),Zfr=o(" (throws an error)."),emr=l(),Lt=a("div"),F(W8.$$.fragment),omr=l(),J2e=a("p"),rmr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),tmr=l(),Xd=a("p"),amr=o(`Note:
Loading a model from its configuration file does `),Y2e=a("strong"),nmr=o("not"),smr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=a("a"),lmr=o("from_pretrained()"),imr=o(" to load the model weights."),dmr=l(),F(uF.$$.fragment),cmr=l(),uo=a("div"),F(Q8.$$.fragment),fmr=l(),K2e=a("p"),mmr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),gmr=l(),Za=a("p"),hmr=o("The model class to instantiate is selected based on the "),Z2e=a("code"),pmr=o("model_type"),_mr=o(` property of the config object (either
passed as an argument or loaded from `),e4e=a("code"),umr=o("pretrained_model_name_or_path"),bmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=a("code"),vmr=o("pretrained_model_name_or_path"),Fmr=o(":"),Tmr=l(),H8=a("ul"),bF=a("li"),r4e=a("strong"),Mmr=o("detr"),Emr=o(" \u2014 "),AQ=a("a"),Cmr=o("DetrForObjectDetection"),wmr=o(" (DETR model)"),Amr=l(),vF=a("li"),t4e=a("strong"),Lmr=o("yolos"),ymr=o(" \u2014 "),LQ=a("a"),xmr=o("YolosForObjectDetection"),$mr=o(" (YOLOS model)"),kmr=l(),FF=a("p"),Smr=o("The model is set in evaluation mode by default using "),a4e=a("code"),Rmr=o("model.eval()"),Pmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n4e=a("code"),Bmr=o("model.train()"),Imr=l(),F(TF.$$.fragment),vOe=l(),zd=a("h2"),MF=a("a"),s4e=a("span"),F(U8.$$.fragment),Nmr=l(),l4e=a("span"),qmr=o("AutoModelForImageSegmentation"),FOe=l(),Jo=a("div"),F(J8.$$.fragment),jmr=l(),Wd=a("p"),Dmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),yQ=a("a"),Gmr=o("from_pretrained()"),Omr=o(" class method or the "),xQ=a("a"),Vmr=o("from_config()"),Xmr=o(` class
method.`),zmr=l(),Y8=a("p"),Wmr=o("This class cannot be instantiated directly using "),i4e=a("code"),Qmr=o("__init__()"),Hmr=o(" (throws an error)."),Umr=l(),yt=a("div"),F(K8.$$.fragment),Jmr=l(),d4e=a("p"),Ymr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Kmr=l(),Qd=a("p"),Zmr=o(`Note:
Loading a model from its configuration file does `),c4e=a("strong"),egr=o("not"),ogr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),rgr=o("from_pretrained()"),tgr=o(" to load the model weights."),agr=l(),F(EF.$$.fragment),ngr=l(),bo=a("div"),F(Z8.$$.fragment),sgr=l(),f4e=a("p"),lgr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),igr=l(),en=a("p"),dgr=o("The model class to instantiate is selected based on the "),m4e=a("code"),cgr=o("model_type"),fgr=o(` property of the config object (either
passed as an argument or loaded from `),g4e=a("code"),mgr=o("pretrained_model_name_or_path"),ggr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=a("code"),hgr=o("pretrained_model_name_or_path"),pgr=o(":"),_gr=l(),p4e=a("ul"),CF=a("li"),_4e=a("strong"),ugr=o("detr"),bgr=o(" \u2014 "),kQ=a("a"),vgr=o("DetrForSegmentation"),Fgr=o(" (DETR model)"),Tgr=l(),wF=a("p"),Mgr=o("The model is set in evaluation mode by default using "),u4e=a("code"),Egr=o("model.eval()"),Cgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b4e=a("code"),wgr=o("model.train()"),Agr=l(),F(AF.$$.fragment),TOe=l(),Hd=a("h2"),LF=a("a"),v4e=a("span"),F(e9.$$.fragment),Lgr=l(),F4e=a("span"),ygr=o("AutoModelForSemanticSegmentation"),MOe=l(),Yo=a("div"),F(o9.$$.fragment),xgr=l(),Ud=a("p"),$gr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),SQ=a("a"),kgr=o("from_pretrained()"),Sgr=o(" class method or the "),RQ=a("a"),Rgr=o("from_config()"),Pgr=o(` class
method.`),Bgr=l(),r9=a("p"),Igr=o("This class cannot be instantiated directly using "),T4e=a("code"),Ngr=o("__init__()"),qgr=o(" (throws an error)."),jgr=l(),xt=a("div"),F(t9.$$.fragment),Dgr=l(),M4e=a("p"),Ggr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ogr=l(),Jd=a("p"),Vgr=o(`Note:
Loading a model from its configuration file does `),E4e=a("strong"),Xgr=o("not"),zgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=a("a"),Wgr=o("from_pretrained()"),Qgr=o(" to load the model weights."),Hgr=l(),F(yF.$$.fragment),Ugr=l(),vo=a("div"),F(a9.$$.fragment),Jgr=l(),C4e=a("p"),Ygr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Kgr=l(),on=a("p"),Zgr=o("The model class to instantiate is selected based on the "),w4e=a("code"),ehr=o("model_type"),ohr=o(` property of the config object (either
passed as an argument or loaded from `),A4e=a("code"),rhr=o("pretrained_model_name_or_path"),thr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L4e=a("code"),ahr=o("pretrained_model_name_or_path"),nhr=o(":"),shr=l(),rt=a("ul"),xF=a("li"),y4e=a("strong"),lhr=o("beit"),ihr=o(" \u2014 "),BQ=a("a"),dhr=o("BeitForSemanticSegmentation"),chr=o(" (BEiT model)"),fhr=l(),$F=a("li"),x4e=a("strong"),mhr=o("data2vec-vision"),ghr=o(" \u2014 "),IQ=a("a"),hhr=o("Data2VecVisionForSemanticSegmentation"),phr=o(" (Data2VecVision model)"),_hr=l(),kF=a("li"),$4e=a("strong"),uhr=o("dpt"),bhr=o(" \u2014 "),NQ=a("a"),vhr=o("DPTForSemanticSegmentation"),Fhr=o(" (DPT model)"),Thr=l(),SF=a("li"),k4e=a("strong"),Mhr=o("mobilevit"),Ehr=o(" \u2014 "),qQ=a("a"),Chr=o("MobileViTForSemanticSegmentation"),whr=o(" (MobileViT model)"),Ahr=l(),RF=a("li"),S4e=a("strong"),Lhr=o("segformer"),yhr=o(" \u2014 "),jQ=a("a"),xhr=o("SegformerForSemanticSegmentation"),$hr=o(" (SegFormer model)"),khr=l(),PF=a("p"),Shr=o("The model is set in evaluation mode by default using "),R4e=a("code"),Rhr=o("model.eval()"),Phr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P4e=a("code"),Bhr=o("model.train()"),Ihr=l(),F(BF.$$.fragment),EOe=l(),Yd=a("h2"),IF=a("a"),B4e=a("span"),F(n9.$$.fragment),Nhr=l(),I4e=a("span"),qhr=o("AutoModelForInstanceSegmentation"),COe=l(),Ko=a("div"),F(s9.$$.fragment),jhr=l(),Kd=a("p"),Dhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),DQ=a("a"),Ghr=o("from_pretrained()"),Ohr=o(" class method or the "),GQ=a("a"),Vhr=o("from_config()"),Xhr=o(` class
method.`),zhr=l(),l9=a("p"),Whr=o("This class cannot be instantiated directly using "),N4e=a("code"),Qhr=o("__init__()"),Hhr=o(" (throws an error)."),Uhr=l(),$t=a("div"),F(i9.$$.fragment),Jhr=l(),q4e=a("p"),Yhr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Khr=l(),Zd=a("p"),Zhr=o(`Note:
Loading a model from its configuration file does `),j4e=a("strong"),epr=o("not"),opr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=a("a"),rpr=o("from_pretrained()"),tpr=o(" to load the model weights."),apr=l(),F(NF.$$.fragment),npr=l(),Fo=a("div"),F(d9.$$.fragment),spr=l(),D4e=a("p"),lpr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ipr=l(),rn=a("p"),dpr=o("The model class to instantiate is selected based on the "),G4e=a("code"),cpr=o("model_type"),fpr=o(` property of the config object (either
passed as an argument or loaded from `),O4e=a("code"),mpr=o("pretrained_model_name_or_path"),gpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=a("code"),hpr=o("pretrained_model_name_or_path"),ppr=o(":"),_pr=l(),X4e=a("ul"),qF=a("li"),z4e=a("strong"),upr=o("maskformer"),bpr=o(" \u2014 "),VQ=a("a"),vpr=o("MaskFormerForInstanceSegmentation"),Fpr=o(" (MaskFormer model)"),Tpr=l(),jF=a("p"),Mpr=o("The model is set in evaluation mode by default using "),W4e=a("code"),Epr=o("model.eval()"),Cpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q4e=a("code"),wpr=o("model.train()"),Apr=l(),F(DF.$$.fragment),wOe=l(),ec=a("h2"),GF=a("a"),H4e=a("span"),F(c9.$$.fragment),Lpr=l(),U4e=a("span"),ypr=o("TFAutoModel"),AOe=l(),Zo=a("div"),F(f9.$$.fragment),xpr=l(),oc=a("p"),$pr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XQ=a("a"),kpr=o("from_pretrained()"),Spr=o(" class method or the "),zQ=a("a"),Rpr=o("from_config()"),Ppr=o(` class
method.`),Bpr=l(),m9=a("p"),Ipr=o("This class cannot be instantiated directly using "),J4e=a("code"),Npr=o("__init__()"),qpr=o(" (throws an error)."),jpr=l(),kt=a("div"),F(g9.$$.fragment),Dpr=l(),Y4e=a("p"),Gpr=o("Instantiates one of the base model classes of the library from a configuration."),Opr=l(),rc=a("p"),Vpr=o(`Note:
Loading a model from its configuration file does `),K4e=a("strong"),Xpr=o("not"),zpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=a("a"),Wpr=o("from_pretrained()"),Qpr=o(" to load the model weights."),Hpr=l(),F(OF.$$.fragment),Upr=l(),Lr=a("div"),F(h9.$$.fragment),Jpr=l(),Z4e=a("p"),Ypr=o("Instantiate one of the base model classes of the library from a pretrained model."),Kpr=l(),tn=a("p"),Zpr=o("The model class to instantiate is selected based on the "),e5e=a("code"),e_r=o("model_type"),o_r=o(` property of the config object (either
passed as an argument or loaded from `),o5e=a("code"),r_r=o("pretrained_model_name_or_path"),t_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r5e=a("code"),a_r=o("pretrained_model_name_or_path"),n_r=o(":"),s_r=l(),q=a("ul"),VF=a("li"),t5e=a("strong"),l_r=o("albert"),i_r=o(" \u2014 "),QQ=a("a"),d_r=o("TFAlbertModel"),c_r=o(" (ALBERT model)"),f_r=l(),XF=a("li"),a5e=a("strong"),m_r=o("bart"),g_r=o(" \u2014 "),HQ=a("a"),h_r=o("TFBartModel"),p_r=o(" (BART model)"),__r=l(),zF=a("li"),n5e=a("strong"),u_r=o("bert"),b_r=o(" \u2014 "),UQ=a("a"),v_r=o("TFBertModel"),F_r=o(" (BERT model)"),T_r=l(),WF=a("li"),s5e=a("strong"),M_r=o("blenderbot"),E_r=o(" \u2014 "),JQ=a("a"),C_r=o("TFBlenderbotModel"),w_r=o(" (Blenderbot model)"),A_r=l(),QF=a("li"),l5e=a("strong"),L_r=o("blenderbot-small"),y_r=o(" \u2014 "),YQ=a("a"),x_r=o("TFBlenderbotSmallModel"),$_r=o(" (BlenderbotSmall model)"),k_r=l(),HF=a("li"),i5e=a("strong"),S_r=o("camembert"),R_r=o(" \u2014 "),KQ=a("a"),P_r=o("TFCamembertModel"),B_r=o(" (CamemBERT model)"),I_r=l(),UF=a("li"),d5e=a("strong"),N_r=o("clip"),q_r=o(" \u2014 "),ZQ=a("a"),j_r=o("TFCLIPModel"),D_r=o(" (CLIP model)"),G_r=l(),JF=a("li"),c5e=a("strong"),O_r=o("convbert"),V_r=o(" \u2014 "),eH=a("a"),X_r=o("TFConvBertModel"),z_r=o(" (ConvBERT model)"),W_r=l(),YF=a("li"),f5e=a("strong"),Q_r=o("convnext"),H_r=o(" \u2014 "),oH=a("a"),U_r=o("TFConvNextModel"),J_r=o(" (ConvNeXT model)"),Y_r=l(),KF=a("li"),m5e=a("strong"),K_r=o("ctrl"),Z_r=o(" \u2014 "),rH=a("a"),eur=o("TFCTRLModel"),our=o(" (CTRL model)"),rur=l(),ZF=a("li"),g5e=a("strong"),tur=o("data2vec-vision"),aur=o(" \u2014 "),tH=a("a"),nur=o("TFData2VecVisionModel"),sur=o(" (Data2VecVision model)"),lur=l(),eT=a("li"),h5e=a("strong"),iur=o("deberta"),dur=o(" \u2014 "),aH=a("a"),cur=o("TFDebertaModel"),fur=o(" (DeBERTa model)"),mur=l(),oT=a("li"),p5e=a("strong"),gur=o("deberta-v2"),hur=o(" \u2014 "),nH=a("a"),pur=o("TFDebertaV2Model"),_ur=o(" (DeBERTa-v2 model)"),uur=l(),rT=a("li"),_5e=a("strong"),bur=o("distilbert"),vur=o(" \u2014 "),sH=a("a"),Fur=o("TFDistilBertModel"),Tur=o(" (DistilBERT model)"),Mur=l(),tT=a("li"),u5e=a("strong"),Eur=o("dpr"),Cur=o(" \u2014 "),lH=a("a"),wur=o("TFDPRQuestionEncoder"),Aur=o(" (DPR model)"),Lur=l(),aT=a("li"),b5e=a("strong"),yur=o("electra"),xur=o(" \u2014 "),iH=a("a"),$ur=o("TFElectraModel"),kur=o(" (ELECTRA model)"),Sur=l(),nT=a("li"),v5e=a("strong"),Rur=o("flaubert"),Pur=o(" \u2014 "),dH=a("a"),Bur=o("TFFlaubertModel"),Iur=o(" (FlauBERT model)"),Nur=l(),Xs=a("li"),F5e=a("strong"),qur=o("funnel"),jur=o(" \u2014 "),cH=a("a"),Dur=o("TFFunnelModel"),Gur=o(" or "),fH=a("a"),Our=o("TFFunnelBaseModel"),Vur=o(" (Funnel Transformer model)"),Xur=l(),sT=a("li"),T5e=a("strong"),zur=o("gpt2"),Wur=o(" \u2014 "),mH=a("a"),Qur=o("TFGPT2Model"),Hur=o(" (OpenAI GPT-2 model)"),Uur=l(),lT=a("li"),M5e=a("strong"),Jur=o("gptj"),Yur=o(" \u2014 "),gH=a("a"),Kur=o("TFGPTJModel"),Zur=o(" (GPT-J model)"),e1r=l(),iT=a("li"),E5e=a("strong"),o1r=o("hubert"),r1r=o(" \u2014 "),hH=a("a"),t1r=o("TFHubertModel"),a1r=o(" (Hubert model)"),n1r=l(),dT=a("li"),C5e=a("strong"),s1r=o("layoutlm"),l1r=o(" \u2014 "),pH=a("a"),i1r=o("TFLayoutLMModel"),d1r=o(" (LayoutLM model)"),c1r=l(),cT=a("li"),w5e=a("strong"),f1r=o("led"),m1r=o(" \u2014 "),_H=a("a"),g1r=o("TFLEDModel"),h1r=o(" (LED model)"),p1r=l(),fT=a("li"),A5e=a("strong"),_1r=o("longformer"),u1r=o(" \u2014 "),uH=a("a"),b1r=o("TFLongformerModel"),v1r=o(" (Longformer model)"),F1r=l(),mT=a("li"),L5e=a("strong"),T1r=o("lxmert"),M1r=o(" \u2014 "),bH=a("a"),E1r=o("TFLxmertModel"),C1r=o(" (LXMERT model)"),w1r=l(),gT=a("li"),y5e=a("strong"),A1r=o("marian"),L1r=o(" \u2014 "),vH=a("a"),y1r=o("TFMarianModel"),x1r=o(" (Marian model)"),$1r=l(),hT=a("li"),x5e=a("strong"),k1r=o("mbart"),S1r=o(" \u2014 "),FH=a("a"),R1r=o("TFMBartModel"),P1r=o(" (mBART model)"),B1r=l(),pT=a("li"),$5e=a("strong"),I1r=o("mobilebert"),N1r=o(" \u2014 "),TH=a("a"),q1r=o("TFMobileBertModel"),j1r=o(" (MobileBERT model)"),D1r=l(),_T=a("li"),k5e=a("strong"),G1r=o("mpnet"),O1r=o(" \u2014 "),MH=a("a"),V1r=o("TFMPNetModel"),X1r=o(" (MPNet model)"),z1r=l(),uT=a("li"),S5e=a("strong"),W1r=o("mt5"),Q1r=o(" \u2014 "),EH=a("a"),H1r=o("TFMT5Model"),U1r=o(" (MT5 model)"),J1r=l(),bT=a("li"),R5e=a("strong"),Y1r=o("openai-gpt"),K1r=o(" \u2014 "),CH=a("a"),Z1r=o("TFOpenAIGPTModel"),ebr=o(" (OpenAI GPT model)"),obr=l(),vT=a("li"),P5e=a("strong"),rbr=o("opt"),tbr=o(" \u2014 "),wH=a("a"),abr=o("TFOPTModel"),nbr=o(" (OPT model)"),sbr=l(),FT=a("li"),B5e=a("strong"),lbr=o("pegasus"),ibr=o(" \u2014 "),AH=a("a"),dbr=o("TFPegasusModel"),cbr=o(" (Pegasus model)"),fbr=l(),TT=a("li"),I5e=a("strong"),mbr=o("rembert"),gbr=o(" \u2014 "),LH=a("a"),hbr=o("TFRemBertModel"),pbr=o(" (RemBERT model)"),_br=l(),MT=a("li"),N5e=a("strong"),ubr=o("roberta"),bbr=o(" \u2014 "),yH=a("a"),vbr=o("TFRobertaModel"),Fbr=o(" (RoBERTa model)"),Tbr=l(),ET=a("li"),q5e=a("strong"),Mbr=o("roformer"),Ebr=o(" \u2014 "),xH=a("a"),Cbr=o("TFRoFormerModel"),wbr=o(" (RoFormer model)"),Abr=l(),CT=a("li"),j5e=a("strong"),Lbr=o("speech_to_text"),ybr=o(" \u2014 "),$H=a("a"),xbr=o("TFSpeech2TextModel"),$br=o(" (Speech2Text model)"),kbr=l(),wT=a("li"),D5e=a("strong"),Sbr=o("swin"),Rbr=o(" \u2014 "),kH=a("a"),Pbr=o("TFSwinModel"),Bbr=o(" (Swin Transformer model)"),Ibr=l(),AT=a("li"),G5e=a("strong"),Nbr=o("t5"),qbr=o(" \u2014 "),SH=a("a"),jbr=o("TFT5Model"),Dbr=o(" (T5 model)"),Gbr=l(),LT=a("li"),O5e=a("strong"),Obr=o("tapas"),Vbr=o(" \u2014 "),RH=a("a"),Xbr=o("TFTapasModel"),zbr=o(" (TAPAS model)"),Wbr=l(),yT=a("li"),V5e=a("strong"),Qbr=o("transfo-xl"),Hbr=o(" \u2014 "),PH=a("a"),Ubr=o("TFTransfoXLModel"),Jbr=o(" (Transformer-XL model)"),Ybr=l(),xT=a("li"),X5e=a("strong"),Kbr=o("vit"),Zbr=o(" \u2014 "),BH=a("a"),e2r=o("TFViTModel"),o2r=o(" (ViT model)"),r2r=l(),$T=a("li"),z5e=a("strong"),t2r=o("vit_mae"),a2r=o(" \u2014 "),IH=a("a"),n2r=o("TFViTMAEModel"),s2r=o(" (ViTMAE model)"),l2r=l(),kT=a("li"),W5e=a("strong"),i2r=o("wav2vec2"),d2r=o(" \u2014 "),NH=a("a"),c2r=o("TFWav2Vec2Model"),f2r=o(" (Wav2Vec2 model)"),m2r=l(),ST=a("li"),Q5e=a("strong"),g2r=o("xlm"),h2r=o(" \u2014 "),qH=a("a"),p2r=o("TFXLMModel"),_2r=o(" (XLM model)"),u2r=l(),RT=a("li"),H5e=a("strong"),b2r=o("xlm-roberta"),v2r=o(" \u2014 "),jH=a("a"),F2r=o("TFXLMRobertaModel"),T2r=o(" (XLM-RoBERTa model)"),M2r=l(),PT=a("li"),U5e=a("strong"),E2r=o("xlnet"),C2r=o(" \u2014 "),DH=a("a"),w2r=o("TFXLNetModel"),A2r=o(" (XLNet model)"),L2r=l(),F(BT.$$.fragment),LOe=l(),tc=a("h2"),IT=a("a"),J5e=a("span"),F(p9.$$.fragment),y2r=l(),Y5e=a("span"),x2r=o("TFAutoModelForPreTraining"),yOe=l(),er=a("div"),F(_9.$$.fragment),$2r=l(),ac=a("p"),k2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GH=a("a"),S2r=o("from_pretrained()"),R2r=o(" class method or the "),OH=a("a"),P2r=o("from_config()"),B2r=o(` class
method.`),I2r=l(),u9=a("p"),N2r=o("This class cannot be instantiated directly using "),K5e=a("code"),q2r=o("__init__()"),j2r=o(" (throws an error)."),D2r=l(),St=a("div"),F(b9.$$.fragment),G2r=l(),Z5e=a("p"),O2r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),V2r=l(),nc=a("p"),X2r=o(`Note:
Loading a model from its configuration file does `),eve=a("strong"),z2r=o("not"),W2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=a("a"),Q2r=o("from_pretrained()"),H2r=o(" to load the model weights."),U2r=l(),F(NT.$$.fragment),J2r=l(),yr=a("div"),F(v9.$$.fragment),Y2r=l(),ove=a("p"),K2r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Z2r=l(),an=a("p"),e4r=o("The model class to instantiate is selected based on the "),rve=a("code"),o4r=o("model_type"),r4r=o(` property of the config object (either
passed as an argument or loaded from `),tve=a("code"),t4r=o("pretrained_model_name_or_path"),a4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=a("code"),n4r=o("pretrained_model_name_or_path"),s4r=o(":"),l4r=l(),se=a("ul"),qT=a("li"),nve=a("strong"),i4r=o("albert"),d4r=o(" \u2014 "),XH=a("a"),c4r=o("TFAlbertForPreTraining"),f4r=o(" (ALBERT model)"),m4r=l(),jT=a("li"),sve=a("strong"),g4r=o("bart"),h4r=o(" \u2014 "),zH=a("a"),p4r=o("TFBartForConditionalGeneration"),_4r=o(" (BART model)"),u4r=l(),DT=a("li"),lve=a("strong"),b4r=o("bert"),v4r=o(" \u2014 "),WH=a("a"),F4r=o("TFBertForPreTraining"),T4r=o(" (BERT model)"),M4r=l(),GT=a("li"),ive=a("strong"),E4r=o("camembert"),C4r=o(" \u2014 "),QH=a("a"),w4r=o("TFCamembertForMaskedLM"),A4r=o(" (CamemBERT model)"),L4r=l(),OT=a("li"),dve=a("strong"),y4r=o("ctrl"),x4r=o(" \u2014 "),HH=a("a"),$4r=o("TFCTRLLMHeadModel"),k4r=o(" (CTRL model)"),S4r=l(),VT=a("li"),cve=a("strong"),R4r=o("distilbert"),P4r=o(" \u2014 "),UH=a("a"),B4r=o("TFDistilBertForMaskedLM"),I4r=o(" (DistilBERT model)"),N4r=l(),XT=a("li"),fve=a("strong"),q4r=o("electra"),j4r=o(" \u2014 "),JH=a("a"),D4r=o("TFElectraForPreTraining"),G4r=o(" (ELECTRA model)"),O4r=l(),zT=a("li"),mve=a("strong"),V4r=o("flaubert"),X4r=o(" \u2014 "),YH=a("a"),z4r=o("TFFlaubertWithLMHeadModel"),W4r=o(" (FlauBERT model)"),Q4r=l(),WT=a("li"),gve=a("strong"),H4r=o("funnel"),U4r=o(" \u2014 "),KH=a("a"),J4r=o("TFFunnelForPreTraining"),Y4r=o(" (Funnel Transformer model)"),K4r=l(),QT=a("li"),hve=a("strong"),Z4r=o("gpt2"),e5r=o(" \u2014 "),ZH=a("a"),o5r=o("TFGPT2LMHeadModel"),r5r=o(" (OpenAI GPT-2 model)"),t5r=l(),HT=a("li"),pve=a("strong"),a5r=o("layoutlm"),n5r=o(" \u2014 "),eU=a("a"),s5r=o("TFLayoutLMForMaskedLM"),l5r=o(" (LayoutLM model)"),i5r=l(),UT=a("li"),_ve=a("strong"),d5r=o("lxmert"),c5r=o(" \u2014 "),oU=a("a"),f5r=o("TFLxmertForPreTraining"),m5r=o(" (LXMERT model)"),g5r=l(),JT=a("li"),uve=a("strong"),h5r=o("mobilebert"),p5r=o(" \u2014 "),rU=a("a"),_5r=o("TFMobileBertForPreTraining"),u5r=o(" (MobileBERT model)"),b5r=l(),YT=a("li"),bve=a("strong"),v5r=o("mpnet"),F5r=o(" \u2014 "),tU=a("a"),T5r=o("TFMPNetForMaskedLM"),M5r=o(" (MPNet model)"),E5r=l(),KT=a("li"),vve=a("strong"),C5r=o("openai-gpt"),w5r=o(" \u2014 "),aU=a("a"),A5r=o("TFOpenAIGPTLMHeadModel"),L5r=o(" (OpenAI GPT model)"),y5r=l(),ZT=a("li"),Fve=a("strong"),x5r=o("roberta"),$5r=o(" \u2014 "),nU=a("a"),k5r=o("TFRobertaForMaskedLM"),S5r=o(" (RoBERTa model)"),R5r=l(),e7=a("li"),Tve=a("strong"),P5r=o("t5"),B5r=o(" \u2014 "),sU=a("a"),I5r=o("TFT5ForConditionalGeneration"),N5r=o(" (T5 model)"),q5r=l(),o7=a("li"),Mve=a("strong"),j5r=o("tapas"),D5r=o(" \u2014 "),lU=a("a"),G5r=o("TFTapasForMaskedLM"),O5r=o(" (TAPAS model)"),V5r=l(),r7=a("li"),Eve=a("strong"),X5r=o("transfo-xl"),z5r=o(" \u2014 "),iU=a("a"),W5r=o("TFTransfoXLLMHeadModel"),Q5r=o(" (Transformer-XL model)"),H5r=l(),t7=a("li"),Cve=a("strong"),U5r=o("vit_mae"),J5r=o(" \u2014 "),dU=a("a"),Y5r=o("TFViTMAEForPreTraining"),K5r=o(" (ViTMAE model)"),Z5r=l(),a7=a("li"),wve=a("strong"),evr=o("xlm"),ovr=o(" \u2014 "),cU=a("a"),rvr=o("TFXLMWithLMHeadModel"),tvr=o(" (XLM model)"),avr=l(),n7=a("li"),Ave=a("strong"),nvr=o("xlm-roberta"),svr=o(" \u2014 "),fU=a("a"),lvr=o("TFXLMRobertaForMaskedLM"),ivr=o(" (XLM-RoBERTa model)"),dvr=l(),s7=a("li"),Lve=a("strong"),cvr=o("xlnet"),fvr=o(" \u2014 "),mU=a("a"),mvr=o("TFXLNetLMHeadModel"),gvr=o(" (XLNet model)"),hvr=l(),F(l7.$$.fragment),xOe=l(),sc=a("h2"),i7=a("a"),yve=a("span"),F(F9.$$.fragment),pvr=l(),xve=a("span"),_vr=o("TFAutoModelForCausalLM"),$Oe=l(),or=a("div"),F(T9.$$.fragment),uvr=l(),lc=a("p"),bvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gU=a("a"),vvr=o("from_pretrained()"),Fvr=o(" class method or the "),hU=a("a"),Tvr=o("from_config()"),Mvr=o(` class
method.`),Evr=l(),M9=a("p"),Cvr=o("This class cannot be instantiated directly using "),$ve=a("code"),wvr=o("__init__()"),Avr=o(" (throws an error)."),Lvr=l(),Rt=a("div"),F(E9.$$.fragment),yvr=l(),kve=a("p"),xvr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$vr=l(),ic=a("p"),kvr=o(`Note:
Loading a model from its configuration file does `),Sve=a("strong"),Svr=o("not"),Rvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),Pvr=o("from_pretrained()"),Bvr=o(" to load the model weights."),Ivr=l(),F(d7.$$.fragment),Nvr=l(),xr=a("div"),F(C9.$$.fragment),qvr=l(),Rve=a("p"),jvr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Dvr=l(),nn=a("p"),Gvr=o("The model class to instantiate is selected based on the "),Pve=a("code"),Ovr=o("model_type"),Vvr=o(` property of the config object (either
passed as an argument or loaded from `),Bve=a("code"),Xvr=o("pretrained_model_name_or_path"),zvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=a("code"),Wvr=o("pretrained_model_name_or_path"),Qvr=o(":"),Hvr=l(),Me=a("ul"),c7=a("li"),Nve=a("strong"),Uvr=o("bert"),Jvr=o(" \u2014 "),_U=a("a"),Yvr=o("TFBertLMHeadModel"),Kvr=o(" (BERT model)"),Zvr=l(),f7=a("li"),qve=a("strong"),e3r=o("camembert"),o3r=o(" \u2014 "),uU=a("a"),r3r=o("TFCamembertForCausalLM"),t3r=o(" (CamemBERT model)"),a3r=l(),m7=a("li"),jve=a("strong"),n3r=o("ctrl"),s3r=o(" \u2014 "),bU=a("a"),l3r=o("TFCTRLLMHeadModel"),i3r=o(" (CTRL model)"),d3r=l(),g7=a("li"),Dve=a("strong"),c3r=o("gpt2"),f3r=o(" \u2014 "),vU=a("a"),m3r=o("TFGPT2LMHeadModel"),g3r=o(" (OpenAI GPT-2 model)"),h3r=l(),h7=a("li"),Gve=a("strong"),p3r=o("gptj"),_3r=o(" \u2014 "),FU=a("a"),u3r=o("TFGPTJForCausalLM"),b3r=o(" (GPT-J model)"),v3r=l(),p7=a("li"),Ove=a("strong"),F3r=o("openai-gpt"),T3r=o(" \u2014 "),TU=a("a"),M3r=o("TFOpenAIGPTLMHeadModel"),E3r=o(" (OpenAI GPT model)"),C3r=l(),_7=a("li"),Vve=a("strong"),w3r=o("opt"),A3r=o(" \u2014 "),MU=a("a"),L3r=o("TFOPTForCausalLM"),y3r=o(" (OPT model)"),x3r=l(),u7=a("li"),Xve=a("strong"),$3r=o("rembert"),k3r=o(" \u2014 "),EU=a("a"),S3r=o("TFRemBertForCausalLM"),R3r=o(" (RemBERT model)"),P3r=l(),b7=a("li"),zve=a("strong"),B3r=o("roberta"),I3r=o(" \u2014 "),CU=a("a"),N3r=o("TFRobertaForCausalLM"),q3r=o(" (RoBERTa model)"),j3r=l(),v7=a("li"),Wve=a("strong"),D3r=o("roformer"),G3r=o(" \u2014 "),wU=a("a"),O3r=o("TFRoFormerForCausalLM"),V3r=o(" (RoFormer model)"),X3r=l(),F7=a("li"),Qve=a("strong"),z3r=o("transfo-xl"),W3r=o(" \u2014 "),AU=a("a"),Q3r=o("TFTransfoXLLMHeadModel"),H3r=o(" (Transformer-XL model)"),U3r=l(),T7=a("li"),Hve=a("strong"),J3r=o("xlm"),Y3r=o(" \u2014 "),LU=a("a"),K3r=o("TFXLMWithLMHeadModel"),Z3r=o(" (XLM model)"),eFr=l(),M7=a("li"),Uve=a("strong"),oFr=o("xlnet"),rFr=o(" \u2014 "),yU=a("a"),tFr=o("TFXLNetLMHeadModel"),aFr=o(" (XLNet model)"),nFr=l(),F(E7.$$.fragment),kOe=l(),dc=a("h2"),C7=a("a"),Jve=a("span"),F(w9.$$.fragment),sFr=l(),Yve=a("span"),lFr=o("TFAutoModelForImageClassification"),SOe=l(),rr=a("div"),F(A9.$$.fragment),iFr=l(),cc=a("p"),dFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xU=a("a"),cFr=o("from_pretrained()"),fFr=o(" class method or the "),$U=a("a"),mFr=o("from_config()"),gFr=o(` class
method.`),hFr=l(),L9=a("p"),pFr=o("This class cannot be instantiated directly using "),Kve=a("code"),_Fr=o("__init__()"),uFr=o(" (throws an error)."),bFr=l(),Pt=a("div"),F(y9.$$.fragment),vFr=l(),Zve=a("p"),FFr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),TFr=l(),fc=a("p"),MFr=o(`Note:
Loading a model from its configuration file does `),e3e=a("strong"),EFr=o("not"),CFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=a("a"),wFr=o("from_pretrained()"),AFr=o(" to load the model weights."),LFr=l(),F(w7.$$.fragment),yFr=l(),$r=a("div"),F(x9.$$.fragment),xFr=l(),o3e=a("p"),$Fr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kFr=l(),sn=a("p"),SFr=o("The model class to instantiate is selected based on the "),r3e=a("code"),RFr=o("model_type"),PFr=o(` property of the config object (either
passed as an argument or loaded from `),t3e=a("code"),BFr=o("pretrained_model_name_or_path"),IFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a3e=a("code"),NFr=o("pretrained_model_name_or_path"),qFr=o(":"),jFr=l(),ln=a("ul"),A7=a("li"),n3e=a("strong"),DFr=o("convnext"),GFr=o(" \u2014 "),SU=a("a"),OFr=o("TFConvNextForImageClassification"),VFr=o(" (ConvNeXT model)"),XFr=l(),L7=a("li"),s3e=a("strong"),zFr=o("data2vec-vision"),WFr=o(" \u2014 "),RU=a("a"),QFr=o("TFData2VecVisionForImageClassification"),HFr=o(" (Data2VecVision model)"),UFr=l(),y7=a("li"),l3e=a("strong"),JFr=o("swin"),YFr=o(" \u2014 "),PU=a("a"),KFr=o("TFSwinForImageClassification"),ZFr=o(" (Swin Transformer model)"),eTr=l(),x7=a("li"),i3e=a("strong"),oTr=o("vit"),rTr=o(" \u2014 "),BU=a("a"),tTr=o("TFViTForImageClassification"),aTr=o(" (ViT model)"),nTr=l(),F($7.$$.fragment),ROe=l(),mc=a("h2"),k7=a("a"),d3e=a("span"),F($9.$$.fragment),sTr=l(),c3e=a("span"),lTr=o("TFAutoModelForMaskedLM"),POe=l(),tr=a("div"),F(k9.$$.fragment),iTr=l(),gc=a("p"),dTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IU=a("a"),cTr=o("from_pretrained()"),fTr=o(" class method or the "),NU=a("a"),mTr=o("from_config()"),gTr=o(` class
method.`),hTr=l(),S9=a("p"),pTr=o("This class cannot be instantiated directly using "),f3e=a("code"),_Tr=o("__init__()"),uTr=o(" (throws an error)."),bTr=l(),Bt=a("div"),F(R9.$$.fragment),vTr=l(),m3e=a("p"),FTr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),TTr=l(),hc=a("p"),MTr=o(`Note:
Loading a model from its configuration file does `),g3e=a("strong"),ETr=o("not"),CTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=a("a"),wTr=o("from_pretrained()"),ATr=o(" to load the model weights."),LTr=l(),F(S7.$$.fragment),yTr=l(),kr=a("div"),F(P9.$$.fragment),xTr=l(),h3e=a("p"),$Tr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kTr=l(),dn=a("p"),STr=o("The model class to instantiate is selected based on the "),p3e=a("code"),RTr=o("model_type"),PTr=o(` property of the config object (either
passed as an argument or loaded from `),_3e=a("code"),BTr=o("pretrained_model_name_or_path"),ITr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u3e=a("code"),NTr=o("pretrained_model_name_or_path"),qTr=o(":"),jTr=l(),ie=a("ul"),R7=a("li"),b3e=a("strong"),DTr=o("albert"),GTr=o(" \u2014 "),jU=a("a"),OTr=o("TFAlbertForMaskedLM"),VTr=o(" (ALBERT model)"),XTr=l(),P7=a("li"),v3e=a("strong"),zTr=o("bert"),WTr=o(" \u2014 "),DU=a("a"),QTr=o("TFBertForMaskedLM"),HTr=o(" (BERT model)"),UTr=l(),B7=a("li"),F3e=a("strong"),JTr=o("camembert"),YTr=o(" \u2014 "),GU=a("a"),KTr=o("TFCamembertForMaskedLM"),ZTr=o(" (CamemBERT model)"),e7r=l(),I7=a("li"),T3e=a("strong"),o7r=o("convbert"),r7r=o(" \u2014 "),OU=a("a"),t7r=o("TFConvBertForMaskedLM"),a7r=o(" (ConvBERT model)"),n7r=l(),N7=a("li"),M3e=a("strong"),s7r=o("deberta"),l7r=o(" \u2014 "),VU=a("a"),i7r=o("TFDebertaForMaskedLM"),d7r=o(" (DeBERTa model)"),c7r=l(),q7=a("li"),E3e=a("strong"),f7r=o("deberta-v2"),m7r=o(" \u2014 "),XU=a("a"),g7r=o("TFDebertaV2ForMaskedLM"),h7r=o(" (DeBERTa-v2 model)"),p7r=l(),j7=a("li"),C3e=a("strong"),_7r=o("distilbert"),u7r=o(" \u2014 "),zU=a("a"),b7r=o("TFDistilBertForMaskedLM"),v7r=o(" (DistilBERT model)"),F7r=l(),D7=a("li"),w3e=a("strong"),T7r=o("electra"),M7r=o(" \u2014 "),WU=a("a"),E7r=o("TFElectraForMaskedLM"),C7r=o(" (ELECTRA model)"),w7r=l(),G7=a("li"),A3e=a("strong"),A7r=o("flaubert"),L7r=o(" \u2014 "),QU=a("a"),y7r=o("TFFlaubertWithLMHeadModel"),x7r=o(" (FlauBERT model)"),$7r=l(),O7=a("li"),L3e=a("strong"),k7r=o("funnel"),S7r=o(" \u2014 "),HU=a("a"),R7r=o("TFFunnelForMaskedLM"),P7r=o(" (Funnel Transformer model)"),B7r=l(),V7=a("li"),y3e=a("strong"),I7r=o("layoutlm"),N7r=o(" \u2014 "),UU=a("a"),q7r=o("TFLayoutLMForMaskedLM"),j7r=o(" (LayoutLM model)"),D7r=l(),X7=a("li"),x3e=a("strong"),G7r=o("longformer"),O7r=o(" \u2014 "),JU=a("a"),V7r=o("TFLongformerForMaskedLM"),X7r=o(" (Longformer model)"),z7r=l(),z7=a("li"),$3e=a("strong"),W7r=o("mobilebert"),Q7r=o(" \u2014 "),YU=a("a"),H7r=o("TFMobileBertForMaskedLM"),U7r=o(" (MobileBERT model)"),J7r=l(),W7=a("li"),k3e=a("strong"),Y7r=o("mpnet"),K7r=o(" \u2014 "),KU=a("a"),Z7r=o("TFMPNetForMaskedLM"),eMr=o(" (MPNet model)"),oMr=l(),Q7=a("li"),S3e=a("strong"),rMr=o("rembert"),tMr=o(" \u2014 "),ZU=a("a"),aMr=o("TFRemBertForMaskedLM"),nMr=o(" (RemBERT model)"),sMr=l(),H7=a("li"),R3e=a("strong"),lMr=o("roberta"),iMr=o(" \u2014 "),eJ=a("a"),dMr=o("TFRobertaForMaskedLM"),cMr=o(" (RoBERTa model)"),fMr=l(),U7=a("li"),P3e=a("strong"),mMr=o("roformer"),gMr=o(" \u2014 "),oJ=a("a"),hMr=o("TFRoFormerForMaskedLM"),pMr=o(" (RoFormer model)"),_Mr=l(),J7=a("li"),B3e=a("strong"),uMr=o("tapas"),bMr=o(" \u2014 "),rJ=a("a"),vMr=o("TFTapasForMaskedLM"),FMr=o(" (TAPAS model)"),TMr=l(),Y7=a("li"),I3e=a("strong"),MMr=o("xlm"),EMr=o(" \u2014 "),tJ=a("a"),CMr=o("TFXLMWithLMHeadModel"),wMr=o(" (XLM model)"),AMr=l(),K7=a("li"),N3e=a("strong"),LMr=o("xlm-roberta"),yMr=o(" \u2014 "),aJ=a("a"),xMr=o("TFXLMRobertaForMaskedLM"),$Mr=o(" (XLM-RoBERTa model)"),kMr=l(),F(Z7.$$.fragment),BOe=l(),pc=a("h2"),eM=a("a"),q3e=a("span"),F(B9.$$.fragment),SMr=l(),j3e=a("span"),RMr=o("TFAutoModelForSeq2SeqLM"),IOe=l(),ar=a("div"),F(I9.$$.fragment),PMr=l(),_c=a("p"),BMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nJ=a("a"),IMr=o("from_pretrained()"),NMr=o(" class method or the "),sJ=a("a"),qMr=o("from_config()"),jMr=o(` class
method.`),DMr=l(),N9=a("p"),GMr=o("This class cannot be instantiated directly using "),D3e=a("code"),OMr=o("__init__()"),VMr=o(" (throws an error)."),XMr=l(),It=a("div"),F(q9.$$.fragment),zMr=l(),G3e=a("p"),WMr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),QMr=l(),uc=a("p"),HMr=o(`Note:
Loading a model from its configuration file does `),O3e=a("strong"),UMr=o("not"),JMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=a("a"),YMr=o("from_pretrained()"),KMr=o(" to load the model weights."),ZMr=l(),F(oM.$$.fragment),eEr=l(),Sr=a("div"),F(j9.$$.fragment),oEr=l(),V3e=a("p"),rEr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tEr=l(),cn=a("p"),aEr=o("The model class to instantiate is selected based on the "),X3e=a("code"),nEr=o("model_type"),sEr=o(` property of the config object (either
passed as an argument or loaded from `),z3e=a("code"),lEr=o("pretrained_model_name_or_path"),iEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W3e=a("code"),dEr=o("pretrained_model_name_or_path"),cEr=o(":"),fEr=l(),ye=a("ul"),rM=a("li"),Q3e=a("strong"),mEr=o("bart"),gEr=o(" \u2014 "),iJ=a("a"),hEr=o("TFBartForConditionalGeneration"),pEr=o(" (BART model)"),_Er=l(),tM=a("li"),H3e=a("strong"),uEr=o("blenderbot"),bEr=o(" \u2014 "),dJ=a("a"),vEr=o("TFBlenderbotForConditionalGeneration"),FEr=o(" (Blenderbot model)"),TEr=l(),aM=a("li"),U3e=a("strong"),MEr=o("blenderbot-small"),EEr=o(" \u2014 "),cJ=a("a"),CEr=o("TFBlenderbotSmallForConditionalGeneration"),wEr=o(" (BlenderbotSmall model)"),AEr=l(),nM=a("li"),J3e=a("strong"),LEr=o("encoder-decoder"),yEr=o(" \u2014 "),fJ=a("a"),xEr=o("TFEncoderDecoderModel"),$Er=o(" (Encoder decoder model)"),kEr=l(),sM=a("li"),Y3e=a("strong"),SEr=o("led"),REr=o(" \u2014 "),mJ=a("a"),PEr=o("TFLEDForConditionalGeneration"),BEr=o(" (LED model)"),IEr=l(),lM=a("li"),K3e=a("strong"),NEr=o("marian"),qEr=o(" \u2014 "),gJ=a("a"),jEr=o("TFMarianMTModel"),DEr=o(" (Marian model)"),GEr=l(),iM=a("li"),Z3e=a("strong"),OEr=o("mbart"),VEr=o(" \u2014 "),hJ=a("a"),XEr=o("TFMBartForConditionalGeneration"),zEr=o(" (mBART model)"),WEr=l(),dM=a("li"),eFe=a("strong"),QEr=o("mt5"),HEr=o(" \u2014 "),pJ=a("a"),UEr=o("TFMT5ForConditionalGeneration"),JEr=o(" (MT5 model)"),YEr=l(),cM=a("li"),oFe=a("strong"),KEr=o("pegasus"),ZEr=o(" \u2014 "),_J=a("a"),eCr=o("TFPegasusForConditionalGeneration"),oCr=o(" (Pegasus model)"),rCr=l(),fM=a("li"),rFe=a("strong"),tCr=o("t5"),aCr=o(" \u2014 "),uJ=a("a"),nCr=o("TFT5ForConditionalGeneration"),sCr=o(" (T5 model)"),lCr=l(),F(mM.$$.fragment),NOe=l(),bc=a("h2"),gM=a("a"),tFe=a("span"),F(D9.$$.fragment),iCr=l(),aFe=a("span"),dCr=o("TFAutoModelForSequenceClassification"),qOe=l(),nr=a("div"),F(G9.$$.fragment),cCr=l(),vc=a("p"),fCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bJ=a("a"),mCr=o("from_pretrained()"),gCr=o(" class method or the "),vJ=a("a"),hCr=o("from_config()"),pCr=o(` class
method.`),_Cr=l(),O9=a("p"),uCr=o("This class cannot be instantiated directly using "),nFe=a("code"),bCr=o("__init__()"),vCr=o(" (throws an error)."),FCr=l(),Nt=a("div"),F(V9.$$.fragment),TCr=l(),sFe=a("p"),MCr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ECr=l(),Fc=a("p"),CCr=o(`Note:
Loading a model from its configuration file does `),lFe=a("strong"),wCr=o("not"),ACr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FJ=a("a"),LCr=o("from_pretrained()"),yCr=o(" to load the model weights."),xCr=l(),F(hM.$$.fragment),$Cr=l(),Rr=a("div"),F(X9.$$.fragment),kCr=l(),iFe=a("p"),SCr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),RCr=l(),fn=a("p"),PCr=o("The model class to instantiate is selected based on the "),dFe=a("code"),BCr=o("model_type"),ICr=o(` property of the config object (either
passed as an argument or loaded from `),cFe=a("code"),NCr=o("pretrained_model_name_or_path"),qCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=a("code"),jCr=o("pretrained_model_name_or_path"),DCr=o(":"),GCr=l(),te=a("ul"),pM=a("li"),mFe=a("strong"),OCr=o("albert"),VCr=o(" \u2014 "),TJ=a("a"),XCr=o("TFAlbertForSequenceClassification"),zCr=o(" (ALBERT model)"),WCr=l(),_M=a("li"),gFe=a("strong"),QCr=o("bert"),HCr=o(" \u2014 "),MJ=a("a"),UCr=o("TFBertForSequenceClassification"),JCr=o(" (BERT model)"),YCr=l(),uM=a("li"),hFe=a("strong"),KCr=o("camembert"),ZCr=o(" \u2014 "),EJ=a("a"),e0r=o("TFCamembertForSequenceClassification"),o0r=o(" (CamemBERT model)"),r0r=l(),bM=a("li"),pFe=a("strong"),t0r=o("convbert"),a0r=o(" \u2014 "),CJ=a("a"),n0r=o("TFConvBertForSequenceClassification"),s0r=o(" (ConvBERT model)"),l0r=l(),vM=a("li"),_Fe=a("strong"),i0r=o("ctrl"),d0r=o(" \u2014 "),wJ=a("a"),c0r=o("TFCTRLForSequenceClassification"),f0r=o(" (CTRL model)"),m0r=l(),FM=a("li"),uFe=a("strong"),g0r=o("deberta"),h0r=o(" \u2014 "),AJ=a("a"),p0r=o("TFDebertaForSequenceClassification"),_0r=o(" (DeBERTa model)"),u0r=l(),TM=a("li"),bFe=a("strong"),b0r=o("deberta-v2"),v0r=o(" \u2014 "),LJ=a("a"),F0r=o("TFDebertaV2ForSequenceClassification"),T0r=o(" (DeBERTa-v2 model)"),M0r=l(),MM=a("li"),vFe=a("strong"),E0r=o("distilbert"),C0r=o(" \u2014 "),yJ=a("a"),w0r=o("TFDistilBertForSequenceClassification"),A0r=o(" (DistilBERT model)"),L0r=l(),EM=a("li"),FFe=a("strong"),y0r=o("electra"),x0r=o(" \u2014 "),xJ=a("a"),$0r=o("TFElectraForSequenceClassification"),k0r=o(" (ELECTRA model)"),S0r=l(),CM=a("li"),TFe=a("strong"),R0r=o("flaubert"),P0r=o(" \u2014 "),$J=a("a"),B0r=o("TFFlaubertForSequenceClassification"),I0r=o(" (FlauBERT model)"),N0r=l(),wM=a("li"),MFe=a("strong"),q0r=o("funnel"),j0r=o(" \u2014 "),kJ=a("a"),D0r=o("TFFunnelForSequenceClassification"),G0r=o(" (Funnel Transformer model)"),O0r=l(),AM=a("li"),EFe=a("strong"),V0r=o("gpt2"),X0r=o(" \u2014 "),SJ=a("a"),z0r=o("TFGPT2ForSequenceClassification"),W0r=o(" (OpenAI GPT-2 model)"),Q0r=l(),LM=a("li"),CFe=a("strong"),H0r=o("gptj"),U0r=o(" \u2014 "),RJ=a("a"),J0r=o("TFGPTJForSequenceClassification"),Y0r=o(" (GPT-J model)"),K0r=l(),yM=a("li"),wFe=a("strong"),Z0r=o("layoutlm"),ewr=o(" \u2014 "),PJ=a("a"),owr=o("TFLayoutLMForSequenceClassification"),rwr=o(" (LayoutLM model)"),twr=l(),xM=a("li"),AFe=a("strong"),awr=o("longformer"),nwr=o(" \u2014 "),BJ=a("a"),swr=o("TFLongformerForSequenceClassification"),lwr=o(" (Longformer model)"),iwr=l(),$M=a("li"),LFe=a("strong"),dwr=o("mobilebert"),cwr=o(" \u2014 "),IJ=a("a"),fwr=o("TFMobileBertForSequenceClassification"),mwr=o(" (MobileBERT model)"),gwr=l(),kM=a("li"),yFe=a("strong"),hwr=o("mpnet"),pwr=o(" \u2014 "),NJ=a("a"),_wr=o("TFMPNetForSequenceClassification"),uwr=o(" (MPNet model)"),bwr=l(),SM=a("li"),xFe=a("strong"),vwr=o("openai-gpt"),Fwr=o(" \u2014 "),qJ=a("a"),Twr=o("TFOpenAIGPTForSequenceClassification"),Mwr=o(" (OpenAI GPT model)"),Ewr=l(),RM=a("li"),$Fe=a("strong"),Cwr=o("rembert"),wwr=o(" \u2014 "),jJ=a("a"),Awr=o("TFRemBertForSequenceClassification"),Lwr=o(" (RemBERT model)"),ywr=l(),PM=a("li"),kFe=a("strong"),xwr=o("roberta"),$wr=o(" \u2014 "),DJ=a("a"),kwr=o("TFRobertaForSequenceClassification"),Swr=o(" (RoBERTa model)"),Rwr=l(),BM=a("li"),SFe=a("strong"),Pwr=o("roformer"),Bwr=o(" \u2014 "),GJ=a("a"),Iwr=o("TFRoFormerForSequenceClassification"),Nwr=o(" (RoFormer model)"),qwr=l(),IM=a("li"),RFe=a("strong"),jwr=o("tapas"),Dwr=o(" \u2014 "),OJ=a("a"),Gwr=o("TFTapasForSequenceClassification"),Owr=o(" (TAPAS model)"),Vwr=l(),NM=a("li"),PFe=a("strong"),Xwr=o("transfo-xl"),zwr=o(" \u2014 "),VJ=a("a"),Wwr=o("TFTransfoXLForSequenceClassification"),Qwr=o(" (Transformer-XL model)"),Hwr=l(),qM=a("li"),BFe=a("strong"),Uwr=o("xlm"),Jwr=o(" \u2014 "),XJ=a("a"),Ywr=o("TFXLMForSequenceClassification"),Kwr=o(" (XLM model)"),Zwr=l(),jM=a("li"),IFe=a("strong"),eAr=o("xlm-roberta"),oAr=o(" \u2014 "),zJ=a("a"),rAr=o("TFXLMRobertaForSequenceClassification"),tAr=o(" (XLM-RoBERTa model)"),aAr=l(),DM=a("li"),NFe=a("strong"),nAr=o("xlnet"),sAr=o(" \u2014 "),WJ=a("a"),lAr=o("TFXLNetForSequenceClassification"),iAr=o(" (XLNet model)"),dAr=l(),F(GM.$$.fragment),jOe=l(),Tc=a("h2"),OM=a("a"),qFe=a("span"),F(z9.$$.fragment),cAr=l(),jFe=a("span"),fAr=o("TFAutoModelForMultipleChoice"),DOe=l(),sr=a("div"),F(W9.$$.fragment),mAr=l(),Mc=a("p"),gAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),QJ=a("a"),hAr=o("from_pretrained()"),pAr=o(" class method or the "),HJ=a("a"),_Ar=o("from_config()"),uAr=o(` class
method.`),bAr=l(),Q9=a("p"),vAr=o("This class cannot be instantiated directly using "),DFe=a("code"),FAr=o("__init__()"),TAr=o(" (throws an error)."),MAr=l(),qt=a("div"),F(H9.$$.fragment),EAr=l(),GFe=a("p"),CAr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wAr=l(),Ec=a("p"),AAr=o(`Note:
Loading a model from its configuration file does `),OFe=a("strong"),LAr=o("not"),yAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=a("a"),xAr=o("from_pretrained()"),$Ar=o(" to load the model weights."),kAr=l(),F(VM.$$.fragment),SAr=l(),Pr=a("div"),F(U9.$$.fragment),RAr=l(),VFe=a("p"),PAr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),BAr=l(),mn=a("p"),IAr=o("The model class to instantiate is selected based on the "),XFe=a("code"),NAr=o("model_type"),qAr=o(` property of the config object (either
passed as an argument or loaded from `),zFe=a("code"),jAr=o("pretrained_model_name_or_path"),DAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=a("code"),GAr=o("pretrained_model_name_or_path"),OAr=o(":"),VAr=l(),_e=a("ul"),XM=a("li"),QFe=a("strong"),XAr=o("albert"),zAr=o(" \u2014 "),JJ=a("a"),WAr=o("TFAlbertForMultipleChoice"),QAr=o(" (ALBERT model)"),HAr=l(),zM=a("li"),HFe=a("strong"),UAr=o("bert"),JAr=o(" \u2014 "),YJ=a("a"),YAr=o("TFBertForMultipleChoice"),KAr=o(" (BERT model)"),ZAr=l(),WM=a("li"),UFe=a("strong"),e6r=o("camembert"),o6r=o(" \u2014 "),KJ=a("a"),r6r=o("TFCamembertForMultipleChoice"),t6r=o(" (CamemBERT model)"),a6r=l(),QM=a("li"),JFe=a("strong"),n6r=o("convbert"),s6r=o(" \u2014 "),ZJ=a("a"),l6r=o("TFConvBertForMultipleChoice"),i6r=o(" (ConvBERT model)"),d6r=l(),HM=a("li"),YFe=a("strong"),c6r=o("distilbert"),f6r=o(" \u2014 "),eY=a("a"),m6r=o("TFDistilBertForMultipleChoice"),g6r=o(" (DistilBERT model)"),h6r=l(),UM=a("li"),KFe=a("strong"),p6r=o("electra"),_6r=o(" \u2014 "),oY=a("a"),u6r=o("TFElectraForMultipleChoice"),b6r=o(" (ELECTRA model)"),v6r=l(),JM=a("li"),ZFe=a("strong"),F6r=o("flaubert"),T6r=o(" \u2014 "),rY=a("a"),M6r=o("TFFlaubertForMultipleChoice"),E6r=o(" (FlauBERT model)"),C6r=l(),YM=a("li"),eTe=a("strong"),w6r=o("funnel"),A6r=o(" \u2014 "),tY=a("a"),L6r=o("TFFunnelForMultipleChoice"),y6r=o(" (Funnel Transformer model)"),x6r=l(),KM=a("li"),oTe=a("strong"),$6r=o("longformer"),k6r=o(" \u2014 "),aY=a("a"),S6r=o("TFLongformerForMultipleChoice"),R6r=o(" (Longformer model)"),P6r=l(),ZM=a("li"),rTe=a("strong"),B6r=o("mobilebert"),I6r=o(" \u2014 "),nY=a("a"),N6r=o("TFMobileBertForMultipleChoice"),q6r=o(" (MobileBERT model)"),j6r=l(),eE=a("li"),tTe=a("strong"),D6r=o("mpnet"),G6r=o(" \u2014 "),sY=a("a"),O6r=o("TFMPNetForMultipleChoice"),V6r=o(" (MPNet model)"),X6r=l(),oE=a("li"),aTe=a("strong"),z6r=o("rembert"),W6r=o(" \u2014 "),lY=a("a"),Q6r=o("TFRemBertForMultipleChoice"),H6r=o(" (RemBERT model)"),U6r=l(),rE=a("li"),nTe=a("strong"),J6r=o("roberta"),Y6r=o(" \u2014 "),iY=a("a"),K6r=o("TFRobertaForMultipleChoice"),Z6r=o(" (RoBERTa model)"),eLr=l(),tE=a("li"),sTe=a("strong"),oLr=o("roformer"),rLr=o(" \u2014 "),dY=a("a"),tLr=o("TFRoFormerForMultipleChoice"),aLr=o(" (RoFormer model)"),nLr=l(),aE=a("li"),lTe=a("strong"),sLr=o("xlm"),lLr=o(" \u2014 "),cY=a("a"),iLr=o("TFXLMForMultipleChoice"),dLr=o(" (XLM model)"),cLr=l(),nE=a("li"),iTe=a("strong"),fLr=o("xlm-roberta"),mLr=o(" \u2014 "),fY=a("a"),gLr=o("TFXLMRobertaForMultipleChoice"),hLr=o(" (XLM-RoBERTa model)"),pLr=l(),sE=a("li"),dTe=a("strong"),_Lr=o("xlnet"),uLr=o(" \u2014 "),mY=a("a"),bLr=o("TFXLNetForMultipleChoice"),vLr=o(" (XLNet model)"),FLr=l(),F(lE.$$.fragment),GOe=l(),Cc=a("h2"),iE=a("a"),cTe=a("span"),F(J9.$$.fragment),TLr=l(),fTe=a("span"),MLr=o("TFAutoModelForNextSentencePrediction"),OOe=l(),lr=a("div"),F(Y9.$$.fragment),ELr=l(),wc=a("p"),CLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gY=a("a"),wLr=o("from_pretrained()"),ALr=o(" class method or the "),hY=a("a"),LLr=o("from_config()"),yLr=o(` class
method.`),xLr=l(),K9=a("p"),$Lr=o("This class cannot be instantiated directly using "),mTe=a("code"),kLr=o("__init__()"),SLr=o(" (throws an error)."),RLr=l(),jt=a("div"),F(Z9.$$.fragment),PLr=l(),gTe=a("p"),BLr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ILr=l(),Ac=a("p"),NLr=o(`Note:
Loading a model from its configuration file does `),hTe=a("strong"),qLr=o("not"),jLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=a("a"),DLr=o("from_pretrained()"),GLr=o(" to load the model weights."),OLr=l(),F(dE.$$.fragment),VLr=l(),Br=a("div"),F(ex.$$.fragment),XLr=l(),pTe=a("p"),zLr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),WLr=l(),gn=a("p"),QLr=o("The model class to instantiate is selected based on the "),_Te=a("code"),HLr=o("model_type"),ULr=o(` property of the config object (either
passed as an argument or loaded from `),uTe=a("code"),JLr=o("pretrained_model_name_or_path"),YLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=a("code"),KLr=o("pretrained_model_name_or_path"),ZLr=o(":"),eyr=l(),ox=a("ul"),cE=a("li"),vTe=a("strong"),oyr=o("bert"),ryr=o(" \u2014 "),_Y=a("a"),tyr=o("TFBertForNextSentencePrediction"),ayr=o(" (BERT model)"),nyr=l(),fE=a("li"),FTe=a("strong"),syr=o("mobilebert"),lyr=o(" \u2014 "),uY=a("a"),iyr=o("TFMobileBertForNextSentencePrediction"),dyr=o(" (MobileBERT model)"),cyr=l(),F(mE.$$.fragment),VOe=l(),Lc=a("h2"),gE=a("a"),TTe=a("span"),F(rx.$$.fragment),fyr=l(),MTe=a("span"),myr=o("TFAutoModelForTableQuestionAnswering"),XOe=l(),ir=a("div"),F(tx.$$.fragment),gyr=l(),yc=a("p"),hyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bY=a("a"),pyr=o("from_pretrained()"),_yr=o(" class method or the "),vY=a("a"),uyr=o("from_config()"),byr=o(` class
method.`),vyr=l(),ax=a("p"),Fyr=o("This class cannot be instantiated directly using "),ETe=a("code"),Tyr=o("__init__()"),Myr=o(" (throws an error)."),Eyr=l(),Dt=a("div"),F(nx.$$.fragment),Cyr=l(),CTe=a("p"),wyr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Ayr=l(),xc=a("p"),Lyr=o(`Note:
Loading a model from its configuration file does `),wTe=a("strong"),yyr=o("not"),xyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),$yr=o("from_pretrained()"),kyr=o(" to load the model weights."),Syr=l(),F(hE.$$.fragment),Ryr=l(),Ir=a("div"),F(sx.$$.fragment),Pyr=l(),ATe=a("p"),Byr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Iyr=l(),hn=a("p"),Nyr=o("The model class to instantiate is selected based on the "),LTe=a("code"),qyr=o("model_type"),jyr=o(` property of the config object (either
passed as an argument or loaded from `),yTe=a("code"),Dyr=o("pretrained_model_name_or_path"),Gyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=a("code"),Oyr=o("pretrained_model_name_or_path"),Vyr=o(":"),Xyr=l(),$Te=a("ul"),pE=a("li"),kTe=a("strong"),zyr=o("tapas"),Wyr=o(" \u2014 "),TY=a("a"),Qyr=o("TFTapasForQuestionAnswering"),Hyr=o(" (TAPAS model)"),Uyr=l(),F(_E.$$.fragment),zOe=l(),$c=a("h2"),uE=a("a"),STe=a("span"),F(lx.$$.fragment),Jyr=l(),RTe=a("span"),Yyr=o("TFAutoModelForTokenClassification"),WOe=l(),dr=a("div"),F(ix.$$.fragment),Kyr=l(),kc=a("p"),Zyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),MY=a("a"),e8r=o("from_pretrained()"),o8r=o(" class method or the "),EY=a("a"),r8r=o("from_config()"),t8r=o(` class
method.`),a8r=l(),dx=a("p"),n8r=o("This class cannot be instantiated directly using "),PTe=a("code"),s8r=o("__init__()"),l8r=o(" (throws an error)."),i8r=l(),Gt=a("div"),F(cx.$$.fragment),d8r=l(),BTe=a("p"),c8r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),f8r=l(),Sc=a("p"),m8r=o(`Note:
Loading a model from its configuration file does `),ITe=a("strong"),g8r=o("not"),h8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CY=a("a"),p8r=o("from_pretrained()"),_8r=o(" to load the model weights."),u8r=l(),F(bE.$$.fragment),b8r=l(),Nr=a("div"),F(fx.$$.fragment),v8r=l(),NTe=a("p"),F8r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),T8r=l(),pn=a("p"),M8r=o("The model class to instantiate is selected based on the "),qTe=a("code"),E8r=o("model_type"),C8r=o(` property of the config object (either
passed as an argument or loaded from `),jTe=a("code"),w8r=o("pretrained_model_name_or_path"),A8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=a("code"),L8r=o("pretrained_model_name_or_path"),y8r=o(":"),x8r=l(),de=a("ul"),vE=a("li"),GTe=a("strong"),$8r=o("albert"),k8r=o(" \u2014 "),wY=a("a"),S8r=o("TFAlbertForTokenClassification"),R8r=o(" (ALBERT model)"),P8r=l(),FE=a("li"),OTe=a("strong"),B8r=o("bert"),I8r=o(" \u2014 "),AY=a("a"),N8r=o("TFBertForTokenClassification"),q8r=o(" (BERT model)"),j8r=l(),TE=a("li"),VTe=a("strong"),D8r=o("camembert"),G8r=o(" \u2014 "),LY=a("a"),O8r=o("TFCamembertForTokenClassification"),V8r=o(" (CamemBERT model)"),X8r=l(),ME=a("li"),XTe=a("strong"),z8r=o("convbert"),W8r=o(" \u2014 "),yY=a("a"),Q8r=o("TFConvBertForTokenClassification"),H8r=o(" (ConvBERT model)"),U8r=l(),EE=a("li"),zTe=a("strong"),J8r=o("deberta"),Y8r=o(" \u2014 "),xY=a("a"),K8r=o("TFDebertaForTokenClassification"),Z8r=o(" (DeBERTa model)"),e9r=l(),CE=a("li"),WTe=a("strong"),o9r=o("deberta-v2"),r9r=o(" \u2014 "),$Y=a("a"),t9r=o("TFDebertaV2ForTokenClassification"),a9r=o(" (DeBERTa-v2 model)"),n9r=l(),wE=a("li"),QTe=a("strong"),s9r=o("distilbert"),l9r=o(" \u2014 "),kY=a("a"),i9r=o("TFDistilBertForTokenClassification"),d9r=o(" (DistilBERT model)"),c9r=l(),AE=a("li"),HTe=a("strong"),f9r=o("electra"),m9r=o(" \u2014 "),SY=a("a"),g9r=o("TFElectraForTokenClassification"),h9r=o(" (ELECTRA model)"),p9r=l(),LE=a("li"),UTe=a("strong"),_9r=o("flaubert"),u9r=o(" \u2014 "),RY=a("a"),b9r=o("TFFlaubertForTokenClassification"),v9r=o(" (FlauBERT model)"),F9r=l(),yE=a("li"),JTe=a("strong"),T9r=o("funnel"),M9r=o(" \u2014 "),PY=a("a"),E9r=o("TFFunnelForTokenClassification"),C9r=o(" (Funnel Transformer model)"),w9r=l(),xE=a("li"),YTe=a("strong"),A9r=o("layoutlm"),L9r=o(" \u2014 "),BY=a("a"),y9r=o("TFLayoutLMForTokenClassification"),x9r=o(" (LayoutLM model)"),$9r=l(),$E=a("li"),KTe=a("strong"),k9r=o("longformer"),S9r=o(" \u2014 "),IY=a("a"),R9r=o("TFLongformerForTokenClassification"),P9r=o(" (Longformer model)"),B9r=l(),kE=a("li"),ZTe=a("strong"),I9r=o("mobilebert"),N9r=o(" \u2014 "),NY=a("a"),q9r=o("TFMobileBertForTokenClassification"),j9r=o(" (MobileBERT model)"),D9r=l(),SE=a("li"),e7e=a("strong"),G9r=o("mpnet"),O9r=o(" \u2014 "),qY=a("a"),V9r=o("TFMPNetForTokenClassification"),X9r=o(" (MPNet model)"),z9r=l(),RE=a("li"),o7e=a("strong"),W9r=o("rembert"),Q9r=o(" \u2014 "),jY=a("a"),H9r=o("TFRemBertForTokenClassification"),U9r=o(" (RemBERT model)"),J9r=l(),PE=a("li"),r7e=a("strong"),Y9r=o("roberta"),K9r=o(" \u2014 "),DY=a("a"),Z9r=o("TFRobertaForTokenClassification"),exr=o(" (RoBERTa model)"),oxr=l(),BE=a("li"),t7e=a("strong"),rxr=o("roformer"),txr=o(" \u2014 "),GY=a("a"),axr=o("TFRoFormerForTokenClassification"),nxr=o(" (RoFormer model)"),sxr=l(),IE=a("li"),a7e=a("strong"),lxr=o("xlm"),ixr=o(" \u2014 "),OY=a("a"),dxr=o("TFXLMForTokenClassification"),cxr=o(" (XLM model)"),fxr=l(),NE=a("li"),n7e=a("strong"),mxr=o("xlm-roberta"),gxr=o(" \u2014 "),VY=a("a"),hxr=o("TFXLMRobertaForTokenClassification"),pxr=o(" (XLM-RoBERTa model)"),_xr=l(),qE=a("li"),s7e=a("strong"),uxr=o("xlnet"),bxr=o(" \u2014 "),XY=a("a"),vxr=o("TFXLNetForTokenClassification"),Fxr=o(" (XLNet model)"),Txr=l(),F(jE.$$.fragment),QOe=l(),Rc=a("h2"),DE=a("a"),l7e=a("span"),F(mx.$$.fragment),Mxr=l(),i7e=a("span"),Exr=o("TFAutoModelForQuestionAnswering"),HOe=l(),cr=a("div"),F(gx.$$.fragment),Cxr=l(),Pc=a("p"),wxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zY=a("a"),Axr=o("from_pretrained()"),Lxr=o(" class method or the "),WY=a("a"),yxr=o("from_config()"),xxr=o(` class
method.`),$xr=l(),hx=a("p"),kxr=o("This class cannot be instantiated directly using "),d7e=a("code"),Sxr=o("__init__()"),Rxr=o(" (throws an error)."),Pxr=l(),Ot=a("div"),F(px.$$.fragment),Bxr=l(),c7e=a("p"),Ixr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Nxr=l(),Bc=a("p"),qxr=o(`Note:
Loading a model from its configuration file does `),f7e=a("strong"),jxr=o("not"),Dxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),Gxr=o("from_pretrained()"),Oxr=o(" to load the model weights."),Vxr=l(),F(GE.$$.fragment),Xxr=l(),qr=a("div"),F(_x.$$.fragment),zxr=l(),m7e=a("p"),Wxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qxr=l(),_n=a("p"),Hxr=o("The model class to instantiate is selected based on the "),g7e=a("code"),Uxr=o("model_type"),Jxr=o(` property of the config object (either
passed as an argument or loaded from `),h7e=a("code"),Yxr=o("pretrained_model_name_or_path"),Kxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p7e=a("code"),Zxr=o("pretrained_model_name_or_path"),e$r=o(":"),o$r=l(),ce=a("ul"),OE=a("li"),_7e=a("strong"),r$r=o("albert"),t$r=o(" \u2014 "),HY=a("a"),a$r=o("TFAlbertForQuestionAnswering"),n$r=o(" (ALBERT model)"),s$r=l(),VE=a("li"),u7e=a("strong"),l$r=o("bert"),i$r=o(" \u2014 "),UY=a("a"),d$r=o("TFBertForQuestionAnswering"),c$r=o(" (BERT model)"),f$r=l(),XE=a("li"),b7e=a("strong"),m$r=o("camembert"),g$r=o(" \u2014 "),JY=a("a"),h$r=o("TFCamembertForQuestionAnswering"),p$r=o(" (CamemBERT model)"),_$r=l(),zE=a("li"),v7e=a("strong"),u$r=o("convbert"),b$r=o(" \u2014 "),YY=a("a"),v$r=o("TFConvBertForQuestionAnswering"),F$r=o(" (ConvBERT model)"),T$r=l(),WE=a("li"),F7e=a("strong"),M$r=o("deberta"),E$r=o(" \u2014 "),KY=a("a"),C$r=o("TFDebertaForQuestionAnswering"),w$r=o(" (DeBERTa model)"),A$r=l(),QE=a("li"),T7e=a("strong"),L$r=o("deberta-v2"),y$r=o(" \u2014 "),ZY=a("a"),x$r=o("TFDebertaV2ForQuestionAnswering"),$$r=o(" (DeBERTa-v2 model)"),k$r=l(),HE=a("li"),M7e=a("strong"),S$r=o("distilbert"),R$r=o(" \u2014 "),eK=a("a"),P$r=o("TFDistilBertForQuestionAnswering"),B$r=o(" (DistilBERT model)"),I$r=l(),UE=a("li"),E7e=a("strong"),N$r=o("electra"),q$r=o(" \u2014 "),oK=a("a"),j$r=o("TFElectraForQuestionAnswering"),D$r=o(" (ELECTRA model)"),G$r=l(),JE=a("li"),C7e=a("strong"),O$r=o("flaubert"),V$r=o(" \u2014 "),rK=a("a"),X$r=o("TFFlaubertForQuestionAnsweringSimple"),z$r=o(" (FlauBERT model)"),W$r=l(),YE=a("li"),w7e=a("strong"),Q$r=o("funnel"),H$r=o(" \u2014 "),tK=a("a"),U$r=o("TFFunnelForQuestionAnswering"),J$r=o(" (Funnel Transformer model)"),Y$r=l(),KE=a("li"),A7e=a("strong"),K$r=o("gptj"),Z$r=o(" \u2014 "),aK=a("a"),ekr=o("TFGPTJForQuestionAnswering"),okr=o(" (GPT-J model)"),rkr=l(),ZE=a("li"),L7e=a("strong"),tkr=o("longformer"),akr=o(" \u2014 "),nK=a("a"),nkr=o("TFLongformerForQuestionAnswering"),skr=o(" (Longformer model)"),lkr=l(),eC=a("li"),y7e=a("strong"),ikr=o("mobilebert"),dkr=o(" \u2014 "),sK=a("a"),ckr=o("TFMobileBertForQuestionAnswering"),fkr=o(" (MobileBERT model)"),mkr=l(),oC=a("li"),x7e=a("strong"),gkr=o("mpnet"),hkr=o(" \u2014 "),lK=a("a"),pkr=o("TFMPNetForQuestionAnswering"),_kr=o(" (MPNet model)"),ukr=l(),rC=a("li"),$7e=a("strong"),bkr=o("rembert"),vkr=o(" \u2014 "),iK=a("a"),Fkr=o("TFRemBertForQuestionAnswering"),Tkr=o(" (RemBERT model)"),Mkr=l(),tC=a("li"),k7e=a("strong"),Ekr=o("roberta"),Ckr=o(" \u2014 "),dK=a("a"),wkr=o("TFRobertaForQuestionAnswering"),Akr=o(" (RoBERTa model)"),Lkr=l(),aC=a("li"),S7e=a("strong"),ykr=o("roformer"),xkr=o(" \u2014 "),cK=a("a"),$kr=o("TFRoFormerForQuestionAnswering"),kkr=o(" (RoFormer model)"),Skr=l(),nC=a("li"),R7e=a("strong"),Rkr=o("xlm"),Pkr=o(" \u2014 "),fK=a("a"),Bkr=o("TFXLMForQuestionAnsweringSimple"),Ikr=o(" (XLM model)"),Nkr=l(),sC=a("li"),P7e=a("strong"),qkr=o("xlm-roberta"),jkr=o(" \u2014 "),mK=a("a"),Dkr=o("TFXLMRobertaForQuestionAnswering"),Gkr=o(" (XLM-RoBERTa model)"),Okr=l(),lC=a("li"),B7e=a("strong"),Vkr=o("xlnet"),Xkr=o(" \u2014 "),gK=a("a"),zkr=o("TFXLNetForQuestionAnsweringSimple"),Wkr=o(" (XLNet model)"),Qkr=l(),F(iC.$$.fragment),UOe=l(),Ic=a("h2"),dC=a("a"),I7e=a("span"),F(ux.$$.fragment),Hkr=l(),N7e=a("span"),Ukr=o("TFAutoModelForVision2Seq"),JOe=l(),fr=a("div"),F(bx.$$.fragment),Jkr=l(),Nc=a("p"),Ykr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hK=a("a"),Kkr=o("from_pretrained()"),Zkr=o(" class method or the "),pK=a("a"),eSr=o("from_config()"),oSr=o(` class
method.`),rSr=l(),vx=a("p"),tSr=o("This class cannot be instantiated directly using "),q7e=a("code"),aSr=o("__init__()"),nSr=o(" (throws an error)."),sSr=l(),Vt=a("div"),F(Fx.$$.fragment),lSr=l(),j7e=a("p"),iSr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dSr=l(),qc=a("p"),cSr=o(`Note:
Loading a model from its configuration file does `),D7e=a("strong"),fSr=o("not"),mSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=a("a"),gSr=o("from_pretrained()"),hSr=o(" to load the model weights."),pSr=l(),F(cC.$$.fragment),_Sr=l(),jr=a("div"),F(Tx.$$.fragment),uSr=l(),G7e=a("p"),bSr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vSr=l(),un=a("p"),FSr=o("The model class to instantiate is selected based on the "),O7e=a("code"),TSr=o("model_type"),MSr=o(` property of the config object (either
passed as an argument or loaded from `),V7e=a("code"),ESr=o("pretrained_model_name_or_path"),CSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X7e=a("code"),wSr=o("pretrained_model_name_or_path"),ASr=o(":"),LSr=l(),z7e=a("ul"),fC=a("li"),W7e=a("strong"),ySr=o("vision-encoder-decoder"),xSr=o(" \u2014 "),uK=a("a"),$Sr=o("TFVisionEncoderDecoderModel"),kSr=o(" (Vision Encoder decoder model)"),SSr=l(),F(mC.$$.fragment),YOe=l(),jc=a("h2"),gC=a("a"),Q7e=a("span"),F(Mx.$$.fragment),RSr=l(),H7e=a("span"),PSr=o("TFAutoModelForSpeechSeq2Seq"),KOe=l(),mr=a("div"),F(Ex.$$.fragment),BSr=l(),Dc=a("p"),ISr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),bK=a("a"),NSr=o("from_pretrained()"),qSr=o(" class method or the "),vK=a("a"),jSr=o("from_config()"),DSr=o(` class
method.`),GSr=l(),Cx=a("p"),OSr=o("This class cannot be instantiated directly using "),U7e=a("code"),VSr=o("__init__()"),XSr=o(" (throws an error)."),zSr=l(),Xt=a("div"),F(wx.$$.fragment),WSr=l(),J7e=a("p"),QSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),HSr=l(),Gc=a("p"),USr=o(`Note:
Loading a model from its configuration file does `),Y7e=a("strong"),JSr=o("not"),YSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FK=a("a"),KSr=o("from_pretrained()"),ZSr=o(" to load the model weights."),eRr=l(),F(hC.$$.fragment),oRr=l(),Dr=a("div"),F(Ax.$$.fragment),rRr=l(),K7e=a("p"),tRr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),aRr=l(),bn=a("p"),nRr=o("The model class to instantiate is selected based on the "),Z7e=a("code"),sRr=o("model_type"),lRr=o(` property of the config object (either
passed as an argument or loaded from `),eMe=a("code"),iRr=o("pretrained_model_name_or_path"),dRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oMe=a("code"),cRr=o("pretrained_model_name_or_path"),fRr=o(":"),mRr=l(),rMe=a("ul"),pC=a("li"),tMe=a("strong"),gRr=o("speech_to_text"),hRr=o(" \u2014 "),TK=a("a"),pRr=o("TFSpeech2TextForConditionalGeneration"),_Rr=o(" (Speech2Text model)"),uRr=l(),F(_C.$$.fragment),ZOe=l(),Oc=a("h2"),uC=a("a"),aMe=a("span"),F(Lx.$$.fragment),bRr=l(),nMe=a("span"),vRr=o("FlaxAutoModel"),eVe=l(),gr=a("div"),F(yx.$$.fragment),FRr=l(),Vc=a("p"),TRr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),MK=a("a"),MRr=o("from_pretrained()"),ERr=o(" class method or the "),EK=a("a"),CRr=o("from_config()"),wRr=o(` class
method.`),ARr=l(),xx=a("p"),LRr=o("This class cannot be instantiated directly using "),sMe=a("code"),yRr=o("__init__()"),xRr=o(" (throws an error)."),$Rr=l(),zt=a("div"),F($x.$$.fragment),kRr=l(),lMe=a("p"),SRr=o("Instantiates one of the base model classes of the library from a configuration."),RRr=l(),Xc=a("p"),PRr=o(`Note:
Loading a model from its configuration file does `),iMe=a("strong"),BRr=o("not"),IRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=a("a"),NRr=o("from_pretrained()"),qRr=o(" to load the model weights."),jRr=l(),F(bC.$$.fragment),DRr=l(),Gr=a("div"),F(kx.$$.fragment),GRr=l(),dMe=a("p"),ORr=o("Instantiate one of the base model classes of the library from a pretrained model."),VRr=l(),vn=a("p"),XRr=o("The model class to instantiate is selected based on the "),cMe=a("code"),zRr=o("model_type"),WRr=o(` property of the config object (either
passed as an argument or loaded from `),fMe=a("code"),QRr=o("pretrained_model_name_or_path"),HRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=a("code"),URr=o("pretrained_model_name_or_path"),JRr=o(":"),YRr=l(),oe=a("ul"),vC=a("li"),gMe=a("strong"),KRr=o("albert"),ZRr=o(" \u2014 "),wK=a("a"),ePr=o("FlaxAlbertModel"),oPr=o(" (ALBERT model)"),rPr=l(),FC=a("li"),hMe=a("strong"),tPr=o("bart"),aPr=o(" \u2014 "),AK=a("a"),nPr=o("FlaxBartModel"),sPr=o(" (BART model)"),lPr=l(),TC=a("li"),pMe=a("strong"),iPr=o("beit"),dPr=o(" \u2014 "),LK=a("a"),cPr=o("FlaxBeitModel"),fPr=o(" (BEiT model)"),mPr=l(),MC=a("li"),_Me=a("strong"),gPr=o("bert"),hPr=o(" \u2014 "),yK=a("a"),pPr=o("FlaxBertModel"),_Pr=o(" (BERT model)"),uPr=l(),EC=a("li"),uMe=a("strong"),bPr=o("big_bird"),vPr=o(" \u2014 "),xK=a("a"),FPr=o("FlaxBigBirdModel"),TPr=o(" (BigBird model)"),MPr=l(),CC=a("li"),bMe=a("strong"),EPr=o("blenderbot"),CPr=o(" \u2014 "),$K=a("a"),wPr=o("FlaxBlenderbotModel"),APr=o(" (Blenderbot model)"),LPr=l(),wC=a("li"),vMe=a("strong"),yPr=o("blenderbot-small"),xPr=o(" \u2014 "),kK=a("a"),$Pr=o("FlaxBlenderbotSmallModel"),kPr=o(" (BlenderbotSmall model)"),SPr=l(),AC=a("li"),FMe=a("strong"),RPr=o("clip"),PPr=o(" \u2014 "),SK=a("a"),BPr=o("FlaxCLIPModel"),IPr=o(" (CLIP model)"),NPr=l(),LC=a("li"),TMe=a("strong"),qPr=o("distilbert"),jPr=o(" \u2014 "),RK=a("a"),DPr=o("FlaxDistilBertModel"),GPr=o(" (DistilBERT model)"),OPr=l(),yC=a("li"),MMe=a("strong"),VPr=o("electra"),XPr=o(" \u2014 "),PK=a("a"),zPr=o("FlaxElectraModel"),WPr=o(" (ELECTRA model)"),QPr=l(),xC=a("li"),EMe=a("strong"),HPr=o("gpt2"),UPr=o(" \u2014 "),BK=a("a"),JPr=o("FlaxGPT2Model"),YPr=o(" (OpenAI GPT-2 model)"),KPr=l(),$C=a("li"),CMe=a("strong"),ZPr=o("gpt_neo"),eBr=o(" \u2014 "),IK=a("a"),oBr=o("FlaxGPTNeoModel"),rBr=o(" (GPT Neo model)"),tBr=l(),kC=a("li"),wMe=a("strong"),aBr=o("gptj"),nBr=o(" \u2014 "),NK=a("a"),sBr=o("FlaxGPTJModel"),lBr=o(" (GPT-J model)"),iBr=l(),SC=a("li"),AMe=a("strong"),dBr=o("longt5"),cBr=o(" \u2014 "),qK=a("a"),fBr=o("FlaxLongT5Model"),mBr=o(" (LongT5 model)"),gBr=l(),RC=a("li"),LMe=a("strong"),hBr=o("marian"),pBr=o(" \u2014 "),jK=a("a"),_Br=o("FlaxMarianModel"),uBr=o(" (Marian model)"),bBr=l(),PC=a("li"),yMe=a("strong"),vBr=o("mbart"),FBr=o(" \u2014 "),DK=a("a"),TBr=o("FlaxMBartModel"),MBr=o(" (mBART model)"),EBr=l(),BC=a("li"),xMe=a("strong"),CBr=o("mt5"),wBr=o(" \u2014 "),GK=a("a"),ABr=o("FlaxMT5Model"),LBr=o(" (MT5 model)"),yBr=l(),IC=a("li"),$Me=a("strong"),xBr=o("opt"),$Br=o(" \u2014 "),OK=a("a"),kBr=o("FlaxOPTModel"),SBr=o(" (OPT model)"),RBr=l(),NC=a("li"),kMe=a("strong"),PBr=o("pegasus"),BBr=o(" \u2014 "),VK=a("a"),IBr=o("FlaxPegasusModel"),NBr=o(" (Pegasus model)"),qBr=l(),qC=a("li"),SMe=a("strong"),jBr=o("roberta"),DBr=o(" \u2014 "),XK=a("a"),GBr=o("FlaxRobertaModel"),OBr=o(" (RoBERTa model)"),VBr=l(),jC=a("li"),RMe=a("strong"),XBr=o("roformer"),zBr=o(" \u2014 "),zK=a("a"),WBr=o("FlaxRoFormerModel"),QBr=o(" (RoFormer model)"),HBr=l(),DC=a("li"),PMe=a("strong"),UBr=o("t5"),JBr=o(" \u2014 "),WK=a("a"),YBr=o("FlaxT5Model"),KBr=o(" (T5 model)"),ZBr=l(),GC=a("li"),BMe=a("strong"),eIr=o("vision-text-dual-encoder"),oIr=o(" \u2014 "),QK=a("a"),rIr=o("FlaxVisionTextDualEncoderModel"),tIr=o(" (VisionTextDualEncoder model)"),aIr=l(),OC=a("li"),IMe=a("strong"),nIr=o("vit"),sIr=o(" \u2014 "),HK=a("a"),lIr=o("FlaxViTModel"),iIr=o(" (ViT model)"),dIr=l(),VC=a("li"),NMe=a("strong"),cIr=o("wav2vec2"),fIr=o(" \u2014 "),UK=a("a"),mIr=o("FlaxWav2Vec2Model"),gIr=o(" (Wav2Vec2 model)"),hIr=l(),XC=a("li"),qMe=a("strong"),pIr=o("xglm"),_Ir=o(" \u2014 "),JK=a("a"),uIr=o("FlaxXGLMModel"),bIr=o(" (XGLM model)"),vIr=l(),zC=a("li"),jMe=a("strong"),FIr=o("xlm-roberta"),TIr=o(" \u2014 "),YK=a("a"),MIr=o("FlaxXLMRobertaModel"),EIr=o(" (XLM-RoBERTa model)"),CIr=l(),F(WC.$$.fragment),oVe=l(),zc=a("h2"),QC=a("a"),DMe=a("span"),F(Sx.$$.fragment),wIr=l(),GMe=a("span"),AIr=o("FlaxAutoModelForCausalLM"),rVe=l(),hr=a("div"),F(Rx.$$.fragment),LIr=l(),Wc=a("p"),yIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),KK=a("a"),xIr=o("from_pretrained()"),$Ir=o(" class method or the "),ZK=a("a"),kIr=o("from_config()"),SIr=o(` class
method.`),RIr=l(),Px=a("p"),PIr=o("This class cannot be instantiated directly using "),OMe=a("code"),BIr=o("__init__()"),IIr=o(" (throws an error)."),NIr=l(),Wt=a("div"),F(Bx.$$.fragment),qIr=l(),VMe=a("p"),jIr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),DIr=l(),Qc=a("p"),GIr=o(`Note:
Loading a model from its configuration file does `),XMe=a("strong"),OIr=o("not"),VIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),XIr=o("from_pretrained()"),zIr=o(" to load the model weights."),WIr=l(),F(HC.$$.fragment),QIr=l(),Or=a("div"),F(Ix.$$.fragment),HIr=l(),zMe=a("p"),UIr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),JIr=l(),Fn=a("p"),YIr=o("The model class to instantiate is selected based on the "),WMe=a("code"),KIr=o("model_type"),ZIr=o(` property of the config object (either
passed as an argument or loaded from `),QMe=a("code"),eNr=o("pretrained_model_name_or_path"),oNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HMe=a("code"),rNr=o("pretrained_model_name_or_path"),tNr=o(":"),aNr=l(),xe=a("ul"),UC=a("li"),UMe=a("strong"),nNr=o("bart"),sNr=o(" \u2014 "),oZ=a("a"),lNr=o("FlaxBartForCausalLM"),iNr=o(" (BART model)"),dNr=l(),JC=a("li"),JMe=a("strong"),cNr=o("bert"),fNr=o(" \u2014 "),rZ=a("a"),mNr=o("FlaxBertForCausalLM"),gNr=o(" (BERT model)"),hNr=l(),YC=a("li"),YMe=a("strong"),pNr=o("big_bird"),_Nr=o(" \u2014 "),tZ=a("a"),uNr=o("FlaxBigBirdForCausalLM"),bNr=o(" (BigBird model)"),vNr=l(),KC=a("li"),KMe=a("strong"),FNr=o("electra"),TNr=o(" \u2014 "),aZ=a("a"),MNr=o("FlaxElectraForCausalLM"),ENr=o(" (ELECTRA model)"),CNr=l(),ZC=a("li"),ZMe=a("strong"),wNr=o("gpt2"),ANr=o(" \u2014 "),nZ=a("a"),LNr=o("FlaxGPT2LMHeadModel"),yNr=o(" (OpenAI GPT-2 model)"),xNr=l(),e0=a("li"),eEe=a("strong"),$Nr=o("gpt_neo"),kNr=o(" \u2014 "),sZ=a("a"),SNr=o("FlaxGPTNeoForCausalLM"),RNr=o(" (GPT Neo model)"),PNr=l(),o0=a("li"),oEe=a("strong"),BNr=o("gptj"),INr=o(" \u2014 "),lZ=a("a"),NNr=o("FlaxGPTJForCausalLM"),qNr=o(" (GPT-J model)"),jNr=l(),r0=a("li"),rEe=a("strong"),DNr=o("opt"),GNr=o(" \u2014 "),iZ=a("a"),ONr=o("FlaxOPTForCausalLM"),VNr=o(" (OPT model)"),XNr=l(),t0=a("li"),tEe=a("strong"),zNr=o("roberta"),WNr=o(" \u2014 "),dZ=a("a"),QNr=o("FlaxRobertaForCausalLM"),HNr=o(" (RoBERTa model)"),UNr=l(),a0=a("li"),aEe=a("strong"),JNr=o("xglm"),YNr=o(" \u2014 "),cZ=a("a"),KNr=o("FlaxXGLMForCausalLM"),ZNr=o(" (XGLM model)"),eqr=l(),F(n0.$$.fragment),tVe=l(),Hc=a("h2"),s0=a("a"),nEe=a("span"),F(Nx.$$.fragment),oqr=l(),sEe=a("span"),rqr=o("FlaxAutoModelForPreTraining"),aVe=l(),pr=a("div"),F(qx.$$.fragment),tqr=l(),Uc=a("p"),aqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fZ=a("a"),nqr=o("from_pretrained()"),sqr=o(" class method or the "),mZ=a("a"),lqr=o("from_config()"),iqr=o(` class
method.`),dqr=l(),jx=a("p"),cqr=o("This class cannot be instantiated directly using "),lEe=a("code"),fqr=o("__init__()"),mqr=o(" (throws an error)."),gqr=l(),Qt=a("div"),F(Dx.$$.fragment),hqr=l(),iEe=a("p"),pqr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_qr=l(),Jc=a("p"),uqr=o(`Note:
Loading a model from its configuration file does `),dEe=a("strong"),bqr=o("not"),vqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=a("a"),Fqr=o("from_pretrained()"),Tqr=o(" to load the model weights."),Mqr=l(),F(l0.$$.fragment),Eqr=l(),Vr=a("div"),F(Gx.$$.fragment),Cqr=l(),cEe=a("p"),wqr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Aqr=l(),Tn=a("p"),Lqr=o("The model class to instantiate is selected based on the "),fEe=a("code"),yqr=o("model_type"),xqr=o(` property of the config object (either
passed as an argument or loaded from `),mEe=a("code"),$qr=o("pretrained_model_name_or_path"),kqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gEe=a("code"),Sqr=o("pretrained_model_name_or_path"),Rqr=o(":"),Pqr=l(),Ee=a("ul"),i0=a("li"),hEe=a("strong"),Bqr=o("albert"),Iqr=o(" \u2014 "),hZ=a("a"),Nqr=o("FlaxAlbertForPreTraining"),qqr=o(" (ALBERT model)"),jqr=l(),d0=a("li"),pEe=a("strong"),Dqr=o("bart"),Gqr=o(" \u2014 "),pZ=a("a"),Oqr=o("FlaxBartForConditionalGeneration"),Vqr=o(" (BART model)"),Xqr=l(),c0=a("li"),_Ee=a("strong"),zqr=o("bert"),Wqr=o(" \u2014 "),_Z=a("a"),Qqr=o("FlaxBertForPreTraining"),Hqr=o(" (BERT model)"),Uqr=l(),f0=a("li"),uEe=a("strong"),Jqr=o("big_bird"),Yqr=o(" \u2014 "),uZ=a("a"),Kqr=o("FlaxBigBirdForPreTraining"),Zqr=o(" (BigBird model)"),ejr=l(),m0=a("li"),bEe=a("strong"),ojr=o("electra"),rjr=o(" \u2014 "),bZ=a("a"),tjr=o("FlaxElectraForPreTraining"),ajr=o(" (ELECTRA model)"),njr=l(),g0=a("li"),vEe=a("strong"),sjr=o("longt5"),ljr=o(" \u2014 "),vZ=a("a"),ijr=o("FlaxLongT5ForConditionalGeneration"),djr=o(" (LongT5 model)"),cjr=l(),h0=a("li"),FEe=a("strong"),fjr=o("mbart"),mjr=o(" \u2014 "),FZ=a("a"),gjr=o("FlaxMBartForConditionalGeneration"),hjr=o(" (mBART model)"),pjr=l(),p0=a("li"),TEe=a("strong"),_jr=o("mt5"),ujr=o(" \u2014 "),TZ=a("a"),bjr=o("FlaxMT5ForConditionalGeneration"),vjr=o(" (MT5 model)"),Fjr=l(),_0=a("li"),MEe=a("strong"),Tjr=o("roberta"),Mjr=o(" \u2014 "),MZ=a("a"),Ejr=o("FlaxRobertaForMaskedLM"),Cjr=o(" (RoBERTa model)"),wjr=l(),u0=a("li"),EEe=a("strong"),Ajr=o("roformer"),Ljr=o(" \u2014 "),EZ=a("a"),yjr=o("FlaxRoFormerForMaskedLM"),xjr=o(" (RoFormer model)"),$jr=l(),b0=a("li"),CEe=a("strong"),kjr=o("t5"),Sjr=o(" \u2014 "),CZ=a("a"),Rjr=o("FlaxT5ForConditionalGeneration"),Pjr=o(" (T5 model)"),Bjr=l(),v0=a("li"),wEe=a("strong"),Ijr=o("wav2vec2"),Njr=o(" \u2014 "),wZ=a("a"),qjr=o("FlaxWav2Vec2ForPreTraining"),jjr=o(" (Wav2Vec2 model)"),Djr=l(),F0=a("li"),AEe=a("strong"),Gjr=o("xlm-roberta"),Ojr=o(" \u2014 "),AZ=a("a"),Vjr=o("FlaxXLMRobertaForMaskedLM"),Xjr=o(" (XLM-RoBERTa model)"),zjr=l(),F(T0.$$.fragment),nVe=l(),Yc=a("h2"),M0=a("a"),LEe=a("span"),F(Ox.$$.fragment),Wjr=l(),yEe=a("span"),Qjr=o("FlaxAutoModelForMaskedLM"),sVe=l(),_r=a("div"),F(Vx.$$.fragment),Hjr=l(),Kc=a("p"),Ujr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LZ=a("a"),Jjr=o("from_pretrained()"),Yjr=o(" class method or the "),yZ=a("a"),Kjr=o("from_config()"),Zjr=o(` class
method.`),eDr=l(),Xx=a("p"),oDr=o("This class cannot be instantiated directly using "),xEe=a("code"),rDr=o("__init__()"),tDr=o(" (throws an error)."),aDr=l(),Ht=a("div"),F(zx.$$.fragment),nDr=l(),$Ee=a("p"),sDr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lDr=l(),Zc=a("p"),iDr=o(`Note:
Loading a model from its configuration file does `),kEe=a("strong"),dDr=o("not"),cDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xZ=a("a"),fDr=o("from_pretrained()"),mDr=o(" to load the model weights."),gDr=l(),F(E0.$$.fragment),hDr=l(),Xr=a("div"),F(Wx.$$.fragment),pDr=l(),SEe=a("p"),_Dr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),uDr=l(),Mn=a("p"),bDr=o("The model class to instantiate is selected based on the "),REe=a("code"),vDr=o("model_type"),FDr=o(` property of the config object (either
passed as an argument or loaded from `),PEe=a("code"),TDr=o("pretrained_model_name_or_path"),MDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BEe=a("code"),EDr=o("pretrained_model_name_or_path"),CDr=o(":"),wDr=l(),$e=a("ul"),C0=a("li"),IEe=a("strong"),ADr=o("albert"),LDr=o(" \u2014 "),$Z=a("a"),yDr=o("FlaxAlbertForMaskedLM"),xDr=o(" (ALBERT model)"),$Dr=l(),w0=a("li"),NEe=a("strong"),kDr=o("bart"),SDr=o(" \u2014 "),kZ=a("a"),RDr=o("FlaxBartForConditionalGeneration"),PDr=o(" (BART model)"),BDr=l(),A0=a("li"),qEe=a("strong"),IDr=o("bert"),NDr=o(" \u2014 "),SZ=a("a"),qDr=o("FlaxBertForMaskedLM"),jDr=o(" (BERT model)"),DDr=l(),L0=a("li"),jEe=a("strong"),GDr=o("big_bird"),ODr=o(" \u2014 "),RZ=a("a"),VDr=o("FlaxBigBirdForMaskedLM"),XDr=o(" (BigBird model)"),zDr=l(),y0=a("li"),DEe=a("strong"),WDr=o("distilbert"),QDr=o(" \u2014 "),PZ=a("a"),HDr=o("FlaxDistilBertForMaskedLM"),UDr=o(" (DistilBERT model)"),JDr=l(),x0=a("li"),GEe=a("strong"),YDr=o("electra"),KDr=o(" \u2014 "),BZ=a("a"),ZDr=o("FlaxElectraForMaskedLM"),eGr=o(" (ELECTRA model)"),oGr=l(),$0=a("li"),OEe=a("strong"),rGr=o("mbart"),tGr=o(" \u2014 "),IZ=a("a"),aGr=o("FlaxMBartForConditionalGeneration"),nGr=o(" (mBART model)"),sGr=l(),k0=a("li"),VEe=a("strong"),lGr=o("roberta"),iGr=o(" \u2014 "),NZ=a("a"),dGr=o("FlaxRobertaForMaskedLM"),cGr=o(" (RoBERTa model)"),fGr=l(),S0=a("li"),XEe=a("strong"),mGr=o("roformer"),gGr=o(" \u2014 "),qZ=a("a"),hGr=o("FlaxRoFormerForMaskedLM"),pGr=o(" (RoFormer model)"),_Gr=l(),R0=a("li"),zEe=a("strong"),uGr=o("xlm-roberta"),bGr=o(" \u2014 "),jZ=a("a"),vGr=o("FlaxXLMRobertaForMaskedLM"),FGr=o(" (XLM-RoBERTa model)"),TGr=l(),F(P0.$$.fragment),lVe=l(),ef=a("h2"),B0=a("a"),WEe=a("span"),F(Qx.$$.fragment),MGr=l(),QEe=a("span"),EGr=o("FlaxAutoModelForSeq2SeqLM"),iVe=l(),ur=a("div"),F(Hx.$$.fragment),CGr=l(),of=a("p"),wGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),DZ=a("a"),AGr=o("from_pretrained()"),LGr=o(" class method or the "),GZ=a("a"),yGr=o("from_config()"),xGr=o(` class
method.`),$Gr=l(),Ux=a("p"),kGr=o("This class cannot be instantiated directly using "),HEe=a("code"),SGr=o("__init__()"),RGr=o(" (throws an error)."),PGr=l(),Ut=a("div"),F(Jx.$$.fragment),BGr=l(),UEe=a("p"),IGr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),NGr=l(),rf=a("p"),qGr=o(`Note:
Loading a model from its configuration file does `),JEe=a("strong"),jGr=o("not"),DGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=a("a"),GGr=o("from_pretrained()"),OGr=o(" to load the model weights."),VGr=l(),F(I0.$$.fragment),XGr=l(),zr=a("div"),F(Yx.$$.fragment),zGr=l(),YEe=a("p"),WGr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),QGr=l(),En=a("p"),HGr=o("The model class to instantiate is selected based on the "),KEe=a("code"),UGr=o("model_type"),JGr=o(` property of the config object (either
passed as an argument or loaded from `),ZEe=a("code"),YGr=o("pretrained_model_name_or_path"),KGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eCe=a("code"),ZGr=o("pretrained_model_name_or_path"),eOr=o(":"),oOr=l(),ke=a("ul"),N0=a("li"),oCe=a("strong"),rOr=o("bart"),tOr=o(" \u2014 "),VZ=a("a"),aOr=o("FlaxBartForConditionalGeneration"),nOr=o(" (BART model)"),sOr=l(),q0=a("li"),rCe=a("strong"),lOr=o("blenderbot"),iOr=o(" \u2014 "),XZ=a("a"),dOr=o("FlaxBlenderbotForConditionalGeneration"),cOr=o(" (Blenderbot model)"),fOr=l(),j0=a("li"),tCe=a("strong"),mOr=o("blenderbot-small"),gOr=o(" \u2014 "),zZ=a("a"),hOr=o("FlaxBlenderbotSmallForConditionalGeneration"),pOr=o(" (BlenderbotSmall model)"),_Or=l(),D0=a("li"),aCe=a("strong"),uOr=o("encoder-decoder"),bOr=o(" \u2014 "),WZ=a("a"),vOr=o("FlaxEncoderDecoderModel"),FOr=o(" (Encoder decoder model)"),TOr=l(),G0=a("li"),nCe=a("strong"),MOr=o("longt5"),EOr=o(" \u2014 "),QZ=a("a"),COr=o("FlaxLongT5ForConditionalGeneration"),wOr=o(" (LongT5 model)"),AOr=l(),O0=a("li"),sCe=a("strong"),LOr=o("marian"),yOr=o(" \u2014 "),HZ=a("a"),xOr=o("FlaxMarianMTModel"),$Or=o(" (Marian model)"),kOr=l(),V0=a("li"),lCe=a("strong"),SOr=o("mbart"),ROr=o(" \u2014 "),UZ=a("a"),POr=o("FlaxMBartForConditionalGeneration"),BOr=o(" (mBART model)"),IOr=l(),X0=a("li"),iCe=a("strong"),NOr=o("mt5"),qOr=o(" \u2014 "),JZ=a("a"),jOr=o("FlaxMT5ForConditionalGeneration"),DOr=o(" (MT5 model)"),GOr=l(),z0=a("li"),dCe=a("strong"),OOr=o("pegasus"),VOr=o(" \u2014 "),YZ=a("a"),XOr=o("FlaxPegasusForConditionalGeneration"),zOr=o(" (Pegasus model)"),WOr=l(),W0=a("li"),cCe=a("strong"),QOr=o("t5"),HOr=o(" \u2014 "),KZ=a("a"),UOr=o("FlaxT5ForConditionalGeneration"),JOr=o(" (T5 model)"),YOr=l(),F(Q0.$$.fragment),dVe=l(),tf=a("h2"),H0=a("a"),fCe=a("span"),F(Kx.$$.fragment),KOr=l(),mCe=a("span"),ZOr=o("FlaxAutoModelForSequenceClassification"),cVe=l(),br=a("div"),F(Zx.$$.fragment),eVr=l(),af=a("p"),oVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZZ=a("a"),rVr=o("from_pretrained()"),tVr=o(" class method or the "),eee=a("a"),aVr=o("from_config()"),nVr=o(` class
method.`),sVr=l(),e$=a("p"),lVr=o("This class cannot be instantiated directly using "),gCe=a("code"),iVr=o("__init__()"),dVr=o(" (throws an error)."),cVr=l(),Jt=a("div"),F(o$.$$.fragment),fVr=l(),hCe=a("p"),mVr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gVr=l(),nf=a("p"),hVr=o(`Note:
Loading a model from its configuration file does `),pCe=a("strong"),pVr=o("not"),_Vr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=a("a"),uVr=o("from_pretrained()"),bVr=o(" to load the model weights."),vVr=l(),F(U0.$$.fragment),FVr=l(),Wr=a("div"),F(r$.$$.fragment),TVr=l(),_Ce=a("p"),MVr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),EVr=l(),Cn=a("p"),CVr=o("The model class to instantiate is selected based on the "),uCe=a("code"),wVr=o("model_type"),AVr=o(` property of the config object (either
passed as an argument or loaded from `),bCe=a("code"),LVr=o("pretrained_model_name_or_path"),yVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vCe=a("code"),xVr=o("pretrained_model_name_or_path"),$Vr=o(":"),kVr=l(),Se=a("ul"),J0=a("li"),FCe=a("strong"),SVr=o("albert"),RVr=o(" \u2014 "),ree=a("a"),PVr=o("FlaxAlbertForSequenceClassification"),BVr=o(" (ALBERT model)"),IVr=l(),Y0=a("li"),TCe=a("strong"),NVr=o("bart"),qVr=o(" \u2014 "),tee=a("a"),jVr=o("FlaxBartForSequenceClassification"),DVr=o(" (BART model)"),GVr=l(),K0=a("li"),MCe=a("strong"),OVr=o("bert"),VVr=o(" \u2014 "),aee=a("a"),XVr=o("FlaxBertForSequenceClassification"),zVr=o(" (BERT model)"),WVr=l(),Z0=a("li"),ECe=a("strong"),QVr=o("big_bird"),HVr=o(" \u2014 "),nee=a("a"),UVr=o("FlaxBigBirdForSequenceClassification"),JVr=o(" (BigBird model)"),YVr=l(),ew=a("li"),CCe=a("strong"),KVr=o("distilbert"),ZVr=o(" \u2014 "),see=a("a"),eXr=o("FlaxDistilBertForSequenceClassification"),oXr=o(" (DistilBERT model)"),rXr=l(),ow=a("li"),wCe=a("strong"),tXr=o("electra"),aXr=o(" \u2014 "),lee=a("a"),nXr=o("FlaxElectraForSequenceClassification"),sXr=o(" (ELECTRA model)"),lXr=l(),rw=a("li"),ACe=a("strong"),iXr=o("mbart"),dXr=o(" \u2014 "),iee=a("a"),cXr=o("FlaxMBartForSequenceClassification"),fXr=o(" (mBART model)"),mXr=l(),tw=a("li"),LCe=a("strong"),gXr=o("roberta"),hXr=o(" \u2014 "),dee=a("a"),pXr=o("FlaxRobertaForSequenceClassification"),_Xr=o(" (RoBERTa model)"),uXr=l(),aw=a("li"),yCe=a("strong"),bXr=o("roformer"),vXr=o(" \u2014 "),cee=a("a"),FXr=o("FlaxRoFormerForSequenceClassification"),TXr=o(" (RoFormer model)"),MXr=l(),nw=a("li"),xCe=a("strong"),EXr=o("xlm-roberta"),CXr=o(" \u2014 "),fee=a("a"),wXr=o("FlaxXLMRobertaForSequenceClassification"),AXr=o(" (XLM-RoBERTa model)"),LXr=l(),F(sw.$$.fragment),fVe=l(),sf=a("h2"),lw=a("a"),$Ce=a("span"),F(t$.$$.fragment),yXr=l(),kCe=a("span"),xXr=o("FlaxAutoModelForQuestionAnswering"),mVe=l(),vr=a("div"),F(a$.$$.fragment),$Xr=l(),lf=a("p"),kXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mee=a("a"),SXr=o("from_pretrained()"),RXr=o(" class method or the "),gee=a("a"),PXr=o("from_config()"),BXr=o(` class
method.`),IXr=l(),n$=a("p"),NXr=o("This class cannot be instantiated directly using "),SCe=a("code"),qXr=o("__init__()"),jXr=o(" (throws an error)."),DXr=l(),Yt=a("div"),F(s$.$$.fragment),GXr=l(),RCe=a("p"),OXr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),VXr=l(),df=a("p"),XXr=o(`Note:
Loading a model from its configuration file does `),PCe=a("strong"),zXr=o("not"),WXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hee=a("a"),QXr=o("from_pretrained()"),HXr=o(" to load the model weights."),UXr=l(),F(iw.$$.fragment),JXr=l(),Qr=a("div"),F(l$.$$.fragment),YXr=l(),BCe=a("p"),KXr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ZXr=l(),wn=a("p"),ezr=o("The model class to instantiate is selected based on the "),ICe=a("code"),ozr=o("model_type"),rzr=o(` property of the config object (either
passed as an argument or loaded from `),NCe=a("code"),tzr=o("pretrained_model_name_or_path"),azr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qCe=a("code"),nzr=o("pretrained_model_name_or_path"),szr=o(":"),lzr=l(),Re=a("ul"),dw=a("li"),jCe=a("strong"),izr=o("albert"),dzr=o(" \u2014 "),pee=a("a"),czr=o("FlaxAlbertForQuestionAnswering"),fzr=o(" (ALBERT model)"),mzr=l(),cw=a("li"),DCe=a("strong"),gzr=o("bart"),hzr=o(" \u2014 "),_ee=a("a"),pzr=o("FlaxBartForQuestionAnswering"),_zr=o(" (BART model)"),uzr=l(),fw=a("li"),GCe=a("strong"),bzr=o("bert"),vzr=o(" \u2014 "),uee=a("a"),Fzr=o("FlaxBertForQuestionAnswering"),Tzr=o(" (BERT model)"),Mzr=l(),mw=a("li"),OCe=a("strong"),Ezr=o("big_bird"),Czr=o(" \u2014 "),bee=a("a"),wzr=o("FlaxBigBirdForQuestionAnswering"),Azr=o(" (BigBird model)"),Lzr=l(),gw=a("li"),VCe=a("strong"),yzr=o("distilbert"),xzr=o(" \u2014 "),vee=a("a"),$zr=o("FlaxDistilBertForQuestionAnswering"),kzr=o(" (DistilBERT model)"),Szr=l(),hw=a("li"),XCe=a("strong"),Rzr=o("electra"),Pzr=o(" \u2014 "),Fee=a("a"),Bzr=o("FlaxElectraForQuestionAnswering"),Izr=o(" (ELECTRA model)"),Nzr=l(),pw=a("li"),zCe=a("strong"),qzr=o("mbart"),jzr=o(" \u2014 "),Tee=a("a"),Dzr=o("FlaxMBartForQuestionAnswering"),Gzr=o(" (mBART model)"),Ozr=l(),_w=a("li"),WCe=a("strong"),Vzr=o("roberta"),Xzr=o(" \u2014 "),Mee=a("a"),zzr=o("FlaxRobertaForQuestionAnswering"),Wzr=o(" (RoBERTa model)"),Qzr=l(),uw=a("li"),QCe=a("strong"),Hzr=o("roformer"),Uzr=o(" \u2014 "),Eee=a("a"),Jzr=o("FlaxRoFormerForQuestionAnswering"),Yzr=o(" (RoFormer model)"),Kzr=l(),bw=a("li"),HCe=a("strong"),Zzr=o("xlm-roberta"),eWr=o(" \u2014 "),Cee=a("a"),oWr=o("FlaxXLMRobertaForQuestionAnswering"),rWr=o(" (XLM-RoBERTa model)"),tWr=l(),F(vw.$$.fragment),gVe=l(),cf=a("h2"),Fw=a("a"),UCe=a("span"),F(i$.$$.fragment),aWr=l(),JCe=a("span"),nWr=o("FlaxAutoModelForTokenClassification"),hVe=l(),Fr=a("div"),F(d$.$$.fragment),sWr=l(),ff=a("p"),lWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wee=a("a"),iWr=o("from_pretrained()"),dWr=o(" class method or the "),Aee=a("a"),cWr=o("from_config()"),fWr=o(` class
method.`),mWr=l(),c$=a("p"),gWr=o("This class cannot be instantiated directly using "),YCe=a("code"),hWr=o("__init__()"),pWr=o(" (throws an error)."),_Wr=l(),Kt=a("div"),F(f$.$$.fragment),uWr=l(),KCe=a("p"),bWr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),vWr=l(),mf=a("p"),FWr=o(`Note:
Loading a model from its configuration file does `),ZCe=a("strong"),TWr=o("not"),MWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=a("a"),EWr=o("from_pretrained()"),CWr=o(" to load the model weights."),wWr=l(),F(Tw.$$.fragment),AWr=l(),Hr=a("div"),F(m$.$$.fragment),LWr=l(),e0e=a("p"),yWr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xWr=l(),An=a("p"),$Wr=o("The model class to instantiate is selected based on the "),o0e=a("code"),kWr=o("model_type"),SWr=o(` property of the config object (either
passed as an argument or loaded from `),r0e=a("code"),RWr=o("pretrained_model_name_or_path"),PWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t0e=a("code"),BWr=o("pretrained_model_name_or_path"),IWr=o(":"),NWr=l(),Ve=a("ul"),Mw=a("li"),a0e=a("strong"),qWr=o("albert"),jWr=o(" \u2014 "),yee=a("a"),DWr=o("FlaxAlbertForTokenClassification"),GWr=o(" (ALBERT model)"),OWr=l(),Ew=a("li"),n0e=a("strong"),VWr=o("bert"),XWr=o(" \u2014 "),xee=a("a"),zWr=o("FlaxBertForTokenClassification"),WWr=o(" (BERT model)"),QWr=l(),Cw=a("li"),s0e=a("strong"),HWr=o("big_bird"),UWr=o(" \u2014 "),$ee=a("a"),JWr=o("FlaxBigBirdForTokenClassification"),YWr=o(" (BigBird model)"),KWr=l(),ww=a("li"),l0e=a("strong"),ZWr=o("distilbert"),eQr=o(" \u2014 "),kee=a("a"),oQr=o("FlaxDistilBertForTokenClassification"),rQr=o(" (DistilBERT model)"),tQr=l(),Aw=a("li"),i0e=a("strong"),aQr=o("electra"),nQr=o(" \u2014 "),See=a("a"),sQr=o("FlaxElectraForTokenClassification"),lQr=o(" (ELECTRA model)"),iQr=l(),Lw=a("li"),d0e=a("strong"),dQr=o("roberta"),cQr=o(" \u2014 "),Ree=a("a"),fQr=o("FlaxRobertaForTokenClassification"),mQr=o(" (RoBERTa model)"),gQr=l(),yw=a("li"),c0e=a("strong"),hQr=o("roformer"),pQr=o(" \u2014 "),Pee=a("a"),_Qr=o("FlaxRoFormerForTokenClassification"),uQr=o(" (RoFormer model)"),bQr=l(),xw=a("li"),f0e=a("strong"),vQr=o("xlm-roberta"),FQr=o(" \u2014 "),Bee=a("a"),TQr=o("FlaxXLMRobertaForTokenClassification"),MQr=o(" (XLM-RoBERTa model)"),EQr=l(),F($w.$$.fragment),pVe=l(),gf=a("h2"),kw=a("a"),m0e=a("span"),F(g$.$$.fragment),CQr=l(),g0e=a("span"),wQr=o("FlaxAutoModelForMultipleChoice"),_Ve=l(),Tr=a("div"),F(h$.$$.fragment),AQr=l(),hf=a("p"),LQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Iee=a("a"),yQr=o("from_pretrained()"),xQr=o(" class method or the "),Nee=a("a"),$Qr=o("from_config()"),kQr=o(` class
method.`),SQr=l(),p$=a("p"),RQr=o("This class cannot be instantiated directly using "),h0e=a("code"),PQr=o("__init__()"),BQr=o(" (throws an error)."),IQr=l(),Zt=a("div"),F(_$.$$.fragment),NQr=l(),p0e=a("p"),qQr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),jQr=l(),pf=a("p"),DQr=o(`Note:
Loading a model from its configuration file does `),_0e=a("strong"),GQr=o("not"),OQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=a("a"),VQr=o("from_pretrained()"),XQr=o(" to load the model weights."),zQr=l(),F(Sw.$$.fragment),WQr=l(),Ur=a("div"),F(u$.$$.fragment),QQr=l(),u0e=a("p"),HQr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),UQr=l(),Ln=a("p"),JQr=o("The model class to instantiate is selected based on the "),b0e=a("code"),YQr=o("model_type"),KQr=o(` property of the config object (either
passed as an argument or loaded from `),v0e=a("code"),ZQr=o("pretrained_model_name_or_path"),eHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=a("code"),oHr=o("pretrained_model_name_or_path"),rHr=o(":"),tHr=l(),Xe=a("ul"),Rw=a("li"),T0e=a("strong"),aHr=o("albert"),nHr=o(" \u2014 "),jee=a("a"),sHr=o("FlaxAlbertForMultipleChoice"),lHr=o(" (ALBERT model)"),iHr=l(),Pw=a("li"),M0e=a("strong"),dHr=o("bert"),cHr=o(" \u2014 "),Dee=a("a"),fHr=o("FlaxBertForMultipleChoice"),mHr=o(" (BERT model)"),gHr=l(),Bw=a("li"),E0e=a("strong"),hHr=o("big_bird"),pHr=o(" \u2014 "),Gee=a("a"),_Hr=o("FlaxBigBirdForMultipleChoice"),uHr=o(" (BigBird model)"),bHr=l(),Iw=a("li"),C0e=a("strong"),vHr=o("distilbert"),FHr=o(" \u2014 "),Oee=a("a"),THr=o("FlaxDistilBertForMultipleChoice"),MHr=o(" (DistilBERT model)"),EHr=l(),Nw=a("li"),w0e=a("strong"),CHr=o("electra"),wHr=o(" \u2014 "),Vee=a("a"),AHr=o("FlaxElectraForMultipleChoice"),LHr=o(" (ELECTRA model)"),yHr=l(),qw=a("li"),A0e=a("strong"),xHr=o("roberta"),$Hr=o(" \u2014 "),Xee=a("a"),kHr=o("FlaxRobertaForMultipleChoice"),SHr=o(" (RoBERTa model)"),RHr=l(),jw=a("li"),L0e=a("strong"),PHr=o("roformer"),BHr=o(" \u2014 "),zee=a("a"),IHr=o("FlaxRoFormerForMultipleChoice"),NHr=o(" (RoFormer model)"),qHr=l(),Dw=a("li"),y0e=a("strong"),jHr=o("xlm-roberta"),DHr=o(" \u2014 "),Wee=a("a"),GHr=o("FlaxXLMRobertaForMultipleChoice"),OHr=o(" (XLM-RoBERTa model)"),VHr=l(),F(Gw.$$.fragment),uVe=l(),_f=a("h2"),Ow=a("a"),x0e=a("span"),F(b$.$$.fragment),XHr=l(),$0e=a("span"),zHr=o("FlaxAutoModelForNextSentencePrediction"),bVe=l(),Mr=a("div"),F(v$.$$.fragment),WHr=l(),uf=a("p"),QHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Qee=a("a"),HHr=o("from_pretrained()"),UHr=o(" class method or the "),Hee=a("a"),JHr=o("from_config()"),YHr=o(` class
method.`),KHr=l(),F$=a("p"),ZHr=o("This class cannot be instantiated directly using "),k0e=a("code"),eUr=o("__init__()"),oUr=o(" (throws an error)."),rUr=l(),ea=a("div"),F(T$.$$.fragment),tUr=l(),S0e=a("p"),aUr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),nUr=l(),bf=a("p"),sUr=o(`Note:
Loading a model from its configuration file does `),R0e=a("strong"),lUr=o("not"),iUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uee=a("a"),dUr=o("from_pretrained()"),cUr=o(" to load the model weights."),fUr=l(),F(Vw.$$.fragment),mUr=l(),Jr=a("div"),F(M$.$$.fragment),gUr=l(),P0e=a("p"),hUr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pUr=l(),yn=a("p"),_Ur=o("The model class to instantiate is selected based on the "),B0e=a("code"),uUr=o("model_type"),bUr=o(` property of the config object (either
passed as an argument or loaded from `),I0e=a("code"),vUr=o("pretrained_model_name_or_path"),FUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N0e=a("code"),TUr=o("pretrained_model_name_or_path"),MUr=o(":"),EUr=l(),q0e=a("ul"),Xw=a("li"),j0e=a("strong"),CUr=o("bert"),wUr=o(" \u2014 "),Jee=a("a"),AUr=o("FlaxBertForNextSentencePrediction"),LUr=o(" (BERT model)"),yUr=l(),F(zw.$$.fragment),vVe=l(),vf=a("h2"),Ww=a("a"),D0e=a("span"),F(E$.$$.fragment),xUr=l(),G0e=a("span"),$Ur=o("FlaxAutoModelForImageClassification"),FVe=l(),Er=a("div"),F(C$.$$.fragment),kUr=l(),Ff=a("p"),SUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Yee=a("a"),RUr=o("from_pretrained()"),PUr=o(" class method or the "),Kee=a("a"),BUr=o("from_config()"),IUr=o(` class
method.`),NUr=l(),w$=a("p"),qUr=o("This class cannot be instantiated directly using "),O0e=a("code"),jUr=o("__init__()"),DUr=o(" (throws an error)."),GUr=l(),oa=a("div"),F(A$.$$.fragment),OUr=l(),V0e=a("p"),VUr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),XUr=l(),Tf=a("p"),zUr=o(`Note:
Loading a model from its configuration file does `),X0e=a("strong"),WUr=o("not"),QUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zee=a("a"),HUr=o("from_pretrained()"),UUr=o(" to load the model weights."),JUr=l(),F(Qw.$$.fragment),YUr=l(),Yr=a("div"),F(L$.$$.fragment),KUr=l(),z0e=a("p"),ZUr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),eJr=l(),xn=a("p"),oJr=o("The model class to instantiate is selected based on the "),W0e=a("code"),rJr=o("model_type"),tJr=o(` property of the config object (either
passed as an argument or loaded from `),Q0e=a("code"),aJr=o("pretrained_model_name_or_path"),nJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=a("code"),sJr=o("pretrained_model_name_or_path"),lJr=o(":"),iJr=l(),y$=a("ul"),Hw=a("li"),U0e=a("strong"),dJr=o("beit"),cJr=o(" \u2014 "),eoe=a("a"),fJr=o("FlaxBeitForImageClassification"),mJr=o(" (BEiT model)"),gJr=l(),Uw=a("li"),J0e=a("strong"),hJr=o("vit"),pJr=o(" \u2014 "),ooe=a("a"),_Jr=o("FlaxViTForImageClassification"),uJr=o(" (ViT model)"),bJr=l(),F(Jw.$$.fragment),TVe=l(),Mf=a("h2"),Yw=a("a"),Y0e=a("span"),F(x$.$$.fragment),vJr=l(),K0e=a("span"),FJr=o("FlaxAutoModelForVision2Seq"),MVe=l(),Cr=a("div"),F($$.$$.fragment),TJr=l(),Ef=a("p"),MJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),roe=a("a"),EJr=o("from_pretrained()"),CJr=o(" class method or the "),toe=a("a"),wJr=o("from_config()"),AJr=o(` class
method.`),LJr=l(),k$=a("p"),yJr=o("This class cannot be instantiated directly using "),Z0e=a("code"),xJr=o("__init__()"),$Jr=o(" (throws an error)."),kJr=l(),ra=a("div"),F(S$.$$.fragment),SJr=l(),ewe=a("p"),RJr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),PJr=l(),Cf=a("p"),BJr=o(`Note:
Loading a model from its configuration file does `),owe=a("strong"),IJr=o("not"),NJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aoe=a("a"),qJr=o("from_pretrained()"),jJr=o(" to load the model weights."),DJr=l(),F(Kw.$$.fragment),GJr=l(),Kr=a("div"),F(R$.$$.fragment),OJr=l(),rwe=a("p"),VJr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),XJr=l(),$n=a("p"),zJr=o("The model class to instantiate is selected based on the "),twe=a("code"),WJr=o("model_type"),QJr=o(` property of the config object (either
passed as an argument or loaded from `),awe=a("code"),HJr=o("pretrained_model_name_or_path"),UJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nwe=a("code"),JJr=o("pretrained_model_name_or_path"),YJr=o(":"),KJr=l(),swe=a("ul"),Zw=a("li"),lwe=a("strong"),ZJr=o("vision-encoder-decoder"),eYr=o(" \u2014 "),noe=a("a"),oYr=o("FlaxVisionEncoderDecoderModel"),rYr=o(" (Vision Encoder decoder model)"),tYr=l(),F(eA.$$.fragment),this.h()},l(f){const u=ujt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var P$=s(p);m=n(P$,"A",{id:!0,class:!0,href:!0});var iwe=s(m);_=n(iwe,"SPAN",{});var dwe=s(_);T(d.$$.fragment,dwe),dwe.forEach(t),iwe.forEach(t),h=i(P$),Eo=n(P$,"SPAN",{});var cwe=s(Eo);Ti=r(cwe,"Auto Classes"),cwe.forEach(t),P$.forEach(t),yf=i(f),nt=n(f,"P",{});var B$=s(nt);Mi=r(B$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ei=n(B$,"CODE",{});var fwe=s(Ei);FL=r(fwe,"from_pretrained()"),fwe.forEach(t),xf=r(B$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),B$.forEach(t),Oe=i(f),We=n(f,"P",{});var kn=s(We);Ci=r(kn,"Instantiating one of "),Sn=n(kn,"A",{href:!0});var mwe=s(Sn);TL=r(mwe,"AutoConfig"),mwe.forEach(t),Rn=r(kn,", "),Pn=n(kn,"A",{href:!0});var gwe=s(Pn);ML=r(gwe,"AutoModel"),gwe.forEach(t),wi=r(kn,`, and
`),Bn=n(kn,"A",{href:!0});var hwe=s(Bn);EL=r(hwe,"AutoTokenizer"),hwe.forEach(t),Ai=r(kn," will directly create a class of the relevant architecture. For instance"),kn.forEach(t),$f=i(f),T(xa.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var I$=s(Ae);Jk=r(I$,"will create a model that is an instance of "),Li=n(I$,"A",{href:!0});var pwe=s(Li);Yk=r(pwe,"BertModel"),pwe.forEach(t),Kk=r(I$,"."),I$.forEach(t),Co=i(f),$a=n(f,"P",{});var N$=s($a);Zk=r(N$,"There is one class of "),kf=n(N$,"CODE",{});var _we=s(kf);eS=r(_we,"AutoModel"),_we.forEach(t),Rze=r(N$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),N$.forEach(t),bGe=i(f),yi=n(f,"H2",{class:!0});var q$=s(yi);Sf=n(q$,"A",{id:!0,class:!0,href:!0});var uwe=s(Sf);ete=n(uwe,"SPAN",{});var bwe=s(ete);T(CL.$$.fragment,bwe),bwe.forEach(t),uwe.forEach(t),Pze=i(q$),ote=n(q$,"SPAN",{});var vwe=s(ote);Bze=r(vwe,"Extending the Auto Classes"),vwe.forEach(t),q$.forEach(t),vGe=i(f),In=n(f,"P",{});var wf=s(In);Ize=r(wf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),rte=n(wf,"CODE",{});var Fwe=s(rte);Nze=r(Fwe,"NewModel"),Fwe.forEach(t),qze=r(wf,", make sure you have a "),tte=n(wf,"CODE",{});var Twe=s(tte);jze=r(Twe,"NewModelConfig"),Twe.forEach(t),Dze=r(wf,` then you can add those to the auto
classes like this:`),wf.forEach(t),FGe=i(f),T(wL.$$.fragment,f),TGe=i(f),oS=n(f,"P",{});var Mwe=s(oS);Gze=r(Mwe,"You will then be able to use the auto classes like you would usually do!"),Mwe.forEach(t),MGe=i(f),T(Rf.$$.fragment,f),EGe=i(f),xi=n(f,"H2",{class:!0});var j$=s(xi);Pf=n(j$,"A",{id:!0,class:!0,href:!0});var Ewe=s(Pf);ate=n(Ewe,"SPAN",{});var Cwe=s(ate);T(AL.$$.fragment,Cwe),Cwe.forEach(t),Ewe.forEach(t),Oze=i(j$),nte=n(j$,"SPAN",{});var wwe=s(nte);Vze=r(wwe,"AutoConfig"),wwe.forEach(t),j$.forEach(t),CGe=i(f),wo=n(f,"DIV",{class:!0});var tt=s(wo);T(LL.$$.fragment,tt),Xze=i(tt),yL=n(tt,"P",{});var D$=s(yL);zze=r(D$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),rS=n(D$,"A",{href:!0});var Awe=s(rS);Wze=r(Awe,"from_pretrained()"),Awe.forEach(t),Qze=r(D$," class method."),D$.forEach(t),Hze=i(tt),xL=n(tt,"P",{});var G$=s(xL);Uze=r(G$,"This class cannot be instantiated directly using "),ste=n(G$,"CODE",{});var Lwe=s(ste);Jze=r(Lwe,"__init__()"),Lwe.forEach(t),Yze=r(G$," (throws an error)."),G$.forEach(t),Kze=i(tt),wr=n(tt,"DIV",{class:!0});var at=s(wr);T($L.$$.fragment,at),Zze=i(at),lte=n(at,"P",{});var ywe=s(lte);eWe=r(ywe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),ywe.forEach(t),oWe=i(at),$i=n(at,"P",{});var Af=s($i);rWe=r(Af,"The configuration class to instantiate is selected based on the "),ite=n(Af,"CODE",{});var xwe=s(ite);tWe=r(xwe,"model_type"),xwe.forEach(t),aWe=r(Af,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),dte=n(Af,"CODE",{});var $we=s(dte);nWe=r($we,"pretrained_model_name_or_path"),$we.forEach(t),sWe=r(Af,":"),Af.forEach(t),lWe=i(at),A=n(at,"UL",{});var L=s(A);Bf=n(L,"LI",{});var oA=s(Bf);cte=n(oA,"STRONG",{});var kwe=s(cte);iWe=r(kwe,"albert"),kwe.forEach(t),dWe=r(oA," \u2014 "),tS=n(oA,"A",{href:!0});var Swe=s(tS);cWe=r(Swe,"AlbertConfig"),Swe.forEach(t),fWe=r(oA," (ALBERT model)"),oA.forEach(t),mWe=i(L),If=n(L,"LI",{});var rA=s(If);fte=n(rA,"STRONG",{});var Rwe=s(fte);gWe=r(Rwe,"bart"),Rwe.forEach(t),hWe=r(rA," \u2014 "),aS=n(rA,"A",{href:!0});var Pwe=s(aS);pWe=r(Pwe,"BartConfig"),Pwe.forEach(t),_We=r(rA," (BART model)"),rA.forEach(t),uWe=i(L),Nf=n(L,"LI",{});var tA=s(Nf);mte=n(tA,"STRONG",{});var Bwe=s(mte);bWe=r(Bwe,"beit"),Bwe.forEach(t),vWe=r(tA," \u2014 "),nS=n(tA,"A",{href:!0});var Iwe=s(nS);FWe=r(Iwe,"BeitConfig"),Iwe.forEach(t),TWe=r(tA," (BEiT model)"),tA.forEach(t),MWe=i(L),qf=n(L,"LI",{});var aA=s(qf);gte=n(aA,"STRONG",{});var Nwe=s(gte);EWe=r(Nwe,"bert"),Nwe.forEach(t),CWe=r(aA," \u2014 "),sS=n(aA,"A",{href:!0});var qwe=s(sS);wWe=r(qwe,"BertConfig"),qwe.forEach(t),AWe=r(aA," (BERT model)"),aA.forEach(t),LWe=i(L),jf=n(L,"LI",{});var nA=s(jf);hte=n(nA,"STRONG",{});var jwe=s(hte);yWe=r(jwe,"bert-generation"),jwe.forEach(t),xWe=r(nA," \u2014 "),lS=n(nA,"A",{href:!0});var Dwe=s(lS);$We=r(Dwe,"BertGenerationConfig"),Dwe.forEach(t),kWe=r(nA," (Bert Generation model)"),nA.forEach(t),SWe=i(L),Df=n(L,"LI",{});var sA=s(Df);pte=n(sA,"STRONG",{});var Gwe=s(pte);RWe=r(Gwe,"big_bird"),Gwe.forEach(t),PWe=r(sA," \u2014 "),iS=n(sA,"A",{href:!0});var Owe=s(iS);BWe=r(Owe,"BigBirdConfig"),Owe.forEach(t),IWe=r(sA," (BigBird model)"),sA.forEach(t),NWe=i(L),Gf=n(L,"LI",{});var lA=s(Gf);_te=n(lA,"STRONG",{});var Vwe=s(_te);qWe=r(Vwe,"bigbird_pegasus"),Vwe.forEach(t),jWe=r(lA," \u2014 "),dS=n(lA,"A",{href:!0});var Xwe=s(dS);DWe=r(Xwe,"BigBirdPegasusConfig"),Xwe.forEach(t),GWe=r(lA," (BigBird-Pegasus model)"),lA.forEach(t),OWe=i(L),Of=n(L,"LI",{});var iA=s(Of);ute=n(iA,"STRONG",{});var zwe=s(ute);VWe=r(zwe,"blenderbot"),zwe.forEach(t),XWe=r(iA," \u2014 "),cS=n(iA,"A",{href:!0});var Wwe=s(cS);zWe=r(Wwe,"BlenderbotConfig"),Wwe.forEach(t),WWe=r(iA," (Blenderbot model)"),iA.forEach(t),QWe=i(L),Vf=n(L,"LI",{});var dA=s(Vf);bte=n(dA,"STRONG",{});var Qwe=s(bte);HWe=r(Qwe,"blenderbot-small"),Qwe.forEach(t),UWe=r(dA," \u2014 "),fS=n(dA,"A",{href:!0});var Hwe=s(fS);JWe=r(Hwe,"BlenderbotSmallConfig"),Hwe.forEach(t),YWe=r(dA," (BlenderbotSmall model)"),dA.forEach(t),KWe=i(L),Xf=n(L,"LI",{});var cA=s(Xf);vte=n(cA,"STRONG",{});var Uwe=s(vte);ZWe=r(Uwe,"bloom"),Uwe.forEach(t),eQe=r(cA," \u2014 "),mS=n(cA,"A",{href:!0});var Jwe=s(mS);oQe=r(Jwe,"BloomConfig"),Jwe.forEach(t),rQe=r(cA," (BLOOM model)"),cA.forEach(t),tQe=i(L),zf=n(L,"LI",{});var fA=s(zf);Fte=n(fA,"STRONG",{});var Ywe=s(Fte);aQe=r(Ywe,"camembert"),Ywe.forEach(t),nQe=r(fA," \u2014 "),gS=n(fA,"A",{href:!0});var Kwe=s(gS);sQe=r(Kwe,"CamembertConfig"),Kwe.forEach(t),lQe=r(fA," (CamemBERT model)"),fA.forEach(t),iQe=i(L),Wf=n(L,"LI",{});var mA=s(Wf);Tte=n(mA,"STRONG",{});var Zwe=s(Tte);dQe=r(Zwe,"canine"),Zwe.forEach(t),cQe=r(mA," \u2014 "),hS=n(mA,"A",{href:!0});var eAe=s(hS);fQe=r(eAe,"CanineConfig"),eAe.forEach(t),mQe=r(mA," (CANINE model)"),mA.forEach(t),gQe=i(L),Qf=n(L,"LI",{});var gA=s(Qf);Mte=n(gA,"STRONG",{});var oAe=s(Mte);hQe=r(oAe,"clip"),oAe.forEach(t),pQe=r(gA," \u2014 "),pS=n(gA,"A",{href:!0});var rAe=s(pS);_Qe=r(rAe,"CLIPConfig"),rAe.forEach(t),uQe=r(gA," (CLIP model)"),gA.forEach(t),bQe=i(L),Hf=n(L,"LI",{});var hA=s(Hf);Ete=n(hA,"STRONG",{});var tAe=s(Ete);vQe=r(tAe,"convbert"),tAe.forEach(t),FQe=r(hA," \u2014 "),_S=n(hA,"A",{href:!0});var aAe=s(_S);TQe=r(aAe,"ConvBertConfig"),aAe.forEach(t),MQe=r(hA," (ConvBERT model)"),hA.forEach(t),EQe=i(L),Uf=n(L,"LI",{});var pA=s(Uf);Cte=n(pA,"STRONG",{});var nAe=s(Cte);CQe=r(nAe,"convnext"),nAe.forEach(t),wQe=r(pA," \u2014 "),uS=n(pA,"A",{href:!0});var sAe=s(uS);AQe=r(sAe,"ConvNextConfig"),sAe.forEach(t),LQe=r(pA," (ConvNeXT model)"),pA.forEach(t),yQe=i(L),Jf=n(L,"LI",{});var _A=s(Jf);wte=n(_A,"STRONG",{});var lAe=s(wte);xQe=r(lAe,"ctrl"),lAe.forEach(t),$Qe=r(_A," \u2014 "),bS=n(_A,"A",{href:!0});var iAe=s(bS);kQe=r(iAe,"CTRLConfig"),iAe.forEach(t),SQe=r(_A," (CTRL model)"),_A.forEach(t),RQe=i(L),Yf=n(L,"LI",{});var uA=s(Yf);Ate=n(uA,"STRONG",{});var dAe=s(Ate);PQe=r(dAe,"cvt"),dAe.forEach(t),BQe=r(uA," \u2014 "),vS=n(uA,"A",{href:!0});var cAe=s(vS);IQe=r(cAe,"CvtConfig"),cAe.forEach(t),NQe=r(uA," (CvT model)"),uA.forEach(t),qQe=i(L),Kf=n(L,"LI",{});var bA=s(Kf);Lte=n(bA,"STRONG",{});var fAe=s(Lte);jQe=r(fAe,"data2vec-audio"),fAe.forEach(t),DQe=r(bA," \u2014 "),FS=n(bA,"A",{href:!0});var mAe=s(FS);GQe=r(mAe,"Data2VecAudioConfig"),mAe.forEach(t),OQe=r(bA," (Data2VecAudio model)"),bA.forEach(t),VQe=i(L),Zf=n(L,"LI",{});var vA=s(Zf);yte=n(vA,"STRONG",{});var gAe=s(yte);XQe=r(gAe,"data2vec-text"),gAe.forEach(t),zQe=r(vA," \u2014 "),TS=n(vA,"A",{href:!0});var hAe=s(TS);WQe=r(hAe,"Data2VecTextConfig"),hAe.forEach(t),QQe=r(vA," (Data2VecText model)"),vA.forEach(t),HQe=i(L),em=n(L,"LI",{});var FA=s(em);xte=n(FA,"STRONG",{});var pAe=s(xte);UQe=r(pAe,"data2vec-vision"),pAe.forEach(t),JQe=r(FA," \u2014 "),MS=n(FA,"A",{href:!0});var _Ae=s(MS);YQe=r(_Ae,"Data2VecVisionConfig"),_Ae.forEach(t),KQe=r(FA," (Data2VecVision model)"),FA.forEach(t),ZQe=i(L),om=n(L,"LI",{});var TA=s(om);$te=n(TA,"STRONG",{});var uAe=s($te);eHe=r(uAe,"deberta"),uAe.forEach(t),oHe=r(TA," \u2014 "),ES=n(TA,"A",{href:!0});var bAe=s(ES);rHe=r(bAe,"DebertaConfig"),bAe.forEach(t),tHe=r(TA," (DeBERTa model)"),TA.forEach(t),aHe=i(L),rm=n(L,"LI",{});var MA=s(rm);kte=n(MA,"STRONG",{});var vAe=s(kte);nHe=r(vAe,"deberta-v2"),vAe.forEach(t),sHe=r(MA," \u2014 "),CS=n(MA,"A",{href:!0});var FAe=s(CS);lHe=r(FAe,"DebertaV2Config"),FAe.forEach(t),iHe=r(MA," (DeBERTa-v2 model)"),MA.forEach(t),dHe=i(L),tm=n(L,"LI",{});var EA=s(tm);Ste=n(EA,"STRONG",{});var TAe=s(Ste);cHe=r(TAe,"decision_transformer"),TAe.forEach(t),fHe=r(EA," \u2014 "),wS=n(EA,"A",{href:!0});var MAe=s(wS);mHe=r(MAe,"DecisionTransformerConfig"),MAe.forEach(t),gHe=r(EA," (Decision Transformer model)"),EA.forEach(t),hHe=i(L),am=n(L,"LI",{});var CA=s(am);Rte=n(CA,"STRONG",{});var nYr=s(Rte);pHe=r(nYr,"deit"),nYr.forEach(t),_He=r(CA," \u2014 "),AS=n(CA,"A",{href:!0});var sYr=s(AS);uHe=r(sYr,"DeiTConfig"),sYr.forEach(t),bHe=r(CA," (DeiT model)"),CA.forEach(t),vHe=i(L),nm=n(L,"LI",{});var EAe=s(nm);Pte=n(EAe,"STRONG",{});var lYr=s(Pte);FHe=r(lYr,"detr"),lYr.forEach(t),THe=r(EAe," \u2014 "),LS=n(EAe,"A",{href:!0});var iYr=s(LS);MHe=r(iYr,"DetrConfig"),iYr.forEach(t),EHe=r(EAe," (DETR model)"),EAe.forEach(t),CHe=i(L),sm=n(L,"LI",{});var CAe=s(sm);Bte=n(CAe,"STRONG",{});var dYr=s(Bte);wHe=r(dYr,"distilbert"),dYr.forEach(t),AHe=r(CAe," \u2014 "),yS=n(CAe,"A",{href:!0});var cYr=s(yS);LHe=r(cYr,"DistilBertConfig"),cYr.forEach(t),yHe=r(CAe," (DistilBERT model)"),CAe.forEach(t),xHe=i(L),lm=n(L,"LI",{});var wAe=s(lm);Ite=n(wAe,"STRONG",{});var fYr=s(Ite);$He=r(fYr,"dpr"),fYr.forEach(t),kHe=r(wAe," \u2014 "),xS=n(wAe,"A",{href:!0});var mYr=s(xS);SHe=r(mYr,"DPRConfig"),mYr.forEach(t),RHe=r(wAe," (DPR model)"),wAe.forEach(t),PHe=i(L),im=n(L,"LI",{});var AAe=s(im);Nte=n(AAe,"STRONG",{});var gYr=s(Nte);BHe=r(gYr,"dpt"),gYr.forEach(t),IHe=r(AAe," \u2014 "),$S=n(AAe,"A",{href:!0});var hYr=s($S);NHe=r(hYr,"DPTConfig"),hYr.forEach(t),qHe=r(AAe," (DPT model)"),AAe.forEach(t),jHe=i(L),dm=n(L,"LI",{});var LAe=s(dm);qte=n(LAe,"STRONG",{});var pYr=s(qte);DHe=r(pYr,"electra"),pYr.forEach(t),GHe=r(LAe," \u2014 "),kS=n(LAe,"A",{href:!0});var _Yr=s(kS);OHe=r(_Yr,"ElectraConfig"),_Yr.forEach(t),VHe=r(LAe," (ELECTRA model)"),LAe.forEach(t),XHe=i(L),cm=n(L,"LI",{});var yAe=s(cm);jte=n(yAe,"STRONG",{});var uYr=s(jte);zHe=r(uYr,"encoder-decoder"),uYr.forEach(t),WHe=r(yAe," \u2014 "),SS=n(yAe,"A",{href:!0});var bYr=s(SS);QHe=r(bYr,"EncoderDecoderConfig"),bYr.forEach(t),HHe=r(yAe," (Encoder decoder model)"),yAe.forEach(t),UHe=i(L),fm=n(L,"LI",{});var xAe=s(fm);Dte=n(xAe,"STRONG",{});var vYr=s(Dte);JHe=r(vYr,"flaubert"),vYr.forEach(t),YHe=r(xAe," \u2014 "),RS=n(xAe,"A",{href:!0});var FYr=s(RS);KHe=r(FYr,"FlaubertConfig"),FYr.forEach(t),ZHe=r(xAe," (FlauBERT model)"),xAe.forEach(t),eUe=i(L),mm=n(L,"LI",{});var $Ae=s(mm);Gte=n($Ae,"STRONG",{});var TYr=s(Gte);oUe=r(TYr,"flava"),TYr.forEach(t),rUe=r($Ae," \u2014 "),PS=n($Ae,"A",{href:!0});var MYr=s(PS);tUe=r(MYr,"FlavaConfig"),MYr.forEach(t),aUe=r($Ae," (FLAVA model)"),$Ae.forEach(t),nUe=i(L),gm=n(L,"LI",{});var kAe=s(gm);Ote=n(kAe,"STRONG",{});var EYr=s(Ote);sUe=r(EYr,"fnet"),EYr.forEach(t),lUe=r(kAe," \u2014 "),BS=n(kAe,"A",{href:!0});var CYr=s(BS);iUe=r(CYr,"FNetConfig"),CYr.forEach(t),dUe=r(kAe," (FNet model)"),kAe.forEach(t),cUe=i(L),hm=n(L,"LI",{});var SAe=s(hm);Vte=n(SAe,"STRONG",{});var wYr=s(Vte);fUe=r(wYr,"fsmt"),wYr.forEach(t),mUe=r(SAe," \u2014 "),IS=n(SAe,"A",{href:!0});var AYr=s(IS);gUe=r(AYr,"FSMTConfig"),AYr.forEach(t),hUe=r(SAe," (FairSeq Machine-Translation model)"),SAe.forEach(t),pUe=i(L),pm=n(L,"LI",{});var RAe=s(pm);Xte=n(RAe,"STRONG",{});var LYr=s(Xte);_Ue=r(LYr,"funnel"),LYr.forEach(t),uUe=r(RAe," \u2014 "),NS=n(RAe,"A",{href:!0});var yYr=s(NS);bUe=r(yYr,"FunnelConfig"),yYr.forEach(t),vUe=r(RAe," (Funnel Transformer model)"),RAe.forEach(t),FUe=i(L),_m=n(L,"LI",{});var PAe=s(_m);zte=n(PAe,"STRONG",{});var xYr=s(zte);TUe=r(xYr,"glpn"),xYr.forEach(t),MUe=r(PAe," \u2014 "),qS=n(PAe,"A",{href:!0});var $Yr=s(qS);EUe=r($Yr,"GLPNConfig"),$Yr.forEach(t),CUe=r(PAe," (GLPN model)"),PAe.forEach(t),wUe=i(L),um=n(L,"LI",{});var BAe=s(um);Wte=n(BAe,"STRONG",{});var kYr=s(Wte);AUe=r(kYr,"gpt2"),kYr.forEach(t),LUe=r(BAe," \u2014 "),jS=n(BAe,"A",{href:!0});var SYr=s(jS);yUe=r(SYr,"GPT2Config"),SYr.forEach(t),xUe=r(BAe," (OpenAI GPT-2 model)"),BAe.forEach(t),$Ue=i(L),bm=n(L,"LI",{});var IAe=s(bm);Qte=n(IAe,"STRONG",{});var RYr=s(Qte);kUe=r(RYr,"gpt_neo"),RYr.forEach(t),SUe=r(IAe," \u2014 "),DS=n(IAe,"A",{href:!0});var PYr=s(DS);RUe=r(PYr,"GPTNeoConfig"),PYr.forEach(t),PUe=r(IAe," (GPT Neo model)"),IAe.forEach(t),BUe=i(L),vm=n(L,"LI",{});var NAe=s(vm);Hte=n(NAe,"STRONG",{});var BYr=s(Hte);IUe=r(BYr,"gpt_neox"),BYr.forEach(t),NUe=r(NAe," \u2014 "),GS=n(NAe,"A",{href:!0});var IYr=s(GS);qUe=r(IYr,"GPTNeoXConfig"),IYr.forEach(t),jUe=r(NAe," (GPT NeoX model)"),NAe.forEach(t),DUe=i(L),Fm=n(L,"LI",{});var qAe=s(Fm);Ute=n(qAe,"STRONG",{});var NYr=s(Ute);GUe=r(NYr,"gptj"),NYr.forEach(t),OUe=r(qAe," \u2014 "),OS=n(qAe,"A",{href:!0});var qYr=s(OS);VUe=r(qYr,"GPTJConfig"),qYr.forEach(t),XUe=r(qAe," (GPT-J model)"),qAe.forEach(t),zUe=i(L),Tm=n(L,"LI",{});var jAe=s(Tm);Jte=n(jAe,"STRONG",{});var jYr=s(Jte);WUe=r(jYr,"hubert"),jYr.forEach(t),QUe=r(jAe," \u2014 "),VS=n(jAe,"A",{href:!0});var DYr=s(VS);HUe=r(DYr,"HubertConfig"),DYr.forEach(t),UUe=r(jAe," (Hubert model)"),jAe.forEach(t),JUe=i(L),Mm=n(L,"LI",{});var DAe=s(Mm);Yte=n(DAe,"STRONG",{});var GYr=s(Yte);YUe=r(GYr,"ibert"),GYr.forEach(t),KUe=r(DAe," \u2014 "),XS=n(DAe,"A",{href:!0});var OYr=s(XS);ZUe=r(OYr,"IBertConfig"),OYr.forEach(t),eJe=r(DAe," (I-BERT model)"),DAe.forEach(t),oJe=i(L),Em=n(L,"LI",{});var GAe=s(Em);Kte=n(GAe,"STRONG",{});var VYr=s(Kte);rJe=r(VYr,"imagegpt"),VYr.forEach(t),tJe=r(GAe," \u2014 "),zS=n(GAe,"A",{href:!0});var XYr=s(zS);aJe=r(XYr,"ImageGPTConfig"),XYr.forEach(t),nJe=r(GAe," (ImageGPT model)"),GAe.forEach(t),sJe=i(L),Cm=n(L,"LI",{});var OAe=s(Cm);Zte=n(OAe,"STRONG",{});var zYr=s(Zte);lJe=r(zYr,"layoutlm"),zYr.forEach(t),iJe=r(OAe," \u2014 "),WS=n(OAe,"A",{href:!0});var WYr=s(WS);dJe=r(WYr,"LayoutLMConfig"),WYr.forEach(t),cJe=r(OAe," (LayoutLM model)"),OAe.forEach(t),fJe=i(L),wm=n(L,"LI",{});var VAe=s(wm);eae=n(VAe,"STRONG",{});var QYr=s(eae);mJe=r(QYr,"layoutlmv2"),QYr.forEach(t),gJe=r(VAe," \u2014 "),QS=n(VAe,"A",{href:!0});var HYr=s(QS);hJe=r(HYr,"LayoutLMv2Config"),HYr.forEach(t),pJe=r(VAe," (LayoutLMv2 model)"),VAe.forEach(t),_Je=i(L),Am=n(L,"LI",{});var XAe=s(Am);oae=n(XAe,"STRONG",{});var UYr=s(oae);uJe=r(UYr,"layoutlmv3"),UYr.forEach(t),bJe=r(XAe," \u2014 "),HS=n(XAe,"A",{href:!0});var JYr=s(HS);vJe=r(JYr,"LayoutLMv3Config"),JYr.forEach(t),FJe=r(XAe," (LayoutLMv3 model)"),XAe.forEach(t),TJe=i(L),Lm=n(L,"LI",{});var zAe=s(Lm);rae=n(zAe,"STRONG",{});var YYr=s(rae);MJe=r(YYr,"led"),YYr.forEach(t),EJe=r(zAe," \u2014 "),US=n(zAe,"A",{href:!0});var KYr=s(US);CJe=r(KYr,"LEDConfig"),KYr.forEach(t),wJe=r(zAe," (LED model)"),zAe.forEach(t),AJe=i(L),ym=n(L,"LI",{});var WAe=s(ym);tae=n(WAe,"STRONG",{});var ZYr=s(tae);LJe=r(ZYr,"levit"),ZYr.forEach(t),yJe=r(WAe," \u2014 "),JS=n(WAe,"A",{href:!0});var eKr=s(JS);xJe=r(eKr,"LevitConfig"),eKr.forEach(t),$Je=r(WAe," (LeViT model)"),WAe.forEach(t),kJe=i(L),xm=n(L,"LI",{});var QAe=s(xm);aae=n(QAe,"STRONG",{});var oKr=s(aae);SJe=r(oKr,"longformer"),oKr.forEach(t),RJe=r(QAe," \u2014 "),YS=n(QAe,"A",{href:!0});var rKr=s(YS);PJe=r(rKr,"LongformerConfig"),rKr.forEach(t),BJe=r(QAe," (Longformer model)"),QAe.forEach(t),IJe=i(L),$m=n(L,"LI",{});var HAe=s($m);nae=n(HAe,"STRONG",{});var tKr=s(nae);NJe=r(tKr,"longt5"),tKr.forEach(t),qJe=r(HAe," \u2014 "),KS=n(HAe,"A",{href:!0});var aKr=s(KS);jJe=r(aKr,"LongT5Config"),aKr.forEach(t),DJe=r(HAe," (LongT5 model)"),HAe.forEach(t),GJe=i(L),km=n(L,"LI",{});var UAe=s(km);sae=n(UAe,"STRONG",{});var nKr=s(sae);OJe=r(nKr,"luke"),nKr.forEach(t),VJe=r(UAe," \u2014 "),ZS=n(UAe,"A",{href:!0});var sKr=s(ZS);XJe=r(sKr,"LukeConfig"),sKr.forEach(t),zJe=r(UAe," (LUKE model)"),UAe.forEach(t),WJe=i(L),Sm=n(L,"LI",{});var JAe=s(Sm);lae=n(JAe,"STRONG",{});var lKr=s(lae);QJe=r(lKr,"lxmert"),lKr.forEach(t),HJe=r(JAe," \u2014 "),eR=n(JAe,"A",{href:!0});var iKr=s(eR);UJe=r(iKr,"LxmertConfig"),iKr.forEach(t),JJe=r(JAe," (LXMERT model)"),JAe.forEach(t),YJe=i(L),Rm=n(L,"LI",{});var YAe=s(Rm);iae=n(YAe,"STRONG",{});var dKr=s(iae);KJe=r(dKr,"m2m_100"),dKr.forEach(t),ZJe=r(YAe," \u2014 "),oR=n(YAe,"A",{href:!0});var cKr=s(oR);eYe=r(cKr,"M2M100Config"),cKr.forEach(t),oYe=r(YAe," (M2M100 model)"),YAe.forEach(t),rYe=i(L),Pm=n(L,"LI",{});var KAe=s(Pm);dae=n(KAe,"STRONG",{});var fKr=s(dae);tYe=r(fKr,"marian"),fKr.forEach(t),aYe=r(KAe," \u2014 "),rR=n(KAe,"A",{href:!0});var mKr=s(rR);nYe=r(mKr,"MarianConfig"),mKr.forEach(t),sYe=r(KAe," (Marian model)"),KAe.forEach(t),lYe=i(L),Bm=n(L,"LI",{});var ZAe=s(Bm);cae=n(ZAe,"STRONG",{});var gKr=s(cae);iYe=r(gKr,"maskformer"),gKr.forEach(t),dYe=r(ZAe," \u2014 "),tR=n(ZAe,"A",{href:!0});var hKr=s(tR);cYe=r(hKr,"MaskFormerConfig"),hKr.forEach(t),fYe=r(ZAe," (MaskFormer model)"),ZAe.forEach(t),mYe=i(L),Im=n(L,"LI",{});var e6e=s(Im);fae=n(e6e,"STRONG",{});var pKr=s(fae);gYe=r(pKr,"mbart"),pKr.forEach(t),hYe=r(e6e," \u2014 "),aR=n(e6e,"A",{href:!0});var _Kr=s(aR);pYe=r(_Kr,"MBartConfig"),_Kr.forEach(t),_Ye=r(e6e," (mBART model)"),e6e.forEach(t),uYe=i(L),Nm=n(L,"LI",{});var o6e=s(Nm);mae=n(o6e,"STRONG",{});var uKr=s(mae);bYe=r(uKr,"mctct"),uKr.forEach(t),vYe=r(o6e," \u2014 "),nR=n(o6e,"A",{href:!0});var bKr=s(nR);FYe=r(bKr,"MCTCTConfig"),bKr.forEach(t),TYe=r(o6e," (M-CTC-T model)"),o6e.forEach(t),MYe=i(L),qm=n(L,"LI",{});var r6e=s(qm);gae=n(r6e,"STRONG",{});var vKr=s(gae);EYe=r(vKr,"megatron-bert"),vKr.forEach(t),CYe=r(r6e," \u2014 "),sR=n(r6e,"A",{href:!0});var FKr=s(sR);wYe=r(FKr,"MegatronBertConfig"),FKr.forEach(t),AYe=r(r6e," (Megatron-BERT model)"),r6e.forEach(t),LYe=i(L),jm=n(L,"LI",{});var t6e=s(jm);hae=n(t6e,"STRONG",{});var TKr=s(hae);yYe=r(TKr,"mobilebert"),TKr.forEach(t),xYe=r(t6e," \u2014 "),lR=n(t6e,"A",{href:!0});var MKr=s(lR);$Ye=r(MKr,"MobileBertConfig"),MKr.forEach(t),kYe=r(t6e," (MobileBERT model)"),t6e.forEach(t),SYe=i(L),Dm=n(L,"LI",{});var a6e=s(Dm);pae=n(a6e,"STRONG",{});var EKr=s(pae);RYe=r(EKr,"mobilevit"),EKr.forEach(t),PYe=r(a6e," \u2014 "),iR=n(a6e,"A",{href:!0});var CKr=s(iR);BYe=r(CKr,"MobileViTConfig"),CKr.forEach(t),IYe=r(a6e," (MobileViT model)"),a6e.forEach(t),NYe=i(L),Gm=n(L,"LI",{});var n6e=s(Gm);_ae=n(n6e,"STRONG",{});var wKr=s(_ae);qYe=r(wKr,"mpnet"),wKr.forEach(t),jYe=r(n6e," \u2014 "),dR=n(n6e,"A",{href:!0});var AKr=s(dR);DYe=r(AKr,"MPNetConfig"),AKr.forEach(t),GYe=r(n6e," (MPNet model)"),n6e.forEach(t),OYe=i(L),Om=n(L,"LI",{});var s6e=s(Om);uae=n(s6e,"STRONG",{});var LKr=s(uae);VYe=r(LKr,"mt5"),LKr.forEach(t),XYe=r(s6e," \u2014 "),cR=n(s6e,"A",{href:!0});var yKr=s(cR);zYe=r(yKr,"MT5Config"),yKr.forEach(t),WYe=r(s6e," (MT5 model)"),s6e.forEach(t),QYe=i(L),Vm=n(L,"LI",{});var l6e=s(Vm);bae=n(l6e,"STRONG",{});var xKr=s(bae);HYe=r(xKr,"nystromformer"),xKr.forEach(t),UYe=r(l6e," \u2014 "),fR=n(l6e,"A",{href:!0});var $Kr=s(fR);JYe=r($Kr,"NystromformerConfig"),$Kr.forEach(t),YYe=r(l6e," (Nystr\xF6mformer model)"),l6e.forEach(t),KYe=i(L),Xm=n(L,"LI",{});var i6e=s(Xm);vae=n(i6e,"STRONG",{});var kKr=s(vae);ZYe=r(kKr,"openai-gpt"),kKr.forEach(t),eKe=r(i6e," \u2014 "),mR=n(i6e,"A",{href:!0});var SKr=s(mR);oKe=r(SKr,"OpenAIGPTConfig"),SKr.forEach(t),rKe=r(i6e," (OpenAI GPT model)"),i6e.forEach(t),tKe=i(L),zm=n(L,"LI",{});var d6e=s(zm);Fae=n(d6e,"STRONG",{});var RKr=s(Fae);aKe=r(RKr,"opt"),RKr.forEach(t),nKe=r(d6e," \u2014 "),gR=n(d6e,"A",{href:!0});var PKr=s(gR);sKe=r(PKr,"OPTConfig"),PKr.forEach(t),lKe=r(d6e," (OPT model)"),d6e.forEach(t),iKe=i(L),Wm=n(L,"LI",{});var c6e=s(Wm);Tae=n(c6e,"STRONG",{});var BKr=s(Tae);dKe=r(BKr,"pegasus"),BKr.forEach(t),cKe=r(c6e," \u2014 "),hR=n(c6e,"A",{href:!0});var IKr=s(hR);fKe=r(IKr,"PegasusConfig"),IKr.forEach(t),mKe=r(c6e," (Pegasus model)"),c6e.forEach(t),gKe=i(L),Qm=n(L,"LI",{});var f6e=s(Qm);Mae=n(f6e,"STRONG",{});var NKr=s(Mae);hKe=r(NKr,"perceiver"),NKr.forEach(t),pKe=r(f6e," \u2014 "),pR=n(f6e,"A",{href:!0});var qKr=s(pR);_Ke=r(qKr,"PerceiverConfig"),qKr.forEach(t),uKe=r(f6e," (Perceiver model)"),f6e.forEach(t),bKe=i(L),Hm=n(L,"LI",{});var m6e=s(Hm);Eae=n(m6e,"STRONG",{});var jKr=s(Eae);vKe=r(jKr,"plbart"),jKr.forEach(t),FKe=r(m6e," \u2014 "),_R=n(m6e,"A",{href:!0});var DKr=s(_R);TKe=r(DKr,"PLBartConfig"),DKr.forEach(t),MKe=r(m6e," (PLBart model)"),m6e.forEach(t),EKe=i(L),Um=n(L,"LI",{});var g6e=s(Um);Cae=n(g6e,"STRONG",{});var GKr=s(Cae);CKe=r(GKr,"poolformer"),GKr.forEach(t),wKe=r(g6e," \u2014 "),uR=n(g6e,"A",{href:!0});var OKr=s(uR);AKe=r(OKr,"PoolFormerConfig"),OKr.forEach(t),LKe=r(g6e," (PoolFormer model)"),g6e.forEach(t),yKe=i(L),Jm=n(L,"LI",{});var h6e=s(Jm);wae=n(h6e,"STRONG",{});var VKr=s(wae);xKe=r(VKr,"prophetnet"),VKr.forEach(t),$Ke=r(h6e," \u2014 "),bR=n(h6e,"A",{href:!0});var XKr=s(bR);kKe=r(XKr,"ProphetNetConfig"),XKr.forEach(t),SKe=r(h6e," (ProphetNet model)"),h6e.forEach(t),RKe=i(L),Ym=n(L,"LI",{});var p6e=s(Ym);Aae=n(p6e,"STRONG",{});var zKr=s(Aae);PKe=r(zKr,"qdqbert"),zKr.forEach(t),BKe=r(p6e," \u2014 "),vR=n(p6e,"A",{href:!0});var WKr=s(vR);IKe=r(WKr,"QDQBertConfig"),WKr.forEach(t),NKe=r(p6e," (QDQBert model)"),p6e.forEach(t),qKe=i(L),Km=n(L,"LI",{});var _6e=s(Km);Lae=n(_6e,"STRONG",{});var QKr=s(Lae);jKe=r(QKr,"rag"),QKr.forEach(t),DKe=r(_6e," \u2014 "),FR=n(_6e,"A",{href:!0});var HKr=s(FR);GKe=r(HKr,"RagConfig"),HKr.forEach(t),OKe=r(_6e," (RAG model)"),_6e.forEach(t),VKe=i(L),Zm=n(L,"LI",{});var u6e=s(Zm);yae=n(u6e,"STRONG",{});var UKr=s(yae);XKe=r(UKr,"realm"),UKr.forEach(t),zKe=r(u6e," \u2014 "),TR=n(u6e,"A",{href:!0});var JKr=s(TR);WKe=r(JKr,"RealmConfig"),JKr.forEach(t),QKe=r(u6e," (REALM model)"),u6e.forEach(t),HKe=i(L),eg=n(L,"LI",{});var b6e=s(eg);xae=n(b6e,"STRONG",{});var YKr=s(xae);UKe=r(YKr,"reformer"),YKr.forEach(t),JKe=r(b6e," \u2014 "),MR=n(b6e,"A",{href:!0});var KKr=s(MR);YKe=r(KKr,"ReformerConfig"),KKr.forEach(t),KKe=r(b6e," (Reformer model)"),b6e.forEach(t),ZKe=i(L),og=n(L,"LI",{});var v6e=s(og);$ae=n(v6e,"STRONG",{});var ZKr=s($ae);eZe=r(ZKr,"regnet"),ZKr.forEach(t),oZe=r(v6e," \u2014 "),ER=n(v6e,"A",{href:!0});var eZr=s(ER);rZe=r(eZr,"RegNetConfig"),eZr.forEach(t),tZe=r(v6e," (RegNet model)"),v6e.forEach(t),aZe=i(L),rg=n(L,"LI",{});var F6e=s(rg);kae=n(F6e,"STRONG",{});var oZr=s(kae);nZe=r(oZr,"rembert"),oZr.forEach(t),sZe=r(F6e," \u2014 "),CR=n(F6e,"A",{href:!0});var rZr=s(CR);lZe=r(rZr,"RemBertConfig"),rZr.forEach(t),iZe=r(F6e," (RemBERT model)"),F6e.forEach(t),dZe=i(L),tg=n(L,"LI",{});var T6e=s(tg);Sae=n(T6e,"STRONG",{});var tZr=s(Sae);cZe=r(tZr,"resnet"),tZr.forEach(t),fZe=r(T6e," \u2014 "),wR=n(T6e,"A",{href:!0});var aZr=s(wR);mZe=r(aZr,"ResNetConfig"),aZr.forEach(t),gZe=r(T6e," (ResNet model)"),T6e.forEach(t),hZe=i(L),ag=n(L,"LI",{});var M6e=s(ag);Rae=n(M6e,"STRONG",{});var nZr=s(Rae);pZe=r(nZr,"retribert"),nZr.forEach(t),_Ze=r(M6e," \u2014 "),AR=n(M6e,"A",{href:!0});var sZr=s(AR);uZe=r(sZr,"RetriBertConfig"),sZr.forEach(t),bZe=r(M6e," (RetriBERT model)"),M6e.forEach(t),vZe=i(L),ng=n(L,"LI",{});var E6e=s(ng);Pae=n(E6e,"STRONG",{});var lZr=s(Pae);FZe=r(lZr,"roberta"),lZr.forEach(t),TZe=r(E6e," \u2014 "),LR=n(E6e,"A",{href:!0});var iZr=s(LR);MZe=r(iZr,"RobertaConfig"),iZr.forEach(t),EZe=r(E6e," (RoBERTa model)"),E6e.forEach(t),CZe=i(L),sg=n(L,"LI",{});var C6e=s(sg);Bae=n(C6e,"STRONG",{});var dZr=s(Bae);wZe=r(dZr,"roformer"),dZr.forEach(t),AZe=r(C6e," \u2014 "),yR=n(C6e,"A",{href:!0});var cZr=s(yR);LZe=r(cZr,"RoFormerConfig"),cZr.forEach(t),yZe=r(C6e," (RoFormer model)"),C6e.forEach(t),xZe=i(L),lg=n(L,"LI",{});var w6e=s(lg);Iae=n(w6e,"STRONG",{});var fZr=s(Iae);$Ze=r(fZr,"segformer"),fZr.forEach(t),kZe=r(w6e," \u2014 "),xR=n(w6e,"A",{href:!0});var mZr=s(xR);SZe=r(mZr,"SegformerConfig"),mZr.forEach(t),RZe=r(w6e," (SegFormer model)"),w6e.forEach(t),PZe=i(L),ig=n(L,"LI",{});var A6e=s(ig);Nae=n(A6e,"STRONG",{});var gZr=s(Nae);BZe=r(gZr,"sew"),gZr.forEach(t),IZe=r(A6e," \u2014 "),$R=n(A6e,"A",{href:!0});var hZr=s($R);NZe=r(hZr,"SEWConfig"),hZr.forEach(t),qZe=r(A6e," (SEW model)"),A6e.forEach(t),jZe=i(L),dg=n(L,"LI",{});var L6e=s(dg);qae=n(L6e,"STRONG",{});var pZr=s(qae);DZe=r(pZr,"sew-d"),pZr.forEach(t),GZe=r(L6e," \u2014 "),kR=n(L6e,"A",{href:!0});var _Zr=s(kR);OZe=r(_Zr,"SEWDConfig"),_Zr.forEach(t),VZe=r(L6e," (SEW-D model)"),L6e.forEach(t),XZe=i(L),cg=n(L,"LI",{});var y6e=s(cg);jae=n(y6e,"STRONG",{});var uZr=s(jae);zZe=r(uZr,"speech-encoder-decoder"),uZr.forEach(t),WZe=r(y6e," \u2014 "),SR=n(y6e,"A",{href:!0});var bZr=s(SR);QZe=r(bZr,"SpeechEncoderDecoderConfig"),bZr.forEach(t),HZe=r(y6e," (Speech Encoder decoder model)"),y6e.forEach(t),UZe=i(L),fg=n(L,"LI",{});var x6e=s(fg);Dae=n(x6e,"STRONG",{});var vZr=s(Dae);JZe=r(vZr,"speech_to_text"),vZr.forEach(t),YZe=r(x6e," \u2014 "),RR=n(x6e,"A",{href:!0});var FZr=s(RR);KZe=r(FZr,"Speech2TextConfig"),FZr.forEach(t),ZZe=r(x6e," (Speech2Text model)"),x6e.forEach(t),eeo=i(L),mg=n(L,"LI",{});var $6e=s(mg);Gae=n($6e,"STRONG",{});var TZr=s(Gae);oeo=r(TZr,"speech_to_text_2"),TZr.forEach(t),reo=r($6e," \u2014 "),PR=n($6e,"A",{href:!0});var MZr=s(PR);teo=r(MZr,"Speech2Text2Config"),MZr.forEach(t),aeo=r($6e," (Speech2Text2 model)"),$6e.forEach(t),neo=i(L),gg=n(L,"LI",{});var k6e=s(gg);Oae=n(k6e,"STRONG",{});var EZr=s(Oae);seo=r(EZr,"splinter"),EZr.forEach(t),leo=r(k6e," \u2014 "),BR=n(k6e,"A",{href:!0});var CZr=s(BR);ieo=r(CZr,"SplinterConfig"),CZr.forEach(t),deo=r(k6e," (Splinter model)"),k6e.forEach(t),ceo=i(L),hg=n(L,"LI",{});var S6e=s(hg);Vae=n(S6e,"STRONG",{});var wZr=s(Vae);feo=r(wZr,"squeezebert"),wZr.forEach(t),meo=r(S6e," \u2014 "),IR=n(S6e,"A",{href:!0});var AZr=s(IR);geo=r(AZr,"SqueezeBertConfig"),AZr.forEach(t),heo=r(S6e," (SqueezeBERT model)"),S6e.forEach(t),peo=i(L),pg=n(L,"LI",{});var R6e=s(pg);Xae=n(R6e,"STRONG",{});var LZr=s(Xae);_eo=r(LZr,"swin"),LZr.forEach(t),ueo=r(R6e," \u2014 "),NR=n(R6e,"A",{href:!0});var yZr=s(NR);beo=r(yZr,"SwinConfig"),yZr.forEach(t),veo=r(R6e," (Swin Transformer model)"),R6e.forEach(t),Feo=i(L),_g=n(L,"LI",{});var P6e=s(_g);zae=n(P6e,"STRONG",{});var xZr=s(zae);Teo=r(xZr,"t5"),xZr.forEach(t),Meo=r(P6e," \u2014 "),qR=n(P6e,"A",{href:!0});var $Zr=s(qR);Eeo=r($Zr,"T5Config"),$Zr.forEach(t),Ceo=r(P6e," (T5 model)"),P6e.forEach(t),weo=i(L),ug=n(L,"LI",{});var B6e=s(ug);Wae=n(B6e,"STRONG",{});var kZr=s(Wae);Aeo=r(kZr,"tapas"),kZr.forEach(t),Leo=r(B6e," \u2014 "),jR=n(B6e,"A",{href:!0});var SZr=s(jR);yeo=r(SZr,"TapasConfig"),SZr.forEach(t),xeo=r(B6e," (TAPAS model)"),B6e.forEach(t),$eo=i(L),bg=n(L,"LI",{});var I6e=s(bg);Qae=n(I6e,"STRONG",{});var RZr=s(Qae);keo=r(RZr,"trajectory_transformer"),RZr.forEach(t),Seo=r(I6e," \u2014 "),DR=n(I6e,"A",{href:!0});var PZr=s(DR);Reo=r(PZr,"TrajectoryTransformerConfig"),PZr.forEach(t),Peo=r(I6e," (Trajectory Transformer model)"),I6e.forEach(t),Beo=i(L),vg=n(L,"LI",{});var N6e=s(vg);Hae=n(N6e,"STRONG",{});var BZr=s(Hae);Ieo=r(BZr,"transfo-xl"),BZr.forEach(t),Neo=r(N6e," \u2014 "),GR=n(N6e,"A",{href:!0});var IZr=s(GR);qeo=r(IZr,"TransfoXLConfig"),IZr.forEach(t),jeo=r(N6e," (Transformer-XL model)"),N6e.forEach(t),Deo=i(L),Fg=n(L,"LI",{});var q6e=s(Fg);Uae=n(q6e,"STRONG",{});var NZr=s(Uae);Geo=r(NZr,"trocr"),NZr.forEach(t),Oeo=r(q6e," \u2014 "),OR=n(q6e,"A",{href:!0});var qZr=s(OR);Veo=r(qZr,"TrOCRConfig"),qZr.forEach(t),Xeo=r(q6e," (TrOCR model)"),q6e.forEach(t),zeo=i(L),Tg=n(L,"LI",{});var j6e=s(Tg);Jae=n(j6e,"STRONG",{});var jZr=s(Jae);Weo=r(jZr,"unispeech"),jZr.forEach(t),Qeo=r(j6e," \u2014 "),VR=n(j6e,"A",{href:!0});var DZr=s(VR);Heo=r(DZr,"UniSpeechConfig"),DZr.forEach(t),Ueo=r(j6e," (UniSpeech model)"),j6e.forEach(t),Jeo=i(L),Mg=n(L,"LI",{});var D6e=s(Mg);Yae=n(D6e,"STRONG",{});var GZr=s(Yae);Yeo=r(GZr,"unispeech-sat"),GZr.forEach(t),Keo=r(D6e," \u2014 "),XR=n(D6e,"A",{href:!0});var OZr=s(XR);Zeo=r(OZr,"UniSpeechSatConfig"),OZr.forEach(t),eoo=r(D6e," (UniSpeechSat model)"),D6e.forEach(t),ooo=i(L),Eg=n(L,"LI",{});var G6e=s(Eg);Kae=n(G6e,"STRONG",{});var VZr=s(Kae);roo=r(VZr,"van"),VZr.forEach(t),too=r(G6e," \u2014 "),zR=n(G6e,"A",{href:!0});var XZr=s(zR);aoo=r(XZr,"VanConfig"),XZr.forEach(t),noo=r(G6e," (VAN model)"),G6e.forEach(t),soo=i(L),Cg=n(L,"LI",{});var O6e=s(Cg);Zae=n(O6e,"STRONG",{});var zZr=s(Zae);loo=r(zZr,"vilt"),zZr.forEach(t),ioo=r(O6e," \u2014 "),WR=n(O6e,"A",{href:!0});var WZr=s(WR);doo=r(WZr,"ViltConfig"),WZr.forEach(t),coo=r(O6e," (ViLT model)"),O6e.forEach(t),foo=i(L),wg=n(L,"LI",{});var V6e=s(wg);ene=n(V6e,"STRONG",{});var QZr=s(ene);moo=r(QZr,"vision-encoder-decoder"),QZr.forEach(t),goo=r(V6e," \u2014 "),QR=n(V6e,"A",{href:!0});var HZr=s(QR);hoo=r(HZr,"VisionEncoderDecoderConfig"),HZr.forEach(t),poo=r(V6e," (Vision Encoder decoder model)"),V6e.forEach(t),_oo=i(L),Ag=n(L,"LI",{});var X6e=s(Ag);one=n(X6e,"STRONG",{});var UZr=s(one);uoo=r(UZr,"vision-text-dual-encoder"),UZr.forEach(t),boo=r(X6e," \u2014 "),HR=n(X6e,"A",{href:!0});var JZr=s(HR);voo=r(JZr,"VisionTextDualEncoderConfig"),JZr.forEach(t),Foo=r(X6e," (VisionTextDualEncoder model)"),X6e.forEach(t),Too=i(L),Lg=n(L,"LI",{});var z6e=s(Lg);rne=n(z6e,"STRONG",{});var YZr=s(rne);Moo=r(YZr,"visual_bert"),YZr.forEach(t),Eoo=r(z6e," \u2014 "),UR=n(z6e,"A",{href:!0});var KZr=s(UR);Coo=r(KZr,"VisualBertConfig"),KZr.forEach(t),woo=r(z6e," (VisualBERT model)"),z6e.forEach(t),Aoo=i(L),yg=n(L,"LI",{});var W6e=s(yg);tne=n(W6e,"STRONG",{});var ZZr=s(tne);Loo=r(ZZr,"vit"),ZZr.forEach(t),yoo=r(W6e," \u2014 "),JR=n(W6e,"A",{href:!0});var eet=s(JR);xoo=r(eet,"ViTConfig"),eet.forEach(t),$oo=r(W6e," (ViT model)"),W6e.forEach(t),koo=i(L),xg=n(L,"LI",{});var Q6e=s(xg);ane=n(Q6e,"STRONG",{});var oet=s(ane);Soo=r(oet,"vit_mae"),oet.forEach(t),Roo=r(Q6e," \u2014 "),YR=n(Q6e,"A",{href:!0});var ret=s(YR);Poo=r(ret,"ViTMAEConfig"),ret.forEach(t),Boo=r(Q6e," (ViTMAE model)"),Q6e.forEach(t),Ioo=i(L),$g=n(L,"LI",{});var H6e=s($g);nne=n(H6e,"STRONG",{});var tet=s(nne);Noo=r(tet,"wav2vec2"),tet.forEach(t),qoo=r(H6e," \u2014 "),KR=n(H6e,"A",{href:!0});var aet=s(KR);joo=r(aet,"Wav2Vec2Config"),aet.forEach(t),Doo=r(H6e," (Wav2Vec2 model)"),H6e.forEach(t),Goo=i(L),kg=n(L,"LI",{});var U6e=s(kg);sne=n(U6e,"STRONG",{});var net=s(sne);Ooo=r(net,"wav2vec2-conformer"),net.forEach(t),Voo=r(U6e," \u2014 "),ZR=n(U6e,"A",{href:!0});var set=s(ZR);Xoo=r(set,"Wav2Vec2ConformerConfig"),set.forEach(t),zoo=r(U6e," (Wav2Vec2-Conformer model)"),U6e.forEach(t),Woo=i(L),Sg=n(L,"LI",{});var J6e=s(Sg);lne=n(J6e,"STRONG",{});var iet=s(lne);Qoo=r(iet,"wavlm"),iet.forEach(t),Hoo=r(J6e," \u2014 "),eP=n(J6e,"A",{href:!0});var det=s(eP);Uoo=r(det,"WavLMConfig"),det.forEach(t),Joo=r(J6e," (WavLM model)"),J6e.forEach(t),Yoo=i(L),Rg=n(L,"LI",{});var Y6e=s(Rg);ine=n(Y6e,"STRONG",{});var cet=s(ine);Koo=r(cet,"xglm"),cet.forEach(t),Zoo=r(Y6e," \u2014 "),oP=n(Y6e,"A",{href:!0});var fet=s(oP);ero=r(fet,"XGLMConfig"),fet.forEach(t),oro=r(Y6e," (XGLM model)"),Y6e.forEach(t),rro=i(L),Pg=n(L,"LI",{});var K6e=s(Pg);dne=n(K6e,"STRONG",{});var met=s(dne);tro=r(met,"xlm"),met.forEach(t),aro=r(K6e," \u2014 "),rP=n(K6e,"A",{href:!0});var get=s(rP);nro=r(get,"XLMConfig"),get.forEach(t),sro=r(K6e," (XLM model)"),K6e.forEach(t),lro=i(L),Bg=n(L,"LI",{});var Z6e=s(Bg);cne=n(Z6e,"STRONG",{});var het=s(cne);iro=r(het,"xlm-prophetnet"),het.forEach(t),dro=r(Z6e," \u2014 "),tP=n(Z6e,"A",{href:!0});var pet=s(tP);cro=r(pet,"XLMProphetNetConfig"),pet.forEach(t),fro=r(Z6e," (XLM-ProphetNet model)"),Z6e.forEach(t),mro=i(L),Ig=n(L,"LI",{});var eLe=s(Ig);fne=n(eLe,"STRONG",{});var _et=s(fne);gro=r(_et,"xlm-roberta"),_et.forEach(t),hro=r(eLe," \u2014 "),aP=n(eLe,"A",{href:!0});var uet=s(aP);pro=r(uet,"XLMRobertaConfig"),uet.forEach(t),_ro=r(eLe," (XLM-RoBERTa model)"),eLe.forEach(t),uro=i(L),Ng=n(L,"LI",{});var oLe=s(Ng);mne=n(oLe,"STRONG",{});var bet=s(mne);bro=r(bet,"xlm-roberta-xl"),bet.forEach(t),vro=r(oLe," \u2014 "),nP=n(oLe,"A",{href:!0});var vet=s(nP);Fro=r(vet,"XLMRobertaXLConfig"),vet.forEach(t),Tro=r(oLe," (XLM-RoBERTa-XL model)"),oLe.forEach(t),Mro=i(L),qg=n(L,"LI",{});var rLe=s(qg);gne=n(rLe,"STRONG",{});var Fet=s(gne);Ero=r(Fet,"xlnet"),Fet.forEach(t),Cro=r(rLe," \u2014 "),sP=n(rLe,"A",{href:!0});var Tet=s(sP);wro=r(Tet,"XLNetConfig"),Tet.forEach(t),Aro=r(rLe," (XLNet model)"),rLe.forEach(t),Lro=i(L),jg=n(L,"LI",{});var tLe=s(jg);hne=n(tLe,"STRONG",{});var Met=s(hne);yro=r(Met,"yolos"),Met.forEach(t),xro=r(tLe," \u2014 "),lP=n(tLe,"A",{href:!0});var Eet=s(lP);$ro=r(Eet,"YolosConfig"),Eet.forEach(t),kro=r(tLe," (YOLOS model)"),tLe.forEach(t),Sro=i(L),Dg=n(L,"LI",{});var aLe=s(Dg);pne=n(aLe,"STRONG",{});var Cet=s(pne);Rro=r(Cet,"yoso"),Cet.forEach(t),Pro=r(aLe," \u2014 "),iP=n(aLe,"A",{href:!0});var wet=s(iP);Bro=r(wet,"YosoConfig"),wet.forEach(t),Iro=r(aLe," (YOSO model)"),aLe.forEach(t),L.forEach(t),Nro=i(at),T(Gg.$$.fragment,at),at.forEach(t),qro=i(tt),Og=n(tt,"DIV",{class:!0});var CVe=s(Og);T(kL.$$.fragment,CVe),jro=i(CVe),_ne=n(CVe,"P",{});var Aet=s(_ne);Dro=r(Aet,"Register a new configuration for this class."),Aet.forEach(t),CVe.forEach(t),tt.forEach(t),wGe=i(f),ki=n(f,"H2",{class:!0});var wVe=s(ki);Vg=n(wVe,"A",{id:!0,class:!0,href:!0});var Let=s(Vg);une=n(Let,"SPAN",{});var yet=s(une);T(SL.$$.fragment,yet),yet.forEach(t),Let.forEach(t),Gro=i(wVe),bne=n(wVe,"SPAN",{});var xet=s(bne);Oro=r(xet,"AutoTokenizer"),xet.forEach(t),wVe.forEach(t),AGe=i(f),Ao=n(f,"DIV",{class:!0});var zs=s(Ao);T(RL.$$.fragment,zs),Vro=i(zs),PL=n(zs,"P",{});var AVe=s(PL);Xro=r(AVe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),dP=n(AVe,"A",{href:!0});var $et=s(dP);zro=r($et,"AutoTokenizer.from_pretrained()"),$et.forEach(t),Wro=r(AVe," class method."),AVe.forEach(t),Qro=i(zs),BL=n(zs,"P",{});var LVe=s(BL);Hro=r(LVe,"This class cannot be instantiated directly using "),vne=n(LVe,"CODE",{});var ket=s(vne);Uro=r(ket,"__init__()"),ket.forEach(t),Jro=r(LVe," (throws an error)."),LVe.forEach(t),Yro=i(zs),Ar=n(zs,"DIV",{class:!0});var Ws=s(Ar);T(IL.$$.fragment,Ws),Kro=i(Ws),Fne=n(Ws,"P",{});var Set=s(Fne);Zro=r(Set,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Set.forEach(t),eto=i(Ws),ka=n(Ws,"P",{});var wA=s(ka);oto=r(wA,"The tokenizer class to instantiate is selected based on the "),Tne=n(wA,"CODE",{});var Ret=s(Tne);rto=r(Ret,"model_type"),Ret.forEach(t),tto=r(wA,` property of the config object (either
passed as an argument or loaded from `),Mne=n(wA,"CODE",{});var Pet=s(Mne);ato=r(Pet,"pretrained_model_name_or_path"),Pet.forEach(t),nto=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ene=n(wA,"CODE",{});var Bet=s(Ene);sto=r(Bet,"pretrained_model_name_or_path"),Bet.forEach(t),lto=r(wA,":"),wA.forEach(t),ito=i(Ws),k=n(Ws,"UL",{});var S=s(k);Nn=n(S,"LI",{});var O$=s(Nn);Cne=n(O$,"STRONG",{});var Iet=s(Cne);dto=r(Iet,"albert"),Iet.forEach(t),cto=r(O$," \u2014 "),cP=n(O$,"A",{href:!0});var Net=s(cP);fto=r(Net,"AlbertTokenizer"),Net.forEach(t),mto=r(O$," or "),fP=n(O$,"A",{href:!0});var qet=s(fP);gto=r(qet,"AlbertTokenizerFast"),qet.forEach(t),hto=r(O$," (ALBERT model)"),O$.forEach(t),pto=i(S),qn=n(S,"LI",{});var V$=s(qn);wne=n(V$,"STRONG",{});var jet=s(wne);_to=r(jet,"bart"),jet.forEach(t),uto=r(V$," \u2014 "),mP=n(V$,"A",{href:!0});var Det=s(mP);bto=r(Det,"BartTokenizer"),Det.forEach(t),vto=r(V$," or "),gP=n(V$,"A",{href:!0});var Get=s(gP);Fto=r(Get,"BartTokenizerFast"),Get.forEach(t),Tto=r(V$," (BART model)"),V$.forEach(t),Mto=i(S),jn=n(S,"LI",{});var X$=s(jn);Ane=n(X$,"STRONG",{});var Oet=s(Ane);Eto=r(Oet,"barthez"),Oet.forEach(t),Cto=r(X$," \u2014 "),hP=n(X$,"A",{href:!0});var Vet=s(hP);wto=r(Vet,"BarthezTokenizer"),Vet.forEach(t),Ato=r(X$," or "),pP=n(X$,"A",{href:!0});var Xet=s(pP);Lto=r(Xet,"BarthezTokenizerFast"),Xet.forEach(t),yto=r(X$," (BARThez model)"),X$.forEach(t),xto=i(S),Xg=n(S,"LI",{});var nLe=s(Xg);Lne=n(nLe,"STRONG",{});var zet=s(Lne);$to=r(zet,"bartpho"),zet.forEach(t),kto=r(nLe," \u2014 "),_P=n(nLe,"A",{href:!0});var Wet=s(_P);Sto=r(Wet,"BartphoTokenizer"),Wet.forEach(t),Rto=r(nLe," (BARTpho model)"),nLe.forEach(t),Pto=i(S),Dn=n(S,"LI",{});var z$=s(Dn);yne=n(z$,"STRONG",{});var Qet=s(yne);Bto=r(Qet,"bert"),Qet.forEach(t),Ito=r(z$," \u2014 "),uP=n(z$,"A",{href:!0});var Het=s(uP);Nto=r(Het,"BertTokenizer"),Het.forEach(t),qto=r(z$," or "),bP=n(z$,"A",{href:!0});var Uet=s(bP);jto=r(Uet,"BertTokenizerFast"),Uet.forEach(t),Dto=r(z$," (BERT model)"),z$.forEach(t),Gto=i(S),zg=n(S,"LI",{});var sLe=s(zg);xne=n(sLe,"STRONG",{});var Jet=s(xne);Oto=r(Jet,"bert-generation"),Jet.forEach(t),Vto=r(sLe," \u2014 "),vP=n(sLe,"A",{href:!0});var Yet=s(vP);Xto=r(Yet,"BertGenerationTokenizer"),Yet.forEach(t),zto=r(sLe," (Bert Generation model)"),sLe.forEach(t),Wto=i(S),Wg=n(S,"LI",{});var lLe=s(Wg);$ne=n(lLe,"STRONG",{});var Ket=s($ne);Qto=r(Ket,"bert-japanese"),Ket.forEach(t),Hto=r(lLe," \u2014 "),FP=n(lLe,"A",{href:!0});var Zet=s(FP);Uto=r(Zet,"BertJapaneseTokenizer"),Zet.forEach(t),Jto=r(lLe," (BertJapanese model)"),lLe.forEach(t),Yto=i(S),Qg=n(S,"LI",{});var iLe=s(Qg);kne=n(iLe,"STRONG",{});var eot=s(kne);Kto=r(eot,"bertweet"),eot.forEach(t),Zto=r(iLe," \u2014 "),TP=n(iLe,"A",{href:!0});var oot=s(TP);eao=r(oot,"BertweetTokenizer"),oot.forEach(t),oao=r(iLe," (BERTweet model)"),iLe.forEach(t),rao=i(S),Gn=n(S,"LI",{});var W$=s(Gn);Sne=n(W$,"STRONG",{});var rot=s(Sne);tao=r(rot,"big_bird"),rot.forEach(t),aao=r(W$," \u2014 "),MP=n(W$,"A",{href:!0});var tot=s(MP);nao=r(tot,"BigBirdTokenizer"),tot.forEach(t),sao=r(W$," or "),EP=n(W$,"A",{href:!0});var aot=s(EP);lao=r(aot,"BigBirdTokenizerFast"),aot.forEach(t),iao=r(W$," (BigBird model)"),W$.forEach(t),dao=i(S),On=n(S,"LI",{});var Q$=s(On);Rne=n(Q$,"STRONG",{});var not=s(Rne);cao=r(not,"bigbird_pegasus"),not.forEach(t),fao=r(Q$," \u2014 "),CP=n(Q$,"A",{href:!0});var sot=s(CP);mao=r(sot,"PegasusTokenizer"),sot.forEach(t),gao=r(Q$," or "),wP=n(Q$,"A",{href:!0});var lot=s(wP);hao=r(lot,"PegasusTokenizerFast"),lot.forEach(t),pao=r(Q$," (BigBird-Pegasus model)"),Q$.forEach(t),_ao=i(S),Vn=n(S,"LI",{});var H$=s(Vn);Pne=n(H$,"STRONG",{});var iot=s(Pne);uao=r(iot,"blenderbot"),iot.forEach(t),bao=r(H$," \u2014 "),AP=n(H$,"A",{href:!0});var dot=s(AP);vao=r(dot,"BlenderbotTokenizer"),dot.forEach(t),Fao=r(H$," or "),LP=n(H$,"A",{href:!0});var cot=s(LP);Tao=r(cot,"BlenderbotTokenizerFast"),cot.forEach(t),Mao=r(H$," (Blenderbot model)"),H$.forEach(t),Eao=i(S),Hg=n(S,"LI",{});var dLe=s(Hg);Bne=n(dLe,"STRONG",{});var fot=s(Bne);Cao=r(fot,"blenderbot-small"),fot.forEach(t),wao=r(dLe," \u2014 "),yP=n(dLe,"A",{href:!0});var mot=s(yP);Aao=r(mot,"BlenderbotSmallTokenizer"),mot.forEach(t),Lao=r(dLe," (BlenderbotSmall model)"),dLe.forEach(t),yao=i(S),Ug=n(S,"LI",{});var cLe=s(Ug);Ine=n(cLe,"STRONG",{});var got=s(Ine);xao=r(got,"bloom"),got.forEach(t),$ao=r(cLe," \u2014 "),xP=n(cLe,"A",{href:!0});var hot=s(xP);kao=r(hot,"BloomTokenizerFast"),hot.forEach(t),Sao=r(cLe," (BLOOM model)"),cLe.forEach(t),Rao=i(S),Jg=n(S,"LI",{});var fLe=s(Jg);Nne=n(fLe,"STRONG",{});var pot=s(Nne);Pao=r(pot,"byt5"),pot.forEach(t),Bao=r(fLe," \u2014 "),$P=n(fLe,"A",{href:!0});var _ot=s($P);Iao=r(_ot,"ByT5Tokenizer"),_ot.forEach(t),Nao=r(fLe," (ByT5 model)"),fLe.forEach(t),qao=i(S),Xn=n(S,"LI",{});var U$=s(Xn);qne=n(U$,"STRONG",{});var uot=s(qne);jao=r(uot,"camembert"),uot.forEach(t),Dao=r(U$," \u2014 "),kP=n(U$,"A",{href:!0});var bot=s(kP);Gao=r(bot,"CamembertTokenizer"),bot.forEach(t),Oao=r(U$," or "),SP=n(U$,"A",{href:!0});var vot=s(SP);Vao=r(vot,"CamembertTokenizerFast"),vot.forEach(t),Xao=r(U$," (CamemBERT model)"),U$.forEach(t),zao=i(S),Yg=n(S,"LI",{});var mLe=s(Yg);jne=n(mLe,"STRONG",{});var Fot=s(jne);Wao=r(Fot,"canine"),Fot.forEach(t),Qao=r(mLe," \u2014 "),RP=n(mLe,"A",{href:!0});var Tot=s(RP);Hao=r(Tot,"CanineTokenizer"),Tot.forEach(t),Uao=r(mLe," (CANINE model)"),mLe.forEach(t),Jao=i(S),zn=n(S,"LI",{});var J$=s(zn);Dne=n(J$,"STRONG",{});var Mot=s(Dne);Yao=r(Mot,"clip"),Mot.forEach(t),Kao=r(J$," \u2014 "),PP=n(J$,"A",{href:!0});var Eot=s(PP);Zao=r(Eot,"CLIPTokenizer"),Eot.forEach(t),eno=r(J$," or "),BP=n(J$,"A",{href:!0});var Cot=s(BP);ono=r(Cot,"CLIPTokenizerFast"),Cot.forEach(t),rno=r(J$," (CLIP model)"),J$.forEach(t),tno=i(S),Wn=n(S,"LI",{});var Y$=s(Wn);Gne=n(Y$,"STRONG",{});var wot=s(Gne);ano=r(wot,"convbert"),wot.forEach(t),nno=r(Y$," \u2014 "),IP=n(Y$,"A",{href:!0});var Aot=s(IP);sno=r(Aot,"ConvBertTokenizer"),Aot.forEach(t),lno=r(Y$," or "),NP=n(Y$,"A",{href:!0});var Lot=s(NP);ino=r(Lot,"ConvBertTokenizerFast"),Lot.forEach(t),dno=r(Y$," (ConvBERT model)"),Y$.forEach(t),cno=i(S),Qn=n(S,"LI",{});var K$=s(Qn);One=n(K$,"STRONG",{});var yot=s(One);fno=r(yot,"cpm"),yot.forEach(t),mno=r(K$," \u2014 "),qP=n(K$,"A",{href:!0});var xot=s(qP);gno=r(xot,"CpmTokenizer"),xot.forEach(t),hno=r(K$," or "),jP=n(K$,"A",{href:!0});var $ot=s(jP);pno=r($ot,"CpmTokenizerFast"),$ot.forEach(t),_no=r(K$," (CPM model)"),K$.forEach(t),uno=i(S),Kg=n(S,"LI",{});var gLe=s(Kg);Vne=n(gLe,"STRONG",{});var kot=s(Vne);bno=r(kot,"ctrl"),kot.forEach(t),vno=r(gLe," \u2014 "),DP=n(gLe,"A",{href:!0});var Sot=s(DP);Fno=r(Sot,"CTRLTokenizer"),Sot.forEach(t),Tno=r(gLe," (CTRL model)"),gLe.forEach(t),Mno=i(S),Hn=n(S,"LI",{});var Z$=s(Hn);Xne=n(Z$,"STRONG",{});var Rot=s(Xne);Eno=r(Rot,"data2vec-text"),Rot.forEach(t),Cno=r(Z$," \u2014 "),GP=n(Z$,"A",{href:!0});var Pot=s(GP);wno=r(Pot,"RobertaTokenizer"),Pot.forEach(t),Ano=r(Z$," or "),OP=n(Z$,"A",{href:!0});var Bot=s(OP);Lno=r(Bot,"RobertaTokenizerFast"),Bot.forEach(t),yno=r(Z$," (Data2VecText model)"),Z$.forEach(t),xno=i(S),Un=n(S,"LI",{});var ek=s(Un);zne=n(ek,"STRONG",{});var Iot=s(zne);$no=r(Iot,"deberta"),Iot.forEach(t),kno=r(ek," \u2014 "),VP=n(ek,"A",{href:!0});var Not=s(VP);Sno=r(Not,"DebertaTokenizer"),Not.forEach(t),Rno=r(ek," or "),XP=n(ek,"A",{href:!0});var qot=s(XP);Pno=r(qot,"DebertaTokenizerFast"),qot.forEach(t),Bno=r(ek," (DeBERTa model)"),ek.forEach(t),Ino=i(S),Jn=n(S,"LI",{});var ok=s(Jn);Wne=n(ok,"STRONG",{});var jot=s(Wne);Nno=r(jot,"deberta-v2"),jot.forEach(t),qno=r(ok," \u2014 "),zP=n(ok,"A",{href:!0});var Dot=s(zP);jno=r(Dot,"DebertaV2Tokenizer"),Dot.forEach(t),Dno=r(ok," or "),WP=n(ok,"A",{href:!0});var Got=s(WP);Gno=r(Got,"DebertaV2TokenizerFast"),Got.forEach(t),Ono=r(ok," (DeBERTa-v2 model)"),ok.forEach(t),Vno=i(S),Yn=n(S,"LI",{});var rk=s(Yn);Qne=n(rk,"STRONG",{});var Oot=s(Qne);Xno=r(Oot,"distilbert"),Oot.forEach(t),zno=r(rk," \u2014 "),QP=n(rk,"A",{href:!0});var Vot=s(QP);Wno=r(Vot,"DistilBertTokenizer"),Vot.forEach(t),Qno=r(rk," or "),HP=n(rk,"A",{href:!0});var Xot=s(HP);Hno=r(Xot,"DistilBertTokenizerFast"),Xot.forEach(t),Uno=r(rk," (DistilBERT model)"),rk.forEach(t),Jno=i(S),Kn=n(S,"LI",{});var tk=s(Kn);Hne=n(tk,"STRONG",{});var zot=s(Hne);Yno=r(zot,"dpr"),zot.forEach(t),Kno=r(tk," \u2014 "),UP=n(tk,"A",{href:!0});var Wot=s(UP);Zno=r(Wot,"DPRQuestionEncoderTokenizer"),Wot.forEach(t),eso=r(tk," or "),JP=n(tk,"A",{href:!0});var Qot=s(JP);oso=r(Qot,"DPRQuestionEncoderTokenizerFast"),Qot.forEach(t),rso=r(tk," (DPR model)"),tk.forEach(t),tso=i(S),Zn=n(S,"LI",{});var ak=s(Zn);Une=n(ak,"STRONG",{});var Hot=s(Une);aso=r(Hot,"electra"),Hot.forEach(t),nso=r(ak," \u2014 "),YP=n(ak,"A",{href:!0});var Uot=s(YP);sso=r(Uot,"ElectraTokenizer"),Uot.forEach(t),lso=r(ak," or "),KP=n(ak,"A",{href:!0});var Jot=s(KP);iso=r(Jot,"ElectraTokenizerFast"),Jot.forEach(t),dso=r(ak," (ELECTRA model)"),ak.forEach(t),cso=i(S),Zg=n(S,"LI",{});var hLe=s(Zg);Jne=n(hLe,"STRONG",{});var Yot=s(Jne);fso=r(Yot,"flaubert"),Yot.forEach(t),mso=r(hLe," \u2014 "),ZP=n(hLe,"A",{href:!0});var Kot=s(ZP);gso=r(Kot,"FlaubertTokenizer"),Kot.forEach(t),hso=r(hLe," (FlauBERT model)"),hLe.forEach(t),pso=i(S),es=n(S,"LI",{});var nk=s(es);Yne=n(nk,"STRONG",{});var Zot=s(Yne);_so=r(Zot,"fnet"),Zot.forEach(t),uso=r(nk," \u2014 "),eB=n(nk,"A",{href:!0});var ert=s(eB);bso=r(ert,"FNetTokenizer"),ert.forEach(t),vso=r(nk," or "),oB=n(nk,"A",{href:!0});var ort=s(oB);Fso=r(ort,"FNetTokenizerFast"),ort.forEach(t),Tso=r(nk," (FNet model)"),nk.forEach(t),Mso=i(S),eh=n(S,"LI",{});var pLe=s(eh);Kne=n(pLe,"STRONG",{});var rrt=s(Kne);Eso=r(rrt,"fsmt"),rrt.forEach(t),Cso=r(pLe," \u2014 "),rB=n(pLe,"A",{href:!0});var trt=s(rB);wso=r(trt,"FSMTTokenizer"),trt.forEach(t),Aso=r(pLe," (FairSeq Machine-Translation model)"),pLe.forEach(t),Lso=i(S),os=n(S,"LI",{});var sk=s(os);Zne=n(sk,"STRONG",{});var art=s(Zne);yso=r(art,"funnel"),art.forEach(t),xso=r(sk," \u2014 "),tB=n(sk,"A",{href:!0});var nrt=s(tB);$so=r(nrt,"FunnelTokenizer"),nrt.forEach(t),kso=r(sk," or "),aB=n(sk,"A",{href:!0});var srt=s(aB);Sso=r(srt,"FunnelTokenizerFast"),srt.forEach(t),Rso=r(sk," (Funnel Transformer model)"),sk.forEach(t),Pso=i(S),rs=n(S,"LI",{});var lk=s(rs);ese=n(lk,"STRONG",{});var lrt=s(ese);Bso=r(lrt,"gpt2"),lrt.forEach(t),Iso=r(lk," \u2014 "),nB=n(lk,"A",{href:!0});var irt=s(nB);Nso=r(irt,"GPT2Tokenizer"),irt.forEach(t),qso=r(lk," or "),sB=n(lk,"A",{href:!0});var drt=s(sB);jso=r(drt,"GPT2TokenizerFast"),drt.forEach(t),Dso=r(lk," (OpenAI GPT-2 model)"),lk.forEach(t),Gso=i(S),ts=n(S,"LI",{});var ik=s(ts);ose=n(ik,"STRONG",{});var crt=s(ose);Oso=r(crt,"gpt_neo"),crt.forEach(t),Vso=r(ik," \u2014 "),lB=n(ik,"A",{href:!0});var frt=s(lB);Xso=r(frt,"GPT2Tokenizer"),frt.forEach(t),zso=r(ik," or "),iB=n(ik,"A",{href:!0});var mrt=s(iB);Wso=r(mrt,"GPT2TokenizerFast"),mrt.forEach(t),Qso=r(ik," (GPT Neo model)"),ik.forEach(t),Hso=i(S),oh=n(S,"LI",{});var _Le=s(oh);rse=n(_Le,"STRONG",{});var grt=s(rse);Uso=r(grt,"gpt_neox"),grt.forEach(t),Jso=r(_Le," \u2014 "),dB=n(_Le,"A",{href:!0});var hrt=s(dB);Yso=r(hrt,"GPTNeoXTokenizerFast"),hrt.forEach(t),Kso=r(_Le," (GPT NeoX model)"),_Le.forEach(t),Zso=i(S),as=n(S,"LI",{});var dk=s(as);tse=n(dk,"STRONG",{});var prt=s(tse);elo=r(prt,"gptj"),prt.forEach(t),olo=r(dk," \u2014 "),cB=n(dk,"A",{href:!0});var _rt=s(cB);rlo=r(_rt,"GPT2Tokenizer"),_rt.forEach(t),tlo=r(dk," or "),fB=n(dk,"A",{href:!0});var urt=s(fB);alo=r(urt,"GPT2TokenizerFast"),urt.forEach(t),nlo=r(dk," (GPT-J model)"),dk.forEach(t),slo=i(S),ns=n(S,"LI",{});var ck=s(ns);ase=n(ck,"STRONG",{});var brt=s(ase);llo=r(brt,"herbert"),brt.forEach(t),ilo=r(ck," \u2014 "),mB=n(ck,"A",{href:!0});var vrt=s(mB);dlo=r(vrt,"HerbertTokenizer"),vrt.forEach(t),clo=r(ck," or "),gB=n(ck,"A",{href:!0});var Frt=s(gB);flo=r(Frt,"HerbertTokenizerFast"),Frt.forEach(t),mlo=r(ck," (HerBERT model)"),ck.forEach(t),glo=i(S),rh=n(S,"LI",{});var uLe=s(rh);nse=n(uLe,"STRONG",{});var Trt=s(nse);hlo=r(Trt,"hubert"),Trt.forEach(t),plo=r(uLe," \u2014 "),hB=n(uLe,"A",{href:!0});var Mrt=s(hB);_lo=r(Mrt,"Wav2Vec2CTCTokenizer"),Mrt.forEach(t),ulo=r(uLe," (Hubert model)"),uLe.forEach(t),blo=i(S),ss=n(S,"LI",{});var fk=s(ss);sse=n(fk,"STRONG",{});var Ert=s(sse);vlo=r(Ert,"ibert"),Ert.forEach(t),Flo=r(fk," \u2014 "),pB=n(fk,"A",{href:!0});var Crt=s(pB);Tlo=r(Crt,"RobertaTokenizer"),Crt.forEach(t),Mlo=r(fk," or "),_B=n(fk,"A",{href:!0});var wrt=s(_B);Elo=r(wrt,"RobertaTokenizerFast"),wrt.forEach(t),Clo=r(fk," (I-BERT model)"),fk.forEach(t),wlo=i(S),ls=n(S,"LI",{});var mk=s(ls);lse=n(mk,"STRONG",{});var Art=s(lse);Alo=r(Art,"layoutlm"),Art.forEach(t),Llo=r(mk," \u2014 "),uB=n(mk,"A",{href:!0});var Lrt=s(uB);ylo=r(Lrt,"LayoutLMTokenizer"),Lrt.forEach(t),xlo=r(mk," or "),bB=n(mk,"A",{href:!0});var yrt=s(bB);$lo=r(yrt,"LayoutLMTokenizerFast"),yrt.forEach(t),klo=r(mk," (LayoutLM model)"),mk.forEach(t),Slo=i(S),is=n(S,"LI",{});var gk=s(is);ise=n(gk,"STRONG",{});var xrt=s(ise);Rlo=r(xrt,"layoutlmv2"),xrt.forEach(t),Plo=r(gk," \u2014 "),vB=n(gk,"A",{href:!0});var $rt=s(vB);Blo=r($rt,"LayoutLMv2Tokenizer"),$rt.forEach(t),Ilo=r(gk," or "),FB=n(gk,"A",{href:!0});var krt=s(FB);Nlo=r(krt,"LayoutLMv2TokenizerFast"),krt.forEach(t),qlo=r(gk," (LayoutLMv2 model)"),gk.forEach(t),jlo=i(S),ds=n(S,"LI",{});var hk=s(ds);dse=n(hk,"STRONG",{});var Srt=s(dse);Dlo=r(Srt,"layoutlmv3"),Srt.forEach(t),Glo=r(hk," \u2014 "),TB=n(hk,"A",{href:!0});var Rrt=s(TB);Olo=r(Rrt,"LayoutLMv3Tokenizer"),Rrt.forEach(t),Vlo=r(hk," or "),MB=n(hk,"A",{href:!0});var Prt=s(MB);Xlo=r(Prt,"LayoutLMv3TokenizerFast"),Prt.forEach(t),zlo=r(hk," (LayoutLMv3 model)"),hk.forEach(t),Wlo=i(S),cs=n(S,"LI",{});var pk=s(cs);cse=n(pk,"STRONG",{});var Brt=s(cse);Qlo=r(Brt,"layoutxlm"),Brt.forEach(t),Hlo=r(pk," \u2014 "),EB=n(pk,"A",{href:!0});var Irt=s(EB);Ulo=r(Irt,"LayoutXLMTokenizer"),Irt.forEach(t),Jlo=r(pk," or "),CB=n(pk,"A",{href:!0});var Nrt=s(CB);Ylo=r(Nrt,"LayoutXLMTokenizerFast"),Nrt.forEach(t),Klo=r(pk," (LayoutXLM model)"),pk.forEach(t),Zlo=i(S),fs=n(S,"LI",{});var _k=s(fs);fse=n(_k,"STRONG",{});var qrt=s(fse);eio=r(qrt,"led"),qrt.forEach(t),oio=r(_k," \u2014 "),wB=n(_k,"A",{href:!0});var jrt=s(wB);rio=r(jrt,"LEDTokenizer"),jrt.forEach(t),tio=r(_k," or "),AB=n(_k,"A",{href:!0});var Drt=s(AB);aio=r(Drt,"LEDTokenizerFast"),Drt.forEach(t),nio=r(_k," (LED model)"),_k.forEach(t),sio=i(S),ms=n(S,"LI",{});var uk=s(ms);mse=n(uk,"STRONG",{});var Grt=s(mse);lio=r(Grt,"longformer"),Grt.forEach(t),iio=r(uk," \u2014 "),LB=n(uk,"A",{href:!0});var Ort=s(LB);dio=r(Ort,"LongformerTokenizer"),Ort.forEach(t),cio=r(uk," or "),yB=n(uk,"A",{href:!0});var Vrt=s(yB);fio=r(Vrt,"LongformerTokenizerFast"),Vrt.forEach(t),mio=r(uk," (Longformer model)"),uk.forEach(t),gio=i(S),gs=n(S,"LI",{});var bk=s(gs);gse=n(bk,"STRONG",{});var Xrt=s(gse);hio=r(Xrt,"longt5"),Xrt.forEach(t),pio=r(bk," \u2014 "),xB=n(bk,"A",{href:!0});var zrt=s(xB);_io=r(zrt,"T5Tokenizer"),zrt.forEach(t),uio=r(bk," or "),$B=n(bk,"A",{href:!0});var Wrt=s($B);bio=r(Wrt,"T5TokenizerFast"),Wrt.forEach(t),vio=r(bk," (LongT5 model)"),bk.forEach(t),Fio=i(S),th=n(S,"LI",{});var bLe=s(th);hse=n(bLe,"STRONG",{});var Qrt=s(hse);Tio=r(Qrt,"luke"),Qrt.forEach(t),Mio=r(bLe," \u2014 "),kB=n(bLe,"A",{href:!0});var Hrt=s(kB);Eio=r(Hrt,"LukeTokenizer"),Hrt.forEach(t),Cio=r(bLe," (LUKE model)"),bLe.forEach(t),wio=i(S),hs=n(S,"LI",{});var vk=s(hs);pse=n(vk,"STRONG",{});var Urt=s(pse);Aio=r(Urt,"lxmert"),Urt.forEach(t),Lio=r(vk," \u2014 "),SB=n(vk,"A",{href:!0});var Jrt=s(SB);yio=r(Jrt,"LxmertTokenizer"),Jrt.forEach(t),xio=r(vk," or "),RB=n(vk,"A",{href:!0});var Yrt=s(RB);$io=r(Yrt,"LxmertTokenizerFast"),Yrt.forEach(t),kio=r(vk," (LXMERT model)"),vk.forEach(t),Sio=i(S),ah=n(S,"LI",{});var vLe=s(ah);_se=n(vLe,"STRONG",{});var Krt=s(_se);Rio=r(Krt,"m2m_100"),Krt.forEach(t),Pio=r(vLe," \u2014 "),PB=n(vLe,"A",{href:!0});var Zrt=s(PB);Bio=r(Zrt,"M2M100Tokenizer"),Zrt.forEach(t),Iio=r(vLe," (M2M100 model)"),vLe.forEach(t),Nio=i(S),nh=n(S,"LI",{});var FLe=s(nh);use=n(FLe,"STRONG",{});var ett=s(use);qio=r(ett,"marian"),ett.forEach(t),jio=r(FLe," \u2014 "),BB=n(FLe,"A",{href:!0});var ott=s(BB);Dio=r(ott,"MarianTokenizer"),ott.forEach(t),Gio=r(FLe," (Marian model)"),FLe.forEach(t),Oio=i(S),ps=n(S,"LI",{});var Fk=s(ps);bse=n(Fk,"STRONG",{});var rtt=s(bse);Vio=r(rtt,"mbart"),rtt.forEach(t),Xio=r(Fk," \u2014 "),IB=n(Fk,"A",{href:!0});var ttt=s(IB);zio=r(ttt,"MBartTokenizer"),ttt.forEach(t),Wio=r(Fk," or "),NB=n(Fk,"A",{href:!0});var att=s(NB);Qio=r(att,"MBartTokenizerFast"),att.forEach(t),Hio=r(Fk," (mBART model)"),Fk.forEach(t),Uio=i(S),_s=n(S,"LI",{});var Tk=s(_s);vse=n(Tk,"STRONG",{});var ntt=s(vse);Jio=r(ntt,"mbart50"),ntt.forEach(t),Yio=r(Tk," \u2014 "),qB=n(Tk,"A",{href:!0});var stt=s(qB);Kio=r(stt,"MBart50Tokenizer"),stt.forEach(t),Zio=r(Tk," or "),jB=n(Tk,"A",{href:!0});var ltt=s(jB);edo=r(ltt,"MBart50TokenizerFast"),ltt.forEach(t),odo=r(Tk," (mBART-50 model)"),Tk.forEach(t),rdo=i(S),us=n(S,"LI",{});var Mk=s(us);Fse=n(Mk,"STRONG",{});var itt=s(Fse);tdo=r(itt,"megatron-bert"),itt.forEach(t),ado=r(Mk," \u2014 "),DB=n(Mk,"A",{href:!0});var dtt=s(DB);ndo=r(dtt,"BertTokenizer"),dtt.forEach(t),sdo=r(Mk," or "),GB=n(Mk,"A",{href:!0});var ctt=s(GB);ldo=r(ctt,"BertTokenizerFast"),ctt.forEach(t),ido=r(Mk," (Megatron-BERT model)"),Mk.forEach(t),ddo=i(S),sh=n(S,"LI",{});var TLe=s(sh);Tse=n(TLe,"STRONG",{});var ftt=s(Tse);cdo=r(ftt,"mluke"),ftt.forEach(t),fdo=r(TLe," \u2014 "),OB=n(TLe,"A",{href:!0});var mtt=s(OB);mdo=r(mtt,"MLukeTokenizer"),mtt.forEach(t),gdo=r(TLe," (mLUKE model)"),TLe.forEach(t),hdo=i(S),bs=n(S,"LI",{});var Ek=s(bs);Mse=n(Ek,"STRONG",{});var gtt=s(Mse);pdo=r(gtt,"mobilebert"),gtt.forEach(t),_do=r(Ek," \u2014 "),VB=n(Ek,"A",{href:!0});var htt=s(VB);udo=r(htt,"MobileBertTokenizer"),htt.forEach(t),bdo=r(Ek," or "),XB=n(Ek,"A",{href:!0});var ptt=s(XB);vdo=r(ptt,"MobileBertTokenizerFast"),ptt.forEach(t),Fdo=r(Ek," (MobileBERT model)"),Ek.forEach(t),Tdo=i(S),vs=n(S,"LI",{});var Ck=s(vs);Ese=n(Ck,"STRONG",{});var _tt=s(Ese);Mdo=r(_tt,"mpnet"),_tt.forEach(t),Edo=r(Ck," \u2014 "),zB=n(Ck,"A",{href:!0});var utt=s(zB);Cdo=r(utt,"MPNetTokenizer"),utt.forEach(t),wdo=r(Ck," or "),WB=n(Ck,"A",{href:!0});var btt=s(WB);Ado=r(btt,"MPNetTokenizerFast"),btt.forEach(t),Ldo=r(Ck," (MPNet model)"),Ck.forEach(t),ydo=i(S),Fs=n(S,"LI",{});var wk=s(Fs);Cse=n(wk,"STRONG",{});var vtt=s(Cse);xdo=r(vtt,"mt5"),vtt.forEach(t),$do=r(wk," \u2014 "),QB=n(wk,"A",{href:!0});var Ftt=s(QB);kdo=r(Ftt,"MT5Tokenizer"),Ftt.forEach(t),Sdo=r(wk," or "),HB=n(wk,"A",{href:!0});var Ttt=s(HB);Rdo=r(Ttt,"MT5TokenizerFast"),Ttt.forEach(t),Pdo=r(wk," (MT5 model)"),wk.forEach(t),Bdo=i(S),Ts=n(S,"LI",{});var Ak=s(Ts);wse=n(Ak,"STRONG",{});var Mtt=s(wse);Ido=r(Mtt,"nystromformer"),Mtt.forEach(t),Ndo=r(Ak," \u2014 "),UB=n(Ak,"A",{href:!0});var Ett=s(UB);qdo=r(Ett,"AlbertTokenizer"),Ett.forEach(t),jdo=r(Ak," or "),JB=n(Ak,"A",{href:!0});var Ctt=s(JB);Ddo=r(Ctt,"AlbertTokenizerFast"),Ctt.forEach(t),Gdo=r(Ak," (Nystr\xF6mformer model)"),Ak.forEach(t),Odo=i(S),Ms=n(S,"LI",{});var Lk=s(Ms);Ase=n(Lk,"STRONG",{});var wtt=s(Ase);Vdo=r(wtt,"openai-gpt"),wtt.forEach(t),Xdo=r(Lk," \u2014 "),YB=n(Lk,"A",{href:!0});var Att=s(YB);zdo=r(Att,"OpenAIGPTTokenizer"),Att.forEach(t),Wdo=r(Lk," or "),KB=n(Lk,"A",{href:!0});var Ltt=s(KB);Qdo=r(Ltt,"OpenAIGPTTokenizerFast"),Ltt.forEach(t),Hdo=r(Lk," (OpenAI GPT model)"),Lk.forEach(t),Udo=i(S),lh=n(S,"LI",{});var MLe=s(lh);Lse=n(MLe,"STRONG",{});var ytt=s(Lse);Jdo=r(ytt,"opt"),ytt.forEach(t),Ydo=r(MLe," \u2014 "),ZB=n(MLe,"A",{href:!0});var xtt=s(ZB);Kdo=r(xtt,"GPT2Tokenizer"),xtt.forEach(t),Zdo=r(MLe," (OPT model)"),MLe.forEach(t),eco=i(S),Es=n(S,"LI",{});var yk=s(Es);yse=n(yk,"STRONG",{});var $tt=s(yse);oco=r($tt,"pegasus"),$tt.forEach(t),rco=r(yk," \u2014 "),eI=n(yk,"A",{href:!0});var ktt=s(eI);tco=r(ktt,"PegasusTokenizer"),ktt.forEach(t),aco=r(yk," or "),oI=n(yk,"A",{href:!0});var Stt=s(oI);nco=r(Stt,"PegasusTokenizerFast"),Stt.forEach(t),sco=r(yk," (Pegasus model)"),yk.forEach(t),lco=i(S),ih=n(S,"LI",{});var ELe=s(ih);xse=n(ELe,"STRONG",{});var Rtt=s(xse);ico=r(Rtt,"perceiver"),Rtt.forEach(t),dco=r(ELe," \u2014 "),rI=n(ELe,"A",{href:!0});var Ptt=s(rI);cco=r(Ptt,"PerceiverTokenizer"),Ptt.forEach(t),fco=r(ELe," (Perceiver model)"),ELe.forEach(t),mco=i(S),dh=n(S,"LI",{});var CLe=s(dh);$se=n(CLe,"STRONG",{});var Btt=s($se);gco=r(Btt,"phobert"),Btt.forEach(t),hco=r(CLe," \u2014 "),tI=n(CLe,"A",{href:!0});var Itt=s(tI);pco=r(Itt,"PhobertTokenizer"),Itt.forEach(t),_co=r(CLe," (PhoBERT model)"),CLe.forEach(t),uco=i(S),ch=n(S,"LI",{});var wLe=s(ch);kse=n(wLe,"STRONG",{});var Ntt=s(kse);bco=r(Ntt,"plbart"),Ntt.forEach(t),vco=r(wLe," \u2014 "),aI=n(wLe,"A",{href:!0});var qtt=s(aI);Fco=r(qtt,"PLBartTokenizer"),qtt.forEach(t),Tco=r(wLe," (PLBart model)"),wLe.forEach(t),Mco=i(S),fh=n(S,"LI",{});var ALe=s(fh);Sse=n(ALe,"STRONG",{});var jtt=s(Sse);Eco=r(jtt,"prophetnet"),jtt.forEach(t),Cco=r(ALe," \u2014 "),nI=n(ALe,"A",{href:!0});var Dtt=s(nI);wco=r(Dtt,"ProphetNetTokenizer"),Dtt.forEach(t),Aco=r(ALe," (ProphetNet model)"),ALe.forEach(t),Lco=i(S),Cs=n(S,"LI",{});var xk=s(Cs);Rse=n(xk,"STRONG",{});var Gtt=s(Rse);yco=r(Gtt,"qdqbert"),Gtt.forEach(t),xco=r(xk," \u2014 "),sI=n(xk,"A",{href:!0});var Ott=s(sI);$co=r(Ott,"BertTokenizer"),Ott.forEach(t),kco=r(xk," or "),lI=n(xk,"A",{href:!0});var Vtt=s(lI);Sco=r(Vtt,"BertTokenizerFast"),Vtt.forEach(t),Rco=r(xk," (QDQBert model)"),xk.forEach(t),Pco=i(S),mh=n(S,"LI",{});var LLe=s(mh);Pse=n(LLe,"STRONG",{});var Xtt=s(Pse);Bco=r(Xtt,"rag"),Xtt.forEach(t),Ico=r(LLe," \u2014 "),iI=n(LLe,"A",{href:!0});var ztt=s(iI);Nco=r(ztt,"RagTokenizer"),ztt.forEach(t),qco=r(LLe," (RAG model)"),LLe.forEach(t),jco=i(S),ws=n(S,"LI",{});var $k=s(ws);Bse=n($k,"STRONG",{});var Wtt=s(Bse);Dco=r(Wtt,"realm"),Wtt.forEach(t),Gco=r($k," \u2014 "),dI=n($k,"A",{href:!0});var Qtt=s(dI);Oco=r(Qtt,"RealmTokenizer"),Qtt.forEach(t),Vco=r($k," or "),cI=n($k,"A",{href:!0});var Htt=s(cI);Xco=r(Htt,"RealmTokenizerFast"),Htt.forEach(t),zco=r($k," (REALM model)"),$k.forEach(t),Wco=i(S),As=n(S,"LI",{});var kk=s(As);Ise=n(kk,"STRONG",{});var Utt=s(Ise);Qco=r(Utt,"reformer"),Utt.forEach(t),Hco=r(kk," \u2014 "),fI=n(kk,"A",{href:!0});var Jtt=s(fI);Uco=r(Jtt,"ReformerTokenizer"),Jtt.forEach(t),Jco=r(kk," or "),mI=n(kk,"A",{href:!0});var Ytt=s(mI);Yco=r(Ytt,"ReformerTokenizerFast"),Ytt.forEach(t),Kco=r(kk," (Reformer model)"),kk.forEach(t),Zco=i(S),Ls=n(S,"LI",{});var Sk=s(Ls);Nse=n(Sk,"STRONG",{});var Ktt=s(Nse);efo=r(Ktt,"rembert"),Ktt.forEach(t),ofo=r(Sk," \u2014 "),gI=n(Sk,"A",{href:!0});var Ztt=s(gI);rfo=r(Ztt,"RemBertTokenizer"),Ztt.forEach(t),tfo=r(Sk," or "),hI=n(Sk,"A",{href:!0});var eat=s(hI);afo=r(eat,"RemBertTokenizerFast"),eat.forEach(t),nfo=r(Sk," (RemBERT model)"),Sk.forEach(t),sfo=i(S),ys=n(S,"LI",{});var Rk=s(ys);qse=n(Rk,"STRONG",{});var oat=s(qse);lfo=r(oat,"retribert"),oat.forEach(t),ifo=r(Rk," \u2014 "),pI=n(Rk,"A",{href:!0});var rat=s(pI);dfo=r(rat,"RetriBertTokenizer"),rat.forEach(t),cfo=r(Rk," or "),_I=n(Rk,"A",{href:!0});var tat=s(_I);ffo=r(tat,"RetriBertTokenizerFast"),tat.forEach(t),mfo=r(Rk," (RetriBERT model)"),Rk.forEach(t),gfo=i(S),xs=n(S,"LI",{});var Pk=s(xs);jse=n(Pk,"STRONG",{});var aat=s(jse);hfo=r(aat,"roberta"),aat.forEach(t),pfo=r(Pk," \u2014 "),uI=n(Pk,"A",{href:!0});var nat=s(uI);_fo=r(nat,"RobertaTokenizer"),nat.forEach(t),ufo=r(Pk," or "),bI=n(Pk,"A",{href:!0});var sat=s(bI);bfo=r(sat,"RobertaTokenizerFast"),sat.forEach(t),vfo=r(Pk," (RoBERTa model)"),Pk.forEach(t),Ffo=i(S),$s=n(S,"LI",{});var Bk=s($s);Dse=n(Bk,"STRONG",{});var lat=s(Dse);Tfo=r(lat,"roformer"),lat.forEach(t),Mfo=r(Bk," \u2014 "),vI=n(Bk,"A",{href:!0});var iat=s(vI);Efo=r(iat,"RoFormerTokenizer"),iat.forEach(t),Cfo=r(Bk," or "),FI=n(Bk,"A",{href:!0});var dat=s(FI);wfo=r(dat,"RoFormerTokenizerFast"),dat.forEach(t),Afo=r(Bk," (RoFormer model)"),Bk.forEach(t),Lfo=i(S),gh=n(S,"LI",{});var yLe=s(gh);Gse=n(yLe,"STRONG",{});var cat=s(Gse);yfo=r(cat,"speech_to_text"),cat.forEach(t),xfo=r(yLe," \u2014 "),TI=n(yLe,"A",{href:!0});var fat=s(TI);$fo=r(fat,"Speech2TextTokenizer"),fat.forEach(t),kfo=r(yLe," (Speech2Text model)"),yLe.forEach(t),Sfo=i(S),hh=n(S,"LI",{});var xLe=s(hh);Ose=n(xLe,"STRONG",{});var mat=s(Ose);Rfo=r(mat,"speech_to_text_2"),mat.forEach(t),Pfo=r(xLe," \u2014 "),MI=n(xLe,"A",{href:!0});var gat=s(MI);Bfo=r(gat,"Speech2Text2Tokenizer"),gat.forEach(t),Ifo=r(xLe," (Speech2Text2 model)"),xLe.forEach(t),Nfo=i(S),ks=n(S,"LI",{});var Ik=s(ks);Vse=n(Ik,"STRONG",{});var hat=s(Vse);qfo=r(hat,"splinter"),hat.forEach(t),jfo=r(Ik," \u2014 "),EI=n(Ik,"A",{href:!0});var pat=s(EI);Dfo=r(pat,"SplinterTokenizer"),pat.forEach(t),Gfo=r(Ik," or "),CI=n(Ik,"A",{href:!0});var _at=s(CI);Ofo=r(_at,"SplinterTokenizerFast"),_at.forEach(t),Vfo=r(Ik," (Splinter model)"),Ik.forEach(t),Xfo=i(S),Ss=n(S,"LI",{});var Nk=s(Ss);Xse=n(Nk,"STRONG",{});var uat=s(Xse);zfo=r(uat,"squeezebert"),uat.forEach(t),Wfo=r(Nk," \u2014 "),wI=n(Nk,"A",{href:!0});var bat=s(wI);Qfo=r(bat,"SqueezeBertTokenizer"),bat.forEach(t),Hfo=r(Nk," or "),AI=n(Nk,"A",{href:!0});var vat=s(AI);Ufo=r(vat,"SqueezeBertTokenizerFast"),vat.forEach(t),Jfo=r(Nk," (SqueezeBERT model)"),Nk.forEach(t),Yfo=i(S),Rs=n(S,"LI",{});var qk=s(Rs);zse=n(qk,"STRONG",{});var Fat=s(zse);Kfo=r(Fat,"t5"),Fat.forEach(t),Zfo=r(qk," \u2014 "),LI=n(qk,"A",{href:!0});var Tat=s(LI);emo=r(Tat,"T5Tokenizer"),Tat.forEach(t),omo=r(qk," or "),yI=n(qk,"A",{href:!0});var Mat=s(yI);rmo=r(Mat,"T5TokenizerFast"),Mat.forEach(t),tmo=r(qk," (T5 model)"),qk.forEach(t),amo=i(S),ph=n(S,"LI",{});var $Le=s(ph);Wse=n($Le,"STRONG",{});var Eat=s(Wse);nmo=r(Eat,"tapas"),Eat.forEach(t),smo=r($Le," \u2014 "),xI=n($Le,"A",{href:!0});var Cat=s(xI);lmo=r(Cat,"TapasTokenizer"),Cat.forEach(t),imo=r($Le," (TAPAS model)"),$Le.forEach(t),dmo=i(S),_h=n(S,"LI",{});var kLe=s(_h);Qse=n(kLe,"STRONG",{});var wat=s(Qse);cmo=r(wat,"tapex"),wat.forEach(t),fmo=r(kLe," \u2014 "),$I=n(kLe,"A",{href:!0});var Aat=s($I);mmo=r(Aat,"TapexTokenizer"),Aat.forEach(t),gmo=r(kLe," (TAPEX model)"),kLe.forEach(t),hmo=i(S),uh=n(S,"LI",{});var SLe=s(uh);Hse=n(SLe,"STRONG",{});var Lat=s(Hse);pmo=r(Lat,"transfo-xl"),Lat.forEach(t),_mo=r(SLe," \u2014 "),kI=n(SLe,"A",{href:!0});var yat=s(kI);umo=r(yat,"TransfoXLTokenizer"),yat.forEach(t),bmo=r(SLe," (Transformer-XL model)"),SLe.forEach(t),vmo=i(S),Ps=n(S,"LI",{});var jk=s(Ps);Use=n(jk,"STRONG",{});var xat=s(Use);Fmo=r(xat,"vilt"),xat.forEach(t),Tmo=r(jk," \u2014 "),SI=n(jk,"A",{href:!0});var $at=s(SI);Mmo=r($at,"BertTokenizer"),$at.forEach(t),Emo=r(jk," or "),RI=n(jk,"A",{href:!0});var kat=s(RI);Cmo=r(kat,"BertTokenizerFast"),kat.forEach(t),wmo=r(jk," (ViLT model)"),jk.forEach(t),Amo=i(S),Bs=n(S,"LI",{});var Dk=s(Bs);Jse=n(Dk,"STRONG",{});var Sat=s(Jse);Lmo=r(Sat,"visual_bert"),Sat.forEach(t),ymo=r(Dk," \u2014 "),PI=n(Dk,"A",{href:!0});var Rat=s(PI);xmo=r(Rat,"BertTokenizer"),Rat.forEach(t),$mo=r(Dk," or "),BI=n(Dk,"A",{href:!0});var Pat=s(BI);kmo=r(Pat,"BertTokenizerFast"),Pat.forEach(t),Smo=r(Dk," (VisualBERT model)"),Dk.forEach(t),Rmo=i(S),bh=n(S,"LI",{});var RLe=s(bh);Yse=n(RLe,"STRONG",{});var Bat=s(Yse);Pmo=r(Bat,"wav2vec2"),Bat.forEach(t),Bmo=r(RLe," \u2014 "),II=n(RLe,"A",{href:!0});var Iat=s(II);Imo=r(Iat,"Wav2Vec2CTCTokenizer"),Iat.forEach(t),Nmo=r(RLe," (Wav2Vec2 model)"),RLe.forEach(t),qmo=i(S),vh=n(S,"LI",{});var PLe=s(vh);Kse=n(PLe,"STRONG",{});var Nat=s(Kse);jmo=r(Nat,"wav2vec2-conformer"),Nat.forEach(t),Dmo=r(PLe," \u2014 "),NI=n(PLe,"A",{href:!0});var qat=s(NI);Gmo=r(qat,"Wav2Vec2CTCTokenizer"),qat.forEach(t),Omo=r(PLe," (Wav2Vec2-Conformer model)"),PLe.forEach(t),Vmo=i(S),Fh=n(S,"LI",{});var BLe=s(Fh);Zse=n(BLe,"STRONG",{});var jat=s(Zse);Xmo=r(jat,"wav2vec2_phoneme"),jat.forEach(t),zmo=r(BLe," \u2014 "),qI=n(BLe,"A",{href:!0});var Dat=s(qI);Wmo=r(Dat,"Wav2Vec2PhonemeCTCTokenizer"),Dat.forEach(t),Qmo=r(BLe," (Wav2Vec2Phoneme model)"),BLe.forEach(t),Hmo=i(S),Is=n(S,"LI",{});var Gk=s(Is);ele=n(Gk,"STRONG",{});var Gat=s(ele);Umo=r(Gat,"xglm"),Gat.forEach(t),Jmo=r(Gk," \u2014 "),jI=n(Gk,"A",{href:!0});var Oat=s(jI);Ymo=r(Oat,"XGLMTokenizer"),Oat.forEach(t),Kmo=r(Gk," or "),DI=n(Gk,"A",{href:!0});var Vat=s(DI);Zmo=r(Vat,"XGLMTokenizerFast"),Vat.forEach(t),ego=r(Gk," (XGLM model)"),Gk.forEach(t),ogo=i(S),Th=n(S,"LI",{});var ILe=s(Th);ole=n(ILe,"STRONG",{});var Xat=s(ole);rgo=r(Xat,"xlm"),Xat.forEach(t),tgo=r(ILe," \u2014 "),GI=n(ILe,"A",{href:!0});var zat=s(GI);ago=r(zat,"XLMTokenizer"),zat.forEach(t),ngo=r(ILe," (XLM model)"),ILe.forEach(t),sgo=i(S),Mh=n(S,"LI",{});var NLe=s(Mh);rle=n(NLe,"STRONG",{});var Wat=s(rle);lgo=r(Wat,"xlm-prophetnet"),Wat.forEach(t),igo=r(NLe," \u2014 "),OI=n(NLe,"A",{href:!0});var Qat=s(OI);dgo=r(Qat,"XLMProphetNetTokenizer"),Qat.forEach(t),cgo=r(NLe," (XLM-ProphetNet model)"),NLe.forEach(t),fgo=i(S),Ns=n(S,"LI",{});var Ok=s(Ns);tle=n(Ok,"STRONG",{});var Hat=s(tle);mgo=r(Hat,"xlm-roberta"),Hat.forEach(t),ggo=r(Ok," \u2014 "),VI=n(Ok,"A",{href:!0});var Uat=s(VI);hgo=r(Uat,"XLMRobertaTokenizer"),Uat.forEach(t),pgo=r(Ok," or "),XI=n(Ok,"A",{href:!0});var Jat=s(XI);_go=r(Jat,"XLMRobertaTokenizerFast"),Jat.forEach(t),ugo=r(Ok," (XLM-RoBERTa model)"),Ok.forEach(t),bgo=i(S),qs=n(S,"LI",{});var Vk=s(qs);ale=n(Vk,"STRONG",{});var Yat=s(ale);vgo=r(Yat,"xlm-roberta-xl"),Yat.forEach(t),Fgo=r(Vk," \u2014 "),zI=n(Vk,"A",{href:!0});var Kat=s(zI);Tgo=r(Kat,"RobertaTokenizer"),Kat.forEach(t),Mgo=r(Vk," or "),WI=n(Vk,"A",{href:!0});var Zat=s(WI);Ego=r(Zat,"RobertaTokenizerFast"),Zat.forEach(t),Cgo=r(Vk," (XLM-RoBERTa-XL model)"),Vk.forEach(t),wgo=i(S),js=n(S,"LI",{});var Xk=s(js);nle=n(Xk,"STRONG",{});var ent=s(nle);Ago=r(ent,"xlnet"),ent.forEach(t),Lgo=r(Xk," \u2014 "),QI=n(Xk,"A",{href:!0});var ont=s(QI);ygo=r(ont,"XLNetTokenizer"),ont.forEach(t),xgo=r(Xk," or "),HI=n(Xk,"A",{href:!0});var rnt=s(HI);$go=r(rnt,"XLNetTokenizerFast"),rnt.forEach(t),kgo=r(Xk," (XLNet model)"),Xk.forEach(t),Sgo=i(S),Ds=n(S,"LI",{});var zk=s(Ds);sle=n(zk,"STRONG",{});var tnt=s(sle);Rgo=r(tnt,"yoso"),tnt.forEach(t),Pgo=r(zk," \u2014 "),UI=n(zk,"A",{href:!0});var ant=s(UI);Bgo=r(ant,"AlbertTokenizer"),ant.forEach(t),Igo=r(zk," or "),JI=n(zk,"A",{href:!0});var nnt=s(JI);Ngo=r(nnt,"AlbertTokenizerFast"),nnt.forEach(t),qgo=r(zk," (YOSO model)"),zk.forEach(t),S.forEach(t),jgo=i(Ws),T(Eh.$$.fragment,Ws),Ws.forEach(t),Dgo=i(zs),Ch=n(zs,"DIV",{class:!0});var yVe=s(Ch);T(NL.$$.fragment,yVe),Ggo=i(yVe),lle=n(yVe,"P",{});var snt=s(lle);Ogo=r(snt,"Register a new tokenizer in this mapping."),snt.forEach(t),yVe.forEach(t),zs.forEach(t),LGe=i(f),Si=n(f,"H2",{class:!0});var xVe=s(Si);wh=n(xVe,"A",{id:!0,class:!0,href:!0});var lnt=s(wh);ile=n(lnt,"SPAN",{});var int=s(ile);T(qL.$$.fragment,int),int.forEach(t),lnt.forEach(t),Vgo=i(xVe),dle=n(xVe,"SPAN",{});var dnt=s(dle);Xgo=r(dnt,"AutoFeatureExtractor"),dnt.forEach(t),xVe.forEach(t),yGe=i(f),Lo=n(f,"DIV",{class:!0});var Qs=s(Lo);T(jL.$$.fragment,Qs),zgo=i(Qs),DL=n(Qs,"P",{});var $Ve=s(DL);Wgo=r($Ve,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),YI=n($Ve,"A",{href:!0});var cnt=s(YI);Qgo=r(cnt,"AutoFeatureExtractor.from_pretrained()"),cnt.forEach(t),Hgo=r($Ve," class method."),$Ve.forEach(t),Ugo=i(Qs),GL=n(Qs,"P",{});var kVe=s(GL);Jgo=r(kVe,"This class cannot be instantiated directly using "),cle=n(kVe,"CODE",{});var fnt=s(cle);Ygo=r(fnt,"__init__()"),fnt.forEach(t),Kgo=r(kVe," (throws an error)."),kVe.forEach(t),Zgo=i(Qs),He=n(Qs,"DIV",{class:!0});var ta=s(He);T(OL.$$.fragment,ta),eho=i(ta),fle=n(ta,"P",{});var mnt=s(fle);oho=r(mnt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),mnt.forEach(t),rho=i(ta),Sa=n(ta,"P",{});var AA=s(Sa);tho=r(AA,"The feature extractor class to instantiate is selected based on the "),mle=n(AA,"CODE",{});var gnt=s(mle);aho=r(gnt,"model_type"),gnt.forEach(t),nho=r(AA,` property of the config object
(either passed as an argument or loaded from `),gle=n(AA,"CODE",{});var hnt=s(gle);sho=r(hnt,"pretrained_model_name_or_path"),hnt.forEach(t),lho=r(AA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),hle=n(AA,"CODE",{});var pnt=s(hle);iho=r(pnt,"pretrained_model_name_or_path"),pnt.forEach(t),dho=r(AA,":"),AA.forEach(t),cho=i(ta),Y=n(ta,"UL",{});var K=s(Y);Ah=n(K,"LI",{});var qLe=s(Ah);ple=n(qLe,"STRONG",{});var _nt=s(ple);fho=r(_nt,"beit"),_nt.forEach(t),mho=r(qLe," \u2014 "),KI=n(qLe,"A",{href:!0});var unt=s(KI);gho=r(unt,"BeitFeatureExtractor"),unt.forEach(t),hho=r(qLe," (BEiT model)"),qLe.forEach(t),pho=i(K),Lh=n(K,"LI",{});var jLe=s(Lh);_le=n(jLe,"STRONG",{});var bnt=s(_le);_ho=r(bnt,"clip"),bnt.forEach(t),uho=r(jLe," \u2014 "),ZI=n(jLe,"A",{href:!0});var vnt=s(ZI);bho=r(vnt,"CLIPFeatureExtractor"),vnt.forEach(t),vho=r(jLe," (CLIP model)"),jLe.forEach(t),Fho=i(K),yh=n(K,"LI",{});var DLe=s(yh);ule=n(DLe,"STRONG",{});var Fnt=s(ule);Tho=r(Fnt,"convnext"),Fnt.forEach(t),Mho=r(DLe," \u2014 "),eN=n(DLe,"A",{href:!0});var Tnt=s(eN);Eho=r(Tnt,"ConvNextFeatureExtractor"),Tnt.forEach(t),Cho=r(DLe," (ConvNeXT model)"),DLe.forEach(t),who=i(K),xh=n(K,"LI",{});var GLe=s(xh);ble=n(GLe,"STRONG",{});var Mnt=s(ble);Aho=r(Mnt,"cvt"),Mnt.forEach(t),Lho=r(GLe," \u2014 "),oN=n(GLe,"A",{href:!0});var Ent=s(oN);yho=r(Ent,"ConvNextFeatureExtractor"),Ent.forEach(t),xho=r(GLe," (CvT model)"),GLe.forEach(t),$ho=i(K),$h=n(K,"LI",{});var OLe=s($h);vle=n(OLe,"STRONG",{});var Cnt=s(vle);kho=r(Cnt,"data2vec-audio"),Cnt.forEach(t),Sho=r(OLe," \u2014 "),rN=n(OLe,"A",{href:!0});var wnt=s(rN);Rho=r(wnt,"Wav2Vec2FeatureExtractor"),wnt.forEach(t),Pho=r(OLe," (Data2VecAudio model)"),OLe.forEach(t),Bho=i(K),kh=n(K,"LI",{});var VLe=s(kh);Fle=n(VLe,"STRONG",{});var Ant=s(Fle);Iho=r(Ant,"data2vec-vision"),Ant.forEach(t),Nho=r(VLe," \u2014 "),tN=n(VLe,"A",{href:!0});var Lnt=s(tN);qho=r(Lnt,"BeitFeatureExtractor"),Lnt.forEach(t),jho=r(VLe," (Data2VecVision model)"),VLe.forEach(t),Dho=i(K),Sh=n(K,"LI",{});var XLe=s(Sh);Tle=n(XLe,"STRONG",{});var ynt=s(Tle);Gho=r(ynt,"deit"),ynt.forEach(t),Oho=r(XLe," \u2014 "),aN=n(XLe,"A",{href:!0});var xnt=s(aN);Vho=r(xnt,"DeiTFeatureExtractor"),xnt.forEach(t),Xho=r(XLe," (DeiT model)"),XLe.forEach(t),zho=i(K),Rh=n(K,"LI",{});var zLe=s(Rh);Mle=n(zLe,"STRONG",{});var $nt=s(Mle);Who=r($nt,"detr"),$nt.forEach(t),Qho=r(zLe," \u2014 "),nN=n(zLe,"A",{href:!0});var knt=s(nN);Hho=r(knt,"DetrFeatureExtractor"),knt.forEach(t),Uho=r(zLe," (DETR model)"),zLe.forEach(t),Jho=i(K),Ph=n(K,"LI",{});var WLe=s(Ph);Ele=n(WLe,"STRONG",{});var Snt=s(Ele);Yho=r(Snt,"dpt"),Snt.forEach(t),Kho=r(WLe," \u2014 "),sN=n(WLe,"A",{href:!0});var Rnt=s(sN);Zho=r(Rnt,"DPTFeatureExtractor"),Rnt.forEach(t),epo=r(WLe," (DPT model)"),WLe.forEach(t),opo=i(K),Bh=n(K,"LI",{});var QLe=s(Bh);Cle=n(QLe,"STRONG",{});var Pnt=s(Cle);rpo=r(Pnt,"flava"),Pnt.forEach(t),tpo=r(QLe," \u2014 "),lN=n(QLe,"A",{href:!0});var Bnt=s(lN);apo=r(Bnt,"FlavaFeatureExtractor"),Bnt.forEach(t),npo=r(QLe," (FLAVA model)"),QLe.forEach(t),spo=i(K),Ih=n(K,"LI",{});var HLe=s(Ih);wle=n(HLe,"STRONG",{});var Int=s(wle);lpo=r(Int,"glpn"),Int.forEach(t),ipo=r(HLe," \u2014 "),iN=n(HLe,"A",{href:!0});var Nnt=s(iN);dpo=r(Nnt,"GLPNFeatureExtractor"),Nnt.forEach(t),cpo=r(HLe," (GLPN model)"),HLe.forEach(t),fpo=i(K),Nh=n(K,"LI",{});var ULe=s(Nh);Ale=n(ULe,"STRONG",{});var qnt=s(Ale);mpo=r(qnt,"hubert"),qnt.forEach(t),gpo=r(ULe," \u2014 "),dN=n(ULe,"A",{href:!0});var jnt=s(dN);hpo=r(jnt,"Wav2Vec2FeatureExtractor"),jnt.forEach(t),ppo=r(ULe," (Hubert model)"),ULe.forEach(t),_po=i(K),qh=n(K,"LI",{});var JLe=s(qh);Lle=n(JLe,"STRONG",{});var Dnt=s(Lle);upo=r(Dnt,"imagegpt"),Dnt.forEach(t),bpo=r(JLe," \u2014 "),cN=n(JLe,"A",{href:!0});var Gnt=s(cN);vpo=r(Gnt,"ImageGPTFeatureExtractor"),Gnt.forEach(t),Fpo=r(JLe," (ImageGPT model)"),JLe.forEach(t),Tpo=i(K),jh=n(K,"LI",{});var YLe=s(jh);yle=n(YLe,"STRONG",{});var Ont=s(yle);Mpo=r(Ont,"layoutlmv2"),Ont.forEach(t),Epo=r(YLe," \u2014 "),fN=n(YLe,"A",{href:!0});var Vnt=s(fN);Cpo=r(Vnt,"LayoutLMv2FeatureExtractor"),Vnt.forEach(t),wpo=r(YLe," (LayoutLMv2 model)"),YLe.forEach(t),Apo=i(K),Dh=n(K,"LI",{});var KLe=s(Dh);xle=n(KLe,"STRONG",{});var Xnt=s(xle);Lpo=r(Xnt,"layoutlmv3"),Xnt.forEach(t),ypo=r(KLe," \u2014 "),mN=n(KLe,"A",{href:!0});var znt=s(mN);xpo=r(znt,"LayoutLMv3FeatureExtractor"),znt.forEach(t),$po=r(KLe," (LayoutLMv3 model)"),KLe.forEach(t),kpo=i(K),Gh=n(K,"LI",{});var ZLe=s(Gh);$le=n(ZLe,"STRONG",{});var Wnt=s($le);Spo=r(Wnt,"levit"),Wnt.forEach(t),Rpo=r(ZLe," \u2014 "),gN=n(ZLe,"A",{href:!0});var Qnt=s(gN);Ppo=r(Qnt,"LevitFeatureExtractor"),Qnt.forEach(t),Bpo=r(ZLe," (LeViT model)"),ZLe.forEach(t),Ipo=i(K),Oh=n(K,"LI",{});var eye=s(Oh);kle=n(eye,"STRONG",{});var Hnt=s(kle);Npo=r(Hnt,"maskformer"),Hnt.forEach(t),qpo=r(eye," \u2014 "),hN=n(eye,"A",{href:!0});var Unt=s(hN);jpo=r(Unt,"MaskFormerFeatureExtractor"),Unt.forEach(t),Dpo=r(eye," (MaskFormer model)"),eye.forEach(t),Gpo=i(K),Vh=n(K,"LI",{});var oye=s(Vh);Sle=n(oye,"STRONG",{});var Jnt=s(Sle);Opo=r(Jnt,"mctct"),Jnt.forEach(t),Vpo=r(oye," \u2014 "),pN=n(oye,"A",{href:!0});var Ynt=s(pN);Xpo=r(Ynt,"MCTCTFeatureExtractor"),Ynt.forEach(t),zpo=r(oye," (M-CTC-T model)"),oye.forEach(t),Wpo=i(K),Xh=n(K,"LI",{});var rye=s(Xh);Rle=n(rye,"STRONG",{});var Knt=s(Rle);Qpo=r(Knt,"mobilevit"),Knt.forEach(t),Hpo=r(rye," \u2014 "),_N=n(rye,"A",{href:!0});var Znt=s(_N);Upo=r(Znt,"MobileViTFeatureExtractor"),Znt.forEach(t),Jpo=r(rye," (MobileViT model)"),rye.forEach(t),Ypo=i(K),zh=n(K,"LI",{});var tye=s(zh);Ple=n(tye,"STRONG",{});var est=s(Ple);Kpo=r(est,"perceiver"),est.forEach(t),Zpo=r(tye," \u2014 "),uN=n(tye,"A",{href:!0});var ost=s(uN);e_o=r(ost,"PerceiverFeatureExtractor"),ost.forEach(t),o_o=r(tye," (Perceiver model)"),tye.forEach(t),r_o=i(K),Wh=n(K,"LI",{});var aye=s(Wh);Ble=n(aye,"STRONG",{});var rst=s(Ble);t_o=r(rst,"poolformer"),rst.forEach(t),a_o=r(aye," \u2014 "),bN=n(aye,"A",{href:!0});var tst=s(bN);n_o=r(tst,"PoolFormerFeatureExtractor"),tst.forEach(t),s_o=r(aye," (PoolFormer model)"),aye.forEach(t),l_o=i(K),Qh=n(K,"LI",{});var nye=s(Qh);Ile=n(nye,"STRONG",{});var ast=s(Ile);i_o=r(ast,"regnet"),ast.forEach(t),d_o=r(nye," \u2014 "),vN=n(nye,"A",{href:!0});var nst=s(vN);c_o=r(nst,"ConvNextFeatureExtractor"),nst.forEach(t),f_o=r(nye," (RegNet model)"),nye.forEach(t),m_o=i(K),Hh=n(K,"LI",{});var sye=s(Hh);Nle=n(sye,"STRONG",{});var sst=s(Nle);g_o=r(sst,"resnet"),sst.forEach(t),h_o=r(sye," \u2014 "),FN=n(sye,"A",{href:!0});var lst=s(FN);p_o=r(lst,"ConvNextFeatureExtractor"),lst.forEach(t),__o=r(sye," (ResNet model)"),sye.forEach(t),u_o=i(K),Uh=n(K,"LI",{});var lye=s(Uh);qle=n(lye,"STRONG",{});var ist=s(qle);b_o=r(ist,"segformer"),ist.forEach(t),v_o=r(lye," \u2014 "),TN=n(lye,"A",{href:!0});var dst=s(TN);F_o=r(dst,"SegformerFeatureExtractor"),dst.forEach(t),T_o=r(lye," (SegFormer model)"),lye.forEach(t),M_o=i(K),Jh=n(K,"LI",{});var iye=s(Jh);jle=n(iye,"STRONG",{});var cst=s(jle);E_o=r(cst,"speech_to_text"),cst.forEach(t),C_o=r(iye," \u2014 "),MN=n(iye,"A",{href:!0});var fst=s(MN);w_o=r(fst,"Speech2TextFeatureExtractor"),fst.forEach(t),A_o=r(iye," (Speech2Text model)"),iye.forEach(t),L_o=i(K),Yh=n(K,"LI",{});var dye=s(Yh);Dle=n(dye,"STRONG",{});var mst=s(Dle);y_o=r(mst,"swin"),mst.forEach(t),x_o=r(dye," \u2014 "),EN=n(dye,"A",{href:!0});var gst=s(EN);$_o=r(gst,"ViTFeatureExtractor"),gst.forEach(t),k_o=r(dye," (Swin Transformer model)"),dye.forEach(t),S_o=i(K),Kh=n(K,"LI",{});var cye=s(Kh);Gle=n(cye,"STRONG",{});var hst=s(Gle);R_o=r(hst,"van"),hst.forEach(t),P_o=r(cye," \u2014 "),CN=n(cye,"A",{href:!0});var pst=s(CN);B_o=r(pst,"ConvNextFeatureExtractor"),pst.forEach(t),I_o=r(cye," (VAN model)"),cye.forEach(t),N_o=i(K),Zh=n(K,"LI",{});var fye=s(Zh);Ole=n(fye,"STRONG",{});var _st=s(Ole);q_o=r(_st,"vilt"),_st.forEach(t),j_o=r(fye," \u2014 "),wN=n(fye,"A",{href:!0});var ust=s(wN);D_o=r(ust,"ViltFeatureExtractor"),ust.forEach(t),G_o=r(fye," (ViLT model)"),fye.forEach(t),O_o=i(K),ep=n(K,"LI",{});var mye=s(ep);Vle=n(mye,"STRONG",{});var bst=s(Vle);V_o=r(bst,"vit"),bst.forEach(t),X_o=r(mye," \u2014 "),AN=n(mye,"A",{href:!0});var vst=s(AN);z_o=r(vst,"ViTFeatureExtractor"),vst.forEach(t),W_o=r(mye," (ViT model)"),mye.forEach(t),Q_o=i(K),op=n(K,"LI",{});var gye=s(op);Xle=n(gye,"STRONG",{});var Fst=s(Xle);H_o=r(Fst,"vit_mae"),Fst.forEach(t),U_o=r(gye," \u2014 "),LN=n(gye,"A",{href:!0});var Tst=s(LN);J_o=r(Tst,"ViTFeatureExtractor"),Tst.forEach(t),Y_o=r(gye," (ViTMAE model)"),gye.forEach(t),K_o=i(K),rp=n(K,"LI",{});var hye=s(rp);zle=n(hye,"STRONG",{});var Mst=s(zle);Z_o=r(Mst,"wav2vec2"),Mst.forEach(t),euo=r(hye," \u2014 "),yN=n(hye,"A",{href:!0});var Est=s(yN);ouo=r(Est,"Wav2Vec2FeatureExtractor"),Est.forEach(t),ruo=r(hye," (Wav2Vec2 model)"),hye.forEach(t),tuo=i(K),tp=n(K,"LI",{});var pye=s(tp);Wle=n(pye,"STRONG",{});var Cst=s(Wle);auo=r(Cst,"wav2vec2-conformer"),Cst.forEach(t),nuo=r(pye," \u2014 "),xN=n(pye,"A",{href:!0});var wst=s(xN);suo=r(wst,"Wav2Vec2FeatureExtractor"),wst.forEach(t),luo=r(pye," (Wav2Vec2-Conformer model)"),pye.forEach(t),iuo=i(K),ap=n(K,"LI",{});var _ye=s(ap);Qle=n(_ye,"STRONG",{});var Ast=s(Qle);duo=r(Ast,"yolos"),Ast.forEach(t),cuo=r(_ye," \u2014 "),$N=n(_ye,"A",{href:!0});var Lst=s($N);fuo=r(Lst,"YolosFeatureExtractor"),Lst.forEach(t),muo=r(_ye," (YOLOS model)"),_ye.forEach(t),K.forEach(t),guo=i(ta),T(np.$$.fragment,ta),huo=i(ta),T(sp.$$.fragment,ta),ta.forEach(t),puo=i(Qs),lp=n(Qs,"DIV",{class:!0});var SVe=s(lp);T(VL.$$.fragment,SVe),_uo=i(SVe),Hle=n(SVe,"P",{});var yst=s(Hle);uuo=r(yst,"Register a new feature extractor for this class."),yst.forEach(t),SVe.forEach(t),Qs.forEach(t),xGe=i(f),Ri=n(f,"H2",{class:!0});var RVe=s(Ri);ip=n(RVe,"A",{id:!0,class:!0,href:!0});var xst=s(ip);Ule=n(xst,"SPAN",{});var $st=s(Ule);T(XL.$$.fragment,$st),$st.forEach(t),xst.forEach(t),buo=i(RVe),Jle=n(RVe,"SPAN",{});var kst=s(Jle);vuo=r(kst,"AutoProcessor"),kst.forEach(t),RVe.forEach(t),$Ge=i(f),yo=n(f,"DIV",{class:!0});var Hs=s(yo);T(zL.$$.fragment,Hs),Fuo=i(Hs),WL=n(Hs,"P",{});var PVe=s(WL);Tuo=r(PVe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),kN=n(PVe,"A",{href:!0});var Sst=s(kN);Muo=r(Sst,"AutoProcessor.from_pretrained()"),Sst.forEach(t),Euo=r(PVe," class method."),PVe.forEach(t),Cuo=i(Hs),QL=n(Hs,"P",{});var BVe=s(QL);wuo=r(BVe,"This class cannot be instantiated directly using "),Yle=n(BVe,"CODE",{});var Rst=s(Yle);Auo=r(Rst,"__init__()"),Rst.forEach(t),Luo=r(BVe," (throws an error)."),BVe.forEach(t),yuo=i(Hs),Ue=n(Hs,"DIV",{class:!0});var aa=s(Ue);T(HL.$$.fragment,aa),xuo=i(aa),Kle=n(aa,"P",{});var Pst=s(Kle);$uo=r(Pst,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Pst.forEach(t),kuo=i(aa),Pi=n(aa,"P",{});var soe=s(Pi);Suo=r(soe,"The processor class to instantiate is selected based on the "),Zle=n(soe,"CODE",{});var Bst=s(Zle);Ruo=r(Bst,"model_type"),Bst.forEach(t),Puo=r(soe,` property of the config object (either
passed as an argument or loaded from `),eie=n(soe,"CODE",{});var Ist=s(eie);Buo=r(Ist,"pretrained_model_name_or_path"),Ist.forEach(t),Iuo=r(soe," if possible):"),soe.forEach(t),Nuo=i(aa),he=n(aa,"UL",{});var be=s(he);dp=n(be,"LI",{});var uye=s(dp);oie=n(uye,"STRONG",{});var Nst=s(oie);quo=r(Nst,"clip"),Nst.forEach(t),juo=r(uye," \u2014 "),SN=n(uye,"A",{href:!0});var qst=s(SN);Duo=r(qst,"CLIPProcessor"),qst.forEach(t),Guo=r(uye," (CLIP model)"),uye.forEach(t),Ouo=i(be),cp=n(be,"LI",{});var bye=s(cp);rie=n(bye,"STRONG",{});var jst=s(rie);Vuo=r(jst,"flava"),jst.forEach(t),Xuo=r(bye," \u2014 "),tie=n(bye,"CODE",{});var Dst=s(tie);zuo=r(Dst,"FLAVAProcessor"),Dst.forEach(t),Wuo=r(bye," (FLAVA model)"),bye.forEach(t),Quo=i(be),fp=n(be,"LI",{});var vye=s(fp);aie=n(vye,"STRONG",{});var Gst=s(aie);Huo=r(Gst,"layoutlmv2"),Gst.forEach(t),Uuo=r(vye," \u2014 "),RN=n(vye,"A",{href:!0});var Ost=s(RN);Juo=r(Ost,"LayoutLMv2Processor"),Ost.forEach(t),Yuo=r(vye," (LayoutLMv2 model)"),vye.forEach(t),Kuo=i(be),mp=n(be,"LI",{});var Fye=s(mp);nie=n(Fye,"STRONG",{});var Vst=s(nie);Zuo=r(Vst,"layoutlmv3"),Vst.forEach(t),e1o=r(Fye," \u2014 "),PN=n(Fye,"A",{href:!0});var Xst=s(PN);o1o=r(Xst,"LayoutLMv3Processor"),Xst.forEach(t),r1o=r(Fye," (LayoutLMv3 model)"),Fye.forEach(t),t1o=i(be),gp=n(be,"LI",{});var Tye=s(gp);sie=n(Tye,"STRONG",{});var zst=s(sie);a1o=r(zst,"layoutxlm"),zst.forEach(t),n1o=r(Tye," \u2014 "),BN=n(Tye,"A",{href:!0});var Wst=s(BN);s1o=r(Wst,"LayoutXLMProcessor"),Wst.forEach(t),l1o=r(Tye," (LayoutXLM model)"),Tye.forEach(t),i1o=i(be),hp=n(be,"LI",{});var Mye=s(hp);lie=n(Mye,"STRONG",{});var Qst=s(lie);d1o=r(Qst,"sew"),Qst.forEach(t),c1o=r(Mye," \u2014 "),IN=n(Mye,"A",{href:!0});var Hst=s(IN);f1o=r(Hst,"Wav2Vec2Processor"),Hst.forEach(t),m1o=r(Mye," (SEW model)"),Mye.forEach(t),g1o=i(be),pp=n(be,"LI",{});var Eye=s(pp);iie=n(Eye,"STRONG",{});var Ust=s(iie);h1o=r(Ust,"sew-d"),Ust.forEach(t),p1o=r(Eye," \u2014 "),NN=n(Eye,"A",{href:!0});var Jst=s(NN);_1o=r(Jst,"Wav2Vec2Processor"),Jst.forEach(t),u1o=r(Eye," (SEW-D model)"),Eye.forEach(t),b1o=i(be),_p=n(be,"LI",{});var Cye=s(_p);die=n(Cye,"STRONG",{});var Yst=s(die);v1o=r(Yst,"speech_to_text"),Yst.forEach(t),F1o=r(Cye," \u2014 "),qN=n(Cye,"A",{href:!0});var Kst=s(qN);T1o=r(Kst,"Speech2TextProcessor"),Kst.forEach(t),M1o=r(Cye," (Speech2Text model)"),Cye.forEach(t),E1o=i(be),up=n(be,"LI",{});var wye=s(up);cie=n(wye,"STRONG",{});var Zst=s(cie);C1o=r(Zst,"speech_to_text_2"),Zst.forEach(t),w1o=r(wye," \u2014 "),jN=n(wye,"A",{href:!0});var elt=s(jN);A1o=r(elt,"Speech2Text2Processor"),elt.forEach(t),L1o=r(wye," (Speech2Text2 model)"),wye.forEach(t),y1o=i(be),bp=n(be,"LI",{});var Aye=s(bp);fie=n(Aye,"STRONG",{});var olt=s(fie);x1o=r(olt,"trocr"),olt.forEach(t),$1o=r(Aye," \u2014 "),DN=n(Aye,"A",{href:!0});var rlt=s(DN);k1o=r(rlt,"TrOCRProcessor"),rlt.forEach(t),S1o=r(Aye," (TrOCR model)"),Aye.forEach(t),R1o=i(be),vp=n(be,"LI",{});var Lye=s(vp);mie=n(Lye,"STRONG",{});var tlt=s(mie);P1o=r(tlt,"unispeech"),tlt.forEach(t),B1o=r(Lye," \u2014 "),GN=n(Lye,"A",{href:!0});var alt=s(GN);I1o=r(alt,"Wav2Vec2Processor"),alt.forEach(t),N1o=r(Lye," (UniSpeech model)"),Lye.forEach(t),q1o=i(be),Fp=n(be,"LI",{});var yye=s(Fp);gie=n(yye,"STRONG",{});var nlt=s(gie);j1o=r(nlt,"unispeech-sat"),nlt.forEach(t),D1o=r(yye," \u2014 "),ON=n(yye,"A",{href:!0});var slt=s(ON);G1o=r(slt,"Wav2Vec2Processor"),slt.forEach(t),O1o=r(yye," (UniSpeechSat model)"),yye.forEach(t),V1o=i(be),Tp=n(be,"LI",{});var xye=s(Tp);hie=n(xye,"STRONG",{});var llt=s(hie);X1o=r(llt,"vilt"),llt.forEach(t),z1o=r(xye," \u2014 "),VN=n(xye,"A",{href:!0});var ilt=s(VN);W1o=r(ilt,"ViltProcessor"),ilt.forEach(t),Q1o=r(xye," (ViLT model)"),xye.forEach(t),H1o=i(be),Mp=n(be,"LI",{});var $ye=s(Mp);pie=n($ye,"STRONG",{});var dlt=s(pie);U1o=r(dlt,"vision-text-dual-encoder"),dlt.forEach(t),J1o=r($ye," \u2014 "),XN=n($ye,"A",{href:!0});var clt=s(XN);Y1o=r(clt,"VisionTextDualEncoderProcessor"),clt.forEach(t),K1o=r($ye," (VisionTextDualEncoder model)"),$ye.forEach(t),Z1o=i(be),Ep=n(be,"LI",{});var kye=s(Ep);_ie=n(kye,"STRONG",{});var flt=s(_ie);ebo=r(flt,"wav2vec2"),flt.forEach(t),obo=r(kye," \u2014 "),zN=n(kye,"A",{href:!0});var mlt=s(zN);rbo=r(mlt,"Wav2Vec2Processor"),mlt.forEach(t),tbo=r(kye," (Wav2Vec2 model)"),kye.forEach(t),abo=i(be),Cp=n(be,"LI",{});var Sye=s(Cp);uie=n(Sye,"STRONG",{});var glt=s(uie);nbo=r(glt,"wav2vec2-conformer"),glt.forEach(t),sbo=r(Sye," \u2014 "),WN=n(Sye,"A",{href:!0});var hlt=s(WN);lbo=r(hlt,"Wav2Vec2Processor"),hlt.forEach(t),ibo=r(Sye," (Wav2Vec2-Conformer model)"),Sye.forEach(t),dbo=i(be),wp=n(be,"LI",{});var Rye=s(wp);bie=n(Rye,"STRONG",{});var plt=s(bie);cbo=r(plt,"wavlm"),plt.forEach(t),fbo=r(Rye," \u2014 "),QN=n(Rye,"A",{href:!0});var _lt=s(QN);mbo=r(_lt,"Wav2Vec2Processor"),_lt.forEach(t),gbo=r(Rye," (WavLM model)"),Rye.forEach(t),be.forEach(t),hbo=i(aa),T(Ap.$$.fragment,aa),pbo=i(aa),T(Lp.$$.fragment,aa),aa.forEach(t),_bo=i(Hs),yp=n(Hs,"DIV",{class:!0});var IVe=s(yp);T(UL.$$.fragment,IVe),ubo=i(IVe),vie=n(IVe,"P",{});var ult=s(vie);bbo=r(ult,"Register a new processor for this class."),ult.forEach(t),IVe.forEach(t),Hs.forEach(t),kGe=i(f),Bi=n(f,"H2",{class:!0});var NVe=s(Bi);xp=n(NVe,"A",{id:!0,class:!0,href:!0});var blt=s(xp);Fie=n(blt,"SPAN",{});var vlt=s(Fie);T(JL.$$.fragment,vlt),vlt.forEach(t),blt.forEach(t),vbo=i(NVe),Tie=n(NVe,"SPAN",{});var Flt=s(Tie);Fbo=r(Flt,"AutoModel"),Flt.forEach(t),NVe.forEach(t),SGe=i(f),xo=n(f,"DIV",{class:!0});var Us=s(xo);T(YL.$$.fragment,Us),Tbo=i(Us),Ii=n(Us,"P",{});var loe=s(Ii);Mbo=r(loe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HN=n(loe,"A",{href:!0});var Tlt=s(HN);Ebo=r(Tlt,"from_pretrained()"),Tlt.forEach(t),Cbo=r(loe," class method or the "),UN=n(loe,"A",{href:!0});var Mlt=s(UN);wbo=r(Mlt,"from_config()"),Mlt.forEach(t),Abo=r(loe,` class
method.`),loe.forEach(t),Lbo=i(Us),KL=n(Us,"P",{});var qVe=s(KL);ybo=r(qVe,"This class cannot be instantiated directly using "),Mie=n(qVe,"CODE",{});var Elt=s(Mie);xbo=r(Elt,"__init__()"),Elt.forEach(t),$bo=r(qVe," (throws an error)."),qVe.forEach(t),kbo=i(Us),st=n(Us,"DIV",{class:!0});var LA=s(st);T(ZL.$$.fragment,LA),Sbo=i(LA),Eie=n(LA,"P",{});var Clt=s(Eie);Rbo=r(Clt,"Instantiates one of the base model classes of the library from a configuration."),Clt.forEach(t),Pbo=i(LA),Ni=n(LA,"P",{});var ioe=s(Ni);Bbo=r(ioe,`Note:
Loading a model from its configuration file does `),Cie=n(ioe,"STRONG",{});var wlt=s(Cie);Ibo=r(wlt,"not"),wlt.forEach(t),Nbo=r(ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),JN=n(ioe,"A",{href:!0});var Alt=s(JN);qbo=r(Alt,"from_pretrained()"),Alt.forEach(t),jbo=r(ioe," to load the model weights."),ioe.forEach(t),Dbo=i(LA),T($p.$$.fragment,LA),LA.forEach(t),Gbo=i(Us),Je=n(Us,"DIV",{class:!0});var na=s(Je);T(ey.$$.fragment,na),Obo=i(na),wie=n(na,"P",{});var Llt=s(wie);Vbo=r(Llt,"Instantiate one of the base model classes of the library from a pretrained model."),Llt.forEach(t),Xbo=i(na),Ra=n(na,"P",{});var yA=s(Ra);zbo=r(yA,"The model class to instantiate is selected based on the "),Aie=n(yA,"CODE",{});var ylt=s(Aie);Wbo=r(ylt,"model_type"),ylt.forEach(t),Qbo=r(yA,` property of the config object (either
passed as an argument or loaded from `),Lie=n(yA,"CODE",{});var xlt=s(Lie);Hbo=r(xlt,"pretrained_model_name_or_path"),xlt.forEach(t),Ubo=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=n(yA,"CODE",{});var $lt=s(yie);Jbo=r($lt,"pretrained_model_name_or_path"),$lt.forEach(t),Ybo=r(yA,":"),yA.forEach(t),Kbo=i(na),y=n(na,"UL",{});var $=s(y);kp=n($,"LI",{});var Pye=s(kp);xie=n(Pye,"STRONG",{});var klt=s(xie);Zbo=r(klt,"albert"),klt.forEach(t),e2o=r(Pye," \u2014 "),YN=n(Pye,"A",{href:!0});var Slt=s(YN);o2o=r(Slt,"AlbertModel"),Slt.forEach(t),r2o=r(Pye," (ALBERT model)"),Pye.forEach(t),t2o=i($),Sp=n($,"LI",{});var Bye=s(Sp);$ie=n(Bye,"STRONG",{});var Rlt=s($ie);a2o=r(Rlt,"bart"),Rlt.forEach(t),n2o=r(Bye," \u2014 "),KN=n(Bye,"A",{href:!0});var Plt=s(KN);s2o=r(Plt,"BartModel"),Plt.forEach(t),l2o=r(Bye," (BART model)"),Bye.forEach(t),i2o=i($),Rp=n($,"LI",{});var Iye=s(Rp);kie=n(Iye,"STRONG",{});var Blt=s(kie);d2o=r(Blt,"beit"),Blt.forEach(t),c2o=r(Iye," \u2014 "),ZN=n(Iye,"A",{href:!0});var Ilt=s(ZN);f2o=r(Ilt,"BeitModel"),Ilt.forEach(t),m2o=r(Iye," (BEiT model)"),Iye.forEach(t),g2o=i($),Pp=n($,"LI",{});var Nye=s(Pp);Sie=n(Nye,"STRONG",{});var Nlt=s(Sie);h2o=r(Nlt,"bert"),Nlt.forEach(t),p2o=r(Nye," \u2014 "),eq=n(Nye,"A",{href:!0});var qlt=s(eq);_2o=r(qlt,"BertModel"),qlt.forEach(t),u2o=r(Nye," (BERT model)"),Nye.forEach(t),b2o=i($),Bp=n($,"LI",{});var qye=s(Bp);Rie=n(qye,"STRONG",{});var jlt=s(Rie);v2o=r(jlt,"bert-generation"),jlt.forEach(t),F2o=r(qye," \u2014 "),oq=n(qye,"A",{href:!0});var Dlt=s(oq);T2o=r(Dlt,"BertGenerationEncoder"),Dlt.forEach(t),M2o=r(qye," (Bert Generation model)"),qye.forEach(t),E2o=i($),Ip=n($,"LI",{});var jye=s(Ip);Pie=n(jye,"STRONG",{});var Glt=s(Pie);C2o=r(Glt,"big_bird"),Glt.forEach(t),w2o=r(jye," \u2014 "),rq=n(jye,"A",{href:!0});var Olt=s(rq);A2o=r(Olt,"BigBirdModel"),Olt.forEach(t),L2o=r(jye," (BigBird model)"),jye.forEach(t),y2o=i($),Np=n($,"LI",{});var Dye=s(Np);Bie=n(Dye,"STRONG",{});var Vlt=s(Bie);x2o=r(Vlt,"bigbird_pegasus"),Vlt.forEach(t),$2o=r(Dye," \u2014 "),tq=n(Dye,"A",{href:!0});var Xlt=s(tq);k2o=r(Xlt,"BigBirdPegasusModel"),Xlt.forEach(t),S2o=r(Dye," (BigBird-Pegasus model)"),Dye.forEach(t),R2o=i($),qp=n($,"LI",{});var Gye=s(qp);Iie=n(Gye,"STRONG",{});var zlt=s(Iie);P2o=r(zlt,"blenderbot"),zlt.forEach(t),B2o=r(Gye," \u2014 "),aq=n(Gye,"A",{href:!0});var Wlt=s(aq);I2o=r(Wlt,"BlenderbotModel"),Wlt.forEach(t),N2o=r(Gye," (Blenderbot model)"),Gye.forEach(t),q2o=i($),jp=n($,"LI",{});var Oye=s(jp);Nie=n(Oye,"STRONG",{});var Qlt=s(Nie);j2o=r(Qlt,"blenderbot-small"),Qlt.forEach(t),D2o=r(Oye," \u2014 "),nq=n(Oye,"A",{href:!0});var Hlt=s(nq);G2o=r(Hlt,"BlenderbotSmallModel"),Hlt.forEach(t),O2o=r(Oye," (BlenderbotSmall model)"),Oye.forEach(t),V2o=i($),Dp=n($,"LI",{});var Vye=s(Dp);qie=n(Vye,"STRONG",{});var Ult=s(qie);X2o=r(Ult,"bloom"),Ult.forEach(t),z2o=r(Vye," \u2014 "),sq=n(Vye,"A",{href:!0});var Jlt=s(sq);W2o=r(Jlt,"BloomModel"),Jlt.forEach(t),Q2o=r(Vye," (BLOOM model)"),Vye.forEach(t),H2o=i($),Gp=n($,"LI",{});var Xye=s(Gp);jie=n(Xye,"STRONG",{});var Ylt=s(jie);U2o=r(Ylt,"camembert"),Ylt.forEach(t),J2o=r(Xye," \u2014 "),lq=n(Xye,"A",{href:!0});var Klt=s(lq);Y2o=r(Klt,"CamembertModel"),Klt.forEach(t),K2o=r(Xye," (CamemBERT model)"),Xye.forEach(t),Z2o=i($),Op=n($,"LI",{});var zye=s(Op);Die=n(zye,"STRONG",{});var Zlt=s(Die);e4o=r(Zlt,"canine"),Zlt.forEach(t),o4o=r(zye," \u2014 "),iq=n(zye,"A",{href:!0});var eit=s(iq);r4o=r(eit,"CanineModel"),eit.forEach(t),t4o=r(zye," (CANINE model)"),zye.forEach(t),a4o=i($),Vp=n($,"LI",{});var Wye=s(Vp);Gie=n(Wye,"STRONG",{});var oit=s(Gie);n4o=r(oit,"clip"),oit.forEach(t),s4o=r(Wye," \u2014 "),dq=n(Wye,"A",{href:!0});var rit=s(dq);l4o=r(rit,"CLIPModel"),rit.forEach(t),i4o=r(Wye," (CLIP model)"),Wye.forEach(t),d4o=i($),Xp=n($,"LI",{});var Qye=s(Xp);Oie=n(Qye,"STRONG",{});var tit=s(Oie);c4o=r(tit,"convbert"),tit.forEach(t),f4o=r(Qye," \u2014 "),cq=n(Qye,"A",{href:!0});var ait=s(cq);m4o=r(ait,"ConvBertModel"),ait.forEach(t),g4o=r(Qye," (ConvBERT model)"),Qye.forEach(t),h4o=i($),zp=n($,"LI",{});var Hye=s(zp);Vie=n(Hye,"STRONG",{});var nit=s(Vie);p4o=r(nit,"convnext"),nit.forEach(t),_4o=r(Hye," \u2014 "),fq=n(Hye,"A",{href:!0});var sit=s(fq);u4o=r(sit,"ConvNextModel"),sit.forEach(t),b4o=r(Hye," (ConvNeXT model)"),Hye.forEach(t),v4o=i($),Wp=n($,"LI",{});var Uye=s(Wp);Xie=n(Uye,"STRONG",{});var lit=s(Xie);F4o=r(lit,"ctrl"),lit.forEach(t),T4o=r(Uye," \u2014 "),mq=n(Uye,"A",{href:!0});var iit=s(mq);M4o=r(iit,"CTRLModel"),iit.forEach(t),E4o=r(Uye," (CTRL model)"),Uye.forEach(t),C4o=i($),Qp=n($,"LI",{});var Jye=s(Qp);zie=n(Jye,"STRONG",{});var dit=s(zie);w4o=r(dit,"cvt"),dit.forEach(t),A4o=r(Jye," \u2014 "),gq=n(Jye,"A",{href:!0});var cit=s(gq);L4o=r(cit,"CvtModel"),cit.forEach(t),y4o=r(Jye," (CvT model)"),Jye.forEach(t),x4o=i($),Hp=n($,"LI",{});var Yye=s(Hp);Wie=n(Yye,"STRONG",{});var fit=s(Wie);$4o=r(fit,"data2vec-audio"),fit.forEach(t),k4o=r(Yye," \u2014 "),hq=n(Yye,"A",{href:!0});var mit=s(hq);S4o=r(mit,"Data2VecAudioModel"),mit.forEach(t),R4o=r(Yye," (Data2VecAudio model)"),Yye.forEach(t),P4o=i($),Up=n($,"LI",{});var Kye=s(Up);Qie=n(Kye,"STRONG",{});var git=s(Qie);B4o=r(git,"data2vec-text"),git.forEach(t),I4o=r(Kye," \u2014 "),pq=n(Kye,"A",{href:!0});var hit=s(pq);N4o=r(hit,"Data2VecTextModel"),hit.forEach(t),q4o=r(Kye," (Data2VecText model)"),Kye.forEach(t),j4o=i($),Jp=n($,"LI",{});var Zye=s(Jp);Hie=n(Zye,"STRONG",{});var pit=s(Hie);D4o=r(pit,"data2vec-vision"),pit.forEach(t),G4o=r(Zye," \u2014 "),_q=n(Zye,"A",{href:!0});var _it=s(_q);O4o=r(_it,"Data2VecVisionModel"),_it.forEach(t),V4o=r(Zye," (Data2VecVision model)"),Zye.forEach(t),X4o=i($),Yp=n($,"LI",{});var e8e=s(Yp);Uie=n(e8e,"STRONG",{});var uit=s(Uie);z4o=r(uit,"deberta"),uit.forEach(t),W4o=r(e8e," \u2014 "),uq=n(e8e,"A",{href:!0});var bit=s(uq);Q4o=r(bit,"DebertaModel"),bit.forEach(t),H4o=r(e8e," (DeBERTa model)"),e8e.forEach(t),U4o=i($),Kp=n($,"LI",{});var o8e=s(Kp);Jie=n(o8e,"STRONG",{});var vit=s(Jie);J4o=r(vit,"deberta-v2"),vit.forEach(t),Y4o=r(o8e," \u2014 "),bq=n(o8e,"A",{href:!0});var Fit=s(bq);K4o=r(Fit,"DebertaV2Model"),Fit.forEach(t),Z4o=r(o8e," (DeBERTa-v2 model)"),o8e.forEach(t),e5o=i($),Zp=n($,"LI",{});var r8e=s(Zp);Yie=n(r8e,"STRONG",{});var Tit=s(Yie);o5o=r(Tit,"decision_transformer"),Tit.forEach(t),r5o=r(r8e," \u2014 "),vq=n(r8e,"A",{href:!0});var Mit=s(vq);t5o=r(Mit,"DecisionTransformerModel"),Mit.forEach(t),a5o=r(r8e," (Decision Transformer model)"),r8e.forEach(t),n5o=i($),e_=n($,"LI",{});var t8e=s(e_);Kie=n(t8e,"STRONG",{});var Eit=s(Kie);s5o=r(Eit,"deit"),Eit.forEach(t),l5o=r(t8e," \u2014 "),Fq=n(t8e,"A",{href:!0});var Cit=s(Fq);i5o=r(Cit,"DeiTModel"),Cit.forEach(t),d5o=r(t8e," (DeiT model)"),t8e.forEach(t),c5o=i($),o_=n($,"LI",{});var a8e=s(o_);Zie=n(a8e,"STRONG",{});var wit=s(Zie);f5o=r(wit,"detr"),wit.forEach(t),m5o=r(a8e," \u2014 "),Tq=n(a8e,"A",{href:!0});var Ait=s(Tq);g5o=r(Ait,"DetrModel"),Ait.forEach(t),h5o=r(a8e," (DETR model)"),a8e.forEach(t),p5o=i($),r_=n($,"LI",{});var n8e=s(r_);ede=n(n8e,"STRONG",{});var Lit=s(ede);_5o=r(Lit,"distilbert"),Lit.forEach(t),u5o=r(n8e," \u2014 "),Mq=n(n8e,"A",{href:!0});var yit=s(Mq);b5o=r(yit,"DistilBertModel"),yit.forEach(t),v5o=r(n8e," (DistilBERT model)"),n8e.forEach(t),F5o=i($),t_=n($,"LI",{});var s8e=s(t_);ode=n(s8e,"STRONG",{});var xit=s(ode);T5o=r(xit,"dpr"),xit.forEach(t),M5o=r(s8e," \u2014 "),Eq=n(s8e,"A",{href:!0});var $it=s(Eq);E5o=r($it,"DPRQuestionEncoder"),$it.forEach(t),C5o=r(s8e," (DPR model)"),s8e.forEach(t),w5o=i($),a_=n($,"LI",{});var l8e=s(a_);rde=n(l8e,"STRONG",{});var kit=s(rde);A5o=r(kit,"dpt"),kit.forEach(t),L5o=r(l8e," \u2014 "),Cq=n(l8e,"A",{href:!0});var Sit=s(Cq);y5o=r(Sit,"DPTModel"),Sit.forEach(t),x5o=r(l8e," (DPT model)"),l8e.forEach(t),$5o=i($),n_=n($,"LI",{});var i8e=s(n_);tde=n(i8e,"STRONG",{});var Rit=s(tde);k5o=r(Rit,"electra"),Rit.forEach(t),S5o=r(i8e," \u2014 "),wq=n(i8e,"A",{href:!0});var Pit=s(wq);R5o=r(Pit,"ElectraModel"),Pit.forEach(t),P5o=r(i8e," (ELECTRA model)"),i8e.forEach(t),B5o=i($),s_=n($,"LI",{});var d8e=s(s_);ade=n(d8e,"STRONG",{});var Bit=s(ade);I5o=r(Bit,"flaubert"),Bit.forEach(t),N5o=r(d8e," \u2014 "),Aq=n(d8e,"A",{href:!0});var Iit=s(Aq);q5o=r(Iit,"FlaubertModel"),Iit.forEach(t),j5o=r(d8e," (FlauBERT model)"),d8e.forEach(t),D5o=i($),l_=n($,"LI",{});var c8e=s(l_);nde=n(c8e,"STRONG",{});var Nit=s(nde);G5o=r(Nit,"flava"),Nit.forEach(t),O5o=r(c8e," \u2014 "),Lq=n(c8e,"A",{href:!0});var qit=s(Lq);V5o=r(qit,"FlavaModel"),qit.forEach(t),X5o=r(c8e," (FLAVA model)"),c8e.forEach(t),z5o=i($),i_=n($,"LI",{});var f8e=s(i_);sde=n(f8e,"STRONG",{});var jit=s(sde);W5o=r(jit,"fnet"),jit.forEach(t),Q5o=r(f8e," \u2014 "),yq=n(f8e,"A",{href:!0});var Dit=s(yq);H5o=r(Dit,"FNetModel"),Dit.forEach(t),U5o=r(f8e," (FNet model)"),f8e.forEach(t),J5o=i($),d_=n($,"LI",{});var m8e=s(d_);lde=n(m8e,"STRONG",{});var Git=s(lde);Y5o=r(Git,"fsmt"),Git.forEach(t),K5o=r(m8e," \u2014 "),xq=n(m8e,"A",{href:!0});var Oit=s(xq);Z5o=r(Oit,"FSMTModel"),Oit.forEach(t),evo=r(m8e," (FairSeq Machine-Translation model)"),m8e.forEach(t),ovo=i($),Gs=n($,"LI",{});var Wk=s(Gs);ide=n(Wk,"STRONG",{});var Vit=s(ide);rvo=r(Vit,"funnel"),Vit.forEach(t),tvo=r(Wk," \u2014 "),$q=n(Wk,"A",{href:!0});var Xit=s($q);avo=r(Xit,"FunnelModel"),Xit.forEach(t),nvo=r(Wk," or "),kq=n(Wk,"A",{href:!0});var zit=s(kq);svo=r(zit,"FunnelBaseModel"),zit.forEach(t),lvo=r(Wk," (Funnel Transformer model)"),Wk.forEach(t),ivo=i($),c_=n($,"LI",{});var g8e=s(c_);dde=n(g8e,"STRONG",{});var Wit=s(dde);dvo=r(Wit,"glpn"),Wit.forEach(t),cvo=r(g8e," \u2014 "),Sq=n(g8e,"A",{href:!0});var Qit=s(Sq);fvo=r(Qit,"GLPNModel"),Qit.forEach(t),mvo=r(g8e," (GLPN model)"),g8e.forEach(t),gvo=i($),f_=n($,"LI",{});var h8e=s(f_);cde=n(h8e,"STRONG",{});var Hit=s(cde);hvo=r(Hit,"gpt2"),Hit.forEach(t),pvo=r(h8e," \u2014 "),Rq=n(h8e,"A",{href:!0});var Uit=s(Rq);_vo=r(Uit,"GPT2Model"),Uit.forEach(t),uvo=r(h8e," (OpenAI GPT-2 model)"),h8e.forEach(t),bvo=i($),m_=n($,"LI",{});var p8e=s(m_);fde=n(p8e,"STRONG",{});var Jit=s(fde);vvo=r(Jit,"gpt_neo"),Jit.forEach(t),Fvo=r(p8e," \u2014 "),Pq=n(p8e,"A",{href:!0});var Yit=s(Pq);Tvo=r(Yit,"GPTNeoModel"),Yit.forEach(t),Mvo=r(p8e," (GPT Neo model)"),p8e.forEach(t),Evo=i($),g_=n($,"LI",{});var _8e=s(g_);mde=n(_8e,"STRONG",{});var Kit=s(mde);Cvo=r(Kit,"gpt_neox"),Kit.forEach(t),wvo=r(_8e," \u2014 "),Bq=n(_8e,"A",{href:!0});var Zit=s(Bq);Avo=r(Zit,"GPTNeoXModel"),Zit.forEach(t),Lvo=r(_8e," (GPT NeoX model)"),_8e.forEach(t),yvo=i($),h_=n($,"LI",{});var u8e=s(h_);gde=n(u8e,"STRONG",{});var edt=s(gde);xvo=r(edt,"gptj"),edt.forEach(t),$vo=r(u8e," \u2014 "),Iq=n(u8e,"A",{href:!0});var odt=s(Iq);kvo=r(odt,"GPTJModel"),odt.forEach(t),Svo=r(u8e," (GPT-J model)"),u8e.forEach(t),Rvo=i($),p_=n($,"LI",{});var b8e=s(p_);hde=n(b8e,"STRONG",{});var rdt=s(hde);Pvo=r(rdt,"hubert"),rdt.forEach(t),Bvo=r(b8e," \u2014 "),Nq=n(b8e,"A",{href:!0});var tdt=s(Nq);Ivo=r(tdt,"HubertModel"),tdt.forEach(t),Nvo=r(b8e," (Hubert model)"),b8e.forEach(t),qvo=i($),__=n($,"LI",{});var v8e=s(__);pde=n(v8e,"STRONG",{});var adt=s(pde);jvo=r(adt,"ibert"),adt.forEach(t),Dvo=r(v8e," \u2014 "),qq=n(v8e,"A",{href:!0});var ndt=s(qq);Gvo=r(ndt,"IBertModel"),ndt.forEach(t),Ovo=r(v8e," (I-BERT model)"),v8e.forEach(t),Vvo=i($),u_=n($,"LI",{});var F8e=s(u_);_de=n(F8e,"STRONG",{});var sdt=s(_de);Xvo=r(sdt,"imagegpt"),sdt.forEach(t),zvo=r(F8e," \u2014 "),jq=n(F8e,"A",{href:!0});var ldt=s(jq);Wvo=r(ldt,"ImageGPTModel"),ldt.forEach(t),Qvo=r(F8e," (ImageGPT model)"),F8e.forEach(t),Hvo=i($),b_=n($,"LI",{});var T8e=s(b_);ude=n(T8e,"STRONG",{});var idt=s(ude);Uvo=r(idt,"layoutlm"),idt.forEach(t),Jvo=r(T8e," \u2014 "),Dq=n(T8e,"A",{href:!0});var ddt=s(Dq);Yvo=r(ddt,"LayoutLMModel"),ddt.forEach(t),Kvo=r(T8e," (LayoutLM model)"),T8e.forEach(t),Zvo=i($),v_=n($,"LI",{});var M8e=s(v_);bde=n(M8e,"STRONG",{});var cdt=s(bde);e3o=r(cdt,"layoutlmv2"),cdt.forEach(t),o3o=r(M8e," \u2014 "),Gq=n(M8e,"A",{href:!0});var fdt=s(Gq);r3o=r(fdt,"LayoutLMv2Model"),fdt.forEach(t),t3o=r(M8e," (LayoutLMv2 model)"),M8e.forEach(t),a3o=i($),F_=n($,"LI",{});var E8e=s(F_);vde=n(E8e,"STRONG",{});var mdt=s(vde);n3o=r(mdt,"layoutlmv3"),mdt.forEach(t),s3o=r(E8e," \u2014 "),Oq=n(E8e,"A",{href:!0});var gdt=s(Oq);l3o=r(gdt,"LayoutLMv3Model"),gdt.forEach(t),i3o=r(E8e," (LayoutLMv3 model)"),E8e.forEach(t),d3o=i($),T_=n($,"LI",{});var C8e=s(T_);Fde=n(C8e,"STRONG",{});var hdt=s(Fde);c3o=r(hdt,"led"),hdt.forEach(t),f3o=r(C8e," \u2014 "),Vq=n(C8e,"A",{href:!0});var pdt=s(Vq);m3o=r(pdt,"LEDModel"),pdt.forEach(t),g3o=r(C8e," (LED model)"),C8e.forEach(t),h3o=i($),M_=n($,"LI",{});var w8e=s(M_);Tde=n(w8e,"STRONG",{});var _dt=s(Tde);p3o=r(_dt,"levit"),_dt.forEach(t),_3o=r(w8e," \u2014 "),Xq=n(w8e,"A",{href:!0});var udt=s(Xq);u3o=r(udt,"LevitModel"),udt.forEach(t),b3o=r(w8e," (LeViT model)"),w8e.forEach(t),v3o=i($),E_=n($,"LI",{});var A8e=s(E_);Mde=n(A8e,"STRONG",{});var bdt=s(Mde);F3o=r(bdt,"longformer"),bdt.forEach(t),T3o=r(A8e," \u2014 "),zq=n(A8e,"A",{href:!0});var vdt=s(zq);M3o=r(vdt,"LongformerModel"),vdt.forEach(t),E3o=r(A8e," (Longformer model)"),A8e.forEach(t),C3o=i($),C_=n($,"LI",{});var L8e=s(C_);Ede=n(L8e,"STRONG",{});var Fdt=s(Ede);w3o=r(Fdt,"longt5"),Fdt.forEach(t),A3o=r(L8e," \u2014 "),Wq=n(L8e,"A",{href:!0});var Tdt=s(Wq);L3o=r(Tdt,"LongT5Model"),Tdt.forEach(t),y3o=r(L8e," (LongT5 model)"),L8e.forEach(t),x3o=i($),w_=n($,"LI",{});var y8e=s(w_);Cde=n(y8e,"STRONG",{});var Mdt=s(Cde);$3o=r(Mdt,"luke"),Mdt.forEach(t),k3o=r(y8e," \u2014 "),Qq=n(y8e,"A",{href:!0});var Edt=s(Qq);S3o=r(Edt,"LukeModel"),Edt.forEach(t),R3o=r(y8e," (LUKE model)"),y8e.forEach(t),P3o=i($),A_=n($,"LI",{});var x8e=s(A_);wde=n(x8e,"STRONG",{});var Cdt=s(wde);B3o=r(Cdt,"lxmert"),Cdt.forEach(t),I3o=r(x8e," \u2014 "),Hq=n(x8e,"A",{href:!0});var wdt=s(Hq);N3o=r(wdt,"LxmertModel"),wdt.forEach(t),q3o=r(x8e," (LXMERT model)"),x8e.forEach(t),j3o=i($),L_=n($,"LI",{});var $8e=s(L_);Ade=n($8e,"STRONG",{});var Adt=s(Ade);D3o=r(Adt,"m2m_100"),Adt.forEach(t),G3o=r($8e," \u2014 "),Uq=n($8e,"A",{href:!0});var Ldt=s(Uq);O3o=r(Ldt,"M2M100Model"),Ldt.forEach(t),V3o=r($8e," (M2M100 model)"),$8e.forEach(t),X3o=i($),y_=n($,"LI",{});var k8e=s(y_);Lde=n(k8e,"STRONG",{});var ydt=s(Lde);z3o=r(ydt,"marian"),ydt.forEach(t),W3o=r(k8e," \u2014 "),Jq=n(k8e,"A",{href:!0});var xdt=s(Jq);Q3o=r(xdt,"MarianModel"),xdt.forEach(t),H3o=r(k8e," (Marian model)"),k8e.forEach(t),U3o=i($),x_=n($,"LI",{});var S8e=s(x_);yde=n(S8e,"STRONG",{});var $dt=s(yde);J3o=r($dt,"maskformer"),$dt.forEach(t),Y3o=r(S8e," \u2014 "),Yq=n(S8e,"A",{href:!0});var kdt=s(Yq);K3o=r(kdt,"MaskFormerModel"),kdt.forEach(t),Z3o=r(S8e," (MaskFormer model)"),S8e.forEach(t),eFo=i($),$_=n($,"LI",{});var R8e=s($_);xde=n(R8e,"STRONG",{});var Sdt=s(xde);oFo=r(Sdt,"mbart"),Sdt.forEach(t),rFo=r(R8e," \u2014 "),Kq=n(R8e,"A",{href:!0});var Rdt=s(Kq);tFo=r(Rdt,"MBartModel"),Rdt.forEach(t),aFo=r(R8e," (mBART model)"),R8e.forEach(t),nFo=i($),k_=n($,"LI",{});var P8e=s(k_);$de=n(P8e,"STRONG",{});var Pdt=s($de);sFo=r(Pdt,"mctct"),Pdt.forEach(t),lFo=r(P8e," \u2014 "),Zq=n(P8e,"A",{href:!0});var Bdt=s(Zq);iFo=r(Bdt,"MCTCTModel"),Bdt.forEach(t),dFo=r(P8e," (M-CTC-T model)"),P8e.forEach(t),cFo=i($),S_=n($,"LI",{});var B8e=s(S_);kde=n(B8e,"STRONG",{});var Idt=s(kde);fFo=r(Idt,"megatron-bert"),Idt.forEach(t),mFo=r(B8e," \u2014 "),ej=n(B8e,"A",{href:!0});var Ndt=s(ej);gFo=r(Ndt,"MegatronBertModel"),Ndt.forEach(t),hFo=r(B8e," (Megatron-BERT model)"),B8e.forEach(t),pFo=i($),R_=n($,"LI",{});var I8e=s(R_);Sde=n(I8e,"STRONG",{});var qdt=s(Sde);_Fo=r(qdt,"mobilebert"),qdt.forEach(t),uFo=r(I8e," \u2014 "),oj=n(I8e,"A",{href:!0});var jdt=s(oj);bFo=r(jdt,"MobileBertModel"),jdt.forEach(t),vFo=r(I8e," (MobileBERT model)"),I8e.forEach(t),FFo=i($),P_=n($,"LI",{});var N8e=s(P_);Rde=n(N8e,"STRONG",{});var Ddt=s(Rde);TFo=r(Ddt,"mobilevit"),Ddt.forEach(t),MFo=r(N8e," \u2014 "),rj=n(N8e,"A",{href:!0});var Gdt=s(rj);EFo=r(Gdt,"MobileViTModel"),Gdt.forEach(t),CFo=r(N8e," (MobileViT model)"),N8e.forEach(t),wFo=i($),B_=n($,"LI",{});var q8e=s(B_);Pde=n(q8e,"STRONG",{});var Odt=s(Pde);AFo=r(Odt,"mpnet"),Odt.forEach(t),LFo=r(q8e," \u2014 "),tj=n(q8e,"A",{href:!0});var Vdt=s(tj);yFo=r(Vdt,"MPNetModel"),Vdt.forEach(t),xFo=r(q8e," (MPNet model)"),q8e.forEach(t),$Fo=i($),I_=n($,"LI",{});var j8e=s(I_);Bde=n(j8e,"STRONG",{});var Xdt=s(Bde);kFo=r(Xdt,"mt5"),Xdt.forEach(t),SFo=r(j8e," \u2014 "),aj=n(j8e,"A",{href:!0});var zdt=s(aj);RFo=r(zdt,"MT5Model"),zdt.forEach(t),PFo=r(j8e," (MT5 model)"),j8e.forEach(t),BFo=i($),N_=n($,"LI",{});var D8e=s(N_);Ide=n(D8e,"STRONG",{});var Wdt=s(Ide);IFo=r(Wdt,"nystromformer"),Wdt.forEach(t),NFo=r(D8e," \u2014 "),nj=n(D8e,"A",{href:!0});var Qdt=s(nj);qFo=r(Qdt,"NystromformerModel"),Qdt.forEach(t),jFo=r(D8e," (Nystr\xF6mformer model)"),D8e.forEach(t),DFo=i($),q_=n($,"LI",{});var G8e=s(q_);Nde=n(G8e,"STRONG",{});var Hdt=s(Nde);GFo=r(Hdt,"openai-gpt"),Hdt.forEach(t),OFo=r(G8e," \u2014 "),sj=n(G8e,"A",{href:!0});var Udt=s(sj);VFo=r(Udt,"OpenAIGPTModel"),Udt.forEach(t),XFo=r(G8e," (OpenAI GPT model)"),G8e.forEach(t),zFo=i($),j_=n($,"LI",{});var O8e=s(j_);qde=n(O8e,"STRONG",{});var Jdt=s(qde);WFo=r(Jdt,"opt"),Jdt.forEach(t),QFo=r(O8e," \u2014 "),lj=n(O8e,"A",{href:!0});var Ydt=s(lj);HFo=r(Ydt,"OPTModel"),Ydt.forEach(t),UFo=r(O8e," (OPT model)"),O8e.forEach(t),JFo=i($),D_=n($,"LI",{});var V8e=s(D_);jde=n(V8e,"STRONG",{});var Kdt=s(jde);YFo=r(Kdt,"pegasus"),Kdt.forEach(t),KFo=r(V8e," \u2014 "),ij=n(V8e,"A",{href:!0});var Zdt=s(ij);ZFo=r(Zdt,"PegasusModel"),Zdt.forEach(t),eTo=r(V8e," (Pegasus model)"),V8e.forEach(t),oTo=i($),G_=n($,"LI",{});var X8e=s(G_);Dde=n(X8e,"STRONG",{});var ect=s(Dde);rTo=r(ect,"perceiver"),ect.forEach(t),tTo=r(X8e," \u2014 "),dj=n(X8e,"A",{href:!0});var oct=s(dj);aTo=r(oct,"PerceiverModel"),oct.forEach(t),nTo=r(X8e," (Perceiver model)"),X8e.forEach(t),sTo=i($),O_=n($,"LI",{});var z8e=s(O_);Gde=n(z8e,"STRONG",{});var rct=s(Gde);lTo=r(rct,"plbart"),rct.forEach(t),iTo=r(z8e," \u2014 "),cj=n(z8e,"A",{href:!0});var tct=s(cj);dTo=r(tct,"PLBartModel"),tct.forEach(t),cTo=r(z8e," (PLBart model)"),z8e.forEach(t),fTo=i($),V_=n($,"LI",{});var W8e=s(V_);Ode=n(W8e,"STRONG",{});var act=s(Ode);mTo=r(act,"poolformer"),act.forEach(t),gTo=r(W8e," \u2014 "),fj=n(W8e,"A",{href:!0});var nct=s(fj);hTo=r(nct,"PoolFormerModel"),nct.forEach(t),pTo=r(W8e," (PoolFormer model)"),W8e.forEach(t),_To=i($),X_=n($,"LI",{});var Q8e=s(X_);Vde=n(Q8e,"STRONG",{});var sct=s(Vde);uTo=r(sct,"prophetnet"),sct.forEach(t),bTo=r(Q8e," \u2014 "),mj=n(Q8e,"A",{href:!0});var lct=s(mj);vTo=r(lct,"ProphetNetModel"),lct.forEach(t),FTo=r(Q8e," (ProphetNet model)"),Q8e.forEach(t),TTo=i($),z_=n($,"LI",{});var H8e=s(z_);Xde=n(H8e,"STRONG",{});var ict=s(Xde);MTo=r(ict,"qdqbert"),ict.forEach(t),ETo=r(H8e," \u2014 "),gj=n(H8e,"A",{href:!0});var dct=s(gj);CTo=r(dct,"QDQBertModel"),dct.forEach(t),wTo=r(H8e," (QDQBert model)"),H8e.forEach(t),ATo=i($),W_=n($,"LI",{});var U8e=s(W_);zde=n(U8e,"STRONG",{});var cct=s(zde);LTo=r(cct,"reformer"),cct.forEach(t),yTo=r(U8e," \u2014 "),hj=n(U8e,"A",{href:!0});var fct=s(hj);xTo=r(fct,"ReformerModel"),fct.forEach(t),$To=r(U8e," (Reformer model)"),U8e.forEach(t),kTo=i($),Q_=n($,"LI",{});var J8e=s(Q_);Wde=n(J8e,"STRONG",{});var mct=s(Wde);STo=r(mct,"regnet"),mct.forEach(t),RTo=r(J8e," \u2014 "),pj=n(J8e,"A",{href:!0});var gct=s(pj);PTo=r(gct,"RegNetModel"),gct.forEach(t),BTo=r(J8e," (RegNet model)"),J8e.forEach(t),ITo=i($),H_=n($,"LI",{});var Y8e=s(H_);Qde=n(Y8e,"STRONG",{});var hct=s(Qde);NTo=r(hct,"rembert"),hct.forEach(t),qTo=r(Y8e," \u2014 "),_j=n(Y8e,"A",{href:!0});var pct=s(_j);jTo=r(pct,"RemBertModel"),pct.forEach(t),DTo=r(Y8e," (RemBERT model)"),Y8e.forEach(t),GTo=i($),U_=n($,"LI",{});var K8e=s(U_);Hde=n(K8e,"STRONG",{});var _ct=s(Hde);OTo=r(_ct,"resnet"),_ct.forEach(t),VTo=r(K8e," \u2014 "),uj=n(K8e,"A",{href:!0});var uct=s(uj);XTo=r(uct,"ResNetModel"),uct.forEach(t),zTo=r(K8e," (ResNet model)"),K8e.forEach(t),WTo=i($),J_=n($,"LI",{});var Z8e=s(J_);Ude=n(Z8e,"STRONG",{});var bct=s(Ude);QTo=r(bct,"retribert"),bct.forEach(t),HTo=r(Z8e," \u2014 "),bj=n(Z8e,"A",{href:!0});var vct=s(bj);UTo=r(vct,"RetriBertModel"),vct.forEach(t),JTo=r(Z8e," (RetriBERT model)"),Z8e.forEach(t),YTo=i($),Y_=n($,"LI",{});var e9e=s(Y_);Jde=n(e9e,"STRONG",{});var Fct=s(Jde);KTo=r(Fct,"roberta"),Fct.forEach(t),ZTo=r(e9e," \u2014 "),vj=n(e9e,"A",{href:!0});var Tct=s(vj);e7o=r(Tct,"RobertaModel"),Tct.forEach(t),o7o=r(e9e," (RoBERTa model)"),e9e.forEach(t),r7o=i($),K_=n($,"LI",{});var o9e=s(K_);Yde=n(o9e,"STRONG",{});var Mct=s(Yde);t7o=r(Mct,"roformer"),Mct.forEach(t),a7o=r(o9e," \u2014 "),Fj=n(o9e,"A",{href:!0});var Ect=s(Fj);n7o=r(Ect,"RoFormerModel"),Ect.forEach(t),s7o=r(o9e," (RoFormer model)"),o9e.forEach(t),l7o=i($),Z_=n($,"LI",{});var r9e=s(Z_);Kde=n(r9e,"STRONG",{});var Cct=s(Kde);i7o=r(Cct,"segformer"),Cct.forEach(t),d7o=r(r9e," \u2014 "),Tj=n(r9e,"A",{href:!0});var wct=s(Tj);c7o=r(wct,"SegformerModel"),wct.forEach(t),f7o=r(r9e," (SegFormer model)"),r9e.forEach(t),m7o=i($),eu=n($,"LI",{});var t9e=s(eu);Zde=n(t9e,"STRONG",{});var Act=s(Zde);g7o=r(Act,"sew"),Act.forEach(t),h7o=r(t9e," \u2014 "),Mj=n(t9e,"A",{href:!0});var Lct=s(Mj);p7o=r(Lct,"SEWModel"),Lct.forEach(t),_7o=r(t9e," (SEW model)"),t9e.forEach(t),u7o=i($),ou=n($,"LI",{});var a9e=s(ou);ece=n(a9e,"STRONG",{});var yct=s(ece);b7o=r(yct,"sew-d"),yct.forEach(t),v7o=r(a9e," \u2014 "),Ej=n(a9e,"A",{href:!0});var xct=s(Ej);F7o=r(xct,"SEWDModel"),xct.forEach(t),T7o=r(a9e," (SEW-D model)"),a9e.forEach(t),M7o=i($),ru=n($,"LI",{});var n9e=s(ru);oce=n(n9e,"STRONG",{});var $ct=s(oce);E7o=r($ct,"speech_to_text"),$ct.forEach(t),C7o=r(n9e," \u2014 "),Cj=n(n9e,"A",{href:!0});var kct=s(Cj);w7o=r(kct,"Speech2TextModel"),kct.forEach(t),A7o=r(n9e," (Speech2Text model)"),n9e.forEach(t),L7o=i($),tu=n($,"LI",{});var s9e=s(tu);rce=n(s9e,"STRONG",{});var Sct=s(rce);y7o=r(Sct,"splinter"),Sct.forEach(t),x7o=r(s9e," \u2014 "),wj=n(s9e,"A",{href:!0});var Rct=s(wj);$7o=r(Rct,"SplinterModel"),Rct.forEach(t),k7o=r(s9e," (Splinter model)"),s9e.forEach(t),S7o=i($),au=n($,"LI",{});var l9e=s(au);tce=n(l9e,"STRONG",{});var Pct=s(tce);R7o=r(Pct,"squeezebert"),Pct.forEach(t),P7o=r(l9e," \u2014 "),Aj=n(l9e,"A",{href:!0});var Bct=s(Aj);B7o=r(Bct,"SqueezeBertModel"),Bct.forEach(t),I7o=r(l9e," (SqueezeBERT model)"),l9e.forEach(t),N7o=i($),nu=n($,"LI",{});var i9e=s(nu);ace=n(i9e,"STRONG",{});var Ict=s(ace);q7o=r(Ict,"swin"),Ict.forEach(t),j7o=r(i9e," \u2014 "),Lj=n(i9e,"A",{href:!0});var Nct=s(Lj);D7o=r(Nct,"SwinModel"),Nct.forEach(t),G7o=r(i9e," (Swin Transformer model)"),i9e.forEach(t),O7o=i($),su=n($,"LI",{});var d9e=s(su);nce=n(d9e,"STRONG",{});var qct=s(nce);V7o=r(qct,"t5"),qct.forEach(t),X7o=r(d9e," \u2014 "),yj=n(d9e,"A",{href:!0});var jct=s(yj);z7o=r(jct,"T5Model"),jct.forEach(t),W7o=r(d9e," (T5 model)"),d9e.forEach(t),Q7o=i($),lu=n($,"LI",{});var c9e=s(lu);sce=n(c9e,"STRONG",{});var Dct=s(sce);H7o=r(Dct,"tapas"),Dct.forEach(t),U7o=r(c9e," \u2014 "),xj=n(c9e,"A",{href:!0});var Gct=s(xj);J7o=r(Gct,"TapasModel"),Gct.forEach(t),Y7o=r(c9e," (TAPAS model)"),c9e.forEach(t),K7o=i($),iu=n($,"LI",{});var f9e=s(iu);lce=n(f9e,"STRONG",{});var Oct=s(lce);Z7o=r(Oct,"trajectory_transformer"),Oct.forEach(t),eMo=r(f9e," \u2014 "),$j=n(f9e,"A",{href:!0});var Vct=s($j);oMo=r(Vct,"TrajectoryTransformerModel"),Vct.forEach(t),rMo=r(f9e," (Trajectory Transformer model)"),f9e.forEach(t),tMo=i($),du=n($,"LI",{});var m9e=s(du);ice=n(m9e,"STRONG",{});var Xct=s(ice);aMo=r(Xct,"transfo-xl"),Xct.forEach(t),nMo=r(m9e," \u2014 "),kj=n(m9e,"A",{href:!0});var zct=s(kj);sMo=r(zct,"TransfoXLModel"),zct.forEach(t),lMo=r(m9e," (Transformer-XL model)"),m9e.forEach(t),iMo=i($),cu=n($,"LI",{});var g9e=s(cu);dce=n(g9e,"STRONG",{});var Wct=s(dce);dMo=r(Wct,"unispeech"),Wct.forEach(t),cMo=r(g9e," \u2014 "),Sj=n(g9e,"A",{href:!0});var Qct=s(Sj);fMo=r(Qct,"UniSpeechModel"),Qct.forEach(t),mMo=r(g9e," (UniSpeech model)"),g9e.forEach(t),gMo=i($),fu=n($,"LI",{});var h9e=s(fu);cce=n(h9e,"STRONG",{});var Hct=s(cce);hMo=r(Hct,"unispeech-sat"),Hct.forEach(t),pMo=r(h9e," \u2014 "),Rj=n(h9e,"A",{href:!0});var Uct=s(Rj);_Mo=r(Uct,"UniSpeechSatModel"),Uct.forEach(t),uMo=r(h9e," (UniSpeechSat model)"),h9e.forEach(t),bMo=i($),mu=n($,"LI",{});var p9e=s(mu);fce=n(p9e,"STRONG",{});var Jct=s(fce);vMo=r(Jct,"van"),Jct.forEach(t),FMo=r(p9e," \u2014 "),Pj=n(p9e,"A",{href:!0});var Yct=s(Pj);TMo=r(Yct,"VanModel"),Yct.forEach(t),MMo=r(p9e," (VAN model)"),p9e.forEach(t),EMo=i($),gu=n($,"LI",{});var _9e=s(gu);mce=n(_9e,"STRONG",{});var Kct=s(mce);CMo=r(Kct,"vilt"),Kct.forEach(t),wMo=r(_9e," \u2014 "),Bj=n(_9e,"A",{href:!0});var Zct=s(Bj);AMo=r(Zct,"ViltModel"),Zct.forEach(t),LMo=r(_9e," (ViLT model)"),_9e.forEach(t),yMo=i($),hu=n($,"LI",{});var u9e=s(hu);gce=n(u9e,"STRONG",{});var eft=s(gce);xMo=r(eft,"vision-text-dual-encoder"),eft.forEach(t),$Mo=r(u9e," \u2014 "),Ij=n(u9e,"A",{href:!0});var oft=s(Ij);kMo=r(oft,"VisionTextDualEncoderModel"),oft.forEach(t),SMo=r(u9e," (VisionTextDualEncoder model)"),u9e.forEach(t),RMo=i($),pu=n($,"LI",{});var b9e=s(pu);hce=n(b9e,"STRONG",{});var rft=s(hce);PMo=r(rft,"visual_bert"),rft.forEach(t),BMo=r(b9e," \u2014 "),Nj=n(b9e,"A",{href:!0});var tft=s(Nj);IMo=r(tft,"VisualBertModel"),tft.forEach(t),NMo=r(b9e," (VisualBERT model)"),b9e.forEach(t),qMo=i($),_u=n($,"LI",{});var v9e=s(_u);pce=n(v9e,"STRONG",{});var aft=s(pce);jMo=r(aft,"vit"),aft.forEach(t),DMo=r(v9e," \u2014 "),qj=n(v9e,"A",{href:!0});var nft=s(qj);GMo=r(nft,"ViTModel"),nft.forEach(t),OMo=r(v9e," (ViT model)"),v9e.forEach(t),VMo=i($),uu=n($,"LI",{});var F9e=s(uu);_ce=n(F9e,"STRONG",{});var sft=s(_ce);XMo=r(sft,"vit_mae"),sft.forEach(t),zMo=r(F9e," \u2014 "),jj=n(F9e,"A",{href:!0});var lft=s(jj);WMo=r(lft,"ViTMAEModel"),lft.forEach(t),QMo=r(F9e," (ViTMAE model)"),F9e.forEach(t),HMo=i($),bu=n($,"LI",{});var T9e=s(bu);uce=n(T9e,"STRONG",{});var ift=s(uce);UMo=r(ift,"wav2vec2"),ift.forEach(t),JMo=r(T9e," \u2014 "),Dj=n(T9e,"A",{href:!0});var dft=s(Dj);YMo=r(dft,"Wav2Vec2Model"),dft.forEach(t),KMo=r(T9e," (Wav2Vec2 model)"),T9e.forEach(t),ZMo=i($),vu=n($,"LI",{});var M9e=s(vu);bce=n(M9e,"STRONG",{});var cft=s(bce);eEo=r(cft,"wav2vec2-conformer"),cft.forEach(t),oEo=r(M9e," \u2014 "),Gj=n(M9e,"A",{href:!0});var fft=s(Gj);rEo=r(fft,"Wav2Vec2ConformerModel"),fft.forEach(t),tEo=r(M9e," (Wav2Vec2-Conformer model)"),M9e.forEach(t),aEo=i($),Fu=n($,"LI",{});var E9e=s(Fu);vce=n(E9e,"STRONG",{});var mft=s(vce);nEo=r(mft,"wavlm"),mft.forEach(t),sEo=r(E9e," \u2014 "),Oj=n(E9e,"A",{href:!0});var gft=s(Oj);lEo=r(gft,"WavLMModel"),gft.forEach(t),iEo=r(E9e," (WavLM model)"),E9e.forEach(t),dEo=i($),Tu=n($,"LI",{});var C9e=s(Tu);Fce=n(C9e,"STRONG",{});var hft=s(Fce);cEo=r(hft,"xglm"),hft.forEach(t),fEo=r(C9e," \u2014 "),Vj=n(C9e,"A",{href:!0});var pft=s(Vj);mEo=r(pft,"XGLMModel"),pft.forEach(t),gEo=r(C9e," (XGLM model)"),C9e.forEach(t),hEo=i($),Mu=n($,"LI",{});var w9e=s(Mu);Tce=n(w9e,"STRONG",{});var _ft=s(Tce);pEo=r(_ft,"xlm"),_ft.forEach(t),_Eo=r(w9e," \u2014 "),Xj=n(w9e,"A",{href:!0});var uft=s(Xj);uEo=r(uft,"XLMModel"),uft.forEach(t),bEo=r(w9e," (XLM model)"),w9e.forEach(t),vEo=i($),Eu=n($,"LI",{});var A9e=s(Eu);Mce=n(A9e,"STRONG",{});var bft=s(Mce);FEo=r(bft,"xlm-prophetnet"),bft.forEach(t),TEo=r(A9e," \u2014 "),zj=n(A9e,"A",{href:!0});var vft=s(zj);MEo=r(vft,"XLMProphetNetModel"),vft.forEach(t),EEo=r(A9e," (XLM-ProphetNet model)"),A9e.forEach(t),CEo=i($),Cu=n($,"LI",{});var L9e=s(Cu);Ece=n(L9e,"STRONG",{});var Fft=s(Ece);wEo=r(Fft,"xlm-roberta"),Fft.forEach(t),AEo=r(L9e," \u2014 "),Wj=n(L9e,"A",{href:!0});var Tft=s(Wj);LEo=r(Tft,"XLMRobertaModel"),Tft.forEach(t),yEo=r(L9e," (XLM-RoBERTa model)"),L9e.forEach(t),xEo=i($),wu=n($,"LI",{});var y9e=s(wu);Cce=n(y9e,"STRONG",{});var Mft=s(Cce);$Eo=r(Mft,"xlm-roberta-xl"),Mft.forEach(t),kEo=r(y9e," \u2014 "),Qj=n(y9e,"A",{href:!0});var Eft=s(Qj);SEo=r(Eft,"XLMRobertaXLModel"),Eft.forEach(t),REo=r(y9e," (XLM-RoBERTa-XL model)"),y9e.forEach(t),PEo=i($),Au=n($,"LI",{});var x9e=s(Au);wce=n(x9e,"STRONG",{});var Cft=s(wce);BEo=r(Cft,"xlnet"),Cft.forEach(t),IEo=r(x9e," \u2014 "),Hj=n(x9e,"A",{href:!0});var wft=s(Hj);NEo=r(wft,"XLNetModel"),wft.forEach(t),qEo=r(x9e," (XLNet model)"),x9e.forEach(t),jEo=i($),Lu=n($,"LI",{});var $9e=s(Lu);Ace=n($9e,"STRONG",{});var Aft=s(Ace);DEo=r(Aft,"yolos"),Aft.forEach(t),GEo=r($9e," \u2014 "),Uj=n($9e,"A",{href:!0});var Lft=s(Uj);OEo=r(Lft,"YolosModel"),Lft.forEach(t),VEo=r($9e," (YOLOS model)"),$9e.forEach(t),XEo=i($),yu=n($,"LI",{});var k9e=s(yu);Lce=n(k9e,"STRONG",{});var yft=s(Lce);zEo=r(yft,"yoso"),yft.forEach(t),WEo=r(k9e," \u2014 "),Jj=n(k9e,"A",{href:!0});var xft=s(Jj);QEo=r(xft,"YosoModel"),xft.forEach(t),HEo=r(k9e," (YOSO model)"),k9e.forEach(t),$.forEach(t),UEo=i(na),xu=n(na,"P",{});var S9e=s(xu);JEo=r(S9e,"The model is set in evaluation mode by default using "),yce=n(S9e,"CODE",{});var $ft=s(yce);YEo=r($ft,"model.eval()"),$ft.forEach(t),KEo=r(S9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xce=n(S9e,"CODE",{});var kft=s(xce);ZEo=r(kft,"model.train()"),kft.forEach(t),S9e.forEach(t),eCo=i(na),T($u.$$.fragment,na),na.forEach(t),Us.forEach(t),RGe=i(f),qi=n(f,"H2",{class:!0});var jVe=s(qi);ku=n(jVe,"A",{id:!0,class:!0,href:!0});var Sft=s(ku);$ce=n(Sft,"SPAN",{});var Rft=s($ce);T(oy.$$.fragment,Rft),Rft.forEach(t),Sft.forEach(t),oCo=i(jVe),kce=n(jVe,"SPAN",{});var Pft=s(kce);rCo=r(Pft,"AutoModelForPreTraining"),Pft.forEach(t),jVe.forEach(t),PGe=i(f),$o=n(f,"DIV",{class:!0});var Js=s($o);T(ry.$$.fragment,Js),tCo=i(Js),ji=n(Js,"P",{});var doe=s(ji);aCo=r(doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Yj=n(doe,"A",{href:!0});var Bft=s(Yj);nCo=r(Bft,"from_pretrained()"),Bft.forEach(t),sCo=r(doe," class method or the "),Kj=n(doe,"A",{href:!0});var Ift=s(Kj);lCo=r(Ift,"from_config()"),Ift.forEach(t),iCo=r(doe,` class
method.`),doe.forEach(t),dCo=i(Js),ty=n(Js,"P",{});var DVe=s(ty);cCo=r(DVe,"This class cannot be instantiated directly using "),Sce=n(DVe,"CODE",{});var Nft=s(Sce);fCo=r(Nft,"__init__()"),Nft.forEach(t),mCo=r(DVe," (throws an error)."),DVe.forEach(t),gCo=i(Js),lt=n(Js,"DIV",{class:!0});var xA=s(lt);T(ay.$$.fragment,xA),hCo=i(xA),Rce=n(xA,"P",{});var qft=s(Rce);pCo=r(qft,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qft.forEach(t),_Co=i(xA),Di=n(xA,"P",{});var coe=s(Di);uCo=r(coe,`Note:
Loading a model from its configuration file does `),Pce=n(coe,"STRONG",{});var jft=s(Pce);bCo=r(jft,"not"),jft.forEach(t),vCo=r(coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zj=n(coe,"A",{href:!0});var Dft=s(Zj);FCo=r(Dft,"from_pretrained()"),Dft.forEach(t),TCo=r(coe," to load the model weights."),coe.forEach(t),MCo=i(xA),T(Su.$$.fragment,xA),xA.forEach(t),ECo=i(Js),Ye=n(Js,"DIV",{class:!0});var sa=s(Ye);T(ny.$$.fragment,sa),CCo=i(sa),Bce=n(sa,"P",{});var Gft=s(Bce);wCo=r(Gft,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Gft.forEach(t),ACo=i(sa),Pa=n(sa,"P",{});var $A=s(Pa);LCo=r($A,"The model class to instantiate is selected based on the "),Ice=n($A,"CODE",{});var Oft=s(Ice);yCo=r(Oft,"model_type"),Oft.forEach(t),xCo=r($A,` property of the config object (either
passed as an argument or loaded from `),Nce=n($A,"CODE",{});var Vft=s(Nce);$Co=r(Vft,"pretrained_model_name_or_path"),Vft.forEach(t),kCo=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qce=n($A,"CODE",{});var Xft=s(qce);SCo=r(Xft,"pretrained_model_name_or_path"),Xft.forEach(t),RCo=r($A,":"),$A.forEach(t),PCo=i(sa),G=n(sa,"UL",{});var O=s(G);Ru=n(O,"LI",{});var R9e=s(Ru);jce=n(R9e,"STRONG",{});var zft=s(jce);BCo=r(zft,"albert"),zft.forEach(t),ICo=r(R9e," \u2014 "),eD=n(R9e,"A",{href:!0});var Wft=s(eD);NCo=r(Wft,"AlbertForPreTraining"),Wft.forEach(t),qCo=r(R9e," (ALBERT model)"),R9e.forEach(t),jCo=i(O),Pu=n(O,"LI",{});var P9e=s(Pu);Dce=n(P9e,"STRONG",{});var Qft=s(Dce);DCo=r(Qft,"bart"),Qft.forEach(t),GCo=r(P9e," \u2014 "),oD=n(P9e,"A",{href:!0});var Hft=s(oD);OCo=r(Hft,"BartForConditionalGeneration"),Hft.forEach(t),VCo=r(P9e," (BART model)"),P9e.forEach(t),XCo=i(O),Bu=n(O,"LI",{});var B9e=s(Bu);Gce=n(B9e,"STRONG",{});var Uft=s(Gce);zCo=r(Uft,"bert"),Uft.forEach(t),WCo=r(B9e," \u2014 "),rD=n(B9e,"A",{href:!0});var Jft=s(rD);QCo=r(Jft,"BertForPreTraining"),Jft.forEach(t),HCo=r(B9e," (BERT model)"),B9e.forEach(t),UCo=i(O),Iu=n(O,"LI",{});var I9e=s(Iu);Oce=n(I9e,"STRONG",{});var Yft=s(Oce);JCo=r(Yft,"big_bird"),Yft.forEach(t),YCo=r(I9e," \u2014 "),tD=n(I9e,"A",{href:!0});var Kft=s(tD);KCo=r(Kft,"BigBirdForPreTraining"),Kft.forEach(t),ZCo=r(I9e," (BigBird model)"),I9e.forEach(t),e0o=i(O),Nu=n(O,"LI",{});var N9e=s(Nu);Vce=n(N9e,"STRONG",{});var Zft=s(Vce);o0o=r(Zft,"bloom"),Zft.forEach(t),r0o=r(N9e," \u2014 "),aD=n(N9e,"A",{href:!0});var emt=s(aD);t0o=r(emt,"BloomForCausalLM"),emt.forEach(t),a0o=r(N9e," (BLOOM model)"),N9e.forEach(t),n0o=i(O),qu=n(O,"LI",{});var q9e=s(qu);Xce=n(q9e,"STRONG",{});var omt=s(Xce);s0o=r(omt,"camembert"),omt.forEach(t),l0o=r(q9e," \u2014 "),nD=n(q9e,"A",{href:!0});var rmt=s(nD);i0o=r(rmt,"CamembertForMaskedLM"),rmt.forEach(t),d0o=r(q9e," (CamemBERT model)"),q9e.forEach(t),c0o=i(O),ju=n(O,"LI",{});var j9e=s(ju);zce=n(j9e,"STRONG",{});var tmt=s(zce);f0o=r(tmt,"ctrl"),tmt.forEach(t),m0o=r(j9e," \u2014 "),sD=n(j9e,"A",{href:!0});var amt=s(sD);g0o=r(amt,"CTRLLMHeadModel"),amt.forEach(t),h0o=r(j9e," (CTRL model)"),j9e.forEach(t),p0o=i(O),Du=n(O,"LI",{});var D9e=s(Du);Wce=n(D9e,"STRONG",{});var nmt=s(Wce);_0o=r(nmt,"data2vec-text"),nmt.forEach(t),u0o=r(D9e," \u2014 "),lD=n(D9e,"A",{href:!0});var smt=s(lD);b0o=r(smt,"Data2VecTextForMaskedLM"),smt.forEach(t),v0o=r(D9e," (Data2VecText model)"),D9e.forEach(t),F0o=i(O),Gu=n(O,"LI",{});var G9e=s(Gu);Qce=n(G9e,"STRONG",{});var lmt=s(Qce);T0o=r(lmt,"deberta"),lmt.forEach(t),M0o=r(G9e," \u2014 "),iD=n(G9e,"A",{href:!0});var imt=s(iD);E0o=r(imt,"DebertaForMaskedLM"),imt.forEach(t),C0o=r(G9e," (DeBERTa model)"),G9e.forEach(t),w0o=i(O),Ou=n(O,"LI",{});var O9e=s(Ou);Hce=n(O9e,"STRONG",{});var dmt=s(Hce);A0o=r(dmt,"deberta-v2"),dmt.forEach(t),L0o=r(O9e," \u2014 "),dD=n(O9e,"A",{href:!0});var cmt=s(dD);y0o=r(cmt,"DebertaV2ForMaskedLM"),cmt.forEach(t),x0o=r(O9e," (DeBERTa-v2 model)"),O9e.forEach(t),$0o=i(O),Vu=n(O,"LI",{});var V9e=s(Vu);Uce=n(V9e,"STRONG",{});var fmt=s(Uce);k0o=r(fmt,"distilbert"),fmt.forEach(t),S0o=r(V9e," \u2014 "),cD=n(V9e,"A",{href:!0});var mmt=s(cD);R0o=r(mmt,"DistilBertForMaskedLM"),mmt.forEach(t),P0o=r(V9e," (DistilBERT model)"),V9e.forEach(t),B0o=i(O),Xu=n(O,"LI",{});var X9e=s(Xu);Jce=n(X9e,"STRONG",{});var gmt=s(Jce);I0o=r(gmt,"electra"),gmt.forEach(t),N0o=r(X9e," \u2014 "),fD=n(X9e,"A",{href:!0});var hmt=s(fD);q0o=r(hmt,"ElectraForPreTraining"),hmt.forEach(t),j0o=r(X9e," (ELECTRA model)"),X9e.forEach(t),D0o=i(O),zu=n(O,"LI",{});var z9e=s(zu);Yce=n(z9e,"STRONG",{});var pmt=s(Yce);G0o=r(pmt,"flaubert"),pmt.forEach(t),O0o=r(z9e," \u2014 "),mD=n(z9e,"A",{href:!0});var _mt=s(mD);V0o=r(_mt,"FlaubertWithLMHeadModel"),_mt.forEach(t),X0o=r(z9e," (FlauBERT model)"),z9e.forEach(t),z0o=i(O),Wu=n(O,"LI",{});var W9e=s(Wu);Kce=n(W9e,"STRONG",{});var umt=s(Kce);W0o=r(umt,"flava"),umt.forEach(t),Q0o=r(W9e," \u2014 "),gD=n(W9e,"A",{href:!0});var bmt=s(gD);H0o=r(bmt,"FlavaForPreTraining"),bmt.forEach(t),U0o=r(W9e," (FLAVA model)"),W9e.forEach(t),J0o=i(O),Qu=n(O,"LI",{});var Q9e=s(Qu);Zce=n(Q9e,"STRONG",{});var vmt=s(Zce);Y0o=r(vmt,"fnet"),vmt.forEach(t),K0o=r(Q9e," \u2014 "),hD=n(Q9e,"A",{href:!0});var Fmt=s(hD);Z0o=r(Fmt,"FNetForPreTraining"),Fmt.forEach(t),ewo=r(Q9e," (FNet model)"),Q9e.forEach(t),owo=i(O),Hu=n(O,"LI",{});var H9e=s(Hu);efe=n(H9e,"STRONG",{});var Tmt=s(efe);rwo=r(Tmt,"fsmt"),Tmt.forEach(t),two=r(H9e," \u2014 "),pD=n(H9e,"A",{href:!0});var Mmt=s(pD);awo=r(Mmt,"FSMTForConditionalGeneration"),Mmt.forEach(t),nwo=r(H9e," (FairSeq Machine-Translation model)"),H9e.forEach(t),swo=i(O),Uu=n(O,"LI",{});var U9e=s(Uu);ofe=n(U9e,"STRONG",{});var Emt=s(ofe);lwo=r(Emt,"funnel"),Emt.forEach(t),iwo=r(U9e," \u2014 "),_D=n(U9e,"A",{href:!0});var Cmt=s(_D);dwo=r(Cmt,"FunnelForPreTraining"),Cmt.forEach(t),cwo=r(U9e," (Funnel Transformer model)"),U9e.forEach(t),fwo=i(O),Ju=n(O,"LI",{});var J9e=s(Ju);rfe=n(J9e,"STRONG",{});var wmt=s(rfe);mwo=r(wmt,"gpt2"),wmt.forEach(t),gwo=r(J9e," \u2014 "),uD=n(J9e,"A",{href:!0});var Amt=s(uD);hwo=r(Amt,"GPT2LMHeadModel"),Amt.forEach(t),pwo=r(J9e," (OpenAI GPT-2 model)"),J9e.forEach(t),_wo=i(O),Yu=n(O,"LI",{});var Y9e=s(Yu);tfe=n(Y9e,"STRONG",{});var Lmt=s(tfe);uwo=r(Lmt,"ibert"),Lmt.forEach(t),bwo=r(Y9e," \u2014 "),bD=n(Y9e,"A",{href:!0});var ymt=s(bD);vwo=r(ymt,"IBertForMaskedLM"),ymt.forEach(t),Fwo=r(Y9e," (I-BERT model)"),Y9e.forEach(t),Two=i(O),Ku=n(O,"LI",{});var K9e=s(Ku);afe=n(K9e,"STRONG",{});var xmt=s(afe);Mwo=r(xmt,"layoutlm"),xmt.forEach(t),Ewo=r(K9e," \u2014 "),vD=n(K9e,"A",{href:!0});var $mt=s(vD);Cwo=r($mt,"LayoutLMForMaskedLM"),$mt.forEach(t),wwo=r(K9e," (LayoutLM model)"),K9e.forEach(t),Awo=i(O),Zu=n(O,"LI",{});var Z9e=s(Zu);nfe=n(Z9e,"STRONG",{});var kmt=s(nfe);Lwo=r(kmt,"longformer"),kmt.forEach(t),ywo=r(Z9e," \u2014 "),FD=n(Z9e,"A",{href:!0});var Smt=s(FD);xwo=r(Smt,"LongformerForMaskedLM"),Smt.forEach(t),$wo=r(Z9e," (Longformer model)"),Z9e.forEach(t),kwo=i(O),e1=n(O,"LI",{});var exe=s(e1);sfe=n(exe,"STRONG",{});var Rmt=s(sfe);Swo=r(Rmt,"lxmert"),Rmt.forEach(t),Rwo=r(exe," \u2014 "),TD=n(exe,"A",{href:!0});var Pmt=s(TD);Pwo=r(Pmt,"LxmertForPreTraining"),Pmt.forEach(t),Bwo=r(exe," (LXMERT model)"),exe.forEach(t),Iwo=i(O),o1=n(O,"LI",{});var oxe=s(o1);lfe=n(oxe,"STRONG",{});var Bmt=s(lfe);Nwo=r(Bmt,"megatron-bert"),Bmt.forEach(t),qwo=r(oxe," \u2014 "),MD=n(oxe,"A",{href:!0});var Imt=s(MD);jwo=r(Imt,"MegatronBertForPreTraining"),Imt.forEach(t),Dwo=r(oxe," (Megatron-BERT model)"),oxe.forEach(t),Gwo=i(O),r1=n(O,"LI",{});var rxe=s(r1);ife=n(rxe,"STRONG",{});var Nmt=s(ife);Owo=r(Nmt,"mobilebert"),Nmt.forEach(t),Vwo=r(rxe," \u2014 "),ED=n(rxe,"A",{href:!0});var qmt=s(ED);Xwo=r(qmt,"MobileBertForPreTraining"),qmt.forEach(t),zwo=r(rxe," (MobileBERT model)"),rxe.forEach(t),Wwo=i(O),t1=n(O,"LI",{});var txe=s(t1);dfe=n(txe,"STRONG",{});var jmt=s(dfe);Qwo=r(jmt,"mpnet"),jmt.forEach(t),Hwo=r(txe," \u2014 "),CD=n(txe,"A",{href:!0});var Dmt=s(CD);Uwo=r(Dmt,"MPNetForMaskedLM"),Dmt.forEach(t),Jwo=r(txe," (MPNet model)"),txe.forEach(t),Ywo=i(O),a1=n(O,"LI",{});var axe=s(a1);cfe=n(axe,"STRONG",{});var Gmt=s(cfe);Kwo=r(Gmt,"openai-gpt"),Gmt.forEach(t),Zwo=r(axe," \u2014 "),wD=n(axe,"A",{href:!0});var Omt=s(wD);eAo=r(Omt,"OpenAIGPTLMHeadModel"),Omt.forEach(t),oAo=r(axe," (OpenAI GPT model)"),axe.forEach(t),rAo=i(O),n1=n(O,"LI",{});var nxe=s(n1);ffe=n(nxe,"STRONG",{});var Vmt=s(ffe);tAo=r(Vmt,"retribert"),Vmt.forEach(t),aAo=r(nxe," \u2014 "),AD=n(nxe,"A",{href:!0});var Xmt=s(AD);nAo=r(Xmt,"RetriBertModel"),Xmt.forEach(t),sAo=r(nxe," (RetriBERT model)"),nxe.forEach(t),lAo=i(O),s1=n(O,"LI",{});var sxe=s(s1);mfe=n(sxe,"STRONG",{});var zmt=s(mfe);iAo=r(zmt,"roberta"),zmt.forEach(t),dAo=r(sxe," \u2014 "),LD=n(sxe,"A",{href:!0});var Wmt=s(LD);cAo=r(Wmt,"RobertaForMaskedLM"),Wmt.forEach(t),fAo=r(sxe," (RoBERTa model)"),sxe.forEach(t),mAo=i(O),l1=n(O,"LI",{});var lxe=s(l1);gfe=n(lxe,"STRONG",{});var Qmt=s(gfe);gAo=r(Qmt,"splinter"),Qmt.forEach(t),hAo=r(lxe," \u2014 "),yD=n(lxe,"A",{href:!0});var Hmt=s(yD);pAo=r(Hmt,"SplinterForPreTraining"),Hmt.forEach(t),_Ao=r(lxe," (Splinter model)"),lxe.forEach(t),uAo=i(O),i1=n(O,"LI",{});var ixe=s(i1);hfe=n(ixe,"STRONG",{});var Umt=s(hfe);bAo=r(Umt,"squeezebert"),Umt.forEach(t),vAo=r(ixe," \u2014 "),xD=n(ixe,"A",{href:!0});var Jmt=s(xD);FAo=r(Jmt,"SqueezeBertForMaskedLM"),Jmt.forEach(t),TAo=r(ixe," (SqueezeBERT model)"),ixe.forEach(t),MAo=i(O),d1=n(O,"LI",{});var dxe=s(d1);pfe=n(dxe,"STRONG",{});var Ymt=s(pfe);EAo=r(Ymt,"t5"),Ymt.forEach(t),CAo=r(dxe," \u2014 "),$D=n(dxe,"A",{href:!0});var Kmt=s($D);wAo=r(Kmt,"T5ForConditionalGeneration"),Kmt.forEach(t),AAo=r(dxe," (T5 model)"),dxe.forEach(t),LAo=i(O),c1=n(O,"LI",{});var cxe=s(c1);_fe=n(cxe,"STRONG",{});var Zmt=s(_fe);yAo=r(Zmt,"tapas"),Zmt.forEach(t),xAo=r(cxe," \u2014 "),kD=n(cxe,"A",{href:!0});var egt=s(kD);$Ao=r(egt,"TapasForMaskedLM"),egt.forEach(t),kAo=r(cxe," (TAPAS model)"),cxe.forEach(t),SAo=i(O),f1=n(O,"LI",{});var fxe=s(f1);ufe=n(fxe,"STRONG",{});var ogt=s(ufe);RAo=r(ogt,"transfo-xl"),ogt.forEach(t),PAo=r(fxe," \u2014 "),SD=n(fxe,"A",{href:!0});var rgt=s(SD);BAo=r(rgt,"TransfoXLLMHeadModel"),rgt.forEach(t),IAo=r(fxe," (Transformer-XL model)"),fxe.forEach(t),NAo=i(O),m1=n(O,"LI",{});var mxe=s(m1);bfe=n(mxe,"STRONG",{});var tgt=s(bfe);qAo=r(tgt,"unispeech"),tgt.forEach(t),jAo=r(mxe," \u2014 "),RD=n(mxe,"A",{href:!0});var agt=s(RD);DAo=r(agt,"UniSpeechForPreTraining"),agt.forEach(t),GAo=r(mxe," (UniSpeech model)"),mxe.forEach(t),OAo=i(O),g1=n(O,"LI",{});var gxe=s(g1);vfe=n(gxe,"STRONG",{});var ngt=s(vfe);VAo=r(ngt,"unispeech-sat"),ngt.forEach(t),XAo=r(gxe," \u2014 "),PD=n(gxe,"A",{href:!0});var sgt=s(PD);zAo=r(sgt,"UniSpeechSatForPreTraining"),sgt.forEach(t),WAo=r(gxe," (UniSpeechSat model)"),gxe.forEach(t),QAo=i(O),h1=n(O,"LI",{});var hxe=s(h1);Ffe=n(hxe,"STRONG",{});var lgt=s(Ffe);HAo=r(lgt,"visual_bert"),lgt.forEach(t),UAo=r(hxe," \u2014 "),BD=n(hxe,"A",{href:!0});var igt=s(BD);JAo=r(igt,"VisualBertForPreTraining"),igt.forEach(t),YAo=r(hxe," (VisualBERT model)"),hxe.forEach(t),KAo=i(O),p1=n(O,"LI",{});var pxe=s(p1);Tfe=n(pxe,"STRONG",{});var dgt=s(Tfe);ZAo=r(dgt,"vit_mae"),dgt.forEach(t),e6o=r(pxe," \u2014 "),ID=n(pxe,"A",{href:!0});var cgt=s(ID);o6o=r(cgt,"ViTMAEForPreTraining"),cgt.forEach(t),r6o=r(pxe," (ViTMAE model)"),pxe.forEach(t),t6o=i(O),_1=n(O,"LI",{});var _xe=s(_1);Mfe=n(_xe,"STRONG",{});var fgt=s(Mfe);a6o=r(fgt,"wav2vec2"),fgt.forEach(t),n6o=r(_xe," \u2014 "),ND=n(_xe,"A",{href:!0});var mgt=s(ND);s6o=r(mgt,"Wav2Vec2ForPreTraining"),mgt.forEach(t),l6o=r(_xe," (Wav2Vec2 model)"),_xe.forEach(t),i6o=i(O),u1=n(O,"LI",{});var uxe=s(u1);Efe=n(uxe,"STRONG",{});var ggt=s(Efe);d6o=r(ggt,"wav2vec2-conformer"),ggt.forEach(t),c6o=r(uxe," \u2014 "),qD=n(uxe,"A",{href:!0});var hgt=s(qD);f6o=r(hgt,"Wav2Vec2ConformerForPreTraining"),hgt.forEach(t),m6o=r(uxe," (Wav2Vec2-Conformer model)"),uxe.forEach(t),g6o=i(O),b1=n(O,"LI",{});var bxe=s(b1);Cfe=n(bxe,"STRONG",{});var pgt=s(Cfe);h6o=r(pgt,"xlm"),pgt.forEach(t),p6o=r(bxe," \u2014 "),jD=n(bxe,"A",{href:!0});var _gt=s(jD);_6o=r(_gt,"XLMWithLMHeadModel"),_gt.forEach(t),u6o=r(bxe," (XLM model)"),bxe.forEach(t),b6o=i(O),v1=n(O,"LI",{});var vxe=s(v1);wfe=n(vxe,"STRONG",{});var ugt=s(wfe);v6o=r(ugt,"xlm-roberta"),ugt.forEach(t),F6o=r(vxe," \u2014 "),DD=n(vxe,"A",{href:!0});var bgt=s(DD);T6o=r(bgt,"XLMRobertaForMaskedLM"),bgt.forEach(t),M6o=r(vxe," (XLM-RoBERTa model)"),vxe.forEach(t),E6o=i(O),F1=n(O,"LI",{});var Fxe=s(F1);Afe=n(Fxe,"STRONG",{});var vgt=s(Afe);C6o=r(vgt,"xlm-roberta-xl"),vgt.forEach(t),w6o=r(Fxe," \u2014 "),GD=n(Fxe,"A",{href:!0});var Fgt=s(GD);A6o=r(Fgt,"XLMRobertaXLForMaskedLM"),Fgt.forEach(t),L6o=r(Fxe," (XLM-RoBERTa-XL model)"),Fxe.forEach(t),y6o=i(O),T1=n(O,"LI",{});var Txe=s(T1);Lfe=n(Txe,"STRONG",{});var Tgt=s(Lfe);x6o=r(Tgt,"xlnet"),Tgt.forEach(t),$6o=r(Txe," \u2014 "),OD=n(Txe,"A",{href:!0});var Mgt=s(OD);k6o=r(Mgt,"XLNetLMHeadModel"),Mgt.forEach(t),S6o=r(Txe," (XLNet model)"),Txe.forEach(t),O.forEach(t),R6o=i(sa),M1=n(sa,"P",{});var Mxe=s(M1);P6o=r(Mxe,"The model is set in evaluation mode by default using "),yfe=n(Mxe,"CODE",{});var Egt=s(yfe);B6o=r(Egt,"model.eval()"),Egt.forEach(t),I6o=r(Mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=n(Mxe,"CODE",{});var Cgt=s(xfe);N6o=r(Cgt,"model.train()"),Cgt.forEach(t),Mxe.forEach(t),q6o=i(sa),T(E1.$$.fragment,sa),sa.forEach(t),Js.forEach(t),BGe=i(f),Gi=n(f,"H2",{class:!0});var GVe=s(Gi);C1=n(GVe,"A",{id:!0,class:!0,href:!0});var wgt=s(C1);$fe=n(wgt,"SPAN",{});var Agt=s($fe);T(sy.$$.fragment,Agt),Agt.forEach(t),wgt.forEach(t),j6o=i(GVe),kfe=n(GVe,"SPAN",{});var Lgt=s(kfe);D6o=r(Lgt,"AutoModelForCausalLM"),Lgt.forEach(t),GVe.forEach(t),IGe=i(f),ko=n(f,"DIV",{class:!0});var Ys=s(ko);T(ly.$$.fragment,Ys),G6o=i(Ys),Oi=n(Ys,"P",{});var foe=s(Oi);O6o=r(foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VD=n(foe,"A",{href:!0});var ygt=s(VD);V6o=r(ygt,"from_pretrained()"),ygt.forEach(t),X6o=r(foe," class method or the "),XD=n(foe,"A",{href:!0});var xgt=s(XD);z6o=r(xgt,"from_config()"),xgt.forEach(t),W6o=r(foe,` class
method.`),foe.forEach(t),Q6o=i(Ys),iy=n(Ys,"P",{});var OVe=s(iy);H6o=r(OVe,"This class cannot be instantiated directly using "),Sfe=n(OVe,"CODE",{});var $gt=s(Sfe);U6o=r($gt,"__init__()"),$gt.forEach(t),J6o=r(OVe," (throws an error)."),OVe.forEach(t),Y6o=i(Ys),it=n(Ys,"DIV",{class:!0});var kA=s(it);T(dy.$$.fragment,kA),K6o=i(kA),Rfe=n(kA,"P",{});var kgt=s(Rfe);Z6o=r(kgt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kgt.forEach(t),eLo=i(kA),Vi=n(kA,"P",{});var moe=s(Vi);oLo=r(moe,`Note:
Loading a model from its configuration file does `),Pfe=n(moe,"STRONG",{});var Sgt=s(Pfe);rLo=r(Sgt,"not"),Sgt.forEach(t),tLo=r(moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=n(moe,"A",{href:!0});var Rgt=s(zD);aLo=r(Rgt,"from_pretrained()"),Rgt.forEach(t),nLo=r(moe," to load the model weights."),moe.forEach(t),sLo=i(kA),T(w1.$$.fragment,kA),kA.forEach(t),lLo=i(Ys),Ke=n(Ys,"DIV",{class:!0});var la=s(Ke);T(cy.$$.fragment,la),iLo=i(la),Bfe=n(la,"P",{});var Pgt=s(Bfe);dLo=r(Pgt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Pgt.forEach(t),cLo=i(la),Ba=n(la,"P",{});var SA=s(Ba);fLo=r(SA,"The model class to instantiate is selected based on the "),Ife=n(SA,"CODE",{});var Bgt=s(Ife);mLo=r(Bgt,"model_type"),Bgt.forEach(t),gLo=r(SA,` property of the config object (either
passed as an argument or loaded from `),Nfe=n(SA,"CODE",{});var Igt=s(Nfe);hLo=r(Igt,"pretrained_model_name_or_path"),Igt.forEach(t),pLo=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qfe=n(SA,"CODE",{});var Ngt=s(qfe);_Lo=r(Ngt,"pretrained_model_name_or_path"),Ngt.forEach(t),uLo=r(SA,":"),SA.forEach(t),bLo=i(la),z=n(la,"UL",{});var W=s(z);A1=n(W,"LI",{});var Exe=s(A1);jfe=n(Exe,"STRONG",{});var qgt=s(jfe);vLo=r(qgt,"bart"),qgt.forEach(t),FLo=r(Exe," \u2014 "),WD=n(Exe,"A",{href:!0});var jgt=s(WD);TLo=r(jgt,"BartForCausalLM"),jgt.forEach(t),MLo=r(Exe," (BART model)"),Exe.forEach(t),ELo=i(W),L1=n(W,"LI",{});var Cxe=s(L1);Dfe=n(Cxe,"STRONG",{});var Dgt=s(Dfe);CLo=r(Dgt,"bert"),Dgt.forEach(t),wLo=r(Cxe," \u2014 "),QD=n(Cxe,"A",{href:!0});var Ggt=s(QD);ALo=r(Ggt,"BertLMHeadModel"),Ggt.forEach(t),LLo=r(Cxe," (BERT model)"),Cxe.forEach(t),yLo=i(W),y1=n(W,"LI",{});var wxe=s(y1);Gfe=n(wxe,"STRONG",{});var Ogt=s(Gfe);xLo=r(Ogt,"bert-generation"),Ogt.forEach(t),$Lo=r(wxe," \u2014 "),HD=n(wxe,"A",{href:!0});var Vgt=s(HD);kLo=r(Vgt,"BertGenerationDecoder"),Vgt.forEach(t),SLo=r(wxe," (Bert Generation model)"),wxe.forEach(t),RLo=i(W),x1=n(W,"LI",{});var Axe=s(x1);Ofe=n(Axe,"STRONG",{});var Xgt=s(Ofe);PLo=r(Xgt,"big_bird"),Xgt.forEach(t),BLo=r(Axe," \u2014 "),UD=n(Axe,"A",{href:!0});var zgt=s(UD);ILo=r(zgt,"BigBirdForCausalLM"),zgt.forEach(t),NLo=r(Axe," (BigBird model)"),Axe.forEach(t),qLo=i(W),$1=n(W,"LI",{});var Lxe=s($1);Vfe=n(Lxe,"STRONG",{});var Wgt=s(Vfe);jLo=r(Wgt,"bigbird_pegasus"),Wgt.forEach(t),DLo=r(Lxe," \u2014 "),JD=n(Lxe,"A",{href:!0});var Qgt=s(JD);GLo=r(Qgt,"BigBirdPegasusForCausalLM"),Qgt.forEach(t),OLo=r(Lxe," (BigBird-Pegasus model)"),Lxe.forEach(t),VLo=i(W),k1=n(W,"LI",{});var yxe=s(k1);Xfe=n(yxe,"STRONG",{});var Hgt=s(Xfe);XLo=r(Hgt,"blenderbot"),Hgt.forEach(t),zLo=r(yxe," \u2014 "),YD=n(yxe,"A",{href:!0});var Ugt=s(YD);WLo=r(Ugt,"BlenderbotForCausalLM"),Ugt.forEach(t),QLo=r(yxe," (Blenderbot model)"),yxe.forEach(t),HLo=i(W),S1=n(W,"LI",{});var xxe=s(S1);zfe=n(xxe,"STRONG",{});var Jgt=s(zfe);ULo=r(Jgt,"blenderbot-small"),Jgt.forEach(t),JLo=r(xxe," \u2014 "),KD=n(xxe,"A",{href:!0});var Ygt=s(KD);YLo=r(Ygt,"BlenderbotSmallForCausalLM"),Ygt.forEach(t),KLo=r(xxe," (BlenderbotSmall model)"),xxe.forEach(t),ZLo=i(W),R1=n(W,"LI",{});var $xe=s(R1);Wfe=n($xe,"STRONG",{});var Kgt=s(Wfe);eyo=r(Kgt,"bloom"),Kgt.forEach(t),oyo=r($xe," \u2014 "),ZD=n($xe,"A",{href:!0});var Zgt=s(ZD);ryo=r(Zgt,"BloomForCausalLM"),Zgt.forEach(t),tyo=r($xe," (BLOOM model)"),$xe.forEach(t),ayo=i(W),P1=n(W,"LI",{});var kxe=s(P1);Qfe=n(kxe,"STRONG",{});var eht=s(Qfe);nyo=r(eht,"camembert"),eht.forEach(t),syo=r(kxe," \u2014 "),eG=n(kxe,"A",{href:!0});var oht=s(eG);lyo=r(oht,"CamembertForCausalLM"),oht.forEach(t),iyo=r(kxe," (CamemBERT model)"),kxe.forEach(t),dyo=i(W),B1=n(W,"LI",{});var Sxe=s(B1);Hfe=n(Sxe,"STRONG",{});var rht=s(Hfe);cyo=r(rht,"ctrl"),rht.forEach(t),fyo=r(Sxe," \u2014 "),oG=n(Sxe,"A",{href:!0});var tht=s(oG);myo=r(tht,"CTRLLMHeadModel"),tht.forEach(t),gyo=r(Sxe," (CTRL model)"),Sxe.forEach(t),hyo=i(W),I1=n(W,"LI",{});var Rxe=s(I1);Ufe=n(Rxe,"STRONG",{});var aht=s(Ufe);pyo=r(aht,"data2vec-text"),aht.forEach(t),_yo=r(Rxe," \u2014 "),rG=n(Rxe,"A",{href:!0});var nht=s(rG);uyo=r(nht,"Data2VecTextForCausalLM"),nht.forEach(t),byo=r(Rxe," (Data2VecText model)"),Rxe.forEach(t),vyo=i(W),N1=n(W,"LI",{});var Pxe=s(N1);Jfe=n(Pxe,"STRONG",{});var sht=s(Jfe);Fyo=r(sht,"electra"),sht.forEach(t),Tyo=r(Pxe," \u2014 "),tG=n(Pxe,"A",{href:!0});var lht=s(tG);Myo=r(lht,"ElectraForCausalLM"),lht.forEach(t),Eyo=r(Pxe," (ELECTRA model)"),Pxe.forEach(t),Cyo=i(W),q1=n(W,"LI",{});var Bxe=s(q1);Yfe=n(Bxe,"STRONG",{});var iht=s(Yfe);wyo=r(iht,"gpt2"),iht.forEach(t),Ayo=r(Bxe," \u2014 "),aG=n(Bxe,"A",{href:!0});var dht=s(aG);Lyo=r(dht,"GPT2LMHeadModel"),dht.forEach(t),yyo=r(Bxe," (OpenAI GPT-2 model)"),Bxe.forEach(t),xyo=i(W),j1=n(W,"LI",{});var Ixe=s(j1);Kfe=n(Ixe,"STRONG",{});var cht=s(Kfe);$yo=r(cht,"gpt_neo"),cht.forEach(t),kyo=r(Ixe," \u2014 "),nG=n(Ixe,"A",{href:!0});var fht=s(nG);Syo=r(fht,"GPTNeoForCausalLM"),fht.forEach(t),Ryo=r(Ixe," (GPT Neo model)"),Ixe.forEach(t),Pyo=i(W),D1=n(W,"LI",{});var Nxe=s(D1);Zfe=n(Nxe,"STRONG",{});var mht=s(Zfe);Byo=r(mht,"gpt_neox"),mht.forEach(t),Iyo=r(Nxe," \u2014 "),sG=n(Nxe,"A",{href:!0});var ght=s(sG);Nyo=r(ght,"GPTNeoXForCausalLM"),ght.forEach(t),qyo=r(Nxe," (GPT NeoX model)"),Nxe.forEach(t),jyo=i(W),G1=n(W,"LI",{});var qxe=s(G1);eme=n(qxe,"STRONG",{});var hht=s(eme);Dyo=r(hht,"gptj"),hht.forEach(t),Gyo=r(qxe," \u2014 "),lG=n(qxe,"A",{href:!0});var pht=s(lG);Oyo=r(pht,"GPTJForCausalLM"),pht.forEach(t),Vyo=r(qxe," (GPT-J model)"),qxe.forEach(t),Xyo=i(W),O1=n(W,"LI",{});var jxe=s(O1);ome=n(jxe,"STRONG",{});var _ht=s(ome);zyo=r(_ht,"marian"),_ht.forEach(t),Wyo=r(jxe," \u2014 "),iG=n(jxe,"A",{href:!0});var uht=s(iG);Qyo=r(uht,"MarianForCausalLM"),uht.forEach(t),Hyo=r(jxe," (Marian model)"),jxe.forEach(t),Uyo=i(W),V1=n(W,"LI",{});var Dxe=s(V1);rme=n(Dxe,"STRONG",{});var bht=s(rme);Jyo=r(bht,"mbart"),bht.forEach(t),Yyo=r(Dxe," \u2014 "),dG=n(Dxe,"A",{href:!0});var vht=s(dG);Kyo=r(vht,"MBartForCausalLM"),vht.forEach(t),Zyo=r(Dxe," (mBART model)"),Dxe.forEach(t),e8o=i(W),X1=n(W,"LI",{});var Gxe=s(X1);tme=n(Gxe,"STRONG",{});var Fht=s(tme);o8o=r(Fht,"megatron-bert"),Fht.forEach(t),r8o=r(Gxe," \u2014 "),cG=n(Gxe,"A",{href:!0});var Tht=s(cG);t8o=r(Tht,"MegatronBertForCausalLM"),Tht.forEach(t),a8o=r(Gxe," (Megatron-BERT model)"),Gxe.forEach(t),n8o=i(W),z1=n(W,"LI",{});var Oxe=s(z1);ame=n(Oxe,"STRONG",{});var Mht=s(ame);s8o=r(Mht,"openai-gpt"),Mht.forEach(t),l8o=r(Oxe," \u2014 "),fG=n(Oxe,"A",{href:!0});var Eht=s(fG);i8o=r(Eht,"OpenAIGPTLMHeadModel"),Eht.forEach(t),d8o=r(Oxe," (OpenAI GPT model)"),Oxe.forEach(t),c8o=i(W),W1=n(W,"LI",{});var Vxe=s(W1);nme=n(Vxe,"STRONG",{});var Cht=s(nme);f8o=r(Cht,"opt"),Cht.forEach(t),m8o=r(Vxe," \u2014 "),mG=n(Vxe,"A",{href:!0});var wht=s(mG);g8o=r(wht,"OPTForCausalLM"),wht.forEach(t),h8o=r(Vxe," (OPT model)"),Vxe.forEach(t),p8o=i(W),Q1=n(W,"LI",{});var Xxe=s(Q1);sme=n(Xxe,"STRONG",{});var Aht=s(sme);_8o=r(Aht,"pegasus"),Aht.forEach(t),u8o=r(Xxe," \u2014 "),gG=n(Xxe,"A",{href:!0});var Lht=s(gG);b8o=r(Lht,"PegasusForCausalLM"),Lht.forEach(t),v8o=r(Xxe," (Pegasus model)"),Xxe.forEach(t),F8o=i(W),H1=n(W,"LI",{});var zxe=s(H1);lme=n(zxe,"STRONG",{});var yht=s(lme);T8o=r(yht,"plbart"),yht.forEach(t),M8o=r(zxe," \u2014 "),hG=n(zxe,"A",{href:!0});var xht=s(hG);E8o=r(xht,"PLBartForCausalLM"),xht.forEach(t),C8o=r(zxe," (PLBart model)"),zxe.forEach(t),w8o=i(W),U1=n(W,"LI",{});var Wxe=s(U1);ime=n(Wxe,"STRONG",{});var $ht=s(ime);A8o=r($ht,"prophetnet"),$ht.forEach(t),L8o=r(Wxe," \u2014 "),pG=n(Wxe,"A",{href:!0});var kht=s(pG);y8o=r(kht,"ProphetNetForCausalLM"),kht.forEach(t),x8o=r(Wxe," (ProphetNet model)"),Wxe.forEach(t),$8o=i(W),J1=n(W,"LI",{});var Qxe=s(J1);dme=n(Qxe,"STRONG",{});var Sht=s(dme);k8o=r(Sht,"qdqbert"),Sht.forEach(t),S8o=r(Qxe," \u2014 "),_G=n(Qxe,"A",{href:!0});var Rht=s(_G);R8o=r(Rht,"QDQBertLMHeadModel"),Rht.forEach(t),P8o=r(Qxe," (QDQBert model)"),Qxe.forEach(t),B8o=i(W),Y1=n(W,"LI",{});var Hxe=s(Y1);cme=n(Hxe,"STRONG",{});var Pht=s(cme);I8o=r(Pht,"reformer"),Pht.forEach(t),N8o=r(Hxe," \u2014 "),uG=n(Hxe,"A",{href:!0});var Bht=s(uG);q8o=r(Bht,"ReformerModelWithLMHead"),Bht.forEach(t),j8o=r(Hxe," (Reformer model)"),Hxe.forEach(t),D8o=i(W),K1=n(W,"LI",{});var Uxe=s(K1);fme=n(Uxe,"STRONG",{});var Iht=s(fme);G8o=r(Iht,"rembert"),Iht.forEach(t),O8o=r(Uxe," \u2014 "),bG=n(Uxe,"A",{href:!0});var Nht=s(bG);V8o=r(Nht,"RemBertForCausalLM"),Nht.forEach(t),X8o=r(Uxe," (RemBERT model)"),Uxe.forEach(t),z8o=i(W),Z1=n(W,"LI",{});var Jxe=s(Z1);mme=n(Jxe,"STRONG",{});var qht=s(mme);W8o=r(qht,"roberta"),qht.forEach(t),Q8o=r(Jxe," \u2014 "),vG=n(Jxe,"A",{href:!0});var jht=s(vG);H8o=r(jht,"RobertaForCausalLM"),jht.forEach(t),U8o=r(Jxe," (RoBERTa model)"),Jxe.forEach(t),J8o=i(W),eb=n(W,"LI",{});var Yxe=s(eb);gme=n(Yxe,"STRONG",{});var Dht=s(gme);Y8o=r(Dht,"roformer"),Dht.forEach(t),K8o=r(Yxe," \u2014 "),FG=n(Yxe,"A",{href:!0});var Ght=s(FG);Z8o=r(Ght,"RoFormerForCausalLM"),Ght.forEach(t),e9o=r(Yxe," (RoFormer model)"),Yxe.forEach(t),o9o=i(W),ob=n(W,"LI",{});var Kxe=s(ob);hme=n(Kxe,"STRONG",{});var Oht=s(hme);r9o=r(Oht,"speech_to_text_2"),Oht.forEach(t),t9o=r(Kxe," \u2014 "),TG=n(Kxe,"A",{href:!0});var Vht=s(TG);a9o=r(Vht,"Speech2Text2ForCausalLM"),Vht.forEach(t),n9o=r(Kxe," (Speech2Text2 model)"),Kxe.forEach(t),s9o=i(W),rb=n(W,"LI",{});var Zxe=s(rb);pme=n(Zxe,"STRONG",{});var Xht=s(pme);l9o=r(Xht,"transfo-xl"),Xht.forEach(t),i9o=r(Zxe," \u2014 "),MG=n(Zxe,"A",{href:!0});var zht=s(MG);d9o=r(zht,"TransfoXLLMHeadModel"),zht.forEach(t),c9o=r(Zxe," (Transformer-XL model)"),Zxe.forEach(t),f9o=i(W),tb=n(W,"LI",{});var e$e=s(tb);_me=n(e$e,"STRONG",{});var Wht=s(_me);m9o=r(Wht,"trocr"),Wht.forEach(t),g9o=r(e$e," \u2014 "),EG=n(e$e,"A",{href:!0});var Qht=s(EG);h9o=r(Qht,"TrOCRForCausalLM"),Qht.forEach(t),p9o=r(e$e," (TrOCR model)"),e$e.forEach(t),_9o=i(W),ab=n(W,"LI",{});var o$e=s(ab);ume=n(o$e,"STRONG",{});var Hht=s(ume);u9o=r(Hht,"xglm"),Hht.forEach(t),b9o=r(o$e," \u2014 "),CG=n(o$e,"A",{href:!0});var Uht=s(CG);v9o=r(Uht,"XGLMForCausalLM"),Uht.forEach(t),F9o=r(o$e," (XGLM model)"),o$e.forEach(t),T9o=i(W),nb=n(W,"LI",{});var r$e=s(nb);bme=n(r$e,"STRONG",{});var Jht=s(bme);M9o=r(Jht,"xlm"),Jht.forEach(t),E9o=r(r$e," \u2014 "),wG=n(r$e,"A",{href:!0});var Yht=s(wG);C9o=r(Yht,"XLMWithLMHeadModel"),Yht.forEach(t),w9o=r(r$e," (XLM model)"),r$e.forEach(t),A9o=i(W),sb=n(W,"LI",{});var t$e=s(sb);vme=n(t$e,"STRONG",{});var Kht=s(vme);L9o=r(Kht,"xlm-prophetnet"),Kht.forEach(t),y9o=r(t$e," \u2014 "),AG=n(t$e,"A",{href:!0});var Zht=s(AG);x9o=r(Zht,"XLMProphetNetForCausalLM"),Zht.forEach(t),$9o=r(t$e," (XLM-ProphetNet model)"),t$e.forEach(t),k9o=i(W),lb=n(W,"LI",{});var a$e=s(lb);Fme=n(a$e,"STRONG",{});var ept=s(Fme);S9o=r(ept,"xlm-roberta"),ept.forEach(t),R9o=r(a$e," \u2014 "),LG=n(a$e,"A",{href:!0});var opt=s(LG);P9o=r(opt,"XLMRobertaForCausalLM"),opt.forEach(t),B9o=r(a$e," (XLM-RoBERTa model)"),a$e.forEach(t),I9o=i(W),ib=n(W,"LI",{});var n$e=s(ib);Tme=n(n$e,"STRONG",{});var rpt=s(Tme);N9o=r(rpt,"xlm-roberta-xl"),rpt.forEach(t),q9o=r(n$e," \u2014 "),yG=n(n$e,"A",{href:!0});var tpt=s(yG);j9o=r(tpt,"XLMRobertaXLForCausalLM"),tpt.forEach(t),D9o=r(n$e," (XLM-RoBERTa-XL model)"),n$e.forEach(t),G9o=i(W),db=n(W,"LI",{});var s$e=s(db);Mme=n(s$e,"STRONG",{});var apt=s(Mme);O9o=r(apt,"xlnet"),apt.forEach(t),V9o=r(s$e," \u2014 "),xG=n(s$e,"A",{href:!0});var npt=s(xG);X9o=r(npt,"XLNetLMHeadModel"),npt.forEach(t),z9o=r(s$e," (XLNet model)"),s$e.forEach(t),W.forEach(t),W9o=i(la),cb=n(la,"P",{});var l$e=s(cb);Q9o=r(l$e,"The model is set in evaluation mode by default using "),Eme=n(l$e,"CODE",{});var spt=s(Eme);H9o=r(spt,"model.eval()"),spt.forEach(t),U9o=r(l$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cme=n(l$e,"CODE",{});var lpt=s(Cme);J9o=r(lpt,"model.train()"),lpt.forEach(t),l$e.forEach(t),Y9o=i(la),T(fb.$$.fragment,la),la.forEach(t),Ys.forEach(t),NGe=i(f),Xi=n(f,"H2",{class:!0});var VVe=s(Xi);mb=n(VVe,"A",{id:!0,class:!0,href:!0});var ipt=s(mb);wme=n(ipt,"SPAN",{});var dpt=s(wme);T(fy.$$.fragment,dpt),dpt.forEach(t),ipt.forEach(t),K9o=i(VVe),Ame=n(VVe,"SPAN",{});var cpt=s(Ame);Z9o=r(cpt,"AutoModelForMaskedLM"),cpt.forEach(t),VVe.forEach(t),qGe=i(f),So=n(f,"DIV",{class:!0});var Ks=s(So);T(my.$$.fragment,Ks),exo=i(Ks),zi=n(Ks,"P",{});var goe=s(zi);oxo=r(goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$G=n(goe,"A",{href:!0});var fpt=s($G);rxo=r(fpt,"from_pretrained()"),fpt.forEach(t),txo=r(goe," class method or the "),kG=n(goe,"A",{href:!0});var mpt=s(kG);axo=r(mpt,"from_config()"),mpt.forEach(t),nxo=r(goe,` class
method.`),goe.forEach(t),sxo=i(Ks),gy=n(Ks,"P",{});var XVe=s(gy);lxo=r(XVe,"This class cannot be instantiated directly using "),Lme=n(XVe,"CODE",{});var gpt=s(Lme);ixo=r(gpt,"__init__()"),gpt.forEach(t),dxo=r(XVe," (throws an error)."),XVe.forEach(t),cxo=i(Ks),dt=n(Ks,"DIV",{class:!0});var RA=s(dt);T(hy.$$.fragment,RA),fxo=i(RA),yme=n(RA,"P",{});var hpt=s(yme);mxo=r(hpt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),hpt.forEach(t),gxo=i(RA),Wi=n(RA,"P",{});var hoe=s(Wi);hxo=r(hoe,`Note:
Loading a model from its configuration file does `),xme=n(hoe,"STRONG",{});var ppt=s(xme);pxo=r(ppt,"not"),ppt.forEach(t),_xo=r(hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=n(hoe,"A",{href:!0});var _pt=s(SG);uxo=r(_pt,"from_pretrained()"),_pt.forEach(t),bxo=r(hoe," to load the model weights."),hoe.forEach(t),vxo=i(RA),T(gb.$$.fragment,RA),RA.forEach(t),Fxo=i(Ks),Ze=n(Ks,"DIV",{class:!0});var ia=s(Ze);T(py.$$.fragment,ia),Txo=i(ia),$me=n(ia,"P",{});var upt=s($me);Mxo=r(upt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),upt.forEach(t),Exo=i(ia),Ia=n(ia,"P",{});var PA=s(Ia);Cxo=r(PA,"The model class to instantiate is selected based on the "),kme=n(PA,"CODE",{});var bpt=s(kme);wxo=r(bpt,"model_type"),bpt.forEach(t),Axo=r(PA,` property of the config object (either
passed as an argument or loaded from `),Sme=n(PA,"CODE",{});var vpt=s(Sme);Lxo=r(vpt,"pretrained_model_name_or_path"),vpt.forEach(t),yxo=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rme=n(PA,"CODE",{});var Fpt=s(Rme);xxo=r(Fpt,"pretrained_model_name_or_path"),Fpt.forEach(t),$xo=r(PA,":"),PA.forEach(t),kxo=i(ia),Q=n(ia,"UL",{});var U=s(Q);hb=n(U,"LI",{});var i$e=s(hb);Pme=n(i$e,"STRONG",{});var Tpt=s(Pme);Sxo=r(Tpt,"albert"),Tpt.forEach(t),Rxo=r(i$e," \u2014 "),RG=n(i$e,"A",{href:!0});var Mpt=s(RG);Pxo=r(Mpt,"AlbertForMaskedLM"),Mpt.forEach(t),Bxo=r(i$e," (ALBERT model)"),i$e.forEach(t),Ixo=i(U),pb=n(U,"LI",{});var d$e=s(pb);Bme=n(d$e,"STRONG",{});var Ept=s(Bme);Nxo=r(Ept,"bart"),Ept.forEach(t),qxo=r(d$e," \u2014 "),PG=n(d$e,"A",{href:!0});var Cpt=s(PG);jxo=r(Cpt,"BartForConditionalGeneration"),Cpt.forEach(t),Dxo=r(d$e," (BART model)"),d$e.forEach(t),Gxo=i(U),_b=n(U,"LI",{});var c$e=s(_b);Ime=n(c$e,"STRONG",{});var wpt=s(Ime);Oxo=r(wpt,"bert"),wpt.forEach(t),Vxo=r(c$e," \u2014 "),BG=n(c$e,"A",{href:!0});var Apt=s(BG);Xxo=r(Apt,"BertForMaskedLM"),Apt.forEach(t),zxo=r(c$e," (BERT model)"),c$e.forEach(t),Wxo=i(U),ub=n(U,"LI",{});var f$e=s(ub);Nme=n(f$e,"STRONG",{});var Lpt=s(Nme);Qxo=r(Lpt,"big_bird"),Lpt.forEach(t),Hxo=r(f$e," \u2014 "),IG=n(f$e,"A",{href:!0});var ypt=s(IG);Uxo=r(ypt,"BigBirdForMaskedLM"),ypt.forEach(t),Jxo=r(f$e," (BigBird model)"),f$e.forEach(t),Yxo=i(U),bb=n(U,"LI",{});var m$e=s(bb);qme=n(m$e,"STRONG",{});var xpt=s(qme);Kxo=r(xpt,"camembert"),xpt.forEach(t),Zxo=r(m$e," \u2014 "),NG=n(m$e,"A",{href:!0});var $pt=s(NG);e$o=r($pt,"CamembertForMaskedLM"),$pt.forEach(t),o$o=r(m$e," (CamemBERT model)"),m$e.forEach(t),r$o=i(U),vb=n(U,"LI",{});var g$e=s(vb);jme=n(g$e,"STRONG",{});var kpt=s(jme);t$o=r(kpt,"convbert"),kpt.forEach(t),a$o=r(g$e," \u2014 "),qG=n(g$e,"A",{href:!0});var Spt=s(qG);n$o=r(Spt,"ConvBertForMaskedLM"),Spt.forEach(t),s$o=r(g$e," (ConvBERT model)"),g$e.forEach(t),l$o=i(U),Fb=n(U,"LI",{});var h$e=s(Fb);Dme=n(h$e,"STRONG",{});var Rpt=s(Dme);i$o=r(Rpt,"data2vec-text"),Rpt.forEach(t),d$o=r(h$e," \u2014 "),jG=n(h$e,"A",{href:!0});var Ppt=s(jG);c$o=r(Ppt,"Data2VecTextForMaskedLM"),Ppt.forEach(t),f$o=r(h$e," (Data2VecText model)"),h$e.forEach(t),m$o=i(U),Tb=n(U,"LI",{});var p$e=s(Tb);Gme=n(p$e,"STRONG",{});var Bpt=s(Gme);g$o=r(Bpt,"deberta"),Bpt.forEach(t),h$o=r(p$e," \u2014 "),DG=n(p$e,"A",{href:!0});var Ipt=s(DG);p$o=r(Ipt,"DebertaForMaskedLM"),Ipt.forEach(t),_$o=r(p$e," (DeBERTa model)"),p$e.forEach(t),u$o=i(U),Mb=n(U,"LI",{});var _$e=s(Mb);Ome=n(_$e,"STRONG",{});var Npt=s(Ome);b$o=r(Npt,"deberta-v2"),Npt.forEach(t),v$o=r(_$e," \u2014 "),GG=n(_$e,"A",{href:!0});var qpt=s(GG);F$o=r(qpt,"DebertaV2ForMaskedLM"),qpt.forEach(t),T$o=r(_$e," (DeBERTa-v2 model)"),_$e.forEach(t),M$o=i(U),Eb=n(U,"LI",{});var u$e=s(Eb);Vme=n(u$e,"STRONG",{});var jpt=s(Vme);E$o=r(jpt,"distilbert"),jpt.forEach(t),C$o=r(u$e," \u2014 "),OG=n(u$e,"A",{href:!0});var Dpt=s(OG);w$o=r(Dpt,"DistilBertForMaskedLM"),Dpt.forEach(t),A$o=r(u$e," (DistilBERT model)"),u$e.forEach(t),L$o=i(U),Cb=n(U,"LI",{});var b$e=s(Cb);Xme=n(b$e,"STRONG",{});var Gpt=s(Xme);y$o=r(Gpt,"electra"),Gpt.forEach(t),x$o=r(b$e," \u2014 "),VG=n(b$e,"A",{href:!0});var Opt=s(VG);$$o=r(Opt,"ElectraForMaskedLM"),Opt.forEach(t),k$o=r(b$e," (ELECTRA model)"),b$e.forEach(t),S$o=i(U),wb=n(U,"LI",{});var v$e=s(wb);zme=n(v$e,"STRONG",{});var Vpt=s(zme);R$o=r(Vpt,"flaubert"),Vpt.forEach(t),P$o=r(v$e," \u2014 "),XG=n(v$e,"A",{href:!0});var Xpt=s(XG);B$o=r(Xpt,"FlaubertWithLMHeadModel"),Xpt.forEach(t),I$o=r(v$e," (FlauBERT model)"),v$e.forEach(t),N$o=i(U),Ab=n(U,"LI",{});var F$e=s(Ab);Wme=n(F$e,"STRONG",{});var zpt=s(Wme);q$o=r(zpt,"fnet"),zpt.forEach(t),j$o=r(F$e," \u2014 "),zG=n(F$e,"A",{href:!0});var Wpt=s(zG);D$o=r(Wpt,"FNetForMaskedLM"),Wpt.forEach(t),G$o=r(F$e," (FNet model)"),F$e.forEach(t),O$o=i(U),Lb=n(U,"LI",{});var T$e=s(Lb);Qme=n(T$e,"STRONG",{});var Qpt=s(Qme);V$o=r(Qpt,"funnel"),Qpt.forEach(t),X$o=r(T$e," \u2014 "),WG=n(T$e,"A",{href:!0});var Hpt=s(WG);z$o=r(Hpt,"FunnelForMaskedLM"),Hpt.forEach(t),W$o=r(T$e," (Funnel Transformer model)"),T$e.forEach(t),Q$o=i(U),yb=n(U,"LI",{});var M$e=s(yb);Hme=n(M$e,"STRONG",{});var Upt=s(Hme);H$o=r(Upt,"ibert"),Upt.forEach(t),U$o=r(M$e," \u2014 "),QG=n(M$e,"A",{href:!0});var Jpt=s(QG);J$o=r(Jpt,"IBertForMaskedLM"),Jpt.forEach(t),Y$o=r(M$e," (I-BERT model)"),M$e.forEach(t),K$o=i(U),xb=n(U,"LI",{});var E$e=s(xb);Ume=n(E$e,"STRONG",{});var Ypt=s(Ume);Z$o=r(Ypt,"layoutlm"),Ypt.forEach(t),eko=r(E$e," \u2014 "),HG=n(E$e,"A",{href:!0});var Kpt=s(HG);oko=r(Kpt,"LayoutLMForMaskedLM"),Kpt.forEach(t),rko=r(E$e," (LayoutLM model)"),E$e.forEach(t),tko=i(U),$b=n(U,"LI",{});var C$e=s($b);Jme=n(C$e,"STRONG",{});var Zpt=s(Jme);ako=r(Zpt,"longformer"),Zpt.forEach(t),nko=r(C$e," \u2014 "),UG=n(C$e,"A",{href:!0});var e_t=s(UG);sko=r(e_t,"LongformerForMaskedLM"),e_t.forEach(t),lko=r(C$e," (Longformer model)"),C$e.forEach(t),iko=i(U),kb=n(U,"LI",{});var w$e=s(kb);Yme=n(w$e,"STRONG",{});var o_t=s(Yme);dko=r(o_t,"luke"),o_t.forEach(t),cko=r(w$e," \u2014 "),JG=n(w$e,"A",{href:!0});var r_t=s(JG);fko=r(r_t,"LukeForMaskedLM"),r_t.forEach(t),mko=r(w$e," (LUKE model)"),w$e.forEach(t),gko=i(U),Sb=n(U,"LI",{});var A$e=s(Sb);Kme=n(A$e,"STRONG",{});var t_t=s(Kme);hko=r(t_t,"mbart"),t_t.forEach(t),pko=r(A$e," \u2014 "),YG=n(A$e,"A",{href:!0});var a_t=s(YG);_ko=r(a_t,"MBartForConditionalGeneration"),a_t.forEach(t),uko=r(A$e," (mBART model)"),A$e.forEach(t),bko=i(U),Rb=n(U,"LI",{});var L$e=s(Rb);Zme=n(L$e,"STRONG",{});var n_t=s(Zme);vko=r(n_t,"megatron-bert"),n_t.forEach(t),Fko=r(L$e," \u2014 "),KG=n(L$e,"A",{href:!0});var s_t=s(KG);Tko=r(s_t,"MegatronBertForMaskedLM"),s_t.forEach(t),Mko=r(L$e," (Megatron-BERT model)"),L$e.forEach(t),Eko=i(U),Pb=n(U,"LI",{});var y$e=s(Pb);ege=n(y$e,"STRONG",{});var l_t=s(ege);Cko=r(l_t,"mobilebert"),l_t.forEach(t),wko=r(y$e," \u2014 "),ZG=n(y$e,"A",{href:!0});var i_t=s(ZG);Ako=r(i_t,"MobileBertForMaskedLM"),i_t.forEach(t),Lko=r(y$e," (MobileBERT model)"),y$e.forEach(t),yko=i(U),Bb=n(U,"LI",{});var x$e=s(Bb);oge=n(x$e,"STRONG",{});var d_t=s(oge);xko=r(d_t,"mpnet"),d_t.forEach(t),$ko=r(x$e," \u2014 "),eO=n(x$e,"A",{href:!0});var c_t=s(eO);kko=r(c_t,"MPNetForMaskedLM"),c_t.forEach(t),Sko=r(x$e," (MPNet model)"),x$e.forEach(t),Rko=i(U),Ib=n(U,"LI",{});var $$e=s(Ib);rge=n($$e,"STRONG",{});var f_t=s(rge);Pko=r(f_t,"nystromformer"),f_t.forEach(t),Bko=r($$e," \u2014 "),oO=n($$e,"A",{href:!0});var m_t=s(oO);Iko=r(m_t,"NystromformerForMaskedLM"),m_t.forEach(t),Nko=r($$e," (Nystr\xF6mformer model)"),$$e.forEach(t),qko=i(U),Nb=n(U,"LI",{});var k$e=s(Nb);tge=n(k$e,"STRONG",{});var g_t=s(tge);jko=r(g_t,"perceiver"),g_t.forEach(t),Dko=r(k$e," \u2014 "),rO=n(k$e,"A",{href:!0});var h_t=s(rO);Gko=r(h_t,"PerceiverForMaskedLM"),h_t.forEach(t),Oko=r(k$e," (Perceiver model)"),k$e.forEach(t),Vko=i(U),qb=n(U,"LI",{});var S$e=s(qb);age=n(S$e,"STRONG",{});var p_t=s(age);Xko=r(p_t,"qdqbert"),p_t.forEach(t),zko=r(S$e," \u2014 "),tO=n(S$e,"A",{href:!0});var __t=s(tO);Wko=r(__t,"QDQBertForMaskedLM"),__t.forEach(t),Qko=r(S$e," (QDQBert model)"),S$e.forEach(t),Hko=i(U),jb=n(U,"LI",{});var R$e=s(jb);nge=n(R$e,"STRONG",{});var u_t=s(nge);Uko=r(u_t,"reformer"),u_t.forEach(t),Jko=r(R$e," \u2014 "),aO=n(R$e,"A",{href:!0});var b_t=s(aO);Yko=r(b_t,"ReformerForMaskedLM"),b_t.forEach(t),Kko=r(R$e," (Reformer model)"),R$e.forEach(t),Zko=i(U),Db=n(U,"LI",{});var P$e=s(Db);sge=n(P$e,"STRONG",{});var v_t=s(sge);eSo=r(v_t,"rembert"),v_t.forEach(t),oSo=r(P$e," \u2014 "),nO=n(P$e,"A",{href:!0});var F_t=s(nO);rSo=r(F_t,"RemBertForMaskedLM"),F_t.forEach(t),tSo=r(P$e," (RemBERT model)"),P$e.forEach(t),aSo=i(U),Gb=n(U,"LI",{});var B$e=s(Gb);lge=n(B$e,"STRONG",{});var T_t=s(lge);nSo=r(T_t,"roberta"),T_t.forEach(t),sSo=r(B$e," \u2014 "),sO=n(B$e,"A",{href:!0});var M_t=s(sO);lSo=r(M_t,"RobertaForMaskedLM"),M_t.forEach(t),iSo=r(B$e," (RoBERTa model)"),B$e.forEach(t),dSo=i(U),Ob=n(U,"LI",{});var I$e=s(Ob);ige=n(I$e,"STRONG",{});var E_t=s(ige);cSo=r(E_t,"roformer"),E_t.forEach(t),fSo=r(I$e," \u2014 "),lO=n(I$e,"A",{href:!0});var C_t=s(lO);mSo=r(C_t,"RoFormerForMaskedLM"),C_t.forEach(t),gSo=r(I$e," (RoFormer model)"),I$e.forEach(t),hSo=i(U),Vb=n(U,"LI",{});var N$e=s(Vb);dge=n(N$e,"STRONG",{});var w_t=s(dge);pSo=r(w_t,"squeezebert"),w_t.forEach(t),_So=r(N$e," \u2014 "),iO=n(N$e,"A",{href:!0});var A_t=s(iO);uSo=r(A_t,"SqueezeBertForMaskedLM"),A_t.forEach(t),bSo=r(N$e," (SqueezeBERT model)"),N$e.forEach(t),vSo=i(U),Xb=n(U,"LI",{});var q$e=s(Xb);cge=n(q$e,"STRONG",{});var L_t=s(cge);FSo=r(L_t,"tapas"),L_t.forEach(t),TSo=r(q$e," \u2014 "),dO=n(q$e,"A",{href:!0});var y_t=s(dO);MSo=r(y_t,"TapasForMaskedLM"),y_t.forEach(t),ESo=r(q$e," (TAPAS model)"),q$e.forEach(t),CSo=i(U),zb=n(U,"LI",{});var j$e=s(zb);fge=n(j$e,"STRONG",{});var x_t=s(fge);wSo=r(x_t,"wav2vec2"),x_t.forEach(t),ASo=r(j$e," \u2014 "),mge=n(j$e,"CODE",{});var $_t=s(mge);LSo=r($_t,"Wav2Vec2ForMaskedLM"),$_t.forEach(t),ySo=r(j$e," (Wav2Vec2 model)"),j$e.forEach(t),xSo=i(U),Wb=n(U,"LI",{});var D$e=s(Wb);gge=n(D$e,"STRONG",{});var k_t=s(gge);$So=r(k_t,"xlm"),k_t.forEach(t),kSo=r(D$e," \u2014 "),cO=n(D$e,"A",{href:!0});var S_t=s(cO);SSo=r(S_t,"XLMWithLMHeadModel"),S_t.forEach(t),RSo=r(D$e," (XLM model)"),D$e.forEach(t),PSo=i(U),Qb=n(U,"LI",{});var G$e=s(Qb);hge=n(G$e,"STRONG",{});var R_t=s(hge);BSo=r(R_t,"xlm-roberta"),R_t.forEach(t),ISo=r(G$e," \u2014 "),fO=n(G$e,"A",{href:!0});var P_t=s(fO);NSo=r(P_t,"XLMRobertaForMaskedLM"),P_t.forEach(t),qSo=r(G$e," (XLM-RoBERTa model)"),G$e.forEach(t),jSo=i(U),Hb=n(U,"LI",{});var O$e=s(Hb);pge=n(O$e,"STRONG",{});var B_t=s(pge);DSo=r(B_t,"xlm-roberta-xl"),B_t.forEach(t),GSo=r(O$e," \u2014 "),mO=n(O$e,"A",{href:!0});var I_t=s(mO);OSo=r(I_t,"XLMRobertaXLForMaskedLM"),I_t.forEach(t),VSo=r(O$e," (XLM-RoBERTa-XL model)"),O$e.forEach(t),XSo=i(U),Ub=n(U,"LI",{});var V$e=s(Ub);_ge=n(V$e,"STRONG",{});var N_t=s(_ge);zSo=r(N_t,"yoso"),N_t.forEach(t),WSo=r(V$e," \u2014 "),gO=n(V$e,"A",{href:!0});var q_t=s(gO);QSo=r(q_t,"YosoForMaskedLM"),q_t.forEach(t),HSo=r(V$e," (YOSO model)"),V$e.forEach(t),U.forEach(t),USo=i(ia),Jb=n(ia,"P",{});var X$e=s(Jb);JSo=r(X$e,"The model is set in evaluation mode by default using "),uge=n(X$e,"CODE",{});var j_t=s(uge);YSo=r(j_t,"model.eval()"),j_t.forEach(t),KSo=r(X$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=n(X$e,"CODE",{});var D_t=s(bge);ZSo=r(D_t,"model.train()"),D_t.forEach(t),X$e.forEach(t),eRo=i(ia),T(Yb.$$.fragment,ia),ia.forEach(t),Ks.forEach(t),jGe=i(f),Qi=n(f,"H2",{class:!0});var zVe=s(Qi);Kb=n(zVe,"A",{id:!0,class:!0,href:!0});var G_t=s(Kb);vge=n(G_t,"SPAN",{});var O_t=s(vge);T(_y.$$.fragment,O_t),O_t.forEach(t),G_t.forEach(t),oRo=i(zVe),Fge=n(zVe,"SPAN",{});var V_t=s(Fge);rRo=r(V_t,"AutoModelForSeq2SeqLM"),V_t.forEach(t),zVe.forEach(t),DGe=i(f),Ro=n(f,"DIV",{class:!0});var Zs=s(Ro);T(uy.$$.fragment,Zs),tRo=i(Zs),Hi=n(Zs,"P",{});var poe=s(Hi);aRo=r(poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hO=n(poe,"A",{href:!0});var X_t=s(hO);nRo=r(X_t,"from_pretrained()"),X_t.forEach(t),sRo=r(poe," class method or the "),pO=n(poe,"A",{href:!0});var z_t=s(pO);lRo=r(z_t,"from_config()"),z_t.forEach(t),iRo=r(poe,` class
method.`),poe.forEach(t),dRo=i(Zs),by=n(Zs,"P",{});var WVe=s(by);cRo=r(WVe,"This class cannot be instantiated directly using "),Tge=n(WVe,"CODE",{});var W_t=s(Tge);fRo=r(W_t,"__init__()"),W_t.forEach(t),mRo=r(WVe," (throws an error)."),WVe.forEach(t),gRo=i(Zs),ct=n(Zs,"DIV",{class:!0});var BA=s(ct);T(vy.$$.fragment,BA),hRo=i(BA),Mge=n(BA,"P",{});var Q_t=s(Mge);pRo=r(Q_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Q_t.forEach(t),_Ro=i(BA),Ui=n(BA,"P",{});var _oe=s(Ui);uRo=r(_oe,`Note:
Loading a model from its configuration file does `),Ege=n(_oe,"STRONG",{});var H_t=s(Ege);bRo=r(H_t,"not"),H_t.forEach(t),vRo=r(_oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_O=n(_oe,"A",{href:!0});var U_t=s(_O);FRo=r(U_t,"from_pretrained()"),U_t.forEach(t),TRo=r(_oe," to load the model weights."),_oe.forEach(t),MRo=i(BA),T(Zb.$$.fragment,BA),BA.forEach(t),ERo=i(Zs),eo=n(Zs,"DIV",{class:!0});var da=s(eo);T(Fy.$$.fragment,da),CRo=i(da),Cge=n(da,"P",{});var J_t=s(Cge);wRo=r(J_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),J_t.forEach(t),ARo=i(da),Na=n(da,"P",{});var IA=s(Na);LRo=r(IA,"The model class to instantiate is selected based on the "),wge=n(IA,"CODE",{});var Y_t=s(wge);yRo=r(Y_t,"model_type"),Y_t.forEach(t),xRo=r(IA,` property of the config object (either
passed as an argument or loaded from `),Age=n(IA,"CODE",{});var K_t=s(Age);$Ro=r(K_t,"pretrained_model_name_or_path"),K_t.forEach(t),kRo=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lge=n(IA,"CODE",{});var Z_t=s(Lge);SRo=r(Z_t,"pretrained_model_name_or_path"),Z_t.forEach(t),RRo=r(IA,":"),IA.forEach(t),PRo=i(da),pe=n(da,"UL",{});var ve=s(pe);e2=n(ve,"LI",{});var z$e=s(e2);yge=n(z$e,"STRONG",{});var eut=s(yge);BRo=r(eut,"bart"),eut.forEach(t),IRo=r(z$e," \u2014 "),uO=n(z$e,"A",{href:!0});var out=s(uO);NRo=r(out,"BartForConditionalGeneration"),out.forEach(t),qRo=r(z$e," (BART model)"),z$e.forEach(t),jRo=i(ve),o2=n(ve,"LI",{});var W$e=s(o2);xge=n(W$e,"STRONG",{});var rut=s(xge);DRo=r(rut,"bigbird_pegasus"),rut.forEach(t),GRo=r(W$e," \u2014 "),bO=n(W$e,"A",{href:!0});var tut=s(bO);ORo=r(tut,"BigBirdPegasusForConditionalGeneration"),tut.forEach(t),VRo=r(W$e," (BigBird-Pegasus model)"),W$e.forEach(t),XRo=i(ve),r2=n(ve,"LI",{});var Q$e=s(r2);$ge=n(Q$e,"STRONG",{});var aut=s($ge);zRo=r(aut,"blenderbot"),aut.forEach(t),WRo=r(Q$e," \u2014 "),vO=n(Q$e,"A",{href:!0});var nut=s(vO);QRo=r(nut,"BlenderbotForConditionalGeneration"),nut.forEach(t),HRo=r(Q$e," (Blenderbot model)"),Q$e.forEach(t),URo=i(ve),t2=n(ve,"LI",{});var H$e=s(t2);kge=n(H$e,"STRONG",{});var sut=s(kge);JRo=r(sut,"blenderbot-small"),sut.forEach(t),YRo=r(H$e," \u2014 "),FO=n(H$e,"A",{href:!0});var lut=s(FO);KRo=r(lut,"BlenderbotSmallForConditionalGeneration"),lut.forEach(t),ZRo=r(H$e," (BlenderbotSmall model)"),H$e.forEach(t),ePo=i(ve),a2=n(ve,"LI",{});var U$e=s(a2);Sge=n(U$e,"STRONG",{});var iut=s(Sge);oPo=r(iut,"encoder-decoder"),iut.forEach(t),rPo=r(U$e," \u2014 "),TO=n(U$e,"A",{href:!0});var dut=s(TO);tPo=r(dut,"EncoderDecoderModel"),dut.forEach(t),aPo=r(U$e," (Encoder decoder model)"),U$e.forEach(t),nPo=i(ve),n2=n(ve,"LI",{});var J$e=s(n2);Rge=n(J$e,"STRONG",{});var cut=s(Rge);sPo=r(cut,"fsmt"),cut.forEach(t),lPo=r(J$e," \u2014 "),MO=n(J$e,"A",{href:!0});var fut=s(MO);iPo=r(fut,"FSMTForConditionalGeneration"),fut.forEach(t),dPo=r(J$e," (FairSeq Machine-Translation model)"),J$e.forEach(t),cPo=i(ve),s2=n(ve,"LI",{});var Y$e=s(s2);Pge=n(Y$e,"STRONG",{});var mut=s(Pge);fPo=r(mut,"led"),mut.forEach(t),mPo=r(Y$e," \u2014 "),EO=n(Y$e,"A",{href:!0});var gut=s(EO);gPo=r(gut,"LEDForConditionalGeneration"),gut.forEach(t),hPo=r(Y$e," (LED model)"),Y$e.forEach(t),pPo=i(ve),l2=n(ve,"LI",{});var K$e=s(l2);Bge=n(K$e,"STRONG",{});var hut=s(Bge);_Po=r(hut,"longt5"),hut.forEach(t),uPo=r(K$e," \u2014 "),CO=n(K$e,"A",{href:!0});var put=s(CO);bPo=r(put,"LongT5ForConditionalGeneration"),put.forEach(t),vPo=r(K$e," (LongT5 model)"),K$e.forEach(t),FPo=i(ve),i2=n(ve,"LI",{});var Z$e=s(i2);Ige=n(Z$e,"STRONG",{});var _ut=s(Ige);TPo=r(_ut,"m2m_100"),_ut.forEach(t),MPo=r(Z$e," \u2014 "),wO=n(Z$e,"A",{href:!0});var uut=s(wO);EPo=r(uut,"M2M100ForConditionalGeneration"),uut.forEach(t),CPo=r(Z$e," (M2M100 model)"),Z$e.forEach(t),wPo=i(ve),d2=n(ve,"LI",{});var eke=s(d2);Nge=n(eke,"STRONG",{});var but=s(Nge);APo=r(but,"marian"),but.forEach(t),LPo=r(eke," \u2014 "),AO=n(eke,"A",{href:!0});var vut=s(AO);yPo=r(vut,"MarianMTModel"),vut.forEach(t),xPo=r(eke," (Marian model)"),eke.forEach(t),$Po=i(ve),c2=n(ve,"LI",{});var oke=s(c2);qge=n(oke,"STRONG",{});var Fut=s(qge);kPo=r(Fut,"mbart"),Fut.forEach(t),SPo=r(oke," \u2014 "),LO=n(oke,"A",{href:!0});var Tut=s(LO);RPo=r(Tut,"MBartForConditionalGeneration"),Tut.forEach(t),PPo=r(oke," (mBART model)"),oke.forEach(t),BPo=i(ve),f2=n(ve,"LI",{});var rke=s(f2);jge=n(rke,"STRONG",{});var Mut=s(jge);IPo=r(Mut,"mt5"),Mut.forEach(t),NPo=r(rke," \u2014 "),yO=n(rke,"A",{href:!0});var Eut=s(yO);qPo=r(Eut,"MT5ForConditionalGeneration"),Eut.forEach(t),jPo=r(rke," (MT5 model)"),rke.forEach(t),DPo=i(ve),m2=n(ve,"LI",{});var tke=s(m2);Dge=n(tke,"STRONG",{});var Cut=s(Dge);GPo=r(Cut,"pegasus"),Cut.forEach(t),OPo=r(tke," \u2014 "),xO=n(tke,"A",{href:!0});var wut=s(xO);VPo=r(wut,"PegasusForConditionalGeneration"),wut.forEach(t),XPo=r(tke," (Pegasus model)"),tke.forEach(t),zPo=i(ve),g2=n(ve,"LI",{});var ake=s(g2);Gge=n(ake,"STRONG",{});var Aut=s(Gge);WPo=r(Aut,"plbart"),Aut.forEach(t),QPo=r(ake," \u2014 "),$O=n(ake,"A",{href:!0});var Lut=s($O);HPo=r(Lut,"PLBartForConditionalGeneration"),Lut.forEach(t),UPo=r(ake," (PLBart model)"),ake.forEach(t),JPo=i(ve),h2=n(ve,"LI",{});var nke=s(h2);Oge=n(nke,"STRONG",{});var yut=s(Oge);YPo=r(yut,"prophetnet"),yut.forEach(t),KPo=r(nke," \u2014 "),kO=n(nke,"A",{href:!0});var xut=s(kO);ZPo=r(xut,"ProphetNetForConditionalGeneration"),xut.forEach(t),eBo=r(nke," (ProphetNet model)"),nke.forEach(t),oBo=i(ve),p2=n(ve,"LI",{});var ske=s(p2);Vge=n(ske,"STRONG",{});var $ut=s(Vge);rBo=r($ut,"t5"),$ut.forEach(t),tBo=r(ske," \u2014 "),SO=n(ske,"A",{href:!0});var kut=s(SO);aBo=r(kut,"T5ForConditionalGeneration"),kut.forEach(t),nBo=r(ske," (T5 model)"),ske.forEach(t),sBo=i(ve),_2=n(ve,"LI",{});var lke=s(_2);Xge=n(lke,"STRONG",{});var Sut=s(Xge);lBo=r(Sut,"xlm-prophetnet"),Sut.forEach(t),iBo=r(lke," \u2014 "),RO=n(lke,"A",{href:!0});var Rut=s(RO);dBo=r(Rut,"XLMProphetNetForConditionalGeneration"),Rut.forEach(t),cBo=r(lke," (XLM-ProphetNet model)"),lke.forEach(t),ve.forEach(t),fBo=i(da),u2=n(da,"P",{});var ike=s(u2);mBo=r(ike,"The model is set in evaluation mode by default using "),zge=n(ike,"CODE",{});var Put=s(zge);gBo=r(Put,"model.eval()"),Put.forEach(t),hBo=r(ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wge=n(ike,"CODE",{});var But=s(Wge);pBo=r(But,"model.train()"),But.forEach(t),ike.forEach(t),_Bo=i(da),T(b2.$$.fragment,da),da.forEach(t),Zs.forEach(t),GGe=i(f),Ji=n(f,"H2",{class:!0});var QVe=s(Ji);v2=n(QVe,"A",{id:!0,class:!0,href:!0});var Iut=s(v2);Qge=n(Iut,"SPAN",{});var Nut=s(Qge);T(Ty.$$.fragment,Nut),Nut.forEach(t),Iut.forEach(t),uBo=i(QVe),Hge=n(QVe,"SPAN",{});var qut=s(Hge);bBo=r(qut,"AutoModelForSequenceClassification"),qut.forEach(t),QVe.forEach(t),OGe=i(f),Po=n(f,"DIV",{class:!0});var el=s(Po);T(My.$$.fragment,el),vBo=i(el),Yi=n(el,"P",{});var uoe=s(Yi);FBo=r(uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),PO=n(uoe,"A",{href:!0});var jut=s(PO);TBo=r(jut,"from_pretrained()"),jut.forEach(t),MBo=r(uoe," class method or the "),BO=n(uoe,"A",{href:!0});var Dut=s(BO);EBo=r(Dut,"from_config()"),Dut.forEach(t),CBo=r(uoe,` class
method.`),uoe.forEach(t),wBo=i(el),Ey=n(el,"P",{});var HVe=s(Ey);ABo=r(HVe,"This class cannot be instantiated directly using "),Uge=n(HVe,"CODE",{});var Gut=s(Uge);LBo=r(Gut,"__init__()"),Gut.forEach(t),yBo=r(HVe," (throws an error)."),HVe.forEach(t),xBo=i(el),ft=n(el,"DIV",{class:!0});var NA=s(ft);T(Cy.$$.fragment,NA),$Bo=i(NA),Jge=n(NA,"P",{});var Out=s(Jge);kBo=r(Out,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Out.forEach(t),SBo=i(NA),Ki=n(NA,"P",{});var boe=s(Ki);RBo=r(boe,`Note:
Loading a model from its configuration file does `),Yge=n(boe,"STRONG",{});var Vut=s(Yge);PBo=r(Vut,"not"),Vut.forEach(t),BBo=r(boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=n(boe,"A",{href:!0});var Xut=s(IO);IBo=r(Xut,"from_pretrained()"),Xut.forEach(t),NBo=r(boe," to load the model weights."),boe.forEach(t),qBo=i(NA),T(F2.$$.fragment,NA),NA.forEach(t),jBo=i(el),oo=n(el,"DIV",{class:!0});var ca=s(oo);T(wy.$$.fragment,ca),DBo=i(ca),Kge=n(ca,"P",{});var zut=s(Kge);GBo=r(zut,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zut.forEach(t),OBo=i(ca),qa=n(ca,"P",{});var qA=s(qa);VBo=r(qA,"The model class to instantiate is selected based on the "),Zge=n(qA,"CODE",{});var Wut=s(Zge);XBo=r(Wut,"model_type"),Wut.forEach(t),zBo=r(qA,` property of the config object (either
passed as an argument or loaded from `),ehe=n(qA,"CODE",{});var Qut=s(ehe);WBo=r(Qut,"pretrained_model_name_or_path"),Qut.forEach(t),QBo=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ohe=n(qA,"CODE",{});var Hut=s(ohe);HBo=r(Hut,"pretrained_model_name_or_path"),Hut.forEach(t),UBo=r(qA,":"),qA.forEach(t),JBo=i(ca),N=n(ca,"UL",{});var j=s(N);T2=n(j,"LI",{});var dke=s(T2);rhe=n(dke,"STRONG",{});var Uut=s(rhe);YBo=r(Uut,"albert"),Uut.forEach(t),KBo=r(dke," \u2014 "),NO=n(dke,"A",{href:!0});var Jut=s(NO);ZBo=r(Jut,"AlbertForSequenceClassification"),Jut.forEach(t),eIo=r(dke," (ALBERT model)"),dke.forEach(t),oIo=i(j),M2=n(j,"LI",{});var cke=s(M2);the=n(cke,"STRONG",{});var Yut=s(the);rIo=r(Yut,"bart"),Yut.forEach(t),tIo=r(cke," \u2014 "),qO=n(cke,"A",{href:!0});var Kut=s(qO);aIo=r(Kut,"BartForSequenceClassification"),Kut.forEach(t),nIo=r(cke," (BART model)"),cke.forEach(t),sIo=i(j),E2=n(j,"LI",{});var fke=s(E2);ahe=n(fke,"STRONG",{});var Zut=s(ahe);lIo=r(Zut,"bert"),Zut.forEach(t),iIo=r(fke," \u2014 "),jO=n(fke,"A",{href:!0});var e1t=s(jO);dIo=r(e1t,"BertForSequenceClassification"),e1t.forEach(t),cIo=r(fke," (BERT model)"),fke.forEach(t),fIo=i(j),C2=n(j,"LI",{});var mke=s(C2);nhe=n(mke,"STRONG",{});var o1t=s(nhe);mIo=r(o1t,"big_bird"),o1t.forEach(t),gIo=r(mke," \u2014 "),DO=n(mke,"A",{href:!0});var r1t=s(DO);hIo=r(r1t,"BigBirdForSequenceClassification"),r1t.forEach(t),pIo=r(mke," (BigBird model)"),mke.forEach(t),_Io=i(j),w2=n(j,"LI",{});var gke=s(w2);she=n(gke,"STRONG",{});var t1t=s(she);uIo=r(t1t,"bigbird_pegasus"),t1t.forEach(t),bIo=r(gke," \u2014 "),GO=n(gke,"A",{href:!0});var a1t=s(GO);vIo=r(a1t,"BigBirdPegasusForSequenceClassification"),a1t.forEach(t),FIo=r(gke," (BigBird-Pegasus model)"),gke.forEach(t),TIo=i(j),A2=n(j,"LI",{});var hke=s(A2);lhe=n(hke,"STRONG",{});var n1t=s(lhe);MIo=r(n1t,"bloom"),n1t.forEach(t),EIo=r(hke," \u2014 "),OO=n(hke,"A",{href:!0});var s1t=s(OO);CIo=r(s1t,"BloomForSequenceClassification"),s1t.forEach(t),wIo=r(hke," (BLOOM model)"),hke.forEach(t),AIo=i(j),L2=n(j,"LI",{});var pke=s(L2);ihe=n(pke,"STRONG",{});var l1t=s(ihe);LIo=r(l1t,"camembert"),l1t.forEach(t),yIo=r(pke," \u2014 "),VO=n(pke,"A",{href:!0});var i1t=s(VO);xIo=r(i1t,"CamembertForSequenceClassification"),i1t.forEach(t),$Io=r(pke," (CamemBERT model)"),pke.forEach(t),kIo=i(j),y2=n(j,"LI",{});var _ke=s(y2);dhe=n(_ke,"STRONG",{});var d1t=s(dhe);SIo=r(d1t,"canine"),d1t.forEach(t),RIo=r(_ke," \u2014 "),XO=n(_ke,"A",{href:!0});var c1t=s(XO);PIo=r(c1t,"CanineForSequenceClassification"),c1t.forEach(t),BIo=r(_ke," (CANINE model)"),_ke.forEach(t),IIo=i(j),x2=n(j,"LI",{});var uke=s(x2);che=n(uke,"STRONG",{});var f1t=s(che);NIo=r(f1t,"convbert"),f1t.forEach(t),qIo=r(uke," \u2014 "),zO=n(uke,"A",{href:!0});var m1t=s(zO);jIo=r(m1t,"ConvBertForSequenceClassification"),m1t.forEach(t),DIo=r(uke," (ConvBERT model)"),uke.forEach(t),GIo=i(j),$2=n(j,"LI",{});var bke=s($2);fhe=n(bke,"STRONG",{});var g1t=s(fhe);OIo=r(g1t,"ctrl"),g1t.forEach(t),VIo=r(bke," \u2014 "),WO=n(bke,"A",{href:!0});var h1t=s(WO);XIo=r(h1t,"CTRLForSequenceClassification"),h1t.forEach(t),zIo=r(bke," (CTRL model)"),bke.forEach(t),WIo=i(j),k2=n(j,"LI",{});var vke=s(k2);mhe=n(vke,"STRONG",{});var p1t=s(mhe);QIo=r(p1t,"data2vec-text"),p1t.forEach(t),HIo=r(vke," \u2014 "),QO=n(vke,"A",{href:!0});var _1t=s(QO);UIo=r(_1t,"Data2VecTextForSequenceClassification"),_1t.forEach(t),JIo=r(vke," (Data2VecText model)"),vke.forEach(t),YIo=i(j),S2=n(j,"LI",{});var Fke=s(S2);ghe=n(Fke,"STRONG",{});var u1t=s(ghe);KIo=r(u1t,"deberta"),u1t.forEach(t),ZIo=r(Fke," \u2014 "),HO=n(Fke,"A",{href:!0});var b1t=s(HO);eNo=r(b1t,"DebertaForSequenceClassification"),b1t.forEach(t),oNo=r(Fke," (DeBERTa model)"),Fke.forEach(t),rNo=i(j),R2=n(j,"LI",{});var Tke=s(R2);hhe=n(Tke,"STRONG",{});var v1t=s(hhe);tNo=r(v1t,"deberta-v2"),v1t.forEach(t),aNo=r(Tke," \u2014 "),UO=n(Tke,"A",{href:!0});var F1t=s(UO);nNo=r(F1t,"DebertaV2ForSequenceClassification"),F1t.forEach(t),sNo=r(Tke," (DeBERTa-v2 model)"),Tke.forEach(t),lNo=i(j),P2=n(j,"LI",{});var Mke=s(P2);phe=n(Mke,"STRONG",{});var T1t=s(phe);iNo=r(T1t,"distilbert"),T1t.forEach(t),dNo=r(Mke," \u2014 "),JO=n(Mke,"A",{href:!0});var M1t=s(JO);cNo=r(M1t,"DistilBertForSequenceClassification"),M1t.forEach(t),fNo=r(Mke," (DistilBERT model)"),Mke.forEach(t),mNo=i(j),B2=n(j,"LI",{});var Eke=s(B2);_he=n(Eke,"STRONG",{});var E1t=s(_he);gNo=r(E1t,"electra"),E1t.forEach(t),hNo=r(Eke," \u2014 "),YO=n(Eke,"A",{href:!0});var C1t=s(YO);pNo=r(C1t,"ElectraForSequenceClassification"),C1t.forEach(t),_No=r(Eke," (ELECTRA model)"),Eke.forEach(t),uNo=i(j),I2=n(j,"LI",{});var Cke=s(I2);uhe=n(Cke,"STRONG",{});var w1t=s(uhe);bNo=r(w1t,"flaubert"),w1t.forEach(t),vNo=r(Cke," \u2014 "),KO=n(Cke,"A",{href:!0});var A1t=s(KO);FNo=r(A1t,"FlaubertForSequenceClassification"),A1t.forEach(t),TNo=r(Cke," (FlauBERT model)"),Cke.forEach(t),MNo=i(j),N2=n(j,"LI",{});var wke=s(N2);bhe=n(wke,"STRONG",{});var L1t=s(bhe);ENo=r(L1t,"fnet"),L1t.forEach(t),CNo=r(wke," \u2014 "),ZO=n(wke,"A",{href:!0});var y1t=s(ZO);wNo=r(y1t,"FNetForSequenceClassification"),y1t.forEach(t),ANo=r(wke," (FNet model)"),wke.forEach(t),LNo=i(j),q2=n(j,"LI",{});var Ake=s(q2);vhe=n(Ake,"STRONG",{});var x1t=s(vhe);yNo=r(x1t,"funnel"),x1t.forEach(t),xNo=r(Ake," \u2014 "),eV=n(Ake,"A",{href:!0});var $1t=s(eV);$No=r($1t,"FunnelForSequenceClassification"),$1t.forEach(t),kNo=r(Ake," (Funnel Transformer model)"),Ake.forEach(t),SNo=i(j),j2=n(j,"LI",{});var Lke=s(j2);Fhe=n(Lke,"STRONG",{});var k1t=s(Fhe);RNo=r(k1t,"gpt2"),k1t.forEach(t),PNo=r(Lke," \u2014 "),oV=n(Lke,"A",{href:!0});var S1t=s(oV);BNo=r(S1t,"GPT2ForSequenceClassification"),S1t.forEach(t),INo=r(Lke," (OpenAI GPT-2 model)"),Lke.forEach(t),NNo=i(j),D2=n(j,"LI",{});var yke=s(D2);The=n(yke,"STRONG",{});var R1t=s(The);qNo=r(R1t,"gpt_neo"),R1t.forEach(t),jNo=r(yke," \u2014 "),rV=n(yke,"A",{href:!0});var P1t=s(rV);DNo=r(P1t,"GPTNeoForSequenceClassification"),P1t.forEach(t),GNo=r(yke," (GPT Neo model)"),yke.forEach(t),ONo=i(j),G2=n(j,"LI",{});var xke=s(G2);Mhe=n(xke,"STRONG",{});var B1t=s(Mhe);VNo=r(B1t,"gptj"),B1t.forEach(t),XNo=r(xke," \u2014 "),tV=n(xke,"A",{href:!0});var I1t=s(tV);zNo=r(I1t,"GPTJForSequenceClassification"),I1t.forEach(t),WNo=r(xke," (GPT-J model)"),xke.forEach(t),QNo=i(j),O2=n(j,"LI",{});var $ke=s(O2);Ehe=n($ke,"STRONG",{});var N1t=s(Ehe);HNo=r(N1t,"ibert"),N1t.forEach(t),UNo=r($ke," \u2014 "),aV=n($ke,"A",{href:!0});var q1t=s(aV);JNo=r(q1t,"IBertForSequenceClassification"),q1t.forEach(t),YNo=r($ke," (I-BERT model)"),$ke.forEach(t),KNo=i(j),V2=n(j,"LI",{});var kke=s(V2);Che=n(kke,"STRONG",{});var j1t=s(Che);ZNo=r(j1t,"layoutlm"),j1t.forEach(t),eqo=r(kke," \u2014 "),nV=n(kke,"A",{href:!0});var D1t=s(nV);oqo=r(D1t,"LayoutLMForSequenceClassification"),D1t.forEach(t),rqo=r(kke," (LayoutLM model)"),kke.forEach(t),tqo=i(j),X2=n(j,"LI",{});var Ske=s(X2);whe=n(Ske,"STRONG",{});var G1t=s(whe);aqo=r(G1t,"layoutlmv2"),G1t.forEach(t),nqo=r(Ske," \u2014 "),sV=n(Ske,"A",{href:!0});var O1t=s(sV);sqo=r(O1t,"LayoutLMv2ForSequenceClassification"),O1t.forEach(t),lqo=r(Ske," (LayoutLMv2 model)"),Ske.forEach(t),iqo=i(j),z2=n(j,"LI",{});var Rke=s(z2);Ahe=n(Rke,"STRONG",{});var V1t=s(Ahe);dqo=r(V1t,"layoutlmv3"),V1t.forEach(t),cqo=r(Rke," \u2014 "),lV=n(Rke,"A",{href:!0});var X1t=s(lV);fqo=r(X1t,"LayoutLMv3ForSequenceClassification"),X1t.forEach(t),mqo=r(Rke," (LayoutLMv3 model)"),Rke.forEach(t),gqo=i(j),W2=n(j,"LI",{});var Pke=s(W2);Lhe=n(Pke,"STRONG",{});var z1t=s(Lhe);hqo=r(z1t,"led"),z1t.forEach(t),pqo=r(Pke," \u2014 "),iV=n(Pke,"A",{href:!0});var W1t=s(iV);_qo=r(W1t,"LEDForSequenceClassification"),W1t.forEach(t),uqo=r(Pke," (LED model)"),Pke.forEach(t),bqo=i(j),Q2=n(j,"LI",{});var Bke=s(Q2);yhe=n(Bke,"STRONG",{});var Q1t=s(yhe);vqo=r(Q1t,"longformer"),Q1t.forEach(t),Fqo=r(Bke," \u2014 "),dV=n(Bke,"A",{href:!0});var H1t=s(dV);Tqo=r(H1t,"LongformerForSequenceClassification"),H1t.forEach(t),Mqo=r(Bke," (Longformer model)"),Bke.forEach(t),Eqo=i(j),H2=n(j,"LI",{});var Ike=s(H2);xhe=n(Ike,"STRONG",{});var U1t=s(xhe);Cqo=r(U1t,"mbart"),U1t.forEach(t),wqo=r(Ike," \u2014 "),cV=n(Ike,"A",{href:!0});var J1t=s(cV);Aqo=r(J1t,"MBartForSequenceClassification"),J1t.forEach(t),Lqo=r(Ike," (mBART model)"),Ike.forEach(t),yqo=i(j),U2=n(j,"LI",{});var Nke=s(U2);$he=n(Nke,"STRONG",{});var Y1t=s($he);xqo=r(Y1t,"megatron-bert"),Y1t.forEach(t),$qo=r(Nke," \u2014 "),fV=n(Nke,"A",{href:!0});var K1t=s(fV);kqo=r(K1t,"MegatronBertForSequenceClassification"),K1t.forEach(t),Sqo=r(Nke," (Megatron-BERT model)"),Nke.forEach(t),Rqo=i(j),J2=n(j,"LI",{});var qke=s(J2);khe=n(qke,"STRONG",{});var Z1t=s(khe);Pqo=r(Z1t,"mobilebert"),Z1t.forEach(t),Bqo=r(qke," \u2014 "),mV=n(qke,"A",{href:!0});var ebt=s(mV);Iqo=r(ebt,"MobileBertForSequenceClassification"),ebt.forEach(t),Nqo=r(qke," (MobileBERT model)"),qke.forEach(t),qqo=i(j),Y2=n(j,"LI",{});var jke=s(Y2);She=n(jke,"STRONG",{});var obt=s(She);jqo=r(obt,"mpnet"),obt.forEach(t),Dqo=r(jke," \u2014 "),gV=n(jke,"A",{href:!0});var rbt=s(gV);Gqo=r(rbt,"MPNetForSequenceClassification"),rbt.forEach(t),Oqo=r(jke," (MPNet model)"),jke.forEach(t),Vqo=i(j),K2=n(j,"LI",{});var Dke=s(K2);Rhe=n(Dke,"STRONG",{});var tbt=s(Rhe);Xqo=r(tbt,"nystromformer"),tbt.forEach(t),zqo=r(Dke," \u2014 "),hV=n(Dke,"A",{href:!0});var abt=s(hV);Wqo=r(abt,"NystromformerForSequenceClassification"),abt.forEach(t),Qqo=r(Dke," (Nystr\xF6mformer model)"),Dke.forEach(t),Hqo=i(j),Z2=n(j,"LI",{});var Gke=s(Z2);Phe=n(Gke,"STRONG",{});var nbt=s(Phe);Uqo=r(nbt,"openai-gpt"),nbt.forEach(t),Jqo=r(Gke," \u2014 "),pV=n(Gke,"A",{href:!0});var sbt=s(pV);Yqo=r(sbt,"OpenAIGPTForSequenceClassification"),sbt.forEach(t),Kqo=r(Gke," (OpenAI GPT model)"),Gke.forEach(t),Zqo=i(j),e4=n(j,"LI",{});var Oke=s(e4);Bhe=n(Oke,"STRONG",{});var lbt=s(Bhe);ejo=r(lbt,"perceiver"),lbt.forEach(t),ojo=r(Oke," \u2014 "),_V=n(Oke,"A",{href:!0});var ibt=s(_V);rjo=r(ibt,"PerceiverForSequenceClassification"),ibt.forEach(t),tjo=r(Oke," (Perceiver model)"),Oke.forEach(t),ajo=i(j),o4=n(j,"LI",{});var Vke=s(o4);Ihe=n(Vke,"STRONG",{});var dbt=s(Ihe);njo=r(dbt,"plbart"),dbt.forEach(t),sjo=r(Vke," \u2014 "),uV=n(Vke,"A",{href:!0});var cbt=s(uV);ljo=r(cbt,"PLBartForSequenceClassification"),cbt.forEach(t),ijo=r(Vke," (PLBart model)"),Vke.forEach(t),djo=i(j),r4=n(j,"LI",{});var Xke=s(r4);Nhe=n(Xke,"STRONG",{});var fbt=s(Nhe);cjo=r(fbt,"qdqbert"),fbt.forEach(t),fjo=r(Xke," \u2014 "),bV=n(Xke,"A",{href:!0});var mbt=s(bV);mjo=r(mbt,"QDQBertForSequenceClassification"),mbt.forEach(t),gjo=r(Xke," (QDQBert model)"),Xke.forEach(t),hjo=i(j),t4=n(j,"LI",{});var zke=s(t4);qhe=n(zke,"STRONG",{});var gbt=s(qhe);pjo=r(gbt,"reformer"),gbt.forEach(t),_jo=r(zke," \u2014 "),vV=n(zke,"A",{href:!0});var hbt=s(vV);ujo=r(hbt,"ReformerForSequenceClassification"),hbt.forEach(t),bjo=r(zke," (Reformer model)"),zke.forEach(t),vjo=i(j),a4=n(j,"LI",{});var Wke=s(a4);jhe=n(Wke,"STRONG",{});var pbt=s(jhe);Fjo=r(pbt,"rembert"),pbt.forEach(t),Tjo=r(Wke," \u2014 "),FV=n(Wke,"A",{href:!0});var _bt=s(FV);Mjo=r(_bt,"RemBertForSequenceClassification"),_bt.forEach(t),Ejo=r(Wke," (RemBERT model)"),Wke.forEach(t),Cjo=i(j),n4=n(j,"LI",{});var Qke=s(n4);Dhe=n(Qke,"STRONG",{});var ubt=s(Dhe);wjo=r(ubt,"roberta"),ubt.forEach(t),Ajo=r(Qke," \u2014 "),TV=n(Qke,"A",{href:!0});var bbt=s(TV);Ljo=r(bbt,"RobertaForSequenceClassification"),bbt.forEach(t),yjo=r(Qke," (RoBERTa model)"),Qke.forEach(t),xjo=i(j),s4=n(j,"LI",{});var Hke=s(s4);Ghe=n(Hke,"STRONG",{});var vbt=s(Ghe);$jo=r(vbt,"roformer"),vbt.forEach(t),kjo=r(Hke," \u2014 "),MV=n(Hke,"A",{href:!0});var Fbt=s(MV);Sjo=r(Fbt,"RoFormerForSequenceClassification"),Fbt.forEach(t),Rjo=r(Hke," (RoFormer model)"),Hke.forEach(t),Pjo=i(j),l4=n(j,"LI",{});var Uke=s(l4);Ohe=n(Uke,"STRONG",{});var Tbt=s(Ohe);Bjo=r(Tbt,"squeezebert"),Tbt.forEach(t),Ijo=r(Uke," \u2014 "),EV=n(Uke,"A",{href:!0});var Mbt=s(EV);Njo=r(Mbt,"SqueezeBertForSequenceClassification"),Mbt.forEach(t),qjo=r(Uke," (SqueezeBERT model)"),Uke.forEach(t),jjo=i(j),i4=n(j,"LI",{});var Jke=s(i4);Vhe=n(Jke,"STRONG",{});var Ebt=s(Vhe);Djo=r(Ebt,"tapas"),Ebt.forEach(t),Gjo=r(Jke," \u2014 "),CV=n(Jke,"A",{href:!0});var Cbt=s(CV);Ojo=r(Cbt,"TapasForSequenceClassification"),Cbt.forEach(t),Vjo=r(Jke," (TAPAS model)"),Jke.forEach(t),Xjo=i(j),d4=n(j,"LI",{});var Yke=s(d4);Xhe=n(Yke,"STRONG",{});var wbt=s(Xhe);zjo=r(wbt,"transfo-xl"),wbt.forEach(t),Wjo=r(Yke," \u2014 "),wV=n(Yke,"A",{href:!0});var Abt=s(wV);Qjo=r(Abt,"TransfoXLForSequenceClassification"),Abt.forEach(t),Hjo=r(Yke," (Transformer-XL model)"),Yke.forEach(t),Ujo=i(j),c4=n(j,"LI",{});var Kke=s(c4);zhe=n(Kke,"STRONG",{});var Lbt=s(zhe);Jjo=r(Lbt,"xlm"),Lbt.forEach(t),Yjo=r(Kke," \u2014 "),AV=n(Kke,"A",{href:!0});var ybt=s(AV);Kjo=r(ybt,"XLMForSequenceClassification"),ybt.forEach(t),Zjo=r(Kke," (XLM model)"),Kke.forEach(t),eDo=i(j),f4=n(j,"LI",{});var Zke=s(f4);Whe=n(Zke,"STRONG",{});var xbt=s(Whe);oDo=r(xbt,"xlm-roberta"),xbt.forEach(t),rDo=r(Zke," \u2014 "),LV=n(Zke,"A",{href:!0});var $bt=s(LV);tDo=r($bt,"XLMRobertaForSequenceClassification"),$bt.forEach(t),aDo=r(Zke," (XLM-RoBERTa model)"),Zke.forEach(t),nDo=i(j),m4=n(j,"LI",{});var eSe=s(m4);Qhe=n(eSe,"STRONG",{});var kbt=s(Qhe);sDo=r(kbt,"xlm-roberta-xl"),kbt.forEach(t),lDo=r(eSe," \u2014 "),yV=n(eSe,"A",{href:!0});var Sbt=s(yV);iDo=r(Sbt,"XLMRobertaXLForSequenceClassification"),Sbt.forEach(t),dDo=r(eSe," (XLM-RoBERTa-XL model)"),eSe.forEach(t),cDo=i(j),g4=n(j,"LI",{});var oSe=s(g4);Hhe=n(oSe,"STRONG",{});var Rbt=s(Hhe);fDo=r(Rbt,"xlnet"),Rbt.forEach(t),mDo=r(oSe," \u2014 "),xV=n(oSe,"A",{href:!0});var Pbt=s(xV);gDo=r(Pbt,"XLNetForSequenceClassification"),Pbt.forEach(t),hDo=r(oSe," (XLNet model)"),oSe.forEach(t),pDo=i(j),h4=n(j,"LI",{});var rSe=s(h4);Uhe=n(rSe,"STRONG",{});var Bbt=s(Uhe);_Do=r(Bbt,"yoso"),Bbt.forEach(t),uDo=r(rSe," \u2014 "),$V=n(rSe,"A",{href:!0});var Ibt=s($V);bDo=r(Ibt,"YosoForSequenceClassification"),Ibt.forEach(t),vDo=r(rSe," (YOSO model)"),rSe.forEach(t),j.forEach(t),FDo=i(ca),p4=n(ca,"P",{});var tSe=s(p4);TDo=r(tSe,"The model is set in evaluation mode by default using "),Jhe=n(tSe,"CODE",{});var Nbt=s(Jhe);MDo=r(Nbt,"model.eval()"),Nbt.forEach(t),EDo=r(tSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=n(tSe,"CODE",{});var qbt=s(Yhe);CDo=r(qbt,"model.train()"),qbt.forEach(t),tSe.forEach(t),wDo=i(ca),T(_4.$$.fragment,ca),ca.forEach(t),el.forEach(t),VGe=i(f),Zi=n(f,"H2",{class:!0});var UVe=s(Zi);u4=n(UVe,"A",{id:!0,class:!0,href:!0});var jbt=s(u4);Khe=n(jbt,"SPAN",{});var Dbt=s(Khe);T(Ay.$$.fragment,Dbt),Dbt.forEach(t),jbt.forEach(t),ADo=i(UVe),Zhe=n(UVe,"SPAN",{});var Gbt=s(Zhe);LDo=r(Gbt,"AutoModelForMultipleChoice"),Gbt.forEach(t),UVe.forEach(t),XGe=i(f),Bo=n(f,"DIV",{class:!0});var ol=s(Bo);T(Ly.$$.fragment,ol),yDo=i(ol),ed=n(ol,"P",{});var voe=s(ed);xDo=r(voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kV=n(voe,"A",{href:!0});var Obt=s(kV);$Do=r(Obt,"from_pretrained()"),Obt.forEach(t),kDo=r(voe," class method or the "),SV=n(voe,"A",{href:!0});var Vbt=s(SV);SDo=r(Vbt,"from_config()"),Vbt.forEach(t),RDo=r(voe,` class
method.`),voe.forEach(t),PDo=i(ol),yy=n(ol,"P",{});var JVe=s(yy);BDo=r(JVe,"This class cannot be instantiated directly using "),epe=n(JVe,"CODE",{});var Xbt=s(epe);IDo=r(Xbt,"__init__()"),Xbt.forEach(t),NDo=r(JVe," (throws an error)."),JVe.forEach(t),qDo=i(ol),mt=n(ol,"DIV",{class:!0});var jA=s(mt);T(xy.$$.fragment,jA),jDo=i(jA),ope=n(jA,"P",{});var zbt=s(ope);DDo=r(zbt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zbt.forEach(t),GDo=i(jA),od=n(jA,"P",{});var Foe=s(od);ODo=r(Foe,`Note:
Loading a model from its configuration file does `),rpe=n(Foe,"STRONG",{});var Wbt=s(rpe);VDo=r(Wbt,"not"),Wbt.forEach(t),XDo=r(Foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(Foe,"A",{href:!0});var Qbt=s(RV);zDo=r(Qbt,"from_pretrained()"),Qbt.forEach(t),WDo=r(Foe," to load the model weights."),Foe.forEach(t),QDo=i(jA),T(b4.$$.fragment,jA),jA.forEach(t),HDo=i(ol),ro=n(ol,"DIV",{class:!0});var fa=s(ro);T($y.$$.fragment,fa),UDo=i(fa),tpe=n(fa,"P",{});var Hbt=s(tpe);JDo=r(Hbt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Hbt.forEach(t),YDo=i(fa),ja=n(fa,"P",{});var DA=s(ja);KDo=r(DA,"The model class to instantiate is selected based on the "),ape=n(DA,"CODE",{});var Ubt=s(ape);ZDo=r(Ubt,"model_type"),Ubt.forEach(t),eGo=r(DA,` property of the config object (either
passed as an argument or loaded from `),npe=n(DA,"CODE",{});var Jbt=s(npe);oGo=r(Jbt,"pretrained_model_name_or_path"),Jbt.forEach(t),rGo=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=n(DA,"CODE",{});var Ybt=s(spe);tGo=r(Ybt,"pretrained_model_name_or_path"),Ybt.forEach(t),aGo=r(DA,":"),DA.forEach(t),nGo=i(fa),Z=n(fa,"UL",{});var ee=s(Z);v4=n(ee,"LI",{});var aSe=s(v4);lpe=n(aSe,"STRONG",{});var Kbt=s(lpe);sGo=r(Kbt,"albert"),Kbt.forEach(t),lGo=r(aSe," \u2014 "),PV=n(aSe,"A",{href:!0});var Zbt=s(PV);iGo=r(Zbt,"AlbertForMultipleChoice"),Zbt.forEach(t),dGo=r(aSe," (ALBERT model)"),aSe.forEach(t),cGo=i(ee),F4=n(ee,"LI",{});var nSe=s(F4);ipe=n(nSe,"STRONG",{});var e2t=s(ipe);fGo=r(e2t,"bert"),e2t.forEach(t),mGo=r(nSe," \u2014 "),BV=n(nSe,"A",{href:!0});var o2t=s(BV);gGo=r(o2t,"BertForMultipleChoice"),o2t.forEach(t),hGo=r(nSe," (BERT model)"),nSe.forEach(t),pGo=i(ee),T4=n(ee,"LI",{});var sSe=s(T4);dpe=n(sSe,"STRONG",{});var r2t=s(dpe);_Go=r(r2t,"big_bird"),r2t.forEach(t),uGo=r(sSe," \u2014 "),IV=n(sSe,"A",{href:!0});var t2t=s(IV);bGo=r(t2t,"BigBirdForMultipleChoice"),t2t.forEach(t),vGo=r(sSe," (BigBird model)"),sSe.forEach(t),FGo=i(ee),M4=n(ee,"LI",{});var lSe=s(M4);cpe=n(lSe,"STRONG",{});var a2t=s(cpe);TGo=r(a2t,"camembert"),a2t.forEach(t),MGo=r(lSe," \u2014 "),NV=n(lSe,"A",{href:!0});var n2t=s(NV);EGo=r(n2t,"CamembertForMultipleChoice"),n2t.forEach(t),CGo=r(lSe," (CamemBERT model)"),lSe.forEach(t),wGo=i(ee),E4=n(ee,"LI",{});var iSe=s(E4);fpe=n(iSe,"STRONG",{});var s2t=s(fpe);AGo=r(s2t,"canine"),s2t.forEach(t),LGo=r(iSe," \u2014 "),qV=n(iSe,"A",{href:!0});var l2t=s(qV);yGo=r(l2t,"CanineForMultipleChoice"),l2t.forEach(t),xGo=r(iSe," (CANINE model)"),iSe.forEach(t),$Go=i(ee),C4=n(ee,"LI",{});var dSe=s(C4);mpe=n(dSe,"STRONG",{});var i2t=s(mpe);kGo=r(i2t,"convbert"),i2t.forEach(t),SGo=r(dSe," \u2014 "),jV=n(dSe,"A",{href:!0});var d2t=s(jV);RGo=r(d2t,"ConvBertForMultipleChoice"),d2t.forEach(t),PGo=r(dSe," (ConvBERT model)"),dSe.forEach(t),BGo=i(ee),w4=n(ee,"LI",{});var cSe=s(w4);gpe=n(cSe,"STRONG",{});var c2t=s(gpe);IGo=r(c2t,"data2vec-text"),c2t.forEach(t),NGo=r(cSe," \u2014 "),DV=n(cSe,"A",{href:!0});var f2t=s(DV);qGo=r(f2t,"Data2VecTextForMultipleChoice"),f2t.forEach(t),jGo=r(cSe," (Data2VecText model)"),cSe.forEach(t),DGo=i(ee),A4=n(ee,"LI",{});var fSe=s(A4);hpe=n(fSe,"STRONG",{});var m2t=s(hpe);GGo=r(m2t,"deberta-v2"),m2t.forEach(t),OGo=r(fSe," \u2014 "),GV=n(fSe,"A",{href:!0});var g2t=s(GV);VGo=r(g2t,"DebertaV2ForMultipleChoice"),g2t.forEach(t),XGo=r(fSe," (DeBERTa-v2 model)"),fSe.forEach(t),zGo=i(ee),L4=n(ee,"LI",{});var mSe=s(L4);ppe=n(mSe,"STRONG",{});var h2t=s(ppe);WGo=r(h2t,"distilbert"),h2t.forEach(t),QGo=r(mSe," \u2014 "),OV=n(mSe,"A",{href:!0});var p2t=s(OV);HGo=r(p2t,"DistilBertForMultipleChoice"),p2t.forEach(t),UGo=r(mSe," (DistilBERT model)"),mSe.forEach(t),JGo=i(ee),y4=n(ee,"LI",{});var gSe=s(y4);_pe=n(gSe,"STRONG",{});var _2t=s(_pe);YGo=r(_2t,"electra"),_2t.forEach(t),KGo=r(gSe," \u2014 "),VV=n(gSe,"A",{href:!0});var u2t=s(VV);ZGo=r(u2t,"ElectraForMultipleChoice"),u2t.forEach(t),eOo=r(gSe," (ELECTRA model)"),gSe.forEach(t),oOo=i(ee),x4=n(ee,"LI",{});var hSe=s(x4);upe=n(hSe,"STRONG",{});var b2t=s(upe);rOo=r(b2t,"flaubert"),b2t.forEach(t),tOo=r(hSe," \u2014 "),XV=n(hSe,"A",{href:!0});var v2t=s(XV);aOo=r(v2t,"FlaubertForMultipleChoice"),v2t.forEach(t),nOo=r(hSe," (FlauBERT model)"),hSe.forEach(t),sOo=i(ee),$4=n(ee,"LI",{});var pSe=s($4);bpe=n(pSe,"STRONG",{});var F2t=s(bpe);lOo=r(F2t,"fnet"),F2t.forEach(t),iOo=r(pSe," \u2014 "),zV=n(pSe,"A",{href:!0});var T2t=s(zV);dOo=r(T2t,"FNetForMultipleChoice"),T2t.forEach(t),cOo=r(pSe," (FNet model)"),pSe.forEach(t),fOo=i(ee),k4=n(ee,"LI",{});var _Se=s(k4);vpe=n(_Se,"STRONG",{});var M2t=s(vpe);mOo=r(M2t,"funnel"),M2t.forEach(t),gOo=r(_Se," \u2014 "),WV=n(_Se,"A",{href:!0});var E2t=s(WV);hOo=r(E2t,"FunnelForMultipleChoice"),E2t.forEach(t),pOo=r(_Se," (Funnel Transformer model)"),_Se.forEach(t),_Oo=i(ee),S4=n(ee,"LI",{});var uSe=s(S4);Fpe=n(uSe,"STRONG",{});var C2t=s(Fpe);uOo=r(C2t,"ibert"),C2t.forEach(t),bOo=r(uSe," \u2014 "),QV=n(uSe,"A",{href:!0});var w2t=s(QV);vOo=r(w2t,"IBertForMultipleChoice"),w2t.forEach(t),FOo=r(uSe," (I-BERT model)"),uSe.forEach(t),TOo=i(ee),R4=n(ee,"LI",{});var bSe=s(R4);Tpe=n(bSe,"STRONG",{});var A2t=s(Tpe);MOo=r(A2t,"longformer"),A2t.forEach(t),EOo=r(bSe," \u2014 "),HV=n(bSe,"A",{href:!0});var L2t=s(HV);COo=r(L2t,"LongformerForMultipleChoice"),L2t.forEach(t),wOo=r(bSe," (Longformer model)"),bSe.forEach(t),AOo=i(ee),P4=n(ee,"LI",{});var vSe=s(P4);Mpe=n(vSe,"STRONG",{});var y2t=s(Mpe);LOo=r(y2t,"megatron-bert"),y2t.forEach(t),yOo=r(vSe," \u2014 "),UV=n(vSe,"A",{href:!0});var x2t=s(UV);xOo=r(x2t,"MegatronBertForMultipleChoice"),x2t.forEach(t),$Oo=r(vSe," (Megatron-BERT model)"),vSe.forEach(t),kOo=i(ee),B4=n(ee,"LI",{});var FSe=s(B4);Epe=n(FSe,"STRONG",{});var $2t=s(Epe);SOo=r($2t,"mobilebert"),$2t.forEach(t),ROo=r(FSe," \u2014 "),JV=n(FSe,"A",{href:!0});var k2t=s(JV);POo=r(k2t,"MobileBertForMultipleChoice"),k2t.forEach(t),BOo=r(FSe," (MobileBERT model)"),FSe.forEach(t),IOo=i(ee),I4=n(ee,"LI",{});var TSe=s(I4);Cpe=n(TSe,"STRONG",{});var S2t=s(Cpe);NOo=r(S2t,"mpnet"),S2t.forEach(t),qOo=r(TSe," \u2014 "),YV=n(TSe,"A",{href:!0});var R2t=s(YV);jOo=r(R2t,"MPNetForMultipleChoice"),R2t.forEach(t),DOo=r(TSe," (MPNet model)"),TSe.forEach(t),GOo=i(ee),N4=n(ee,"LI",{});var MSe=s(N4);wpe=n(MSe,"STRONG",{});var P2t=s(wpe);OOo=r(P2t,"nystromformer"),P2t.forEach(t),VOo=r(MSe," \u2014 "),KV=n(MSe,"A",{href:!0});var B2t=s(KV);XOo=r(B2t,"NystromformerForMultipleChoice"),B2t.forEach(t),zOo=r(MSe," (Nystr\xF6mformer model)"),MSe.forEach(t),WOo=i(ee),q4=n(ee,"LI",{});var ESe=s(q4);Ape=n(ESe,"STRONG",{});var I2t=s(Ape);QOo=r(I2t,"qdqbert"),I2t.forEach(t),HOo=r(ESe," \u2014 "),ZV=n(ESe,"A",{href:!0});var N2t=s(ZV);UOo=r(N2t,"QDQBertForMultipleChoice"),N2t.forEach(t),JOo=r(ESe," (QDQBert model)"),ESe.forEach(t),YOo=i(ee),j4=n(ee,"LI",{});var CSe=s(j4);Lpe=n(CSe,"STRONG",{});var q2t=s(Lpe);KOo=r(q2t,"rembert"),q2t.forEach(t),ZOo=r(CSe," \u2014 "),eX=n(CSe,"A",{href:!0});var j2t=s(eX);eVo=r(j2t,"RemBertForMultipleChoice"),j2t.forEach(t),oVo=r(CSe," (RemBERT model)"),CSe.forEach(t),rVo=i(ee),D4=n(ee,"LI",{});var wSe=s(D4);ype=n(wSe,"STRONG",{});var D2t=s(ype);tVo=r(D2t,"roberta"),D2t.forEach(t),aVo=r(wSe," \u2014 "),oX=n(wSe,"A",{href:!0});var G2t=s(oX);nVo=r(G2t,"RobertaForMultipleChoice"),G2t.forEach(t),sVo=r(wSe," (RoBERTa model)"),wSe.forEach(t),lVo=i(ee),G4=n(ee,"LI",{});var ASe=s(G4);xpe=n(ASe,"STRONG",{});var O2t=s(xpe);iVo=r(O2t,"roformer"),O2t.forEach(t),dVo=r(ASe," \u2014 "),rX=n(ASe,"A",{href:!0});var V2t=s(rX);cVo=r(V2t,"RoFormerForMultipleChoice"),V2t.forEach(t),fVo=r(ASe," (RoFormer model)"),ASe.forEach(t),mVo=i(ee),O4=n(ee,"LI",{});var LSe=s(O4);$pe=n(LSe,"STRONG",{});var X2t=s($pe);gVo=r(X2t,"squeezebert"),X2t.forEach(t),hVo=r(LSe," \u2014 "),tX=n(LSe,"A",{href:!0});var z2t=s(tX);pVo=r(z2t,"SqueezeBertForMultipleChoice"),z2t.forEach(t),_Vo=r(LSe," (SqueezeBERT model)"),LSe.forEach(t),uVo=i(ee),V4=n(ee,"LI",{});var ySe=s(V4);kpe=n(ySe,"STRONG",{});var W2t=s(kpe);bVo=r(W2t,"xlm"),W2t.forEach(t),vVo=r(ySe," \u2014 "),aX=n(ySe,"A",{href:!0});var Q2t=s(aX);FVo=r(Q2t,"XLMForMultipleChoice"),Q2t.forEach(t),TVo=r(ySe," (XLM model)"),ySe.forEach(t),MVo=i(ee),X4=n(ee,"LI",{});var xSe=s(X4);Spe=n(xSe,"STRONG",{});var H2t=s(Spe);EVo=r(H2t,"xlm-roberta"),H2t.forEach(t),CVo=r(xSe," \u2014 "),nX=n(xSe,"A",{href:!0});var U2t=s(nX);wVo=r(U2t,"XLMRobertaForMultipleChoice"),U2t.forEach(t),AVo=r(xSe," (XLM-RoBERTa model)"),xSe.forEach(t),LVo=i(ee),z4=n(ee,"LI",{});var $Se=s(z4);Rpe=n($Se,"STRONG",{});var J2t=s(Rpe);yVo=r(J2t,"xlm-roberta-xl"),J2t.forEach(t),xVo=r($Se," \u2014 "),sX=n($Se,"A",{href:!0});var Y2t=s(sX);$Vo=r(Y2t,"XLMRobertaXLForMultipleChoice"),Y2t.forEach(t),kVo=r($Se," (XLM-RoBERTa-XL model)"),$Se.forEach(t),SVo=i(ee),W4=n(ee,"LI",{});var kSe=s(W4);Ppe=n(kSe,"STRONG",{});var K2t=s(Ppe);RVo=r(K2t,"xlnet"),K2t.forEach(t),PVo=r(kSe," \u2014 "),lX=n(kSe,"A",{href:!0});var Z2t=s(lX);BVo=r(Z2t,"XLNetForMultipleChoice"),Z2t.forEach(t),IVo=r(kSe," (XLNet model)"),kSe.forEach(t),NVo=i(ee),Q4=n(ee,"LI",{});var SSe=s(Q4);Bpe=n(SSe,"STRONG",{});var e4t=s(Bpe);qVo=r(e4t,"yoso"),e4t.forEach(t),jVo=r(SSe," \u2014 "),iX=n(SSe,"A",{href:!0});var o4t=s(iX);DVo=r(o4t,"YosoForMultipleChoice"),o4t.forEach(t),GVo=r(SSe," (YOSO model)"),SSe.forEach(t),ee.forEach(t),OVo=i(fa),H4=n(fa,"P",{});var RSe=s(H4);VVo=r(RSe,"The model is set in evaluation mode by default using "),Ipe=n(RSe,"CODE",{});var r4t=s(Ipe);XVo=r(r4t,"model.eval()"),r4t.forEach(t),zVo=r(RSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=n(RSe,"CODE",{});var t4t=s(Npe);WVo=r(t4t,"model.train()"),t4t.forEach(t),RSe.forEach(t),QVo=i(fa),T(U4.$$.fragment,fa),fa.forEach(t),ol.forEach(t),zGe=i(f),rd=n(f,"H2",{class:!0});var YVe=s(rd);J4=n(YVe,"A",{id:!0,class:!0,href:!0});var a4t=s(J4);qpe=n(a4t,"SPAN",{});var n4t=s(qpe);T(ky.$$.fragment,n4t),n4t.forEach(t),a4t.forEach(t),HVo=i(YVe),jpe=n(YVe,"SPAN",{});var s4t=s(jpe);UVo=r(s4t,"AutoModelForNextSentencePrediction"),s4t.forEach(t),YVe.forEach(t),WGe=i(f),Io=n(f,"DIV",{class:!0});var rl=s(Io);T(Sy.$$.fragment,rl),JVo=i(rl),td=n(rl,"P",{});var Toe=s(td);YVo=r(Toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dX=n(Toe,"A",{href:!0});var l4t=s(dX);KVo=r(l4t,"from_pretrained()"),l4t.forEach(t),ZVo=r(Toe," class method or the "),cX=n(Toe,"A",{href:!0});var i4t=s(cX);eXo=r(i4t,"from_config()"),i4t.forEach(t),oXo=r(Toe,` class
method.`),Toe.forEach(t),rXo=i(rl),Ry=n(rl,"P",{});var KVe=s(Ry);tXo=r(KVe,"This class cannot be instantiated directly using "),Dpe=n(KVe,"CODE",{});var d4t=s(Dpe);aXo=r(d4t,"__init__()"),d4t.forEach(t),nXo=r(KVe," (throws an error)."),KVe.forEach(t),sXo=i(rl),gt=n(rl,"DIV",{class:!0});var GA=s(gt);T(Py.$$.fragment,GA),lXo=i(GA),Gpe=n(GA,"P",{});var c4t=s(Gpe);iXo=r(c4t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),c4t.forEach(t),dXo=i(GA),ad=n(GA,"P",{});var Moe=s(ad);cXo=r(Moe,`Note:
Loading a model from its configuration file does `),Ope=n(Moe,"STRONG",{});var f4t=s(Ope);fXo=r(f4t,"not"),f4t.forEach(t),mXo=r(Moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=n(Moe,"A",{href:!0});var m4t=s(fX);gXo=r(m4t,"from_pretrained()"),m4t.forEach(t),hXo=r(Moe," to load the model weights."),Moe.forEach(t),pXo=i(GA),T(Y4.$$.fragment,GA),GA.forEach(t),_Xo=i(rl),to=n(rl,"DIV",{class:!0});var ma=s(to);T(By.$$.fragment,ma),uXo=i(ma),Vpe=n(ma,"P",{});var g4t=s(Vpe);bXo=r(g4t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),g4t.forEach(t),vXo=i(ma),Da=n(ma,"P",{});var OA=s(Da);FXo=r(OA,"The model class to instantiate is selected based on the "),Xpe=n(OA,"CODE",{});var h4t=s(Xpe);TXo=r(h4t,"model_type"),h4t.forEach(t),MXo=r(OA,` property of the config object (either
passed as an argument or loaded from `),zpe=n(OA,"CODE",{});var p4t=s(zpe);EXo=r(p4t,"pretrained_model_name_or_path"),p4t.forEach(t),CXo=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=n(OA,"CODE",{});var _4t=s(Wpe);wXo=r(_4t,"pretrained_model_name_or_path"),_4t.forEach(t),AXo=r(OA,":"),OA.forEach(t),LXo=i(ma),Zr=n(ma,"UL",{});var tl=s(Zr);K4=n(tl,"LI",{});var PSe=s(K4);Qpe=n(PSe,"STRONG",{});var u4t=s(Qpe);yXo=r(u4t,"bert"),u4t.forEach(t),xXo=r(PSe," \u2014 "),mX=n(PSe,"A",{href:!0});var b4t=s(mX);$Xo=r(b4t,"BertForNextSentencePrediction"),b4t.forEach(t),kXo=r(PSe," (BERT model)"),PSe.forEach(t),SXo=i(tl),Z4=n(tl,"LI",{});var BSe=s(Z4);Hpe=n(BSe,"STRONG",{});var v4t=s(Hpe);RXo=r(v4t,"fnet"),v4t.forEach(t),PXo=r(BSe," \u2014 "),gX=n(BSe,"A",{href:!0});var F4t=s(gX);BXo=r(F4t,"FNetForNextSentencePrediction"),F4t.forEach(t),IXo=r(BSe," (FNet model)"),BSe.forEach(t),NXo=i(tl),e5=n(tl,"LI",{});var ISe=s(e5);Upe=n(ISe,"STRONG",{});var T4t=s(Upe);qXo=r(T4t,"megatron-bert"),T4t.forEach(t),jXo=r(ISe," \u2014 "),hX=n(ISe,"A",{href:!0});var M4t=s(hX);DXo=r(M4t,"MegatronBertForNextSentencePrediction"),M4t.forEach(t),GXo=r(ISe," (Megatron-BERT model)"),ISe.forEach(t),OXo=i(tl),o5=n(tl,"LI",{});var NSe=s(o5);Jpe=n(NSe,"STRONG",{});var E4t=s(Jpe);VXo=r(E4t,"mobilebert"),E4t.forEach(t),XXo=r(NSe," \u2014 "),pX=n(NSe,"A",{href:!0});var C4t=s(pX);zXo=r(C4t,"MobileBertForNextSentencePrediction"),C4t.forEach(t),WXo=r(NSe," (MobileBERT model)"),NSe.forEach(t),QXo=i(tl),r5=n(tl,"LI",{});var qSe=s(r5);Ype=n(qSe,"STRONG",{});var w4t=s(Ype);HXo=r(w4t,"qdqbert"),w4t.forEach(t),UXo=r(qSe," \u2014 "),_X=n(qSe,"A",{href:!0});var A4t=s(_X);JXo=r(A4t,"QDQBertForNextSentencePrediction"),A4t.forEach(t),YXo=r(qSe," (QDQBert model)"),qSe.forEach(t),tl.forEach(t),KXo=i(ma),t5=n(ma,"P",{});var jSe=s(t5);ZXo=r(jSe,"The model is set in evaluation mode by default using "),Kpe=n(jSe,"CODE",{});var L4t=s(Kpe);ezo=r(L4t,"model.eval()"),L4t.forEach(t),ozo=r(jSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zpe=n(jSe,"CODE",{});var y4t=s(Zpe);rzo=r(y4t,"model.train()"),y4t.forEach(t),jSe.forEach(t),tzo=i(ma),T(a5.$$.fragment,ma),ma.forEach(t),rl.forEach(t),QGe=i(f),nd=n(f,"H2",{class:!0});var ZVe=s(nd);n5=n(ZVe,"A",{id:!0,class:!0,href:!0});var x4t=s(n5);e_e=n(x4t,"SPAN",{});var $4t=s(e_e);T(Iy.$$.fragment,$4t),$4t.forEach(t),x4t.forEach(t),azo=i(ZVe),o_e=n(ZVe,"SPAN",{});var k4t=s(o_e);nzo=r(k4t,"AutoModelForTokenClassification"),k4t.forEach(t),ZVe.forEach(t),HGe=i(f),No=n(f,"DIV",{class:!0});var al=s(No);T(Ny.$$.fragment,al),szo=i(al),sd=n(al,"P",{});var Eoe=s(sd);lzo=r(Eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uX=n(Eoe,"A",{href:!0});var S4t=s(uX);izo=r(S4t,"from_pretrained()"),S4t.forEach(t),dzo=r(Eoe," class method or the "),bX=n(Eoe,"A",{href:!0});var R4t=s(bX);czo=r(R4t,"from_config()"),R4t.forEach(t),fzo=r(Eoe,` class
method.`),Eoe.forEach(t),mzo=i(al),qy=n(al,"P",{});var eXe=s(qy);gzo=r(eXe,"This class cannot be instantiated directly using "),r_e=n(eXe,"CODE",{});var P4t=s(r_e);hzo=r(P4t,"__init__()"),P4t.forEach(t),pzo=r(eXe," (throws an error)."),eXe.forEach(t),_zo=i(al),ht=n(al,"DIV",{class:!0});var VA=s(ht);T(jy.$$.fragment,VA),uzo=i(VA),t_e=n(VA,"P",{});var B4t=s(t_e);bzo=r(B4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),B4t.forEach(t),vzo=i(VA),ld=n(VA,"P",{});var Coe=s(ld);Fzo=r(Coe,`Note:
Loading a model from its configuration file does `),a_e=n(Coe,"STRONG",{});var I4t=s(a_e);Tzo=r(I4t,"not"),I4t.forEach(t),Mzo=r(Coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=n(Coe,"A",{href:!0});var N4t=s(vX);Ezo=r(N4t,"from_pretrained()"),N4t.forEach(t),Czo=r(Coe," to load the model weights."),Coe.forEach(t),wzo=i(VA),T(s5.$$.fragment,VA),VA.forEach(t),Azo=i(al),ao=n(al,"DIV",{class:!0});var ga=s(ao);T(Dy.$$.fragment,ga),Lzo=i(ga),n_e=n(ga,"P",{});var q4t=s(n_e);yzo=r(q4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),q4t.forEach(t),xzo=i(ga),Ga=n(ga,"P",{});var XA=s(Ga);$zo=r(XA,"The model class to instantiate is selected based on the "),s_e=n(XA,"CODE",{});var j4t=s(s_e);kzo=r(j4t,"model_type"),j4t.forEach(t),Szo=r(XA,` property of the config object (either
passed as an argument or loaded from `),l_e=n(XA,"CODE",{});var D4t=s(l_e);Rzo=r(D4t,"pretrained_model_name_or_path"),D4t.forEach(t),Pzo=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i_e=n(XA,"CODE",{});var G4t=s(i_e);Bzo=r(G4t,"pretrained_model_name_or_path"),G4t.forEach(t),Izo=r(XA,":"),XA.forEach(t),Nzo=i(ga),H=n(ga,"UL",{});var J=s(H);l5=n(J,"LI",{});var DSe=s(l5);d_e=n(DSe,"STRONG",{});var O4t=s(d_e);qzo=r(O4t,"albert"),O4t.forEach(t),jzo=r(DSe," \u2014 "),FX=n(DSe,"A",{href:!0});var V4t=s(FX);Dzo=r(V4t,"AlbertForTokenClassification"),V4t.forEach(t),Gzo=r(DSe," (ALBERT model)"),DSe.forEach(t),Ozo=i(J),i5=n(J,"LI",{});var GSe=s(i5);c_e=n(GSe,"STRONG",{});var X4t=s(c_e);Vzo=r(X4t,"bert"),X4t.forEach(t),Xzo=r(GSe," \u2014 "),TX=n(GSe,"A",{href:!0});var z4t=s(TX);zzo=r(z4t,"BertForTokenClassification"),z4t.forEach(t),Wzo=r(GSe," (BERT model)"),GSe.forEach(t),Qzo=i(J),d5=n(J,"LI",{});var OSe=s(d5);f_e=n(OSe,"STRONG",{});var W4t=s(f_e);Hzo=r(W4t,"big_bird"),W4t.forEach(t),Uzo=r(OSe," \u2014 "),MX=n(OSe,"A",{href:!0});var Q4t=s(MX);Jzo=r(Q4t,"BigBirdForTokenClassification"),Q4t.forEach(t),Yzo=r(OSe," (BigBird model)"),OSe.forEach(t),Kzo=i(J),c5=n(J,"LI",{});var VSe=s(c5);m_e=n(VSe,"STRONG",{});var H4t=s(m_e);Zzo=r(H4t,"bloom"),H4t.forEach(t),eWo=r(VSe," \u2014 "),EX=n(VSe,"A",{href:!0});var U4t=s(EX);oWo=r(U4t,"BloomForTokenClassification"),U4t.forEach(t),rWo=r(VSe," (BLOOM model)"),VSe.forEach(t),tWo=i(J),f5=n(J,"LI",{});var XSe=s(f5);g_e=n(XSe,"STRONG",{});var J4t=s(g_e);aWo=r(J4t,"camembert"),J4t.forEach(t),nWo=r(XSe," \u2014 "),CX=n(XSe,"A",{href:!0});var Y4t=s(CX);sWo=r(Y4t,"CamembertForTokenClassification"),Y4t.forEach(t),lWo=r(XSe," (CamemBERT model)"),XSe.forEach(t),iWo=i(J),m5=n(J,"LI",{});var zSe=s(m5);h_e=n(zSe,"STRONG",{});var K4t=s(h_e);dWo=r(K4t,"canine"),K4t.forEach(t),cWo=r(zSe," \u2014 "),wX=n(zSe,"A",{href:!0});var Z4t=s(wX);fWo=r(Z4t,"CanineForTokenClassification"),Z4t.forEach(t),mWo=r(zSe," (CANINE model)"),zSe.forEach(t),gWo=i(J),g5=n(J,"LI",{});var WSe=s(g5);p_e=n(WSe,"STRONG",{});var e5t=s(p_e);hWo=r(e5t,"convbert"),e5t.forEach(t),pWo=r(WSe," \u2014 "),AX=n(WSe,"A",{href:!0});var o5t=s(AX);_Wo=r(o5t,"ConvBertForTokenClassification"),o5t.forEach(t),uWo=r(WSe," (ConvBERT model)"),WSe.forEach(t),bWo=i(J),h5=n(J,"LI",{});var QSe=s(h5);__e=n(QSe,"STRONG",{});var r5t=s(__e);vWo=r(r5t,"data2vec-text"),r5t.forEach(t),FWo=r(QSe," \u2014 "),LX=n(QSe,"A",{href:!0});var t5t=s(LX);TWo=r(t5t,"Data2VecTextForTokenClassification"),t5t.forEach(t),MWo=r(QSe," (Data2VecText model)"),QSe.forEach(t),EWo=i(J),p5=n(J,"LI",{});var HSe=s(p5);u_e=n(HSe,"STRONG",{});var a5t=s(u_e);CWo=r(a5t,"deberta"),a5t.forEach(t),wWo=r(HSe," \u2014 "),yX=n(HSe,"A",{href:!0});var n5t=s(yX);AWo=r(n5t,"DebertaForTokenClassification"),n5t.forEach(t),LWo=r(HSe," (DeBERTa model)"),HSe.forEach(t),yWo=i(J),_5=n(J,"LI",{});var USe=s(_5);b_e=n(USe,"STRONG",{});var s5t=s(b_e);xWo=r(s5t,"deberta-v2"),s5t.forEach(t),$Wo=r(USe," \u2014 "),xX=n(USe,"A",{href:!0});var l5t=s(xX);kWo=r(l5t,"DebertaV2ForTokenClassification"),l5t.forEach(t),SWo=r(USe," (DeBERTa-v2 model)"),USe.forEach(t),RWo=i(J),u5=n(J,"LI",{});var JSe=s(u5);v_e=n(JSe,"STRONG",{});var i5t=s(v_e);PWo=r(i5t,"distilbert"),i5t.forEach(t),BWo=r(JSe," \u2014 "),$X=n(JSe,"A",{href:!0});var d5t=s($X);IWo=r(d5t,"DistilBertForTokenClassification"),d5t.forEach(t),NWo=r(JSe," (DistilBERT model)"),JSe.forEach(t),qWo=i(J),b5=n(J,"LI",{});var YSe=s(b5);F_e=n(YSe,"STRONG",{});var c5t=s(F_e);jWo=r(c5t,"electra"),c5t.forEach(t),DWo=r(YSe," \u2014 "),kX=n(YSe,"A",{href:!0});var f5t=s(kX);GWo=r(f5t,"ElectraForTokenClassification"),f5t.forEach(t),OWo=r(YSe," (ELECTRA model)"),YSe.forEach(t),VWo=i(J),v5=n(J,"LI",{});var KSe=s(v5);T_e=n(KSe,"STRONG",{});var m5t=s(T_e);XWo=r(m5t,"flaubert"),m5t.forEach(t),zWo=r(KSe," \u2014 "),SX=n(KSe,"A",{href:!0});var g5t=s(SX);WWo=r(g5t,"FlaubertForTokenClassification"),g5t.forEach(t),QWo=r(KSe," (FlauBERT model)"),KSe.forEach(t),HWo=i(J),F5=n(J,"LI",{});var ZSe=s(F5);M_e=n(ZSe,"STRONG",{});var h5t=s(M_e);UWo=r(h5t,"fnet"),h5t.forEach(t),JWo=r(ZSe," \u2014 "),RX=n(ZSe,"A",{href:!0});var p5t=s(RX);YWo=r(p5t,"FNetForTokenClassification"),p5t.forEach(t),KWo=r(ZSe," (FNet model)"),ZSe.forEach(t),ZWo=i(J),T5=n(J,"LI",{});var eRe=s(T5);E_e=n(eRe,"STRONG",{});var _5t=s(E_e);eQo=r(_5t,"funnel"),_5t.forEach(t),oQo=r(eRe," \u2014 "),PX=n(eRe,"A",{href:!0});var u5t=s(PX);rQo=r(u5t,"FunnelForTokenClassification"),u5t.forEach(t),tQo=r(eRe," (Funnel Transformer model)"),eRe.forEach(t),aQo=i(J),M5=n(J,"LI",{});var oRe=s(M5);C_e=n(oRe,"STRONG",{});var b5t=s(C_e);nQo=r(b5t,"gpt2"),b5t.forEach(t),sQo=r(oRe," \u2014 "),BX=n(oRe,"A",{href:!0});var v5t=s(BX);lQo=r(v5t,"GPT2ForTokenClassification"),v5t.forEach(t),iQo=r(oRe," (OpenAI GPT-2 model)"),oRe.forEach(t),dQo=i(J),E5=n(J,"LI",{});var rRe=s(E5);w_e=n(rRe,"STRONG",{});var F5t=s(w_e);cQo=r(F5t,"ibert"),F5t.forEach(t),fQo=r(rRe," \u2014 "),IX=n(rRe,"A",{href:!0});var T5t=s(IX);mQo=r(T5t,"IBertForTokenClassification"),T5t.forEach(t),gQo=r(rRe," (I-BERT model)"),rRe.forEach(t),hQo=i(J),C5=n(J,"LI",{});var tRe=s(C5);A_e=n(tRe,"STRONG",{});var M5t=s(A_e);pQo=r(M5t,"layoutlm"),M5t.forEach(t),_Qo=r(tRe," \u2014 "),NX=n(tRe,"A",{href:!0});var E5t=s(NX);uQo=r(E5t,"LayoutLMForTokenClassification"),E5t.forEach(t),bQo=r(tRe," (LayoutLM model)"),tRe.forEach(t),vQo=i(J),w5=n(J,"LI",{});var aRe=s(w5);L_e=n(aRe,"STRONG",{});var C5t=s(L_e);FQo=r(C5t,"layoutlmv2"),C5t.forEach(t),TQo=r(aRe," \u2014 "),qX=n(aRe,"A",{href:!0});var w5t=s(qX);MQo=r(w5t,"LayoutLMv2ForTokenClassification"),w5t.forEach(t),EQo=r(aRe," (LayoutLMv2 model)"),aRe.forEach(t),CQo=i(J),A5=n(J,"LI",{});var nRe=s(A5);y_e=n(nRe,"STRONG",{});var A5t=s(y_e);wQo=r(A5t,"layoutlmv3"),A5t.forEach(t),AQo=r(nRe," \u2014 "),jX=n(nRe,"A",{href:!0});var L5t=s(jX);LQo=r(L5t,"LayoutLMv3ForTokenClassification"),L5t.forEach(t),yQo=r(nRe," (LayoutLMv3 model)"),nRe.forEach(t),xQo=i(J),L5=n(J,"LI",{});var sRe=s(L5);x_e=n(sRe,"STRONG",{});var y5t=s(x_e);$Qo=r(y5t,"longformer"),y5t.forEach(t),kQo=r(sRe," \u2014 "),DX=n(sRe,"A",{href:!0});var x5t=s(DX);SQo=r(x5t,"LongformerForTokenClassification"),x5t.forEach(t),RQo=r(sRe," (Longformer model)"),sRe.forEach(t),PQo=i(J),y5=n(J,"LI",{});var lRe=s(y5);$_e=n(lRe,"STRONG",{});var $5t=s($_e);BQo=r($5t,"megatron-bert"),$5t.forEach(t),IQo=r(lRe," \u2014 "),GX=n(lRe,"A",{href:!0});var k5t=s(GX);NQo=r(k5t,"MegatronBertForTokenClassification"),k5t.forEach(t),qQo=r(lRe," (Megatron-BERT model)"),lRe.forEach(t),jQo=i(J),x5=n(J,"LI",{});var iRe=s(x5);k_e=n(iRe,"STRONG",{});var S5t=s(k_e);DQo=r(S5t,"mobilebert"),S5t.forEach(t),GQo=r(iRe," \u2014 "),OX=n(iRe,"A",{href:!0});var R5t=s(OX);OQo=r(R5t,"MobileBertForTokenClassification"),R5t.forEach(t),VQo=r(iRe," (MobileBERT model)"),iRe.forEach(t),XQo=i(J),$5=n(J,"LI",{});var dRe=s($5);S_e=n(dRe,"STRONG",{});var P5t=s(S_e);zQo=r(P5t,"mpnet"),P5t.forEach(t),WQo=r(dRe," \u2014 "),VX=n(dRe,"A",{href:!0});var B5t=s(VX);QQo=r(B5t,"MPNetForTokenClassification"),B5t.forEach(t),HQo=r(dRe," (MPNet model)"),dRe.forEach(t),UQo=i(J),k5=n(J,"LI",{});var cRe=s(k5);R_e=n(cRe,"STRONG",{});var I5t=s(R_e);JQo=r(I5t,"nystromformer"),I5t.forEach(t),YQo=r(cRe," \u2014 "),XX=n(cRe,"A",{href:!0});var N5t=s(XX);KQo=r(N5t,"NystromformerForTokenClassification"),N5t.forEach(t),ZQo=r(cRe," (Nystr\xF6mformer model)"),cRe.forEach(t),eHo=i(J),S5=n(J,"LI",{});var fRe=s(S5);P_e=n(fRe,"STRONG",{});var q5t=s(P_e);oHo=r(q5t,"qdqbert"),q5t.forEach(t),rHo=r(fRe," \u2014 "),zX=n(fRe,"A",{href:!0});var j5t=s(zX);tHo=r(j5t,"QDQBertForTokenClassification"),j5t.forEach(t),aHo=r(fRe," (QDQBert model)"),fRe.forEach(t),nHo=i(J),R5=n(J,"LI",{});var mRe=s(R5);B_e=n(mRe,"STRONG",{});var D5t=s(B_e);sHo=r(D5t,"rembert"),D5t.forEach(t),lHo=r(mRe," \u2014 "),WX=n(mRe,"A",{href:!0});var G5t=s(WX);iHo=r(G5t,"RemBertForTokenClassification"),G5t.forEach(t),dHo=r(mRe," (RemBERT model)"),mRe.forEach(t),cHo=i(J),P5=n(J,"LI",{});var gRe=s(P5);I_e=n(gRe,"STRONG",{});var O5t=s(I_e);fHo=r(O5t,"roberta"),O5t.forEach(t),mHo=r(gRe," \u2014 "),QX=n(gRe,"A",{href:!0});var V5t=s(QX);gHo=r(V5t,"RobertaForTokenClassification"),V5t.forEach(t),hHo=r(gRe," (RoBERTa model)"),gRe.forEach(t),pHo=i(J),B5=n(J,"LI",{});var hRe=s(B5);N_e=n(hRe,"STRONG",{});var X5t=s(N_e);_Ho=r(X5t,"roformer"),X5t.forEach(t),uHo=r(hRe," \u2014 "),HX=n(hRe,"A",{href:!0});var z5t=s(HX);bHo=r(z5t,"RoFormerForTokenClassification"),z5t.forEach(t),vHo=r(hRe," (RoFormer model)"),hRe.forEach(t),FHo=i(J),I5=n(J,"LI",{});var pRe=s(I5);q_e=n(pRe,"STRONG",{});var W5t=s(q_e);THo=r(W5t,"squeezebert"),W5t.forEach(t),MHo=r(pRe," \u2014 "),UX=n(pRe,"A",{href:!0});var Q5t=s(UX);EHo=r(Q5t,"SqueezeBertForTokenClassification"),Q5t.forEach(t),CHo=r(pRe," (SqueezeBERT model)"),pRe.forEach(t),wHo=i(J),N5=n(J,"LI",{});var _Re=s(N5);j_e=n(_Re,"STRONG",{});var H5t=s(j_e);AHo=r(H5t,"xlm"),H5t.forEach(t),LHo=r(_Re," \u2014 "),JX=n(_Re,"A",{href:!0});var U5t=s(JX);yHo=r(U5t,"XLMForTokenClassification"),U5t.forEach(t),xHo=r(_Re," (XLM model)"),_Re.forEach(t),$Ho=i(J),q5=n(J,"LI",{});var uRe=s(q5);D_e=n(uRe,"STRONG",{});var J5t=s(D_e);kHo=r(J5t,"xlm-roberta"),J5t.forEach(t),SHo=r(uRe," \u2014 "),YX=n(uRe,"A",{href:!0});var Y5t=s(YX);RHo=r(Y5t,"XLMRobertaForTokenClassification"),Y5t.forEach(t),PHo=r(uRe," (XLM-RoBERTa model)"),uRe.forEach(t),BHo=i(J),j5=n(J,"LI",{});var bRe=s(j5);G_e=n(bRe,"STRONG",{});var K5t=s(G_e);IHo=r(K5t,"xlm-roberta-xl"),K5t.forEach(t),NHo=r(bRe," \u2014 "),KX=n(bRe,"A",{href:!0});var Z5t=s(KX);qHo=r(Z5t,"XLMRobertaXLForTokenClassification"),Z5t.forEach(t),jHo=r(bRe," (XLM-RoBERTa-XL model)"),bRe.forEach(t),DHo=i(J),D5=n(J,"LI",{});var vRe=s(D5);O_e=n(vRe,"STRONG",{});var evt=s(O_e);GHo=r(evt,"xlnet"),evt.forEach(t),OHo=r(vRe," \u2014 "),ZX=n(vRe,"A",{href:!0});var ovt=s(ZX);VHo=r(ovt,"XLNetForTokenClassification"),ovt.forEach(t),XHo=r(vRe," (XLNet model)"),vRe.forEach(t),zHo=i(J),G5=n(J,"LI",{});var FRe=s(G5);V_e=n(FRe,"STRONG",{});var rvt=s(V_e);WHo=r(rvt,"yoso"),rvt.forEach(t),QHo=r(FRe," \u2014 "),ez=n(FRe,"A",{href:!0});var tvt=s(ez);HHo=r(tvt,"YosoForTokenClassification"),tvt.forEach(t),UHo=r(FRe," (YOSO model)"),FRe.forEach(t),J.forEach(t),JHo=i(ga),O5=n(ga,"P",{});var TRe=s(O5);YHo=r(TRe,"The model is set in evaluation mode by default using "),X_e=n(TRe,"CODE",{});var avt=s(X_e);KHo=r(avt,"model.eval()"),avt.forEach(t),ZHo=r(TRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z_e=n(TRe,"CODE",{});var nvt=s(z_e);eUo=r(nvt,"model.train()"),nvt.forEach(t),TRe.forEach(t),oUo=i(ga),T(V5.$$.fragment,ga),ga.forEach(t),al.forEach(t),UGe=i(f),id=n(f,"H2",{class:!0});var oXe=s(id);X5=n(oXe,"A",{id:!0,class:!0,href:!0});var svt=s(X5);W_e=n(svt,"SPAN",{});var lvt=s(W_e);T(Gy.$$.fragment,lvt),lvt.forEach(t),svt.forEach(t),rUo=i(oXe),Q_e=n(oXe,"SPAN",{});var ivt=s(Q_e);tUo=r(ivt,"AutoModelForQuestionAnswering"),ivt.forEach(t),oXe.forEach(t),JGe=i(f),qo=n(f,"DIV",{class:!0});var nl=s(qo);T(Oy.$$.fragment,nl),aUo=i(nl),dd=n(nl,"P",{});var woe=s(dd);nUo=r(woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),oz=n(woe,"A",{href:!0});var dvt=s(oz);sUo=r(dvt,"from_pretrained()"),dvt.forEach(t),lUo=r(woe," class method or the "),rz=n(woe,"A",{href:!0});var cvt=s(rz);iUo=r(cvt,"from_config()"),cvt.forEach(t),dUo=r(woe,` class
method.`),woe.forEach(t),cUo=i(nl),Vy=n(nl,"P",{});var rXe=s(Vy);fUo=r(rXe,"This class cannot be instantiated directly using "),H_e=n(rXe,"CODE",{});var fvt=s(H_e);mUo=r(fvt,"__init__()"),fvt.forEach(t),gUo=r(rXe," (throws an error)."),rXe.forEach(t),hUo=i(nl),pt=n(nl,"DIV",{class:!0});var zA=s(pt);T(Xy.$$.fragment,zA),pUo=i(zA),U_e=n(zA,"P",{});var mvt=s(U_e);_Uo=r(mvt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mvt.forEach(t),uUo=i(zA),cd=n(zA,"P",{});var Aoe=s(cd);bUo=r(Aoe,`Note:
Loading a model from its configuration file does `),J_e=n(Aoe,"STRONG",{});var gvt=s(J_e);vUo=r(gvt,"not"),gvt.forEach(t),FUo=r(Aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=n(Aoe,"A",{href:!0});var hvt=s(tz);TUo=r(hvt,"from_pretrained()"),hvt.forEach(t),MUo=r(Aoe," to load the model weights."),Aoe.forEach(t),EUo=i(zA),T(z5.$$.fragment,zA),zA.forEach(t),CUo=i(nl),no=n(nl,"DIV",{class:!0});var ha=s(no);T(zy.$$.fragment,ha),wUo=i(ha),Y_e=n(ha,"P",{});var pvt=s(Y_e);AUo=r(pvt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),pvt.forEach(t),LUo=i(ha),Oa=n(ha,"P",{});var WA=s(Oa);yUo=r(WA,"The model class to instantiate is selected based on the "),K_e=n(WA,"CODE",{});var _vt=s(K_e);xUo=r(_vt,"model_type"),_vt.forEach(t),$Uo=r(WA,` property of the config object (either
passed as an argument or loaded from `),Z_e=n(WA,"CODE",{});var uvt=s(Z_e);kUo=r(uvt,"pretrained_model_name_or_path"),uvt.forEach(t),SUo=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=n(WA,"CODE",{});var bvt=s(eue);RUo=r(bvt,"pretrained_model_name_or_path"),bvt.forEach(t),PUo=r(WA,":"),WA.forEach(t),BUo=i(ha),V=n(ha,"UL",{});var X=s(V);W5=n(X,"LI",{});var MRe=s(W5);oue=n(MRe,"STRONG",{});var vvt=s(oue);IUo=r(vvt,"albert"),vvt.forEach(t),NUo=r(MRe," \u2014 "),az=n(MRe,"A",{href:!0});var Fvt=s(az);qUo=r(Fvt,"AlbertForQuestionAnswering"),Fvt.forEach(t),jUo=r(MRe," (ALBERT model)"),MRe.forEach(t),DUo=i(X),Q5=n(X,"LI",{});var ERe=s(Q5);rue=n(ERe,"STRONG",{});var Tvt=s(rue);GUo=r(Tvt,"bart"),Tvt.forEach(t),OUo=r(ERe," \u2014 "),nz=n(ERe,"A",{href:!0});var Mvt=s(nz);VUo=r(Mvt,"BartForQuestionAnswering"),Mvt.forEach(t),XUo=r(ERe," (BART model)"),ERe.forEach(t),zUo=i(X),H5=n(X,"LI",{});var CRe=s(H5);tue=n(CRe,"STRONG",{});var Evt=s(tue);WUo=r(Evt,"bert"),Evt.forEach(t),QUo=r(CRe," \u2014 "),sz=n(CRe,"A",{href:!0});var Cvt=s(sz);HUo=r(Cvt,"BertForQuestionAnswering"),Cvt.forEach(t),UUo=r(CRe," (BERT model)"),CRe.forEach(t),JUo=i(X),U5=n(X,"LI",{});var wRe=s(U5);aue=n(wRe,"STRONG",{});var wvt=s(aue);YUo=r(wvt,"big_bird"),wvt.forEach(t),KUo=r(wRe," \u2014 "),lz=n(wRe,"A",{href:!0});var Avt=s(lz);ZUo=r(Avt,"BigBirdForQuestionAnswering"),Avt.forEach(t),eJo=r(wRe," (BigBird model)"),wRe.forEach(t),oJo=i(X),J5=n(X,"LI",{});var ARe=s(J5);nue=n(ARe,"STRONG",{});var Lvt=s(nue);rJo=r(Lvt,"bigbird_pegasus"),Lvt.forEach(t),tJo=r(ARe," \u2014 "),iz=n(ARe,"A",{href:!0});var yvt=s(iz);aJo=r(yvt,"BigBirdPegasusForQuestionAnswering"),yvt.forEach(t),nJo=r(ARe," (BigBird-Pegasus model)"),ARe.forEach(t),sJo=i(X),Y5=n(X,"LI",{});var LRe=s(Y5);sue=n(LRe,"STRONG",{});var xvt=s(sue);lJo=r(xvt,"camembert"),xvt.forEach(t),iJo=r(LRe," \u2014 "),dz=n(LRe,"A",{href:!0});var $vt=s(dz);dJo=r($vt,"CamembertForQuestionAnswering"),$vt.forEach(t),cJo=r(LRe," (CamemBERT model)"),LRe.forEach(t),fJo=i(X),K5=n(X,"LI",{});var yRe=s(K5);lue=n(yRe,"STRONG",{});var kvt=s(lue);mJo=r(kvt,"canine"),kvt.forEach(t),gJo=r(yRe," \u2014 "),cz=n(yRe,"A",{href:!0});var Svt=s(cz);hJo=r(Svt,"CanineForQuestionAnswering"),Svt.forEach(t),pJo=r(yRe," (CANINE model)"),yRe.forEach(t),_Jo=i(X),Z5=n(X,"LI",{});var xRe=s(Z5);iue=n(xRe,"STRONG",{});var Rvt=s(iue);uJo=r(Rvt,"convbert"),Rvt.forEach(t),bJo=r(xRe," \u2014 "),fz=n(xRe,"A",{href:!0});var Pvt=s(fz);vJo=r(Pvt,"ConvBertForQuestionAnswering"),Pvt.forEach(t),FJo=r(xRe," (ConvBERT model)"),xRe.forEach(t),TJo=i(X),ev=n(X,"LI",{});var $Re=s(ev);due=n($Re,"STRONG",{});var Bvt=s(due);MJo=r(Bvt,"data2vec-text"),Bvt.forEach(t),EJo=r($Re," \u2014 "),mz=n($Re,"A",{href:!0});var Ivt=s(mz);CJo=r(Ivt,"Data2VecTextForQuestionAnswering"),Ivt.forEach(t),wJo=r($Re," (Data2VecText model)"),$Re.forEach(t),AJo=i(X),ov=n(X,"LI",{});var kRe=s(ov);cue=n(kRe,"STRONG",{});var Nvt=s(cue);LJo=r(Nvt,"deberta"),Nvt.forEach(t),yJo=r(kRe," \u2014 "),gz=n(kRe,"A",{href:!0});var qvt=s(gz);xJo=r(qvt,"DebertaForQuestionAnswering"),qvt.forEach(t),$Jo=r(kRe," (DeBERTa model)"),kRe.forEach(t),kJo=i(X),rv=n(X,"LI",{});var SRe=s(rv);fue=n(SRe,"STRONG",{});var jvt=s(fue);SJo=r(jvt,"deberta-v2"),jvt.forEach(t),RJo=r(SRe," \u2014 "),hz=n(SRe,"A",{href:!0});var Dvt=s(hz);PJo=r(Dvt,"DebertaV2ForQuestionAnswering"),Dvt.forEach(t),BJo=r(SRe," (DeBERTa-v2 model)"),SRe.forEach(t),IJo=i(X),tv=n(X,"LI",{});var RRe=s(tv);mue=n(RRe,"STRONG",{});var Gvt=s(mue);NJo=r(Gvt,"distilbert"),Gvt.forEach(t),qJo=r(RRe," \u2014 "),pz=n(RRe,"A",{href:!0});var Ovt=s(pz);jJo=r(Ovt,"DistilBertForQuestionAnswering"),Ovt.forEach(t),DJo=r(RRe," (DistilBERT model)"),RRe.forEach(t),GJo=i(X),av=n(X,"LI",{});var PRe=s(av);gue=n(PRe,"STRONG",{});var Vvt=s(gue);OJo=r(Vvt,"electra"),Vvt.forEach(t),VJo=r(PRe," \u2014 "),_z=n(PRe,"A",{href:!0});var Xvt=s(_z);XJo=r(Xvt,"ElectraForQuestionAnswering"),Xvt.forEach(t),zJo=r(PRe," (ELECTRA model)"),PRe.forEach(t),WJo=i(X),nv=n(X,"LI",{});var BRe=s(nv);hue=n(BRe,"STRONG",{});var zvt=s(hue);QJo=r(zvt,"flaubert"),zvt.forEach(t),HJo=r(BRe," \u2014 "),uz=n(BRe,"A",{href:!0});var Wvt=s(uz);UJo=r(Wvt,"FlaubertForQuestionAnsweringSimple"),Wvt.forEach(t),JJo=r(BRe," (FlauBERT model)"),BRe.forEach(t),YJo=i(X),sv=n(X,"LI",{});var IRe=s(sv);pue=n(IRe,"STRONG",{});var Qvt=s(pue);KJo=r(Qvt,"fnet"),Qvt.forEach(t),ZJo=r(IRe," \u2014 "),bz=n(IRe,"A",{href:!0});var Hvt=s(bz);eYo=r(Hvt,"FNetForQuestionAnswering"),Hvt.forEach(t),oYo=r(IRe," (FNet model)"),IRe.forEach(t),rYo=i(X),lv=n(X,"LI",{});var NRe=s(lv);_ue=n(NRe,"STRONG",{});var Uvt=s(_ue);tYo=r(Uvt,"funnel"),Uvt.forEach(t),aYo=r(NRe," \u2014 "),vz=n(NRe,"A",{href:!0});var Jvt=s(vz);nYo=r(Jvt,"FunnelForQuestionAnswering"),Jvt.forEach(t),sYo=r(NRe," (Funnel Transformer model)"),NRe.forEach(t),lYo=i(X),iv=n(X,"LI",{});var qRe=s(iv);uue=n(qRe,"STRONG",{});var Yvt=s(uue);iYo=r(Yvt,"gptj"),Yvt.forEach(t),dYo=r(qRe," \u2014 "),Fz=n(qRe,"A",{href:!0});var Kvt=s(Fz);cYo=r(Kvt,"GPTJForQuestionAnswering"),Kvt.forEach(t),fYo=r(qRe," (GPT-J model)"),qRe.forEach(t),mYo=i(X),dv=n(X,"LI",{});var jRe=s(dv);bue=n(jRe,"STRONG",{});var Zvt=s(bue);gYo=r(Zvt,"ibert"),Zvt.forEach(t),hYo=r(jRe," \u2014 "),Tz=n(jRe,"A",{href:!0});var e3t=s(Tz);pYo=r(e3t,"IBertForQuestionAnswering"),e3t.forEach(t),_Yo=r(jRe," (I-BERT model)"),jRe.forEach(t),uYo=i(X),cv=n(X,"LI",{});var DRe=s(cv);vue=n(DRe,"STRONG",{});var o3t=s(vue);bYo=r(o3t,"layoutlmv2"),o3t.forEach(t),vYo=r(DRe," \u2014 "),Mz=n(DRe,"A",{href:!0});var r3t=s(Mz);FYo=r(r3t,"LayoutLMv2ForQuestionAnswering"),r3t.forEach(t),TYo=r(DRe," (LayoutLMv2 model)"),DRe.forEach(t),MYo=i(X),fv=n(X,"LI",{});var GRe=s(fv);Fue=n(GRe,"STRONG",{});var t3t=s(Fue);EYo=r(t3t,"layoutlmv3"),t3t.forEach(t),CYo=r(GRe," \u2014 "),Ez=n(GRe,"A",{href:!0});var a3t=s(Ez);wYo=r(a3t,"LayoutLMv3ForQuestionAnswering"),a3t.forEach(t),AYo=r(GRe," (LayoutLMv3 model)"),GRe.forEach(t),LYo=i(X),mv=n(X,"LI",{});var ORe=s(mv);Tue=n(ORe,"STRONG",{});var n3t=s(Tue);yYo=r(n3t,"led"),n3t.forEach(t),xYo=r(ORe," \u2014 "),Cz=n(ORe,"A",{href:!0});var s3t=s(Cz);$Yo=r(s3t,"LEDForQuestionAnswering"),s3t.forEach(t),kYo=r(ORe," (LED model)"),ORe.forEach(t),SYo=i(X),gv=n(X,"LI",{});var VRe=s(gv);Mue=n(VRe,"STRONG",{});var l3t=s(Mue);RYo=r(l3t,"longformer"),l3t.forEach(t),PYo=r(VRe," \u2014 "),wz=n(VRe,"A",{href:!0});var i3t=s(wz);BYo=r(i3t,"LongformerForQuestionAnswering"),i3t.forEach(t),IYo=r(VRe," (Longformer model)"),VRe.forEach(t),NYo=i(X),hv=n(X,"LI",{});var XRe=s(hv);Eue=n(XRe,"STRONG",{});var d3t=s(Eue);qYo=r(d3t,"lxmert"),d3t.forEach(t),jYo=r(XRe," \u2014 "),Az=n(XRe,"A",{href:!0});var c3t=s(Az);DYo=r(c3t,"LxmertForQuestionAnswering"),c3t.forEach(t),GYo=r(XRe," (LXMERT model)"),XRe.forEach(t),OYo=i(X),pv=n(X,"LI",{});var zRe=s(pv);Cue=n(zRe,"STRONG",{});var f3t=s(Cue);VYo=r(f3t,"mbart"),f3t.forEach(t),XYo=r(zRe," \u2014 "),Lz=n(zRe,"A",{href:!0});var m3t=s(Lz);zYo=r(m3t,"MBartForQuestionAnswering"),m3t.forEach(t),WYo=r(zRe," (mBART model)"),zRe.forEach(t),QYo=i(X),_v=n(X,"LI",{});var WRe=s(_v);wue=n(WRe,"STRONG",{});var g3t=s(wue);HYo=r(g3t,"megatron-bert"),g3t.forEach(t),UYo=r(WRe," \u2014 "),yz=n(WRe,"A",{href:!0});var h3t=s(yz);JYo=r(h3t,"MegatronBertForQuestionAnswering"),h3t.forEach(t),YYo=r(WRe," (Megatron-BERT model)"),WRe.forEach(t),KYo=i(X),uv=n(X,"LI",{});var QRe=s(uv);Aue=n(QRe,"STRONG",{});var p3t=s(Aue);ZYo=r(p3t,"mobilebert"),p3t.forEach(t),eKo=r(QRe," \u2014 "),xz=n(QRe,"A",{href:!0});var _3t=s(xz);oKo=r(_3t,"MobileBertForQuestionAnswering"),_3t.forEach(t),rKo=r(QRe," (MobileBERT model)"),QRe.forEach(t),tKo=i(X),bv=n(X,"LI",{});var HRe=s(bv);Lue=n(HRe,"STRONG",{});var u3t=s(Lue);aKo=r(u3t,"mpnet"),u3t.forEach(t),nKo=r(HRe," \u2014 "),$z=n(HRe,"A",{href:!0});var b3t=s($z);sKo=r(b3t,"MPNetForQuestionAnswering"),b3t.forEach(t),lKo=r(HRe," (MPNet model)"),HRe.forEach(t),iKo=i(X),vv=n(X,"LI",{});var URe=s(vv);yue=n(URe,"STRONG",{});var v3t=s(yue);dKo=r(v3t,"nystromformer"),v3t.forEach(t),cKo=r(URe," \u2014 "),kz=n(URe,"A",{href:!0});var F3t=s(kz);fKo=r(F3t,"NystromformerForQuestionAnswering"),F3t.forEach(t),mKo=r(URe," (Nystr\xF6mformer model)"),URe.forEach(t),gKo=i(X),Fv=n(X,"LI",{});var JRe=s(Fv);xue=n(JRe,"STRONG",{});var T3t=s(xue);hKo=r(T3t,"qdqbert"),T3t.forEach(t),pKo=r(JRe," \u2014 "),Sz=n(JRe,"A",{href:!0});var M3t=s(Sz);_Ko=r(M3t,"QDQBertForQuestionAnswering"),M3t.forEach(t),uKo=r(JRe," (QDQBert model)"),JRe.forEach(t),bKo=i(X),Tv=n(X,"LI",{});var YRe=s(Tv);$ue=n(YRe,"STRONG",{});var E3t=s($ue);vKo=r(E3t,"reformer"),E3t.forEach(t),FKo=r(YRe," \u2014 "),Rz=n(YRe,"A",{href:!0});var C3t=s(Rz);TKo=r(C3t,"ReformerForQuestionAnswering"),C3t.forEach(t),MKo=r(YRe," (Reformer model)"),YRe.forEach(t),EKo=i(X),Mv=n(X,"LI",{});var KRe=s(Mv);kue=n(KRe,"STRONG",{});var w3t=s(kue);CKo=r(w3t,"rembert"),w3t.forEach(t),wKo=r(KRe," \u2014 "),Pz=n(KRe,"A",{href:!0});var A3t=s(Pz);AKo=r(A3t,"RemBertForQuestionAnswering"),A3t.forEach(t),LKo=r(KRe," (RemBERT model)"),KRe.forEach(t),yKo=i(X),Ev=n(X,"LI",{});var ZRe=s(Ev);Sue=n(ZRe,"STRONG",{});var L3t=s(Sue);xKo=r(L3t,"roberta"),L3t.forEach(t),$Ko=r(ZRe," \u2014 "),Bz=n(ZRe,"A",{href:!0});var y3t=s(Bz);kKo=r(y3t,"RobertaForQuestionAnswering"),y3t.forEach(t),SKo=r(ZRe," (RoBERTa model)"),ZRe.forEach(t),RKo=i(X),Cv=n(X,"LI",{});var ePe=s(Cv);Rue=n(ePe,"STRONG",{});var x3t=s(Rue);PKo=r(x3t,"roformer"),x3t.forEach(t),BKo=r(ePe," \u2014 "),Iz=n(ePe,"A",{href:!0});var $3t=s(Iz);IKo=r($3t,"RoFormerForQuestionAnswering"),$3t.forEach(t),NKo=r(ePe," (RoFormer model)"),ePe.forEach(t),qKo=i(X),wv=n(X,"LI",{});var oPe=s(wv);Pue=n(oPe,"STRONG",{});var k3t=s(Pue);jKo=r(k3t,"splinter"),k3t.forEach(t),DKo=r(oPe," \u2014 "),Nz=n(oPe,"A",{href:!0});var S3t=s(Nz);GKo=r(S3t,"SplinterForQuestionAnswering"),S3t.forEach(t),OKo=r(oPe," (Splinter model)"),oPe.forEach(t),VKo=i(X),Av=n(X,"LI",{});var rPe=s(Av);Bue=n(rPe,"STRONG",{});var R3t=s(Bue);XKo=r(R3t,"squeezebert"),R3t.forEach(t),zKo=r(rPe," \u2014 "),qz=n(rPe,"A",{href:!0});var P3t=s(qz);WKo=r(P3t,"SqueezeBertForQuestionAnswering"),P3t.forEach(t),QKo=r(rPe," (SqueezeBERT model)"),rPe.forEach(t),HKo=i(X),Lv=n(X,"LI",{});var tPe=s(Lv);Iue=n(tPe,"STRONG",{});var B3t=s(Iue);UKo=r(B3t,"xlm"),B3t.forEach(t),JKo=r(tPe," \u2014 "),jz=n(tPe,"A",{href:!0});var I3t=s(jz);YKo=r(I3t,"XLMForQuestionAnsweringSimple"),I3t.forEach(t),KKo=r(tPe," (XLM model)"),tPe.forEach(t),ZKo=i(X),yv=n(X,"LI",{});var aPe=s(yv);Nue=n(aPe,"STRONG",{});var N3t=s(Nue);eZo=r(N3t,"xlm-roberta"),N3t.forEach(t),oZo=r(aPe," \u2014 "),Dz=n(aPe,"A",{href:!0});var q3t=s(Dz);rZo=r(q3t,"XLMRobertaForQuestionAnswering"),q3t.forEach(t),tZo=r(aPe," (XLM-RoBERTa model)"),aPe.forEach(t),aZo=i(X),xv=n(X,"LI",{});var nPe=s(xv);que=n(nPe,"STRONG",{});var j3t=s(que);nZo=r(j3t,"xlm-roberta-xl"),j3t.forEach(t),sZo=r(nPe," \u2014 "),Gz=n(nPe,"A",{href:!0});var D3t=s(Gz);lZo=r(D3t,"XLMRobertaXLForQuestionAnswering"),D3t.forEach(t),iZo=r(nPe," (XLM-RoBERTa-XL model)"),nPe.forEach(t),dZo=i(X),$v=n(X,"LI",{});var sPe=s($v);jue=n(sPe,"STRONG",{});var G3t=s(jue);cZo=r(G3t,"xlnet"),G3t.forEach(t),fZo=r(sPe," \u2014 "),Oz=n(sPe,"A",{href:!0});var O3t=s(Oz);mZo=r(O3t,"XLNetForQuestionAnsweringSimple"),O3t.forEach(t),gZo=r(sPe," (XLNet model)"),sPe.forEach(t),hZo=i(X),kv=n(X,"LI",{});var lPe=s(kv);Due=n(lPe,"STRONG",{});var V3t=s(Due);pZo=r(V3t,"yoso"),V3t.forEach(t),_Zo=r(lPe," \u2014 "),Vz=n(lPe,"A",{href:!0});var X3t=s(Vz);uZo=r(X3t,"YosoForQuestionAnswering"),X3t.forEach(t),bZo=r(lPe," (YOSO model)"),lPe.forEach(t),X.forEach(t),vZo=i(ha),Sv=n(ha,"P",{});var iPe=s(Sv);FZo=r(iPe,"The model is set in evaluation mode by default using "),Gue=n(iPe,"CODE",{});var z3t=s(Gue);TZo=r(z3t,"model.eval()"),z3t.forEach(t),MZo=r(iPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=n(iPe,"CODE",{});var W3t=s(Oue);EZo=r(W3t,"model.train()"),W3t.forEach(t),iPe.forEach(t),CZo=i(ha),T(Rv.$$.fragment,ha),ha.forEach(t),nl.forEach(t),YGe=i(f),fd=n(f,"H2",{class:!0});var tXe=s(fd);Pv=n(tXe,"A",{id:!0,class:!0,href:!0});var Q3t=s(Pv);Vue=n(Q3t,"SPAN",{});var H3t=s(Vue);T(Wy.$$.fragment,H3t),H3t.forEach(t),Q3t.forEach(t),wZo=i(tXe),Xue=n(tXe,"SPAN",{});var U3t=s(Xue);AZo=r(U3t,"AutoModelForTableQuestionAnswering"),U3t.forEach(t),tXe.forEach(t),KGe=i(f),jo=n(f,"DIV",{class:!0});var sl=s(jo);T(Qy.$$.fragment,sl),LZo=i(sl),md=n(sl,"P",{});var Loe=s(md);yZo=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Xz=n(Loe,"A",{href:!0});var J3t=s(Xz);xZo=r(J3t,"from_pretrained()"),J3t.forEach(t),$Zo=r(Loe," class method or the "),zz=n(Loe,"A",{href:!0});var Y3t=s(zz);kZo=r(Y3t,"from_config()"),Y3t.forEach(t),SZo=r(Loe,` class
method.`),Loe.forEach(t),RZo=i(sl),Hy=n(sl,"P",{});var aXe=s(Hy);PZo=r(aXe,"This class cannot be instantiated directly using "),zue=n(aXe,"CODE",{});var K3t=s(zue);BZo=r(K3t,"__init__()"),K3t.forEach(t),IZo=r(aXe," (throws an error)."),aXe.forEach(t),NZo=i(sl),_t=n(sl,"DIV",{class:!0});var QA=s(_t);T(Uy.$$.fragment,QA),qZo=i(QA),Wue=n(QA,"P",{});var Z3t=s(Wue);jZo=r(Z3t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Z3t.forEach(t),DZo=i(QA),gd=n(QA,"P",{});var yoe=s(gd);GZo=r(yoe,`Note:
Loading a model from its configuration file does `),Que=n(yoe,"STRONG",{});var eFt=s(Que);OZo=r(eFt,"not"),eFt.forEach(t),VZo=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=n(yoe,"A",{href:!0});var oFt=s(Wz);XZo=r(oFt,"from_pretrained()"),oFt.forEach(t),zZo=r(yoe," to load the model weights."),yoe.forEach(t),WZo=i(QA),T(Bv.$$.fragment,QA),QA.forEach(t),QZo=i(sl),so=n(sl,"DIV",{class:!0});var pa=s(so);T(Jy.$$.fragment,pa),HZo=i(pa),Hue=n(pa,"P",{});var rFt=s(Hue);UZo=r(rFt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),rFt.forEach(t),JZo=i(pa),Va=n(pa,"P",{});var HA=s(Va);YZo=r(HA,"The model class to instantiate is selected based on the "),Uue=n(HA,"CODE",{});var tFt=s(Uue);KZo=r(tFt,"model_type"),tFt.forEach(t),ZZo=r(HA,` property of the config object (either
passed as an argument or loaded from `),Jue=n(HA,"CODE",{});var aFt=s(Jue);eer=r(aFt,"pretrained_model_name_or_path"),aFt.forEach(t),oer=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=n(HA,"CODE",{});var nFt=s(Yue);rer=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),ter=r(HA,":"),HA.forEach(t),aer=i(pa),Kue=n(pa,"UL",{});var sFt=s(Kue);Iv=n(sFt,"LI",{});var dPe=s(Iv);Zue=n(dPe,"STRONG",{});var lFt=s(Zue);ner=r(lFt,"tapas"),lFt.forEach(t),ser=r(dPe," \u2014 "),Qz=n(dPe,"A",{href:!0});var iFt=s(Qz);ler=r(iFt,"TapasForQuestionAnswering"),iFt.forEach(t),ier=r(dPe," (TAPAS model)"),dPe.forEach(t),sFt.forEach(t),der=i(pa),Nv=n(pa,"P",{});var cPe=s(Nv);cer=r(cPe,"The model is set in evaluation mode by default using "),e1e=n(cPe,"CODE",{});var dFt=s(e1e);fer=r(dFt,"model.eval()"),dFt.forEach(t),mer=r(cPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=n(cPe,"CODE",{});var cFt=s(o1e);ger=r(cFt,"model.train()"),cFt.forEach(t),cPe.forEach(t),her=i(pa),T(qv.$$.fragment,pa),pa.forEach(t),sl.forEach(t),ZGe=i(f),hd=n(f,"H2",{class:!0});var nXe=s(hd);jv=n(nXe,"A",{id:!0,class:!0,href:!0});var fFt=s(jv);r1e=n(fFt,"SPAN",{});var mFt=s(r1e);T(Yy.$$.fragment,mFt),mFt.forEach(t),fFt.forEach(t),per=i(nXe),t1e=n(nXe,"SPAN",{});var gFt=s(t1e);_er=r(gFt,"AutoModelForImageClassification"),gFt.forEach(t),nXe.forEach(t),eOe=i(f),Do=n(f,"DIV",{class:!0});var ll=s(Do);T(Ky.$$.fragment,ll),uer=i(ll),pd=n(ll,"P",{});var xoe=s(pd);ber=r(xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Hz=n(xoe,"A",{href:!0});var hFt=s(Hz);ver=r(hFt,"from_pretrained()"),hFt.forEach(t),Fer=r(xoe," class method or the "),Uz=n(xoe,"A",{href:!0});var pFt=s(Uz);Ter=r(pFt,"from_config()"),pFt.forEach(t),Mer=r(xoe,` class
method.`),xoe.forEach(t),Eer=i(ll),Zy=n(ll,"P",{});var sXe=s(Zy);Cer=r(sXe,"This class cannot be instantiated directly using "),a1e=n(sXe,"CODE",{});var _Ft=s(a1e);wer=r(_Ft,"__init__()"),_Ft.forEach(t),Aer=r(sXe," (throws an error)."),sXe.forEach(t),Ler=i(ll),ut=n(ll,"DIV",{class:!0});var UA=s(ut);T(e8.$$.fragment,UA),yer=i(UA),n1e=n(UA,"P",{});var uFt=s(n1e);xer=r(uFt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uFt.forEach(t),$er=i(UA),_d=n(UA,"P",{});var $oe=s(_d);ker=r($oe,`Note:
Loading a model from its configuration file does `),s1e=n($oe,"STRONG",{});var bFt=s(s1e);Ser=r(bFt,"not"),bFt.forEach(t),Rer=r($oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n($oe,"A",{href:!0});var vFt=s(Jz);Per=r(vFt,"from_pretrained()"),vFt.forEach(t),Ber=r($oe," to load the model weights."),$oe.forEach(t),Ier=i(UA),T(Dv.$$.fragment,UA),UA.forEach(t),Ner=i(ll),lo=n(ll,"DIV",{class:!0});var _a=s(lo);T(o8.$$.fragment,_a),qer=i(_a),l1e=n(_a,"P",{});var FFt=s(l1e);jer=r(FFt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),FFt.forEach(t),Der=i(_a),Xa=n(_a,"P",{});var JA=s(Xa);Ger=r(JA,"The model class to instantiate is selected based on the "),i1e=n(JA,"CODE",{});var TFt=s(i1e);Oer=r(TFt,"model_type"),TFt.forEach(t),Ver=r(JA,` property of the config object (either
passed as an argument or loaded from `),d1e=n(JA,"CODE",{});var MFt=s(d1e);Xer=r(MFt,"pretrained_model_name_or_path"),MFt.forEach(t),zer=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=n(JA,"CODE",{});var EFt=s(c1e);Wer=r(EFt,"pretrained_model_name_or_path"),EFt.forEach(t),Qer=r(JA,":"),JA.forEach(t),Her=i(_a),ue=n(_a,"UL",{});var Te=s(ue);Gv=n(Te,"LI",{});var fPe=s(Gv);f1e=n(fPe,"STRONG",{});var CFt=s(f1e);Uer=r(CFt,"beit"),CFt.forEach(t),Jer=r(fPe," \u2014 "),Yz=n(fPe,"A",{href:!0});var wFt=s(Yz);Yer=r(wFt,"BeitForImageClassification"),wFt.forEach(t),Ker=r(fPe," (BEiT model)"),fPe.forEach(t),Zer=i(Te),Ov=n(Te,"LI",{});var mPe=s(Ov);m1e=n(mPe,"STRONG",{});var AFt=s(m1e);eor=r(AFt,"convnext"),AFt.forEach(t),oor=r(mPe," \u2014 "),Kz=n(mPe,"A",{href:!0});var LFt=s(Kz);ror=r(LFt,"ConvNextForImageClassification"),LFt.forEach(t),tor=r(mPe," (ConvNeXT model)"),mPe.forEach(t),aor=i(Te),Vv=n(Te,"LI",{});var gPe=s(Vv);g1e=n(gPe,"STRONG",{});var yFt=s(g1e);nor=r(yFt,"cvt"),yFt.forEach(t),sor=r(gPe," \u2014 "),Zz=n(gPe,"A",{href:!0});var xFt=s(Zz);lor=r(xFt,"CvtForImageClassification"),xFt.forEach(t),ior=r(gPe," (CvT model)"),gPe.forEach(t),dor=i(Te),Xv=n(Te,"LI",{});var hPe=s(Xv);h1e=n(hPe,"STRONG",{});var $Ft=s(h1e);cor=r($Ft,"data2vec-vision"),$Ft.forEach(t),mor=r(hPe," \u2014 "),eW=n(hPe,"A",{href:!0});var kFt=s(eW);gor=r(kFt,"Data2VecVisionForImageClassification"),kFt.forEach(t),hor=r(hPe," (Data2VecVision model)"),hPe.forEach(t),por=i(Te),Os=n(Te,"LI",{});var Qk=s(Os);p1e=n(Qk,"STRONG",{});var SFt=s(p1e);_or=r(SFt,"deit"),SFt.forEach(t),uor=r(Qk," \u2014 "),oW=n(Qk,"A",{href:!0});var RFt=s(oW);bor=r(RFt,"DeiTForImageClassification"),RFt.forEach(t),vor=r(Qk," or "),rW=n(Qk,"A",{href:!0});var PFt=s(rW);For=r(PFt,"DeiTForImageClassificationWithTeacher"),PFt.forEach(t),Tor=r(Qk," (DeiT model)"),Qk.forEach(t),Mor=i(Te),zv=n(Te,"LI",{});var pPe=s(zv);_1e=n(pPe,"STRONG",{});var BFt=s(_1e);Eor=r(BFt,"imagegpt"),BFt.forEach(t),Cor=r(pPe," \u2014 "),tW=n(pPe,"A",{href:!0});var IFt=s(tW);wor=r(IFt,"ImageGPTForImageClassification"),IFt.forEach(t),Aor=r(pPe," (ImageGPT model)"),pPe.forEach(t),Lor=i(Te),Vs=n(Te,"LI",{});var Hk=s(Vs);u1e=n(Hk,"STRONG",{});var NFt=s(u1e);yor=r(NFt,"levit"),NFt.forEach(t),xor=r(Hk," \u2014 "),aW=n(Hk,"A",{href:!0});var qFt=s(aW);$or=r(qFt,"LevitForImageClassification"),qFt.forEach(t),kor=r(Hk," or "),nW=n(Hk,"A",{href:!0});var jFt=s(nW);Sor=r(jFt,"LevitForImageClassificationWithTeacher"),jFt.forEach(t),Ror=r(Hk," (LeViT model)"),Hk.forEach(t),Por=i(Te),Wv=n(Te,"LI",{});var _Pe=s(Wv);b1e=n(_Pe,"STRONG",{});var DFt=s(b1e);Bor=r(DFt,"mobilevit"),DFt.forEach(t),Ior=r(_Pe," \u2014 "),sW=n(_Pe,"A",{href:!0});var GFt=s(sW);Nor=r(GFt,"MobileViTForImageClassification"),GFt.forEach(t),qor=r(_Pe," (MobileViT model)"),_Pe.forEach(t),jor=i(Te),bt=n(Te,"LI",{});var Lf=s(bt);v1e=n(Lf,"STRONG",{});var OFt=s(v1e);Dor=r(OFt,"perceiver"),OFt.forEach(t),Gor=r(Lf," \u2014 "),lW=n(Lf,"A",{href:!0});var VFt=s(lW);Oor=r(VFt,"PerceiverForImageClassificationLearned"),VFt.forEach(t),Vor=r(Lf," or "),iW=n(Lf,"A",{href:!0});var XFt=s(iW);Xor=r(XFt,"PerceiverForImageClassificationFourier"),XFt.forEach(t),zor=r(Lf," or "),dW=n(Lf,"A",{href:!0});var zFt=s(dW);Wor=r(zFt,"PerceiverForImageClassificationConvProcessing"),zFt.forEach(t),Qor=r(Lf," (Perceiver model)"),Lf.forEach(t),Hor=i(Te),Qv=n(Te,"LI",{});var uPe=s(Qv);F1e=n(uPe,"STRONG",{});var WFt=s(F1e);Uor=r(WFt,"poolformer"),WFt.forEach(t),Jor=r(uPe," \u2014 "),cW=n(uPe,"A",{href:!0});var QFt=s(cW);Yor=r(QFt,"PoolFormerForImageClassification"),QFt.forEach(t),Kor=r(uPe," (PoolFormer model)"),uPe.forEach(t),Zor=i(Te),Hv=n(Te,"LI",{});var bPe=s(Hv);T1e=n(bPe,"STRONG",{});var HFt=s(T1e);err=r(HFt,"regnet"),HFt.forEach(t),orr=r(bPe," \u2014 "),fW=n(bPe,"A",{href:!0});var UFt=s(fW);rrr=r(UFt,"RegNetForImageClassification"),UFt.forEach(t),trr=r(bPe," (RegNet model)"),bPe.forEach(t),arr=i(Te),Uv=n(Te,"LI",{});var vPe=s(Uv);M1e=n(vPe,"STRONG",{});var JFt=s(M1e);nrr=r(JFt,"resnet"),JFt.forEach(t),srr=r(vPe," \u2014 "),mW=n(vPe,"A",{href:!0});var YFt=s(mW);lrr=r(YFt,"ResNetForImageClassification"),YFt.forEach(t),irr=r(vPe," (ResNet model)"),vPe.forEach(t),drr=i(Te),Jv=n(Te,"LI",{});var FPe=s(Jv);E1e=n(FPe,"STRONG",{});var KFt=s(E1e);crr=r(KFt,"segformer"),KFt.forEach(t),frr=r(FPe," \u2014 "),gW=n(FPe,"A",{href:!0});var ZFt=s(gW);mrr=r(ZFt,"SegformerForImageClassification"),ZFt.forEach(t),grr=r(FPe," (SegFormer model)"),FPe.forEach(t),hrr=i(Te),Yv=n(Te,"LI",{});var TPe=s(Yv);C1e=n(TPe,"STRONG",{});var eTt=s(C1e);prr=r(eTt,"swin"),eTt.forEach(t),_rr=r(TPe," \u2014 "),hW=n(TPe,"A",{href:!0});var oTt=s(hW);urr=r(oTt,"SwinForImageClassification"),oTt.forEach(t),brr=r(TPe," (Swin Transformer model)"),TPe.forEach(t),vrr=i(Te),Kv=n(Te,"LI",{});var MPe=s(Kv);w1e=n(MPe,"STRONG",{});var rTt=s(w1e);Frr=r(rTt,"van"),rTt.forEach(t),Trr=r(MPe," \u2014 "),pW=n(MPe,"A",{href:!0});var tTt=s(pW);Mrr=r(tTt,"VanForImageClassification"),tTt.forEach(t),Err=r(MPe," (VAN model)"),MPe.forEach(t),Crr=i(Te),Zv=n(Te,"LI",{});var EPe=s(Zv);A1e=n(EPe,"STRONG",{});var aTt=s(A1e);wrr=r(aTt,"vit"),aTt.forEach(t),Arr=r(EPe," \u2014 "),_W=n(EPe,"A",{href:!0});var nTt=s(_W);Lrr=r(nTt,"ViTForImageClassification"),nTt.forEach(t),yrr=r(EPe," (ViT model)"),EPe.forEach(t),Te.forEach(t),xrr=i(_a),e3=n(_a,"P",{});var CPe=s(e3);$rr=r(CPe,"The model is set in evaluation mode by default using "),L1e=n(CPe,"CODE",{});var sTt=s(L1e);krr=r(sTt,"model.eval()"),sTt.forEach(t),Srr=r(CPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y1e=n(CPe,"CODE",{});var lTt=s(y1e);Rrr=r(lTt,"model.train()"),lTt.forEach(t),CPe.forEach(t),Prr=i(_a),T(o3.$$.fragment,_a),_a.forEach(t),ll.forEach(t),oOe=i(f),ud=n(f,"H2",{class:!0});var lXe=s(ud);r3=n(lXe,"A",{id:!0,class:!0,href:!0});var iTt=s(r3);x1e=n(iTt,"SPAN",{});var dTt=s(x1e);T(r8.$$.fragment,dTt),dTt.forEach(t),iTt.forEach(t),Brr=i(lXe),$1e=n(lXe,"SPAN",{});var cTt=s($1e);Irr=r(cTt,"AutoModelForVision2Seq"),cTt.forEach(t),lXe.forEach(t),rOe=i(f),Go=n(f,"DIV",{class:!0});var il=s(Go);T(t8.$$.fragment,il),Nrr=i(il),bd=n(il,"P",{});var koe=s(bd);qrr=r(koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),uW=n(koe,"A",{href:!0});var fTt=s(uW);jrr=r(fTt,"from_pretrained()"),fTt.forEach(t),Drr=r(koe," class method or the "),bW=n(koe,"A",{href:!0});var mTt=s(bW);Grr=r(mTt,"from_config()"),mTt.forEach(t),Orr=r(koe,` class
method.`),koe.forEach(t),Vrr=i(il),a8=n(il,"P",{});var iXe=s(a8);Xrr=r(iXe,"This class cannot be instantiated directly using "),k1e=n(iXe,"CODE",{});var gTt=s(k1e);zrr=r(gTt,"__init__()"),gTt.forEach(t),Wrr=r(iXe," (throws an error)."),iXe.forEach(t),Qrr=i(il),vt=n(il,"DIV",{class:!0});var YA=s(vt);T(n8.$$.fragment,YA),Hrr=i(YA),S1e=n(YA,"P",{});var hTt=s(S1e);Urr=r(hTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hTt.forEach(t),Jrr=i(YA),vd=n(YA,"P",{});var Soe=s(vd);Yrr=r(Soe,`Note:
Loading a model from its configuration file does `),R1e=n(Soe,"STRONG",{});var pTt=s(R1e);Krr=r(pTt,"not"),pTt.forEach(t),Zrr=r(Soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=n(Soe,"A",{href:!0});var _Tt=s(vW);etr=r(_Tt,"from_pretrained()"),_Tt.forEach(t),otr=r(Soe," to load the model weights."),Soe.forEach(t),rtr=i(YA),T(t3.$$.fragment,YA),YA.forEach(t),ttr=i(il),io=n(il,"DIV",{class:!0});var ua=s(io);T(s8.$$.fragment,ua),atr=i(ua),P1e=n(ua,"P",{});var uTt=s(P1e);ntr=r(uTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uTt.forEach(t),str=i(ua),za=n(ua,"P",{});var KA=s(za);ltr=r(KA,"The model class to instantiate is selected based on the "),B1e=n(KA,"CODE",{});var bTt=s(B1e);itr=r(bTt,"model_type"),bTt.forEach(t),dtr=r(KA,` property of the config object (either
passed as an argument or loaded from `),I1e=n(KA,"CODE",{});var vTt=s(I1e);ctr=r(vTt,"pretrained_model_name_or_path"),vTt.forEach(t),ftr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=n(KA,"CODE",{});var FTt=s(N1e);mtr=r(FTt,"pretrained_model_name_or_path"),FTt.forEach(t),gtr=r(KA,":"),KA.forEach(t),htr=i(ua),q1e=n(ua,"UL",{});var TTt=s(q1e);a3=n(TTt,"LI",{});var wPe=s(a3);j1e=n(wPe,"STRONG",{});var MTt=s(j1e);ptr=r(MTt,"vision-encoder-decoder"),MTt.forEach(t),_tr=r(wPe," \u2014 "),FW=n(wPe,"A",{href:!0});var ETt=s(FW);utr=r(ETt,"VisionEncoderDecoderModel"),ETt.forEach(t),btr=r(wPe," (Vision Encoder decoder model)"),wPe.forEach(t),TTt.forEach(t),vtr=i(ua),n3=n(ua,"P",{});var APe=s(n3);Ftr=r(APe,"The model is set in evaluation mode by default using "),D1e=n(APe,"CODE",{});var CTt=s(D1e);Ttr=r(CTt,"model.eval()"),CTt.forEach(t),Mtr=r(APe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G1e=n(APe,"CODE",{});var wTt=s(G1e);Etr=r(wTt,"model.train()"),wTt.forEach(t),APe.forEach(t),Ctr=i(ua),T(s3.$$.fragment,ua),ua.forEach(t),il.forEach(t),tOe=i(f),Fd=n(f,"H2",{class:!0});var dXe=s(Fd);l3=n(dXe,"A",{id:!0,class:!0,href:!0});var ATt=s(l3);O1e=n(ATt,"SPAN",{});var LTt=s(O1e);T(l8.$$.fragment,LTt),LTt.forEach(t),ATt.forEach(t),wtr=i(dXe),V1e=n(dXe,"SPAN",{});var yTt=s(V1e);Atr=r(yTt,"AutoModelForVisualQuestionAnswering"),yTt.forEach(t),dXe.forEach(t),aOe=i(f),Oo=n(f,"DIV",{class:!0});var dl=s(Oo);T(i8.$$.fragment,dl),Ltr=i(dl),Td=n(dl,"P",{});var Roe=s(Td);ytr=r(Roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),TW=n(Roe,"A",{href:!0});var xTt=s(TW);xtr=r(xTt,"from_pretrained()"),xTt.forEach(t),$tr=r(Roe," class method or the "),MW=n(Roe,"A",{href:!0});var $Tt=s(MW);ktr=r($Tt,"from_config()"),$Tt.forEach(t),Str=r(Roe,` class
method.`),Roe.forEach(t),Rtr=i(dl),d8=n(dl,"P",{});var cXe=s(d8);Ptr=r(cXe,"This class cannot be instantiated directly using "),X1e=n(cXe,"CODE",{});var kTt=s(X1e);Btr=r(kTt,"__init__()"),kTt.forEach(t),Itr=r(cXe," (throws an error)."),cXe.forEach(t),Ntr=i(dl),Ft=n(dl,"DIV",{class:!0});var ZA=s(Ft);T(c8.$$.fragment,ZA),qtr=i(ZA),z1e=n(ZA,"P",{});var STt=s(z1e);jtr=r(STt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),STt.forEach(t),Dtr=i(ZA),Md=n(ZA,"P",{});var Poe=s(Md);Gtr=r(Poe,`Note:
Loading a model from its configuration file does `),W1e=n(Poe,"STRONG",{});var RTt=s(W1e);Otr=r(RTt,"not"),RTt.forEach(t),Vtr=r(Poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=n(Poe,"A",{href:!0});var PTt=s(EW);Xtr=r(PTt,"from_pretrained()"),PTt.forEach(t),ztr=r(Poe," to load the model weights."),Poe.forEach(t),Wtr=i(ZA),T(i3.$$.fragment,ZA),ZA.forEach(t),Qtr=i(dl),co=n(dl,"DIV",{class:!0});var ba=s(co);T(f8.$$.fragment,ba),Htr=i(ba),Q1e=n(ba,"P",{});var BTt=s(Q1e);Utr=r(BTt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),BTt.forEach(t),Jtr=i(ba),Wa=n(ba,"P",{});var e6=s(Wa);Ytr=r(e6,"The model class to instantiate is selected based on the "),H1e=n(e6,"CODE",{});var ITt=s(H1e);Ktr=r(ITt,"model_type"),ITt.forEach(t),Ztr=r(e6,` property of the config object (either
passed as an argument or loaded from `),U1e=n(e6,"CODE",{});var NTt=s(U1e);ear=r(NTt,"pretrained_model_name_or_path"),NTt.forEach(t),oar=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=n(e6,"CODE",{});var qTt=s(J1e);rar=r(qTt,"pretrained_model_name_or_path"),qTt.forEach(t),tar=r(e6,":"),e6.forEach(t),aar=i(ba),Y1e=n(ba,"UL",{});var jTt=s(Y1e);d3=n(jTt,"LI",{});var LPe=s(d3);K1e=n(LPe,"STRONG",{});var DTt=s(K1e);nar=r(DTt,"vilt"),DTt.forEach(t),sar=r(LPe," \u2014 "),CW=n(LPe,"A",{href:!0});var GTt=s(CW);lar=r(GTt,"ViltForQuestionAnswering"),GTt.forEach(t),iar=r(LPe," (ViLT model)"),LPe.forEach(t),jTt.forEach(t),dar=i(ba),c3=n(ba,"P",{});var yPe=s(c3);car=r(yPe,"The model is set in evaluation mode by default using "),Z1e=n(yPe,"CODE",{});var OTt=s(Z1e);far=r(OTt,"model.eval()"),OTt.forEach(t),mar=r(yPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ebe=n(yPe,"CODE",{});var VTt=s(ebe);gar=r(VTt,"model.train()"),VTt.forEach(t),yPe.forEach(t),har=i(ba),T(f3.$$.fragment,ba),ba.forEach(t),dl.forEach(t),nOe=i(f),Ed=n(f,"H2",{class:!0});var fXe=s(Ed);m3=n(fXe,"A",{id:!0,class:!0,href:!0});var XTt=s(m3);obe=n(XTt,"SPAN",{});var zTt=s(obe);T(m8.$$.fragment,zTt),zTt.forEach(t),XTt.forEach(t),par=i(fXe),rbe=n(fXe,"SPAN",{});var WTt=s(rbe);_ar=r(WTt,"AutoModelForAudioClassification"),WTt.forEach(t),fXe.forEach(t),sOe=i(f),Vo=n(f,"DIV",{class:!0});var cl=s(Vo);T(g8.$$.fragment,cl),uar=i(cl),Cd=n(cl,"P",{});var Boe=s(Cd);bar=r(Boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),wW=n(Boe,"A",{href:!0});var QTt=s(wW);Far=r(QTt,"from_pretrained()"),QTt.forEach(t),Tar=r(Boe," class method or the "),AW=n(Boe,"A",{href:!0});var HTt=s(AW);Mar=r(HTt,"from_config()"),HTt.forEach(t),Ear=r(Boe,` class
method.`),Boe.forEach(t),Car=i(cl),h8=n(cl,"P",{});var mXe=s(h8);war=r(mXe,"This class cannot be instantiated directly using "),tbe=n(mXe,"CODE",{});var UTt=s(tbe);Aar=r(UTt,"__init__()"),UTt.forEach(t),Lar=r(mXe," (throws an error)."),mXe.forEach(t),yar=i(cl),Tt=n(cl,"DIV",{class:!0});var o6=s(Tt);T(p8.$$.fragment,o6),xar=i(o6),abe=n(o6,"P",{});var JTt=s(abe);$ar=r(JTt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),JTt.forEach(t),kar=i(o6),wd=n(o6,"P",{});var Ioe=s(wd);Sar=r(Ioe,`Note:
Loading a model from its configuration file does `),nbe=n(Ioe,"STRONG",{});var YTt=s(nbe);Rar=r(YTt,"not"),YTt.forEach(t),Par=r(Ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),LW=n(Ioe,"A",{href:!0});var KTt=s(LW);Bar=r(KTt,"from_pretrained()"),KTt.forEach(t),Iar=r(Ioe," to load the model weights."),Ioe.forEach(t),Nar=i(o6),T(g3.$$.fragment,o6),o6.forEach(t),qar=i(cl),fo=n(cl,"DIV",{class:!0});var va=s(fo);T(_8.$$.fragment,va),jar=i(va),sbe=n(va,"P",{});var ZTt=s(sbe);Dar=r(ZTt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ZTt.forEach(t),Gar=i(va),Qa=n(va,"P",{});var r6=s(Qa);Oar=r(r6,"The model class to instantiate is selected based on the "),lbe=n(r6,"CODE",{});var e7t=s(lbe);Var=r(e7t,"model_type"),e7t.forEach(t),Xar=r(r6,` property of the config object (either
passed as an argument or loaded from `),ibe=n(r6,"CODE",{});var o7t=s(ibe);zar=r(o7t,"pretrained_model_name_or_path"),o7t.forEach(t),War=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=n(r6,"CODE",{});var r7t=s(dbe);Qar=r(r7t,"pretrained_model_name_or_path"),r7t.forEach(t),Har=r(r6,":"),r6.forEach(t),Uar=i(va),Pe=n(va,"UL",{});var ze=s(Pe);h3=n(ze,"LI",{});var xPe=s(h3);cbe=n(xPe,"STRONG",{});var t7t=s(cbe);Jar=r(t7t,"data2vec-audio"),t7t.forEach(t),Yar=r(xPe," \u2014 "),yW=n(xPe,"A",{href:!0});var a7t=s(yW);Kar=r(a7t,"Data2VecAudioForSequenceClassification"),a7t.forEach(t),Zar=r(xPe," (Data2VecAudio model)"),xPe.forEach(t),enr=i(ze),p3=n(ze,"LI",{});var $Pe=s(p3);fbe=n($Pe,"STRONG",{});var n7t=s(fbe);onr=r(n7t,"hubert"),n7t.forEach(t),rnr=r($Pe," \u2014 "),xW=n($Pe,"A",{href:!0});var s7t=s(xW);tnr=r(s7t,"HubertForSequenceClassification"),s7t.forEach(t),anr=r($Pe," (Hubert model)"),$Pe.forEach(t),nnr=i(ze),_3=n(ze,"LI",{});var kPe=s(_3);mbe=n(kPe,"STRONG",{});var l7t=s(mbe);snr=r(l7t,"sew"),l7t.forEach(t),lnr=r(kPe," \u2014 "),$W=n(kPe,"A",{href:!0});var i7t=s($W);inr=r(i7t,"SEWForSequenceClassification"),i7t.forEach(t),dnr=r(kPe," (SEW model)"),kPe.forEach(t),cnr=i(ze),u3=n(ze,"LI",{});var SPe=s(u3);gbe=n(SPe,"STRONG",{});var d7t=s(gbe);fnr=r(d7t,"sew-d"),d7t.forEach(t),mnr=r(SPe," \u2014 "),kW=n(SPe,"A",{href:!0});var c7t=s(kW);gnr=r(c7t,"SEWDForSequenceClassification"),c7t.forEach(t),hnr=r(SPe," (SEW-D model)"),SPe.forEach(t),pnr=i(ze),b3=n(ze,"LI",{});var RPe=s(b3);hbe=n(RPe,"STRONG",{});var f7t=s(hbe);_nr=r(f7t,"unispeech"),f7t.forEach(t),unr=r(RPe," \u2014 "),SW=n(RPe,"A",{href:!0});var m7t=s(SW);bnr=r(m7t,"UniSpeechForSequenceClassification"),m7t.forEach(t),vnr=r(RPe," (UniSpeech model)"),RPe.forEach(t),Fnr=i(ze),v3=n(ze,"LI",{});var PPe=s(v3);pbe=n(PPe,"STRONG",{});var g7t=s(pbe);Tnr=r(g7t,"unispeech-sat"),g7t.forEach(t),Mnr=r(PPe," \u2014 "),RW=n(PPe,"A",{href:!0});var h7t=s(RW);Enr=r(h7t,"UniSpeechSatForSequenceClassification"),h7t.forEach(t),Cnr=r(PPe," (UniSpeechSat model)"),PPe.forEach(t),wnr=i(ze),F3=n(ze,"LI",{});var BPe=s(F3);_be=n(BPe,"STRONG",{});var p7t=s(_be);Anr=r(p7t,"wav2vec2"),p7t.forEach(t),Lnr=r(BPe," \u2014 "),PW=n(BPe,"A",{href:!0});var _7t=s(PW);ynr=r(_7t,"Wav2Vec2ForSequenceClassification"),_7t.forEach(t),xnr=r(BPe," (Wav2Vec2 model)"),BPe.forEach(t),$nr=i(ze),T3=n(ze,"LI",{});var IPe=s(T3);ube=n(IPe,"STRONG",{});var u7t=s(ube);knr=r(u7t,"wav2vec2-conformer"),u7t.forEach(t),Snr=r(IPe," \u2014 "),BW=n(IPe,"A",{href:!0});var b7t=s(BW);Rnr=r(b7t,"Wav2Vec2ConformerForSequenceClassification"),b7t.forEach(t),Pnr=r(IPe," (Wav2Vec2-Conformer model)"),IPe.forEach(t),Bnr=i(ze),M3=n(ze,"LI",{});var NPe=s(M3);bbe=n(NPe,"STRONG",{});var v7t=s(bbe);Inr=r(v7t,"wavlm"),v7t.forEach(t),Nnr=r(NPe," \u2014 "),IW=n(NPe,"A",{href:!0});var F7t=s(IW);qnr=r(F7t,"WavLMForSequenceClassification"),F7t.forEach(t),jnr=r(NPe," (WavLM model)"),NPe.forEach(t),ze.forEach(t),Dnr=i(va),E3=n(va,"P",{});var qPe=s(E3);Gnr=r(qPe,"The model is set in evaluation mode by default using "),vbe=n(qPe,"CODE",{});var T7t=s(vbe);Onr=r(T7t,"model.eval()"),T7t.forEach(t),Vnr=r(qPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fbe=n(qPe,"CODE",{});var M7t=s(Fbe);Xnr=r(M7t,"model.train()"),M7t.forEach(t),qPe.forEach(t),znr=i(va),T(C3.$$.fragment,va),va.forEach(t),cl.forEach(t),lOe=i(f),Ad=n(f,"H2",{class:!0});var gXe=s(Ad);w3=n(gXe,"A",{id:!0,class:!0,href:!0});var E7t=s(w3);Tbe=n(E7t,"SPAN",{});var C7t=s(Tbe);T(u8.$$.fragment,C7t),C7t.forEach(t),E7t.forEach(t),Wnr=i(gXe),Mbe=n(gXe,"SPAN",{});var w7t=s(Mbe);Qnr=r(w7t,"AutoModelForAudioFrameClassification"),w7t.forEach(t),gXe.forEach(t),iOe=i(f),Xo=n(f,"DIV",{class:!0});var fl=s(Xo);T(b8.$$.fragment,fl),Hnr=i(fl),Ld=n(fl,"P",{});var Noe=s(Ld);Unr=r(Noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),NW=n(Noe,"A",{href:!0});var A7t=s(NW);Jnr=r(A7t,"from_pretrained()"),A7t.forEach(t),Ynr=r(Noe," class method or the "),qW=n(Noe,"A",{href:!0});var L7t=s(qW);Knr=r(L7t,"from_config()"),L7t.forEach(t),Znr=r(Noe,` class
method.`),Noe.forEach(t),esr=i(fl),v8=n(fl,"P",{});var hXe=s(v8);osr=r(hXe,"This class cannot be instantiated directly using "),Ebe=n(hXe,"CODE",{});var y7t=s(Ebe);rsr=r(y7t,"__init__()"),y7t.forEach(t),tsr=r(hXe," (throws an error)."),hXe.forEach(t),asr=i(fl),Mt=n(fl,"DIV",{class:!0});var t6=s(Mt);T(F8.$$.fragment,t6),nsr=i(t6),Cbe=n(t6,"P",{});var x7t=s(Cbe);ssr=r(x7t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),x7t.forEach(t),lsr=i(t6),yd=n(t6,"P",{});var qoe=s(yd);isr=r(qoe,`Note:
Loading a model from its configuration file does `),wbe=n(qoe,"STRONG",{});var $7t=s(wbe);dsr=r($7t,"not"),$7t.forEach(t),csr=r(qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=n(qoe,"A",{href:!0});var k7t=s(jW);fsr=r(k7t,"from_pretrained()"),k7t.forEach(t),msr=r(qoe," to load the model weights."),qoe.forEach(t),gsr=i(t6),T(A3.$$.fragment,t6),t6.forEach(t),hsr=i(fl),mo=n(fl,"DIV",{class:!0});var Fa=s(mo);T(T8.$$.fragment,Fa),psr=i(Fa),Abe=n(Fa,"P",{});var S7t=s(Abe);_sr=r(S7t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),S7t.forEach(t),usr=i(Fa),Ha=n(Fa,"P",{});var a6=s(Ha);bsr=r(a6,"The model class to instantiate is selected based on the "),Lbe=n(a6,"CODE",{});var R7t=s(Lbe);vsr=r(R7t,"model_type"),R7t.forEach(t),Fsr=r(a6,` property of the config object (either
passed as an argument or loaded from `),ybe=n(a6,"CODE",{});var P7t=s(ybe);Tsr=r(P7t,"pretrained_model_name_or_path"),P7t.forEach(t),Msr=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=n(a6,"CODE",{});var B7t=s(xbe);Esr=r(B7t,"pretrained_model_name_or_path"),B7t.forEach(t),Csr=r(a6,":"),a6.forEach(t),wsr=i(Fa),et=n(Fa,"UL",{});var ml=s(et);L3=n(ml,"LI",{});var jPe=s(L3);$be=n(jPe,"STRONG",{});var I7t=s($be);Asr=r(I7t,"data2vec-audio"),I7t.forEach(t),Lsr=r(jPe," \u2014 "),DW=n(jPe,"A",{href:!0});var N7t=s(DW);ysr=r(N7t,"Data2VecAudioForAudioFrameClassification"),N7t.forEach(t),xsr=r(jPe," (Data2VecAudio model)"),jPe.forEach(t),$sr=i(ml),y3=n(ml,"LI",{});var DPe=s(y3);kbe=n(DPe,"STRONG",{});var q7t=s(kbe);ksr=r(q7t,"unispeech-sat"),q7t.forEach(t),Ssr=r(DPe," \u2014 "),GW=n(DPe,"A",{href:!0});var j7t=s(GW);Rsr=r(j7t,"UniSpeechSatForAudioFrameClassification"),j7t.forEach(t),Psr=r(DPe," (UniSpeechSat model)"),DPe.forEach(t),Bsr=i(ml),x3=n(ml,"LI",{});var GPe=s(x3);Sbe=n(GPe,"STRONG",{});var D7t=s(Sbe);Isr=r(D7t,"wav2vec2"),D7t.forEach(t),Nsr=r(GPe," \u2014 "),OW=n(GPe,"A",{href:!0});var G7t=s(OW);qsr=r(G7t,"Wav2Vec2ForAudioFrameClassification"),G7t.forEach(t),jsr=r(GPe," (Wav2Vec2 model)"),GPe.forEach(t),Dsr=i(ml),$3=n(ml,"LI",{});var OPe=s($3);Rbe=n(OPe,"STRONG",{});var O7t=s(Rbe);Gsr=r(O7t,"wav2vec2-conformer"),O7t.forEach(t),Osr=r(OPe," \u2014 "),VW=n(OPe,"A",{href:!0});var V7t=s(VW);Vsr=r(V7t,"Wav2Vec2ConformerForAudioFrameClassification"),V7t.forEach(t),Xsr=r(OPe," (Wav2Vec2-Conformer model)"),OPe.forEach(t),zsr=i(ml),k3=n(ml,"LI",{});var VPe=s(k3);Pbe=n(VPe,"STRONG",{});var X7t=s(Pbe);Wsr=r(X7t,"wavlm"),X7t.forEach(t),Qsr=r(VPe," \u2014 "),XW=n(VPe,"A",{href:!0});var z7t=s(XW);Hsr=r(z7t,"WavLMForAudioFrameClassification"),z7t.forEach(t),Usr=r(VPe," (WavLM model)"),VPe.forEach(t),ml.forEach(t),Jsr=i(Fa),S3=n(Fa,"P",{});var XPe=s(S3);Ysr=r(XPe,"The model is set in evaluation mode by default using "),Bbe=n(XPe,"CODE",{});var W7t=s(Bbe);Ksr=r(W7t,"model.eval()"),W7t.forEach(t),Zsr=r(XPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ibe=n(XPe,"CODE",{});var Q7t=s(Ibe);elr=r(Q7t,"model.train()"),Q7t.forEach(t),XPe.forEach(t),olr=i(Fa),T(R3.$$.fragment,Fa),Fa.forEach(t),fl.forEach(t),dOe=i(f),xd=n(f,"H2",{class:!0});var pXe=s(xd);P3=n(pXe,"A",{id:!0,class:!0,href:!0});var H7t=s(P3);Nbe=n(H7t,"SPAN",{});var U7t=s(Nbe);T(M8.$$.fragment,U7t),U7t.forEach(t),H7t.forEach(t),rlr=i(pXe),qbe=n(pXe,"SPAN",{});var J7t=s(qbe);tlr=r(J7t,"AutoModelForCTC"),J7t.forEach(t),pXe.forEach(t),cOe=i(f),zo=n(f,"DIV",{class:!0});var gl=s(zo);T(E8.$$.fragment,gl),alr=i(gl),$d=n(gl,"P",{});var joe=s($d);nlr=r(joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),zW=n(joe,"A",{href:!0});var Y7t=s(zW);slr=r(Y7t,"from_pretrained()"),Y7t.forEach(t),llr=r(joe," class method or the "),WW=n(joe,"A",{href:!0});var K7t=s(WW);ilr=r(K7t,"from_config()"),K7t.forEach(t),dlr=r(joe,` class
method.`),joe.forEach(t),clr=i(gl),C8=n(gl,"P",{});var _Xe=s(C8);flr=r(_Xe,"This class cannot be instantiated directly using "),jbe=n(_Xe,"CODE",{});var Z7t=s(jbe);mlr=r(Z7t,"__init__()"),Z7t.forEach(t),glr=r(_Xe," (throws an error)."),_Xe.forEach(t),hlr=i(gl),Et=n(gl,"DIV",{class:!0});var n6=s(Et);T(w8.$$.fragment,n6),plr=i(n6),Dbe=n(n6,"P",{});var eMt=s(Dbe);_lr=r(eMt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),eMt.forEach(t),ulr=i(n6),kd=n(n6,"P",{});var Doe=s(kd);blr=r(Doe,`Note:
Loading a model from its configuration file does `),Gbe=n(Doe,"STRONG",{});var oMt=s(Gbe);vlr=r(oMt,"not"),oMt.forEach(t),Flr=r(Doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(Doe,"A",{href:!0});var rMt=s(QW);Tlr=r(rMt,"from_pretrained()"),rMt.forEach(t),Mlr=r(Doe," to load the model weights."),Doe.forEach(t),Elr=i(n6),T(B3.$$.fragment,n6),n6.forEach(t),Clr=i(gl),go=n(gl,"DIV",{class:!0});var Ta=s(go);T(A8.$$.fragment,Ta),wlr=i(Ta),Obe=n(Ta,"P",{});var tMt=s(Obe);Alr=r(tMt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),tMt.forEach(t),Llr=i(Ta),Ua=n(Ta,"P",{});var s6=s(Ua);ylr=r(s6,"The model class to instantiate is selected based on the "),Vbe=n(s6,"CODE",{});var aMt=s(Vbe);xlr=r(aMt,"model_type"),aMt.forEach(t),$lr=r(s6,` property of the config object (either
passed as an argument or loaded from `),Xbe=n(s6,"CODE",{});var nMt=s(Xbe);klr=r(nMt,"pretrained_model_name_or_path"),nMt.forEach(t),Slr=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=n(s6,"CODE",{});var sMt=s(zbe);Rlr=r(sMt,"pretrained_model_name_or_path"),sMt.forEach(t),Plr=r(s6,":"),s6.forEach(t),Blr=i(Ta),Le=n(Ta,"UL",{});var Be=s(Le);I3=n(Be,"LI",{});var zPe=s(I3);Wbe=n(zPe,"STRONG",{});var lMt=s(Wbe);Ilr=r(lMt,"data2vec-audio"),lMt.forEach(t),Nlr=r(zPe," \u2014 "),HW=n(zPe,"A",{href:!0});var iMt=s(HW);qlr=r(iMt,"Data2VecAudioForCTC"),iMt.forEach(t),jlr=r(zPe," (Data2VecAudio model)"),zPe.forEach(t),Dlr=i(Be),N3=n(Be,"LI",{});var WPe=s(N3);Qbe=n(WPe,"STRONG",{});var dMt=s(Qbe);Glr=r(dMt,"hubert"),dMt.forEach(t),Olr=r(WPe," \u2014 "),UW=n(WPe,"A",{href:!0});var cMt=s(UW);Vlr=r(cMt,"HubertForCTC"),cMt.forEach(t),Xlr=r(WPe," (Hubert model)"),WPe.forEach(t),zlr=i(Be),q3=n(Be,"LI",{});var QPe=s(q3);Hbe=n(QPe,"STRONG",{});var fMt=s(Hbe);Wlr=r(fMt,"mctct"),fMt.forEach(t),Qlr=r(QPe," \u2014 "),JW=n(QPe,"A",{href:!0});var mMt=s(JW);Hlr=r(mMt,"MCTCTForCTC"),mMt.forEach(t),Ulr=r(QPe," (M-CTC-T model)"),QPe.forEach(t),Jlr=i(Be),j3=n(Be,"LI",{});var HPe=s(j3);Ube=n(HPe,"STRONG",{});var gMt=s(Ube);Ylr=r(gMt,"sew"),gMt.forEach(t),Klr=r(HPe," \u2014 "),YW=n(HPe,"A",{href:!0});var hMt=s(YW);Zlr=r(hMt,"SEWForCTC"),hMt.forEach(t),eir=r(HPe," (SEW model)"),HPe.forEach(t),oir=i(Be),D3=n(Be,"LI",{});var UPe=s(D3);Jbe=n(UPe,"STRONG",{});var pMt=s(Jbe);rir=r(pMt,"sew-d"),pMt.forEach(t),tir=r(UPe," \u2014 "),KW=n(UPe,"A",{href:!0});var _Mt=s(KW);air=r(_Mt,"SEWDForCTC"),_Mt.forEach(t),nir=r(UPe," (SEW-D model)"),UPe.forEach(t),sir=i(Be),G3=n(Be,"LI",{});var JPe=s(G3);Ybe=n(JPe,"STRONG",{});var uMt=s(Ybe);lir=r(uMt,"unispeech"),uMt.forEach(t),iir=r(JPe," \u2014 "),ZW=n(JPe,"A",{href:!0});var bMt=s(ZW);dir=r(bMt,"UniSpeechForCTC"),bMt.forEach(t),cir=r(JPe," (UniSpeech model)"),JPe.forEach(t),fir=i(Be),O3=n(Be,"LI",{});var YPe=s(O3);Kbe=n(YPe,"STRONG",{});var vMt=s(Kbe);mir=r(vMt,"unispeech-sat"),vMt.forEach(t),gir=r(YPe," \u2014 "),eQ=n(YPe,"A",{href:!0});var FMt=s(eQ);hir=r(FMt,"UniSpeechSatForCTC"),FMt.forEach(t),pir=r(YPe," (UniSpeechSat model)"),YPe.forEach(t),_ir=i(Be),V3=n(Be,"LI",{});var KPe=s(V3);Zbe=n(KPe,"STRONG",{});var TMt=s(Zbe);uir=r(TMt,"wav2vec2"),TMt.forEach(t),bir=r(KPe," \u2014 "),oQ=n(KPe,"A",{href:!0});var MMt=s(oQ);vir=r(MMt,"Wav2Vec2ForCTC"),MMt.forEach(t),Fir=r(KPe," (Wav2Vec2 model)"),KPe.forEach(t),Tir=i(Be),X3=n(Be,"LI",{});var ZPe=s(X3);e2e=n(ZPe,"STRONG",{});var EMt=s(e2e);Mir=r(EMt,"wav2vec2-conformer"),EMt.forEach(t),Eir=r(ZPe," \u2014 "),rQ=n(ZPe,"A",{href:!0});var CMt=s(rQ);Cir=r(CMt,"Wav2Vec2ConformerForCTC"),CMt.forEach(t),wir=r(ZPe," (Wav2Vec2-Conformer model)"),ZPe.forEach(t),Air=i(Be),z3=n(Be,"LI",{});var eBe=s(z3);o2e=n(eBe,"STRONG",{});var wMt=s(o2e);Lir=r(wMt,"wavlm"),wMt.forEach(t),yir=r(eBe," \u2014 "),tQ=n(eBe,"A",{href:!0});var AMt=s(tQ);xir=r(AMt,"WavLMForCTC"),AMt.forEach(t),$ir=r(eBe," (WavLM model)"),eBe.forEach(t),Be.forEach(t),kir=i(Ta),W3=n(Ta,"P",{});var oBe=s(W3);Sir=r(oBe,"The model is set in evaluation mode by default using "),r2e=n(oBe,"CODE",{});var LMt=s(r2e);Rir=r(LMt,"model.eval()"),LMt.forEach(t),Pir=r(oBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t2e=n(oBe,"CODE",{});var yMt=s(t2e);Bir=r(yMt,"model.train()"),yMt.forEach(t),oBe.forEach(t),Iir=i(Ta),T(Q3.$$.fragment,Ta),Ta.forEach(t),gl.forEach(t),fOe=i(f),Sd=n(f,"H2",{class:!0});var uXe=s(Sd);H3=n(uXe,"A",{id:!0,class:!0,href:!0});var xMt=s(H3);a2e=n(xMt,"SPAN",{});var $Mt=s(a2e);T(L8.$$.fragment,$Mt),$Mt.forEach(t),xMt.forEach(t),Nir=i(uXe),n2e=n(uXe,"SPAN",{});var kMt=s(n2e);qir=r(kMt,"AutoModelForSpeechSeq2Seq"),kMt.forEach(t),uXe.forEach(t),mOe=i(f),Wo=n(f,"DIV",{class:!0});var hl=s(Wo);T(y8.$$.fragment,hl),jir=i(hl),Rd=n(hl,"P",{});var Goe=s(Rd);Dir=r(Goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),aQ=n(Goe,"A",{href:!0});var SMt=s(aQ);Gir=r(SMt,"from_pretrained()"),SMt.forEach(t),Oir=r(Goe," class method or the "),nQ=n(Goe,"A",{href:!0});var RMt=s(nQ);Vir=r(RMt,"from_config()"),RMt.forEach(t),Xir=r(Goe,` class
method.`),Goe.forEach(t),zir=i(hl),x8=n(hl,"P",{});var bXe=s(x8);Wir=r(bXe,"This class cannot be instantiated directly using "),s2e=n(bXe,"CODE",{});var PMt=s(s2e);Qir=r(PMt,"__init__()"),PMt.forEach(t),Hir=r(bXe," (throws an error)."),bXe.forEach(t),Uir=i(hl),Ct=n(hl,"DIV",{class:!0});var l6=s(Ct);T($8.$$.fragment,l6),Jir=i(l6),l2e=n(l6,"P",{});var BMt=s(l2e);Yir=r(BMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),BMt.forEach(t),Kir=i(l6),Pd=n(l6,"P",{});var Ooe=s(Pd);Zir=r(Ooe,`Note:
Loading a model from its configuration file does `),i2e=n(Ooe,"STRONG",{});var IMt=s(i2e);edr=r(IMt,"not"),IMt.forEach(t),odr=r(Ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=n(Ooe,"A",{href:!0});var NMt=s(sQ);rdr=r(NMt,"from_pretrained()"),NMt.forEach(t),tdr=r(Ooe," to load the model weights."),Ooe.forEach(t),adr=i(l6),T(U3.$$.fragment,l6),l6.forEach(t),ndr=i(hl),ho=n(hl,"DIV",{class:!0});var Ma=s(ho);T(k8.$$.fragment,Ma),sdr=i(Ma),d2e=n(Ma,"P",{});var qMt=s(d2e);ldr=r(qMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),qMt.forEach(t),idr=i(Ma),Ja=n(Ma,"P",{});var i6=s(Ja);ddr=r(i6,"The model class to instantiate is selected based on the "),c2e=n(i6,"CODE",{});var jMt=s(c2e);cdr=r(jMt,"model_type"),jMt.forEach(t),fdr=r(i6,` property of the config object (either
passed as an argument or loaded from `),f2e=n(i6,"CODE",{});var DMt=s(f2e);mdr=r(DMt,"pretrained_model_name_or_path"),DMt.forEach(t),gdr=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=n(i6,"CODE",{});var GMt=s(m2e);hdr=r(GMt,"pretrained_model_name_or_path"),GMt.forEach(t),pdr=r(i6,":"),i6.forEach(t),_dr=i(Ma),S8=n(Ma,"UL",{});var vXe=s(S8);J3=n(vXe,"LI",{});var rBe=s(J3);g2e=n(rBe,"STRONG",{});var OMt=s(g2e);udr=r(OMt,"speech-encoder-decoder"),OMt.forEach(t),bdr=r(rBe," \u2014 "),lQ=n(rBe,"A",{href:!0});var VMt=s(lQ);vdr=r(VMt,"SpeechEncoderDecoderModel"),VMt.forEach(t),Fdr=r(rBe," (Speech Encoder decoder model)"),rBe.forEach(t),Tdr=i(vXe),Y3=n(vXe,"LI",{});var tBe=s(Y3);h2e=n(tBe,"STRONG",{});var XMt=s(h2e);Mdr=r(XMt,"speech_to_text"),XMt.forEach(t),Edr=r(tBe," \u2014 "),iQ=n(tBe,"A",{href:!0});var zMt=s(iQ);Cdr=r(zMt,"Speech2TextForConditionalGeneration"),zMt.forEach(t),wdr=r(tBe," (Speech2Text model)"),tBe.forEach(t),vXe.forEach(t),Adr=i(Ma),K3=n(Ma,"P",{});var aBe=s(K3);Ldr=r(aBe,"The model is set in evaluation mode by default using "),p2e=n(aBe,"CODE",{});var WMt=s(p2e);ydr=r(WMt,"model.eval()"),WMt.forEach(t),xdr=r(aBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_2e=n(aBe,"CODE",{});var QMt=s(_2e);$dr=r(QMt,"model.train()"),QMt.forEach(t),aBe.forEach(t),kdr=i(Ma),T(Z3.$$.fragment,Ma),Ma.forEach(t),hl.forEach(t),gOe=i(f),Bd=n(f,"H2",{class:!0});var FXe=s(Bd);eF=n(FXe,"A",{id:!0,class:!0,href:!0});var HMt=s(eF);u2e=n(HMt,"SPAN",{});var UMt=s(u2e);T(R8.$$.fragment,UMt),UMt.forEach(t),HMt.forEach(t),Sdr=i(FXe),b2e=n(FXe,"SPAN",{});var JMt=s(b2e);Rdr=r(JMt,"AutoModelForAudioXVector"),JMt.forEach(t),FXe.forEach(t),hOe=i(f),Qo=n(f,"DIV",{class:!0});var pl=s(Qo);T(P8.$$.fragment,pl),Pdr=i(pl),Id=n(pl,"P",{});var Voe=s(Id);Bdr=r(Voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),dQ=n(Voe,"A",{href:!0});var YMt=s(dQ);Idr=r(YMt,"from_pretrained()"),YMt.forEach(t),Ndr=r(Voe," class method or the "),cQ=n(Voe,"A",{href:!0});var KMt=s(cQ);qdr=r(KMt,"from_config()"),KMt.forEach(t),jdr=r(Voe,` class
method.`),Voe.forEach(t),Ddr=i(pl),B8=n(pl,"P",{});var TXe=s(B8);Gdr=r(TXe,"This class cannot be instantiated directly using "),v2e=n(TXe,"CODE",{});var ZMt=s(v2e);Odr=r(ZMt,"__init__()"),ZMt.forEach(t),Vdr=r(TXe," (throws an error)."),TXe.forEach(t),Xdr=i(pl),wt=n(pl,"DIV",{class:!0});var d6=s(wt);T(I8.$$.fragment,d6),zdr=i(d6),F2e=n(d6,"P",{});var eEt=s(F2e);Wdr=r(eEt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),eEt.forEach(t),Qdr=i(d6),Nd=n(d6,"P",{});var Xoe=s(Nd);Hdr=r(Xoe,`Note:
Loading a model from its configuration file does `),T2e=n(Xoe,"STRONG",{});var oEt=s(T2e);Udr=r(oEt,"not"),oEt.forEach(t),Jdr=r(Xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=n(Xoe,"A",{href:!0});var rEt=s(fQ);Ydr=r(rEt,"from_pretrained()"),rEt.forEach(t),Kdr=r(Xoe," to load the model weights."),Xoe.forEach(t),Zdr=i(d6),T(oF.$$.fragment,d6),d6.forEach(t),ecr=i(pl),po=n(pl,"DIV",{class:!0});var Ea=s(po);T(N8.$$.fragment,Ea),ocr=i(Ea),M2e=n(Ea,"P",{});var tEt=s(M2e);rcr=r(tEt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),tEt.forEach(t),tcr=i(Ea),Ya=n(Ea,"P",{});var c6=s(Ya);acr=r(c6,"The model class to instantiate is selected based on the "),E2e=n(c6,"CODE",{});var aEt=s(E2e);ncr=r(aEt,"model_type"),aEt.forEach(t),scr=r(c6,` property of the config object (either
passed as an argument or loaded from `),C2e=n(c6,"CODE",{});var nEt=s(C2e);lcr=r(nEt,"pretrained_model_name_or_path"),nEt.forEach(t),icr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=n(c6,"CODE",{});var sEt=s(w2e);dcr=r(sEt,"pretrained_model_name_or_path"),sEt.forEach(t),ccr=r(c6,":"),c6.forEach(t),fcr=i(Ea),ot=n(Ea,"UL",{});var _l=s(ot);rF=n(_l,"LI",{});var nBe=s(rF);A2e=n(nBe,"STRONG",{});var lEt=s(A2e);mcr=r(lEt,"data2vec-audio"),lEt.forEach(t),gcr=r(nBe," \u2014 "),mQ=n(nBe,"A",{href:!0});var iEt=s(mQ);hcr=r(iEt,"Data2VecAudioForXVector"),iEt.forEach(t),pcr=r(nBe," (Data2VecAudio model)"),nBe.forEach(t),_cr=i(_l),tF=n(_l,"LI",{});var sBe=s(tF);L2e=n(sBe,"STRONG",{});var dEt=s(L2e);ucr=r(dEt,"unispeech-sat"),dEt.forEach(t),bcr=r(sBe," \u2014 "),gQ=n(sBe,"A",{href:!0});var cEt=s(gQ);vcr=r(cEt,"UniSpeechSatForXVector"),cEt.forEach(t),Fcr=r(sBe," (UniSpeechSat model)"),sBe.forEach(t),Tcr=i(_l),aF=n(_l,"LI",{});var lBe=s(aF);y2e=n(lBe,"STRONG",{});var fEt=s(y2e);Mcr=r(fEt,"wav2vec2"),fEt.forEach(t),Ecr=r(lBe," \u2014 "),hQ=n(lBe,"A",{href:!0});var mEt=s(hQ);Ccr=r(mEt,"Wav2Vec2ForXVector"),mEt.forEach(t),wcr=r(lBe," (Wav2Vec2 model)"),lBe.forEach(t),Acr=i(_l),nF=n(_l,"LI",{});var iBe=s(nF);x2e=n(iBe,"STRONG",{});var gEt=s(x2e);Lcr=r(gEt,"wav2vec2-conformer"),gEt.forEach(t),ycr=r(iBe," \u2014 "),pQ=n(iBe,"A",{href:!0});var hEt=s(pQ);xcr=r(hEt,"Wav2Vec2ConformerForXVector"),hEt.forEach(t),$cr=r(iBe," (Wav2Vec2-Conformer model)"),iBe.forEach(t),kcr=i(_l),sF=n(_l,"LI",{});var dBe=s(sF);$2e=n(dBe,"STRONG",{});var pEt=s($2e);Scr=r(pEt,"wavlm"),pEt.forEach(t),Rcr=r(dBe," \u2014 "),_Q=n(dBe,"A",{href:!0});var _Et=s(_Q);Pcr=r(_Et,"WavLMForXVector"),_Et.forEach(t),Bcr=r(dBe," (WavLM model)"),dBe.forEach(t),_l.forEach(t),Icr=i(Ea),lF=n(Ea,"P",{});var cBe=s(lF);Ncr=r(cBe,"The model is set in evaluation mode by default using "),k2e=n(cBe,"CODE",{});var uEt=s(k2e);qcr=r(uEt,"model.eval()"),uEt.forEach(t),jcr=r(cBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S2e=n(cBe,"CODE",{});var bEt=s(S2e);Dcr=r(bEt,"model.train()"),bEt.forEach(t),cBe.forEach(t),Gcr=i(Ea),T(iF.$$.fragment,Ea),Ea.forEach(t),pl.forEach(t),pOe=i(f),qd=n(f,"H2",{class:!0});var MXe=s(qd);dF=n(MXe,"A",{id:!0,class:!0,href:!0});var vEt=s(dF);R2e=n(vEt,"SPAN",{});var FEt=s(R2e);T(q8.$$.fragment,FEt),FEt.forEach(t),vEt.forEach(t),Ocr=i(MXe),P2e=n(MXe,"SPAN",{});var TEt=s(P2e);Vcr=r(TEt,"AutoModelForMaskedImageModeling"),TEt.forEach(t),MXe.forEach(t),_Oe=i(f),Ho=n(f,"DIV",{class:!0});var ul=s(Ho);T(j8.$$.fragment,ul),Xcr=i(ul),jd=n(ul,"P",{});var zoe=s(jd);zcr=r(zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),uQ=n(zoe,"A",{href:!0});var MEt=s(uQ);Wcr=r(MEt,"from_pretrained()"),MEt.forEach(t),Qcr=r(zoe," class method or the "),bQ=n(zoe,"A",{href:!0});var EEt=s(bQ);Hcr=r(EEt,"from_config()"),EEt.forEach(t),Ucr=r(zoe,` class
method.`),zoe.forEach(t),Jcr=i(ul),D8=n(ul,"P",{});var EXe=s(D8);Ycr=r(EXe,"This class cannot be instantiated directly using "),B2e=n(EXe,"CODE",{});var CEt=s(B2e);Kcr=r(CEt,"__init__()"),CEt.forEach(t),Zcr=r(EXe," (throws an error)."),EXe.forEach(t),efr=i(ul),At=n(ul,"DIV",{class:!0});var f6=s(At);T(G8.$$.fragment,f6),ofr=i(f6),I2e=n(f6,"P",{});var wEt=s(I2e);rfr=r(wEt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),wEt.forEach(t),tfr=i(f6),Dd=n(f6,"P",{});var Woe=s(Dd);afr=r(Woe,`Note:
Loading a model from its configuration file does `),N2e=n(Woe,"STRONG",{});var AEt=s(N2e);nfr=r(AEt,"not"),AEt.forEach(t),sfr=r(Woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=n(Woe,"A",{href:!0});var LEt=s(vQ);lfr=r(LEt,"from_pretrained()"),LEt.forEach(t),ifr=r(Woe," to load the model weights."),Woe.forEach(t),dfr=i(f6),T(cF.$$.fragment,f6),f6.forEach(t),cfr=i(ul),_o=n(ul,"DIV",{class:!0});var Ca=s(_o);T(O8.$$.fragment,Ca),ffr=i(Ca),q2e=n(Ca,"P",{});var yEt=s(q2e);mfr=r(yEt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),yEt.forEach(t),gfr=i(Ca),Ka=n(Ca,"P",{});var m6=s(Ka);hfr=r(m6,"The model class to instantiate is selected based on the "),j2e=n(m6,"CODE",{});var xEt=s(j2e);pfr=r(xEt,"model_type"),xEt.forEach(t),_fr=r(m6,` property of the config object (either
passed as an argument or loaded from `),D2e=n(m6,"CODE",{});var $Et=s(D2e);ufr=r($Et,"pretrained_model_name_or_path"),$Et.forEach(t),bfr=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G2e=n(m6,"CODE",{});var kEt=s(G2e);vfr=r(kEt,"pretrained_model_name_or_path"),kEt.forEach(t),Ffr=r(m6,":"),m6.forEach(t),Tfr=i(Ca),Gd=n(Ca,"UL",{});var Qoe=s(Gd);fF=n(Qoe,"LI",{});var fBe=s(fF);O2e=n(fBe,"STRONG",{});var SEt=s(O2e);Mfr=r(SEt,"deit"),SEt.forEach(t),Efr=r(fBe," \u2014 "),FQ=n(fBe,"A",{href:!0});var REt=s(FQ);Cfr=r(REt,"DeiTForMaskedImageModeling"),REt.forEach(t),wfr=r(fBe," (DeiT model)"),fBe.forEach(t),Afr=i(Qoe),mF=n(Qoe,"LI",{});var mBe=s(mF);V2e=n(mBe,"STRONG",{});var PEt=s(V2e);Lfr=r(PEt,"swin"),PEt.forEach(t),yfr=r(mBe," \u2014 "),TQ=n(mBe,"A",{href:!0});var BEt=s(TQ);xfr=r(BEt,"SwinForMaskedImageModeling"),BEt.forEach(t),$fr=r(mBe," (Swin Transformer model)"),mBe.forEach(t),kfr=i(Qoe),gF=n(Qoe,"LI",{});var gBe=s(gF);X2e=n(gBe,"STRONG",{});var IEt=s(X2e);Sfr=r(IEt,"vit"),IEt.forEach(t),Rfr=r(gBe," \u2014 "),MQ=n(gBe,"A",{href:!0});var NEt=s(MQ);Pfr=r(NEt,"ViTForMaskedImageModeling"),NEt.forEach(t),Bfr=r(gBe," (ViT model)"),gBe.forEach(t),Qoe.forEach(t),Ifr=i(Ca),hF=n(Ca,"P",{});var hBe=s(hF);Nfr=r(hBe,"The model is set in evaluation mode by default using "),z2e=n(hBe,"CODE",{});var qEt=s(z2e);qfr=r(qEt,"model.eval()"),qEt.forEach(t),jfr=r(hBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W2e=n(hBe,"CODE",{});var jEt=s(W2e);Dfr=r(jEt,"model.train()"),jEt.forEach(t),hBe.forEach(t),Gfr=i(Ca),T(pF.$$.fragment,Ca),Ca.forEach(t),ul.forEach(t),uOe=i(f),Od=n(f,"H2",{class:!0});var CXe=s(Od);_F=n(CXe,"A",{id:!0,class:!0,href:!0});var DEt=s(_F);Q2e=n(DEt,"SPAN",{});var GEt=s(Q2e);T(V8.$$.fragment,GEt),GEt.forEach(t),DEt.forEach(t),Ofr=i(CXe),H2e=n(CXe,"SPAN",{});var OEt=s(H2e);Vfr=r(OEt,"AutoModelForObjectDetection"),OEt.forEach(t),CXe.forEach(t),bOe=i(f),Uo=n(f,"DIV",{class:!0});var bl=s(Uo);T(X8.$$.fragment,bl),Xfr=i(bl),Vd=n(bl,"P",{});var Hoe=s(Vd);zfr=r(Hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),EQ=n(Hoe,"A",{href:!0});var VEt=s(EQ);Wfr=r(VEt,"from_pretrained()"),VEt.forEach(t),Qfr=r(Hoe," class method or the "),CQ=n(Hoe,"A",{href:!0});var XEt=s(CQ);Hfr=r(XEt,"from_config()"),XEt.forEach(t),Ufr=r(Hoe,` class
method.`),Hoe.forEach(t),Jfr=i(bl),z8=n(bl,"P",{});var wXe=s(z8);Yfr=r(wXe,"This class cannot be instantiated directly using "),U2e=n(wXe,"CODE",{});var zEt=s(U2e);Kfr=r(zEt,"__init__()"),zEt.forEach(t),Zfr=r(wXe," (throws an error)."),wXe.forEach(t),emr=i(bl),Lt=n(bl,"DIV",{class:!0});var g6=s(Lt);T(W8.$$.fragment,g6),omr=i(g6),J2e=n(g6,"P",{});var WEt=s(J2e);rmr=r(WEt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),WEt.forEach(t),tmr=i(g6),Xd=n(g6,"P",{});var Uoe=s(Xd);amr=r(Uoe,`Note:
Loading a model from its configuration file does `),Y2e=n(Uoe,"STRONG",{});var QEt=s(Y2e);nmr=r(QEt,"not"),QEt.forEach(t),smr=r(Uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=n(Uoe,"A",{href:!0});var HEt=s(wQ);lmr=r(HEt,"from_pretrained()"),HEt.forEach(t),imr=r(Uoe," to load the model weights."),Uoe.forEach(t),dmr=i(g6),T(uF.$$.fragment,g6),g6.forEach(t),cmr=i(bl),uo=n(bl,"DIV",{class:!0});var wa=s(uo);T(Q8.$$.fragment,wa),fmr=i(wa),K2e=n(wa,"P",{});var UEt=s(K2e);mmr=r(UEt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),UEt.forEach(t),gmr=i(wa),Za=n(wa,"P",{});var h6=s(Za);hmr=r(h6,"The model class to instantiate is selected based on the "),Z2e=n(h6,"CODE",{});var JEt=s(Z2e);pmr=r(JEt,"model_type"),JEt.forEach(t),_mr=r(h6,` property of the config object (either
passed as an argument or loaded from `),e4e=n(h6,"CODE",{});var YEt=s(e4e);umr=r(YEt,"pretrained_model_name_or_path"),YEt.forEach(t),bmr=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=n(h6,"CODE",{});var KEt=s(o4e);vmr=r(KEt,"pretrained_model_name_or_path"),KEt.forEach(t),Fmr=r(h6,":"),h6.forEach(t),Tmr=i(wa),H8=n(wa,"UL",{});var AXe=s(H8);bF=n(AXe,"LI",{});var pBe=s(bF);r4e=n(pBe,"STRONG",{});var ZEt=s(r4e);Mmr=r(ZEt,"detr"),ZEt.forEach(t),Emr=r(pBe," \u2014 "),AQ=n(pBe,"A",{href:!0});var eCt=s(AQ);Cmr=r(eCt,"DetrForObjectDetection"),eCt.forEach(t),wmr=r(pBe," (DETR model)"),pBe.forEach(t),Amr=i(AXe),vF=n(AXe,"LI",{});var _Be=s(vF);t4e=n(_Be,"STRONG",{});var oCt=s(t4e);Lmr=r(oCt,"yolos"),oCt.forEach(t),ymr=r(_Be," \u2014 "),LQ=n(_Be,"A",{href:!0});var rCt=s(LQ);xmr=r(rCt,"YolosForObjectDetection"),rCt.forEach(t),$mr=r(_Be," (YOLOS model)"),_Be.forEach(t),AXe.forEach(t),kmr=i(wa),FF=n(wa,"P",{});var uBe=s(FF);Smr=r(uBe,"The model is set in evaluation mode by default using "),a4e=n(uBe,"CODE",{});var tCt=s(a4e);Rmr=r(tCt,"model.eval()"),tCt.forEach(t),Pmr=r(uBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n4e=n(uBe,"CODE",{});var aCt=s(n4e);Bmr=r(aCt,"model.train()"),aCt.forEach(t),uBe.forEach(t),Imr=i(wa),T(TF.$$.fragment,wa),wa.forEach(t),bl.forEach(t),vOe=i(f),zd=n(f,"H2",{class:!0});var LXe=s(zd);MF=n(LXe,"A",{id:!0,class:!0,href:!0});var nCt=s(MF);s4e=n(nCt,"SPAN",{});var sCt=s(s4e);T(U8.$$.fragment,sCt),sCt.forEach(t),nCt.forEach(t),Nmr=i(LXe),l4e=n(LXe,"SPAN",{});var lCt=s(l4e);qmr=r(lCt,"AutoModelForImageSegmentation"),lCt.forEach(t),LXe.forEach(t),FOe=i(f),Jo=n(f,"DIV",{class:!0});var vl=s(Jo);T(J8.$$.fragment,vl),jmr=i(vl),Wd=n(vl,"P",{});var Joe=s(Wd);Dmr=r(Joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),yQ=n(Joe,"A",{href:!0});var iCt=s(yQ);Gmr=r(iCt,"from_pretrained()"),iCt.forEach(t),Omr=r(Joe," class method or the "),xQ=n(Joe,"A",{href:!0});var dCt=s(xQ);Vmr=r(dCt,"from_config()"),dCt.forEach(t),Xmr=r(Joe,` class
method.`),Joe.forEach(t),zmr=i(vl),Y8=n(vl,"P",{});var yXe=s(Y8);Wmr=r(yXe,"This class cannot be instantiated directly using "),i4e=n(yXe,"CODE",{});var cCt=s(i4e);Qmr=r(cCt,"__init__()"),cCt.forEach(t),Hmr=r(yXe," (throws an error)."),yXe.forEach(t),Umr=i(vl),yt=n(vl,"DIV",{class:!0});var p6=s(yt);T(K8.$$.fragment,p6),Jmr=i(p6),d4e=n(p6,"P",{});var fCt=s(d4e);Ymr=r(fCt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),fCt.forEach(t),Kmr=i(p6),Qd=n(p6,"P",{});var Yoe=s(Qd);Zmr=r(Yoe,`Note:
Loading a model from its configuration file does `),c4e=n(Yoe,"STRONG",{});var mCt=s(c4e);egr=r(mCt,"not"),mCt.forEach(t),ogr=r(Yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(Yoe,"A",{href:!0});var gCt=s($Q);rgr=r(gCt,"from_pretrained()"),gCt.forEach(t),tgr=r(Yoe," to load the model weights."),Yoe.forEach(t),agr=i(p6),T(EF.$$.fragment,p6),p6.forEach(t),ngr=i(vl),bo=n(vl,"DIV",{class:!0});var Aa=s(bo);T(Z8.$$.fragment,Aa),sgr=i(Aa),f4e=n(Aa,"P",{});var hCt=s(f4e);lgr=r(hCt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),hCt.forEach(t),igr=i(Aa),en=n(Aa,"P",{});var _6=s(en);dgr=r(_6,"The model class to instantiate is selected based on the "),m4e=n(_6,"CODE",{});var pCt=s(m4e);cgr=r(pCt,"model_type"),pCt.forEach(t),fgr=r(_6,` property of the config object (either
passed as an argument or loaded from `),g4e=n(_6,"CODE",{});var _Ct=s(g4e);mgr=r(_Ct,"pretrained_model_name_or_path"),_Ct.forEach(t),ggr=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=n(_6,"CODE",{});var uCt=s(h4e);hgr=r(uCt,"pretrained_model_name_or_path"),uCt.forEach(t),pgr=r(_6,":"),_6.forEach(t),_gr=i(Aa),p4e=n(Aa,"UL",{});var bCt=s(p4e);CF=n(bCt,"LI",{});var bBe=s(CF);_4e=n(bBe,"STRONG",{});var vCt=s(_4e);ugr=r(vCt,"detr"),vCt.forEach(t),bgr=r(bBe," \u2014 "),kQ=n(bBe,"A",{href:!0});var FCt=s(kQ);vgr=r(FCt,"DetrForSegmentation"),FCt.forEach(t),Fgr=r(bBe," (DETR model)"),bBe.forEach(t),bCt.forEach(t),Tgr=i(Aa),wF=n(Aa,"P",{});var vBe=s(wF);Mgr=r(vBe,"The model is set in evaluation mode by default using "),u4e=n(vBe,"CODE",{});var TCt=s(u4e);Egr=r(TCt,"model.eval()"),TCt.forEach(t),Cgr=r(vBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b4e=n(vBe,"CODE",{});var MCt=s(b4e);wgr=r(MCt,"model.train()"),MCt.forEach(t),vBe.forEach(t),Agr=i(Aa),T(AF.$$.fragment,Aa),Aa.forEach(t),vl.forEach(t),TOe=i(f),Hd=n(f,"H2",{class:!0});var xXe=s(Hd);LF=n(xXe,"A",{id:!0,class:!0,href:!0});var ECt=s(LF);v4e=n(ECt,"SPAN",{});var CCt=s(v4e);T(e9.$$.fragment,CCt),CCt.forEach(t),ECt.forEach(t),Lgr=i(xXe),F4e=n(xXe,"SPAN",{});var wCt=s(F4e);ygr=r(wCt,"AutoModelForSemanticSegmentation"),wCt.forEach(t),xXe.forEach(t),MOe=i(f),Yo=n(f,"DIV",{class:!0});var Fl=s(Yo);T(o9.$$.fragment,Fl),xgr=i(Fl),Ud=n(Fl,"P",{});var Koe=s(Ud);$gr=r(Koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),SQ=n(Koe,"A",{href:!0});var ACt=s(SQ);kgr=r(ACt,"from_pretrained()"),ACt.forEach(t),Sgr=r(Koe," class method or the "),RQ=n(Koe,"A",{href:!0});var LCt=s(RQ);Rgr=r(LCt,"from_config()"),LCt.forEach(t),Pgr=r(Koe,` class
method.`),Koe.forEach(t),Bgr=i(Fl),r9=n(Fl,"P",{});var $Xe=s(r9);Igr=r($Xe,"This class cannot be instantiated directly using "),T4e=n($Xe,"CODE",{});var yCt=s(T4e);Ngr=r(yCt,"__init__()"),yCt.forEach(t),qgr=r($Xe," (throws an error)."),$Xe.forEach(t),jgr=i(Fl),xt=n(Fl,"DIV",{class:!0});var u6=s(xt);T(t9.$$.fragment,u6),Dgr=i(u6),M4e=n(u6,"P",{});var xCt=s(M4e);Ggr=r(xCt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),xCt.forEach(t),Ogr=i(u6),Jd=n(u6,"P",{});var Zoe=s(Jd);Vgr=r(Zoe,`Note:
Loading a model from its configuration file does `),E4e=n(Zoe,"STRONG",{});var $Ct=s(E4e);Xgr=r($Ct,"not"),$Ct.forEach(t),zgr=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=n(Zoe,"A",{href:!0});var kCt=s(PQ);Wgr=r(kCt,"from_pretrained()"),kCt.forEach(t),Qgr=r(Zoe," to load the model weights."),Zoe.forEach(t),Hgr=i(u6),T(yF.$$.fragment,u6),u6.forEach(t),Ugr=i(Fl),vo=n(Fl,"DIV",{class:!0});var La=s(vo);T(a9.$$.fragment,La),Jgr=i(La),C4e=n(La,"P",{});var SCt=s(C4e);Ygr=r(SCt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),SCt.forEach(t),Kgr=i(La),on=n(La,"P",{});var b6=s(on);Zgr=r(b6,"The model class to instantiate is selected based on the "),w4e=n(b6,"CODE",{});var RCt=s(w4e);ehr=r(RCt,"model_type"),RCt.forEach(t),ohr=r(b6,` property of the config object (either
passed as an argument or loaded from `),A4e=n(b6,"CODE",{});var PCt=s(A4e);rhr=r(PCt,"pretrained_model_name_or_path"),PCt.forEach(t),thr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L4e=n(b6,"CODE",{});var BCt=s(L4e);ahr=r(BCt,"pretrained_model_name_or_path"),BCt.forEach(t),nhr=r(b6,":"),b6.forEach(t),shr=i(La),rt=n(La,"UL",{});var Tl=s(rt);xF=n(Tl,"LI",{});var FBe=s(xF);y4e=n(FBe,"STRONG",{});var ICt=s(y4e);lhr=r(ICt,"beit"),ICt.forEach(t),ihr=r(FBe," \u2014 "),BQ=n(FBe,"A",{href:!0});var NCt=s(BQ);dhr=r(NCt,"BeitForSemanticSegmentation"),NCt.forEach(t),chr=r(FBe," (BEiT model)"),FBe.forEach(t),fhr=i(Tl),$F=n(Tl,"LI",{});var TBe=s($F);x4e=n(TBe,"STRONG",{});var qCt=s(x4e);mhr=r(qCt,"data2vec-vision"),qCt.forEach(t),ghr=r(TBe," \u2014 "),IQ=n(TBe,"A",{href:!0});var jCt=s(IQ);hhr=r(jCt,"Data2VecVisionForSemanticSegmentation"),jCt.forEach(t),phr=r(TBe," (Data2VecVision model)"),TBe.forEach(t),_hr=i(Tl),kF=n(Tl,"LI",{});var MBe=s(kF);$4e=n(MBe,"STRONG",{});var DCt=s($4e);uhr=r(DCt,"dpt"),DCt.forEach(t),bhr=r(MBe," \u2014 "),NQ=n(MBe,"A",{href:!0});var GCt=s(NQ);vhr=r(GCt,"DPTForSemanticSegmentation"),GCt.forEach(t),Fhr=r(MBe," (DPT model)"),MBe.forEach(t),Thr=i(Tl),SF=n(Tl,"LI",{});var EBe=s(SF);k4e=n(EBe,"STRONG",{});var OCt=s(k4e);Mhr=r(OCt,"mobilevit"),OCt.forEach(t),Ehr=r(EBe," \u2014 "),qQ=n(EBe,"A",{href:!0});var VCt=s(qQ);Chr=r(VCt,"MobileViTForSemanticSegmentation"),VCt.forEach(t),whr=r(EBe," (MobileViT model)"),EBe.forEach(t),Ahr=i(Tl),RF=n(Tl,"LI",{});var CBe=s(RF);S4e=n(CBe,"STRONG",{});var XCt=s(S4e);Lhr=r(XCt,"segformer"),XCt.forEach(t),yhr=r(CBe," \u2014 "),jQ=n(CBe,"A",{href:!0});var zCt=s(jQ);xhr=r(zCt,"SegformerForSemanticSegmentation"),zCt.forEach(t),$hr=r(CBe," (SegFormer model)"),CBe.forEach(t),Tl.forEach(t),khr=i(La),PF=n(La,"P",{});var wBe=s(PF);Shr=r(wBe,"The model is set in evaluation mode by default using "),R4e=n(wBe,"CODE",{});var WCt=s(R4e);Rhr=r(WCt,"model.eval()"),WCt.forEach(t),Phr=r(wBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P4e=n(wBe,"CODE",{});var QCt=s(P4e);Bhr=r(QCt,"model.train()"),QCt.forEach(t),wBe.forEach(t),Ihr=i(La),T(BF.$$.fragment,La),La.forEach(t),Fl.forEach(t),EOe=i(f),Yd=n(f,"H2",{class:!0});var kXe=s(Yd);IF=n(kXe,"A",{id:!0,class:!0,href:!0});var HCt=s(IF);B4e=n(HCt,"SPAN",{});var UCt=s(B4e);T(n9.$$.fragment,UCt),UCt.forEach(t),HCt.forEach(t),Nhr=i(kXe),I4e=n(kXe,"SPAN",{});var JCt=s(I4e);qhr=r(JCt,"AutoModelForInstanceSegmentation"),JCt.forEach(t),kXe.forEach(t),COe=i(f),Ko=n(f,"DIV",{class:!0});var Ml=s(Ko);T(s9.$$.fragment,Ml),jhr=i(Ml),Kd=n(Ml,"P",{});var ere=s(Kd);Dhr=r(ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),DQ=n(ere,"A",{href:!0});var YCt=s(DQ);Ghr=r(YCt,"from_pretrained()"),YCt.forEach(t),Ohr=r(ere," class method or the "),GQ=n(ere,"A",{href:!0});var KCt=s(GQ);Vhr=r(KCt,"from_config()"),KCt.forEach(t),Xhr=r(ere,` class
method.`),ere.forEach(t),zhr=i(Ml),l9=n(Ml,"P",{});var SXe=s(l9);Whr=r(SXe,"This class cannot be instantiated directly using "),N4e=n(SXe,"CODE",{});var ZCt=s(N4e);Qhr=r(ZCt,"__init__()"),ZCt.forEach(t),Hhr=r(SXe," (throws an error)."),SXe.forEach(t),Uhr=i(Ml),$t=n(Ml,"DIV",{class:!0});var v6=s($t);T(i9.$$.fragment,v6),Jhr=i(v6),q4e=n(v6,"P",{});var e0t=s(q4e);Yhr=r(e0t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),e0t.forEach(t),Khr=i(v6),Zd=n(v6,"P",{});var ore=s(Zd);Zhr=r(ore,`Note:
Loading a model from its configuration file does `),j4e=n(ore,"STRONG",{});var o0t=s(j4e);epr=r(o0t,"not"),o0t.forEach(t),opr=r(ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=n(ore,"A",{href:!0});var r0t=s(OQ);rpr=r(r0t,"from_pretrained()"),r0t.forEach(t),tpr=r(ore," to load the model weights."),ore.forEach(t),apr=i(v6),T(NF.$$.fragment,v6),v6.forEach(t),npr=i(Ml),Fo=n(Ml,"DIV",{class:!0});var ya=s(Fo);T(d9.$$.fragment,ya),spr=i(ya),D4e=n(ya,"P",{});var t0t=s(D4e);lpr=r(t0t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),t0t.forEach(t),ipr=i(ya),rn=n(ya,"P",{});var F6=s(rn);dpr=r(F6,"The model class to instantiate is selected based on the "),G4e=n(F6,"CODE",{});var a0t=s(G4e);cpr=r(a0t,"model_type"),a0t.forEach(t),fpr=r(F6,` property of the config object (either
passed as an argument or loaded from `),O4e=n(F6,"CODE",{});var n0t=s(O4e);mpr=r(n0t,"pretrained_model_name_or_path"),n0t.forEach(t),gpr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=n(F6,"CODE",{});var s0t=s(V4e);hpr=r(s0t,"pretrained_model_name_or_path"),s0t.forEach(t),ppr=r(F6,":"),F6.forEach(t),_pr=i(ya),X4e=n(ya,"UL",{});var l0t=s(X4e);qF=n(l0t,"LI",{});var ABe=s(qF);z4e=n(ABe,"STRONG",{});var i0t=s(z4e);upr=r(i0t,"maskformer"),i0t.forEach(t),bpr=r(ABe," \u2014 "),VQ=n(ABe,"A",{href:!0});var d0t=s(VQ);vpr=r(d0t,"MaskFormerForInstanceSegmentation"),d0t.forEach(t),Fpr=r(ABe," (MaskFormer model)"),ABe.forEach(t),l0t.forEach(t),Tpr=i(ya),jF=n(ya,"P",{});var LBe=s(jF);Mpr=r(LBe,"The model is set in evaluation mode by default using "),W4e=n(LBe,"CODE",{});var c0t=s(W4e);Epr=r(c0t,"model.eval()"),c0t.forEach(t),Cpr=r(LBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q4e=n(LBe,"CODE",{});var f0t=s(Q4e);wpr=r(f0t,"model.train()"),f0t.forEach(t),LBe.forEach(t),Apr=i(ya),T(DF.$$.fragment,ya),ya.forEach(t),Ml.forEach(t),wOe=i(f),ec=n(f,"H2",{class:!0});var RXe=s(ec);GF=n(RXe,"A",{id:!0,class:!0,href:!0});var m0t=s(GF);H4e=n(m0t,"SPAN",{});var g0t=s(H4e);T(c9.$$.fragment,g0t),g0t.forEach(t),m0t.forEach(t),Lpr=i(RXe),U4e=n(RXe,"SPAN",{});var h0t=s(U4e);ypr=r(h0t,"TFAutoModel"),h0t.forEach(t),RXe.forEach(t),AOe=i(f),Zo=n(f,"DIV",{class:!0});var El=s(Zo);T(f9.$$.fragment,El),xpr=i(El),oc=n(El,"P",{});var rre=s(oc);$pr=r(rre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XQ=n(rre,"A",{href:!0});var p0t=s(XQ);kpr=r(p0t,"from_pretrained()"),p0t.forEach(t),Spr=r(rre," class method or the "),zQ=n(rre,"A",{href:!0});var _0t=s(zQ);Rpr=r(_0t,"from_config()"),_0t.forEach(t),Ppr=r(rre,` class
method.`),rre.forEach(t),Bpr=i(El),m9=n(El,"P",{});var PXe=s(m9);Ipr=r(PXe,"This class cannot be instantiated directly using "),J4e=n(PXe,"CODE",{});var u0t=s(J4e);Npr=r(u0t,"__init__()"),u0t.forEach(t),qpr=r(PXe," (throws an error)."),PXe.forEach(t),jpr=i(El),kt=n(El,"DIV",{class:!0});var T6=s(kt);T(g9.$$.fragment,T6),Dpr=i(T6),Y4e=n(T6,"P",{});var b0t=s(Y4e);Gpr=r(b0t,"Instantiates one of the base model classes of the library from a configuration."),b0t.forEach(t),Opr=i(T6),rc=n(T6,"P",{});var tre=s(rc);Vpr=r(tre,`Note:
Loading a model from its configuration file does `),K4e=n(tre,"STRONG",{});var v0t=s(K4e);Xpr=r(v0t,"not"),v0t.forEach(t),zpr=r(tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=n(tre,"A",{href:!0});var F0t=s(WQ);Wpr=r(F0t,"from_pretrained()"),F0t.forEach(t),Qpr=r(tre," to load the model weights."),tre.forEach(t),Hpr=i(T6),T(OF.$$.fragment,T6),T6.forEach(t),Upr=i(El),Lr=n(El,"DIV",{class:!0});var Cl=s(Lr);T(h9.$$.fragment,Cl),Jpr=i(Cl),Z4e=n(Cl,"P",{});var T0t=s(Z4e);Ypr=r(T0t,"Instantiate one of the base model classes of the library from a pretrained model."),T0t.forEach(t),Kpr=i(Cl),tn=n(Cl,"P",{});var M6=s(tn);Zpr=r(M6,"The model class to instantiate is selected based on the "),e5e=n(M6,"CODE",{});var M0t=s(e5e);e_r=r(M0t,"model_type"),M0t.forEach(t),o_r=r(M6,` property of the config object (either
passed as an argument or loaded from `),o5e=n(M6,"CODE",{});var E0t=s(o5e);r_r=r(E0t,"pretrained_model_name_or_path"),E0t.forEach(t),t_r=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r5e=n(M6,"CODE",{});var C0t=s(r5e);a_r=r(C0t,"pretrained_model_name_or_path"),C0t.forEach(t),n_r=r(M6,":"),M6.forEach(t),s_r=i(Cl),q=n(Cl,"UL",{});var D=s(q);VF=n(D,"LI",{});var yBe=s(VF);t5e=n(yBe,"STRONG",{});var w0t=s(t5e);l_r=r(w0t,"albert"),w0t.forEach(t),i_r=r(yBe," \u2014 "),QQ=n(yBe,"A",{href:!0});var A0t=s(QQ);d_r=r(A0t,"TFAlbertModel"),A0t.forEach(t),c_r=r(yBe," (ALBERT model)"),yBe.forEach(t),f_r=i(D),XF=n(D,"LI",{});var xBe=s(XF);a5e=n(xBe,"STRONG",{});var L0t=s(a5e);m_r=r(L0t,"bart"),L0t.forEach(t),g_r=r(xBe," \u2014 "),HQ=n(xBe,"A",{href:!0});var y0t=s(HQ);h_r=r(y0t,"TFBartModel"),y0t.forEach(t),p_r=r(xBe," (BART model)"),xBe.forEach(t),__r=i(D),zF=n(D,"LI",{});var $Be=s(zF);n5e=n($Be,"STRONG",{});var x0t=s(n5e);u_r=r(x0t,"bert"),x0t.forEach(t),b_r=r($Be," \u2014 "),UQ=n($Be,"A",{href:!0});var $0t=s(UQ);v_r=r($0t,"TFBertModel"),$0t.forEach(t),F_r=r($Be," (BERT model)"),$Be.forEach(t),T_r=i(D),WF=n(D,"LI",{});var kBe=s(WF);s5e=n(kBe,"STRONG",{});var k0t=s(s5e);M_r=r(k0t,"blenderbot"),k0t.forEach(t),E_r=r(kBe," \u2014 "),JQ=n(kBe,"A",{href:!0});var S0t=s(JQ);C_r=r(S0t,"TFBlenderbotModel"),S0t.forEach(t),w_r=r(kBe," (Blenderbot model)"),kBe.forEach(t),A_r=i(D),QF=n(D,"LI",{});var SBe=s(QF);l5e=n(SBe,"STRONG",{});var R0t=s(l5e);L_r=r(R0t,"blenderbot-small"),R0t.forEach(t),y_r=r(SBe," \u2014 "),YQ=n(SBe,"A",{href:!0});var P0t=s(YQ);x_r=r(P0t,"TFBlenderbotSmallModel"),P0t.forEach(t),$_r=r(SBe," (BlenderbotSmall model)"),SBe.forEach(t),k_r=i(D),HF=n(D,"LI",{});var RBe=s(HF);i5e=n(RBe,"STRONG",{});var B0t=s(i5e);S_r=r(B0t,"camembert"),B0t.forEach(t),R_r=r(RBe," \u2014 "),KQ=n(RBe,"A",{href:!0});var I0t=s(KQ);P_r=r(I0t,"TFCamembertModel"),I0t.forEach(t),B_r=r(RBe," (CamemBERT model)"),RBe.forEach(t),I_r=i(D),UF=n(D,"LI",{});var PBe=s(UF);d5e=n(PBe,"STRONG",{});var N0t=s(d5e);N_r=r(N0t,"clip"),N0t.forEach(t),q_r=r(PBe," \u2014 "),ZQ=n(PBe,"A",{href:!0});var q0t=s(ZQ);j_r=r(q0t,"TFCLIPModel"),q0t.forEach(t),D_r=r(PBe," (CLIP model)"),PBe.forEach(t),G_r=i(D),JF=n(D,"LI",{});var BBe=s(JF);c5e=n(BBe,"STRONG",{});var j0t=s(c5e);O_r=r(j0t,"convbert"),j0t.forEach(t),V_r=r(BBe," \u2014 "),eH=n(BBe,"A",{href:!0});var D0t=s(eH);X_r=r(D0t,"TFConvBertModel"),D0t.forEach(t),z_r=r(BBe," (ConvBERT model)"),BBe.forEach(t),W_r=i(D),YF=n(D,"LI",{});var IBe=s(YF);f5e=n(IBe,"STRONG",{});var G0t=s(f5e);Q_r=r(G0t,"convnext"),G0t.forEach(t),H_r=r(IBe," \u2014 "),oH=n(IBe,"A",{href:!0});var O0t=s(oH);U_r=r(O0t,"TFConvNextModel"),O0t.forEach(t),J_r=r(IBe," (ConvNeXT model)"),IBe.forEach(t),Y_r=i(D),KF=n(D,"LI",{});var NBe=s(KF);m5e=n(NBe,"STRONG",{});var V0t=s(m5e);K_r=r(V0t,"ctrl"),V0t.forEach(t),Z_r=r(NBe," \u2014 "),rH=n(NBe,"A",{href:!0});var X0t=s(rH);eur=r(X0t,"TFCTRLModel"),X0t.forEach(t),our=r(NBe," (CTRL model)"),NBe.forEach(t),rur=i(D),ZF=n(D,"LI",{});var qBe=s(ZF);g5e=n(qBe,"STRONG",{});var z0t=s(g5e);tur=r(z0t,"data2vec-vision"),z0t.forEach(t),aur=r(qBe," \u2014 "),tH=n(qBe,"A",{href:!0});var W0t=s(tH);nur=r(W0t,"TFData2VecVisionModel"),W0t.forEach(t),sur=r(qBe," (Data2VecVision model)"),qBe.forEach(t),lur=i(D),eT=n(D,"LI",{});var jBe=s(eT);h5e=n(jBe,"STRONG",{});var Q0t=s(h5e);iur=r(Q0t,"deberta"),Q0t.forEach(t),dur=r(jBe," \u2014 "),aH=n(jBe,"A",{href:!0});var H0t=s(aH);cur=r(H0t,"TFDebertaModel"),H0t.forEach(t),fur=r(jBe," (DeBERTa model)"),jBe.forEach(t),mur=i(D),oT=n(D,"LI",{});var DBe=s(oT);p5e=n(DBe,"STRONG",{});var U0t=s(p5e);gur=r(U0t,"deberta-v2"),U0t.forEach(t),hur=r(DBe," \u2014 "),nH=n(DBe,"A",{href:!0});var J0t=s(nH);pur=r(J0t,"TFDebertaV2Model"),J0t.forEach(t),_ur=r(DBe," (DeBERTa-v2 model)"),DBe.forEach(t),uur=i(D),rT=n(D,"LI",{});var GBe=s(rT);_5e=n(GBe,"STRONG",{});var Y0t=s(_5e);bur=r(Y0t,"distilbert"),Y0t.forEach(t),vur=r(GBe," \u2014 "),sH=n(GBe,"A",{href:!0});var K0t=s(sH);Fur=r(K0t,"TFDistilBertModel"),K0t.forEach(t),Tur=r(GBe," (DistilBERT model)"),GBe.forEach(t),Mur=i(D),tT=n(D,"LI",{});var OBe=s(tT);u5e=n(OBe,"STRONG",{});var Z0t=s(u5e);Eur=r(Z0t,"dpr"),Z0t.forEach(t),Cur=r(OBe," \u2014 "),lH=n(OBe,"A",{href:!0});var ewt=s(lH);wur=r(ewt,"TFDPRQuestionEncoder"),ewt.forEach(t),Aur=r(OBe," (DPR model)"),OBe.forEach(t),Lur=i(D),aT=n(D,"LI",{});var VBe=s(aT);b5e=n(VBe,"STRONG",{});var owt=s(b5e);yur=r(owt,"electra"),owt.forEach(t),xur=r(VBe," \u2014 "),iH=n(VBe,"A",{href:!0});var rwt=s(iH);$ur=r(rwt,"TFElectraModel"),rwt.forEach(t),kur=r(VBe," (ELECTRA model)"),VBe.forEach(t),Sur=i(D),nT=n(D,"LI",{});var XBe=s(nT);v5e=n(XBe,"STRONG",{});var twt=s(v5e);Rur=r(twt,"flaubert"),twt.forEach(t),Pur=r(XBe," \u2014 "),dH=n(XBe,"A",{href:!0});var awt=s(dH);Bur=r(awt,"TFFlaubertModel"),awt.forEach(t),Iur=r(XBe," (FlauBERT model)"),XBe.forEach(t),Nur=i(D),Xs=n(D,"LI",{});var Uk=s(Xs);F5e=n(Uk,"STRONG",{});var nwt=s(F5e);qur=r(nwt,"funnel"),nwt.forEach(t),jur=r(Uk," \u2014 "),cH=n(Uk,"A",{href:!0});var swt=s(cH);Dur=r(swt,"TFFunnelModel"),swt.forEach(t),Gur=r(Uk," or "),fH=n(Uk,"A",{href:!0});var lwt=s(fH);Our=r(lwt,"TFFunnelBaseModel"),lwt.forEach(t),Vur=r(Uk," (Funnel Transformer model)"),Uk.forEach(t),Xur=i(D),sT=n(D,"LI",{});var zBe=s(sT);T5e=n(zBe,"STRONG",{});var iwt=s(T5e);zur=r(iwt,"gpt2"),iwt.forEach(t),Wur=r(zBe," \u2014 "),mH=n(zBe,"A",{href:!0});var dwt=s(mH);Qur=r(dwt,"TFGPT2Model"),dwt.forEach(t),Hur=r(zBe," (OpenAI GPT-2 model)"),zBe.forEach(t),Uur=i(D),lT=n(D,"LI",{});var WBe=s(lT);M5e=n(WBe,"STRONG",{});var cwt=s(M5e);Jur=r(cwt,"gptj"),cwt.forEach(t),Yur=r(WBe," \u2014 "),gH=n(WBe,"A",{href:!0});var fwt=s(gH);Kur=r(fwt,"TFGPTJModel"),fwt.forEach(t),Zur=r(WBe," (GPT-J model)"),WBe.forEach(t),e1r=i(D),iT=n(D,"LI",{});var QBe=s(iT);E5e=n(QBe,"STRONG",{});var mwt=s(E5e);o1r=r(mwt,"hubert"),mwt.forEach(t),r1r=r(QBe," \u2014 "),hH=n(QBe,"A",{href:!0});var gwt=s(hH);t1r=r(gwt,"TFHubertModel"),gwt.forEach(t),a1r=r(QBe," (Hubert model)"),QBe.forEach(t),n1r=i(D),dT=n(D,"LI",{});var HBe=s(dT);C5e=n(HBe,"STRONG",{});var hwt=s(C5e);s1r=r(hwt,"layoutlm"),hwt.forEach(t),l1r=r(HBe," \u2014 "),pH=n(HBe,"A",{href:!0});var pwt=s(pH);i1r=r(pwt,"TFLayoutLMModel"),pwt.forEach(t),d1r=r(HBe," (LayoutLM model)"),HBe.forEach(t),c1r=i(D),cT=n(D,"LI",{});var UBe=s(cT);w5e=n(UBe,"STRONG",{});var _wt=s(w5e);f1r=r(_wt,"led"),_wt.forEach(t),m1r=r(UBe," \u2014 "),_H=n(UBe,"A",{href:!0});var uwt=s(_H);g1r=r(uwt,"TFLEDModel"),uwt.forEach(t),h1r=r(UBe," (LED model)"),UBe.forEach(t),p1r=i(D),fT=n(D,"LI",{});var JBe=s(fT);A5e=n(JBe,"STRONG",{});var bwt=s(A5e);_1r=r(bwt,"longformer"),bwt.forEach(t),u1r=r(JBe," \u2014 "),uH=n(JBe,"A",{href:!0});var vwt=s(uH);b1r=r(vwt,"TFLongformerModel"),vwt.forEach(t),v1r=r(JBe," (Longformer model)"),JBe.forEach(t),F1r=i(D),mT=n(D,"LI",{});var YBe=s(mT);L5e=n(YBe,"STRONG",{});var Fwt=s(L5e);T1r=r(Fwt,"lxmert"),Fwt.forEach(t),M1r=r(YBe," \u2014 "),bH=n(YBe,"A",{href:!0});var Twt=s(bH);E1r=r(Twt,"TFLxmertModel"),Twt.forEach(t),C1r=r(YBe," (LXMERT model)"),YBe.forEach(t),w1r=i(D),gT=n(D,"LI",{});var KBe=s(gT);y5e=n(KBe,"STRONG",{});var Mwt=s(y5e);A1r=r(Mwt,"marian"),Mwt.forEach(t),L1r=r(KBe," \u2014 "),vH=n(KBe,"A",{href:!0});var Ewt=s(vH);y1r=r(Ewt,"TFMarianModel"),Ewt.forEach(t),x1r=r(KBe," (Marian model)"),KBe.forEach(t),$1r=i(D),hT=n(D,"LI",{});var ZBe=s(hT);x5e=n(ZBe,"STRONG",{});var Cwt=s(x5e);k1r=r(Cwt,"mbart"),Cwt.forEach(t),S1r=r(ZBe," \u2014 "),FH=n(ZBe,"A",{href:!0});var wwt=s(FH);R1r=r(wwt,"TFMBartModel"),wwt.forEach(t),P1r=r(ZBe," (mBART model)"),ZBe.forEach(t),B1r=i(D),pT=n(D,"LI",{});var eIe=s(pT);$5e=n(eIe,"STRONG",{});var Awt=s($5e);I1r=r(Awt,"mobilebert"),Awt.forEach(t),N1r=r(eIe," \u2014 "),TH=n(eIe,"A",{href:!0});var Lwt=s(TH);q1r=r(Lwt,"TFMobileBertModel"),Lwt.forEach(t),j1r=r(eIe," (MobileBERT model)"),eIe.forEach(t),D1r=i(D),_T=n(D,"LI",{});var oIe=s(_T);k5e=n(oIe,"STRONG",{});var ywt=s(k5e);G1r=r(ywt,"mpnet"),ywt.forEach(t),O1r=r(oIe," \u2014 "),MH=n(oIe,"A",{href:!0});var xwt=s(MH);V1r=r(xwt,"TFMPNetModel"),xwt.forEach(t),X1r=r(oIe," (MPNet model)"),oIe.forEach(t),z1r=i(D),uT=n(D,"LI",{});var rIe=s(uT);S5e=n(rIe,"STRONG",{});var $wt=s(S5e);W1r=r($wt,"mt5"),$wt.forEach(t),Q1r=r(rIe," \u2014 "),EH=n(rIe,"A",{href:!0});var kwt=s(EH);H1r=r(kwt,"TFMT5Model"),kwt.forEach(t),U1r=r(rIe," (MT5 model)"),rIe.forEach(t),J1r=i(D),bT=n(D,"LI",{});var tIe=s(bT);R5e=n(tIe,"STRONG",{});var Swt=s(R5e);Y1r=r(Swt,"openai-gpt"),Swt.forEach(t),K1r=r(tIe," \u2014 "),CH=n(tIe,"A",{href:!0});var Rwt=s(CH);Z1r=r(Rwt,"TFOpenAIGPTModel"),Rwt.forEach(t),ebr=r(tIe," (OpenAI GPT model)"),tIe.forEach(t),obr=i(D),vT=n(D,"LI",{});var aIe=s(vT);P5e=n(aIe,"STRONG",{});var Pwt=s(P5e);rbr=r(Pwt,"opt"),Pwt.forEach(t),tbr=r(aIe," \u2014 "),wH=n(aIe,"A",{href:!0});var Bwt=s(wH);abr=r(Bwt,"TFOPTModel"),Bwt.forEach(t),nbr=r(aIe," (OPT model)"),aIe.forEach(t),sbr=i(D),FT=n(D,"LI",{});var nIe=s(FT);B5e=n(nIe,"STRONG",{});var Iwt=s(B5e);lbr=r(Iwt,"pegasus"),Iwt.forEach(t),ibr=r(nIe," \u2014 "),AH=n(nIe,"A",{href:!0});var Nwt=s(AH);dbr=r(Nwt,"TFPegasusModel"),Nwt.forEach(t),cbr=r(nIe," (Pegasus model)"),nIe.forEach(t),fbr=i(D),TT=n(D,"LI",{});var sIe=s(TT);I5e=n(sIe,"STRONG",{});var qwt=s(I5e);mbr=r(qwt,"rembert"),qwt.forEach(t),gbr=r(sIe," \u2014 "),LH=n(sIe,"A",{href:!0});var jwt=s(LH);hbr=r(jwt,"TFRemBertModel"),jwt.forEach(t),pbr=r(sIe," (RemBERT model)"),sIe.forEach(t),_br=i(D),MT=n(D,"LI",{});var lIe=s(MT);N5e=n(lIe,"STRONG",{});var Dwt=s(N5e);ubr=r(Dwt,"roberta"),Dwt.forEach(t),bbr=r(lIe," \u2014 "),yH=n(lIe,"A",{href:!0});var Gwt=s(yH);vbr=r(Gwt,"TFRobertaModel"),Gwt.forEach(t),Fbr=r(lIe," (RoBERTa model)"),lIe.forEach(t),Tbr=i(D),ET=n(D,"LI",{});var iIe=s(ET);q5e=n(iIe,"STRONG",{});var Owt=s(q5e);Mbr=r(Owt,"roformer"),Owt.forEach(t),Ebr=r(iIe," \u2014 "),xH=n(iIe,"A",{href:!0});var Vwt=s(xH);Cbr=r(Vwt,"TFRoFormerModel"),Vwt.forEach(t),wbr=r(iIe," (RoFormer model)"),iIe.forEach(t),Abr=i(D),CT=n(D,"LI",{});var dIe=s(CT);j5e=n(dIe,"STRONG",{});var Xwt=s(j5e);Lbr=r(Xwt,"speech_to_text"),Xwt.forEach(t),ybr=r(dIe," \u2014 "),$H=n(dIe,"A",{href:!0});var zwt=s($H);xbr=r(zwt,"TFSpeech2TextModel"),zwt.forEach(t),$br=r(dIe," (Speech2Text model)"),dIe.forEach(t),kbr=i(D),wT=n(D,"LI",{});var cIe=s(wT);D5e=n(cIe,"STRONG",{});var Wwt=s(D5e);Sbr=r(Wwt,"swin"),Wwt.forEach(t),Rbr=r(cIe," \u2014 "),kH=n(cIe,"A",{href:!0});var Qwt=s(kH);Pbr=r(Qwt,"TFSwinModel"),Qwt.forEach(t),Bbr=r(cIe," (Swin Transformer model)"),cIe.forEach(t),Ibr=i(D),AT=n(D,"LI",{});var fIe=s(AT);G5e=n(fIe,"STRONG",{});var Hwt=s(G5e);Nbr=r(Hwt,"t5"),Hwt.forEach(t),qbr=r(fIe," \u2014 "),SH=n(fIe,"A",{href:!0});var Uwt=s(SH);jbr=r(Uwt,"TFT5Model"),Uwt.forEach(t),Dbr=r(fIe," (T5 model)"),fIe.forEach(t),Gbr=i(D),LT=n(D,"LI",{});var mIe=s(LT);O5e=n(mIe,"STRONG",{});var Jwt=s(O5e);Obr=r(Jwt,"tapas"),Jwt.forEach(t),Vbr=r(mIe," \u2014 "),RH=n(mIe,"A",{href:!0});var Ywt=s(RH);Xbr=r(Ywt,"TFTapasModel"),Ywt.forEach(t),zbr=r(mIe," (TAPAS model)"),mIe.forEach(t),Wbr=i(D),yT=n(D,"LI",{});var gIe=s(yT);V5e=n(gIe,"STRONG",{});var Kwt=s(V5e);Qbr=r(Kwt,"transfo-xl"),Kwt.forEach(t),Hbr=r(gIe," \u2014 "),PH=n(gIe,"A",{href:!0});var Zwt=s(PH);Ubr=r(Zwt,"TFTransfoXLModel"),Zwt.forEach(t),Jbr=r(gIe," (Transformer-XL model)"),gIe.forEach(t),Ybr=i(D),xT=n(D,"LI",{});var hIe=s(xT);X5e=n(hIe,"STRONG",{});var eAt=s(X5e);Kbr=r(eAt,"vit"),eAt.forEach(t),Zbr=r(hIe," \u2014 "),BH=n(hIe,"A",{href:!0});var oAt=s(BH);e2r=r(oAt,"TFViTModel"),oAt.forEach(t),o2r=r(hIe," (ViT model)"),hIe.forEach(t),r2r=i(D),$T=n(D,"LI",{});var pIe=s($T);z5e=n(pIe,"STRONG",{});var rAt=s(z5e);t2r=r(rAt,"vit_mae"),rAt.forEach(t),a2r=r(pIe," \u2014 "),IH=n(pIe,"A",{href:!0});var tAt=s(IH);n2r=r(tAt,"TFViTMAEModel"),tAt.forEach(t),s2r=r(pIe," (ViTMAE model)"),pIe.forEach(t),l2r=i(D),kT=n(D,"LI",{});var _Ie=s(kT);W5e=n(_Ie,"STRONG",{});var aAt=s(W5e);i2r=r(aAt,"wav2vec2"),aAt.forEach(t),d2r=r(_Ie," \u2014 "),NH=n(_Ie,"A",{href:!0});var nAt=s(NH);c2r=r(nAt,"TFWav2Vec2Model"),nAt.forEach(t),f2r=r(_Ie," (Wav2Vec2 model)"),_Ie.forEach(t),m2r=i(D),ST=n(D,"LI",{});var uIe=s(ST);Q5e=n(uIe,"STRONG",{});var sAt=s(Q5e);g2r=r(sAt,"xlm"),sAt.forEach(t),h2r=r(uIe," \u2014 "),qH=n(uIe,"A",{href:!0});var lAt=s(qH);p2r=r(lAt,"TFXLMModel"),lAt.forEach(t),_2r=r(uIe," (XLM model)"),uIe.forEach(t),u2r=i(D),RT=n(D,"LI",{});var bIe=s(RT);H5e=n(bIe,"STRONG",{});var iAt=s(H5e);b2r=r(iAt,"xlm-roberta"),iAt.forEach(t),v2r=r(bIe," \u2014 "),jH=n(bIe,"A",{href:!0});var dAt=s(jH);F2r=r(dAt,"TFXLMRobertaModel"),dAt.forEach(t),T2r=r(bIe," (XLM-RoBERTa model)"),bIe.forEach(t),M2r=i(D),PT=n(D,"LI",{});var vIe=s(PT);U5e=n(vIe,"STRONG",{});var cAt=s(U5e);E2r=r(cAt,"xlnet"),cAt.forEach(t),C2r=r(vIe," \u2014 "),DH=n(vIe,"A",{href:!0});var fAt=s(DH);w2r=r(fAt,"TFXLNetModel"),fAt.forEach(t),A2r=r(vIe," (XLNet model)"),vIe.forEach(t),D.forEach(t),L2r=i(Cl),T(BT.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),LOe=i(f),tc=n(f,"H2",{class:!0});var BXe=s(tc);IT=n(BXe,"A",{id:!0,class:!0,href:!0});var mAt=s(IT);J5e=n(mAt,"SPAN",{});var gAt=s(J5e);T(p9.$$.fragment,gAt),gAt.forEach(t),mAt.forEach(t),y2r=i(BXe),Y5e=n(BXe,"SPAN",{});var hAt=s(Y5e);x2r=r(hAt,"TFAutoModelForPreTraining"),hAt.forEach(t),BXe.forEach(t),yOe=i(f),er=n(f,"DIV",{class:!0});var wl=s(er);T(_9.$$.fragment,wl),$2r=i(wl),ac=n(wl,"P",{});var are=s(ac);k2r=r(are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GH=n(are,"A",{href:!0});var pAt=s(GH);S2r=r(pAt,"from_pretrained()"),pAt.forEach(t),R2r=r(are," class method or the "),OH=n(are,"A",{href:!0});var _At=s(OH);P2r=r(_At,"from_config()"),_At.forEach(t),B2r=r(are,` class
method.`),are.forEach(t),I2r=i(wl),u9=n(wl,"P",{});var IXe=s(u9);N2r=r(IXe,"This class cannot be instantiated directly using "),K5e=n(IXe,"CODE",{});var uAt=s(K5e);q2r=r(uAt,"__init__()"),uAt.forEach(t),j2r=r(IXe," (throws an error)."),IXe.forEach(t),D2r=i(wl),St=n(wl,"DIV",{class:!0});var E6=s(St);T(b9.$$.fragment,E6),G2r=i(E6),Z5e=n(E6,"P",{});var bAt=s(Z5e);O2r=r(bAt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),bAt.forEach(t),V2r=i(E6),nc=n(E6,"P",{});var nre=s(nc);X2r=r(nre,`Note:
Loading a model from its configuration file does `),eve=n(nre,"STRONG",{});var vAt=s(eve);z2r=r(vAt,"not"),vAt.forEach(t),W2r=r(nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=n(nre,"A",{href:!0});var FAt=s(VH);Q2r=r(FAt,"from_pretrained()"),FAt.forEach(t),H2r=r(nre," to load the model weights."),nre.forEach(t),U2r=i(E6),T(NT.$$.fragment,E6),E6.forEach(t),J2r=i(wl),yr=n(wl,"DIV",{class:!0});var Al=s(yr);T(v9.$$.fragment,Al),Y2r=i(Al),ove=n(Al,"P",{});var TAt=s(ove);K2r=r(TAt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),TAt.forEach(t),Z2r=i(Al),an=n(Al,"P",{});var C6=s(an);e4r=r(C6,"The model class to instantiate is selected based on the "),rve=n(C6,"CODE",{});var MAt=s(rve);o4r=r(MAt,"model_type"),MAt.forEach(t),r4r=r(C6,` property of the config object (either
passed as an argument or loaded from `),tve=n(C6,"CODE",{});var EAt=s(tve);t4r=r(EAt,"pretrained_model_name_or_path"),EAt.forEach(t),a4r=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=n(C6,"CODE",{});var CAt=s(ave);n4r=r(CAt,"pretrained_model_name_or_path"),CAt.forEach(t),s4r=r(C6,":"),C6.forEach(t),l4r=i(Al),se=n(Al,"UL",{});var le=s(se);qT=n(le,"LI",{});var FIe=s(qT);nve=n(FIe,"STRONG",{});var wAt=s(nve);i4r=r(wAt,"albert"),wAt.forEach(t),d4r=r(FIe," \u2014 "),XH=n(FIe,"A",{href:!0});var AAt=s(XH);c4r=r(AAt,"TFAlbertForPreTraining"),AAt.forEach(t),f4r=r(FIe," (ALBERT model)"),FIe.forEach(t),m4r=i(le),jT=n(le,"LI",{});var TIe=s(jT);sve=n(TIe,"STRONG",{});var LAt=s(sve);g4r=r(LAt,"bart"),LAt.forEach(t),h4r=r(TIe," \u2014 "),zH=n(TIe,"A",{href:!0});var yAt=s(zH);p4r=r(yAt,"TFBartForConditionalGeneration"),yAt.forEach(t),_4r=r(TIe," (BART model)"),TIe.forEach(t),u4r=i(le),DT=n(le,"LI",{});var MIe=s(DT);lve=n(MIe,"STRONG",{});var xAt=s(lve);b4r=r(xAt,"bert"),xAt.forEach(t),v4r=r(MIe," \u2014 "),WH=n(MIe,"A",{href:!0});var $At=s(WH);F4r=r($At,"TFBertForPreTraining"),$At.forEach(t),T4r=r(MIe," (BERT model)"),MIe.forEach(t),M4r=i(le),GT=n(le,"LI",{});var EIe=s(GT);ive=n(EIe,"STRONG",{});var kAt=s(ive);E4r=r(kAt,"camembert"),kAt.forEach(t),C4r=r(EIe," \u2014 "),QH=n(EIe,"A",{href:!0});var SAt=s(QH);w4r=r(SAt,"TFCamembertForMaskedLM"),SAt.forEach(t),A4r=r(EIe," (CamemBERT model)"),EIe.forEach(t),L4r=i(le),OT=n(le,"LI",{});var CIe=s(OT);dve=n(CIe,"STRONG",{});var RAt=s(dve);y4r=r(RAt,"ctrl"),RAt.forEach(t),x4r=r(CIe," \u2014 "),HH=n(CIe,"A",{href:!0});var PAt=s(HH);$4r=r(PAt,"TFCTRLLMHeadModel"),PAt.forEach(t),k4r=r(CIe," (CTRL model)"),CIe.forEach(t),S4r=i(le),VT=n(le,"LI",{});var wIe=s(VT);cve=n(wIe,"STRONG",{});var BAt=s(cve);R4r=r(BAt,"distilbert"),BAt.forEach(t),P4r=r(wIe," \u2014 "),UH=n(wIe,"A",{href:!0});var IAt=s(UH);B4r=r(IAt,"TFDistilBertForMaskedLM"),IAt.forEach(t),I4r=r(wIe," (DistilBERT model)"),wIe.forEach(t),N4r=i(le),XT=n(le,"LI",{});var AIe=s(XT);fve=n(AIe,"STRONG",{});var NAt=s(fve);q4r=r(NAt,"electra"),NAt.forEach(t),j4r=r(AIe," \u2014 "),JH=n(AIe,"A",{href:!0});var qAt=s(JH);D4r=r(qAt,"TFElectraForPreTraining"),qAt.forEach(t),G4r=r(AIe," (ELECTRA model)"),AIe.forEach(t),O4r=i(le),zT=n(le,"LI",{});var LIe=s(zT);mve=n(LIe,"STRONG",{});var jAt=s(mve);V4r=r(jAt,"flaubert"),jAt.forEach(t),X4r=r(LIe," \u2014 "),YH=n(LIe,"A",{href:!0});var DAt=s(YH);z4r=r(DAt,"TFFlaubertWithLMHeadModel"),DAt.forEach(t),W4r=r(LIe," (FlauBERT model)"),LIe.forEach(t),Q4r=i(le),WT=n(le,"LI",{});var yIe=s(WT);gve=n(yIe,"STRONG",{});var GAt=s(gve);H4r=r(GAt,"funnel"),GAt.forEach(t),U4r=r(yIe," \u2014 "),KH=n(yIe,"A",{href:!0});var OAt=s(KH);J4r=r(OAt,"TFFunnelForPreTraining"),OAt.forEach(t),Y4r=r(yIe," (Funnel Transformer model)"),yIe.forEach(t),K4r=i(le),QT=n(le,"LI",{});var xIe=s(QT);hve=n(xIe,"STRONG",{});var VAt=s(hve);Z4r=r(VAt,"gpt2"),VAt.forEach(t),e5r=r(xIe," \u2014 "),ZH=n(xIe,"A",{href:!0});var XAt=s(ZH);o5r=r(XAt,"TFGPT2LMHeadModel"),XAt.forEach(t),r5r=r(xIe," (OpenAI GPT-2 model)"),xIe.forEach(t),t5r=i(le),HT=n(le,"LI",{});var $Ie=s(HT);pve=n($Ie,"STRONG",{});var zAt=s(pve);a5r=r(zAt,"layoutlm"),zAt.forEach(t),n5r=r($Ie," \u2014 "),eU=n($Ie,"A",{href:!0});var WAt=s(eU);s5r=r(WAt,"TFLayoutLMForMaskedLM"),WAt.forEach(t),l5r=r($Ie," (LayoutLM model)"),$Ie.forEach(t),i5r=i(le),UT=n(le,"LI",{});var kIe=s(UT);_ve=n(kIe,"STRONG",{});var QAt=s(_ve);d5r=r(QAt,"lxmert"),QAt.forEach(t),c5r=r(kIe," \u2014 "),oU=n(kIe,"A",{href:!0});var HAt=s(oU);f5r=r(HAt,"TFLxmertForPreTraining"),HAt.forEach(t),m5r=r(kIe," (LXMERT model)"),kIe.forEach(t),g5r=i(le),JT=n(le,"LI",{});var SIe=s(JT);uve=n(SIe,"STRONG",{});var UAt=s(uve);h5r=r(UAt,"mobilebert"),UAt.forEach(t),p5r=r(SIe," \u2014 "),rU=n(SIe,"A",{href:!0});var JAt=s(rU);_5r=r(JAt,"TFMobileBertForPreTraining"),JAt.forEach(t),u5r=r(SIe," (MobileBERT model)"),SIe.forEach(t),b5r=i(le),YT=n(le,"LI",{});var RIe=s(YT);bve=n(RIe,"STRONG",{});var YAt=s(bve);v5r=r(YAt,"mpnet"),YAt.forEach(t),F5r=r(RIe," \u2014 "),tU=n(RIe,"A",{href:!0});var KAt=s(tU);T5r=r(KAt,"TFMPNetForMaskedLM"),KAt.forEach(t),M5r=r(RIe," (MPNet model)"),RIe.forEach(t),E5r=i(le),KT=n(le,"LI",{});var PIe=s(KT);vve=n(PIe,"STRONG",{});var ZAt=s(vve);C5r=r(ZAt,"openai-gpt"),ZAt.forEach(t),w5r=r(PIe," \u2014 "),aU=n(PIe,"A",{href:!0});var e6t=s(aU);A5r=r(e6t,"TFOpenAIGPTLMHeadModel"),e6t.forEach(t),L5r=r(PIe," (OpenAI GPT model)"),PIe.forEach(t),y5r=i(le),ZT=n(le,"LI",{});var BIe=s(ZT);Fve=n(BIe,"STRONG",{});var o6t=s(Fve);x5r=r(o6t,"roberta"),o6t.forEach(t),$5r=r(BIe," \u2014 "),nU=n(BIe,"A",{href:!0});var r6t=s(nU);k5r=r(r6t,"TFRobertaForMaskedLM"),r6t.forEach(t),S5r=r(BIe," (RoBERTa model)"),BIe.forEach(t),R5r=i(le),e7=n(le,"LI",{});var IIe=s(e7);Tve=n(IIe,"STRONG",{});var t6t=s(Tve);P5r=r(t6t,"t5"),t6t.forEach(t),B5r=r(IIe," \u2014 "),sU=n(IIe,"A",{href:!0});var a6t=s(sU);I5r=r(a6t,"TFT5ForConditionalGeneration"),a6t.forEach(t),N5r=r(IIe," (T5 model)"),IIe.forEach(t),q5r=i(le),o7=n(le,"LI",{});var NIe=s(o7);Mve=n(NIe,"STRONG",{});var n6t=s(Mve);j5r=r(n6t,"tapas"),n6t.forEach(t),D5r=r(NIe," \u2014 "),lU=n(NIe,"A",{href:!0});var s6t=s(lU);G5r=r(s6t,"TFTapasForMaskedLM"),s6t.forEach(t),O5r=r(NIe," (TAPAS model)"),NIe.forEach(t),V5r=i(le),r7=n(le,"LI",{});var qIe=s(r7);Eve=n(qIe,"STRONG",{});var l6t=s(Eve);X5r=r(l6t,"transfo-xl"),l6t.forEach(t),z5r=r(qIe," \u2014 "),iU=n(qIe,"A",{href:!0});var i6t=s(iU);W5r=r(i6t,"TFTransfoXLLMHeadModel"),i6t.forEach(t),Q5r=r(qIe," (Transformer-XL model)"),qIe.forEach(t),H5r=i(le),t7=n(le,"LI",{});var jIe=s(t7);Cve=n(jIe,"STRONG",{});var d6t=s(Cve);U5r=r(d6t,"vit_mae"),d6t.forEach(t),J5r=r(jIe," \u2014 "),dU=n(jIe,"A",{href:!0});var c6t=s(dU);Y5r=r(c6t,"TFViTMAEForPreTraining"),c6t.forEach(t),K5r=r(jIe," (ViTMAE model)"),jIe.forEach(t),Z5r=i(le),a7=n(le,"LI",{});var DIe=s(a7);wve=n(DIe,"STRONG",{});var f6t=s(wve);evr=r(f6t,"xlm"),f6t.forEach(t),ovr=r(DIe," \u2014 "),cU=n(DIe,"A",{href:!0});var m6t=s(cU);rvr=r(m6t,"TFXLMWithLMHeadModel"),m6t.forEach(t),tvr=r(DIe," (XLM model)"),DIe.forEach(t),avr=i(le),n7=n(le,"LI",{});var GIe=s(n7);Ave=n(GIe,"STRONG",{});var g6t=s(Ave);nvr=r(g6t,"xlm-roberta"),g6t.forEach(t),svr=r(GIe," \u2014 "),fU=n(GIe,"A",{href:!0});var h6t=s(fU);lvr=r(h6t,"TFXLMRobertaForMaskedLM"),h6t.forEach(t),ivr=r(GIe," (XLM-RoBERTa model)"),GIe.forEach(t),dvr=i(le),s7=n(le,"LI",{});var OIe=s(s7);Lve=n(OIe,"STRONG",{});var p6t=s(Lve);cvr=r(p6t,"xlnet"),p6t.forEach(t),fvr=r(OIe," \u2014 "),mU=n(OIe,"A",{href:!0});var _6t=s(mU);mvr=r(_6t,"TFXLNetLMHeadModel"),_6t.forEach(t),gvr=r(OIe," (XLNet model)"),OIe.forEach(t),le.forEach(t),hvr=i(Al),T(l7.$$.fragment,Al),Al.forEach(t),wl.forEach(t),xOe=i(f),sc=n(f,"H2",{class:!0});var NXe=s(sc);i7=n(NXe,"A",{id:!0,class:!0,href:!0});var u6t=s(i7);yve=n(u6t,"SPAN",{});var b6t=s(yve);T(F9.$$.fragment,b6t),b6t.forEach(t),u6t.forEach(t),pvr=i(NXe),xve=n(NXe,"SPAN",{});var v6t=s(xve);_vr=r(v6t,"TFAutoModelForCausalLM"),v6t.forEach(t),NXe.forEach(t),$Oe=i(f),or=n(f,"DIV",{class:!0});var Ll=s(or);T(T9.$$.fragment,Ll),uvr=i(Ll),lc=n(Ll,"P",{});var sre=s(lc);bvr=r(sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gU=n(sre,"A",{href:!0});var F6t=s(gU);vvr=r(F6t,"from_pretrained()"),F6t.forEach(t),Fvr=r(sre," class method or the "),hU=n(sre,"A",{href:!0});var T6t=s(hU);Tvr=r(T6t,"from_config()"),T6t.forEach(t),Mvr=r(sre,` class
method.`),sre.forEach(t),Evr=i(Ll),M9=n(Ll,"P",{});var qXe=s(M9);Cvr=r(qXe,"This class cannot be instantiated directly using "),$ve=n(qXe,"CODE",{});var M6t=s($ve);wvr=r(M6t,"__init__()"),M6t.forEach(t),Avr=r(qXe," (throws an error)."),qXe.forEach(t),Lvr=i(Ll),Rt=n(Ll,"DIV",{class:!0});var w6=s(Rt);T(E9.$$.fragment,w6),yvr=i(w6),kve=n(w6,"P",{});var E6t=s(kve);xvr=r(E6t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),E6t.forEach(t),$vr=i(w6),ic=n(w6,"P",{});var lre=s(ic);kvr=r(lre,`Note:
Loading a model from its configuration file does `),Sve=n(lre,"STRONG",{});var C6t=s(Sve);Svr=r(C6t,"not"),C6t.forEach(t),Rvr=r(lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(lre,"A",{href:!0});var w6t=s(pU);Pvr=r(w6t,"from_pretrained()"),w6t.forEach(t),Bvr=r(lre," to load the model weights."),lre.forEach(t),Ivr=i(w6),T(d7.$$.fragment,w6),w6.forEach(t),Nvr=i(Ll),xr=n(Ll,"DIV",{class:!0});var yl=s(xr);T(C9.$$.fragment,yl),qvr=i(yl),Rve=n(yl,"P",{});var A6t=s(Rve);jvr=r(A6t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),A6t.forEach(t),Dvr=i(yl),nn=n(yl,"P",{});var A6=s(nn);Gvr=r(A6,"The model class to instantiate is selected based on the "),Pve=n(A6,"CODE",{});var L6t=s(Pve);Ovr=r(L6t,"model_type"),L6t.forEach(t),Vvr=r(A6,` property of the config object (either
passed as an argument or loaded from `),Bve=n(A6,"CODE",{});var y6t=s(Bve);Xvr=r(y6t,"pretrained_model_name_or_path"),y6t.forEach(t),zvr=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=n(A6,"CODE",{});var x6t=s(Ive);Wvr=r(x6t,"pretrained_model_name_or_path"),x6t.forEach(t),Qvr=r(A6,":"),A6.forEach(t),Hvr=i(yl),Me=n(yl,"UL",{});var Ce=s(Me);c7=n(Ce,"LI",{});var VIe=s(c7);Nve=n(VIe,"STRONG",{});var $6t=s(Nve);Uvr=r($6t,"bert"),$6t.forEach(t),Jvr=r(VIe," \u2014 "),_U=n(VIe,"A",{href:!0});var k6t=s(_U);Yvr=r(k6t,"TFBertLMHeadModel"),k6t.forEach(t),Kvr=r(VIe," (BERT model)"),VIe.forEach(t),Zvr=i(Ce),f7=n(Ce,"LI",{});var XIe=s(f7);qve=n(XIe,"STRONG",{});var S6t=s(qve);e3r=r(S6t,"camembert"),S6t.forEach(t),o3r=r(XIe," \u2014 "),uU=n(XIe,"A",{href:!0});var R6t=s(uU);r3r=r(R6t,"TFCamembertForCausalLM"),R6t.forEach(t),t3r=r(XIe," (CamemBERT model)"),XIe.forEach(t),a3r=i(Ce),m7=n(Ce,"LI",{});var zIe=s(m7);jve=n(zIe,"STRONG",{});var P6t=s(jve);n3r=r(P6t,"ctrl"),P6t.forEach(t),s3r=r(zIe," \u2014 "),bU=n(zIe,"A",{href:!0});var B6t=s(bU);l3r=r(B6t,"TFCTRLLMHeadModel"),B6t.forEach(t),i3r=r(zIe," (CTRL model)"),zIe.forEach(t),d3r=i(Ce),g7=n(Ce,"LI",{});var WIe=s(g7);Dve=n(WIe,"STRONG",{});var I6t=s(Dve);c3r=r(I6t,"gpt2"),I6t.forEach(t),f3r=r(WIe," \u2014 "),vU=n(WIe,"A",{href:!0});var N6t=s(vU);m3r=r(N6t,"TFGPT2LMHeadModel"),N6t.forEach(t),g3r=r(WIe," (OpenAI GPT-2 model)"),WIe.forEach(t),h3r=i(Ce),h7=n(Ce,"LI",{});var QIe=s(h7);Gve=n(QIe,"STRONG",{});var q6t=s(Gve);p3r=r(q6t,"gptj"),q6t.forEach(t),_3r=r(QIe," \u2014 "),FU=n(QIe,"A",{href:!0});var j6t=s(FU);u3r=r(j6t,"TFGPTJForCausalLM"),j6t.forEach(t),b3r=r(QIe," (GPT-J model)"),QIe.forEach(t),v3r=i(Ce),p7=n(Ce,"LI",{});var HIe=s(p7);Ove=n(HIe,"STRONG",{});var D6t=s(Ove);F3r=r(D6t,"openai-gpt"),D6t.forEach(t),T3r=r(HIe," \u2014 "),TU=n(HIe,"A",{href:!0});var G6t=s(TU);M3r=r(G6t,"TFOpenAIGPTLMHeadModel"),G6t.forEach(t),E3r=r(HIe," (OpenAI GPT model)"),HIe.forEach(t),C3r=i(Ce),_7=n(Ce,"LI",{});var UIe=s(_7);Vve=n(UIe,"STRONG",{});var O6t=s(Vve);w3r=r(O6t,"opt"),O6t.forEach(t),A3r=r(UIe," \u2014 "),MU=n(UIe,"A",{href:!0});var V6t=s(MU);L3r=r(V6t,"TFOPTForCausalLM"),V6t.forEach(t),y3r=r(UIe," (OPT model)"),UIe.forEach(t),x3r=i(Ce),u7=n(Ce,"LI",{});var JIe=s(u7);Xve=n(JIe,"STRONG",{});var X6t=s(Xve);$3r=r(X6t,"rembert"),X6t.forEach(t),k3r=r(JIe," \u2014 "),EU=n(JIe,"A",{href:!0});var z6t=s(EU);S3r=r(z6t,"TFRemBertForCausalLM"),z6t.forEach(t),R3r=r(JIe," (RemBERT model)"),JIe.forEach(t),P3r=i(Ce),b7=n(Ce,"LI",{});var YIe=s(b7);zve=n(YIe,"STRONG",{});var W6t=s(zve);B3r=r(W6t,"roberta"),W6t.forEach(t),I3r=r(YIe," \u2014 "),CU=n(YIe,"A",{href:!0});var Q6t=s(CU);N3r=r(Q6t,"TFRobertaForCausalLM"),Q6t.forEach(t),q3r=r(YIe," (RoBERTa model)"),YIe.forEach(t),j3r=i(Ce),v7=n(Ce,"LI",{});var KIe=s(v7);Wve=n(KIe,"STRONG",{});var H6t=s(Wve);D3r=r(H6t,"roformer"),H6t.forEach(t),G3r=r(KIe," \u2014 "),wU=n(KIe,"A",{href:!0});var U6t=s(wU);O3r=r(U6t,"TFRoFormerForCausalLM"),U6t.forEach(t),V3r=r(KIe," (RoFormer model)"),KIe.forEach(t),X3r=i(Ce),F7=n(Ce,"LI",{});var ZIe=s(F7);Qve=n(ZIe,"STRONG",{});var J6t=s(Qve);z3r=r(J6t,"transfo-xl"),J6t.forEach(t),W3r=r(ZIe," \u2014 "),AU=n(ZIe,"A",{href:!0});var Y6t=s(AU);Q3r=r(Y6t,"TFTransfoXLLMHeadModel"),Y6t.forEach(t),H3r=r(ZIe," (Transformer-XL model)"),ZIe.forEach(t),U3r=i(Ce),T7=n(Ce,"LI",{});var eNe=s(T7);Hve=n(eNe,"STRONG",{});var K6t=s(Hve);J3r=r(K6t,"xlm"),K6t.forEach(t),Y3r=r(eNe," \u2014 "),LU=n(eNe,"A",{href:!0});var Z6t=s(LU);K3r=r(Z6t,"TFXLMWithLMHeadModel"),Z6t.forEach(t),Z3r=r(eNe," (XLM model)"),eNe.forEach(t),eFr=i(Ce),M7=n(Ce,"LI",{});var oNe=s(M7);Uve=n(oNe,"STRONG",{});var eLt=s(Uve);oFr=r(eLt,"xlnet"),eLt.forEach(t),rFr=r(oNe," \u2014 "),yU=n(oNe,"A",{href:!0});var oLt=s(yU);tFr=r(oLt,"TFXLNetLMHeadModel"),oLt.forEach(t),aFr=r(oNe," (XLNet model)"),oNe.forEach(t),Ce.forEach(t),nFr=i(yl),T(E7.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),kOe=i(f),dc=n(f,"H2",{class:!0});var jXe=s(dc);C7=n(jXe,"A",{id:!0,class:!0,href:!0});var rLt=s(C7);Jve=n(rLt,"SPAN",{});var tLt=s(Jve);T(w9.$$.fragment,tLt),tLt.forEach(t),rLt.forEach(t),sFr=i(jXe),Yve=n(jXe,"SPAN",{});var aLt=s(Yve);lFr=r(aLt,"TFAutoModelForImageClassification"),aLt.forEach(t),jXe.forEach(t),SOe=i(f),rr=n(f,"DIV",{class:!0});var xl=s(rr);T(A9.$$.fragment,xl),iFr=i(xl),cc=n(xl,"P",{});var ire=s(cc);dFr=r(ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xU=n(ire,"A",{href:!0});var nLt=s(xU);cFr=r(nLt,"from_pretrained()"),nLt.forEach(t),fFr=r(ire," class method or the "),$U=n(ire,"A",{href:!0});var sLt=s($U);mFr=r(sLt,"from_config()"),sLt.forEach(t),gFr=r(ire,` class
method.`),ire.forEach(t),hFr=i(xl),L9=n(xl,"P",{});var DXe=s(L9);pFr=r(DXe,"This class cannot be instantiated directly using "),Kve=n(DXe,"CODE",{});var lLt=s(Kve);_Fr=r(lLt,"__init__()"),lLt.forEach(t),uFr=r(DXe," (throws an error)."),DXe.forEach(t),bFr=i(xl),Pt=n(xl,"DIV",{class:!0});var L6=s(Pt);T(y9.$$.fragment,L6),vFr=i(L6),Zve=n(L6,"P",{});var iLt=s(Zve);FFr=r(iLt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iLt.forEach(t),TFr=i(L6),fc=n(L6,"P",{});var dre=s(fc);MFr=r(dre,`Note:
Loading a model from its configuration file does `),e3e=n(dre,"STRONG",{});var dLt=s(e3e);EFr=r(dLt,"not"),dLt.forEach(t),CFr=r(dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=n(dre,"A",{href:!0});var cLt=s(kU);wFr=r(cLt,"from_pretrained()"),cLt.forEach(t),AFr=r(dre," to load the model weights."),dre.forEach(t),LFr=i(L6),T(w7.$$.fragment,L6),L6.forEach(t),yFr=i(xl),$r=n(xl,"DIV",{class:!0});var $l=s($r);T(x9.$$.fragment,$l),xFr=i($l),o3e=n($l,"P",{});var fLt=s(o3e);$Fr=r(fLt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fLt.forEach(t),kFr=i($l),sn=n($l,"P",{});var y6=s(sn);SFr=r(y6,"The model class to instantiate is selected based on the "),r3e=n(y6,"CODE",{});var mLt=s(r3e);RFr=r(mLt,"model_type"),mLt.forEach(t),PFr=r(y6,` property of the config object (either
passed as an argument or loaded from `),t3e=n(y6,"CODE",{});var gLt=s(t3e);BFr=r(gLt,"pretrained_model_name_or_path"),gLt.forEach(t),IFr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a3e=n(y6,"CODE",{});var hLt=s(a3e);NFr=r(hLt,"pretrained_model_name_or_path"),hLt.forEach(t),qFr=r(y6,":"),y6.forEach(t),jFr=i($l),ln=n($l,"UL",{});var x6=s(ln);A7=n(x6,"LI",{});var rNe=s(A7);n3e=n(rNe,"STRONG",{});var pLt=s(n3e);DFr=r(pLt,"convnext"),pLt.forEach(t),GFr=r(rNe," \u2014 "),SU=n(rNe,"A",{href:!0});var _Lt=s(SU);OFr=r(_Lt,"TFConvNextForImageClassification"),_Lt.forEach(t),VFr=r(rNe," (ConvNeXT model)"),rNe.forEach(t),XFr=i(x6),L7=n(x6,"LI",{});var tNe=s(L7);s3e=n(tNe,"STRONG",{});var uLt=s(s3e);zFr=r(uLt,"data2vec-vision"),uLt.forEach(t),WFr=r(tNe," \u2014 "),RU=n(tNe,"A",{href:!0});var bLt=s(RU);QFr=r(bLt,"TFData2VecVisionForImageClassification"),bLt.forEach(t),HFr=r(tNe," (Data2VecVision model)"),tNe.forEach(t),UFr=i(x6),y7=n(x6,"LI",{});var aNe=s(y7);l3e=n(aNe,"STRONG",{});var vLt=s(l3e);JFr=r(vLt,"swin"),vLt.forEach(t),YFr=r(aNe," \u2014 "),PU=n(aNe,"A",{href:!0});var FLt=s(PU);KFr=r(FLt,"TFSwinForImageClassification"),FLt.forEach(t),ZFr=r(aNe," (Swin Transformer model)"),aNe.forEach(t),eTr=i(x6),x7=n(x6,"LI",{});var nNe=s(x7);i3e=n(nNe,"STRONG",{});var TLt=s(i3e);oTr=r(TLt,"vit"),TLt.forEach(t),rTr=r(nNe," \u2014 "),BU=n(nNe,"A",{href:!0});var MLt=s(BU);tTr=r(MLt,"TFViTForImageClassification"),MLt.forEach(t),aTr=r(nNe," (ViT model)"),nNe.forEach(t),x6.forEach(t),nTr=i($l),T($7.$$.fragment,$l),$l.forEach(t),xl.forEach(t),ROe=i(f),mc=n(f,"H2",{class:!0});var GXe=s(mc);k7=n(GXe,"A",{id:!0,class:!0,href:!0});var ELt=s(k7);d3e=n(ELt,"SPAN",{});var CLt=s(d3e);T($9.$$.fragment,CLt),CLt.forEach(t),ELt.forEach(t),sTr=i(GXe),c3e=n(GXe,"SPAN",{});var wLt=s(c3e);lTr=r(wLt,"TFAutoModelForMaskedLM"),wLt.forEach(t),GXe.forEach(t),POe=i(f),tr=n(f,"DIV",{class:!0});var kl=s(tr);T(k9.$$.fragment,kl),iTr=i(kl),gc=n(kl,"P",{});var cre=s(gc);dTr=r(cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IU=n(cre,"A",{href:!0});var ALt=s(IU);cTr=r(ALt,"from_pretrained()"),ALt.forEach(t),fTr=r(cre," class method or the "),NU=n(cre,"A",{href:!0});var LLt=s(NU);mTr=r(LLt,"from_config()"),LLt.forEach(t),gTr=r(cre,` class
method.`),cre.forEach(t),hTr=i(kl),S9=n(kl,"P",{});var OXe=s(S9);pTr=r(OXe,"This class cannot be instantiated directly using "),f3e=n(OXe,"CODE",{});var yLt=s(f3e);_Tr=r(yLt,"__init__()"),yLt.forEach(t),uTr=r(OXe," (throws an error)."),OXe.forEach(t),bTr=i(kl),Bt=n(kl,"DIV",{class:!0});var $6=s(Bt);T(R9.$$.fragment,$6),vTr=i($6),m3e=n($6,"P",{});var xLt=s(m3e);FTr=r(xLt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xLt.forEach(t),TTr=i($6),hc=n($6,"P",{});var fre=s(hc);MTr=r(fre,`Note:
Loading a model from its configuration file does `),g3e=n(fre,"STRONG",{});var $Lt=s(g3e);ETr=r($Lt,"not"),$Lt.forEach(t),CTr=r(fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=n(fre,"A",{href:!0});var kLt=s(qU);wTr=r(kLt,"from_pretrained()"),kLt.forEach(t),ATr=r(fre," to load the model weights."),fre.forEach(t),LTr=i($6),T(S7.$$.fragment,$6),$6.forEach(t),yTr=i(kl),kr=n(kl,"DIV",{class:!0});var Sl=s(kr);T(P9.$$.fragment,Sl),xTr=i(Sl),h3e=n(Sl,"P",{});var SLt=s(h3e);$Tr=r(SLt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),SLt.forEach(t),kTr=i(Sl),dn=n(Sl,"P",{});var k6=s(dn);STr=r(k6,"The model class to instantiate is selected based on the "),p3e=n(k6,"CODE",{});var RLt=s(p3e);RTr=r(RLt,"model_type"),RLt.forEach(t),PTr=r(k6,` property of the config object (either
passed as an argument or loaded from `),_3e=n(k6,"CODE",{});var PLt=s(_3e);BTr=r(PLt,"pretrained_model_name_or_path"),PLt.forEach(t),ITr=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u3e=n(k6,"CODE",{});var BLt=s(u3e);NTr=r(BLt,"pretrained_model_name_or_path"),BLt.forEach(t),qTr=r(k6,":"),k6.forEach(t),jTr=i(Sl),ie=n(Sl,"UL",{});var fe=s(ie);R7=n(fe,"LI",{});var sNe=s(R7);b3e=n(sNe,"STRONG",{});var ILt=s(b3e);DTr=r(ILt,"albert"),ILt.forEach(t),GTr=r(sNe," \u2014 "),jU=n(sNe,"A",{href:!0});var NLt=s(jU);OTr=r(NLt,"TFAlbertForMaskedLM"),NLt.forEach(t),VTr=r(sNe," (ALBERT model)"),sNe.forEach(t),XTr=i(fe),P7=n(fe,"LI",{});var lNe=s(P7);v3e=n(lNe,"STRONG",{});var qLt=s(v3e);zTr=r(qLt,"bert"),qLt.forEach(t),WTr=r(lNe," \u2014 "),DU=n(lNe,"A",{href:!0});var jLt=s(DU);QTr=r(jLt,"TFBertForMaskedLM"),jLt.forEach(t),HTr=r(lNe," (BERT model)"),lNe.forEach(t),UTr=i(fe),B7=n(fe,"LI",{});var iNe=s(B7);F3e=n(iNe,"STRONG",{});var DLt=s(F3e);JTr=r(DLt,"camembert"),DLt.forEach(t),YTr=r(iNe," \u2014 "),GU=n(iNe,"A",{href:!0});var GLt=s(GU);KTr=r(GLt,"TFCamembertForMaskedLM"),GLt.forEach(t),ZTr=r(iNe," (CamemBERT model)"),iNe.forEach(t),e7r=i(fe),I7=n(fe,"LI",{});var dNe=s(I7);T3e=n(dNe,"STRONG",{});var OLt=s(T3e);o7r=r(OLt,"convbert"),OLt.forEach(t),r7r=r(dNe," \u2014 "),OU=n(dNe,"A",{href:!0});var VLt=s(OU);t7r=r(VLt,"TFConvBertForMaskedLM"),VLt.forEach(t),a7r=r(dNe," (ConvBERT model)"),dNe.forEach(t),n7r=i(fe),N7=n(fe,"LI",{});var cNe=s(N7);M3e=n(cNe,"STRONG",{});var XLt=s(M3e);s7r=r(XLt,"deberta"),XLt.forEach(t),l7r=r(cNe," \u2014 "),VU=n(cNe,"A",{href:!0});var zLt=s(VU);i7r=r(zLt,"TFDebertaForMaskedLM"),zLt.forEach(t),d7r=r(cNe," (DeBERTa model)"),cNe.forEach(t),c7r=i(fe),q7=n(fe,"LI",{});var fNe=s(q7);E3e=n(fNe,"STRONG",{});var WLt=s(E3e);f7r=r(WLt,"deberta-v2"),WLt.forEach(t),m7r=r(fNe," \u2014 "),XU=n(fNe,"A",{href:!0});var QLt=s(XU);g7r=r(QLt,"TFDebertaV2ForMaskedLM"),QLt.forEach(t),h7r=r(fNe," (DeBERTa-v2 model)"),fNe.forEach(t),p7r=i(fe),j7=n(fe,"LI",{});var mNe=s(j7);C3e=n(mNe,"STRONG",{});var HLt=s(C3e);_7r=r(HLt,"distilbert"),HLt.forEach(t),u7r=r(mNe," \u2014 "),zU=n(mNe,"A",{href:!0});var ULt=s(zU);b7r=r(ULt,"TFDistilBertForMaskedLM"),ULt.forEach(t),v7r=r(mNe," (DistilBERT model)"),mNe.forEach(t),F7r=i(fe),D7=n(fe,"LI",{});var gNe=s(D7);w3e=n(gNe,"STRONG",{});var JLt=s(w3e);T7r=r(JLt,"electra"),JLt.forEach(t),M7r=r(gNe," \u2014 "),WU=n(gNe,"A",{href:!0});var YLt=s(WU);E7r=r(YLt,"TFElectraForMaskedLM"),YLt.forEach(t),C7r=r(gNe," (ELECTRA model)"),gNe.forEach(t),w7r=i(fe),G7=n(fe,"LI",{});var hNe=s(G7);A3e=n(hNe,"STRONG",{});var KLt=s(A3e);A7r=r(KLt,"flaubert"),KLt.forEach(t),L7r=r(hNe," \u2014 "),QU=n(hNe,"A",{href:!0});var ZLt=s(QU);y7r=r(ZLt,"TFFlaubertWithLMHeadModel"),ZLt.forEach(t),x7r=r(hNe," (FlauBERT model)"),hNe.forEach(t),$7r=i(fe),O7=n(fe,"LI",{});var pNe=s(O7);L3e=n(pNe,"STRONG",{});var eyt=s(L3e);k7r=r(eyt,"funnel"),eyt.forEach(t),S7r=r(pNe," \u2014 "),HU=n(pNe,"A",{href:!0});var oyt=s(HU);R7r=r(oyt,"TFFunnelForMaskedLM"),oyt.forEach(t),P7r=r(pNe," (Funnel Transformer model)"),pNe.forEach(t),B7r=i(fe),V7=n(fe,"LI",{});var _Ne=s(V7);y3e=n(_Ne,"STRONG",{});var ryt=s(y3e);I7r=r(ryt,"layoutlm"),ryt.forEach(t),N7r=r(_Ne," \u2014 "),UU=n(_Ne,"A",{href:!0});var tyt=s(UU);q7r=r(tyt,"TFLayoutLMForMaskedLM"),tyt.forEach(t),j7r=r(_Ne," (LayoutLM model)"),_Ne.forEach(t),D7r=i(fe),X7=n(fe,"LI",{});var uNe=s(X7);x3e=n(uNe,"STRONG",{});var ayt=s(x3e);G7r=r(ayt,"longformer"),ayt.forEach(t),O7r=r(uNe," \u2014 "),JU=n(uNe,"A",{href:!0});var nyt=s(JU);V7r=r(nyt,"TFLongformerForMaskedLM"),nyt.forEach(t),X7r=r(uNe," (Longformer model)"),uNe.forEach(t),z7r=i(fe),z7=n(fe,"LI",{});var bNe=s(z7);$3e=n(bNe,"STRONG",{});var syt=s($3e);W7r=r(syt,"mobilebert"),syt.forEach(t),Q7r=r(bNe," \u2014 "),YU=n(bNe,"A",{href:!0});var lyt=s(YU);H7r=r(lyt,"TFMobileBertForMaskedLM"),lyt.forEach(t),U7r=r(bNe," (MobileBERT model)"),bNe.forEach(t),J7r=i(fe),W7=n(fe,"LI",{});var vNe=s(W7);k3e=n(vNe,"STRONG",{});var iyt=s(k3e);Y7r=r(iyt,"mpnet"),iyt.forEach(t),K7r=r(vNe," \u2014 "),KU=n(vNe,"A",{href:!0});var dyt=s(KU);Z7r=r(dyt,"TFMPNetForMaskedLM"),dyt.forEach(t),eMr=r(vNe," (MPNet model)"),vNe.forEach(t),oMr=i(fe),Q7=n(fe,"LI",{});var FNe=s(Q7);S3e=n(FNe,"STRONG",{});var cyt=s(S3e);rMr=r(cyt,"rembert"),cyt.forEach(t),tMr=r(FNe," \u2014 "),ZU=n(FNe,"A",{href:!0});var fyt=s(ZU);aMr=r(fyt,"TFRemBertForMaskedLM"),fyt.forEach(t),nMr=r(FNe," (RemBERT model)"),FNe.forEach(t),sMr=i(fe),H7=n(fe,"LI",{});var TNe=s(H7);R3e=n(TNe,"STRONG",{});var myt=s(R3e);lMr=r(myt,"roberta"),myt.forEach(t),iMr=r(TNe," \u2014 "),eJ=n(TNe,"A",{href:!0});var gyt=s(eJ);dMr=r(gyt,"TFRobertaForMaskedLM"),gyt.forEach(t),cMr=r(TNe," (RoBERTa model)"),TNe.forEach(t),fMr=i(fe),U7=n(fe,"LI",{});var MNe=s(U7);P3e=n(MNe,"STRONG",{});var hyt=s(P3e);mMr=r(hyt,"roformer"),hyt.forEach(t),gMr=r(MNe," \u2014 "),oJ=n(MNe,"A",{href:!0});var pyt=s(oJ);hMr=r(pyt,"TFRoFormerForMaskedLM"),pyt.forEach(t),pMr=r(MNe," (RoFormer model)"),MNe.forEach(t),_Mr=i(fe),J7=n(fe,"LI",{});var ENe=s(J7);B3e=n(ENe,"STRONG",{});var _yt=s(B3e);uMr=r(_yt,"tapas"),_yt.forEach(t),bMr=r(ENe," \u2014 "),rJ=n(ENe,"A",{href:!0});var uyt=s(rJ);vMr=r(uyt,"TFTapasForMaskedLM"),uyt.forEach(t),FMr=r(ENe," (TAPAS model)"),ENe.forEach(t),TMr=i(fe),Y7=n(fe,"LI",{});var CNe=s(Y7);I3e=n(CNe,"STRONG",{});var byt=s(I3e);MMr=r(byt,"xlm"),byt.forEach(t),EMr=r(CNe," \u2014 "),tJ=n(CNe,"A",{href:!0});var vyt=s(tJ);CMr=r(vyt,"TFXLMWithLMHeadModel"),vyt.forEach(t),wMr=r(CNe," (XLM model)"),CNe.forEach(t),AMr=i(fe),K7=n(fe,"LI",{});var wNe=s(K7);N3e=n(wNe,"STRONG",{});var Fyt=s(N3e);LMr=r(Fyt,"xlm-roberta"),Fyt.forEach(t),yMr=r(wNe," \u2014 "),aJ=n(wNe,"A",{href:!0});var Tyt=s(aJ);xMr=r(Tyt,"TFXLMRobertaForMaskedLM"),Tyt.forEach(t),$Mr=r(wNe," (XLM-RoBERTa model)"),wNe.forEach(t),fe.forEach(t),kMr=i(Sl),T(Z7.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),BOe=i(f),pc=n(f,"H2",{class:!0});var VXe=s(pc);eM=n(VXe,"A",{id:!0,class:!0,href:!0});var Myt=s(eM);q3e=n(Myt,"SPAN",{});var Eyt=s(q3e);T(B9.$$.fragment,Eyt),Eyt.forEach(t),Myt.forEach(t),SMr=i(VXe),j3e=n(VXe,"SPAN",{});var Cyt=s(j3e);RMr=r(Cyt,"TFAutoModelForSeq2SeqLM"),Cyt.forEach(t),VXe.forEach(t),IOe=i(f),ar=n(f,"DIV",{class:!0});var Rl=s(ar);T(I9.$$.fragment,Rl),PMr=i(Rl),_c=n(Rl,"P",{});var mre=s(_c);BMr=r(mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nJ=n(mre,"A",{href:!0});var wyt=s(nJ);IMr=r(wyt,"from_pretrained()"),wyt.forEach(t),NMr=r(mre," class method or the "),sJ=n(mre,"A",{href:!0});var Ayt=s(sJ);qMr=r(Ayt,"from_config()"),Ayt.forEach(t),jMr=r(mre,` class
method.`),mre.forEach(t),DMr=i(Rl),N9=n(Rl,"P",{});var XXe=s(N9);GMr=r(XXe,"This class cannot be instantiated directly using "),D3e=n(XXe,"CODE",{});var Lyt=s(D3e);OMr=r(Lyt,"__init__()"),Lyt.forEach(t),VMr=r(XXe," (throws an error)."),XXe.forEach(t),XMr=i(Rl),It=n(Rl,"DIV",{class:!0});var S6=s(It);T(q9.$$.fragment,S6),zMr=i(S6),G3e=n(S6,"P",{});var yyt=s(G3e);WMr=r(yyt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yyt.forEach(t),QMr=i(S6),uc=n(S6,"P",{});var gre=s(uc);HMr=r(gre,`Note:
Loading a model from its configuration file does `),O3e=n(gre,"STRONG",{});var xyt=s(O3e);UMr=r(xyt,"not"),xyt.forEach(t),JMr=r(gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=n(gre,"A",{href:!0});var $yt=s(lJ);YMr=r($yt,"from_pretrained()"),$yt.forEach(t),KMr=r(gre," to load the model weights."),gre.forEach(t),ZMr=i(S6),T(oM.$$.fragment,S6),S6.forEach(t),eEr=i(Rl),Sr=n(Rl,"DIV",{class:!0});var Pl=s(Sr);T(j9.$$.fragment,Pl),oEr=i(Pl),V3e=n(Pl,"P",{});var kyt=s(V3e);rEr=r(kyt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kyt.forEach(t),tEr=i(Pl),cn=n(Pl,"P",{});var R6=s(cn);aEr=r(R6,"The model class to instantiate is selected based on the "),X3e=n(R6,"CODE",{});var Syt=s(X3e);nEr=r(Syt,"model_type"),Syt.forEach(t),sEr=r(R6,` property of the config object (either
passed as an argument or loaded from `),z3e=n(R6,"CODE",{});var Ryt=s(z3e);lEr=r(Ryt,"pretrained_model_name_or_path"),Ryt.forEach(t),iEr=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W3e=n(R6,"CODE",{});var Pyt=s(W3e);dEr=r(Pyt,"pretrained_model_name_or_path"),Pyt.forEach(t),cEr=r(R6,":"),R6.forEach(t),fEr=i(Pl),ye=n(Pl,"UL",{});var Ie=s(ye);rM=n(Ie,"LI",{});var ANe=s(rM);Q3e=n(ANe,"STRONG",{});var Byt=s(Q3e);mEr=r(Byt,"bart"),Byt.forEach(t),gEr=r(ANe," \u2014 "),iJ=n(ANe,"A",{href:!0});var Iyt=s(iJ);hEr=r(Iyt,"TFBartForConditionalGeneration"),Iyt.forEach(t),pEr=r(ANe," (BART model)"),ANe.forEach(t),_Er=i(Ie),tM=n(Ie,"LI",{});var LNe=s(tM);H3e=n(LNe,"STRONG",{});var Nyt=s(H3e);uEr=r(Nyt,"blenderbot"),Nyt.forEach(t),bEr=r(LNe," \u2014 "),dJ=n(LNe,"A",{href:!0});var qyt=s(dJ);vEr=r(qyt,"TFBlenderbotForConditionalGeneration"),qyt.forEach(t),FEr=r(LNe," (Blenderbot model)"),LNe.forEach(t),TEr=i(Ie),aM=n(Ie,"LI",{});var yNe=s(aM);U3e=n(yNe,"STRONG",{});var jyt=s(U3e);MEr=r(jyt,"blenderbot-small"),jyt.forEach(t),EEr=r(yNe," \u2014 "),cJ=n(yNe,"A",{href:!0});var Dyt=s(cJ);CEr=r(Dyt,"TFBlenderbotSmallForConditionalGeneration"),Dyt.forEach(t),wEr=r(yNe," (BlenderbotSmall model)"),yNe.forEach(t),AEr=i(Ie),nM=n(Ie,"LI",{});var xNe=s(nM);J3e=n(xNe,"STRONG",{});var Gyt=s(J3e);LEr=r(Gyt,"encoder-decoder"),Gyt.forEach(t),yEr=r(xNe," \u2014 "),fJ=n(xNe,"A",{href:!0});var Oyt=s(fJ);xEr=r(Oyt,"TFEncoderDecoderModel"),Oyt.forEach(t),$Er=r(xNe," (Encoder decoder model)"),xNe.forEach(t),kEr=i(Ie),sM=n(Ie,"LI",{});var $Ne=s(sM);Y3e=n($Ne,"STRONG",{});var Vyt=s(Y3e);SEr=r(Vyt,"led"),Vyt.forEach(t),REr=r($Ne," \u2014 "),mJ=n($Ne,"A",{href:!0});var Xyt=s(mJ);PEr=r(Xyt,"TFLEDForConditionalGeneration"),Xyt.forEach(t),BEr=r($Ne," (LED model)"),$Ne.forEach(t),IEr=i(Ie),lM=n(Ie,"LI",{});var kNe=s(lM);K3e=n(kNe,"STRONG",{});var zyt=s(K3e);NEr=r(zyt,"marian"),zyt.forEach(t),qEr=r(kNe," \u2014 "),gJ=n(kNe,"A",{href:!0});var Wyt=s(gJ);jEr=r(Wyt,"TFMarianMTModel"),Wyt.forEach(t),DEr=r(kNe," (Marian model)"),kNe.forEach(t),GEr=i(Ie),iM=n(Ie,"LI",{});var SNe=s(iM);Z3e=n(SNe,"STRONG",{});var Qyt=s(Z3e);OEr=r(Qyt,"mbart"),Qyt.forEach(t),VEr=r(SNe," \u2014 "),hJ=n(SNe,"A",{href:!0});var Hyt=s(hJ);XEr=r(Hyt,"TFMBartForConditionalGeneration"),Hyt.forEach(t),zEr=r(SNe," (mBART model)"),SNe.forEach(t),WEr=i(Ie),dM=n(Ie,"LI",{});var RNe=s(dM);eFe=n(RNe,"STRONG",{});var Uyt=s(eFe);QEr=r(Uyt,"mt5"),Uyt.forEach(t),HEr=r(RNe," \u2014 "),pJ=n(RNe,"A",{href:!0});var Jyt=s(pJ);UEr=r(Jyt,"TFMT5ForConditionalGeneration"),Jyt.forEach(t),JEr=r(RNe," (MT5 model)"),RNe.forEach(t),YEr=i(Ie),cM=n(Ie,"LI",{});var PNe=s(cM);oFe=n(PNe,"STRONG",{});var Yyt=s(oFe);KEr=r(Yyt,"pegasus"),Yyt.forEach(t),ZEr=r(PNe," \u2014 "),_J=n(PNe,"A",{href:!0});var Kyt=s(_J);eCr=r(Kyt,"TFPegasusForConditionalGeneration"),Kyt.forEach(t),oCr=r(PNe," (Pegasus model)"),PNe.forEach(t),rCr=i(Ie),fM=n(Ie,"LI",{});var BNe=s(fM);rFe=n(BNe,"STRONG",{});var Zyt=s(rFe);tCr=r(Zyt,"t5"),Zyt.forEach(t),aCr=r(BNe," \u2014 "),uJ=n(BNe,"A",{href:!0});var e8t=s(uJ);nCr=r(e8t,"TFT5ForConditionalGeneration"),e8t.forEach(t),sCr=r(BNe," (T5 model)"),BNe.forEach(t),Ie.forEach(t),lCr=i(Pl),T(mM.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),NOe=i(f),bc=n(f,"H2",{class:!0});var zXe=s(bc);gM=n(zXe,"A",{id:!0,class:!0,href:!0});var o8t=s(gM);tFe=n(o8t,"SPAN",{});var r8t=s(tFe);T(D9.$$.fragment,r8t),r8t.forEach(t),o8t.forEach(t),iCr=i(zXe),aFe=n(zXe,"SPAN",{});var t8t=s(aFe);dCr=r(t8t,"TFAutoModelForSequenceClassification"),t8t.forEach(t),zXe.forEach(t),qOe=i(f),nr=n(f,"DIV",{class:!0});var Bl=s(nr);T(G9.$$.fragment,Bl),cCr=i(Bl),vc=n(Bl,"P",{});var hre=s(vc);fCr=r(hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bJ=n(hre,"A",{href:!0});var a8t=s(bJ);mCr=r(a8t,"from_pretrained()"),a8t.forEach(t),gCr=r(hre," class method or the "),vJ=n(hre,"A",{href:!0});var n8t=s(vJ);hCr=r(n8t,"from_config()"),n8t.forEach(t),pCr=r(hre,` class
method.`),hre.forEach(t),_Cr=i(Bl),O9=n(Bl,"P",{});var WXe=s(O9);uCr=r(WXe,"This class cannot be instantiated directly using "),nFe=n(WXe,"CODE",{});var s8t=s(nFe);bCr=r(s8t,"__init__()"),s8t.forEach(t),vCr=r(WXe," (throws an error)."),WXe.forEach(t),FCr=i(Bl),Nt=n(Bl,"DIV",{class:!0});var P6=s(Nt);T(V9.$$.fragment,P6),TCr=i(P6),sFe=n(P6,"P",{});var l8t=s(sFe);MCr=r(l8t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),l8t.forEach(t),ECr=i(P6),Fc=n(P6,"P",{});var pre=s(Fc);CCr=r(pre,`Note:
Loading a model from its configuration file does `),lFe=n(pre,"STRONG",{});var i8t=s(lFe);wCr=r(i8t,"not"),i8t.forEach(t),ACr=r(pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),FJ=n(pre,"A",{href:!0});var d8t=s(FJ);LCr=r(d8t,"from_pretrained()"),d8t.forEach(t),yCr=r(pre," to load the model weights."),pre.forEach(t),xCr=i(P6),T(hM.$$.fragment,P6),P6.forEach(t),$Cr=i(Bl),Rr=n(Bl,"DIV",{class:!0});var Il=s(Rr);T(X9.$$.fragment,Il),kCr=i(Il),iFe=n(Il,"P",{});var c8t=s(iFe);SCr=r(c8t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),c8t.forEach(t),RCr=i(Il),fn=n(Il,"P",{});var B6=s(fn);PCr=r(B6,"The model class to instantiate is selected based on the "),dFe=n(B6,"CODE",{});var f8t=s(dFe);BCr=r(f8t,"model_type"),f8t.forEach(t),ICr=r(B6,` property of the config object (either
passed as an argument or loaded from `),cFe=n(B6,"CODE",{});var m8t=s(cFe);NCr=r(m8t,"pretrained_model_name_or_path"),m8t.forEach(t),qCr=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=n(B6,"CODE",{});var g8t=s(fFe);jCr=r(g8t,"pretrained_model_name_or_path"),g8t.forEach(t),DCr=r(B6,":"),B6.forEach(t),GCr=i(Il),te=n(Il,"UL",{});var ne=s(te);pM=n(ne,"LI",{});var INe=s(pM);mFe=n(INe,"STRONG",{});var h8t=s(mFe);OCr=r(h8t,"albert"),h8t.forEach(t),VCr=r(INe," \u2014 "),TJ=n(INe,"A",{href:!0});var p8t=s(TJ);XCr=r(p8t,"TFAlbertForSequenceClassification"),p8t.forEach(t),zCr=r(INe," (ALBERT model)"),INe.forEach(t),WCr=i(ne),_M=n(ne,"LI",{});var NNe=s(_M);gFe=n(NNe,"STRONG",{});var _8t=s(gFe);QCr=r(_8t,"bert"),_8t.forEach(t),HCr=r(NNe," \u2014 "),MJ=n(NNe,"A",{href:!0});var u8t=s(MJ);UCr=r(u8t,"TFBertForSequenceClassification"),u8t.forEach(t),JCr=r(NNe," (BERT model)"),NNe.forEach(t),YCr=i(ne),uM=n(ne,"LI",{});var qNe=s(uM);hFe=n(qNe,"STRONG",{});var b8t=s(hFe);KCr=r(b8t,"camembert"),b8t.forEach(t),ZCr=r(qNe," \u2014 "),EJ=n(qNe,"A",{href:!0});var v8t=s(EJ);e0r=r(v8t,"TFCamembertForSequenceClassification"),v8t.forEach(t),o0r=r(qNe," (CamemBERT model)"),qNe.forEach(t),r0r=i(ne),bM=n(ne,"LI",{});var jNe=s(bM);pFe=n(jNe,"STRONG",{});var F8t=s(pFe);t0r=r(F8t,"convbert"),F8t.forEach(t),a0r=r(jNe," \u2014 "),CJ=n(jNe,"A",{href:!0});var T8t=s(CJ);n0r=r(T8t,"TFConvBertForSequenceClassification"),T8t.forEach(t),s0r=r(jNe," (ConvBERT model)"),jNe.forEach(t),l0r=i(ne),vM=n(ne,"LI",{});var DNe=s(vM);_Fe=n(DNe,"STRONG",{});var M8t=s(_Fe);i0r=r(M8t,"ctrl"),M8t.forEach(t),d0r=r(DNe," \u2014 "),wJ=n(DNe,"A",{href:!0});var E8t=s(wJ);c0r=r(E8t,"TFCTRLForSequenceClassification"),E8t.forEach(t),f0r=r(DNe," (CTRL model)"),DNe.forEach(t),m0r=i(ne),FM=n(ne,"LI",{});var GNe=s(FM);uFe=n(GNe,"STRONG",{});var C8t=s(uFe);g0r=r(C8t,"deberta"),C8t.forEach(t),h0r=r(GNe," \u2014 "),AJ=n(GNe,"A",{href:!0});var w8t=s(AJ);p0r=r(w8t,"TFDebertaForSequenceClassification"),w8t.forEach(t),_0r=r(GNe," (DeBERTa model)"),GNe.forEach(t),u0r=i(ne),TM=n(ne,"LI",{});var ONe=s(TM);bFe=n(ONe,"STRONG",{});var A8t=s(bFe);b0r=r(A8t,"deberta-v2"),A8t.forEach(t),v0r=r(ONe," \u2014 "),LJ=n(ONe,"A",{href:!0});var L8t=s(LJ);F0r=r(L8t,"TFDebertaV2ForSequenceClassification"),L8t.forEach(t),T0r=r(ONe," (DeBERTa-v2 model)"),ONe.forEach(t),M0r=i(ne),MM=n(ne,"LI",{});var VNe=s(MM);vFe=n(VNe,"STRONG",{});var y8t=s(vFe);E0r=r(y8t,"distilbert"),y8t.forEach(t),C0r=r(VNe," \u2014 "),yJ=n(VNe,"A",{href:!0});var x8t=s(yJ);w0r=r(x8t,"TFDistilBertForSequenceClassification"),x8t.forEach(t),A0r=r(VNe," (DistilBERT model)"),VNe.forEach(t),L0r=i(ne),EM=n(ne,"LI",{});var XNe=s(EM);FFe=n(XNe,"STRONG",{});var $8t=s(FFe);y0r=r($8t,"electra"),$8t.forEach(t),x0r=r(XNe," \u2014 "),xJ=n(XNe,"A",{href:!0});var k8t=s(xJ);$0r=r(k8t,"TFElectraForSequenceClassification"),k8t.forEach(t),k0r=r(XNe," (ELECTRA model)"),XNe.forEach(t),S0r=i(ne),CM=n(ne,"LI",{});var zNe=s(CM);TFe=n(zNe,"STRONG",{});var S8t=s(TFe);R0r=r(S8t,"flaubert"),S8t.forEach(t),P0r=r(zNe," \u2014 "),$J=n(zNe,"A",{href:!0});var R8t=s($J);B0r=r(R8t,"TFFlaubertForSequenceClassification"),R8t.forEach(t),I0r=r(zNe," (FlauBERT model)"),zNe.forEach(t),N0r=i(ne),wM=n(ne,"LI",{});var WNe=s(wM);MFe=n(WNe,"STRONG",{});var P8t=s(MFe);q0r=r(P8t,"funnel"),P8t.forEach(t),j0r=r(WNe," \u2014 "),kJ=n(WNe,"A",{href:!0});var B8t=s(kJ);D0r=r(B8t,"TFFunnelForSequenceClassification"),B8t.forEach(t),G0r=r(WNe," (Funnel Transformer model)"),WNe.forEach(t),O0r=i(ne),AM=n(ne,"LI",{});var QNe=s(AM);EFe=n(QNe,"STRONG",{});var I8t=s(EFe);V0r=r(I8t,"gpt2"),I8t.forEach(t),X0r=r(QNe," \u2014 "),SJ=n(QNe,"A",{href:!0});var N8t=s(SJ);z0r=r(N8t,"TFGPT2ForSequenceClassification"),N8t.forEach(t),W0r=r(QNe," (OpenAI GPT-2 model)"),QNe.forEach(t),Q0r=i(ne),LM=n(ne,"LI",{});var HNe=s(LM);CFe=n(HNe,"STRONG",{});var q8t=s(CFe);H0r=r(q8t,"gptj"),q8t.forEach(t),U0r=r(HNe," \u2014 "),RJ=n(HNe,"A",{href:!0});var j8t=s(RJ);J0r=r(j8t,"TFGPTJForSequenceClassification"),j8t.forEach(t),Y0r=r(HNe," (GPT-J model)"),HNe.forEach(t),K0r=i(ne),yM=n(ne,"LI",{});var UNe=s(yM);wFe=n(UNe,"STRONG",{});var D8t=s(wFe);Z0r=r(D8t,"layoutlm"),D8t.forEach(t),ewr=r(UNe," \u2014 "),PJ=n(UNe,"A",{href:!0});var G8t=s(PJ);owr=r(G8t,"TFLayoutLMForSequenceClassification"),G8t.forEach(t),rwr=r(UNe," (LayoutLM model)"),UNe.forEach(t),twr=i(ne),xM=n(ne,"LI",{});var JNe=s(xM);AFe=n(JNe,"STRONG",{});var O8t=s(AFe);awr=r(O8t,"longformer"),O8t.forEach(t),nwr=r(JNe," \u2014 "),BJ=n(JNe,"A",{href:!0});var V8t=s(BJ);swr=r(V8t,"TFLongformerForSequenceClassification"),V8t.forEach(t),lwr=r(JNe," (Longformer model)"),JNe.forEach(t),iwr=i(ne),$M=n(ne,"LI",{});var YNe=s($M);LFe=n(YNe,"STRONG",{});var X8t=s(LFe);dwr=r(X8t,"mobilebert"),X8t.forEach(t),cwr=r(YNe," \u2014 "),IJ=n(YNe,"A",{href:!0});var z8t=s(IJ);fwr=r(z8t,"TFMobileBertForSequenceClassification"),z8t.forEach(t),mwr=r(YNe," (MobileBERT model)"),YNe.forEach(t),gwr=i(ne),kM=n(ne,"LI",{});var KNe=s(kM);yFe=n(KNe,"STRONG",{});var W8t=s(yFe);hwr=r(W8t,"mpnet"),W8t.forEach(t),pwr=r(KNe," \u2014 "),NJ=n(KNe,"A",{href:!0});var Q8t=s(NJ);_wr=r(Q8t,"TFMPNetForSequenceClassification"),Q8t.forEach(t),uwr=r(KNe," (MPNet model)"),KNe.forEach(t),bwr=i(ne),SM=n(ne,"LI",{});var ZNe=s(SM);xFe=n(ZNe,"STRONG",{});var H8t=s(xFe);vwr=r(H8t,"openai-gpt"),H8t.forEach(t),Fwr=r(ZNe," \u2014 "),qJ=n(ZNe,"A",{href:!0});var U8t=s(qJ);Twr=r(U8t,"TFOpenAIGPTForSequenceClassification"),U8t.forEach(t),Mwr=r(ZNe," (OpenAI GPT model)"),ZNe.forEach(t),Ewr=i(ne),RM=n(ne,"LI",{});var eqe=s(RM);$Fe=n(eqe,"STRONG",{});var J8t=s($Fe);Cwr=r(J8t,"rembert"),J8t.forEach(t),wwr=r(eqe," \u2014 "),jJ=n(eqe,"A",{href:!0});var Y8t=s(jJ);Awr=r(Y8t,"TFRemBertForSequenceClassification"),Y8t.forEach(t),Lwr=r(eqe," (RemBERT model)"),eqe.forEach(t),ywr=i(ne),PM=n(ne,"LI",{});var oqe=s(PM);kFe=n(oqe,"STRONG",{});var K8t=s(kFe);xwr=r(K8t,"roberta"),K8t.forEach(t),$wr=r(oqe," \u2014 "),DJ=n(oqe,"A",{href:!0});var Z8t=s(DJ);kwr=r(Z8t,"TFRobertaForSequenceClassification"),Z8t.forEach(t),Swr=r(oqe," (RoBERTa model)"),oqe.forEach(t),Rwr=i(ne),BM=n(ne,"LI",{});var rqe=s(BM);SFe=n(rqe,"STRONG",{});var e9t=s(SFe);Pwr=r(e9t,"roformer"),e9t.forEach(t),Bwr=r(rqe," \u2014 "),GJ=n(rqe,"A",{href:!0});var o9t=s(GJ);Iwr=r(o9t,"TFRoFormerForSequenceClassification"),o9t.forEach(t),Nwr=r(rqe," (RoFormer model)"),rqe.forEach(t),qwr=i(ne),IM=n(ne,"LI",{});var tqe=s(IM);RFe=n(tqe,"STRONG",{});var r9t=s(RFe);jwr=r(r9t,"tapas"),r9t.forEach(t),Dwr=r(tqe," \u2014 "),OJ=n(tqe,"A",{href:!0});var t9t=s(OJ);Gwr=r(t9t,"TFTapasForSequenceClassification"),t9t.forEach(t),Owr=r(tqe," (TAPAS model)"),tqe.forEach(t),Vwr=i(ne),NM=n(ne,"LI",{});var aqe=s(NM);PFe=n(aqe,"STRONG",{});var a9t=s(PFe);Xwr=r(a9t,"transfo-xl"),a9t.forEach(t),zwr=r(aqe," \u2014 "),VJ=n(aqe,"A",{href:!0});var n9t=s(VJ);Wwr=r(n9t,"TFTransfoXLForSequenceClassification"),n9t.forEach(t),Qwr=r(aqe," (Transformer-XL model)"),aqe.forEach(t),Hwr=i(ne),qM=n(ne,"LI",{});var nqe=s(qM);BFe=n(nqe,"STRONG",{});var s9t=s(BFe);Uwr=r(s9t,"xlm"),s9t.forEach(t),Jwr=r(nqe," \u2014 "),XJ=n(nqe,"A",{href:!0});var l9t=s(XJ);Ywr=r(l9t,"TFXLMForSequenceClassification"),l9t.forEach(t),Kwr=r(nqe," (XLM model)"),nqe.forEach(t),Zwr=i(ne),jM=n(ne,"LI",{});var sqe=s(jM);IFe=n(sqe,"STRONG",{});var i9t=s(IFe);eAr=r(i9t,"xlm-roberta"),i9t.forEach(t),oAr=r(sqe," \u2014 "),zJ=n(sqe,"A",{href:!0});var d9t=s(zJ);rAr=r(d9t,"TFXLMRobertaForSequenceClassification"),d9t.forEach(t),tAr=r(sqe," (XLM-RoBERTa model)"),sqe.forEach(t),aAr=i(ne),DM=n(ne,"LI",{});var lqe=s(DM);NFe=n(lqe,"STRONG",{});var c9t=s(NFe);nAr=r(c9t,"xlnet"),c9t.forEach(t),sAr=r(lqe," \u2014 "),WJ=n(lqe,"A",{href:!0});var f9t=s(WJ);lAr=r(f9t,"TFXLNetForSequenceClassification"),f9t.forEach(t),iAr=r(lqe," (XLNet model)"),lqe.forEach(t),ne.forEach(t),dAr=i(Il),T(GM.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),jOe=i(f),Tc=n(f,"H2",{class:!0});var QXe=s(Tc);OM=n(QXe,"A",{id:!0,class:!0,href:!0});var m9t=s(OM);qFe=n(m9t,"SPAN",{});var g9t=s(qFe);T(z9.$$.fragment,g9t),g9t.forEach(t),m9t.forEach(t),cAr=i(QXe),jFe=n(QXe,"SPAN",{});var h9t=s(jFe);fAr=r(h9t,"TFAutoModelForMultipleChoice"),h9t.forEach(t),QXe.forEach(t),DOe=i(f),sr=n(f,"DIV",{class:!0});var Nl=s(sr);T(W9.$$.fragment,Nl),mAr=i(Nl),Mc=n(Nl,"P",{});var _re=s(Mc);gAr=r(_re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),QJ=n(_re,"A",{href:!0});var p9t=s(QJ);hAr=r(p9t,"from_pretrained()"),p9t.forEach(t),pAr=r(_re," class method or the "),HJ=n(_re,"A",{href:!0});var _9t=s(HJ);_Ar=r(_9t,"from_config()"),_9t.forEach(t),uAr=r(_re,` class
method.`),_re.forEach(t),bAr=i(Nl),Q9=n(Nl,"P",{});var HXe=s(Q9);vAr=r(HXe,"This class cannot be instantiated directly using "),DFe=n(HXe,"CODE",{});var u9t=s(DFe);FAr=r(u9t,"__init__()"),u9t.forEach(t),TAr=r(HXe," (throws an error)."),HXe.forEach(t),MAr=i(Nl),qt=n(Nl,"DIV",{class:!0});var I6=s(qt);T(H9.$$.fragment,I6),EAr=i(I6),GFe=n(I6,"P",{});var b9t=s(GFe);CAr=r(b9t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),b9t.forEach(t),wAr=i(I6),Ec=n(I6,"P",{});var ure=s(Ec);AAr=r(ure,`Note:
Loading a model from its configuration file does `),OFe=n(ure,"STRONG",{});var v9t=s(OFe);LAr=r(v9t,"not"),v9t.forEach(t),yAr=r(ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=n(ure,"A",{href:!0});var F9t=s(UJ);xAr=r(F9t,"from_pretrained()"),F9t.forEach(t),$Ar=r(ure," to load the model weights."),ure.forEach(t),kAr=i(I6),T(VM.$$.fragment,I6),I6.forEach(t),SAr=i(Nl),Pr=n(Nl,"DIV",{class:!0});var ql=s(Pr);T(U9.$$.fragment,ql),RAr=i(ql),VFe=n(ql,"P",{});var T9t=s(VFe);PAr=r(T9t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),T9t.forEach(t),BAr=i(ql),mn=n(ql,"P",{});var N6=s(mn);IAr=r(N6,"The model class to instantiate is selected based on the "),XFe=n(N6,"CODE",{});var M9t=s(XFe);NAr=r(M9t,"model_type"),M9t.forEach(t),qAr=r(N6,` property of the config object (either
passed as an argument or loaded from `),zFe=n(N6,"CODE",{});var E9t=s(zFe);jAr=r(E9t,"pretrained_model_name_or_path"),E9t.forEach(t),DAr=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=n(N6,"CODE",{});var C9t=s(WFe);GAr=r(C9t,"pretrained_model_name_or_path"),C9t.forEach(t),OAr=r(N6,":"),N6.forEach(t),VAr=i(ql),_e=n(ql,"UL",{});var Fe=s(_e);XM=n(Fe,"LI",{});var iqe=s(XM);QFe=n(iqe,"STRONG",{});var w9t=s(QFe);XAr=r(w9t,"albert"),w9t.forEach(t),zAr=r(iqe," \u2014 "),JJ=n(iqe,"A",{href:!0});var A9t=s(JJ);WAr=r(A9t,"TFAlbertForMultipleChoice"),A9t.forEach(t),QAr=r(iqe," (ALBERT model)"),iqe.forEach(t),HAr=i(Fe),zM=n(Fe,"LI",{});var dqe=s(zM);HFe=n(dqe,"STRONG",{});var L9t=s(HFe);UAr=r(L9t,"bert"),L9t.forEach(t),JAr=r(dqe," \u2014 "),YJ=n(dqe,"A",{href:!0});var y9t=s(YJ);YAr=r(y9t,"TFBertForMultipleChoice"),y9t.forEach(t),KAr=r(dqe," (BERT model)"),dqe.forEach(t),ZAr=i(Fe),WM=n(Fe,"LI",{});var cqe=s(WM);UFe=n(cqe,"STRONG",{});var x9t=s(UFe);e6r=r(x9t,"camembert"),x9t.forEach(t),o6r=r(cqe," \u2014 "),KJ=n(cqe,"A",{href:!0});var $9t=s(KJ);r6r=r($9t,"TFCamembertForMultipleChoice"),$9t.forEach(t),t6r=r(cqe," (CamemBERT model)"),cqe.forEach(t),a6r=i(Fe),QM=n(Fe,"LI",{});var fqe=s(QM);JFe=n(fqe,"STRONG",{});var k9t=s(JFe);n6r=r(k9t,"convbert"),k9t.forEach(t),s6r=r(fqe," \u2014 "),ZJ=n(fqe,"A",{href:!0});var S9t=s(ZJ);l6r=r(S9t,"TFConvBertForMultipleChoice"),S9t.forEach(t),i6r=r(fqe," (ConvBERT model)"),fqe.forEach(t),d6r=i(Fe),HM=n(Fe,"LI",{});var mqe=s(HM);YFe=n(mqe,"STRONG",{});var R9t=s(YFe);c6r=r(R9t,"distilbert"),R9t.forEach(t),f6r=r(mqe," \u2014 "),eY=n(mqe,"A",{href:!0});var P9t=s(eY);m6r=r(P9t,"TFDistilBertForMultipleChoice"),P9t.forEach(t),g6r=r(mqe," (DistilBERT model)"),mqe.forEach(t),h6r=i(Fe),UM=n(Fe,"LI",{});var gqe=s(UM);KFe=n(gqe,"STRONG",{});var B9t=s(KFe);p6r=r(B9t,"electra"),B9t.forEach(t),_6r=r(gqe," \u2014 "),oY=n(gqe,"A",{href:!0});var I9t=s(oY);u6r=r(I9t,"TFElectraForMultipleChoice"),I9t.forEach(t),b6r=r(gqe," (ELECTRA model)"),gqe.forEach(t),v6r=i(Fe),JM=n(Fe,"LI",{});var hqe=s(JM);ZFe=n(hqe,"STRONG",{});var N9t=s(ZFe);F6r=r(N9t,"flaubert"),N9t.forEach(t),T6r=r(hqe," \u2014 "),rY=n(hqe,"A",{href:!0});var q9t=s(rY);M6r=r(q9t,"TFFlaubertForMultipleChoice"),q9t.forEach(t),E6r=r(hqe," (FlauBERT model)"),hqe.forEach(t),C6r=i(Fe),YM=n(Fe,"LI",{});var pqe=s(YM);eTe=n(pqe,"STRONG",{});var j9t=s(eTe);w6r=r(j9t,"funnel"),j9t.forEach(t),A6r=r(pqe," \u2014 "),tY=n(pqe,"A",{href:!0});var D9t=s(tY);L6r=r(D9t,"TFFunnelForMultipleChoice"),D9t.forEach(t),y6r=r(pqe," (Funnel Transformer model)"),pqe.forEach(t),x6r=i(Fe),KM=n(Fe,"LI",{});var _qe=s(KM);oTe=n(_qe,"STRONG",{});var G9t=s(oTe);$6r=r(G9t,"longformer"),G9t.forEach(t),k6r=r(_qe," \u2014 "),aY=n(_qe,"A",{href:!0});var O9t=s(aY);S6r=r(O9t,"TFLongformerForMultipleChoice"),O9t.forEach(t),R6r=r(_qe," (Longformer model)"),_qe.forEach(t),P6r=i(Fe),ZM=n(Fe,"LI",{});var uqe=s(ZM);rTe=n(uqe,"STRONG",{});var V9t=s(rTe);B6r=r(V9t,"mobilebert"),V9t.forEach(t),I6r=r(uqe," \u2014 "),nY=n(uqe,"A",{href:!0});var X9t=s(nY);N6r=r(X9t,"TFMobileBertForMultipleChoice"),X9t.forEach(t),q6r=r(uqe," (MobileBERT model)"),uqe.forEach(t),j6r=i(Fe),eE=n(Fe,"LI",{});var bqe=s(eE);tTe=n(bqe,"STRONG",{});var z9t=s(tTe);D6r=r(z9t,"mpnet"),z9t.forEach(t),G6r=r(bqe," \u2014 "),sY=n(bqe,"A",{href:!0});var W9t=s(sY);O6r=r(W9t,"TFMPNetForMultipleChoice"),W9t.forEach(t),V6r=r(bqe," (MPNet model)"),bqe.forEach(t),X6r=i(Fe),oE=n(Fe,"LI",{});var vqe=s(oE);aTe=n(vqe,"STRONG",{});var Q9t=s(aTe);z6r=r(Q9t,"rembert"),Q9t.forEach(t),W6r=r(vqe," \u2014 "),lY=n(vqe,"A",{href:!0});var H9t=s(lY);Q6r=r(H9t,"TFRemBertForMultipleChoice"),H9t.forEach(t),H6r=r(vqe," (RemBERT model)"),vqe.forEach(t),U6r=i(Fe),rE=n(Fe,"LI",{});var Fqe=s(rE);nTe=n(Fqe,"STRONG",{});var U9t=s(nTe);J6r=r(U9t,"roberta"),U9t.forEach(t),Y6r=r(Fqe," \u2014 "),iY=n(Fqe,"A",{href:!0});var J9t=s(iY);K6r=r(J9t,"TFRobertaForMultipleChoice"),J9t.forEach(t),Z6r=r(Fqe," (RoBERTa model)"),Fqe.forEach(t),eLr=i(Fe),tE=n(Fe,"LI",{});var Tqe=s(tE);sTe=n(Tqe,"STRONG",{});var Y9t=s(sTe);oLr=r(Y9t,"roformer"),Y9t.forEach(t),rLr=r(Tqe," \u2014 "),dY=n(Tqe,"A",{href:!0});var K9t=s(dY);tLr=r(K9t,"TFRoFormerForMultipleChoice"),K9t.forEach(t),aLr=r(Tqe," (RoFormer model)"),Tqe.forEach(t),nLr=i(Fe),aE=n(Fe,"LI",{});var Mqe=s(aE);lTe=n(Mqe,"STRONG",{});var Z9t=s(lTe);sLr=r(Z9t,"xlm"),Z9t.forEach(t),lLr=r(Mqe," \u2014 "),cY=n(Mqe,"A",{href:!0});var ext=s(cY);iLr=r(ext,"TFXLMForMultipleChoice"),ext.forEach(t),dLr=r(Mqe," (XLM model)"),Mqe.forEach(t),cLr=i(Fe),nE=n(Fe,"LI",{});var Eqe=s(nE);iTe=n(Eqe,"STRONG",{});var oxt=s(iTe);fLr=r(oxt,"xlm-roberta"),oxt.forEach(t),mLr=r(Eqe," \u2014 "),fY=n(Eqe,"A",{href:!0});var rxt=s(fY);gLr=r(rxt,"TFXLMRobertaForMultipleChoice"),rxt.forEach(t),hLr=r(Eqe," (XLM-RoBERTa model)"),Eqe.forEach(t),pLr=i(Fe),sE=n(Fe,"LI",{});var Cqe=s(sE);dTe=n(Cqe,"STRONG",{});var txt=s(dTe);_Lr=r(txt,"xlnet"),txt.forEach(t),uLr=r(Cqe," \u2014 "),mY=n(Cqe,"A",{href:!0});var axt=s(mY);bLr=r(axt,"TFXLNetForMultipleChoice"),axt.forEach(t),vLr=r(Cqe," (XLNet model)"),Cqe.forEach(t),Fe.forEach(t),FLr=i(ql),T(lE.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),GOe=i(f),Cc=n(f,"H2",{class:!0});var UXe=s(Cc);iE=n(UXe,"A",{id:!0,class:!0,href:!0});var nxt=s(iE);cTe=n(nxt,"SPAN",{});var sxt=s(cTe);T(J9.$$.fragment,sxt),sxt.forEach(t),nxt.forEach(t),TLr=i(UXe),fTe=n(UXe,"SPAN",{});var lxt=s(fTe);MLr=r(lxt,"TFAutoModelForNextSentencePrediction"),lxt.forEach(t),UXe.forEach(t),OOe=i(f),lr=n(f,"DIV",{class:!0});var jl=s(lr);T(Y9.$$.fragment,jl),ELr=i(jl),wc=n(jl,"P",{});var bre=s(wc);CLr=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gY=n(bre,"A",{href:!0});var ixt=s(gY);wLr=r(ixt,"from_pretrained()"),ixt.forEach(t),ALr=r(bre," class method or the "),hY=n(bre,"A",{href:!0});var dxt=s(hY);LLr=r(dxt,"from_config()"),dxt.forEach(t),yLr=r(bre,` class
method.`),bre.forEach(t),xLr=i(jl),K9=n(jl,"P",{});var JXe=s(K9);$Lr=r(JXe,"This class cannot be instantiated directly using "),mTe=n(JXe,"CODE",{});var cxt=s(mTe);kLr=r(cxt,"__init__()"),cxt.forEach(t),SLr=r(JXe," (throws an error)."),JXe.forEach(t),RLr=i(jl),jt=n(jl,"DIV",{class:!0});var q6=s(jt);T(Z9.$$.fragment,q6),PLr=i(q6),gTe=n(q6,"P",{});var fxt=s(gTe);BLr=r(fxt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),fxt.forEach(t),ILr=i(q6),Ac=n(q6,"P",{});var vre=s(Ac);NLr=r(vre,`Note:
Loading a model from its configuration file does `),hTe=n(vre,"STRONG",{});var mxt=s(hTe);qLr=r(mxt,"not"),mxt.forEach(t),jLr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=n(vre,"A",{href:!0});var gxt=s(pY);DLr=r(gxt,"from_pretrained()"),gxt.forEach(t),GLr=r(vre," to load the model weights."),vre.forEach(t),OLr=i(q6),T(dE.$$.fragment,q6),q6.forEach(t),VLr=i(jl),Br=n(jl,"DIV",{class:!0});var Dl=s(Br);T(ex.$$.fragment,Dl),XLr=i(Dl),pTe=n(Dl,"P",{});var hxt=s(pTe);zLr=r(hxt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hxt.forEach(t),WLr=i(Dl),gn=n(Dl,"P",{});var j6=s(gn);QLr=r(j6,"The model class to instantiate is selected based on the "),_Te=n(j6,"CODE",{});var pxt=s(_Te);HLr=r(pxt,"model_type"),pxt.forEach(t),ULr=r(j6,` property of the config object (either
passed as an argument or loaded from `),uTe=n(j6,"CODE",{});var _xt=s(uTe);JLr=r(_xt,"pretrained_model_name_or_path"),_xt.forEach(t),YLr=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=n(j6,"CODE",{});var uxt=s(bTe);KLr=r(uxt,"pretrained_model_name_or_path"),uxt.forEach(t),ZLr=r(j6,":"),j6.forEach(t),eyr=i(Dl),ox=n(Dl,"UL",{});var YXe=s(ox);cE=n(YXe,"LI",{});var wqe=s(cE);vTe=n(wqe,"STRONG",{});var bxt=s(vTe);oyr=r(bxt,"bert"),bxt.forEach(t),ryr=r(wqe," \u2014 "),_Y=n(wqe,"A",{href:!0});var vxt=s(_Y);tyr=r(vxt,"TFBertForNextSentencePrediction"),vxt.forEach(t),ayr=r(wqe," (BERT model)"),wqe.forEach(t),nyr=i(YXe),fE=n(YXe,"LI",{});var Aqe=s(fE);FTe=n(Aqe,"STRONG",{});var Fxt=s(FTe);syr=r(Fxt,"mobilebert"),Fxt.forEach(t),lyr=r(Aqe," \u2014 "),uY=n(Aqe,"A",{href:!0});var Txt=s(uY);iyr=r(Txt,"TFMobileBertForNextSentencePrediction"),Txt.forEach(t),dyr=r(Aqe," (MobileBERT model)"),Aqe.forEach(t),YXe.forEach(t),cyr=i(Dl),T(mE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),VOe=i(f),Lc=n(f,"H2",{class:!0});var KXe=s(Lc);gE=n(KXe,"A",{id:!0,class:!0,href:!0});var Mxt=s(gE);TTe=n(Mxt,"SPAN",{});var Ext=s(TTe);T(rx.$$.fragment,Ext),Ext.forEach(t),Mxt.forEach(t),fyr=i(KXe),MTe=n(KXe,"SPAN",{});var Cxt=s(MTe);myr=r(Cxt,"TFAutoModelForTableQuestionAnswering"),Cxt.forEach(t),KXe.forEach(t),XOe=i(f),ir=n(f,"DIV",{class:!0});var Gl=s(ir);T(tx.$$.fragment,Gl),gyr=i(Gl),yc=n(Gl,"P",{});var Fre=s(yc);hyr=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bY=n(Fre,"A",{href:!0});var wxt=s(bY);pyr=r(wxt,"from_pretrained()"),wxt.forEach(t),_yr=r(Fre," class method or the "),vY=n(Fre,"A",{href:!0});var Axt=s(vY);uyr=r(Axt,"from_config()"),Axt.forEach(t),byr=r(Fre,` class
method.`),Fre.forEach(t),vyr=i(Gl),ax=n(Gl,"P",{});var ZXe=s(ax);Fyr=r(ZXe,"This class cannot be instantiated directly using "),ETe=n(ZXe,"CODE",{});var Lxt=s(ETe);Tyr=r(Lxt,"__init__()"),Lxt.forEach(t),Myr=r(ZXe," (throws an error)."),ZXe.forEach(t),Eyr=i(Gl),Dt=n(Gl,"DIV",{class:!0});var D6=s(Dt);T(nx.$$.fragment,D6),Cyr=i(D6),CTe=n(D6,"P",{});var yxt=s(CTe);wyr=r(yxt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),yxt.forEach(t),Ayr=i(D6),xc=n(D6,"P",{});var Tre=s(xc);Lyr=r(Tre,`Note:
Loading a model from its configuration file does `),wTe=n(Tre,"STRONG",{});var xxt=s(wTe);yyr=r(xxt,"not"),xxt.forEach(t),xyr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(Tre,"A",{href:!0});var $xt=s(FY);$yr=r($xt,"from_pretrained()"),$xt.forEach(t),kyr=r(Tre," to load the model weights."),Tre.forEach(t),Syr=i(D6),T(hE.$$.fragment,D6),D6.forEach(t),Ryr=i(Gl),Ir=n(Gl,"DIV",{class:!0});var Ol=s(Ir);T(sx.$$.fragment,Ol),Pyr=i(Ol),ATe=n(Ol,"P",{});var kxt=s(ATe);Byr=r(kxt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),kxt.forEach(t),Iyr=i(Ol),hn=n(Ol,"P",{});var G6=s(hn);Nyr=r(G6,"The model class to instantiate is selected based on the "),LTe=n(G6,"CODE",{});var Sxt=s(LTe);qyr=r(Sxt,"model_type"),Sxt.forEach(t),jyr=r(G6,` property of the config object (either
passed as an argument or loaded from `),yTe=n(G6,"CODE",{});var Rxt=s(yTe);Dyr=r(Rxt,"pretrained_model_name_or_path"),Rxt.forEach(t),Gyr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=n(G6,"CODE",{});var Pxt=s(xTe);Oyr=r(Pxt,"pretrained_model_name_or_path"),Pxt.forEach(t),Vyr=r(G6,":"),G6.forEach(t),Xyr=i(Ol),$Te=n(Ol,"UL",{});var Bxt=s($Te);pE=n(Bxt,"LI",{});var Lqe=s(pE);kTe=n(Lqe,"STRONG",{});var Ixt=s(kTe);zyr=r(Ixt,"tapas"),Ixt.forEach(t),Wyr=r(Lqe," \u2014 "),TY=n(Lqe,"A",{href:!0});var Nxt=s(TY);Qyr=r(Nxt,"TFTapasForQuestionAnswering"),Nxt.forEach(t),Hyr=r(Lqe," (TAPAS model)"),Lqe.forEach(t),Bxt.forEach(t),Uyr=i(Ol),T(_E.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),zOe=i(f),$c=n(f,"H2",{class:!0});var eze=s($c);uE=n(eze,"A",{id:!0,class:!0,href:!0});var qxt=s(uE);STe=n(qxt,"SPAN",{});var jxt=s(STe);T(lx.$$.fragment,jxt),jxt.forEach(t),qxt.forEach(t),Jyr=i(eze),RTe=n(eze,"SPAN",{});var Dxt=s(RTe);Yyr=r(Dxt,"TFAutoModelForTokenClassification"),Dxt.forEach(t),eze.forEach(t),WOe=i(f),dr=n(f,"DIV",{class:!0});var Vl=s(dr);T(ix.$$.fragment,Vl),Kyr=i(Vl),kc=n(Vl,"P",{});var Mre=s(kc);Zyr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),MY=n(Mre,"A",{href:!0});var Gxt=s(MY);e8r=r(Gxt,"from_pretrained()"),Gxt.forEach(t),o8r=r(Mre," class method or the "),EY=n(Mre,"A",{href:!0});var Oxt=s(EY);r8r=r(Oxt,"from_config()"),Oxt.forEach(t),t8r=r(Mre,` class
method.`),Mre.forEach(t),a8r=i(Vl),dx=n(Vl,"P",{});var oze=s(dx);n8r=r(oze,"This class cannot be instantiated directly using "),PTe=n(oze,"CODE",{});var Vxt=s(PTe);s8r=r(Vxt,"__init__()"),Vxt.forEach(t),l8r=r(oze," (throws an error)."),oze.forEach(t),i8r=i(Vl),Gt=n(Vl,"DIV",{class:!0});var O6=s(Gt);T(cx.$$.fragment,O6),d8r=i(O6),BTe=n(O6,"P",{});var Xxt=s(BTe);c8r=r(Xxt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Xxt.forEach(t),f8r=i(O6),Sc=n(O6,"P",{});var Ere=s(Sc);m8r=r(Ere,`Note:
Loading a model from its configuration file does `),ITe=n(Ere,"STRONG",{});var zxt=s(ITe);g8r=r(zxt,"not"),zxt.forEach(t),h8r=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),CY=n(Ere,"A",{href:!0});var Wxt=s(CY);p8r=r(Wxt,"from_pretrained()"),Wxt.forEach(t),_8r=r(Ere," to load the model weights."),Ere.forEach(t),u8r=i(O6),T(bE.$$.fragment,O6),O6.forEach(t),b8r=i(Vl),Nr=n(Vl,"DIV",{class:!0});var Xl=s(Nr);T(fx.$$.fragment,Xl),v8r=i(Xl),NTe=n(Xl,"P",{});var Qxt=s(NTe);F8r=r(Qxt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Qxt.forEach(t),T8r=i(Xl),pn=n(Xl,"P",{});var V6=s(pn);M8r=r(V6,"The model class to instantiate is selected based on the "),qTe=n(V6,"CODE",{});var Hxt=s(qTe);E8r=r(Hxt,"model_type"),Hxt.forEach(t),C8r=r(V6,` property of the config object (either
passed as an argument or loaded from `),jTe=n(V6,"CODE",{});var Uxt=s(jTe);w8r=r(Uxt,"pretrained_model_name_or_path"),Uxt.forEach(t),A8r=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=n(V6,"CODE",{});var Jxt=s(DTe);L8r=r(Jxt,"pretrained_model_name_or_path"),Jxt.forEach(t),y8r=r(V6,":"),V6.forEach(t),x8r=i(Xl),de=n(Xl,"UL",{});var me=s(de);vE=n(me,"LI",{});var yqe=s(vE);GTe=n(yqe,"STRONG",{});var Yxt=s(GTe);$8r=r(Yxt,"albert"),Yxt.forEach(t),k8r=r(yqe," \u2014 "),wY=n(yqe,"A",{href:!0});var Kxt=s(wY);S8r=r(Kxt,"TFAlbertForTokenClassification"),Kxt.forEach(t),R8r=r(yqe," (ALBERT model)"),yqe.forEach(t),P8r=i(me),FE=n(me,"LI",{});var xqe=s(FE);OTe=n(xqe,"STRONG",{});var Zxt=s(OTe);B8r=r(Zxt,"bert"),Zxt.forEach(t),I8r=r(xqe," \u2014 "),AY=n(xqe,"A",{href:!0});var e$t=s(AY);N8r=r(e$t,"TFBertForTokenClassification"),e$t.forEach(t),q8r=r(xqe," (BERT model)"),xqe.forEach(t),j8r=i(me),TE=n(me,"LI",{});var $qe=s(TE);VTe=n($qe,"STRONG",{});var o$t=s(VTe);D8r=r(o$t,"camembert"),o$t.forEach(t),G8r=r($qe," \u2014 "),LY=n($qe,"A",{href:!0});var r$t=s(LY);O8r=r(r$t,"TFCamembertForTokenClassification"),r$t.forEach(t),V8r=r($qe," (CamemBERT model)"),$qe.forEach(t),X8r=i(me),ME=n(me,"LI",{});var kqe=s(ME);XTe=n(kqe,"STRONG",{});var t$t=s(XTe);z8r=r(t$t,"convbert"),t$t.forEach(t),W8r=r(kqe," \u2014 "),yY=n(kqe,"A",{href:!0});var a$t=s(yY);Q8r=r(a$t,"TFConvBertForTokenClassification"),a$t.forEach(t),H8r=r(kqe," (ConvBERT model)"),kqe.forEach(t),U8r=i(me),EE=n(me,"LI",{});var Sqe=s(EE);zTe=n(Sqe,"STRONG",{});var n$t=s(zTe);J8r=r(n$t,"deberta"),n$t.forEach(t),Y8r=r(Sqe," \u2014 "),xY=n(Sqe,"A",{href:!0});var s$t=s(xY);K8r=r(s$t,"TFDebertaForTokenClassification"),s$t.forEach(t),Z8r=r(Sqe," (DeBERTa model)"),Sqe.forEach(t),e9r=i(me),CE=n(me,"LI",{});var Rqe=s(CE);WTe=n(Rqe,"STRONG",{});var l$t=s(WTe);o9r=r(l$t,"deberta-v2"),l$t.forEach(t),r9r=r(Rqe," \u2014 "),$Y=n(Rqe,"A",{href:!0});var i$t=s($Y);t9r=r(i$t,"TFDebertaV2ForTokenClassification"),i$t.forEach(t),a9r=r(Rqe," (DeBERTa-v2 model)"),Rqe.forEach(t),n9r=i(me),wE=n(me,"LI",{});var Pqe=s(wE);QTe=n(Pqe,"STRONG",{});var d$t=s(QTe);s9r=r(d$t,"distilbert"),d$t.forEach(t),l9r=r(Pqe," \u2014 "),kY=n(Pqe,"A",{href:!0});var c$t=s(kY);i9r=r(c$t,"TFDistilBertForTokenClassification"),c$t.forEach(t),d9r=r(Pqe," (DistilBERT model)"),Pqe.forEach(t),c9r=i(me),AE=n(me,"LI",{});var Bqe=s(AE);HTe=n(Bqe,"STRONG",{});var f$t=s(HTe);f9r=r(f$t,"electra"),f$t.forEach(t),m9r=r(Bqe," \u2014 "),SY=n(Bqe,"A",{href:!0});var m$t=s(SY);g9r=r(m$t,"TFElectraForTokenClassification"),m$t.forEach(t),h9r=r(Bqe," (ELECTRA model)"),Bqe.forEach(t),p9r=i(me),LE=n(me,"LI",{});var Iqe=s(LE);UTe=n(Iqe,"STRONG",{});var g$t=s(UTe);_9r=r(g$t,"flaubert"),g$t.forEach(t),u9r=r(Iqe," \u2014 "),RY=n(Iqe,"A",{href:!0});var h$t=s(RY);b9r=r(h$t,"TFFlaubertForTokenClassification"),h$t.forEach(t),v9r=r(Iqe," (FlauBERT model)"),Iqe.forEach(t),F9r=i(me),yE=n(me,"LI",{});var Nqe=s(yE);JTe=n(Nqe,"STRONG",{});var p$t=s(JTe);T9r=r(p$t,"funnel"),p$t.forEach(t),M9r=r(Nqe," \u2014 "),PY=n(Nqe,"A",{href:!0});var _$t=s(PY);E9r=r(_$t,"TFFunnelForTokenClassification"),_$t.forEach(t),C9r=r(Nqe," (Funnel Transformer model)"),Nqe.forEach(t),w9r=i(me),xE=n(me,"LI",{});var qqe=s(xE);YTe=n(qqe,"STRONG",{});var u$t=s(YTe);A9r=r(u$t,"layoutlm"),u$t.forEach(t),L9r=r(qqe," \u2014 "),BY=n(qqe,"A",{href:!0});var b$t=s(BY);y9r=r(b$t,"TFLayoutLMForTokenClassification"),b$t.forEach(t),x9r=r(qqe," (LayoutLM model)"),qqe.forEach(t),$9r=i(me),$E=n(me,"LI",{});var jqe=s($E);KTe=n(jqe,"STRONG",{});var v$t=s(KTe);k9r=r(v$t,"longformer"),v$t.forEach(t),S9r=r(jqe," \u2014 "),IY=n(jqe,"A",{href:!0});var F$t=s(IY);R9r=r(F$t,"TFLongformerForTokenClassification"),F$t.forEach(t),P9r=r(jqe," (Longformer model)"),jqe.forEach(t),B9r=i(me),kE=n(me,"LI",{});var Dqe=s(kE);ZTe=n(Dqe,"STRONG",{});var T$t=s(ZTe);I9r=r(T$t,"mobilebert"),T$t.forEach(t),N9r=r(Dqe," \u2014 "),NY=n(Dqe,"A",{href:!0});var M$t=s(NY);q9r=r(M$t,"TFMobileBertForTokenClassification"),M$t.forEach(t),j9r=r(Dqe," (MobileBERT model)"),Dqe.forEach(t),D9r=i(me),SE=n(me,"LI",{});var Gqe=s(SE);e7e=n(Gqe,"STRONG",{});var E$t=s(e7e);G9r=r(E$t,"mpnet"),E$t.forEach(t),O9r=r(Gqe," \u2014 "),qY=n(Gqe,"A",{href:!0});var C$t=s(qY);V9r=r(C$t,"TFMPNetForTokenClassification"),C$t.forEach(t),X9r=r(Gqe," (MPNet model)"),Gqe.forEach(t),z9r=i(me),RE=n(me,"LI",{});var Oqe=s(RE);o7e=n(Oqe,"STRONG",{});var w$t=s(o7e);W9r=r(w$t,"rembert"),w$t.forEach(t),Q9r=r(Oqe," \u2014 "),jY=n(Oqe,"A",{href:!0});var A$t=s(jY);H9r=r(A$t,"TFRemBertForTokenClassification"),A$t.forEach(t),U9r=r(Oqe," (RemBERT model)"),Oqe.forEach(t),J9r=i(me),PE=n(me,"LI",{});var Vqe=s(PE);r7e=n(Vqe,"STRONG",{});var L$t=s(r7e);Y9r=r(L$t,"roberta"),L$t.forEach(t),K9r=r(Vqe," \u2014 "),DY=n(Vqe,"A",{href:!0});var y$t=s(DY);Z9r=r(y$t,"TFRobertaForTokenClassification"),y$t.forEach(t),exr=r(Vqe," (RoBERTa model)"),Vqe.forEach(t),oxr=i(me),BE=n(me,"LI",{});var Xqe=s(BE);t7e=n(Xqe,"STRONG",{});var x$t=s(t7e);rxr=r(x$t,"roformer"),x$t.forEach(t),txr=r(Xqe," \u2014 "),GY=n(Xqe,"A",{href:!0});var $$t=s(GY);axr=r($$t,"TFRoFormerForTokenClassification"),$$t.forEach(t),nxr=r(Xqe," (RoFormer model)"),Xqe.forEach(t),sxr=i(me),IE=n(me,"LI",{});var zqe=s(IE);a7e=n(zqe,"STRONG",{});var k$t=s(a7e);lxr=r(k$t,"xlm"),k$t.forEach(t),ixr=r(zqe," \u2014 "),OY=n(zqe,"A",{href:!0});var S$t=s(OY);dxr=r(S$t,"TFXLMForTokenClassification"),S$t.forEach(t),cxr=r(zqe," (XLM model)"),zqe.forEach(t),fxr=i(me),NE=n(me,"LI",{});var Wqe=s(NE);n7e=n(Wqe,"STRONG",{});var R$t=s(n7e);mxr=r(R$t,"xlm-roberta"),R$t.forEach(t),gxr=r(Wqe," \u2014 "),VY=n(Wqe,"A",{href:!0});var P$t=s(VY);hxr=r(P$t,"TFXLMRobertaForTokenClassification"),P$t.forEach(t),pxr=r(Wqe," (XLM-RoBERTa model)"),Wqe.forEach(t),_xr=i(me),qE=n(me,"LI",{});var Qqe=s(qE);s7e=n(Qqe,"STRONG",{});var B$t=s(s7e);uxr=r(B$t,"xlnet"),B$t.forEach(t),bxr=r(Qqe," \u2014 "),XY=n(Qqe,"A",{href:!0});var I$t=s(XY);vxr=r(I$t,"TFXLNetForTokenClassification"),I$t.forEach(t),Fxr=r(Qqe," (XLNet model)"),Qqe.forEach(t),me.forEach(t),Txr=i(Xl),T(jE.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),QOe=i(f),Rc=n(f,"H2",{class:!0});var rze=s(Rc);DE=n(rze,"A",{id:!0,class:!0,href:!0});var N$t=s(DE);l7e=n(N$t,"SPAN",{});var q$t=s(l7e);T(mx.$$.fragment,q$t),q$t.forEach(t),N$t.forEach(t),Mxr=i(rze),i7e=n(rze,"SPAN",{});var j$t=s(i7e);Exr=r(j$t,"TFAutoModelForQuestionAnswering"),j$t.forEach(t),rze.forEach(t),HOe=i(f),cr=n(f,"DIV",{class:!0});var zl=s(cr);T(gx.$$.fragment,zl),Cxr=i(zl),Pc=n(zl,"P",{});var Cre=s(Pc);wxr=r(Cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zY=n(Cre,"A",{href:!0});var D$t=s(zY);Axr=r(D$t,"from_pretrained()"),D$t.forEach(t),Lxr=r(Cre," class method or the "),WY=n(Cre,"A",{href:!0});var G$t=s(WY);yxr=r(G$t,"from_config()"),G$t.forEach(t),xxr=r(Cre,` class
method.`),Cre.forEach(t),$xr=i(zl),hx=n(zl,"P",{});var tze=s(hx);kxr=r(tze,"This class cannot be instantiated directly using "),d7e=n(tze,"CODE",{});var O$t=s(d7e);Sxr=r(O$t,"__init__()"),O$t.forEach(t),Rxr=r(tze," (throws an error)."),tze.forEach(t),Pxr=i(zl),Ot=n(zl,"DIV",{class:!0});var X6=s(Ot);T(px.$$.fragment,X6),Bxr=i(X6),c7e=n(X6,"P",{});var V$t=s(c7e);Ixr=r(V$t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),V$t.forEach(t),Nxr=i(X6),Bc=n(X6,"P",{});var wre=s(Bc);qxr=r(wre,`Note:
Loading a model from its configuration file does `),f7e=n(wre,"STRONG",{});var X$t=s(f7e);jxr=r(X$t,"not"),X$t.forEach(t),Dxr=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(wre,"A",{href:!0});var z$t=s(QY);Gxr=r(z$t,"from_pretrained()"),z$t.forEach(t),Oxr=r(wre," to load the model weights."),wre.forEach(t),Vxr=i(X6),T(GE.$$.fragment,X6),X6.forEach(t),Xxr=i(zl),qr=n(zl,"DIV",{class:!0});var Wl=s(qr);T(_x.$$.fragment,Wl),zxr=i(Wl),m7e=n(Wl,"P",{});var W$t=s(m7e);Wxr=r(W$t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),W$t.forEach(t),Qxr=i(Wl),_n=n(Wl,"P",{});var z6=s(_n);Hxr=r(z6,"The model class to instantiate is selected based on the "),g7e=n(z6,"CODE",{});var Q$t=s(g7e);Uxr=r(Q$t,"model_type"),Q$t.forEach(t),Jxr=r(z6,` property of the config object (either
passed as an argument or loaded from `),h7e=n(z6,"CODE",{});var H$t=s(h7e);Yxr=r(H$t,"pretrained_model_name_or_path"),H$t.forEach(t),Kxr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p7e=n(z6,"CODE",{});var U$t=s(p7e);Zxr=r(U$t,"pretrained_model_name_or_path"),U$t.forEach(t),e$r=r(z6,":"),z6.forEach(t),o$r=i(Wl),ce=n(Wl,"UL",{});var ge=s(ce);OE=n(ge,"LI",{});var Hqe=s(OE);_7e=n(Hqe,"STRONG",{});var J$t=s(_7e);r$r=r(J$t,"albert"),J$t.forEach(t),t$r=r(Hqe," \u2014 "),HY=n(Hqe,"A",{href:!0});var Y$t=s(HY);a$r=r(Y$t,"TFAlbertForQuestionAnswering"),Y$t.forEach(t),n$r=r(Hqe," (ALBERT model)"),Hqe.forEach(t),s$r=i(ge),VE=n(ge,"LI",{});var Uqe=s(VE);u7e=n(Uqe,"STRONG",{});var K$t=s(u7e);l$r=r(K$t,"bert"),K$t.forEach(t),i$r=r(Uqe," \u2014 "),UY=n(Uqe,"A",{href:!0});var Z$t=s(UY);d$r=r(Z$t,"TFBertForQuestionAnswering"),Z$t.forEach(t),c$r=r(Uqe," (BERT model)"),Uqe.forEach(t),f$r=i(ge),XE=n(ge,"LI",{});var Jqe=s(XE);b7e=n(Jqe,"STRONG",{});var ekt=s(b7e);m$r=r(ekt,"camembert"),ekt.forEach(t),g$r=r(Jqe," \u2014 "),JY=n(Jqe,"A",{href:!0});var okt=s(JY);h$r=r(okt,"TFCamembertForQuestionAnswering"),okt.forEach(t),p$r=r(Jqe," (CamemBERT model)"),Jqe.forEach(t),_$r=i(ge),zE=n(ge,"LI",{});var Yqe=s(zE);v7e=n(Yqe,"STRONG",{});var rkt=s(v7e);u$r=r(rkt,"convbert"),rkt.forEach(t),b$r=r(Yqe," \u2014 "),YY=n(Yqe,"A",{href:!0});var tkt=s(YY);v$r=r(tkt,"TFConvBertForQuestionAnswering"),tkt.forEach(t),F$r=r(Yqe," (ConvBERT model)"),Yqe.forEach(t),T$r=i(ge),WE=n(ge,"LI",{});var Kqe=s(WE);F7e=n(Kqe,"STRONG",{});var akt=s(F7e);M$r=r(akt,"deberta"),akt.forEach(t),E$r=r(Kqe," \u2014 "),KY=n(Kqe,"A",{href:!0});var nkt=s(KY);C$r=r(nkt,"TFDebertaForQuestionAnswering"),nkt.forEach(t),w$r=r(Kqe," (DeBERTa model)"),Kqe.forEach(t),A$r=i(ge),QE=n(ge,"LI",{});var Zqe=s(QE);T7e=n(Zqe,"STRONG",{});var skt=s(T7e);L$r=r(skt,"deberta-v2"),skt.forEach(t),y$r=r(Zqe," \u2014 "),ZY=n(Zqe,"A",{href:!0});var lkt=s(ZY);x$r=r(lkt,"TFDebertaV2ForQuestionAnswering"),lkt.forEach(t),$$r=r(Zqe," (DeBERTa-v2 model)"),Zqe.forEach(t),k$r=i(ge),HE=n(ge,"LI",{});var eje=s(HE);M7e=n(eje,"STRONG",{});var ikt=s(M7e);S$r=r(ikt,"distilbert"),ikt.forEach(t),R$r=r(eje," \u2014 "),eK=n(eje,"A",{href:!0});var dkt=s(eK);P$r=r(dkt,"TFDistilBertForQuestionAnswering"),dkt.forEach(t),B$r=r(eje," (DistilBERT model)"),eje.forEach(t),I$r=i(ge),UE=n(ge,"LI",{});var oje=s(UE);E7e=n(oje,"STRONG",{});var ckt=s(E7e);N$r=r(ckt,"electra"),ckt.forEach(t),q$r=r(oje," \u2014 "),oK=n(oje,"A",{href:!0});var fkt=s(oK);j$r=r(fkt,"TFElectraForQuestionAnswering"),fkt.forEach(t),D$r=r(oje," (ELECTRA model)"),oje.forEach(t),G$r=i(ge),JE=n(ge,"LI",{});var rje=s(JE);C7e=n(rje,"STRONG",{});var mkt=s(C7e);O$r=r(mkt,"flaubert"),mkt.forEach(t),V$r=r(rje," \u2014 "),rK=n(rje,"A",{href:!0});var gkt=s(rK);X$r=r(gkt,"TFFlaubertForQuestionAnsweringSimple"),gkt.forEach(t),z$r=r(rje," (FlauBERT model)"),rje.forEach(t),W$r=i(ge),YE=n(ge,"LI",{});var tje=s(YE);w7e=n(tje,"STRONG",{});var hkt=s(w7e);Q$r=r(hkt,"funnel"),hkt.forEach(t),H$r=r(tje," \u2014 "),tK=n(tje,"A",{href:!0});var pkt=s(tK);U$r=r(pkt,"TFFunnelForQuestionAnswering"),pkt.forEach(t),J$r=r(tje," (Funnel Transformer model)"),tje.forEach(t),Y$r=i(ge),KE=n(ge,"LI",{});var aje=s(KE);A7e=n(aje,"STRONG",{});var _kt=s(A7e);K$r=r(_kt,"gptj"),_kt.forEach(t),Z$r=r(aje," \u2014 "),aK=n(aje,"A",{href:!0});var ukt=s(aK);ekr=r(ukt,"TFGPTJForQuestionAnswering"),ukt.forEach(t),okr=r(aje," (GPT-J model)"),aje.forEach(t),rkr=i(ge),ZE=n(ge,"LI",{});var nje=s(ZE);L7e=n(nje,"STRONG",{});var bkt=s(L7e);tkr=r(bkt,"longformer"),bkt.forEach(t),akr=r(nje," \u2014 "),nK=n(nje,"A",{href:!0});var vkt=s(nK);nkr=r(vkt,"TFLongformerForQuestionAnswering"),vkt.forEach(t),skr=r(nje," (Longformer model)"),nje.forEach(t),lkr=i(ge),eC=n(ge,"LI",{});var sje=s(eC);y7e=n(sje,"STRONG",{});var Fkt=s(y7e);ikr=r(Fkt,"mobilebert"),Fkt.forEach(t),dkr=r(sje," \u2014 "),sK=n(sje,"A",{href:!0});var Tkt=s(sK);ckr=r(Tkt,"TFMobileBertForQuestionAnswering"),Tkt.forEach(t),fkr=r(sje," (MobileBERT model)"),sje.forEach(t),mkr=i(ge),oC=n(ge,"LI",{});var lje=s(oC);x7e=n(lje,"STRONG",{});var Mkt=s(x7e);gkr=r(Mkt,"mpnet"),Mkt.forEach(t),hkr=r(lje," \u2014 "),lK=n(lje,"A",{href:!0});var Ekt=s(lK);pkr=r(Ekt,"TFMPNetForQuestionAnswering"),Ekt.forEach(t),_kr=r(lje," (MPNet model)"),lje.forEach(t),ukr=i(ge),rC=n(ge,"LI",{});var ije=s(rC);$7e=n(ije,"STRONG",{});var Ckt=s($7e);bkr=r(Ckt,"rembert"),Ckt.forEach(t),vkr=r(ije," \u2014 "),iK=n(ije,"A",{href:!0});var wkt=s(iK);Fkr=r(wkt,"TFRemBertForQuestionAnswering"),wkt.forEach(t),Tkr=r(ije," (RemBERT model)"),ije.forEach(t),Mkr=i(ge),tC=n(ge,"LI",{});var dje=s(tC);k7e=n(dje,"STRONG",{});var Akt=s(k7e);Ekr=r(Akt,"roberta"),Akt.forEach(t),Ckr=r(dje," \u2014 "),dK=n(dje,"A",{href:!0});var Lkt=s(dK);wkr=r(Lkt,"TFRobertaForQuestionAnswering"),Lkt.forEach(t),Akr=r(dje," (RoBERTa model)"),dje.forEach(t),Lkr=i(ge),aC=n(ge,"LI",{});var cje=s(aC);S7e=n(cje,"STRONG",{});var ykt=s(S7e);ykr=r(ykt,"roformer"),ykt.forEach(t),xkr=r(cje," \u2014 "),cK=n(cje,"A",{href:!0});var xkt=s(cK);$kr=r(xkt,"TFRoFormerForQuestionAnswering"),xkt.forEach(t),kkr=r(cje," (RoFormer model)"),cje.forEach(t),Skr=i(ge),nC=n(ge,"LI",{});var fje=s(nC);R7e=n(fje,"STRONG",{});var $kt=s(R7e);Rkr=r($kt,"xlm"),$kt.forEach(t),Pkr=r(fje," \u2014 "),fK=n(fje,"A",{href:!0});var kkt=s(fK);Bkr=r(kkt,"TFXLMForQuestionAnsweringSimple"),kkt.forEach(t),Ikr=r(fje," (XLM model)"),fje.forEach(t),Nkr=i(ge),sC=n(ge,"LI",{});var mje=s(sC);P7e=n(mje,"STRONG",{});var Skt=s(P7e);qkr=r(Skt,"xlm-roberta"),Skt.forEach(t),jkr=r(mje," \u2014 "),mK=n(mje,"A",{href:!0});var Rkt=s(mK);Dkr=r(Rkt,"TFXLMRobertaForQuestionAnswering"),Rkt.forEach(t),Gkr=r(mje," (XLM-RoBERTa model)"),mje.forEach(t),Okr=i(ge),lC=n(ge,"LI",{});var gje=s(lC);B7e=n(gje,"STRONG",{});var Pkt=s(B7e);Vkr=r(Pkt,"xlnet"),Pkt.forEach(t),Xkr=r(gje," \u2014 "),gK=n(gje,"A",{href:!0});var Bkt=s(gK);zkr=r(Bkt,"TFXLNetForQuestionAnsweringSimple"),Bkt.forEach(t),Wkr=r(gje," (XLNet model)"),gje.forEach(t),ge.forEach(t),Qkr=i(Wl),T(iC.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),UOe=i(f),Ic=n(f,"H2",{class:!0});var aze=s(Ic);dC=n(aze,"A",{id:!0,class:!0,href:!0});var Ikt=s(dC);I7e=n(Ikt,"SPAN",{});var Nkt=s(I7e);T(ux.$$.fragment,Nkt),Nkt.forEach(t),Ikt.forEach(t),Hkr=i(aze),N7e=n(aze,"SPAN",{});var qkt=s(N7e);Ukr=r(qkt,"TFAutoModelForVision2Seq"),qkt.forEach(t),aze.forEach(t),JOe=i(f),fr=n(f,"DIV",{class:!0});var Ql=s(fr);T(bx.$$.fragment,Ql),Jkr=i(Ql),Nc=n(Ql,"P",{});var Are=s(Nc);Ykr=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hK=n(Are,"A",{href:!0});var jkt=s(hK);Kkr=r(jkt,"from_pretrained()"),jkt.forEach(t),Zkr=r(Are," class method or the "),pK=n(Are,"A",{href:!0});var Dkt=s(pK);eSr=r(Dkt,"from_config()"),Dkt.forEach(t),oSr=r(Are,` class
method.`),Are.forEach(t),rSr=i(Ql),vx=n(Ql,"P",{});var nze=s(vx);tSr=r(nze,"This class cannot be instantiated directly using "),q7e=n(nze,"CODE",{});var Gkt=s(q7e);aSr=r(Gkt,"__init__()"),Gkt.forEach(t),nSr=r(nze," (throws an error)."),nze.forEach(t),sSr=i(Ql),Vt=n(Ql,"DIV",{class:!0});var W6=s(Vt);T(Fx.$$.fragment,W6),lSr=i(W6),j7e=n(W6,"P",{});var Okt=s(j7e);iSr=r(Okt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Okt.forEach(t),dSr=i(W6),qc=n(W6,"P",{});var Lre=s(qc);cSr=r(Lre,`Note:
Loading a model from its configuration file does `),D7e=n(Lre,"STRONG",{});var Vkt=s(D7e);fSr=r(Vkt,"not"),Vkt.forEach(t),mSr=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=n(Lre,"A",{href:!0});var Xkt=s(_K);gSr=r(Xkt,"from_pretrained()"),Xkt.forEach(t),hSr=r(Lre," to load the model weights."),Lre.forEach(t),pSr=i(W6),T(cC.$$.fragment,W6),W6.forEach(t),_Sr=i(Ql),jr=n(Ql,"DIV",{class:!0});var Hl=s(jr);T(Tx.$$.fragment,Hl),uSr=i(Hl),G7e=n(Hl,"P",{});var zkt=s(G7e);bSr=r(zkt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zkt.forEach(t),vSr=i(Hl),un=n(Hl,"P",{});var Q6=s(un);FSr=r(Q6,"The model class to instantiate is selected based on the "),O7e=n(Q6,"CODE",{});var Wkt=s(O7e);TSr=r(Wkt,"model_type"),Wkt.forEach(t),MSr=r(Q6,` property of the config object (either
passed as an argument or loaded from `),V7e=n(Q6,"CODE",{});var Qkt=s(V7e);ESr=r(Qkt,"pretrained_model_name_or_path"),Qkt.forEach(t),CSr=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X7e=n(Q6,"CODE",{});var Hkt=s(X7e);wSr=r(Hkt,"pretrained_model_name_or_path"),Hkt.forEach(t),ASr=r(Q6,":"),Q6.forEach(t),LSr=i(Hl),z7e=n(Hl,"UL",{});var Ukt=s(z7e);fC=n(Ukt,"LI",{});var hje=s(fC);W7e=n(hje,"STRONG",{});var Jkt=s(W7e);ySr=r(Jkt,"vision-encoder-decoder"),Jkt.forEach(t),xSr=r(hje," \u2014 "),uK=n(hje,"A",{href:!0});var Ykt=s(uK);$Sr=r(Ykt,"TFVisionEncoderDecoderModel"),Ykt.forEach(t),kSr=r(hje," (Vision Encoder decoder model)"),hje.forEach(t),Ukt.forEach(t),SSr=i(Hl),T(mC.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),YOe=i(f),jc=n(f,"H2",{class:!0});var sze=s(jc);gC=n(sze,"A",{id:!0,class:!0,href:!0});var Kkt=s(gC);Q7e=n(Kkt,"SPAN",{});var Zkt=s(Q7e);T(Mx.$$.fragment,Zkt),Zkt.forEach(t),Kkt.forEach(t),RSr=i(sze),H7e=n(sze,"SPAN",{});var eSt=s(H7e);PSr=r(eSt,"TFAutoModelForSpeechSeq2Seq"),eSt.forEach(t),sze.forEach(t),KOe=i(f),mr=n(f,"DIV",{class:!0});var Ul=s(mr);T(Ex.$$.fragment,Ul),BSr=i(Ul),Dc=n(Ul,"P",{});var yre=s(Dc);ISr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),bK=n(yre,"A",{href:!0});var oSt=s(bK);NSr=r(oSt,"from_pretrained()"),oSt.forEach(t),qSr=r(yre," class method or the "),vK=n(yre,"A",{href:!0});var rSt=s(vK);jSr=r(rSt,"from_config()"),rSt.forEach(t),DSr=r(yre,` class
method.`),yre.forEach(t),GSr=i(Ul),Cx=n(Ul,"P",{});var lze=s(Cx);OSr=r(lze,"This class cannot be instantiated directly using "),U7e=n(lze,"CODE",{});var tSt=s(U7e);VSr=r(tSt,"__init__()"),tSt.forEach(t),XSr=r(lze," (throws an error)."),lze.forEach(t),zSr=i(Ul),Xt=n(Ul,"DIV",{class:!0});var H6=s(Xt);T(wx.$$.fragment,H6),WSr=i(H6),J7e=n(H6,"P",{});var aSt=s(J7e);QSr=r(aSt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),aSt.forEach(t),HSr=i(H6),Gc=n(H6,"P",{});var xre=s(Gc);USr=r(xre,`Note:
Loading a model from its configuration file does `),Y7e=n(xre,"STRONG",{});var nSt=s(Y7e);JSr=r(nSt,"not"),nSt.forEach(t),YSr=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),FK=n(xre,"A",{href:!0});var sSt=s(FK);KSr=r(sSt,"from_pretrained()"),sSt.forEach(t),ZSr=r(xre," to load the model weights."),xre.forEach(t),eRr=i(H6),T(hC.$$.fragment,H6),H6.forEach(t),oRr=i(Ul),Dr=n(Ul,"DIV",{class:!0});var Jl=s(Dr);T(Ax.$$.fragment,Jl),rRr=i(Jl),K7e=n(Jl,"P",{});var lSt=s(K7e);tRr=r(lSt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),lSt.forEach(t),aRr=i(Jl),bn=n(Jl,"P",{});var U6=s(bn);nRr=r(U6,"The model class to instantiate is selected based on the "),Z7e=n(U6,"CODE",{});var iSt=s(Z7e);sRr=r(iSt,"model_type"),iSt.forEach(t),lRr=r(U6,` property of the config object (either
passed as an argument or loaded from `),eMe=n(U6,"CODE",{});var dSt=s(eMe);iRr=r(dSt,"pretrained_model_name_or_path"),dSt.forEach(t),dRr=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oMe=n(U6,"CODE",{});var cSt=s(oMe);cRr=r(cSt,"pretrained_model_name_or_path"),cSt.forEach(t),fRr=r(U6,":"),U6.forEach(t),mRr=i(Jl),rMe=n(Jl,"UL",{});var fSt=s(rMe);pC=n(fSt,"LI",{});var pje=s(pC);tMe=n(pje,"STRONG",{});var mSt=s(tMe);gRr=r(mSt,"speech_to_text"),mSt.forEach(t),hRr=r(pje," \u2014 "),TK=n(pje,"A",{href:!0});var gSt=s(TK);pRr=r(gSt,"TFSpeech2TextForConditionalGeneration"),gSt.forEach(t),_Rr=r(pje," (Speech2Text model)"),pje.forEach(t),fSt.forEach(t),uRr=i(Jl),T(_C.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),ZOe=i(f),Oc=n(f,"H2",{class:!0});var ize=s(Oc);uC=n(ize,"A",{id:!0,class:!0,href:!0});var hSt=s(uC);aMe=n(hSt,"SPAN",{});var pSt=s(aMe);T(Lx.$$.fragment,pSt),pSt.forEach(t),hSt.forEach(t),bRr=i(ize),nMe=n(ize,"SPAN",{});var _St=s(nMe);vRr=r(_St,"FlaxAutoModel"),_St.forEach(t),ize.forEach(t),eVe=i(f),gr=n(f,"DIV",{class:!0});var Yl=s(gr);T(yx.$$.fragment,Yl),FRr=i(Yl),Vc=n(Yl,"P",{});var $re=s(Vc);TRr=r($re,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),MK=n($re,"A",{href:!0});var uSt=s(MK);MRr=r(uSt,"from_pretrained()"),uSt.forEach(t),ERr=r($re," class method or the "),EK=n($re,"A",{href:!0});var bSt=s(EK);CRr=r(bSt,"from_config()"),bSt.forEach(t),wRr=r($re,` class
method.`),$re.forEach(t),ARr=i(Yl),xx=n(Yl,"P",{});var dze=s(xx);LRr=r(dze,"This class cannot be instantiated directly using "),sMe=n(dze,"CODE",{});var vSt=s(sMe);yRr=r(vSt,"__init__()"),vSt.forEach(t),xRr=r(dze," (throws an error)."),dze.forEach(t),$Rr=i(Yl),zt=n(Yl,"DIV",{class:!0});var J6=s(zt);T($x.$$.fragment,J6),kRr=i(J6),lMe=n(J6,"P",{});var FSt=s(lMe);SRr=r(FSt,"Instantiates one of the base model classes of the library from a configuration."),FSt.forEach(t),RRr=i(J6),Xc=n(J6,"P",{});var kre=s(Xc);PRr=r(kre,`Note:
Loading a model from its configuration file does `),iMe=n(kre,"STRONG",{});var TSt=s(iMe);BRr=r(TSt,"not"),TSt.forEach(t),IRr=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=n(kre,"A",{href:!0});var MSt=s(CK);NRr=r(MSt,"from_pretrained()"),MSt.forEach(t),qRr=r(kre," to load the model weights."),kre.forEach(t),jRr=i(J6),T(bC.$$.fragment,J6),J6.forEach(t),DRr=i(Yl),Gr=n(Yl,"DIV",{class:!0});var Kl=s(Gr);T(kx.$$.fragment,Kl),GRr=i(Kl),dMe=n(Kl,"P",{});var ESt=s(dMe);ORr=r(ESt,"Instantiate one of the base model classes of the library from a pretrained model."),ESt.forEach(t),VRr=i(Kl),vn=n(Kl,"P",{});var Y6=s(vn);XRr=r(Y6,"The model class to instantiate is selected based on the "),cMe=n(Y6,"CODE",{});var CSt=s(cMe);zRr=r(CSt,"model_type"),CSt.forEach(t),WRr=r(Y6,` property of the config object (either
passed as an argument or loaded from `),fMe=n(Y6,"CODE",{});var wSt=s(fMe);QRr=r(wSt,"pretrained_model_name_or_path"),wSt.forEach(t),HRr=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=n(Y6,"CODE",{});var ASt=s(mMe);URr=r(ASt,"pretrained_model_name_or_path"),ASt.forEach(t),JRr=r(Y6,":"),Y6.forEach(t),YRr=i(Kl),oe=n(Kl,"UL",{});var ae=s(oe);vC=n(ae,"LI",{});var _je=s(vC);gMe=n(_je,"STRONG",{});var LSt=s(gMe);KRr=r(LSt,"albert"),LSt.forEach(t),ZRr=r(_je," \u2014 "),wK=n(_je,"A",{href:!0});var ySt=s(wK);ePr=r(ySt,"FlaxAlbertModel"),ySt.forEach(t),oPr=r(_je," (ALBERT model)"),_je.forEach(t),rPr=i(ae),FC=n(ae,"LI",{});var uje=s(FC);hMe=n(uje,"STRONG",{});var xSt=s(hMe);tPr=r(xSt,"bart"),xSt.forEach(t),aPr=r(uje," \u2014 "),AK=n(uje,"A",{href:!0});var $St=s(AK);nPr=r($St,"FlaxBartModel"),$St.forEach(t),sPr=r(uje," (BART model)"),uje.forEach(t),lPr=i(ae),TC=n(ae,"LI",{});var bje=s(TC);pMe=n(bje,"STRONG",{});var kSt=s(pMe);iPr=r(kSt,"beit"),kSt.forEach(t),dPr=r(bje," \u2014 "),LK=n(bje,"A",{href:!0});var SSt=s(LK);cPr=r(SSt,"FlaxBeitModel"),SSt.forEach(t),fPr=r(bje," (BEiT model)"),bje.forEach(t),mPr=i(ae),MC=n(ae,"LI",{});var vje=s(MC);_Me=n(vje,"STRONG",{});var RSt=s(_Me);gPr=r(RSt,"bert"),RSt.forEach(t),hPr=r(vje," \u2014 "),yK=n(vje,"A",{href:!0});var PSt=s(yK);pPr=r(PSt,"FlaxBertModel"),PSt.forEach(t),_Pr=r(vje," (BERT model)"),vje.forEach(t),uPr=i(ae),EC=n(ae,"LI",{});var Fje=s(EC);uMe=n(Fje,"STRONG",{});var BSt=s(uMe);bPr=r(BSt,"big_bird"),BSt.forEach(t),vPr=r(Fje," \u2014 "),xK=n(Fje,"A",{href:!0});var ISt=s(xK);FPr=r(ISt,"FlaxBigBirdModel"),ISt.forEach(t),TPr=r(Fje," (BigBird model)"),Fje.forEach(t),MPr=i(ae),CC=n(ae,"LI",{});var Tje=s(CC);bMe=n(Tje,"STRONG",{});var NSt=s(bMe);EPr=r(NSt,"blenderbot"),NSt.forEach(t),CPr=r(Tje," \u2014 "),$K=n(Tje,"A",{href:!0});var qSt=s($K);wPr=r(qSt,"FlaxBlenderbotModel"),qSt.forEach(t),APr=r(Tje," (Blenderbot model)"),Tje.forEach(t),LPr=i(ae),wC=n(ae,"LI",{});var Mje=s(wC);vMe=n(Mje,"STRONG",{});var jSt=s(vMe);yPr=r(jSt,"blenderbot-small"),jSt.forEach(t),xPr=r(Mje," \u2014 "),kK=n(Mje,"A",{href:!0});var DSt=s(kK);$Pr=r(DSt,"FlaxBlenderbotSmallModel"),DSt.forEach(t),kPr=r(Mje," (BlenderbotSmall model)"),Mje.forEach(t),SPr=i(ae),AC=n(ae,"LI",{});var Eje=s(AC);FMe=n(Eje,"STRONG",{});var GSt=s(FMe);RPr=r(GSt,"clip"),GSt.forEach(t),PPr=r(Eje," \u2014 "),SK=n(Eje,"A",{href:!0});var OSt=s(SK);BPr=r(OSt,"FlaxCLIPModel"),OSt.forEach(t),IPr=r(Eje," (CLIP model)"),Eje.forEach(t),NPr=i(ae),LC=n(ae,"LI",{});var Cje=s(LC);TMe=n(Cje,"STRONG",{});var VSt=s(TMe);qPr=r(VSt,"distilbert"),VSt.forEach(t),jPr=r(Cje," \u2014 "),RK=n(Cje,"A",{href:!0});var XSt=s(RK);DPr=r(XSt,"FlaxDistilBertModel"),XSt.forEach(t),GPr=r(Cje," (DistilBERT model)"),Cje.forEach(t),OPr=i(ae),yC=n(ae,"LI",{});var wje=s(yC);MMe=n(wje,"STRONG",{});var zSt=s(MMe);VPr=r(zSt,"electra"),zSt.forEach(t),XPr=r(wje," \u2014 "),PK=n(wje,"A",{href:!0});var WSt=s(PK);zPr=r(WSt,"FlaxElectraModel"),WSt.forEach(t),WPr=r(wje," (ELECTRA model)"),wje.forEach(t),QPr=i(ae),xC=n(ae,"LI",{});var Aje=s(xC);EMe=n(Aje,"STRONG",{});var QSt=s(EMe);HPr=r(QSt,"gpt2"),QSt.forEach(t),UPr=r(Aje," \u2014 "),BK=n(Aje,"A",{href:!0});var HSt=s(BK);JPr=r(HSt,"FlaxGPT2Model"),HSt.forEach(t),YPr=r(Aje," (OpenAI GPT-2 model)"),Aje.forEach(t),KPr=i(ae),$C=n(ae,"LI",{});var Lje=s($C);CMe=n(Lje,"STRONG",{});var USt=s(CMe);ZPr=r(USt,"gpt_neo"),USt.forEach(t),eBr=r(Lje," \u2014 "),IK=n(Lje,"A",{href:!0});var JSt=s(IK);oBr=r(JSt,"FlaxGPTNeoModel"),JSt.forEach(t),rBr=r(Lje," (GPT Neo model)"),Lje.forEach(t),tBr=i(ae),kC=n(ae,"LI",{});var yje=s(kC);wMe=n(yje,"STRONG",{});var YSt=s(wMe);aBr=r(YSt,"gptj"),YSt.forEach(t),nBr=r(yje," \u2014 "),NK=n(yje,"A",{href:!0});var KSt=s(NK);sBr=r(KSt,"FlaxGPTJModel"),KSt.forEach(t),lBr=r(yje," (GPT-J model)"),yje.forEach(t),iBr=i(ae),SC=n(ae,"LI",{});var xje=s(SC);AMe=n(xje,"STRONG",{});var ZSt=s(AMe);dBr=r(ZSt,"longt5"),ZSt.forEach(t),cBr=r(xje," \u2014 "),qK=n(xje,"A",{href:!0});var eRt=s(qK);fBr=r(eRt,"FlaxLongT5Model"),eRt.forEach(t),mBr=r(xje," (LongT5 model)"),xje.forEach(t),gBr=i(ae),RC=n(ae,"LI",{});var $je=s(RC);LMe=n($je,"STRONG",{});var oRt=s(LMe);hBr=r(oRt,"marian"),oRt.forEach(t),pBr=r($je," \u2014 "),jK=n($je,"A",{href:!0});var rRt=s(jK);_Br=r(rRt,"FlaxMarianModel"),rRt.forEach(t),uBr=r($je," (Marian model)"),$je.forEach(t),bBr=i(ae),PC=n(ae,"LI",{});var kje=s(PC);yMe=n(kje,"STRONG",{});var tRt=s(yMe);vBr=r(tRt,"mbart"),tRt.forEach(t),FBr=r(kje," \u2014 "),DK=n(kje,"A",{href:!0});var aRt=s(DK);TBr=r(aRt,"FlaxMBartModel"),aRt.forEach(t),MBr=r(kje," (mBART model)"),kje.forEach(t),EBr=i(ae),BC=n(ae,"LI",{});var Sje=s(BC);xMe=n(Sje,"STRONG",{});var nRt=s(xMe);CBr=r(nRt,"mt5"),nRt.forEach(t),wBr=r(Sje," \u2014 "),GK=n(Sje,"A",{href:!0});var sRt=s(GK);ABr=r(sRt,"FlaxMT5Model"),sRt.forEach(t),LBr=r(Sje," (MT5 model)"),Sje.forEach(t),yBr=i(ae),IC=n(ae,"LI",{});var Rje=s(IC);$Me=n(Rje,"STRONG",{});var lRt=s($Me);xBr=r(lRt,"opt"),lRt.forEach(t),$Br=r(Rje," \u2014 "),OK=n(Rje,"A",{href:!0});var iRt=s(OK);kBr=r(iRt,"FlaxOPTModel"),iRt.forEach(t),SBr=r(Rje," (OPT model)"),Rje.forEach(t),RBr=i(ae),NC=n(ae,"LI",{});var Pje=s(NC);kMe=n(Pje,"STRONG",{});var dRt=s(kMe);PBr=r(dRt,"pegasus"),dRt.forEach(t),BBr=r(Pje," \u2014 "),VK=n(Pje,"A",{href:!0});var cRt=s(VK);IBr=r(cRt,"FlaxPegasusModel"),cRt.forEach(t),NBr=r(Pje," (Pegasus model)"),Pje.forEach(t),qBr=i(ae),qC=n(ae,"LI",{});var Bje=s(qC);SMe=n(Bje,"STRONG",{});var fRt=s(SMe);jBr=r(fRt,"roberta"),fRt.forEach(t),DBr=r(Bje," \u2014 "),XK=n(Bje,"A",{href:!0});var mRt=s(XK);GBr=r(mRt,"FlaxRobertaModel"),mRt.forEach(t),OBr=r(Bje," (RoBERTa model)"),Bje.forEach(t),VBr=i(ae),jC=n(ae,"LI",{});var Ije=s(jC);RMe=n(Ije,"STRONG",{});var gRt=s(RMe);XBr=r(gRt,"roformer"),gRt.forEach(t),zBr=r(Ije," \u2014 "),zK=n(Ije,"A",{href:!0});var hRt=s(zK);WBr=r(hRt,"FlaxRoFormerModel"),hRt.forEach(t),QBr=r(Ije," (RoFormer model)"),Ije.forEach(t),HBr=i(ae),DC=n(ae,"LI",{});var Nje=s(DC);PMe=n(Nje,"STRONG",{});var pRt=s(PMe);UBr=r(pRt,"t5"),pRt.forEach(t),JBr=r(Nje," \u2014 "),WK=n(Nje,"A",{href:!0});var _Rt=s(WK);YBr=r(_Rt,"FlaxT5Model"),_Rt.forEach(t),KBr=r(Nje," (T5 model)"),Nje.forEach(t),ZBr=i(ae),GC=n(ae,"LI",{});var qje=s(GC);BMe=n(qje,"STRONG",{});var uRt=s(BMe);eIr=r(uRt,"vision-text-dual-encoder"),uRt.forEach(t),oIr=r(qje," \u2014 "),QK=n(qje,"A",{href:!0});var bRt=s(QK);rIr=r(bRt,"FlaxVisionTextDualEncoderModel"),bRt.forEach(t),tIr=r(qje," (VisionTextDualEncoder model)"),qje.forEach(t),aIr=i(ae),OC=n(ae,"LI",{});var jje=s(OC);IMe=n(jje,"STRONG",{});var vRt=s(IMe);nIr=r(vRt,"vit"),vRt.forEach(t),sIr=r(jje," \u2014 "),HK=n(jje,"A",{href:!0});var FRt=s(HK);lIr=r(FRt,"FlaxViTModel"),FRt.forEach(t),iIr=r(jje," (ViT model)"),jje.forEach(t),dIr=i(ae),VC=n(ae,"LI",{});var Dje=s(VC);NMe=n(Dje,"STRONG",{});var TRt=s(NMe);cIr=r(TRt,"wav2vec2"),TRt.forEach(t),fIr=r(Dje," \u2014 "),UK=n(Dje,"A",{href:!0});var MRt=s(UK);mIr=r(MRt,"FlaxWav2Vec2Model"),MRt.forEach(t),gIr=r(Dje," (Wav2Vec2 model)"),Dje.forEach(t),hIr=i(ae),XC=n(ae,"LI",{});var Gje=s(XC);qMe=n(Gje,"STRONG",{});var ERt=s(qMe);pIr=r(ERt,"xglm"),ERt.forEach(t),_Ir=r(Gje," \u2014 "),JK=n(Gje,"A",{href:!0});var CRt=s(JK);uIr=r(CRt,"FlaxXGLMModel"),CRt.forEach(t),bIr=r(Gje," (XGLM model)"),Gje.forEach(t),vIr=i(ae),zC=n(ae,"LI",{});var Oje=s(zC);jMe=n(Oje,"STRONG",{});var wRt=s(jMe);FIr=r(wRt,"xlm-roberta"),wRt.forEach(t),TIr=r(Oje," \u2014 "),YK=n(Oje,"A",{href:!0});var ARt=s(YK);MIr=r(ARt,"FlaxXLMRobertaModel"),ARt.forEach(t),EIr=r(Oje," (XLM-RoBERTa model)"),Oje.forEach(t),ae.forEach(t),CIr=i(Kl),T(WC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),oVe=i(f),zc=n(f,"H2",{class:!0});var cze=s(zc);QC=n(cze,"A",{id:!0,class:!0,href:!0});var LRt=s(QC);DMe=n(LRt,"SPAN",{});var yRt=s(DMe);T(Sx.$$.fragment,yRt),yRt.forEach(t),LRt.forEach(t),wIr=i(cze),GMe=n(cze,"SPAN",{});var xRt=s(GMe);AIr=r(xRt,"FlaxAutoModelForCausalLM"),xRt.forEach(t),cze.forEach(t),rVe=i(f),hr=n(f,"DIV",{class:!0});var Zl=s(hr);T(Rx.$$.fragment,Zl),LIr=i(Zl),Wc=n(Zl,"P",{});var Sre=s(Wc);yIr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),KK=n(Sre,"A",{href:!0});var $Rt=s(KK);xIr=r($Rt,"from_pretrained()"),$Rt.forEach(t),$Ir=r(Sre," class method or the "),ZK=n(Sre,"A",{href:!0});var kRt=s(ZK);kIr=r(kRt,"from_config()"),kRt.forEach(t),SIr=r(Sre,` class
method.`),Sre.forEach(t),RIr=i(Zl),Px=n(Zl,"P",{});var fze=s(Px);PIr=r(fze,"This class cannot be instantiated directly using "),OMe=n(fze,"CODE",{});var SRt=s(OMe);BIr=r(SRt,"__init__()"),SRt.forEach(t),IIr=r(fze," (throws an error)."),fze.forEach(t),NIr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var K6=s(Wt);T(Bx.$$.fragment,K6),qIr=i(K6),VMe=n(K6,"P",{});var RRt=s(VMe);jIr=r(RRt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),RRt.forEach(t),DIr=i(K6),Qc=n(K6,"P",{});var Rre=s(Qc);GIr=r(Rre,`Note:
Loading a model from its configuration file does `),XMe=n(Rre,"STRONG",{});var PRt=s(XMe);OIr=r(PRt,"not"),PRt.forEach(t),VIr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(Rre,"A",{href:!0});var BRt=s(eZ);XIr=r(BRt,"from_pretrained()"),BRt.forEach(t),zIr=r(Rre," to load the model weights."),Rre.forEach(t),WIr=i(K6),T(HC.$$.fragment,K6),K6.forEach(t),QIr=i(Zl),Or=n(Zl,"DIV",{class:!0});var ei=s(Or);T(Ix.$$.fragment,ei),HIr=i(ei),zMe=n(ei,"P",{});var IRt=s(zMe);UIr=r(IRt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),IRt.forEach(t),JIr=i(ei),Fn=n(ei,"P",{});var Z6=s(Fn);YIr=r(Z6,"The model class to instantiate is selected based on the "),WMe=n(Z6,"CODE",{});var NRt=s(WMe);KIr=r(NRt,"model_type"),NRt.forEach(t),ZIr=r(Z6,` property of the config object (either
passed as an argument or loaded from `),QMe=n(Z6,"CODE",{});var qRt=s(QMe);eNr=r(qRt,"pretrained_model_name_or_path"),qRt.forEach(t),oNr=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HMe=n(Z6,"CODE",{});var jRt=s(HMe);rNr=r(jRt,"pretrained_model_name_or_path"),jRt.forEach(t),tNr=r(Z6,":"),Z6.forEach(t),aNr=i(ei),xe=n(ei,"UL",{});var Ne=s(xe);UC=n(Ne,"LI",{});var Vje=s(UC);UMe=n(Vje,"STRONG",{});var DRt=s(UMe);nNr=r(DRt,"bart"),DRt.forEach(t),sNr=r(Vje," \u2014 "),oZ=n(Vje,"A",{href:!0});var GRt=s(oZ);lNr=r(GRt,"FlaxBartForCausalLM"),GRt.forEach(t),iNr=r(Vje," (BART model)"),Vje.forEach(t),dNr=i(Ne),JC=n(Ne,"LI",{});var Xje=s(JC);JMe=n(Xje,"STRONG",{});var ORt=s(JMe);cNr=r(ORt,"bert"),ORt.forEach(t),fNr=r(Xje," \u2014 "),rZ=n(Xje,"A",{href:!0});var VRt=s(rZ);mNr=r(VRt,"FlaxBertForCausalLM"),VRt.forEach(t),gNr=r(Xje," (BERT model)"),Xje.forEach(t),hNr=i(Ne),YC=n(Ne,"LI",{});var zje=s(YC);YMe=n(zje,"STRONG",{});var XRt=s(YMe);pNr=r(XRt,"big_bird"),XRt.forEach(t),_Nr=r(zje," \u2014 "),tZ=n(zje,"A",{href:!0});var zRt=s(tZ);uNr=r(zRt,"FlaxBigBirdForCausalLM"),zRt.forEach(t),bNr=r(zje," (BigBird model)"),zje.forEach(t),vNr=i(Ne),KC=n(Ne,"LI",{});var Wje=s(KC);KMe=n(Wje,"STRONG",{});var WRt=s(KMe);FNr=r(WRt,"electra"),WRt.forEach(t),TNr=r(Wje," \u2014 "),aZ=n(Wje,"A",{href:!0});var QRt=s(aZ);MNr=r(QRt,"FlaxElectraForCausalLM"),QRt.forEach(t),ENr=r(Wje," (ELECTRA model)"),Wje.forEach(t),CNr=i(Ne),ZC=n(Ne,"LI",{});var Qje=s(ZC);ZMe=n(Qje,"STRONG",{});var HRt=s(ZMe);wNr=r(HRt,"gpt2"),HRt.forEach(t),ANr=r(Qje," \u2014 "),nZ=n(Qje,"A",{href:!0});var URt=s(nZ);LNr=r(URt,"FlaxGPT2LMHeadModel"),URt.forEach(t),yNr=r(Qje," (OpenAI GPT-2 model)"),Qje.forEach(t),xNr=i(Ne),e0=n(Ne,"LI",{});var Hje=s(e0);eEe=n(Hje,"STRONG",{});var JRt=s(eEe);$Nr=r(JRt,"gpt_neo"),JRt.forEach(t),kNr=r(Hje," \u2014 "),sZ=n(Hje,"A",{href:!0});var YRt=s(sZ);SNr=r(YRt,"FlaxGPTNeoForCausalLM"),YRt.forEach(t),RNr=r(Hje," (GPT Neo model)"),Hje.forEach(t),PNr=i(Ne),o0=n(Ne,"LI",{});var Uje=s(o0);oEe=n(Uje,"STRONG",{});var KRt=s(oEe);BNr=r(KRt,"gptj"),KRt.forEach(t),INr=r(Uje," \u2014 "),lZ=n(Uje,"A",{href:!0});var ZRt=s(lZ);NNr=r(ZRt,"FlaxGPTJForCausalLM"),ZRt.forEach(t),qNr=r(Uje," (GPT-J model)"),Uje.forEach(t),jNr=i(Ne),r0=n(Ne,"LI",{});var Jje=s(r0);rEe=n(Jje,"STRONG",{});var ePt=s(rEe);DNr=r(ePt,"opt"),ePt.forEach(t),GNr=r(Jje," \u2014 "),iZ=n(Jje,"A",{href:!0});var oPt=s(iZ);ONr=r(oPt,"FlaxOPTForCausalLM"),oPt.forEach(t),VNr=r(Jje," (OPT model)"),Jje.forEach(t),XNr=i(Ne),t0=n(Ne,"LI",{});var Yje=s(t0);tEe=n(Yje,"STRONG",{});var rPt=s(tEe);zNr=r(rPt,"roberta"),rPt.forEach(t),WNr=r(Yje," \u2014 "),dZ=n(Yje,"A",{href:!0});var tPt=s(dZ);QNr=r(tPt,"FlaxRobertaForCausalLM"),tPt.forEach(t),HNr=r(Yje," (RoBERTa model)"),Yje.forEach(t),UNr=i(Ne),a0=n(Ne,"LI",{});var Kje=s(a0);aEe=n(Kje,"STRONG",{});var aPt=s(aEe);JNr=r(aPt,"xglm"),aPt.forEach(t),YNr=r(Kje," \u2014 "),cZ=n(Kje,"A",{href:!0});var nPt=s(cZ);KNr=r(nPt,"FlaxXGLMForCausalLM"),nPt.forEach(t),ZNr=r(Kje," (XGLM model)"),Kje.forEach(t),Ne.forEach(t),eqr=i(ei),T(n0.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),tVe=i(f),Hc=n(f,"H2",{class:!0});var mze=s(Hc);s0=n(mze,"A",{id:!0,class:!0,href:!0});var sPt=s(s0);nEe=n(sPt,"SPAN",{});var lPt=s(nEe);T(Nx.$$.fragment,lPt),lPt.forEach(t),sPt.forEach(t),oqr=i(mze),sEe=n(mze,"SPAN",{});var iPt=s(sEe);rqr=r(iPt,"FlaxAutoModelForPreTraining"),iPt.forEach(t),mze.forEach(t),aVe=i(f),pr=n(f,"DIV",{class:!0});var oi=s(pr);T(qx.$$.fragment,oi),tqr=i(oi),Uc=n(oi,"P",{});var Pre=s(Uc);aqr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fZ=n(Pre,"A",{href:!0});var dPt=s(fZ);nqr=r(dPt,"from_pretrained()"),dPt.forEach(t),sqr=r(Pre," class method or the "),mZ=n(Pre,"A",{href:!0});var cPt=s(mZ);lqr=r(cPt,"from_config()"),cPt.forEach(t),iqr=r(Pre,` class
method.`),Pre.forEach(t),dqr=i(oi),jx=n(oi,"P",{});var gze=s(jx);cqr=r(gze,"This class cannot be instantiated directly using "),lEe=n(gze,"CODE",{});var fPt=s(lEe);fqr=r(fPt,"__init__()"),fPt.forEach(t),mqr=r(gze," (throws an error)."),gze.forEach(t),gqr=i(oi),Qt=n(oi,"DIV",{class:!0});var eL=s(Qt);T(Dx.$$.fragment,eL),hqr=i(eL),iEe=n(eL,"P",{});var mPt=s(iEe);pqr=r(mPt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mPt.forEach(t),_qr=i(eL),Jc=n(eL,"P",{});var Bre=s(Jc);uqr=r(Bre,`Note:
Loading a model from its configuration file does `),dEe=n(Bre,"STRONG",{});var gPt=s(dEe);bqr=r(gPt,"not"),gPt.forEach(t),vqr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=n(Bre,"A",{href:!0});var hPt=s(gZ);Fqr=r(hPt,"from_pretrained()"),hPt.forEach(t),Tqr=r(Bre," to load the model weights."),Bre.forEach(t),Mqr=i(eL),T(l0.$$.fragment,eL),eL.forEach(t),Eqr=i(oi),Vr=n(oi,"DIV",{class:!0});var ri=s(Vr);T(Gx.$$.fragment,ri),Cqr=i(ri),cEe=n(ri,"P",{});var pPt=s(cEe);wqr=r(pPt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pPt.forEach(t),Aqr=i(ri),Tn=n(ri,"P",{});var oL=s(Tn);Lqr=r(oL,"The model class to instantiate is selected based on the "),fEe=n(oL,"CODE",{});var _Pt=s(fEe);yqr=r(_Pt,"model_type"),_Pt.forEach(t),xqr=r(oL,` property of the config object (either
passed as an argument or loaded from `),mEe=n(oL,"CODE",{});var uPt=s(mEe);$qr=r(uPt,"pretrained_model_name_or_path"),uPt.forEach(t),kqr=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gEe=n(oL,"CODE",{});var bPt=s(gEe);Sqr=r(bPt,"pretrained_model_name_or_path"),bPt.forEach(t),Rqr=r(oL,":"),oL.forEach(t),Pqr=i(ri),Ee=n(ri,"UL",{});var we=s(Ee);i0=n(we,"LI",{});var Zje=s(i0);hEe=n(Zje,"STRONG",{});var vPt=s(hEe);Bqr=r(vPt,"albert"),vPt.forEach(t),Iqr=r(Zje," \u2014 "),hZ=n(Zje,"A",{href:!0});var FPt=s(hZ);Nqr=r(FPt,"FlaxAlbertForPreTraining"),FPt.forEach(t),qqr=r(Zje," (ALBERT model)"),Zje.forEach(t),jqr=i(we),d0=n(we,"LI",{});var eDe=s(d0);pEe=n(eDe,"STRONG",{});var TPt=s(pEe);Dqr=r(TPt,"bart"),TPt.forEach(t),Gqr=r(eDe," \u2014 "),pZ=n(eDe,"A",{href:!0});var MPt=s(pZ);Oqr=r(MPt,"FlaxBartForConditionalGeneration"),MPt.forEach(t),Vqr=r(eDe," (BART model)"),eDe.forEach(t),Xqr=i(we),c0=n(we,"LI",{});var oDe=s(c0);_Ee=n(oDe,"STRONG",{});var EPt=s(_Ee);zqr=r(EPt,"bert"),EPt.forEach(t),Wqr=r(oDe," \u2014 "),_Z=n(oDe,"A",{href:!0});var CPt=s(_Z);Qqr=r(CPt,"FlaxBertForPreTraining"),CPt.forEach(t),Hqr=r(oDe," (BERT model)"),oDe.forEach(t),Uqr=i(we),f0=n(we,"LI",{});var rDe=s(f0);uEe=n(rDe,"STRONG",{});var wPt=s(uEe);Jqr=r(wPt,"big_bird"),wPt.forEach(t),Yqr=r(rDe," \u2014 "),uZ=n(rDe,"A",{href:!0});var APt=s(uZ);Kqr=r(APt,"FlaxBigBirdForPreTraining"),APt.forEach(t),Zqr=r(rDe," (BigBird model)"),rDe.forEach(t),ejr=i(we),m0=n(we,"LI",{});var tDe=s(m0);bEe=n(tDe,"STRONG",{});var LPt=s(bEe);ojr=r(LPt,"electra"),LPt.forEach(t),rjr=r(tDe," \u2014 "),bZ=n(tDe,"A",{href:!0});var yPt=s(bZ);tjr=r(yPt,"FlaxElectraForPreTraining"),yPt.forEach(t),ajr=r(tDe," (ELECTRA model)"),tDe.forEach(t),njr=i(we),g0=n(we,"LI",{});var aDe=s(g0);vEe=n(aDe,"STRONG",{});var xPt=s(vEe);sjr=r(xPt,"longt5"),xPt.forEach(t),ljr=r(aDe," \u2014 "),vZ=n(aDe,"A",{href:!0});var $Pt=s(vZ);ijr=r($Pt,"FlaxLongT5ForConditionalGeneration"),$Pt.forEach(t),djr=r(aDe," (LongT5 model)"),aDe.forEach(t),cjr=i(we),h0=n(we,"LI",{});var nDe=s(h0);FEe=n(nDe,"STRONG",{});var kPt=s(FEe);fjr=r(kPt,"mbart"),kPt.forEach(t),mjr=r(nDe," \u2014 "),FZ=n(nDe,"A",{href:!0});var SPt=s(FZ);gjr=r(SPt,"FlaxMBartForConditionalGeneration"),SPt.forEach(t),hjr=r(nDe," (mBART model)"),nDe.forEach(t),pjr=i(we),p0=n(we,"LI",{});var sDe=s(p0);TEe=n(sDe,"STRONG",{});var RPt=s(TEe);_jr=r(RPt,"mt5"),RPt.forEach(t),ujr=r(sDe," \u2014 "),TZ=n(sDe,"A",{href:!0});var PPt=s(TZ);bjr=r(PPt,"FlaxMT5ForConditionalGeneration"),PPt.forEach(t),vjr=r(sDe," (MT5 model)"),sDe.forEach(t),Fjr=i(we),_0=n(we,"LI",{});var lDe=s(_0);MEe=n(lDe,"STRONG",{});var BPt=s(MEe);Tjr=r(BPt,"roberta"),BPt.forEach(t),Mjr=r(lDe," \u2014 "),MZ=n(lDe,"A",{href:!0});var IPt=s(MZ);Ejr=r(IPt,"FlaxRobertaForMaskedLM"),IPt.forEach(t),Cjr=r(lDe," (RoBERTa model)"),lDe.forEach(t),wjr=i(we),u0=n(we,"LI",{});var iDe=s(u0);EEe=n(iDe,"STRONG",{});var NPt=s(EEe);Ajr=r(NPt,"roformer"),NPt.forEach(t),Ljr=r(iDe," \u2014 "),EZ=n(iDe,"A",{href:!0});var qPt=s(EZ);yjr=r(qPt,"FlaxRoFormerForMaskedLM"),qPt.forEach(t),xjr=r(iDe," (RoFormer model)"),iDe.forEach(t),$jr=i(we),b0=n(we,"LI",{});var dDe=s(b0);CEe=n(dDe,"STRONG",{});var jPt=s(CEe);kjr=r(jPt,"t5"),jPt.forEach(t),Sjr=r(dDe," \u2014 "),CZ=n(dDe,"A",{href:!0});var DPt=s(CZ);Rjr=r(DPt,"FlaxT5ForConditionalGeneration"),DPt.forEach(t),Pjr=r(dDe," (T5 model)"),dDe.forEach(t),Bjr=i(we),v0=n(we,"LI",{});var cDe=s(v0);wEe=n(cDe,"STRONG",{});var GPt=s(wEe);Ijr=r(GPt,"wav2vec2"),GPt.forEach(t),Njr=r(cDe," \u2014 "),wZ=n(cDe,"A",{href:!0});var OPt=s(wZ);qjr=r(OPt,"FlaxWav2Vec2ForPreTraining"),OPt.forEach(t),jjr=r(cDe," (Wav2Vec2 model)"),cDe.forEach(t),Djr=i(we),F0=n(we,"LI",{});var fDe=s(F0);AEe=n(fDe,"STRONG",{});var VPt=s(AEe);Gjr=r(VPt,"xlm-roberta"),VPt.forEach(t),Ojr=r(fDe," \u2014 "),AZ=n(fDe,"A",{href:!0});var XPt=s(AZ);Vjr=r(XPt,"FlaxXLMRobertaForMaskedLM"),XPt.forEach(t),Xjr=r(fDe," (XLM-RoBERTa model)"),fDe.forEach(t),we.forEach(t),zjr=i(ri),T(T0.$$.fragment,ri),ri.forEach(t),oi.forEach(t),nVe=i(f),Yc=n(f,"H2",{class:!0});var hze=s(Yc);M0=n(hze,"A",{id:!0,class:!0,href:!0});var zPt=s(M0);LEe=n(zPt,"SPAN",{});var WPt=s(LEe);T(Ox.$$.fragment,WPt),WPt.forEach(t),zPt.forEach(t),Wjr=i(hze),yEe=n(hze,"SPAN",{});var QPt=s(yEe);Qjr=r(QPt,"FlaxAutoModelForMaskedLM"),QPt.forEach(t),hze.forEach(t),sVe=i(f),_r=n(f,"DIV",{class:!0});var ti=s(_r);T(Vx.$$.fragment,ti),Hjr=i(ti),Kc=n(ti,"P",{});var Ire=s(Kc);Ujr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LZ=n(Ire,"A",{href:!0});var HPt=s(LZ);Jjr=r(HPt,"from_pretrained()"),HPt.forEach(t),Yjr=r(Ire," class method or the "),yZ=n(Ire,"A",{href:!0});var UPt=s(yZ);Kjr=r(UPt,"from_config()"),UPt.forEach(t),Zjr=r(Ire,` class
method.`),Ire.forEach(t),eDr=i(ti),Xx=n(ti,"P",{});var pze=s(Xx);oDr=r(pze,"This class cannot be instantiated directly using "),xEe=n(pze,"CODE",{});var JPt=s(xEe);rDr=r(JPt,"__init__()"),JPt.forEach(t),tDr=r(pze," (throws an error)."),pze.forEach(t),aDr=i(ti),Ht=n(ti,"DIV",{class:!0});var rL=s(Ht);T(zx.$$.fragment,rL),nDr=i(rL),$Ee=n(rL,"P",{});var YPt=s($Ee);sDr=r(YPt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),YPt.forEach(t),lDr=i(rL),Zc=n(rL,"P",{});var Nre=s(Zc);iDr=r(Nre,`Note:
Loading a model from its configuration file does `),kEe=n(Nre,"STRONG",{});var KPt=s(kEe);dDr=r(KPt,"not"),KPt.forEach(t),cDr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),xZ=n(Nre,"A",{href:!0});var ZPt=s(xZ);fDr=r(ZPt,"from_pretrained()"),ZPt.forEach(t),mDr=r(Nre," to load the model weights."),Nre.forEach(t),gDr=i(rL),T(E0.$$.fragment,rL),rL.forEach(t),hDr=i(ti),Xr=n(ti,"DIV",{class:!0});var ai=s(Xr);T(Wx.$$.fragment,ai),pDr=i(ai),SEe=n(ai,"P",{});var eBt=s(SEe);_Dr=r(eBt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),eBt.forEach(t),uDr=i(ai),Mn=n(ai,"P",{});var tL=s(Mn);bDr=r(tL,"The model class to instantiate is selected based on the "),REe=n(tL,"CODE",{});var oBt=s(REe);vDr=r(oBt,"model_type"),oBt.forEach(t),FDr=r(tL,` property of the config object (either
passed as an argument or loaded from `),PEe=n(tL,"CODE",{});var rBt=s(PEe);TDr=r(rBt,"pretrained_model_name_or_path"),rBt.forEach(t),MDr=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BEe=n(tL,"CODE",{});var tBt=s(BEe);EDr=r(tBt,"pretrained_model_name_or_path"),tBt.forEach(t),CDr=r(tL,":"),tL.forEach(t),wDr=i(ai),$e=n(ai,"UL",{});var qe=s($e);C0=n(qe,"LI",{});var mDe=s(C0);IEe=n(mDe,"STRONG",{});var aBt=s(IEe);ADr=r(aBt,"albert"),aBt.forEach(t),LDr=r(mDe," \u2014 "),$Z=n(mDe,"A",{href:!0});var nBt=s($Z);yDr=r(nBt,"FlaxAlbertForMaskedLM"),nBt.forEach(t),xDr=r(mDe," (ALBERT model)"),mDe.forEach(t),$Dr=i(qe),w0=n(qe,"LI",{});var gDe=s(w0);NEe=n(gDe,"STRONG",{});var sBt=s(NEe);kDr=r(sBt,"bart"),sBt.forEach(t),SDr=r(gDe," \u2014 "),kZ=n(gDe,"A",{href:!0});var lBt=s(kZ);RDr=r(lBt,"FlaxBartForConditionalGeneration"),lBt.forEach(t),PDr=r(gDe," (BART model)"),gDe.forEach(t),BDr=i(qe),A0=n(qe,"LI",{});var hDe=s(A0);qEe=n(hDe,"STRONG",{});var iBt=s(qEe);IDr=r(iBt,"bert"),iBt.forEach(t),NDr=r(hDe," \u2014 "),SZ=n(hDe,"A",{href:!0});var dBt=s(SZ);qDr=r(dBt,"FlaxBertForMaskedLM"),dBt.forEach(t),jDr=r(hDe," (BERT model)"),hDe.forEach(t),DDr=i(qe),L0=n(qe,"LI",{});var pDe=s(L0);jEe=n(pDe,"STRONG",{});var cBt=s(jEe);GDr=r(cBt,"big_bird"),cBt.forEach(t),ODr=r(pDe," \u2014 "),RZ=n(pDe,"A",{href:!0});var fBt=s(RZ);VDr=r(fBt,"FlaxBigBirdForMaskedLM"),fBt.forEach(t),XDr=r(pDe," (BigBird model)"),pDe.forEach(t),zDr=i(qe),y0=n(qe,"LI",{});var _De=s(y0);DEe=n(_De,"STRONG",{});var mBt=s(DEe);WDr=r(mBt,"distilbert"),mBt.forEach(t),QDr=r(_De," \u2014 "),PZ=n(_De,"A",{href:!0});var gBt=s(PZ);HDr=r(gBt,"FlaxDistilBertForMaskedLM"),gBt.forEach(t),UDr=r(_De," (DistilBERT model)"),_De.forEach(t),JDr=i(qe),x0=n(qe,"LI",{});var uDe=s(x0);GEe=n(uDe,"STRONG",{});var hBt=s(GEe);YDr=r(hBt,"electra"),hBt.forEach(t),KDr=r(uDe," \u2014 "),BZ=n(uDe,"A",{href:!0});var pBt=s(BZ);ZDr=r(pBt,"FlaxElectraForMaskedLM"),pBt.forEach(t),eGr=r(uDe," (ELECTRA model)"),uDe.forEach(t),oGr=i(qe),$0=n(qe,"LI",{});var bDe=s($0);OEe=n(bDe,"STRONG",{});var _Bt=s(OEe);rGr=r(_Bt,"mbart"),_Bt.forEach(t),tGr=r(bDe," \u2014 "),IZ=n(bDe,"A",{href:!0});var uBt=s(IZ);aGr=r(uBt,"FlaxMBartForConditionalGeneration"),uBt.forEach(t),nGr=r(bDe," (mBART model)"),bDe.forEach(t),sGr=i(qe),k0=n(qe,"LI",{});var vDe=s(k0);VEe=n(vDe,"STRONG",{});var bBt=s(VEe);lGr=r(bBt,"roberta"),bBt.forEach(t),iGr=r(vDe," \u2014 "),NZ=n(vDe,"A",{href:!0});var vBt=s(NZ);dGr=r(vBt,"FlaxRobertaForMaskedLM"),vBt.forEach(t),cGr=r(vDe," (RoBERTa model)"),vDe.forEach(t),fGr=i(qe),S0=n(qe,"LI",{});var FDe=s(S0);XEe=n(FDe,"STRONG",{});var FBt=s(XEe);mGr=r(FBt,"roformer"),FBt.forEach(t),gGr=r(FDe," \u2014 "),qZ=n(FDe,"A",{href:!0});var TBt=s(qZ);hGr=r(TBt,"FlaxRoFormerForMaskedLM"),TBt.forEach(t),pGr=r(FDe," (RoFormer model)"),FDe.forEach(t),_Gr=i(qe),R0=n(qe,"LI",{});var TDe=s(R0);zEe=n(TDe,"STRONG",{});var MBt=s(zEe);uGr=r(MBt,"xlm-roberta"),MBt.forEach(t),bGr=r(TDe," \u2014 "),jZ=n(TDe,"A",{href:!0});var EBt=s(jZ);vGr=r(EBt,"FlaxXLMRobertaForMaskedLM"),EBt.forEach(t),FGr=r(TDe," (XLM-RoBERTa model)"),TDe.forEach(t),qe.forEach(t),TGr=i(ai),T(P0.$$.fragment,ai),ai.forEach(t),ti.forEach(t),lVe=i(f),ef=n(f,"H2",{class:!0});var _ze=s(ef);B0=n(_ze,"A",{id:!0,class:!0,href:!0});var CBt=s(B0);WEe=n(CBt,"SPAN",{});var wBt=s(WEe);T(Qx.$$.fragment,wBt),wBt.forEach(t),CBt.forEach(t),MGr=i(_ze),QEe=n(_ze,"SPAN",{});var ABt=s(QEe);EGr=r(ABt,"FlaxAutoModelForSeq2SeqLM"),ABt.forEach(t),_ze.forEach(t),iVe=i(f),ur=n(f,"DIV",{class:!0});var ni=s(ur);T(Hx.$$.fragment,ni),CGr=i(ni),of=n(ni,"P",{});var qre=s(of);wGr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),DZ=n(qre,"A",{href:!0});var LBt=s(DZ);AGr=r(LBt,"from_pretrained()"),LBt.forEach(t),LGr=r(qre," class method or the "),GZ=n(qre,"A",{href:!0});var yBt=s(GZ);yGr=r(yBt,"from_config()"),yBt.forEach(t),xGr=r(qre,` class
method.`),qre.forEach(t),$Gr=i(ni),Ux=n(ni,"P",{});var uze=s(Ux);kGr=r(uze,"This class cannot be instantiated directly using "),HEe=n(uze,"CODE",{});var xBt=s(HEe);SGr=r(xBt,"__init__()"),xBt.forEach(t),RGr=r(uze," (throws an error)."),uze.forEach(t),PGr=i(ni),Ut=n(ni,"DIV",{class:!0});var aL=s(Ut);T(Jx.$$.fragment,aL),BGr=i(aL),UEe=n(aL,"P",{});var $Bt=s(UEe);IGr=r($Bt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$Bt.forEach(t),NGr=i(aL),rf=n(aL,"P",{});var jre=s(rf);qGr=r(jre,`Note:
Loading a model from its configuration file does `),JEe=n(jre,"STRONG",{});var kBt=s(JEe);jGr=r(kBt,"not"),kBt.forEach(t),DGr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=n(jre,"A",{href:!0});var SBt=s(OZ);GGr=r(SBt,"from_pretrained()"),SBt.forEach(t),OGr=r(jre," to load the model weights."),jre.forEach(t),VGr=i(aL),T(I0.$$.fragment,aL),aL.forEach(t),XGr=i(ni),zr=n(ni,"DIV",{class:!0});var si=s(zr);T(Yx.$$.fragment,si),zGr=i(si),YEe=n(si,"P",{});var RBt=s(YEe);WGr=r(RBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),RBt.forEach(t),QGr=i(si),En=n(si,"P",{});var nL=s(En);HGr=r(nL,"The model class to instantiate is selected based on the "),KEe=n(nL,"CODE",{});var PBt=s(KEe);UGr=r(PBt,"model_type"),PBt.forEach(t),JGr=r(nL,` property of the config object (either
passed as an argument or loaded from `),ZEe=n(nL,"CODE",{});var BBt=s(ZEe);YGr=r(BBt,"pretrained_model_name_or_path"),BBt.forEach(t),KGr=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eCe=n(nL,"CODE",{});var IBt=s(eCe);ZGr=r(IBt,"pretrained_model_name_or_path"),IBt.forEach(t),eOr=r(nL,":"),nL.forEach(t),oOr=i(si),ke=n(si,"UL",{});var je=s(ke);N0=n(je,"LI",{});var MDe=s(N0);oCe=n(MDe,"STRONG",{});var NBt=s(oCe);rOr=r(NBt,"bart"),NBt.forEach(t),tOr=r(MDe," \u2014 "),VZ=n(MDe,"A",{href:!0});var qBt=s(VZ);aOr=r(qBt,"FlaxBartForConditionalGeneration"),qBt.forEach(t),nOr=r(MDe," (BART model)"),MDe.forEach(t),sOr=i(je),q0=n(je,"LI",{});var EDe=s(q0);rCe=n(EDe,"STRONG",{});var jBt=s(rCe);lOr=r(jBt,"blenderbot"),jBt.forEach(t),iOr=r(EDe," \u2014 "),XZ=n(EDe,"A",{href:!0});var DBt=s(XZ);dOr=r(DBt,"FlaxBlenderbotForConditionalGeneration"),DBt.forEach(t),cOr=r(EDe," (Blenderbot model)"),EDe.forEach(t),fOr=i(je),j0=n(je,"LI",{});var CDe=s(j0);tCe=n(CDe,"STRONG",{});var GBt=s(tCe);mOr=r(GBt,"blenderbot-small"),GBt.forEach(t),gOr=r(CDe," \u2014 "),zZ=n(CDe,"A",{href:!0});var OBt=s(zZ);hOr=r(OBt,"FlaxBlenderbotSmallForConditionalGeneration"),OBt.forEach(t),pOr=r(CDe," (BlenderbotSmall model)"),CDe.forEach(t),_Or=i(je),D0=n(je,"LI",{});var wDe=s(D0);aCe=n(wDe,"STRONG",{});var VBt=s(aCe);uOr=r(VBt,"encoder-decoder"),VBt.forEach(t),bOr=r(wDe," \u2014 "),WZ=n(wDe,"A",{href:!0});var XBt=s(WZ);vOr=r(XBt,"FlaxEncoderDecoderModel"),XBt.forEach(t),FOr=r(wDe," (Encoder decoder model)"),wDe.forEach(t),TOr=i(je),G0=n(je,"LI",{});var ADe=s(G0);nCe=n(ADe,"STRONG",{});var zBt=s(nCe);MOr=r(zBt,"longt5"),zBt.forEach(t),EOr=r(ADe," \u2014 "),QZ=n(ADe,"A",{href:!0});var WBt=s(QZ);COr=r(WBt,"FlaxLongT5ForConditionalGeneration"),WBt.forEach(t),wOr=r(ADe," (LongT5 model)"),ADe.forEach(t),AOr=i(je),O0=n(je,"LI",{});var LDe=s(O0);sCe=n(LDe,"STRONG",{});var QBt=s(sCe);LOr=r(QBt,"marian"),QBt.forEach(t),yOr=r(LDe," \u2014 "),HZ=n(LDe,"A",{href:!0});var HBt=s(HZ);xOr=r(HBt,"FlaxMarianMTModel"),HBt.forEach(t),$Or=r(LDe," (Marian model)"),LDe.forEach(t),kOr=i(je),V0=n(je,"LI",{});var yDe=s(V0);lCe=n(yDe,"STRONG",{});var UBt=s(lCe);SOr=r(UBt,"mbart"),UBt.forEach(t),ROr=r(yDe," \u2014 "),UZ=n(yDe,"A",{href:!0});var JBt=s(UZ);POr=r(JBt,"FlaxMBartForConditionalGeneration"),JBt.forEach(t),BOr=r(yDe," (mBART model)"),yDe.forEach(t),IOr=i(je),X0=n(je,"LI",{});var xDe=s(X0);iCe=n(xDe,"STRONG",{});var YBt=s(iCe);NOr=r(YBt,"mt5"),YBt.forEach(t),qOr=r(xDe," \u2014 "),JZ=n(xDe,"A",{href:!0});var KBt=s(JZ);jOr=r(KBt,"FlaxMT5ForConditionalGeneration"),KBt.forEach(t),DOr=r(xDe," (MT5 model)"),xDe.forEach(t),GOr=i(je),z0=n(je,"LI",{});var $De=s(z0);dCe=n($De,"STRONG",{});var ZBt=s(dCe);OOr=r(ZBt,"pegasus"),ZBt.forEach(t),VOr=r($De," \u2014 "),YZ=n($De,"A",{href:!0});var eIt=s(YZ);XOr=r(eIt,"FlaxPegasusForConditionalGeneration"),eIt.forEach(t),zOr=r($De," (Pegasus model)"),$De.forEach(t),WOr=i(je),W0=n(je,"LI",{});var kDe=s(W0);cCe=n(kDe,"STRONG",{});var oIt=s(cCe);QOr=r(oIt,"t5"),oIt.forEach(t),HOr=r(kDe," \u2014 "),KZ=n(kDe,"A",{href:!0});var rIt=s(KZ);UOr=r(rIt,"FlaxT5ForConditionalGeneration"),rIt.forEach(t),JOr=r(kDe," (T5 model)"),kDe.forEach(t),je.forEach(t),YOr=i(si),T(Q0.$$.fragment,si),si.forEach(t),ni.forEach(t),dVe=i(f),tf=n(f,"H2",{class:!0});var bze=s(tf);H0=n(bze,"A",{id:!0,class:!0,href:!0});var tIt=s(H0);fCe=n(tIt,"SPAN",{});var aIt=s(fCe);T(Kx.$$.fragment,aIt),aIt.forEach(t),tIt.forEach(t),KOr=i(bze),mCe=n(bze,"SPAN",{});var nIt=s(mCe);ZOr=r(nIt,"FlaxAutoModelForSequenceClassification"),nIt.forEach(t),bze.forEach(t),cVe=i(f),br=n(f,"DIV",{class:!0});var li=s(br);T(Zx.$$.fragment,li),eVr=i(li),af=n(li,"P",{});var Dre=s(af);oVr=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZZ=n(Dre,"A",{href:!0});var sIt=s(ZZ);rVr=r(sIt,"from_pretrained()"),sIt.forEach(t),tVr=r(Dre," class method or the "),eee=n(Dre,"A",{href:!0});var lIt=s(eee);aVr=r(lIt,"from_config()"),lIt.forEach(t),nVr=r(Dre,` class
method.`),Dre.forEach(t),sVr=i(li),e$=n(li,"P",{});var vze=s(e$);lVr=r(vze,"This class cannot be instantiated directly using "),gCe=n(vze,"CODE",{});var iIt=s(gCe);iVr=r(iIt,"__init__()"),iIt.forEach(t),dVr=r(vze," (throws an error)."),vze.forEach(t),cVr=i(li),Jt=n(li,"DIV",{class:!0});var sL=s(Jt);T(o$.$$.fragment,sL),fVr=i(sL),hCe=n(sL,"P",{});var dIt=s(hCe);mVr=r(dIt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dIt.forEach(t),gVr=i(sL),nf=n(sL,"P",{});var Gre=s(nf);hVr=r(Gre,`Note:
Loading a model from its configuration file does `),pCe=n(Gre,"STRONG",{});var cIt=s(pCe);pVr=r(cIt,"not"),cIt.forEach(t),_Vr=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=n(Gre,"A",{href:!0});var fIt=s(oee);uVr=r(fIt,"from_pretrained()"),fIt.forEach(t),bVr=r(Gre," to load the model weights."),Gre.forEach(t),vVr=i(sL),T(U0.$$.fragment,sL),sL.forEach(t),FVr=i(li),Wr=n(li,"DIV",{class:!0});var ii=s(Wr);T(r$.$$.fragment,ii),TVr=i(ii),_Ce=n(ii,"P",{});var mIt=s(_Ce);MVr=r(mIt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mIt.forEach(t),EVr=i(ii),Cn=n(ii,"P",{});var lL=s(Cn);CVr=r(lL,"The model class to instantiate is selected based on the "),uCe=n(lL,"CODE",{});var gIt=s(uCe);wVr=r(gIt,"model_type"),gIt.forEach(t),AVr=r(lL,` property of the config object (either
passed as an argument or loaded from `),bCe=n(lL,"CODE",{});var hIt=s(bCe);LVr=r(hIt,"pretrained_model_name_or_path"),hIt.forEach(t),yVr=r(lL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vCe=n(lL,"CODE",{});var pIt=s(vCe);xVr=r(pIt,"pretrained_model_name_or_path"),pIt.forEach(t),$Vr=r(lL,":"),lL.forEach(t),kVr=i(ii),Se=n(ii,"UL",{});var De=s(Se);J0=n(De,"LI",{});var SDe=s(J0);FCe=n(SDe,"STRONG",{});var _It=s(FCe);SVr=r(_It,"albert"),_It.forEach(t),RVr=r(SDe," \u2014 "),ree=n(SDe,"A",{href:!0});var uIt=s(ree);PVr=r(uIt,"FlaxAlbertForSequenceClassification"),uIt.forEach(t),BVr=r(SDe," (ALBERT model)"),SDe.forEach(t),IVr=i(De),Y0=n(De,"LI",{});var RDe=s(Y0);TCe=n(RDe,"STRONG",{});var bIt=s(TCe);NVr=r(bIt,"bart"),bIt.forEach(t),qVr=r(RDe," \u2014 "),tee=n(RDe,"A",{href:!0});var vIt=s(tee);jVr=r(vIt,"FlaxBartForSequenceClassification"),vIt.forEach(t),DVr=r(RDe," (BART model)"),RDe.forEach(t),GVr=i(De),K0=n(De,"LI",{});var PDe=s(K0);MCe=n(PDe,"STRONG",{});var FIt=s(MCe);OVr=r(FIt,"bert"),FIt.forEach(t),VVr=r(PDe," \u2014 "),aee=n(PDe,"A",{href:!0});var TIt=s(aee);XVr=r(TIt,"FlaxBertForSequenceClassification"),TIt.forEach(t),zVr=r(PDe," (BERT model)"),PDe.forEach(t),WVr=i(De),Z0=n(De,"LI",{});var BDe=s(Z0);ECe=n(BDe,"STRONG",{});var MIt=s(ECe);QVr=r(MIt,"big_bird"),MIt.forEach(t),HVr=r(BDe," \u2014 "),nee=n(BDe,"A",{href:!0});var EIt=s(nee);UVr=r(EIt,"FlaxBigBirdForSequenceClassification"),EIt.forEach(t),JVr=r(BDe," (BigBird model)"),BDe.forEach(t),YVr=i(De),ew=n(De,"LI",{});var IDe=s(ew);CCe=n(IDe,"STRONG",{});var CIt=s(CCe);KVr=r(CIt,"distilbert"),CIt.forEach(t),ZVr=r(IDe," \u2014 "),see=n(IDe,"A",{href:!0});var wIt=s(see);eXr=r(wIt,"FlaxDistilBertForSequenceClassification"),wIt.forEach(t),oXr=r(IDe," (DistilBERT model)"),IDe.forEach(t),rXr=i(De),ow=n(De,"LI",{});var NDe=s(ow);wCe=n(NDe,"STRONG",{});var AIt=s(wCe);tXr=r(AIt,"electra"),AIt.forEach(t),aXr=r(NDe," \u2014 "),lee=n(NDe,"A",{href:!0});var LIt=s(lee);nXr=r(LIt,"FlaxElectraForSequenceClassification"),LIt.forEach(t),sXr=r(NDe," (ELECTRA model)"),NDe.forEach(t),lXr=i(De),rw=n(De,"LI",{});var qDe=s(rw);ACe=n(qDe,"STRONG",{});var yIt=s(ACe);iXr=r(yIt,"mbart"),yIt.forEach(t),dXr=r(qDe," \u2014 "),iee=n(qDe,"A",{href:!0});var xIt=s(iee);cXr=r(xIt,"FlaxMBartForSequenceClassification"),xIt.forEach(t),fXr=r(qDe," (mBART model)"),qDe.forEach(t),mXr=i(De),tw=n(De,"LI",{});var jDe=s(tw);LCe=n(jDe,"STRONG",{});var $It=s(LCe);gXr=r($It,"roberta"),$It.forEach(t),hXr=r(jDe," \u2014 "),dee=n(jDe,"A",{href:!0});var kIt=s(dee);pXr=r(kIt,"FlaxRobertaForSequenceClassification"),kIt.forEach(t),_Xr=r(jDe," (RoBERTa model)"),jDe.forEach(t),uXr=i(De),aw=n(De,"LI",{});var DDe=s(aw);yCe=n(DDe,"STRONG",{});var SIt=s(yCe);bXr=r(SIt,"roformer"),SIt.forEach(t),vXr=r(DDe," \u2014 "),cee=n(DDe,"A",{href:!0});var RIt=s(cee);FXr=r(RIt,"FlaxRoFormerForSequenceClassification"),RIt.forEach(t),TXr=r(DDe," (RoFormer model)"),DDe.forEach(t),MXr=i(De),nw=n(De,"LI",{});var GDe=s(nw);xCe=n(GDe,"STRONG",{});var PIt=s(xCe);EXr=r(PIt,"xlm-roberta"),PIt.forEach(t),CXr=r(GDe," \u2014 "),fee=n(GDe,"A",{href:!0});var BIt=s(fee);wXr=r(BIt,"FlaxXLMRobertaForSequenceClassification"),BIt.forEach(t),AXr=r(GDe," (XLM-RoBERTa model)"),GDe.forEach(t),De.forEach(t),LXr=i(ii),T(sw.$$.fragment,ii),ii.forEach(t),li.forEach(t),fVe=i(f),sf=n(f,"H2",{class:!0});var Fze=s(sf);lw=n(Fze,"A",{id:!0,class:!0,href:!0});var IIt=s(lw);$Ce=n(IIt,"SPAN",{});var NIt=s($Ce);T(t$.$$.fragment,NIt),NIt.forEach(t),IIt.forEach(t),yXr=i(Fze),kCe=n(Fze,"SPAN",{});var qIt=s(kCe);xXr=r(qIt,"FlaxAutoModelForQuestionAnswering"),qIt.forEach(t),Fze.forEach(t),mVe=i(f),vr=n(f,"DIV",{class:!0});var di=s(vr);T(a$.$$.fragment,di),$Xr=i(di),lf=n(di,"P",{});var Ore=s(lf);kXr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mee=n(Ore,"A",{href:!0});var jIt=s(mee);SXr=r(jIt,"from_pretrained()"),jIt.forEach(t),RXr=r(Ore," class method or the "),gee=n(Ore,"A",{href:!0});var DIt=s(gee);PXr=r(DIt,"from_config()"),DIt.forEach(t),BXr=r(Ore,` class
method.`),Ore.forEach(t),IXr=i(di),n$=n(di,"P",{});var Tze=s(n$);NXr=r(Tze,"This class cannot be instantiated directly using "),SCe=n(Tze,"CODE",{});var GIt=s(SCe);qXr=r(GIt,"__init__()"),GIt.forEach(t),jXr=r(Tze," (throws an error)."),Tze.forEach(t),DXr=i(di),Yt=n(di,"DIV",{class:!0});var iL=s(Yt);T(s$.$$.fragment,iL),GXr=i(iL),RCe=n(iL,"P",{});var OIt=s(RCe);OXr=r(OIt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),OIt.forEach(t),VXr=i(iL),df=n(iL,"P",{});var Vre=s(df);XXr=r(Vre,`Note:
Loading a model from its configuration file does `),PCe=n(Vre,"STRONG",{});var VIt=s(PCe);zXr=r(VIt,"not"),VIt.forEach(t),WXr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hee=n(Vre,"A",{href:!0});var XIt=s(hee);QXr=r(XIt,"from_pretrained()"),XIt.forEach(t),HXr=r(Vre," to load the model weights."),Vre.forEach(t),UXr=i(iL),T(iw.$$.fragment,iL),iL.forEach(t),JXr=i(di),Qr=n(di,"DIV",{class:!0});var ci=s(Qr);T(l$.$$.fragment,ci),YXr=i(ci),BCe=n(ci,"P",{});var zIt=s(BCe);KXr=r(zIt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zIt.forEach(t),ZXr=i(ci),wn=n(ci,"P",{});var dL=s(wn);ezr=r(dL,"The model class to instantiate is selected based on the "),ICe=n(dL,"CODE",{});var WIt=s(ICe);ozr=r(WIt,"model_type"),WIt.forEach(t),rzr=r(dL,` property of the config object (either
passed as an argument or loaded from `),NCe=n(dL,"CODE",{});var QIt=s(NCe);tzr=r(QIt,"pretrained_model_name_or_path"),QIt.forEach(t),azr=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qCe=n(dL,"CODE",{});var HIt=s(qCe);nzr=r(HIt,"pretrained_model_name_or_path"),HIt.forEach(t),szr=r(dL,":"),dL.forEach(t),lzr=i(ci),Re=n(ci,"UL",{});var Ge=s(Re);dw=n(Ge,"LI",{});var ODe=s(dw);jCe=n(ODe,"STRONG",{});var UIt=s(jCe);izr=r(UIt,"albert"),UIt.forEach(t),dzr=r(ODe," \u2014 "),pee=n(ODe,"A",{href:!0});var JIt=s(pee);czr=r(JIt,"FlaxAlbertForQuestionAnswering"),JIt.forEach(t),fzr=r(ODe," (ALBERT model)"),ODe.forEach(t),mzr=i(Ge),cw=n(Ge,"LI",{});var VDe=s(cw);DCe=n(VDe,"STRONG",{});var YIt=s(DCe);gzr=r(YIt,"bart"),YIt.forEach(t),hzr=r(VDe," \u2014 "),_ee=n(VDe,"A",{href:!0});var KIt=s(_ee);pzr=r(KIt,"FlaxBartForQuestionAnswering"),KIt.forEach(t),_zr=r(VDe," (BART model)"),VDe.forEach(t),uzr=i(Ge),fw=n(Ge,"LI",{});var XDe=s(fw);GCe=n(XDe,"STRONG",{});var ZIt=s(GCe);bzr=r(ZIt,"bert"),ZIt.forEach(t),vzr=r(XDe," \u2014 "),uee=n(XDe,"A",{href:!0});var eNt=s(uee);Fzr=r(eNt,"FlaxBertForQuestionAnswering"),eNt.forEach(t),Tzr=r(XDe," (BERT model)"),XDe.forEach(t),Mzr=i(Ge),mw=n(Ge,"LI",{});var zDe=s(mw);OCe=n(zDe,"STRONG",{});var oNt=s(OCe);Ezr=r(oNt,"big_bird"),oNt.forEach(t),Czr=r(zDe," \u2014 "),bee=n(zDe,"A",{href:!0});var rNt=s(bee);wzr=r(rNt,"FlaxBigBirdForQuestionAnswering"),rNt.forEach(t),Azr=r(zDe," (BigBird model)"),zDe.forEach(t),Lzr=i(Ge),gw=n(Ge,"LI",{});var WDe=s(gw);VCe=n(WDe,"STRONG",{});var tNt=s(VCe);yzr=r(tNt,"distilbert"),tNt.forEach(t),xzr=r(WDe," \u2014 "),vee=n(WDe,"A",{href:!0});var aNt=s(vee);$zr=r(aNt,"FlaxDistilBertForQuestionAnswering"),aNt.forEach(t),kzr=r(WDe," (DistilBERT model)"),WDe.forEach(t),Szr=i(Ge),hw=n(Ge,"LI",{});var QDe=s(hw);XCe=n(QDe,"STRONG",{});var nNt=s(XCe);Rzr=r(nNt,"electra"),nNt.forEach(t),Pzr=r(QDe," \u2014 "),Fee=n(QDe,"A",{href:!0});var sNt=s(Fee);Bzr=r(sNt,"FlaxElectraForQuestionAnswering"),sNt.forEach(t),Izr=r(QDe," (ELECTRA model)"),QDe.forEach(t),Nzr=i(Ge),pw=n(Ge,"LI",{});var HDe=s(pw);zCe=n(HDe,"STRONG",{});var lNt=s(zCe);qzr=r(lNt,"mbart"),lNt.forEach(t),jzr=r(HDe," \u2014 "),Tee=n(HDe,"A",{href:!0});var iNt=s(Tee);Dzr=r(iNt,"FlaxMBartForQuestionAnswering"),iNt.forEach(t),Gzr=r(HDe," (mBART model)"),HDe.forEach(t),Ozr=i(Ge),_w=n(Ge,"LI",{});var UDe=s(_w);WCe=n(UDe,"STRONG",{});var dNt=s(WCe);Vzr=r(dNt,"roberta"),dNt.forEach(t),Xzr=r(UDe," \u2014 "),Mee=n(UDe,"A",{href:!0});var cNt=s(Mee);zzr=r(cNt,"FlaxRobertaForQuestionAnswering"),cNt.forEach(t),Wzr=r(UDe," (RoBERTa model)"),UDe.forEach(t),Qzr=i(Ge),uw=n(Ge,"LI",{});var JDe=s(uw);QCe=n(JDe,"STRONG",{});var fNt=s(QCe);Hzr=r(fNt,"roformer"),fNt.forEach(t),Uzr=r(JDe," \u2014 "),Eee=n(JDe,"A",{href:!0});var mNt=s(Eee);Jzr=r(mNt,"FlaxRoFormerForQuestionAnswering"),mNt.forEach(t),Yzr=r(JDe," (RoFormer model)"),JDe.forEach(t),Kzr=i(Ge),bw=n(Ge,"LI",{});var YDe=s(bw);HCe=n(YDe,"STRONG",{});var gNt=s(HCe);Zzr=r(gNt,"xlm-roberta"),gNt.forEach(t),eWr=r(YDe," \u2014 "),Cee=n(YDe,"A",{href:!0});var hNt=s(Cee);oWr=r(hNt,"FlaxXLMRobertaForQuestionAnswering"),hNt.forEach(t),rWr=r(YDe," (XLM-RoBERTa model)"),YDe.forEach(t),Ge.forEach(t),tWr=i(ci),T(vw.$$.fragment,ci),ci.forEach(t),di.forEach(t),gVe=i(f),cf=n(f,"H2",{class:!0});var Mze=s(cf);Fw=n(Mze,"A",{id:!0,class:!0,href:!0});var pNt=s(Fw);UCe=n(pNt,"SPAN",{});var _Nt=s(UCe);T(i$.$$.fragment,_Nt),_Nt.forEach(t),pNt.forEach(t),aWr=i(Mze),JCe=n(Mze,"SPAN",{});var uNt=s(JCe);nWr=r(uNt,"FlaxAutoModelForTokenClassification"),uNt.forEach(t),Mze.forEach(t),hVe=i(f),Fr=n(f,"DIV",{class:!0});var fi=s(Fr);T(d$.$$.fragment,fi),sWr=i(fi),ff=n(fi,"P",{});var Xre=s(ff);lWr=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wee=n(Xre,"A",{href:!0});var bNt=s(wee);iWr=r(bNt,"from_pretrained()"),bNt.forEach(t),dWr=r(Xre," class method or the "),Aee=n(Xre,"A",{href:!0});var vNt=s(Aee);cWr=r(vNt,"from_config()"),vNt.forEach(t),fWr=r(Xre,` class
method.`),Xre.forEach(t),mWr=i(fi),c$=n(fi,"P",{});var Eze=s(c$);gWr=r(Eze,"This class cannot be instantiated directly using "),YCe=n(Eze,"CODE",{});var FNt=s(YCe);hWr=r(FNt,"__init__()"),FNt.forEach(t),pWr=r(Eze," (throws an error)."),Eze.forEach(t),_Wr=i(fi),Kt=n(fi,"DIV",{class:!0});var cL=s(Kt);T(f$.$$.fragment,cL),uWr=i(cL),KCe=n(cL,"P",{});var TNt=s(KCe);bWr=r(TNt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),TNt.forEach(t),vWr=i(cL),mf=n(cL,"P",{});var zre=s(mf);FWr=r(zre,`Note:
Loading a model from its configuration file does `),ZCe=n(zre,"STRONG",{});var MNt=s(ZCe);TWr=r(MNt,"not"),MNt.forEach(t),MWr=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=n(zre,"A",{href:!0});var ENt=s(Lee);EWr=r(ENt,"from_pretrained()"),ENt.forEach(t),CWr=r(zre," to load the model weights."),zre.forEach(t),wWr=i(cL),T(Tw.$$.fragment,cL),cL.forEach(t),AWr=i(fi),Hr=n(fi,"DIV",{class:!0});var mi=s(Hr);T(m$.$$.fragment,mi),LWr=i(mi),e0e=n(mi,"P",{});var CNt=s(e0e);yWr=r(CNt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),CNt.forEach(t),xWr=i(mi),An=n(mi,"P",{});var fL=s(An);$Wr=r(fL,"The model class to instantiate is selected based on the "),o0e=n(fL,"CODE",{});var wNt=s(o0e);kWr=r(wNt,"model_type"),wNt.forEach(t),SWr=r(fL,` property of the config object (either
passed as an argument or loaded from `),r0e=n(fL,"CODE",{});var ANt=s(r0e);RWr=r(ANt,"pretrained_model_name_or_path"),ANt.forEach(t),PWr=r(fL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t0e=n(fL,"CODE",{});var LNt=s(t0e);BWr=r(LNt,"pretrained_model_name_or_path"),LNt.forEach(t),IWr=r(fL,":"),fL.forEach(t),NWr=i(mi),Ve=n(mi,"UL",{});var To=s(Ve);Mw=n(To,"LI",{});var KDe=s(Mw);a0e=n(KDe,"STRONG",{});var yNt=s(a0e);qWr=r(yNt,"albert"),yNt.forEach(t),jWr=r(KDe," \u2014 "),yee=n(KDe,"A",{href:!0});var xNt=s(yee);DWr=r(xNt,"FlaxAlbertForTokenClassification"),xNt.forEach(t),GWr=r(KDe," (ALBERT model)"),KDe.forEach(t),OWr=i(To),Ew=n(To,"LI",{});var ZDe=s(Ew);n0e=n(ZDe,"STRONG",{});var $Nt=s(n0e);VWr=r($Nt,"bert"),$Nt.forEach(t),XWr=r(ZDe," \u2014 "),xee=n(ZDe,"A",{href:!0});var kNt=s(xee);zWr=r(kNt,"FlaxBertForTokenClassification"),kNt.forEach(t),WWr=r(ZDe," (BERT model)"),ZDe.forEach(t),QWr=i(To),Cw=n(To,"LI",{});var eGe=s(Cw);s0e=n(eGe,"STRONG",{});var SNt=s(s0e);HWr=r(SNt,"big_bird"),SNt.forEach(t),UWr=r(eGe," \u2014 "),$ee=n(eGe,"A",{href:!0});var RNt=s($ee);JWr=r(RNt,"FlaxBigBirdForTokenClassification"),RNt.forEach(t),YWr=r(eGe," (BigBird model)"),eGe.forEach(t),KWr=i(To),ww=n(To,"LI",{});var oGe=s(ww);l0e=n(oGe,"STRONG",{});var PNt=s(l0e);ZWr=r(PNt,"distilbert"),PNt.forEach(t),eQr=r(oGe," \u2014 "),kee=n(oGe,"A",{href:!0});var BNt=s(kee);oQr=r(BNt,"FlaxDistilBertForTokenClassification"),BNt.forEach(t),rQr=r(oGe," (DistilBERT model)"),oGe.forEach(t),tQr=i(To),Aw=n(To,"LI",{});var rGe=s(Aw);i0e=n(rGe,"STRONG",{});var INt=s(i0e);aQr=r(INt,"electra"),INt.forEach(t),nQr=r(rGe," \u2014 "),See=n(rGe,"A",{href:!0});var NNt=s(See);sQr=r(NNt,"FlaxElectraForTokenClassification"),NNt.forEach(t),lQr=r(rGe," (ELECTRA model)"),rGe.forEach(t),iQr=i(To),Lw=n(To,"LI",{});var tGe=s(Lw);d0e=n(tGe,"STRONG",{});var qNt=s(d0e);dQr=r(qNt,"roberta"),qNt.forEach(t),cQr=r(tGe," \u2014 "),Ree=n(tGe,"A",{href:!0});var jNt=s(Ree);fQr=r(jNt,"FlaxRobertaForTokenClassification"),jNt.forEach(t),mQr=r(tGe," (RoBERTa model)"),tGe.forEach(t),gQr=i(To),yw=n(To,"LI",{});var aGe=s(yw);c0e=n(aGe,"STRONG",{});var DNt=s(c0e);hQr=r(DNt,"roformer"),DNt.forEach(t),pQr=r(aGe," \u2014 "),Pee=n(aGe,"A",{href:!0});var GNt=s(Pee);_Qr=r(GNt,"FlaxRoFormerForTokenClassification"),GNt.forEach(t),uQr=r(aGe," (RoFormer model)"),aGe.forEach(t),bQr=i(To),xw=n(To,"LI",{});var nGe=s(xw);f0e=n(nGe,"STRONG",{});var ONt=s(f0e);vQr=r(ONt,"xlm-roberta"),ONt.forEach(t),FQr=r(nGe," \u2014 "),Bee=n(nGe,"A",{href:!0});var VNt=s(Bee);TQr=r(VNt,"FlaxXLMRobertaForTokenClassification"),VNt.forEach(t),MQr=r(nGe," (XLM-RoBERTa model)"),nGe.forEach(t),To.forEach(t),EQr=i(mi),T($w.$$.fragment,mi),mi.forEach(t),fi.forEach(t),pVe=i(f),gf=n(f,"H2",{class:!0});var Cze=s(gf);kw=n(Cze,"A",{id:!0,class:!0,href:!0});var XNt=s(kw);m0e=n(XNt,"SPAN",{});var zNt=s(m0e);T(g$.$$.fragment,zNt),zNt.forEach(t),XNt.forEach(t),CQr=i(Cze),g0e=n(Cze,"SPAN",{});var WNt=s(g0e);wQr=r(WNt,"FlaxAutoModelForMultipleChoice"),WNt.forEach(t),Cze.forEach(t),_Ve=i(f),Tr=n(f,"DIV",{class:!0});var gi=s(Tr);T(h$.$$.fragment,gi),AQr=i(gi),hf=n(gi,"P",{});var Wre=s(hf);LQr=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Iee=n(Wre,"A",{href:!0});var QNt=s(Iee);yQr=r(QNt,"from_pretrained()"),QNt.forEach(t),xQr=r(Wre," class method or the "),Nee=n(Wre,"A",{href:!0});var HNt=s(Nee);$Qr=r(HNt,"from_config()"),HNt.forEach(t),kQr=r(Wre,` class
method.`),Wre.forEach(t),SQr=i(gi),p$=n(gi,"P",{});var wze=s(p$);RQr=r(wze,"This class cannot be instantiated directly using "),h0e=n(wze,"CODE",{});var UNt=s(h0e);PQr=r(UNt,"__init__()"),UNt.forEach(t),BQr=r(wze," (throws an error)."),wze.forEach(t),IQr=i(gi),Zt=n(gi,"DIV",{class:!0});var mL=s(Zt);T(_$.$$.fragment,mL),NQr=i(mL),p0e=n(mL,"P",{});var JNt=s(p0e);qQr=r(JNt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),JNt.forEach(t),jQr=i(mL),pf=n(mL,"P",{});var Qre=s(pf);DQr=r(Qre,`Note:
Loading a model from its configuration file does `),_0e=n(Qre,"STRONG",{});var YNt=s(_0e);GQr=r(YNt,"not"),YNt.forEach(t),OQr=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=n(Qre,"A",{href:!0});var KNt=s(qee);VQr=r(KNt,"from_pretrained()"),KNt.forEach(t),XQr=r(Qre," to load the model weights."),Qre.forEach(t),zQr=i(mL),T(Sw.$$.fragment,mL),mL.forEach(t),WQr=i(gi),Ur=n(gi,"DIV",{class:!0});var hi=s(Ur);T(u$.$$.fragment,hi),QQr=i(hi),u0e=n(hi,"P",{});var ZNt=s(u0e);HQr=r(ZNt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ZNt.forEach(t),UQr=i(hi),Ln=n(hi,"P",{});var gL=s(Ln);JQr=r(gL,"The model class to instantiate is selected based on the "),b0e=n(gL,"CODE",{});var eqt=s(b0e);YQr=r(eqt,"model_type"),eqt.forEach(t),KQr=r(gL,` property of the config object (either
passed as an argument or loaded from `),v0e=n(gL,"CODE",{});var oqt=s(v0e);ZQr=r(oqt,"pretrained_model_name_or_path"),oqt.forEach(t),eHr=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=n(gL,"CODE",{});var rqt=s(F0e);oHr=r(rqt,"pretrained_model_name_or_path"),rqt.forEach(t),rHr=r(gL,":"),gL.forEach(t),tHr=i(hi),Xe=n(hi,"UL",{});var Mo=s(Xe);Rw=n(Mo,"LI",{});var sGe=s(Rw);T0e=n(sGe,"STRONG",{});var tqt=s(T0e);aHr=r(tqt,"albert"),tqt.forEach(t),nHr=r(sGe," \u2014 "),jee=n(sGe,"A",{href:!0});var aqt=s(jee);sHr=r(aqt,"FlaxAlbertForMultipleChoice"),aqt.forEach(t),lHr=r(sGe," (ALBERT model)"),sGe.forEach(t),iHr=i(Mo),Pw=n(Mo,"LI",{});var lGe=s(Pw);M0e=n(lGe,"STRONG",{});var nqt=s(M0e);dHr=r(nqt,"bert"),nqt.forEach(t),cHr=r(lGe," \u2014 "),Dee=n(lGe,"A",{href:!0});var sqt=s(Dee);fHr=r(sqt,"FlaxBertForMultipleChoice"),sqt.forEach(t),mHr=r(lGe," (BERT model)"),lGe.forEach(t),gHr=i(Mo),Bw=n(Mo,"LI",{});var iGe=s(Bw);E0e=n(iGe,"STRONG",{});var lqt=s(E0e);hHr=r(lqt,"big_bird"),lqt.forEach(t),pHr=r(iGe," \u2014 "),Gee=n(iGe,"A",{href:!0});var iqt=s(Gee);_Hr=r(iqt,"FlaxBigBirdForMultipleChoice"),iqt.forEach(t),uHr=r(iGe," (BigBird model)"),iGe.forEach(t),bHr=i(Mo),Iw=n(Mo,"LI",{});var dGe=s(Iw);C0e=n(dGe,"STRONG",{});var dqt=s(C0e);vHr=r(dqt,"distilbert"),dqt.forEach(t),FHr=r(dGe," \u2014 "),Oee=n(dGe,"A",{href:!0});var cqt=s(Oee);THr=r(cqt,"FlaxDistilBertForMultipleChoice"),cqt.forEach(t),MHr=r(dGe," (DistilBERT model)"),dGe.forEach(t),EHr=i(Mo),Nw=n(Mo,"LI",{});var cGe=s(Nw);w0e=n(cGe,"STRONG",{});var fqt=s(w0e);CHr=r(fqt,"electra"),fqt.forEach(t),wHr=r(cGe," \u2014 "),Vee=n(cGe,"A",{href:!0});var mqt=s(Vee);AHr=r(mqt,"FlaxElectraForMultipleChoice"),mqt.forEach(t),LHr=r(cGe," (ELECTRA model)"),cGe.forEach(t),yHr=i(Mo),qw=n(Mo,"LI",{});var fGe=s(qw);A0e=n(fGe,"STRONG",{});var gqt=s(A0e);xHr=r(gqt,"roberta"),gqt.forEach(t),$Hr=r(fGe," \u2014 "),Xee=n(fGe,"A",{href:!0});var hqt=s(Xee);kHr=r(hqt,"FlaxRobertaForMultipleChoice"),hqt.forEach(t),SHr=r(fGe," (RoBERTa model)"),fGe.forEach(t),RHr=i(Mo),jw=n(Mo,"LI",{});var mGe=s(jw);L0e=n(mGe,"STRONG",{});var pqt=s(L0e);PHr=r(pqt,"roformer"),pqt.forEach(t),BHr=r(mGe," \u2014 "),zee=n(mGe,"A",{href:!0});var _qt=s(zee);IHr=r(_qt,"FlaxRoFormerForMultipleChoice"),_qt.forEach(t),NHr=r(mGe," (RoFormer model)"),mGe.forEach(t),qHr=i(Mo),Dw=n(Mo,"LI",{});var gGe=s(Dw);y0e=n(gGe,"STRONG",{});var uqt=s(y0e);jHr=r(uqt,"xlm-roberta"),uqt.forEach(t),DHr=r(gGe," \u2014 "),Wee=n(gGe,"A",{href:!0});var bqt=s(Wee);GHr=r(bqt,"FlaxXLMRobertaForMultipleChoice"),bqt.forEach(t),OHr=r(gGe," (XLM-RoBERTa model)"),gGe.forEach(t),Mo.forEach(t),VHr=i(hi),T(Gw.$$.fragment,hi),hi.forEach(t),gi.forEach(t),uVe=i(f),_f=n(f,"H2",{class:!0});var Aze=s(_f);Ow=n(Aze,"A",{id:!0,class:!0,href:!0});var vqt=s(Ow);x0e=n(vqt,"SPAN",{});var Fqt=s(x0e);T(b$.$$.fragment,Fqt),Fqt.forEach(t),vqt.forEach(t),XHr=i(Aze),$0e=n(Aze,"SPAN",{});var Tqt=s($0e);zHr=r(Tqt,"FlaxAutoModelForNextSentencePrediction"),Tqt.forEach(t),Aze.forEach(t),bVe=i(f),Mr=n(f,"DIV",{class:!0});var pi=s(Mr);T(v$.$$.fragment,pi),WHr=i(pi),uf=n(pi,"P",{});var Hre=s(uf);QHr=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Qee=n(Hre,"A",{href:!0});var Mqt=s(Qee);HHr=r(Mqt,"from_pretrained()"),Mqt.forEach(t),UHr=r(Hre," class method or the "),Hee=n(Hre,"A",{href:!0});var Eqt=s(Hee);JHr=r(Eqt,"from_config()"),Eqt.forEach(t),YHr=r(Hre,` class
method.`),Hre.forEach(t),KHr=i(pi),F$=n(pi,"P",{});var Lze=s(F$);ZHr=r(Lze,"This class cannot be instantiated directly using "),k0e=n(Lze,"CODE",{});var Cqt=s(k0e);eUr=r(Cqt,"__init__()"),Cqt.forEach(t),oUr=r(Lze," (throws an error)."),Lze.forEach(t),rUr=i(pi),ea=n(pi,"DIV",{class:!0});var hL=s(ea);T(T$.$$.fragment,hL),tUr=i(hL),S0e=n(hL,"P",{});var wqt=s(S0e);aUr=r(wqt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wqt.forEach(t),nUr=i(hL),bf=n(hL,"P",{});var Ure=s(bf);sUr=r(Ure,`Note:
Loading a model from its configuration file does `),R0e=n(Ure,"STRONG",{});var Aqt=s(R0e);lUr=r(Aqt,"not"),Aqt.forEach(t),iUr=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uee=n(Ure,"A",{href:!0});var Lqt=s(Uee);dUr=r(Lqt,"from_pretrained()"),Lqt.forEach(t),cUr=r(Ure," to load the model weights."),Ure.forEach(t),fUr=i(hL),T(Vw.$$.fragment,hL),hL.forEach(t),mUr=i(pi),Jr=n(pi,"DIV",{class:!0});var _i=s(Jr);T(M$.$$.fragment,_i),gUr=i(_i),P0e=n(_i,"P",{});var yqt=s(P0e);hUr=r(yqt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yqt.forEach(t),pUr=i(_i),yn=n(_i,"P",{});var pL=s(yn);_Ur=r(pL,"The model class to instantiate is selected based on the "),B0e=n(pL,"CODE",{});var xqt=s(B0e);uUr=r(xqt,"model_type"),xqt.forEach(t),bUr=r(pL,` property of the config object (either
passed as an argument or loaded from `),I0e=n(pL,"CODE",{});var $qt=s(I0e);vUr=r($qt,"pretrained_model_name_or_path"),$qt.forEach(t),FUr=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N0e=n(pL,"CODE",{});var kqt=s(N0e);TUr=r(kqt,"pretrained_model_name_or_path"),kqt.forEach(t),MUr=r(pL,":"),pL.forEach(t),EUr=i(_i),q0e=n(_i,"UL",{});var Sqt=s(q0e);Xw=n(Sqt,"LI",{});var hGe=s(Xw);j0e=n(hGe,"STRONG",{});var Rqt=s(j0e);CUr=r(Rqt,"bert"),Rqt.forEach(t),wUr=r(hGe," \u2014 "),Jee=n(hGe,"A",{href:!0});var Pqt=s(Jee);AUr=r(Pqt,"FlaxBertForNextSentencePrediction"),Pqt.forEach(t),LUr=r(hGe," (BERT model)"),hGe.forEach(t),Sqt.forEach(t),yUr=i(_i),T(zw.$$.fragment,_i),_i.forEach(t),pi.forEach(t),vVe=i(f),vf=n(f,"H2",{class:!0});var yze=s(vf);Ww=n(yze,"A",{id:!0,class:!0,href:!0});var Bqt=s(Ww);D0e=n(Bqt,"SPAN",{});var Iqt=s(D0e);T(E$.$$.fragment,Iqt),Iqt.forEach(t),Bqt.forEach(t),xUr=i(yze),G0e=n(yze,"SPAN",{});var Nqt=s(G0e);$Ur=r(Nqt,"FlaxAutoModelForImageClassification"),Nqt.forEach(t),yze.forEach(t),FVe=i(f),Er=n(f,"DIV",{class:!0});var ui=s(Er);T(C$.$$.fragment,ui),kUr=i(ui),Ff=n(ui,"P",{});var Jre=s(Ff);SUr=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Yee=n(Jre,"A",{href:!0});var qqt=s(Yee);RUr=r(qqt,"from_pretrained()"),qqt.forEach(t),PUr=r(Jre," class method or the "),Kee=n(Jre,"A",{href:!0});var jqt=s(Kee);BUr=r(jqt,"from_config()"),jqt.forEach(t),IUr=r(Jre,` class
method.`),Jre.forEach(t),NUr=i(ui),w$=n(ui,"P",{});var xze=s(w$);qUr=r(xze,"This class cannot be instantiated directly using "),O0e=n(xze,"CODE",{});var Dqt=s(O0e);jUr=r(Dqt,"__init__()"),Dqt.forEach(t),DUr=r(xze," (throws an error)."),xze.forEach(t),GUr=i(ui),oa=n(ui,"DIV",{class:!0});var _L=s(oa);T(A$.$$.fragment,_L),OUr=i(_L),V0e=n(_L,"P",{});var Gqt=s(V0e);VUr=r(Gqt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Gqt.forEach(t),XUr=i(_L),Tf=n(_L,"P",{});var Yre=s(Tf);zUr=r(Yre,`Note:
Loading a model from its configuration file does `),X0e=n(Yre,"STRONG",{});var Oqt=s(X0e);WUr=r(Oqt,"not"),Oqt.forEach(t),QUr=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zee=n(Yre,"A",{href:!0});var Vqt=s(Zee);HUr=r(Vqt,"from_pretrained()"),Vqt.forEach(t),UUr=r(Yre," to load the model weights."),Yre.forEach(t),JUr=i(_L),T(Qw.$$.fragment,_L),_L.forEach(t),YUr=i(ui),Yr=n(ui,"DIV",{class:!0});var bi=s(Yr);T(L$.$$.fragment,bi),KUr=i(bi),z0e=n(bi,"P",{});var Xqt=s(z0e);ZUr=r(Xqt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Xqt.forEach(t),eJr=i(bi),xn=n(bi,"P",{});var uL=s(xn);oJr=r(uL,"The model class to instantiate is selected based on the "),W0e=n(uL,"CODE",{});var zqt=s(W0e);rJr=r(zqt,"model_type"),zqt.forEach(t),tJr=r(uL,` property of the config object (either
passed as an argument or loaded from `),Q0e=n(uL,"CODE",{});var Wqt=s(Q0e);aJr=r(Wqt,"pretrained_model_name_or_path"),Wqt.forEach(t),nJr=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=n(uL,"CODE",{});var Qqt=s(H0e);sJr=r(Qqt,"pretrained_model_name_or_path"),Qqt.forEach(t),lJr=r(uL,":"),uL.forEach(t),iJr=i(bi),y$=n(bi,"UL",{});var $ze=s(y$);Hw=n($ze,"LI",{});var pGe=s(Hw);U0e=n(pGe,"STRONG",{});var Hqt=s(U0e);dJr=r(Hqt,"beit"),Hqt.forEach(t),cJr=r(pGe," \u2014 "),eoe=n(pGe,"A",{href:!0});var Uqt=s(eoe);fJr=r(Uqt,"FlaxBeitForImageClassification"),Uqt.forEach(t),mJr=r(pGe," (BEiT model)"),pGe.forEach(t),gJr=i($ze),Uw=n($ze,"LI",{});var _Ge=s(Uw);J0e=n(_Ge,"STRONG",{});var Jqt=s(J0e);hJr=r(Jqt,"vit"),Jqt.forEach(t),pJr=r(_Ge," \u2014 "),ooe=n(_Ge,"A",{href:!0});var Yqt=s(ooe);_Jr=r(Yqt,"FlaxViTForImageClassification"),Yqt.forEach(t),uJr=r(_Ge," (ViT model)"),_Ge.forEach(t),$ze.forEach(t),bJr=i(bi),T(Jw.$$.fragment,bi),bi.forEach(t),ui.forEach(t),TVe=i(f),Mf=n(f,"H2",{class:!0});var kze=s(Mf);Yw=n(kze,"A",{id:!0,class:!0,href:!0});var Kqt=s(Yw);Y0e=n(Kqt,"SPAN",{});var Zqt=s(Y0e);T(x$.$$.fragment,Zqt),Zqt.forEach(t),Kqt.forEach(t),vJr=i(kze),K0e=n(kze,"SPAN",{});var ejt=s(K0e);FJr=r(ejt,"FlaxAutoModelForVision2Seq"),ejt.forEach(t),kze.forEach(t),MVe=i(f),Cr=n(f,"DIV",{class:!0});var vi=s(Cr);T($$.$$.fragment,vi),TJr=i(vi),Ef=n(vi,"P",{});var Kre=s(Ef);MJr=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),roe=n(Kre,"A",{href:!0});var ojt=s(roe);EJr=r(ojt,"from_pretrained()"),ojt.forEach(t),CJr=r(Kre," class method or the "),toe=n(Kre,"A",{href:!0});var rjt=s(toe);wJr=r(rjt,"from_config()"),rjt.forEach(t),AJr=r(Kre,` class
method.`),Kre.forEach(t),LJr=i(vi),k$=n(vi,"P",{});var Sze=s(k$);yJr=r(Sze,"This class cannot be instantiated directly using "),Z0e=n(Sze,"CODE",{});var tjt=s(Z0e);xJr=r(tjt,"__init__()"),tjt.forEach(t),$Jr=r(Sze," (throws an error)."),Sze.forEach(t),kJr=i(vi),ra=n(vi,"DIV",{class:!0});var bL=s(ra);T(S$.$$.fragment,bL),SJr=i(bL),ewe=n(bL,"P",{});var ajt=s(ewe);RJr=r(ajt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ajt.forEach(t),PJr=i(bL),Cf=n(bL,"P",{});var Zre=s(Cf);BJr=r(Zre,`Note:
Loading a model from its configuration file does `),owe=n(Zre,"STRONG",{});var njt=s(owe);IJr=r(njt,"not"),njt.forEach(t),NJr=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),aoe=n(Zre,"A",{href:!0});var sjt=s(aoe);qJr=r(sjt,"from_pretrained()"),sjt.forEach(t),jJr=r(Zre," to load the model weights."),Zre.forEach(t),DJr=i(bL),T(Kw.$$.fragment,bL),bL.forEach(t),GJr=i(vi),Kr=n(vi,"DIV",{class:!0});var Fi=s(Kr);T(R$.$$.fragment,Fi),OJr=i(Fi),rwe=n(Fi,"P",{});var ljt=s(rwe);VJr=r(ljt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ljt.forEach(t),XJr=i(Fi),$n=n(Fi,"P",{});var vL=s($n);zJr=r(vL,"The model class to instantiate is selected based on the "),twe=n(vL,"CODE",{});var ijt=s(twe);WJr=r(ijt,"model_type"),ijt.forEach(t),QJr=r(vL,` property of the config object (either
passed as an argument or loaded from `),awe=n(vL,"CODE",{});var djt=s(awe);HJr=r(djt,"pretrained_model_name_or_path"),djt.forEach(t),UJr=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nwe=n(vL,"CODE",{});var cjt=s(nwe);JJr=r(cjt,"pretrained_model_name_or_path"),cjt.forEach(t),YJr=r(vL,":"),vL.forEach(t),KJr=i(Fi),swe=n(Fi,"UL",{});var fjt=s(swe);Zw=n(fjt,"LI",{});var uGe=s(Zw);lwe=n(uGe,"STRONG",{});var mjt=s(lwe);ZJr=r(mjt,"vision-encoder-decoder"),mjt.forEach(t),eYr=r(uGe," \u2014 "),noe=n(uGe,"A",{href:!0});var gjt=s(noe);oYr=r(gjt,"FlaxVisionEncoderDecoderModel"),gjt.forEach(t),rYr=r(uGe," (Vision Encoder decoder model)"),uGe.forEach(t),fjt.forEach(t),tYr=i(Fi),T(eA.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(vGt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Sn,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoConfig"),c(Pn,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoModel"),c(Bn,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoTokenizer"),c(Li,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertModel"),c(Sf,"id","extending-the-auto-classes"),c(Sf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sf,"href","#extending-the-auto-classes"),c(yi,"class","relative group"),c(Pf,"id","transformers.AutoConfig"),c(Pf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pf,"href","#transformers.AutoConfig"),c(xi,"class","relative group"),c(rS,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(tS,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig"),c(aS,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig"),c(nS,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig"),c(sS,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig"),c(lS,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(iS,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig"),c(dS,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(cS,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(fS,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(mS,"href","/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomConfig"),c(gS,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig"),c(hS,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig"),c(pS,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig"),c(_S,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig"),c(uS,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig"),c(bS,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig"),c(vS,"href","/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtConfig"),c(FS,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(TS,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(MS,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(ES,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig"),c(CS,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(wS,"href","/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(AS,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig"),c(LS,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig"),c(yS,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig"),c(xS,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRConfig"),c($S,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTConfig"),c(kS,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig"),c(SS,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(RS,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig"),c(PS,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaConfig"),c(BS,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig"),c(IS,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig"),c(NS,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig"),c(qS,"href","/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNConfig"),c(jS,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config"),c(DS,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(GS,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(OS,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig"),c(VS,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig"),c(XS,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig"),c(zS,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(WS,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(QS,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(HS,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(US,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig"),c(JS,"href","/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitConfig"),c(YS,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig"),c(KS,"href","/docs/transformers/pr_17354/en/model_doc/longt5#transformers.LongT5Config"),c(ZS,"href","/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeConfig"),c(eR,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig"),c(oR,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Config"),c(rR,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig"),c(tR,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(aR,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig"),c(nR,"href","/docs/transformers/pr_17354/en/model_doc/mctct#transformers.MCTCTConfig"),c(sR,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(lR,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(iR,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(dR,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig"),c(cR,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config"),c(fR,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(mR,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(gR,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig"),c(hR,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig"),c(pR,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig"),c(_R,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig"),c(uR,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(bR,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(vR,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(FR,"href","/docs/transformers/pr_17354/en/model_doc/rag#transformers.RagConfig"),c(TR,"href","/docs/transformers/pr_17354/en/model_doc/realm#transformers.RealmConfig"),c(MR,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig"),c(ER,"href","/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetConfig"),c(CR,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig"),c(wR,"href","/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetConfig"),c(AR,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertConfig"),c(LR,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig"),c(yR,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig"),c(xR,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig"),c($R,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig"),c(kR,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig"),c(SR,"href","/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(RR,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(PR,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(BR,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig"),c(IR,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(NR,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig"),c(qR,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config"),c(jR,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig"),c(DR,"href","/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(GR,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(OR,"href","/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRConfig"),c(VR,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(XR,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(zR,"href","/docs/transformers/pr_17354/en/model_doc/van#transformers.VanConfig"),c(WR,"href","/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltConfig"),c(QR,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(HR,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(UR,"href","/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(JR,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig"),c(YR,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(KR,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(ZR,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(eP,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig"),c(oP,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig"),c(rP,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig"),c(tP,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(aP,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(nP,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(sP,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig"),c(lP,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosConfig"),c(iP,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Og,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vg,"id","transformers.AutoTokenizer"),c(Vg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vg,"href","#transformers.AutoTokenizer"),c(ki,"class","relative group"),c(dP,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(cP,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizer"),c(fP,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(mP,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartTokenizer"),c(gP,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartTokenizerFast"),c(hP,"href","/docs/transformers/pr_17354/en/model_doc/barthez#transformers.BarthezTokenizer"),c(pP,"href","/docs/transformers/pr_17354/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(_P,"href","/docs/transformers/pr_17354/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(uP,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(bP,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(vP,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(FP,"href","/docs/transformers/pr_17354/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(TP,"href","/docs/transformers/pr_17354/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(MP,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(EP,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(CP,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(wP,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(AP,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(LP,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(yP,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(xP,"href","/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomTokenizerFast"),c($P,"href","/docs/transformers/pr_17354/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(kP,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertTokenizer"),c(SP,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(RP,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineTokenizer"),c(PP,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPTokenizer"),c(BP,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(IP,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(NP,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(qP,"href","/docs/transformers/pr_17354/en/model_doc/cpm#transformers.CpmTokenizer"),c(jP,"href","/docs/transformers/pr_17354/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(DP,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(GP,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(OP,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VP,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaTokenizer"),c(XP,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(zP,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(WP,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(QP,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(HP,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(UP,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(JP,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(YP,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraTokenizer"),c(KP,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(eB,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetTokenizer"),c(oB,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(rB,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(tB,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelTokenizer"),c(aB,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(nB,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sB,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(lB,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(iB,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(dB,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(cB,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(fB,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(mB,"href","/docs/transformers/pr_17354/en/model_doc/herbert#transformers.HerbertTokenizer"),c(gB,"href","/docs/transformers/pr_17354/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(hB,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(pB,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_B,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uB,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(bB,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(vB,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(FB,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(TB,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(MB,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(EB,"href","/docs/transformers/pr_17354/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(CB,"href","/docs/transformers/pr_17354/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(wB,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDTokenizer"),c(AB,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDTokenizerFast"),c(LB,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerTokenizer"),c(yB,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(xB,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Tokenizer"),c($B,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5TokenizerFast"),c(kB,"href","/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeTokenizer"),c(SB,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(RB,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(PB,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(BB,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianTokenizer"),c(IB,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartTokenizer"),c(NB,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(qB,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(jB,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(DB,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(GB,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(OB,"href","/docs/transformers/pr_17354/en/model_doc/mluke#transformers.MLukeTokenizer"),c(VB,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(XB,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(zB,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(WB,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(QB,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Tokenizer"),c(HB,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5TokenizerFast"),c(UB,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizer"),c(JB,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(YB,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(KB,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(ZB,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eI,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(oI,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(rI,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(tI,"href","/docs/transformers/pr_17354/en/model_doc/phobert#transformers.PhobertTokenizer"),c(aI,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartTokenizer"),c(nI,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(sI,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(lI,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(iI,"href","/docs/transformers/pr_17354/en/model_doc/rag#transformers.RagTokenizer"),c(dI,"href","/docs/transformers/pr_17354/en/model_doc/realm#transformers.RealmTokenizer"),c(cI,"href","/docs/transformers/pr_17354/en/model_doc/realm#transformers.RealmTokenizerFast"),c(fI,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerTokenizer"),c(mI,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(gI,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertTokenizer"),c(hI,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(pI,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(_I,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(uI,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(bI,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(vI,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(FI,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(TI,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(MI,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(EI,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterTokenizer"),c(CI,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(wI,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(AI,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(LI,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Tokenizer"),c(yI,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5TokenizerFast"),c(xI,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasTokenizer"),c($I,"href","/docs/transformers/pr_17354/en/model_doc/tapex#transformers.TapexTokenizer"),c(kI,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(SI,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(RI,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(PI,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(BI,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(II,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(NI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(qI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(jI,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMTokenizer"),c(DI,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(GI,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMTokenizer"),c(OI,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(VI,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(XI,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(zI,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(WI,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(QI,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(HI,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(UI,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizer"),c(JI,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"id","transformers.AutoFeatureExtractor"),c(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wh,"href","#transformers.AutoFeatureExtractor"),c(Si,"class","relative group"),c(YI,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(KI,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(ZI,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(eN,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oN,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(rN,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(tN,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(aN,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(nN,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(sN,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(lN,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(iN,"href","/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(dN,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cN,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(fN,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(mN,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(gN,"href","/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(hN,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(pN,"href","/docs/transformers/pr_17354/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(_N,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(uN,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(bN,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(vN,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(FN,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TN,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(MN,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(EN,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(CN,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wN,"href","/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(AN,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(LN,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yN,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xN,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($N,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ip,"id","transformers.AutoProcessor"),c(ip,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ip,"href","#transformers.AutoProcessor"),c(Ri,"class","relative group"),c(kN,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(SN,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPProcessor"),c(RN,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(PN,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(BN,"href","/docs/transformers/pr_17354/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(IN,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(NN,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qN,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(jN,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(DN,"href","/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRProcessor"),c(GN,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ON,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VN,"href","/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltProcessor"),c(XN,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(zN,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(WN,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QN,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xp,"id","transformers.AutoModel"),c(xp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xp,"href","#transformers.AutoModel"),c(Bi,"class","relative group"),c(HN,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UN,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JN,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YN,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertModel"),c(KN,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartModel"),c(ZN,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitModel"),c(eq,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertModel"),c(oq,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(rq,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdModel"),c(tq,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(aq,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(nq,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(sq,"href","/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomModel"),c(lq,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertModel"),c(iq,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineModel"),c(dq,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPModel"),c(cq,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertModel"),c(fq,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextModel"),c(mq,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLModel"),c(gq,"href","/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtModel"),c(hq,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(pq,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(_q,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(uq,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaModel"),c(bq,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(vq,"href","/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Fq,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTModel"),c(Tq,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrModel"),c(Mq,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertModel"),c(Eq,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Cq,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTModel"),c(wq,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraModel"),c(Aq,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertModel"),c(Lq,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaModel"),c(yq,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetModel"),c(xq,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTModel"),c($q,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelModel"),c(kq,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Sq,"href","/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNModel"),c(Rq,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Model"),c(Pq,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Bq,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Iq,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJModel"),c(Nq,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertModel"),c(qq,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertModel"),c(jq,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Dq,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Gq,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Oq,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Vq,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDModel"),c(Xq,"href","/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitModel"),c(zq,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerModel"),c(Wq,"href","/docs/transformers/pr_17354/en/model_doc/longt5#transformers.LongT5Model"),c(Qq,"href","/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeModel"),c(Hq,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertModel"),c(Uq,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Model"),c(Jq,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianModel"),c(Yq,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Kq,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartModel"),c(Zq,"href","/docs/transformers/pr_17354/en/model_doc/mctct#transformers.MCTCTModel"),c(ej,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(oj,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertModel"),c(rj,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTModel"),c(tj,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetModel"),c(aj,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Model"),c(nj,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerModel"),c(sj,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(lj,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTModel"),c(ij,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusModel"),c(dj,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverModel"),c(cj,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartModel"),c(fj,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerModel"),c(mj,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(gj,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertModel"),c(hj,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModel"),c(pj,"href","/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetModel"),c(_j,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertModel"),c(uj,"href","/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetModel"),c(bj,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel"),c(vj,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaModel"),c(Fj,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerModel"),c(Tj,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerModel"),c(Mj,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWModel"),c(Ej,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDModel"),c(Cj,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(wj,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterModel"),c(Aj,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Lj,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinModel"),c(yj,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Model"),c(xj,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasModel"),c($j,"href","/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(kj,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Sj,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Rj,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Pj,"href","/docs/transformers/pr_17354/en/model_doc/van#transformers.VanModel"),c(Bj,"href","/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltModel"),c(Ij,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Nj,"href","/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertModel"),c(qj,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTModel"),c(jj,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Dj,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Gj,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Oj,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMModel"),c(Vj,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMModel"),c(Xj,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMModel"),c(zj,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Wj,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Qj,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Hj,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetModel"),c(Uj,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosModel"),c(Jj,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ku,"id","transformers.AutoModelForPreTraining"),c(ku,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ku,"href","#transformers.AutoModelForPreTraining"),c(qi,"class","relative group"),c(Yj,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kj,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zj,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eD,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForPreTraining"),c(oD,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(rD,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForPreTraining"),c(tD,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(aD,"href","/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomForCausalLM"),c(nD,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(sD,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(lD,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(iD,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(dD,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(cD,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(fD,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForPreTraining"),c(mD,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(gD,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaForPreTraining"),c(hD,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForPreTraining"),c(pD,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(_D,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(uD,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(bD,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(vD,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(FD,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(TD,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(MD,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(ED,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(CD,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(wD,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(AD,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel"),c(LD,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(yD,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(xD,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c($D,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(kD,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(SD,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(RD,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(PD,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(BD,"href","/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(ID,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(ND,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(qD,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(jD,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(DD,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(GD,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(OD,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C1,"id","transformers.AutoModelForCausalLM"),c(C1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C1,"href","#transformers.AutoModelForCausalLM"),c(Gi,"class","relative group"),c(VD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WD,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForCausalLM"),c(QD,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertLMHeadModel"),c(HD,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(UD,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(JD,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(YD,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(KD,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(ZD,"href","/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomForCausalLM"),c(eG,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(oG,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(rG,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(tG,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForCausalLM"),c(aG,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(nG,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(sG,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(lG,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(iG,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianForCausalLM"),c(dG,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForCausalLM"),c(cG,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(fG,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(mG,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTForCausalLM"),c(gG,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(hG,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(pG,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(_G,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(uG,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(bG,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(vG,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(FG,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(TG,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(MG,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(EG,"href","/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(CG,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(wG,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(AG,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(LG,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(yG,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(xG,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mb,"id","transformers.AutoModelForMaskedLM"),c(mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mb,"href","#transformers.AutoModelForMaskedLM"),c(Xi,"class","relative group"),c($G,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RG,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(PG,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(BG,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMaskedLM"),c(IG,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(NG,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(qG,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(jG,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(DG,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(GG,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(OG,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(VG,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(XG,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(zG,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(WG,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(QG,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(HG,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(UG,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(JG,"href","/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeForMaskedLM"),c(YG,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(KG,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(ZG,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(eO,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(oO,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(rO,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(tO,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(aO,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(nO,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(sO,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(lO,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(iO,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(dO,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(cO,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(fO,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(mO,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(gO,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kb,"id","transformers.AutoModelForSeq2SeqLM"),c(Kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Qi,"class","relative group"),c(hO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_O,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uO,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(bO,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(vO,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(FO,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(TO,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(MO,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(EO,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(CO,"href","/docs/transformers/pr_17354/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(wO,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(AO,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianMTModel"),c(LO,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(yO,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(xO,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c($O,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(kO,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(SO,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(RO,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v2,"id","transformers.AutoModelForSequenceClassification"),c(v2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v2,"href","#transformers.AutoModelForSequenceClassification"),c(Ji,"class","relative group"),c(PO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NO,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(qO,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForSequenceClassification"),c(jO,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForSequenceClassification"),c(DO,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(GO,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(OO,"href","/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(VO,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(XO,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(zO,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(WO,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(QO,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(HO,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(UO,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(JO,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(YO,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(KO,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(eV,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(oV,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(rV,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(tV,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(aV,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(nV,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(iV,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForSequenceClassification"),c(dV,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(cV,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(LV,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(yV,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(xV,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c($V,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u4,"id","transformers.AutoModelForMultipleChoice"),c(u4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u4,"href","#transformers.AutoModelForMultipleChoice"),c(Zi,"class","relative group"),c(kV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PV,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(BV,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMultipleChoice"),c(IV,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(NV,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(qV,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(jV,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(DV,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(GV,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(OV,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(VV,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(XV,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(zV,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(WV,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(QV,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(HV,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(UV,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(JV,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(YV,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(KV,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(ZV,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(eX,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(oX,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(rX,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(tX,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(aX,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(nX,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(sX,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(lX,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(iX,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J4,"id","transformers.AutoModelForNextSentencePrediction"),c(J4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J4,"href","#transformers.AutoModelForNextSentencePrediction"),c(rd,"class","relative group"),c(dX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mX,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(gX,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(hX,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(pX,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(_X,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n5,"id","transformers.AutoModelForTokenClassification"),c(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n5,"href","#transformers.AutoModelForTokenClassification"),c(nd,"class","relative group"),c(uX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FX,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(TX,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForTokenClassification"),c(MX,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(EX,"href","/docs/transformers/pr_17354/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(CX,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(wX,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForTokenClassification"),c(AX,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(LX,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(yX,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(xX,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c($X,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(kX,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(SX,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(RX,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(PX,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(BX,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(IX,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(NX,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(qX,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(jX,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(DX,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(GX,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(OX,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(VX,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(XX,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(zX,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(WX,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(QX,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(HX,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(UX,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(JX,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(YX,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(KX,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(ZX,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(ez,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X5,"id","transformers.AutoModelForQuestionAnswering"),c(X5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X5,"href","#transformers.AutoModelForQuestionAnswering"),c(id,"class","relative group"),c(oz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(az,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(nz,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(sz,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(lz,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(iz,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(dz,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(cz,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(fz,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(mz,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(gz,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(hz,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(pz,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(_z,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(uz,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(bz,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(vz,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(Fz,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(Tz,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(Mz,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(Ez,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(Cz,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(wz,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(Az,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(Lz,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(yz,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(xz,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c($z,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(kz,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(Sz,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(Rz,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(Pz,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(Bz,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(Iz,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(Nz,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(qz,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(jz,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(Dz,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(Gz,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(Oz,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(Vz,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(fd,"class","relative group"),c(Xz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qz,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jv,"id","transformers.AutoModelForImageClassification"),c(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jv,"href","#transformers.AutoModelForImageClassification"),c(hd,"class","relative group"),c(Hz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yz,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForImageClassification"),c(Kz,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(Zz,"href","/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtForImageClassification"),c(eW,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(oW,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassification"),c(rW,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(tW,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(aW,"href","/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitForImageClassification"),c(nW,"href","/docs/transformers/pr_17354/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(sW,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(lW,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(iW,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(dW,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(cW,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(fW,"href","/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(mW,"href","/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(gW,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(hW,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForImageClassification"),c(pW,"href","/docs/transformers/pr_17354/en/model_doc/van#transformers.VanForImageClassification"),c(_W,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r3,"id","transformers.AutoModelForVision2Seq"),c(r3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r3,"href","#transformers.AutoModelForVision2Seq"),c(ud,"class","relative group"),c(uW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FW,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l3,"id","transformers.AutoModelForVisualQuestionAnswering"),c(l3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l3,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Fd,"class","relative group"),c(TW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CW,"href","/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m3,"id","transformers.AutoModelForAudioClassification"),c(m3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m3,"href","#transformers.AutoModelForAudioClassification"),c(Ed,"class","relative group"),c(wW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yW,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(xW,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c($W,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(kW,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(SW,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(RW,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(IW,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w3,"id","transformers.AutoModelForAudioFrameClassification"),c(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w3,"href","#transformers.AutoModelForAudioFrameClassification"),c(Ad,"class","relative group"),c(NW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DW,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(GW,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(OW,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(VW,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(XW,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P3,"id","transformers.AutoModelForCTC"),c(P3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P3,"href","#transformers.AutoModelForCTC"),c(xd,"class","relative group"),c(zW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HW,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(UW,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForCTC"),c(JW,"href","/docs/transformers/pr_17354/en/model_doc/mctct#transformers.MCTCTForCTC"),c(YW,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForCTC"),c(KW,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForCTC"),c(ZW,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(eQ,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(oQ,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(rQ,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(tQ,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H3,"id","transformers.AutoModelForSpeechSeq2Seq"),c(H3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H3,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Sd,"class","relative group"),c(aQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lQ,"href","/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(iQ,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForAudioXVector"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForAudioXVector"),c(Bd,"class","relative group"),c(dQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mQ,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(gQ,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(hQ,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(pQ,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(_Q,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForMaskedImageModeling"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForMaskedImageModeling"),c(qd,"class","relative group"),c(uQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FQ,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(TQ,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(MQ,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_F,"id","transformers.AutoModelForObjectDetection"),c(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_F,"href","#transformers.AutoModelForObjectDetection"),c(Od,"class","relative group"),c(EQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AQ,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForObjectDetection"),c(LQ,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForImageSegmentation"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForImageSegmentation"),c(zd,"class","relative group"),c(yQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Q,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kQ,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LF,"id","transformers.AutoModelForSemanticSegmentation"),c(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Hd,"class","relative group"),c(SQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(IQ,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(NQ,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(qQ,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(jQ,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IF,"id","transformers.AutoModelForInstanceSegmentation"),c(IF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IF,"href","#transformers.AutoModelForInstanceSegmentation"),c(Yd,"class","relative group"),c(DQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VQ,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GF,"id","transformers.TFAutoModel"),c(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GF,"href","#transformers.TFAutoModel"),c(ec,"class","relative group"),c(XQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QQ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertModel"),c(HQ,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartModel"),c(UQ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertModel"),c(JQ,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(YQ,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(KQ,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertModel"),c(ZQ,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.TFCLIPModel"),c(eH,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertModel"),c(oH,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextModel"),c(rH,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLModel"),c(tH,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(aH,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaModel"),c(nH,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(sH,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(lH,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(iH,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraModel"),c(dH,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(cH,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelModel"),c(fH,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(mH,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2Model"),c(gH,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJModel"),c(hH,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.TFHubertModel"),c(pH,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(_H,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDModel"),c(uH,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerModel"),c(bH,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertModel"),c(vH,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianModel"),c(FH,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartModel"),c(TH,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(MH,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetModel"),c(EH,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5Model"),c(CH,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(wH,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.TFOPTModel"),c(AH,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusModel"),c(LH,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertModel"),c(yH,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaModel"),c(xH,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerModel"),c($H,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(kH,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinModel"),c(SH,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5Model"),c(RH,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasModel"),c(PH,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(BH,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTModel"),c(IH,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(NH,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(qH,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMModel"),c(jH,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(DH,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IT,"id","transformers.TFAutoModelForPreTraining"),c(IT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IT,"href","#transformers.TFAutoModelForPreTraining"),c(tc,"class","relative group"),c(GH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XH,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(zH,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(WH,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForPreTraining"),c(QH,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(HH,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(UH,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(JH,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(YH,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(KH,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(ZH,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(eU,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(oU,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(rU,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(tU,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(aU,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(nU,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(sU,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(lU,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(iU,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(dU,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(cU,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(fU,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(mU,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i7,"id","transformers.TFAutoModelForCausalLM"),c(i7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i7,"href","#transformers.TFAutoModelForCausalLM"),c(sc,"class","relative group"),c(gU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(uU,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(bU,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(vU,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(FU,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(TU,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(MU,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(EU,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(CU,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(wU,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(AU,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(LU,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(yU,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C7,"id","transformers.TFAutoModelForImageClassification"),c(C7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C7,"href","#transformers.TFAutoModelForImageClassification"),c(dc,"class","relative group"),c(xU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($U,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SU,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(RU,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(PU,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(BU,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTForImageClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k7,"id","transformers.TFAutoModelForMaskedLM"),c(k7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k7,"href","#transformers.TFAutoModelForMaskedLM"),c(mc,"class","relative group"),c(IU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jU,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(DU,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(GU,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(OU,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(VU,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(XU,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(zU,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(WU,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(QU,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(HU,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(UU,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(JU,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(YU,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(KU,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(ZU,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(eJ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(oJ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(rJ,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(tJ,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(aJ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(eM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(pc,"class","relative group"),c(nJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iJ,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(dJ,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(cJ,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(fJ,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(mJ,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(gJ,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianMTModel"),c(hJ,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(pJ,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(_J,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(uJ,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gM,"id","transformers.TFAutoModelForSequenceClassification"),c(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gM,"href","#transformers.TFAutoModelForSequenceClassification"),c(bc,"class","relative group"),c(bJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TJ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(MJ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(EJ,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(CJ,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(wJ,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(AJ,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(LJ,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(yJ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(xJ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c($J,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(kJ,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(SJ,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(RJ,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(PJ,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(BJ,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(IJ,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(NJ,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(qJ,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(jJ,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(DJ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(GJ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(OJ,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(VJ,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(XJ,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(zJ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(WJ,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OM,"id","transformers.TFAutoModelForMultipleChoice"),c(OM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OM,"href","#transformers.TFAutoModelForMultipleChoice"),c(Tc,"class","relative group"),c(QJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(YJ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(KJ,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(ZJ,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(eY,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(oY,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(rY,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(tY,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(aY,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(nY,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(sY,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(lY,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(iY,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(dY,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(cY,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(fY,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(mY,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(iE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Cc,"class","relative group"),c(gY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Y,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(uY,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(gE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Lc,"class","relative group"),c(bY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TY,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uE,"id","transformers.TFAutoModelForTokenClassification"),c(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uE,"href","#transformers.TFAutoModelForTokenClassification"),c($c,"class","relative group"),c(MY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wY,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(AY,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(LY,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(yY,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(xY,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c($Y,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(kY,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(SY,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(RY,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(PY,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(BY,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(IY,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(NY,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(qY,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(jY,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(DY,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(GY,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(OY,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(VY,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(XY,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DE,"id","transformers.TFAutoModelForQuestionAnswering"),c(DE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Rc,"class","relative group"),c(zY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HY,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(UY,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(JY,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(YY,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(KY,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(ZY,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(eK,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(oK,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(rK,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(tK,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(aK,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(nK,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(sK,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(lK,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(iK,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(dK,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(cK,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(fK,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(mK,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(gK,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dC,"id","transformers.TFAutoModelForVision2Seq"),c(dC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dC,"href","#transformers.TFAutoModelForVision2Seq"),c(Ic,"class","relative group"),c(hK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_K,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uK,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(jc,"class","relative group"),c(bK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TK,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uC,"id","transformers.FlaxAutoModel"),c(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uC,"href","#transformers.FlaxAutoModel"),c(Oc,"class","relative group"),c(MK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wK,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertModel"),c(AK,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartModel"),c(LK,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitModel"),c(yK,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertModel"),c(xK,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c($K,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(kK,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(SK,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.FlaxCLIPModel"),c(RK,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(PK,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraModel"),c(BK,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(IK,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(NK,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(qK,"href","/docs/transformers/pr_17354/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(jK,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianModel"),c(DK,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartModel"),c(GK,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5Model"),c(OK,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.FlaxOPTModel"),c(VK,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(XK,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(zK,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(WK,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5Model"),c(QK,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(HK,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTModel"),c(UK,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(JK,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(YK,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QC,"id","transformers.FlaxAutoModelForCausalLM"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.FlaxAutoModelForCausalLM"),c(zc,"class","relative group"),c(KK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(rZ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(tZ,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(aZ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(nZ,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(sZ,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(lZ,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(iZ,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(dZ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(cZ,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s0,"id","transformers.FlaxAutoModelForPreTraining"),c(s0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s0,"href","#transformers.FlaxAutoModelForPreTraining"),c(Hc,"class","relative group"),c(fZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hZ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(pZ,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(_Z,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(uZ,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(bZ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(vZ,"href","/docs/transformers/pr_17354/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(FZ,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(TZ,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(MZ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(EZ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(CZ,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(wZ,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(AZ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M0,"id","transformers.FlaxAutoModelForMaskedLM"),c(M0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M0,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Yc,"class","relative group"),c(LZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Z,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(kZ,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(SZ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(RZ,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(PZ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(BZ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(IZ,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(NZ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(qZ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(jZ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(B0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(ef,"class","relative group"),c(DZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VZ,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(XZ,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(zZ,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(WZ,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(QZ,"href","/docs/transformers/pr_17354/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(HZ,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(UZ,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(JZ,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(YZ,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(KZ,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(H0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(tf,"class","relative group"),c(ZZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eee,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oee,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ree,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(tee,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(aee,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(nee,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(see,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(lee,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(iee,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(dee,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(cee,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(fee,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(sf,"class","relative group"),c(mee,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gee,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hee,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pee,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(_ee,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(uee,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(bee,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(vee,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Fee,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Tee,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Mee,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Eee,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Cee,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fw,"id","transformers.FlaxAutoModelForTokenClassification"),c(Fw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(cf,"class","relative group"),c(wee,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Aee,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lee,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yee,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(xee,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c($ee,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(kee,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(See,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Ree,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Pee,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Bee,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(kw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(gf,"class","relative group"),c(Iee,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nee,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qee,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jee,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Dee,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Gee,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Oee,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Vee,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Xee,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(zee,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Wee,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ow,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ow,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(_f,"class","relative group"),c(Qee,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hee,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uee,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jee,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ww,"id","transformers.FlaxAutoModelForImageClassification"),c(Ww,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ww,"href","#transformers.FlaxAutoModelForImageClassification"),c(vf,"class","relative group"),c(Yee,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kee,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zee,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eoe,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(ooe,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Yw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Mf,"class","relative group"),c(roe,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(toe,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aoe,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(noe,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Ti),b(f,yf,u),b(f,nt,u),e(nt,Mi),e(nt,Ei),e(Ei,FL),e(nt,xf),b(f,Oe,u),b(f,We,u),e(We,Ci),e(We,Sn),e(Sn,TL),e(We,Rn),e(We,Pn),e(Pn,ML),e(We,wi),e(We,Bn),e(Bn,EL),e(We,Ai),b(f,$f,u),M(xa,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,Jk),e(Ae,Li),e(Li,Yk),e(Ae,Kk),b(f,Co,u),b(f,$a,u),e($a,Zk),e($a,kf),e(kf,eS),e($a,Rze),b(f,bGe,u),b(f,yi,u),e(yi,Sf),e(Sf,ete),M(CL,ete,null),e(yi,Pze),e(yi,ote),e(ote,Bze),b(f,vGe,u),b(f,In,u),e(In,Ize),e(In,rte),e(rte,Nze),e(In,qze),e(In,tte),e(tte,jze),e(In,Dze),b(f,FGe,u),M(wL,f,u),b(f,TGe,u),b(f,oS,u),e(oS,Gze),b(f,MGe,u),M(Rf,f,u),b(f,EGe,u),b(f,xi,u),e(xi,Pf),e(Pf,ate),M(AL,ate,null),e(xi,Oze),e(xi,nte),e(nte,Vze),b(f,CGe,u),b(f,wo,u),M(LL,wo,null),e(wo,Xze),e(wo,yL),e(yL,zze),e(yL,rS),e(rS,Wze),e(yL,Qze),e(wo,Hze),e(wo,xL),e(xL,Uze),e(xL,ste),e(ste,Jze),e(xL,Yze),e(wo,Kze),e(wo,wr),M($L,wr,null),e(wr,Zze),e(wr,lte),e(lte,eWe),e(wr,oWe),e(wr,$i),e($i,rWe),e($i,ite),e(ite,tWe),e($i,aWe),e($i,dte),e(dte,nWe),e($i,sWe),e(wr,lWe),e(wr,A),e(A,Bf),e(Bf,cte),e(cte,iWe),e(Bf,dWe),e(Bf,tS),e(tS,cWe),e(Bf,fWe),e(A,mWe),e(A,If),e(If,fte),e(fte,gWe),e(If,hWe),e(If,aS),e(aS,pWe),e(If,_We),e(A,uWe),e(A,Nf),e(Nf,mte),e(mte,bWe),e(Nf,vWe),e(Nf,nS),e(nS,FWe),e(Nf,TWe),e(A,MWe),e(A,qf),e(qf,gte),e(gte,EWe),e(qf,CWe),e(qf,sS),e(sS,wWe),e(qf,AWe),e(A,LWe),e(A,jf),e(jf,hte),e(hte,yWe),e(jf,xWe),e(jf,lS),e(lS,$We),e(jf,kWe),e(A,SWe),e(A,Df),e(Df,pte),e(pte,RWe),e(Df,PWe),e(Df,iS),e(iS,BWe),e(Df,IWe),e(A,NWe),e(A,Gf),e(Gf,_te),e(_te,qWe),e(Gf,jWe),e(Gf,dS),e(dS,DWe),e(Gf,GWe),e(A,OWe),e(A,Of),e(Of,ute),e(ute,VWe),e(Of,XWe),e(Of,cS),e(cS,zWe),e(Of,WWe),e(A,QWe),e(A,Vf),e(Vf,bte),e(bte,HWe),e(Vf,UWe),e(Vf,fS),e(fS,JWe),e(Vf,YWe),e(A,KWe),e(A,Xf),e(Xf,vte),e(vte,ZWe),e(Xf,eQe),e(Xf,mS),e(mS,oQe),e(Xf,rQe),e(A,tQe),e(A,zf),e(zf,Fte),e(Fte,aQe),e(zf,nQe),e(zf,gS),e(gS,sQe),e(zf,lQe),e(A,iQe),e(A,Wf),e(Wf,Tte),e(Tte,dQe),e(Wf,cQe),e(Wf,hS),e(hS,fQe),e(Wf,mQe),e(A,gQe),e(A,Qf),e(Qf,Mte),e(Mte,hQe),e(Qf,pQe),e(Qf,pS),e(pS,_Qe),e(Qf,uQe),e(A,bQe),e(A,Hf),e(Hf,Ete),e(Ete,vQe),e(Hf,FQe),e(Hf,_S),e(_S,TQe),e(Hf,MQe),e(A,EQe),e(A,Uf),e(Uf,Cte),e(Cte,CQe),e(Uf,wQe),e(Uf,uS),e(uS,AQe),e(Uf,LQe),e(A,yQe),e(A,Jf),e(Jf,wte),e(wte,xQe),e(Jf,$Qe),e(Jf,bS),e(bS,kQe),e(Jf,SQe),e(A,RQe),e(A,Yf),e(Yf,Ate),e(Ate,PQe),e(Yf,BQe),e(Yf,vS),e(vS,IQe),e(Yf,NQe),e(A,qQe),e(A,Kf),e(Kf,Lte),e(Lte,jQe),e(Kf,DQe),e(Kf,FS),e(FS,GQe),e(Kf,OQe),e(A,VQe),e(A,Zf),e(Zf,yte),e(yte,XQe),e(Zf,zQe),e(Zf,TS),e(TS,WQe),e(Zf,QQe),e(A,HQe),e(A,em),e(em,xte),e(xte,UQe),e(em,JQe),e(em,MS),e(MS,YQe),e(em,KQe),e(A,ZQe),e(A,om),e(om,$te),e($te,eHe),e(om,oHe),e(om,ES),e(ES,rHe),e(om,tHe),e(A,aHe),e(A,rm),e(rm,kte),e(kte,nHe),e(rm,sHe),e(rm,CS),e(CS,lHe),e(rm,iHe),e(A,dHe),e(A,tm),e(tm,Ste),e(Ste,cHe),e(tm,fHe),e(tm,wS),e(wS,mHe),e(tm,gHe),e(A,hHe),e(A,am),e(am,Rte),e(Rte,pHe),e(am,_He),e(am,AS),e(AS,uHe),e(am,bHe),e(A,vHe),e(A,nm),e(nm,Pte),e(Pte,FHe),e(nm,THe),e(nm,LS),e(LS,MHe),e(nm,EHe),e(A,CHe),e(A,sm),e(sm,Bte),e(Bte,wHe),e(sm,AHe),e(sm,yS),e(yS,LHe),e(sm,yHe),e(A,xHe),e(A,lm),e(lm,Ite),e(Ite,$He),e(lm,kHe),e(lm,xS),e(xS,SHe),e(lm,RHe),e(A,PHe),e(A,im),e(im,Nte),e(Nte,BHe),e(im,IHe),e(im,$S),e($S,NHe),e(im,qHe),e(A,jHe),e(A,dm),e(dm,qte),e(qte,DHe),e(dm,GHe),e(dm,kS),e(kS,OHe),e(dm,VHe),e(A,XHe),e(A,cm),e(cm,jte),e(jte,zHe),e(cm,WHe),e(cm,SS),e(SS,QHe),e(cm,HHe),e(A,UHe),e(A,fm),e(fm,Dte),e(Dte,JHe),e(fm,YHe),e(fm,RS),e(RS,KHe),e(fm,ZHe),e(A,eUe),e(A,mm),e(mm,Gte),e(Gte,oUe),e(mm,rUe),e(mm,PS),e(PS,tUe),e(mm,aUe),e(A,nUe),e(A,gm),e(gm,Ote),e(Ote,sUe),e(gm,lUe),e(gm,BS),e(BS,iUe),e(gm,dUe),e(A,cUe),e(A,hm),e(hm,Vte),e(Vte,fUe),e(hm,mUe),e(hm,IS),e(IS,gUe),e(hm,hUe),e(A,pUe),e(A,pm),e(pm,Xte),e(Xte,_Ue),e(pm,uUe),e(pm,NS),e(NS,bUe),e(pm,vUe),e(A,FUe),e(A,_m),e(_m,zte),e(zte,TUe),e(_m,MUe),e(_m,qS),e(qS,EUe),e(_m,CUe),e(A,wUe),e(A,um),e(um,Wte),e(Wte,AUe),e(um,LUe),e(um,jS),e(jS,yUe),e(um,xUe),e(A,$Ue),e(A,bm),e(bm,Qte),e(Qte,kUe),e(bm,SUe),e(bm,DS),e(DS,RUe),e(bm,PUe),e(A,BUe),e(A,vm),e(vm,Hte),e(Hte,IUe),e(vm,NUe),e(vm,GS),e(GS,qUe),e(vm,jUe),e(A,DUe),e(A,Fm),e(Fm,Ute),e(Ute,GUe),e(Fm,OUe),e(Fm,OS),e(OS,VUe),e(Fm,XUe),e(A,zUe),e(A,Tm),e(Tm,Jte),e(Jte,WUe),e(Tm,QUe),e(Tm,VS),e(VS,HUe),e(Tm,UUe),e(A,JUe),e(A,Mm),e(Mm,Yte),e(Yte,YUe),e(Mm,KUe),e(Mm,XS),e(XS,ZUe),e(Mm,eJe),e(A,oJe),e(A,Em),e(Em,Kte),e(Kte,rJe),e(Em,tJe),e(Em,zS),e(zS,aJe),e(Em,nJe),e(A,sJe),e(A,Cm),e(Cm,Zte),e(Zte,lJe),e(Cm,iJe),e(Cm,WS),e(WS,dJe),e(Cm,cJe),e(A,fJe),e(A,wm),e(wm,eae),e(eae,mJe),e(wm,gJe),e(wm,QS),e(QS,hJe),e(wm,pJe),e(A,_Je),e(A,Am),e(Am,oae),e(oae,uJe),e(Am,bJe),e(Am,HS),e(HS,vJe),e(Am,FJe),e(A,TJe),e(A,Lm),e(Lm,rae),e(rae,MJe),e(Lm,EJe),e(Lm,US),e(US,CJe),e(Lm,wJe),e(A,AJe),e(A,ym),e(ym,tae),e(tae,LJe),e(ym,yJe),e(ym,JS),e(JS,xJe),e(ym,$Je),e(A,kJe),e(A,xm),e(xm,aae),e(aae,SJe),e(xm,RJe),e(xm,YS),e(YS,PJe),e(xm,BJe),e(A,IJe),e(A,$m),e($m,nae),e(nae,NJe),e($m,qJe),e($m,KS),e(KS,jJe),e($m,DJe),e(A,GJe),e(A,km),e(km,sae),e(sae,OJe),e(km,VJe),e(km,ZS),e(ZS,XJe),e(km,zJe),e(A,WJe),e(A,Sm),e(Sm,lae),e(lae,QJe),e(Sm,HJe),e(Sm,eR),e(eR,UJe),e(Sm,JJe),e(A,YJe),e(A,Rm),e(Rm,iae),e(iae,KJe),e(Rm,ZJe),e(Rm,oR),e(oR,eYe),e(Rm,oYe),e(A,rYe),e(A,Pm),e(Pm,dae),e(dae,tYe),e(Pm,aYe),e(Pm,rR),e(rR,nYe),e(Pm,sYe),e(A,lYe),e(A,Bm),e(Bm,cae),e(cae,iYe),e(Bm,dYe),e(Bm,tR),e(tR,cYe),e(Bm,fYe),e(A,mYe),e(A,Im),e(Im,fae),e(fae,gYe),e(Im,hYe),e(Im,aR),e(aR,pYe),e(Im,_Ye),e(A,uYe),e(A,Nm),e(Nm,mae),e(mae,bYe),e(Nm,vYe),e(Nm,nR),e(nR,FYe),e(Nm,TYe),e(A,MYe),e(A,qm),e(qm,gae),e(gae,EYe),e(qm,CYe),e(qm,sR),e(sR,wYe),e(qm,AYe),e(A,LYe),e(A,jm),e(jm,hae),e(hae,yYe),e(jm,xYe),e(jm,lR),e(lR,$Ye),e(jm,kYe),e(A,SYe),e(A,Dm),e(Dm,pae),e(pae,RYe),e(Dm,PYe),e(Dm,iR),e(iR,BYe),e(Dm,IYe),e(A,NYe),e(A,Gm),e(Gm,_ae),e(_ae,qYe),e(Gm,jYe),e(Gm,dR),e(dR,DYe),e(Gm,GYe),e(A,OYe),e(A,Om),e(Om,uae),e(uae,VYe),e(Om,XYe),e(Om,cR),e(cR,zYe),e(Om,WYe),e(A,QYe),e(A,Vm),e(Vm,bae),e(bae,HYe),e(Vm,UYe),e(Vm,fR),e(fR,JYe),e(Vm,YYe),e(A,KYe),e(A,Xm),e(Xm,vae),e(vae,ZYe),e(Xm,eKe),e(Xm,mR),e(mR,oKe),e(Xm,rKe),e(A,tKe),e(A,zm),e(zm,Fae),e(Fae,aKe),e(zm,nKe),e(zm,gR),e(gR,sKe),e(zm,lKe),e(A,iKe),e(A,Wm),e(Wm,Tae),e(Tae,dKe),e(Wm,cKe),e(Wm,hR),e(hR,fKe),e(Wm,mKe),e(A,gKe),e(A,Qm),e(Qm,Mae),e(Mae,hKe),e(Qm,pKe),e(Qm,pR),e(pR,_Ke),e(Qm,uKe),e(A,bKe),e(A,Hm),e(Hm,Eae),e(Eae,vKe),e(Hm,FKe),e(Hm,_R),e(_R,TKe),e(Hm,MKe),e(A,EKe),e(A,Um),e(Um,Cae),e(Cae,CKe),e(Um,wKe),e(Um,uR),e(uR,AKe),e(Um,LKe),e(A,yKe),e(A,Jm),e(Jm,wae),e(wae,xKe),e(Jm,$Ke),e(Jm,bR),e(bR,kKe),e(Jm,SKe),e(A,RKe),e(A,Ym),e(Ym,Aae),e(Aae,PKe),e(Ym,BKe),e(Ym,vR),e(vR,IKe),e(Ym,NKe),e(A,qKe),e(A,Km),e(Km,Lae),e(Lae,jKe),e(Km,DKe),e(Km,FR),e(FR,GKe),e(Km,OKe),e(A,VKe),e(A,Zm),e(Zm,yae),e(yae,XKe),e(Zm,zKe),e(Zm,TR),e(TR,WKe),e(Zm,QKe),e(A,HKe),e(A,eg),e(eg,xae),e(xae,UKe),e(eg,JKe),e(eg,MR),e(MR,YKe),e(eg,KKe),e(A,ZKe),e(A,og),e(og,$ae),e($ae,eZe),e(og,oZe),e(og,ER),e(ER,rZe),e(og,tZe),e(A,aZe),e(A,rg),e(rg,kae),e(kae,nZe),e(rg,sZe),e(rg,CR),e(CR,lZe),e(rg,iZe),e(A,dZe),e(A,tg),e(tg,Sae),e(Sae,cZe),e(tg,fZe),e(tg,wR),e(wR,mZe),e(tg,gZe),e(A,hZe),e(A,ag),e(ag,Rae),e(Rae,pZe),e(ag,_Ze),e(ag,AR),e(AR,uZe),e(ag,bZe),e(A,vZe),e(A,ng),e(ng,Pae),e(Pae,FZe),e(ng,TZe),e(ng,LR),e(LR,MZe),e(ng,EZe),e(A,CZe),e(A,sg),e(sg,Bae),e(Bae,wZe),e(sg,AZe),e(sg,yR),e(yR,LZe),e(sg,yZe),e(A,xZe),e(A,lg),e(lg,Iae),e(Iae,$Ze),e(lg,kZe),e(lg,xR),e(xR,SZe),e(lg,RZe),e(A,PZe),e(A,ig),e(ig,Nae),e(Nae,BZe),e(ig,IZe),e(ig,$R),e($R,NZe),e(ig,qZe),e(A,jZe),e(A,dg),e(dg,qae),e(qae,DZe),e(dg,GZe),e(dg,kR),e(kR,OZe),e(dg,VZe),e(A,XZe),e(A,cg),e(cg,jae),e(jae,zZe),e(cg,WZe),e(cg,SR),e(SR,QZe),e(cg,HZe),e(A,UZe),e(A,fg),e(fg,Dae),e(Dae,JZe),e(fg,YZe),e(fg,RR),e(RR,KZe),e(fg,ZZe),e(A,eeo),e(A,mg),e(mg,Gae),e(Gae,oeo),e(mg,reo),e(mg,PR),e(PR,teo),e(mg,aeo),e(A,neo),e(A,gg),e(gg,Oae),e(Oae,seo),e(gg,leo),e(gg,BR),e(BR,ieo),e(gg,deo),e(A,ceo),e(A,hg),e(hg,Vae),e(Vae,feo),e(hg,meo),e(hg,IR),e(IR,geo),e(hg,heo),e(A,peo),e(A,pg),e(pg,Xae),e(Xae,_eo),e(pg,ueo),e(pg,NR),e(NR,beo),e(pg,veo),e(A,Feo),e(A,_g),e(_g,zae),e(zae,Teo),e(_g,Meo),e(_g,qR),e(qR,Eeo),e(_g,Ceo),e(A,weo),e(A,ug),e(ug,Wae),e(Wae,Aeo),e(ug,Leo),e(ug,jR),e(jR,yeo),e(ug,xeo),e(A,$eo),e(A,bg),e(bg,Qae),e(Qae,keo),e(bg,Seo),e(bg,DR),e(DR,Reo),e(bg,Peo),e(A,Beo),e(A,vg),e(vg,Hae),e(Hae,Ieo),e(vg,Neo),e(vg,GR),e(GR,qeo),e(vg,jeo),e(A,Deo),e(A,Fg),e(Fg,Uae),e(Uae,Geo),e(Fg,Oeo),e(Fg,OR),e(OR,Veo),e(Fg,Xeo),e(A,zeo),e(A,Tg),e(Tg,Jae),e(Jae,Weo),e(Tg,Qeo),e(Tg,VR),e(VR,Heo),e(Tg,Ueo),e(A,Jeo),e(A,Mg),e(Mg,Yae),e(Yae,Yeo),e(Mg,Keo),e(Mg,XR),e(XR,Zeo),e(Mg,eoo),e(A,ooo),e(A,Eg),e(Eg,Kae),e(Kae,roo),e(Eg,too),e(Eg,zR),e(zR,aoo),e(Eg,noo),e(A,soo),e(A,Cg),e(Cg,Zae),e(Zae,loo),e(Cg,ioo),e(Cg,WR),e(WR,doo),e(Cg,coo),e(A,foo),e(A,wg),e(wg,ene),e(ene,moo),e(wg,goo),e(wg,QR),e(QR,hoo),e(wg,poo),e(A,_oo),e(A,Ag),e(Ag,one),e(one,uoo),e(Ag,boo),e(Ag,HR),e(HR,voo),e(Ag,Foo),e(A,Too),e(A,Lg),e(Lg,rne),e(rne,Moo),e(Lg,Eoo),e(Lg,UR),e(UR,Coo),e(Lg,woo),e(A,Aoo),e(A,yg),e(yg,tne),e(tne,Loo),e(yg,yoo),e(yg,JR),e(JR,xoo),e(yg,$oo),e(A,koo),e(A,xg),e(xg,ane),e(ane,Soo),e(xg,Roo),e(xg,YR),e(YR,Poo),e(xg,Boo),e(A,Ioo),e(A,$g),e($g,nne),e(nne,Noo),e($g,qoo),e($g,KR),e(KR,joo),e($g,Doo),e(A,Goo),e(A,kg),e(kg,sne),e(sne,Ooo),e(kg,Voo),e(kg,ZR),e(ZR,Xoo),e(kg,zoo),e(A,Woo),e(A,Sg),e(Sg,lne),e(lne,Qoo),e(Sg,Hoo),e(Sg,eP),e(eP,Uoo),e(Sg,Joo),e(A,Yoo),e(A,Rg),e(Rg,ine),e(ine,Koo),e(Rg,Zoo),e(Rg,oP),e(oP,ero),e(Rg,oro),e(A,rro),e(A,Pg),e(Pg,dne),e(dne,tro),e(Pg,aro),e(Pg,rP),e(rP,nro),e(Pg,sro),e(A,lro),e(A,Bg),e(Bg,cne),e(cne,iro),e(Bg,dro),e(Bg,tP),e(tP,cro),e(Bg,fro),e(A,mro),e(A,Ig),e(Ig,fne),e(fne,gro),e(Ig,hro),e(Ig,aP),e(aP,pro),e(Ig,_ro),e(A,uro),e(A,Ng),e(Ng,mne),e(mne,bro),e(Ng,vro),e(Ng,nP),e(nP,Fro),e(Ng,Tro),e(A,Mro),e(A,qg),e(qg,gne),e(gne,Ero),e(qg,Cro),e(qg,sP),e(sP,wro),e(qg,Aro),e(A,Lro),e(A,jg),e(jg,hne),e(hne,yro),e(jg,xro),e(jg,lP),e(lP,$ro),e(jg,kro),e(A,Sro),e(A,Dg),e(Dg,pne),e(pne,Rro),e(Dg,Pro),e(Dg,iP),e(iP,Bro),e(Dg,Iro),e(wr,Nro),M(Gg,wr,null),e(wo,qro),e(wo,Og),M(kL,Og,null),e(Og,jro),e(Og,_ne),e(_ne,Dro),b(f,wGe,u),b(f,ki,u),e(ki,Vg),e(Vg,une),M(SL,une,null),e(ki,Gro),e(ki,bne),e(bne,Oro),b(f,AGe,u),b(f,Ao,u),M(RL,Ao,null),e(Ao,Vro),e(Ao,PL),e(PL,Xro),e(PL,dP),e(dP,zro),e(PL,Wro),e(Ao,Qro),e(Ao,BL),e(BL,Hro),e(BL,vne),e(vne,Uro),e(BL,Jro),e(Ao,Yro),e(Ao,Ar),M(IL,Ar,null),e(Ar,Kro),e(Ar,Fne),e(Fne,Zro),e(Ar,eto),e(Ar,ka),e(ka,oto),e(ka,Tne),e(Tne,rto),e(ka,tto),e(ka,Mne),e(Mne,ato),e(ka,nto),e(ka,Ene),e(Ene,sto),e(ka,lto),e(Ar,ito),e(Ar,k),e(k,Nn),e(Nn,Cne),e(Cne,dto),e(Nn,cto),e(Nn,cP),e(cP,fto),e(Nn,mto),e(Nn,fP),e(fP,gto),e(Nn,hto),e(k,pto),e(k,qn),e(qn,wne),e(wne,_to),e(qn,uto),e(qn,mP),e(mP,bto),e(qn,vto),e(qn,gP),e(gP,Fto),e(qn,Tto),e(k,Mto),e(k,jn),e(jn,Ane),e(Ane,Eto),e(jn,Cto),e(jn,hP),e(hP,wto),e(jn,Ato),e(jn,pP),e(pP,Lto),e(jn,yto),e(k,xto),e(k,Xg),e(Xg,Lne),e(Lne,$to),e(Xg,kto),e(Xg,_P),e(_P,Sto),e(Xg,Rto),e(k,Pto),e(k,Dn),e(Dn,yne),e(yne,Bto),e(Dn,Ito),e(Dn,uP),e(uP,Nto),e(Dn,qto),e(Dn,bP),e(bP,jto),e(Dn,Dto),e(k,Gto),e(k,zg),e(zg,xne),e(xne,Oto),e(zg,Vto),e(zg,vP),e(vP,Xto),e(zg,zto),e(k,Wto),e(k,Wg),e(Wg,$ne),e($ne,Qto),e(Wg,Hto),e(Wg,FP),e(FP,Uto),e(Wg,Jto),e(k,Yto),e(k,Qg),e(Qg,kne),e(kne,Kto),e(Qg,Zto),e(Qg,TP),e(TP,eao),e(Qg,oao),e(k,rao),e(k,Gn),e(Gn,Sne),e(Sne,tao),e(Gn,aao),e(Gn,MP),e(MP,nao),e(Gn,sao),e(Gn,EP),e(EP,lao),e(Gn,iao),e(k,dao),e(k,On),e(On,Rne),e(Rne,cao),e(On,fao),e(On,CP),e(CP,mao),e(On,gao),e(On,wP),e(wP,hao),e(On,pao),e(k,_ao),e(k,Vn),e(Vn,Pne),e(Pne,uao),e(Vn,bao),e(Vn,AP),e(AP,vao),e(Vn,Fao),e(Vn,LP),e(LP,Tao),e(Vn,Mao),e(k,Eao),e(k,Hg),e(Hg,Bne),e(Bne,Cao),e(Hg,wao),e(Hg,yP),e(yP,Aao),e(Hg,Lao),e(k,yao),e(k,Ug),e(Ug,Ine),e(Ine,xao),e(Ug,$ao),e(Ug,xP),e(xP,kao),e(Ug,Sao),e(k,Rao),e(k,Jg),e(Jg,Nne),e(Nne,Pao),e(Jg,Bao),e(Jg,$P),e($P,Iao),e(Jg,Nao),e(k,qao),e(k,Xn),e(Xn,qne),e(qne,jao),e(Xn,Dao),e(Xn,kP),e(kP,Gao),e(Xn,Oao),e(Xn,SP),e(SP,Vao),e(Xn,Xao),e(k,zao),e(k,Yg),e(Yg,jne),e(jne,Wao),e(Yg,Qao),e(Yg,RP),e(RP,Hao),e(Yg,Uao),e(k,Jao),e(k,zn),e(zn,Dne),e(Dne,Yao),e(zn,Kao),e(zn,PP),e(PP,Zao),e(zn,eno),e(zn,BP),e(BP,ono),e(zn,rno),e(k,tno),e(k,Wn),e(Wn,Gne),e(Gne,ano),e(Wn,nno),e(Wn,IP),e(IP,sno),e(Wn,lno),e(Wn,NP),e(NP,ino),e(Wn,dno),e(k,cno),e(k,Qn),e(Qn,One),e(One,fno),e(Qn,mno),e(Qn,qP),e(qP,gno),e(Qn,hno),e(Qn,jP),e(jP,pno),e(Qn,_no),e(k,uno),e(k,Kg),e(Kg,Vne),e(Vne,bno),e(Kg,vno),e(Kg,DP),e(DP,Fno),e(Kg,Tno),e(k,Mno),e(k,Hn),e(Hn,Xne),e(Xne,Eno),e(Hn,Cno),e(Hn,GP),e(GP,wno),e(Hn,Ano),e(Hn,OP),e(OP,Lno),e(Hn,yno),e(k,xno),e(k,Un),e(Un,zne),e(zne,$no),e(Un,kno),e(Un,VP),e(VP,Sno),e(Un,Rno),e(Un,XP),e(XP,Pno),e(Un,Bno),e(k,Ino),e(k,Jn),e(Jn,Wne),e(Wne,Nno),e(Jn,qno),e(Jn,zP),e(zP,jno),e(Jn,Dno),e(Jn,WP),e(WP,Gno),e(Jn,Ono),e(k,Vno),e(k,Yn),e(Yn,Qne),e(Qne,Xno),e(Yn,zno),e(Yn,QP),e(QP,Wno),e(Yn,Qno),e(Yn,HP),e(HP,Hno),e(Yn,Uno),e(k,Jno),e(k,Kn),e(Kn,Hne),e(Hne,Yno),e(Kn,Kno),e(Kn,UP),e(UP,Zno),e(Kn,eso),e(Kn,JP),e(JP,oso),e(Kn,rso),e(k,tso),e(k,Zn),e(Zn,Une),e(Une,aso),e(Zn,nso),e(Zn,YP),e(YP,sso),e(Zn,lso),e(Zn,KP),e(KP,iso),e(Zn,dso),e(k,cso),e(k,Zg),e(Zg,Jne),e(Jne,fso),e(Zg,mso),e(Zg,ZP),e(ZP,gso),e(Zg,hso),e(k,pso),e(k,es),e(es,Yne),e(Yne,_so),e(es,uso),e(es,eB),e(eB,bso),e(es,vso),e(es,oB),e(oB,Fso),e(es,Tso),e(k,Mso),e(k,eh),e(eh,Kne),e(Kne,Eso),e(eh,Cso),e(eh,rB),e(rB,wso),e(eh,Aso),e(k,Lso),e(k,os),e(os,Zne),e(Zne,yso),e(os,xso),e(os,tB),e(tB,$so),e(os,kso),e(os,aB),e(aB,Sso),e(os,Rso),e(k,Pso),e(k,rs),e(rs,ese),e(ese,Bso),e(rs,Iso),e(rs,nB),e(nB,Nso),e(rs,qso),e(rs,sB),e(sB,jso),e(rs,Dso),e(k,Gso),e(k,ts),e(ts,ose),e(ose,Oso),e(ts,Vso),e(ts,lB),e(lB,Xso),e(ts,zso),e(ts,iB),e(iB,Wso),e(ts,Qso),e(k,Hso),e(k,oh),e(oh,rse),e(rse,Uso),e(oh,Jso),e(oh,dB),e(dB,Yso),e(oh,Kso),e(k,Zso),e(k,as),e(as,tse),e(tse,elo),e(as,olo),e(as,cB),e(cB,rlo),e(as,tlo),e(as,fB),e(fB,alo),e(as,nlo),e(k,slo),e(k,ns),e(ns,ase),e(ase,llo),e(ns,ilo),e(ns,mB),e(mB,dlo),e(ns,clo),e(ns,gB),e(gB,flo),e(ns,mlo),e(k,glo),e(k,rh),e(rh,nse),e(nse,hlo),e(rh,plo),e(rh,hB),e(hB,_lo),e(rh,ulo),e(k,blo),e(k,ss),e(ss,sse),e(sse,vlo),e(ss,Flo),e(ss,pB),e(pB,Tlo),e(ss,Mlo),e(ss,_B),e(_B,Elo),e(ss,Clo),e(k,wlo),e(k,ls),e(ls,lse),e(lse,Alo),e(ls,Llo),e(ls,uB),e(uB,ylo),e(ls,xlo),e(ls,bB),e(bB,$lo),e(ls,klo),e(k,Slo),e(k,is),e(is,ise),e(ise,Rlo),e(is,Plo),e(is,vB),e(vB,Blo),e(is,Ilo),e(is,FB),e(FB,Nlo),e(is,qlo),e(k,jlo),e(k,ds),e(ds,dse),e(dse,Dlo),e(ds,Glo),e(ds,TB),e(TB,Olo),e(ds,Vlo),e(ds,MB),e(MB,Xlo),e(ds,zlo),e(k,Wlo),e(k,cs),e(cs,cse),e(cse,Qlo),e(cs,Hlo),e(cs,EB),e(EB,Ulo),e(cs,Jlo),e(cs,CB),e(CB,Ylo),e(cs,Klo),e(k,Zlo),e(k,fs),e(fs,fse),e(fse,eio),e(fs,oio),e(fs,wB),e(wB,rio),e(fs,tio),e(fs,AB),e(AB,aio),e(fs,nio),e(k,sio),e(k,ms),e(ms,mse),e(mse,lio),e(ms,iio),e(ms,LB),e(LB,dio),e(ms,cio),e(ms,yB),e(yB,fio),e(ms,mio),e(k,gio),e(k,gs),e(gs,gse),e(gse,hio),e(gs,pio),e(gs,xB),e(xB,_io),e(gs,uio),e(gs,$B),e($B,bio),e(gs,vio),e(k,Fio),e(k,th),e(th,hse),e(hse,Tio),e(th,Mio),e(th,kB),e(kB,Eio),e(th,Cio),e(k,wio),e(k,hs),e(hs,pse),e(pse,Aio),e(hs,Lio),e(hs,SB),e(SB,yio),e(hs,xio),e(hs,RB),e(RB,$io),e(hs,kio),e(k,Sio),e(k,ah),e(ah,_se),e(_se,Rio),e(ah,Pio),e(ah,PB),e(PB,Bio),e(ah,Iio),e(k,Nio),e(k,nh),e(nh,use),e(use,qio),e(nh,jio),e(nh,BB),e(BB,Dio),e(nh,Gio),e(k,Oio),e(k,ps),e(ps,bse),e(bse,Vio),e(ps,Xio),e(ps,IB),e(IB,zio),e(ps,Wio),e(ps,NB),e(NB,Qio),e(ps,Hio),e(k,Uio),e(k,_s),e(_s,vse),e(vse,Jio),e(_s,Yio),e(_s,qB),e(qB,Kio),e(_s,Zio),e(_s,jB),e(jB,edo),e(_s,odo),e(k,rdo),e(k,us),e(us,Fse),e(Fse,tdo),e(us,ado),e(us,DB),e(DB,ndo),e(us,sdo),e(us,GB),e(GB,ldo),e(us,ido),e(k,ddo),e(k,sh),e(sh,Tse),e(Tse,cdo),e(sh,fdo),e(sh,OB),e(OB,mdo),e(sh,gdo),e(k,hdo),e(k,bs),e(bs,Mse),e(Mse,pdo),e(bs,_do),e(bs,VB),e(VB,udo),e(bs,bdo),e(bs,XB),e(XB,vdo),e(bs,Fdo),e(k,Tdo),e(k,vs),e(vs,Ese),e(Ese,Mdo),e(vs,Edo),e(vs,zB),e(zB,Cdo),e(vs,wdo),e(vs,WB),e(WB,Ado),e(vs,Ldo),e(k,ydo),e(k,Fs),e(Fs,Cse),e(Cse,xdo),e(Fs,$do),e(Fs,QB),e(QB,kdo),e(Fs,Sdo),e(Fs,HB),e(HB,Rdo),e(Fs,Pdo),e(k,Bdo),e(k,Ts),e(Ts,wse),e(wse,Ido),e(Ts,Ndo),e(Ts,UB),e(UB,qdo),e(Ts,jdo),e(Ts,JB),e(JB,Ddo),e(Ts,Gdo),e(k,Odo),e(k,Ms),e(Ms,Ase),e(Ase,Vdo),e(Ms,Xdo),e(Ms,YB),e(YB,zdo),e(Ms,Wdo),e(Ms,KB),e(KB,Qdo),e(Ms,Hdo),e(k,Udo),e(k,lh),e(lh,Lse),e(Lse,Jdo),e(lh,Ydo),e(lh,ZB),e(ZB,Kdo),e(lh,Zdo),e(k,eco),e(k,Es),e(Es,yse),e(yse,oco),e(Es,rco),e(Es,eI),e(eI,tco),e(Es,aco),e(Es,oI),e(oI,nco),e(Es,sco),e(k,lco),e(k,ih),e(ih,xse),e(xse,ico),e(ih,dco),e(ih,rI),e(rI,cco),e(ih,fco),e(k,mco),e(k,dh),e(dh,$se),e($se,gco),e(dh,hco),e(dh,tI),e(tI,pco),e(dh,_co),e(k,uco),e(k,ch),e(ch,kse),e(kse,bco),e(ch,vco),e(ch,aI),e(aI,Fco),e(ch,Tco),e(k,Mco),e(k,fh),e(fh,Sse),e(Sse,Eco),e(fh,Cco),e(fh,nI),e(nI,wco),e(fh,Aco),e(k,Lco),e(k,Cs),e(Cs,Rse),e(Rse,yco),e(Cs,xco),e(Cs,sI),e(sI,$co),e(Cs,kco),e(Cs,lI),e(lI,Sco),e(Cs,Rco),e(k,Pco),e(k,mh),e(mh,Pse),e(Pse,Bco),e(mh,Ico),e(mh,iI),e(iI,Nco),e(mh,qco),e(k,jco),e(k,ws),e(ws,Bse),e(Bse,Dco),e(ws,Gco),e(ws,dI),e(dI,Oco),e(ws,Vco),e(ws,cI),e(cI,Xco),e(ws,zco),e(k,Wco),e(k,As),e(As,Ise),e(Ise,Qco),e(As,Hco),e(As,fI),e(fI,Uco),e(As,Jco),e(As,mI),e(mI,Yco),e(As,Kco),e(k,Zco),e(k,Ls),e(Ls,Nse),e(Nse,efo),e(Ls,ofo),e(Ls,gI),e(gI,rfo),e(Ls,tfo),e(Ls,hI),e(hI,afo),e(Ls,nfo),e(k,sfo),e(k,ys),e(ys,qse),e(qse,lfo),e(ys,ifo),e(ys,pI),e(pI,dfo),e(ys,cfo),e(ys,_I),e(_I,ffo),e(ys,mfo),e(k,gfo),e(k,xs),e(xs,jse),e(jse,hfo),e(xs,pfo),e(xs,uI),e(uI,_fo),e(xs,ufo),e(xs,bI),e(bI,bfo),e(xs,vfo),e(k,Ffo),e(k,$s),e($s,Dse),e(Dse,Tfo),e($s,Mfo),e($s,vI),e(vI,Efo),e($s,Cfo),e($s,FI),e(FI,wfo),e($s,Afo),e(k,Lfo),e(k,gh),e(gh,Gse),e(Gse,yfo),e(gh,xfo),e(gh,TI),e(TI,$fo),e(gh,kfo),e(k,Sfo),e(k,hh),e(hh,Ose),e(Ose,Rfo),e(hh,Pfo),e(hh,MI),e(MI,Bfo),e(hh,Ifo),e(k,Nfo),e(k,ks),e(ks,Vse),e(Vse,qfo),e(ks,jfo),e(ks,EI),e(EI,Dfo),e(ks,Gfo),e(ks,CI),e(CI,Ofo),e(ks,Vfo),e(k,Xfo),e(k,Ss),e(Ss,Xse),e(Xse,zfo),e(Ss,Wfo),e(Ss,wI),e(wI,Qfo),e(Ss,Hfo),e(Ss,AI),e(AI,Ufo),e(Ss,Jfo),e(k,Yfo),e(k,Rs),e(Rs,zse),e(zse,Kfo),e(Rs,Zfo),e(Rs,LI),e(LI,emo),e(Rs,omo),e(Rs,yI),e(yI,rmo),e(Rs,tmo),e(k,amo),e(k,ph),e(ph,Wse),e(Wse,nmo),e(ph,smo),e(ph,xI),e(xI,lmo),e(ph,imo),e(k,dmo),e(k,_h),e(_h,Qse),e(Qse,cmo),e(_h,fmo),e(_h,$I),e($I,mmo),e(_h,gmo),e(k,hmo),e(k,uh),e(uh,Hse),e(Hse,pmo),e(uh,_mo),e(uh,kI),e(kI,umo),e(uh,bmo),e(k,vmo),e(k,Ps),e(Ps,Use),e(Use,Fmo),e(Ps,Tmo),e(Ps,SI),e(SI,Mmo),e(Ps,Emo),e(Ps,RI),e(RI,Cmo),e(Ps,wmo),e(k,Amo),e(k,Bs),e(Bs,Jse),e(Jse,Lmo),e(Bs,ymo),e(Bs,PI),e(PI,xmo),e(Bs,$mo),e(Bs,BI),e(BI,kmo),e(Bs,Smo),e(k,Rmo),e(k,bh),e(bh,Yse),e(Yse,Pmo),e(bh,Bmo),e(bh,II),e(II,Imo),e(bh,Nmo),e(k,qmo),e(k,vh),e(vh,Kse),e(Kse,jmo),e(vh,Dmo),e(vh,NI),e(NI,Gmo),e(vh,Omo),e(k,Vmo),e(k,Fh),e(Fh,Zse),e(Zse,Xmo),e(Fh,zmo),e(Fh,qI),e(qI,Wmo),e(Fh,Qmo),e(k,Hmo),e(k,Is),e(Is,ele),e(ele,Umo),e(Is,Jmo),e(Is,jI),e(jI,Ymo),e(Is,Kmo),e(Is,DI),e(DI,Zmo),e(Is,ego),e(k,ogo),e(k,Th),e(Th,ole),e(ole,rgo),e(Th,tgo),e(Th,GI),e(GI,ago),e(Th,ngo),e(k,sgo),e(k,Mh),e(Mh,rle),e(rle,lgo),e(Mh,igo),e(Mh,OI),e(OI,dgo),e(Mh,cgo),e(k,fgo),e(k,Ns),e(Ns,tle),e(tle,mgo),e(Ns,ggo),e(Ns,VI),e(VI,hgo),e(Ns,pgo),e(Ns,XI),e(XI,_go),e(Ns,ugo),e(k,bgo),e(k,qs),e(qs,ale),e(ale,vgo),e(qs,Fgo),e(qs,zI),e(zI,Tgo),e(qs,Mgo),e(qs,WI),e(WI,Ego),e(qs,Cgo),e(k,wgo),e(k,js),e(js,nle),e(nle,Ago),e(js,Lgo),e(js,QI),e(QI,ygo),e(js,xgo),e(js,HI),e(HI,$go),e(js,kgo),e(k,Sgo),e(k,Ds),e(Ds,sle),e(sle,Rgo),e(Ds,Pgo),e(Ds,UI),e(UI,Bgo),e(Ds,Igo),e(Ds,JI),e(JI,Ngo),e(Ds,qgo),e(Ar,jgo),M(Eh,Ar,null),e(Ao,Dgo),e(Ao,Ch),M(NL,Ch,null),e(Ch,Ggo),e(Ch,lle),e(lle,Ogo),b(f,LGe,u),b(f,Si,u),e(Si,wh),e(wh,ile),M(qL,ile,null),e(Si,Vgo),e(Si,dle),e(dle,Xgo),b(f,yGe,u),b(f,Lo,u),M(jL,Lo,null),e(Lo,zgo),e(Lo,DL),e(DL,Wgo),e(DL,YI),e(YI,Qgo),e(DL,Hgo),e(Lo,Ugo),e(Lo,GL),e(GL,Jgo),e(GL,cle),e(cle,Ygo),e(GL,Kgo),e(Lo,Zgo),e(Lo,He),M(OL,He,null),e(He,eho),e(He,fle),e(fle,oho),e(He,rho),e(He,Sa),e(Sa,tho),e(Sa,mle),e(mle,aho),e(Sa,nho),e(Sa,gle),e(gle,sho),e(Sa,lho),e(Sa,hle),e(hle,iho),e(Sa,dho),e(He,cho),e(He,Y),e(Y,Ah),e(Ah,ple),e(ple,fho),e(Ah,mho),e(Ah,KI),e(KI,gho),e(Ah,hho),e(Y,pho),e(Y,Lh),e(Lh,_le),e(_le,_ho),e(Lh,uho),e(Lh,ZI),e(ZI,bho),e(Lh,vho),e(Y,Fho),e(Y,yh),e(yh,ule),e(ule,Tho),e(yh,Mho),e(yh,eN),e(eN,Eho),e(yh,Cho),e(Y,who),e(Y,xh),e(xh,ble),e(ble,Aho),e(xh,Lho),e(xh,oN),e(oN,yho),e(xh,xho),e(Y,$ho),e(Y,$h),e($h,vle),e(vle,kho),e($h,Sho),e($h,rN),e(rN,Rho),e($h,Pho),e(Y,Bho),e(Y,kh),e(kh,Fle),e(Fle,Iho),e(kh,Nho),e(kh,tN),e(tN,qho),e(kh,jho),e(Y,Dho),e(Y,Sh),e(Sh,Tle),e(Tle,Gho),e(Sh,Oho),e(Sh,aN),e(aN,Vho),e(Sh,Xho),e(Y,zho),e(Y,Rh),e(Rh,Mle),e(Mle,Who),e(Rh,Qho),e(Rh,nN),e(nN,Hho),e(Rh,Uho),e(Y,Jho),e(Y,Ph),e(Ph,Ele),e(Ele,Yho),e(Ph,Kho),e(Ph,sN),e(sN,Zho),e(Ph,epo),e(Y,opo),e(Y,Bh),e(Bh,Cle),e(Cle,rpo),e(Bh,tpo),e(Bh,lN),e(lN,apo),e(Bh,npo),e(Y,spo),e(Y,Ih),e(Ih,wle),e(wle,lpo),e(Ih,ipo),e(Ih,iN),e(iN,dpo),e(Ih,cpo),e(Y,fpo),e(Y,Nh),e(Nh,Ale),e(Ale,mpo),e(Nh,gpo),e(Nh,dN),e(dN,hpo),e(Nh,ppo),e(Y,_po),e(Y,qh),e(qh,Lle),e(Lle,upo),e(qh,bpo),e(qh,cN),e(cN,vpo),e(qh,Fpo),e(Y,Tpo),e(Y,jh),e(jh,yle),e(yle,Mpo),e(jh,Epo),e(jh,fN),e(fN,Cpo),e(jh,wpo),e(Y,Apo),e(Y,Dh),e(Dh,xle),e(xle,Lpo),e(Dh,ypo),e(Dh,mN),e(mN,xpo),e(Dh,$po),e(Y,kpo),e(Y,Gh),e(Gh,$le),e($le,Spo),e(Gh,Rpo),e(Gh,gN),e(gN,Ppo),e(Gh,Bpo),e(Y,Ipo),e(Y,Oh),e(Oh,kle),e(kle,Npo),e(Oh,qpo),e(Oh,hN),e(hN,jpo),e(Oh,Dpo),e(Y,Gpo),e(Y,Vh),e(Vh,Sle),e(Sle,Opo),e(Vh,Vpo),e(Vh,pN),e(pN,Xpo),e(Vh,zpo),e(Y,Wpo),e(Y,Xh),e(Xh,Rle),e(Rle,Qpo),e(Xh,Hpo),e(Xh,_N),e(_N,Upo),e(Xh,Jpo),e(Y,Ypo),e(Y,zh),e(zh,Ple),e(Ple,Kpo),e(zh,Zpo),e(zh,uN),e(uN,e_o),e(zh,o_o),e(Y,r_o),e(Y,Wh),e(Wh,Ble),e(Ble,t_o),e(Wh,a_o),e(Wh,bN),e(bN,n_o),e(Wh,s_o),e(Y,l_o),e(Y,Qh),e(Qh,Ile),e(Ile,i_o),e(Qh,d_o),e(Qh,vN),e(vN,c_o),e(Qh,f_o),e(Y,m_o),e(Y,Hh),e(Hh,Nle),e(Nle,g_o),e(Hh,h_o),e(Hh,FN),e(FN,p_o),e(Hh,__o),e(Y,u_o),e(Y,Uh),e(Uh,qle),e(qle,b_o),e(Uh,v_o),e(Uh,TN),e(TN,F_o),e(Uh,T_o),e(Y,M_o),e(Y,Jh),e(Jh,jle),e(jle,E_o),e(Jh,C_o),e(Jh,MN),e(MN,w_o),e(Jh,A_o),e(Y,L_o),e(Y,Yh),e(Yh,Dle),e(Dle,y_o),e(Yh,x_o),e(Yh,EN),e(EN,$_o),e(Yh,k_o),e(Y,S_o),e(Y,Kh),e(Kh,Gle),e(Gle,R_o),e(Kh,P_o),e(Kh,CN),e(CN,B_o),e(Kh,I_o),e(Y,N_o),e(Y,Zh),e(Zh,Ole),e(Ole,q_o),e(Zh,j_o),e(Zh,wN),e(wN,D_o),e(Zh,G_o),e(Y,O_o),e(Y,ep),e(ep,Vle),e(Vle,V_o),e(ep,X_o),e(ep,AN),e(AN,z_o),e(ep,W_o),e(Y,Q_o),e(Y,op),e(op,Xle),e(Xle,H_o),e(op,U_o),e(op,LN),e(LN,J_o),e(op,Y_o),e(Y,K_o),e(Y,rp),e(rp,zle),e(zle,Z_o),e(rp,euo),e(rp,yN),e(yN,ouo),e(rp,ruo),e(Y,tuo),e(Y,tp),e(tp,Wle),e(Wle,auo),e(tp,nuo),e(tp,xN),e(xN,suo),e(tp,luo),e(Y,iuo),e(Y,ap),e(ap,Qle),e(Qle,duo),e(ap,cuo),e(ap,$N),e($N,fuo),e(ap,muo),e(He,guo),M(np,He,null),e(He,huo),M(sp,He,null),e(Lo,puo),e(Lo,lp),M(VL,lp,null),e(lp,_uo),e(lp,Hle),e(Hle,uuo),b(f,xGe,u),b(f,Ri,u),e(Ri,ip),e(ip,Ule),M(XL,Ule,null),e(Ri,buo),e(Ri,Jle),e(Jle,vuo),b(f,$Ge,u),b(f,yo,u),M(zL,yo,null),e(yo,Fuo),e(yo,WL),e(WL,Tuo),e(WL,kN),e(kN,Muo),e(WL,Euo),e(yo,Cuo),e(yo,QL),e(QL,wuo),e(QL,Yle),e(Yle,Auo),e(QL,Luo),e(yo,yuo),e(yo,Ue),M(HL,Ue,null),e(Ue,xuo),e(Ue,Kle),e(Kle,$uo),e(Ue,kuo),e(Ue,Pi),e(Pi,Suo),e(Pi,Zle),e(Zle,Ruo),e(Pi,Puo),e(Pi,eie),e(eie,Buo),e(Pi,Iuo),e(Ue,Nuo),e(Ue,he),e(he,dp),e(dp,oie),e(oie,quo),e(dp,juo),e(dp,SN),e(SN,Duo),e(dp,Guo),e(he,Ouo),e(he,cp),e(cp,rie),e(rie,Vuo),e(cp,Xuo),e(cp,tie),e(tie,zuo),e(cp,Wuo),e(he,Quo),e(he,fp),e(fp,aie),e(aie,Huo),e(fp,Uuo),e(fp,RN),e(RN,Juo),e(fp,Yuo),e(he,Kuo),e(he,mp),e(mp,nie),e(nie,Zuo),e(mp,e1o),e(mp,PN),e(PN,o1o),e(mp,r1o),e(he,t1o),e(he,gp),e(gp,sie),e(sie,a1o),e(gp,n1o),e(gp,BN),e(BN,s1o),e(gp,l1o),e(he,i1o),e(he,hp),e(hp,lie),e(lie,d1o),e(hp,c1o),e(hp,IN),e(IN,f1o),e(hp,m1o),e(he,g1o),e(he,pp),e(pp,iie),e(iie,h1o),e(pp,p1o),e(pp,NN),e(NN,_1o),e(pp,u1o),e(he,b1o),e(he,_p),e(_p,die),e(die,v1o),e(_p,F1o),e(_p,qN),e(qN,T1o),e(_p,M1o),e(he,E1o),e(he,up),e(up,cie),e(cie,C1o),e(up,w1o),e(up,jN),e(jN,A1o),e(up,L1o),e(he,y1o),e(he,bp),e(bp,fie),e(fie,x1o),e(bp,$1o),e(bp,DN),e(DN,k1o),e(bp,S1o),e(he,R1o),e(he,vp),e(vp,mie),e(mie,P1o),e(vp,B1o),e(vp,GN),e(GN,I1o),e(vp,N1o),e(he,q1o),e(he,Fp),e(Fp,gie),e(gie,j1o),e(Fp,D1o),e(Fp,ON),e(ON,G1o),e(Fp,O1o),e(he,V1o),e(he,Tp),e(Tp,hie),e(hie,X1o),e(Tp,z1o),e(Tp,VN),e(VN,W1o),e(Tp,Q1o),e(he,H1o),e(he,Mp),e(Mp,pie),e(pie,U1o),e(Mp,J1o),e(Mp,XN),e(XN,Y1o),e(Mp,K1o),e(he,Z1o),e(he,Ep),e(Ep,_ie),e(_ie,ebo),e(Ep,obo),e(Ep,zN),e(zN,rbo),e(Ep,tbo),e(he,abo),e(he,Cp),e(Cp,uie),e(uie,nbo),e(Cp,sbo),e(Cp,WN),e(WN,lbo),e(Cp,ibo),e(he,dbo),e(he,wp),e(wp,bie),e(bie,cbo),e(wp,fbo),e(wp,QN),e(QN,mbo),e(wp,gbo),e(Ue,hbo),M(Ap,Ue,null),e(Ue,pbo),M(Lp,Ue,null),e(yo,_bo),e(yo,yp),M(UL,yp,null),e(yp,ubo),e(yp,vie),e(vie,bbo),b(f,kGe,u),b(f,Bi,u),e(Bi,xp),e(xp,Fie),M(JL,Fie,null),e(Bi,vbo),e(Bi,Tie),e(Tie,Fbo),b(f,SGe,u),b(f,xo,u),M(YL,xo,null),e(xo,Tbo),e(xo,Ii),e(Ii,Mbo),e(Ii,HN),e(HN,Ebo),e(Ii,Cbo),e(Ii,UN),e(UN,wbo),e(Ii,Abo),e(xo,Lbo),e(xo,KL),e(KL,ybo),e(KL,Mie),e(Mie,xbo),e(KL,$bo),e(xo,kbo),e(xo,st),M(ZL,st,null),e(st,Sbo),e(st,Eie),e(Eie,Rbo),e(st,Pbo),e(st,Ni),e(Ni,Bbo),e(Ni,Cie),e(Cie,Ibo),e(Ni,Nbo),e(Ni,JN),e(JN,qbo),e(Ni,jbo),e(st,Dbo),M($p,st,null),e(xo,Gbo),e(xo,Je),M(ey,Je,null),e(Je,Obo),e(Je,wie),e(wie,Vbo),e(Je,Xbo),e(Je,Ra),e(Ra,zbo),e(Ra,Aie),e(Aie,Wbo),e(Ra,Qbo),e(Ra,Lie),e(Lie,Hbo),e(Ra,Ubo),e(Ra,yie),e(yie,Jbo),e(Ra,Ybo),e(Je,Kbo),e(Je,y),e(y,kp),e(kp,xie),e(xie,Zbo),e(kp,e2o),e(kp,YN),e(YN,o2o),e(kp,r2o),e(y,t2o),e(y,Sp),e(Sp,$ie),e($ie,a2o),e(Sp,n2o),e(Sp,KN),e(KN,s2o),e(Sp,l2o),e(y,i2o),e(y,Rp),e(Rp,kie),e(kie,d2o),e(Rp,c2o),e(Rp,ZN),e(ZN,f2o),e(Rp,m2o),e(y,g2o),e(y,Pp),e(Pp,Sie),e(Sie,h2o),e(Pp,p2o),e(Pp,eq),e(eq,_2o),e(Pp,u2o),e(y,b2o),e(y,Bp),e(Bp,Rie),e(Rie,v2o),e(Bp,F2o),e(Bp,oq),e(oq,T2o),e(Bp,M2o),e(y,E2o),e(y,Ip),e(Ip,Pie),e(Pie,C2o),e(Ip,w2o),e(Ip,rq),e(rq,A2o),e(Ip,L2o),e(y,y2o),e(y,Np),e(Np,Bie),e(Bie,x2o),e(Np,$2o),e(Np,tq),e(tq,k2o),e(Np,S2o),e(y,R2o),e(y,qp),e(qp,Iie),e(Iie,P2o),e(qp,B2o),e(qp,aq),e(aq,I2o),e(qp,N2o),e(y,q2o),e(y,jp),e(jp,Nie),e(Nie,j2o),e(jp,D2o),e(jp,nq),e(nq,G2o),e(jp,O2o),e(y,V2o),e(y,Dp),e(Dp,qie),e(qie,X2o),e(Dp,z2o),e(Dp,sq),e(sq,W2o),e(Dp,Q2o),e(y,H2o),e(y,Gp),e(Gp,jie),e(jie,U2o),e(Gp,J2o),e(Gp,lq),e(lq,Y2o),e(Gp,K2o),e(y,Z2o),e(y,Op),e(Op,Die),e(Die,e4o),e(Op,o4o),e(Op,iq),e(iq,r4o),e(Op,t4o),e(y,a4o),e(y,Vp),e(Vp,Gie),e(Gie,n4o),e(Vp,s4o),e(Vp,dq),e(dq,l4o),e(Vp,i4o),e(y,d4o),e(y,Xp),e(Xp,Oie),e(Oie,c4o),e(Xp,f4o),e(Xp,cq),e(cq,m4o),e(Xp,g4o),e(y,h4o),e(y,zp),e(zp,Vie),e(Vie,p4o),e(zp,_4o),e(zp,fq),e(fq,u4o),e(zp,b4o),e(y,v4o),e(y,Wp),e(Wp,Xie),e(Xie,F4o),e(Wp,T4o),e(Wp,mq),e(mq,M4o),e(Wp,E4o),e(y,C4o),e(y,Qp),e(Qp,zie),e(zie,w4o),e(Qp,A4o),e(Qp,gq),e(gq,L4o),e(Qp,y4o),e(y,x4o),e(y,Hp),e(Hp,Wie),e(Wie,$4o),e(Hp,k4o),e(Hp,hq),e(hq,S4o),e(Hp,R4o),e(y,P4o),e(y,Up),e(Up,Qie),e(Qie,B4o),e(Up,I4o),e(Up,pq),e(pq,N4o),e(Up,q4o),e(y,j4o),e(y,Jp),e(Jp,Hie),e(Hie,D4o),e(Jp,G4o),e(Jp,_q),e(_q,O4o),e(Jp,V4o),e(y,X4o),e(y,Yp),e(Yp,Uie),e(Uie,z4o),e(Yp,W4o),e(Yp,uq),e(uq,Q4o),e(Yp,H4o),e(y,U4o),e(y,Kp),e(Kp,Jie),e(Jie,J4o),e(Kp,Y4o),e(Kp,bq),e(bq,K4o),e(Kp,Z4o),e(y,e5o),e(y,Zp),e(Zp,Yie),e(Yie,o5o),e(Zp,r5o),e(Zp,vq),e(vq,t5o),e(Zp,a5o),e(y,n5o),e(y,e_),e(e_,Kie),e(Kie,s5o),e(e_,l5o),e(e_,Fq),e(Fq,i5o),e(e_,d5o),e(y,c5o),e(y,o_),e(o_,Zie),e(Zie,f5o),e(o_,m5o),e(o_,Tq),e(Tq,g5o),e(o_,h5o),e(y,p5o),e(y,r_),e(r_,ede),e(ede,_5o),e(r_,u5o),e(r_,Mq),e(Mq,b5o),e(r_,v5o),e(y,F5o),e(y,t_),e(t_,ode),e(ode,T5o),e(t_,M5o),e(t_,Eq),e(Eq,E5o),e(t_,C5o),e(y,w5o),e(y,a_),e(a_,rde),e(rde,A5o),e(a_,L5o),e(a_,Cq),e(Cq,y5o),e(a_,x5o),e(y,$5o),e(y,n_),e(n_,tde),e(tde,k5o),e(n_,S5o),e(n_,wq),e(wq,R5o),e(n_,P5o),e(y,B5o),e(y,s_),e(s_,ade),e(ade,I5o),e(s_,N5o),e(s_,Aq),e(Aq,q5o),e(s_,j5o),e(y,D5o),e(y,l_),e(l_,nde),e(nde,G5o),e(l_,O5o),e(l_,Lq),e(Lq,V5o),e(l_,X5o),e(y,z5o),e(y,i_),e(i_,sde),e(sde,W5o),e(i_,Q5o),e(i_,yq),e(yq,H5o),e(i_,U5o),e(y,J5o),e(y,d_),e(d_,lde),e(lde,Y5o),e(d_,K5o),e(d_,xq),e(xq,Z5o),e(d_,evo),e(y,ovo),e(y,Gs),e(Gs,ide),e(ide,rvo),e(Gs,tvo),e(Gs,$q),e($q,avo),e(Gs,nvo),e(Gs,kq),e(kq,svo),e(Gs,lvo),e(y,ivo),e(y,c_),e(c_,dde),e(dde,dvo),e(c_,cvo),e(c_,Sq),e(Sq,fvo),e(c_,mvo),e(y,gvo),e(y,f_),e(f_,cde),e(cde,hvo),e(f_,pvo),e(f_,Rq),e(Rq,_vo),e(f_,uvo),e(y,bvo),e(y,m_),e(m_,fde),e(fde,vvo),e(m_,Fvo),e(m_,Pq),e(Pq,Tvo),e(m_,Mvo),e(y,Evo),e(y,g_),e(g_,mde),e(mde,Cvo),e(g_,wvo),e(g_,Bq),e(Bq,Avo),e(g_,Lvo),e(y,yvo),e(y,h_),e(h_,gde),e(gde,xvo),e(h_,$vo),e(h_,Iq),e(Iq,kvo),e(h_,Svo),e(y,Rvo),e(y,p_),e(p_,hde),e(hde,Pvo),e(p_,Bvo),e(p_,Nq),e(Nq,Ivo),e(p_,Nvo),e(y,qvo),e(y,__),e(__,pde),e(pde,jvo),e(__,Dvo),e(__,qq),e(qq,Gvo),e(__,Ovo),e(y,Vvo),e(y,u_),e(u_,_de),e(_de,Xvo),e(u_,zvo),e(u_,jq),e(jq,Wvo),e(u_,Qvo),e(y,Hvo),e(y,b_),e(b_,ude),e(ude,Uvo),e(b_,Jvo),e(b_,Dq),e(Dq,Yvo),e(b_,Kvo),e(y,Zvo),e(y,v_),e(v_,bde),e(bde,e3o),e(v_,o3o),e(v_,Gq),e(Gq,r3o),e(v_,t3o),e(y,a3o),e(y,F_),e(F_,vde),e(vde,n3o),e(F_,s3o),e(F_,Oq),e(Oq,l3o),e(F_,i3o),e(y,d3o),e(y,T_),e(T_,Fde),e(Fde,c3o),e(T_,f3o),e(T_,Vq),e(Vq,m3o),e(T_,g3o),e(y,h3o),e(y,M_),e(M_,Tde),e(Tde,p3o),e(M_,_3o),e(M_,Xq),e(Xq,u3o),e(M_,b3o),e(y,v3o),e(y,E_),e(E_,Mde),e(Mde,F3o),e(E_,T3o),e(E_,zq),e(zq,M3o),e(E_,E3o),e(y,C3o),e(y,C_),e(C_,Ede),e(Ede,w3o),e(C_,A3o),e(C_,Wq),e(Wq,L3o),e(C_,y3o),e(y,x3o),e(y,w_),e(w_,Cde),e(Cde,$3o),e(w_,k3o),e(w_,Qq),e(Qq,S3o),e(w_,R3o),e(y,P3o),e(y,A_),e(A_,wde),e(wde,B3o),e(A_,I3o),e(A_,Hq),e(Hq,N3o),e(A_,q3o),e(y,j3o),e(y,L_),e(L_,Ade),e(Ade,D3o),e(L_,G3o),e(L_,Uq),e(Uq,O3o),e(L_,V3o),e(y,X3o),e(y,y_),e(y_,Lde),e(Lde,z3o),e(y_,W3o),e(y_,Jq),e(Jq,Q3o),e(y_,H3o),e(y,U3o),e(y,x_),e(x_,yde),e(yde,J3o),e(x_,Y3o),e(x_,Yq),e(Yq,K3o),e(x_,Z3o),e(y,eFo),e(y,$_),e($_,xde),e(xde,oFo),e($_,rFo),e($_,Kq),e(Kq,tFo),e($_,aFo),e(y,nFo),e(y,k_),e(k_,$de),e($de,sFo),e(k_,lFo),e(k_,Zq),e(Zq,iFo),e(k_,dFo),e(y,cFo),e(y,S_),e(S_,kde),e(kde,fFo),e(S_,mFo),e(S_,ej),e(ej,gFo),e(S_,hFo),e(y,pFo),e(y,R_),e(R_,Sde),e(Sde,_Fo),e(R_,uFo),e(R_,oj),e(oj,bFo),e(R_,vFo),e(y,FFo),e(y,P_),e(P_,Rde),e(Rde,TFo),e(P_,MFo),e(P_,rj),e(rj,EFo),e(P_,CFo),e(y,wFo),e(y,B_),e(B_,Pde),e(Pde,AFo),e(B_,LFo),e(B_,tj),e(tj,yFo),e(B_,xFo),e(y,$Fo),e(y,I_),e(I_,Bde),e(Bde,kFo),e(I_,SFo),e(I_,aj),e(aj,RFo),e(I_,PFo),e(y,BFo),e(y,N_),e(N_,Ide),e(Ide,IFo),e(N_,NFo),e(N_,nj),e(nj,qFo),e(N_,jFo),e(y,DFo),e(y,q_),e(q_,Nde),e(Nde,GFo),e(q_,OFo),e(q_,sj),e(sj,VFo),e(q_,XFo),e(y,zFo),e(y,j_),e(j_,qde),e(qde,WFo),e(j_,QFo),e(j_,lj),e(lj,HFo),e(j_,UFo),e(y,JFo),e(y,D_),e(D_,jde),e(jde,YFo),e(D_,KFo),e(D_,ij),e(ij,ZFo),e(D_,eTo),e(y,oTo),e(y,G_),e(G_,Dde),e(Dde,rTo),e(G_,tTo),e(G_,dj),e(dj,aTo),e(G_,nTo),e(y,sTo),e(y,O_),e(O_,Gde),e(Gde,lTo),e(O_,iTo),e(O_,cj),e(cj,dTo),e(O_,cTo),e(y,fTo),e(y,V_),e(V_,Ode),e(Ode,mTo),e(V_,gTo),e(V_,fj),e(fj,hTo),e(V_,pTo),e(y,_To),e(y,X_),e(X_,Vde),e(Vde,uTo),e(X_,bTo),e(X_,mj),e(mj,vTo),e(X_,FTo),e(y,TTo),e(y,z_),e(z_,Xde),e(Xde,MTo),e(z_,ETo),e(z_,gj),e(gj,CTo),e(z_,wTo),e(y,ATo),e(y,W_),e(W_,zde),e(zde,LTo),e(W_,yTo),e(W_,hj),e(hj,xTo),e(W_,$To),e(y,kTo),e(y,Q_),e(Q_,Wde),e(Wde,STo),e(Q_,RTo),e(Q_,pj),e(pj,PTo),e(Q_,BTo),e(y,ITo),e(y,H_),e(H_,Qde),e(Qde,NTo),e(H_,qTo),e(H_,_j),e(_j,jTo),e(H_,DTo),e(y,GTo),e(y,U_),e(U_,Hde),e(Hde,OTo),e(U_,VTo),e(U_,uj),e(uj,XTo),e(U_,zTo),e(y,WTo),e(y,J_),e(J_,Ude),e(Ude,QTo),e(J_,HTo),e(J_,bj),e(bj,UTo),e(J_,JTo),e(y,YTo),e(y,Y_),e(Y_,Jde),e(Jde,KTo),e(Y_,ZTo),e(Y_,vj),e(vj,e7o),e(Y_,o7o),e(y,r7o),e(y,K_),e(K_,Yde),e(Yde,t7o),e(K_,a7o),e(K_,Fj),e(Fj,n7o),e(K_,s7o),e(y,l7o),e(y,Z_),e(Z_,Kde),e(Kde,i7o),e(Z_,d7o),e(Z_,Tj),e(Tj,c7o),e(Z_,f7o),e(y,m7o),e(y,eu),e(eu,Zde),e(Zde,g7o),e(eu,h7o),e(eu,Mj),e(Mj,p7o),e(eu,_7o),e(y,u7o),e(y,ou),e(ou,ece),e(ece,b7o),e(ou,v7o),e(ou,Ej),e(Ej,F7o),e(ou,T7o),e(y,M7o),e(y,ru),e(ru,oce),e(oce,E7o),e(ru,C7o),e(ru,Cj),e(Cj,w7o),e(ru,A7o),e(y,L7o),e(y,tu),e(tu,rce),e(rce,y7o),e(tu,x7o),e(tu,wj),e(wj,$7o),e(tu,k7o),e(y,S7o),e(y,au),e(au,tce),e(tce,R7o),e(au,P7o),e(au,Aj),e(Aj,B7o),e(au,I7o),e(y,N7o),e(y,nu),e(nu,ace),e(ace,q7o),e(nu,j7o),e(nu,Lj),e(Lj,D7o),e(nu,G7o),e(y,O7o),e(y,su),e(su,nce),e(nce,V7o),e(su,X7o),e(su,yj),e(yj,z7o),e(su,W7o),e(y,Q7o),e(y,lu),e(lu,sce),e(sce,H7o),e(lu,U7o),e(lu,xj),e(xj,J7o),e(lu,Y7o),e(y,K7o),e(y,iu),e(iu,lce),e(lce,Z7o),e(iu,eMo),e(iu,$j),e($j,oMo),e(iu,rMo),e(y,tMo),e(y,du),e(du,ice),e(ice,aMo),e(du,nMo),e(du,kj),e(kj,sMo),e(du,lMo),e(y,iMo),e(y,cu),e(cu,dce),e(dce,dMo),e(cu,cMo),e(cu,Sj),e(Sj,fMo),e(cu,mMo),e(y,gMo),e(y,fu),e(fu,cce),e(cce,hMo),e(fu,pMo),e(fu,Rj),e(Rj,_Mo),e(fu,uMo),e(y,bMo),e(y,mu),e(mu,fce),e(fce,vMo),e(mu,FMo),e(mu,Pj),e(Pj,TMo),e(mu,MMo),e(y,EMo),e(y,gu),e(gu,mce),e(mce,CMo),e(gu,wMo),e(gu,Bj),e(Bj,AMo),e(gu,LMo),e(y,yMo),e(y,hu),e(hu,gce),e(gce,xMo),e(hu,$Mo),e(hu,Ij),e(Ij,kMo),e(hu,SMo),e(y,RMo),e(y,pu),e(pu,hce),e(hce,PMo),e(pu,BMo),e(pu,Nj),e(Nj,IMo),e(pu,NMo),e(y,qMo),e(y,_u),e(_u,pce),e(pce,jMo),e(_u,DMo),e(_u,qj),e(qj,GMo),e(_u,OMo),e(y,VMo),e(y,uu),e(uu,_ce),e(_ce,XMo),e(uu,zMo),e(uu,jj),e(jj,WMo),e(uu,QMo),e(y,HMo),e(y,bu),e(bu,uce),e(uce,UMo),e(bu,JMo),e(bu,Dj),e(Dj,YMo),e(bu,KMo),e(y,ZMo),e(y,vu),e(vu,bce),e(bce,eEo),e(vu,oEo),e(vu,Gj),e(Gj,rEo),e(vu,tEo),e(y,aEo),e(y,Fu),e(Fu,vce),e(vce,nEo),e(Fu,sEo),e(Fu,Oj),e(Oj,lEo),e(Fu,iEo),e(y,dEo),e(y,Tu),e(Tu,Fce),e(Fce,cEo),e(Tu,fEo),e(Tu,Vj),e(Vj,mEo),e(Tu,gEo),e(y,hEo),e(y,Mu),e(Mu,Tce),e(Tce,pEo),e(Mu,_Eo),e(Mu,Xj),e(Xj,uEo),e(Mu,bEo),e(y,vEo),e(y,Eu),e(Eu,Mce),e(Mce,FEo),e(Eu,TEo),e(Eu,zj),e(zj,MEo),e(Eu,EEo),e(y,CEo),e(y,Cu),e(Cu,Ece),e(Ece,wEo),e(Cu,AEo),e(Cu,Wj),e(Wj,LEo),e(Cu,yEo),e(y,xEo),e(y,wu),e(wu,Cce),e(Cce,$Eo),e(wu,kEo),e(wu,Qj),e(Qj,SEo),e(wu,REo),e(y,PEo),e(y,Au),e(Au,wce),e(wce,BEo),e(Au,IEo),e(Au,Hj),e(Hj,NEo),e(Au,qEo),e(y,jEo),e(y,Lu),e(Lu,Ace),e(Ace,DEo),e(Lu,GEo),e(Lu,Uj),e(Uj,OEo),e(Lu,VEo),e(y,XEo),e(y,yu),e(yu,Lce),e(Lce,zEo),e(yu,WEo),e(yu,Jj),e(Jj,QEo),e(yu,HEo),e(Je,UEo),e(Je,xu),e(xu,JEo),e(xu,yce),e(yce,YEo),e(xu,KEo),e(xu,xce),e(xce,ZEo),e(Je,eCo),M($u,Je,null),b(f,RGe,u),b(f,qi,u),e(qi,ku),e(ku,$ce),M(oy,$ce,null),e(qi,oCo),e(qi,kce),e(kce,rCo),b(f,PGe,u),b(f,$o,u),M(ry,$o,null),e($o,tCo),e($o,ji),e(ji,aCo),e(ji,Yj),e(Yj,nCo),e(ji,sCo),e(ji,Kj),e(Kj,lCo),e(ji,iCo),e($o,dCo),e($o,ty),e(ty,cCo),e(ty,Sce),e(Sce,fCo),e(ty,mCo),e($o,gCo),e($o,lt),M(ay,lt,null),e(lt,hCo),e(lt,Rce),e(Rce,pCo),e(lt,_Co),e(lt,Di),e(Di,uCo),e(Di,Pce),e(Pce,bCo),e(Di,vCo),e(Di,Zj),e(Zj,FCo),e(Di,TCo),e(lt,MCo),M(Su,lt,null),e($o,ECo),e($o,Ye),M(ny,Ye,null),e(Ye,CCo),e(Ye,Bce),e(Bce,wCo),e(Ye,ACo),e(Ye,Pa),e(Pa,LCo),e(Pa,Ice),e(Ice,yCo),e(Pa,xCo),e(Pa,Nce),e(Nce,$Co),e(Pa,kCo),e(Pa,qce),e(qce,SCo),e(Pa,RCo),e(Ye,PCo),e(Ye,G),e(G,Ru),e(Ru,jce),e(jce,BCo),e(Ru,ICo),e(Ru,eD),e(eD,NCo),e(Ru,qCo),e(G,jCo),e(G,Pu),e(Pu,Dce),e(Dce,DCo),e(Pu,GCo),e(Pu,oD),e(oD,OCo),e(Pu,VCo),e(G,XCo),e(G,Bu),e(Bu,Gce),e(Gce,zCo),e(Bu,WCo),e(Bu,rD),e(rD,QCo),e(Bu,HCo),e(G,UCo),e(G,Iu),e(Iu,Oce),e(Oce,JCo),e(Iu,YCo),e(Iu,tD),e(tD,KCo),e(Iu,ZCo),e(G,e0o),e(G,Nu),e(Nu,Vce),e(Vce,o0o),e(Nu,r0o),e(Nu,aD),e(aD,t0o),e(Nu,a0o),e(G,n0o),e(G,qu),e(qu,Xce),e(Xce,s0o),e(qu,l0o),e(qu,nD),e(nD,i0o),e(qu,d0o),e(G,c0o),e(G,ju),e(ju,zce),e(zce,f0o),e(ju,m0o),e(ju,sD),e(sD,g0o),e(ju,h0o),e(G,p0o),e(G,Du),e(Du,Wce),e(Wce,_0o),e(Du,u0o),e(Du,lD),e(lD,b0o),e(Du,v0o),e(G,F0o),e(G,Gu),e(Gu,Qce),e(Qce,T0o),e(Gu,M0o),e(Gu,iD),e(iD,E0o),e(Gu,C0o),e(G,w0o),e(G,Ou),e(Ou,Hce),e(Hce,A0o),e(Ou,L0o),e(Ou,dD),e(dD,y0o),e(Ou,x0o),e(G,$0o),e(G,Vu),e(Vu,Uce),e(Uce,k0o),e(Vu,S0o),e(Vu,cD),e(cD,R0o),e(Vu,P0o),e(G,B0o),e(G,Xu),e(Xu,Jce),e(Jce,I0o),e(Xu,N0o),e(Xu,fD),e(fD,q0o),e(Xu,j0o),e(G,D0o),e(G,zu),e(zu,Yce),e(Yce,G0o),e(zu,O0o),e(zu,mD),e(mD,V0o),e(zu,X0o),e(G,z0o),e(G,Wu),e(Wu,Kce),e(Kce,W0o),e(Wu,Q0o),e(Wu,gD),e(gD,H0o),e(Wu,U0o),e(G,J0o),e(G,Qu),e(Qu,Zce),e(Zce,Y0o),e(Qu,K0o),e(Qu,hD),e(hD,Z0o),e(Qu,ewo),e(G,owo),e(G,Hu),e(Hu,efe),e(efe,rwo),e(Hu,two),e(Hu,pD),e(pD,awo),e(Hu,nwo),e(G,swo),e(G,Uu),e(Uu,ofe),e(ofe,lwo),e(Uu,iwo),e(Uu,_D),e(_D,dwo),e(Uu,cwo),e(G,fwo),e(G,Ju),e(Ju,rfe),e(rfe,mwo),e(Ju,gwo),e(Ju,uD),e(uD,hwo),e(Ju,pwo),e(G,_wo),e(G,Yu),e(Yu,tfe),e(tfe,uwo),e(Yu,bwo),e(Yu,bD),e(bD,vwo),e(Yu,Fwo),e(G,Two),e(G,Ku),e(Ku,afe),e(afe,Mwo),e(Ku,Ewo),e(Ku,vD),e(vD,Cwo),e(Ku,wwo),e(G,Awo),e(G,Zu),e(Zu,nfe),e(nfe,Lwo),e(Zu,ywo),e(Zu,FD),e(FD,xwo),e(Zu,$wo),e(G,kwo),e(G,e1),e(e1,sfe),e(sfe,Swo),e(e1,Rwo),e(e1,TD),e(TD,Pwo),e(e1,Bwo),e(G,Iwo),e(G,o1),e(o1,lfe),e(lfe,Nwo),e(o1,qwo),e(o1,MD),e(MD,jwo),e(o1,Dwo),e(G,Gwo),e(G,r1),e(r1,ife),e(ife,Owo),e(r1,Vwo),e(r1,ED),e(ED,Xwo),e(r1,zwo),e(G,Wwo),e(G,t1),e(t1,dfe),e(dfe,Qwo),e(t1,Hwo),e(t1,CD),e(CD,Uwo),e(t1,Jwo),e(G,Ywo),e(G,a1),e(a1,cfe),e(cfe,Kwo),e(a1,Zwo),e(a1,wD),e(wD,eAo),e(a1,oAo),e(G,rAo),e(G,n1),e(n1,ffe),e(ffe,tAo),e(n1,aAo),e(n1,AD),e(AD,nAo),e(n1,sAo),e(G,lAo),e(G,s1),e(s1,mfe),e(mfe,iAo),e(s1,dAo),e(s1,LD),e(LD,cAo),e(s1,fAo),e(G,mAo),e(G,l1),e(l1,gfe),e(gfe,gAo),e(l1,hAo),e(l1,yD),e(yD,pAo),e(l1,_Ao),e(G,uAo),e(G,i1),e(i1,hfe),e(hfe,bAo),e(i1,vAo),e(i1,xD),e(xD,FAo),e(i1,TAo),e(G,MAo),e(G,d1),e(d1,pfe),e(pfe,EAo),e(d1,CAo),e(d1,$D),e($D,wAo),e(d1,AAo),e(G,LAo),e(G,c1),e(c1,_fe),e(_fe,yAo),e(c1,xAo),e(c1,kD),e(kD,$Ao),e(c1,kAo),e(G,SAo),e(G,f1),e(f1,ufe),e(ufe,RAo),e(f1,PAo),e(f1,SD),e(SD,BAo),e(f1,IAo),e(G,NAo),e(G,m1),e(m1,bfe),e(bfe,qAo),e(m1,jAo),e(m1,RD),e(RD,DAo),e(m1,GAo),e(G,OAo),e(G,g1),e(g1,vfe),e(vfe,VAo),e(g1,XAo),e(g1,PD),e(PD,zAo),e(g1,WAo),e(G,QAo),e(G,h1),e(h1,Ffe),e(Ffe,HAo),e(h1,UAo),e(h1,BD),e(BD,JAo),e(h1,YAo),e(G,KAo),e(G,p1),e(p1,Tfe),e(Tfe,ZAo),e(p1,e6o),e(p1,ID),e(ID,o6o),e(p1,r6o),e(G,t6o),e(G,_1),e(_1,Mfe),e(Mfe,a6o),e(_1,n6o),e(_1,ND),e(ND,s6o),e(_1,l6o),e(G,i6o),e(G,u1),e(u1,Efe),e(Efe,d6o),e(u1,c6o),e(u1,qD),e(qD,f6o),e(u1,m6o),e(G,g6o),e(G,b1),e(b1,Cfe),e(Cfe,h6o),e(b1,p6o),e(b1,jD),e(jD,_6o),e(b1,u6o),e(G,b6o),e(G,v1),e(v1,wfe),e(wfe,v6o),e(v1,F6o),e(v1,DD),e(DD,T6o),e(v1,M6o),e(G,E6o),e(G,F1),e(F1,Afe),e(Afe,C6o),e(F1,w6o),e(F1,GD),e(GD,A6o),e(F1,L6o),e(G,y6o),e(G,T1),e(T1,Lfe),e(Lfe,x6o),e(T1,$6o),e(T1,OD),e(OD,k6o),e(T1,S6o),e(Ye,R6o),e(Ye,M1),e(M1,P6o),e(M1,yfe),e(yfe,B6o),e(M1,I6o),e(M1,xfe),e(xfe,N6o),e(Ye,q6o),M(E1,Ye,null),b(f,BGe,u),b(f,Gi,u),e(Gi,C1),e(C1,$fe),M(sy,$fe,null),e(Gi,j6o),e(Gi,kfe),e(kfe,D6o),b(f,IGe,u),b(f,ko,u),M(ly,ko,null),e(ko,G6o),e(ko,Oi),e(Oi,O6o),e(Oi,VD),e(VD,V6o),e(Oi,X6o),e(Oi,XD),e(XD,z6o),e(Oi,W6o),e(ko,Q6o),e(ko,iy),e(iy,H6o),e(iy,Sfe),e(Sfe,U6o),e(iy,J6o),e(ko,Y6o),e(ko,it),M(dy,it,null),e(it,K6o),e(it,Rfe),e(Rfe,Z6o),e(it,eLo),e(it,Vi),e(Vi,oLo),e(Vi,Pfe),e(Pfe,rLo),e(Vi,tLo),e(Vi,zD),e(zD,aLo),e(Vi,nLo),e(it,sLo),M(w1,it,null),e(ko,lLo),e(ko,Ke),M(cy,Ke,null),e(Ke,iLo),e(Ke,Bfe),e(Bfe,dLo),e(Ke,cLo),e(Ke,Ba),e(Ba,fLo),e(Ba,Ife),e(Ife,mLo),e(Ba,gLo),e(Ba,Nfe),e(Nfe,hLo),e(Ba,pLo),e(Ba,qfe),e(qfe,_Lo),e(Ba,uLo),e(Ke,bLo),e(Ke,z),e(z,A1),e(A1,jfe),e(jfe,vLo),e(A1,FLo),e(A1,WD),e(WD,TLo),e(A1,MLo),e(z,ELo),e(z,L1),e(L1,Dfe),e(Dfe,CLo),e(L1,wLo),e(L1,QD),e(QD,ALo),e(L1,LLo),e(z,yLo),e(z,y1),e(y1,Gfe),e(Gfe,xLo),e(y1,$Lo),e(y1,HD),e(HD,kLo),e(y1,SLo),e(z,RLo),e(z,x1),e(x1,Ofe),e(Ofe,PLo),e(x1,BLo),e(x1,UD),e(UD,ILo),e(x1,NLo),e(z,qLo),e(z,$1),e($1,Vfe),e(Vfe,jLo),e($1,DLo),e($1,JD),e(JD,GLo),e($1,OLo),e(z,VLo),e(z,k1),e(k1,Xfe),e(Xfe,XLo),e(k1,zLo),e(k1,YD),e(YD,WLo),e(k1,QLo),e(z,HLo),e(z,S1),e(S1,zfe),e(zfe,ULo),e(S1,JLo),e(S1,KD),e(KD,YLo),e(S1,KLo),e(z,ZLo),e(z,R1),e(R1,Wfe),e(Wfe,eyo),e(R1,oyo),e(R1,ZD),e(ZD,ryo),e(R1,tyo),e(z,ayo),e(z,P1),e(P1,Qfe),e(Qfe,nyo),e(P1,syo),e(P1,eG),e(eG,lyo),e(P1,iyo),e(z,dyo),e(z,B1),e(B1,Hfe),e(Hfe,cyo),e(B1,fyo),e(B1,oG),e(oG,myo),e(B1,gyo),e(z,hyo),e(z,I1),e(I1,Ufe),e(Ufe,pyo),e(I1,_yo),e(I1,rG),e(rG,uyo),e(I1,byo),e(z,vyo),e(z,N1),e(N1,Jfe),e(Jfe,Fyo),e(N1,Tyo),e(N1,tG),e(tG,Myo),e(N1,Eyo),e(z,Cyo),e(z,q1),e(q1,Yfe),e(Yfe,wyo),e(q1,Ayo),e(q1,aG),e(aG,Lyo),e(q1,yyo),e(z,xyo),e(z,j1),e(j1,Kfe),e(Kfe,$yo),e(j1,kyo),e(j1,nG),e(nG,Syo),e(j1,Ryo),e(z,Pyo),e(z,D1),e(D1,Zfe),e(Zfe,Byo),e(D1,Iyo),e(D1,sG),e(sG,Nyo),e(D1,qyo),e(z,jyo),e(z,G1),e(G1,eme),e(eme,Dyo),e(G1,Gyo),e(G1,lG),e(lG,Oyo),e(G1,Vyo),e(z,Xyo),e(z,O1),e(O1,ome),e(ome,zyo),e(O1,Wyo),e(O1,iG),e(iG,Qyo),e(O1,Hyo),e(z,Uyo),e(z,V1),e(V1,rme),e(rme,Jyo),e(V1,Yyo),e(V1,dG),e(dG,Kyo),e(V1,Zyo),e(z,e8o),e(z,X1),e(X1,tme),e(tme,o8o),e(X1,r8o),e(X1,cG),e(cG,t8o),e(X1,a8o),e(z,n8o),e(z,z1),e(z1,ame),e(ame,s8o),e(z1,l8o),e(z1,fG),e(fG,i8o),e(z1,d8o),e(z,c8o),e(z,W1),e(W1,nme),e(nme,f8o),e(W1,m8o),e(W1,mG),e(mG,g8o),e(W1,h8o),e(z,p8o),e(z,Q1),e(Q1,sme),e(sme,_8o),e(Q1,u8o),e(Q1,gG),e(gG,b8o),e(Q1,v8o),e(z,F8o),e(z,H1),e(H1,lme),e(lme,T8o),e(H1,M8o),e(H1,hG),e(hG,E8o),e(H1,C8o),e(z,w8o),e(z,U1),e(U1,ime),e(ime,A8o),e(U1,L8o),e(U1,pG),e(pG,y8o),e(U1,x8o),e(z,$8o),e(z,J1),e(J1,dme),e(dme,k8o),e(J1,S8o),e(J1,_G),e(_G,R8o),e(J1,P8o),e(z,B8o),e(z,Y1),e(Y1,cme),e(cme,I8o),e(Y1,N8o),e(Y1,uG),e(uG,q8o),e(Y1,j8o),e(z,D8o),e(z,K1),e(K1,fme),e(fme,G8o),e(K1,O8o),e(K1,bG),e(bG,V8o),e(K1,X8o),e(z,z8o),e(z,Z1),e(Z1,mme),e(mme,W8o),e(Z1,Q8o),e(Z1,vG),e(vG,H8o),e(Z1,U8o),e(z,J8o),e(z,eb),e(eb,gme),e(gme,Y8o),e(eb,K8o),e(eb,FG),e(FG,Z8o),e(eb,e9o),e(z,o9o),e(z,ob),e(ob,hme),e(hme,r9o),e(ob,t9o),e(ob,TG),e(TG,a9o),e(ob,n9o),e(z,s9o),e(z,rb),e(rb,pme),e(pme,l9o),e(rb,i9o),e(rb,MG),e(MG,d9o),e(rb,c9o),e(z,f9o),e(z,tb),e(tb,_me),e(_me,m9o),e(tb,g9o),e(tb,EG),e(EG,h9o),e(tb,p9o),e(z,_9o),e(z,ab),e(ab,ume),e(ume,u9o),e(ab,b9o),e(ab,CG),e(CG,v9o),e(ab,F9o),e(z,T9o),e(z,nb),e(nb,bme),e(bme,M9o),e(nb,E9o),e(nb,wG),e(wG,C9o),e(nb,w9o),e(z,A9o),e(z,sb),e(sb,vme),e(vme,L9o),e(sb,y9o),e(sb,AG),e(AG,x9o),e(sb,$9o),e(z,k9o),e(z,lb),e(lb,Fme),e(Fme,S9o),e(lb,R9o),e(lb,LG),e(LG,P9o),e(lb,B9o),e(z,I9o),e(z,ib),e(ib,Tme),e(Tme,N9o),e(ib,q9o),e(ib,yG),e(yG,j9o),e(ib,D9o),e(z,G9o),e(z,db),e(db,Mme),e(Mme,O9o),e(db,V9o),e(db,xG),e(xG,X9o),e(db,z9o),e(Ke,W9o),e(Ke,cb),e(cb,Q9o),e(cb,Eme),e(Eme,H9o),e(cb,U9o),e(cb,Cme),e(Cme,J9o),e(Ke,Y9o),M(fb,Ke,null),b(f,NGe,u),b(f,Xi,u),e(Xi,mb),e(mb,wme),M(fy,wme,null),e(Xi,K9o),e(Xi,Ame),e(Ame,Z9o),b(f,qGe,u),b(f,So,u),M(my,So,null),e(So,exo),e(So,zi),e(zi,oxo),e(zi,$G),e($G,rxo),e(zi,txo),e(zi,kG),e(kG,axo),e(zi,nxo),e(So,sxo),e(So,gy),e(gy,lxo),e(gy,Lme),e(Lme,ixo),e(gy,dxo),e(So,cxo),e(So,dt),M(hy,dt,null),e(dt,fxo),e(dt,yme),e(yme,mxo),e(dt,gxo),e(dt,Wi),e(Wi,hxo),e(Wi,xme),e(xme,pxo),e(Wi,_xo),e(Wi,SG),e(SG,uxo),e(Wi,bxo),e(dt,vxo),M(gb,dt,null),e(So,Fxo),e(So,Ze),M(py,Ze,null),e(Ze,Txo),e(Ze,$me),e($me,Mxo),e(Ze,Exo),e(Ze,Ia),e(Ia,Cxo),e(Ia,kme),e(kme,wxo),e(Ia,Axo),e(Ia,Sme),e(Sme,Lxo),e(Ia,yxo),e(Ia,Rme),e(Rme,xxo),e(Ia,$xo),e(Ze,kxo),e(Ze,Q),e(Q,hb),e(hb,Pme),e(Pme,Sxo),e(hb,Rxo),e(hb,RG),e(RG,Pxo),e(hb,Bxo),e(Q,Ixo),e(Q,pb),e(pb,Bme),e(Bme,Nxo),e(pb,qxo),e(pb,PG),e(PG,jxo),e(pb,Dxo),e(Q,Gxo),e(Q,_b),e(_b,Ime),e(Ime,Oxo),e(_b,Vxo),e(_b,BG),e(BG,Xxo),e(_b,zxo),e(Q,Wxo),e(Q,ub),e(ub,Nme),e(Nme,Qxo),e(ub,Hxo),e(ub,IG),e(IG,Uxo),e(ub,Jxo),e(Q,Yxo),e(Q,bb),e(bb,qme),e(qme,Kxo),e(bb,Zxo),e(bb,NG),e(NG,e$o),e(bb,o$o),e(Q,r$o),e(Q,vb),e(vb,jme),e(jme,t$o),e(vb,a$o),e(vb,qG),e(qG,n$o),e(vb,s$o),e(Q,l$o),e(Q,Fb),e(Fb,Dme),e(Dme,i$o),e(Fb,d$o),e(Fb,jG),e(jG,c$o),e(Fb,f$o),e(Q,m$o),e(Q,Tb),e(Tb,Gme),e(Gme,g$o),e(Tb,h$o),e(Tb,DG),e(DG,p$o),e(Tb,_$o),e(Q,u$o),e(Q,Mb),e(Mb,Ome),e(Ome,b$o),e(Mb,v$o),e(Mb,GG),e(GG,F$o),e(Mb,T$o),e(Q,M$o),e(Q,Eb),e(Eb,Vme),e(Vme,E$o),e(Eb,C$o),e(Eb,OG),e(OG,w$o),e(Eb,A$o),e(Q,L$o),e(Q,Cb),e(Cb,Xme),e(Xme,y$o),e(Cb,x$o),e(Cb,VG),e(VG,$$o),e(Cb,k$o),e(Q,S$o),e(Q,wb),e(wb,zme),e(zme,R$o),e(wb,P$o),e(wb,XG),e(XG,B$o),e(wb,I$o),e(Q,N$o),e(Q,Ab),e(Ab,Wme),e(Wme,q$o),e(Ab,j$o),e(Ab,zG),e(zG,D$o),e(Ab,G$o),e(Q,O$o),e(Q,Lb),e(Lb,Qme),e(Qme,V$o),e(Lb,X$o),e(Lb,WG),e(WG,z$o),e(Lb,W$o),e(Q,Q$o),e(Q,yb),e(yb,Hme),e(Hme,H$o),e(yb,U$o),e(yb,QG),e(QG,J$o),e(yb,Y$o),e(Q,K$o),e(Q,xb),e(xb,Ume),e(Ume,Z$o),e(xb,eko),e(xb,HG),e(HG,oko),e(xb,rko),e(Q,tko),e(Q,$b),e($b,Jme),e(Jme,ako),e($b,nko),e($b,UG),e(UG,sko),e($b,lko),e(Q,iko),e(Q,kb),e(kb,Yme),e(Yme,dko),e(kb,cko),e(kb,JG),e(JG,fko),e(kb,mko),e(Q,gko),e(Q,Sb),e(Sb,Kme),e(Kme,hko),e(Sb,pko),e(Sb,YG),e(YG,_ko),e(Sb,uko),e(Q,bko),e(Q,Rb),e(Rb,Zme),e(Zme,vko),e(Rb,Fko),e(Rb,KG),e(KG,Tko),e(Rb,Mko),e(Q,Eko),e(Q,Pb),e(Pb,ege),e(ege,Cko),e(Pb,wko),e(Pb,ZG),e(ZG,Ako),e(Pb,Lko),e(Q,yko),e(Q,Bb),e(Bb,oge),e(oge,xko),e(Bb,$ko),e(Bb,eO),e(eO,kko),e(Bb,Sko),e(Q,Rko),e(Q,Ib),e(Ib,rge),e(rge,Pko),e(Ib,Bko),e(Ib,oO),e(oO,Iko),e(Ib,Nko),e(Q,qko),e(Q,Nb),e(Nb,tge),e(tge,jko),e(Nb,Dko),e(Nb,rO),e(rO,Gko),e(Nb,Oko),e(Q,Vko),e(Q,qb),e(qb,age),e(age,Xko),e(qb,zko),e(qb,tO),e(tO,Wko),e(qb,Qko),e(Q,Hko),e(Q,jb),e(jb,nge),e(nge,Uko),e(jb,Jko),e(jb,aO),e(aO,Yko),e(jb,Kko),e(Q,Zko),e(Q,Db),e(Db,sge),e(sge,eSo),e(Db,oSo),e(Db,nO),e(nO,rSo),e(Db,tSo),e(Q,aSo),e(Q,Gb),e(Gb,lge),e(lge,nSo),e(Gb,sSo),e(Gb,sO),e(sO,lSo),e(Gb,iSo),e(Q,dSo),e(Q,Ob),e(Ob,ige),e(ige,cSo),e(Ob,fSo),e(Ob,lO),e(lO,mSo),e(Ob,gSo),e(Q,hSo),e(Q,Vb),e(Vb,dge),e(dge,pSo),e(Vb,_So),e(Vb,iO),e(iO,uSo),e(Vb,bSo),e(Q,vSo),e(Q,Xb),e(Xb,cge),e(cge,FSo),e(Xb,TSo),e(Xb,dO),e(dO,MSo),e(Xb,ESo),e(Q,CSo),e(Q,zb),e(zb,fge),e(fge,wSo),e(zb,ASo),e(zb,mge),e(mge,LSo),e(zb,ySo),e(Q,xSo),e(Q,Wb),e(Wb,gge),e(gge,$So),e(Wb,kSo),e(Wb,cO),e(cO,SSo),e(Wb,RSo),e(Q,PSo),e(Q,Qb),e(Qb,hge),e(hge,BSo),e(Qb,ISo),e(Qb,fO),e(fO,NSo),e(Qb,qSo),e(Q,jSo),e(Q,Hb),e(Hb,pge),e(pge,DSo),e(Hb,GSo),e(Hb,mO),e(mO,OSo),e(Hb,VSo),e(Q,XSo),e(Q,Ub),e(Ub,_ge),e(_ge,zSo),e(Ub,WSo),e(Ub,gO),e(gO,QSo),e(Ub,HSo),e(Ze,USo),e(Ze,Jb),e(Jb,JSo),e(Jb,uge),e(uge,YSo),e(Jb,KSo),e(Jb,bge),e(bge,ZSo),e(Ze,eRo),M(Yb,Ze,null),b(f,jGe,u),b(f,Qi,u),e(Qi,Kb),e(Kb,vge),M(_y,vge,null),e(Qi,oRo),e(Qi,Fge),e(Fge,rRo),b(f,DGe,u),b(f,Ro,u),M(uy,Ro,null),e(Ro,tRo),e(Ro,Hi),e(Hi,aRo),e(Hi,hO),e(hO,nRo),e(Hi,sRo),e(Hi,pO),e(pO,lRo),e(Hi,iRo),e(Ro,dRo),e(Ro,by),e(by,cRo),e(by,Tge),e(Tge,fRo),e(by,mRo),e(Ro,gRo),e(Ro,ct),M(vy,ct,null),e(ct,hRo),e(ct,Mge),e(Mge,pRo),e(ct,_Ro),e(ct,Ui),e(Ui,uRo),e(Ui,Ege),e(Ege,bRo),e(Ui,vRo),e(Ui,_O),e(_O,FRo),e(Ui,TRo),e(ct,MRo),M(Zb,ct,null),e(Ro,ERo),e(Ro,eo),M(Fy,eo,null),e(eo,CRo),e(eo,Cge),e(Cge,wRo),e(eo,ARo),e(eo,Na),e(Na,LRo),e(Na,wge),e(wge,yRo),e(Na,xRo),e(Na,Age),e(Age,$Ro),e(Na,kRo),e(Na,Lge),e(Lge,SRo),e(Na,RRo),e(eo,PRo),e(eo,pe),e(pe,e2),e(e2,yge),e(yge,BRo),e(e2,IRo),e(e2,uO),e(uO,NRo),e(e2,qRo),e(pe,jRo),e(pe,o2),e(o2,xge),e(xge,DRo),e(o2,GRo),e(o2,bO),e(bO,ORo),e(o2,VRo),e(pe,XRo),e(pe,r2),e(r2,$ge),e($ge,zRo),e(r2,WRo),e(r2,vO),e(vO,QRo),e(r2,HRo),e(pe,URo),e(pe,t2),e(t2,kge),e(kge,JRo),e(t2,YRo),e(t2,FO),e(FO,KRo),e(t2,ZRo),e(pe,ePo),e(pe,a2),e(a2,Sge),e(Sge,oPo),e(a2,rPo),e(a2,TO),e(TO,tPo),e(a2,aPo),e(pe,nPo),e(pe,n2),e(n2,Rge),e(Rge,sPo),e(n2,lPo),e(n2,MO),e(MO,iPo),e(n2,dPo),e(pe,cPo),e(pe,s2),e(s2,Pge),e(Pge,fPo),e(s2,mPo),e(s2,EO),e(EO,gPo),e(s2,hPo),e(pe,pPo),e(pe,l2),e(l2,Bge),e(Bge,_Po),e(l2,uPo),e(l2,CO),e(CO,bPo),e(l2,vPo),e(pe,FPo),e(pe,i2),e(i2,Ige),e(Ige,TPo),e(i2,MPo),e(i2,wO),e(wO,EPo),e(i2,CPo),e(pe,wPo),e(pe,d2),e(d2,Nge),e(Nge,APo),e(d2,LPo),e(d2,AO),e(AO,yPo),e(d2,xPo),e(pe,$Po),e(pe,c2),e(c2,qge),e(qge,kPo),e(c2,SPo),e(c2,LO),e(LO,RPo),e(c2,PPo),e(pe,BPo),e(pe,f2),e(f2,jge),e(jge,IPo),e(f2,NPo),e(f2,yO),e(yO,qPo),e(f2,jPo),e(pe,DPo),e(pe,m2),e(m2,Dge),e(Dge,GPo),e(m2,OPo),e(m2,xO),e(xO,VPo),e(m2,XPo),e(pe,zPo),e(pe,g2),e(g2,Gge),e(Gge,WPo),e(g2,QPo),e(g2,$O),e($O,HPo),e(g2,UPo),e(pe,JPo),e(pe,h2),e(h2,Oge),e(Oge,YPo),e(h2,KPo),e(h2,kO),e(kO,ZPo),e(h2,eBo),e(pe,oBo),e(pe,p2),e(p2,Vge),e(Vge,rBo),e(p2,tBo),e(p2,SO),e(SO,aBo),e(p2,nBo),e(pe,sBo),e(pe,_2),e(_2,Xge),e(Xge,lBo),e(_2,iBo),e(_2,RO),e(RO,dBo),e(_2,cBo),e(eo,fBo),e(eo,u2),e(u2,mBo),e(u2,zge),e(zge,gBo),e(u2,hBo),e(u2,Wge),e(Wge,pBo),e(eo,_Bo),M(b2,eo,null),b(f,GGe,u),b(f,Ji,u),e(Ji,v2),e(v2,Qge),M(Ty,Qge,null),e(Ji,uBo),e(Ji,Hge),e(Hge,bBo),b(f,OGe,u),b(f,Po,u),M(My,Po,null),e(Po,vBo),e(Po,Yi),e(Yi,FBo),e(Yi,PO),e(PO,TBo),e(Yi,MBo),e(Yi,BO),e(BO,EBo),e(Yi,CBo),e(Po,wBo),e(Po,Ey),e(Ey,ABo),e(Ey,Uge),e(Uge,LBo),e(Ey,yBo),e(Po,xBo),e(Po,ft),M(Cy,ft,null),e(ft,$Bo),e(ft,Jge),e(Jge,kBo),e(ft,SBo),e(ft,Ki),e(Ki,RBo),e(Ki,Yge),e(Yge,PBo),e(Ki,BBo),e(Ki,IO),e(IO,IBo),e(Ki,NBo),e(ft,qBo),M(F2,ft,null),e(Po,jBo),e(Po,oo),M(wy,oo,null),e(oo,DBo),e(oo,Kge),e(Kge,GBo),e(oo,OBo),e(oo,qa),e(qa,VBo),e(qa,Zge),e(Zge,XBo),e(qa,zBo),e(qa,ehe),e(ehe,WBo),e(qa,QBo),e(qa,ohe),e(ohe,HBo),e(qa,UBo),e(oo,JBo),e(oo,N),e(N,T2),e(T2,rhe),e(rhe,YBo),e(T2,KBo),e(T2,NO),e(NO,ZBo),e(T2,eIo),e(N,oIo),e(N,M2),e(M2,the),e(the,rIo),e(M2,tIo),e(M2,qO),e(qO,aIo),e(M2,nIo),e(N,sIo),e(N,E2),e(E2,ahe),e(ahe,lIo),e(E2,iIo),e(E2,jO),e(jO,dIo),e(E2,cIo),e(N,fIo),e(N,C2),e(C2,nhe),e(nhe,mIo),e(C2,gIo),e(C2,DO),e(DO,hIo),e(C2,pIo),e(N,_Io),e(N,w2),e(w2,she),e(she,uIo),e(w2,bIo),e(w2,GO),e(GO,vIo),e(w2,FIo),e(N,TIo),e(N,A2),e(A2,lhe),e(lhe,MIo),e(A2,EIo),e(A2,OO),e(OO,CIo),e(A2,wIo),e(N,AIo),e(N,L2),e(L2,ihe),e(ihe,LIo),e(L2,yIo),e(L2,VO),e(VO,xIo),e(L2,$Io),e(N,kIo),e(N,y2),e(y2,dhe),e(dhe,SIo),e(y2,RIo),e(y2,XO),e(XO,PIo),e(y2,BIo),e(N,IIo),e(N,x2),e(x2,che),e(che,NIo),e(x2,qIo),e(x2,zO),e(zO,jIo),e(x2,DIo),e(N,GIo),e(N,$2),e($2,fhe),e(fhe,OIo),e($2,VIo),e($2,WO),e(WO,XIo),e($2,zIo),e(N,WIo),e(N,k2),e(k2,mhe),e(mhe,QIo),e(k2,HIo),e(k2,QO),e(QO,UIo),e(k2,JIo),e(N,YIo),e(N,S2),e(S2,ghe),e(ghe,KIo),e(S2,ZIo),e(S2,HO),e(HO,eNo),e(S2,oNo),e(N,rNo),e(N,R2),e(R2,hhe),e(hhe,tNo),e(R2,aNo),e(R2,UO),e(UO,nNo),e(R2,sNo),e(N,lNo),e(N,P2),e(P2,phe),e(phe,iNo),e(P2,dNo),e(P2,JO),e(JO,cNo),e(P2,fNo),e(N,mNo),e(N,B2),e(B2,_he),e(_he,gNo),e(B2,hNo),e(B2,YO),e(YO,pNo),e(B2,_No),e(N,uNo),e(N,I2),e(I2,uhe),e(uhe,bNo),e(I2,vNo),e(I2,KO),e(KO,FNo),e(I2,TNo),e(N,MNo),e(N,N2),e(N2,bhe),e(bhe,ENo),e(N2,CNo),e(N2,ZO),e(ZO,wNo),e(N2,ANo),e(N,LNo),e(N,q2),e(q2,vhe),e(vhe,yNo),e(q2,xNo),e(q2,eV),e(eV,$No),e(q2,kNo),e(N,SNo),e(N,j2),e(j2,Fhe),e(Fhe,RNo),e(j2,PNo),e(j2,oV),e(oV,BNo),e(j2,INo),e(N,NNo),e(N,D2),e(D2,The),e(The,qNo),e(D2,jNo),e(D2,rV),e(rV,DNo),e(D2,GNo),e(N,ONo),e(N,G2),e(G2,Mhe),e(Mhe,VNo),e(G2,XNo),e(G2,tV),e(tV,zNo),e(G2,WNo),e(N,QNo),e(N,O2),e(O2,Ehe),e(Ehe,HNo),e(O2,UNo),e(O2,aV),e(aV,JNo),e(O2,YNo),e(N,KNo),e(N,V2),e(V2,Che),e(Che,ZNo),e(V2,eqo),e(V2,nV),e(nV,oqo),e(V2,rqo),e(N,tqo),e(N,X2),e(X2,whe),e(whe,aqo),e(X2,nqo),e(X2,sV),e(sV,sqo),e(X2,lqo),e(N,iqo),e(N,z2),e(z2,Ahe),e(Ahe,dqo),e(z2,cqo),e(z2,lV),e(lV,fqo),e(z2,mqo),e(N,gqo),e(N,W2),e(W2,Lhe),e(Lhe,hqo),e(W2,pqo),e(W2,iV),e(iV,_qo),e(W2,uqo),e(N,bqo),e(N,Q2),e(Q2,yhe),e(yhe,vqo),e(Q2,Fqo),e(Q2,dV),e(dV,Tqo),e(Q2,Mqo),e(N,Eqo),e(N,H2),e(H2,xhe),e(xhe,Cqo),e(H2,wqo),e(H2,cV),e(cV,Aqo),e(H2,Lqo),e(N,yqo),e(N,U2),e(U2,$he),e($he,xqo),e(U2,$qo),e(U2,fV),e(fV,kqo),e(U2,Sqo),e(N,Rqo),e(N,J2),e(J2,khe),e(khe,Pqo),e(J2,Bqo),e(J2,mV),e(mV,Iqo),e(J2,Nqo),e(N,qqo),e(N,Y2),e(Y2,She),e(She,jqo),e(Y2,Dqo),e(Y2,gV),e(gV,Gqo),e(Y2,Oqo),e(N,Vqo),e(N,K2),e(K2,Rhe),e(Rhe,Xqo),e(K2,zqo),e(K2,hV),e(hV,Wqo),e(K2,Qqo),e(N,Hqo),e(N,Z2),e(Z2,Phe),e(Phe,Uqo),e(Z2,Jqo),e(Z2,pV),e(pV,Yqo),e(Z2,Kqo),e(N,Zqo),e(N,e4),e(e4,Bhe),e(Bhe,ejo),e(e4,ojo),e(e4,_V),e(_V,rjo),e(e4,tjo),e(N,ajo),e(N,o4),e(o4,Ihe),e(Ihe,njo),e(o4,sjo),e(o4,uV),e(uV,ljo),e(o4,ijo),e(N,djo),e(N,r4),e(r4,Nhe),e(Nhe,cjo),e(r4,fjo),e(r4,bV),e(bV,mjo),e(r4,gjo),e(N,hjo),e(N,t4),e(t4,qhe),e(qhe,pjo),e(t4,_jo),e(t4,vV),e(vV,ujo),e(t4,bjo),e(N,vjo),e(N,a4),e(a4,jhe),e(jhe,Fjo),e(a4,Tjo),e(a4,FV),e(FV,Mjo),e(a4,Ejo),e(N,Cjo),e(N,n4),e(n4,Dhe),e(Dhe,wjo),e(n4,Ajo),e(n4,TV),e(TV,Ljo),e(n4,yjo),e(N,xjo),e(N,s4),e(s4,Ghe),e(Ghe,$jo),e(s4,kjo),e(s4,MV),e(MV,Sjo),e(s4,Rjo),e(N,Pjo),e(N,l4),e(l4,Ohe),e(Ohe,Bjo),e(l4,Ijo),e(l4,EV),e(EV,Njo),e(l4,qjo),e(N,jjo),e(N,i4),e(i4,Vhe),e(Vhe,Djo),e(i4,Gjo),e(i4,CV),e(CV,Ojo),e(i4,Vjo),e(N,Xjo),e(N,d4),e(d4,Xhe),e(Xhe,zjo),e(d4,Wjo),e(d4,wV),e(wV,Qjo),e(d4,Hjo),e(N,Ujo),e(N,c4),e(c4,zhe),e(zhe,Jjo),e(c4,Yjo),e(c4,AV),e(AV,Kjo),e(c4,Zjo),e(N,eDo),e(N,f4),e(f4,Whe),e(Whe,oDo),e(f4,rDo),e(f4,LV),e(LV,tDo),e(f4,aDo),e(N,nDo),e(N,m4),e(m4,Qhe),e(Qhe,sDo),e(m4,lDo),e(m4,yV),e(yV,iDo),e(m4,dDo),e(N,cDo),e(N,g4),e(g4,Hhe),e(Hhe,fDo),e(g4,mDo),e(g4,xV),e(xV,gDo),e(g4,hDo),e(N,pDo),e(N,h4),e(h4,Uhe),e(Uhe,_Do),e(h4,uDo),e(h4,$V),e($V,bDo),e(h4,vDo),e(oo,FDo),e(oo,p4),e(p4,TDo),e(p4,Jhe),e(Jhe,MDo),e(p4,EDo),e(p4,Yhe),e(Yhe,CDo),e(oo,wDo),M(_4,oo,null),b(f,VGe,u),b(f,Zi,u),e(Zi,u4),e(u4,Khe),M(Ay,Khe,null),e(Zi,ADo),e(Zi,Zhe),e(Zhe,LDo),b(f,XGe,u),b(f,Bo,u),M(Ly,Bo,null),e(Bo,yDo),e(Bo,ed),e(ed,xDo),e(ed,kV),e(kV,$Do),e(ed,kDo),e(ed,SV),e(SV,SDo),e(ed,RDo),e(Bo,PDo),e(Bo,yy),e(yy,BDo),e(yy,epe),e(epe,IDo),e(yy,NDo),e(Bo,qDo),e(Bo,mt),M(xy,mt,null),e(mt,jDo),e(mt,ope),e(ope,DDo),e(mt,GDo),e(mt,od),e(od,ODo),e(od,rpe),e(rpe,VDo),e(od,XDo),e(od,RV),e(RV,zDo),e(od,WDo),e(mt,QDo),M(b4,mt,null),e(Bo,HDo),e(Bo,ro),M($y,ro,null),e(ro,UDo),e(ro,tpe),e(tpe,JDo),e(ro,YDo),e(ro,ja),e(ja,KDo),e(ja,ape),e(ape,ZDo),e(ja,eGo),e(ja,npe),e(npe,oGo),e(ja,rGo),e(ja,spe),e(spe,tGo),e(ja,aGo),e(ro,nGo),e(ro,Z),e(Z,v4),e(v4,lpe),e(lpe,sGo),e(v4,lGo),e(v4,PV),e(PV,iGo),e(v4,dGo),e(Z,cGo),e(Z,F4),e(F4,ipe),e(ipe,fGo),e(F4,mGo),e(F4,BV),e(BV,gGo),e(F4,hGo),e(Z,pGo),e(Z,T4),e(T4,dpe),e(dpe,_Go),e(T4,uGo),e(T4,IV),e(IV,bGo),e(T4,vGo),e(Z,FGo),e(Z,M4),e(M4,cpe),e(cpe,TGo),e(M4,MGo),e(M4,NV),e(NV,EGo),e(M4,CGo),e(Z,wGo),e(Z,E4),e(E4,fpe),e(fpe,AGo),e(E4,LGo),e(E4,qV),e(qV,yGo),e(E4,xGo),e(Z,$Go),e(Z,C4),e(C4,mpe),e(mpe,kGo),e(C4,SGo),e(C4,jV),e(jV,RGo),e(C4,PGo),e(Z,BGo),e(Z,w4),e(w4,gpe),e(gpe,IGo),e(w4,NGo),e(w4,DV),e(DV,qGo),e(w4,jGo),e(Z,DGo),e(Z,A4),e(A4,hpe),e(hpe,GGo),e(A4,OGo),e(A4,GV),e(GV,VGo),e(A4,XGo),e(Z,zGo),e(Z,L4),e(L4,ppe),e(ppe,WGo),e(L4,QGo),e(L4,OV),e(OV,HGo),e(L4,UGo),e(Z,JGo),e(Z,y4),e(y4,_pe),e(_pe,YGo),e(y4,KGo),e(y4,VV),e(VV,ZGo),e(y4,eOo),e(Z,oOo),e(Z,x4),e(x4,upe),e(upe,rOo),e(x4,tOo),e(x4,XV),e(XV,aOo),e(x4,nOo),e(Z,sOo),e(Z,$4),e($4,bpe),e(bpe,lOo),e($4,iOo),e($4,zV),e(zV,dOo),e($4,cOo),e(Z,fOo),e(Z,k4),e(k4,vpe),e(vpe,mOo),e(k4,gOo),e(k4,WV),e(WV,hOo),e(k4,pOo),e(Z,_Oo),e(Z,S4),e(S4,Fpe),e(Fpe,uOo),e(S4,bOo),e(S4,QV),e(QV,vOo),e(S4,FOo),e(Z,TOo),e(Z,R4),e(R4,Tpe),e(Tpe,MOo),e(R4,EOo),e(R4,HV),e(HV,COo),e(R4,wOo),e(Z,AOo),e(Z,P4),e(P4,Mpe),e(Mpe,LOo),e(P4,yOo),e(P4,UV),e(UV,xOo),e(P4,$Oo),e(Z,kOo),e(Z,B4),e(B4,Epe),e(Epe,SOo),e(B4,ROo),e(B4,JV),e(JV,POo),e(B4,BOo),e(Z,IOo),e(Z,I4),e(I4,Cpe),e(Cpe,NOo),e(I4,qOo),e(I4,YV),e(YV,jOo),e(I4,DOo),e(Z,GOo),e(Z,N4),e(N4,wpe),e(wpe,OOo),e(N4,VOo),e(N4,KV),e(KV,XOo),e(N4,zOo),e(Z,WOo),e(Z,q4),e(q4,Ape),e(Ape,QOo),e(q4,HOo),e(q4,ZV),e(ZV,UOo),e(q4,JOo),e(Z,YOo),e(Z,j4),e(j4,Lpe),e(Lpe,KOo),e(j4,ZOo),e(j4,eX),e(eX,eVo),e(j4,oVo),e(Z,rVo),e(Z,D4),e(D4,ype),e(ype,tVo),e(D4,aVo),e(D4,oX),e(oX,nVo),e(D4,sVo),e(Z,lVo),e(Z,G4),e(G4,xpe),e(xpe,iVo),e(G4,dVo),e(G4,rX),e(rX,cVo),e(G4,fVo),e(Z,mVo),e(Z,O4),e(O4,$pe),e($pe,gVo),e(O4,hVo),e(O4,tX),e(tX,pVo),e(O4,_Vo),e(Z,uVo),e(Z,V4),e(V4,kpe),e(kpe,bVo),e(V4,vVo),e(V4,aX),e(aX,FVo),e(V4,TVo),e(Z,MVo),e(Z,X4),e(X4,Spe),e(Spe,EVo),e(X4,CVo),e(X4,nX),e(nX,wVo),e(X4,AVo),e(Z,LVo),e(Z,z4),e(z4,Rpe),e(Rpe,yVo),e(z4,xVo),e(z4,sX),e(sX,$Vo),e(z4,kVo),e(Z,SVo),e(Z,W4),e(W4,Ppe),e(Ppe,RVo),e(W4,PVo),e(W4,lX),e(lX,BVo),e(W4,IVo),e(Z,NVo),e(Z,Q4),e(Q4,Bpe),e(Bpe,qVo),e(Q4,jVo),e(Q4,iX),e(iX,DVo),e(Q4,GVo),e(ro,OVo),e(ro,H4),e(H4,VVo),e(H4,Ipe),e(Ipe,XVo),e(H4,zVo),e(H4,Npe),e(Npe,WVo),e(ro,QVo),M(U4,ro,null),b(f,zGe,u),b(f,rd,u),e(rd,J4),e(J4,qpe),M(ky,qpe,null),e(rd,HVo),e(rd,jpe),e(jpe,UVo),b(f,WGe,u),b(f,Io,u),M(Sy,Io,null),e(Io,JVo),e(Io,td),e(td,YVo),e(td,dX),e(dX,KVo),e(td,ZVo),e(td,cX),e(cX,eXo),e(td,oXo),e(Io,rXo),e(Io,Ry),e(Ry,tXo),e(Ry,Dpe),e(Dpe,aXo),e(Ry,nXo),e(Io,sXo),e(Io,gt),M(Py,gt,null),e(gt,lXo),e(gt,Gpe),e(Gpe,iXo),e(gt,dXo),e(gt,ad),e(ad,cXo),e(ad,Ope),e(Ope,fXo),e(ad,mXo),e(ad,fX),e(fX,gXo),e(ad,hXo),e(gt,pXo),M(Y4,gt,null),e(Io,_Xo),e(Io,to),M(By,to,null),e(to,uXo),e(to,Vpe),e(Vpe,bXo),e(to,vXo),e(to,Da),e(Da,FXo),e(Da,Xpe),e(Xpe,TXo),e(Da,MXo),e(Da,zpe),e(zpe,EXo),e(Da,CXo),e(Da,Wpe),e(Wpe,wXo),e(Da,AXo),e(to,LXo),e(to,Zr),e(Zr,K4),e(K4,Qpe),e(Qpe,yXo),e(K4,xXo),e(K4,mX),e(mX,$Xo),e(K4,kXo),e(Zr,SXo),e(Zr,Z4),e(Z4,Hpe),e(Hpe,RXo),e(Z4,PXo),e(Z4,gX),e(gX,BXo),e(Z4,IXo),e(Zr,NXo),e(Zr,e5),e(e5,Upe),e(Upe,qXo),e(e5,jXo),e(e5,hX),e(hX,DXo),e(e5,GXo),e(Zr,OXo),e(Zr,o5),e(o5,Jpe),e(Jpe,VXo),e(o5,XXo),e(o5,pX),e(pX,zXo),e(o5,WXo),e(Zr,QXo),e(Zr,r5),e(r5,Ype),e(Ype,HXo),e(r5,UXo),e(r5,_X),e(_X,JXo),e(r5,YXo),e(to,KXo),e(to,t5),e(t5,ZXo),e(t5,Kpe),e(Kpe,ezo),e(t5,ozo),e(t5,Zpe),e(Zpe,rzo),e(to,tzo),M(a5,to,null),b(f,QGe,u),b(f,nd,u),e(nd,n5),e(n5,e_e),M(Iy,e_e,null),e(nd,azo),e(nd,o_e),e(o_e,nzo),b(f,HGe,u),b(f,No,u),M(Ny,No,null),e(No,szo),e(No,sd),e(sd,lzo),e(sd,uX),e(uX,izo),e(sd,dzo),e(sd,bX),e(bX,czo),e(sd,fzo),e(No,mzo),e(No,qy),e(qy,gzo),e(qy,r_e),e(r_e,hzo),e(qy,pzo),e(No,_zo),e(No,ht),M(jy,ht,null),e(ht,uzo),e(ht,t_e),e(t_e,bzo),e(ht,vzo),e(ht,ld),e(ld,Fzo),e(ld,a_e),e(a_e,Tzo),e(ld,Mzo),e(ld,vX),e(vX,Ezo),e(ld,Czo),e(ht,wzo),M(s5,ht,null),e(No,Azo),e(No,ao),M(Dy,ao,null),e(ao,Lzo),e(ao,n_e),e(n_e,yzo),e(ao,xzo),e(ao,Ga),e(Ga,$zo),e(Ga,s_e),e(s_e,kzo),e(Ga,Szo),e(Ga,l_e),e(l_e,Rzo),e(Ga,Pzo),e(Ga,i_e),e(i_e,Bzo),e(Ga,Izo),e(ao,Nzo),e(ao,H),e(H,l5),e(l5,d_e),e(d_e,qzo),e(l5,jzo),e(l5,FX),e(FX,Dzo),e(l5,Gzo),e(H,Ozo),e(H,i5),e(i5,c_e),e(c_e,Vzo),e(i5,Xzo),e(i5,TX),e(TX,zzo),e(i5,Wzo),e(H,Qzo),e(H,d5),e(d5,f_e),e(f_e,Hzo),e(d5,Uzo),e(d5,MX),e(MX,Jzo),e(d5,Yzo),e(H,Kzo),e(H,c5),e(c5,m_e),e(m_e,Zzo),e(c5,eWo),e(c5,EX),e(EX,oWo),e(c5,rWo),e(H,tWo),e(H,f5),e(f5,g_e),e(g_e,aWo),e(f5,nWo),e(f5,CX),e(CX,sWo),e(f5,lWo),e(H,iWo),e(H,m5),e(m5,h_e),e(h_e,dWo),e(m5,cWo),e(m5,wX),e(wX,fWo),e(m5,mWo),e(H,gWo),e(H,g5),e(g5,p_e),e(p_e,hWo),e(g5,pWo),e(g5,AX),e(AX,_Wo),e(g5,uWo),e(H,bWo),e(H,h5),e(h5,__e),e(__e,vWo),e(h5,FWo),e(h5,LX),e(LX,TWo),e(h5,MWo),e(H,EWo),e(H,p5),e(p5,u_e),e(u_e,CWo),e(p5,wWo),e(p5,yX),e(yX,AWo),e(p5,LWo),e(H,yWo),e(H,_5),e(_5,b_e),e(b_e,xWo),e(_5,$Wo),e(_5,xX),e(xX,kWo),e(_5,SWo),e(H,RWo),e(H,u5),e(u5,v_e),e(v_e,PWo),e(u5,BWo),e(u5,$X),e($X,IWo),e(u5,NWo),e(H,qWo),e(H,b5),e(b5,F_e),e(F_e,jWo),e(b5,DWo),e(b5,kX),e(kX,GWo),e(b5,OWo),e(H,VWo),e(H,v5),e(v5,T_e),e(T_e,XWo),e(v5,zWo),e(v5,SX),e(SX,WWo),e(v5,QWo),e(H,HWo),e(H,F5),e(F5,M_e),e(M_e,UWo),e(F5,JWo),e(F5,RX),e(RX,YWo),e(F5,KWo),e(H,ZWo),e(H,T5),e(T5,E_e),e(E_e,eQo),e(T5,oQo),e(T5,PX),e(PX,rQo),e(T5,tQo),e(H,aQo),e(H,M5),e(M5,C_e),e(C_e,nQo),e(M5,sQo),e(M5,BX),e(BX,lQo),e(M5,iQo),e(H,dQo),e(H,E5),e(E5,w_e),e(w_e,cQo),e(E5,fQo),e(E5,IX),e(IX,mQo),e(E5,gQo),e(H,hQo),e(H,C5),e(C5,A_e),e(A_e,pQo),e(C5,_Qo),e(C5,NX),e(NX,uQo),e(C5,bQo),e(H,vQo),e(H,w5),e(w5,L_e),e(L_e,FQo),e(w5,TQo),e(w5,qX),e(qX,MQo),e(w5,EQo),e(H,CQo),e(H,A5),e(A5,y_e),e(y_e,wQo),e(A5,AQo),e(A5,jX),e(jX,LQo),e(A5,yQo),e(H,xQo),e(H,L5),e(L5,x_e),e(x_e,$Qo),e(L5,kQo),e(L5,DX),e(DX,SQo),e(L5,RQo),e(H,PQo),e(H,y5),e(y5,$_e),e($_e,BQo),e(y5,IQo),e(y5,GX),e(GX,NQo),e(y5,qQo),e(H,jQo),e(H,x5),e(x5,k_e),e(k_e,DQo),e(x5,GQo),e(x5,OX),e(OX,OQo),e(x5,VQo),e(H,XQo),e(H,$5),e($5,S_e),e(S_e,zQo),e($5,WQo),e($5,VX),e(VX,QQo),e($5,HQo),e(H,UQo),e(H,k5),e(k5,R_e),e(R_e,JQo),e(k5,YQo),e(k5,XX),e(XX,KQo),e(k5,ZQo),e(H,eHo),e(H,S5),e(S5,P_e),e(P_e,oHo),e(S5,rHo),e(S5,zX),e(zX,tHo),e(S5,aHo),e(H,nHo),e(H,R5),e(R5,B_e),e(B_e,sHo),e(R5,lHo),e(R5,WX),e(WX,iHo),e(R5,dHo),e(H,cHo),e(H,P5),e(P5,I_e),e(I_e,fHo),e(P5,mHo),e(P5,QX),e(QX,gHo),e(P5,hHo),e(H,pHo),e(H,B5),e(B5,N_e),e(N_e,_Ho),e(B5,uHo),e(B5,HX),e(HX,bHo),e(B5,vHo),e(H,FHo),e(H,I5),e(I5,q_e),e(q_e,THo),e(I5,MHo),e(I5,UX),e(UX,EHo),e(I5,CHo),e(H,wHo),e(H,N5),e(N5,j_e),e(j_e,AHo),e(N5,LHo),e(N5,JX),e(JX,yHo),e(N5,xHo),e(H,$Ho),e(H,q5),e(q5,D_e),e(D_e,kHo),e(q5,SHo),e(q5,YX),e(YX,RHo),e(q5,PHo),e(H,BHo),e(H,j5),e(j5,G_e),e(G_e,IHo),e(j5,NHo),e(j5,KX),e(KX,qHo),e(j5,jHo),e(H,DHo),e(H,D5),e(D5,O_e),e(O_e,GHo),e(D5,OHo),e(D5,ZX),e(ZX,VHo),e(D5,XHo),e(H,zHo),e(H,G5),e(G5,V_e),e(V_e,WHo),e(G5,QHo),e(G5,ez),e(ez,HHo),e(G5,UHo),e(ao,JHo),e(ao,O5),e(O5,YHo),e(O5,X_e),e(X_e,KHo),e(O5,ZHo),e(O5,z_e),e(z_e,eUo),e(ao,oUo),M(V5,ao,null),b(f,UGe,u),b(f,id,u),e(id,X5),e(X5,W_e),M(Gy,W_e,null),e(id,rUo),e(id,Q_e),e(Q_e,tUo),b(f,JGe,u),b(f,qo,u),M(Oy,qo,null),e(qo,aUo),e(qo,dd),e(dd,nUo),e(dd,oz),e(oz,sUo),e(dd,lUo),e(dd,rz),e(rz,iUo),e(dd,dUo),e(qo,cUo),e(qo,Vy),e(Vy,fUo),e(Vy,H_e),e(H_e,mUo),e(Vy,gUo),e(qo,hUo),e(qo,pt),M(Xy,pt,null),e(pt,pUo),e(pt,U_e),e(U_e,_Uo),e(pt,uUo),e(pt,cd),e(cd,bUo),e(cd,J_e),e(J_e,vUo),e(cd,FUo),e(cd,tz),e(tz,TUo),e(cd,MUo),e(pt,EUo),M(z5,pt,null),e(qo,CUo),e(qo,no),M(zy,no,null),e(no,wUo),e(no,Y_e),e(Y_e,AUo),e(no,LUo),e(no,Oa),e(Oa,yUo),e(Oa,K_e),e(K_e,xUo),e(Oa,$Uo),e(Oa,Z_e),e(Z_e,kUo),e(Oa,SUo),e(Oa,eue),e(eue,RUo),e(Oa,PUo),e(no,BUo),e(no,V),e(V,W5),e(W5,oue),e(oue,IUo),e(W5,NUo),e(W5,az),e(az,qUo),e(W5,jUo),e(V,DUo),e(V,Q5),e(Q5,rue),e(rue,GUo),e(Q5,OUo),e(Q5,nz),e(nz,VUo),e(Q5,XUo),e(V,zUo),e(V,H5),e(H5,tue),e(tue,WUo),e(H5,QUo),e(H5,sz),e(sz,HUo),e(H5,UUo),e(V,JUo),e(V,U5),e(U5,aue),e(aue,YUo),e(U5,KUo),e(U5,lz),e(lz,ZUo),e(U5,eJo),e(V,oJo),e(V,J5),e(J5,nue),e(nue,rJo),e(J5,tJo),e(J5,iz),e(iz,aJo),e(J5,nJo),e(V,sJo),e(V,Y5),e(Y5,sue),e(sue,lJo),e(Y5,iJo),e(Y5,dz),e(dz,dJo),e(Y5,cJo),e(V,fJo),e(V,K5),e(K5,lue),e(lue,mJo),e(K5,gJo),e(K5,cz),e(cz,hJo),e(K5,pJo),e(V,_Jo),e(V,Z5),e(Z5,iue),e(iue,uJo),e(Z5,bJo),e(Z5,fz),e(fz,vJo),e(Z5,FJo),e(V,TJo),e(V,ev),e(ev,due),e(due,MJo),e(ev,EJo),e(ev,mz),e(mz,CJo),e(ev,wJo),e(V,AJo),e(V,ov),e(ov,cue),e(cue,LJo),e(ov,yJo),e(ov,gz),e(gz,xJo),e(ov,$Jo),e(V,kJo),e(V,rv),e(rv,fue),e(fue,SJo),e(rv,RJo),e(rv,hz),e(hz,PJo),e(rv,BJo),e(V,IJo),e(V,tv),e(tv,mue),e(mue,NJo),e(tv,qJo),e(tv,pz),e(pz,jJo),e(tv,DJo),e(V,GJo),e(V,av),e(av,gue),e(gue,OJo),e(av,VJo),e(av,_z),e(_z,XJo),e(av,zJo),e(V,WJo),e(V,nv),e(nv,hue),e(hue,QJo),e(nv,HJo),e(nv,uz),e(uz,UJo),e(nv,JJo),e(V,YJo),e(V,sv),e(sv,pue),e(pue,KJo),e(sv,ZJo),e(sv,bz),e(bz,eYo),e(sv,oYo),e(V,rYo),e(V,lv),e(lv,_ue),e(_ue,tYo),e(lv,aYo),e(lv,vz),e(vz,nYo),e(lv,sYo),e(V,lYo),e(V,iv),e(iv,uue),e(uue,iYo),e(iv,dYo),e(iv,Fz),e(Fz,cYo),e(iv,fYo),e(V,mYo),e(V,dv),e(dv,bue),e(bue,gYo),e(dv,hYo),e(dv,Tz),e(Tz,pYo),e(dv,_Yo),e(V,uYo),e(V,cv),e(cv,vue),e(vue,bYo),e(cv,vYo),e(cv,Mz),e(Mz,FYo),e(cv,TYo),e(V,MYo),e(V,fv),e(fv,Fue),e(Fue,EYo),e(fv,CYo),e(fv,Ez),e(Ez,wYo),e(fv,AYo),e(V,LYo),e(V,mv),e(mv,Tue),e(Tue,yYo),e(mv,xYo),e(mv,Cz),e(Cz,$Yo),e(mv,kYo),e(V,SYo),e(V,gv),e(gv,Mue),e(Mue,RYo),e(gv,PYo),e(gv,wz),e(wz,BYo),e(gv,IYo),e(V,NYo),e(V,hv),e(hv,Eue),e(Eue,qYo),e(hv,jYo),e(hv,Az),e(Az,DYo),e(hv,GYo),e(V,OYo),e(V,pv),e(pv,Cue),e(Cue,VYo),e(pv,XYo),e(pv,Lz),e(Lz,zYo),e(pv,WYo),e(V,QYo),e(V,_v),e(_v,wue),e(wue,HYo),e(_v,UYo),e(_v,yz),e(yz,JYo),e(_v,YYo),e(V,KYo),e(V,uv),e(uv,Aue),e(Aue,ZYo),e(uv,eKo),e(uv,xz),e(xz,oKo),e(uv,rKo),e(V,tKo),e(V,bv),e(bv,Lue),e(Lue,aKo),e(bv,nKo),e(bv,$z),e($z,sKo),e(bv,lKo),e(V,iKo),e(V,vv),e(vv,yue),e(yue,dKo),e(vv,cKo),e(vv,kz),e(kz,fKo),e(vv,mKo),e(V,gKo),e(V,Fv),e(Fv,xue),e(xue,hKo),e(Fv,pKo),e(Fv,Sz),e(Sz,_Ko),e(Fv,uKo),e(V,bKo),e(V,Tv),e(Tv,$ue),e($ue,vKo),e(Tv,FKo),e(Tv,Rz),e(Rz,TKo),e(Tv,MKo),e(V,EKo),e(V,Mv),e(Mv,kue),e(kue,CKo),e(Mv,wKo),e(Mv,Pz),e(Pz,AKo),e(Mv,LKo),e(V,yKo),e(V,Ev),e(Ev,Sue),e(Sue,xKo),e(Ev,$Ko),e(Ev,Bz),e(Bz,kKo),e(Ev,SKo),e(V,RKo),e(V,Cv),e(Cv,Rue),e(Rue,PKo),e(Cv,BKo),e(Cv,Iz),e(Iz,IKo),e(Cv,NKo),e(V,qKo),e(V,wv),e(wv,Pue),e(Pue,jKo),e(wv,DKo),e(wv,Nz),e(Nz,GKo),e(wv,OKo),e(V,VKo),e(V,Av),e(Av,Bue),e(Bue,XKo),e(Av,zKo),e(Av,qz),e(qz,WKo),e(Av,QKo),e(V,HKo),e(V,Lv),e(Lv,Iue),e(Iue,UKo),e(Lv,JKo),e(Lv,jz),e(jz,YKo),e(Lv,KKo),e(V,ZKo),e(V,yv),e(yv,Nue),e(Nue,eZo),e(yv,oZo),e(yv,Dz),e(Dz,rZo),e(yv,tZo),e(V,aZo),e(V,xv),e(xv,que),e(que,nZo),e(xv,sZo),e(xv,Gz),e(Gz,lZo),e(xv,iZo),e(V,dZo),e(V,$v),e($v,jue),e(jue,cZo),e($v,fZo),e($v,Oz),e(Oz,mZo),e($v,gZo),e(V,hZo),e(V,kv),e(kv,Due),e(Due,pZo),e(kv,_Zo),e(kv,Vz),e(Vz,uZo),e(kv,bZo),e(no,vZo),e(no,Sv),e(Sv,FZo),e(Sv,Gue),e(Gue,TZo),e(Sv,MZo),e(Sv,Oue),e(Oue,EZo),e(no,CZo),M(Rv,no,null),b(f,YGe,u),b(f,fd,u),e(fd,Pv),e(Pv,Vue),M(Wy,Vue,null),e(fd,wZo),e(fd,Xue),e(Xue,AZo),b(f,KGe,u),b(f,jo,u),M(Qy,jo,null),e(jo,LZo),e(jo,md),e(md,yZo),e(md,Xz),e(Xz,xZo),e(md,$Zo),e(md,zz),e(zz,kZo),e(md,SZo),e(jo,RZo),e(jo,Hy),e(Hy,PZo),e(Hy,zue),e(zue,BZo),e(Hy,IZo),e(jo,NZo),e(jo,_t),M(Uy,_t,null),e(_t,qZo),e(_t,Wue),e(Wue,jZo),e(_t,DZo),e(_t,gd),e(gd,GZo),e(gd,Que),e(Que,OZo),e(gd,VZo),e(gd,Wz),e(Wz,XZo),e(gd,zZo),e(_t,WZo),M(Bv,_t,null),e(jo,QZo),e(jo,so),M(Jy,so,null),e(so,HZo),e(so,Hue),e(Hue,UZo),e(so,JZo),e(so,Va),e(Va,YZo),e(Va,Uue),e(Uue,KZo),e(Va,ZZo),e(Va,Jue),e(Jue,eer),e(Va,oer),e(Va,Yue),e(Yue,rer),e(Va,ter),e(so,aer),e(so,Kue),e(Kue,Iv),e(Iv,Zue),e(Zue,ner),e(Iv,ser),e(Iv,Qz),e(Qz,ler),e(Iv,ier),e(so,der),e(so,Nv),e(Nv,cer),e(Nv,e1e),e(e1e,fer),e(Nv,mer),e(Nv,o1e),e(o1e,ger),e(so,her),M(qv,so,null),b(f,ZGe,u),b(f,hd,u),e(hd,jv),e(jv,r1e),M(Yy,r1e,null),e(hd,per),e(hd,t1e),e(t1e,_er),b(f,eOe,u),b(f,Do,u),M(Ky,Do,null),e(Do,uer),e(Do,pd),e(pd,ber),e(pd,Hz),e(Hz,ver),e(pd,Fer),e(pd,Uz),e(Uz,Ter),e(pd,Mer),e(Do,Eer),e(Do,Zy),e(Zy,Cer),e(Zy,a1e),e(a1e,wer),e(Zy,Aer),e(Do,Ler),e(Do,ut),M(e8,ut,null),e(ut,yer),e(ut,n1e),e(n1e,xer),e(ut,$er),e(ut,_d),e(_d,ker),e(_d,s1e),e(s1e,Ser),e(_d,Rer),e(_d,Jz),e(Jz,Per),e(_d,Ber),e(ut,Ier),M(Dv,ut,null),e(Do,Ner),e(Do,lo),M(o8,lo,null),e(lo,qer),e(lo,l1e),e(l1e,jer),e(lo,Der),e(lo,Xa),e(Xa,Ger),e(Xa,i1e),e(i1e,Oer),e(Xa,Ver),e(Xa,d1e),e(d1e,Xer),e(Xa,zer),e(Xa,c1e),e(c1e,Wer),e(Xa,Qer),e(lo,Her),e(lo,ue),e(ue,Gv),e(Gv,f1e),e(f1e,Uer),e(Gv,Jer),e(Gv,Yz),e(Yz,Yer),e(Gv,Ker),e(ue,Zer),e(ue,Ov),e(Ov,m1e),e(m1e,eor),e(Ov,oor),e(Ov,Kz),e(Kz,ror),e(Ov,tor),e(ue,aor),e(ue,Vv),e(Vv,g1e),e(g1e,nor),e(Vv,sor),e(Vv,Zz),e(Zz,lor),e(Vv,ior),e(ue,dor),e(ue,Xv),e(Xv,h1e),e(h1e,cor),e(Xv,mor),e(Xv,eW),e(eW,gor),e(Xv,hor),e(ue,por),e(ue,Os),e(Os,p1e),e(p1e,_or),e(Os,uor),e(Os,oW),e(oW,bor),e(Os,vor),e(Os,rW),e(rW,For),e(Os,Tor),e(ue,Mor),e(ue,zv),e(zv,_1e),e(_1e,Eor),e(zv,Cor),e(zv,tW),e(tW,wor),e(zv,Aor),e(ue,Lor),e(ue,Vs),e(Vs,u1e),e(u1e,yor),e(Vs,xor),e(Vs,aW),e(aW,$or),e(Vs,kor),e(Vs,nW),e(nW,Sor),e(Vs,Ror),e(ue,Por),e(ue,Wv),e(Wv,b1e),e(b1e,Bor),e(Wv,Ior),e(Wv,sW),e(sW,Nor),e(Wv,qor),e(ue,jor),e(ue,bt),e(bt,v1e),e(v1e,Dor),e(bt,Gor),e(bt,lW),e(lW,Oor),e(bt,Vor),e(bt,iW),e(iW,Xor),e(bt,zor),e(bt,dW),e(dW,Wor),e(bt,Qor),e(ue,Hor),e(ue,Qv),e(Qv,F1e),e(F1e,Uor),e(Qv,Jor),e(Qv,cW),e(cW,Yor),e(Qv,Kor),e(ue,Zor),e(ue,Hv),e(Hv,T1e),e(T1e,err),e(Hv,orr),e(Hv,fW),e(fW,rrr),e(Hv,trr),e(ue,arr),e(ue,Uv),e(Uv,M1e),e(M1e,nrr),e(Uv,srr),e(Uv,mW),e(mW,lrr),e(Uv,irr),e(ue,drr),e(ue,Jv),e(Jv,E1e),e(E1e,crr),e(Jv,frr),e(Jv,gW),e(gW,mrr),e(Jv,grr),e(ue,hrr),e(ue,Yv),e(Yv,C1e),e(C1e,prr),e(Yv,_rr),e(Yv,hW),e(hW,urr),e(Yv,brr),e(ue,vrr),e(ue,Kv),e(Kv,w1e),e(w1e,Frr),e(Kv,Trr),e(Kv,pW),e(pW,Mrr),e(Kv,Err),e(ue,Crr),e(ue,Zv),e(Zv,A1e),e(A1e,wrr),e(Zv,Arr),e(Zv,_W),e(_W,Lrr),e(Zv,yrr),e(lo,xrr),e(lo,e3),e(e3,$rr),e(e3,L1e),e(L1e,krr),e(e3,Srr),e(e3,y1e),e(y1e,Rrr),e(lo,Prr),M(o3,lo,null),b(f,oOe,u),b(f,ud,u),e(ud,r3),e(r3,x1e),M(r8,x1e,null),e(ud,Brr),e(ud,$1e),e($1e,Irr),b(f,rOe,u),b(f,Go,u),M(t8,Go,null),e(Go,Nrr),e(Go,bd),e(bd,qrr),e(bd,uW),e(uW,jrr),e(bd,Drr),e(bd,bW),e(bW,Grr),e(bd,Orr),e(Go,Vrr),e(Go,a8),e(a8,Xrr),e(a8,k1e),e(k1e,zrr),e(a8,Wrr),e(Go,Qrr),e(Go,vt),M(n8,vt,null),e(vt,Hrr),e(vt,S1e),e(S1e,Urr),e(vt,Jrr),e(vt,vd),e(vd,Yrr),e(vd,R1e),e(R1e,Krr),e(vd,Zrr),e(vd,vW),e(vW,etr),e(vd,otr),e(vt,rtr),M(t3,vt,null),e(Go,ttr),e(Go,io),M(s8,io,null),e(io,atr),e(io,P1e),e(P1e,ntr),e(io,str),e(io,za),e(za,ltr),e(za,B1e),e(B1e,itr),e(za,dtr),e(za,I1e),e(I1e,ctr),e(za,ftr),e(za,N1e),e(N1e,mtr),e(za,gtr),e(io,htr),e(io,q1e),e(q1e,a3),e(a3,j1e),e(j1e,ptr),e(a3,_tr),e(a3,FW),e(FW,utr),e(a3,btr),e(io,vtr),e(io,n3),e(n3,Ftr),e(n3,D1e),e(D1e,Ttr),e(n3,Mtr),e(n3,G1e),e(G1e,Etr),e(io,Ctr),M(s3,io,null),b(f,tOe,u),b(f,Fd,u),e(Fd,l3),e(l3,O1e),M(l8,O1e,null),e(Fd,wtr),e(Fd,V1e),e(V1e,Atr),b(f,aOe,u),b(f,Oo,u),M(i8,Oo,null),e(Oo,Ltr),e(Oo,Td),e(Td,ytr),e(Td,TW),e(TW,xtr),e(Td,$tr),e(Td,MW),e(MW,ktr),e(Td,Str),e(Oo,Rtr),e(Oo,d8),e(d8,Ptr),e(d8,X1e),e(X1e,Btr),e(d8,Itr),e(Oo,Ntr),e(Oo,Ft),M(c8,Ft,null),e(Ft,qtr),e(Ft,z1e),e(z1e,jtr),e(Ft,Dtr),e(Ft,Md),e(Md,Gtr),e(Md,W1e),e(W1e,Otr),e(Md,Vtr),e(Md,EW),e(EW,Xtr),e(Md,ztr),e(Ft,Wtr),M(i3,Ft,null),e(Oo,Qtr),e(Oo,co),M(f8,co,null),e(co,Htr),e(co,Q1e),e(Q1e,Utr),e(co,Jtr),e(co,Wa),e(Wa,Ytr),e(Wa,H1e),e(H1e,Ktr),e(Wa,Ztr),e(Wa,U1e),e(U1e,ear),e(Wa,oar),e(Wa,J1e),e(J1e,rar),e(Wa,tar),e(co,aar),e(co,Y1e),e(Y1e,d3),e(d3,K1e),e(K1e,nar),e(d3,sar),e(d3,CW),e(CW,lar),e(d3,iar),e(co,dar),e(co,c3),e(c3,car),e(c3,Z1e),e(Z1e,far),e(c3,mar),e(c3,ebe),e(ebe,gar),e(co,har),M(f3,co,null),b(f,nOe,u),b(f,Ed,u),e(Ed,m3),e(m3,obe),M(m8,obe,null),e(Ed,par),e(Ed,rbe),e(rbe,_ar),b(f,sOe,u),b(f,Vo,u),M(g8,Vo,null),e(Vo,uar),e(Vo,Cd),e(Cd,bar),e(Cd,wW),e(wW,Far),e(Cd,Tar),e(Cd,AW),e(AW,Mar),e(Cd,Ear),e(Vo,Car),e(Vo,h8),e(h8,war),e(h8,tbe),e(tbe,Aar),e(h8,Lar),e(Vo,yar),e(Vo,Tt),M(p8,Tt,null),e(Tt,xar),e(Tt,abe),e(abe,$ar),e(Tt,kar),e(Tt,wd),e(wd,Sar),e(wd,nbe),e(nbe,Rar),e(wd,Par),e(wd,LW),e(LW,Bar),e(wd,Iar),e(Tt,Nar),M(g3,Tt,null),e(Vo,qar),e(Vo,fo),M(_8,fo,null),e(fo,jar),e(fo,sbe),e(sbe,Dar),e(fo,Gar),e(fo,Qa),e(Qa,Oar),e(Qa,lbe),e(lbe,Var),e(Qa,Xar),e(Qa,ibe),e(ibe,zar),e(Qa,War),e(Qa,dbe),e(dbe,Qar),e(Qa,Har),e(fo,Uar),e(fo,Pe),e(Pe,h3),e(h3,cbe),e(cbe,Jar),e(h3,Yar),e(h3,yW),e(yW,Kar),e(h3,Zar),e(Pe,enr),e(Pe,p3),e(p3,fbe),e(fbe,onr),e(p3,rnr),e(p3,xW),e(xW,tnr),e(p3,anr),e(Pe,nnr),e(Pe,_3),e(_3,mbe),e(mbe,snr),e(_3,lnr),e(_3,$W),e($W,inr),e(_3,dnr),e(Pe,cnr),e(Pe,u3),e(u3,gbe),e(gbe,fnr),e(u3,mnr),e(u3,kW),e(kW,gnr),e(u3,hnr),e(Pe,pnr),e(Pe,b3),e(b3,hbe),e(hbe,_nr),e(b3,unr),e(b3,SW),e(SW,bnr),e(b3,vnr),e(Pe,Fnr),e(Pe,v3),e(v3,pbe),e(pbe,Tnr),e(v3,Mnr),e(v3,RW),e(RW,Enr),e(v3,Cnr),e(Pe,wnr),e(Pe,F3),e(F3,_be),e(_be,Anr),e(F3,Lnr),e(F3,PW),e(PW,ynr),e(F3,xnr),e(Pe,$nr),e(Pe,T3),e(T3,ube),e(ube,knr),e(T3,Snr),e(T3,BW),e(BW,Rnr),e(T3,Pnr),e(Pe,Bnr),e(Pe,M3),e(M3,bbe),e(bbe,Inr),e(M3,Nnr),e(M3,IW),e(IW,qnr),e(M3,jnr),e(fo,Dnr),e(fo,E3),e(E3,Gnr),e(E3,vbe),e(vbe,Onr),e(E3,Vnr),e(E3,Fbe),e(Fbe,Xnr),e(fo,znr),M(C3,fo,null),b(f,lOe,u),b(f,Ad,u),e(Ad,w3),e(w3,Tbe),M(u8,Tbe,null),e(Ad,Wnr),e(Ad,Mbe),e(Mbe,Qnr),b(f,iOe,u),b(f,Xo,u),M(b8,Xo,null),e(Xo,Hnr),e(Xo,Ld),e(Ld,Unr),e(Ld,NW),e(NW,Jnr),e(Ld,Ynr),e(Ld,qW),e(qW,Knr),e(Ld,Znr),e(Xo,esr),e(Xo,v8),e(v8,osr),e(v8,Ebe),e(Ebe,rsr),e(v8,tsr),e(Xo,asr),e(Xo,Mt),M(F8,Mt,null),e(Mt,nsr),e(Mt,Cbe),e(Cbe,ssr),e(Mt,lsr),e(Mt,yd),e(yd,isr),e(yd,wbe),e(wbe,dsr),e(yd,csr),e(yd,jW),e(jW,fsr),e(yd,msr),e(Mt,gsr),M(A3,Mt,null),e(Xo,hsr),e(Xo,mo),M(T8,mo,null),e(mo,psr),e(mo,Abe),e(Abe,_sr),e(mo,usr),e(mo,Ha),e(Ha,bsr),e(Ha,Lbe),e(Lbe,vsr),e(Ha,Fsr),e(Ha,ybe),e(ybe,Tsr),e(Ha,Msr),e(Ha,xbe),e(xbe,Esr),e(Ha,Csr),e(mo,wsr),e(mo,et),e(et,L3),e(L3,$be),e($be,Asr),e(L3,Lsr),e(L3,DW),e(DW,ysr),e(L3,xsr),e(et,$sr),e(et,y3),e(y3,kbe),e(kbe,ksr),e(y3,Ssr),e(y3,GW),e(GW,Rsr),e(y3,Psr),e(et,Bsr),e(et,x3),e(x3,Sbe),e(Sbe,Isr),e(x3,Nsr),e(x3,OW),e(OW,qsr),e(x3,jsr),e(et,Dsr),e(et,$3),e($3,Rbe),e(Rbe,Gsr),e($3,Osr),e($3,VW),e(VW,Vsr),e($3,Xsr),e(et,zsr),e(et,k3),e(k3,Pbe),e(Pbe,Wsr),e(k3,Qsr),e(k3,XW),e(XW,Hsr),e(k3,Usr),e(mo,Jsr),e(mo,S3),e(S3,Ysr),e(S3,Bbe),e(Bbe,Ksr),e(S3,Zsr),e(S3,Ibe),e(Ibe,elr),e(mo,olr),M(R3,mo,null),b(f,dOe,u),b(f,xd,u),e(xd,P3),e(P3,Nbe),M(M8,Nbe,null),e(xd,rlr),e(xd,qbe),e(qbe,tlr),b(f,cOe,u),b(f,zo,u),M(E8,zo,null),e(zo,alr),e(zo,$d),e($d,nlr),e($d,zW),e(zW,slr),e($d,llr),e($d,WW),e(WW,ilr),e($d,dlr),e(zo,clr),e(zo,C8),e(C8,flr),e(C8,jbe),e(jbe,mlr),e(C8,glr),e(zo,hlr),e(zo,Et),M(w8,Et,null),e(Et,plr),e(Et,Dbe),e(Dbe,_lr),e(Et,ulr),e(Et,kd),e(kd,blr),e(kd,Gbe),e(Gbe,vlr),e(kd,Flr),e(kd,QW),e(QW,Tlr),e(kd,Mlr),e(Et,Elr),M(B3,Et,null),e(zo,Clr),e(zo,go),M(A8,go,null),e(go,wlr),e(go,Obe),e(Obe,Alr),e(go,Llr),e(go,Ua),e(Ua,ylr),e(Ua,Vbe),e(Vbe,xlr),e(Ua,$lr),e(Ua,Xbe),e(Xbe,klr),e(Ua,Slr),e(Ua,zbe),e(zbe,Rlr),e(Ua,Plr),e(go,Blr),e(go,Le),e(Le,I3),e(I3,Wbe),e(Wbe,Ilr),e(I3,Nlr),e(I3,HW),e(HW,qlr),e(I3,jlr),e(Le,Dlr),e(Le,N3),e(N3,Qbe),e(Qbe,Glr),e(N3,Olr),e(N3,UW),e(UW,Vlr),e(N3,Xlr),e(Le,zlr),e(Le,q3),e(q3,Hbe),e(Hbe,Wlr),e(q3,Qlr),e(q3,JW),e(JW,Hlr),e(q3,Ulr),e(Le,Jlr),e(Le,j3),e(j3,Ube),e(Ube,Ylr),e(j3,Klr),e(j3,YW),e(YW,Zlr),e(j3,eir),e(Le,oir),e(Le,D3),e(D3,Jbe),e(Jbe,rir),e(D3,tir),e(D3,KW),e(KW,air),e(D3,nir),e(Le,sir),e(Le,G3),e(G3,Ybe),e(Ybe,lir),e(G3,iir),e(G3,ZW),e(ZW,dir),e(G3,cir),e(Le,fir),e(Le,O3),e(O3,Kbe),e(Kbe,mir),e(O3,gir),e(O3,eQ),e(eQ,hir),e(O3,pir),e(Le,_ir),e(Le,V3),e(V3,Zbe),e(Zbe,uir),e(V3,bir),e(V3,oQ),e(oQ,vir),e(V3,Fir),e(Le,Tir),e(Le,X3),e(X3,e2e),e(e2e,Mir),e(X3,Eir),e(X3,rQ),e(rQ,Cir),e(X3,wir),e(Le,Air),e(Le,z3),e(z3,o2e),e(o2e,Lir),e(z3,yir),e(z3,tQ),e(tQ,xir),e(z3,$ir),e(go,kir),e(go,W3),e(W3,Sir),e(W3,r2e),e(r2e,Rir),e(W3,Pir),e(W3,t2e),e(t2e,Bir),e(go,Iir),M(Q3,go,null),b(f,fOe,u),b(f,Sd,u),e(Sd,H3),e(H3,a2e),M(L8,a2e,null),e(Sd,Nir),e(Sd,n2e),e(n2e,qir),b(f,mOe,u),b(f,Wo,u),M(y8,Wo,null),e(Wo,jir),e(Wo,Rd),e(Rd,Dir),e(Rd,aQ),e(aQ,Gir),e(Rd,Oir),e(Rd,nQ),e(nQ,Vir),e(Rd,Xir),e(Wo,zir),e(Wo,x8),e(x8,Wir),e(x8,s2e),e(s2e,Qir),e(x8,Hir),e(Wo,Uir),e(Wo,Ct),M($8,Ct,null),e(Ct,Jir),e(Ct,l2e),e(l2e,Yir),e(Ct,Kir),e(Ct,Pd),e(Pd,Zir),e(Pd,i2e),e(i2e,edr),e(Pd,odr),e(Pd,sQ),e(sQ,rdr),e(Pd,tdr),e(Ct,adr),M(U3,Ct,null),e(Wo,ndr),e(Wo,ho),M(k8,ho,null),e(ho,sdr),e(ho,d2e),e(d2e,ldr),e(ho,idr),e(ho,Ja),e(Ja,ddr),e(Ja,c2e),e(c2e,cdr),e(Ja,fdr),e(Ja,f2e),e(f2e,mdr),e(Ja,gdr),e(Ja,m2e),e(m2e,hdr),e(Ja,pdr),e(ho,_dr),e(ho,S8),e(S8,J3),e(J3,g2e),e(g2e,udr),e(J3,bdr),e(J3,lQ),e(lQ,vdr),e(J3,Fdr),e(S8,Tdr),e(S8,Y3),e(Y3,h2e),e(h2e,Mdr),e(Y3,Edr),e(Y3,iQ),e(iQ,Cdr),e(Y3,wdr),e(ho,Adr),e(ho,K3),e(K3,Ldr),e(K3,p2e),e(p2e,ydr),e(K3,xdr),e(K3,_2e),e(_2e,$dr),e(ho,kdr),M(Z3,ho,null),b(f,gOe,u),b(f,Bd,u),e(Bd,eF),e(eF,u2e),M(R8,u2e,null),e(Bd,Sdr),e(Bd,b2e),e(b2e,Rdr),b(f,hOe,u),b(f,Qo,u),M(P8,Qo,null),e(Qo,Pdr),e(Qo,Id),e(Id,Bdr),e(Id,dQ),e(dQ,Idr),e(Id,Ndr),e(Id,cQ),e(cQ,qdr),e(Id,jdr),e(Qo,Ddr),e(Qo,B8),e(B8,Gdr),e(B8,v2e),e(v2e,Odr),e(B8,Vdr),e(Qo,Xdr),e(Qo,wt),M(I8,wt,null),e(wt,zdr),e(wt,F2e),e(F2e,Wdr),e(wt,Qdr),e(wt,Nd),e(Nd,Hdr),e(Nd,T2e),e(T2e,Udr),e(Nd,Jdr),e(Nd,fQ),e(fQ,Ydr),e(Nd,Kdr),e(wt,Zdr),M(oF,wt,null),e(Qo,ecr),e(Qo,po),M(N8,po,null),e(po,ocr),e(po,M2e),e(M2e,rcr),e(po,tcr),e(po,Ya),e(Ya,acr),e(Ya,E2e),e(E2e,ncr),e(Ya,scr),e(Ya,C2e),e(C2e,lcr),e(Ya,icr),e(Ya,w2e),e(w2e,dcr),e(Ya,ccr),e(po,fcr),e(po,ot),e(ot,rF),e(rF,A2e),e(A2e,mcr),e(rF,gcr),e(rF,mQ),e(mQ,hcr),e(rF,pcr),e(ot,_cr),e(ot,tF),e(tF,L2e),e(L2e,ucr),e(tF,bcr),e(tF,gQ),e(gQ,vcr),e(tF,Fcr),e(ot,Tcr),e(ot,aF),e(aF,y2e),e(y2e,Mcr),e(aF,Ecr),e(aF,hQ),e(hQ,Ccr),e(aF,wcr),e(ot,Acr),e(ot,nF),e(nF,x2e),e(x2e,Lcr),e(nF,ycr),e(nF,pQ),e(pQ,xcr),e(nF,$cr),e(ot,kcr),e(ot,sF),e(sF,$2e),e($2e,Scr),e(sF,Rcr),e(sF,_Q),e(_Q,Pcr),e(sF,Bcr),e(po,Icr),e(po,lF),e(lF,Ncr),e(lF,k2e),e(k2e,qcr),e(lF,jcr),e(lF,S2e),e(S2e,Dcr),e(po,Gcr),M(iF,po,null),b(f,pOe,u),b(f,qd,u),e(qd,dF),e(dF,R2e),M(q8,R2e,null),e(qd,Ocr),e(qd,P2e),e(P2e,Vcr),b(f,_Oe,u),b(f,Ho,u),M(j8,Ho,null),e(Ho,Xcr),e(Ho,jd),e(jd,zcr),e(jd,uQ),e(uQ,Wcr),e(jd,Qcr),e(jd,bQ),e(bQ,Hcr),e(jd,Ucr),e(Ho,Jcr),e(Ho,D8),e(D8,Ycr),e(D8,B2e),e(B2e,Kcr),e(D8,Zcr),e(Ho,efr),e(Ho,At),M(G8,At,null),e(At,ofr),e(At,I2e),e(I2e,rfr),e(At,tfr),e(At,Dd),e(Dd,afr),e(Dd,N2e),e(N2e,nfr),e(Dd,sfr),e(Dd,vQ),e(vQ,lfr),e(Dd,ifr),e(At,dfr),M(cF,At,null),e(Ho,cfr),e(Ho,_o),M(O8,_o,null),e(_o,ffr),e(_o,q2e),e(q2e,mfr),e(_o,gfr),e(_o,Ka),e(Ka,hfr),e(Ka,j2e),e(j2e,pfr),e(Ka,_fr),e(Ka,D2e),e(D2e,ufr),e(Ka,bfr),e(Ka,G2e),e(G2e,vfr),e(Ka,Ffr),e(_o,Tfr),e(_o,Gd),e(Gd,fF),e(fF,O2e),e(O2e,Mfr),e(fF,Efr),e(fF,FQ),e(FQ,Cfr),e(fF,wfr),e(Gd,Afr),e(Gd,mF),e(mF,V2e),e(V2e,Lfr),e(mF,yfr),e(mF,TQ),e(TQ,xfr),e(mF,$fr),e(Gd,kfr),e(Gd,gF),e(gF,X2e),e(X2e,Sfr),e(gF,Rfr),e(gF,MQ),e(MQ,Pfr),e(gF,Bfr),e(_o,Ifr),e(_o,hF),e(hF,Nfr),e(hF,z2e),e(z2e,qfr),e(hF,jfr),e(hF,W2e),e(W2e,Dfr),e(_o,Gfr),M(pF,_o,null),b(f,uOe,u),b(f,Od,u),e(Od,_F),e(_F,Q2e),M(V8,Q2e,null),e(Od,Ofr),e(Od,H2e),e(H2e,Vfr),b(f,bOe,u),b(f,Uo,u),M(X8,Uo,null),e(Uo,Xfr),e(Uo,Vd),e(Vd,zfr),e(Vd,EQ),e(EQ,Wfr),e(Vd,Qfr),e(Vd,CQ),e(CQ,Hfr),e(Vd,Ufr),e(Uo,Jfr),e(Uo,z8),e(z8,Yfr),e(z8,U2e),e(U2e,Kfr),e(z8,Zfr),e(Uo,emr),e(Uo,Lt),M(W8,Lt,null),e(Lt,omr),e(Lt,J2e),e(J2e,rmr),e(Lt,tmr),e(Lt,Xd),e(Xd,amr),e(Xd,Y2e),e(Y2e,nmr),e(Xd,smr),e(Xd,wQ),e(wQ,lmr),e(Xd,imr),e(Lt,dmr),M(uF,Lt,null),e(Uo,cmr),e(Uo,uo),M(Q8,uo,null),e(uo,fmr),e(uo,K2e),e(K2e,mmr),e(uo,gmr),e(uo,Za),e(Za,hmr),e(Za,Z2e),e(Z2e,pmr),e(Za,_mr),e(Za,e4e),e(e4e,umr),e(Za,bmr),e(Za,o4e),e(o4e,vmr),e(Za,Fmr),e(uo,Tmr),e(uo,H8),e(H8,bF),e(bF,r4e),e(r4e,Mmr),e(bF,Emr),e(bF,AQ),e(AQ,Cmr),e(bF,wmr),e(H8,Amr),e(H8,vF),e(vF,t4e),e(t4e,Lmr),e(vF,ymr),e(vF,LQ),e(LQ,xmr),e(vF,$mr),e(uo,kmr),e(uo,FF),e(FF,Smr),e(FF,a4e),e(a4e,Rmr),e(FF,Pmr),e(FF,n4e),e(n4e,Bmr),e(uo,Imr),M(TF,uo,null),b(f,vOe,u),b(f,zd,u),e(zd,MF),e(MF,s4e),M(U8,s4e,null),e(zd,Nmr),e(zd,l4e),e(l4e,qmr),b(f,FOe,u),b(f,Jo,u),M(J8,Jo,null),e(Jo,jmr),e(Jo,Wd),e(Wd,Dmr),e(Wd,yQ),e(yQ,Gmr),e(Wd,Omr),e(Wd,xQ),e(xQ,Vmr),e(Wd,Xmr),e(Jo,zmr),e(Jo,Y8),e(Y8,Wmr),e(Y8,i4e),e(i4e,Qmr),e(Y8,Hmr),e(Jo,Umr),e(Jo,yt),M(K8,yt,null),e(yt,Jmr),e(yt,d4e),e(d4e,Ymr),e(yt,Kmr),e(yt,Qd),e(Qd,Zmr),e(Qd,c4e),e(c4e,egr),e(Qd,ogr),e(Qd,$Q),e($Q,rgr),e(Qd,tgr),e(yt,agr),M(EF,yt,null),e(Jo,ngr),e(Jo,bo),M(Z8,bo,null),e(bo,sgr),e(bo,f4e),e(f4e,lgr),e(bo,igr),e(bo,en),e(en,dgr),e(en,m4e),e(m4e,cgr),e(en,fgr),e(en,g4e),e(g4e,mgr),e(en,ggr),e(en,h4e),e(h4e,hgr),e(en,pgr),e(bo,_gr),e(bo,p4e),e(p4e,CF),e(CF,_4e),e(_4e,ugr),e(CF,bgr),e(CF,kQ),e(kQ,vgr),e(CF,Fgr),e(bo,Tgr),e(bo,wF),e(wF,Mgr),e(wF,u4e),e(u4e,Egr),e(wF,Cgr),e(wF,b4e),e(b4e,wgr),e(bo,Agr),M(AF,bo,null),b(f,TOe,u),b(f,Hd,u),e(Hd,LF),e(LF,v4e),M(e9,v4e,null),e(Hd,Lgr),e(Hd,F4e),e(F4e,ygr),b(f,MOe,u),b(f,Yo,u),M(o9,Yo,null),e(Yo,xgr),e(Yo,Ud),e(Ud,$gr),e(Ud,SQ),e(SQ,kgr),e(Ud,Sgr),e(Ud,RQ),e(RQ,Rgr),e(Ud,Pgr),e(Yo,Bgr),e(Yo,r9),e(r9,Igr),e(r9,T4e),e(T4e,Ngr),e(r9,qgr),e(Yo,jgr),e(Yo,xt),M(t9,xt,null),e(xt,Dgr),e(xt,M4e),e(M4e,Ggr),e(xt,Ogr),e(xt,Jd),e(Jd,Vgr),e(Jd,E4e),e(E4e,Xgr),e(Jd,zgr),e(Jd,PQ),e(PQ,Wgr),e(Jd,Qgr),e(xt,Hgr),M(yF,xt,null),e(Yo,Ugr),e(Yo,vo),M(a9,vo,null),e(vo,Jgr),e(vo,C4e),e(C4e,Ygr),e(vo,Kgr),e(vo,on),e(on,Zgr),e(on,w4e),e(w4e,ehr),e(on,ohr),e(on,A4e),e(A4e,rhr),e(on,thr),e(on,L4e),e(L4e,ahr),e(on,nhr),e(vo,shr),e(vo,rt),e(rt,xF),e(xF,y4e),e(y4e,lhr),e(xF,ihr),e(xF,BQ),e(BQ,dhr),e(xF,chr),e(rt,fhr),e(rt,$F),e($F,x4e),e(x4e,mhr),e($F,ghr),e($F,IQ),e(IQ,hhr),e($F,phr),e(rt,_hr),e(rt,kF),e(kF,$4e),e($4e,uhr),e(kF,bhr),e(kF,NQ),e(NQ,vhr),e(kF,Fhr),e(rt,Thr),e(rt,SF),e(SF,k4e),e(k4e,Mhr),e(SF,Ehr),e(SF,qQ),e(qQ,Chr),e(SF,whr),e(rt,Ahr),e(rt,RF),e(RF,S4e),e(S4e,Lhr),e(RF,yhr),e(RF,jQ),e(jQ,xhr),e(RF,$hr),e(vo,khr),e(vo,PF),e(PF,Shr),e(PF,R4e),e(R4e,Rhr),e(PF,Phr),e(PF,P4e),e(P4e,Bhr),e(vo,Ihr),M(BF,vo,null),b(f,EOe,u),b(f,Yd,u),e(Yd,IF),e(IF,B4e),M(n9,B4e,null),e(Yd,Nhr),e(Yd,I4e),e(I4e,qhr),b(f,COe,u),b(f,Ko,u),M(s9,Ko,null),e(Ko,jhr),e(Ko,Kd),e(Kd,Dhr),e(Kd,DQ),e(DQ,Ghr),e(Kd,Ohr),e(Kd,GQ),e(GQ,Vhr),e(Kd,Xhr),e(Ko,zhr),e(Ko,l9),e(l9,Whr),e(l9,N4e),e(N4e,Qhr),e(l9,Hhr),e(Ko,Uhr),e(Ko,$t),M(i9,$t,null),e($t,Jhr),e($t,q4e),e(q4e,Yhr),e($t,Khr),e($t,Zd),e(Zd,Zhr),e(Zd,j4e),e(j4e,epr),e(Zd,opr),e(Zd,OQ),e(OQ,rpr),e(Zd,tpr),e($t,apr),M(NF,$t,null),e(Ko,npr),e(Ko,Fo),M(d9,Fo,null),e(Fo,spr),e(Fo,D4e),e(D4e,lpr),e(Fo,ipr),e(Fo,rn),e(rn,dpr),e(rn,G4e),e(G4e,cpr),e(rn,fpr),e(rn,O4e),e(O4e,mpr),e(rn,gpr),e(rn,V4e),e(V4e,hpr),e(rn,ppr),e(Fo,_pr),e(Fo,X4e),e(X4e,qF),e(qF,z4e),e(z4e,upr),e(qF,bpr),e(qF,VQ),e(VQ,vpr),e(qF,Fpr),e(Fo,Tpr),e(Fo,jF),e(jF,Mpr),e(jF,W4e),e(W4e,Epr),e(jF,Cpr),e(jF,Q4e),e(Q4e,wpr),e(Fo,Apr),M(DF,Fo,null),b(f,wOe,u),b(f,ec,u),e(ec,GF),e(GF,H4e),M(c9,H4e,null),e(ec,Lpr),e(ec,U4e),e(U4e,ypr),b(f,AOe,u),b(f,Zo,u),M(f9,Zo,null),e(Zo,xpr),e(Zo,oc),e(oc,$pr),e(oc,XQ),e(XQ,kpr),e(oc,Spr),e(oc,zQ),e(zQ,Rpr),e(oc,Ppr),e(Zo,Bpr),e(Zo,m9),e(m9,Ipr),e(m9,J4e),e(J4e,Npr),e(m9,qpr),e(Zo,jpr),e(Zo,kt),M(g9,kt,null),e(kt,Dpr),e(kt,Y4e),e(Y4e,Gpr),e(kt,Opr),e(kt,rc),e(rc,Vpr),e(rc,K4e),e(K4e,Xpr),e(rc,zpr),e(rc,WQ),e(WQ,Wpr),e(rc,Qpr),e(kt,Hpr),M(OF,kt,null),e(Zo,Upr),e(Zo,Lr),M(h9,Lr,null),e(Lr,Jpr),e(Lr,Z4e),e(Z4e,Ypr),e(Lr,Kpr),e(Lr,tn),e(tn,Zpr),e(tn,e5e),e(e5e,e_r),e(tn,o_r),e(tn,o5e),e(o5e,r_r),e(tn,t_r),e(tn,r5e),e(r5e,a_r),e(tn,n_r),e(Lr,s_r),e(Lr,q),e(q,VF),e(VF,t5e),e(t5e,l_r),e(VF,i_r),e(VF,QQ),e(QQ,d_r),e(VF,c_r),e(q,f_r),e(q,XF),e(XF,a5e),e(a5e,m_r),e(XF,g_r),e(XF,HQ),e(HQ,h_r),e(XF,p_r),e(q,__r),e(q,zF),e(zF,n5e),e(n5e,u_r),e(zF,b_r),e(zF,UQ),e(UQ,v_r),e(zF,F_r),e(q,T_r),e(q,WF),e(WF,s5e),e(s5e,M_r),e(WF,E_r),e(WF,JQ),e(JQ,C_r),e(WF,w_r),e(q,A_r),e(q,QF),e(QF,l5e),e(l5e,L_r),e(QF,y_r),e(QF,YQ),e(YQ,x_r),e(QF,$_r),e(q,k_r),e(q,HF),e(HF,i5e),e(i5e,S_r),e(HF,R_r),e(HF,KQ),e(KQ,P_r),e(HF,B_r),e(q,I_r),e(q,UF),e(UF,d5e),e(d5e,N_r),e(UF,q_r),e(UF,ZQ),e(ZQ,j_r),e(UF,D_r),e(q,G_r),e(q,JF),e(JF,c5e),e(c5e,O_r),e(JF,V_r),e(JF,eH),e(eH,X_r),e(JF,z_r),e(q,W_r),e(q,YF),e(YF,f5e),e(f5e,Q_r),e(YF,H_r),e(YF,oH),e(oH,U_r),e(YF,J_r),e(q,Y_r),e(q,KF),e(KF,m5e),e(m5e,K_r),e(KF,Z_r),e(KF,rH),e(rH,eur),e(KF,our),e(q,rur),e(q,ZF),e(ZF,g5e),e(g5e,tur),e(ZF,aur),e(ZF,tH),e(tH,nur),e(ZF,sur),e(q,lur),e(q,eT),e(eT,h5e),e(h5e,iur),e(eT,dur),e(eT,aH),e(aH,cur),e(eT,fur),e(q,mur),e(q,oT),e(oT,p5e),e(p5e,gur),e(oT,hur),e(oT,nH),e(nH,pur),e(oT,_ur),e(q,uur),e(q,rT),e(rT,_5e),e(_5e,bur),e(rT,vur),e(rT,sH),e(sH,Fur),e(rT,Tur),e(q,Mur),e(q,tT),e(tT,u5e),e(u5e,Eur),e(tT,Cur),e(tT,lH),e(lH,wur),e(tT,Aur),e(q,Lur),e(q,aT),e(aT,b5e),e(b5e,yur),e(aT,xur),e(aT,iH),e(iH,$ur),e(aT,kur),e(q,Sur),e(q,nT),e(nT,v5e),e(v5e,Rur),e(nT,Pur),e(nT,dH),e(dH,Bur),e(nT,Iur),e(q,Nur),e(q,Xs),e(Xs,F5e),e(F5e,qur),e(Xs,jur),e(Xs,cH),e(cH,Dur),e(Xs,Gur),e(Xs,fH),e(fH,Our),e(Xs,Vur),e(q,Xur),e(q,sT),e(sT,T5e),e(T5e,zur),e(sT,Wur),e(sT,mH),e(mH,Qur),e(sT,Hur),e(q,Uur),e(q,lT),e(lT,M5e),e(M5e,Jur),e(lT,Yur),e(lT,gH),e(gH,Kur),e(lT,Zur),e(q,e1r),e(q,iT),e(iT,E5e),e(E5e,o1r),e(iT,r1r),e(iT,hH),e(hH,t1r),e(iT,a1r),e(q,n1r),e(q,dT),e(dT,C5e),e(C5e,s1r),e(dT,l1r),e(dT,pH),e(pH,i1r),e(dT,d1r),e(q,c1r),e(q,cT),e(cT,w5e),e(w5e,f1r),e(cT,m1r),e(cT,_H),e(_H,g1r),e(cT,h1r),e(q,p1r),e(q,fT),e(fT,A5e),e(A5e,_1r),e(fT,u1r),e(fT,uH),e(uH,b1r),e(fT,v1r),e(q,F1r),e(q,mT),e(mT,L5e),e(L5e,T1r),e(mT,M1r),e(mT,bH),e(bH,E1r),e(mT,C1r),e(q,w1r),e(q,gT),e(gT,y5e),e(y5e,A1r),e(gT,L1r),e(gT,vH),e(vH,y1r),e(gT,x1r),e(q,$1r),e(q,hT),e(hT,x5e),e(x5e,k1r),e(hT,S1r),e(hT,FH),e(FH,R1r),e(hT,P1r),e(q,B1r),e(q,pT),e(pT,$5e),e($5e,I1r),e(pT,N1r),e(pT,TH),e(TH,q1r),e(pT,j1r),e(q,D1r),e(q,_T),e(_T,k5e),e(k5e,G1r),e(_T,O1r),e(_T,MH),e(MH,V1r),e(_T,X1r),e(q,z1r),e(q,uT),e(uT,S5e),e(S5e,W1r),e(uT,Q1r),e(uT,EH),e(EH,H1r),e(uT,U1r),e(q,J1r),e(q,bT),e(bT,R5e),e(R5e,Y1r),e(bT,K1r),e(bT,CH),e(CH,Z1r),e(bT,ebr),e(q,obr),e(q,vT),e(vT,P5e),e(P5e,rbr),e(vT,tbr),e(vT,wH),e(wH,abr),e(vT,nbr),e(q,sbr),e(q,FT),e(FT,B5e),e(B5e,lbr),e(FT,ibr),e(FT,AH),e(AH,dbr),e(FT,cbr),e(q,fbr),e(q,TT),e(TT,I5e),e(I5e,mbr),e(TT,gbr),e(TT,LH),e(LH,hbr),e(TT,pbr),e(q,_br),e(q,MT),e(MT,N5e),e(N5e,ubr),e(MT,bbr),e(MT,yH),e(yH,vbr),e(MT,Fbr),e(q,Tbr),e(q,ET),e(ET,q5e),e(q5e,Mbr),e(ET,Ebr),e(ET,xH),e(xH,Cbr),e(ET,wbr),e(q,Abr),e(q,CT),e(CT,j5e),e(j5e,Lbr),e(CT,ybr),e(CT,$H),e($H,xbr),e(CT,$br),e(q,kbr),e(q,wT),e(wT,D5e),e(D5e,Sbr),e(wT,Rbr),e(wT,kH),e(kH,Pbr),e(wT,Bbr),e(q,Ibr),e(q,AT),e(AT,G5e),e(G5e,Nbr),e(AT,qbr),e(AT,SH),e(SH,jbr),e(AT,Dbr),e(q,Gbr),e(q,LT),e(LT,O5e),e(O5e,Obr),e(LT,Vbr),e(LT,RH),e(RH,Xbr),e(LT,zbr),e(q,Wbr),e(q,yT),e(yT,V5e),e(V5e,Qbr),e(yT,Hbr),e(yT,PH),e(PH,Ubr),e(yT,Jbr),e(q,Ybr),e(q,xT),e(xT,X5e),e(X5e,Kbr),e(xT,Zbr),e(xT,BH),e(BH,e2r),e(xT,o2r),e(q,r2r),e(q,$T),e($T,z5e),e(z5e,t2r),e($T,a2r),e($T,IH),e(IH,n2r),e($T,s2r),e(q,l2r),e(q,kT),e(kT,W5e),e(W5e,i2r),e(kT,d2r),e(kT,NH),e(NH,c2r),e(kT,f2r),e(q,m2r),e(q,ST),e(ST,Q5e),e(Q5e,g2r),e(ST,h2r),e(ST,qH),e(qH,p2r),e(ST,_2r),e(q,u2r),e(q,RT),e(RT,H5e),e(H5e,b2r),e(RT,v2r),e(RT,jH),e(jH,F2r),e(RT,T2r),e(q,M2r),e(q,PT),e(PT,U5e),e(U5e,E2r),e(PT,C2r),e(PT,DH),e(DH,w2r),e(PT,A2r),e(Lr,L2r),M(BT,Lr,null),b(f,LOe,u),b(f,tc,u),e(tc,IT),e(IT,J5e),M(p9,J5e,null),e(tc,y2r),e(tc,Y5e),e(Y5e,x2r),b(f,yOe,u),b(f,er,u),M(_9,er,null),e(er,$2r),e(er,ac),e(ac,k2r),e(ac,GH),e(GH,S2r),e(ac,R2r),e(ac,OH),e(OH,P2r),e(ac,B2r),e(er,I2r),e(er,u9),e(u9,N2r),e(u9,K5e),e(K5e,q2r),e(u9,j2r),e(er,D2r),e(er,St),M(b9,St,null),e(St,G2r),e(St,Z5e),e(Z5e,O2r),e(St,V2r),e(St,nc),e(nc,X2r),e(nc,eve),e(eve,z2r),e(nc,W2r),e(nc,VH),e(VH,Q2r),e(nc,H2r),e(St,U2r),M(NT,St,null),e(er,J2r),e(er,yr),M(v9,yr,null),e(yr,Y2r),e(yr,ove),e(ove,K2r),e(yr,Z2r),e(yr,an),e(an,e4r),e(an,rve),e(rve,o4r),e(an,r4r),e(an,tve),e(tve,t4r),e(an,a4r),e(an,ave),e(ave,n4r),e(an,s4r),e(yr,l4r),e(yr,se),e(se,qT),e(qT,nve),e(nve,i4r),e(qT,d4r),e(qT,XH),e(XH,c4r),e(qT,f4r),e(se,m4r),e(se,jT),e(jT,sve),e(sve,g4r),e(jT,h4r),e(jT,zH),e(zH,p4r),e(jT,_4r),e(se,u4r),e(se,DT),e(DT,lve),e(lve,b4r),e(DT,v4r),e(DT,WH),e(WH,F4r),e(DT,T4r),e(se,M4r),e(se,GT),e(GT,ive),e(ive,E4r),e(GT,C4r),e(GT,QH),e(QH,w4r),e(GT,A4r),e(se,L4r),e(se,OT),e(OT,dve),e(dve,y4r),e(OT,x4r),e(OT,HH),e(HH,$4r),e(OT,k4r),e(se,S4r),e(se,VT),e(VT,cve),e(cve,R4r),e(VT,P4r),e(VT,UH),e(UH,B4r),e(VT,I4r),e(se,N4r),e(se,XT),e(XT,fve),e(fve,q4r),e(XT,j4r),e(XT,JH),e(JH,D4r),e(XT,G4r),e(se,O4r),e(se,zT),e(zT,mve),e(mve,V4r),e(zT,X4r),e(zT,YH),e(YH,z4r),e(zT,W4r),e(se,Q4r),e(se,WT),e(WT,gve),e(gve,H4r),e(WT,U4r),e(WT,KH),e(KH,J4r),e(WT,Y4r),e(se,K4r),e(se,QT),e(QT,hve),e(hve,Z4r),e(QT,e5r),e(QT,ZH),e(ZH,o5r),e(QT,r5r),e(se,t5r),e(se,HT),e(HT,pve),e(pve,a5r),e(HT,n5r),e(HT,eU),e(eU,s5r),e(HT,l5r),e(se,i5r),e(se,UT),e(UT,_ve),e(_ve,d5r),e(UT,c5r),e(UT,oU),e(oU,f5r),e(UT,m5r),e(se,g5r),e(se,JT),e(JT,uve),e(uve,h5r),e(JT,p5r),e(JT,rU),e(rU,_5r),e(JT,u5r),e(se,b5r),e(se,YT),e(YT,bve),e(bve,v5r),e(YT,F5r),e(YT,tU),e(tU,T5r),e(YT,M5r),e(se,E5r),e(se,KT),e(KT,vve),e(vve,C5r),e(KT,w5r),e(KT,aU),e(aU,A5r),e(KT,L5r),e(se,y5r),e(se,ZT),e(ZT,Fve),e(Fve,x5r),e(ZT,$5r),e(ZT,nU),e(nU,k5r),e(ZT,S5r),e(se,R5r),e(se,e7),e(e7,Tve),e(Tve,P5r),e(e7,B5r),e(e7,sU),e(sU,I5r),e(e7,N5r),e(se,q5r),e(se,o7),e(o7,Mve),e(Mve,j5r),e(o7,D5r),e(o7,lU),e(lU,G5r),e(o7,O5r),e(se,V5r),e(se,r7),e(r7,Eve),e(Eve,X5r),e(r7,z5r),e(r7,iU),e(iU,W5r),e(r7,Q5r),e(se,H5r),e(se,t7),e(t7,Cve),e(Cve,U5r),e(t7,J5r),e(t7,dU),e(dU,Y5r),e(t7,K5r),e(se,Z5r),e(se,a7),e(a7,wve),e(wve,evr),e(a7,ovr),e(a7,cU),e(cU,rvr),e(a7,tvr),e(se,avr),e(se,n7),e(n7,Ave),e(Ave,nvr),e(n7,svr),e(n7,fU),e(fU,lvr),e(n7,ivr),e(se,dvr),e(se,s7),e(s7,Lve),e(Lve,cvr),e(s7,fvr),e(s7,mU),e(mU,mvr),e(s7,gvr),e(yr,hvr),M(l7,yr,null),b(f,xOe,u),b(f,sc,u),e(sc,i7),e(i7,yve),M(F9,yve,null),e(sc,pvr),e(sc,xve),e(xve,_vr),b(f,$Oe,u),b(f,or,u),M(T9,or,null),e(or,uvr),e(or,lc),e(lc,bvr),e(lc,gU),e(gU,vvr),e(lc,Fvr),e(lc,hU),e(hU,Tvr),e(lc,Mvr),e(or,Evr),e(or,M9),e(M9,Cvr),e(M9,$ve),e($ve,wvr),e(M9,Avr),e(or,Lvr),e(or,Rt),M(E9,Rt,null),e(Rt,yvr),e(Rt,kve),e(kve,xvr),e(Rt,$vr),e(Rt,ic),e(ic,kvr),e(ic,Sve),e(Sve,Svr),e(ic,Rvr),e(ic,pU),e(pU,Pvr),e(ic,Bvr),e(Rt,Ivr),M(d7,Rt,null),e(or,Nvr),e(or,xr),M(C9,xr,null),e(xr,qvr),e(xr,Rve),e(Rve,jvr),e(xr,Dvr),e(xr,nn),e(nn,Gvr),e(nn,Pve),e(Pve,Ovr),e(nn,Vvr),e(nn,Bve),e(Bve,Xvr),e(nn,zvr),e(nn,Ive),e(Ive,Wvr),e(nn,Qvr),e(xr,Hvr),e(xr,Me),e(Me,c7),e(c7,Nve),e(Nve,Uvr),e(c7,Jvr),e(c7,_U),e(_U,Yvr),e(c7,Kvr),e(Me,Zvr),e(Me,f7),e(f7,qve),e(qve,e3r),e(f7,o3r),e(f7,uU),e(uU,r3r),e(f7,t3r),e(Me,a3r),e(Me,m7),e(m7,jve),e(jve,n3r),e(m7,s3r),e(m7,bU),e(bU,l3r),e(m7,i3r),e(Me,d3r),e(Me,g7),e(g7,Dve),e(Dve,c3r),e(g7,f3r),e(g7,vU),e(vU,m3r),e(g7,g3r),e(Me,h3r),e(Me,h7),e(h7,Gve),e(Gve,p3r),e(h7,_3r),e(h7,FU),e(FU,u3r),e(h7,b3r),e(Me,v3r),e(Me,p7),e(p7,Ove),e(Ove,F3r),e(p7,T3r),e(p7,TU),e(TU,M3r),e(p7,E3r),e(Me,C3r),e(Me,_7),e(_7,Vve),e(Vve,w3r),e(_7,A3r),e(_7,MU),e(MU,L3r),e(_7,y3r),e(Me,x3r),e(Me,u7),e(u7,Xve),e(Xve,$3r),e(u7,k3r),e(u7,EU),e(EU,S3r),e(u7,R3r),e(Me,P3r),e(Me,b7),e(b7,zve),e(zve,B3r),e(b7,I3r),e(b7,CU),e(CU,N3r),e(b7,q3r),e(Me,j3r),e(Me,v7),e(v7,Wve),e(Wve,D3r),e(v7,G3r),e(v7,wU),e(wU,O3r),e(v7,V3r),e(Me,X3r),e(Me,F7),e(F7,Qve),e(Qve,z3r),e(F7,W3r),e(F7,AU),e(AU,Q3r),e(F7,H3r),e(Me,U3r),e(Me,T7),e(T7,Hve),e(Hve,J3r),e(T7,Y3r),e(T7,LU),e(LU,K3r),e(T7,Z3r),e(Me,eFr),e(Me,M7),e(M7,Uve),e(Uve,oFr),e(M7,rFr),e(M7,yU),e(yU,tFr),e(M7,aFr),e(xr,nFr),M(E7,xr,null),b(f,kOe,u),b(f,dc,u),e(dc,C7),e(C7,Jve),M(w9,Jve,null),e(dc,sFr),e(dc,Yve),e(Yve,lFr),b(f,SOe,u),b(f,rr,u),M(A9,rr,null),e(rr,iFr),e(rr,cc),e(cc,dFr),e(cc,xU),e(xU,cFr),e(cc,fFr),e(cc,$U),e($U,mFr),e(cc,gFr),e(rr,hFr),e(rr,L9),e(L9,pFr),e(L9,Kve),e(Kve,_Fr),e(L9,uFr),e(rr,bFr),e(rr,Pt),M(y9,Pt,null),e(Pt,vFr),e(Pt,Zve),e(Zve,FFr),e(Pt,TFr),e(Pt,fc),e(fc,MFr),e(fc,e3e),e(e3e,EFr),e(fc,CFr),e(fc,kU),e(kU,wFr),e(fc,AFr),e(Pt,LFr),M(w7,Pt,null),e(rr,yFr),e(rr,$r),M(x9,$r,null),e($r,xFr),e($r,o3e),e(o3e,$Fr),e($r,kFr),e($r,sn),e(sn,SFr),e(sn,r3e),e(r3e,RFr),e(sn,PFr),e(sn,t3e),e(t3e,BFr),e(sn,IFr),e(sn,a3e),e(a3e,NFr),e(sn,qFr),e($r,jFr),e($r,ln),e(ln,A7),e(A7,n3e),e(n3e,DFr),e(A7,GFr),e(A7,SU),e(SU,OFr),e(A7,VFr),e(ln,XFr),e(ln,L7),e(L7,s3e),e(s3e,zFr),e(L7,WFr),e(L7,RU),e(RU,QFr),e(L7,HFr),e(ln,UFr),e(ln,y7),e(y7,l3e),e(l3e,JFr),e(y7,YFr),e(y7,PU),e(PU,KFr),e(y7,ZFr),e(ln,eTr),e(ln,x7),e(x7,i3e),e(i3e,oTr),e(x7,rTr),e(x7,BU),e(BU,tTr),e(x7,aTr),e($r,nTr),M($7,$r,null),b(f,ROe,u),b(f,mc,u),e(mc,k7),e(k7,d3e),M($9,d3e,null),e(mc,sTr),e(mc,c3e),e(c3e,lTr),b(f,POe,u),b(f,tr,u),M(k9,tr,null),e(tr,iTr),e(tr,gc),e(gc,dTr),e(gc,IU),e(IU,cTr),e(gc,fTr),e(gc,NU),e(NU,mTr),e(gc,gTr),e(tr,hTr),e(tr,S9),e(S9,pTr),e(S9,f3e),e(f3e,_Tr),e(S9,uTr),e(tr,bTr),e(tr,Bt),M(R9,Bt,null),e(Bt,vTr),e(Bt,m3e),e(m3e,FTr),e(Bt,TTr),e(Bt,hc),e(hc,MTr),e(hc,g3e),e(g3e,ETr),e(hc,CTr),e(hc,qU),e(qU,wTr),e(hc,ATr),e(Bt,LTr),M(S7,Bt,null),e(tr,yTr),e(tr,kr),M(P9,kr,null),e(kr,xTr),e(kr,h3e),e(h3e,$Tr),e(kr,kTr),e(kr,dn),e(dn,STr),e(dn,p3e),e(p3e,RTr),e(dn,PTr),e(dn,_3e),e(_3e,BTr),e(dn,ITr),e(dn,u3e),e(u3e,NTr),e(dn,qTr),e(kr,jTr),e(kr,ie),e(ie,R7),e(R7,b3e),e(b3e,DTr),e(R7,GTr),e(R7,jU),e(jU,OTr),e(R7,VTr),e(ie,XTr),e(ie,P7),e(P7,v3e),e(v3e,zTr),e(P7,WTr),e(P7,DU),e(DU,QTr),e(P7,HTr),e(ie,UTr),e(ie,B7),e(B7,F3e),e(F3e,JTr),e(B7,YTr),e(B7,GU),e(GU,KTr),e(B7,ZTr),e(ie,e7r),e(ie,I7),e(I7,T3e),e(T3e,o7r),e(I7,r7r),e(I7,OU),e(OU,t7r),e(I7,a7r),e(ie,n7r),e(ie,N7),e(N7,M3e),e(M3e,s7r),e(N7,l7r),e(N7,VU),e(VU,i7r),e(N7,d7r),e(ie,c7r),e(ie,q7),e(q7,E3e),e(E3e,f7r),e(q7,m7r),e(q7,XU),e(XU,g7r),e(q7,h7r),e(ie,p7r),e(ie,j7),e(j7,C3e),e(C3e,_7r),e(j7,u7r),e(j7,zU),e(zU,b7r),e(j7,v7r),e(ie,F7r),e(ie,D7),e(D7,w3e),e(w3e,T7r),e(D7,M7r),e(D7,WU),e(WU,E7r),e(D7,C7r),e(ie,w7r),e(ie,G7),e(G7,A3e),e(A3e,A7r),e(G7,L7r),e(G7,QU),e(QU,y7r),e(G7,x7r),e(ie,$7r),e(ie,O7),e(O7,L3e),e(L3e,k7r),e(O7,S7r),e(O7,HU),e(HU,R7r),e(O7,P7r),e(ie,B7r),e(ie,V7),e(V7,y3e),e(y3e,I7r),e(V7,N7r),e(V7,UU),e(UU,q7r),e(V7,j7r),e(ie,D7r),e(ie,X7),e(X7,x3e),e(x3e,G7r),e(X7,O7r),e(X7,JU),e(JU,V7r),e(X7,X7r),e(ie,z7r),e(ie,z7),e(z7,$3e),e($3e,W7r),e(z7,Q7r),e(z7,YU),e(YU,H7r),e(z7,U7r),e(ie,J7r),e(ie,W7),e(W7,k3e),e(k3e,Y7r),e(W7,K7r),e(W7,KU),e(KU,Z7r),e(W7,eMr),e(ie,oMr),e(ie,Q7),e(Q7,S3e),e(S3e,rMr),e(Q7,tMr),e(Q7,ZU),e(ZU,aMr),e(Q7,nMr),e(ie,sMr),e(ie,H7),e(H7,R3e),e(R3e,lMr),e(H7,iMr),e(H7,eJ),e(eJ,dMr),e(H7,cMr),e(ie,fMr),e(ie,U7),e(U7,P3e),e(P3e,mMr),e(U7,gMr),e(U7,oJ),e(oJ,hMr),e(U7,pMr),e(ie,_Mr),e(ie,J7),e(J7,B3e),e(B3e,uMr),e(J7,bMr),e(J7,rJ),e(rJ,vMr),e(J7,FMr),e(ie,TMr),e(ie,Y7),e(Y7,I3e),e(I3e,MMr),e(Y7,EMr),e(Y7,tJ),e(tJ,CMr),e(Y7,wMr),e(ie,AMr),e(ie,K7),e(K7,N3e),e(N3e,LMr),e(K7,yMr),e(K7,aJ),e(aJ,xMr),e(K7,$Mr),e(kr,kMr),M(Z7,kr,null),b(f,BOe,u),b(f,pc,u),e(pc,eM),e(eM,q3e),M(B9,q3e,null),e(pc,SMr),e(pc,j3e),e(j3e,RMr),b(f,IOe,u),b(f,ar,u),M(I9,ar,null),e(ar,PMr),e(ar,_c),e(_c,BMr),e(_c,nJ),e(nJ,IMr),e(_c,NMr),e(_c,sJ),e(sJ,qMr),e(_c,jMr),e(ar,DMr),e(ar,N9),e(N9,GMr),e(N9,D3e),e(D3e,OMr),e(N9,VMr),e(ar,XMr),e(ar,It),M(q9,It,null),e(It,zMr),e(It,G3e),e(G3e,WMr),e(It,QMr),e(It,uc),e(uc,HMr),e(uc,O3e),e(O3e,UMr),e(uc,JMr),e(uc,lJ),e(lJ,YMr),e(uc,KMr),e(It,ZMr),M(oM,It,null),e(ar,eEr),e(ar,Sr),M(j9,Sr,null),e(Sr,oEr),e(Sr,V3e),e(V3e,rEr),e(Sr,tEr),e(Sr,cn),e(cn,aEr),e(cn,X3e),e(X3e,nEr),e(cn,sEr),e(cn,z3e),e(z3e,lEr),e(cn,iEr),e(cn,W3e),e(W3e,dEr),e(cn,cEr),e(Sr,fEr),e(Sr,ye),e(ye,rM),e(rM,Q3e),e(Q3e,mEr),e(rM,gEr),e(rM,iJ),e(iJ,hEr),e(rM,pEr),e(ye,_Er),e(ye,tM),e(tM,H3e),e(H3e,uEr),e(tM,bEr),e(tM,dJ),e(dJ,vEr),e(tM,FEr),e(ye,TEr),e(ye,aM),e(aM,U3e),e(U3e,MEr),e(aM,EEr),e(aM,cJ),e(cJ,CEr),e(aM,wEr),e(ye,AEr),e(ye,nM),e(nM,J3e),e(J3e,LEr),e(nM,yEr),e(nM,fJ),e(fJ,xEr),e(nM,$Er),e(ye,kEr),e(ye,sM),e(sM,Y3e),e(Y3e,SEr),e(sM,REr),e(sM,mJ),e(mJ,PEr),e(sM,BEr),e(ye,IEr),e(ye,lM),e(lM,K3e),e(K3e,NEr),e(lM,qEr),e(lM,gJ),e(gJ,jEr),e(lM,DEr),e(ye,GEr),e(ye,iM),e(iM,Z3e),e(Z3e,OEr),e(iM,VEr),e(iM,hJ),e(hJ,XEr),e(iM,zEr),e(ye,WEr),e(ye,dM),e(dM,eFe),e(eFe,QEr),e(dM,HEr),e(dM,pJ),e(pJ,UEr),e(dM,JEr),e(ye,YEr),e(ye,cM),e(cM,oFe),e(oFe,KEr),e(cM,ZEr),e(cM,_J),e(_J,eCr),e(cM,oCr),e(ye,rCr),e(ye,fM),e(fM,rFe),e(rFe,tCr),e(fM,aCr),e(fM,uJ),e(uJ,nCr),e(fM,sCr),e(Sr,lCr),M(mM,Sr,null),b(f,NOe,u),b(f,bc,u),e(bc,gM),e(gM,tFe),M(D9,tFe,null),e(bc,iCr),e(bc,aFe),e(aFe,dCr),b(f,qOe,u),b(f,nr,u),M(G9,nr,null),e(nr,cCr),e(nr,vc),e(vc,fCr),e(vc,bJ),e(bJ,mCr),e(vc,gCr),e(vc,vJ),e(vJ,hCr),e(vc,pCr),e(nr,_Cr),e(nr,O9),e(O9,uCr),e(O9,nFe),e(nFe,bCr),e(O9,vCr),e(nr,FCr),e(nr,Nt),M(V9,Nt,null),e(Nt,TCr),e(Nt,sFe),e(sFe,MCr),e(Nt,ECr),e(Nt,Fc),e(Fc,CCr),e(Fc,lFe),e(lFe,wCr),e(Fc,ACr),e(Fc,FJ),e(FJ,LCr),e(Fc,yCr),e(Nt,xCr),M(hM,Nt,null),e(nr,$Cr),e(nr,Rr),M(X9,Rr,null),e(Rr,kCr),e(Rr,iFe),e(iFe,SCr),e(Rr,RCr),e(Rr,fn),e(fn,PCr),e(fn,dFe),e(dFe,BCr),e(fn,ICr),e(fn,cFe),e(cFe,NCr),e(fn,qCr),e(fn,fFe),e(fFe,jCr),e(fn,DCr),e(Rr,GCr),e(Rr,te),e(te,pM),e(pM,mFe),e(mFe,OCr),e(pM,VCr),e(pM,TJ),e(TJ,XCr),e(pM,zCr),e(te,WCr),e(te,_M),e(_M,gFe),e(gFe,QCr),e(_M,HCr),e(_M,MJ),e(MJ,UCr),e(_M,JCr),e(te,YCr),e(te,uM),e(uM,hFe),e(hFe,KCr),e(uM,ZCr),e(uM,EJ),e(EJ,e0r),e(uM,o0r),e(te,r0r),e(te,bM),e(bM,pFe),e(pFe,t0r),e(bM,a0r),e(bM,CJ),e(CJ,n0r),e(bM,s0r),e(te,l0r),e(te,vM),e(vM,_Fe),e(_Fe,i0r),e(vM,d0r),e(vM,wJ),e(wJ,c0r),e(vM,f0r),e(te,m0r),e(te,FM),e(FM,uFe),e(uFe,g0r),e(FM,h0r),e(FM,AJ),e(AJ,p0r),e(FM,_0r),e(te,u0r),e(te,TM),e(TM,bFe),e(bFe,b0r),e(TM,v0r),e(TM,LJ),e(LJ,F0r),e(TM,T0r),e(te,M0r),e(te,MM),e(MM,vFe),e(vFe,E0r),e(MM,C0r),e(MM,yJ),e(yJ,w0r),e(MM,A0r),e(te,L0r),e(te,EM),e(EM,FFe),e(FFe,y0r),e(EM,x0r),e(EM,xJ),e(xJ,$0r),e(EM,k0r),e(te,S0r),e(te,CM),e(CM,TFe),e(TFe,R0r),e(CM,P0r),e(CM,$J),e($J,B0r),e(CM,I0r),e(te,N0r),e(te,wM),e(wM,MFe),e(MFe,q0r),e(wM,j0r),e(wM,kJ),e(kJ,D0r),e(wM,G0r),e(te,O0r),e(te,AM),e(AM,EFe),e(EFe,V0r),e(AM,X0r),e(AM,SJ),e(SJ,z0r),e(AM,W0r),e(te,Q0r),e(te,LM),e(LM,CFe),e(CFe,H0r),e(LM,U0r),e(LM,RJ),e(RJ,J0r),e(LM,Y0r),e(te,K0r),e(te,yM),e(yM,wFe),e(wFe,Z0r),e(yM,ewr),e(yM,PJ),e(PJ,owr),e(yM,rwr),e(te,twr),e(te,xM),e(xM,AFe),e(AFe,awr),e(xM,nwr),e(xM,BJ),e(BJ,swr),e(xM,lwr),e(te,iwr),e(te,$M),e($M,LFe),e(LFe,dwr),e($M,cwr),e($M,IJ),e(IJ,fwr),e($M,mwr),e(te,gwr),e(te,kM),e(kM,yFe),e(yFe,hwr),e(kM,pwr),e(kM,NJ),e(NJ,_wr),e(kM,uwr),e(te,bwr),e(te,SM),e(SM,xFe),e(xFe,vwr),e(SM,Fwr),e(SM,qJ),e(qJ,Twr),e(SM,Mwr),e(te,Ewr),e(te,RM),e(RM,$Fe),e($Fe,Cwr),e(RM,wwr),e(RM,jJ),e(jJ,Awr),e(RM,Lwr),e(te,ywr),e(te,PM),e(PM,kFe),e(kFe,xwr),e(PM,$wr),e(PM,DJ),e(DJ,kwr),e(PM,Swr),e(te,Rwr),e(te,BM),e(BM,SFe),e(SFe,Pwr),e(BM,Bwr),e(BM,GJ),e(GJ,Iwr),e(BM,Nwr),e(te,qwr),e(te,IM),e(IM,RFe),e(RFe,jwr),e(IM,Dwr),e(IM,OJ),e(OJ,Gwr),e(IM,Owr),e(te,Vwr),e(te,NM),e(NM,PFe),e(PFe,Xwr),e(NM,zwr),e(NM,VJ),e(VJ,Wwr),e(NM,Qwr),e(te,Hwr),e(te,qM),e(qM,BFe),e(BFe,Uwr),e(qM,Jwr),e(qM,XJ),e(XJ,Ywr),e(qM,Kwr),e(te,Zwr),e(te,jM),e(jM,IFe),e(IFe,eAr),e(jM,oAr),e(jM,zJ),e(zJ,rAr),e(jM,tAr),e(te,aAr),e(te,DM),e(DM,NFe),e(NFe,nAr),e(DM,sAr),e(DM,WJ),e(WJ,lAr),e(DM,iAr),e(Rr,dAr),M(GM,Rr,null),b(f,jOe,u),b(f,Tc,u),e(Tc,OM),e(OM,qFe),M(z9,qFe,null),e(Tc,cAr),e(Tc,jFe),e(jFe,fAr),b(f,DOe,u),b(f,sr,u),M(W9,sr,null),e(sr,mAr),e(sr,Mc),e(Mc,gAr),e(Mc,QJ),e(QJ,hAr),e(Mc,pAr),e(Mc,HJ),e(HJ,_Ar),e(Mc,uAr),e(sr,bAr),e(sr,Q9),e(Q9,vAr),e(Q9,DFe),e(DFe,FAr),e(Q9,TAr),e(sr,MAr),e(sr,qt),M(H9,qt,null),e(qt,EAr),e(qt,GFe),e(GFe,CAr),e(qt,wAr),e(qt,Ec),e(Ec,AAr),e(Ec,OFe),e(OFe,LAr),e(Ec,yAr),e(Ec,UJ),e(UJ,xAr),e(Ec,$Ar),e(qt,kAr),M(VM,qt,null),e(sr,SAr),e(sr,Pr),M(U9,Pr,null),e(Pr,RAr),e(Pr,VFe),e(VFe,PAr),e(Pr,BAr),e(Pr,mn),e(mn,IAr),e(mn,XFe),e(XFe,NAr),e(mn,qAr),e(mn,zFe),e(zFe,jAr),e(mn,DAr),e(mn,WFe),e(WFe,GAr),e(mn,OAr),e(Pr,VAr),e(Pr,_e),e(_e,XM),e(XM,QFe),e(QFe,XAr),e(XM,zAr),e(XM,JJ),e(JJ,WAr),e(XM,QAr),e(_e,HAr),e(_e,zM),e(zM,HFe),e(HFe,UAr),e(zM,JAr),e(zM,YJ),e(YJ,YAr),e(zM,KAr),e(_e,ZAr),e(_e,WM),e(WM,UFe),e(UFe,e6r),e(WM,o6r),e(WM,KJ),e(KJ,r6r),e(WM,t6r),e(_e,a6r),e(_e,QM),e(QM,JFe),e(JFe,n6r),e(QM,s6r),e(QM,ZJ),e(ZJ,l6r),e(QM,i6r),e(_e,d6r),e(_e,HM),e(HM,YFe),e(YFe,c6r),e(HM,f6r),e(HM,eY),e(eY,m6r),e(HM,g6r),e(_e,h6r),e(_e,UM),e(UM,KFe),e(KFe,p6r),e(UM,_6r),e(UM,oY),e(oY,u6r),e(UM,b6r),e(_e,v6r),e(_e,JM),e(JM,ZFe),e(ZFe,F6r),e(JM,T6r),e(JM,rY),e(rY,M6r),e(JM,E6r),e(_e,C6r),e(_e,YM),e(YM,eTe),e(eTe,w6r),e(YM,A6r),e(YM,tY),e(tY,L6r),e(YM,y6r),e(_e,x6r),e(_e,KM),e(KM,oTe),e(oTe,$6r),e(KM,k6r),e(KM,aY),e(aY,S6r),e(KM,R6r),e(_e,P6r),e(_e,ZM),e(ZM,rTe),e(rTe,B6r),e(ZM,I6r),e(ZM,nY),e(nY,N6r),e(ZM,q6r),e(_e,j6r),e(_e,eE),e(eE,tTe),e(tTe,D6r),e(eE,G6r),e(eE,sY),e(sY,O6r),e(eE,V6r),e(_e,X6r),e(_e,oE),e(oE,aTe),e(aTe,z6r),e(oE,W6r),e(oE,lY),e(lY,Q6r),e(oE,H6r),e(_e,U6r),e(_e,rE),e(rE,nTe),e(nTe,J6r),e(rE,Y6r),e(rE,iY),e(iY,K6r),e(rE,Z6r),e(_e,eLr),e(_e,tE),e(tE,sTe),e(sTe,oLr),e(tE,rLr),e(tE,dY),e(dY,tLr),e(tE,aLr),e(_e,nLr),e(_e,aE),e(aE,lTe),e(lTe,sLr),e(aE,lLr),e(aE,cY),e(cY,iLr),e(aE,dLr),e(_e,cLr),e(_e,nE),e(nE,iTe),e(iTe,fLr),e(nE,mLr),e(nE,fY),e(fY,gLr),e(nE,hLr),e(_e,pLr),e(_e,sE),e(sE,dTe),e(dTe,_Lr),e(sE,uLr),e(sE,mY),e(mY,bLr),e(sE,vLr),e(Pr,FLr),M(lE,Pr,null),b(f,GOe,u),b(f,Cc,u),e(Cc,iE),e(iE,cTe),M(J9,cTe,null),e(Cc,TLr),e(Cc,fTe),e(fTe,MLr),b(f,OOe,u),b(f,lr,u),M(Y9,lr,null),e(lr,ELr),e(lr,wc),e(wc,CLr),e(wc,gY),e(gY,wLr),e(wc,ALr),e(wc,hY),e(hY,LLr),e(wc,yLr),e(lr,xLr),e(lr,K9),e(K9,$Lr),e(K9,mTe),e(mTe,kLr),e(K9,SLr),e(lr,RLr),e(lr,jt),M(Z9,jt,null),e(jt,PLr),e(jt,gTe),e(gTe,BLr),e(jt,ILr),e(jt,Ac),e(Ac,NLr),e(Ac,hTe),e(hTe,qLr),e(Ac,jLr),e(Ac,pY),e(pY,DLr),e(Ac,GLr),e(jt,OLr),M(dE,jt,null),e(lr,VLr),e(lr,Br),M(ex,Br,null),e(Br,XLr),e(Br,pTe),e(pTe,zLr),e(Br,WLr),e(Br,gn),e(gn,QLr),e(gn,_Te),e(_Te,HLr),e(gn,ULr),e(gn,uTe),e(uTe,JLr),e(gn,YLr),e(gn,bTe),e(bTe,KLr),e(gn,ZLr),e(Br,eyr),e(Br,ox),e(ox,cE),e(cE,vTe),e(vTe,oyr),e(cE,ryr),e(cE,_Y),e(_Y,tyr),e(cE,ayr),e(ox,nyr),e(ox,fE),e(fE,FTe),e(FTe,syr),e(fE,lyr),e(fE,uY),e(uY,iyr),e(fE,dyr),e(Br,cyr),M(mE,Br,null),b(f,VOe,u),b(f,Lc,u),e(Lc,gE),e(gE,TTe),M(rx,TTe,null),e(Lc,fyr),e(Lc,MTe),e(MTe,myr),b(f,XOe,u),b(f,ir,u),M(tx,ir,null),e(ir,gyr),e(ir,yc),e(yc,hyr),e(yc,bY),e(bY,pyr),e(yc,_yr),e(yc,vY),e(vY,uyr),e(yc,byr),e(ir,vyr),e(ir,ax),e(ax,Fyr),e(ax,ETe),e(ETe,Tyr),e(ax,Myr),e(ir,Eyr),e(ir,Dt),M(nx,Dt,null),e(Dt,Cyr),e(Dt,CTe),e(CTe,wyr),e(Dt,Ayr),e(Dt,xc),e(xc,Lyr),e(xc,wTe),e(wTe,yyr),e(xc,xyr),e(xc,FY),e(FY,$yr),e(xc,kyr),e(Dt,Syr),M(hE,Dt,null),e(ir,Ryr),e(ir,Ir),M(sx,Ir,null),e(Ir,Pyr),e(Ir,ATe),e(ATe,Byr),e(Ir,Iyr),e(Ir,hn),e(hn,Nyr),e(hn,LTe),e(LTe,qyr),e(hn,jyr),e(hn,yTe),e(yTe,Dyr),e(hn,Gyr),e(hn,xTe),e(xTe,Oyr),e(hn,Vyr),e(Ir,Xyr),e(Ir,$Te),e($Te,pE),e(pE,kTe),e(kTe,zyr),e(pE,Wyr),e(pE,TY),e(TY,Qyr),e(pE,Hyr),e(Ir,Uyr),M(_E,Ir,null),b(f,zOe,u),b(f,$c,u),e($c,uE),e(uE,STe),M(lx,STe,null),e($c,Jyr),e($c,RTe),e(RTe,Yyr),b(f,WOe,u),b(f,dr,u),M(ix,dr,null),e(dr,Kyr),e(dr,kc),e(kc,Zyr),e(kc,MY),e(MY,e8r),e(kc,o8r),e(kc,EY),e(EY,r8r),e(kc,t8r),e(dr,a8r),e(dr,dx),e(dx,n8r),e(dx,PTe),e(PTe,s8r),e(dx,l8r),e(dr,i8r),e(dr,Gt),M(cx,Gt,null),e(Gt,d8r),e(Gt,BTe),e(BTe,c8r),e(Gt,f8r),e(Gt,Sc),e(Sc,m8r),e(Sc,ITe),e(ITe,g8r),e(Sc,h8r),e(Sc,CY),e(CY,p8r),e(Sc,_8r),e(Gt,u8r),M(bE,Gt,null),e(dr,b8r),e(dr,Nr),M(fx,Nr,null),e(Nr,v8r),e(Nr,NTe),e(NTe,F8r),e(Nr,T8r),e(Nr,pn),e(pn,M8r),e(pn,qTe),e(qTe,E8r),e(pn,C8r),e(pn,jTe),e(jTe,w8r),e(pn,A8r),e(pn,DTe),e(DTe,L8r),e(pn,y8r),e(Nr,x8r),e(Nr,de),e(de,vE),e(vE,GTe),e(GTe,$8r),e(vE,k8r),e(vE,wY),e(wY,S8r),e(vE,R8r),e(de,P8r),e(de,FE),e(FE,OTe),e(OTe,B8r),e(FE,I8r),e(FE,AY),e(AY,N8r),e(FE,q8r),e(de,j8r),e(de,TE),e(TE,VTe),e(VTe,D8r),e(TE,G8r),e(TE,LY),e(LY,O8r),e(TE,V8r),e(de,X8r),e(de,ME),e(ME,XTe),e(XTe,z8r),e(ME,W8r),e(ME,yY),e(yY,Q8r),e(ME,H8r),e(de,U8r),e(de,EE),e(EE,zTe),e(zTe,J8r),e(EE,Y8r),e(EE,xY),e(xY,K8r),e(EE,Z8r),e(de,e9r),e(de,CE),e(CE,WTe),e(WTe,o9r),e(CE,r9r),e(CE,$Y),e($Y,t9r),e(CE,a9r),e(de,n9r),e(de,wE),e(wE,QTe),e(QTe,s9r),e(wE,l9r),e(wE,kY),e(kY,i9r),e(wE,d9r),e(de,c9r),e(de,AE),e(AE,HTe),e(HTe,f9r),e(AE,m9r),e(AE,SY),e(SY,g9r),e(AE,h9r),e(de,p9r),e(de,LE),e(LE,UTe),e(UTe,_9r),e(LE,u9r),e(LE,RY),e(RY,b9r),e(LE,v9r),e(de,F9r),e(de,yE),e(yE,JTe),e(JTe,T9r),e(yE,M9r),e(yE,PY),e(PY,E9r),e(yE,C9r),e(de,w9r),e(de,xE),e(xE,YTe),e(YTe,A9r),e(xE,L9r),e(xE,BY),e(BY,y9r),e(xE,x9r),e(de,$9r),e(de,$E),e($E,KTe),e(KTe,k9r),e($E,S9r),e($E,IY),e(IY,R9r),e($E,P9r),e(de,B9r),e(de,kE),e(kE,ZTe),e(ZTe,I9r),e(kE,N9r),e(kE,NY),e(NY,q9r),e(kE,j9r),e(de,D9r),e(de,SE),e(SE,e7e),e(e7e,G9r),e(SE,O9r),e(SE,qY),e(qY,V9r),e(SE,X9r),e(de,z9r),e(de,RE),e(RE,o7e),e(o7e,W9r),e(RE,Q9r),e(RE,jY),e(jY,H9r),e(RE,U9r),e(de,J9r),e(de,PE),e(PE,r7e),e(r7e,Y9r),e(PE,K9r),e(PE,DY),e(DY,Z9r),e(PE,exr),e(de,oxr),e(de,BE),e(BE,t7e),e(t7e,rxr),e(BE,txr),e(BE,GY),e(GY,axr),e(BE,nxr),e(de,sxr),e(de,IE),e(IE,a7e),e(a7e,lxr),e(IE,ixr),e(IE,OY),e(OY,dxr),e(IE,cxr),e(de,fxr),e(de,NE),e(NE,n7e),e(n7e,mxr),e(NE,gxr),e(NE,VY),e(VY,hxr),e(NE,pxr),e(de,_xr),e(de,qE),e(qE,s7e),e(s7e,uxr),e(qE,bxr),e(qE,XY),e(XY,vxr),e(qE,Fxr),e(Nr,Txr),M(jE,Nr,null),b(f,QOe,u),b(f,Rc,u),e(Rc,DE),e(DE,l7e),M(mx,l7e,null),e(Rc,Mxr),e(Rc,i7e),e(i7e,Exr),b(f,HOe,u),b(f,cr,u),M(gx,cr,null),e(cr,Cxr),e(cr,Pc),e(Pc,wxr),e(Pc,zY),e(zY,Axr),e(Pc,Lxr),e(Pc,WY),e(WY,yxr),e(Pc,xxr),e(cr,$xr),e(cr,hx),e(hx,kxr),e(hx,d7e),e(d7e,Sxr),e(hx,Rxr),e(cr,Pxr),e(cr,Ot),M(px,Ot,null),e(Ot,Bxr),e(Ot,c7e),e(c7e,Ixr),e(Ot,Nxr),e(Ot,Bc),e(Bc,qxr),e(Bc,f7e),e(f7e,jxr),e(Bc,Dxr),e(Bc,QY),e(QY,Gxr),e(Bc,Oxr),e(Ot,Vxr),M(GE,Ot,null),e(cr,Xxr),e(cr,qr),M(_x,qr,null),e(qr,zxr),e(qr,m7e),e(m7e,Wxr),e(qr,Qxr),e(qr,_n),e(_n,Hxr),e(_n,g7e),e(g7e,Uxr),e(_n,Jxr),e(_n,h7e),e(h7e,Yxr),e(_n,Kxr),e(_n,p7e),e(p7e,Zxr),e(_n,e$r),e(qr,o$r),e(qr,ce),e(ce,OE),e(OE,_7e),e(_7e,r$r),e(OE,t$r),e(OE,HY),e(HY,a$r),e(OE,n$r),e(ce,s$r),e(ce,VE),e(VE,u7e),e(u7e,l$r),e(VE,i$r),e(VE,UY),e(UY,d$r),e(VE,c$r),e(ce,f$r),e(ce,XE),e(XE,b7e),e(b7e,m$r),e(XE,g$r),e(XE,JY),e(JY,h$r),e(XE,p$r),e(ce,_$r),e(ce,zE),e(zE,v7e),e(v7e,u$r),e(zE,b$r),e(zE,YY),e(YY,v$r),e(zE,F$r),e(ce,T$r),e(ce,WE),e(WE,F7e),e(F7e,M$r),e(WE,E$r),e(WE,KY),e(KY,C$r),e(WE,w$r),e(ce,A$r),e(ce,QE),e(QE,T7e),e(T7e,L$r),e(QE,y$r),e(QE,ZY),e(ZY,x$r),e(QE,$$r),e(ce,k$r),e(ce,HE),e(HE,M7e),e(M7e,S$r),e(HE,R$r),e(HE,eK),e(eK,P$r),e(HE,B$r),e(ce,I$r),e(ce,UE),e(UE,E7e),e(E7e,N$r),e(UE,q$r),e(UE,oK),e(oK,j$r),e(UE,D$r),e(ce,G$r),e(ce,JE),e(JE,C7e),e(C7e,O$r),e(JE,V$r),e(JE,rK),e(rK,X$r),e(JE,z$r),e(ce,W$r),e(ce,YE),e(YE,w7e),e(w7e,Q$r),e(YE,H$r),e(YE,tK),e(tK,U$r),e(YE,J$r),e(ce,Y$r),e(ce,KE),e(KE,A7e),e(A7e,K$r),e(KE,Z$r),e(KE,aK),e(aK,ekr),e(KE,okr),e(ce,rkr),e(ce,ZE),e(ZE,L7e),e(L7e,tkr),e(ZE,akr),e(ZE,nK),e(nK,nkr),e(ZE,skr),e(ce,lkr),e(ce,eC),e(eC,y7e),e(y7e,ikr),e(eC,dkr),e(eC,sK),e(sK,ckr),e(eC,fkr),e(ce,mkr),e(ce,oC),e(oC,x7e),e(x7e,gkr),e(oC,hkr),e(oC,lK),e(lK,pkr),e(oC,_kr),e(ce,ukr),e(ce,rC),e(rC,$7e),e($7e,bkr),e(rC,vkr),e(rC,iK),e(iK,Fkr),e(rC,Tkr),e(ce,Mkr),e(ce,tC),e(tC,k7e),e(k7e,Ekr),e(tC,Ckr),e(tC,dK),e(dK,wkr),e(tC,Akr),e(ce,Lkr),e(ce,aC),e(aC,S7e),e(S7e,ykr),e(aC,xkr),e(aC,cK),e(cK,$kr),e(aC,kkr),e(ce,Skr),e(ce,nC),e(nC,R7e),e(R7e,Rkr),e(nC,Pkr),e(nC,fK),e(fK,Bkr),e(nC,Ikr),e(ce,Nkr),e(ce,sC),e(sC,P7e),e(P7e,qkr),e(sC,jkr),e(sC,mK),e(mK,Dkr),e(sC,Gkr),e(ce,Okr),e(ce,lC),e(lC,B7e),e(B7e,Vkr),e(lC,Xkr),e(lC,gK),e(gK,zkr),e(lC,Wkr),e(qr,Qkr),M(iC,qr,null),b(f,UOe,u),b(f,Ic,u),e(Ic,dC),e(dC,I7e),M(ux,I7e,null),e(Ic,Hkr),e(Ic,N7e),e(N7e,Ukr),b(f,JOe,u),b(f,fr,u),M(bx,fr,null),e(fr,Jkr),e(fr,Nc),e(Nc,Ykr),e(Nc,hK),e(hK,Kkr),e(Nc,Zkr),e(Nc,pK),e(pK,eSr),e(Nc,oSr),e(fr,rSr),e(fr,vx),e(vx,tSr),e(vx,q7e),e(q7e,aSr),e(vx,nSr),e(fr,sSr),e(fr,Vt),M(Fx,Vt,null),e(Vt,lSr),e(Vt,j7e),e(j7e,iSr),e(Vt,dSr),e(Vt,qc),e(qc,cSr),e(qc,D7e),e(D7e,fSr),e(qc,mSr),e(qc,_K),e(_K,gSr),e(qc,hSr),e(Vt,pSr),M(cC,Vt,null),e(fr,_Sr),e(fr,jr),M(Tx,jr,null),e(jr,uSr),e(jr,G7e),e(G7e,bSr),e(jr,vSr),e(jr,un),e(un,FSr),e(un,O7e),e(O7e,TSr),e(un,MSr),e(un,V7e),e(V7e,ESr),e(un,CSr),e(un,X7e),e(X7e,wSr),e(un,ASr),e(jr,LSr),e(jr,z7e),e(z7e,fC),e(fC,W7e),e(W7e,ySr),e(fC,xSr),e(fC,uK),e(uK,$Sr),e(fC,kSr),e(jr,SSr),M(mC,jr,null),b(f,YOe,u),b(f,jc,u),e(jc,gC),e(gC,Q7e),M(Mx,Q7e,null),e(jc,RSr),e(jc,H7e),e(H7e,PSr),b(f,KOe,u),b(f,mr,u),M(Ex,mr,null),e(mr,BSr),e(mr,Dc),e(Dc,ISr),e(Dc,bK),e(bK,NSr),e(Dc,qSr),e(Dc,vK),e(vK,jSr),e(Dc,DSr),e(mr,GSr),e(mr,Cx),e(Cx,OSr),e(Cx,U7e),e(U7e,VSr),e(Cx,XSr),e(mr,zSr),e(mr,Xt),M(wx,Xt,null),e(Xt,WSr),e(Xt,J7e),e(J7e,QSr),e(Xt,HSr),e(Xt,Gc),e(Gc,USr),e(Gc,Y7e),e(Y7e,JSr),e(Gc,YSr),e(Gc,FK),e(FK,KSr),e(Gc,ZSr),e(Xt,eRr),M(hC,Xt,null),e(mr,oRr),e(mr,Dr),M(Ax,Dr,null),e(Dr,rRr),e(Dr,K7e),e(K7e,tRr),e(Dr,aRr),e(Dr,bn),e(bn,nRr),e(bn,Z7e),e(Z7e,sRr),e(bn,lRr),e(bn,eMe),e(eMe,iRr),e(bn,dRr),e(bn,oMe),e(oMe,cRr),e(bn,fRr),e(Dr,mRr),e(Dr,rMe),e(rMe,pC),e(pC,tMe),e(tMe,gRr),e(pC,hRr),e(pC,TK),e(TK,pRr),e(pC,_Rr),e(Dr,uRr),M(_C,Dr,null),b(f,ZOe,u),b(f,Oc,u),e(Oc,uC),e(uC,aMe),M(Lx,aMe,null),e(Oc,bRr),e(Oc,nMe),e(nMe,vRr),b(f,eVe,u),b(f,gr,u),M(yx,gr,null),e(gr,FRr),e(gr,Vc),e(Vc,TRr),e(Vc,MK),e(MK,MRr),e(Vc,ERr),e(Vc,EK),e(EK,CRr),e(Vc,wRr),e(gr,ARr),e(gr,xx),e(xx,LRr),e(xx,sMe),e(sMe,yRr),e(xx,xRr),e(gr,$Rr),e(gr,zt),M($x,zt,null),e(zt,kRr),e(zt,lMe),e(lMe,SRr),e(zt,RRr),e(zt,Xc),e(Xc,PRr),e(Xc,iMe),e(iMe,BRr),e(Xc,IRr),e(Xc,CK),e(CK,NRr),e(Xc,qRr),e(zt,jRr),M(bC,zt,null),e(gr,DRr),e(gr,Gr),M(kx,Gr,null),e(Gr,GRr),e(Gr,dMe),e(dMe,ORr),e(Gr,VRr),e(Gr,vn),e(vn,XRr),e(vn,cMe),e(cMe,zRr),e(vn,WRr),e(vn,fMe),e(fMe,QRr),e(vn,HRr),e(vn,mMe),e(mMe,URr),e(vn,JRr),e(Gr,YRr),e(Gr,oe),e(oe,vC),e(vC,gMe),e(gMe,KRr),e(vC,ZRr),e(vC,wK),e(wK,ePr),e(vC,oPr),e(oe,rPr),e(oe,FC),e(FC,hMe),e(hMe,tPr),e(FC,aPr),e(FC,AK),e(AK,nPr),e(FC,sPr),e(oe,lPr),e(oe,TC),e(TC,pMe),e(pMe,iPr),e(TC,dPr),e(TC,LK),e(LK,cPr),e(TC,fPr),e(oe,mPr),e(oe,MC),e(MC,_Me),e(_Me,gPr),e(MC,hPr),e(MC,yK),e(yK,pPr),e(MC,_Pr),e(oe,uPr),e(oe,EC),e(EC,uMe),e(uMe,bPr),e(EC,vPr),e(EC,xK),e(xK,FPr),e(EC,TPr),e(oe,MPr),e(oe,CC),e(CC,bMe),e(bMe,EPr),e(CC,CPr),e(CC,$K),e($K,wPr),e(CC,APr),e(oe,LPr),e(oe,wC),e(wC,vMe),e(vMe,yPr),e(wC,xPr),e(wC,kK),e(kK,$Pr),e(wC,kPr),e(oe,SPr),e(oe,AC),e(AC,FMe),e(FMe,RPr),e(AC,PPr),e(AC,SK),e(SK,BPr),e(AC,IPr),e(oe,NPr),e(oe,LC),e(LC,TMe),e(TMe,qPr),e(LC,jPr),e(LC,RK),e(RK,DPr),e(LC,GPr),e(oe,OPr),e(oe,yC),e(yC,MMe),e(MMe,VPr),e(yC,XPr),e(yC,PK),e(PK,zPr),e(yC,WPr),e(oe,QPr),e(oe,xC),e(xC,EMe),e(EMe,HPr),e(xC,UPr),e(xC,BK),e(BK,JPr),e(xC,YPr),e(oe,KPr),e(oe,$C),e($C,CMe),e(CMe,ZPr),e($C,eBr),e($C,IK),e(IK,oBr),e($C,rBr),e(oe,tBr),e(oe,kC),e(kC,wMe),e(wMe,aBr),e(kC,nBr),e(kC,NK),e(NK,sBr),e(kC,lBr),e(oe,iBr),e(oe,SC),e(SC,AMe),e(AMe,dBr),e(SC,cBr),e(SC,qK),e(qK,fBr),e(SC,mBr),e(oe,gBr),e(oe,RC),e(RC,LMe),e(LMe,hBr),e(RC,pBr),e(RC,jK),e(jK,_Br),e(RC,uBr),e(oe,bBr),e(oe,PC),e(PC,yMe),e(yMe,vBr),e(PC,FBr),e(PC,DK),e(DK,TBr),e(PC,MBr),e(oe,EBr),e(oe,BC),e(BC,xMe),e(xMe,CBr),e(BC,wBr),e(BC,GK),e(GK,ABr),e(BC,LBr),e(oe,yBr),e(oe,IC),e(IC,$Me),e($Me,xBr),e(IC,$Br),e(IC,OK),e(OK,kBr),e(IC,SBr),e(oe,RBr),e(oe,NC),e(NC,kMe),e(kMe,PBr),e(NC,BBr),e(NC,VK),e(VK,IBr),e(NC,NBr),e(oe,qBr),e(oe,qC),e(qC,SMe),e(SMe,jBr),e(qC,DBr),e(qC,XK),e(XK,GBr),e(qC,OBr),e(oe,VBr),e(oe,jC),e(jC,RMe),e(RMe,XBr),e(jC,zBr),e(jC,zK),e(zK,WBr),e(jC,QBr),e(oe,HBr),e(oe,DC),e(DC,PMe),e(PMe,UBr),e(DC,JBr),e(DC,WK),e(WK,YBr),e(DC,KBr),e(oe,ZBr),e(oe,GC),e(GC,BMe),e(BMe,eIr),e(GC,oIr),e(GC,QK),e(QK,rIr),e(GC,tIr),e(oe,aIr),e(oe,OC),e(OC,IMe),e(IMe,nIr),e(OC,sIr),e(OC,HK),e(HK,lIr),e(OC,iIr),e(oe,dIr),e(oe,VC),e(VC,NMe),e(NMe,cIr),e(VC,fIr),e(VC,UK),e(UK,mIr),e(VC,gIr),e(oe,hIr),e(oe,XC),e(XC,qMe),e(qMe,pIr),e(XC,_Ir),e(XC,JK),e(JK,uIr),e(XC,bIr),e(oe,vIr),e(oe,zC),e(zC,jMe),e(jMe,FIr),e(zC,TIr),e(zC,YK),e(YK,MIr),e(zC,EIr),e(Gr,CIr),M(WC,Gr,null),b(f,oVe,u),b(f,zc,u),e(zc,QC),e(QC,DMe),M(Sx,DMe,null),e(zc,wIr),e(zc,GMe),e(GMe,AIr),b(f,rVe,u),b(f,hr,u),M(Rx,hr,null),e(hr,LIr),e(hr,Wc),e(Wc,yIr),e(Wc,KK),e(KK,xIr),e(Wc,$Ir),e(Wc,ZK),e(ZK,kIr),e(Wc,SIr),e(hr,RIr),e(hr,Px),e(Px,PIr),e(Px,OMe),e(OMe,BIr),e(Px,IIr),e(hr,NIr),e(hr,Wt),M(Bx,Wt,null),e(Wt,qIr),e(Wt,VMe),e(VMe,jIr),e(Wt,DIr),e(Wt,Qc),e(Qc,GIr),e(Qc,XMe),e(XMe,OIr),e(Qc,VIr),e(Qc,eZ),e(eZ,XIr),e(Qc,zIr),e(Wt,WIr),M(HC,Wt,null),e(hr,QIr),e(hr,Or),M(Ix,Or,null),e(Or,HIr),e(Or,zMe),e(zMe,UIr),e(Or,JIr),e(Or,Fn),e(Fn,YIr),e(Fn,WMe),e(WMe,KIr),e(Fn,ZIr),e(Fn,QMe),e(QMe,eNr),e(Fn,oNr),e(Fn,HMe),e(HMe,rNr),e(Fn,tNr),e(Or,aNr),e(Or,xe),e(xe,UC),e(UC,UMe),e(UMe,nNr),e(UC,sNr),e(UC,oZ),e(oZ,lNr),e(UC,iNr),e(xe,dNr),e(xe,JC),e(JC,JMe),e(JMe,cNr),e(JC,fNr),e(JC,rZ),e(rZ,mNr),e(JC,gNr),e(xe,hNr),e(xe,YC),e(YC,YMe),e(YMe,pNr),e(YC,_Nr),e(YC,tZ),e(tZ,uNr),e(YC,bNr),e(xe,vNr),e(xe,KC),e(KC,KMe),e(KMe,FNr),e(KC,TNr),e(KC,aZ),e(aZ,MNr),e(KC,ENr),e(xe,CNr),e(xe,ZC),e(ZC,ZMe),e(ZMe,wNr),e(ZC,ANr),e(ZC,nZ),e(nZ,LNr),e(ZC,yNr),e(xe,xNr),e(xe,e0),e(e0,eEe),e(eEe,$Nr),e(e0,kNr),e(e0,sZ),e(sZ,SNr),e(e0,RNr),e(xe,PNr),e(xe,o0),e(o0,oEe),e(oEe,BNr),e(o0,INr),e(o0,lZ),e(lZ,NNr),e(o0,qNr),e(xe,jNr),e(xe,r0),e(r0,rEe),e(rEe,DNr),e(r0,GNr),e(r0,iZ),e(iZ,ONr),e(r0,VNr),e(xe,XNr),e(xe,t0),e(t0,tEe),e(tEe,zNr),e(t0,WNr),e(t0,dZ),e(dZ,QNr),e(t0,HNr),e(xe,UNr),e(xe,a0),e(a0,aEe),e(aEe,JNr),e(a0,YNr),e(a0,cZ),e(cZ,KNr),e(a0,ZNr),e(Or,eqr),M(n0,Or,null),b(f,tVe,u),b(f,Hc,u),e(Hc,s0),e(s0,nEe),M(Nx,nEe,null),e(Hc,oqr),e(Hc,sEe),e(sEe,rqr),b(f,aVe,u),b(f,pr,u),M(qx,pr,null),e(pr,tqr),e(pr,Uc),e(Uc,aqr),e(Uc,fZ),e(fZ,nqr),e(Uc,sqr),e(Uc,mZ),e(mZ,lqr),e(Uc,iqr),e(pr,dqr),e(pr,jx),e(jx,cqr),e(jx,lEe),e(lEe,fqr),e(jx,mqr),e(pr,gqr),e(pr,Qt),M(Dx,Qt,null),e(Qt,hqr),e(Qt,iEe),e(iEe,pqr),e(Qt,_qr),e(Qt,Jc),e(Jc,uqr),e(Jc,dEe),e(dEe,bqr),e(Jc,vqr),e(Jc,gZ),e(gZ,Fqr),e(Jc,Tqr),e(Qt,Mqr),M(l0,Qt,null),e(pr,Eqr),e(pr,Vr),M(Gx,Vr,null),e(Vr,Cqr),e(Vr,cEe),e(cEe,wqr),e(Vr,Aqr),e(Vr,Tn),e(Tn,Lqr),e(Tn,fEe),e(fEe,yqr),e(Tn,xqr),e(Tn,mEe),e(mEe,$qr),e(Tn,kqr),e(Tn,gEe),e(gEe,Sqr),e(Tn,Rqr),e(Vr,Pqr),e(Vr,Ee),e(Ee,i0),e(i0,hEe),e(hEe,Bqr),e(i0,Iqr),e(i0,hZ),e(hZ,Nqr),e(i0,qqr),e(Ee,jqr),e(Ee,d0),e(d0,pEe),e(pEe,Dqr),e(d0,Gqr),e(d0,pZ),e(pZ,Oqr),e(d0,Vqr),e(Ee,Xqr),e(Ee,c0),e(c0,_Ee),e(_Ee,zqr),e(c0,Wqr),e(c0,_Z),e(_Z,Qqr),e(c0,Hqr),e(Ee,Uqr),e(Ee,f0),e(f0,uEe),e(uEe,Jqr),e(f0,Yqr),e(f0,uZ),e(uZ,Kqr),e(f0,Zqr),e(Ee,ejr),e(Ee,m0),e(m0,bEe),e(bEe,ojr),e(m0,rjr),e(m0,bZ),e(bZ,tjr),e(m0,ajr),e(Ee,njr),e(Ee,g0),e(g0,vEe),e(vEe,sjr),e(g0,ljr),e(g0,vZ),e(vZ,ijr),e(g0,djr),e(Ee,cjr),e(Ee,h0),e(h0,FEe),e(FEe,fjr),e(h0,mjr),e(h0,FZ),e(FZ,gjr),e(h0,hjr),e(Ee,pjr),e(Ee,p0),e(p0,TEe),e(TEe,_jr),e(p0,ujr),e(p0,TZ),e(TZ,bjr),e(p0,vjr),e(Ee,Fjr),e(Ee,_0),e(_0,MEe),e(MEe,Tjr),e(_0,Mjr),e(_0,MZ),e(MZ,Ejr),e(_0,Cjr),e(Ee,wjr),e(Ee,u0),e(u0,EEe),e(EEe,Ajr),e(u0,Ljr),e(u0,EZ),e(EZ,yjr),e(u0,xjr),e(Ee,$jr),e(Ee,b0),e(b0,CEe),e(CEe,kjr),e(b0,Sjr),e(b0,CZ),e(CZ,Rjr),e(b0,Pjr),e(Ee,Bjr),e(Ee,v0),e(v0,wEe),e(wEe,Ijr),e(v0,Njr),e(v0,wZ),e(wZ,qjr),e(v0,jjr),e(Ee,Djr),e(Ee,F0),e(F0,AEe),e(AEe,Gjr),e(F0,Ojr),e(F0,AZ),e(AZ,Vjr),e(F0,Xjr),e(Vr,zjr),M(T0,Vr,null),b(f,nVe,u),b(f,Yc,u),e(Yc,M0),e(M0,LEe),M(Ox,LEe,null),e(Yc,Wjr),e(Yc,yEe),e(yEe,Qjr),b(f,sVe,u),b(f,_r,u),M(Vx,_r,null),e(_r,Hjr),e(_r,Kc),e(Kc,Ujr),e(Kc,LZ),e(LZ,Jjr),e(Kc,Yjr),e(Kc,yZ),e(yZ,Kjr),e(Kc,Zjr),e(_r,eDr),e(_r,Xx),e(Xx,oDr),e(Xx,xEe),e(xEe,rDr),e(Xx,tDr),e(_r,aDr),e(_r,Ht),M(zx,Ht,null),e(Ht,nDr),e(Ht,$Ee),e($Ee,sDr),e(Ht,lDr),e(Ht,Zc),e(Zc,iDr),e(Zc,kEe),e(kEe,dDr),e(Zc,cDr),e(Zc,xZ),e(xZ,fDr),e(Zc,mDr),e(Ht,gDr),M(E0,Ht,null),e(_r,hDr),e(_r,Xr),M(Wx,Xr,null),e(Xr,pDr),e(Xr,SEe),e(SEe,_Dr),e(Xr,uDr),e(Xr,Mn),e(Mn,bDr),e(Mn,REe),e(REe,vDr),e(Mn,FDr),e(Mn,PEe),e(PEe,TDr),e(Mn,MDr),e(Mn,BEe),e(BEe,EDr),e(Mn,CDr),e(Xr,wDr),e(Xr,$e),e($e,C0),e(C0,IEe),e(IEe,ADr),e(C0,LDr),e(C0,$Z),e($Z,yDr),e(C0,xDr),e($e,$Dr),e($e,w0),e(w0,NEe),e(NEe,kDr),e(w0,SDr),e(w0,kZ),e(kZ,RDr),e(w0,PDr),e($e,BDr),e($e,A0),e(A0,qEe),e(qEe,IDr),e(A0,NDr),e(A0,SZ),e(SZ,qDr),e(A0,jDr),e($e,DDr),e($e,L0),e(L0,jEe),e(jEe,GDr),e(L0,ODr),e(L0,RZ),e(RZ,VDr),e(L0,XDr),e($e,zDr),e($e,y0),e(y0,DEe),e(DEe,WDr),e(y0,QDr),e(y0,PZ),e(PZ,HDr),e(y0,UDr),e($e,JDr),e($e,x0),e(x0,GEe),e(GEe,YDr),e(x0,KDr),e(x0,BZ),e(BZ,ZDr),e(x0,eGr),e($e,oGr),e($e,$0),e($0,OEe),e(OEe,rGr),e($0,tGr),e($0,IZ),e(IZ,aGr),e($0,nGr),e($e,sGr),e($e,k0),e(k0,VEe),e(VEe,lGr),e(k0,iGr),e(k0,NZ),e(NZ,dGr),e(k0,cGr),e($e,fGr),e($e,S0),e(S0,XEe),e(XEe,mGr),e(S0,gGr),e(S0,qZ),e(qZ,hGr),e(S0,pGr),e($e,_Gr),e($e,R0),e(R0,zEe),e(zEe,uGr),e(R0,bGr),e(R0,jZ),e(jZ,vGr),e(R0,FGr),e(Xr,TGr),M(P0,Xr,null),b(f,lVe,u),b(f,ef,u),e(ef,B0),e(B0,WEe),M(Qx,WEe,null),e(ef,MGr),e(ef,QEe),e(QEe,EGr),b(f,iVe,u),b(f,ur,u),M(Hx,ur,null),e(ur,CGr),e(ur,of),e(of,wGr),e(of,DZ),e(DZ,AGr),e(of,LGr),e(of,GZ),e(GZ,yGr),e(of,xGr),e(ur,$Gr),e(ur,Ux),e(Ux,kGr),e(Ux,HEe),e(HEe,SGr),e(Ux,RGr),e(ur,PGr),e(ur,Ut),M(Jx,Ut,null),e(Ut,BGr),e(Ut,UEe),e(UEe,IGr),e(Ut,NGr),e(Ut,rf),e(rf,qGr),e(rf,JEe),e(JEe,jGr),e(rf,DGr),e(rf,OZ),e(OZ,GGr),e(rf,OGr),e(Ut,VGr),M(I0,Ut,null),e(ur,XGr),e(ur,zr),M(Yx,zr,null),e(zr,zGr),e(zr,YEe),e(YEe,WGr),e(zr,QGr),e(zr,En),e(En,HGr),e(En,KEe),e(KEe,UGr),e(En,JGr),e(En,ZEe),e(ZEe,YGr),e(En,KGr),e(En,eCe),e(eCe,ZGr),e(En,eOr),e(zr,oOr),e(zr,ke),e(ke,N0),e(N0,oCe),e(oCe,rOr),e(N0,tOr),e(N0,VZ),e(VZ,aOr),e(N0,nOr),e(ke,sOr),e(ke,q0),e(q0,rCe),e(rCe,lOr),e(q0,iOr),e(q0,XZ),e(XZ,dOr),e(q0,cOr),e(ke,fOr),e(ke,j0),e(j0,tCe),e(tCe,mOr),e(j0,gOr),e(j0,zZ),e(zZ,hOr),e(j0,pOr),e(ke,_Or),e(ke,D0),e(D0,aCe),e(aCe,uOr),e(D0,bOr),e(D0,WZ),e(WZ,vOr),e(D0,FOr),e(ke,TOr),e(ke,G0),e(G0,nCe),e(nCe,MOr),e(G0,EOr),e(G0,QZ),e(QZ,COr),e(G0,wOr),e(ke,AOr),e(ke,O0),e(O0,sCe),e(sCe,LOr),e(O0,yOr),e(O0,HZ),e(HZ,xOr),e(O0,$Or),e(ke,kOr),e(ke,V0),e(V0,lCe),e(lCe,SOr),e(V0,ROr),e(V0,UZ),e(UZ,POr),e(V0,BOr),e(ke,IOr),e(ke,X0),e(X0,iCe),e(iCe,NOr),e(X0,qOr),e(X0,JZ),e(JZ,jOr),e(X0,DOr),e(ke,GOr),e(ke,z0),e(z0,dCe),e(dCe,OOr),e(z0,VOr),e(z0,YZ),e(YZ,XOr),e(z0,zOr),e(ke,WOr),e(ke,W0),e(W0,cCe),e(cCe,QOr),e(W0,HOr),e(W0,KZ),e(KZ,UOr),e(W0,JOr),e(zr,YOr),M(Q0,zr,null),b(f,dVe,u),b(f,tf,u),e(tf,H0),e(H0,fCe),M(Kx,fCe,null),e(tf,KOr),e(tf,mCe),e(mCe,ZOr),b(f,cVe,u),b(f,br,u),M(Zx,br,null),e(br,eVr),e(br,af),e(af,oVr),e(af,ZZ),e(ZZ,rVr),e(af,tVr),e(af,eee),e(eee,aVr),e(af,nVr),e(br,sVr),e(br,e$),e(e$,lVr),e(e$,gCe),e(gCe,iVr),e(e$,dVr),e(br,cVr),e(br,Jt),M(o$,Jt,null),e(Jt,fVr),e(Jt,hCe),e(hCe,mVr),e(Jt,gVr),e(Jt,nf),e(nf,hVr),e(nf,pCe),e(pCe,pVr),e(nf,_Vr),e(nf,oee),e(oee,uVr),e(nf,bVr),e(Jt,vVr),M(U0,Jt,null),e(br,FVr),e(br,Wr),M(r$,Wr,null),e(Wr,TVr),e(Wr,_Ce),e(_Ce,MVr),e(Wr,EVr),e(Wr,Cn),e(Cn,CVr),e(Cn,uCe),e(uCe,wVr),e(Cn,AVr),e(Cn,bCe),e(bCe,LVr),e(Cn,yVr),e(Cn,vCe),e(vCe,xVr),e(Cn,$Vr),e(Wr,kVr),e(Wr,Se),e(Se,J0),e(J0,FCe),e(FCe,SVr),e(J0,RVr),e(J0,ree),e(ree,PVr),e(J0,BVr),e(Se,IVr),e(Se,Y0),e(Y0,TCe),e(TCe,NVr),e(Y0,qVr),e(Y0,tee),e(tee,jVr),e(Y0,DVr),e(Se,GVr),e(Se,K0),e(K0,MCe),e(MCe,OVr),e(K0,VVr),e(K0,aee),e(aee,XVr),e(K0,zVr),e(Se,WVr),e(Se,Z0),e(Z0,ECe),e(ECe,QVr),e(Z0,HVr),e(Z0,nee),e(nee,UVr),e(Z0,JVr),e(Se,YVr),e(Se,ew),e(ew,CCe),e(CCe,KVr),e(ew,ZVr),e(ew,see),e(see,eXr),e(ew,oXr),e(Se,rXr),e(Se,ow),e(ow,wCe),e(wCe,tXr),e(ow,aXr),e(ow,lee),e(lee,nXr),e(ow,sXr),e(Se,lXr),e(Se,rw),e(rw,ACe),e(ACe,iXr),e(rw,dXr),e(rw,iee),e(iee,cXr),e(rw,fXr),e(Se,mXr),e(Se,tw),e(tw,LCe),e(LCe,gXr),e(tw,hXr),e(tw,dee),e(dee,pXr),e(tw,_Xr),e(Se,uXr),e(Se,aw),e(aw,yCe),e(yCe,bXr),e(aw,vXr),e(aw,cee),e(cee,FXr),e(aw,TXr),e(Se,MXr),e(Se,nw),e(nw,xCe),e(xCe,EXr),e(nw,CXr),e(nw,fee),e(fee,wXr),e(nw,AXr),e(Wr,LXr),M(sw,Wr,null),b(f,fVe,u),b(f,sf,u),e(sf,lw),e(lw,$Ce),M(t$,$Ce,null),e(sf,yXr),e(sf,kCe),e(kCe,xXr),b(f,mVe,u),b(f,vr,u),M(a$,vr,null),e(vr,$Xr),e(vr,lf),e(lf,kXr),e(lf,mee),e(mee,SXr),e(lf,RXr),e(lf,gee),e(gee,PXr),e(lf,BXr),e(vr,IXr),e(vr,n$),e(n$,NXr),e(n$,SCe),e(SCe,qXr),e(n$,jXr),e(vr,DXr),e(vr,Yt),M(s$,Yt,null),e(Yt,GXr),e(Yt,RCe),e(RCe,OXr),e(Yt,VXr),e(Yt,df),e(df,XXr),e(df,PCe),e(PCe,zXr),e(df,WXr),e(df,hee),e(hee,QXr),e(df,HXr),e(Yt,UXr),M(iw,Yt,null),e(vr,JXr),e(vr,Qr),M(l$,Qr,null),e(Qr,YXr),e(Qr,BCe),e(BCe,KXr),e(Qr,ZXr),e(Qr,wn),e(wn,ezr),e(wn,ICe),e(ICe,ozr),e(wn,rzr),e(wn,NCe),e(NCe,tzr),e(wn,azr),e(wn,qCe),e(qCe,nzr),e(wn,szr),e(Qr,lzr),e(Qr,Re),e(Re,dw),e(dw,jCe),e(jCe,izr),e(dw,dzr),e(dw,pee),e(pee,czr),e(dw,fzr),e(Re,mzr),e(Re,cw),e(cw,DCe),e(DCe,gzr),e(cw,hzr),e(cw,_ee),e(_ee,pzr),e(cw,_zr),e(Re,uzr),e(Re,fw),e(fw,GCe),e(GCe,bzr),e(fw,vzr),e(fw,uee),e(uee,Fzr),e(fw,Tzr),e(Re,Mzr),e(Re,mw),e(mw,OCe),e(OCe,Ezr),e(mw,Czr),e(mw,bee),e(bee,wzr),e(mw,Azr),e(Re,Lzr),e(Re,gw),e(gw,VCe),e(VCe,yzr),e(gw,xzr),e(gw,vee),e(vee,$zr),e(gw,kzr),e(Re,Szr),e(Re,hw),e(hw,XCe),e(XCe,Rzr),e(hw,Pzr),e(hw,Fee),e(Fee,Bzr),e(hw,Izr),e(Re,Nzr),e(Re,pw),e(pw,zCe),e(zCe,qzr),e(pw,jzr),e(pw,Tee),e(Tee,Dzr),e(pw,Gzr),e(Re,Ozr),e(Re,_w),e(_w,WCe),e(WCe,Vzr),e(_w,Xzr),e(_w,Mee),e(Mee,zzr),e(_w,Wzr),e(Re,Qzr),e(Re,uw),e(uw,QCe),e(QCe,Hzr),e(uw,Uzr),e(uw,Eee),e(Eee,Jzr),e(uw,Yzr),e(Re,Kzr),e(Re,bw),e(bw,HCe),e(HCe,Zzr),e(bw,eWr),e(bw,Cee),e(Cee,oWr),e(bw,rWr),e(Qr,tWr),M(vw,Qr,null),b(f,gVe,u),b(f,cf,u),e(cf,Fw),e(Fw,UCe),M(i$,UCe,null),e(cf,aWr),e(cf,JCe),e(JCe,nWr),b(f,hVe,u),b(f,Fr,u),M(d$,Fr,null),e(Fr,sWr),e(Fr,ff),e(ff,lWr),e(ff,wee),e(wee,iWr),e(ff,dWr),e(ff,Aee),e(Aee,cWr),e(ff,fWr),e(Fr,mWr),e(Fr,c$),e(c$,gWr),e(c$,YCe),e(YCe,hWr),e(c$,pWr),e(Fr,_Wr),e(Fr,Kt),M(f$,Kt,null),e(Kt,uWr),e(Kt,KCe),e(KCe,bWr),e(Kt,vWr),e(Kt,mf),e(mf,FWr),e(mf,ZCe),e(ZCe,TWr),e(mf,MWr),e(mf,Lee),e(Lee,EWr),e(mf,CWr),e(Kt,wWr),M(Tw,Kt,null),e(Fr,AWr),e(Fr,Hr),M(m$,Hr,null),e(Hr,LWr),e(Hr,e0e),e(e0e,yWr),e(Hr,xWr),e(Hr,An),e(An,$Wr),e(An,o0e),e(o0e,kWr),e(An,SWr),e(An,r0e),e(r0e,RWr),e(An,PWr),e(An,t0e),e(t0e,BWr),e(An,IWr),e(Hr,NWr),e(Hr,Ve),e(Ve,Mw),e(Mw,a0e),e(a0e,qWr),e(Mw,jWr),e(Mw,yee),e(yee,DWr),e(Mw,GWr),e(Ve,OWr),e(Ve,Ew),e(Ew,n0e),e(n0e,VWr),e(Ew,XWr),e(Ew,xee),e(xee,zWr),e(Ew,WWr),e(Ve,QWr),e(Ve,Cw),e(Cw,s0e),e(s0e,HWr),e(Cw,UWr),e(Cw,$ee),e($ee,JWr),e(Cw,YWr),e(Ve,KWr),e(Ve,ww),e(ww,l0e),e(l0e,ZWr),e(ww,eQr),e(ww,kee),e(kee,oQr),e(ww,rQr),e(Ve,tQr),e(Ve,Aw),e(Aw,i0e),e(i0e,aQr),e(Aw,nQr),e(Aw,See),e(See,sQr),e(Aw,lQr),e(Ve,iQr),e(Ve,Lw),e(Lw,d0e),e(d0e,dQr),e(Lw,cQr),e(Lw,Ree),e(Ree,fQr),e(Lw,mQr),e(Ve,gQr),e(Ve,yw),e(yw,c0e),e(c0e,hQr),e(yw,pQr),e(yw,Pee),e(Pee,_Qr),e(yw,uQr),e(Ve,bQr),e(Ve,xw),e(xw,f0e),e(f0e,vQr),e(xw,FQr),e(xw,Bee),e(Bee,TQr),e(xw,MQr),e(Hr,EQr),M($w,Hr,null),b(f,pVe,u),b(f,gf,u),e(gf,kw),e(kw,m0e),M(g$,m0e,null),e(gf,CQr),e(gf,g0e),e(g0e,wQr),b(f,_Ve,u),b(f,Tr,u),M(h$,Tr,null),e(Tr,AQr),e(Tr,hf),e(hf,LQr),e(hf,Iee),e(Iee,yQr),e(hf,xQr),e(hf,Nee),e(Nee,$Qr),e(hf,kQr),e(Tr,SQr),e(Tr,p$),e(p$,RQr),e(p$,h0e),e(h0e,PQr),e(p$,BQr),e(Tr,IQr),e(Tr,Zt),M(_$,Zt,null),e(Zt,NQr),e(Zt,p0e),e(p0e,qQr),e(Zt,jQr),e(Zt,pf),e(pf,DQr),e(pf,_0e),e(_0e,GQr),e(pf,OQr),e(pf,qee),e(qee,VQr),e(pf,XQr),e(Zt,zQr),M(Sw,Zt,null),e(Tr,WQr),e(Tr,Ur),M(u$,Ur,null),e(Ur,QQr),e(Ur,u0e),e(u0e,HQr),e(Ur,UQr),e(Ur,Ln),e(Ln,JQr),e(Ln,b0e),e(b0e,YQr),e(Ln,KQr),e(Ln,v0e),e(v0e,ZQr),e(Ln,eHr),e(Ln,F0e),e(F0e,oHr),e(Ln,rHr),e(Ur,tHr),e(Ur,Xe),e(Xe,Rw),e(Rw,T0e),e(T0e,aHr),e(Rw,nHr),e(Rw,jee),e(jee,sHr),e(Rw,lHr),e(Xe,iHr),e(Xe,Pw),e(Pw,M0e),e(M0e,dHr),e(Pw,cHr),e(Pw,Dee),e(Dee,fHr),e(Pw,mHr),e(Xe,gHr),e(Xe,Bw),e(Bw,E0e),e(E0e,hHr),e(Bw,pHr),e(Bw,Gee),e(Gee,_Hr),e(Bw,uHr),e(Xe,bHr),e(Xe,Iw),e(Iw,C0e),e(C0e,vHr),e(Iw,FHr),e(Iw,Oee),e(Oee,THr),e(Iw,MHr),e(Xe,EHr),e(Xe,Nw),e(Nw,w0e),e(w0e,CHr),e(Nw,wHr),e(Nw,Vee),e(Vee,AHr),e(Nw,LHr),e(Xe,yHr),e(Xe,qw),e(qw,A0e),e(A0e,xHr),e(qw,$Hr),e(qw,Xee),e(Xee,kHr),e(qw,SHr),e(Xe,RHr),e(Xe,jw),e(jw,L0e),e(L0e,PHr),e(jw,BHr),e(jw,zee),e(zee,IHr),e(jw,NHr),e(Xe,qHr),e(Xe,Dw),e(Dw,y0e),e(y0e,jHr),e(Dw,DHr),e(Dw,Wee),e(Wee,GHr),e(Dw,OHr),e(Ur,VHr),M(Gw,Ur,null),b(f,uVe,u),b(f,_f,u),e(_f,Ow),e(Ow,x0e),M(b$,x0e,null),e(_f,XHr),e(_f,$0e),e($0e,zHr),b(f,bVe,u),b(f,Mr,u),M(v$,Mr,null),e(Mr,WHr),e(Mr,uf),e(uf,QHr),e(uf,Qee),e(Qee,HHr),e(uf,UHr),e(uf,Hee),e(Hee,JHr),e(uf,YHr),e(Mr,KHr),e(Mr,F$),e(F$,ZHr),e(F$,k0e),e(k0e,eUr),e(F$,oUr),e(Mr,rUr),e(Mr,ea),M(T$,ea,null),e(ea,tUr),e(ea,S0e),e(S0e,aUr),e(ea,nUr),e(ea,bf),e(bf,sUr),e(bf,R0e),e(R0e,lUr),e(bf,iUr),e(bf,Uee),e(Uee,dUr),e(bf,cUr),e(ea,fUr),M(Vw,ea,null),e(Mr,mUr),e(Mr,Jr),M(M$,Jr,null),e(Jr,gUr),e(Jr,P0e),e(P0e,hUr),e(Jr,pUr),e(Jr,yn),e(yn,_Ur),e(yn,B0e),e(B0e,uUr),e(yn,bUr),e(yn,I0e),e(I0e,vUr),e(yn,FUr),e(yn,N0e),e(N0e,TUr),e(yn,MUr),e(Jr,EUr),e(Jr,q0e),e(q0e,Xw),e(Xw,j0e),e(j0e,CUr),e(Xw,wUr),e(Xw,Jee),e(Jee,AUr),e(Xw,LUr),e(Jr,yUr),M(zw,Jr,null),b(f,vVe,u),b(f,vf,u),e(vf,Ww),e(Ww,D0e),M(E$,D0e,null),e(vf,xUr),e(vf,G0e),e(G0e,$Ur),b(f,FVe,u),b(f,Er,u),M(C$,Er,null),e(Er,kUr),e(Er,Ff),e(Ff,SUr),e(Ff,Yee),e(Yee,RUr),e(Ff,PUr),e(Ff,Kee),e(Kee,BUr),e(Ff,IUr),e(Er,NUr),e(Er,w$),e(w$,qUr),e(w$,O0e),e(O0e,jUr),e(w$,DUr),e(Er,GUr),e(Er,oa),M(A$,oa,null),e(oa,OUr),e(oa,V0e),e(V0e,VUr),e(oa,XUr),e(oa,Tf),e(Tf,zUr),e(Tf,X0e),e(X0e,WUr),e(Tf,QUr),e(Tf,Zee),e(Zee,HUr),e(Tf,UUr),e(oa,JUr),M(Qw,oa,null),e(Er,YUr),e(Er,Yr),M(L$,Yr,null),e(Yr,KUr),e(Yr,z0e),e(z0e,ZUr),e(Yr,eJr),e(Yr,xn),e(xn,oJr),e(xn,W0e),e(W0e,rJr),e(xn,tJr),e(xn,Q0e),e(Q0e,aJr),e(xn,nJr),e(xn,H0e),e(H0e,sJr),e(xn,lJr),e(Yr,iJr),e(Yr,y$),e(y$,Hw),e(Hw,U0e),e(U0e,dJr),e(Hw,cJr),e(Hw,eoe),e(eoe,fJr),e(Hw,mJr),e(y$,gJr),e(y$,Uw),e(Uw,J0e),e(J0e,hJr),e(Uw,pJr),e(Uw,ooe),e(ooe,_Jr),e(Uw,uJr),e(Yr,bJr),M(Jw,Yr,null),b(f,TVe,u),b(f,Mf,u),e(Mf,Yw),e(Yw,Y0e),M(x$,Y0e,null),e(Mf,vJr),e(Mf,K0e),e(K0e,FJr),b(f,MVe,u),b(f,Cr,u),M($$,Cr,null),e(Cr,TJr),e(Cr,Ef),e(Ef,MJr),e(Ef,roe),e(roe,EJr),e(Ef,CJr),e(Ef,toe),e(toe,wJr),e(Ef,AJr),e(Cr,LJr),e(Cr,k$),e(k$,yJr),e(k$,Z0e),e(Z0e,xJr),e(k$,$Jr),e(Cr,kJr),e(Cr,ra),M(S$,ra,null),e(ra,SJr),e(ra,ewe),e(ewe,RJr),e(ra,PJr),e(ra,Cf),e(Cf,BJr),e(Cf,owe),e(owe,IJr),e(Cf,NJr),e(Cf,aoe),e(aoe,qJr),e(Cf,jJr),e(ra,DJr),M(Kw,ra,null),e(Cr,GJr),e(Cr,Kr),M(R$,Kr,null),e(Kr,OJr),e(Kr,rwe),e(rwe,VJr),e(Kr,XJr),e(Kr,$n),e($n,zJr),e($n,twe),e(twe,WJr),e($n,QJr),e($n,awe),e(awe,HJr),e($n,UJr),e($n,nwe),e(nwe,JJr),e($n,YJr),e(Kr,KJr),e(Kr,swe),e(swe,Zw),e(Zw,lwe),e(lwe,ZJr),e(Zw,eYr),e(Zw,noe),e(noe,oYr),e(Zw,rYr),e(Kr,tYr),M(eA,Kr,null),EVe=!0},p(f,[u]){const P$={};u&2&&(P$.$$scope={dirty:u,ctx:f}),Rf.$set(P$);const iwe={};u&2&&(iwe.$$scope={dirty:u,ctx:f}),Gg.$set(iwe);const dwe={};u&2&&(dwe.$$scope={dirty:u,ctx:f}),Eh.$set(dwe);const cwe={};u&2&&(cwe.$$scope={dirty:u,ctx:f}),np.$set(cwe);const B$={};u&2&&(B$.$$scope={dirty:u,ctx:f}),sp.$set(B$);const fwe={};u&2&&(fwe.$$scope={dirty:u,ctx:f}),Ap.$set(fwe);const kn={};u&2&&(kn.$$scope={dirty:u,ctx:f}),Lp.$set(kn);const mwe={};u&2&&(mwe.$$scope={dirty:u,ctx:f}),$p.$set(mwe);const gwe={};u&2&&(gwe.$$scope={dirty:u,ctx:f}),$u.$set(gwe);const hwe={};u&2&&(hwe.$$scope={dirty:u,ctx:f}),Su.$set(hwe);const I$={};u&2&&(I$.$$scope={dirty:u,ctx:f}),E1.$set(I$);const pwe={};u&2&&(pwe.$$scope={dirty:u,ctx:f}),w1.$set(pwe);const N$={};u&2&&(N$.$$scope={dirty:u,ctx:f}),fb.$set(N$);const _we={};u&2&&(_we.$$scope={dirty:u,ctx:f}),gb.$set(_we);const q$={};u&2&&(q$.$$scope={dirty:u,ctx:f}),Yb.$set(q$);const uwe={};u&2&&(uwe.$$scope={dirty:u,ctx:f}),Zb.$set(uwe);const bwe={};u&2&&(bwe.$$scope={dirty:u,ctx:f}),b2.$set(bwe);const vwe={};u&2&&(vwe.$$scope={dirty:u,ctx:f}),F2.$set(vwe);const wf={};u&2&&(wf.$$scope={dirty:u,ctx:f}),_4.$set(wf);const Fwe={};u&2&&(Fwe.$$scope={dirty:u,ctx:f}),b4.$set(Fwe);const Twe={};u&2&&(Twe.$$scope={dirty:u,ctx:f}),U4.$set(Twe);const Mwe={};u&2&&(Mwe.$$scope={dirty:u,ctx:f}),Y4.$set(Mwe);const j$={};u&2&&(j$.$$scope={dirty:u,ctx:f}),a5.$set(j$);const Ewe={};u&2&&(Ewe.$$scope={dirty:u,ctx:f}),s5.$set(Ewe);const Cwe={};u&2&&(Cwe.$$scope={dirty:u,ctx:f}),V5.$set(Cwe);const wwe={};u&2&&(wwe.$$scope={dirty:u,ctx:f}),z5.$set(wwe);const tt={};u&2&&(tt.$$scope={dirty:u,ctx:f}),Rv.$set(tt);const D$={};u&2&&(D$.$$scope={dirty:u,ctx:f}),Bv.$set(D$);const Awe={};u&2&&(Awe.$$scope={dirty:u,ctx:f}),qv.$set(Awe);const G$={};u&2&&(G$.$$scope={dirty:u,ctx:f}),Dv.$set(G$);const Lwe={};u&2&&(Lwe.$$scope={dirty:u,ctx:f}),o3.$set(Lwe);const at={};u&2&&(at.$$scope={dirty:u,ctx:f}),t3.$set(at);const ywe={};u&2&&(ywe.$$scope={dirty:u,ctx:f}),s3.$set(ywe);const Af={};u&2&&(Af.$$scope={dirty:u,ctx:f}),i3.$set(Af);const xwe={};u&2&&(xwe.$$scope={dirty:u,ctx:f}),f3.$set(xwe);const $we={};u&2&&($we.$$scope={dirty:u,ctx:f}),g3.$set($we);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),C3.$set(L);const oA={};u&2&&(oA.$$scope={dirty:u,ctx:f}),A3.$set(oA);const kwe={};u&2&&(kwe.$$scope={dirty:u,ctx:f}),R3.$set(kwe);const Swe={};u&2&&(Swe.$$scope={dirty:u,ctx:f}),B3.$set(Swe);const rA={};u&2&&(rA.$$scope={dirty:u,ctx:f}),Q3.$set(rA);const Rwe={};u&2&&(Rwe.$$scope={dirty:u,ctx:f}),U3.$set(Rwe);const Pwe={};u&2&&(Pwe.$$scope={dirty:u,ctx:f}),Z3.$set(Pwe);const tA={};u&2&&(tA.$$scope={dirty:u,ctx:f}),oF.$set(tA);const Bwe={};u&2&&(Bwe.$$scope={dirty:u,ctx:f}),iF.$set(Bwe);const Iwe={};u&2&&(Iwe.$$scope={dirty:u,ctx:f}),cF.$set(Iwe);const aA={};u&2&&(aA.$$scope={dirty:u,ctx:f}),pF.$set(aA);const Nwe={};u&2&&(Nwe.$$scope={dirty:u,ctx:f}),uF.$set(Nwe);const qwe={};u&2&&(qwe.$$scope={dirty:u,ctx:f}),TF.$set(qwe);const nA={};u&2&&(nA.$$scope={dirty:u,ctx:f}),EF.$set(nA);const jwe={};u&2&&(jwe.$$scope={dirty:u,ctx:f}),AF.$set(jwe);const Dwe={};u&2&&(Dwe.$$scope={dirty:u,ctx:f}),yF.$set(Dwe);const sA={};u&2&&(sA.$$scope={dirty:u,ctx:f}),BF.$set(sA);const Gwe={};u&2&&(Gwe.$$scope={dirty:u,ctx:f}),NF.$set(Gwe);const Owe={};u&2&&(Owe.$$scope={dirty:u,ctx:f}),DF.$set(Owe);const lA={};u&2&&(lA.$$scope={dirty:u,ctx:f}),OF.$set(lA);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),BT.$set(Vwe);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),NT.$set(Xwe);const iA={};u&2&&(iA.$$scope={dirty:u,ctx:f}),l7.$set(iA);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),d7.$set(zwe);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),E7.$set(Wwe);const dA={};u&2&&(dA.$$scope={dirty:u,ctx:f}),w7.$set(dA);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),$7.$set(Qwe);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),S7.$set(Hwe);const cA={};u&2&&(cA.$$scope={dirty:u,ctx:f}),Z7.$set(cA);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),oM.$set(Uwe);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),mM.$set(Jwe);const fA={};u&2&&(fA.$$scope={dirty:u,ctx:f}),hM.$set(fA);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),GM.$set(Ywe);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),VM.$set(Kwe);const mA={};u&2&&(mA.$$scope={dirty:u,ctx:f}),lE.$set(mA);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),dE.$set(Zwe);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),mE.$set(eAe);const gA={};u&2&&(gA.$$scope={dirty:u,ctx:f}),hE.$set(gA);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),_E.$set(oAe);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),bE.$set(rAe);const hA={};u&2&&(hA.$$scope={dirty:u,ctx:f}),jE.$set(hA);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),GE.$set(tAe);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),iC.$set(aAe);const pA={};u&2&&(pA.$$scope={dirty:u,ctx:f}),cC.$set(pA);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),mC.$set(nAe);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),hC.$set(sAe);const _A={};u&2&&(_A.$$scope={dirty:u,ctx:f}),_C.$set(_A);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),bC.$set(lAe);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),WC.$set(iAe);const uA={};u&2&&(uA.$$scope={dirty:u,ctx:f}),HC.$set(uA);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),n0.$set(dAe);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),l0.$set(cAe);const bA={};u&2&&(bA.$$scope={dirty:u,ctx:f}),T0.$set(bA);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),E0.$set(fAe);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),P0.$set(mAe);const vA={};u&2&&(vA.$$scope={dirty:u,ctx:f}),I0.$set(vA);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),Q0.$set(gAe);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),U0.$set(hAe);const FA={};u&2&&(FA.$$scope={dirty:u,ctx:f}),sw.$set(FA);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),iw.$set(pAe);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),vw.$set(_Ae);const TA={};u&2&&(TA.$$scope={dirty:u,ctx:f}),Tw.$set(TA);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),$w.$set(uAe);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),Sw.$set(bAe);const MA={};u&2&&(MA.$$scope={dirty:u,ctx:f}),Gw.$set(MA);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),Vw.$set(vAe);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),zw.$set(FAe);const EA={};u&2&&(EA.$$scope={dirty:u,ctx:f}),Qw.$set(EA);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),Jw.$set(TAe);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),Kw.$set(MAe);const CA={};u&2&&(CA.$$scope={dirty:u,ctx:f}),eA.$set(CA)},i(f){EVe||(E(d.$$.fragment,f),E(xa.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(Rf.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(Gg.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(IL.$$.fragment,f),E(Eh.$$.fragment,f),E(NL.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(OL.$$.fragment,f),E(np.$$.fragment,f),E(sp.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(HL.$$.fragment,f),E(Ap.$$.fragment,f),E(Lp.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E($p.$$.fragment,f),E(ey.$$.fragment,f),E($u.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(Su.$$.fragment,f),E(ny.$$.fragment,f),E(E1.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(w1.$$.fragment,f),E(cy.$$.fragment,f),E(fb.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(gb.$$.fragment,f),E(py.$$.fragment,f),E(Yb.$$.fragment,f),E(_y.$$.fragment,f),E(uy.$$.fragment,f),E(vy.$$.fragment,f),E(Zb.$$.fragment,f),E(Fy.$$.fragment,f),E(b2.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(F2.$$.fragment,f),E(wy.$$.fragment,f),E(_4.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(b4.$$.fragment,f),E($y.$$.fragment,f),E(U4.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(Y4.$$.fragment,f),E(By.$$.fragment,f),E(a5.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(s5.$$.fragment,f),E(Dy.$$.fragment,f),E(V5.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(z5.$$.fragment,f),E(zy.$$.fragment,f),E(Rv.$$.fragment,f),E(Wy.$$.fragment,f),E(Qy.$$.fragment,f),E(Uy.$$.fragment,f),E(Bv.$$.fragment,f),E(Jy.$$.fragment,f),E(qv.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(e8.$$.fragment,f),E(Dv.$$.fragment,f),E(o8.$$.fragment,f),E(o3.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(t3.$$.fragment,f),E(s8.$$.fragment,f),E(s3.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(i3.$$.fragment,f),E(f8.$$.fragment,f),E(f3.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(g3.$$.fragment,f),E(_8.$$.fragment,f),E(C3.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(A3.$$.fragment,f),E(T8.$$.fragment,f),E(R3.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(B3.$$.fragment,f),E(A8.$$.fragment,f),E(Q3.$$.fragment,f),E(L8.$$.fragment,f),E(y8.$$.fragment,f),E($8.$$.fragment,f),E(U3.$$.fragment,f),E(k8.$$.fragment,f),E(Z3.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(oF.$$.fragment,f),E(N8.$$.fragment,f),E(iF.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(cF.$$.fragment,f),E(O8.$$.fragment,f),E(pF.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(W8.$$.fragment,f),E(uF.$$.fragment,f),E(Q8.$$.fragment,f),E(TF.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(EF.$$.fragment,f),E(Z8.$$.fragment,f),E(AF.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(yF.$$.fragment,f),E(a9.$$.fragment,f),E(BF.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(NF.$$.fragment,f),E(d9.$$.fragment,f),E(DF.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(OF.$$.fragment,f),E(h9.$$.fragment,f),E(BT.$$.fragment,f),E(p9.$$.fragment,f),E(_9.$$.fragment,f),E(b9.$$.fragment,f),E(NT.$$.fragment,f),E(v9.$$.fragment,f),E(l7.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(d7.$$.fragment,f),E(C9.$$.fragment,f),E(E7.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(y9.$$.fragment,f),E(w7.$$.fragment,f),E(x9.$$.fragment,f),E($7.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(S7.$$.fragment,f),E(P9.$$.fragment,f),E(Z7.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(oM.$$.fragment,f),E(j9.$$.fragment,f),E(mM.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(hM.$$.fragment,f),E(X9.$$.fragment,f),E(GM.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(H9.$$.fragment,f),E(VM.$$.fragment,f),E(U9.$$.fragment,f),E(lE.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(dE.$$.fragment,f),E(ex.$$.fragment,f),E(mE.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(hE.$$.fragment,f),E(sx.$$.fragment,f),E(_E.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(bE.$$.fragment,f),E(fx.$$.fragment,f),E(jE.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(GE.$$.fragment,f),E(_x.$$.fragment,f),E(iC.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(cC.$$.fragment,f),E(Tx.$$.fragment,f),E(mC.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(hC.$$.fragment,f),E(Ax.$$.fragment,f),E(_C.$$.fragment,f),E(Lx.$$.fragment,f),E(yx.$$.fragment,f),E($x.$$.fragment,f),E(bC.$$.fragment,f),E(kx.$$.fragment,f),E(WC.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(HC.$$.fragment,f),E(Ix.$$.fragment,f),E(n0.$$.fragment,f),E(Nx.$$.fragment,f),E(qx.$$.fragment,f),E(Dx.$$.fragment,f),E(l0.$$.fragment,f),E(Gx.$$.fragment,f),E(T0.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E(E0.$$.fragment,f),E(Wx.$$.fragment,f),E(P0.$$.fragment,f),E(Qx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(I0.$$.fragment,f),E(Yx.$$.fragment,f),E(Q0.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(U0.$$.fragment,f),E(r$.$$.fragment,f),E(sw.$$.fragment,f),E(t$.$$.fragment,f),E(a$.$$.fragment,f),E(s$.$$.fragment,f),E(iw.$$.fragment,f),E(l$.$$.fragment,f),E(vw.$$.fragment,f),E(i$.$$.fragment,f),E(d$.$$.fragment,f),E(f$.$$.fragment,f),E(Tw.$$.fragment,f),E(m$.$$.fragment,f),E($w.$$.fragment,f),E(g$.$$.fragment,f),E(h$.$$.fragment,f),E(_$.$$.fragment,f),E(Sw.$$.fragment,f),E(u$.$$.fragment,f),E(Gw.$$.fragment,f),E(b$.$$.fragment,f),E(v$.$$.fragment,f),E(T$.$$.fragment,f),E(Vw.$$.fragment,f),E(M$.$$.fragment,f),E(zw.$$.fragment,f),E(E$.$$.fragment,f),E(C$.$$.fragment,f),E(A$.$$.fragment,f),E(Qw.$$.fragment,f),E(L$.$$.fragment,f),E(Jw.$$.fragment,f),E(x$.$$.fragment,f),E($$.$$.fragment,f),E(S$.$$.fragment,f),E(Kw.$$.fragment,f),E(R$.$$.fragment,f),E(eA.$$.fragment,f),EVe=!0)},o(f){C(d.$$.fragment,f),C(xa.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(Rf.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(Gg.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(IL.$$.fragment,f),C(Eh.$$.fragment,f),C(NL.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(OL.$$.fragment,f),C(np.$$.fragment,f),C(sp.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(HL.$$.fragment,f),C(Ap.$$.fragment,f),C(Lp.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C($p.$$.fragment,f),C(ey.$$.fragment,f),C($u.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(Su.$$.fragment,f),C(ny.$$.fragment,f),C(E1.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(w1.$$.fragment,f),C(cy.$$.fragment,f),C(fb.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(gb.$$.fragment,f),C(py.$$.fragment,f),C(Yb.$$.fragment,f),C(_y.$$.fragment,f),C(uy.$$.fragment,f),C(vy.$$.fragment,f),C(Zb.$$.fragment,f),C(Fy.$$.fragment,f),C(b2.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(F2.$$.fragment,f),C(wy.$$.fragment,f),C(_4.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(b4.$$.fragment,f),C($y.$$.fragment,f),C(U4.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(Y4.$$.fragment,f),C(By.$$.fragment,f),C(a5.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(s5.$$.fragment,f),C(Dy.$$.fragment,f),C(V5.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(z5.$$.fragment,f),C(zy.$$.fragment,f),C(Rv.$$.fragment,f),C(Wy.$$.fragment,f),C(Qy.$$.fragment,f),C(Uy.$$.fragment,f),C(Bv.$$.fragment,f),C(Jy.$$.fragment,f),C(qv.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(e8.$$.fragment,f),C(Dv.$$.fragment,f),C(o8.$$.fragment,f),C(o3.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(t3.$$.fragment,f),C(s8.$$.fragment,f),C(s3.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(i3.$$.fragment,f),C(f8.$$.fragment,f),C(f3.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(g3.$$.fragment,f),C(_8.$$.fragment,f),C(C3.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(A3.$$.fragment,f),C(T8.$$.fragment,f),C(R3.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(B3.$$.fragment,f),C(A8.$$.fragment,f),C(Q3.$$.fragment,f),C(L8.$$.fragment,f),C(y8.$$.fragment,f),C($8.$$.fragment,f),C(U3.$$.fragment,f),C(k8.$$.fragment,f),C(Z3.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(oF.$$.fragment,f),C(N8.$$.fragment,f),C(iF.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(cF.$$.fragment,f),C(O8.$$.fragment,f),C(pF.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(W8.$$.fragment,f),C(uF.$$.fragment,f),C(Q8.$$.fragment,f),C(TF.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(EF.$$.fragment,f),C(Z8.$$.fragment,f),C(AF.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(yF.$$.fragment,f),C(a9.$$.fragment,f),C(BF.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(NF.$$.fragment,f),C(d9.$$.fragment,f),C(DF.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(OF.$$.fragment,f),C(h9.$$.fragment,f),C(BT.$$.fragment,f),C(p9.$$.fragment,f),C(_9.$$.fragment,f),C(b9.$$.fragment,f),C(NT.$$.fragment,f),C(v9.$$.fragment,f),C(l7.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(d7.$$.fragment,f),C(C9.$$.fragment,f),C(E7.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(y9.$$.fragment,f),C(w7.$$.fragment,f),C(x9.$$.fragment,f),C($7.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(S7.$$.fragment,f),C(P9.$$.fragment,f),C(Z7.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(oM.$$.fragment,f),C(j9.$$.fragment,f),C(mM.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(hM.$$.fragment,f),C(X9.$$.fragment,f),C(GM.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(H9.$$.fragment,f),C(VM.$$.fragment,f),C(U9.$$.fragment,f),C(lE.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(dE.$$.fragment,f),C(ex.$$.fragment,f),C(mE.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(hE.$$.fragment,f),C(sx.$$.fragment,f),C(_E.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(bE.$$.fragment,f),C(fx.$$.fragment,f),C(jE.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(GE.$$.fragment,f),C(_x.$$.fragment,f),C(iC.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(cC.$$.fragment,f),C(Tx.$$.fragment,f),C(mC.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(hC.$$.fragment,f),C(Ax.$$.fragment,f),C(_C.$$.fragment,f),C(Lx.$$.fragment,f),C(yx.$$.fragment,f),C($x.$$.fragment,f),C(bC.$$.fragment,f),C(kx.$$.fragment,f),C(WC.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(HC.$$.fragment,f),C(Ix.$$.fragment,f),C(n0.$$.fragment,f),C(Nx.$$.fragment,f),C(qx.$$.fragment,f),C(Dx.$$.fragment,f),C(l0.$$.fragment,f),C(Gx.$$.fragment,f),C(T0.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C(E0.$$.fragment,f),C(Wx.$$.fragment,f),C(P0.$$.fragment,f),C(Qx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(I0.$$.fragment,f),C(Yx.$$.fragment,f),C(Q0.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(U0.$$.fragment,f),C(r$.$$.fragment,f),C(sw.$$.fragment,f),C(t$.$$.fragment,f),C(a$.$$.fragment,f),C(s$.$$.fragment,f),C(iw.$$.fragment,f),C(l$.$$.fragment,f),C(vw.$$.fragment,f),C(i$.$$.fragment,f),C(d$.$$.fragment,f),C(f$.$$.fragment,f),C(Tw.$$.fragment,f),C(m$.$$.fragment,f),C($w.$$.fragment,f),C(g$.$$.fragment,f),C(h$.$$.fragment,f),C(_$.$$.fragment,f),C(Sw.$$.fragment,f),C(u$.$$.fragment,f),C(Gw.$$.fragment,f),C(b$.$$.fragment,f),C(v$.$$.fragment,f),C(T$.$$.fragment,f),C(Vw.$$.fragment,f),C(M$.$$.fragment,f),C(zw.$$.fragment,f),C(E$.$$.fragment,f),C(C$.$$.fragment,f),C(A$.$$.fragment,f),C(Qw.$$.fragment,f),C(L$.$$.fragment,f),C(Jw.$$.fragment,f),C(x$.$$.fragment,f),C($$.$$.fragment,f),C(S$.$$.fragment,f),C(Kw.$$.fragment,f),C(R$.$$.fragment,f),C(eA.$$.fragment,f),EVe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(yf),f&&t(nt),f&&t(Oe),f&&t(We),f&&t($f),w(xa,f),f&&t(Qe),f&&t(Ae),f&&t(Co),f&&t($a),f&&t(bGe),f&&t(yi),w(CL),f&&t(vGe),f&&t(In),f&&t(FGe),w(wL,f),f&&t(TGe),f&&t(oS),f&&t(MGe),w(Rf,f),f&&t(EGe),f&&t(xi),w(AL),f&&t(CGe),f&&t(wo),w(LL),w($L),w(Gg),w(kL),f&&t(wGe),f&&t(ki),w(SL),f&&t(AGe),f&&t(Ao),w(RL),w(IL),w(Eh),w(NL),f&&t(LGe),f&&t(Si),w(qL),f&&t(yGe),f&&t(Lo),w(jL),w(OL),w(np),w(sp),w(VL),f&&t(xGe),f&&t(Ri),w(XL),f&&t($Ge),f&&t(yo),w(zL),w(HL),w(Ap),w(Lp),w(UL),f&&t(kGe),f&&t(Bi),w(JL),f&&t(SGe),f&&t(xo),w(YL),w(ZL),w($p),w(ey),w($u),f&&t(RGe),f&&t(qi),w(oy),f&&t(PGe),f&&t($o),w(ry),w(ay),w(Su),w(ny),w(E1),f&&t(BGe),f&&t(Gi),w(sy),f&&t(IGe),f&&t(ko),w(ly),w(dy),w(w1),w(cy),w(fb),f&&t(NGe),f&&t(Xi),w(fy),f&&t(qGe),f&&t(So),w(my),w(hy),w(gb),w(py),w(Yb),f&&t(jGe),f&&t(Qi),w(_y),f&&t(DGe),f&&t(Ro),w(uy),w(vy),w(Zb),w(Fy),w(b2),f&&t(GGe),f&&t(Ji),w(Ty),f&&t(OGe),f&&t(Po),w(My),w(Cy),w(F2),w(wy),w(_4),f&&t(VGe),f&&t(Zi),w(Ay),f&&t(XGe),f&&t(Bo),w(Ly),w(xy),w(b4),w($y),w(U4),f&&t(zGe),f&&t(rd),w(ky),f&&t(WGe),f&&t(Io),w(Sy),w(Py),w(Y4),w(By),w(a5),f&&t(QGe),f&&t(nd),w(Iy),f&&t(HGe),f&&t(No),w(Ny),w(jy),w(s5),w(Dy),w(V5),f&&t(UGe),f&&t(id),w(Gy),f&&t(JGe),f&&t(qo),w(Oy),w(Xy),w(z5),w(zy),w(Rv),f&&t(YGe),f&&t(fd),w(Wy),f&&t(KGe),f&&t(jo),w(Qy),w(Uy),w(Bv),w(Jy),w(qv),f&&t(ZGe),f&&t(hd),w(Yy),f&&t(eOe),f&&t(Do),w(Ky),w(e8),w(Dv),w(o8),w(o3),f&&t(oOe),f&&t(ud),w(r8),f&&t(rOe),f&&t(Go),w(t8),w(n8),w(t3),w(s8),w(s3),f&&t(tOe),f&&t(Fd),w(l8),f&&t(aOe),f&&t(Oo),w(i8),w(c8),w(i3),w(f8),w(f3),f&&t(nOe),f&&t(Ed),w(m8),f&&t(sOe),f&&t(Vo),w(g8),w(p8),w(g3),w(_8),w(C3),f&&t(lOe),f&&t(Ad),w(u8),f&&t(iOe),f&&t(Xo),w(b8),w(F8),w(A3),w(T8),w(R3),f&&t(dOe),f&&t(xd),w(M8),f&&t(cOe),f&&t(zo),w(E8),w(w8),w(B3),w(A8),w(Q3),f&&t(fOe),f&&t(Sd),w(L8),f&&t(mOe),f&&t(Wo),w(y8),w($8),w(U3),w(k8),w(Z3),f&&t(gOe),f&&t(Bd),w(R8),f&&t(hOe),f&&t(Qo),w(P8),w(I8),w(oF),w(N8),w(iF),f&&t(pOe),f&&t(qd),w(q8),f&&t(_Oe),f&&t(Ho),w(j8),w(G8),w(cF),w(O8),w(pF),f&&t(uOe),f&&t(Od),w(V8),f&&t(bOe),f&&t(Uo),w(X8),w(W8),w(uF),w(Q8),w(TF),f&&t(vOe),f&&t(zd),w(U8),f&&t(FOe),f&&t(Jo),w(J8),w(K8),w(EF),w(Z8),w(AF),f&&t(TOe),f&&t(Hd),w(e9),f&&t(MOe),f&&t(Yo),w(o9),w(t9),w(yF),w(a9),w(BF),f&&t(EOe),f&&t(Yd),w(n9),f&&t(COe),f&&t(Ko),w(s9),w(i9),w(NF),w(d9),w(DF),f&&t(wOe),f&&t(ec),w(c9),f&&t(AOe),f&&t(Zo),w(f9),w(g9),w(OF),w(h9),w(BT),f&&t(LOe),f&&t(tc),w(p9),f&&t(yOe),f&&t(er),w(_9),w(b9),w(NT),w(v9),w(l7),f&&t(xOe),f&&t(sc),w(F9),f&&t($Oe),f&&t(or),w(T9),w(E9),w(d7),w(C9),w(E7),f&&t(kOe),f&&t(dc),w(w9),f&&t(SOe),f&&t(rr),w(A9),w(y9),w(w7),w(x9),w($7),f&&t(ROe),f&&t(mc),w($9),f&&t(POe),f&&t(tr),w(k9),w(R9),w(S7),w(P9),w(Z7),f&&t(BOe),f&&t(pc),w(B9),f&&t(IOe),f&&t(ar),w(I9),w(q9),w(oM),w(j9),w(mM),f&&t(NOe),f&&t(bc),w(D9),f&&t(qOe),f&&t(nr),w(G9),w(V9),w(hM),w(X9),w(GM),f&&t(jOe),f&&t(Tc),w(z9),f&&t(DOe),f&&t(sr),w(W9),w(H9),w(VM),w(U9),w(lE),f&&t(GOe),f&&t(Cc),w(J9),f&&t(OOe),f&&t(lr),w(Y9),w(Z9),w(dE),w(ex),w(mE),f&&t(VOe),f&&t(Lc),w(rx),f&&t(XOe),f&&t(ir),w(tx),w(nx),w(hE),w(sx),w(_E),f&&t(zOe),f&&t($c),w(lx),f&&t(WOe),f&&t(dr),w(ix),w(cx),w(bE),w(fx),w(jE),f&&t(QOe),f&&t(Rc),w(mx),f&&t(HOe),f&&t(cr),w(gx),w(px),w(GE),w(_x),w(iC),f&&t(UOe),f&&t(Ic),w(ux),f&&t(JOe),f&&t(fr),w(bx),w(Fx),w(cC),w(Tx),w(mC),f&&t(YOe),f&&t(jc),w(Mx),f&&t(KOe),f&&t(mr),w(Ex),w(wx),w(hC),w(Ax),w(_C),f&&t(ZOe),f&&t(Oc),w(Lx),f&&t(eVe),f&&t(gr),w(yx),w($x),w(bC),w(kx),w(WC),f&&t(oVe),f&&t(zc),w(Sx),f&&t(rVe),f&&t(hr),w(Rx),w(Bx),w(HC),w(Ix),w(n0),f&&t(tVe),f&&t(Hc),w(Nx),f&&t(aVe),f&&t(pr),w(qx),w(Dx),w(l0),w(Gx),w(T0),f&&t(nVe),f&&t(Yc),w(Ox),f&&t(sVe),f&&t(_r),w(Vx),w(zx),w(E0),w(Wx),w(P0),f&&t(lVe),f&&t(ef),w(Qx),f&&t(iVe),f&&t(ur),w(Hx),w(Jx),w(I0),w(Yx),w(Q0),f&&t(dVe),f&&t(tf),w(Kx),f&&t(cVe),f&&t(br),w(Zx),w(o$),w(U0),w(r$),w(sw),f&&t(fVe),f&&t(sf),w(t$),f&&t(mVe),f&&t(vr),w(a$),w(s$),w(iw),w(l$),w(vw),f&&t(gVe),f&&t(cf),w(i$),f&&t(hVe),f&&t(Fr),w(d$),w(f$),w(Tw),w(m$),w($w),f&&t(pVe),f&&t(gf),w(g$),f&&t(_Ve),f&&t(Tr),w(h$),w(_$),w(Sw),w(u$),w(Gw),f&&t(uVe),f&&t(_f),w(b$),f&&t(bVe),f&&t(Mr),w(v$),w(T$),w(Vw),w(M$),w(zw),f&&t(vVe),f&&t(vf),w(E$),f&&t(FVe),f&&t(Er),w(C$),w(A$),w(Qw),w(L$),w(Jw),f&&t(TVe),f&&t(Mf),w(x$),f&&t(MVe),f&&t(Cr),w($$),w(S$),w(Kw),w(R$),w(eA)}}}const vGt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function FGt(x){return bjt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class LGt extends hjt{constructor(g){super();pjt(this,g,FGt,bGt,_jt,{})}}export{LGt as default,vGt as metadata};
