import{S as lkt,i as ikt,s as dkt,e as a,k as l,w as F,t as o,M as ckt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as fkt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as TXr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function mkt(L){let g,v,p,m,_,d,h,Mo,mi,_f,tt,gi,hi,LA,uf,je,We,pi,yn,xA,Ln,xn,$A,_i,$n,kA,ui,bf,wa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),mi=a("code"),_f=o("model_type"),tt=o(" attribute is set to the same key you use when registering the config (here "),gi=a("code"),hi=o('"new-model"'),LA=o(")."),uf=l(),je=a("p"),We=o("Likewise, if your "),pi=a("code"),yn=o("NewModel"),xA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),$A=o(`, make sure its
`),_i=a("code"),$n=o("config_class"),kA=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),bf=o("NewModelConfig"),wa=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var J$=s(p);m=r(J$,"NewModelConfig"),J$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var bi=s(d);h=r(bi,"PretrainedConfig"),bi.forEach(t),Mo=r(Ae,`, make sure its
`),mi=n(Ae,"CODE",{});var Y$=s(mi);_f=r(Y$,"model_type"),Y$.forEach(t),tt=r(Ae," attribute is set to the same key you use when registering the config (here "),gi=n(Ae,"CODE",{});var K$=s(gi);hi=r(K$,'"new-model"'),K$.forEach(t),LA=r(Ae,")."),Ae.forEach(t),uf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),pi=n(Eo,"CODE",{});var Aa=s(pi);yn=r(Aa,"NewModel"),Aa.forEach(t),xA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var Z$=s(Ln);xn=r(Z$,"PreTrainedModel"),Z$.forEach(t),$A=r(Eo,`, make sure its
`),_i=n(Eo,"CODE",{});var vf=s(_i);$n=r(vf,"config_class"),vf.forEach(t),kA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var ek=s(ui);bf=r(ek,"NewModelConfig"),ek.forEach(t),wa=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,mi),e(mi,_f),e(g,tt),e(g,gi),e(gi,hi),e(g,LA),b(Qe,uf,Ae),b(Qe,je,Ae),e(je,We),e(je,pi),e(pi,yn),e(je,xA),e(je,Ln),e(Ln,xn),e(je,$A),e(je,_i),e(_i,$n),e(je,kA),e(je,ui),e(ui,bf),e(je,wa)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(je)}}}function gkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pkt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function _kt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ukt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function bkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ekt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ckt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Akt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ykt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $kt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Skt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ikt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Okt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ukt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ykt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ESt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ASt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ySt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ISt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function USt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dRt(L){let g,v,p,m,_,d,h,Mo,mi,_f,tt,gi,hi,LA,uf,je,We,pi,yn,xA,Ln,xn,$A,_i,$n,kA,ui,bf,wa,Qe,Ae,J$,bi,Y$,K$,Eo,Aa,Z$,vf,ek,xOe,bqe,vi,Ff,_oe,SA,$Oe,uoe,kOe,vqe,kn,SOe,boe,ROe,POe,voe,BOe,IOe,Fqe,RA,Tqe,ok,NOe,Mqe,Tf,Eqe,Fi,Mf,Foe,PA,qOe,Toe,jOe,Cqe,Co,BA,DOe,IA,GOe,rk,OOe,VOe,XOe,NA,zOe,Moe,WOe,QOe,HOe,Er,qA,UOe,Eoe,JOe,YOe,Ti,KOe,Coe,ZOe,eVe,woe,oVe,rVe,tVe,A,Ef,Aoe,aVe,nVe,tk,sVe,lVe,iVe,Cf,yoe,dVe,cVe,ak,fVe,mVe,gVe,wf,Loe,hVe,pVe,nk,_Ve,uVe,bVe,Af,xoe,vVe,FVe,sk,TVe,MVe,EVe,yf,$oe,CVe,wVe,lk,AVe,yVe,LVe,Lf,koe,xVe,$Ve,ik,kVe,SVe,RVe,xf,Soe,PVe,BVe,dk,IVe,NVe,qVe,$f,Roe,jVe,DVe,ck,GVe,OVe,VVe,kf,Poe,XVe,zVe,fk,WVe,QVe,HVe,Sf,Boe,UVe,JVe,mk,YVe,KVe,ZVe,Rf,Ioe,eXe,oXe,gk,rXe,tXe,aXe,Pf,Noe,nXe,sXe,hk,lXe,iXe,dXe,Bf,qoe,cXe,fXe,pk,mXe,gXe,hXe,If,joe,pXe,_Xe,_k,uXe,bXe,vXe,Nf,Doe,FXe,TXe,uk,MXe,EXe,CXe,qf,Goe,wXe,AXe,bk,yXe,LXe,xXe,jf,Ooe,$Xe,kXe,vk,SXe,RXe,PXe,Df,Voe,BXe,IXe,Fk,NXe,qXe,jXe,Gf,Xoe,DXe,GXe,Tk,OXe,VXe,XXe,Of,zoe,zXe,WXe,Mk,QXe,HXe,UXe,Vf,Woe,JXe,YXe,Ek,KXe,ZXe,eze,Xf,Qoe,oze,rze,Ck,tze,aze,nze,zf,Hoe,sze,lze,wk,ize,dze,cze,Wf,Uoe,fze,mze,Ak,gze,hze,pze,Qf,Joe,_ze,uze,yk,bze,vze,Fze,Hf,Yoe,Tze,Mze,Lk,Eze,Cze,wze,Uf,Koe,Aze,yze,xk,Lze,xze,$ze,Jf,Zoe,kze,Sze,$k,Rze,Pze,Bze,Yf,ere,Ize,Nze,kk,qze,jze,Dze,Kf,ore,Gze,Oze,Sk,Vze,Xze,zze,Zf,rre,Wze,Qze,Rk,Hze,Uze,Jze,em,tre,Yze,Kze,Pk,Zze,eWe,oWe,om,are,rWe,tWe,Bk,aWe,nWe,sWe,rm,nre,lWe,iWe,Ik,dWe,cWe,fWe,tm,sre,mWe,gWe,Nk,hWe,pWe,_We,am,lre,uWe,bWe,qk,vWe,FWe,TWe,nm,ire,MWe,EWe,jk,CWe,wWe,AWe,sm,dre,yWe,LWe,Dk,xWe,$We,kWe,lm,cre,SWe,RWe,Gk,PWe,BWe,IWe,im,fre,NWe,qWe,Ok,jWe,DWe,GWe,dm,mre,OWe,VWe,Vk,XWe,zWe,WWe,cm,gre,QWe,HWe,Xk,UWe,JWe,YWe,fm,hre,KWe,ZWe,zk,eQe,oQe,rQe,mm,pre,tQe,aQe,Wk,nQe,sQe,lQe,gm,_re,iQe,dQe,Qk,cQe,fQe,mQe,hm,ure,gQe,hQe,Hk,pQe,_Qe,uQe,pm,bre,bQe,vQe,Uk,FQe,TQe,MQe,_m,vre,EQe,CQe,Jk,wQe,AQe,yQe,um,Fre,LQe,xQe,Yk,$Qe,kQe,SQe,bm,Tre,RQe,PQe,Kk,BQe,IQe,NQe,vm,Mre,qQe,jQe,Zk,DQe,GQe,OQe,Fm,Ere,VQe,XQe,eS,zQe,WQe,QQe,Tm,Cre,HQe,UQe,oS,JQe,YQe,KQe,Mm,wre,ZQe,eHe,rS,oHe,rHe,tHe,Em,Are,aHe,nHe,tS,sHe,lHe,iHe,Cm,yre,dHe,cHe,aS,fHe,mHe,gHe,wm,Lre,hHe,pHe,nS,_He,uHe,bHe,Am,xre,vHe,FHe,sS,THe,MHe,EHe,ym,$re,CHe,wHe,lS,AHe,yHe,LHe,Lm,kre,xHe,$He,iS,kHe,SHe,RHe,xm,Sre,PHe,BHe,dS,IHe,NHe,qHe,$m,Rre,jHe,DHe,cS,GHe,OHe,VHe,km,Pre,XHe,zHe,fS,WHe,QHe,HHe,Sm,Bre,UHe,JHe,mS,YHe,KHe,ZHe,Rm,Ire,eUe,oUe,gS,rUe,tUe,aUe,Pm,Nre,nUe,sUe,hS,lUe,iUe,dUe,Bm,qre,cUe,fUe,pS,mUe,gUe,hUe,Im,jre,pUe,_Ue,_S,uUe,bUe,vUe,Nm,Dre,FUe,TUe,uS,MUe,EUe,CUe,qm,Gre,wUe,AUe,bS,yUe,LUe,xUe,jm,Ore,$Ue,kUe,vS,SUe,RUe,PUe,Dm,Vre,BUe,IUe,FS,NUe,qUe,jUe,Gm,Xre,DUe,GUe,TS,OUe,VUe,XUe,Om,zre,zUe,WUe,MS,QUe,HUe,UUe,Vm,Wre,JUe,YUe,ES,KUe,ZUe,eJe,Xm,Qre,oJe,rJe,CS,tJe,aJe,nJe,zm,Hre,sJe,lJe,wS,iJe,dJe,cJe,Wm,Ure,fJe,mJe,AS,gJe,hJe,pJe,Qm,Jre,_Je,uJe,yS,bJe,vJe,FJe,Hm,Yre,TJe,MJe,LS,EJe,CJe,wJe,Um,Kre,AJe,yJe,xS,LJe,xJe,$Je,Jm,Zre,kJe,SJe,$S,RJe,PJe,BJe,Ym,ete,IJe,NJe,kS,qJe,jJe,DJe,Km,ote,GJe,OJe,SS,VJe,XJe,zJe,Zm,rte,WJe,QJe,RS,HJe,UJe,JJe,eg,tte,YJe,KJe,PS,ZJe,eYe,oYe,og,ate,rYe,tYe,BS,aYe,nYe,sYe,rg,nte,lYe,iYe,IS,dYe,cYe,fYe,tg,ste,mYe,gYe,NS,hYe,pYe,_Ye,ag,lte,uYe,bYe,qS,vYe,FYe,TYe,ng,ite,MYe,EYe,jS,CYe,wYe,AYe,sg,dte,yYe,LYe,DS,xYe,$Ye,kYe,lg,cte,SYe,RYe,GS,PYe,BYe,IYe,ig,fte,NYe,qYe,OS,jYe,DYe,GYe,dg,mte,OYe,VYe,VS,XYe,zYe,WYe,cg,gte,QYe,HYe,XS,UYe,JYe,YYe,fg,hte,KYe,ZYe,zS,eKe,oKe,rKe,mg,pte,tKe,aKe,WS,nKe,sKe,lKe,gg,_te,iKe,dKe,QS,cKe,fKe,mKe,hg,ute,gKe,hKe,HS,pKe,_Ke,uKe,pg,bte,bKe,vKe,US,FKe,TKe,MKe,_g,vte,EKe,CKe,JS,wKe,AKe,yKe,ug,Fte,LKe,xKe,YS,$Ke,kKe,SKe,bg,Tte,RKe,PKe,KS,BKe,IKe,NKe,vg,Mte,qKe,jKe,ZS,DKe,GKe,OKe,Fg,Ete,VKe,XKe,eR,zKe,WKe,QKe,Tg,Cte,HKe,UKe,oR,JKe,YKe,KKe,Mg,wte,ZKe,eZe,rR,oZe,rZe,tZe,Eg,Ate,aZe,nZe,tR,sZe,lZe,iZe,Cg,yte,dZe,cZe,aR,fZe,mZe,gZe,wg,hZe,Ag,jA,pZe,Lte,_Ze,wqe,Mi,yg,xte,DA,uZe,$te,bZe,Aqe,wo,GA,vZe,OA,FZe,nR,TZe,MZe,EZe,VA,CZe,kte,wZe,AZe,yZe,Cr,XA,LZe,Ste,xZe,$Ze,ya,kZe,Rte,SZe,RZe,Pte,PZe,BZe,Bte,IZe,NZe,qZe,k,Sn,Ite,jZe,DZe,sR,GZe,OZe,lR,VZe,XZe,zZe,Rn,Nte,WZe,QZe,iR,HZe,UZe,dR,JZe,YZe,KZe,Pn,qte,ZZe,eeo,cR,oeo,reo,fR,teo,aeo,neo,Lg,jte,seo,leo,mR,ieo,deo,ceo,Bn,Dte,feo,meo,gR,geo,heo,hR,peo,_eo,ueo,xg,Gte,beo,veo,pR,Feo,Teo,Meo,$g,Ote,Eeo,Ceo,_R,weo,Aeo,yeo,kg,Vte,Leo,xeo,uR,$eo,keo,Seo,In,Xte,Reo,Peo,bR,Beo,Ieo,vR,Neo,qeo,jeo,Nn,zte,Deo,Geo,FR,Oeo,Veo,TR,Xeo,zeo,Weo,qn,Wte,Qeo,Heo,MR,Ueo,Jeo,ER,Yeo,Keo,Zeo,Sg,Qte,eoo,ooo,CR,roo,too,aoo,Rg,Hte,noo,soo,wR,loo,ioo,doo,jn,Ute,coo,foo,AR,moo,goo,yR,hoo,poo,_oo,Pg,Jte,uoo,boo,LR,voo,Foo,Too,Dn,Yte,Moo,Eoo,xR,Coo,woo,$R,Aoo,yoo,Loo,Gn,Kte,xoo,$oo,kR,koo,Soo,SR,Roo,Poo,Boo,On,Zte,Ioo,Noo,RR,qoo,joo,PR,Doo,Goo,Ooo,Bg,eae,Voo,Xoo,BR,zoo,Woo,Qoo,Vn,oae,Hoo,Uoo,IR,Joo,Yoo,NR,Koo,Zoo,ero,Xn,rae,oro,rro,qR,tro,aro,jR,nro,sro,lro,zn,tae,iro,dro,DR,cro,fro,GR,mro,gro,hro,Wn,aae,pro,_ro,OR,uro,bro,VR,vro,Fro,Tro,Qn,nae,Mro,Ero,XR,Cro,wro,zR,Aro,yro,Lro,Hn,sae,xro,$ro,WR,kro,Sro,QR,Rro,Pro,Bro,Ig,lae,Iro,Nro,HR,qro,jro,Dro,Un,iae,Gro,Oro,UR,Vro,Xro,JR,zro,Wro,Qro,Ng,dae,Hro,Uro,YR,Jro,Yro,Kro,Jn,cae,Zro,eto,KR,oto,rto,ZR,tto,ato,nto,Yn,fae,sto,lto,eP,ito,dto,oP,cto,fto,mto,Kn,mae,gto,hto,rP,pto,_to,tP,uto,bto,vto,qg,gae,Fto,Tto,aP,Mto,Eto,Cto,Zn,hae,wto,Ato,nP,yto,Lto,sP,xto,$to,kto,es,pae,Sto,Rto,lP,Pto,Bto,iP,Ito,Nto,qto,jg,_ae,jto,Dto,dP,Gto,Oto,Vto,os,uae,Xto,zto,cP,Wto,Qto,fP,Hto,Uto,Jto,rs,bae,Yto,Kto,mP,Zto,eao,gP,oao,rao,tao,ts,vae,aao,nao,hP,sao,lao,pP,iao,dao,cao,as,Fae,fao,mao,_P,gao,hao,uP,pao,_ao,uao,ns,Tae,bao,vao,bP,Fao,Tao,vP,Mao,Eao,Cao,ss,Mae,wao,Aao,FP,yao,Lao,TP,xao,$ao,kao,ls,Eae,Sao,Rao,MP,Pao,Bao,EP,Iao,Nao,qao,Dg,Cae,jao,Dao,CP,Gao,Oao,Vao,is,wae,Xao,zao,wP,Wao,Qao,AP,Hao,Uao,Jao,Gg,Aae,Yao,Kao,yP,Zao,eno,ono,Og,yae,rno,tno,LP,ano,nno,sno,ds,Lae,lno,ino,xP,dno,cno,$P,fno,mno,gno,cs,xae,hno,pno,kP,_no,uno,SP,bno,vno,Fno,fs,$ae,Tno,Mno,RP,Eno,Cno,PP,wno,Ano,yno,Vg,kae,Lno,xno,BP,$no,kno,Sno,ms,Sae,Rno,Pno,IP,Bno,Ino,NP,Nno,qno,jno,gs,Rae,Dno,Gno,qP,Ono,Vno,jP,Xno,zno,Wno,hs,Pae,Qno,Hno,DP,Uno,Jno,GP,Yno,Kno,Zno,ps,Bae,eso,oso,OP,rso,tso,VP,aso,nso,sso,_s,Iae,lso,iso,XP,dso,cso,zP,fso,mso,gso,Xg,Nae,hso,pso,WP,_so,uso,bso,us,qae,vso,Fso,QP,Tso,Mso,HP,Eso,Cso,wso,zg,jae,Aso,yso,UP,Lso,xso,$so,Wg,Dae,kso,Sso,JP,Rso,Pso,Bso,Qg,Gae,Iso,Nso,YP,qso,jso,Dso,Hg,Oae,Gso,Oso,KP,Vso,Xso,zso,bs,Vae,Wso,Qso,ZP,Hso,Uso,eB,Jso,Yso,Kso,Ug,Xae,Zso,elo,oB,olo,rlo,tlo,vs,zae,alo,nlo,rB,slo,llo,tB,ilo,dlo,clo,Fs,Wae,flo,mlo,aB,glo,hlo,nB,plo,_lo,ulo,Ts,Qae,blo,vlo,sB,Flo,Tlo,lB,Mlo,Elo,Clo,Ms,Hae,wlo,Alo,iB,ylo,Llo,dB,xlo,$lo,klo,Es,Uae,Slo,Rlo,cB,Plo,Blo,fB,Ilo,Nlo,qlo,Cs,Jae,jlo,Dlo,mB,Glo,Olo,gB,Vlo,Xlo,zlo,Jg,Yae,Wlo,Qlo,hB,Hlo,Ulo,Jlo,Yg,Kae,Ylo,Klo,pB,Zlo,eio,oio,ws,Zae,rio,tio,_B,aio,nio,uB,sio,lio,iio,As,ene,dio,cio,bB,fio,mio,vB,gio,hio,pio,ys,one,_io,uio,FB,bio,vio,TB,Fio,Tio,Mio,Kg,rne,Eio,Cio,MB,wio,Aio,yio,Zg,tne,Lio,xio,EB,$io,kio,Sio,eh,ane,Rio,Pio,CB,Bio,Iio,Nio,Ls,nne,qio,jio,wB,Dio,Gio,AB,Oio,Vio,Xio,oh,sne,zio,Wio,yB,Qio,Hio,Uio,rh,lne,Jio,Yio,LB,Kio,Zio,edo,th,ine,odo,rdo,xB,tdo,ado,ndo,xs,dne,sdo,ldo,$B,ido,ddo,kB,cdo,fdo,mdo,ah,cne,gdo,hdo,SB,pdo,_do,udo,nh,fne,bdo,vdo,RB,Fdo,Tdo,Mdo,$s,mne,Edo,Cdo,PB,wdo,Ado,BB,ydo,Ldo,xdo,ks,gne,$do,kdo,IB,Sdo,Rdo,NB,Pdo,Bdo,Ido,Ss,hne,Ndo,qdo,qB,jdo,Ddo,jB,Gdo,Odo,Vdo,Rs,pne,Xdo,zdo,DB,Wdo,Qdo,GB,Hdo,Udo,Jdo,sh,Ydo,lh,zA,Kdo,_ne,Zdo,yqe,Ei,ih,une,WA,eco,bne,oco,Lqe,Ao,QA,rco,HA,tco,OB,aco,nco,sco,UA,lco,vne,ico,dco,cco,He,JA,fco,Fne,mco,gco,La,hco,Tne,pco,_co,Mne,uco,bco,Ene,vco,Fco,Tco,Y,dh,Cne,Mco,Eco,VB,Cco,wco,Aco,ch,wne,yco,Lco,XB,xco,$co,kco,fh,Ane,Sco,Rco,zB,Pco,Bco,Ico,mh,yne,Nco,qco,WB,jco,Dco,Gco,gh,Lne,Oco,Vco,QB,Xco,zco,Wco,hh,xne,Qco,Hco,HB,Uco,Jco,Yco,ph,$ne,Kco,Zco,UB,efo,ofo,rfo,_h,kne,tfo,afo,JB,nfo,sfo,lfo,uh,Sne,ifo,dfo,YB,cfo,ffo,mfo,bh,Rne,gfo,hfo,KB,pfo,_fo,ufo,vh,Pne,bfo,vfo,ZB,Ffo,Tfo,Mfo,Fh,Bne,Efo,Cfo,eI,wfo,Afo,yfo,Th,Ine,Lfo,xfo,oI,$fo,kfo,Sfo,Mh,Nne,Rfo,Pfo,rI,Bfo,Ifo,Nfo,Eh,qne,qfo,jfo,tI,Dfo,Gfo,Ofo,Ch,jne,Vfo,Xfo,aI,zfo,Wfo,Qfo,wh,Dne,Hfo,Ufo,nI,Jfo,Yfo,Kfo,Ah,Gne,Zfo,emo,sI,omo,rmo,tmo,yh,One,amo,nmo,lI,smo,lmo,imo,Lh,Vne,dmo,cmo,iI,fmo,mmo,gmo,xh,Xne,hmo,pmo,dI,_mo,umo,bmo,$h,zne,vmo,Fmo,cI,Tmo,Mmo,Emo,kh,Wne,Cmo,wmo,fI,Amo,ymo,Lmo,Sh,Qne,xmo,$mo,mI,kmo,Smo,Rmo,Rh,Hne,Pmo,Bmo,gI,Imo,Nmo,qmo,Ph,Une,jmo,Dmo,hI,Gmo,Omo,Vmo,Bh,Jne,Xmo,zmo,pI,Wmo,Qmo,Hmo,Ih,Yne,Umo,Jmo,_I,Ymo,Kmo,Zmo,Nh,Kne,ego,ogo,uI,rgo,tgo,ago,qh,Zne,ngo,sgo,bI,lgo,igo,dgo,jh,cgo,Dh,fgo,Gh,YA,mgo,ese,ggo,xqe,Ci,Oh,ose,KA,hgo,rse,pgo,$qe,yo,ZA,_go,ey,ugo,vI,bgo,vgo,Fgo,oy,Tgo,tse,Mgo,Ego,Cgo,Ue,ry,wgo,ase,Ago,ygo,wi,Lgo,nse,xgo,$go,sse,kgo,Sgo,Rgo,he,Vh,lse,Pgo,Bgo,FI,Igo,Ngo,qgo,Xh,ise,jgo,Dgo,dse,Ggo,Ogo,Vgo,zh,cse,Xgo,zgo,TI,Wgo,Qgo,Hgo,Wh,fse,Ugo,Jgo,MI,Ygo,Kgo,Zgo,Qh,mse,eho,oho,EI,rho,tho,aho,Hh,gse,nho,sho,CI,lho,iho,dho,Uh,hse,cho,fho,wI,mho,gho,hho,Jh,pse,pho,_ho,AI,uho,bho,vho,Yh,_se,Fho,Tho,yI,Mho,Eho,Cho,Kh,use,who,Aho,LI,yho,Lho,xho,Zh,bse,$ho,kho,xI,Sho,Rho,Pho,ep,vse,Bho,Iho,$I,Nho,qho,jho,op,Fse,Dho,Gho,kI,Oho,Vho,Xho,rp,Tse,zho,Who,SI,Qho,Hho,Uho,tp,Mse,Jho,Yho,RI,Kho,Zho,epo,ap,Ese,opo,rpo,PI,tpo,apo,npo,np,Cse,spo,lpo,BI,ipo,dpo,cpo,sp,fpo,lp,mpo,ip,ty,gpo,wse,hpo,kqe,Ai,dp,Ase,ay,ppo,yse,_po,Sqe,Lo,ny,upo,yi,bpo,II,vpo,Fpo,NI,Tpo,Mpo,Epo,sy,Cpo,Lse,wpo,Apo,ypo,at,ly,Lpo,xse,xpo,$po,Li,kpo,$se,Spo,Rpo,qI,Ppo,Bpo,Ipo,cp,Npo,Je,iy,qpo,kse,jpo,Dpo,xa,Gpo,Sse,Opo,Vpo,Rse,Xpo,zpo,Pse,Wpo,Qpo,Hpo,x,fp,Bse,Upo,Jpo,jI,Ypo,Kpo,Zpo,mp,Ise,e_o,o_o,DI,r_o,t_o,a_o,gp,Nse,n_o,s_o,GI,l_o,i_o,d_o,hp,qse,c_o,f_o,OI,m_o,g_o,h_o,pp,jse,p_o,__o,VI,u_o,b_o,v_o,_p,Dse,F_o,T_o,XI,M_o,E_o,C_o,up,Gse,w_o,A_o,zI,y_o,L_o,x_o,bp,Ose,$_o,k_o,WI,S_o,R_o,P_o,vp,Vse,B_o,I_o,QI,N_o,q_o,j_o,Fp,Xse,D_o,G_o,HI,O_o,V_o,X_o,Tp,zse,z_o,W_o,UI,Q_o,H_o,U_o,Mp,Wse,J_o,Y_o,JI,K_o,Z_o,euo,Ep,Qse,ouo,ruo,YI,tuo,auo,nuo,Cp,Hse,suo,luo,KI,iuo,duo,cuo,wp,Use,fuo,muo,ZI,guo,huo,puo,Ap,Jse,_uo,uuo,eN,buo,vuo,Fuo,yp,Yse,Tuo,Muo,oN,Euo,Cuo,wuo,Lp,Kse,Auo,yuo,rN,Luo,xuo,$uo,xp,Zse,kuo,Suo,tN,Ruo,Puo,Buo,$p,ele,Iuo,Nuo,aN,quo,juo,Duo,kp,ole,Guo,Ouo,nN,Vuo,Xuo,zuo,Sp,rle,Wuo,Quo,sN,Huo,Uuo,Juo,Rp,tle,Yuo,Kuo,lN,Zuo,e1o,o1o,Pp,ale,r1o,t1o,iN,a1o,n1o,s1o,Bp,nle,l1o,i1o,dN,d1o,c1o,f1o,Ip,sle,m1o,g1o,cN,h1o,p1o,_1o,Np,lle,u1o,b1o,fN,v1o,F1o,T1o,qp,ile,M1o,E1o,mN,C1o,w1o,A1o,jp,dle,y1o,L1o,gN,x1o,$1o,k1o,Dp,cle,S1o,R1o,hN,P1o,B1o,I1o,Gp,fle,N1o,q1o,pN,j1o,D1o,G1o,Op,mle,O1o,V1o,_N,X1o,z1o,W1o,Ps,gle,Q1o,H1o,uN,U1o,J1o,bN,Y1o,K1o,Z1o,Vp,hle,ebo,obo,vN,rbo,tbo,abo,Xp,ple,nbo,sbo,FN,lbo,ibo,dbo,zp,_le,cbo,fbo,TN,mbo,gbo,hbo,Wp,ule,pbo,_bo,MN,ubo,bbo,vbo,Qp,ble,Fbo,Tbo,EN,Mbo,Ebo,Cbo,Hp,vle,wbo,Abo,CN,ybo,Lbo,xbo,Up,Fle,$bo,kbo,wN,Sbo,Rbo,Pbo,Jp,Tle,Bbo,Ibo,AN,Nbo,qbo,jbo,Yp,Mle,Dbo,Gbo,yN,Obo,Vbo,Xbo,Kp,Ele,zbo,Wbo,LN,Qbo,Hbo,Ubo,Zp,Cle,Jbo,Ybo,xN,Kbo,Zbo,e2o,e_,wle,o2o,r2o,$N,t2o,a2o,n2o,o_,Ale,s2o,l2o,kN,i2o,d2o,c2o,r_,yle,f2o,m2o,SN,g2o,h2o,p2o,t_,Lle,_2o,u2o,RN,b2o,v2o,F2o,a_,xle,T2o,M2o,PN,E2o,C2o,w2o,n_,$le,A2o,y2o,BN,L2o,x2o,$2o,s_,kle,k2o,S2o,IN,R2o,P2o,B2o,l_,Sle,I2o,N2o,NN,q2o,j2o,D2o,i_,Rle,G2o,O2o,qN,V2o,X2o,z2o,d_,Ple,W2o,Q2o,jN,H2o,U2o,J2o,c_,Ble,Y2o,K2o,DN,Z2o,e4o,o4o,f_,Ile,r4o,t4o,GN,a4o,n4o,s4o,m_,Nle,l4o,i4o,ON,d4o,c4o,f4o,g_,qle,m4o,g4o,VN,h4o,p4o,_4o,h_,jle,u4o,b4o,XN,v4o,F4o,T4o,p_,Dle,M4o,E4o,zN,C4o,w4o,A4o,__,Gle,y4o,L4o,WN,x4o,$4o,k4o,u_,Ole,S4o,R4o,QN,P4o,B4o,I4o,b_,Vle,N4o,q4o,HN,j4o,D4o,G4o,v_,Xle,O4o,V4o,UN,X4o,z4o,W4o,F_,zle,Q4o,H4o,JN,U4o,J4o,Y4o,T_,Wle,K4o,Z4o,YN,evo,ovo,rvo,M_,Qle,tvo,avo,KN,nvo,svo,lvo,E_,Hle,ivo,dvo,ZN,cvo,fvo,mvo,C_,Ule,gvo,hvo,eq,pvo,_vo,uvo,w_,Jle,bvo,vvo,oq,Fvo,Tvo,Mvo,A_,Yle,Evo,Cvo,rq,wvo,Avo,yvo,y_,Kle,Lvo,xvo,tq,$vo,kvo,Svo,L_,Zle,Rvo,Pvo,aq,Bvo,Ivo,Nvo,x_,eie,qvo,jvo,nq,Dvo,Gvo,Ovo,$_,oie,Vvo,Xvo,sq,zvo,Wvo,Qvo,k_,rie,Hvo,Uvo,lq,Jvo,Yvo,Kvo,S_,tie,Zvo,e5o,iq,o5o,r5o,t5o,R_,aie,a5o,n5o,dq,s5o,l5o,i5o,P_,nie,d5o,c5o,cq,f5o,m5o,g5o,B_,sie,h5o,p5o,fq,_5o,u5o,b5o,I_,lie,v5o,F5o,mq,T5o,M5o,E5o,N_,iie,C5o,w5o,gq,A5o,y5o,L5o,q_,die,x5o,$5o,hq,k5o,S5o,R5o,j_,cie,P5o,B5o,pq,I5o,N5o,q5o,D_,fie,j5o,D5o,_q,G5o,O5o,V5o,G_,mie,X5o,z5o,uq,W5o,Q5o,H5o,O_,gie,U5o,J5o,bq,Y5o,K5o,Z5o,V_,hie,e3o,o3o,vq,r3o,t3o,a3o,X_,pie,n3o,s3o,Fq,l3o,i3o,d3o,z_,_ie,c3o,f3o,Tq,m3o,g3o,h3o,W_,uie,p3o,_3o,Mq,u3o,b3o,v3o,Q_,bie,F3o,T3o,Eq,M3o,E3o,C3o,H_,vie,w3o,A3o,Cq,y3o,L3o,x3o,U_,Fie,$3o,k3o,wq,S3o,R3o,P3o,J_,Tie,B3o,I3o,Aq,N3o,q3o,j3o,Y_,Mie,D3o,G3o,yq,O3o,V3o,X3o,K_,Eie,z3o,W3o,Lq,Q3o,H3o,U3o,Z_,Cie,J3o,Y3o,xq,K3o,Z3o,eFo,eu,wie,oFo,rFo,$q,tFo,aFo,nFo,ou,Aie,sFo,lFo,kq,iFo,dFo,cFo,ru,yie,fFo,mFo,Sq,gFo,hFo,pFo,tu,Lie,_Fo,uFo,Rq,bFo,vFo,FFo,au,xie,TFo,MFo,Pq,EFo,CFo,wFo,nu,AFo,$ie,yFo,LFo,kie,xFo,$Fo,su,Rqe,xi,lu,Sie,dy,kFo,Rie,SFo,Pqe,xo,cy,RFo,$i,PFo,Bq,BFo,IFo,Iq,NFo,qFo,jFo,fy,DFo,Pie,GFo,OFo,VFo,nt,my,XFo,Bie,zFo,WFo,ki,QFo,Iie,HFo,UFo,Nq,JFo,YFo,KFo,iu,ZFo,Ye,gy,eTo,Nie,oTo,rTo,$a,tTo,qie,aTo,nTo,jie,sTo,lTo,Die,iTo,dTo,cTo,G,du,Gie,fTo,mTo,qq,gTo,hTo,pTo,cu,Oie,_To,uTo,jq,bTo,vTo,FTo,fu,Vie,TTo,MTo,Dq,ETo,CTo,wTo,mu,Xie,ATo,yTo,Gq,LTo,xTo,$To,gu,zie,kTo,STo,Oq,RTo,PTo,BTo,hu,Wie,ITo,NTo,Vq,qTo,jTo,DTo,pu,Qie,GTo,OTo,Xq,VTo,XTo,zTo,_u,Hie,WTo,QTo,zq,HTo,UTo,JTo,uu,Uie,YTo,KTo,Wq,ZTo,e7o,o7o,bu,Jie,r7o,t7o,Qq,a7o,n7o,s7o,vu,Yie,l7o,i7o,Hq,d7o,c7o,f7o,Fu,Kie,m7o,g7o,Uq,h7o,p7o,_7o,Tu,Zie,u7o,b7o,Jq,v7o,F7o,T7o,Mu,ede,M7o,E7o,Yq,C7o,w7o,A7o,Eu,ode,y7o,L7o,Kq,x7o,$7o,k7o,Cu,rde,S7o,R7o,Zq,P7o,B7o,I7o,wu,tde,N7o,q7o,ej,j7o,D7o,G7o,Au,ade,O7o,V7o,oj,X7o,z7o,W7o,yu,nde,Q7o,H7o,rj,U7o,J7o,Y7o,Lu,sde,K7o,Z7o,tj,eMo,oMo,rMo,xu,lde,tMo,aMo,aj,nMo,sMo,lMo,$u,ide,iMo,dMo,nj,cMo,fMo,mMo,ku,dde,gMo,hMo,sj,pMo,_Mo,uMo,Su,cde,bMo,vMo,lj,FMo,TMo,MMo,Ru,fde,EMo,CMo,ij,wMo,AMo,yMo,Pu,mde,LMo,xMo,dj,$Mo,kMo,SMo,Bu,gde,RMo,PMo,cj,BMo,IMo,NMo,Iu,hde,qMo,jMo,fj,DMo,GMo,OMo,Nu,pde,VMo,XMo,mj,zMo,WMo,QMo,qu,_de,HMo,UMo,gj,JMo,YMo,KMo,ju,ude,ZMo,eEo,hj,oEo,rEo,tEo,Du,bde,aEo,nEo,pj,sEo,lEo,iEo,Gu,vde,dEo,cEo,_j,fEo,mEo,gEo,Ou,Fde,hEo,pEo,uj,_Eo,uEo,bEo,Vu,Tde,vEo,FEo,bj,TEo,MEo,EEo,Xu,Mde,CEo,wEo,vj,AEo,yEo,LEo,zu,Ede,xEo,$Eo,Fj,kEo,SEo,REo,Wu,Cde,PEo,BEo,Tj,IEo,NEo,qEo,Qu,wde,jEo,DEo,Mj,GEo,OEo,VEo,Hu,Ade,XEo,zEo,Ej,WEo,QEo,HEo,Uu,yde,UEo,JEo,Cj,YEo,KEo,ZEo,Ju,Lde,eCo,oCo,wj,rCo,tCo,aCo,Yu,nCo,xde,sCo,lCo,$de,iCo,dCo,Ku,Bqe,Si,Zu,kde,hy,cCo,Sde,fCo,Iqe,$o,py,mCo,Ri,gCo,Aj,hCo,pCo,yj,_Co,uCo,bCo,_y,vCo,Rde,FCo,TCo,MCo,st,uy,ECo,Pde,CCo,wCo,Pi,ACo,Bde,yCo,LCo,Lj,xCo,$Co,kCo,e1,SCo,Ke,by,RCo,Ide,PCo,BCo,ka,ICo,Nde,NCo,qCo,qde,jCo,DCo,jde,GCo,OCo,VCo,z,o1,Dde,XCo,zCo,xj,WCo,QCo,HCo,r1,Gde,UCo,JCo,$j,YCo,KCo,ZCo,t1,Ode,ewo,owo,kj,rwo,two,awo,a1,Vde,nwo,swo,Sj,lwo,iwo,dwo,n1,Xde,cwo,fwo,Rj,mwo,gwo,hwo,s1,zde,pwo,_wo,Pj,uwo,bwo,vwo,l1,Wde,Fwo,Two,Bj,Mwo,Ewo,Cwo,i1,Qde,wwo,Awo,Ij,ywo,Lwo,xwo,d1,Hde,$wo,kwo,Nj,Swo,Rwo,Pwo,c1,Ude,Bwo,Iwo,qj,Nwo,qwo,jwo,f1,Jde,Dwo,Gwo,jj,Owo,Vwo,Xwo,m1,Yde,zwo,Wwo,Dj,Qwo,Hwo,Uwo,g1,Kde,Jwo,Ywo,Gj,Kwo,Zwo,e0o,h1,Zde,o0o,r0o,Oj,t0o,a0o,n0o,p1,ece,s0o,l0o,Vj,i0o,d0o,c0o,_1,oce,f0o,m0o,Xj,g0o,h0o,p0o,u1,rce,_0o,u0o,zj,b0o,v0o,F0o,b1,tce,T0o,M0o,Wj,E0o,C0o,w0o,v1,ace,A0o,y0o,Qj,L0o,x0o,$0o,F1,nce,k0o,S0o,Hj,R0o,P0o,B0o,T1,sce,I0o,N0o,Uj,q0o,j0o,D0o,M1,lce,G0o,O0o,Jj,V0o,X0o,z0o,E1,ice,W0o,Q0o,Yj,H0o,U0o,J0o,C1,dce,Y0o,K0o,Kj,Z0o,e6o,o6o,w1,cce,r6o,t6o,Zj,a6o,n6o,s6o,A1,fce,l6o,i6o,eD,d6o,c6o,f6o,y1,mce,m6o,g6o,oD,h6o,p6o,_6o,L1,gce,u6o,b6o,rD,v6o,F6o,T6o,x1,hce,M6o,E6o,tD,C6o,w6o,A6o,$1,pce,y6o,L6o,aD,x6o,$6o,k6o,k1,_ce,S6o,R6o,nD,P6o,B6o,I6o,S1,uce,N6o,q6o,sD,j6o,D6o,G6o,R1,bce,O6o,V6o,lD,X6o,z6o,W6o,P1,vce,Q6o,H6o,iD,U6o,J6o,Y6o,B1,Fce,K6o,Z6o,dD,eAo,oAo,rAo,I1,Tce,tAo,aAo,cD,nAo,sAo,lAo,N1,Mce,iAo,dAo,fD,cAo,fAo,mAo,q1,gAo,Ece,hAo,pAo,Cce,_Ao,uAo,j1,Nqe,Bi,D1,wce,vy,bAo,Ace,vAo,qqe,ko,Fy,FAo,Ii,TAo,mD,MAo,EAo,gD,CAo,wAo,AAo,Ty,yAo,yce,LAo,xAo,$Ao,lt,My,kAo,Lce,SAo,RAo,Ni,PAo,xce,BAo,IAo,hD,NAo,qAo,jAo,G1,DAo,Ze,Ey,GAo,$ce,OAo,VAo,Sa,XAo,kce,zAo,WAo,Sce,QAo,HAo,Rce,UAo,JAo,YAo,Q,O1,Pce,KAo,ZAo,pD,eyo,oyo,ryo,V1,Bce,tyo,ayo,_D,nyo,syo,lyo,X1,Ice,iyo,dyo,uD,cyo,fyo,myo,z1,Nce,gyo,hyo,bD,pyo,_yo,uyo,W1,qce,byo,vyo,vD,Fyo,Tyo,Myo,Q1,jce,Eyo,Cyo,FD,wyo,Ayo,yyo,H1,Dce,Lyo,xyo,TD,$yo,kyo,Syo,U1,Gce,Ryo,Pyo,MD,Byo,Iyo,Nyo,J1,Oce,qyo,jyo,ED,Dyo,Gyo,Oyo,Y1,Vce,Vyo,Xyo,CD,zyo,Wyo,Qyo,K1,Xce,Hyo,Uyo,wD,Jyo,Yyo,Kyo,Z1,zce,Zyo,eLo,AD,oLo,rLo,tLo,eb,Wce,aLo,nLo,yD,sLo,lLo,iLo,ob,Qce,dLo,cLo,LD,fLo,mLo,gLo,rb,Hce,hLo,pLo,xD,_Lo,uLo,bLo,tb,Uce,vLo,FLo,$D,TLo,MLo,ELo,ab,Jce,CLo,wLo,kD,ALo,yLo,LLo,nb,Yce,xLo,$Lo,SD,kLo,SLo,RLo,sb,Kce,PLo,BLo,RD,ILo,NLo,qLo,lb,Zce,jLo,DLo,PD,GLo,OLo,VLo,ib,efe,XLo,zLo,BD,WLo,QLo,HLo,db,ofe,ULo,JLo,ID,YLo,KLo,ZLo,cb,rfe,e8o,o8o,ND,r8o,t8o,a8o,fb,tfe,n8o,s8o,qD,l8o,i8o,d8o,mb,afe,c8o,f8o,jD,m8o,g8o,h8o,gb,nfe,p8o,_8o,DD,u8o,b8o,v8o,hb,sfe,F8o,T8o,GD,M8o,E8o,C8o,pb,lfe,w8o,A8o,OD,y8o,L8o,x8o,_b,ife,$8o,k8o,VD,S8o,R8o,P8o,ub,dfe,B8o,I8o,XD,N8o,q8o,j8o,bb,cfe,D8o,G8o,ffe,O8o,V8o,X8o,vb,mfe,z8o,W8o,zD,Q8o,H8o,U8o,Fb,gfe,J8o,Y8o,WD,K8o,Z8o,e9o,Tb,hfe,o9o,r9o,QD,t9o,a9o,n9o,Mb,pfe,s9o,l9o,HD,i9o,d9o,c9o,Eb,f9o,_fe,m9o,g9o,ufe,h9o,p9o,Cb,jqe,qi,wb,bfe,Cy,_9o,vfe,u9o,Dqe,So,wy,b9o,ji,v9o,UD,F9o,T9o,JD,M9o,E9o,C9o,Ay,w9o,Ffe,A9o,y9o,L9o,it,yy,x9o,Tfe,$9o,k9o,Di,S9o,Mfe,R9o,P9o,YD,B9o,I9o,N9o,Ab,q9o,eo,Ly,j9o,Efe,D9o,G9o,Ra,O9o,Cfe,V9o,X9o,wfe,z9o,W9o,Afe,Q9o,H9o,U9o,_e,yb,yfe,J9o,Y9o,KD,K9o,Z9o,exo,Lb,Lfe,oxo,rxo,ZD,txo,axo,nxo,xb,xfe,sxo,lxo,eG,ixo,dxo,cxo,$b,$fe,fxo,mxo,oG,gxo,hxo,pxo,kb,kfe,_xo,uxo,rG,bxo,vxo,Fxo,Sb,Sfe,Txo,Mxo,tG,Exo,Cxo,wxo,Rb,Rfe,Axo,yxo,aG,Lxo,xxo,$xo,Pb,Pfe,kxo,Sxo,nG,Rxo,Pxo,Bxo,Bb,Bfe,Ixo,Nxo,sG,qxo,jxo,Dxo,Ib,Ife,Gxo,Oxo,lG,Vxo,Xxo,zxo,Nb,Nfe,Wxo,Qxo,iG,Hxo,Uxo,Jxo,qb,qfe,Yxo,Kxo,dG,Zxo,e$o,o$o,jb,jfe,r$o,t$o,cG,a$o,n$o,s$o,Db,Dfe,l$o,i$o,fG,d$o,c$o,f$o,Gb,Gfe,m$o,g$o,mG,h$o,p$o,_$o,Ob,Ofe,u$o,b$o,gG,v$o,F$o,T$o,Vb,M$o,Vfe,E$o,C$o,Xfe,w$o,A$o,Xb,Gqe,Gi,zb,zfe,xy,y$o,Wfe,L$o,Oqe,Ro,$y,x$o,Oi,$$o,hG,k$o,S$o,pG,R$o,P$o,B$o,ky,I$o,Qfe,N$o,q$o,j$o,dt,Sy,D$o,Hfe,G$o,O$o,Vi,V$o,Ufe,X$o,z$o,_G,W$o,Q$o,H$o,Wb,U$o,oo,Ry,J$o,Jfe,Y$o,K$o,Pa,Z$o,Yfe,eko,oko,Kfe,rko,tko,Zfe,ako,nko,sko,N,Qb,eme,lko,iko,uG,dko,cko,fko,Hb,ome,mko,gko,bG,hko,pko,_ko,Ub,rme,uko,bko,vG,vko,Fko,Tko,Jb,tme,Mko,Eko,FG,Cko,wko,Ako,Yb,ame,yko,Lko,TG,xko,$ko,kko,Kb,nme,Sko,Rko,MG,Pko,Bko,Iko,Zb,sme,Nko,qko,EG,jko,Dko,Gko,e2,lme,Oko,Vko,CG,Xko,zko,Wko,o2,ime,Qko,Hko,wG,Uko,Jko,Yko,r2,dme,Kko,Zko,AG,eSo,oSo,rSo,t2,cme,tSo,aSo,yG,nSo,sSo,lSo,a2,fme,iSo,dSo,LG,cSo,fSo,mSo,n2,mme,gSo,hSo,xG,pSo,_So,uSo,s2,gme,bSo,vSo,$G,FSo,TSo,MSo,l2,hme,ESo,CSo,kG,wSo,ASo,ySo,i2,pme,LSo,xSo,SG,$So,kSo,SSo,d2,_me,RSo,PSo,RG,BSo,ISo,NSo,c2,ume,qSo,jSo,PG,DSo,GSo,OSo,f2,bme,VSo,XSo,BG,zSo,WSo,QSo,m2,vme,HSo,USo,IG,JSo,YSo,KSo,g2,Fme,ZSo,eRo,NG,oRo,rRo,tRo,h2,Tme,aRo,nRo,qG,sRo,lRo,iRo,p2,Mme,dRo,cRo,jG,fRo,mRo,gRo,_2,Eme,hRo,pRo,DG,_Ro,uRo,bRo,u2,Cme,vRo,FRo,GG,TRo,MRo,ERo,b2,wme,CRo,wRo,OG,ARo,yRo,LRo,v2,Ame,xRo,$Ro,VG,kRo,SRo,RRo,F2,yme,PRo,BRo,XG,IRo,NRo,qRo,T2,Lme,jRo,DRo,zG,GRo,ORo,VRo,M2,xme,XRo,zRo,WG,WRo,QRo,HRo,E2,$me,URo,JRo,QG,YRo,KRo,ZRo,C2,kme,ePo,oPo,HG,rPo,tPo,aPo,w2,Sme,nPo,sPo,UG,lPo,iPo,dPo,A2,Rme,cPo,fPo,JG,mPo,gPo,hPo,y2,Pme,pPo,_Po,YG,uPo,bPo,vPo,L2,Bme,FPo,TPo,KG,MPo,EPo,CPo,x2,Ime,wPo,APo,ZG,yPo,LPo,xPo,$2,Nme,$Po,kPo,eO,SPo,RPo,PPo,k2,qme,BPo,IPo,oO,NPo,qPo,jPo,S2,jme,DPo,GPo,rO,OPo,VPo,XPo,R2,Dme,zPo,WPo,tO,QPo,HPo,UPo,P2,Gme,JPo,YPo,aO,KPo,ZPo,eBo,B2,Ome,oBo,rBo,nO,tBo,aBo,nBo,I2,Vme,sBo,lBo,sO,iBo,dBo,cBo,N2,Xme,fBo,mBo,lO,gBo,hBo,pBo,q2,zme,_Bo,uBo,iO,bBo,vBo,FBo,j2,Wme,TBo,MBo,dO,EBo,CBo,wBo,D2,ABo,Qme,yBo,LBo,Hme,xBo,$Bo,G2,Vqe,Xi,O2,Ume,Py,kBo,Jme,SBo,Xqe,Po,By,RBo,zi,PBo,cO,BBo,IBo,fO,NBo,qBo,jBo,Iy,DBo,Yme,GBo,OBo,VBo,ct,Ny,XBo,Kme,zBo,WBo,Wi,QBo,Zme,HBo,UBo,mO,JBo,YBo,KBo,V2,ZBo,ro,qy,eIo,ege,oIo,rIo,Ba,tIo,oge,aIo,nIo,rge,sIo,lIo,tge,iIo,dIo,cIo,K,X2,age,fIo,mIo,gO,gIo,hIo,pIo,z2,nge,_Io,uIo,hO,bIo,vIo,FIo,W2,sge,TIo,MIo,pO,EIo,CIo,wIo,Q2,lge,AIo,yIo,_O,LIo,xIo,$Io,H2,ige,kIo,SIo,uO,RIo,PIo,BIo,U2,dge,IIo,NIo,bO,qIo,jIo,DIo,J2,cge,GIo,OIo,vO,VIo,XIo,zIo,Y2,fge,WIo,QIo,FO,HIo,UIo,JIo,K2,mge,YIo,KIo,TO,ZIo,eNo,oNo,Z2,gge,rNo,tNo,MO,aNo,nNo,sNo,e4,hge,lNo,iNo,EO,dNo,cNo,fNo,o4,pge,mNo,gNo,CO,hNo,pNo,_No,r4,_ge,uNo,bNo,wO,vNo,FNo,TNo,t4,uge,MNo,ENo,AO,CNo,wNo,ANo,a4,bge,yNo,LNo,yO,xNo,$No,kNo,n4,vge,SNo,RNo,LO,PNo,BNo,INo,s4,Fge,NNo,qNo,xO,jNo,DNo,GNo,l4,Tge,ONo,VNo,$O,XNo,zNo,WNo,i4,Mge,QNo,HNo,kO,UNo,JNo,YNo,d4,Ege,KNo,ZNo,SO,eqo,oqo,rqo,c4,Cge,tqo,aqo,RO,nqo,sqo,lqo,f4,wge,iqo,dqo,PO,cqo,fqo,mqo,m4,Age,gqo,hqo,BO,pqo,_qo,uqo,g4,yge,bqo,vqo,IO,Fqo,Tqo,Mqo,h4,Lge,Eqo,Cqo,NO,wqo,Aqo,yqo,p4,xge,Lqo,xqo,qO,$qo,kqo,Sqo,_4,$ge,Rqo,Pqo,jO,Bqo,Iqo,Nqo,u4,kge,qqo,jqo,DO,Dqo,Gqo,Oqo,b4,Sge,Vqo,Xqo,GO,zqo,Wqo,Qqo,v4,Hqo,Rge,Uqo,Jqo,Pge,Yqo,Kqo,F4,zqe,Qi,T4,Bge,jy,Zqo,Ige,ejo,Wqe,Bo,Dy,ojo,Hi,rjo,OO,tjo,ajo,VO,njo,sjo,ljo,Gy,ijo,Nge,djo,cjo,fjo,ft,Oy,mjo,qge,gjo,hjo,Ui,pjo,jge,_jo,ujo,XO,bjo,vjo,Fjo,M4,Tjo,to,Vy,Mjo,Dge,Ejo,Cjo,Ia,wjo,Gge,Ajo,yjo,Oge,Ljo,xjo,Vge,$jo,kjo,Sjo,Yr,E4,Xge,Rjo,Pjo,zO,Bjo,Ijo,Njo,C4,zge,qjo,jjo,WO,Djo,Gjo,Ojo,w4,Wge,Vjo,Xjo,QO,zjo,Wjo,Qjo,A4,Qge,Hjo,Ujo,HO,Jjo,Yjo,Kjo,y4,Hge,Zjo,eDo,UO,oDo,rDo,tDo,L4,aDo,Uge,nDo,sDo,Jge,lDo,iDo,x4,Qqe,Ji,$4,Yge,Xy,dDo,Kge,cDo,Hqe,Io,zy,fDo,Yi,mDo,JO,gDo,hDo,YO,pDo,_Do,uDo,Wy,bDo,Zge,vDo,FDo,TDo,mt,Qy,MDo,ehe,EDo,CDo,Ki,wDo,ohe,ADo,yDo,KO,LDo,xDo,$Do,k4,kDo,ao,Hy,SDo,rhe,RDo,PDo,Na,BDo,the,IDo,NDo,ahe,qDo,jDo,nhe,DDo,GDo,ODo,H,S4,she,VDo,XDo,ZO,zDo,WDo,QDo,R4,lhe,HDo,UDo,eV,JDo,YDo,KDo,P4,ihe,ZDo,eGo,oV,oGo,rGo,tGo,B4,dhe,aGo,nGo,rV,sGo,lGo,iGo,I4,che,dGo,cGo,tV,fGo,mGo,gGo,N4,fhe,hGo,pGo,aV,_Go,uGo,bGo,q4,mhe,vGo,FGo,nV,TGo,MGo,EGo,j4,ghe,CGo,wGo,sV,AGo,yGo,LGo,D4,hhe,xGo,$Go,lV,kGo,SGo,RGo,G4,phe,PGo,BGo,iV,IGo,NGo,qGo,O4,_he,jGo,DGo,dV,GGo,OGo,VGo,V4,uhe,XGo,zGo,cV,WGo,QGo,HGo,X4,bhe,UGo,JGo,fV,YGo,KGo,ZGo,z4,vhe,eOo,oOo,mV,rOo,tOo,aOo,W4,Fhe,nOo,sOo,gV,lOo,iOo,dOo,Q4,The,cOo,fOo,hV,mOo,gOo,hOo,H4,Mhe,pOo,_Oo,pV,uOo,bOo,vOo,U4,Ehe,FOo,TOo,_V,MOo,EOo,COo,J4,Che,wOo,AOo,uV,yOo,LOo,xOo,Y4,whe,$Oo,kOo,bV,SOo,ROo,POo,K4,Ahe,BOo,IOo,vV,NOo,qOo,jOo,Z4,yhe,DOo,GOo,FV,OOo,VOo,XOo,ev,Lhe,zOo,WOo,TV,QOo,HOo,UOo,ov,xhe,JOo,YOo,MV,KOo,ZOo,eVo,rv,$he,oVo,rVo,EV,tVo,aVo,nVo,tv,khe,sVo,lVo,CV,iVo,dVo,cVo,av,She,fVo,mVo,wV,gVo,hVo,pVo,nv,Rhe,_Vo,uVo,AV,bVo,vVo,FVo,sv,Phe,TVo,MVo,yV,EVo,CVo,wVo,lv,Bhe,AVo,yVo,LV,LVo,xVo,$Vo,iv,Ihe,kVo,SVo,xV,RVo,PVo,BVo,dv,Nhe,IVo,NVo,$V,qVo,jVo,DVo,cv,qhe,GVo,OVo,kV,VVo,XVo,zVo,fv,jhe,WVo,QVo,SV,HVo,UVo,JVo,mv,YVo,Dhe,KVo,ZVo,Ghe,eXo,oXo,gv,Uqe,Zi,hv,Ohe,Uy,rXo,Vhe,tXo,Jqe,No,Jy,aXo,ed,nXo,RV,sXo,lXo,PV,iXo,dXo,cXo,Yy,fXo,Xhe,mXo,gXo,hXo,gt,Ky,pXo,zhe,_Xo,uXo,od,bXo,Whe,vXo,FXo,BV,TXo,MXo,EXo,pv,CXo,no,Zy,wXo,Qhe,AXo,yXo,qa,LXo,Hhe,xXo,$Xo,Uhe,kXo,SXo,Jhe,RXo,PXo,BXo,V,_v,Yhe,IXo,NXo,IV,qXo,jXo,DXo,uv,Khe,GXo,OXo,NV,VXo,XXo,zXo,bv,Zhe,WXo,QXo,qV,HXo,UXo,JXo,vv,epe,YXo,KXo,jV,ZXo,ezo,ozo,Fv,ope,rzo,tzo,DV,azo,nzo,szo,Tv,rpe,lzo,izo,GV,dzo,czo,fzo,Mv,tpe,mzo,gzo,OV,hzo,pzo,_zo,Ev,ape,uzo,bzo,VV,vzo,Fzo,Tzo,Cv,npe,Mzo,Ezo,XV,Czo,wzo,Azo,wv,spe,yzo,Lzo,zV,xzo,$zo,kzo,Av,lpe,Szo,Rzo,WV,Pzo,Bzo,Izo,yv,ipe,Nzo,qzo,QV,jzo,Dzo,Gzo,Lv,dpe,Ozo,Vzo,HV,Xzo,zzo,Wzo,xv,cpe,Qzo,Hzo,UV,Uzo,Jzo,Yzo,$v,fpe,Kzo,Zzo,JV,eWo,oWo,rWo,kv,mpe,tWo,aWo,YV,nWo,sWo,lWo,Sv,gpe,iWo,dWo,KV,cWo,fWo,mWo,Rv,hpe,gWo,hWo,ZV,pWo,_Wo,uWo,Pv,ppe,bWo,vWo,eX,FWo,TWo,MWo,Bv,_pe,EWo,CWo,oX,wWo,AWo,yWo,Iv,upe,LWo,xWo,rX,$Wo,kWo,SWo,Nv,bpe,RWo,PWo,tX,BWo,IWo,NWo,qv,vpe,qWo,jWo,aX,DWo,GWo,OWo,jv,Fpe,VWo,XWo,nX,zWo,WWo,QWo,Dv,Tpe,HWo,UWo,sX,JWo,YWo,KWo,Gv,Mpe,ZWo,eQo,lX,oQo,rQo,tQo,Ov,Epe,aQo,nQo,iX,sQo,lQo,iQo,Vv,Cpe,dQo,cQo,dX,fQo,mQo,gQo,Xv,wpe,hQo,pQo,cX,_Qo,uQo,bQo,zv,Ape,vQo,FQo,fX,TQo,MQo,EQo,Wv,ype,CQo,wQo,mX,AQo,yQo,LQo,Qv,Lpe,xQo,$Qo,gX,kQo,SQo,RQo,Hv,xpe,PQo,BQo,hX,IQo,NQo,qQo,Uv,$pe,jQo,DQo,pX,GQo,OQo,VQo,Jv,kpe,XQo,zQo,_X,WQo,QQo,HQo,Yv,Spe,UQo,JQo,uX,YQo,KQo,ZQo,Kv,Rpe,eHo,oHo,bX,rHo,tHo,aHo,Zv,Ppe,nHo,sHo,vX,lHo,iHo,dHo,e5,Bpe,cHo,fHo,FX,mHo,gHo,hHo,o5,Ipe,pHo,_Ho,TX,uHo,bHo,vHo,r5,FHo,Npe,THo,MHo,qpe,EHo,CHo,t5,Yqe,rd,a5,jpe,eL,wHo,Dpe,AHo,Kqe,qo,oL,yHo,td,LHo,MX,xHo,$Ho,EX,kHo,SHo,RHo,rL,PHo,Gpe,BHo,IHo,NHo,ht,tL,qHo,Ope,jHo,DHo,ad,GHo,Vpe,OHo,VHo,CX,XHo,zHo,WHo,n5,QHo,so,aL,HHo,Xpe,UHo,JHo,ja,YHo,zpe,KHo,ZHo,Wpe,eUo,oUo,Qpe,rUo,tUo,aUo,Hpe,s5,Upe,nUo,sUo,wX,lUo,iUo,dUo,l5,cUo,Jpe,fUo,mUo,Ype,gUo,hUo,i5,Zqe,nd,d5,Kpe,nL,pUo,Zpe,_Uo,eje,jo,sL,uUo,sd,bUo,AX,vUo,FUo,yX,TUo,MUo,EUo,lL,CUo,e_e,wUo,AUo,yUo,pt,iL,LUo,o_e,xUo,$Uo,ld,kUo,r_e,SUo,RUo,LX,PUo,BUo,IUo,c5,NUo,lo,dL,qUo,t_e,jUo,DUo,Da,GUo,a_e,OUo,VUo,n_e,XUo,zUo,s_e,WUo,QUo,HUo,ve,f5,l_e,UUo,JUo,xX,YUo,KUo,ZUo,m5,i_e,eJo,oJo,$X,rJo,tJo,aJo,g5,d_e,nJo,sJo,kX,lJo,iJo,dJo,h5,c_e,cJo,fJo,SX,mJo,gJo,hJo,Bs,f_e,pJo,_Jo,RX,uJo,bJo,PX,vJo,FJo,TJo,p5,m_e,MJo,EJo,BX,CJo,wJo,AJo,_5,g_e,yJo,LJo,IX,xJo,$Jo,kJo,_t,h_e,SJo,RJo,NX,PJo,BJo,qX,IJo,NJo,jX,qJo,jJo,DJo,u5,p_e,GJo,OJo,DX,VJo,XJo,zJo,b5,__e,WJo,QJo,GX,HJo,UJo,JJo,v5,u_e,YJo,KJo,OX,ZJo,eYo,oYo,F5,b_e,rYo,tYo,VX,aYo,nYo,sYo,T5,v_e,lYo,iYo,XX,dYo,cYo,fYo,M5,F_e,mYo,gYo,zX,hYo,pYo,_Yo,E5,T_e,uYo,bYo,WX,vYo,FYo,TYo,C5,MYo,M_e,EYo,CYo,E_e,wYo,AYo,w5,oje,id,A5,C_e,cL,yYo,w_e,LYo,rje,Do,fL,xYo,dd,$Yo,QX,kYo,SYo,HX,RYo,PYo,BYo,mL,IYo,A_e,NYo,qYo,jYo,ut,gL,DYo,y_e,GYo,OYo,cd,VYo,L_e,XYo,zYo,UX,WYo,QYo,HYo,y5,UYo,io,hL,JYo,x_e,YYo,KYo,Ga,ZYo,$_e,eKo,oKo,k_e,rKo,tKo,S_e,aKo,nKo,sKo,R_e,L5,P_e,lKo,iKo,JX,dKo,cKo,fKo,x5,mKo,B_e,gKo,hKo,I_e,pKo,_Ko,$5,tje,fd,k5,N_e,pL,uKo,q_e,bKo,aje,Go,_L,vKo,md,FKo,YX,TKo,MKo,KX,EKo,CKo,wKo,uL,AKo,j_e,yKo,LKo,xKo,bt,bL,$Ko,D_e,kKo,SKo,gd,RKo,G_e,PKo,BKo,ZX,IKo,NKo,qKo,S5,jKo,co,vL,DKo,O_e,GKo,OKo,Oa,VKo,V_e,XKo,zKo,X_e,WKo,QKo,z_e,HKo,UKo,JKo,ke,R5,W_e,YKo,KKo,ez,ZKo,eZo,oZo,P5,Q_e,rZo,tZo,oz,aZo,nZo,sZo,B5,H_e,lZo,iZo,rz,dZo,cZo,fZo,I5,U_e,mZo,gZo,tz,hZo,pZo,_Zo,N5,J_e,uZo,bZo,az,vZo,FZo,TZo,q5,Y_e,MZo,EZo,nz,CZo,wZo,AZo,j5,K_e,yZo,LZo,sz,xZo,$Zo,kZo,D5,Z_e,SZo,RZo,lz,PZo,BZo,IZo,G5,eue,NZo,qZo,iz,jZo,DZo,GZo,O5,OZo,oue,VZo,XZo,rue,zZo,WZo,V5,nje,hd,X5,tue,FL,QZo,aue,HZo,sje,Oo,TL,UZo,pd,JZo,dz,YZo,KZo,cz,ZZo,eer,oer,ML,rer,nue,ter,aer,ner,vt,EL,ser,sue,ler,ier,_d,der,lue,cer,fer,fz,mer,ger,her,z5,per,fo,CL,_er,iue,uer,ber,Va,ver,due,Fer,Ter,cue,Mer,Eer,fue,Cer,wer,Aer,Kr,W5,mue,yer,Ler,mz,xer,$er,ker,Q5,gue,Ser,Rer,gz,Per,Ber,Ier,H5,hue,Ner,qer,hz,jer,Der,Ger,U5,pue,Oer,Ver,pz,Xer,zer,Wer,J5,_ue,Qer,Her,_z,Uer,Jer,Yer,Y5,Ker,uue,Zer,eor,bue,oor,ror,K5,lje,ud,Z5,vue,wL,tor,Fue,aor,ije,Vo,AL,nor,bd,sor,uz,lor,ior,bz,dor,cor,mor,yL,gor,Tue,hor,por,_or,Ft,LL,uor,Mue,bor,vor,vd,For,Eue,Tor,Mor,vz,Eor,Cor,wor,e3,Aor,mo,xL,yor,Cue,Lor,xor,Xa,$or,wue,kor,Sor,Aue,Ror,Por,yue,Bor,Ior,Nor,Se,o3,Lue,qor,jor,Fz,Dor,Gor,Oor,r3,xue,Vor,Xor,Tz,zor,Wor,Qor,t3,$ue,Hor,Uor,Mz,Jor,Yor,Kor,a3,kue,Zor,err,Ez,orr,rrr,trr,n3,Sue,arr,nrr,Cz,srr,lrr,irr,s3,Rue,drr,crr,wz,frr,mrr,grr,l3,Pue,hrr,prr,Az,_rr,urr,brr,i3,Bue,vrr,Frr,yz,Trr,Mrr,Err,d3,Iue,Crr,wrr,Lz,Arr,yrr,Lrr,c3,xrr,Nue,$rr,krr,que,Srr,Rrr,f3,dje,Fd,m3,jue,$L,Prr,Due,Brr,cje,Xo,kL,Irr,Td,Nrr,xz,qrr,jrr,$z,Drr,Grr,Orr,SL,Vrr,Gue,Xrr,zrr,Wrr,Tt,RL,Qrr,Oue,Hrr,Urr,Md,Jrr,Vue,Yrr,Krr,kz,Zrr,etr,otr,g3,rtr,go,PL,ttr,Xue,atr,ntr,za,str,zue,ltr,itr,Wue,dtr,ctr,Que,ftr,mtr,gtr,BL,h3,Hue,htr,ptr,Sz,_tr,utr,btr,p3,Uue,vtr,Ftr,Rz,Ttr,Mtr,Etr,_3,Ctr,Jue,wtr,Atr,Yue,ytr,Ltr,u3,fje,Ed,b3,Kue,IL,xtr,Zue,$tr,mje,zo,NL,ktr,Cd,Str,Pz,Rtr,Ptr,Bz,Btr,Itr,Ntr,qL,qtr,e1e,jtr,Dtr,Gtr,Mt,jL,Otr,o1e,Vtr,Xtr,wd,ztr,r1e,Wtr,Qtr,Iz,Htr,Utr,Jtr,v3,Ytr,ho,DL,Ktr,t1e,Ztr,ear,Wa,oar,a1e,rar,tar,n1e,aar,nar,s1e,sar,lar,iar,Zr,F3,l1e,dar,car,Nz,far,mar,gar,T3,i1e,har,par,qz,_ar,uar,bar,M3,d1e,Far,Tar,jz,Mar,Ear,Car,E3,c1e,war,Aar,Dz,yar,Lar,xar,C3,f1e,$ar,kar,Gz,Sar,Rar,Par,w3,Bar,m1e,Iar,Nar,g1e,qar,jar,A3,gje,Ad,y3,h1e,GL,Dar,p1e,Gar,hje,Wo,OL,Oar,yd,Var,Oz,Xar,zar,Vz,War,Qar,Har,VL,Uar,_1e,Jar,Yar,Kar,Et,XL,Zar,u1e,enr,onr,Ld,rnr,b1e,tnr,anr,Xz,nnr,snr,lnr,L3,inr,po,zL,dnr,v1e,cnr,fnr,Qa,mnr,F1e,gnr,hnr,T1e,pnr,_nr,M1e,unr,bnr,vnr,xd,x3,E1e,Fnr,Tnr,zz,Mnr,Enr,Cnr,$3,C1e,wnr,Anr,Wz,ynr,Lnr,xnr,k3,w1e,$nr,knr,Qz,Snr,Rnr,Pnr,S3,Bnr,A1e,Inr,Nnr,y1e,qnr,jnr,R3,pje,$d,P3,L1e,WL,Dnr,x1e,Gnr,_je,Qo,QL,Onr,kd,Vnr,Hz,Xnr,znr,Uz,Wnr,Qnr,Hnr,HL,Unr,$1e,Jnr,Ynr,Knr,Ct,UL,Znr,k1e,esr,osr,Sd,rsr,S1e,tsr,asr,Jz,nsr,ssr,lsr,B3,isr,_o,JL,dsr,R1e,csr,fsr,Ha,msr,P1e,gsr,hsr,B1e,psr,_sr,I1e,usr,bsr,vsr,YL,I3,N1e,Fsr,Tsr,Yz,Msr,Esr,Csr,N3,q1e,wsr,Asr,Kz,ysr,Lsr,xsr,q3,$sr,j1e,ksr,Ssr,D1e,Rsr,Psr,j3,uje,Rd,D3,G1e,KL,Bsr,O1e,Isr,bje,Ho,ZL,Nsr,Pd,qsr,Zz,jsr,Dsr,eW,Gsr,Osr,Vsr,e8,Xsr,V1e,zsr,Wsr,Qsr,wt,o8,Hsr,X1e,Usr,Jsr,Bd,Ysr,z1e,Ksr,Zsr,oW,elr,olr,rlr,G3,tlr,uo,r8,alr,W1e,nlr,slr,Ua,llr,Q1e,ilr,dlr,H1e,clr,flr,U1e,mlr,glr,hlr,J1e,O3,Y1e,plr,_lr,rW,ulr,blr,vlr,V3,Flr,K1e,Tlr,Mlr,Z1e,Elr,Clr,X3,vje,Id,z3,ebe,t8,wlr,obe,Alr,Fje,Uo,a8,ylr,Nd,Llr,tW,xlr,$lr,aW,klr,Slr,Rlr,n8,Plr,rbe,Blr,Ilr,Nlr,At,s8,qlr,tbe,jlr,Dlr,qd,Glr,abe,Olr,Vlr,nW,Xlr,zlr,Wlr,W3,Qlr,bo,l8,Hlr,nbe,Ulr,Jlr,Ja,Ylr,sbe,Klr,Zlr,lbe,eir,oir,ibe,rir,tir,air,et,Q3,dbe,nir,sir,sW,lir,iir,dir,H3,cbe,cir,fir,lW,mir,gir,hir,U3,fbe,pir,_ir,iW,uir,bir,vir,J3,mbe,Fir,Tir,dW,Mir,Eir,Cir,Y3,gbe,wir,Air,cW,yir,Lir,xir,K3,$ir,hbe,kir,Sir,pbe,Rir,Pir,Z3,Tje,jd,eF,_be,i8,Bir,ube,Iir,Mje,Jo,d8,Nir,Dd,qir,fW,jir,Dir,mW,Gir,Oir,Vir,c8,Xir,bbe,zir,Wir,Qir,yt,f8,Hir,vbe,Uir,Jir,Gd,Yir,Fbe,Kir,Zir,gW,edr,odr,rdr,oF,tdr,vo,m8,adr,Tbe,ndr,sdr,Ya,ldr,Mbe,idr,ddr,Ebe,cdr,fdr,Cbe,mdr,gdr,hdr,wbe,rF,Abe,pdr,_dr,hW,udr,bdr,vdr,tF,Fdr,ybe,Tdr,Mdr,Lbe,Edr,Cdr,aF,Eje,Od,nF,xbe,g8,wdr,$be,Adr,Cje,Yo,h8,ydr,Vd,Ldr,pW,xdr,$dr,_W,kdr,Sdr,Rdr,p8,Pdr,kbe,Bdr,Idr,Ndr,Lt,_8,qdr,Sbe,jdr,Ddr,Xd,Gdr,Rbe,Odr,Vdr,uW,Xdr,zdr,Wdr,sF,Qdr,wr,u8,Hdr,Pbe,Udr,Jdr,Ka,Ydr,Bbe,Kdr,Zdr,Ibe,ecr,ocr,Nbe,rcr,tcr,acr,q,lF,qbe,ncr,scr,bW,lcr,icr,dcr,iF,jbe,ccr,fcr,vW,mcr,gcr,hcr,dF,Dbe,pcr,_cr,FW,ucr,bcr,vcr,cF,Gbe,Fcr,Tcr,TW,Mcr,Ecr,Ccr,fF,Obe,wcr,Acr,MW,ycr,Lcr,xcr,mF,Vbe,$cr,kcr,EW,Scr,Rcr,Pcr,gF,Xbe,Bcr,Icr,CW,Ncr,qcr,jcr,hF,zbe,Dcr,Gcr,wW,Ocr,Vcr,Xcr,pF,Wbe,zcr,Wcr,AW,Qcr,Hcr,Ucr,_F,Qbe,Jcr,Ycr,yW,Kcr,Zcr,efr,uF,Hbe,ofr,rfr,LW,tfr,afr,nfr,bF,Ube,sfr,lfr,xW,ifr,dfr,cfr,vF,Jbe,ffr,mfr,$W,gfr,hfr,pfr,FF,Ybe,_fr,ufr,kW,bfr,vfr,Ffr,TF,Kbe,Tfr,Mfr,SW,Efr,Cfr,wfr,MF,Zbe,Afr,yfr,RW,Lfr,xfr,$fr,EF,e2e,kfr,Sfr,PW,Rfr,Pfr,Bfr,Is,o2e,Ifr,Nfr,BW,qfr,jfr,IW,Dfr,Gfr,Ofr,CF,r2e,Vfr,Xfr,NW,zfr,Wfr,Qfr,wF,t2e,Hfr,Ufr,qW,Jfr,Yfr,Kfr,AF,a2e,Zfr,emr,jW,omr,rmr,tmr,yF,n2e,amr,nmr,DW,smr,lmr,imr,LF,s2e,dmr,cmr,GW,fmr,mmr,gmr,xF,l2e,hmr,pmr,OW,_mr,umr,bmr,$F,i2e,vmr,Fmr,VW,Tmr,Mmr,Emr,kF,d2e,Cmr,wmr,XW,Amr,ymr,Lmr,SF,c2e,xmr,$mr,zW,kmr,Smr,Rmr,RF,f2e,Pmr,Bmr,WW,Imr,Nmr,qmr,PF,m2e,jmr,Dmr,QW,Gmr,Omr,Vmr,BF,g2e,Xmr,zmr,HW,Wmr,Qmr,Hmr,IF,h2e,Umr,Jmr,UW,Ymr,Kmr,Zmr,NF,p2e,egr,ogr,JW,rgr,tgr,agr,qF,_2e,ngr,sgr,YW,lgr,igr,dgr,jF,u2e,cgr,fgr,KW,mgr,ggr,hgr,DF,b2e,pgr,_gr,ZW,ugr,bgr,vgr,GF,v2e,Fgr,Tgr,eQ,Mgr,Egr,Cgr,OF,F2e,wgr,Agr,oQ,ygr,Lgr,xgr,VF,T2e,$gr,kgr,rQ,Sgr,Rgr,Pgr,XF,M2e,Bgr,Igr,tQ,Ngr,qgr,jgr,zF,E2e,Dgr,Ggr,aQ,Ogr,Vgr,Xgr,WF,C2e,zgr,Wgr,nQ,Qgr,Hgr,Ugr,QF,w2e,Jgr,Ygr,sQ,Kgr,Zgr,ehr,HF,A2e,ohr,rhr,lQ,thr,ahr,nhr,UF,y2e,shr,lhr,iQ,ihr,dhr,chr,JF,L2e,fhr,mhr,dQ,ghr,hhr,phr,YF,x2e,_hr,uhr,cQ,bhr,vhr,Fhr,KF,wje,zd,ZF,$2e,b8,Thr,k2e,Mhr,Aje,Ko,v8,Ehr,Wd,Chr,fQ,whr,Ahr,mQ,yhr,Lhr,xhr,F8,$hr,S2e,khr,Shr,Rhr,xt,T8,Phr,R2e,Bhr,Ihr,Qd,Nhr,P2e,qhr,jhr,gQ,Dhr,Ghr,Ohr,eT,Vhr,Ar,M8,Xhr,B2e,zhr,Whr,Za,Qhr,I2e,Hhr,Uhr,N2e,Jhr,Yhr,q2e,Khr,Zhr,epr,se,oT,j2e,opr,rpr,hQ,tpr,apr,npr,rT,D2e,spr,lpr,pQ,ipr,dpr,cpr,tT,G2e,fpr,mpr,_Q,gpr,hpr,ppr,aT,O2e,_pr,upr,uQ,bpr,vpr,Fpr,nT,V2e,Tpr,Mpr,bQ,Epr,Cpr,wpr,sT,X2e,Apr,ypr,vQ,Lpr,xpr,$pr,lT,z2e,kpr,Spr,FQ,Rpr,Ppr,Bpr,iT,W2e,Ipr,Npr,TQ,qpr,jpr,Dpr,dT,Q2e,Gpr,Opr,MQ,Vpr,Xpr,zpr,cT,H2e,Wpr,Qpr,EQ,Hpr,Upr,Jpr,fT,U2e,Ypr,Kpr,CQ,Zpr,e_r,o_r,mT,J2e,r_r,t_r,wQ,a_r,n_r,s_r,gT,Y2e,l_r,i_r,AQ,d_r,c_r,f_r,hT,K2e,m_r,g_r,yQ,h_r,p_r,__r,pT,Z2e,u_r,b_r,LQ,v_r,F_r,T_r,_T,e4e,M_r,E_r,xQ,C_r,w_r,A_r,uT,o4e,y_r,L_r,$Q,x_r,$_r,k_r,bT,r4e,S_r,R_r,kQ,P_r,B_r,I_r,vT,t4e,N_r,q_r,SQ,j_r,D_r,G_r,FT,a4e,O_r,V_r,RQ,X_r,z_r,W_r,TT,n4e,Q_r,H_r,PQ,U_r,J_r,Y_r,MT,s4e,K_r,Z_r,BQ,eur,our,rur,ET,l4e,tur,aur,IQ,nur,sur,lur,CT,yje,Hd,wT,i4e,E8,iur,d4e,dur,Lje,Zo,C8,cur,Ud,fur,NQ,mur,gur,qQ,hur,pur,_ur,w8,uur,c4e,bur,vur,Fur,$t,A8,Tur,f4e,Mur,Eur,Jd,Cur,m4e,wur,Aur,jQ,yur,Lur,xur,AT,$ur,yr,y8,kur,g4e,Sur,Rur,en,Pur,h4e,Bur,Iur,p4e,Nur,qur,_4e,jur,Dur,Gur,Me,yT,u4e,Our,Vur,DQ,Xur,zur,Wur,LT,b4e,Qur,Hur,GQ,Uur,Jur,Yur,xT,v4e,Kur,Zur,OQ,e1r,o1r,r1r,$T,F4e,t1r,a1r,VQ,n1r,s1r,l1r,kT,T4e,i1r,d1r,XQ,c1r,f1r,m1r,ST,M4e,g1r,h1r,zQ,p1r,_1r,u1r,RT,E4e,b1r,v1r,WQ,F1r,T1r,M1r,PT,C4e,E1r,C1r,QQ,w1r,A1r,y1r,BT,w4e,L1r,x1r,HQ,$1r,k1r,S1r,IT,A4e,R1r,P1r,UQ,B1r,I1r,N1r,NT,y4e,q1r,j1r,JQ,D1r,G1r,O1r,qT,L4e,V1r,X1r,YQ,z1r,W1r,Q1r,jT,xje,Yd,DT,x4e,L8,H1r,$4e,U1r,$je,er,x8,J1r,Kd,Y1r,KQ,K1r,Z1r,ZQ,ebr,obr,rbr,$8,tbr,k4e,abr,nbr,sbr,kt,k8,lbr,S4e,ibr,dbr,Zd,cbr,R4e,fbr,mbr,eH,gbr,hbr,pbr,GT,_br,Lr,S8,ubr,P4e,bbr,vbr,on,Fbr,B4e,Tbr,Mbr,I4e,Ebr,Cbr,N4e,wbr,Abr,ybr,rn,OT,q4e,Lbr,xbr,oH,$br,kbr,Sbr,VT,j4e,Rbr,Pbr,rH,Bbr,Ibr,Nbr,XT,D4e,qbr,jbr,tH,Dbr,Gbr,Obr,zT,G4e,Vbr,Xbr,aH,zbr,Wbr,Qbr,WT,kje,ec,QT,O4e,R8,Hbr,V4e,Ubr,Sje,or,P8,Jbr,oc,Ybr,nH,Kbr,Zbr,sH,e2r,o2r,r2r,B8,t2r,X4e,a2r,n2r,s2r,St,I8,l2r,z4e,i2r,d2r,rc,c2r,W4e,f2r,m2r,lH,g2r,h2r,p2r,HT,_2r,xr,N8,u2r,Q4e,b2r,v2r,tn,F2r,H4e,T2r,M2r,U4e,E2r,C2r,J4e,w2r,A2r,y2r,ie,UT,Y4e,L2r,x2r,iH,$2r,k2r,S2r,JT,K4e,R2r,P2r,dH,B2r,I2r,N2r,YT,Z4e,q2r,j2r,cH,D2r,G2r,O2r,KT,eve,V2r,X2r,fH,z2r,W2r,Q2r,ZT,ove,H2r,U2r,mH,J2r,Y2r,K2r,e7,rve,Z2r,e4r,gH,o4r,r4r,t4r,o7,tve,a4r,n4r,hH,s4r,l4r,i4r,r7,ave,d4r,c4r,pH,f4r,m4r,g4r,t7,nve,h4r,p4r,_H,_4r,u4r,b4r,a7,sve,v4r,F4r,uH,T4r,M4r,E4r,n7,lve,C4r,w4r,bH,A4r,y4r,L4r,s7,ive,x4r,$4r,vH,k4r,S4r,R4r,l7,dve,P4r,B4r,FH,I4r,N4r,q4r,i7,cve,j4r,D4r,TH,G4r,O4r,V4r,d7,fve,X4r,z4r,MH,W4r,Q4r,H4r,c7,mve,U4r,J4r,EH,Y4r,K4r,Z4r,f7,gve,evr,ovr,CH,rvr,tvr,avr,m7,hve,nvr,svr,wH,lvr,ivr,dvr,g7,pve,cvr,fvr,AH,mvr,gvr,hvr,h7,_ve,pvr,_vr,yH,uvr,bvr,vvr,p7,Rje,tc,_7,uve,q8,Fvr,bve,Tvr,Pje,rr,j8,Mvr,ac,Evr,LH,Cvr,wvr,xH,Avr,yvr,Lvr,D8,xvr,vve,$vr,kvr,Svr,Rt,G8,Rvr,Fve,Pvr,Bvr,nc,Ivr,Tve,Nvr,qvr,$H,jvr,Dvr,Gvr,u7,Ovr,$r,O8,Vvr,Mve,Xvr,zvr,an,Wvr,Eve,Qvr,Hvr,Cve,Uvr,Jvr,wve,Yvr,Kvr,Zvr,ye,b7,Ave,e5r,o5r,kH,r5r,t5r,a5r,v7,yve,n5r,s5r,SH,l5r,i5r,d5r,F7,Lve,c5r,f5r,RH,m5r,g5r,h5r,T7,xve,p5r,_5r,PH,u5r,b5r,v5r,M7,$ve,F5r,T5r,BH,M5r,E5r,C5r,E7,kve,w5r,A5r,IH,y5r,L5r,x5r,C7,Sve,$5r,k5r,NH,S5r,R5r,P5r,w7,Rve,B5r,I5r,qH,N5r,q5r,j5r,A7,Pve,D5r,G5r,jH,O5r,V5r,X5r,y7,Bve,z5r,W5r,DH,Q5r,H5r,U5r,L7,Bje,sc,x7,Ive,V8,J5r,Nve,Y5r,Ije,tr,X8,K5r,lc,Z5r,GH,e3r,o3r,OH,r3r,t3r,a3r,z8,n3r,qve,s3r,l3r,i3r,Pt,W8,d3r,jve,c3r,f3r,ic,m3r,Dve,g3r,h3r,VH,p3r,_3r,u3r,$7,b3r,kr,Q8,v3r,Gve,F3r,T3r,nn,M3r,Ove,E3r,C3r,Vve,w3r,A3r,Xve,y3r,L3r,x3r,oe,k7,zve,$3r,k3r,XH,S3r,R3r,P3r,S7,Wve,B3r,I3r,zH,N3r,q3r,j3r,R7,Qve,D3r,G3r,WH,O3r,V3r,X3r,P7,Hve,z3r,W3r,QH,Q3r,H3r,U3r,B7,Uve,J3r,Y3r,HH,K3r,Z3r,eFr,I7,Jve,oFr,rFr,UH,tFr,aFr,nFr,N7,Yve,sFr,lFr,JH,iFr,dFr,cFr,q7,Kve,fFr,mFr,YH,gFr,hFr,pFr,j7,Zve,_Fr,uFr,KH,bFr,vFr,FFr,D7,e5e,TFr,MFr,ZH,EFr,CFr,wFr,G7,o5e,AFr,yFr,eU,LFr,xFr,$Fr,O7,r5e,kFr,SFr,oU,RFr,PFr,BFr,V7,t5e,IFr,NFr,rU,qFr,jFr,DFr,X7,a5e,GFr,OFr,tU,VFr,XFr,zFr,z7,n5e,WFr,QFr,aU,HFr,UFr,JFr,W7,s5e,YFr,KFr,nU,ZFr,eTr,oTr,Q7,l5e,rTr,tTr,sU,aTr,nTr,sTr,H7,i5e,lTr,iTr,lU,dTr,cTr,fTr,U7,d5e,mTr,gTr,iU,hTr,pTr,_Tr,J7,c5e,uTr,bTr,dU,vTr,FTr,TTr,Y7,f5e,MTr,ETr,cU,CTr,wTr,ATr,K7,m5e,yTr,LTr,fU,xTr,$Tr,kTr,Z7,g5e,STr,RTr,mU,PTr,BTr,ITr,eM,h5e,NTr,qTr,gU,jTr,DTr,GTr,oM,p5e,OTr,VTr,hU,XTr,zTr,WTr,rM,_5e,QTr,HTr,pU,UTr,JTr,YTr,tM,Nje,dc,aM,u5e,H8,KTr,b5e,ZTr,qje,ar,U8,e7r,cc,o7r,_U,r7r,t7r,uU,a7r,n7r,s7r,J8,l7r,v5e,i7r,d7r,c7r,Bt,Y8,f7r,F5e,m7r,g7r,fc,h7r,T5e,p7r,_7r,bU,u7r,b7r,v7r,nM,F7r,Sr,K8,T7r,M5e,M7r,E7r,sn,C7r,E5e,w7r,A7r,C5e,y7r,L7r,w5e,x7r,$7r,k7r,pe,sM,A5e,S7r,R7r,vU,P7r,B7r,I7r,lM,y5e,N7r,q7r,FU,j7r,D7r,G7r,iM,L5e,O7r,V7r,TU,X7r,z7r,W7r,dM,x5e,Q7r,H7r,MU,U7r,J7r,Y7r,cM,$5e,K7r,Z7r,EU,eMr,oMr,rMr,fM,k5e,tMr,aMr,CU,nMr,sMr,lMr,mM,S5e,iMr,dMr,wU,cMr,fMr,mMr,gM,R5e,gMr,hMr,AU,pMr,_Mr,uMr,hM,P5e,bMr,vMr,yU,FMr,TMr,MMr,pM,B5e,EMr,CMr,LU,wMr,AMr,yMr,_M,I5e,LMr,xMr,xU,$Mr,kMr,SMr,uM,N5e,RMr,PMr,$U,BMr,IMr,NMr,bM,q5e,qMr,jMr,kU,DMr,GMr,OMr,vM,j5e,VMr,XMr,SU,zMr,WMr,QMr,FM,D5e,HMr,UMr,RU,JMr,YMr,KMr,TM,G5e,ZMr,eEr,PU,oEr,rEr,tEr,MM,O5e,aEr,nEr,BU,sEr,lEr,iEr,EM,jje,mc,CM,V5e,Z8,dEr,X5e,cEr,Dje,nr,e9,fEr,gc,mEr,IU,gEr,hEr,NU,pEr,_Er,uEr,o9,bEr,z5e,vEr,FEr,TEr,It,r9,MEr,W5e,EEr,CEr,hc,wEr,Q5e,AEr,yEr,qU,LEr,xEr,$Er,wM,kEr,Rr,t9,SEr,H5e,REr,PEr,ln,BEr,U5e,IEr,NEr,J5e,qEr,jEr,Y5e,DEr,GEr,OEr,a9,AM,K5e,VEr,XEr,jU,zEr,WEr,QEr,yM,Z5e,HEr,UEr,DU,JEr,YEr,KEr,LM,Gje,pc,xM,e3e,n9,ZEr,o3e,eCr,Oje,sr,s9,oCr,_c,rCr,GU,tCr,aCr,OU,nCr,sCr,lCr,l9,iCr,r3e,dCr,cCr,fCr,Nt,i9,mCr,t3e,gCr,hCr,uc,pCr,a3e,_Cr,uCr,VU,bCr,vCr,FCr,$M,TCr,Pr,d9,MCr,n3e,ECr,CCr,dn,wCr,s3e,ACr,yCr,l3e,LCr,xCr,i3e,$Cr,kCr,SCr,d3e,kM,c3e,RCr,PCr,XU,BCr,ICr,NCr,SM,Vje,bc,RM,f3e,c9,qCr,m3e,jCr,Xje,lr,f9,DCr,vc,GCr,zU,OCr,VCr,WU,XCr,zCr,WCr,m9,QCr,g3e,HCr,UCr,JCr,qt,g9,YCr,h3e,KCr,ZCr,Fc,ewr,p3e,owr,rwr,QU,twr,awr,nwr,PM,swr,Br,h9,lwr,_3e,iwr,dwr,cn,cwr,u3e,fwr,mwr,b3e,gwr,hwr,v3e,pwr,_wr,uwr,de,BM,F3e,bwr,vwr,HU,Fwr,Twr,Mwr,IM,T3e,Ewr,Cwr,UU,wwr,Awr,ywr,NM,M3e,Lwr,xwr,JU,$wr,kwr,Swr,qM,E3e,Rwr,Pwr,YU,Bwr,Iwr,Nwr,jM,C3e,qwr,jwr,KU,Dwr,Gwr,Owr,DM,w3e,Vwr,Xwr,ZU,zwr,Wwr,Qwr,GM,A3e,Hwr,Uwr,eJ,Jwr,Ywr,Kwr,OM,y3e,Zwr,e0r,oJ,o0r,r0r,t0r,VM,L3e,a0r,n0r,rJ,s0r,l0r,i0r,XM,x3e,d0r,c0r,tJ,f0r,m0r,g0r,zM,$3e,h0r,p0r,aJ,_0r,u0r,b0r,WM,k3e,v0r,F0r,nJ,T0r,M0r,E0r,QM,S3e,C0r,w0r,sJ,A0r,y0r,L0r,HM,R3e,x0r,$0r,lJ,k0r,S0r,R0r,UM,P3e,P0r,B0r,iJ,I0r,N0r,q0r,JM,B3e,j0r,D0r,dJ,G0r,O0r,V0r,YM,I3e,X0r,z0r,cJ,W0r,Q0r,H0r,KM,N3e,U0r,J0r,fJ,Y0r,K0r,Z0r,ZM,q3e,e6r,o6r,mJ,r6r,t6r,a6r,eE,j3e,n6r,s6r,gJ,l6r,i6r,d6r,oE,zje,Tc,rE,D3e,p9,c6r,G3e,f6r,Wje,ir,_9,m6r,Mc,g6r,hJ,h6r,p6r,pJ,_6r,u6r,b6r,u9,v6r,O3e,F6r,T6r,M6r,jt,b9,E6r,V3e,C6r,w6r,Ec,A6r,X3e,y6r,L6r,_J,x6r,$6r,k6r,tE,S6r,Ir,v9,R6r,z3e,P6r,B6r,fn,I6r,W3e,N6r,q6r,Q3e,j6r,D6r,H3e,G6r,O6r,V6r,ce,aE,U3e,X6r,z6r,uJ,W6r,Q6r,H6r,nE,J3e,U6r,J6r,bJ,Y6r,K6r,Z6r,sE,Y3e,eAr,oAr,vJ,rAr,tAr,aAr,lE,K3e,nAr,sAr,FJ,lAr,iAr,dAr,iE,Z3e,cAr,fAr,TJ,mAr,gAr,hAr,dE,eFe,pAr,_Ar,MJ,uAr,bAr,vAr,cE,oFe,FAr,TAr,EJ,MAr,EAr,CAr,fE,rFe,wAr,AAr,CJ,yAr,LAr,xAr,mE,tFe,$Ar,kAr,wJ,SAr,RAr,PAr,gE,aFe,BAr,IAr,AJ,NAr,qAr,jAr,hE,nFe,DAr,GAr,yJ,OAr,VAr,XAr,pE,sFe,zAr,WAr,LJ,QAr,HAr,UAr,_E,lFe,JAr,YAr,xJ,KAr,ZAr,eyr,uE,iFe,oyr,ryr,$J,tyr,ayr,nyr,bE,dFe,syr,lyr,kJ,iyr,dyr,cyr,vE,cFe,fyr,myr,SJ,gyr,hyr,pyr,FE,fFe,_yr,uyr,RJ,byr,vyr,Fyr,TE,mFe,Tyr,Myr,PJ,Eyr,Cyr,wyr,ME,gFe,Ayr,yyr,BJ,Lyr,xyr,$yr,EE,hFe,kyr,Syr,IJ,Ryr,Pyr,Byr,CE,Qje,Cc,wE,pFe,F9,Iyr,_Fe,Nyr,Hje,dr,T9,qyr,wc,jyr,NJ,Dyr,Gyr,qJ,Oyr,Vyr,Xyr,M9,zyr,uFe,Wyr,Qyr,Hyr,Dt,E9,Uyr,bFe,Jyr,Yyr,Ac,Kyr,vFe,Zyr,eLr,jJ,oLr,rLr,tLr,AE,aLr,Nr,C9,nLr,FFe,sLr,lLr,mn,iLr,TFe,dLr,cLr,MFe,fLr,mLr,EFe,gLr,hLr,pLr,CFe,yE,wFe,_Lr,uLr,DJ,bLr,vLr,FLr,LE,Uje,yc,xE,AFe,w9,TLr,yFe,MLr,Jje,cr,A9,ELr,Lc,CLr,GJ,wLr,ALr,OJ,yLr,LLr,xLr,y9,$Lr,LFe,kLr,SLr,RLr,Gt,L9,PLr,xFe,BLr,ILr,xc,NLr,$Fe,qLr,jLr,VJ,DLr,GLr,OLr,$E,VLr,qr,x9,XLr,kFe,zLr,WLr,gn,QLr,SFe,HLr,ULr,RFe,JLr,YLr,PFe,KLr,ZLr,e8r,BFe,kE,IFe,o8r,r8r,XJ,t8r,a8r,n8r,SE,Yje,$c,RE,NFe,$9,s8r,qFe,l8r,Kje,fr,k9,i8r,kc,d8r,zJ,c8r,f8r,WJ,m8r,g8r,h8r,S9,p8r,jFe,_8r,u8r,b8r,Ot,R9,v8r,DFe,F8r,T8r,Sc,M8r,GFe,E8r,C8r,QJ,w8r,A8r,y8r,PE,L8r,jr,P9,x8r,OFe,$8r,k8r,hn,S8r,VFe,R8r,P8r,XFe,B8r,I8r,zFe,N8r,q8r,j8r,te,BE,WFe,D8r,G8r,HJ,O8r,V8r,X8r,IE,QFe,z8r,W8r,UJ,Q8r,H8r,U8r,NE,HFe,J8r,Y8r,JJ,K8r,Z8r,e9r,qE,UFe,o9r,r9r,YJ,t9r,a9r,n9r,jE,JFe,s9r,l9r,KJ,i9r,d9r,c9r,DE,YFe,f9r,m9r,ZJ,g9r,h9r,p9r,GE,KFe,_9r,u9r,eY,b9r,v9r,F9r,OE,ZFe,T9r,M9r,oY,E9r,C9r,w9r,VE,eTe,A9r,y9r,rY,L9r,x9r,$9r,XE,oTe,k9r,S9r,tY,R9r,P9r,B9r,zE,rTe,I9r,N9r,aY,q9r,j9r,D9r,WE,tTe,G9r,O9r,nY,V9r,X9r,z9r,QE,aTe,W9r,Q9r,sY,H9r,U9r,J9r,HE,nTe,Y9r,K9r,lY,Z9r,exr,oxr,UE,sTe,rxr,txr,iY,axr,nxr,sxr,JE,lTe,lxr,ixr,dY,dxr,cxr,fxr,YE,iTe,mxr,gxr,cY,hxr,pxr,_xr,KE,dTe,uxr,bxr,fY,vxr,Fxr,Txr,ZE,cTe,Mxr,Exr,mY,Cxr,wxr,Axr,eC,fTe,yxr,Lxr,gY,xxr,$xr,kxr,oC,mTe,Sxr,Rxr,hY,Pxr,Bxr,Ixr,rC,gTe,Nxr,qxr,pY,jxr,Dxr,Gxr,tC,hTe,Oxr,Vxr,_Y,Xxr,zxr,Wxr,aC,pTe,Qxr,Hxr,uY,Uxr,Jxr,Yxr,nC,_Te,Kxr,Zxr,bY,e$r,o$r,r$r,sC,Zje,Rc,lC,uTe,B9,t$r,bTe,a$r,eDe,mr,I9,n$r,Pc,s$r,vY,l$r,i$r,FY,d$r,c$r,f$r,N9,m$r,vTe,g$r,h$r,p$r,Vt,q9,_$r,FTe,u$r,b$r,Bc,v$r,TTe,F$r,T$r,TY,M$r,E$r,C$r,iC,w$r,Dr,j9,A$r,MTe,y$r,L$r,pn,x$r,ETe,$$r,k$r,CTe,S$r,R$r,wTe,P$r,B$r,I$r,Re,dC,ATe,N$r,q$r,MY,j$r,D$r,G$r,cC,yTe,O$r,V$r,EY,X$r,z$r,W$r,fC,LTe,Q$r,H$r,CY,U$r,J$r,Y$r,mC,xTe,K$r,Z$r,wY,ekr,okr,rkr,gC,$Te,tkr,akr,AY,nkr,skr,lkr,hC,kTe,ikr,dkr,yY,ckr,fkr,mkr,pC,STe,gkr,hkr,LY,pkr,_kr,ukr,_C,RTe,bkr,vkr,xY,Fkr,Tkr,Mkr,uC,PTe,Ekr,Ckr,$Y,wkr,Akr,ykr,bC,oDe,Ic,vC,BTe,D9,Lkr,ITe,xkr,rDe,gr,G9,$kr,Nc,kkr,kY,Skr,Rkr,SY,Pkr,Bkr,Ikr,O9,Nkr,NTe,qkr,jkr,Dkr,Xt,V9,Gkr,qTe,Okr,Vkr,qc,Xkr,jTe,zkr,Wkr,RY,Qkr,Hkr,Ukr,FC,Jkr,Gr,X9,Ykr,DTe,Kkr,Zkr,_n,eSr,GTe,oSr,rSr,OTe,tSr,aSr,VTe,nSr,sSr,lSr,Ee,TC,XTe,iSr,dSr,PY,cSr,fSr,mSr,MC,zTe,gSr,hSr,BY,pSr,_Sr,uSr,EC,WTe,bSr,vSr,IY,FSr,TSr,MSr,CC,QTe,ESr,CSr,NY,wSr,ASr,ySr,wC,HTe,LSr,xSr,qY,$Sr,kSr,SSr,AC,UTe,RSr,PSr,jY,BSr,ISr,NSr,yC,JTe,qSr,jSr,DY,DSr,GSr,OSr,LC,YTe,VSr,XSr,GY,zSr,WSr,QSr,xC,KTe,HSr,USr,OY,JSr,YSr,KSr,$C,ZTe,ZSr,eRr,VY,oRr,rRr,tRr,kC,e7e,aRr,nRr,XY,sRr,lRr,iRr,SC,o7e,dRr,cRr,zY,fRr,mRr,gRr,RC,tDe,jc,PC,r7e,z9,hRr,t7e,pRr,aDe,hr,W9,_Rr,Dc,uRr,WY,bRr,vRr,QY,FRr,TRr,MRr,Q9,ERr,a7e,CRr,wRr,ARr,zt,H9,yRr,n7e,LRr,xRr,Gc,$Rr,s7e,kRr,SRr,HY,RRr,PRr,BRr,BC,IRr,Or,U9,NRr,l7e,qRr,jRr,un,DRr,i7e,GRr,ORr,d7e,VRr,XRr,c7e,zRr,WRr,QRr,Le,IC,f7e,HRr,URr,UY,JRr,YRr,KRr,NC,m7e,ZRr,ePr,JY,oPr,rPr,tPr,qC,g7e,aPr,nPr,YY,sPr,lPr,iPr,jC,h7e,dPr,cPr,KY,fPr,mPr,gPr,DC,p7e,hPr,pPr,ZY,_Pr,uPr,bPr,GC,_7e,vPr,FPr,eK,TPr,MPr,EPr,OC,u7e,CPr,wPr,oK,APr,yPr,LPr,VC,b7e,xPr,$Pr,rK,kPr,SPr,RPr,XC,v7e,PPr,BPr,tK,IPr,NPr,qPr,zC,F7e,jPr,DPr,aK,GPr,OPr,VPr,WC,nDe,Oc,QC,T7e,J9,XPr,M7e,zPr,sDe,pr,Y9,WPr,Vc,QPr,nK,HPr,UPr,sK,JPr,YPr,KPr,K9,ZPr,E7e,eBr,oBr,rBr,Wt,Z9,tBr,C7e,aBr,nBr,Xc,sBr,w7e,lBr,iBr,lK,dBr,cBr,fBr,HC,mBr,Vr,ex,gBr,A7e,hBr,pBr,bn,_Br,y7e,uBr,bBr,L7e,vBr,FBr,x7e,TBr,MBr,EBr,Pe,UC,$7e,CBr,wBr,iK,ABr,yBr,LBr,JC,k7e,xBr,$Br,dK,kBr,SBr,RBr,YC,S7e,PBr,BBr,cK,IBr,NBr,qBr,KC,R7e,jBr,DBr,fK,GBr,OBr,VBr,ZC,P7e,XBr,zBr,mK,WBr,QBr,HBr,ew,B7e,UBr,JBr,gK,YBr,KBr,ZBr,ow,I7e,eIr,oIr,hK,rIr,tIr,aIr,rw,N7e,nIr,sIr,pK,lIr,iIr,dIr,tw,q7e,cIr,fIr,_K,mIr,gIr,hIr,aw,lDe,zc,nw,j7e,ox,pIr,D7e,_Ir,iDe,_r,rx,uIr,Wc,bIr,uK,vIr,FIr,bK,TIr,MIr,EIr,tx,CIr,G7e,wIr,AIr,yIr,Qt,ax,LIr,O7e,xIr,$Ir,Qc,kIr,V7e,SIr,RIr,vK,PIr,BIr,IIr,sw,NIr,Xr,nx,qIr,X7e,jIr,DIr,vn,GIr,z7e,OIr,VIr,W7e,XIr,zIr,Q7e,WIr,QIr,HIr,xe,lw,H7e,UIr,JIr,FK,YIr,KIr,ZIr,iw,U7e,eNr,oNr,TK,rNr,tNr,aNr,dw,J7e,nNr,sNr,MK,lNr,iNr,dNr,cw,Y7e,cNr,fNr,EK,mNr,gNr,hNr,fw,K7e,pNr,_Nr,CK,uNr,bNr,vNr,mw,Z7e,FNr,TNr,wK,MNr,ENr,CNr,gw,eMe,wNr,ANr,AK,yNr,LNr,xNr,hw,oMe,$Nr,kNr,yK,SNr,RNr,PNr,pw,rMe,BNr,INr,LK,NNr,qNr,jNr,_w,tMe,DNr,GNr,xK,ONr,VNr,XNr,uw,dDe,Hc,bw,aMe,sx,zNr,nMe,WNr,cDe,ur,lx,QNr,Uc,HNr,$K,UNr,JNr,kK,YNr,KNr,ZNr,ix,eqr,sMe,oqr,rqr,tqr,Ht,dx,aqr,lMe,nqr,sqr,Jc,lqr,iMe,iqr,dqr,SK,cqr,fqr,mqr,vw,gqr,zr,cx,hqr,dMe,pqr,_qr,Fn,uqr,cMe,bqr,vqr,fMe,Fqr,Tqr,mMe,Mqr,Eqr,Cqr,$e,Fw,gMe,wqr,Aqr,RK,yqr,Lqr,xqr,Tw,hMe,$qr,kqr,PK,Sqr,Rqr,Pqr,Mw,pMe,Bqr,Iqr,BK,Nqr,qqr,jqr,Ew,_Me,Dqr,Gqr,IK,Oqr,Vqr,Xqr,Cw,uMe,zqr,Wqr,NK,Qqr,Hqr,Uqr,ww,bMe,Jqr,Yqr,qK,Kqr,Zqr,ejr,Aw,vMe,ojr,rjr,jK,tjr,ajr,njr,yw,FMe,sjr,ljr,DK,ijr,djr,cjr,Lw,TMe,fjr,mjr,GK,gjr,hjr,pjr,xw,MMe,_jr,ujr,OK,bjr,vjr,Fjr,$w,fDe,Yc,kw,EMe,fx,Tjr,CMe,Mjr,mDe,br,mx,Ejr,Kc,Cjr,VK,wjr,Ajr,XK,yjr,Ljr,xjr,gx,$jr,wMe,kjr,Sjr,Rjr,Ut,hx,Pjr,AMe,Bjr,Ijr,Zc,Njr,yMe,qjr,jjr,zK,Djr,Gjr,Ojr,Sw,Vjr,Wr,px,Xjr,LMe,zjr,Wjr,Tn,Qjr,xMe,Hjr,Ujr,$Me,Jjr,Yjr,kMe,Kjr,Zjr,eDr,De,Rw,SMe,oDr,rDr,WK,tDr,aDr,nDr,Pw,RMe,sDr,lDr,QK,iDr,dDr,cDr,Bw,PMe,fDr,mDr,HK,gDr,hDr,pDr,Iw,BMe,_Dr,uDr,UK,bDr,vDr,FDr,Nw,IMe,TDr,MDr,JK,EDr,CDr,wDr,qw,NMe,ADr,yDr,YK,LDr,xDr,$Dr,jw,qMe,kDr,SDr,KK,RDr,PDr,BDr,Dw,jMe,IDr,NDr,ZK,qDr,jDr,DDr,Gw,gDe,ef,Ow,DMe,_x,GDr,GMe,ODr,hDe,vr,ux,VDr,of,XDr,eZ,zDr,WDr,oZ,QDr,HDr,UDr,bx,JDr,OMe,YDr,KDr,ZDr,Jt,vx,eGr,VMe,oGr,rGr,rf,tGr,XMe,aGr,nGr,rZ,sGr,lGr,iGr,Vw,dGr,Qr,Fx,cGr,zMe,fGr,mGr,Mn,gGr,WMe,hGr,pGr,QMe,_Gr,uGr,HMe,bGr,vGr,FGr,Ge,Xw,UMe,TGr,MGr,tZ,EGr,CGr,wGr,zw,JMe,AGr,yGr,aZ,LGr,xGr,$Gr,Ww,YMe,kGr,SGr,nZ,RGr,PGr,BGr,Qw,KMe,IGr,NGr,sZ,qGr,jGr,DGr,Hw,ZMe,GGr,OGr,lZ,VGr,XGr,zGr,Uw,eEe,WGr,QGr,iZ,HGr,UGr,JGr,Jw,oEe,YGr,KGr,dZ,ZGr,eOr,oOr,Yw,rEe,rOr,tOr,cZ,aOr,nOr,sOr,Kw,pDe,tf,Zw,tEe,Tx,lOr,aEe,iOr,_De,Fr,Mx,dOr,af,cOr,fZ,fOr,mOr,mZ,gOr,hOr,pOr,Ex,_Or,nEe,uOr,bOr,vOr,Yt,Cx,FOr,sEe,TOr,MOr,nf,EOr,lEe,COr,wOr,gZ,AOr,yOr,LOr,e0,xOr,Hr,wx,$Or,iEe,kOr,SOr,En,ROr,dEe,POr,BOr,cEe,IOr,NOr,fEe,qOr,jOr,DOr,mEe,o0,gEe,GOr,OOr,hZ,VOr,XOr,zOr,r0,uDe,sf,t0,hEe,Ax,WOr,pEe,QOr,bDe,Tr,yx,HOr,lf,UOr,pZ,JOr,YOr,_Z,KOr,ZOr,eVr,Lx,oVr,_Ee,rVr,tVr,aVr,Kt,xx,nVr,uEe,sVr,lVr,df,iVr,bEe,dVr,cVr,uZ,fVr,mVr,gVr,a0,hVr,Ur,$x,pVr,vEe,_Vr,uVr,Cn,bVr,FEe,vVr,FVr,TEe,TVr,MVr,MEe,EVr,CVr,wVr,kx,n0,EEe,AVr,yVr,bZ,LVr,xVr,$Vr,s0,CEe,kVr,SVr,vZ,RVr,PVr,BVr,l0,vDe,cf,i0,wEe,Sx,IVr,AEe,NVr,FDe,Mr,Rx,qVr,ff,jVr,FZ,DVr,GVr,TZ,OVr,VVr,XVr,Px,zVr,yEe,WVr,QVr,HVr,Zt,Bx,UVr,LEe,JVr,YVr,mf,KVr,xEe,ZVr,eXr,MZ,oXr,rXr,tXr,d0,aXr,Jr,Ix,nXr,$Ee,sXr,lXr,wn,iXr,kEe,dXr,cXr,SEe,fXr,mXr,REe,gXr,hXr,pXr,PEe,c0,BEe,_Xr,uXr,EZ,bXr,vXr,FXr,f0,TDe;return d=new re({}),wa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),SA=new re({}),RA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Tf=new TXr({props:{warning:!0,$$slots:{default:[mkt]},$$scope:{ctx:L}}}),PA=new re({}),BA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/configuration_auto.py#L587"}}),qA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/configuration_auto.py#L610"}}),wg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[gkt]},$$scope:{ctx:L}}}),jA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/configuration_auto.py#L733"}}),DA=new re({}),GA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/tokenization_auto.py#L390"}}),XA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17354/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/tokenization_auto.py#L404"}}),sh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[hkt]},$$scope:{ctx:L}}}),zA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/tokenization_auto.py#L603"}}),WA=new re({}),QA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),JA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17354/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/feature_extraction_auto.py#L205"}}),jh=new TXr({props:{$$slots:{default:[pkt]},$$scope:{ctx:L}}}),Dh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[_kt]},$$scope:{ctx:L}}}),YA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/feature_extraction_auto.py#L332"}}),KA=new re({}),ZA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/processing_auto.py#L88"}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/processing_auto.py#L102"}}),sp=new TXr({props:{$$slots:{default:[ukt]},$$scope:{ctx:L}}}),lp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[bkt]},$$scope:{ctx:L}}}),ty=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/processing_auto.py#L255"}}),ay=new re({}),ny=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L739"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),cp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[vkt]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),su=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Fkt]},$$scope:{ctx:L}}}),dy=new re({}),cy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L746"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),iu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Tkt]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Ku=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Mkt]},$$scope:{ctx:L}}}),hy=new re({}),py=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L761"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),e1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Ekt]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),j1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Ckt]},$$scope:{ctx:L}}}),vy=new re({}),Fy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L768"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),G1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[wkt]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Cb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Akt]},$$scope:{ctx:L}}}),Cy=new re({}),wy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L775"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Ab=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ykt]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Xb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Lkt]},$$scope:{ctx:L}}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L784"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Wb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[xkt]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),G2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[$kt]},$$scope:{ctx:L}}}),Py=new re({}),By=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L818"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),V2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[kkt]},$$scope:{ctx:L}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),F4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Skt]},$$scope:{ctx:L}}}),jy=new re({}),Dy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L825"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),M4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Rkt]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),x4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Pkt]},$$scope:{ctx:L}}}),Xy=new re({}),zy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L811"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),k4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Bkt]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),gv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Ikt]},$$scope:{ctx:L}}}),Uy=new re({}),Jy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L793"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),pv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Nkt]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),t5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[qkt]},$$scope:{ctx:L}}}),eL=new re({}),oL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L800"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),n5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),i5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Dkt]},$$scope:{ctx:L}}}),nL=new re({}),sL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L834"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),c5=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Gkt]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),w5=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Okt]},$$scope:{ctx:L}}}),cL=new re({}),fL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L873"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),y5=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Vkt]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),$5=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Xkt]},$$scope:{ctx:L}}}),pL=new re({}),_L=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L880"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[zkt]},$$scope:{ctx:L}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),V5=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Wkt]},$$scope:{ctx:L}}}),FL=new re({}),TL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L903"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),z5=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Qkt]},$$scope:{ctx:L}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),K5=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Hkt]},$$scope:{ctx:L}}}),wL=new re({}),AL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L887"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),f3=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),$L=new re({}),kL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L894"}}),RL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),g3=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Ykt]},$$scope:{ctx:L}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Kkt]},$$scope:{ctx:L}}}),IL=new re({}),NL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L912"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),v3=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Zkt]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),A3=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[eSt]},$$scope:{ctx:L}}}),GL=new re({}),OL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L919"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),L3=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[oSt]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),R3=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[rSt]},$$scope:{ctx:L}}}),WL=new re({}),QL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L866"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),B3=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),j3=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),KL=new re({}),ZL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L841"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),G3=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[nSt]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),X3=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),t8=new re({}),a8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L848"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),W3=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Z3=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[iSt]},$$scope:{ctx:L}}}),i8=new re({}),d8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L857"}}),f8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[dSt]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),aF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[cSt]},$$scope:{ctx:L}}}),g8=new re({}),h8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),_8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),sF=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[fSt]},$$scope:{ctx:L}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[mSt]},$$scope:{ctx:L}}}),b8=new re({}),v8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[gSt]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),CT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[hSt]},$$scope:{ctx:L}}}),E8=new re({}),C8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),AT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[pSt]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[_St]},$$scope:{ctx:L}}}),L8=new re({}),x8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[uSt]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),WT=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[bSt]},$$scope:{ctx:L}}}),R8=new re({}),P8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),I8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),HT=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[vSt]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),p7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[FSt]},$$scope:{ctx:L}}}),q8=new re({}),j8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),u7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[TSt]},$$scope:{ctx:L}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),L7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[MSt]},$$scope:{ctx:L}}}),V8=new re({}),X8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),$7=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[ESt]},$$scope:{ctx:L}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),tM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[CSt]},$$scope:{ctx:L}}}),H8=new re({}),U8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),nM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[wSt]},$$scope:{ctx:L}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),EM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ASt]},$$scope:{ctx:L}}}),Z8=new re({}),e9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),r9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),wM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[ySt]},$$scope:{ctx:L}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),LM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[LSt]},$$scope:{ctx:L}}}),n9=new re({}),s9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),i9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),$M=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[xSt]},$$scope:{ctx:L}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),SM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[$St]},$$scope:{ctx:L}}}),c9=new re({}),f9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),g9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),PM=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[kSt]},$$scope:{ctx:L}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),oE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[SSt]},$$scope:{ctx:L}}}),p9=new re({}),_9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),b9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),tE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[RSt]},$$scope:{ctx:L}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),CE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[PSt]},$$scope:{ctx:L}}}),F9=new re({}),T9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),E9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),AE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[BSt]},$$scope:{ctx:L}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ISt]},$$scope:{ctx:L}}}),w9=new re({}),A9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),L9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),$E=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[NSt]},$$scope:{ctx:L}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),SE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qSt]},$$scope:{ctx:L}}}),$9=new re({}),k9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),R9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),PE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[jSt]},$$scope:{ctx:L}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),sC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[DSt]},$$scope:{ctx:L}}}),B9=new re({}),I9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),q9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[GSt]},$$scope:{ctx:L}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[OSt]},$$scope:{ctx:L}}}),D9=new re({}),G9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),V9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[VSt]},$$scope:{ctx:L}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),RC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[XSt]},$$scope:{ctx:L}}}),z9=new re({}),W9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),H9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),BC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[zSt]},$$scope:{ctx:L}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[WSt]},$$scope:{ctx:L}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[QSt]},$$scope:{ctx:L}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[HSt]},$$scope:{ctx:L}}}),ox=new re({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[USt]},$$scope:{ctx:L}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),uw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[JSt]},$$scope:{ctx:L}}}),sx=new re({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),vw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[YSt]},$$scope:{ctx:L}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),$w=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[KSt]},$$scope:{ctx:L}}}),fx=new re({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Sw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[ZSt]},$$scope:{ctx:L}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Gw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[eRt]},$$scope:{ctx:L}}}),_x=new re({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Vw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[oRt]},$$scope:{ctx:L}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Kw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[rRt]},$$scope:{ctx:L}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),e0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[tRt]},$$scope:{ctx:L}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),r0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[aRt]},$$scope:{ctx:L}}}),Ax=new re({}),yx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),a0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[nRt]},$$scope:{ctx:L}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),l0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[sRt]},$$scope:{ctx:L}}}),Sx=new re({}),Rx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),d0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[lRt]},$$scope:{ctx:L}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),f0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[iRt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),mi=o("Auto Classes"),_f=l(),tt=a("p"),gi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=a("code"),LA=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),pi=o("Instantiating one of "),yn=a("a"),xA=o("AutoConfig"),Ln=o(", "),xn=a("a"),$A=o("AutoModel"),_i=o(`, and
`),$n=a("a"),kA=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),bf=l(),F(wa.$$.fragment),Qe=l(),Ae=a("p"),J$=o("will create a model that is an instance of "),bi=a("a"),Y$=o("BertModel"),K$=o("."),Eo=l(),Aa=a("p"),Z$=o("There is one class of "),vf=a("code"),ek=o("AutoModel"),xOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),bqe=l(),vi=a("h2"),Ff=a("a"),_oe=a("span"),F(SA.$$.fragment),$Oe=l(),uoe=a("span"),kOe=o("Extending the Auto Classes"),vqe=l(),kn=a("p"),SOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),boe=a("code"),ROe=o("NewModel"),POe=o(", make sure you have a "),voe=a("code"),BOe=o("NewModelConfig"),IOe=o(` then you can add those to the auto
classes like this:`),Fqe=l(),F(RA.$$.fragment),Tqe=l(),ok=a("p"),NOe=o("You will then be able to use the auto classes like you would usually do!"),Mqe=l(),F(Tf.$$.fragment),Eqe=l(),Fi=a("h2"),Mf=a("a"),Foe=a("span"),F(PA.$$.fragment),qOe=l(),Toe=a("span"),jOe=o("AutoConfig"),Cqe=l(),Co=a("div"),F(BA.$$.fragment),DOe=l(),IA=a("p"),GOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),rk=a("a"),OOe=o("from_pretrained()"),VOe=o(" class method."),XOe=l(),NA=a("p"),zOe=o("This class cannot be instantiated directly using "),Moe=a("code"),WOe=o("__init__()"),QOe=o(" (throws an error)."),HOe=l(),Er=a("div"),F(qA.$$.fragment),UOe=l(),Eoe=a("p"),JOe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),YOe=l(),Ti=a("p"),KOe=o("The configuration class to instantiate is selected based on the "),Coe=a("code"),ZOe=o("model_type"),eVe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),woe=a("code"),oVe=o("pretrained_model_name_or_path"),rVe=o(":"),tVe=l(),A=a("ul"),Ef=a("li"),Aoe=a("strong"),aVe=o("albert"),nVe=o(" \u2014 "),tk=a("a"),sVe=o("AlbertConfig"),lVe=o(" (ALBERT model)"),iVe=l(),Cf=a("li"),yoe=a("strong"),dVe=o("bart"),cVe=o(" \u2014 "),ak=a("a"),fVe=o("BartConfig"),mVe=o(" (BART model)"),gVe=l(),wf=a("li"),Loe=a("strong"),hVe=o("beit"),pVe=o(" \u2014 "),nk=a("a"),_Ve=o("BeitConfig"),uVe=o(" (BEiT model)"),bVe=l(),Af=a("li"),xoe=a("strong"),vVe=o("bert"),FVe=o(" \u2014 "),sk=a("a"),TVe=o("BertConfig"),MVe=o(" (BERT model)"),EVe=l(),yf=a("li"),$oe=a("strong"),CVe=o("bert-generation"),wVe=o(" \u2014 "),lk=a("a"),AVe=o("BertGenerationConfig"),yVe=o(" (Bert Generation model)"),LVe=l(),Lf=a("li"),koe=a("strong"),xVe=o("big_bird"),$Ve=o(" \u2014 "),ik=a("a"),kVe=o("BigBirdConfig"),SVe=o(" (BigBird model)"),RVe=l(),xf=a("li"),Soe=a("strong"),PVe=o("bigbird_pegasus"),BVe=o(" \u2014 "),dk=a("a"),IVe=o("BigBirdPegasusConfig"),NVe=o(" (BigBirdPegasus model)"),qVe=l(),$f=a("li"),Roe=a("strong"),jVe=o("blenderbot"),DVe=o(" \u2014 "),ck=a("a"),GVe=o("BlenderbotConfig"),OVe=o(" (Blenderbot model)"),VVe=l(),kf=a("li"),Poe=a("strong"),XVe=o("blenderbot-small"),zVe=o(" \u2014 "),fk=a("a"),WVe=o("BlenderbotSmallConfig"),QVe=o(" (BlenderbotSmall model)"),HVe=l(),Sf=a("li"),Boe=a("strong"),UVe=o("camembert"),JVe=o(" \u2014 "),mk=a("a"),YVe=o("CamembertConfig"),KVe=o(" (CamemBERT model)"),ZVe=l(),Rf=a("li"),Ioe=a("strong"),eXe=o("canine"),oXe=o(" \u2014 "),gk=a("a"),rXe=o("CanineConfig"),tXe=o(" (Canine model)"),aXe=l(),Pf=a("li"),Noe=a("strong"),nXe=o("clip"),sXe=o(" \u2014 "),hk=a("a"),lXe=o("CLIPConfig"),iXe=o(" (CLIP model)"),dXe=l(),Bf=a("li"),qoe=a("strong"),cXe=o("convbert"),fXe=o(" \u2014 "),pk=a("a"),mXe=o("ConvBertConfig"),gXe=o(" (ConvBERT model)"),hXe=l(),If=a("li"),joe=a("strong"),pXe=o("convnext"),_Xe=o(" \u2014 "),_k=a("a"),uXe=o("ConvNextConfig"),bXe=o(" (ConvNext model)"),vXe=l(),Nf=a("li"),Doe=a("strong"),FXe=o("ctrl"),TXe=o(" \u2014 "),uk=a("a"),MXe=o("CTRLConfig"),EXe=o(" (CTRL model)"),CXe=l(),qf=a("li"),Goe=a("strong"),wXe=o("cvt"),AXe=o(" \u2014 "),bk=a("a"),yXe=o("CvtConfig"),LXe=o(" (CvT model)"),xXe=l(),jf=a("li"),Ooe=a("strong"),$Xe=o("data2vec-audio"),kXe=o(" \u2014 "),vk=a("a"),SXe=o("Data2VecAudioConfig"),RXe=o(" (Data2VecAudio model)"),PXe=l(),Df=a("li"),Voe=a("strong"),BXe=o("data2vec-text"),IXe=o(" \u2014 "),Fk=a("a"),NXe=o("Data2VecTextConfig"),qXe=o(" (Data2VecText model)"),jXe=l(),Gf=a("li"),Xoe=a("strong"),DXe=o("data2vec-vision"),GXe=o(" \u2014 "),Tk=a("a"),OXe=o("Data2VecVisionConfig"),VXe=o(" (Data2VecVision model)"),XXe=l(),Of=a("li"),zoe=a("strong"),zXe=o("deberta"),WXe=o(" \u2014 "),Mk=a("a"),QXe=o("DebertaConfig"),HXe=o(" (DeBERTa model)"),UXe=l(),Vf=a("li"),Woe=a("strong"),JXe=o("deberta-v2"),YXe=o(" \u2014 "),Ek=a("a"),KXe=o("DebertaV2Config"),ZXe=o(" (DeBERTa-v2 model)"),eze=l(),Xf=a("li"),Qoe=a("strong"),oze=o("decision_transformer"),rze=o(" \u2014 "),Ck=a("a"),tze=o("DecisionTransformerConfig"),aze=o(" (Decision Transformer model)"),nze=l(),zf=a("li"),Hoe=a("strong"),sze=o("deit"),lze=o(" \u2014 "),wk=a("a"),ize=o("DeiTConfig"),dze=o(" (DeiT model)"),cze=l(),Wf=a("li"),Uoe=a("strong"),fze=o("detr"),mze=o(" \u2014 "),Ak=a("a"),gze=o("DetrConfig"),hze=o(" (DETR model)"),pze=l(),Qf=a("li"),Joe=a("strong"),_ze=o("distilbert"),uze=o(" \u2014 "),yk=a("a"),bze=o("DistilBertConfig"),vze=o(" (DistilBERT model)"),Fze=l(),Hf=a("li"),Yoe=a("strong"),Tze=o("dpr"),Mze=o(" \u2014 "),Lk=a("a"),Eze=o("DPRConfig"),Cze=o(" (DPR model)"),wze=l(),Uf=a("li"),Koe=a("strong"),Aze=o("dpt"),yze=o(" \u2014 "),xk=a("a"),Lze=o("DPTConfig"),xze=o(" (DPT model)"),$ze=l(),Jf=a("li"),Zoe=a("strong"),kze=o("electra"),Sze=o(" \u2014 "),$k=a("a"),Rze=o("ElectraConfig"),Pze=o(" (ELECTRA model)"),Bze=l(),Yf=a("li"),ere=a("strong"),Ize=o("encoder-decoder"),Nze=o(" \u2014 "),kk=a("a"),qze=o("EncoderDecoderConfig"),jze=o(" (Encoder decoder model)"),Dze=l(),Kf=a("li"),ore=a("strong"),Gze=o("flaubert"),Oze=o(" \u2014 "),Sk=a("a"),Vze=o("FlaubertConfig"),Xze=o(" (FlauBERT model)"),zze=l(),Zf=a("li"),rre=a("strong"),Wze=o("flava"),Qze=o(" \u2014 "),Rk=a("a"),Hze=o("FlavaConfig"),Uze=o(" (Flava model)"),Jze=l(),em=a("li"),tre=a("strong"),Yze=o("fnet"),Kze=o(" \u2014 "),Pk=a("a"),Zze=o("FNetConfig"),eWe=o(" (FNet model)"),oWe=l(),om=a("li"),are=a("strong"),rWe=o("fsmt"),tWe=o(" \u2014 "),Bk=a("a"),aWe=o("FSMTConfig"),nWe=o(" (FairSeq Machine-Translation model)"),sWe=l(),rm=a("li"),nre=a("strong"),lWe=o("funnel"),iWe=o(" \u2014 "),Ik=a("a"),dWe=o("FunnelConfig"),cWe=o(" (Funnel Transformer model)"),fWe=l(),tm=a("li"),sre=a("strong"),mWe=o("glpn"),gWe=o(" \u2014 "),Nk=a("a"),hWe=o("GLPNConfig"),pWe=o(" (GLPN model)"),_We=l(),am=a("li"),lre=a("strong"),uWe=o("gpt2"),bWe=o(" \u2014 "),qk=a("a"),vWe=o("GPT2Config"),FWe=o(" (OpenAI GPT-2 model)"),TWe=l(),nm=a("li"),ire=a("strong"),MWe=o("gpt_neo"),EWe=o(" \u2014 "),jk=a("a"),CWe=o("GPTNeoConfig"),wWe=o(" (GPT Neo model)"),AWe=l(),sm=a("li"),dre=a("strong"),yWe=o("gpt_neox"),LWe=o(" \u2014 "),Dk=a("a"),xWe=o("GPTNeoXConfig"),$We=o(" (GPT NeoX model)"),kWe=l(),lm=a("li"),cre=a("strong"),SWe=o("gptj"),RWe=o(" \u2014 "),Gk=a("a"),PWe=o("GPTJConfig"),BWe=o(" (GPT-J model)"),IWe=l(),im=a("li"),fre=a("strong"),NWe=o("hubert"),qWe=o(" \u2014 "),Ok=a("a"),jWe=o("HubertConfig"),DWe=o(" (Hubert model)"),GWe=l(),dm=a("li"),mre=a("strong"),OWe=o("ibert"),VWe=o(" \u2014 "),Vk=a("a"),XWe=o("IBertConfig"),zWe=o(" (I-BERT model)"),WWe=l(),cm=a("li"),gre=a("strong"),QWe=o("imagegpt"),HWe=o(" \u2014 "),Xk=a("a"),UWe=o("ImageGPTConfig"),JWe=o(" (ImageGPT model)"),YWe=l(),fm=a("li"),hre=a("strong"),KWe=o("layoutlm"),ZWe=o(" \u2014 "),zk=a("a"),eQe=o("LayoutLMConfig"),oQe=o(" (LayoutLM model)"),rQe=l(),mm=a("li"),pre=a("strong"),tQe=o("layoutlmv2"),aQe=o(" \u2014 "),Wk=a("a"),nQe=o("LayoutLMv2Config"),sQe=o(" (LayoutLMv2 model)"),lQe=l(),gm=a("li"),_re=a("strong"),iQe=o("layoutlmv3"),dQe=o(" \u2014 "),Qk=a("a"),cQe=o("LayoutLMv3Config"),fQe=o(" (LayoutLMv3 model)"),mQe=l(),hm=a("li"),ure=a("strong"),gQe=o("led"),hQe=o(" \u2014 "),Hk=a("a"),pQe=o("LEDConfig"),_Qe=o(" (LED model)"),uQe=l(),pm=a("li"),bre=a("strong"),bQe=o("longformer"),vQe=o(" \u2014 "),Uk=a("a"),FQe=o("LongformerConfig"),TQe=o(" (Longformer model)"),MQe=l(),_m=a("li"),vre=a("strong"),EQe=o("luke"),CQe=o(" \u2014 "),Jk=a("a"),wQe=o("LukeConfig"),AQe=o(" (LUKE model)"),yQe=l(),um=a("li"),Fre=a("strong"),LQe=o("lxmert"),xQe=o(" \u2014 "),Yk=a("a"),$Qe=o("LxmertConfig"),kQe=o(" (LXMERT model)"),SQe=l(),bm=a("li"),Tre=a("strong"),RQe=o("m2m_100"),PQe=o(" \u2014 "),Kk=a("a"),BQe=o("M2M100Config"),IQe=o(" (M2M100 model)"),NQe=l(),vm=a("li"),Mre=a("strong"),qQe=o("marian"),jQe=o(" \u2014 "),Zk=a("a"),DQe=o("MarianConfig"),GQe=o(" (Marian model)"),OQe=l(),Fm=a("li"),Ere=a("strong"),VQe=o("maskformer"),XQe=o(" \u2014 "),eS=a("a"),zQe=o("MaskFormerConfig"),WQe=o(" (MaskFormer model)"),QQe=l(),Tm=a("li"),Cre=a("strong"),HQe=o("mbart"),UQe=o(" \u2014 "),oS=a("a"),JQe=o("MBartConfig"),YQe=o(" (mBART model)"),KQe=l(),Mm=a("li"),wre=a("strong"),ZQe=o("megatron-bert"),eHe=o(" \u2014 "),rS=a("a"),oHe=o("MegatronBertConfig"),rHe=o(" (MegatronBert model)"),tHe=l(),Em=a("li"),Are=a("strong"),aHe=o("mobilebert"),nHe=o(" \u2014 "),tS=a("a"),sHe=o("MobileBertConfig"),lHe=o(" (MobileBERT model)"),iHe=l(),Cm=a("li"),yre=a("strong"),dHe=o("mobilevit"),cHe=o(" \u2014 "),aS=a("a"),fHe=o("MobileViTConfig"),mHe=o(" (MobileViT model)"),gHe=l(),wm=a("li"),Lre=a("strong"),hHe=o("mpnet"),pHe=o(" \u2014 "),nS=a("a"),_He=o("MPNetConfig"),uHe=o(" (MPNet model)"),bHe=l(),Am=a("li"),xre=a("strong"),vHe=o("mt5"),FHe=o(" \u2014 "),sS=a("a"),THe=o("MT5Config"),MHe=o(" (mT5 model)"),EHe=l(),ym=a("li"),$re=a("strong"),CHe=o("nystromformer"),wHe=o(" \u2014 "),lS=a("a"),AHe=o("NystromformerConfig"),yHe=o(" (Nystromformer model)"),LHe=l(),Lm=a("li"),kre=a("strong"),xHe=o("openai-gpt"),$He=o(" \u2014 "),iS=a("a"),kHe=o("OpenAIGPTConfig"),SHe=o(" (OpenAI GPT model)"),RHe=l(),xm=a("li"),Sre=a("strong"),PHe=o("opt"),BHe=o(" \u2014 "),dS=a("a"),IHe=o("OPTConfig"),NHe=o(" (OPT model)"),qHe=l(),$m=a("li"),Rre=a("strong"),jHe=o("pegasus"),DHe=o(" \u2014 "),cS=a("a"),GHe=o("PegasusConfig"),OHe=o(" (Pegasus model)"),VHe=l(),km=a("li"),Pre=a("strong"),XHe=o("perceiver"),zHe=o(" \u2014 "),fS=a("a"),WHe=o("PerceiverConfig"),QHe=o(" (Perceiver model)"),HHe=l(),Sm=a("li"),Bre=a("strong"),UHe=o("plbart"),JHe=o(" \u2014 "),mS=a("a"),YHe=o("PLBartConfig"),KHe=o(" (PLBart model)"),ZHe=l(),Rm=a("li"),Ire=a("strong"),eUe=o("poolformer"),oUe=o(" \u2014 "),gS=a("a"),rUe=o("PoolFormerConfig"),tUe=o(" (PoolFormer model)"),aUe=l(),Pm=a("li"),Nre=a("strong"),nUe=o("prophetnet"),sUe=o(" \u2014 "),hS=a("a"),lUe=o("ProphetNetConfig"),iUe=o(" (ProphetNet model)"),dUe=l(),Bm=a("li"),qre=a("strong"),cUe=o("qdqbert"),fUe=o(" \u2014 "),pS=a("a"),mUe=o("QDQBertConfig"),gUe=o(" (QDQBert model)"),hUe=l(),Im=a("li"),jre=a("strong"),pUe=o("rag"),_Ue=o(" \u2014 "),_S=a("a"),uUe=o("RagConfig"),bUe=o(" (RAG model)"),vUe=l(),Nm=a("li"),Dre=a("strong"),FUe=o("realm"),TUe=o(" \u2014 "),uS=a("a"),MUe=o("RealmConfig"),EUe=o(" (Realm model)"),CUe=l(),qm=a("li"),Gre=a("strong"),wUe=o("reformer"),AUe=o(" \u2014 "),bS=a("a"),yUe=o("ReformerConfig"),LUe=o(" (Reformer model)"),xUe=l(),jm=a("li"),Ore=a("strong"),$Ue=o("regnet"),kUe=o(" \u2014 "),vS=a("a"),SUe=o("RegNetConfig"),RUe=o(" (RegNet model)"),PUe=l(),Dm=a("li"),Vre=a("strong"),BUe=o("rembert"),IUe=o(" \u2014 "),FS=a("a"),NUe=o("RemBertConfig"),qUe=o(" (RemBERT model)"),jUe=l(),Gm=a("li"),Xre=a("strong"),DUe=o("resnet"),GUe=o(" \u2014 "),TS=a("a"),OUe=o("ResNetConfig"),VUe=o(" (ResNet model)"),XUe=l(),Om=a("li"),zre=a("strong"),zUe=o("retribert"),WUe=o(" \u2014 "),MS=a("a"),QUe=o("RetriBertConfig"),HUe=o(" (RetriBERT model)"),UUe=l(),Vm=a("li"),Wre=a("strong"),JUe=o("roberta"),YUe=o(" \u2014 "),ES=a("a"),KUe=o("RobertaConfig"),ZUe=o(" (RoBERTa model)"),eJe=l(),Xm=a("li"),Qre=a("strong"),oJe=o("roformer"),rJe=o(" \u2014 "),CS=a("a"),tJe=o("RoFormerConfig"),aJe=o(" (RoFormer model)"),nJe=l(),zm=a("li"),Hre=a("strong"),sJe=o("segformer"),lJe=o(" \u2014 "),wS=a("a"),iJe=o("SegformerConfig"),dJe=o(" (SegFormer model)"),cJe=l(),Wm=a("li"),Ure=a("strong"),fJe=o("sew"),mJe=o(" \u2014 "),AS=a("a"),gJe=o("SEWConfig"),hJe=o(" (SEW model)"),pJe=l(),Qm=a("li"),Jre=a("strong"),_Je=o("sew-d"),uJe=o(" \u2014 "),yS=a("a"),bJe=o("SEWDConfig"),vJe=o(" (SEW-D model)"),FJe=l(),Hm=a("li"),Yre=a("strong"),TJe=o("speech-encoder-decoder"),MJe=o(" \u2014 "),LS=a("a"),EJe=o("SpeechEncoderDecoderConfig"),CJe=o(" (Speech Encoder decoder model)"),wJe=l(),Um=a("li"),Kre=a("strong"),AJe=o("speech_to_text"),yJe=o(" \u2014 "),xS=a("a"),LJe=o("Speech2TextConfig"),xJe=o(" (Speech2Text model)"),$Je=l(),Jm=a("li"),Zre=a("strong"),kJe=o("speech_to_text_2"),SJe=o(" \u2014 "),$S=a("a"),RJe=o("Speech2Text2Config"),PJe=o(" (Speech2Text2 model)"),BJe=l(),Ym=a("li"),ete=a("strong"),IJe=o("splinter"),NJe=o(" \u2014 "),kS=a("a"),qJe=o("SplinterConfig"),jJe=o(" (Splinter model)"),DJe=l(),Km=a("li"),ote=a("strong"),GJe=o("squeezebert"),OJe=o(" \u2014 "),SS=a("a"),VJe=o("SqueezeBertConfig"),XJe=o(" (SqueezeBERT model)"),zJe=l(),Zm=a("li"),rte=a("strong"),WJe=o("swin"),QJe=o(" \u2014 "),RS=a("a"),HJe=o("SwinConfig"),UJe=o(" (Swin model)"),JJe=l(),eg=a("li"),tte=a("strong"),YJe=o("t5"),KJe=o(" \u2014 "),PS=a("a"),ZJe=o("T5Config"),eYe=o(" (T5 model)"),oYe=l(),og=a("li"),ate=a("strong"),rYe=o("tapas"),tYe=o(" \u2014 "),BS=a("a"),aYe=o("TapasConfig"),nYe=o(" (TAPAS model)"),sYe=l(),rg=a("li"),nte=a("strong"),lYe=o("trajectory_transformer"),iYe=o(" \u2014 "),IS=a("a"),dYe=o("TrajectoryTransformerConfig"),cYe=o(" (Trajectory Transformer model)"),fYe=l(),tg=a("li"),ste=a("strong"),mYe=o("transfo-xl"),gYe=o(" \u2014 "),NS=a("a"),hYe=o("TransfoXLConfig"),pYe=o(" (Transformer-XL model)"),_Ye=l(),ag=a("li"),lte=a("strong"),uYe=o("trocr"),bYe=o(" \u2014 "),qS=a("a"),vYe=o("TrOCRConfig"),FYe=o(" (TrOCR model)"),TYe=l(),ng=a("li"),ite=a("strong"),MYe=o("unispeech"),EYe=o(" \u2014 "),jS=a("a"),CYe=o("UniSpeechConfig"),wYe=o(" (UniSpeech model)"),AYe=l(),sg=a("li"),dte=a("strong"),yYe=o("unispeech-sat"),LYe=o(" \u2014 "),DS=a("a"),xYe=o("UniSpeechSatConfig"),$Ye=o(" (UniSpeechSat model)"),kYe=l(),lg=a("li"),cte=a("strong"),SYe=o("van"),RYe=o(" \u2014 "),GS=a("a"),PYe=o("VanConfig"),BYe=o(" (VAN model)"),IYe=l(),ig=a("li"),fte=a("strong"),NYe=o("vilt"),qYe=o(" \u2014 "),OS=a("a"),jYe=o("ViltConfig"),DYe=o(" (ViLT model)"),GYe=l(),dg=a("li"),mte=a("strong"),OYe=o("vision-encoder-decoder"),VYe=o(" \u2014 "),VS=a("a"),XYe=o("VisionEncoderDecoderConfig"),zYe=o(" (Vision Encoder decoder model)"),WYe=l(),cg=a("li"),gte=a("strong"),QYe=o("vision-text-dual-encoder"),HYe=o(" \u2014 "),XS=a("a"),UYe=o("VisionTextDualEncoderConfig"),JYe=o(" (VisionTextDualEncoder model)"),YYe=l(),fg=a("li"),hte=a("strong"),KYe=o("visual_bert"),ZYe=o(" \u2014 "),zS=a("a"),eKe=o("VisualBertConfig"),oKe=o(" (VisualBert model)"),rKe=l(),mg=a("li"),pte=a("strong"),tKe=o("vit"),aKe=o(" \u2014 "),WS=a("a"),nKe=o("ViTConfig"),sKe=o(" (ViT model)"),lKe=l(),gg=a("li"),_te=a("strong"),iKe=o("vit_mae"),dKe=o(" \u2014 "),QS=a("a"),cKe=o("ViTMAEConfig"),fKe=o(" (ViTMAE model)"),mKe=l(),hg=a("li"),ute=a("strong"),gKe=o("wav2vec2"),hKe=o(" \u2014 "),HS=a("a"),pKe=o("Wav2Vec2Config"),_Ke=o(" (Wav2Vec2 model)"),uKe=l(),pg=a("li"),bte=a("strong"),bKe=o("wav2vec2-conformer"),vKe=o(" \u2014 "),US=a("a"),FKe=o("Wav2Vec2ConformerConfig"),TKe=o(" (Wav2Vec2-Conformer model)"),MKe=l(),_g=a("li"),vte=a("strong"),EKe=o("wavlm"),CKe=o(" \u2014 "),JS=a("a"),wKe=o("WavLMConfig"),AKe=o(" (WavLM model)"),yKe=l(),ug=a("li"),Fte=a("strong"),LKe=o("xglm"),xKe=o(" \u2014 "),YS=a("a"),$Ke=o("XGLMConfig"),kKe=o(" (XGLM model)"),SKe=l(),bg=a("li"),Tte=a("strong"),RKe=o("xlm"),PKe=o(" \u2014 "),KS=a("a"),BKe=o("XLMConfig"),IKe=o(" (XLM model)"),NKe=l(),vg=a("li"),Mte=a("strong"),qKe=o("xlm-prophetnet"),jKe=o(" \u2014 "),ZS=a("a"),DKe=o("XLMProphetNetConfig"),GKe=o(" (XLMProphetNet model)"),OKe=l(),Fg=a("li"),Ete=a("strong"),VKe=o("xlm-roberta"),XKe=o(" \u2014 "),eR=a("a"),zKe=o("XLMRobertaConfig"),WKe=o(" (XLM-RoBERTa model)"),QKe=l(),Tg=a("li"),Cte=a("strong"),HKe=o("xlm-roberta-xl"),UKe=o(" \u2014 "),oR=a("a"),JKe=o("XLMRobertaXLConfig"),YKe=o(" (XLM-RoBERTa-XL model)"),KKe=l(),Mg=a("li"),wte=a("strong"),ZKe=o("xlnet"),eZe=o(" \u2014 "),rR=a("a"),oZe=o("XLNetConfig"),rZe=o(" (XLNet model)"),tZe=l(),Eg=a("li"),Ate=a("strong"),aZe=o("yolos"),nZe=o(" \u2014 "),tR=a("a"),sZe=o("YolosConfig"),lZe=o(" (YOLOS model)"),iZe=l(),Cg=a("li"),yte=a("strong"),dZe=o("yoso"),cZe=o(" \u2014 "),aR=a("a"),fZe=o("YosoConfig"),mZe=o(" (YOSO model)"),gZe=l(),F(wg.$$.fragment),hZe=l(),Ag=a("div"),F(jA.$$.fragment),pZe=l(),Lte=a("p"),_Ze=o("Register a new configuration for this class."),wqe=l(),Mi=a("h2"),yg=a("a"),xte=a("span"),F(DA.$$.fragment),uZe=l(),$te=a("span"),bZe=o("AutoTokenizer"),Aqe=l(),wo=a("div"),F(GA.$$.fragment),vZe=l(),OA=a("p"),FZe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),nR=a("a"),TZe=o("AutoTokenizer.from_pretrained()"),MZe=o(" class method."),EZe=l(),VA=a("p"),CZe=o("This class cannot be instantiated directly using "),kte=a("code"),wZe=o("__init__()"),AZe=o(" (throws an error)."),yZe=l(),Cr=a("div"),F(XA.$$.fragment),LZe=l(),Ste=a("p"),xZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),$Ze=l(),ya=a("p"),kZe=o("The tokenizer class to instantiate is selected based on the "),Rte=a("code"),SZe=o("model_type"),RZe=o(` property of the config object (either
passed as an argument or loaded from `),Pte=a("code"),PZe=o("pretrained_model_name_or_path"),BZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bte=a("code"),IZe=o("pretrained_model_name_or_path"),NZe=o(":"),qZe=l(),k=a("ul"),Sn=a("li"),Ite=a("strong"),jZe=o("albert"),DZe=o(" \u2014 "),sR=a("a"),GZe=o("AlbertTokenizer"),OZe=o(" or "),lR=a("a"),VZe=o("AlbertTokenizerFast"),XZe=o(" (ALBERT model)"),zZe=l(),Rn=a("li"),Nte=a("strong"),WZe=o("bart"),QZe=o(" \u2014 "),iR=a("a"),HZe=o("BartTokenizer"),UZe=o(" or "),dR=a("a"),JZe=o("BartTokenizerFast"),YZe=o(" (BART model)"),KZe=l(),Pn=a("li"),qte=a("strong"),ZZe=o("barthez"),eeo=o(" \u2014 "),cR=a("a"),oeo=o("BarthezTokenizer"),reo=o(" or "),fR=a("a"),teo=o("BarthezTokenizerFast"),aeo=o(" (BARThez model)"),neo=l(),Lg=a("li"),jte=a("strong"),seo=o("bartpho"),leo=o(" \u2014 "),mR=a("a"),ieo=o("BartphoTokenizer"),deo=o(" (BARTpho model)"),ceo=l(),Bn=a("li"),Dte=a("strong"),feo=o("bert"),meo=o(" \u2014 "),gR=a("a"),geo=o("BertTokenizer"),heo=o(" or "),hR=a("a"),peo=o("BertTokenizerFast"),_eo=o(" (BERT model)"),ueo=l(),xg=a("li"),Gte=a("strong"),beo=o("bert-generation"),veo=o(" \u2014 "),pR=a("a"),Feo=o("BertGenerationTokenizer"),Teo=o(" (Bert Generation model)"),Meo=l(),$g=a("li"),Ote=a("strong"),Eeo=o("bert-japanese"),Ceo=o(" \u2014 "),_R=a("a"),weo=o("BertJapaneseTokenizer"),Aeo=o(" (BertJapanese model)"),yeo=l(),kg=a("li"),Vte=a("strong"),Leo=o("bertweet"),xeo=o(" \u2014 "),uR=a("a"),$eo=o("BertweetTokenizer"),keo=o(" (Bertweet model)"),Seo=l(),In=a("li"),Xte=a("strong"),Reo=o("big_bird"),Peo=o(" \u2014 "),bR=a("a"),Beo=o("BigBirdTokenizer"),Ieo=o(" or "),vR=a("a"),Neo=o("BigBirdTokenizerFast"),qeo=o(" (BigBird model)"),jeo=l(),Nn=a("li"),zte=a("strong"),Deo=o("bigbird_pegasus"),Geo=o(" \u2014 "),FR=a("a"),Oeo=o("PegasusTokenizer"),Veo=o(" or "),TR=a("a"),Xeo=o("PegasusTokenizerFast"),zeo=o(" (BigBirdPegasus model)"),Weo=l(),qn=a("li"),Wte=a("strong"),Qeo=o("blenderbot"),Heo=o(" \u2014 "),MR=a("a"),Ueo=o("BlenderbotTokenizer"),Jeo=o(" or "),ER=a("a"),Yeo=o("BlenderbotTokenizerFast"),Keo=o(" (Blenderbot model)"),Zeo=l(),Sg=a("li"),Qte=a("strong"),eoo=o("blenderbot-small"),ooo=o(" \u2014 "),CR=a("a"),roo=o("BlenderbotSmallTokenizer"),too=o(" (BlenderbotSmall model)"),aoo=l(),Rg=a("li"),Hte=a("strong"),noo=o("byt5"),soo=o(" \u2014 "),wR=a("a"),loo=o("ByT5Tokenizer"),ioo=o(" (ByT5 model)"),doo=l(),jn=a("li"),Ute=a("strong"),coo=o("camembert"),foo=o(" \u2014 "),AR=a("a"),moo=o("CamembertTokenizer"),goo=o(" or "),yR=a("a"),hoo=o("CamembertTokenizerFast"),poo=o(" (CamemBERT model)"),_oo=l(),Pg=a("li"),Jte=a("strong"),uoo=o("canine"),boo=o(" \u2014 "),LR=a("a"),voo=o("CanineTokenizer"),Foo=o(" (Canine model)"),Too=l(),Dn=a("li"),Yte=a("strong"),Moo=o("clip"),Eoo=o(" \u2014 "),xR=a("a"),Coo=o("CLIPTokenizer"),woo=o(" or "),$R=a("a"),Aoo=o("CLIPTokenizerFast"),yoo=o(" (CLIP model)"),Loo=l(),Gn=a("li"),Kte=a("strong"),xoo=o("convbert"),$oo=o(" \u2014 "),kR=a("a"),koo=o("ConvBertTokenizer"),Soo=o(" or "),SR=a("a"),Roo=o("ConvBertTokenizerFast"),Poo=o(" (ConvBERT model)"),Boo=l(),On=a("li"),Zte=a("strong"),Ioo=o("cpm"),Noo=o(" \u2014 "),RR=a("a"),qoo=o("CpmTokenizer"),joo=o(" or "),PR=a("a"),Doo=o("CpmTokenizerFast"),Goo=o(" (CPM model)"),Ooo=l(),Bg=a("li"),eae=a("strong"),Voo=o("ctrl"),Xoo=o(" \u2014 "),BR=a("a"),zoo=o("CTRLTokenizer"),Woo=o(" (CTRL model)"),Qoo=l(),Vn=a("li"),oae=a("strong"),Hoo=o("data2vec-text"),Uoo=o(" \u2014 "),IR=a("a"),Joo=o("RobertaTokenizer"),Yoo=o(" or "),NR=a("a"),Koo=o("RobertaTokenizerFast"),Zoo=o(" (Data2VecText model)"),ero=l(),Xn=a("li"),rae=a("strong"),oro=o("deberta"),rro=o(" \u2014 "),qR=a("a"),tro=o("DebertaTokenizer"),aro=o(" or "),jR=a("a"),nro=o("DebertaTokenizerFast"),sro=o(" (DeBERTa model)"),lro=l(),zn=a("li"),tae=a("strong"),iro=o("deberta-v2"),dro=o(" \u2014 "),DR=a("a"),cro=o("DebertaV2Tokenizer"),fro=o(" or "),GR=a("a"),mro=o("DebertaV2TokenizerFast"),gro=o(" (DeBERTa-v2 model)"),hro=l(),Wn=a("li"),aae=a("strong"),pro=o("distilbert"),_ro=o(" \u2014 "),OR=a("a"),uro=o("DistilBertTokenizer"),bro=o(" or "),VR=a("a"),vro=o("DistilBertTokenizerFast"),Fro=o(" (DistilBERT model)"),Tro=l(),Qn=a("li"),nae=a("strong"),Mro=o("dpr"),Ero=o(" \u2014 "),XR=a("a"),Cro=o("DPRQuestionEncoderTokenizer"),wro=o(" or "),zR=a("a"),Aro=o("DPRQuestionEncoderTokenizerFast"),yro=o(" (DPR model)"),Lro=l(),Hn=a("li"),sae=a("strong"),xro=o("electra"),$ro=o(" \u2014 "),WR=a("a"),kro=o("ElectraTokenizer"),Sro=o(" or "),QR=a("a"),Rro=o("ElectraTokenizerFast"),Pro=o(" (ELECTRA model)"),Bro=l(),Ig=a("li"),lae=a("strong"),Iro=o("flaubert"),Nro=o(" \u2014 "),HR=a("a"),qro=o("FlaubertTokenizer"),jro=o(" (FlauBERT model)"),Dro=l(),Un=a("li"),iae=a("strong"),Gro=o("fnet"),Oro=o(" \u2014 "),UR=a("a"),Vro=o("FNetTokenizer"),Xro=o(" or "),JR=a("a"),zro=o("FNetTokenizerFast"),Wro=o(" (FNet model)"),Qro=l(),Ng=a("li"),dae=a("strong"),Hro=o("fsmt"),Uro=o(" \u2014 "),YR=a("a"),Jro=o("FSMTTokenizer"),Yro=o(" (FairSeq Machine-Translation model)"),Kro=l(),Jn=a("li"),cae=a("strong"),Zro=o("funnel"),eto=o(" \u2014 "),KR=a("a"),oto=o("FunnelTokenizer"),rto=o(" or "),ZR=a("a"),tto=o("FunnelTokenizerFast"),ato=o(" (Funnel Transformer model)"),nto=l(),Yn=a("li"),fae=a("strong"),sto=o("gpt2"),lto=o(" \u2014 "),eP=a("a"),ito=o("GPT2Tokenizer"),dto=o(" or "),oP=a("a"),cto=o("GPT2TokenizerFast"),fto=o(" (OpenAI GPT-2 model)"),mto=l(),Kn=a("li"),mae=a("strong"),gto=o("gpt_neo"),hto=o(" \u2014 "),rP=a("a"),pto=o("GPT2Tokenizer"),_to=o(" or "),tP=a("a"),uto=o("GPT2TokenizerFast"),bto=o(" (GPT Neo model)"),vto=l(),qg=a("li"),gae=a("strong"),Fto=o("gpt_neox"),Tto=o(" \u2014 "),aP=a("a"),Mto=o("GPTNeoXTokenizerFast"),Eto=o(" (GPT NeoX model)"),Cto=l(),Zn=a("li"),hae=a("strong"),wto=o("gptj"),Ato=o(" \u2014 "),nP=a("a"),yto=o("GPT2Tokenizer"),Lto=o(" or "),sP=a("a"),xto=o("GPT2TokenizerFast"),$to=o(" (GPT-J model)"),kto=l(),es=a("li"),pae=a("strong"),Sto=o("herbert"),Rto=o(" \u2014 "),lP=a("a"),Pto=o("HerbertTokenizer"),Bto=o(" or "),iP=a("a"),Ito=o("HerbertTokenizerFast"),Nto=o(" (HerBERT model)"),qto=l(),jg=a("li"),_ae=a("strong"),jto=o("hubert"),Dto=o(" \u2014 "),dP=a("a"),Gto=o("Wav2Vec2CTCTokenizer"),Oto=o(" (Hubert model)"),Vto=l(),os=a("li"),uae=a("strong"),Xto=o("ibert"),zto=o(" \u2014 "),cP=a("a"),Wto=o("RobertaTokenizer"),Qto=o(" or "),fP=a("a"),Hto=o("RobertaTokenizerFast"),Uto=o(" (I-BERT model)"),Jto=l(),rs=a("li"),bae=a("strong"),Yto=o("layoutlm"),Kto=o(" \u2014 "),mP=a("a"),Zto=o("LayoutLMTokenizer"),eao=o(" or "),gP=a("a"),oao=o("LayoutLMTokenizerFast"),rao=o(" (LayoutLM model)"),tao=l(),ts=a("li"),vae=a("strong"),aao=o("layoutlmv2"),nao=o(" \u2014 "),hP=a("a"),sao=o("LayoutLMv2Tokenizer"),lao=o(" or "),pP=a("a"),iao=o("LayoutLMv2TokenizerFast"),dao=o(" (LayoutLMv2 model)"),cao=l(),as=a("li"),Fae=a("strong"),fao=o("layoutlmv3"),mao=o(" \u2014 "),_P=a("a"),gao=o("LayoutLMv3Tokenizer"),hao=o(" or "),uP=a("a"),pao=o("LayoutLMv3TokenizerFast"),_ao=o(" (LayoutLMv3 model)"),uao=l(),ns=a("li"),Tae=a("strong"),bao=o("layoutxlm"),vao=o(" \u2014 "),bP=a("a"),Fao=o("LayoutXLMTokenizer"),Tao=o(" or "),vP=a("a"),Mao=o("LayoutXLMTokenizerFast"),Eao=o(" (LayoutXLM model)"),Cao=l(),ss=a("li"),Mae=a("strong"),wao=o("led"),Aao=o(" \u2014 "),FP=a("a"),yao=o("LEDTokenizer"),Lao=o(" or "),TP=a("a"),xao=o("LEDTokenizerFast"),$ao=o(" (LED model)"),kao=l(),ls=a("li"),Eae=a("strong"),Sao=o("longformer"),Rao=o(" \u2014 "),MP=a("a"),Pao=o("LongformerTokenizer"),Bao=o(" or "),EP=a("a"),Iao=o("LongformerTokenizerFast"),Nao=o(" (Longformer model)"),qao=l(),Dg=a("li"),Cae=a("strong"),jao=o("luke"),Dao=o(" \u2014 "),CP=a("a"),Gao=o("LukeTokenizer"),Oao=o(" (LUKE model)"),Vao=l(),is=a("li"),wae=a("strong"),Xao=o("lxmert"),zao=o(" \u2014 "),wP=a("a"),Wao=o("LxmertTokenizer"),Qao=o(" or "),AP=a("a"),Hao=o("LxmertTokenizerFast"),Uao=o(" (LXMERT model)"),Jao=l(),Gg=a("li"),Aae=a("strong"),Yao=o("m2m_100"),Kao=o(" \u2014 "),yP=a("a"),Zao=o("M2M100Tokenizer"),eno=o(" (M2M100 model)"),ono=l(),Og=a("li"),yae=a("strong"),rno=o("marian"),tno=o(" \u2014 "),LP=a("a"),ano=o("MarianTokenizer"),nno=o(" (Marian model)"),sno=l(),ds=a("li"),Lae=a("strong"),lno=o("mbart"),ino=o(" \u2014 "),xP=a("a"),dno=o("MBartTokenizer"),cno=o(" or "),$P=a("a"),fno=o("MBartTokenizerFast"),mno=o(" (mBART model)"),gno=l(),cs=a("li"),xae=a("strong"),hno=o("mbart50"),pno=o(" \u2014 "),kP=a("a"),_no=o("MBart50Tokenizer"),uno=o(" or "),SP=a("a"),bno=o("MBart50TokenizerFast"),vno=o(" (mBART-50 model)"),Fno=l(),fs=a("li"),$ae=a("strong"),Tno=o("megatron-bert"),Mno=o(" \u2014 "),RP=a("a"),Eno=o("BertTokenizer"),Cno=o(" or "),PP=a("a"),wno=o("BertTokenizerFast"),Ano=o(" (MegatronBert model)"),yno=l(),Vg=a("li"),kae=a("strong"),Lno=o("mluke"),xno=o(" \u2014 "),BP=a("a"),$no=o("MLukeTokenizer"),kno=o(" (mLUKE model)"),Sno=l(),ms=a("li"),Sae=a("strong"),Rno=o("mobilebert"),Pno=o(" \u2014 "),IP=a("a"),Bno=o("MobileBertTokenizer"),Ino=o(" or "),NP=a("a"),Nno=o("MobileBertTokenizerFast"),qno=o(" (MobileBERT model)"),jno=l(),gs=a("li"),Rae=a("strong"),Dno=o("mpnet"),Gno=o(" \u2014 "),qP=a("a"),Ono=o("MPNetTokenizer"),Vno=o(" or "),jP=a("a"),Xno=o("MPNetTokenizerFast"),zno=o(" (MPNet model)"),Wno=l(),hs=a("li"),Pae=a("strong"),Qno=o("mt5"),Hno=o(" \u2014 "),DP=a("a"),Uno=o("MT5Tokenizer"),Jno=o(" or "),GP=a("a"),Yno=o("MT5TokenizerFast"),Kno=o(" (mT5 model)"),Zno=l(),ps=a("li"),Bae=a("strong"),eso=o("nystromformer"),oso=o(" \u2014 "),OP=a("a"),rso=o("AlbertTokenizer"),tso=o(" or "),VP=a("a"),aso=o("AlbertTokenizerFast"),nso=o(" (Nystromformer model)"),sso=l(),_s=a("li"),Iae=a("strong"),lso=o("openai-gpt"),iso=o(" \u2014 "),XP=a("a"),dso=o("OpenAIGPTTokenizer"),cso=o(" or "),zP=a("a"),fso=o("OpenAIGPTTokenizerFast"),mso=o(" (OpenAI GPT model)"),gso=l(),Xg=a("li"),Nae=a("strong"),hso=o("opt"),pso=o(" \u2014 "),WP=a("a"),_so=o("GPT2Tokenizer"),uso=o(" (OPT model)"),bso=l(),us=a("li"),qae=a("strong"),vso=o("pegasus"),Fso=o(" \u2014 "),QP=a("a"),Tso=o("PegasusTokenizer"),Mso=o(" or "),HP=a("a"),Eso=o("PegasusTokenizerFast"),Cso=o(" (Pegasus model)"),wso=l(),zg=a("li"),jae=a("strong"),Aso=o("perceiver"),yso=o(" \u2014 "),UP=a("a"),Lso=o("PerceiverTokenizer"),xso=o(" (Perceiver model)"),$so=l(),Wg=a("li"),Dae=a("strong"),kso=o("phobert"),Sso=o(" \u2014 "),JP=a("a"),Rso=o("PhobertTokenizer"),Pso=o(" (PhoBERT model)"),Bso=l(),Qg=a("li"),Gae=a("strong"),Iso=o("plbart"),Nso=o(" \u2014 "),YP=a("a"),qso=o("PLBartTokenizer"),jso=o(" (PLBart model)"),Dso=l(),Hg=a("li"),Oae=a("strong"),Gso=o("prophetnet"),Oso=o(" \u2014 "),KP=a("a"),Vso=o("ProphetNetTokenizer"),Xso=o(" (ProphetNet model)"),zso=l(),bs=a("li"),Vae=a("strong"),Wso=o("qdqbert"),Qso=o(" \u2014 "),ZP=a("a"),Hso=o("BertTokenizer"),Uso=o(" or "),eB=a("a"),Jso=o("BertTokenizerFast"),Yso=o(" (QDQBert model)"),Kso=l(),Ug=a("li"),Xae=a("strong"),Zso=o("rag"),elo=o(" \u2014 "),oB=a("a"),olo=o("RagTokenizer"),rlo=o(" (RAG model)"),tlo=l(),vs=a("li"),zae=a("strong"),alo=o("realm"),nlo=o(" \u2014 "),rB=a("a"),slo=o("RealmTokenizer"),llo=o(" or "),tB=a("a"),ilo=o("RealmTokenizerFast"),dlo=o(" (Realm model)"),clo=l(),Fs=a("li"),Wae=a("strong"),flo=o("reformer"),mlo=o(" \u2014 "),aB=a("a"),glo=o("ReformerTokenizer"),hlo=o(" or "),nB=a("a"),plo=o("ReformerTokenizerFast"),_lo=o(" (Reformer model)"),ulo=l(),Ts=a("li"),Qae=a("strong"),blo=o("rembert"),vlo=o(" \u2014 "),sB=a("a"),Flo=o("RemBertTokenizer"),Tlo=o(" or "),lB=a("a"),Mlo=o("RemBertTokenizerFast"),Elo=o(" (RemBERT model)"),Clo=l(),Ms=a("li"),Hae=a("strong"),wlo=o("retribert"),Alo=o(" \u2014 "),iB=a("a"),ylo=o("RetriBertTokenizer"),Llo=o(" or "),dB=a("a"),xlo=o("RetriBertTokenizerFast"),$lo=o(" (RetriBERT model)"),klo=l(),Es=a("li"),Uae=a("strong"),Slo=o("roberta"),Rlo=o(" \u2014 "),cB=a("a"),Plo=o("RobertaTokenizer"),Blo=o(" or "),fB=a("a"),Ilo=o("RobertaTokenizerFast"),Nlo=o(" (RoBERTa model)"),qlo=l(),Cs=a("li"),Jae=a("strong"),jlo=o("roformer"),Dlo=o(" \u2014 "),mB=a("a"),Glo=o("RoFormerTokenizer"),Olo=o(" or "),gB=a("a"),Vlo=o("RoFormerTokenizerFast"),Xlo=o(" (RoFormer model)"),zlo=l(),Jg=a("li"),Yae=a("strong"),Wlo=o("speech_to_text"),Qlo=o(" \u2014 "),hB=a("a"),Hlo=o("Speech2TextTokenizer"),Ulo=o(" (Speech2Text model)"),Jlo=l(),Yg=a("li"),Kae=a("strong"),Ylo=o("speech_to_text_2"),Klo=o(" \u2014 "),pB=a("a"),Zlo=o("Speech2Text2Tokenizer"),eio=o(" (Speech2Text2 model)"),oio=l(),ws=a("li"),Zae=a("strong"),rio=o("splinter"),tio=o(" \u2014 "),_B=a("a"),aio=o("SplinterTokenizer"),nio=o(" or "),uB=a("a"),sio=o("SplinterTokenizerFast"),lio=o(" (Splinter model)"),iio=l(),As=a("li"),ene=a("strong"),dio=o("squeezebert"),cio=o(" \u2014 "),bB=a("a"),fio=o("SqueezeBertTokenizer"),mio=o(" or "),vB=a("a"),gio=o("SqueezeBertTokenizerFast"),hio=o(" (SqueezeBERT model)"),pio=l(),ys=a("li"),one=a("strong"),_io=o("t5"),uio=o(" \u2014 "),FB=a("a"),bio=o("T5Tokenizer"),vio=o(" or "),TB=a("a"),Fio=o("T5TokenizerFast"),Tio=o(" (T5 model)"),Mio=l(),Kg=a("li"),rne=a("strong"),Eio=o("tapas"),Cio=o(" \u2014 "),MB=a("a"),wio=o("TapasTokenizer"),Aio=o(" (TAPAS model)"),yio=l(),Zg=a("li"),tne=a("strong"),Lio=o("tapex"),xio=o(" \u2014 "),EB=a("a"),$io=o("TapexTokenizer"),kio=o(" (TAPEX model)"),Sio=l(),eh=a("li"),ane=a("strong"),Rio=o("transfo-xl"),Pio=o(" \u2014 "),CB=a("a"),Bio=o("TransfoXLTokenizer"),Iio=o(" (Transformer-XL model)"),Nio=l(),Ls=a("li"),nne=a("strong"),qio=o("visual_bert"),jio=o(" \u2014 "),wB=a("a"),Dio=o("BertTokenizer"),Gio=o(" or "),AB=a("a"),Oio=o("BertTokenizerFast"),Vio=o(" (VisualBert model)"),Xio=l(),oh=a("li"),sne=a("strong"),zio=o("wav2vec2"),Wio=o(" \u2014 "),yB=a("a"),Qio=o("Wav2Vec2CTCTokenizer"),Hio=o(" (Wav2Vec2 model)"),Uio=l(),rh=a("li"),lne=a("strong"),Jio=o("wav2vec2-conformer"),Yio=o(" \u2014 "),LB=a("a"),Kio=o("Wav2Vec2CTCTokenizer"),Zio=o(" (Wav2Vec2-Conformer model)"),edo=l(),th=a("li"),ine=a("strong"),odo=o("wav2vec2_phoneme"),rdo=o(" \u2014 "),xB=a("a"),tdo=o("Wav2Vec2PhonemeCTCTokenizer"),ado=o(" (Wav2Vec2Phoneme model)"),ndo=l(),xs=a("li"),dne=a("strong"),sdo=o("xglm"),ldo=o(" \u2014 "),$B=a("a"),ido=o("XGLMTokenizer"),ddo=o(" or "),kB=a("a"),cdo=o("XGLMTokenizerFast"),fdo=o(" (XGLM model)"),mdo=l(),ah=a("li"),cne=a("strong"),gdo=o("xlm"),hdo=o(" \u2014 "),SB=a("a"),pdo=o("XLMTokenizer"),_do=o(" (XLM model)"),udo=l(),nh=a("li"),fne=a("strong"),bdo=o("xlm-prophetnet"),vdo=o(" \u2014 "),RB=a("a"),Fdo=o("XLMProphetNetTokenizer"),Tdo=o(" (XLMProphetNet model)"),Mdo=l(),$s=a("li"),mne=a("strong"),Edo=o("xlm-roberta"),Cdo=o(" \u2014 "),PB=a("a"),wdo=o("XLMRobertaTokenizer"),Ado=o(" or "),BB=a("a"),ydo=o("XLMRobertaTokenizerFast"),Ldo=o(" (XLM-RoBERTa model)"),xdo=l(),ks=a("li"),gne=a("strong"),$do=o("xlm-roberta-xl"),kdo=o(" \u2014 "),IB=a("a"),Sdo=o("RobertaTokenizer"),Rdo=o(" or "),NB=a("a"),Pdo=o("RobertaTokenizerFast"),Bdo=o(" (XLM-RoBERTa-XL model)"),Ido=l(),Ss=a("li"),hne=a("strong"),Ndo=o("xlnet"),qdo=o(" \u2014 "),qB=a("a"),jdo=o("XLNetTokenizer"),Ddo=o(" or "),jB=a("a"),Gdo=o("XLNetTokenizerFast"),Odo=o(" (XLNet model)"),Vdo=l(),Rs=a("li"),pne=a("strong"),Xdo=o("yoso"),zdo=o(" \u2014 "),DB=a("a"),Wdo=o("AlbertTokenizer"),Qdo=o(" or "),GB=a("a"),Hdo=o("AlbertTokenizerFast"),Udo=o(" (YOSO model)"),Jdo=l(),F(sh.$$.fragment),Ydo=l(),lh=a("div"),F(zA.$$.fragment),Kdo=l(),_ne=a("p"),Zdo=o("Register a new tokenizer in this mapping."),yqe=l(),Ei=a("h2"),ih=a("a"),une=a("span"),F(WA.$$.fragment),eco=l(),bne=a("span"),oco=o("AutoFeatureExtractor"),Lqe=l(),Ao=a("div"),F(QA.$$.fragment),rco=l(),HA=a("p"),tco=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),OB=a("a"),aco=o("AutoFeatureExtractor.from_pretrained()"),nco=o(" class method."),sco=l(),UA=a("p"),lco=o("This class cannot be instantiated directly using "),vne=a("code"),ico=o("__init__()"),dco=o(" (throws an error)."),cco=l(),He=a("div"),F(JA.$$.fragment),fco=l(),Fne=a("p"),mco=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),gco=l(),La=a("p"),hco=o("The feature extractor class to instantiate is selected based on the "),Tne=a("code"),pco=o("model_type"),_co=o(` property of the config object
(either passed as an argument or loaded from `),Mne=a("code"),uco=o("pretrained_model_name_or_path"),bco=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ene=a("code"),vco=o("pretrained_model_name_or_path"),Fco=o(":"),Tco=l(),Y=a("ul"),dh=a("li"),Cne=a("strong"),Mco=o("beit"),Eco=o(" \u2014 "),VB=a("a"),Cco=o("BeitFeatureExtractor"),wco=o(" (BEiT model)"),Aco=l(),ch=a("li"),wne=a("strong"),yco=o("clip"),Lco=o(" \u2014 "),XB=a("a"),xco=o("CLIPFeatureExtractor"),$co=o(" (CLIP model)"),kco=l(),fh=a("li"),Ane=a("strong"),Sco=o("convnext"),Rco=o(" \u2014 "),zB=a("a"),Pco=o("ConvNextFeatureExtractor"),Bco=o(" (ConvNext model)"),Ico=l(),mh=a("li"),yne=a("strong"),Nco=o("cvt"),qco=o(" \u2014 "),WB=a("a"),jco=o("ConvNextFeatureExtractor"),Dco=o(" (CvT model)"),Gco=l(),gh=a("li"),Lne=a("strong"),Oco=o("data2vec-audio"),Vco=o(" \u2014 "),QB=a("a"),Xco=o("Wav2Vec2FeatureExtractor"),zco=o(" (Data2VecAudio model)"),Wco=l(),hh=a("li"),xne=a("strong"),Qco=o("data2vec-vision"),Hco=o(" \u2014 "),HB=a("a"),Uco=o("BeitFeatureExtractor"),Jco=o(" (Data2VecVision model)"),Yco=l(),ph=a("li"),$ne=a("strong"),Kco=o("deit"),Zco=o(" \u2014 "),UB=a("a"),efo=o("DeiTFeatureExtractor"),ofo=o(" (DeiT model)"),rfo=l(),_h=a("li"),kne=a("strong"),tfo=o("detr"),afo=o(" \u2014 "),JB=a("a"),nfo=o("DetrFeatureExtractor"),sfo=o(" (DETR model)"),lfo=l(),uh=a("li"),Sne=a("strong"),ifo=o("dpt"),dfo=o(" \u2014 "),YB=a("a"),cfo=o("DPTFeatureExtractor"),ffo=o(" (DPT model)"),mfo=l(),bh=a("li"),Rne=a("strong"),gfo=o("flava"),hfo=o(" \u2014 "),KB=a("a"),pfo=o("FlavaFeatureExtractor"),_fo=o(" (Flava model)"),ufo=l(),vh=a("li"),Pne=a("strong"),bfo=o("glpn"),vfo=o(" \u2014 "),ZB=a("a"),Ffo=o("GLPNFeatureExtractor"),Tfo=o(" (GLPN model)"),Mfo=l(),Fh=a("li"),Bne=a("strong"),Efo=o("hubert"),Cfo=o(" \u2014 "),eI=a("a"),wfo=o("Wav2Vec2FeatureExtractor"),Afo=o(" (Hubert model)"),yfo=l(),Th=a("li"),Ine=a("strong"),Lfo=o("imagegpt"),xfo=o(" \u2014 "),oI=a("a"),$fo=o("ImageGPTFeatureExtractor"),kfo=o(" (ImageGPT model)"),Sfo=l(),Mh=a("li"),Nne=a("strong"),Rfo=o("layoutlmv2"),Pfo=o(" \u2014 "),rI=a("a"),Bfo=o("LayoutLMv2FeatureExtractor"),Ifo=o(" (LayoutLMv2 model)"),Nfo=l(),Eh=a("li"),qne=a("strong"),qfo=o("layoutlmv3"),jfo=o(" \u2014 "),tI=a("a"),Dfo=o("LayoutLMv3FeatureExtractor"),Gfo=o(" (LayoutLMv3 model)"),Ofo=l(),Ch=a("li"),jne=a("strong"),Vfo=o("maskformer"),Xfo=o(" \u2014 "),aI=a("a"),zfo=o("MaskFormerFeatureExtractor"),Wfo=o(" (MaskFormer model)"),Qfo=l(),wh=a("li"),Dne=a("strong"),Hfo=o("mobilevit"),Ufo=o(" \u2014 "),nI=a("a"),Jfo=o("MobileViTFeatureExtractor"),Yfo=o(" (MobileViT model)"),Kfo=l(),Ah=a("li"),Gne=a("strong"),Zfo=o("perceiver"),emo=o(" \u2014 "),sI=a("a"),omo=o("PerceiverFeatureExtractor"),rmo=o(" (Perceiver model)"),tmo=l(),yh=a("li"),One=a("strong"),amo=o("poolformer"),nmo=o(" \u2014 "),lI=a("a"),smo=o("PoolFormerFeatureExtractor"),lmo=o(" (PoolFormer model)"),imo=l(),Lh=a("li"),Vne=a("strong"),dmo=o("regnet"),cmo=o(" \u2014 "),iI=a("a"),fmo=o("ConvNextFeatureExtractor"),mmo=o(" (RegNet model)"),gmo=l(),xh=a("li"),Xne=a("strong"),hmo=o("resnet"),pmo=o(" \u2014 "),dI=a("a"),_mo=o("ConvNextFeatureExtractor"),umo=o(" (ResNet model)"),bmo=l(),$h=a("li"),zne=a("strong"),vmo=o("segformer"),Fmo=o(" \u2014 "),cI=a("a"),Tmo=o("SegformerFeatureExtractor"),Mmo=o(" (SegFormer model)"),Emo=l(),kh=a("li"),Wne=a("strong"),Cmo=o("speech_to_text"),wmo=o(" \u2014 "),fI=a("a"),Amo=o("Speech2TextFeatureExtractor"),ymo=o(" (Speech2Text model)"),Lmo=l(),Sh=a("li"),Qne=a("strong"),xmo=o("swin"),$mo=o(" \u2014 "),mI=a("a"),kmo=o("ViTFeatureExtractor"),Smo=o(" (Swin model)"),Rmo=l(),Rh=a("li"),Hne=a("strong"),Pmo=o("van"),Bmo=o(" \u2014 "),gI=a("a"),Imo=o("ConvNextFeatureExtractor"),Nmo=o(" (VAN model)"),qmo=l(),Ph=a("li"),Une=a("strong"),jmo=o("vit"),Dmo=o(" \u2014 "),hI=a("a"),Gmo=o("ViTFeatureExtractor"),Omo=o(" (ViT model)"),Vmo=l(),Bh=a("li"),Jne=a("strong"),Xmo=o("vit_mae"),zmo=o(" \u2014 "),pI=a("a"),Wmo=o("ViTFeatureExtractor"),Qmo=o(" (ViTMAE model)"),Hmo=l(),Ih=a("li"),Yne=a("strong"),Umo=o("wav2vec2"),Jmo=o(" \u2014 "),_I=a("a"),Ymo=o("Wav2Vec2FeatureExtractor"),Kmo=o(" (Wav2Vec2 model)"),Zmo=l(),Nh=a("li"),Kne=a("strong"),ego=o("wav2vec2-conformer"),ogo=o(" \u2014 "),uI=a("a"),rgo=o("Wav2Vec2FeatureExtractor"),tgo=o(" (Wav2Vec2-Conformer model)"),ago=l(),qh=a("li"),Zne=a("strong"),ngo=o("yolos"),sgo=o(" \u2014 "),bI=a("a"),lgo=o("YolosFeatureExtractor"),igo=o(" (YOLOS model)"),dgo=l(),F(jh.$$.fragment),cgo=l(),F(Dh.$$.fragment),fgo=l(),Gh=a("div"),F(YA.$$.fragment),mgo=l(),ese=a("p"),ggo=o("Register a new feature extractor for this class."),xqe=l(),Ci=a("h2"),Oh=a("a"),ose=a("span"),F(KA.$$.fragment),hgo=l(),rse=a("span"),pgo=o("AutoProcessor"),$qe=l(),yo=a("div"),F(ZA.$$.fragment),_go=l(),ey=a("p"),ugo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),vI=a("a"),bgo=o("AutoProcessor.from_pretrained()"),vgo=o(" class method."),Fgo=l(),oy=a("p"),Tgo=o("This class cannot be instantiated directly using "),tse=a("code"),Mgo=o("__init__()"),Ego=o(" (throws an error)."),Cgo=l(),Ue=a("div"),F(ry.$$.fragment),wgo=l(),ase=a("p"),Ago=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ygo=l(),wi=a("p"),Lgo=o("The processor class to instantiate is selected based on the "),nse=a("code"),xgo=o("model_type"),$go=o(` property of the config object (either
passed as an argument or loaded from `),sse=a("code"),kgo=o("pretrained_model_name_or_path"),Sgo=o(" if possible):"),Rgo=l(),he=a("ul"),Vh=a("li"),lse=a("strong"),Pgo=o("clip"),Bgo=o(" \u2014 "),FI=a("a"),Igo=o("CLIPProcessor"),Ngo=o(" (CLIP model)"),qgo=l(),Xh=a("li"),ise=a("strong"),jgo=o("flava"),Dgo=o(" \u2014 "),dse=a("code"),Ggo=o("FLAVAProcessor"),Ogo=o(" (Flava model)"),Vgo=l(),zh=a("li"),cse=a("strong"),Xgo=o("layoutlmv2"),zgo=o(" \u2014 "),TI=a("a"),Wgo=o("LayoutLMv2Processor"),Qgo=o(" (LayoutLMv2 model)"),Hgo=l(),Wh=a("li"),fse=a("strong"),Ugo=o("layoutlmv3"),Jgo=o(" \u2014 "),MI=a("a"),Ygo=o("LayoutLMv3Processor"),Kgo=o(" (LayoutLMv3 model)"),Zgo=l(),Qh=a("li"),mse=a("strong"),eho=o("layoutxlm"),oho=o(" \u2014 "),EI=a("a"),rho=o("LayoutXLMProcessor"),tho=o(" (LayoutXLM model)"),aho=l(),Hh=a("li"),gse=a("strong"),nho=o("sew"),sho=o(" \u2014 "),CI=a("a"),lho=o("Wav2Vec2Processor"),iho=o(" (SEW model)"),dho=l(),Uh=a("li"),hse=a("strong"),cho=o("sew-d"),fho=o(" \u2014 "),wI=a("a"),mho=o("Wav2Vec2Processor"),gho=o(" (SEW-D model)"),hho=l(),Jh=a("li"),pse=a("strong"),pho=o("speech_to_text"),_ho=o(" \u2014 "),AI=a("a"),uho=o("Speech2TextProcessor"),bho=o(" (Speech2Text model)"),vho=l(),Yh=a("li"),_se=a("strong"),Fho=o("speech_to_text_2"),Tho=o(" \u2014 "),yI=a("a"),Mho=o("Speech2Text2Processor"),Eho=o(" (Speech2Text2 model)"),Cho=l(),Kh=a("li"),use=a("strong"),who=o("trocr"),Aho=o(" \u2014 "),LI=a("a"),yho=o("TrOCRProcessor"),Lho=o(" (TrOCR model)"),xho=l(),Zh=a("li"),bse=a("strong"),$ho=o("unispeech"),kho=o(" \u2014 "),xI=a("a"),Sho=o("Wav2Vec2Processor"),Rho=o(" (UniSpeech model)"),Pho=l(),ep=a("li"),vse=a("strong"),Bho=o("unispeech-sat"),Iho=o(" \u2014 "),$I=a("a"),Nho=o("Wav2Vec2Processor"),qho=o(" (UniSpeechSat model)"),jho=l(),op=a("li"),Fse=a("strong"),Dho=o("vilt"),Gho=o(" \u2014 "),kI=a("a"),Oho=o("ViltProcessor"),Vho=o(" (ViLT model)"),Xho=l(),rp=a("li"),Tse=a("strong"),zho=o("vision-text-dual-encoder"),Who=o(" \u2014 "),SI=a("a"),Qho=o("VisionTextDualEncoderProcessor"),Hho=o(" (VisionTextDualEncoder model)"),Uho=l(),tp=a("li"),Mse=a("strong"),Jho=o("wav2vec2"),Yho=o(" \u2014 "),RI=a("a"),Kho=o("Wav2Vec2Processor"),Zho=o(" (Wav2Vec2 model)"),epo=l(),ap=a("li"),Ese=a("strong"),opo=o("wav2vec2-conformer"),rpo=o(" \u2014 "),PI=a("a"),tpo=o("Wav2Vec2Processor"),apo=o(" (Wav2Vec2-Conformer model)"),npo=l(),np=a("li"),Cse=a("strong"),spo=o("wavlm"),lpo=o(" \u2014 "),BI=a("a"),ipo=o("Wav2Vec2Processor"),dpo=o(" (WavLM model)"),cpo=l(),F(sp.$$.fragment),fpo=l(),F(lp.$$.fragment),mpo=l(),ip=a("div"),F(ty.$$.fragment),gpo=l(),wse=a("p"),hpo=o("Register a new processor for this class."),kqe=l(),Ai=a("h2"),dp=a("a"),Ase=a("span"),F(ay.$$.fragment),ppo=l(),yse=a("span"),_po=o("AutoModel"),Sqe=l(),Lo=a("div"),F(ny.$$.fragment),upo=l(),yi=a("p"),bpo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),II=a("a"),vpo=o("from_pretrained()"),Fpo=o(" class method or the "),NI=a("a"),Tpo=o("from_config()"),Mpo=o(` class
method.`),Epo=l(),sy=a("p"),Cpo=o("This class cannot be instantiated directly using "),Lse=a("code"),wpo=o("__init__()"),Apo=o(" (throws an error)."),ypo=l(),at=a("div"),F(ly.$$.fragment),Lpo=l(),xse=a("p"),xpo=o("Instantiates one of the base model classes of the library from a configuration."),$po=l(),Li=a("p"),kpo=o(`Note:
Loading a model from its configuration file does `),$se=a("strong"),Spo=o("not"),Rpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qI=a("a"),Ppo=o("from_pretrained()"),Bpo=o(" to load the model weights."),Ipo=l(),F(cp.$$.fragment),Npo=l(),Je=a("div"),F(iy.$$.fragment),qpo=l(),kse=a("p"),jpo=o("Instantiate one of the base model classes of the library from a pretrained model."),Dpo=l(),xa=a("p"),Gpo=o("The model class to instantiate is selected based on the "),Sse=a("code"),Opo=o("model_type"),Vpo=o(` property of the config object (either
passed as an argument or loaded from `),Rse=a("code"),Xpo=o("pretrained_model_name_or_path"),zpo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pse=a("code"),Wpo=o("pretrained_model_name_or_path"),Qpo=o(":"),Hpo=l(),x=a("ul"),fp=a("li"),Bse=a("strong"),Upo=o("albert"),Jpo=o(" \u2014 "),jI=a("a"),Ypo=o("AlbertModel"),Kpo=o(" (ALBERT model)"),Zpo=l(),mp=a("li"),Ise=a("strong"),e_o=o("bart"),o_o=o(" \u2014 "),DI=a("a"),r_o=o("BartModel"),t_o=o(" (BART model)"),a_o=l(),gp=a("li"),Nse=a("strong"),n_o=o("beit"),s_o=o(" \u2014 "),GI=a("a"),l_o=o("BeitModel"),i_o=o(" (BEiT model)"),d_o=l(),hp=a("li"),qse=a("strong"),c_o=o("bert"),f_o=o(" \u2014 "),OI=a("a"),m_o=o("BertModel"),g_o=o(" (BERT model)"),h_o=l(),pp=a("li"),jse=a("strong"),p_o=o("bert-generation"),__o=o(" \u2014 "),VI=a("a"),u_o=o("BertGenerationEncoder"),b_o=o(" (Bert Generation model)"),v_o=l(),_p=a("li"),Dse=a("strong"),F_o=o("big_bird"),T_o=o(" \u2014 "),XI=a("a"),M_o=o("BigBirdModel"),E_o=o(" (BigBird model)"),C_o=l(),up=a("li"),Gse=a("strong"),w_o=o("bigbird_pegasus"),A_o=o(" \u2014 "),zI=a("a"),y_o=o("BigBirdPegasusModel"),L_o=o(" (BigBirdPegasus model)"),x_o=l(),bp=a("li"),Ose=a("strong"),$_o=o("blenderbot"),k_o=o(" \u2014 "),WI=a("a"),S_o=o("BlenderbotModel"),R_o=o(" (Blenderbot model)"),P_o=l(),vp=a("li"),Vse=a("strong"),B_o=o("blenderbot-small"),I_o=o(" \u2014 "),QI=a("a"),N_o=o("BlenderbotSmallModel"),q_o=o(" (BlenderbotSmall model)"),j_o=l(),Fp=a("li"),Xse=a("strong"),D_o=o("camembert"),G_o=o(" \u2014 "),HI=a("a"),O_o=o("CamembertModel"),V_o=o(" (CamemBERT model)"),X_o=l(),Tp=a("li"),zse=a("strong"),z_o=o("canine"),W_o=o(" \u2014 "),UI=a("a"),Q_o=o("CanineModel"),H_o=o(" (Canine model)"),U_o=l(),Mp=a("li"),Wse=a("strong"),J_o=o("clip"),Y_o=o(" \u2014 "),JI=a("a"),K_o=o("CLIPModel"),Z_o=o(" (CLIP model)"),euo=l(),Ep=a("li"),Qse=a("strong"),ouo=o("convbert"),ruo=o(" \u2014 "),YI=a("a"),tuo=o("ConvBertModel"),auo=o(" (ConvBERT model)"),nuo=l(),Cp=a("li"),Hse=a("strong"),suo=o("convnext"),luo=o(" \u2014 "),KI=a("a"),iuo=o("ConvNextModel"),duo=o(" (ConvNext model)"),cuo=l(),wp=a("li"),Use=a("strong"),fuo=o("ctrl"),muo=o(" \u2014 "),ZI=a("a"),guo=o("CTRLModel"),huo=o(" (CTRL model)"),puo=l(),Ap=a("li"),Jse=a("strong"),_uo=o("cvt"),uuo=o(" \u2014 "),eN=a("a"),buo=o("CvtModel"),vuo=o(" (CvT model)"),Fuo=l(),yp=a("li"),Yse=a("strong"),Tuo=o("data2vec-audio"),Muo=o(" \u2014 "),oN=a("a"),Euo=o("Data2VecAudioModel"),Cuo=o(" (Data2VecAudio model)"),wuo=l(),Lp=a("li"),Kse=a("strong"),Auo=o("data2vec-text"),yuo=o(" \u2014 "),rN=a("a"),Luo=o("Data2VecTextModel"),xuo=o(" (Data2VecText model)"),$uo=l(),xp=a("li"),Zse=a("strong"),kuo=o("data2vec-vision"),Suo=o(" \u2014 "),tN=a("a"),Ruo=o("Data2VecVisionModel"),Puo=o(" (Data2VecVision model)"),Buo=l(),$p=a("li"),ele=a("strong"),Iuo=o("deberta"),Nuo=o(" \u2014 "),aN=a("a"),quo=o("DebertaModel"),juo=o(" (DeBERTa model)"),Duo=l(),kp=a("li"),ole=a("strong"),Guo=o("deberta-v2"),Ouo=o(" \u2014 "),nN=a("a"),Vuo=o("DebertaV2Model"),Xuo=o(" (DeBERTa-v2 model)"),zuo=l(),Sp=a("li"),rle=a("strong"),Wuo=o("decision_transformer"),Quo=o(" \u2014 "),sN=a("a"),Huo=o("DecisionTransformerModel"),Uuo=o(" (Decision Transformer model)"),Juo=l(),Rp=a("li"),tle=a("strong"),Yuo=o("deit"),Kuo=o(" \u2014 "),lN=a("a"),Zuo=o("DeiTModel"),e1o=o(" (DeiT model)"),o1o=l(),Pp=a("li"),ale=a("strong"),r1o=o("detr"),t1o=o(" \u2014 "),iN=a("a"),a1o=o("DetrModel"),n1o=o(" (DETR model)"),s1o=l(),Bp=a("li"),nle=a("strong"),l1o=o("distilbert"),i1o=o(" \u2014 "),dN=a("a"),d1o=o("DistilBertModel"),c1o=o(" (DistilBERT model)"),f1o=l(),Ip=a("li"),sle=a("strong"),m1o=o("dpr"),g1o=o(" \u2014 "),cN=a("a"),h1o=o("DPRQuestionEncoder"),p1o=o(" (DPR model)"),_1o=l(),Np=a("li"),lle=a("strong"),u1o=o("dpt"),b1o=o(" \u2014 "),fN=a("a"),v1o=o("DPTModel"),F1o=o(" (DPT model)"),T1o=l(),qp=a("li"),ile=a("strong"),M1o=o("electra"),E1o=o(" \u2014 "),mN=a("a"),C1o=o("ElectraModel"),w1o=o(" (ELECTRA model)"),A1o=l(),jp=a("li"),dle=a("strong"),y1o=o("flaubert"),L1o=o(" \u2014 "),gN=a("a"),x1o=o("FlaubertModel"),$1o=o(" (FlauBERT model)"),k1o=l(),Dp=a("li"),cle=a("strong"),S1o=o("flava"),R1o=o(" \u2014 "),hN=a("a"),P1o=o("FlavaModel"),B1o=o(" (Flava model)"),I1o=l(),Gp=a("li"),fle=a("strong"),N1o=o("fnet"),q1o=o(" \u2014 "),pN=a("a"),j1o=o("FNetModel"),D1o=o(" (FNet model)"),G1o=l(),Op=a("li"),mle=a("strong"),O1o=o("fsmt"),V1o=o(" \u2014 "),_N=a("a"),X1o=o("FSMTModel"),z1o=o(" (FairSeq Machine-Translation model)"),W1o=l(),Ps=a("li"),gle=a("strong"),Q1o=o("funnel"),H1o=o(" \u2014 "),uN=a("a"),U1o=o("FunnelModel"),J1o=o(" or "),bN=a("a"),Y1o=o("FunnelBaseModel"),K1o=o(" (Funnel Transformer model)"),Z1o=l(),Vp=a("li"),hle=a("strong"),ebo=o("glpn"),obo=o(" \u2014 "),vN=a("a"),rbo=o("GLPNModel"),tbo=o(" (GLPN model)"),abo=l(),Xp=a("li"),ple=a("strong"),nbo=o("gpt2"),sbo=o(" \u2014 "),FN=a("a"),lbo=o("GPT2Model"),ibo=o(" (OpenAI GPT-2 model)"),dbo=l(),zp=a("li"),_le=a("strong"),cbo=o("gpt_neo"),fbo=o(" \u2014 "),TN=a("a"),mbo=o("GPTNeoModel"),gbo=o(" (GPT Neo model)"),hbo=l(),Wp=a("li"),ule=a("strong"),pbo=o("gpt_neox"),_bo=o(" \u2014 "),MN=a("a"),ubo=o("GPTNeoXModel"),bbo=o(" (GPT NeoX model)"),vbo=l(),Qp=a("li"),ble=a("strong"),Fbo=o("gptj"),Tbo=o(" \u2014 "),EN=a("a"),Mbo=o("GPTJModel"),Ebo=o(" (GPT-J model)"),Cbo=l(),Hp=a("li"),vle=a("strong"),wbo=o("hubert"),Abo=o(" \u2014 "),CN=a("a"),ybo=o("HubertModel"),Lbo=o(" (Hubert model)"),xbo=l(),Up=a("li"),Fle=a("strong"),$bo=o("ibert"),kbo=o(" \u2014 "),wN=a("a"),Sbo=o("IBertModel"),Rbo=o(" (I-BERT model)"),Pbo=l(),Jp=a("li"),Tle=a("strong"),Bbo=o("imagegpt"),Ibo=o(" \u2014 "),AN=a("a"),Nbo=o("ImageGPTModel"),qbo=o(" (ImageGPT model)"),jbo=l(),Yp=a("li"),Mle=a("strong"),Dbo=o("layoutlm"),Gbo=o(" \u2014 "),yN=a("a"),Obo=o("LayoutLMModel"),Vbo=o(" (LayoutLM model)"),Xbo=l(),Kp=a("li"),Ele=a("strong"),zbo=o("layoutlmv2"),Wbo=o(" \u2014 "),LN=a("a"),Qbo=o("LayoutLMv2Model"),Hbo=o(" (LayoutLMv2 model)"),Ubo=l(),Zp=a("li"),Cle=a("strong"),Jbo=o("layoutlmv3"),Ybo=o(" \u2014 "),xN=a("a"),Kbo=o("LayoutLMv3Model"),Zbo=o(" (LayoutLMv3 model)"),e2o=l(),e_=a("li"),wle=a("strong"),o2o=o("led"),r2o=o(" \u2014 "),$N=a("a"),t2o=o("LEDModel"),a2o=o(" (LED model)"),n2o=l(),o_=a("li"),Ale=a("strong"),s2o=o("longformer"),l2o=o(" \u2014 "),kN=a("a"),i2o=o("LongformerModel"),d2o=o(" (Longformer model)"),c2o=l(),r_=a("li"),yle=a("strong"),f2o=o("luke"),m2o=o(" \u2014 "),SN=a("a"),g2o=o("LukeModel"),h2o=o(" (LUKE model)"),p2o=l(),t_=a("li"),Lle=a("strong"),_2o=o("lxmert"),u2o=o(" \u2014 "),RN=a("a"),b2o=o("LxmertModel"),v2o=o(" (LXMERT model)"),F2o=l(),a_=a("li"),xle=a("strong"),T2o=o("m2m_100"),M2o=o(" \u2014 "),PN=a("a"),E2o=o("M2M100Model"),C2o=o(" (M2M100 model)"),w2o=l(),n_=a("li"),$le=a("strong"),A2o=o("marian"),y2o=o(" \u2014 "),BN=a("a"),L2o=o("MarianModel"),x2o=o(" (Marian model)"),$2o=l(),s_=a("li"),kle=a("strong"),k2o=o("maskformer"),S2o=o(" \u2014 "),IN=a("a"),R2o=o("MaskFormerModel"),P2o=o(" (MaskFormer model)"),B2o=l(),l_=a("li"),Sle=a("strong"),I2o=o("mbart"),N2o=o(" \u2014 "),NN=a("a"),q2o=o("MBartModel"),j2o=o(" (mBART model)"),D2o=l(),i_=a("li"),Rle=a("strong"),G2o=o("megatron-bert"),O2o=o(" \u2014 "),qN=a("a"),V2o=o("MegatronBertModel"),X2o=o(" (MegatronBert model)"),z2o=l(),d_=a("li"),Ple=a("strong"),W2o=o("mobilebert"),Q2o=o(" \u2014 "),jN=a("a"),H2o=o("MobileBertModel"),U2o=o(" (MobileBERT model)"),J2o=l(),c_=a("li"),Ble=a("strong"),Y2o=o("mobilevit"),K2o=o(" \u2014 "),DN=a("a"),Z2o=o("MobileViTModel"),e4o=o(" (MobileViT model)"),o4o=l(),f_=a("li"),Ile=a("strong"),r4o=o("mpnet"),t4o=o(" \u2014 "),GN=a("a"),a4o=o("MPNetModel"),n4o=o(" (MPNet model)"),s4o=l(),m_=a("li"),Nle=a("strong"),l4o=o("mt5"),i4o=o(" \u2014 "),ON=a("a"),d4o=o("MT5Model"),c4o=o(" (mT5 model)"),f4o=l(),g_=a("li"),qle=a("strong"),m4o=o("nystromformer"),g4o=o(" \u2014 "),VN=a("a"),h4o=o("NystromformerModel"),p4o=o(" (Nystromformer model)"),_4o=l(),h_=a("li"),jle=a("strong"),u4o=o("openai-gpt"),b4o=o(" \u2014 "),XN=a("a"),v4o=o("OpenAIGPTModel"),F4o=o(" (OpenAI GPT model)"),T4o=l(),p_=a("li"),Dle=a("strong"),M4o=o("opt"),E4o=o(" \u2014 "),zN=a("a"),C4o=o("OPTModel"),w4o=o(" (OPT model)"),A4o=l(),__=a("li"),Gle=a("strong"),y4o=o("pegasus"),L4o=o(" \u2014 "),WN=a("a"),x4o=o("PegasusModel"),$4o=o(" (Pegasus model)"),k4o=l(),u_=a("li"),Ole=a("strong"),S4o=o("perceiver"),R4o=o(" \u2014 "),QN=a("a"),P4o=o("PerceiverModel"),B4o=o(" (Perceiver model)"),I4o=l(),b_=a("li"),Vle=a("strong"),N4o=o("plbart"),q4o=o(" \u2014 "),HN=a("a"),j4o=o("PLBartModel"),D4o=o(" (PLBart model)"),G4o=l(),v_=a("li"),Xle=a("strong"),O4o=o("poolformer"),V4o=o(" \u2014 "),UN=a("a"),X4o=o("PoolFormerModel"),z4o=o(" (PoolFormer model)"),W4o=l(),F_=a("li"),zle=a("strong"),Q4o=o("prophetnet"),H4o=o(" \u2014 "),JN=a("a"),U4o=o("ProphetNetModel"),J4o=o(" (ProphetNet model)"),Y4o=l(),T_=a("li"),Wle=a("strong"),K4o=o("qdqbert"),Z4o=o(" \u2014 "),YN=a("a"),evo=o("QDQBertModel"),ovo=o(" (QDQBert model)"),rvo=l(),M_=a("li"),Qle=a("strong"),tvo=o("reformer"),avo=o(" \u2014 "),KN=a("a"),nvo=o("ReformerModel"),svo=o(" (Reformer model)"),lvo=l(),E_=a("li"),Hle=a("strong"),ivo=o("regnet"),dvo=o(" \u2014 "),ZN=a("a"),cvo=o("RegNetModel"),fvo=o(" (RegNet model)"),mvo=l(),C_=a("li"),Ule=a("strong"),gvo=o("rembert"),hvo=o(" \u2014 "),eq=a("a"),pvo=o("RemBertModel"),_vo=o(" (RemBERT model)"),uvo=l(),w_=a("li"),Jle=a("strong"),bvo=o("resnet"),vvo=o(" \u2014 "),oq=a("a"),Fvo=o("ResNetModel"),Tvo=o(" (ResNet model)"),Mvo=l(),A_=a("li"),Yle=a("strong"),Evo=o("retribert"),Cvo=o(" \u2014 "),rq=a("a"),wvo=o("RetriBertModel"),Avo=o(" (RetriBERT model)"),yvo=l(),y_=a("li"),Kle=a("strong"),Lvo=o("roberta"),xvo=o(" \u2014 "),tq=a("a"),$vo=o("RobertaModel"),kvo=o(" (RoBERTa model)"),Svo=l(),L_=a("li"),Zle=a("strong"),Rvo=o("roformer"),Pvo=o(" \u2014 "),aq=a("a"),Bvo=o("RoFormerModel"),Ivo=o(" (RoFormer model)"),Nvo=l(),x_=a("li"),eie=a("strong"),qvo=o("segformer"),jvo=o(" \u2014 "),nq=a("a"),Dvo=o("SegformerModel"),Gvo=o(" (SegFormer model)"),Ovo=l(),$_=a("li"),oie=a("strong"),Vvo=o("sew"),Xvo=o(" \u2014 "),sq=a("a"),zvo=o("SEWModel"),Wvo=o(" (SEW model)"),Qvo=l(),k_=a("li"),rie=a("strong"),Hvo=o("sew-d"),Uvo=o(" \u2014 "),lq=a("a"),Jvo=o("SEWDModel"),Yvo=o(" (SEW-D model)"),Kvo=l(),S_=a("li"),tie=a("strong"),Zvo=o("speech_to_text"),e5o=o(" \u2014 "),iq=a("a"),o5o=o("Speech2TextModel"),r5o=o(" (Speech2Text model)"),t5o=l(),R_=a("li"),aie=a("strong"),a5o=o("splinter"),n5o=o(" \u2014 "),dq=a("a"),s5o=o("SplinterModel"),l5o=o(" (Splinter model)"),i5o=l(),P_=a("li"),nie=a("strong"),d5o=o("squeezebert"),c5o=o(" \u2014 "),cq=a("a"),f5o=o("SqueezeBertModel"),m5o=o(" (SqueezeBERT model)"),g5o=l(),B_=a("li"),sie=a("strong"),h5o=o("swin"),p5o=o(" \u2014 "),fq=a("a"),_5o=o("SwinModel"),u5o=o(" (Swin model)"),b5o=l(),I_=a("li"),lie=a("strong"),v5o=o("t5"),F5o=o(" \u2014 "),mq=a("a"),T5o=o("T5Model"),M5o=o(" (T5 model)"),E5o=l(),N_=a("li"),iie=a("strong"),C5o=o("tapas"),w5o=o(" \u2014 "),gq=a("a"),A5o=o("TapasModel"),y5o=o(" (TAPAS model)"),L5o=l(),q_=a("li"),die=a("strong"),x5o=o("trajectory_transformer"),$5o=o(" \u2014 "),hq=a("a"),k5o=o("TrajectoryTransformerModel"),S5o=o(" (Trajectory Transformer model)"),R5o=l(),j_=a("li"),cie=a("strong"),P5o=o("transfo-xl"),B5o=o(" \u2014 "),pq=a("a"),I5o=o("TransfoXLModel"),N5o=o(" (Transformer-XL model)"),q5o=l(),D_=a("li"),fie=a("strong"),j5o=o("unispeech"),D5o=o(" \u2014 "),_q=a("a"),G5o=o("UniSpeechModel"),O5o=o(" (UniSpeech model)"),V5o=l(),G_=a("li"),mie=a("strong"),X5o=o("unispeech-sat"),z5o=o(" \u2014 "),uq=a("a"),W5o=o("UniSpeechSatModel"),Q5o=o(" (UniSpeechSat model)"),H5o=l(),O_=a("li"),gie=a("strong"),U5o=o("van"),J5o=o(" \u2014 "),bq=a("a"),Y5o=o("VanModel"),K5o=o(" (VAN model)"),Z5o=l(),V_=a("li"),hie=a("strong"),e3o=o("vilt"),o3o=o(" \u2014 "),vq=a("a"),r3o=o("ViltModel"),t3o=o(" (ViLT model)"),a3o=l(),X_=a("li"),pie=a("strong"),n3o=o("vision-text-dual-encoder"),s3o=o(" \u2014 "),Fq=a("a"),l3o=o("VisionTextDualEncoderModel"),i3o=o(" (VisionTextDualEncoder model)"),d3o=l(),z_=a("li"),_ie=a("strong"),c3o=o("visual_bert"),f3o=o(" \u2014 "),Tq=a("a"),m3o=o("VisualBertModel"),g3o=o(" (VisualBert model)"),h3o=l(),W_=a("li"),uie=a("strong"),p3o=o("vit"),_3o=o(" \u2014 "),Mq=a("a"),u3o=o("ViTModel"),b3o=o(" (ViT model)"),v3o=l(),Q_=a("li"),bie=a("strong"),F3o=o("vit_mae"),T3o=o(" \u2014 "),Eq=a("a"),M3o=o("ViTMAEModel"),E3o=o(" (ViTMAE model)"),C3o=l(),H_=a("li"),vie=a("strong"),w3o=o("wav2vec2"),A3o=o(" \u2014 "),Cq=a("a"),y3o=o("Wav2Vec2Model"),L3o=o(" (Wav2Vec2 model)"),x3o=l(),U_=a("li"),Fie=a("strong"),$3o=o("wav2vec2-conformer"),k3o=o(" \u2014 "),wq=a("a"),S3o=o("Wav2Vec2ConformerModel"),R3o=o(" (Wav2Vec2-Conformer model)"),P3o=l(),J_=a("li"),Tie=a("strong"),B3o=o("wavlm"),I3o=o(" \u2014 "),Aq=a("a"),N3o=o("WavLMModel"),q3o=o(" (WavLM model)"),j3o=l(),Y_=a("li"),Mie=a("strong"),D3o=o("xglm"),G3o=o(" \u2014 "),yq=a("a"),O3o=o("XGLMModel"),V3o=o(" (XGLM model)"),X3o=l(),K_=a("li"),Eie=a("strong"),z3o=o("xlm"),W3o=o(" \u2014 "),Lq=a("a"),Q3o=o("XLMModel"),H3o=o(" (XLM model)"),U3o=l(),Z_=a("li"),Cie=a("strong"),J3o=o("xlm-prophetnet"),Y3o=o(" \u2014 "),xq=a("a"),K3o=o("XLMProphetNetModel"),Z3o=o(" (XLMProphetNet model)"),eFo=l(),eu=a("li"),wie=a("strong"),oFo=o("xlm-roberta"),rFo=o(" \u2014 "),$q=a("a"),tFo=o("XLMRobertaModel"),aFo=o(" (XLM-RoBERTa model)"),nFo=l(),ou=a("li"),Aie=a("strong"),sFo=o("xlm-roberta-xl"),lFo=o(" \u2014 "),kq=a("a"),iFo=o("XLMRobertaXLModel"),dFo=o(" (XLM-RoBERTa-XL model)"),cFo=l(),ru=a("li"),yie=a("strong"),fFo=o("xlnet"),mFo=o(" \u2014 "),Sq=a("a"),gFo=o("XLNetModel"),hFo=o(" (XLNet model)"),pFo=l(),tu=a("li"),Lie=a("strong"),_Fo=o("yolos"),uFo=o(" \u2014 "),Rq=a("a"),bFo=o("YolosModel"),vFo=o(" (YOLOS model)"),FFo=l(),au=a("li"),xie=a("strong"),TFo=o("yoso"),MFo=o(" \u2014 "),Pq=a("a"),EFo=o("YosoModel"),CFo=o(" (YOSO model)"),wFo=l(),nu=a("p"),AFo=o("The model is set in evaluation mode by default using "),$ie=a("code"),yFo=o("model.eval()"),LFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kie=a("code"),xFo=o("model.train()"),$Fo=l(),F(su.$$.fragment),Rqe=l(),xi=a("h2"),lu=a("a"),Sie=a("span"),F(dy.$$.fragment),kFo=l(),Rie=a("span"),SFo=o("AutoModelForPreTraining"),Pqe=l(),xo=a("div"),F(cy.$$.fragment),RFo=l(),$i=a("p"),PFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Bq=a("a"),BFo=o("from_pretrained()"),IFo=o(" class method or the "),Iq=a("a"),NFo=o("from_config()"),qFo=o(` class
method.`),jFo=l(),fy=a("p"),DFo=o("This class cannot be instantiated directly using "),Pie=a("code"),GFo=o("__init__()"),OFo=o(" (throws an error)."),VFo=l(),nt=a("div"),F(my.$$.fragment),XFo=l(),Bie=a("p"),zFo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),WFo=l(),ki=a("p"),QFo=o(`Note:
Loading a model from its configuration file does `),Iie=a("strong"),HFo=o("not"),UFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nq=a("a"),JFo=o("from_pretrained()"),YFo=o(" to load the model weights."),KFo=l(),F(iu.$$.fragment),ZFo=l(),Ye=a("div"),F(gy.$$.fragment),eTo=l(),Nie=a("p"),oTo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rTo=l(),$a=a("p"),tTo=o("The model class to instantiate is selected based on the "),qie=a("code"),aTo=o("model_type"),nTo=o(` property of the config object (either
passed as an argument or loaded from `),jie=a("code"),sTo=o("pretrained_model_name_or_path"),lTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=a("code"),iTo=o("pretrained_model_name_or_path"),dTo=o(":"),cTo=l(),G=a("ul"),du=a("li"),Gie=a("strong"),fTo=o("albert"),mTo=o(" \u2014 "),qq=a("a"),gTo=o("AlbertForPreTraining"),hTo=o(" (ALBERT model)"),pTo=l(),cu=a("li"),Oie=a("strong"),_To=o("bart"),uTo=o(" \u2014 "),jq=a("a"),bTo=o("BartForConditionalGeneration"),vTo=o(" (BART model)"),FTo=l(),fu=a("li"),Vie=a("strong"),TTo=o("bert"),MTo=o(" \u2014 "),Dq=a("a"),ETo=o("BertForPreTraining"),CTo=o(" (BERT model)"),wTo=l(),mu=a("li"),Xie=a("strong"),ATo=o("big_bird"),yTo=o(" \u2014 "),Gq=a("a"),LTo=o("BigBirdForPreTraining"),xTo=o(" (BigBird model)"),$To=l(),gu=a("li"),zie=a("strong"),kTo=o("camembert"),STo=o(" \u2014 "),Oq=a("a"),RTo=o("CamembertForMaskedLM"),PTo=o(" (CamemBERT model)"),BTo=l(),hu=a("li"),Wie=a("strong"),ITo=o("ctrl"),NTo=o(" \u2014 "),Vq=a("a"),qTo=o("CTRLLMHeadModel"),jTo=o(" (CTRL model)"),DTo=l(),pu=a("li"),Qie=a("strong"),GTo=o("data2vec-text"),OTo=o(" \u2014 "),Xq=a("a"),VTo=o("Data2VecTextForMaskedLM"),XTo=o(" (Data2VecText model)"),zTo=l(),_u=a("li"),Hie=a("strong"),WTo=o("deberta"),QTo=o(" \u2014 "),zq=a("a"),HTo=o("DebertaForMaskedLM"),UTo=o(" (DeBERTa model)"),JTo=l(),uu=a("li"),Uie=a("strong"),YTo=o("deberta-v2"),KTo=o(" \u2014 "),Wq=a("a"),ZTo=o("DebertaV2ForMaskedLM"),e7o=o(" (DeBERTa-v2 model)"),o7o=l(),bu=a("li"),Jie=a("strong"),r7o=o("distilbert"),t7o=o(" \u2014 "),Qq=a("a"),a7o=o("DistilBertForMaskedLM"),n7o=o(" (DistilBERT model)"),s7o=l(),vu=a("li"),Yie=a("strong"),l7o=o("electra"),i7o=o(" \u2014 "),Hq=a("a"),d7o=o("ElectraForPreTraining"),c7o=o(" (ELECTRA model)"),f7o=l(),Fu=a("li"),Kie=a("strong"),m7o=o("flaubert"),g7o=o(" \u2014 "),Uq=a("a"),h7o=o("FlaubertWithLMHeadModel"),p7o=o(" (FlauBERT model)"),_7o=l(),Tu=a("li"),Zie=a("strong"),u7o=o("flava"),b7o=o(" \u2014 "),Jq=a("a"),v7o=o("FlavaForPreTraining"),F7o=o(" (Flava model)"),T7o=l(),Mu=a("li"),ede=a("strong"),M7o=o("fnet"),E7o=o(" \u2014 "),Yq=a("a"),C7o=o("FNetForPreTraining"),w7o=o(" (FNet model)"),A7o=l(),Eu=a("li"),ode=a("strong"),y7o=o("fsmt"),L7o=o(" \u2014 "),Kq=a("a"),x7o=o("FSMTForConditionalGeneration"),$7o=o(" (FairSeq Machine-Translation model)"),k7o=l(),Cu=a("li"),rde=a("strong"),S7o=o("funnel"),R7o=o(" \u2014 "),Zq=a("a"),P7o=o("FunnelForPreTraining"),B7o=o(" (Funnel Transformer model)"),I7o=l(),wu=a("li"),tde=a("strong"),N7o=o("gpt2"),q7o=o(" \u2014 "),ej=a("a"),j7o=o("GPT2LMHeadModel"),D7o=o(" (OpenAI GPT-2 model)"),G7o=l(),Au=a("li"),ade=a("strong"),O7o=o("ibert"),V7o=o(" \u2014 "),oj=a("a"),X7o=o("IBertForMaskedLM"),z7o=o(" (I-BERT model)"),W7o=l(),yu=a("li"),nde=a("strong"),Q7o=o("layoutlm"),H7o=o(" \u2014 "),rj=a("a"),U7o=o("LayoutLMForMaskedLM"),J7o=o(" (LayoutLM model)"),Y7o=l(),Lu=a("li"),sde=a("strong"),K7o=o("longformer"),Z7o=o(" \u2014 "),tj=a("a"),eMo=o("LongformerForMaskedLM"),oMo=o(" (Longformer model)"),rMo=l(),xu=a("li"),lde=a("strong"),tMo=o("lxmert"),aMo=o(" \u2014 "),aj=a("a"),nMo=o("LxmertForPreTraining"),sMo=o(" (LXMERT model)"),lMo=l(),$u=a("li"),ide=a("strong"),iMo=o("megatron-bert"),dMo=o(" \u2014 "),nj=a("a"),cMo=o("MegatronBertForPreTraining"),fMo=o(" (MegatronBert model)"),mMo=l(),ku=a("li"),dde=a("strong"),gMo=o("mobilebert"),hMo=o(" \u2014 "),sj=a("a"),pMo=o("MobileBertForPreTraining"),_Mo=o(" (MobileBERT model)"),uMo=l(),Su=a("li"),cde=a("strong"),bMo=o("mpnet"),vMo=o(" \u2014 "),lj=a("a"),FMo=o("MPNetForMaskedLM"),TMo=o(" (MPNet model)"),MMo=l(),Ru=a("li"),fde=a("strong"),EMo=o("openai-gpt"),CMo=o(" \u2014 "),ij=a("a"),wMo=o("OpenAIGPTLMHeadModel"),AMo=o(" (OpenAI GPT model)"),yMo=l(),Pu=a("li"),mde=a("strong"),LMo=o("retribert"),xMo=o(" \u2014 "),dj=a("a"),$Mo=o("RetriBertModel"),kMo=o(" (RetriBERT model)"),SMo=l(),Bu=a("li"),gde=a("strong"),RMo=o("roberta"),PMo=o(" \u2014 "),cj=a("a"),BMo=o("RobertaForMaskedLM"),IMo=o(" (RoBERTa model)"),NMo=l(),Iu=a("li"),hde=a("strong"),qMo=o("splinter"),jMo=o(" \u2014 "),fj=a("a"),DMo=o("SplinterForPreTraining"),GMo=o(" (Splinter model)"),OMo=l(),Nu=a("li"),pde=a("strong"),VMo=o("squeezebert"),XMo=o(" \u2014 "),mj=a("a"),zMo=o("SqueezeBertForMaskedLM"),WMo=o(" (SqueezeBERT model)"),QMo=l(),qu=a("li"),_de=a("strong"),HMo=o("t5"),UMo=o(" \u2014 "),gj=a("a"),JMo=o("T5ForConditionalGeneration"),YMo=o(" (T5 model)"),KMo=l(),ju=a("li"),ude=a("strong"),ZMo=o("tapas"),eEo=o(" \u2014 "),hj=a("a"),oEo=o("TapasForMaskedLM"),rEo=o(" (TAPAS model)"),tEo=l(),Du=a("li"),bde=a("strong"),aEo=o("transfo-xl"),nEo=o(" \u2014 "),pj=a("a"),sEo=o("TransfoXLLMHeadModel"),lEo=o(" (Transformer-XL model)"),iEo=l(),Gu=a("li"),vde=a("strong"),dEo=o("unispeech"),cEo=o(" \u2014 "),_j=a("a"),fEo=o("UniSpeechForPreTraining"),mEo=o(" (UniSpeech model)"),gEo=l(),Ou=a("li"),Fde=a("strong"),hEo=o("unispeech-sat"),pEo=o(" \u2014 "),uj=a("a"),_Eo=o("UniSpeechSatForPreTraining"),uEo=o(" (UniSpeechSat model)"),bEo=l(),Vu=a("li"),Tde=a("strong"),vEo=o("visual_bert"),FEo=o(" \u2014 "),bj=a("a"),TEo=o("VisualBertForPreTraining"),MEo=o(" (VisualBert model)"),EEo=l(),Xu=a("li"),Mde=a("strong"),CEo=o("vit_mae"),wEo=o(" \u2014 "),vj=a("a"),AEo=o("ViTMAEForPreTraining"),yEo=o(" (ViTMAE model)"),LEo=l(),zu=a("li"),Ede=a("strong"),xEo=o("wav2vec2"),$Eo=o(" \u2014 "),Fj=a("a"),kEo=o("Wav2Vec2ForPreTraining"),SEo=o(" (Wav2Vec2 model)"),REo=l(),Wu=a("li"),Cde=a("strong"),PEo=o("wav2vec2-conformer"),BEo=o(" \u2014 "),Tj=a("a"),IEo=o("Wav2Vec2ConformerForPreTraining"),NEo=o(" (Wav2Vec2-Conformer model)"),qEo=l(),Qu=a("li"),wde=a("strong"),jEo=o("xlm"),DEo=o(" \u2014 "),Mj=a("a"),GEo=o("XLMWithLMHeadModel"),OEo=o(" (XLM model)"),VEo=l(),Hu=a("li"),Ade=a("strong"),XEo=o("xlm-roberta"),zEo=o(" \u2014 "),Ej=a("a"),WEo=o("XLMRobertaForMaskedLM"),QEo=o(" (XLM-RoBERTa model)"),HEo=l(),Uu=a("li"),yde=a("strong"),UEo=o("xlm-roberta-xl"),JEo=o(" \u2014 "),Cj=a("a"),YEo=o("XLMRobertaXLForMaskedLM"),KEo=o(" (XLM-RoBERTa-XL model)"),ZEo=l(),Ju=a("li"),Lde=a("strong"),eCo=o("xlnet"),oCo=o(" \u2014 "),wj=a("a"),rCo=o("XLNetLMHeadModel"),tCo=o(" (XLNet model)"),aCo=l(),Yu=a("p"),nCo=o("The model is set in evaluation mode by default using "),xde=a("code"),sCo=o("model.eval()"),lCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$de=a("code"),iCo=o("model.train()"),dCo=l(),F(Ku.$$.fragment),Bqe=l(),Si=a("h2"),Zu=a("a"),kde=a("span"),F(hy.$$.fragment),cCo=l(),Sde=a("span"),fCo=o("AutoModelForCausalLM"),Iqe=l(),$o=a("div"),F(py.$$.fragment),mCo=l(),Ri=a("p"),gCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Aj=a("a"),hCo=o("from_pretrained()"),pCo=o(" class method or the "),yj=a("a"),_Co=o("from_config()"),uCo=o(` class
method.`),bCo=l(),_y=a("p"),vCo=o("This class cannot be instantiated directly using "),Rde=a("code"),FCo=o("__init__()"),TCo=o(" (throws an error)."),MCo=l(),st=a("div"),F(uy.$$.fragment),ECo=l(),Pde=a("p"),CCo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wCo=l(),Pi=a("p"),ACo=o(`Note:
Loading a model from its configuration file does `),Bde=a("strong"),yCo=o("not"),LCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lj=a("a"),xCo=o("from_pretrained()"),$Co=o(" to load the model weights."),kCo=l(),F(e1.$$.fragment),SCo=l(),Ke=a("div"),F(by.$$.fragment),RCo=l(),Ide=a("p"),PCo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BCo=l(),ka=a("p"),ICo=o("The model class to instantiate is selected based on the "),Nde=a("code"),NCo=o("model_type"),qCo=o(` property of the config object (either
passed as an argument or loaded from `),qde=a("code"),jCo=o("pretrained_model_name_or_path"),DCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jde=a("code"),GCo=o("pretrained_model_name_or_path"),OCo=o(":"),VCo=l(),z=a("ul"),o1=a("li"),Dde=a("strong"),XCo=o("bart"),zCo=o(" \u2014 "),xj=a("a"),WCo=o("BartForCausalLM"),QCo=o(" (BART model)"),HCo=l(),r1=a("li"),Gde=a("strong"),UCo=o("bert"),JCo=o(" \u2014 "),$j=a("a"),YCo=o("BertLMHeadModel"),KCo=o(" (BERT model)"),ZCo=l(),t1=a("li"),Ode=a("strong"),ewo=o("bert-generation"),owo=o(" \u2014 "),kj=a("a"),rwo=o("BertGenerationDecoder"),two=o(" (Bert Generation model)"),awo=l(),a1=a("li"),Vde=a("strong"),nwo=o("big_bird"),swo=o(" \u2014 "),Sj=a("a"),lwo=o("BigBirdForCausalLM"),iwo=o(" (BigBird model)"),dwo=l(),n1=a("li"),Xde=a("strong"),cwo=o("bigbird_pegasus"),fwo=o(" \u2014 "),Rj=a("a"),mwo=o("BigBirdPegasusForCausalLM"),gwo=o(" (BigBirdPegasus model)"),hwo=l(),s1=a("li"),zde=a("strong"),pwo=o("blenderbot"),_wo=o(" \u2014 "),Pj=a("a"),uwo=o("BlenderbotForCausalLM"),bwo=o(" (Blenderbot model)"),vwo=l(),l1=a("li"),Wde=a("strong"),Fwo=o("blenderbot-small"),Two=o(" \u2014 "),Bj=a("a"),Mwo=o("BlenderbotSmallForCausalLM"),Ewo=o(" (BlenderbotSmall model)"),Cwo=l(),i1=a("li"),Qde=a("strong"),wwo=o("camembert"),Awo=o(" \u2014 "),Ij=a("a"),ywo=o("CamembertForCausalLM"),Lwo=o(" (CamemBERT model)"),xwo=l(),d1=a("li"),Hde=a("strong"),$wo=o("ctrl"),kwo=o(" \u2014 "),Nj=a("a"),Swo=o("CTRLLMHeadModel"),Rwo=o(" (CTRL model)"),Pwo=l(),c1=a("li"),Ude=a("strong"),Bwo=o("data2vec-text"),Iwo=o(" \u2014 "),qj=a("a"),Nwo=o("Data2VecTextForCausalLM"),qwo=o(" (Data2VecText model)"),jwo=l(),f1=a("li"),Jde=a("strong"),Dwo=o("electra"),Gwo=o(" \u2014 "),jj=a("a"),Owo=o("ElectraForCausalLM"),Vwo=o(" (ELECTRA model)"),Xwo=l(),m1=a("li"),Yde=a("strong"),zwo=o("gpt2"),Wwo=o(" \u2014 "),Dj=a("a"),Qwo=o("GPT2LMHeadModel"),Hwo=o(" (OpenAI GPT-2 model)"),Uwo=l(),g1=a("li"),Kde=a("strong"),Jwo=o("gpt_neo"),Ywo=o(" \u2014 "),Gj=a("a"),Kwo=o("GPTNeoForCausalLM"),Zwo=o(" (GPT Neo model)"),e0o=l(),h1=a("li"),Zde=a("strong"),o0o=o("gpt_neox"),r0o=o(" \u2014 "),Oj=a("a"),t0o=o("GPTNeoXForCausalLM"),a0o=o(" (GPT NeoX model)"),n0o=l(),p1=a("li"),ece=a("strong"),s0o=o("gptj"),l0o=o(" \u2014 "),Vj=a("a"),i0o=o("GPTJForCausalLM"),d0o=o(" (GPT-J model)"),c0o=l(),_1=a("li"),oce=a("strong"),f0o=o("marian"),m0o=o(" \u2014 "),Xj=a("a"),g0o=o("MarianForCausalLM"),h0o=o(" (Marian model)"),p0o=l(),u1=a("li"),rce=a("strong"),_0o=o("mbart"),u0o=o(" \u2014 "),zj=a("a"),b0o=o("MBartForCausalLM"),v0o=o(" (mBART model)"),F0o=l(),b1=a("li"),tce=a("strong"),T0o=o("megatron-bert"),M0o=o(" \u2014 "),Wj=a("a"),E0o=o("MegatronBertForCausalLM"),C0o=o(" (MegatronBert model)"),w0o=l(),v1=a("li"),ace=a("strong"),A0o=o("openai-gpt"),y0o=o(" \u2014 "),Qj=a("a"),L0o=o("OpenAIGPTLMHeadModel"),x0o=o(" (OpenAI GPT model)"),$0o=l(),F1=a("li"),nce=a("strong"),k0o=o("opt"),S0o=o(" \u2014 "),Hj=a("a"),R0o=o("OPTForCausalLM"),P0o=o(" (OPT model)"),B0o=l(),T1=a("li"),sce=a("strong"),I0o=o("pegasus"),N0o=o(" \u2014 "),Uj=a("a"),q0o=o("PegasusForCausalLM"),j0o=o(" (Pegasus model)"),D0o=l(),M1=a("li"),lce=a("strong"),G0o=o("plbart"),O0o=o(" \u2014 "),Jj=a("a"),V0o=o("PLBartForCausalLM"),X0o=o(" (PLBart model)"),z0o=l(),E1=a("li"),ice=a("strong"),W0o=o("prophetnet"),Q0o=o(" \u2014 "),Yj=a("a"),H0o=o("ProphetNetForCausalLM"),U0o=o(" (ProphetNet model)"),J0o=l(),C1=a("li"),dce=a("strong"),Y0o=o("qdqbert"),K0o=o(" \u2014 "),Kj=a("a"),Z0o=o("QDQBertLMHeadModel"),e6o=o(" (QDQBert model)"),o6o=l(),w1=a("li"),cce=a("strong"),r6o=o("reformer"),t6o=o(" \u2014 "),Zj=a("a"),a6o=o("ReformerModelWithLMHead"),n6o=o(" (Reformer model)"),s6o=l(),A1=a("li"),fce=a("strong"),l6o=o("rembert"),i6o=o(" \u2014 "),eD=a("a"),d6o=o("RemBertForCausalLM"),c6o=o(" (RemBERT model)"),f6o=l(),y1=a("li"),mce=a("strong"),m6o=o("roberta"),g6o=o(" \u2014 "),oD=a("a"),h6o=o("RobertaForCausalLM"),p6o=o(" (RoBERTa model)"),_6o=l(),L1=a("li"),gce=a("strong"),u6o=o("roformer"),b6o=o(" \u2014 "),rD=a("a"),v6o=o("RoFormerForCausalLM"),F6o=o(" (RoFormer model)"),T6o=l(),x1=a("li"),hce=a("strong"),M6o=o("speech_to_text_2"),E6o=o(" \u2014 "),tD=a("a"),C6o=o("Speech2Text2ForCausalLM"),w6o=o(" (Speech2Text2 model)"),A6o=l(),$1=a("li"),pce=a("strong"),y6o=o("transfo-xl"),L6o=o(" \u2014 "),aD=a("a"),x6o=o("TransfoXLLMHeadModel"),$6o=o(" (Transformer-XL model)"),k6o=l(),k1=a("li"),_ce=a("strong"),S6o=o("trocr"),R6o=o(" \u2014 "),nD=a("a"),P6o=o("TrOCRForCausalLM"),B6o=o(" (TrOCR model)"),I6o=l(),S1=a("li"),uce=a("strong"),N6o=o("xglm"),q6o=o(" \u2014 "),sD=a("a"),j6o=o("XGLMForCausalLM"),D6o=o(" (XGLM model)"),G6o=l(),R1=a("li"),bce=a("strong"),O6o=o("xlm"),V6o=o(" \u2014 "),lD=a("a"),X6o=o("XLMWithLMHeadModel"),z6o=o(" (XLM model)"),W6o=l(),P1=a("li"),vce=a("strong"),Q6o=o("xlm-prophetnet"),H6o=o(" \u2014 "),iD=a("a"),U6o=o("XLMProphetNetForCausalLM"),J6o=o(" (XLMProphetNet model)"),Y6o=l(),B1=a("li"),Fce=a("strong"),K6o=o("xlm-roberta"),Z6o=o(" \u2014 "),dD=a("a"),eAo=o("XLMRobertaForCausalLM"),oAo=o(" (XLM-RoBERTa model)"),rAo=l(),I1=a("li"),Tce=a("strong"),tAo=o("xlm-roberta-xl"),aAo=o(" \u2014 "),cD=a("a"),nAo=o("XLMRobertaXLForCausalLM"),sAo=o(" (XLM-RoBERTa-XL model)"),lAo=l(),N1=a("li"),Mce=a("strong"),iAo=o("xlnet"),dAo=o(" \u2014 "),fD=a("a"),cAo=o("XLNetLMHeadModel"),fAo=o(" (XLNet model)"),mAo=l(),q1=a("p"),gAo=o("The model is set in evaluation mode by default using "),Ece=a("code"),hAo=o("model.eval()"),pAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cce=a("code"),_Ao=o("model.train()"),uAo=l(),F(j1.$$.fragment),Nqe=l(),Bi=a("h2"),D1=a("a"),wce=a("span"),F(vy.$$.fragment),bAo=l(),Ace=a("span"),vAo=o("AutoModelForMaskedLM"),qqe=l(),ko=a("div"),F(Fy.$$.fragment),FAo=l(),Ii=a("p"),TAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mD=a("a"),MAo=o("from_pretrained()"),EAo=o(" class method or the "),gD=a("a"),CAo=o("from_config()"),wAo=o(` class
method.`),AAo=l(),Ty=a("p"),yAo=o("This class cannot be instantiated directly using "),yce=a("code"),LAo=o("__init__()"),xAo=o(" (throws an error)."),$Ao=l(),lt=a("div"),F(My.$$.fragment),kAo=l(),Lce=a("p"),SAo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),RAo=l(),Ni=a("p"),PAo=o(`Note:
Loading a model from its configuration file does `),xce=a("strong"),BAo=o("not"),IAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hD=a("a"),NAo=o("from_pretrained()"),qAo=o(" to load the model weights."),jAo=l(),F(G1.$$.fragment),DAo=l(),Ze=a("div"),F(Ey.$$.fragment),GAo=l(),$ce=a("p"),OAo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),VAo=l(),Sa=a("p"),XAo=o("The model class to instantiate is selected based on the "),kce=a("code"),zAo=o("model_type"),WAo=o(` property of the config object (either
passed as an argument or loaded from `),Sce=a("code"),QAo=o("pretrained_model_name_or_path"),HAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rce=a("code"),UAo=o("pretrained_model_name_or_path"),JAo=o(":"),YAo=l(),Q=a("ul"),O1=a("li"),Pce=a("strong"),KAo=o("albert"),ZAo=o(" \u2014 "),pD=a("a"),eyo=o("AlbertForMaskedLM"),oyo=o(" (ALBERT model)"),ryo=l(),V1=a("li"),Bce=a("strong"),tyo=o("bart"),ayo=o(" \u2014 "),_D=a("a"),nyo=o("BartForConditionalGeneration"),syo=o(" (BART model)"),lyo=l(),X1=a("li"),Ice=a("strong"),iyo=o("bert"),dyo=o(" \u2014 "),uD=a("a"),cyo=o("BertForMaskedLM"),fyo=o(" (BERT model)"),myo=l(),z1=a("li"),Nce=a("strong"),gyo=o("big_bird"),hyo=o(" \u2014 "),bD=a("a"),pyo=o("BigBirdForMaskedLM"),_yo=o(" (BigBird model)"),uyo=l(),W1=a("li"),qce=a("strong"),byo=o("camembert"),vyo=o(" \u2014 "),vD=a("a"),Fyo=o("CamembertForMaskedLM"),Tyo=o(" (CamemBERT model)"),Myo=l(),Q1=a("li"),jce=a("strong"),Eyo=o("convbert"),Cyo=o(" \u2014 "),FD=a("a"),wyo=o("ConvBertForMaskedLM"),Ayo=o(" (ConvBERT model)"),yyo=l(),H1=a("li"),Dce=a("strong"),Lyo=o("data2vec-text"),xyo=o(" \u2014 "),TD=a("a"),$yo=o("Data2VecTextForMaskedLM"),kyo=o(" (Data2VecText model)"),Syo=l(),U1=a("li"),Gce=a("strong"),Ryo=o("deberta"),Pyo=o(" \u2014 "),MD=a("a"),Byo=o("DebertaForMaskedLM"),Iyo=o(" (DeBERTa model)"),Nyo=l(),J1=a("li"),Oce=a("strong"),qyo=o("deberta-v2"),jyo=o(" \u2014 "),ED=a("a"),Dyo=o("DebertaV2ForMaskedLM"),Gyo=o(" (DeBERTa-v2 model)"),Oyo=l(),Y1=a("li"),Vce=a("strong"),Vyo=o("distilbert"),Xyo=o(" \u2014 "),CD=a("a"),zyo=o("DistilBertForMaskedLM"),Wyo=o(" (DistilBERT model)"),Qyo=l(),K1=a("li"),Xce=a("strong"),Hyo=o("electra"),Uyo=o(" \u2014 "),wD=a("a"),Jyo=o("ElectraForMaskedLM"),Yyo=o(" (ELECTRA model)"),Kyo=l(),Z1=a("li"),zce=a("strong"),Zyo=o("flaubert"),eLo=o(" \u2014 "),AD=a("a"),oLo=o("FlaubertWithLMHeadModel"),rLo=o(" (FlauBERT model)"),tLo=l(),eb=a("li"),Wce=a("strong"),aLo=o("fnet"),nLo=o(" \u2014 "),yD=a("a"),sLo=o("FNetForMaskedLM"),lLo=o(" (FNet model)"),iLo=l(),ob=a("li"),Qce=a("strong"),dLo=o("funnel"),cLo=o(" \u2014 "),LD=a("a"),fLo=o("FunnelForMaskedLM"),mLo=o(" (Funnel Transformer model)"),gLo=l(),rb=a("li"),Hce=a("strong"),hLo=o("ibert"),pLo=o(" \u2014 "),xD=a("a"),_Lo=o("IBertForMaskedLM"),uLo=o(" (I-BERT model)"),bLo=l(),tb=a("li"),Uce=a("strong"),vLo=o("layoutlm"),FLo=o(" \u2014 "),$D=a("a"),TLo=o("LayoutLMForMaskedLM"),MLo=o(" (LayoutLM model)"),ELo=l(),ab=a("li"),Jce=a("strong"),CLo=o("longformer"),wLo=o(" \u2014 "),kD=a("a"),ALo=o("LongformerForMaskedLM"),yLo=o(" (Longformer model)"),LLo=l(),nb=a("li"),Yce=a("strong"),xLo=o("mbart"),$Lo=o(" \u2014 "),SD=a("a"),kLo=o("MBartForConditionalGeneration"),SLo=o(" (mBART model)"),RLo=l(),sb=a("li"),Kce=a("strong"),PLo=o("megatron-bert"),BLo=o(" \u2014 "),RD=a("a"),ILo=o("MegatronBertForMaskedLM"),NLo=o(" (MegatronBert model)"),qLo=l(),lb=a("li"),Zce=a("strong"),jLo=o("mobilebert"),DLo=o(" \u2014 "),PD=a("a"),GLo=o("MobileBertForMaskedLM"),OLo=o(" (MobileBERT model)"),VLo=l(),ib=a("li"),efe=a("strong"),XLo=o("mpnet"),zLo=o(" \u2014 "),BD=a("a"),WLo=o("MPNetForMaskedLM"),QLo=o(" (MPNet model)"),HLo=l(),db=a("li"),ofe=a("strong"),ULo=o("nystromformer"),JLo=o(" \u2014 "),ID=a("a"),YLo=o("NystromformerForMaskedLM"),KLo=o(" (Nystromformer model)"),ZLo=l(),cb=a("li"),rfe=a("strong"),e8o=o("perceiver"),o8o=o(" \u2014 "),ND=a("a"),r8o=o("PerceiverForMaskedLM"),t8o=o(" (Perceiver model)"),a8o=l(),fb=a("li"),tfe=a("strong"),n8o=o("qdqbert"),s8o=o(" \u2014 "),qD=a("a"),l8o=o("QDQBertForMaskedLM"),i8o=o(" (QDQBert model)"),d8o=l(),mb=a("li"),afe=a("strong"),c8o=o("reformer"),f8o=o(" \u2014 "),jD=a("a"),m8o=o("ReformerForMaskedLM"),g8o=o(" (Reformer model)"),h8o=l(),gb=a("li"),nfe=a("strong"),p8o=o("rembert"),_8o=o(" \u2014 "),DD=a("a"),u8o=o("RemBertForMaskedLM"),b8o=o(" (RemBERT model)"),v8o=l(),hb=a("li"),sfe=a("strong"),F8o=o("roberta"),T8o=o(" \u2014 "),GD=a("a"),M8o=o("RobertaForMaskedLM"),E8o=o(" (RoBERTa model)"),C8o=l(),pb=a("li"),lfe=a("strong"),w8o=o("roformer"),A8o=o(" \u2014 "),OD=a("a"),y8o=o("RoFormerForMaskedLM"),L8o=o(" (RoFormer model)"),x8o=l(),_b=a("li"),ife=a("strong"),$8o=o("squeezebert"),k8o=o(" \u2014 "),VD=a("a"),S8o=o("SqueezeBertForMaskedLM"),R8o=o(" (SqueezeBERT model)"),P8o=l(),ub=a("li"),dfe=a("strong"),B8o=o("tapas"),I8o=o(" \u2014 "),XD=a("a"),N8o=o("TapasForMaskedLM"),q8o=o(" (TAPAS model)"),j8o=l(),bb=a("li"),cfe=a("strong"),D8o=o("wav2vec2"),G8o=o(" \u2014 "),ffe=a("code"),O8o=o("Wav2Vec2ForMaskedLM"),V8o=o(" (Wav2Vec2 model)"),X8o=l(),vb=a("li"),mfe=a("strong"),z8o=o("xlm"),W8o=o(" \u2014 "),zD=a("a"),Q8o=o("XLMWithLMHeadModel"),H8o=o(" (XLM model)"),U8o=l(),Fb=a("li"),gfe=a("strong"),J8o=o("xlm-roberta"),Y8o=o(" \u2014 "),WD=a("a"),K8o=o("XLMRobertaForMaskedLM"),Z8o=o(" (XLM-RoBERTa model)"),e9o=l(),Tb=a("li"),hfe=a("strong"),o9o=o("xlm-roberta-xl"),r9o=o(" \u2014 "),QD=a("a"),t9o=o("XLMRobertaXLForMaskedLM"),a9o=o(" (XLM-RoBERTa-XL model)"),n9o=l(),Mb=a("li"),pfe=a("strong"),s9o=o("yoso"),l9o=o(" \u2014 "),HD=a("a"),i9o=o("YosoForMaskedLM"),d9o=o(" (YOSO model)"),c9o=l(),Eb=a("p"),f9o=o("The model is set in evaluation mode by default using "),_fe=a("code"),m9o=o("model.eval()"),g9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=a("code"),h9o=o("model.train()"),p9o=l(),F(Cb.$$.fragment),jqe=l(),qi=a("h2"),wb=a("a"),bfe=a("span"),F(Cy.$$.fragment),_9o=l(),vfe=a("span"),u9o=o("AutoModelForSeq2SeqLM"),Dqe=l(),So=a("div"),F(wy.$$.fragment),b9o=l(),ji=a("p"),v9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UD=a("a"),F9o=o("from_pretrained()"),T9o=o(" class method or the "),JD=a("a"),M9o=o("from_config()"),E9o=o(` class
method.`),C9o=l(),Ay=a("p"),w9o=o("This class cannot be instantiated directly using "),Ffe=a("code"),A9o=o("__init__()"),y9o=o(" (throws an error)."),L9o=l(),it=a("div"),F(yy.$$.fragment),x9o=l(),Tfe=a("p"),$9o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),k9o=l(),Di=a("p"),S9o=o(`Note:
Loading a model from its configuration file does `),Mfe=a("strong"),R9o=o("not"),P9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YD=a("a"),B9o=o("from_pretrained()"),I9o=o(" to load the model weights."),N9o=l(),F(Ab.$$.fragment),q9o=l(),eo=a("div"),F(Ly.$$.fragment),j9o=l(),Efe=a("p"),D9o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),G9o=l(),Ra=a("p"),O9o=o("The model class to instantiate is selected based on the "),Cfe=a("code"),V9o=o("model_type"),X9o=o(` property of the config object (either
passed as an argument or loaded from `),wfe=a("code"),z9o=o("pretrained_model_name_or_path"),W9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Afe=a("code"),Q9o=o("pretrained_model_name_or_path"),H9o=o(":"),U9o=l(),_e=a("ul"),yb=a("li"),yfe=a("strong"),J9o=o("bart"),Y9o=o(" \u2014 "),KD=a("a"),K9o=o("BartForConditionalGeneration"),Z9o=o(" (BART model)"),exo=l(),Lb=a("li"),Lfe=a("strong"),oxo=o("bigbird_pegasus"),rxo=o(" \u2014 "),ZD=a("a"),txo=o("BigBirdPegasusForConditionalGeneration"),axo=o(" (BigBirdPegasus model)"),nxo=l(),xb=a("li"),xfe=a("strong"),sxo=o("blenderbot"),lxo=o(" \u2014 "),eG=a("a"),ixo=o("BlenderbotForConditionalGeneration"),dxo=o(" (Blenderbot model)"),cxo=l(),$b=a("li"),$fe=a("strong"),fxo=o("blenderbot-small"),mxo=o(" \u2014 "),oG=a("a"),gxo=o("BlenderbotSmallForConditionalGeneration"),hxo=o(" (BlenderbotSmall model)"),pxo=l(),kb=a("li"),kfe=a("strong"),_xo=o("encoder-decoder"),uxo=o(" \u2014 "),rG=a("a"),bxo=o("EncoderDecoderModel"),vxo=o(" (Encoder decoder model)"),Fxo=l(),Sb=a("li"),Sfe=a("strong"),Txo=o("fsmt"),Mxo=o(" \u2014 "),tG=a("a"),Exo=o("FSMTForConditionalGeneration"),Cxo=o(" (FairSeq Machine-Translation model)"),wxo=l(),Rb=a("li"),Rfe=a("strong"),Axo=o("led"),yxo=o(" \u2014 "),aG=a("a"),Lxo=o("LEDForConditionalGeneration"),xxo=o(" (LED model)"),$xo=l(),Pb=a("li"),Pfe=a("strong"),kxo=o("m2m_100"),Sxo=o(" \u2014 "),nG=a("a"),Rxo=o("M2M100ForConditionalGeneration"),Pxo=o(" (M2M100 model)"),Bxo=l(),Bb=a("li"),Bfe=a("strong"),Ixo=o("marian"),Nxo=o(" \u2014 "),sG=a("a"),qxo=o("MarianMTModel"),jxo=o(" (Marian model)"),Dxo=l(),Ib=a("li"),Ife=a("strong"),Gxo=o("mbart"),Oxo=o(" \u2014 "),lG=a("a"),Vxo=o("MBartForConditionalGeneration"),Xxo=o(" (mBART model)"),zxo=l(),Nb=a("li"),Nfe=a("strong"),Wxo=o("mt5"),Qxo=o(" \u2014 "),iG=a("a"),Hxo=o("MT5ForConditionalGeneration"),Uxo=o(" (mT5 model)"),Jxo=l(),qb=a("li"),qfe=a("strong"),Yxo=o("pegasus"),Kxo=o(" \u2014 "),dG=a("a"),Zxo=o("PegasusForConditionalGeneration"),e$o=o(" (Pegasus model)"),o$o=l(),jb=a("li"),jfe=a("strong"),r$o=o("plbart"),t$o=o(" \u2014 "),cG=a("a"),a$o=o("PLBartForConditionalGeneration"),n$o=o(" (PLBart model)"),s$o=l(),Db=a("li"),Dfe=a("strong"),l$o=o("prophetnet"),i$o=o(" \u2014 "),fG=a("a"),d$o=o("ProphetNetForConditionalGeneration"),c$o=o(" (ProphetNet model)"),f$o=l(),Gb=a("li"),Gfe=a("strong"),m$o=o("t5"),g$o=o(" \u2014 "),mG=a("a"),h$o=o("T5ForConditionalGeneration"),p$o=o(" (T5 model)"),_$o=l(),Ob=a("li"),Ofe=a("strong"),u$o=o("xlm-prophetnet"),b$o=o(" \u2014 "),gG=a("a"),v$o=o("XLMProphetNetForConditionalGeneration"),F$o=o(" (XLMProphetNet model)"),T$o=l(),Vb=a("p"),M$o=o("The model is set in evaluation mode by default using "),Vfe=a("code"),E$o=o("model.eval()"),C$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=a("code"),w$o=o("model.train()"),A$o=l(),F(Xb.$$.fragment),Gqe=l(),Gi=a("h2"),zb=a("a"),zfe=a("span"),F(xy.$$.fragment),y$o=l(),Wfe=a("span"),L$o=o("AutoModelForSequenceClassification"),Oqe=l(),Ro=a("div"),F($y.$$.fragment),x$o=l(),Oi=a("p"),$$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),hG=a("a"),k$o=o("from_pretrained()"),S$o=o(" class method or the "),pG=a("a"),R$o=o("from_config()"),P$o=o(` class
method.`),B$o=l(),ky=a("p"),I$o=o("This class cannot be instantiated directly using "),Qfe=a("code"),N$o=o("__init__()"),q$o=o(" (throws an error)."),j$o=l(),dt=a("div"),F(Sy.$$.fragment),D$o=l(),Hfe=a("p"),G$o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),O$o=l(),Vi=a("p"),V$o=o(`Note:
Loading a model from its configuration file does `),Ufe=a("strong"),X$o=o("not"),z$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_G=a("a"),W$o=o("from_pretrained()"),Q$o=o(" to load the model weights."),H$o=l(),F(Wb.$$.fragment),U$o=l(),oo=a("div"),F(Ry.$$.fragment),J$o=l(),Jfe=a("p"),Y$o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),K$o=l(),Pa=a("p"),Z$o=o("The model class to instantiate is selected based on the "),Yfe=a("code"),eko=o("model_type"),oko=o(` property of the config object (either
passed as an argument or loaded from `),Kfe=a("code"),rko=o("pretrained_model_name_or_path"),tko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zfe=a("code"),ako=o("pretrained_model_name_or_path"),nko=o(":"),sko=l(),N=a("ul"),Qb=a("li"),eme=a("strong"),lko=o("albert"),iko=o(" \u2014 "),uG=a("a"),dko=o("AlbertForSequenceClassification"),cko=o(" (ALBERT model)"),fko=l(),Hb=a("li"),ome=a("strong"),mko=o("bart"),gko=o(" \u2014 "),bG=a("a"),hko=o("BartForSequenceClassification"),pko=o(" (BART model)"),_ko=l(),Ub=a("li"),rme=a("strong"),uko=o("bert"),bko=o(" \u2014 "),vG=a("a"),vko=o("BertForSequenceClassification"),Fko=o(" (BERT model)"),Tko=l(),Jb=a("li"),tme=a("strong"),Mko=o("big_bird"),Eko=o(" \u2014 "),FG=a("a"),Cko=o("BigBirdForSequenceClassification"),wko=o(" (BigBird model)"),Ako=l(),Yb=a("li"),ame=a("strong"),yko=o("bigbird_pegasus"),Lko=o(" \u2014 "),TG=a("a"),xko=o("BigBirdPegasusForSequenceClassification"),$ko=o(" (BigBirdPegasus model)"),kko=l(),Kb=a("li"),nme=a("strong"),Sko=o("camembert"),Rko=o(" \u2014 "),MG=a("a"),Pko=o("CamembertForSequenceClassification"),Bko=o(" (CamemBERT model)"),Iko=l(),Zb=a("li"),sme=a("strong"),Nko=o("canine"),qko=o(" \u2014 "),EG=a("a"),jko=o("CanineForSequenceClassification"),Dko=o(" (Canine model)"),Gko=l(),e2=a("li"),lme=a("strong"),Oko=o("convbert"),Vko=o(" \u2014 "),CG=a("a"),Xko=o("ConvBertForSequenceClassification"),zko=o(" (ConvBERT model)"),Wko=l(),o2=a("li"),ime=a("strong"),Qko=o("ctrl"),Hko=o(" \u2014 "),wG=a("a"),Uko=o("CTRLForSequenceClassification"),Jko=o(" (CTRL model)"),Yko=l(),r2=a("li"),dme=a("strong"),Kko=o("data2vec-text"),Zko=o(" \u2014 "),AG=a("a"),eSo=o("Data2VecTextForSequenceClassification"),oSo=o(" (Data2VecText model)"),rSo=l(),t2=a("li"),cme=a("strong"),tSo=o("deberta"),aSo=o(" \u2014 "),yG=a("a"),nSo=o("DebertaForSequenceClassification"),sSo=o(" (DeBERTa model)"),lSo=l(),a2=a("li"),fme=a("strong"),iSo=o("deberta-v2"),dSo=o(" \u2014 "),LG=a("a"),cSo=o("DebertaV2ForSequenceClassification"),fSo=o(" (DeBERTa-v2 model)"),mSo=l(),n2=a("li"),mme=a("strong"),gSo=o("distilbert"),hSo=o(" \u2014 "),xG=a("a"),pSo=o("DistilBertForSequenceClassification"),_So=o(" (DistilBERT model)"),uSo=l(),s2=a("li"),gme=a("strong"),bSo=o("electra"),vSo=o(" \u2014 "),$G=a("a"),FSo=o("ElectraForSequenceClassification"),TSo=o(" (ELECTRA model)"),MSo=l(),l2=a("li"),hme=a("strong"),ESo=o("flaubert"),CSo=o(" \u2014 "),kG=a("a"),wSo=o("FlaubertForSequenceClassification"),ASo=o(" (FlauBERT model)"),ySo=l(),i2=a("li"),pme=a("strong"),LSo=o("fnet"),xSo=o(" \u2014 "),SG=a("a"),$So=o("FNetForSequenceClassification"),kSo=o(" (FNet model)"),SSo=l(),d2=a("li"),_me=a("strong"),RSo=o("funnel"),PSo=o(" \u2014 "),RG=a("a"),BSo=o("FunnelForSequenceClassification"),ISo=o(" (Funnel Transformer model)"),NSo=l(),c2=a("li"),ume=a("strong"),qSo=o("gpt2"),jSo=o(" \u2014 "),PG=a("a"),DSo=o("GPT2ForSequenceClassification"),GSo=o(" (OpenAI GPT-2 model)"),OSo=l(),f2=a("li"),bme=a("strong"),VSo=o("gpt_neo"),XSo=o(" \u2014 "),BG=a("a"),zSo=o("GPTNeoForSequenceClassification"),WSo=o(" (GPT Neo model)"),QSo=l(),m2=a("li"),vme=a("strong"),HSo=o("gptj"),USo=o(" \u2014 "),IG=a("a"),JSo=o("GPTJForSequenceClassification"),YSo=o(" (GPT-J model)"),KSo=l(),g2=a("li"),Fme=a("strong"),ZSo=o("ibert"),eRo=o(" \u2014 "),NG=a("a"),oRo=o("IBertForSequenceClassification"),rRo=o(" (I-BERT model)"),tRo=l(),h2=a("li"),Tme=a("strong"),aRo=o("layoutlm"),nRo=o(" \u2014 "),qG=a("a"),sRo=o("LayoutLMForSequenceClassification"),lRo=o(" (LayoutLM model)"),iRo=l(),p2=a("li"),Mme=a("strong"),dRo=o("layoutlmv2"),cRo=o(" \u2014 "),jG=a("a"),fRo=o("LayoutLMv2ForSequenceClassification"),mRo=o(" (LayoutLMv2 model)"),gRo=l(),_2=a("li"),Eme=a("strong"),hRo=o("layoutlmv3"),pRo=o(" \u2014 "),DG=a("a"),_Ro=o("LayoutLMv3ForSequenceClassification"),uRo=o(" (LayoutLMv3 model)"),bRo=l(),u2=a("li"),Cme=a("strong"),vRo=o("led"),FRo=o(" \u2014 "),GG=a("a"),TRo=o("LEDForSequenceClassification"),MRo=o(" (LED model)"),ERo=l(),b2=a("li"),wme=a("strong"),CRo=o("longformer"),wRo=o(" \u2014 "),OG=a("a"),ARo=o("LongformerForSequenceClassification"),yRo=o(" (Longformer model)"),LRo=l(),v2=a("li"),Ame=a("strong"),xRo=o("mbart"),$Ro=o(" \u2014 "),VG=a("a"),kRo=o("MBartForSequenceClassification"),SRo=o(" (mBART model)"),RRo=l(),F2=a("li"),yme=a("strong"),PRo=o("megatron-bert"),BRo=o(" \u2014 "),XG=a("a"),IRo=o("MegatronBertForSequenceClassification"),NRo=o(" (MegatronBert model)"),qRo=l(),T2=a("li"),Lme=a("strong"),jRo=o("mobilebert"),DRo=o(" \u2014 "),zG=a("a"),GRo=o("MobileBertForSequenceClassification"),ORo=o(" (MobileBERT model)"),VRo=l(),M2=a("li"),xme=a("strong"),XRo=o("mpnet"),zRo=o(" \u2014 "),WG=a("a"),WRo=o("MPNetForSequenceClassification"),QRo=o(" (MPNet model)"),HRo=l(),E2=a("li"),$me=a("strong"),URo=o("nystromformer"),JRo=o(" \u2014 "),QG=a("a"),YRo=o("NystromformerForSequenceClassification"),KRo=o(" (Nystromformer model)"),ZRo=l(),C2=a("li"),kme=a("strong"),ePo=o("openai-gpt"),oPo=o(" \u2014 "),HG=a("a"),rPo=o("OpenAIGPTForSequenceClassification"),tPo=o(" (OpenAI GPT model)"),aPo=l(),w2=a("li"),Sme=a("strong"),nPo=o("perceiver"),sPo=o(" \u2014 "),UG=a("a"),lPo=o("PerceiverForSequenceClassification"),iPo=o(" (Perceiver model)"),dPo=l(),A2=a("li"),Rme=a("strong"),cPo=o("plbart"),fPo=o(" \u2014 "),JG=a("a"),mPo=o("PLBartForSequenceClassification"),gPo=o(" (PLBart model)"),hPo=l(),y2=a("li"),Pme=a("strong"),pPo=o("qdqbert"),_Po=o(" \u2014 "),YG=a("a"),uPo=o("QDQBertForSequenceClassification"),bPo=o(" (QDQBert model)"),vPo=l(),L2=a("li"),Bme=a("strong"),FPo=o("reformer"),TPo=o(" \u2014 "),KG=a("a"),MPo=o("ReformerForSequenceClassification"),EPo=o(" (Reformer model)"),CPo=l(),x2=a("li"),Ime=a("strong"),wPo=o("rembert"),APo=o(" \u2014 "),ZG=a("a"),yPo=o("RemBertForSequenceClassification"),LPo=o(" (RemBERT model)"),xPo=l(),$2=a("li"),Nme=a("strong"),$Po=o("roberta"),kPo=o(" \u2014 "),eO=a("a"),SPo=o("RobertaForSequenceClassification"),RPo=o(" (RoBERTa model)"),PPo=l(),k2=a("li"),qme=a("strong"),BPo=o("roformer"),IPo=o(" \u2014 "),oO=a("a"),NPo=o("RoFormerForSequenceClassification"),qPo=o(" (RoFormer model)"),jPo=l(),S2=a("li"),jme=a("strong"),DPo=o("squeezebert"),GPo=o(" \u2014 "),rO=a("a"),OPo=o("SqueezeBertForSequenceClassification"),VPo=o(" (SqueezeBERT model)"),XPo=l(),R2=a("li"),Dme=a("strong"),zPo=o("tapas"),WPo=o(" \u2014 "),tO=a("a"),QPo=o("TapasForSequenceClassification"),HPo=o(" (TAPAS model)"),UPo=l(),P2=a("li"),Gme=a("strong"),JPo=o("transfo-xl"),YPo=o(" \u2014 "),aO=a("a"),KPo=o("TransfoXLForSequenceClassification"),ZPo=o(" (Transformer-XL model)"),eBo=l(),B2=a("li"),Ome=a("strong"),oBo=o("xlm"),rBo=o(" \u2014 "),nO=a("a"),tBo=o("XLMForSequenceClassification"),aBo=o(" (XLM model)"),nBo=l(),I2=a("li"),Vme=a("strong"),sBo=o("xlm-roberta"),lBo=o(" \u2014 "),sO=a("a"),iBo=o("XLMRobertaForSequenceClassification"),dBo=o(" (XLM-RoBERTa model)"),cBo=l(),N2=a("li"),Xme=a("strong"),fBo=o("xlm-roberta-xl"),mBo=o(" \u2014 "),lO=a("a"),gBo=o("XLMRobertaXLForSequenceClassification"),hBo=o(" (XLM-RoBERTa-XL model)"),pBo=l(),q2=a("li"),zme=a("strong"),_Bo=o("xlnet"),uBo=o(" \u2014 "),iO=a("a"),bBo=o("XLNetForSequenceClassification"),vBo=o(" (XLNet model)"),FBo=l(),j2=a("li"),Wme=a("strong"),TBo=o("yoso"),MBo=o(" \u2014 "),dO=a("a"),EBo=o("YosoForSequenceClassification"),CBo=o(" (YOSO model)"),wBo=l(),D2=a("p"),ABo=o("The model is set in evaluation mode by default using "),Qme=a("code"),yBo=o("model.eval()"),LBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hme=a("code"),xBo=o("model.train()"),$Bo=l(),F(G2.$$.fragment),Vqe=l(),Xi=a("h2"),O2=a("a"),Ume=a("span"),F(Py.$$.fragment),kBo=l(),Jme=a("span"),SBo=o("AutoModelForMultipleChoice"),Xqe=l(),Po=a("div"),F(By.$$.fragment),RBo=l(),zi=a("p"),PBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cO=a("a"),BBo=o("from_pretrained()"),IBo=o(" class method or the "),fO=a("a"),NBo=o("from_config()"),qBo=o(` class
method.`),jBo=l(),Iy=a("p"),DBo=o("This class cannot be instantiated directly using "),Yme=a("code"),GBo=o("__init__()"),OBo=o(" (throws an error)."),VBo=l(),ct=a("div"),F(Ny.$$.fragment),XBo=l(),Kme=a("p"),zBo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),WBo=l(),Wi=a("p"),QBo=o(`Note:
Loading a model from its configuration file does `),Zme=a("strong"),HBo=o("not"),UBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=a("a"),JBo=o("from_pretrained()"),YBo=o(" to load the model weights."),KBo=l(),F(V2.$$.fragment),ZBo=l(),ro=a("div"),F(qy.$$.fragment),eIo=l(),ege=a("p"),oIo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rIo=l(),Ba=a("p"),tIo=o("The model class to instantiate is selected based on the "),oge=a("code"),aIo=o("model_type"),nIo=o(` property of the config object (either
passed as an argument or loaded from `),rge=a("code"),sIo=o("pretrained_model_name_or_path"),lIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tge=a("code"),iIo=o("pretrained_model_name_or_path"),dIo=o(":"),cIo=l(),K=a("ul"),X2=a("li"),age=a("strong"),fIo=o("albert"),mIo=o(" \u2014 "),gO=a("a"),gIo=o("AlbertForMultipleChoice"),hIo=o(" (ALBERT model)"),pIo=l(),z2=a("li"),nge=a("strong"),_Io=o("bert"),uIo=o(" \u2014 "),hO=a("a"),bIo=o("BertForMultipleChoice"),vIo=o(" (BERT model)"),FIo=l(),W2=a("li"),sge=a("strong"),TIo=o("big_bird"),MIo=o(" \u2014 "),pO=a("a"),EIo=o("BigBirdForMultipleChoice"),CIo=o(" (BigBird model)"),wIo=l(),Q2=a("li"),lge=a("strong"),AIo=o("camembert"),yIo=o(" \u2014 "),_O=a("a"),LIo=o("CamembertForMultipleChoice"),xIo=o(" (CamemBERT model)"),$Io=l(),H2=a("li"),ige=a("strong"),kIo=o("canine"),SIo=o(" \u2014 "),uO=a("a"),RIo=o("CanineForMultipleChoice"),PIo=o(" (Canine model)"),BIo=l(),U2=a("li"),dge=a("strong"),IIo=o("convbert"),NIo=o(" \u2014 "),bO=a("a"),qIo=o("ConvBertForMultipleChoice"),jIo=o(" (ConvBERT model)"),DIo=l(),J2=a("li"),cge=a("strong"),GIo=o("data2vec-text"),OIo=o(" \u2014 "),vO=a("a"),VIo=o("Data2VecTextForMultipleChoice"),XIo=o(" (Data2VecText model)"),zIo=l(),Y2=a("li"),fge=a("strong"),WIo=o("deberta-v2"),QIo=o(" \u2014 "),FO=a("a"),HIo=o("DebertaV2ForMultipleChoice"),UIo=o(" (DeBERTa-v2 model)"),JIo=l(),K2=a("li"),mge=a("strong"),YIo=o("distilbert"),KIo=o(" \u2014 "),TO=a("a"),ZIo=o("DistilBertForMultipleChoice"),eNo=o(" (DistilBERT model)"),oNo=l(),Z2=a("li"),gge=a("strong"),rNo=o("electra"),tNo=o(" \u2014 "),MO=a("a"),aNo=o("ElectraForMultipleChoice"),nNo=o(" (ELECTRA model)"),sNo=l(),e4=a("li"),hge=a("strong"),lNo=o("flaubert"),iNo=o(" \u2014 "),EO=a("a"),dNo=o("FlaubertForMultipleChoice"),cNo=o(" (FlauBERT model)"),fNo=l(),o4=a("li"),pge=a("strong"),mNo=o("fnet"),gNo=o(" \u2014 "),CO=a("a"),hNo=o("FNetForMultipleChoice"),pNo=o(" (FNet model)"),_No=l(),r4=a("li"),_ge=a("strong"),uNo=o("funnel"),bNo=o(" \u2014 "),wO=a("a"),vNo=o("FunnelForMultipleChoice"),FNo=o(" (Funnel Transformer model)"),TNo=l(),t4=a("li"),uge=a("strong"),MNo=o("ibert"),ENo=o(" \u2014 "),AO=a("a"),CNo=o("IBertForMultipleChoice"),wNo=o(" (I-BERT model)"),ANo=l(),a4=a("li"),bge=a("strong"),yNo=o("longformer"),LNo=o(" \u2014 "),yO=a("a"),xNo=o("LongformerForMultipleChoice"),$No=o(" (Longformer model)"),kNo=l(),n4=a("li"),vge=a("strong"),SNo=o("megatron-bert"),RNo=o(" \u2014 "),LO=a("a"),PNo=o("MegatronBertForMultipleChoice"),BNo=o(" (MegatronBert model)"),INo=l(),s4=a("li"),Fge=a("strong"),NNo=o("mobilebert"),qNo=o(" \u2014 "),xO=a("a"),jNo=o("MobileBertForMultipleChoice"),DNo=o(" (MobileBERT model)"),GNo=l(),l4=a("li"),Tge=a("strong"),ONo=o("mpnet"),VNo=o(" \u2014 "),$O=a("a"),XNo=o("MPNetForMultipleChoice"),zNo=o(" (MPNet model)"),WNo=l(),i4=a("li"),Mge=a("strong"),QNo=o("nystromformer"),HNo=o(" \u2014 "),kO=a("a"),UNo=o("NystromformerForMultipleChoice"),JNo=o(" (Nystromformer model)"),YNo=l(),d4=a("li"),Ege=a("strong"),KNo=o("qdqbert"),ZNo=o(" \u2014 "),SO=a("a"),eqo=o("QDQBertForMultipleChoice"),oqo=o(" (QDQBert model)"),rqo=l(),c4=a("li"),Cge=a("strong"),tqo=o("rembert"),aqo=o(" \u2014 "),RO=a("a"),nqo=o("RemBertForMultipleChoice"),sqo=o(" (RemBERT model)"),lqo=l(),f4=a("li"),wge=a("strong"),iqo=o("roberta"),dqo=o(" \u2014 "),PO=a("a"),cqo=o("RobertaForMultipleChoice"),fqo=o(" (RoBERTa model)"),mqo=l(),m4=a("li"),Age=a("strong"),gqo=o("roformer"),hqo=o(" \u2014 "),BO=a("a"),pqo=o("RoFormerForMultipleChoice"),_qo=o(" (RoFormer model)"),uqo=l(),g4=a("li"),yge=a("strong"),bqo=o("squeezebert"),vqo=o(" \u2014 "),IO=a("a"),Fqo=o("SqueezeBertForMultipleChoice"),Tqo=o(" (SqueezeBERT model)"),Mqo=l(),h4=a("li"),Lge=a("strong"),Eqo=o("xlm"),Cqo=o(" \u2014 "),NO=a("a"),wqo=o("XLMForMultipleChoice"),Aqo=o(" (XLM model)"),yqo=l(),p4=a("li"),xge=a("strong"),Lqo=o("xlm-roberta"),xqo=o(" \u2014 "),qO=a("a"),$qo=o("XLMRobertaForMultipleChoice"),kqo=o(" (XLM-RoBERTa model)"),Sqo=l(),_4=a("li"),$ge=a("strong"),Rqo=o("xlm-roberta-xl"),Pqo=o(" \u2014 "),jO=a("a"),Bqo=o("XLMRobertaXLForMultipleChoice"),Iqo=o(" (XLM-RoBERTa-XL model)"),Nqo=l(),u4=a("li"),kge=a("strong"),qqo=o("xlnet"),jqo=o(" \u2014 "),DO=a("a"),Dqo=o("XLNetForMultipleChoice"),Gqo=o(" (XLNet model)"),Oqo=l(),b4=a("li"),Sge=a("strong"),Vqo=o("yoso"),Xqo=o(" \u2014 "),GO=a("a"),zqo=o("YosoForMultipleChoice"),Wqo=o(" (YOSO model)"),Qqo=l(),v4=a("p"),Hqo=o("The model is set in evaluation mode by default using "),Rge=a("code"),Uqo=o("model.eval()"),Jqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pge=a("code"),Yqo=o("model.train()"),Kqo=l(),F(F4.$$.fragment),zqe=l(),Qi=a("h2"),T4=a("a"),Bge=a("span"),F(jy.$$.fragment),Zqo=l(),Ige=a("span"),ejo=o("AutoModelForNextSentencePrediction"),Wqe=l(),Bo=a("div"),F(Dy.$$.fragment),ojo=l(),Hi=a("p"),rjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OO=a("a"),tjo=o("from_pretrained()"),ajo=o(" class method or the "),VO=a("a"),njo=o("from_config()"),sjo=o(` class
method.`),ljo=l(),Gy=a("p"),ijo=o("This class cannot be instantiated directly using "),Nge=a("code"),djo=o("__init__()"),cjo=o(" (throws an error)."),fjo=l(),ft=a("div"),F(Oy.$$.fragment),mjo=l(),qge=a("p"),gjo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hjo=l(),Ui=a("p"),pjo=o(`Note:
Loading a model from its configuration file does `),jge=a("strong"),_jo=o("not"),ujo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XO=a("a"),bjo=o("from_pretrained()"),vjo=o(" to load the model weights."),Fjo=l(),F(M4.$$.fragment),Tjo=l(),to=a("div"),F(Vy.$$.fragment),Mjo=l(),Dge=a("p"),Ejo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Cjo=l(),Ia=a("p"),wjo=o("The model class to instantiate is selected based on the "),Gge=a("code"),Ajo=o("model_type"),yjo=o(` property of the config object (either
passed as an argument or loaded from `),Oge=a("code"),Ljo=o("pretrained_model_name_or_path"),xjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vge=a("code"),$jo=o("pretrained_model_name_or_path"),kjo=o(":"),Sjo=l(),Yr=a("ul"),E4=a("li"),Xge=a("strong"),Rjo=o("bert"),Pjo=o(" \u2014 "),zO=a("a"),Bjo=o("BertForNextSentencePrediction"),Ijo=o(" (BERT model)"),Njo=l(),C4=a("li"),zge=a("strong"),qjo=o("fnet"),jjo=o(" \u2014 "),WO=a("a"),Djo=o("FNetForNextSentencePrediction"),Gjo=o(" (FNet model)"),Ojo=l(),w4=a("li"),Wge=a("strong"),Vjo=o("megatron-bert"),Xjo=o(" \u2014 "),QO=a("a"),zjo=o("MegatronBertForNextSentencePrediction"),Wjo=o(" (MegatronBert model)"),Qjo=l(),A4=a("li"),Qge=a("strong"),Hjo=o("mobilebert"),Ujo=o(" \u2014 "),HO=a("a"),Jjo=o("MobileBertForNextSentencePrediction"),Yjo=o(" (MobileBERT model)"),Kjo=l(),y4=a("li"),Hge=a("strong"),Zjo=o("qdqbert"),eDo=o(" \u2014 "),UO=a("a"),oDo=o("QDQBertForNextSentencePrediction"),rDo=o(" (QDQBert model)"),tDo=l(),L4=a("p"),aDo=o("The model is set in evaluation mode by default using "),Uge=a("code"),nDo=o("model.eval()"),sDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jge=a("code"),lDo=o("model.train()"),iDo=l(),F(x4.$$.fragment),Qqe=l(),Ji=a("h2"),$4=a("a"),Yge=a("span"),F(Xy.$$.fragment),dDo=l(),Kge=a("span"),cDo=o("AutoModelForTokenClassification"),Hqe=l(),Io=a("div"),F(zy.$$.fragment),fDo=l(),Yi=a("p"),mDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),JO=a("a"),gDo=o("from_pretrained()"),hDo=o(" class method or the "),YO=a("a"),pDo=o("from_config()"),_Do=o(` class
method.`),uDo=l(),Wy=a("p"),bDo=o("This class cannot be instantiated directly using "),Zge=a("code"),vDo=o("__init__()"),FDo=o(" (throws an error)."),TDo=l(),mt=a("div"),F(Qy.$$.fragment),MDo=l(),ehe=a("p"),EDo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CDo=l(),Ki=a("p"),wDo=o(`Note:
Loading a model from its configuration file does `),ohe=a("strong"),ADo=o("not"),yDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KO=a("a"),LDo=o("from_pretrained()"),xDo=o(" to load the model weights."),$Do=l(),F(k4.$$.fragment),kDo=l(),ao=a("div"),F(Hy.$$.fragment),SDo=l(),rhe=a("p"),RDo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),PDo=l(),Na=a("p"),BDo=o("The model class to instantiate is selected based on the "),the=a("code"),IDo=o("model_type"),NDo=o(` property of the config object (either
passed as an argument or loaded from `),ahe=a("code"),qDo=o("pretrained_model_name_or_path"),jDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=a("code"),DDo=o("pretrained_model_name_or_path"),GDo=o(":"),ODo=l(),H=a("ul"),S4=a("li"),she=a("strong"),VDo=o("albert"),XDo=o(" \u2014 "),ZO=a("a"),zDo=o("AlbertForTokenClassification"),WDo=o(" (ALBERT model)"),QDo=l(),R4=a("li"),lhe=a("strong"),HDo=o("bert"),UDo=o(" \u2014 "),eV=a("a"),JDo=o("BertForTokenClassification"),YDo=o(" (BERT model)"),KDo=l(),P4=a("li"),ihe=a("strong"),ZDo=o("big_bird"),eGo=o(" \u2014 "),oV=a("a"),oGo=o("BigBirdForTokenClassification"),rGo=o(" (BigBird model)"),tGo=l(),B4=a("li"),dhe=a("strong"),aGo=o("camembert"),nGo=o(" \u2014 "),rV=a("a"),sGo=o("CamembertForTokenClassification"),lGo=o(" (CamemBERT model)"),iGo=l(),I4=a("li"),che=a("strong"),dGo=o("canine"),cGo=o(" \u2014 "),tV=a("a"),fGo=o("CanineForTokenClassification"),mGo=o(" (Canine model)"),gGo=l(),N4=a("li"),fhe=a("strong"),hGo=o("convbert"),pGo=o(" \u2014 "),aV=a("a"),_Go=o("ConvBertForTokenClassification"),uGo=o(" (ConvBERT model)"),bGo=l(),q4=a("li"),mhe=a("strong"),vGo=o("data2vec-text"),FGo=o(" \u2014 "),nV=a("a"),TGo=o("Data2VecTextForTokenClassification"),MGo=o(" (Data2VecText model)"),EGo=l(),j4=a("li"),ghe=a("strong"),CGo=o("deberta"),wGo=o(" \u2014 "),sV=a("a"),AGo=o("DebertaForTokenClassification"),yGo=o(" (DeBERTa model)"),LGo=l(),D4=a("li"),hhe=a("strong"),xGo=o("deberta-v2"),$Go=o(" \u2014 "),lV=a("a"),kGo=o("DebertaV2ForTokenClassification"),SGo=o(" (DeBERTa-v2 model)"),RGo=l(),G4=a("li"),phe=a("strong"),PGo=o("distilbert"),BGo=o(" \u2014 "),iV=a("a"),IGo=o("DistilBertForTokenClassification"),NGo=o(" (DistilBERT model)"),qGo=l(),O4=a("li"),_he=a("strong"),jGo=o("electra"),DGo=o(" \u2014 "),dV=a("a"),GGo=o("ElectraForTokenClassification"),OGo=o(" (ELECTRA model)"),VGo=l(),V4=a("li"),uhe=a("strong"),XGo=o("flaubert"),zGo=o(" \u2014 "),cV=a("a"),WGo=o("FlaubertForTokenClassification"),QGo=o(" (FlauBERT model)"),HGo=l(),X4=a("li"),bhe=a("strong"),UGo=o("fnet"),JGo=o(" \u2014 "),fV=a("a"),YGo=o("FNetForTokenClassification"),KGo=o(" (FNet model)"),ZGo=l(),z4=a("li"),vhe=a("strong"),eOo=o("funnel"),oOo=o(" \u2014 "),mV=a("a"),rOo=o("FunnelForTokenClassification"),tOo=o(" (Funnel Transformer model)"),aOo=l(),W4=a("li"),Fhe=a("strong"),nOo=o("gpt2"),sOo=o(" \u2014 "),gV=a("a"),lOo=o("GPT2ForTokenClassification"),iOo=o(" (OpenAI GPT-2 model)"),dOo=l(),Q4=a("li"),The=a("strong"),cOo=o("ibert"),fOo=o(" \u2014 "),hV=a("a"),mOo=o("IBertForTokenClassification"),gOo=o(" (I-BERT model)"),hOo=l(),H4=a("li"),Mhe=a("strong"),pOo=o("layoutlm"),_Oo=o(" \u2014 "),pV=a("a"),uOo=o("LayoutLMForTokenClassification"),bOo=o(" (LayoutLM model)"),vOo=l(),U4=a("li"),Ehe=a("strong"),FOo=o("layoutlmv2"),TOo=o(" \u2014 "),_V=a("a"),MOo=o("LayoutLMv2ForTokenClassification"),EOo=o(" (LayoutLMv2 model)"),COo=l(),J4=a("li"),Che=a("strong"),wOo=o("layoutlmv3"),AOo=o(" \u2014 "),uV=a("a"),yOo=o("LayoutLMv3ForTokenClassification"),LOo=o(" (LayoutLMv3 model)"),xOo=l(),Y4=a("li"),whe=a("strong"),$Oo=o("longformer"),kOo=o(" \u2014 "),bV=a("a"),SOo=o("LongformerForTokenClassification"),ROo=o(" (Longformer model)"),POo=l(),K4=a("li"),Ahe=a("strong"),BOo=o("megatron-bert"),IOo=o(" \u2014 "),vV=a("a"),NOo=o("MegatronBertForTokenClassification"),qOo=o(" (MegatronBert model)"),jOo=l(),Z4=a("li"),yhe=a("strong"),DOo=o("mobilebert"),GOo=o(" \u2014 "),FV=a("a"),OOo=o("MobileBertForTokenClassification"),VOo=o(" (MobileBERT model)"),XOo=l(),ev=a("li"),Lhe=a("strong"),zOo=o("mpnet"),WOo=o(" \u2014 "),TV=a("a"),QOo=o("MPNetForTokenClassification"),HOo=o(" (MPNet model)"),UOo=l(),ov=a("li"),xhe=a("strong"),JOo=o("nystromformer"),YOo=o(" \u2014 "),MV=a("a"),KOo=o("NystromformerForTokenClassification"),ZOo=o(" (Nystromformer model)"),eVo=l(),rv=a("li"),$he=a("strong"),oVo=o("qdqbert"),rVo=o(" \u2014 "),EV=a("a"),tVo=o("QDQBertForTokenClassification"),aVo=o(" (QDQBert model)"),nVo=l(),tv=a("li"),khe=a("strong"),sVo=o("rembert"),lVo=o(" \u2014 "),CV=a("a"),iVo=o("RemBertForTokenClassification"),dVo=o(" (RemBERT model)"),cVo=l(),av=a("li"),She=a("strong"),fVo=o("roberta"),mVo=o(" \u2014 "),wV=a("a"),gVo=o("RobertaForTokenClassification"),hVo=o(" (RoBERTa model)"),pVo=l(),nv=a("li"),Rhe=a("strong"),_Vo=o("roformer"),uVo=o(" \u2014 "),AV=a("a"),bVo=o("RoFormerForTokenClassification"),vVo=o(" (RoFormer model)"),FVo=l(),sv=a("li"),Phe=a("strong"),TVo=o("squeezebert"),MVo=o(" \u2014 "),yV=a("a"),EVo=o("SqueezeBertForTokenClassification"),CVo=o(" (SqueezeBERT model)"),wVo=l(),lv=a("li"),Bhe=a("strong"),AVo=o("xlm"),yVo=o(" \u2014 "),LV=a("a"),LVo=o("XLMForTokenClassification"),xVo=o(" (XLM model)"),$Vo=l(),iv=a("li"),Ihe=a("strong"),kVo=o("xlm-roberta"),SVo=o(" \u2014 "),xV=a("a"),RVo=o("XLMRobertaForTokenClassification"),PVo=o(" (XLM-RoBERTa model)"),BVo=l(),dv=a("li"),Nhe=a("strong"),IVo=o("xlm-roberta-xl"),NVo=o(" \u2014 "),$V=a("a"),qVo=o("XLMRobertaXLForTokenClassification"),jVo=o(" (XLM-RoBERTa-XL model)"),DVo=l(),cv=a("li"),qhe=a("strong"),GVo=o("xlnet"),OVo=o(" \u2014 "),kV=a("a"),VVo=o("XLNetForTokenClassification"),XVo=o(" (XLNet model)"),zVo=l(),fv=a("li"),jhe=a("strong"),WVo=o("yoso"),QVo=o(" \u2014 "),SV=a("a"),HVo=o("YosoForTokenClassification"),UVo=o(" (YOSO model)"),JVo=l(),mv=a("p"),YVo=o("The model is set in evaluation mode by default using "),Dhe=a("code"),KVo=o("model.eval()"),ZVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=a("code"),eXo=o("model.train()"),oXo=l(),F(gv.$$.fragment),Uqe=l(),Zi=a("h2"),hv=a("a"),Ohe=a("span"),F(Uy.$$.fragment),rXo=l(),Vhe=a("span"),tXo=o("AutoModelForQuestionAnswering"),Jqe=l(),No=a("div"),F(Jy.$$.fragment),aXo=l(),ed=a("p"),nXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),RV=a("a"),sXo=o("from_pretrained()"),lXo=o(" class method or the "),PV=a("a"),iXo=o("from_config()"),dXo=o(` class
method.`),cXo=l(),Yy=a("p"),fXo=o("This class cannot be instantiated directly using "),Xhe=a("code"),mXo=o("__init__()"),gXo=o(" (throws an error)."),hXo=l(),gt=a("div"),F(Ky.$$.fragment),pXo=l(),zhe=a("p"),_Xo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uXo=l(),od=a("p"),bXo=o(`Note:
Loading a model from its configuration file does `),Whe=a("strong"),vXo=o("not"),FXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=a("a"),TXo=o("from_pretrained()"),MXo=o(" to load the model weights."),EXo=l(),F(pv.$$.fragment),CXo=l(),no=a("div"),F(Zy.$$.fragment),wXo=l(),Qhe=a("p"),AXo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),yXo=l(),qa=a("p"),LXo=o("The model class to instantiate is selected based on the "),Hhe=a("code"),xXo=o("model_type"),$Xo=o(` property of the config object (either
passed as an argument or loaded from `),Uhe=a("code"),kXo=o("pretrained_model_name_or_path"),SXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=a("code"),RXo=o("pretrained_model_name_or_path"),PXo=o(":"),BXo=l(),V=a("ul"),_v=a("li"),Yhe=a("strong"),IXo=o("albert"),NXo=o(" \u2014 "),IV=a("a"),qXo=o("AlbertForQuestionAnswering"),jXo=o(" (ALBERT model)"),DXo=l(),uv=a("li"),Khe=a("strong"),GXo=o("bart"),OXo=o(" \u2014 "),NV=a("a"),VXo=o("BartForQuestionAnswering"),XXo=o(" (BART model)"),zXo=l(),bv=a("li"),Zhe=a("strong"),WXo=o("bert"),QXo=o(" \u2014 "),qV=a("a"),HXo=o("BertForQuestionAnswering"),UXo=o(" (BERT model)"),JXo=l(),vv=a("li"),epe=a("strong"),YXo=o("big_bird"),KXo=o(" \u2014 "),jV=a("a"),ZXo=o("BigBirdForQuestionAnswering"),ezo=o(" (BigBird model)"),ozo=l(),Fv=a("li"),ope=a("strong"),rzo=o("bigbird_pegasus"),tzo=o(" \u2014 "),DV=a("a"),azo=o("BigBirdPegasusForQuestionAnswering"),nzo=o(" (BigBirdPegasus model)"),szo=l(),Tv=a("li"),rpe=a("strong"),lzo=o("camembert"),izo=o(" \u2014 "),GV=a("a"),dzo=o("CamembertForQuestionAnswering"),czo=o(" (CamemBERT model)"),fzo=l(),Mv=a("li"),tpe=a("strong"),mzo=o("canine"),gzo=o(" \u2014 "),OV=a("a"),hzo=o("CanineForQuestionAnswering"),pzo=o(" (Canine model)"),_zo=l(),Ev=a("li"),ape=a("strong"),uzo=o("convbert"),bzo=o(" \u2014 "),VV=a("a"),vzo=o("ConvBertForQuestionAnswering"),Fzo=o(" (ConvBERT model)"),Tzo=l(),Cv=a("li"),npe=a("strong"),Mzo=o("data2vec-text"),Ezo=o(" \u2014 "),XV=a("a"),Czo=o("Data2VecTextForQuestionAnswering"),wzo=o(" (Data2VecText model)"),Azo=l(),wv=a("li"),spe=a("strong"),yzo=o("deberta"),Lzo=o(" \u2014 "),zV=a("a"),xzo=o("DebertaForQuestionAnswering"),$zo=o(" (DeBERTa model)"),kzo=l(),Av=a("li"),lpe=a("strong"),Szo=o("deberta-v2"),Rzo=o(" \u2014 "),WV=a("a"),Pzo=o("DebertaV2ForQuestionAnswering"),Bzo=o(" (DeBERTa-v2 model)"),Izo=l(),yv=a("li"),ipe=a("strong"),Nzo=o("distilbert"),qzo=o(" \u2014 "),QV=a("a"),jzo=o("DistilBertForQuestionAnswering"),Dzo=o(" (DistilBERT model)"),Gzo=l(),Lv=a("li"),dpe=a("strong"),Ozo=o("electra"),Vzo=o(" \u2014 "),HV=a("a"),Xzo=o("ElectraForQuestionAnswering"),zzo=o(" (ELECTRA model)"),Wzo=l(),xv=a("li"),cpe=a("strong"),Qzo=o("flaubert"),Hzo=o(" \u2014 "),UV=a("a"),Uzo=o("FlaubertForQuestionAnsweringSimple"),Jzo=o(" (FlauBERT model)"),Yzo=l(),$v=a("li"),fpe=a("strong"),Kzo=o("fnet"),Zzo=o(" \u2014 "),JV=a("a"),eWo=o("FNetForQuestionAnswering"),oWo=o(" (FNet model)"),rWo=l(),kv=a("li"),mpe=a("strong"),tWo=o("funnel"),aWo=o(" \u2014 "),YV=a("a"),nWo=o("FunnelForQuestionAnswering"),sWo=o(" (Funnel Transformer model)"),lWo=l(),Sv=a("li"),gpe=a("strong"),iWo=o("gptj"),dWo=o(" \u2014 "),KV=a("a"),cWo=o("GPTJForQuestionAnswering"),fWo=o(" (GPT-J model)"),mWo=l(),Rv=a("li"),hpe=a("strong"),gWo=o("ibert"),hWo=o(" \u2014 "),ZV=a("a"),pWo=o("IBertForQuestionAnswering"),_Wo=o(" (I-BERT model)"),uWo=l(),Pv=a("li"),ppe=a("strong"),bWo=o("layoutlmv2"),vWo=o(" \u2014 "),eX=a("a"),FWo=o("LayoutLMv2ForQuestionAnswering"),TWo=o(" (LayoutLMv2 model)"),MWo=l(),Bv=a("li"),_pe=a("strong"),EWo=o("layoutlmv3"),CWo=o(" \u2014 "),oX=a("a"),wWo=o("LayoutLMv3ForQuestionAnswering"),AWo=o(" (LayoutLMv3 model)"),yWo=l(),Iv=a("li"),upe=a("strong"),LWo=o("led"),xWo=o(" \u2014 "),rX=a("a"),$Wo=o("LEDForQuestionAnswering"),kWo=o(" (LED model)"),SWo=l(),Nv=a("li"),bpe=a("strong"),RWo=o("longformer"),PWo=o(" \u2014 "),tX=a("a"),BWo=o("LongformerForQuestionAnswering"),IWo=o(" (Longformer model)"),NWo=l(),qv=a("li"),vpe=a("strong"),qWo=o("lxmert"),jWo=o(" \u2014 "),aX=a("a"),DWo=o("LxmertForQuestionAnswering"),GWo=o(" (LXMERT model)"),OWo=l(),jv=a("li"),Fpe=a("strong"),VWo=o("mbart"),XWo=o(" \u2014 "),nX=a("a"),zWo=o("MBartForQuestionAnswering"),WWo=o(" (mBART model)"),QWo=l(),Dv=a("li"),Tpe=a("strong"),HWo=o("megatron-bert"),UWo=o(" \u2014 "),sX=a("a"),JWo=o("MegatronBertForQuestionAnswering"),YWo=o(" (MegatronBert model)"),KWo=l(),Gv=a("li"),Mpe=a("strong"),ZWo=o("mobilebert"),eQo=o(" \u2014 "),lX=a("a"),oQo=o("MobileBertForQuestionAnswering"),rQo=o(" (MobileBERT model)"),tQo=l(),Ov=a("li"),Epe=a("strong"),aQo=o("mpnet"),nQo=o(" \u2014 "),iX=a("a"),sQo=o("MPNetForQuestionAnswering"),lQo=o(" (MPNet model)"),iQo=l(),Vv=a("li"),Cpe=a("strong"),dQo=o("nystromformer"),cQo=o(" \u2014 "),dX=a("a"),fQo=o("NystromformerForQuestionAnswering"),mQo=o(" (Nystromformer model)"),gQo=l(),Xv=a("li"),wpe=a("strong"),hQo=o("qdqbert"),pQo=o(" \u2014 "),cX=a("a"),_Qo=o("QDQBertForQuestionAnswering"),uQo=o(" (QDQBert model)"),bQo=l(),zv=a("li"),Ape=a("strong"),vQo=o("reformer"),FQo=o(" \u2014 "),fX=a("a"),TQo=o("ReformerForQuestionAnswering"),MQo=o(" (Reformer model)"),EQo=l(),Wv=a("li"),ype=a("strong"),CQo=o("rembert"),wQo=o(" \u2014 "),mX=a("a"),AQo=o("RemBertForQuestionAnswering"),yQo=o(" (RemBERT model)"),LQo=l(),Qv=a("li"),Lpe=a("strong"),xQo=o("roberta"),$Qo=o(" \u2014 "),gX=a("a"),kQo=o("RobertaForQuestionAnswering"),SQo=o(" (RoBERTa model)"),RQo=l(),Hv=a("li"),xpe=a("strong"),PQo=o("roformer"),BQo=o(" \u2014 "),hX=a("a"),IQo=o("RoFormerForQuestionAnswering"),NQo=o(" (RoFormer model)"),qQo=l(),Uv=a("li"),$pe=a("strong"),jQo=o("splinter"),DQo=o(" \u2014 "),pX=a("a"),GQo=o("SplinterForQuestionAnswering"),OQo=o(" (Splinter model)"),VQo=l(),Jv=a("li"),kpe=a("strong"),XQo=o("squeezebert"),zQo=o(" \u2014 "),_X=a("a"),WQo=o("SqueezeBertForQuestionAnswering"),QQo=o(" (SqueezeBERT model)"),HQo=l(),Yv=a("li"),Spe=a("strong"),UQo=o("xlm"),JQo=o(" \u2014 "),uX=a("a"),YQo=o("XLMForQuestionAnsweringSimple"),KQo=o(" (XLM model)"),ZQo=l(),Kv=a("li"),Rpe=a("strong"),eHo=o("xlm-roberta"),oHo=o(" \u2014 "),bX=a("a"),rHo=o("XLMRobertaForQuestionAnswering"),tHo=o(" (XLM-RoBERTa model)"),aHo=l(),Zv=a("li"),Ppe=a("strong"),nHo=o("xlm-roberta-xl"),sHo=o(" \u2014 "),vX=a("a"),lHo=o("XLMRobertaXLForQuestionAnswering"),iHo=o(" (XLM-RoBERTa-XL model)"),dHo=l(),e5=a("li"),Bpe=a("strong"),cHo=o("xlnet"),fHo=o(" \u2014 "),FX=a("a"),mHo=o("XLNetForQuestionAnsweringSimple"),gHo=o(" (XLNet model)"),hHo=l(),o5=a("li"),Ipe=a("strong"),pHo=o("yoso"),_Ho=o(" \u2014 "),TX=a("a"),uHo=o("YosoForQuestionAnswering"),bHo=o(" (YOSO model)"),vHo=l(),r5=a("p"),FHo=o("The model is set in evaluation mode by default using "),Npe=a("code"),THo=o("model.eval()"),MHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=a("code"),EHo=o("model.train()"),CHo=l(),F(t5.$$.fragment),Yqe=l(),rd=a("h2"),a5=a("a"),jpe=a("span"),F(eL.$$.fragment),wHo=l(),Dpe=a("span"),AHo=o("AutoModelForTableQuestionAnswering"),Kqe=l(),qo=a("div"),F(oL.$$.fragment),yHo=l(),td=a("p"),LHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),MX=a("a"),xHo=o("from_pretrained()"),$Ho=o(" class method or the "),EX=a("a"),kHo=o("from_config()"),SHo=o(` class
method.`),RHo=l(),rL=a("p"),PHo=o("This class cannot be instantiated directly using "),Gpe=a("code"),BHo=o("__init__()"),IHo=o(" (throws an error)."),NHo=l(),ht=a("div"),F(tL.$$.fragment),qHo=l(),Ope=a("p"),jHo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),DHo=l(),ad=a("p"),GHo=o(`Note:
Loading a model from its configuration file does `),Vpe=a("strong"),OHo=o("not"),VHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=a("a"),XHo=o("from_pretrained()"),zHo=o(" to load the model weights."),WHo=l(),F(n5.$$.fragment),QHo=l(),so=a("div"),F(aL.$$.fragment),HHo=l(),Xpe=a("p"),UHo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),JHo=l(),ja=a("p"),YHo=o("The model class to instantiate is selected based on the "),zpe=a("code"),KHo=o("model_type"),ZHo=o(` property of the config object (either
passed as an argument or loaded from `),Wpe=a("code"),eUo=o("pretrained_model_name_or_path"),oUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=a("code"),rUo=o("pretrained_model_name_or_path"),tUo=o(":"),aUo=l(),Hpe=a("ul"),s5=a("li"),Upe=a("strong"),nUo=o("tapas"),sUo=o(" \u2014 "),wX=a("a"),lUo=o("TapasForQuestionAnswering"),iUo=o(" (TAPAS model)"),dUo=l(),l5=a("p"),cUo=o("The model is set in evaluation mode by default using "),Jpe=a("code"),fUo=o("model.eval()"),mUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ype=a("code"),gUo=o("model.train()"),hUo=l(),F(i5.$$.fragment),Zqe=l(),nd=a("h2"),d5=a("a"),Kpe=a("span"),F(nL.$$.fragment),pUo=l(),Zpe=a("span"),_Uo=o("AutoModelForImageClassification"),eje=l(),jo=a("div"),F(sL.$$.fragment),uUo=l(),sd=a("p"),bUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),AX=a("a"),vUo=o("from_pretrained()"),FUo=o(" class method or the "),yX=a("a"),TUo=o("from_config()"),MUo=o(` class
method.`),EUo=l(),lL=a("p"),CUo=o("This class cannot be instantiated directly using "),e_e=a("code"),wUo=o("__init__()"),AUo=o(" (throws an error)."),yUo=l(),pt=a("div"),F(iL.$$.fragment),LUo=l(),o_e=a("p"),xUo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$Uo=l(),ld=a("p"),kUo=o(`Note:
Loading a model from its configuration file does `),r_e=a("strong"),SUo=o("not"),RUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=a("a"),PUo=o("from_pretrained()"),BUo=o(" to load the model weights."),IUo=l(),F(c5.$$.fragment),NUo=l(),lo=a("div"),F(dL.$$.fragment),qUo=l(),t_e=a("p"),jUo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),DUo=l(),Da=a("p"),GUo=o("The model class to instantiate is selected based on the "),a_e=a("code"),OUo=o("model_type"),VUo=o(` property of the config object (either
passed as an argument or loaded from `),n_e=a("code"),XUo=o("pretrained_model_name_or_path"),zUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=a("code"),WUo=o("pretrained_model_name_or_path"),QUo=o(":"),HUo=l(),ve=a("ul"),f5=a("li"),l_e=a("strong"),UUo=o("beit"),JUo=o(" \u2014 "),xX=a("a"),YUo=o("BeitForImageClassification"),KUo=o(" (BEiT model)"),ZUo=l(),m5=a("li"),i_e=a("strong"),eJo=o("convnext"),oJo=o(" \u2014 "),$X=a("a"),rJo=o("ConvNextForImageClassification"),tJo=o(" (ConvNext model)"),aJo=l(),g5=a("li"),d_e=a("strong"),nJo=o("cvt"),sJo=o(" \u2014 "),kX=a("a"),lJo=o("CvtForImageClassification"),iJo=o(" (CvT model)"),dJo=l(),h5=a("li"),c_e=a("strong"),cJo=o("data2vec-vision"),fJo=o(" \u2014 "),SX=a("a"),mJo=o("Data2VecVisionForImageClassification"),gJo=o(" (Data2VecVision model)"),hJo=l(),Bs=a("li"),f_e=a("strong"),pJo=o("deit"),_Jo=o(" \u2014 "),RX=a("a"),uJo=o("DeiTForImageClassification"),bJo=o(" or "),PX=a("a"),vJo=o("DeiTForImageClassificationWithTeacher"),FJo=o(" (DeiT model)"),TJo=l(),p5=a("li"),m_e=a("strong"),MJo=o("imagegpt"),EJo=o(" \u2014 "),BX=a("a"),CJo=o("ImageGPTForImageClassification"),wJo=o(" (ImageGPT model)"),AJo=l(),_5=a("li"),g_e=a("strong"),yJo=o("mobilevit"),LJo=o(" \u2014 "),IX=a("a"),xJo=o("MobileViTForImageClassification"),$Jo=o(" (MobileViT model)"),kJo=l(),_t=a("li"),h_e=a("strong"),SJo=o("perceiver"),RJo=o(" \u2014 "),NX=a("a"),PJo=o("PerceiverForImageClassificationLearned"),BJo=o(" or "),qX=a("a"),IJo=o("PerceiverForImageClassificationFourier"),NJo=o(" or "),jX=a("a"),qJo=o("PerceiverForImageClassificationConvProcessing"),jJo=o(" (Perceiver model)"),DJo=l(),u5=a("li"),p_e=a("strong"),GJo=o("poolformer"),OJo=o(" \u2014 "),DX=a("a"),VJo=o("PoolFormerForImageClassification"),XJo=o(" (PoolFormer model)"),zJo=l(),b5=a("li"),__e=a("strong"),WJo=o("regnet"),QJo=o(" \u2014 "),GX=a("a"),HJo=o("RegNetForImageClassification"),UJo=o(" (RegNet model)"),JJo=l(),v5=a("li"),u_e=a("strong"),YJo=o("resnet"),KJo=o(" \u2014 "),OX=a("a"),ZJo=o("ResNetForImageClassification"),eYo=o(" (ResNet model)"),oYo=l(),F5=a("li"),b_e=a("strong"),rYo=o("segformer"),tYo=o(" \u2014 "),VX=a("a"),aYo=o("SegformerForImageClassification"),nYo=o(" (SegFormer model)"),sYo=l(),T5=a("li"),v_e=a("strong"),lYo=o("swin"),iYo=o(" \u2014 "),XX=a("a"),dYo=o("SwinForImageClassification"),cYo=o(" (Swin model)"),fYo=l(),M5=a("li"),F_e=a("strong"),mYo=o("van"),gYo=o(" \u2014 "),zX=a("a"),hYo=o("VanForImageClassification"),pYo=o(" (VAN model)"),_Yo=l(),E5=a("li"),T_e=a("strong"),uYo=o("vit"),bYo=o(" \u2014 "),WX=a("a"),vYo=o("ViTForImageClassification"),FYo=o(" (ViT model)"),TYo=l(),C5=a("p"),MYo=o("The model is set in evaluation mode by default using "),M_e=a("code"),EYo=o("model.eval()"),CYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E_e=a("code"),wYo=o("model.train()"),AYo=l(),F(w5.$$.fragment),oje=l(),id=a("h2"),A5=a("a"),C_e=a("span"),F(cL.$$.fragment),yYo=l(),w_e=a("span"),LYo=o("AutoModelForVision2Seq"),rje=l(),Do=a("div"),F(fL.$$.fragment),xYo=l(),dd=a("p"),$Yo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),QX=a("a"),kYo=o("from_pretrained()"),SYo=o(" class method or the "),HX=a("a"),RYo=o("from_config()"),PYo=o(` class
method.`),BYo=l(),mL=a("p"),IYo=o("This class cannot be instantiated directly using "),A_e=a("code"),NYo=o("__init__()"),qYo=o(" (throws an error)."),jYo=l(),ut=a("div"),F(gL.$$.fragment),DYo=l(),y_e=a("p"),GYo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OYo=l(),cd=a("p"),VYo=o(`Note:
Loading a model from its configuration file does `),L_e=a("strong"),XYo=o("not"),zYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),WYo=o("from_pretrained()"),QYo=o(" to load the model weights."),HYo=l(),F(y5.$$.fragment),UYo=l(),io=a("div"),F(hL.$$.fragment),JYo=l(),x_e=a("p"),YYo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),KYo=l(),Ga=a("p"),ZYo=o("The model class to instantiate is selected based on the "),$_e=a("code"),eKo=o("model_type"),oKo=o(` property of the config object (either
passed as an argument or loaded from `),k_e=a("code"),rKo=o("pretrained_model_name_or_path"),tKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=a("code"),aKo=o("pretrained_model_name_or_path"),nKo=o(":"),sKo=l(),R_e=a("ul"),L5=a("li"),P_e=a("strong"),lKo=o("vision-encoder-decoder"),iKo=o(" \u2014 "),JX=a("a"),dKo=o("VisionEncoderDecoderModel"),cKo=o(" (Vision Encoder decoder model)"),fKo=l(),x5=a("p"),mKo=o("The model is set in evaluation mode by default using "),B_e=a("code"),gKo=o("model.eval()"),hKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I_e=a("code"),pKo=o("model.train()"),_Ko=l(),F($5.$$.fragment),tje=l(),fd=a("h2"),k5=a("a"),N_e=a("span"),F(pL.$$.fragment),uKo=l(),q_e=a("span"),bKo=o("AutoModelForAudioClassification"),aje=l(),Go=a("div"),F(_L.$$.fragment),vKo=l(),md=a("p"),FKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),YX=a("a"),TKo=o("from_pretrained()"),MKo=o(" class method or the "),KX=a("a"),EKo=o("from_config()"),CKo=o(` class
method.`),wKo=l(),uL=a("p"),AKo=o("This class cannot be instantiated directly using "),j_e=a("code"),yKo=o("__init__()"),LKo=o(" (throws an error)."),xKo=l(),bt=a("div"),F(bL.$$.fragment),$Ko=l(),D_e=a("p"),kKo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),SKo=l(),gd=a("p"),RKo=o(`Note:
Loading a model from its configuration file does `),G_e=a("strong"),PKo=o("not"),BKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),IKo=o("from_pretrained()"),NKo=o(" to load the model weights."),qKo=l(),F(S5.$$.fragment),jKo=l(),co=a("div"),F(vL.$$.fragment),DKo=l(),O_e=a("p"),GKo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),OKo=l(),Oa=a("p"),VKo=o("The model class to instantiate is selected based on the "),V_e=a("code"),XKo=o("model_type"),zKo=o(` property of the config object (either
passed as an argument or loaded from `),X_e=a("code"),WKo=o("pretrained_model_name_or_path"),QKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z_e=a("code"),HKo=o("pretrained_model_name_or_path"),UKo=o(":"),JKo=l(),ke=a("ul"),R5=a("li"),W_e=a("strong"),YKo=o("data2vec-audio"),KKo=o(" \u2014 "),ez=a("a"),ZKo=o("Data2VecAudioForSequenceClassification"),eZo=o(" (Data2VecAudio model)"),oZo=l(),P5=a("li"),Q_e=a("strong"),rZo=o("hubert"),tZo=o(" \u2014 "),oz=a("a"),aZo=o("HubertForSequenceClassification"),nZo=o(" (Hubert model)"),sZo=l(),B5=a("li"),H_e=a("strong"),lZo=o("sew"),iZo=o(" \u2014 "),rz=a("a"),dZo=o("SEWForSequenceClassification"),cZo=o(" (SEW model)"),fZo=l(),I5=a("li"),U_e=a("strong"),mZo=o("sew-d"),gZo=o(" \u2014 "),tz=a("a"),hZo=o("SEWDForSequenceClassification"),pZo=o(" (SEW-D model)"),_Zo=l(),N5=a("li"),J_e=a("strong"),uZo=o("unispeech"),bZo=o(" \u2014 "),az=a("a"),vZo=o("UniSpeechForSequenceClassification"),FZo=o(" (UniSpeech model)"),TZo=l(),q5=a("li"),Y_e=a("strong"),MZo=o("unispeech-sat"),EZo=o(" \u2014 "),nz=a("a"),CZo=o("UniSpeechSatForSequenceClassification"),wZo=o(" (UniSpeechSat model)"),AZo=l(),j5=a("li"),K_e=a("strong"),yZo=o("wav2vec2"),LZo=o(" \u2014 "),sz=a("a"),xZo=o("Wav2Vec2ForSequenceClassification"),$Zo=o(" (Wav2Vec2 model)"),kZo=l(),D5=a("li"),Z_e=a("strong"),SZo=o("wav2vec2-conformer"),RZo=o(" \u2014 "),lz=a("a"),PZo=o("Wav2Vec2ConformerForSequenceClassification"),BZo=o(" (Wav2Vec2-Conformer model)"),IZo=l(),G5=a("li"),eue=a("strong"),NZo=o("wavlm"),qZo=o(" \u2014 "),iz=a("a"),jZo=o("WavLMForSequenceClassification"),DZo=o(" (WavLM model)"),GZo=l(),O5=a("p"),OZo=o("The model is set in evaluation mode by default using "),oue=a("code"),VZo=o("model.eval()"),XZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rue=a("code"),zZo=o("model.train()"),WZo=l(),F(V5.$$.fragment),nje=l(),hd=a("h2"),X5=a("a"),tue=a("span"),F(FL.$$.fragment),QZo=l(),aue=a("span"),HZo=o("AutoModelForAudioFrameClassification"),sje=l(),Oo=a("div"),F(TL.$$.fragment),UZo=l(),pd=a("p"),JZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),dz=a("a"),YZo=o("from_pretrained()"),KZo=o(" class method or the "),cz=a("a"),ZZo=o("from_config()"),eer=o(` class
method.`),oer=l(),ML=a("p"),rer=o("This class cannot be instantiated directly using "),nue=a("code"),ter=o("__init__()"),aer=o(" (throws an error)."),ner=l(),vt=a("div"),F(EL.$$.fragment),ser=l(),sue=a("p"),ler=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ier=l(),_d=a("p"),der=o(`Note:
Loading a model from its configuration file does `),lue=a("strong"),cer=o("not"),fer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=a("a"),mer=o("from_pretrained()"),ger=o(" to load the model weights."),her=l(),F(z5.$$.fragment),per=l(),fo=a("div"),F(CL.$$.fragment),_er=l(),iue=a("p"),uer=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),ber=l(),Va=a("p"),ver=o("The model class to instantiate is selected based on the "),due=a("code"),Fer=o("model_type"),Ter=o(` property of the config object (either
passed as an argument or loaded from `),cue=a("code"),Mer=o("pretrained_model_name_or_path"),Eer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=a("code"),Cer=o("pretrained_model_name_or_path"),wer=o(":"),Aer=l(),Kr=a("ul"),W5=a("li"),mue=a("strong"),yer=o("data2vec-audio"),Ler=o(" \u2014 "),mz=a("a"),xer=o("Data2VecAudioForAudioFrameClassification"),$er=o(" (Data2VecAudio model)"),ker=l(),Q5=a("li"),gue=a("strong"),Ser=o("unispeech-sat"),Rer=o(" \u2014 "),gz=a("a"),Per=o("UniSpeechSatForAudioFrameClassification"),Ber=o(" (UniSpeechSat model)"),Ier=l(),H5=a("li"),hue=a("strong"),Ner=o("wav2vec2"),qer=o(" \u2014 "),hz=a("a"),jer=o("Wav2Vec2ForAudioFrameClassification"),Der=o(" (Wav2Vec2 model)"),Ger=l(),U5=a("li"),pue=a("strong"),Oer=o("wav2vec2-conformer"),Ver=o(" \u2014 "),pz=a("a"),Xer=o("Wav2Vec2ConformerForAudioFrameClassification"),zer=o(" (Wav2Vec2-Conformer model)"),Wer=l(),J5=a("li"),_ue=a("strong"),Qer=o("wavlm"),Her=o(" \u2014 "),_z=a("a"),Uer=o("WavLMForAudioFrameClassification"),Jer=o(" (WavLM model)"),Yer=l(),Y5=a("p"),Ker=o("The model is set in evaluation mode by default using "),uue=a("code"),Zer=o("model.eval()"),eor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bue=a("code"),oor=o("model.train()"),ror=l(),F(K5.$$.fragment),lje=l(),ud=a("h2"),Z5=a("a"),vue=a("span"),F(wL.$$.fragment),tor=l(),Fue=a("span"),aor=o("AutoModelForCTC"),ije=l(),Vo=a("div"),F(AL.$$.fragment),nor=l(),bd=a("p"),sor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),uz=a("a"),lor=o("from_pretrained()"),ior=o(" class method or the "),bz=a("a"),dor=o("from_config()"),cor=o(` class
method.`),mor=l(),yL=a("p"),gor=o("This class cannot be instantiated directly using "),Tue=a("code"),hor=o("__init__()"),por=o(" (throws an error)."),_or=l(),Ft=a("div"),F(LL.$$.fragment),uor=l(),Mue=a("p"),bor=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),vor=l(),vd=a("p"),For=o(`Note:
Loading a model from its configuration file does `),Eue=a("strong"),Tor=o("not"),Mor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=a("a"),Eor=o("from_pretrained()"),Cor=o(" to load the model weights."),wor=l(),F(e3.$$.fragment),Aor=l(),mo=a("div"),F(xL.$$.fragment),yor=l(),Cue=a("p"),Lor=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),xor=l(),Xa=a("p"),$or=o("The model class to instantiate is selected based on the "),wue=a("code"),kor=o("model_type"),Sor=o(` property of the config object (either
passed as an argument or loaded from `),Aue=a("code"),Ror=o("pretrained_model_name_or_path"),Por=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yue=a("code"),Bor=o("pretrained_model_name_or_path"),Ior=o(":"),Nor=l(),Se=a("ul"),o3=a("li"),Lue=a("strong"),qor=o("data2vec-audio"),jor=o(" \u2014 "),Fz=a("a"),Dor=o("Data2VecAudioForCTC"),Gor=o(" (Data2VecAudio model)"),Oor=l(),r3=a("li"),xue=a("strong"),Vor=o("hubert"),Xor=o(" \u2014 "),Tz=a("a"),zor=o("HubertForCTC"),Wor=o(" (Hubert model)"),Qor=l(),t3=a("li"),$ue=a("strong"),Hor=o("sew"),Uor=o(" \u2014 "),Mz=a("a"),Jor=o("SEWForCTC"),Yor=o(" (SEW model)"),Kor=l(),a3=a("li"),kue=a("strong"),Zor=o("sew-d"),err=o(" \u2014 "),Ez=a("a"),orr=o("SEWDForCTC"),rrr=o(" (SEW-D model)"),trr=l(),n3=a("li"),Sue=a("strong"),arr=o("unispeech"),nrr=o(" \u2014 "),Cz=a("a"),srr=o("UniSpeechForCTC"),lrr=o(" (UniSpeech model)"),irr=l(),s3=a("li"),Rue=a("strong"),drr=o("unispeech-sat"),crr=o(" \u2014 "),wz=a("a"),frr=o("UniSpeechSatForCTC"),mrr=o(" (UniSpeechSat model)"),grr=l(),l3=a("li"),Pue=a("strong"),hrr=o("wav2vec2"),prr=o(" \u2014 "),Az=a("a"),_rr=o("Wav2Vec2ForCTC"),urr=o(" (Wav2Vec2 model)"),brr=l(),i3=a("li"),Bue=a("strong"),vrr=o("wav2vec2-conformer"),Frr=o(" \u2014 "),yz=a("a"),Trr=o("Wav2Vec2ConformerForCTC"),Mrr=o(" (Wav2Vec2-Conformer model)"),Err=l(),d3=a("li"),Iue=a("strong"),Crr=o("wavlm"),wrr=o(" \u2014 "),Lz=a("a"),Arr=o("WavLMForCTC"),yrr=o(" (WavLM model)"),Lrr=l(),c3=a("p"),xrr=o("The model is set in evaluation mode by default using "),Nue=a("code"),$rr=o("model.eval()"),krr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),que=a("code"),Srr=o("model.train()"),Rrr=l(),F(f3.$$.fragment),dje=l(),Fd=a("h2"),m3=a("a"),jue=a("span"),F($L.$$.fragment),Prr=l(),Due=a("span"),Brr=o("AutoModelForSpeechSeq2Seq"),cje=l(),Xo=a("div"),F(kL.$$.fragment),Irr=l(),Td=a("p"),Nrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),xz=a("a"),qrr=o("from_pretrained()"),jrr=o(" class method or the "),$z=a("a"),Drr=o("from_config()"),Grr=o(` class
method.`),Orr=l(),SL=a("p"),Vrr=o("This class cannot be instantiated directly using "),Gue=a("code"),Xrr=o("__init__()"),zrr=o(" (throws an error)."),Wrr=l(),Tt=a("div"),F(RL.$$.fragment),Qrr=l(),Oue=a("p"),Hrr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Urr=l(),Md=a("p"),Jrr=o(`Note:
Loading a model from its configuration file does `),Vue=a("strong"),Yrr=o("not"),Krr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=a("a"),Zrr=o("from_pretrained()"),etr=o(" to load the model weights."),otr=l(),F(g3.$$.fragment),rtr=l(),go=a("div"),F(PL.$$.fragment),ttr=l(),Xue=a("p"),atr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ntr=l(),za=a("p"),str=o("The model class to instantiate is selected based on the "),zue=a("code"),ltr=o("model_type"),itr=o(` property of the config object (either
passed as an argument or loaded from `),Wue=a("code"),dtr=o("pretrained_model_name_or_path"),ctr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=a("code"),ftr=o("pretrained_model_name_or_path"),mtr=o(":"),gtr=l(),BL=a("ul"),h3=a("li"),Hue=a("strong"),htr=o("speech-encoder-decoder"),ptr=o(" \u2014 "),Sz=a("a"),_tr=o("SpeechEncoderDecoderModel"),utr=o(" (Speech Encoder decoder model)"),btr=l(),p3=a("li"),Uue=a("strong"),vtr=o("speech_to_text"),Ftr=o(" \u2014 "),Rz=a("a"),Ttr=o("Speech2TextForConditionalGeneration"),Mtr=o(" (Speech2Text model)"),Etr=l(),_3=a("p"),Ctr=o("The model is set in evaluation mode by default using "),Jue=a("code"),wtr=o("model.eval()"),Atr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=a("code"),ytr=o("model.train()"),Ltr=l(),F(u3.$$.fragment),fje=l(),Ed=a("h2"),b3=a("a"),Kue=a("span"),F(IL.$$.fragment),xtr=l(),Zue=a("span"),$tr=o("AutoModelForAudioXVector"),mje=l(),zo=a("div"),F(NL.$$.fragment),ktr=l(),Cd=a("p"),Str=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Pz=a("a"),Rtr=o("from_pretrained()"),Ptr=o(" class method or the "),Bz=a("a"),Btr=o("from_config()"),Itr=o(` class
method.`),Ntr=l(),qL=a("p"),qtr=o("This class cannot be instantiated directly using "),e1e=a("code"),jtr=o("__init__()"),Dtr=o(" (throws an error)."),Gtr=l(),Mt=a("div"),F(jL.$$.fragment),Otr=l(),o1e=a("p"),Vtr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Xtr=l(),wd=a("p"),ztr=o(`Note:
Loading a model from its configuration file does `),r1e=a("strong"),Wtr=o("not"),Qtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=a("a"),Htr=o("from_pretrained()"),Utr=o(" to load the model weights."),Jtr=l(),F(v3.$$.fragment),Ytr=l(),ho=a("div"),F(DL.$$.fragment),Ktr=l(),t1e=a("p"),Ztr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),ear=l(),Wa=a("p"),oar=o("The model class to instantiate is selected based on the "),a1e=a("code"),rar=o("model_type"),tar=o(` property of the config object (either
passed as an argument or loaded from `),n1e=a("code"),aar=o("pretrained_model_name_or_path"),nar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=a("code"),sar=o("pretrained_model_name_or_path"),lar=o(":"),iar=l(),Zr=a("ul"),F3=a("li"),l1e=a("strong"),dar=o("data2vec-audio"),car=o(" \u2014 "),Nz=a("a"),far=o("Data2VecAudioForXVector"),mar=o(" (Data2VecAudio model)"),gar=l(),T3=a("li"),i1e=a("strong"),har=o("unispeech-sat"),par=o(" \u2014 "),qz=a("a"),_ar=o("UniSpeechSatForXVector"),uar=o(" (UniSpeechSat model)"),bar=l(),M3=a("li"),d1e=a("strong"),Far=o("wav2vec2"),Tar=o(" \u2014 "),jz=a("a"),Mar=o("Wav2Vec2ForXVector"),Ear=o(" (Wav2Vec2 model)"),Car=l(),E3=a("li"),c1e=a("strong"),war=o("wav2vec2-conformer"),Aar=o(" \u2014 "),Dz=a("a"),yar=o("Wav2Vec2ConformerForXVector"),Lar=o(" (Wav2Vec2-Conformer model)"),xar=l(),C3=a("li"),f1e=a("strong"),$ar=o("wavlm"),kar=o(" \u2014 "),Gz=a("a"),Sar=o("WavLMForXVector"),Rar=o(" (WavLM model)"),Par=l(),w3=a("p"),Bar=o("The model is set in evaluation mode by default using "),m1e=a("code"),Iar=o("model.eval()"),Nar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g1e=a("code"),qar=o("model.train()"),jar=l(),F(A3.$$.fragment),gje=l(),Ad=a("h2"),y3=a("a"),h1e=a("span"),F(GL.$$.fragment),Dar=l(),p1e=a("span"),Gar=o("AutoModelForMaskedImageModeling"),hje=l(),Wo=a("div"),F(OL.$$.fragment),Oar=l(),yd=a("p"),Var=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Oz=a("a"),Xar=o("from_pretrained()"),zar=o(" class method or the "),Vz=a("a"),War=o("from_config()"),Qar=o(` class
method.`),Har=l(),VL=a("p"),Uar=o("This class cannot be instantiated directly using "),_1e=a("code"),Jar=o("__init__()"),Yar=o(" (throws an error)."),Kar=l(),Et=a("div"),F(XL.$$.fragment),Zar=l(),u1e=a("p"),enr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),onr=l(),Ld=a("p"),rnr=o(`Note:
Loading a model from its configuration file does `),b1e=a("strong"),tnr=o("not"),anr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=a("a"),nnr=o("from_pretrained()"),snr=o(" to load the model weights."),lnr=l(),F(L3.$$.fragment),inr=l(),po=a("div"),F(zL.$$.fragment),dnr=l(),v1e=a("p"),cnr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),fnr=l(),Qa=a("p"),mnr=o("The model class to instantiate is selected based on the "),F1e=a("code"),gnr=o("model_type"),hnr=o(` property of the config object (either
passed as an argument or loaded from `),T1e=a("code"),pnr=o("pretrained_model_name_or_path"),_nr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=a("code"),unr=o("pretrained_model_name_or_path"),bnr=o(":"),vnr=l(),xd=a("ul"),x3=a("li"),E1e=a("strong"),Fnr=o("deit"),Tnr=o(" \u2014 "),zz=a("a"),Mnr=o("DeiTForMaskedImageModeling"),Enr=o(" (DeiT model)"),Cnr=l(),$3=a("li"),C1e=a("strong"),wnr=o("swin"),Anr=o(" \u2014 "),Wz=a("a"),ynr=o("SwinForMaskedImageModeling"),Lnr=o(" (Swin model)"),xnr=l(),k3=a("li"),w1e=a("strong"),$nr=o("vit"),knr=o(" \u2014 "),Qz=a("a"),Snr=o("ViTForMaskedImageModeling"),Rnr=o(" (ViT model)"),Pnr=l(),S3=a("p"),Bnr=o("The model is set in evaluation mode by default using "),A1e=a("code"),Inr=o("model.eval()"),Nnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y1e=a("code"),qnr=o("model.train()"),jnr=l(),F(R3.$$.fragment),pje=l(),$d=a("h2"),P3=a("a"),L1e=a("span"),F(WL.$$.fragment),Dnr=l(),x1e=a("span"),Gnr=o("AutoModelForObjectDetection"),_je=l(),Qo=a("div"),F(QL.$$.fragment),Onr=l(),kd=a("p"),Vnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Hz=a("a"),Xnr=o("from_pretrained()"),znr=o(" class method or the "),Uz=a("a"),Wnr=o("from_config()"),Qnr=o(` class
method.`),Hnr=l(),HL=a("p"),Unr=o("This class cannot be instantiated directly using "),$1e=a("code"),Jnr=o("__init__()"),Ynr=o(" (throws an error)."),Knr=l(),Ct=a("div"),F(UL.$$.fragment),Znr=l(),k1e=a("p"),esr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),osr=l(),Sd=a("p"),rsr=o(`Note:
Loading a model from its configuration file does `),S1e=a("strong"),tsr=o("not"),asr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),nsr=o("from_pretrained()"),ssr=o(" to load the model weights."),lsr=l(),F(B3.$$.fragment),isr=l(),_o=a("div"),F(JL.$$.fragment),dsr=l(),R1e=a("p"),csr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),fsr=l(),Ha=a("p"),msr=o("The model class to instantiate is selected based on the "),P1e=a("code"),gsr=o("model_type"),hsr=o(` property of the config object (either
passed as an argument or loaded from `),B1e=a("code"),psr=o("pretrained_model_name_or_path"),_sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=a("code"),usr=o("pretrained_model_name_or_path"),bsr=o(":"),vsr=l(),YL=a("ul"),I3=a("li"),N1e=a("strong"),Fsr=o("detr"),Tsr=o(" \u2014 "),Yz=a("a"),Msr=o("DetrForObjectDetection"),Esr=o(" (DETR model)"),Csr=l(),N3=a("li"),q1e=a("strong"),wsr=o("yolos"),Asr=o(" \u2014 "),Kz=a("a"),ysr=o("YolosForObjectDetection"),Lsr=o(" (YOLOS model)"),xsr=l(),q3=a("p"),$sr=o("The model is set in evaluation mode by default using "),j1e=a("code"),ksr=o("model.eval()"),Ssr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D1e=a("code"),Rsr=o("model.train()"),Psr=l(),F(j3.$$.fragment),uje=l(),Rd=a("h2"),D3=a("a"),G1e=a("span"),F(KL.$$.fragment),Bsr=l(),O1e=a("span"),Isr=o("AutoModelForImageSegmentation"),bje=l(),Ho=a("div"),F(ZL.$$.fragment),Nsr=l(),Pd=a("p"),qsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Zz=a("a"),jsr=o("from_pretrained()"),Dsr=o(" class method or the "),eW=a("a"),Gsr=o("from_config()"),Osr=o(` class
method.`),Vsr=l(),e8=a("p"),Xsr=o("This class cannot be instantiated directly using "),V1e=a("code"),zsr=o("__init__()"),Wsr=o(" (throws an error)."),Qsr=l(),wt=a("div"),F(o8.$$.fragment),Hsr=l(),X1e=a("p"),Usr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Jsr=l(),Bd=a("p"),Ysr=o(`Note:
Loading a model from its configuration file does `),z1e=a("strong"),Ksr=o("not"),Zsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=a("a"),elr=o("from_pretrained()"),olr=o(" to load the model weights."),rlr=l(),F(G3.$$.fragment),tlr=l(),uo=a("div"),F(r8.$$.fragment),alr=l(),W1e=a("p"),nlr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),slr=l(),Ua=a("p"),llr=o("The model class to instantiate is selected based on the "),Q1e=a("code"),ilr=o("model_type"),dlr=o(` property of the config object (either
passed as an argument or loaded from `),H1e=a("code"),clr=o("pretrained_model_name_or_path"),flr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=a("code"),mlr=o("pretrained_model_name_or_path"),glr=o(":"),hlr=l(),J1e=a("ul"),O3=a("li"),Y1e=a("strong"),plr=o("detr"),_lr=o(" \u2014 "),rW=a("a"),ulr=o("DetrForSegmentation"),blr=o(" (DETR model)"),vlr=l(),V3=a("p"),Flr=o("The model is set in evaluation mode by default using "),K1e=a("code"),Tlr=o("model.eval()"),Mlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z1e=a("code"),Elr=o("model.train()"),Clr=l(),F(X3.$$.fragment),vje=l(),Id=a("h2"),z3=a("a"),ebe=a("span"),F(t8.$$.fragment),wlr=l(),obe=a("span"),Alr=o("AutoModelForSemanticSegmentation"),Fje=l(),Uo=a("div"),F(a8.$$.fragment),ylr=l(),Nd=a("p"),Llr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),tW=a("a"),xlr=o("from_pretrained()"),$lr=o(" class method or the "),aW=a("a"),klr=o("from_config()"),Slr=o(` class
method.`),Rlr=l(),n8=a("p"),Plr=o("This class cannot be instantiated directly using "),rbe=a("code"),Blr=o("__init__()"),Ilr=o(" (throws an error)."),Nlr=l(),At=a("div"),F(s8.$$.fragment),qlr=l(),tbe=a("p"),jlr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Dlr=l(),qd=a("p"),Glr=o(`Note:
Loading a model from its configuration file does `),abe=a("strong"),Olr=o("not"),Vlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=a("a"),Xlr=o("from_pretrained()"),zlr=o(" to load the model weights."),Wlr=l(),F(W3.$$.fragment),Qlr=l(),bo=a("div"),F(l8.$$.fragment),Hlr=l(),nbe=a("p"),Ulr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Jlr=l(),Ja=a("p"),Ylr=o("The model class to instantiate is selected based on the "),sbe=a("code"),Klr=o("model_type"),Zlr=o(` property of the config object (either
passed as an argument or loaded from `),lbe=a("code"),eir=o("pretrained_model_name_or_path"),oir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=a("code"),rir=o("pretrained_model_name_or_path"),tir=o(":"),air=l(),et=a("ul"),Q3=a("li"),dbe=a("strong"),nir=o("beit"),sir=o(" \u2014 "),sW=a("a"),lir=o("BeitForSemanticSegmentation"),iir=o(" (BEiT model)"),dir=l(),H3=a("li"),cbe=a("strong"),cir=o("data2vec-vision"),fir=o(" \u2014 "),lW=a("a"),mir=o("Data2VecVisionForSemanticSegmentation"),gir=o(" (Data2VecVision model)"),hir=l(),U3=a("li"),fbe=a("strong"),pir=o("dpt"),_ir=o(" \u2014 "),iW=a("a"),uir=o("DPTForSemanticSegmentation"),bir=o(" (DPT model)"),vir=l(),J3=a("li"),mbe=a("strong"),Fir=o("mobilevit"),Tir=o(" \u2014 "),dW=a("a"),Mir=o("MobileViTForSemanticSegmentation"),Eir=o(" (MobileViT model)"),Cir=l(),Y3=a("li"),gbe=a("strong"),wir=o("segformer"),Air=o(" \u2014 "),cW=a("a"),yir=o("SegformerForSemanticSegmentation"),Lir=o(" (SegFormer model)"),xir=l(),K3=a("p"),$ir=o("The model is set in evaluation mode by default using "),hbe=a("code"),kir=o("model.eval()"),Sir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pbe=a("code"),Rir=o("model.train()"),Pir=l(),F(Z3.$$.fragment),Tje=l(),jd=a("h2"),eF=a("a"),_be=a("span"),F(i8.$$.fragment),Bir=l(),ube=a("span"),Iir=o("AutoModelForInstanceSegmentation"),Mje=l(),Jo=a("div"),F(d8.$$.fragment),Nir=l(),Dd=a("p"),qir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),fW=a("a"),jir=o("from_pretrained()"),Dir=o(" class method or the "),mW=a("a"),Gir=o("from_config()"),Oir=o(` class
method.`),Vir=l(),c8=a("p"),Xir=o("This class cannot be instantiated directly using "),bbe=a("code"),zir=o("__init__()"),Wir=o(" (throws an error)."),Qir=l(),yt=a("div"),F(f8.$$.fragment),Hir=l(),vbe=a("p"),Uir=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Jir=l(),Gd=a("p"),Yir=o(`Note:
Loading a model from its configuration file does `),Fbe=a("strong"),Kir=o("not"),Zir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),edr=o("from_pretrained()"),odr=o(" to load the model weights."),rdr=l(),F(oF.$$.fragment),tdr=l(),vo=a("div"),F(m8.$$.fragment),adr=l(),Tbe=a("p"),ndr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),sdr=l(),Ya=a("p"),ldr=o("The model class to instantiate is selected based on the "),Mbe=a("code"),idr=o("model_type"),ddr=o(` property of the config object (either
passed as an argument or loaded from `),Ebe=a("code"),cdr=o("pretrained_model_name_or_path"),fdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cbe=a("code"),mdr=o("pretrained_model_name_or_path"),gdr=o(":"),hdr=l(),wbe=a("ul"),rF=a("li"),Abe=a("strong"),pdr=o("maskformer"),_dr=o(" \u2014 "),hW=a("a"),udr=o("MaskFormerForInstanceSegmentation"),bdr=o(" (MaskFormer model)"),vdr=l(),tF=a("p"),Fdr=o("The model is set in evaluation mode by default using "),ybe=a("code"),Tdr=o("model.eval()"),Mdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lbe=a("code"),Edr=o("model.train()"),Cdr=l(),F(aF.$$.fragment),Eje=l(),Od=a("h2"),nF=a("a"),xbe=a("span"),F(g8.$$.fragment),wdr=l(),$be=a("span"),Adr=o("TFAutoModel"),Cje=l(),Yo=a("div"),F(h8.$$.fragment),ydr=l(),Vd=a("p"),Ldr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pW=a("a"),xdr=o("from_pretrained()"),$dr=o(" class method or the "),_W=a("a"),kdr=o("from_config()"),Sdr=o(` class
method.`),Rdr=l(),p8=a("p"),Pdr=o("This class cannot be instantiated directly using "),kbe=a("code"),Bdr=o("__init__()"),Idr=o(" (throws an error)."),Ndr=l(),Lt=a("div"),F(_8.$$.fragment),qdr=l(),Sbe=a("p"),jdr=o("Instantiates one of the base model classes of the library from a configuration."),Ddr=l(),Xd=a("p"),Gdr=o(`Note:
Loading a model from its configuration file does `),Rbe=a("strong"),Odr=o("not"),Vdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),Xdr=o("from_pretrained()"),zdr=o(" to load the model weights."),Wdr=l(),F(sF.$$.fragment),Qdr=l(),wr=a("div"),F(u8.$$.fragment),Hdr=l(),Pbe=a("p"),Udr=o("Instantiate one of the base model classes of the library from a pretrained model."),Jdr=l(),Ka=a("p"),Ydr=o("The model class to instantiate is selected based on the "),Bbe=a("code"),Kdr=o("model_type"),Zdr=o(` property of the config object (either
passed as an argument or loaded from `),Ibe=a("code"),ecr=o("pretrained_model_name_or_path"),ocr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=a("code"),rcr=o("pretrained_model_name_or_path"),tcr=o(":"),acr=l(),q=a("ul"),lF=a("li"),qbe=a("strong"),ncr=o("albert"),scr=o(" \u2014 "),bW=a("a"),lcr=o("TFAlbertModel"),icr=o(" (ALBERT model)"),dcr=l(),iF=a("li"),jbe=a("strong"),ccr=o("bart"),fcr=o(" \u2014 "),vW=a("a"),mcr=o("TFBartModel"),gcr=o(" (BART model)"),hcr=l(),dF=a("li"),Dbe=a("strong"),pcr=o("bert"),_cr=o(" \u2014 "),FW=a("a"),ucr=o("TFBertModel"),bcr=o(" (BERT model)"),vcr=l(),cF=a("li"),Gbe=a("strong"),Fcr=o("blenderbot"),Tcr=o(" \u2014 "),TW=a("a"),Mcr=o("TFBlenderbotModel"),Ecr=o(" (Blenderbot model)"),Ccr=l(),fF=a("li"),Obe=a("strong"),wcr=o("blenderbot-small"),Acr=o(" \u2014 "),MW=a("a"),ycr=o("TFBlenderbotSmallModel"),Lcr=o(" (BlenderbotSmall model)"),xcr=l(),mF=a("li"),Vbe=a("strong"),$cr=o("camembert"),kcr=o(" \u2014 "),EW=a("a"),Scr=o("TFCamembertModel"),Rcr=o(" (CamemBERT model)"),Pcr=l(),gF=a("li"),Xbe=a("strong"),Bcr=o("clip"),Icr=o(" \u2014 "),CW=a("a"),Ncr=o("TFCLIPModel"),qcr=o(" (CLIP model)"),jcr=l(),hF=a("li"),zbe=a("strong"),Dcr=o("convbert"),Gcr=o(" \u2014 "),wW=a("a"),Ocr=o("TFConvBertModel"),Vcr=o(" (ConvBERT model)"),Xcr=l(),pF=a("li"),Wbe=a("strong"),zcr=o("convnext"),Wcr=o(" \u2014 "),AW=a("a"),Qcr=o("TFConvNextModel"),Hcr=o(" (ConvNext model)"),Ucr=l(),_F=a("li"),Qbe=a("strong"),Jcr=o("ctrl"),Ycr=o(" \u2014 "),yW=a("a"),Kcr=o("TFCTRLModel"),Zcr=o(" (CTRL model)"),efr=l(),uF=a("li"),Hbe=a("strong"),ofr=o("data2vec-vision"),rfr=o(" \u2014 "),LW=a("a"),tfr=o("TFData2VecVisionModel"),afr=o(" (Data2VecVision model)"),nfr=l(),bF=a("li"),Ube=a("strong"),sfr=o("deberta"),lfr=o(" \u2014 "),xW=a("a"),ifr=o("TFDebertaModel"),dfr=o(" (DeBERTa model)"),cfr=l(),vF=a("li"),Jbe=a("strong"),ffr=o("deberta-v2"),mfr=o(" \u2014 "),$W=a("a"),gfr=o("TFDebertaV2Model"),hfr=o(" (DeBERTa-v2 model)"),pfr=l(),FF=a("li"),Ybe=a("strong"),_fr=o("distilbert"),ufr=o(" \u2014 "),kW=a("a"),bfr=o("TFDistilBertModel"),vfr=o(" (DistilBERT model)"),Ffr=l(),TF=a("li"),Kbe=a("strong"),Tfr=o("dpr"),Mfr=o(" \u2014 "),SW=a("a"),Efr=o("TFDPRQuestionEncoder"),Cfr=o(" (DPR model)"),wfr=l(),MF=a("li"),Zbe=a("strong"),Afr=o("electra"),yfr=o(" \u2014 "),RW=a("a"),Lfr=o("TFElectraModel"),xfr=o(" (ELECTRA model)"),$fr=l(),EF=a("li"),e2e=a("strong"),kfr=o("flaubert"),Sfr=o(" \u2014 "),PW=a("a"),Rfr=o("TFFlaubertModel"),Pfr=o(" (FlauBERT model)"),Bfr=l(),Is=a("li"),o2e=a("strong"),Ifr=o("funnel"),Nfr=o(" \u2014 "),BW=a("a"),qfr=o("TFFunnelModel"),jfr=o(" or "),IW=a("a"),Dfr=o("TFFunnelBaseModel"),Gfr=o(" (Funnel Transformer model)"),Ofr=l(),CF=a("li"),r2e=a("strong"),Vfr=o("gpt2"),Xfr=o(" \u2014 "),NW=a("a"),zfr=o("TFGPT2Model"),Wfr=o(" (OpenAI GPT-2 model)"),Qfr=l(),wF=a("li"),t2e=a("strong"),Hfr=o("gptj"),Ufr=o(" \u2014 "),qW=a("a"),Jfr=o("TFGPTJModel"),Yfr=o(" (GPT-J model)"),Kfr=l(),AF=a("li"),a2e=a("strong"),Zfr=o("hubert"),emr=o(" \u2014 "),jW=a("a"),omr=o("TFHubertModel"),rmr=o(" (Hubert model)"),tmr=l(),yF=a("li"),n2e=a("strong"),amr=o("layoutlm"),nmr=o(" \u2014 "),DW=a("a"),smr=o("TFLayoutLMModel"),lmr=o(" (LayoutLM model)"),imr=l(),LF=a("li"),s2e=a("strong"),dmr=o("led"),cmr=o(" \u2014 "),GW=a("a"),fmr=o("TFLEDModel"),mmr=o(" (LED model)"),gmr=l(),xF=a("li"),l2e=a("strong"),hmr=o("longformer"),pmr=o(" \u2014 "),OW=a("a"),_mr=o("TFLongformerModel"),umr=o(" (Longformer model)"),bmr=l(),$F=a("li"),i2e=a("strong"),vmr=o("lxmert"),Fmr=o(" \u2014 "),VW=a("a"),Tmr=o("TFLxmertModel"),Mmr=o(" (LXMERT model)"),Emr=l(),kF=a("li"),d2e=a("strong"),Cmr=o("marian"),wmr=o(" \u2014 "),XW=a("a"),Amr=o("TFMarianModel"),ymr=o(" (Marian model)"),Lmr=l(),SF=a("li"),c2e=a("strong"),xmr=o("mbart"),$mr=o(" \u2014 "),zW=a("a"),kmr=o("TFMBartModel"),Smr=o(" (mBART model)"),Rmr=l(),RF=a("li"),f2e=a("strong"),Pmr=o("mobilebert"),Bmr=o(" \u2014 "),WW=a("a"),Imr=o("TFMobileBertModel"),Nmr=o(" (MobileBERT model)"),qmr=l(),PF=a("li"),m2e=a("strong"),jmr=o("mpnet"),Dmr=o(" \u2014 "),QW=a("a"),Gmr=o("TFMPNetModel"),Omr=o(" (MPNet model)"),Vmr=l(),BF=a("li"),g2e=a("strong"),Xmr=o("mt5"),zmr=o(" \u2014 "),HW=a("a"),Wmr=o("TFMT5Model"),Qmr=o(" (mT5 model)"),Hmr=l(),IF=a("li"),h2e=a("strong"),Umr=o("openai-gpt"),Jmr=o(" \u2014 "),UW=a("a"),Ymr=o("TFOpenAIGPTModel"),Kmr=o(" (OpenAI GPT model)"),Zmr=l(),NF=a("li"),p2e=a("strong"),egr=o("pegasus"),ogr=o(" \u2014 "),JW=a("a"),rgr=o("TFPegasusModel"),tgr=o(" (Pegasus model)"),agr=l(),qF=a("li"),_2e=a("strong"),ngr=o("rembert"),sgr=o(" \u2014 "),YW=a("a"),lgr=o("TFRemBertModel"),igr=o(" (RemBERT model)"),dgr=l(),jF=a("li"),u2e=a("strong"),cgr=o("roberta"),fgr=o(" \u2014 "),KW=a("a"),mgr=o("TFRobertaModel"),ggr=o(" (RoBERTa model)"),hgr=l(),DF=a("li"),b2e=a("strong"),pgr=o("roformer"),_gr=o(" \u2014 "),ZW=a("a"),ugr=o("TFRoFormerModel"),bgr=o(" (RoFormer model)"),vgr=l(),GF=a("li"),v2e=a("strong"),Fgr=o("speech_to_text"),Tgr=o(" \u2014 "),eQ=a("a"),Mgr=o("TFSpeech2TextModel"),Egr=o(" (Speech2Text model)"),Cgr=l(),OF=a("li"),F2e=a("strong"),wgr=o("swin"),Agr=o(" \u2014 "),oQ=a("a"),ygr=o("TFSwinModel"),Lgr=o(" (Swin model)"),xgr=l(),VF=a("li"),T2e=a("strong"),$gr=o("t5"),kgr=o(" \u2014 "),rQ=a("a"),Sgr=o("TFT5Model"),Rgr=o(" (T5 model)"),Pgr=l(),XF=a("li"),M2e=a("strong"),Bgr=o("tapas"),Igr=o(" \u2014 "),tQ=a("a"),Ngr=o("TFTapasModel"),qgr=o(" (TAPAS model)"),jgr=l(),zF=a("li"),E2e=a("strong"),Dgr=o("transfo-xl"),Ggr=o(" \u2014 "),aQ=a("a"),Ogr=o("TFTransfoXLModel"),Vgr=o(" (Transformer-XL model)"),Xgr=l(),WF=a("li"),C2e=a("strong"),zgr=o("vit"),Wgr=o(" \u2014 "),nQ=a("a"),Qgr=o("TFViTModel"),Hgr=o(" (ViT model)"),Ugr=l(),QF=a("li"),w2e=a("strong"),Jgr=o("vit_mae"),Ygr=o(" \u2014 "),sQ=a("a"),Kgr=o("TFViTMAEModel"),Zgr=o(" (ViTMAE model)"),ehr=l(),HF=a("li"),A2e=a("strong"),ohr=o("wav2vec2"),rhr=o(" \u2014 "),lQ=a("a"),thr=o("TFWav2Vec2Model"),ahr=o(" (Wav2Vec2 model)"),nhr=l(),UF=a("li"),y2e=a("strong"),shr=o("xlm"),lhr=o(" \u2014 "),iQ=a("a"),ihr=o("TFXLMModel"),dhr=o(" (XLM model)"),chr=l(),JF=a("li"),L2e=a("strong"),fhr=o("xlm-roberta"),mhr=o(" \u2014 "),dQ=a("a"),ghr=o("TFXLMRobertaModel"),hhr=o(" (XLM-RoBERTa model)"),phr=l(),YF=a("li"),x2e=a("strong"),_hr=o("xlnet"),uhr=o(" \u2014 "),cQ=a("a"),bhr=o("TFXLNetModel"),vhr=o(" (XLNet model)"),Fhr=l(),F(KF.$$.fragment),wje=l(),zd=a("h2"),ZF=a("a"),$2e=a("span"),F(b8.$$.fragment),Thr=l(),k2e=a("span"),Mhr=o("TFAutoModelForPreTraining"),Aje=l(),Ko=a("div"),F(v8.$$.fragment),Ehr=l(),Wd=a("p"),Chr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fQ=a("a"),whr=o("from_pretrained()"),Ahr=o(" class method or the "),mQ=a("a"),yhr=o("from_config()"),Lhr=o(` class
method.`),xhr=l(),F8=a("p"),$hr=o("This class cannot be instantiated directly using "),S2e=a("code"),khr=o("__init__()"),Shr=o(" (throws an error)."),Rhr=l(),xt=a("div"),F(T8.$$.fragment),Phr=l(),R2e=a("p"),Bhr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ihr=l(),Qd=a("p"),Nhr=o(`Note:
Loading a model from its configuration file does `),P2e=a("strong"),qhr=o("not"),jhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=a("a"),Dhr=o("from_pretrained()"),Ghr=o(" to load the model weights."),Ohr=l(),F(eT.$$.fragment),Vhr=l(),Ar=a("div"),F(M8.$$.fragment),Xhr=l(),B2e=a("p"),zhr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Whr=l(),Za=a("p"),Qhr=o("The model class to instantiate is selected based on the "),I2e=a("code"),Hhr=o("model_type"),Uhr=o(` property of the config object (either
passed as an argument or loaded from `),N2e=a("code"),Jhr=o("pretrained_model_name_or_path"),Yhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=a("code"),Khr=o("pretrained_model_name_or_path"),Zhr=o(":"),epr=l(),se=a("ul"),oT=a("li"),j2e=a("strong"),opr=o("albert"),rpr=o(" \u2014 "),hQ=a("a"),tpr=o("TFAlbertForPreTraining"),apr=o(" (ALBERT model)"),npr=l(),rT=a("li"),D2e=a("strong"),spr=o("bart"),lpr=o(" \u2014 "),pQ=a("a"),ipr=o("TFBartForConditionalGeneration"),dpr=o(" (BART model)"),cpr=l(),tT=a("li"),G2e=a("strong"),fpr=o("bert"),mpr=o(" \u2014 "),_Q=a("a"),gpr=o("TFBertForPreTraining"),hpr=o(" (BERT model)"),ppr=l(),aT=a("li"),O2e=a("strong"),_pr=o("camembert"),upr=o(" \u2014 "),uQ=a("a"),bpr=o("TFCamembertForMaskedLM"),vpr=o(" (CamemBERT model)"),Fpr=l(),nT=a("li"),V2e=a("strong"),Tpr=o("ctrl"),Mpr=o(" \u2014 "),bQ=a("a"),Epr=o("TFCTRLLMHeadModel"),Cpr=o(" (CTRL model)"),wpr=l(),sT=a("li"),X2e=a("strong"),Apr=o("distilbert"),ypr=o(" \u2014 "),vQ=a("a"),Lpr=o("TFDistilBertForMaskedLM"),xpr=o(" (DistilBERT model)"),$pr=l(),lT=a("li"),z2e=a("strong"),kpr=o("electra"),Spr=o(" \u2014 "),FQ=a("a"),Rpr=o("TFElectraForPreTraining"),Ppr=o(" (ELECTRA model)"),Bpr=l(),iT=a("li"),W2e=a("strong"),Ipr=o("flaubert"),Npr=o(" \u2014 "),TQ=a("a"),qpr=o("TFFlaubertWithLMHeadModel"),jpr=o(" (FlauBERT model)"),Dpr=l(),dT=a("li"),Q2e=a("strong"),Gpr=o("funnel"),Opr=o(" \u2014 "),MQ=a("a"),Vpr=o("TFFunnelForPreTraining"),Xpr=o(" (Funnel Transformer model)"),zpr=l(),cT=a("li"),H2e=a("strong"),Wpr=o("gpt2"),Qpr=o(" \u2014 "),EQ=a("a"),Hpr=o("TFGPT2LMHeadModel"),Upr=o(" (OpenAI GPT-2 model)"),Jpr=l(),fT=a("li"),U2e=a("strong"),Ypr=o("layoutlm"),Kpr=o(" \u2014 "),CQ=a("a"),Zpr=o("TFLayoutLMForMaskedLM"),e_r=o(" (LayoutLM model)"),o_r=l(),mT=a("li"),J2e=a("strong"),r_r=o("lxmert"),t_r=o(" \u2014 "),wQ=a("a"),a_r=o("TFLxmertForPreTraining"),n_r=o(" (LXMERT model)"),s_r=l(),gT=a("li"),Y2e=a("strong"),l_r=o("mobilebert"),i_r=o(" \u2014 "),AQ=a("a"),d_r=o("TFMobileBertForPreTraining"),c_r=o(" (MobileBERT model)"),f_r=l(),hT=a("li"),K2e=a("strong"),m_r=o("mpnet"),g_r=o(" \u2014 "),yQ=a("a"),h_r=o("TFMPNetForMaskedLM"),p_r=o(" (MPNet model)"),__r=l(),pT=a("li"),Z2e=a("strong"),u_r=o("openai-gpt"),b_r=o(" \u2014 "),LQ=a("a"),v_r=o("TFOpenAIGPTLMHeadModel"),F_r=o(" (OpenAI GPT model)"),T_r=l(),_T=a("li"),e4e=a("strong"),M_r=o("roberta"),E_r=o(" \u2014 "),xQ=a("a"),C_r=o("TFRobertaForMaskedLM"),w_r=o(" (RoBERTa model)"),A_r=l(),uT=a("li"),o4e=a("strong"),y_r=o("t5"),L_r=o(" \u2014 "),$Q=a("a"),x_r=o("TFT5ForConditionalGeneration"),$_r=o(" (T5 model)"),k_r=l(),bT=a("li"),r4e=a("strong"),S_r=o("tapas"),R_r=o(" \u2014 "),kQ=a("a"),P_r=o("TFTapasForMaskedLM"),B_r=o(" (TAPAS model)"),I_r=l(),vT=a("li"),t4e=a("strong"),N_r=o("transfo-xl"),q_r=o(" \u2014 "),SQ=a("a"),j_r=o("TFTransfoXLLMHeadModel"),D_r=o(" (Transformer-XL model)"),G_r=l(),FT=a("li"),a4e=a("strong"),O_r=o("vit_mae"),V_r=o(" \u2014 "),RQ=a("a"),X_r=o("TFViTMAEForPreTraining"),z_r=o(" (ViTMAE model)"),W_r=l(),TT=a("li"),n4e=a("strong"),Q_r=o("xlm"),H_r=o(" \u2014 "),PQ=a("a"),U_r=o("TFXLMWithLMHeadModel"),J_r=o(" (XLM model)"),Y_r=l(),MT=a("li"),s4e=a("strong"),K_r=o("xlm-roberta"),Z_r=o(" \u2014 "),BQ=a("a"),eur=o("TFXLMRobertaForMaskedLM"),our=o(" (XLM-RoBERTa model)"),rur=l(),ET=a("li"),l4e=a("strong"),tur=o("xlnet"),aur=o(" \u2014 "),IQ=a("a"),nur=o("TFXLNetLMHeadModel"),sur=o(" (XLNet model)"),lur=l(),F(CT.$$.fragment),yje=l(),Hd=a("h2"),wT=a("a"),i4e=a("span"),F(E8.$$.fragment),iur=l(),d4e=a("span"),dur=o("TFAutoModelForCausalLM"),Lje=l(),Zo=a("div"),F(C8.$$.fragment),cur=l(),Ud=a("p"),fur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),NQ=a("a"),mur=o("from_pretrained()"),gur=o(" class method or the "),qQ=a("a"),hur=o("from_config()"),pur=o(` class
method.`),_ur=l(),w8=a("p"),uur=o("This class cannot be instantiated directly using "),c4e=a("code"),bur=o("__init__()"),vur=o(" (throws an error)."),Fur=l(),$t=a("div"),F(A8.$$.fragment),Tur=l(),f4e=a("p"),Mur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Eur=l(),Jd=a("p"),Cur=o(`Note:
Loading a model from its configuration file does `),m4e=a("strong"),wur=o("not"),Aur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=a("a"),yur=o("from_pretrained()"),Lur=o(" to load the model weights."),xur=l(),F(AT.$$.fragment),$ur=l(),yr=a("div"),F(y8.$$.fragment),kur=l(),g4e=a("p"),Sur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Rur=l(),en=a("p"),Pur=o("The model class to instantiate is selected based on the "),h4e=a("code"),Bur=o("model_type"),Iur=o(` property of the config object (either
passed as an argument or loaded from `),p4e=a("code"),Nur=o("pretrained_model_name_or_path"),qur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_4e=a("code"),jur=o("pretrained_model_name_or_path"),Dur=o(":"),Gur=l(),Me=a("ul"),yT=a("li"),u4e=a("strong"),Our=o("bert"),Vur=o(" \u2014 "),DQ=a("a"),Xur=o("TFBertLMHeadModel"),zur=o(" (BERT model)"),Wur=l(),LT=a("li"),b4e=a("strong"),Qur=o("camembert"),Hur=o(" \u2014 "),GQ=a("a"),Uur=o("TFCamembertForCausalLM"),Jur=o(" (CamemBERT model)"),Yur=l(),xT=a("li"),v4e=a("strong"),Kur=o("ctrl"),Zur=o(" \u2014 "),OQ=a("a"),e1r=o("TFCTRLLMHeadModel"),o1r=o(" (CTRL model)"),r1r=l(),$T=a("li"),F4e=a("strong"),t1r=o("gpt2"),a1r=o(" \u2014 "),VQ=a("a"),n1r=o("TFGPT2LMHeadModel"),s1r=o(" (OpenAI GPT-2 model)"),l1r=l(),kT=a("li"),T4e=a("strong"),i1r=o("gptj"),d1r=o(" \u2014 "),XQ=a("a"),c1r=o("TFGPTJForCausalLM"),f1r=o(" (GPT-J model)"),m1r=l(),ST=a("li"),M4e=a("strong"),g1r=o("openai-gpt"),h1r=o(" \u2014 "),zQ=a("a"),p1r=o("TFOpenAIGPTLMHeadModel"),_1r=o(" (OpenAI GPT model)"),u1r=l(),RT=a("li"),E4e=a("strong"),b1r=o("rembert"),v1r=o(" \u2014 "),WQ=a("a"),F1r=o("TFRemBertForCausalLM"),T1r=o(" (RemBERT model)"),M1r=l(),PT=a("li"),C4e=a("strong"),E1r=o("roberta"),C1r=o(" \u2014 "),QQ=a("a"),w1r=o("TFRobertaForCausalLM"),A1r=o(" (RoBERTa model)"),y1r=l(),BT=a("li"),w4e=a("strong"),L1r=o("roformer"),x1r=o(" \u2014 "),HQ=a("a"),$1r=o("TFRoFormerForCausalLM"),k1r=o(" (RoFormer model)"),S1r=l(),IT=a("li"),A4e=a("strong"),R1r=o("transfo-xl"),P1r=o(" \u2014 "),UQ=a("a"),B1r=o("TFTransfoXLLMHeadModel"),I1r=o(" (Transformer-XL model)"),N1r=l(),NT=a("li"),y4e=a("strong"),q1r=o("xlm"),j1r=o(" \u2014 "),JQ=a("a"),D1r=o("TFXLMWithLMHeadModel"),G1r=o(" (XLM model)"),O1r=l(),qT=a("li"),L4e=a("strong"),V1r=o("xlnet"),X1r=o(" \u2014 "),YQ=a("a"),z1r=o("TFXLNetLMHeadModel"),W1r=o(" (XLNet model)"),Q1r=l(),F(jT.$$.fragment),xje=l(),Yd=a("h2"),DT=a("a"),x4e=a("span"),F(L8.$$.fragment),H1r=l(),$4e=a("span"),U1r=o("TFAutoModelForImageClassification"),$je=l(),er=a("div"),F(x8.$$.fragment),J1r=l(),Kd=a("p"),Y1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KQ=a("a"),K1r=o("from_pretrained()"),Z1r=o(" class method or the "),ZQ=a("a"),ebr=o("from_config()"),obr=o(` class
method.`),rbr=l(),$8=a("p"),tbr=o("This class cannot be instantiated directly using "),k4e=a("code"),abr=o("__init__()"),nbr=o(" (throws an error)."),sbr=l(),kt=a("div"),F(k8.$$.fragment),lbr=l(),S4e=a("p"),ibr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dbr=l(),Zd=a("p"),cbr=o(`Note:
Loading a model from its configuration file does `),R4e=a("strong"),fbr=o("not"),mbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),gbr=o("from_pretrained()"),hbr=o(" to load the model weights."),pbr=l(),F(GT.$$.fragment),_br=l(),Lr=a("div"),F(S8.$$.fragment),ubr=l(),P4e=a("p"),bbr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vbr=l(),on=a("p"),Fbr=o("The model class to instantiate is selected based on the "),B4e=a("code"),Tbr=o("model_type"),Mbr=o(` property of the config object (either
passed as an argument or loaded from `),I4e=a("code"),Ebr=o("pretrained_model_name_or_path"),Cbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N4e=a("code"),wbr=o("pretrained_model_name_or_path"),Abr=o(":"),ybr=l(),rn=a("ul"),OT=a("li"),q4e=a("strong"),Lbr=o("convnext"),xbr=o(" \u2014 "),oH=a("a"),$br=o("TFConvNextForImageClassification"),kbr=o(" (ConvNext model)"),Sbr=l(),VT=a("li"),j4e=a("strong"),Rbr=o("data2vec-vision"),Pbr=o(" \u2014 "),rH=a("a"),Bbr=o("TFData2VecVisionForImageClassification"),Ibr=o(" (Data2VecVision model)"),Nbr=l(),XT=a("li"),D4e=a("strong"),qbr=o("swin"),jbr=o(" \u2014 "),tH=a("a"),Dbr=o("TFSwinForImageClassification"),Gbr=o(" (Swin model)"),Obr=l(),zT=a("li"),G4e=a("strong"),Vbr=o("vit"),Xbr=o(" \u2014 "),aH=a("a"),zbr=o("TFViTForImageClassification"),Wbr=o(" (ViT model)"),Qbr=l(),F(WT.$$.fragment),kje=l(),ec=a("h2"),QT=a("a"),O4e=a("span"),F(R8.$$.fragment),Hbr=l(),V4e=a("span"),Ubr=o("TFAutoModelForMaskedLM"),Sje=l(),or=a("div"),F(P8.$$.fragment),Jbr=l(),oc=a("p"),Ybr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nH=a("a"),Kbr=o("from_pretrained()"),Zbr=o(" class method or the "),sH=a("a"),e2r=o("from_config()"),o2r=o(` class
method.`),r2r=l(),B8=a("p"),t2r=o("This class cannot be instantiated directly using "),X4e=a("code"),a2r=o("__init__()"),n2r=o(" (throws an error)."),s2r=l(),St=a("div"),F(I8.$$.fragment),l2r=l(),z4e=a("p"),i2r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),d2r=l(),rc=a("p"),c2r=o(`Note:
Loading a model from its configuration file does `),W4e=a("strong"),f2r=o("not"),m2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),g2r=o("from_pretrained()"),h2r=o(" to load the model weights."),p2r=l(),F(HT.$$.fragment),_2r=l(),xr=a("div"),F(N8.$$.fragment),u2r=l(),Q4e=a("p"),b2r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),v2r=l(),tn=a("p"),F2r=o("The model class to instantiate is selected based on the "),H4e=a("code"),T2r=o("model_type"),M2r=o(` property of the config object (either
passed as an argument or loaded from `),U4e=a("code"),E2r=o("pretrained_model_name_or_path"),C2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=a("code"),w2r=o("pretrained_model_name_or_path"),A2r=o(":"),y2r=l(),ie=a("ul"),UT=a("li"),Y4e=a("strong"),L2r=o("albert"),x2r=o(" \u2014 "),iH=a("a"),$2r=o("TFAlbertForMaskedLM"),k2r=o(" (ALBERT model)"),S2r=l(),JT=a("li"),K4e=a("strong"),R2r=o("bert"),P2r=o(" \u2014 "),dH=a("a"),B2r=o("TFBertForMaskedLM"),I2r=o(" (BERT model)"),N2r=l(),YT=a("li"),Z4e=a("strong"),q2r=o("camembert"),j2r=o(" \u2014 "),cH=a("a"),D2r=o("TFCamembertForMaskedLM"),G2r=o(" (CamemBERT model)"),O2r=l(),KT=a("li"),eve=a("strong"),V2r=o("convbert"),X2r=o(" \u2014 "),fH=a("a"),z2r=o("TFConvBertForMaskedLM"),W2r=o(" (ConvBERT model)"),Q2r=l(),ZT=a("li"),ove=a("strong"),H2r=o("deberta"),U2r=o(" \u2014 "),mH=a("a"),J2r=o("TFDebertaForMaskedLM"),Y2r=o(" (DeBERTa model)"),K2r=l(),e7=a("li"),rve=a("strong"),Z2r=o("deberta-v2"),e4r=o(" \u2014 "),gH=a("a"),o4r=o("TFDebertaV2ForMaskedLM"),r4r=o(" (DeBERTa-v2 model)"),t4r=l(),o7=a("li"),tve=a("strong"),a4r=o("distilbert"),n4r=o(" \u2014 "),hH=a("a"),s4r=o("TFDistilBertForMaskedLM"),l4r=o(" (DistilBERT model)"),i4r=l(),r7=a("li"),ave=a("strong"),d4r=o("electra"),c4r=o(" \u2014 "),pH=a("a"),f4r=o("TFElectraForMaskedLM"),m4r=o(" (ELECTRA model)"),g4r=l(),t7=a("li"),nve=a("strong"),h4r=o("flaubert"),p4r=o(" \u2014 "),_H=a("a"),_4r=o("TFFlaubertWithLMHeadModel"),u4r=o(" (FlauBERT model)"),b4r=l(),a7=a("li"),sve=a("strong"),v4r=o("funnel"),F4r=o(" \u2014 "),uH=a("a"),T4r=o("TFFunnelForMaskedLM"),M4r=o(" (Funnel Transformer model)"),E4r=l(),n7=a("li"),lve=a("strong"),C4r=o("layoutlm"),w4r=o(" \u2014 "),bH=a("a"),A4r=o("TFLayoutLMForMaskedLM"),y4r=o(" (LayoutLM model)"),L4r=l(),s7=a("li"),ive=a("strong"),x4r=o("longformer"),$4r=o(" \u2014 "),vH=a("a"),k4r=o("TFLongformerForMaskedLM"),S4r=o(" (Longformer model)"),R4r=l(),l7=a("li"),dve=a("strong"),P4r=o("mobilebert"),B4r=o(" \u2014 "),FH=a("a"),I4r=o("TFMobileBertForMaskedLM"),N4r=o(" (MobileBERT model)"),q4r=l(),i7=a("li"),cve=a("strong"),j4r=o("mpnet"),D4r=o(" \u2014 "),TH=a("a"),G4r=o("TFMPNetForMaskedLM"),O4r=o(" (MPNet model)"),V4r=l(),d7=a("li"),fve=a("strong"),X4r=o("rembert"),z4r=o(" \u2014 "),MH=a("a"),W4r=o("TFRemBertForMaskedLM"),Q4r=o(" (RemBERT model)"),H4r=l(),c7=a("li"),mve=a("strong"),U4r=o("roberta"),J4r=o(" \u2014 "),EH=a("a"),Y4r=o("TFRobertaForMaskedLM"),K4r=o(" (RoBERTa model)"),Z4r=l(),f7=a("li"),gve=a("strong"),evr=o("roformer"),ovr=o(" \u2014 "),CH=a("a"),rvr=o("TFRoFormerForMaskedLM"),tvr=o(" (RoFormer model)"),avr=l(),m7=a("li"),hve=a("strong"),nvr=o("tapas"),svr=o(" \u2014 "),wH=a("a"),lvr=o("TFTapasForMaskedLM"),ivr=o(" (TAPAS model)"),dvr=l(),g7=a("li"),pve=a("strong"),cvr=o("xlm"),fvr=o(" \u2014 "),AH=a("a"),mvr=o("TFXLMWithLMHeadModel"),gvr=o(" (XLM model)"),hvr=l(),h7=a("li"),_ve=a("strong"),pvr=o("xlm-roberta"),_vr=o(" \u2014 "),yH=a("a"),uvr=o("TFXLMRobertaForMaskedLM"),bvr=o(" (XLM-RoBERTa model)"),vvr=l(),F(p7.$$.fragment),Rje=l(),tc=a("h2"),_7=a("a"),uve=a("span"),F(q8.$$.fragment),Fvr=l(),bve=a("span"),Tvr=o("TFAutoModelForSeq2SeqLM"),Pje=l(),rr=a("div"),F(j8.$$.fragment),Mvr=l(),ac=a("p"),Evr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LH=a("a"),Cvr=o("from_pretrained()"),wvr=o(" class method or the "),xH=a("a"),Avr=o("from_config()"),yvr=o(` class
method.`),Lvr=l(),D8=a("p"),xvr=o("This class cannot be instantiated directly using "),vve=a("code"),$vr=o("__init__()"),kvr=o(" (throws an error)."),Svr=l(),Rt=a("div"),F(G8.$$.fragment),Rvr=l(),Fve=a("p"),Pvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Bvr=l(),nc=a("p"),Ivr=o(`Note:
Loading a model from its configuration file does `),Tve=a("strong"),Nvr=o("not"),qvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),jvr=o("from_pretrained()"),Dvr=o(" to load the model weights."),Gvr=l(),F(u7.$$.fragment),Ovr=l(),$r=a("div"),F(O8.$$.fragment),Vvr=l(),Mve=a("p"),Xvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zvr=l(),an=a("p"),Wvr=o("The model class to instantiate is selected based on the "),Eve=a("code"),Qvr=o("model_type"),Hvr=o(` property of the config object (either
passed as an argument or loaded from `),Cve=a("code"),Uvr=o("pretrained_model_name_or_path"),Jvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=a("code"),Yvr=o("pretrained_model_name_or_path"),Kvr=o(":"),Zvr=l(),ye=a("ul"),b7=a("li"),Ave=a("strong"),e5r=o("bart"),o5r=o(" \u2014 "),kH=a("a"),r5r=o("TFBartForConditionalGeneration"),t5r=o(" (BART model)"),a5r=l(),v7=a("li"),yve=a("strong"),n5r=o("blenderbot"),s5r=o(" \u2014 "),SH=a("a"),l5r=o("TFBlenderbotForConditionalGeneration"),i5r=o(" (Blenderbot model)"),d5r=l(),F7=a("li"),Lve=a("strong"),c5r=o("blenderbot-small"),f5r=o(" \u2014 "),RH=a("a"),m5r=o("TFBlenderbotSmallForConditionalGeneration"),g5r=o(" (BlenderbotSmall model)"),h5r=l(),T7=a("li"),xve=a("strong"),p5r=o("encoder-decoder"),_5r=o(" \u2014 "),PH=a("a"),u5r=o("TFEncoderDecoderModel"),b5r=o(" (Encoder decoder model)"),v5r=l(),M7=a("li"),$ve=a("strong"),F5r=o("led"),T5r=o(" \u2014 "),BH=a("a"),M5r=o("TFLEDForConditionalGeneration"),E5r=o(" (LED model)"),C5r=l(),E7=a("li"),kve=a("strong"),w5r=o("marian"),A5r=o(" \u2014 "),IH=a("a"),y5r=o("TFMarianMTModel"),L5r=o(" (Marian model)"),x5r=l(),C7=a("li"),Sve=a("strong"),$5r=o("mbart"),k5r=o(" \u2014 "),NH=a("a"),S5r=o("TFMBartForConditionalGeneration"),R5r=o(" (mBART model)"),P5r=l(),w7=a("li"),Rve=a("strong"),B5r=o("mt5"),I5r=o(" \u2014 "),qH=a("a"),N5r=o("TFMT5ForConditionalGeneration"),q5r=o(" (mT5 model)"),j5r=l(),A7=a("li"),Pve=a("strong"),D5r=o("pegasus"),G5r=o(" \u2014 "),jH=a("a"),O5r=o("TFPegasusForConditionalGeneration"),V5r=o(" (Pegasus model)"),X5r=l(),y7=a("li"),Bve=a("strong"),z5r=o("t5"),W5r=o(" \u2014 "),DH=a("a"),Q5r=o("TFT5ForConditionalGeneration"),H5r=o(" (T5 model)"),U5r=l(),F(L7.$$.fragment),Bje=l(),sc=a("h2"),x7=a("a"),Ive=a("span"),F(V8.$$.fragment),J5r=l(),Nve=a("span"),Y5r=o("TFAutoModelForSequenceClassification"),Ije=l(),tr=a("div"),F(X8.$$.fragment),K5r=l(),lc=a("p"),Z5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GH=a("a"),e3r=o("from_pretrained()"),o3r=o(" class method or the "),OH=a("a"),r3r=o("from_config()"),t3r=o(` class
method.`),a3r=l(),z8=a("p"),n3r=o("This class cannot be instantiated directly using "),qve=a("code"),s3r=o("__init__()"),l3r=o(" (throws an error)."),i3r=l(),Pt=a("div"),F(W8.$$.fragment),d3r=l(),jve=a("p"),c3r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),f3r=l(),ic=a("p"),m3r=o(`Note:
Loading a model from its configuration file does `),Dve=a("strong"),g3r=o("not"),h3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=a("a"),p3r=o("from_pretrained()"),_3r=o(" to load the model weights."),u3r=l(),F($7.$$.fragment),b3r=l(),kr=a("div"),F(Q8.$$.fragment),v3r=l(),Gve=a("p"),F3r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),T3r=l(),nn=a("p"),M3r=o("The model class to instantiate is selected based on the "),Ove=a("code"),E3r=o("model_type"),C3r=o(` property of the config object (either
passed as an argument or loaded from `),Vve=a("code"),w3r=o("pretrained_model_name_or_path"),A3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=a("code"),y3r=o("pretrained_model_name_or_path"),L3r=o(":"),x3r=l(),oe=a("ul"),k7=a("li"),zve=a("strong"),$3r=o("albert"),k3r=o(" \u2014 "),XH=a("a"),S3r=o("TFAlbertForSequenceClassification"),R3r=o(" (ALBERT model)"),P3r=l(),S7=a("li"),Wve=a("strong"),B3r=o("bert"),I3r=o(" \u2014 "),zH=a("a"),N3r=o("TFBertForSequenceClassification"),q3r=o(" (BERT model)"),j3r=l(),R7=a("li"),Qve=a("strong"),D3r=o("camembert"),G3r=o(" \u2014 "),WH=a("a"),O3r=o("TFCamembertForSequenceClassification"),V3r=o(" (CamemBERT model)"),X3r=l(),P7=a("li"),Hve=a("strong"),z3r=o("convbert"),W3r=o(" \u2014 "),QH=a("a"),Q3r=o("TFConvBertForSequenceClassification"),H3r=o(" (ConvBERT model)"),U3r=l(),B7=a("li"),Uve=a("strong"),J3r=o("ctrl"),Y3r=o(" \u2014 "),HH=a("a"),K3r=o("TFCTRLForSequenceClassification"),Z3r=o(" (CTRL model)"),eFr=l(),I7=a("li"),Jve=a("strong"),oFr=o("deberta"),rFr=o(" \u2014 "),UH=a("a"),tFr=o("TFDebertaForSequenceClassification"),aFr=o(" (DeBERTa model)"),nFr=l(),N7=a("li"),Yve=a("strong"),sFr=o("deberta-v2"),lFr=o(" \u2014 "),JH=a("a"),iFr=o("TFDebertaV2ForSequenceClassification"),dFr=o(" (DeBERTa-v2 model)"),cFr=l(),q7=a("li"),Kve=a("strong"),fFr=o("distilbert"),mFr=o(" \u2014 "),YH=a("a"),gFr=o("TFDistilBertForSequenceClassification"),hFr=o(" (DistilBERT model)"),pFr=l(),j7=a("li"),Zve=a("strong"),_Fr=o("electra"),uFr=o(" \u2014 "),KH=a("a"),bFr=o("TFElectraForSequenceClassification"),vFr=o(" (ELECTRA model)"),FFr=l(),D7=a("li"),e5e=a("strong"),TFr=o("flaubert"),MFr=o(" \u2014 "),ZH=a("a"),EFr=o("TFFlaubertForSequenceClassification"),CFr=o(" (FlauBERT model)"),wFr=l(),G7=a("li"),o5e=a("strong"),AFr=o("funnel"),yFr=o(" \u2014 "),eU=a("a"),LFr=o("TFFunnelForSequenceClassification"),xFr=o(" (Funnel Transformer model)"),$Fr=l(),O7=a("li"),r5e=a("strong"),kFr=o("gpt2"),SFr=o(" \u2014 "),oU=a("a"),RFr=o("TFGPT2ForSequenceClassification"),PFr=o(" (OpenAI GPT-2 model)"),BFr=l(),V7=a("li"),t5e=a("strong"),IFr=o("gptj"),NFr=o(" \u2014 "),rU=a("a"),qFr=o("TFGPTJForSequenceClassification"),jFr=o(" (GPT-J model)"),DFr=l(),X7=a("li"),a5e=a("strong"),GFr=o("layoutlm"),OFr=o(" \u2014 "),tU=a("a"),VFr=o("TFLayoutLMForSequenceClassification"),XFr=o(" (LayoutLM model)"),zFr=l(),z7=a("li"),n5e=a("strong"),WFr=o("longformer"),QFr=o(" \u2014 "),aU=a("a"),HFr=o("TFLongformerForSequenceClassification"),UFr=o(" (Longformer model)"),JFr=l(),W7=a("li"),s5e=a("strong"),YFr=o("mobilebert"),KFr=o(" \u2014 "),nU=a("a"),ZFr=o("TFMobileBertForSequenceClassification"),eTr=o(" (MobileBERT model)"),oTr=l(),Q7=a("li"),l5e=a("strong"),rTr=o("mpnet"),tTr=o(" \u2014 "),sU=a("a"),aTr=o("TFMPNetForSequenceClassification"),nTr=o(" (MPNet model)"),sTr=l(),H7=a("li"),i5e=a("strong"),lTr=o("openai-gpt"),iTr=o(" \u2014 "),lU=a("a"),dTr=o("TFOpenAIGPTForSequenceClassification"),cTr=o(" (OpenAI GPT model)"),fTr=l(),U7=a("li"),d5e=a("strong"),mTr=o("rembert"),gTr=o(" \u2014 "),iU=a("a"),hTr=o("TFRemBertForSequenceClassification"),pTr=o(" (RemBERT model)"),_Tr=l(),J7=a("li"),c5e=a("strong"),uTr=o("roberta"),bTr=o(" \u2014 "),dU=a("a"),vTr=o("TFRobertaForSequenceClassification"),FTr=o(" (RoBERTa model)"),TTr=l(),Y7=a("li"),f5e=a("strong"),MTr=o("roformer"),ETr=o(" \u2014 "),cU=a("a"),CTr=o("TFRoFormerForSequenceClassification"),wTr=o(" (RoFormer model)"),ATr=l(),K7=a("li"),m5e=a("strong"),yTr=o("tapas"),LTr=o(" \u2014 "),fU=a("a"),xTr=o("TFTapasForSequenceClassification"),$Tr=o(" (TAPAS model)"),kTr=l(),Z7=a("li"),g5e=a("strong"),STr=o("transfo-xl"),RTr=o(" \u2014 "),mU=a("a"),PTr=o("TFTransfoXLForSequenceClassification"),BTr=o(" (Transformer-XL model)"),ITr=l(),eM=a("li"),h5e=a("strong"),NTr=o("xlm"),qTr=o(" \u2014 "),gU=a("a"),jTr=o("TFXLMForSequenceClassification"),DTr=o(" (XLM model)"),GTr=l(),oM=a("li"),p5e=a("strong"),OTr=o("xlm-roberta"),VTr=o(" \u2014 "),hU=a("a"),XTr=o("TFXLMRobertaForSequenceClassification"),zTr=o(" (XLM-RoBERTa model)"),WTr=l(),rM=a("li"),_5e=a("strong"),QTr=o("xlnet"),HTr=o(" \u2014 "),pU=a("a"),UTr=o("TFXLNetForSequenceClassification"),JTr=o(" (XLNet model)"),YTr=l(),F(tM.$$.fragment),Nje=l(),dc=a("h2"),aM=a("a"),u5e=a("span"),F(H8.$$.fragment),KTr=l(),b5e=a("span"),ZTr=o("TFAutoModelForMultipleChoice"),qje=l(),ar=a("div"),F(U8.$$.fragment),e7r=l(),cc=a("p"),o7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_U=a("a"),r7r=o("from_pretrained()"),t7r=o(" class method or the "),uU=a("a"),a7r=o("from_config()"),n7r=o(` class
method.`),s7r=l(),J8=a("p"),l7r=o("This class cannot be instantiated directly using "),v5e=a("code"),i7r=o("__init__()"),d7r=o(" (throws an error)."),c7r=l(),Bt=a("div"),F(Y8.$$.fragment),f7r=l(),F5e=a("p"),m7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),g7r=l(),fc=a("p"),h7r=o(`Note:
Loading a model from its configuration file does `),T5e=a("strong"),p7r=o("not"),_7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=a("a"),u7r=o("from_pretrained()"),b7r=o(" to load the model weights."),v7r=l(),F(nM.$$.fragment),F7r=l(),Sr=a("div"),F(K8.$$.fragment),T7r=l(),M5e=a("p"),M7r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),E7r=l(),sn=a("p"),C7r=o("The model class to instantiate is selected based on the "),E5e=a("code"),w7r=o("model_type"),A7r=o(` property of the config object (either
passed as an argument or loaded from `),C5e=a("code"),y7r=o("pretrained_model_name_or_path"),L7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=a("code"),x7r=o("pretrained_model_name_or_path"),$7r=o(":"),k7r=l(),pe=a("ul"),sM=a("li"),A5e=a("strong"),S7r=o("albert"),R7r=o(" \u2014 "),vU=a("a"),P7r=o("TFAlbertForMultipleChoice"),B7r=o(" (ALBERT model)"),I7r=l(),lM=a("li"),y5e=a("strong"),N7r=o("bert"),q7r=o(" \u2014 "),FU=a("a"),j7r=o("TFBertForMultipleChoice"),D7r=o(" (BERT model)"),G7r=l(),iM=a("li"),L5e=a("strong"),O7r=o("camembert"),V7r=o(" \u2014 "),TU=a("a"),X7r=o("TFCamembertForMultipleChoice"),z7r=o(" (CamemBERT model)"),W7r=l(),dM=a("li"),x5e=a("strong"),Q7r=o("convbert"),H7r=o(" \u2014 "),MU=a("a"),U7r=o("TFConvBertForMultipleChoice"),J7r=o(" (ConvBERT model)"),Y7r=l(),cM=a("li"),$5e=a("strong"),K7r=o("distilbert"),Z7r=o(" \u2014 "),EU=a("a"),eMr=o("TFDistilBertForMultipleChoice"),oMr=o(" (DistilBERT model)"),rMr=l(),fM=a("li"),k5e=a("strong"),tMr=o("electra"),aMr=o(" \u2014 "),CU=a("a"),nMr=o("TFElectraForMultipleChoice"),sMr=o(" (ELECTRA model)"),lMr=l(),mM=a("li"),S5e=a("strong"),iMr=o("flaubert"),dMr=o(" \u2014 "),wU=a("a"),cMr=o("TFFlaubertForMultipleChoice"),fMr=o(" (FlauBERT model)"),mMr=l(),gM=a("li"),R5e=a("strong"),gMr=o("funnel"),hMr=o(" \u2014 "),AU=a("a"),pMr=o("TFFunnelForMultipleChoice"),_Mr=o(" (Funnel Transformer model)"),uMr=l(),hM=a("li"),P5e=a("strong"),bMr=o("longformer"),vMr=o(" \u2014 "),yU=a("a"),FMr=o("TFLongformerForMultipleChoice"),TMr=o(" (Longformer model)"),MMr=l(),pM=a("li"),B5e=a("strong"),EMr=o("mobilebert"),CMr=o(" \u2014 "),LU=a("a"),wMr=o("TFMobileBertForMultipleChoice"),AMr=o(" (MobileBERT model)"),yMr=l(),_M=a("li"),I5e=a("strong"),LMr=o("mpnet"),xMr=o(" \u2014 "),xU=a("a"),$Mr=o("TFMPNetForMultipleChoice"),kMr=o(" (MPNet model)"),SMr=l(),uM=a("li"),N5e=a("strong"),RMr=o("rembert"),PMr=o(" \u2014 "),$U=a("a"),BMr=o("TFRemBertForMultipleChoice"),IMr=o(" (RemBERT model)"),NMr=l(),bM=a("li"),q5e=a("strong"),qMr=o("roberta"),jMr=o(" \u2014 "),kU=a("a"),DMr=o("TFRobertaForMultipleChoice"),GMr=o(" (RoBERTa model)"),OMr=l(),vM=a("li"),j5e=a("strong"),VMr=o("roformer"),XMr=o(" \u2014 "),SU=a("a"),zMr=o("TFRoFormerForMultipleChoice"),WMr=o(" (RoFormer model)"),QMr=l(),FM=a("li"),D5e=a("strong"),HMr=o("xlm"),UMr=o(" \u2014 "),RU=a("a"),JMr=o("TFXLMForMultipleChoice"),YMr=o(" (XLM model)"),KMr=l(),TM=a("li"),G5e=a("strong"),ZMr=o("xlm-roberta"),eEr=o(" \u2014 "),PU=a("a"),oEr=o("TFXLMRobertaForMultipleChoice"),rEr=o(" (XLM-RoBERTa model)"),tEr=l(),MM=a("li"),O5e=a("strong"),aEr=o("xlnet"),nEr=o(" \u2014 "),BU=a("a"),sEr=o("TFXLNetForMultipleChoice"),lEr=o(" (XLNet model)"),iEr=l(),F(EM.$$.fragment),jje=l(),mc=a("h2"),CM=a("a"),V5e=a("span"),F(Z8.$$.fragment),dEr=l(),X5e=a("span"),cEr=o("TFAutoModelForNextSentencePrediction"),Dje=l(),nr=a("div"),F(e9.$$.fragment),fEr=l(),gc=a("p"),mEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IU=a("a"),gEr=o("from_pretrained()"),hEr=o(" class method or the "),NU=a("a"),pEr=o("from_config()"),_Er=o(` class
method.`),uEr=l(),o9=a("p"),bEr=o("This class cannot be instantiated directly using "),z5e=a("code"),vEr=o("__init__()"),FEr=o(" (throws an error)."),TEr=l(),It=a("div"),F(r9.$$.fragment),MEr=l(),W5e=a("p"),EEr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CEr=l(),hc=a("p"),wEr=o(`Note:
Loading a model from its configuration file does `),Q5e=a("strong"),AEr=o("not"),yEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=a("a"),LEr=o("from_pretrained()"),xEr=o(" to load the model weights."),$Er=l(),F(wM.$$.fragment),kEr=l(),Rr=a("div"),F(t9.$$.fragment),SEr=l(),H5e=a("p"),REr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),PEr=l(),ln=a("p"),BEr=o("The model class to instantiate is selected based on the "),U5e=a("code"),IEr=o("model_type"),NEr=o(` property of the config object (either
passed as an argument or loaded from `),J5e=a("code"),qEr=o("pretrained_model_name_or_path"),jEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=a("code"),DEr=o("pretrained_model_name_or_path"),GEr=o(":"),OEr=l(),a9=a("ul"),AM=a("li"),K5e=a("strong"),VEr=o("bert"),XEr=o(" \u2014 "),jU=a("a"),zEr=o("TFBertForNextSentencePrediction"),WEr=o(" (BERT model)"),QEr=l(),yM=a("li"),Z5e=a("strong"),HEr=o("mobilebert"),UEr=o(" \u2014 "),DU=a("a"),JEr=o("TFMobileBertForNextSentencePrediction"),YEr=o(" (MobileBERT model)"),KEr=l(),F(LM.$$.fragment),Gje=l(),pc=a("h2"),xM=a("a"),e3e=a("span"),F(n9.$$.fragment),ZEr=l(),o3e=a("span"),eCr=o("TFAutoModelForTableQuestionAnswering"),Oje=l(),sr=a("div"),F(s9.$$.fragment),oCr=l(),_c=a("p"),rCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),GU=a("a"),tCr=o("from_pretrained()"),aCr=o(" class method or the "),OU=a("a"),nCr=o("from_config()"),sCr=o(` class
method.`),lCr=l(),l9=a("p"),iCr=o("This class cannot be instantiated directly using "),r3e=a("code"),dCr=o("__init__()"),cCr=o(" (throws an error)."),fCr=l(),Nt=a("div"),F(i9.$$.fragment),mCr=l(),t3e=a("p"),gCr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hCr=l(),uc=a("p"),pCr=o(`Note:
Loading a model from its configuration file does `),a3e=a("strong"),_Cr=o("not"),uCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=a("a"),bCr=o("from_pretrained()"),vCr=o(" to load the model weights."),FCr=l(),F($M.$$.fragment),TCr=l(),Pr=a("div"),F(d9.$$.fragment),MCr=l(),n3e=a("p"),ECr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),CCr=l(),dn=a("p"),wCr=o("The model class to instantiate is selected based on the "),s3e=a("code"),ACr=o("model_type"),yCr=o(` property of the config object (either
passed as an argument or loaded from `),l3e=a("code"),LCr=o("pretrained_model_name_or_path"),xCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=a("code"),$Cr=o("pretrained_model_name_or_path"),kCr=o(":"),SCr=l(),d3e=a("ul"),kM=a("li"),c3e=a("strong"),RCr=o("tapas"),PCr=o(" \u2014 "),XU=a("a"),BCr=o("TFTapasForQuestionAnswering"),ICr=o(" (TAPAS model)"),NCr=l(),F(SM.$$.fragment),Vje=l(),bc=a("h2"),RM=a("a"),f3e=a("span"),F(c9.$$.fragment),qCr=l(),m3e=a("span"),jCr=o("TFAutoModelForTokenClassification"),Xje=l(),lr=a("div"),F(f9.$$.fragment),DCr=l(),vc=a("p"),GCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zU=a("a"),OCr=o("from_pretrained()"),VCr=o(" class method or the "),WU=a("a"),XCr=o("from_config()"),zCr=o(` class
method.`),WCr=l(),m9=a("p"),QCr=o("This class cannot be instantiated directly using "),g3e=a("code"),HCr=o("__init__()"),UCr=o(" (throws an error)."),JCr=l(),qt=a("div"),F(g9.$$.fragment),YCr=l(),h3e=a("p"),KCr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ZCr=l(),Fc=a("p"),ewr=o(`Note:
Loading a model from its configuration file does `),p3e=a("strong"),owr=o("not"),rwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),twr=o("from_pretrained()"),awr=o(" to load the model weights."),nwr=l(),F(PM.$$.fragment),swr=l(),Br=a("div"),F(h9.$$.fragment),lwr=l(),_3e=a("p"),iwr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dwr=l(),cn=a("p"),cwr=o("The model class to instantiate is selected based on the "),u3e=a("code"),fwr=o("model_type"),mwr=o(` property of the config object (either
passed as an argument or loaded from `),b3e=a("code"),gwr=o("pretrained_model_name_or_path"),hwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v3e=a("code"),pwr=o("pretrained_model_name_or_path"),_wr=o(":"),uwr=l(),de=a("ul"),BM=a("li"),F3e=a("strong"),bwr=o("albert"),vwr=o(" \u2014 "),HU=a("a"),Fwr=o("TFAlbertForTokenClassification"),Twr=o(" (ALBERT model)"),Mwr=l(),IM=a("li"),T3e=a("strong"),Ewr=o("bert"),Cwr=o(" \u2014 "),UU=a("a"),wwr=o("TFBertForTokenClassification"),Awr=o(" (BERT model)"),ywr=l(),NM=a("li"),M3e=a("strong"),Lwr=o("camembert"),xwr=o(" \u2014 "),JU=a("a"),$wr=o("TFCamembertForTokenClassification"),kwr=o(" (CamemBERT model)"),Swr=l(),qM=a("li"),E3e=a("strong"),Rwr=o("convbert"),Pwr=o(" \u2014 "),YU=a("a"),Bwr=o("TFConvBertForTokenClassification"),Iwr=o(" (ConvBERT model)"),Nwr=l(),jM=a("li"),C3e=a("strong"),qwr=o("deberta"),jwr=o(" \u2014 "),KU=a("a"),Dwr=o("TFDebertaForTokenClassification"),Gwr=o(" (DeBERTa model)"),Owr=l(),DM=a("li"),w3e=a("strong"),Vwr=o("deberta-v2"),Xwr=o(" \u2014 "),ZU=a("a"),zwr=o("TFDebertaV2ForTokenClassification"),Wwr=o(" (DeBERTa-v2 model)"),Qwr=l(),GM=a("li"),A3e=a("strong"),Hwr=o("distilbert"),Uwr=o(" \u2014 "),eJ=a("a"),Jwr=o("TFDistilBertForTokenClassification"),Ywr=o(" (DistilBERT model)"),Kwr=l(),OM=a("li"),y3e=a("strong"),Zwr=o("electra"),e0r=o(" \u2014 "),oJ=a("a"),o0r=o("TFElectraForTokenClassification"),r0r=o(" (ELECTRA model)"),t0r=l(),VM=a("li"),L3e=a("strong"),a0r=o("flaubert"),n0r=o(" \u2014 "),rJ=a("a"),s0r=o("TFFlaubertForTokenClassification"),l0r=o(" (FlauBERT model)"),i0r=l(),XM=a("li"),x3e=a("strong"),d0r=o("funnel"),c0r=o(" \u2014 "),tJ=a("a"),f0r=o("TFFunnelForTokenClassification"),m0r=o(" (Funnel Transformer model)"),g0r=l(),zM=a("li"),$3e=a("strong"),h0r=o("layoutlm"),p0r=o(" \u2014 "),aJ=a("a"),_0r=o("TFLayoutLMForTokenClassification"),u0r=o(" (LayoutLM model)"),b0r=l(),WM=a("li"),k3e=a("strong"),v0r=o("longformer"),F0r=o(" \u2014 "),nJ=a("a"),T0r=o("TFLongformerForTokenClassification"),M0r=o(" (Longformer model)"),E0r=l(),QM=a("li"),S3e=a("strong"),C0r=o("mobilebert"),w0r=o(" \u2014 "),sJ=a("a"),A0r=o("TFMobileBertForTokenClassification"),y0r=o(" (MobileBERT model)"),L0r=l(),HM=a("li"),R3e=a("strong"),x0r=o("mpnet"),$0r=o(" \u2014 "),lJ=a("a"),k0r=o("TFMPNetForTokenClassification"),S0r=o(" (MPNet model)"),R0r=l(),UM=a("li"),P3e=a("strong"),P0r=o("rembert"),B0r=o(" \u2014 "),iJ=a("a"),I0r=o("TFRemBertForTokenClassification"),N0r=o(" (RemBERT model)"),q0r=l(),JM=a("li"),B3e=a("strong"),j0r=o("roberta"),D0r=o(" \u2014 "),dJ=a("a"),G0r=o("TFRobertaForTokenClassification"),O0r=o(" (RoBERTa model)"),V0r=l(),YM=a("li"),I3e=a("strong"),X0r=o("roformer"),z0r=o(" \u2014 "),cJ=a("a"),W0r=o("TFRoFormerForTokenClassification"),Q0r=o(" (RoFormer model)"),H0r=l(),KM=a("li"),N3e=a("strong"),U0r=o("xlm"),J0r=o(" \u2014 "),fJ=a("a"),Y0r=o("TFXLMForTokenClassification"),K0r=o(" (XLM model)"),Z0r=l(),ZM=a("li"),q3e=a("strong"),e6r=o("xlm-roberta"),o6r=o(" \u2014 "),mJ=a("a"),r6r=o("TFXLMRobertaForTokenClassification"),t6r=o(" (XLM-RoBERTa model)"),a6r=l(),eE=a("li"),j3e=a("strong"),n6r=o("xlnet"),s6r=o(" \u2014 "),gJ=a("a"),l6r=o("TFXLNetForTokenClassification"),i6r=o(" (XLNet model)"),d6r=l(),F(oE.$$.fragment),zje=l(),Tc=a("h2"),rE=a("a"),D3e=a("span"),F(p9.$$.fragment),c6r=l(),G3e=a("span"),f6r=o("TFAutoModelForQuestionAnswering"),Wje=l(),ir=a("div"),F(_9.$$.fragment),m6r=l(),Mc=a("p"),g6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hJ=a("a"),h6r=o("from_pretrained()"),p6r=o(" class method or the "),pJ=a("a"),_6r=o("from_config()"),u6r=o(` class
method.`),b6r=l(),u9=a("p"),v6r=o("This class cannot be instantiated directly using "),O3e=a("code"),F6r=o("__init__()"),T6r=o(" (throws an error)."),M6r=l(),jt=a("div"),F(b9.$$.fragment),E6r=l(),V3e=a("p"),C6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),w6r=l(),Ec=a("p"),A6r=o(`Note:
Loading a model from its configuration file does `),X3e=a("strong"),y6r=o("not"),L6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=a("a"),x6r=o("from_pretrained()"),$6r=o(" to load the model weights."),k6r=l(),F(tE.$$.fragment),S6r=l(),Ir=a("div"),F(v9.$$.fragment),R6r=l(),z3e=a("p"),P6r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),B6r=l(),fn=a("p"),I6r=o("The model class to instantiate is selected based on the "),W3e=a("code"),N6r=o("model_type"),q6r=o(` property of the config object (either
passed as an argument or loaded from `),Q3e=a("code"),j6r=o("pretrained_model_name_or_path"),D6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H3e=a("code"),G6r=o("pretrained_model_name_or_path"),O6r=o(":"),V6r=l(),ce=a("ul"),aE=a("li"),U3e=a("strong"),X6r=o("albert"),z6r=o(" \u2014 "),uJ=a("a"),W6r=o("TFAlbertForQuestionAnswering"),Q6r=o(" (ALBERT model)"),H6r=l(),nE=a("li"),J3e=a("strong"),U6r=o("bert"),J6r=o(" \u2014 "),bJ=a("a"),Y6r=o("TFBertForQuestionAnswering"),K6r=o(" (BERT model)"),Z6r=l(),sE=a("li"),Y3e=a("strong"),eAr=o("camembert"),oAr=o(" \u2014 "),vJ=a("a"),rAr=o("TFCamembertForQuestionAnswering"),tAr=o(" (CamemBERT model)"),aAr=l(),lE=a("li"),K3e=a("strong"),nAr=o("convbert"),sAr=o(" \u2014 "),FJ=a("a"),lAr=o("TFConvBertForQuestionAnswering"),iAr=o(" (ConvBERT model)"),dAr=l(),iE=a("li"),Z3e=a("strong"),cAr=o("deberta"),fAr=o(" \u2014 "),TJ=a("a"),mAr=o("TFDebertaForQuestionAnswering"),gAr=o(" (DeBERTa model)"),hAr=l(),dE=a("li"),eFe=a("strong"),pAr=o("deberta-v2"),_Ar=o(" \u2014 "),MJ=a("a"),uAr=o("TFDebertaV2ForQuestionAnswering"),bAr=o(" (DeBERTa-v2 model)"),vAr=l(),cE=a("li"),oFe=a("strong"),FAr=o("distilbert"),TAr=o(" \u2014 "),EJ=a("a"),MAr=o("TFDistilBertForQuestionAnswering"),EAr=o(" (DistilBERT model)"),CAr=l(),fE=a("li"),rFe=a("strong"),wAr=o("electra"),AAr=o(" \u2014 "),CJ=a("a"),yAr=o("TFElectraForQuestionAnswering"),LAr=o(" (ELECTRA model)"),xAr=l(),mE=a("li"),tFe=a("strong"),$Ar=o("flaubert"),kAr=o(" \u2014 "),wJ=a("a"),SAr=o("TFFlaubertForQuestionAnsweringSimple"),RAr=o(" (FlauBERT model)"),PAr=l(),gE=a("li"),aFe=a("strong"),BAr=o("funnel"),IAr=o(" \u2014 "),AJ=a("a"),NAr=o("TFFunnelForQuestionAnswering"),qAr=o(" (Funnel Transformer model)"),jAr=l(),hE=a("li"),nFe=a("strong"),DAr=o("gptj"),GAr=o(" \u2014 "),yJ=a("a"),OAr=o("TFGPTJForQuestionAnswering"),VAr=o(" (GPT-J model)"),XAr=l(),pE=a("li"),sFe=a("strong"),zAr=o("longformer"),WAr=o(" \u2014 "),LJ=a("a"),QAr=o("TFLongformerForQuestionAnswering"),HAr=o(" (Longformer model)"),UAr=l(),_E=a("li"),lFe=a("strong"),JAr=o("mobilebert"),YAr=o(" \u2014 "),xJ=a("a"),KAr=o("TFMobileBertForQuestionAnswering"),ZAr=o(" (MobileBERT model)"),eyr=l(),uE=a("li"),iFe=a("strong"),oyr=o("mpnet"),ryr=o(" \u2014 "),$J=a("a"),tyr=o("TFMPNetForQuestionAnswering"),ayr=o(" (MPNet model)"),nyr=l(),bE=a("li"),dFe=a("strong"),syr=o("rembert"),lyr=o(" \u2014 "),kJ=a("a"),iyr=o("TFRemBertForQuestionAnswering"),dyr=o(" (RemBERT model)"),cyr=l(),vE=a("li"),cFe=a("strong"),fyr=o("roberta"),myr=o(" \u2014 "),SJ=a("a"),gyr=o("TFRobertaForQuestionAnswering"),hyr=o(" (RoBERTa model)"),pyr=l(),FE=a("li"),fFe=a("strong"),_yr=o("roformer"),uyr=o(" \u2014 "),RJ=a("a"),byr=o("TFRoFormerForQuestionAnswering"),vyr=o(" (RoFormer model)"),Fyr=l(),TE=a("li"),mFe=a("strong"),Tyr=o("xlm"),Myr=o(" \u2014 "),PJ=a("a"),Eyr=o("TFXLMForQuestionAnsweringSimple"),Cyr=o(" (XLM model)"),wyr=l(),ME=a("li"),gFe=a("strong"),Ayr=o("xlm-roberta"),yyr=o(" \u2014 "),BJ=a("a"),Lyr=o("TFXLMRobertaForQuestionAnswering"),xyr=o(" (XLM-RoBERTa model)"),$yr=l(),EE=a("li"),hFe=a("strong"),kyr=o("xlnet"),Syr=o(" \u2014 "),IJ=a("a"),Ryr=o("TFXLNetForQuestionAnsweringSimple"),Pyr=o(" (XLNet model)"),Byr=l(),F(CE.$$.fragment),Qje=l(),Cc=a("h2"),wE=a("a"),pFe=a("span"),F(F9.$$.fragment),Iyr=l(),_Fe=a("span"),Nyr=o("TFAutoModelForVision2Seq"),Hje=l(),dr=a("div"),F(T9.$$.fragment),qyr=l(),wc=a("p"),jyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NJ=a("a"),Dyr=o("from_pretrained()"),Gyr=o(" class method or the "),qJ=a("a"),Oyr=o("from_config()"),Vyr=o(` class
method.`),Xyr=l(),M9=a("p"),zyr=o("This class cannot be instantiated directly using "),uFe=a("code"),Wyr=o("__init__()"),Qyr=o(" (throws an error)."),Hyr=l(),Dt=a("div"),F(E9.$$.fragment),Uyr=l(),bFe=a("p"),Jyr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Yyr=l(),Ac=a("p"),Kyr=o(`Note:
Loading a model from its configuration file does `),vFe=a("strong"),Zyr=o("not"),eLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),oLr=o("from_pretrained()"),rLr=o(" to load the model weights."),tLr=l(),F(AE.$$.fragment),aLr=l(),Nr=a("div"),F(C9.$$.fragment),nLr=l(),FFe=a("p"),sLr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lLr=l(),mn=a("p"),iLr=o("The model class to instantiate is selected based on the "),TFe=a("code"),dLr=o("model_type"),cLr=o(` property of the config object (either
passed as an argument or loaded from `),MFe=a("code"),fLr=o("pretrained_model_name_or_path"),mLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=a("code"),gLr=o("pretrained_model_name_or_path"),hLr=o(":"),pLr=l(),CFe=a("ul"),yE=a("li"),wFe=a("strong"),_Lr=o("vision-encoder-decoder"),uLr=o(" \u2014 "),DJ=a("a"),bLr=o("TFVisionEncoderDecoderModel"),vLr=o(" (Vision Encoder decoder model)"),FLr=l(),F(LE.$$.fragment),Uje=l(),yc=a("h2"),xE=a("a"),AFe=a("span"),F(w9.$$.fragment),TLr=l(),yFe=a("span"),MLr=o("TFAutoModelForSpeechSeq2Seq"),Jje=l(),cr=a("div"),F(A9.$$.fragment),ELr=l(),Lc=a("p"),CLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),GJ=a("a"),wLr=o("from_pretrained()"),ALr=o(" class method or the "),OJ=a("a"),yLr=o("from_config()"),LLr=o(` class
method.`),xLr=l(),y9=a("p"),$Lr=o("This class cannot be instantiated directly using "),LFe=a("code"),kLr=o("__init__()"),SLr=o(" (throws an error)."),RLr=l(),Gt=a("div"),F(L9.$$.fragment),PLr=l(),xFe=a("p"),BLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ILr=l(),xc=a("p"),NLr=o(`Note:
Loading a model from its configuration file does `),$Fe=a("strong"),qLr=o("not"),jLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),DLr=o("from_pretrained()"),GLr=o(" to load the model weights."),OLr=l(),F($E.$$.fragment),VLr=l(),qr=a("div"),F(x9.$$.fragment),XLr=l(),kFe=a("p"),zLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),WLr=l(),gn=a("p"),QLr=o("The model class to instantiate is selected based on the "),SFe=a("code"),HLr=o("model_type"),ULr=o(` property of the config object (either
passed as an argument or loaded from `),RFe=a("code"),JLr=o("pretrained_model_name_or_path"),YLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=a("code"),KLr=o("pretrained_model_name_or_path"),ZLr=o(":"),e8r=l(),BFe=a("ul"),kE=a("li"),IFe=a("strong"),o8r=o("speech_to_text"),r8r=o(" \u2014 "),XJ=a("a"),t8r=o("TFSpeech2TextForConditionalGeneration"),a8r=o(" (Speech2Text model)"),n8r=l(),F(SE.$$.fragment),Yje=l(),$c=a("h2"),RE=a("a"),NFe=a("span"),F($9.$$.fragment),s8r=l(),qFe=a("span"),l8r=o("FlaxAutoModel"),Kje=l(),fr=a("div"),F(k9.$$.fragment),i8r=l(),kc=a("p"),d8r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zJ=a("a"),c8r=o("from_pretrained()"),f8r=o(" class method or the "),WJ=a("a"),m8r=o("from_config()"),g8r=o(` class
method.`),h8r=l(),S9=a("p"),p8r=o("This class cannot be instantiated directly using "),jFe=a("code"),_8r=o("__init__()"),u8r=o(" (throws an error)."),b8r=l(),Ot=a("div"),F(R9.$$.fragment),v8r=l(),DFe=a("p"),F8r=o("Instantiates one of the base model classes of the library from a configuration."),T8r=l(),Sc=a("p"),M8r=o(`Note:
Loading a model from its configuration file does `),GFe=a("strong"),E8r=o("not"),C8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),w8r=o("from_pretrained()"),A8r=o(" to load the model weights."),y8r=l(),F(PE.$$.fragment),L8r=l(),jr=a("div"),F(P9.$$.fragment),x8r=l(),OFe=a("p"),$8r=o("Instantiate one of the base model classes of the library from a pretrained model."),k8r=l(),hn=a("p"),S8r=o("The model class to instantiate is selected based on the "),VFe=a("code"),R8r=o("model_type"),P8r=o(` property of the config object (either
passed as an argument or loaded from `),XFe=a("code"),B8r=o("pretrained_model_name_or_path"),I8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=a("code"),N8r=o("pretrained_model_name_or_path"),q8r=o(":"),j8r=l(),te=a("ul"),BE=a("li"),WFe=a("strong"),D8r=o("albert"),G8r=o(" \u2014 "),HJ=a("a"),O8r=o("FlaxAlbertModel"),V8r=o(" (ALBERT model)"),X8r=l(),IE=a("li"),QFe=a("strong"),z8r=o("bart"),W8r=o(" \u2014 "),UJ=a("a"),Q8r=o("FlaxBartModel"),H8r=o(" (BART model)"),U8r=l(),NE=a("li"),HFe=a("strong"),J8r=o("beit"),Y8r=o(" \u2014 "),JJ=a("a"),K8r=o("FlaxBeitModel"),Z8r=o(" (BEiT model)"),e9r=l(),qE=a("li"),UFe=a("strong"),o9r=o("bert"),r9r=o(" \u2014 "),YJ=a("a"),t9r=o("FlaxBertModel"),a9r=o(" (BERT model)"),n9r=l(),jE=a("li"),JFe=a("strong"),s9r=o("big_bird"),l9r=o(" \u2014 "),KJ=a("a"),i9r=o("FlaxBigBirdModel"),d9r=o(" (BigBird model)"),c9r=l(),DE=a("li"),YFe=a("strong"),f9r=o("blenderbot"),m9r=o(" \u2014 "),ZJ=a("a"),g9r=o("FlaxBlenderbotModel"),h9r=o(" (Blenderbot model)"),p9r=l(),GE=a("li"),KFe=a("strong"),_9r=o("blenderbot-small"),u9r=o(" \u2014 "),eY=a("a"),b9r=o("FlaxBlenderbotSmallModel"),v9r=o(" (BlenderbotSmall model)"),F9r=l(),OE=a("li"),ZFe=a("strong"),T9r=o("clip"),M9r=o(" \u2014 "),oY=a("a"),E9r=o("FlaxCLIPModel"),C9r=o(" (CLIP model)"),w9r=l(),VE=a("li"),eTe=a("strong"),A9r=o("distilbert"),y9r=o(" \u2014 "),rY=a("a"),L9r=o("FlaxDistilBertModel"),x9r=o(" (DistilBERT model)"),$9r=l(),XE=a("li"),oTe=a("strong"),k9r=o("electra"),S9r=o(" \u2014 "),tY=a("a"),R9r=o("FlaxElectraModel"),P9r=o(" (ELECTRA model)"),B9r=l(),zE=a("li"),rTe=a("strong"),I9r=o("gpt2"),N9r=o(" \u2014 "),aY=a("a"),q9r=o("FlaxGPT2Model"),j9r=o(" (OpenAI GPT-2 model)"),D9r=l(),WE=a("li"),tTe=a("strong"),G9r=o("gpt_neo"),O9r=o(" \u2014 "),nY=a("a"),V9r=o("FlaxGPTNeoModel"),X9r=o(" (GPT Neo model)"),z9r=l(),QE=a("li"),aTe=a("strong"),W9r=o("gptj"),Q9r=o(" \u2014 "),sY=a("a"),H9r=o("FlaxGPTJModel"),U9r=o(" (GPT-J model)"),J9r=l(),HE=a("li"),nTe=a("strong"),Y9r=o("marian"),K9r=o(" \u2014 "),lY=a("a"),Z9r=o("FlaxMarianModel"),exr=o(" (Marian model)"),oxr=l(),UE=a("li"),sTe=a("strong"),rxr=o("mbart"),txr=o(" \u2014 "),iY=a("a"),axr=o("FlaxMBartModel"),nxr=o(" (mBART model)"),sxr=l(),JE=a("li"),lTe=a("strong"),lxr=o("mt5"),ixr=o(" \u2014 "),dY=a("a"),dxr=o("FlaxMT5Model"),cxr=o(" (mT5 model)"),fxr=l(),YE=a("li"),iTe=a("strong"),mxr=o("pegasus"),gxr=o(" \u2014 "),cY=a("a"),hxr=o("FlaxPegasusModel"),pxr=o(" (Pegasus model)"),_xr=l(),KE=a("li"),dTe=a("strong"),uxr=o("roberta"),bxr=o(" \u2014 "),fY=a("a"),vxr=o("FlaxRobertaModel"),Fxr=o(" (RoBERTa model)"),Txr=l(),ZE=a("li"),cTe=a("strong"),Mxr=o("roformer"),Exr=o(" \u2014 "),mY=a("a"),Cxr=o("FlaxRoFormerModel"),wxr=o(" (RoFormer model)"),Axr=l(),eC=a("li"),fTe=a("strong"),yxr=o("t5"),Lxr=o(" \u2014 "),gY=a("a"),xxr=o("FlaxT5Model"),$xr=o(" (T5 model)"),kxr=l(),oC=a("li"),mTe=a("strong"),Sxr=o("vision-text-dual-encoder"),Rxr=o(" \u2014 "),hY=a("a"),Pxr=o("FlaxVisionTextDualEncoderModel"),Bxr=o(" (VisionTextDualEncoder model)"),Ixr=l(),rC=a("li"),gTe=a("strong"),Nxr=o("vit"),qxr=o(" \u2014 "),pY=a("a"),jxr=o("FlaxViTModel"),Dxr=o(" (ViT model)"),Gxr=l(),tC=a("li"),hTe=a("strong"),Oxr=o("wav2vec2"),Vxr=o(" \u2014 "),_Y=a("a"),Xxr=o("FlaxWav2Vec2Model"),zxr=o(" (Wav2Vec2 model)"),Wxr=l(),aC=a("li"),pTe=a("strong"),Qxr=o("xglm"),Hxr=o(" \u2014 "),uY=a("a"),Uxr=o("FlaxXGLMModel"),Jxr=o(" (XGLM model)"),Yxr=l(),nC=a("li"),_Te=a("strong"),Kxr=o("xlm-roberta"),Zxr=o(" \u2014 "),bY=a("a"),e$r=o("FlaxXLMRobertaModel"),o$r=o(" (XLM-RoBERTa model)"),r$r=l(),F(sC.$$.fragment),Zje=l(),Rc=a("h2"),lC=a("a"),uTe=a("span"),F(B9.$$.fragment),t$r=l(),bTe=a("span"),a$r=o("FlaxAutoModelForCausalLM"),eDe=l(),mr=a("div"),F(I9.$$.fragment),n$r=l(),Pc=a("p"),s$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vY=a("a"),l$r=o("from_pretrained()"),i$r=o(" class method or the "),FY=a("a"),d$r=o("from_config()"),c$r=o(` class
method.`),f$r=l(),N9=a("p"),m$r=o("This class cannot be instantiated directly using "),vTe=a("code"),g$r=o("__init__()"),h$r=o(" (throws an error)."),p$r=l(),Vt=a("div"),F(q9.$$.fragment),_$r=l(),FTe=a("p"),u$r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),b$r=l(),Bc=a("p"),v$r=o(`Note:
Loading a model from its configuration file does `),TTe=a("strong"),F$r=o("not"),T$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=a("a"),M$r=o("from_pretrained()"),E$r=o(" to load the model weights."),C$r=l(),F(iC.$$.fragment),w$r=l(),Dr=a("div"),F(j9.$$.fragment),A$r=l(),MTe=a("p"),y$r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),L$r=l(),pn=a("p"),x$r=o("The model class to instantiate is selected based on the "),ETe=a("code"),$$r=o("model_type"),k$r=o(` property of the config object (either
passed as an argument or loaded from `),CTe=a("code"),S$r=o("pretrained_model_name_or_path"),R$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=a("code"),P$r=o("pretrained_model_name_or_path"),B$r=o(":"),I$r=l(),Re=a("ul"),dC=a("li"),ATe=a("strong"),N$r=o("bart"),q$r=o(" \u2014 "),MY=a("a"),j$r=o("FlaxBartForCausalLM"),D$r=o(" (BART model)"),G$r=l(),cC=a("li"),yTe=a("strong"),O$r=o("bert"),V$r=o(" \u2014 "),EY=a("a"),X$r=o("FlaxBertForCausalLM"),z$r=o(" (BERT model)"),W$r=l(),fC=a("li"),LTe=a("strong"),Q$r=o("big_bird"),H$r=o(" \u2014 "),CY=a("a"),U$r=o("FlaxBigBirdForCausalLM"),J$r=o(" (BigBird model)"),Y$r=l(),mC=a("li"),xTe=a("strong"),K$r=o("electra"),Z$r=o(" \u2014 "),wY=a("a"),ekr=o("FlaxElectraForCausalLM"),okr=o(" (ELECTRA model)"),rkr=l(),gC=a("li"),$Te=a("strong"),tkr=o("gpt2"),akr=o(" \u2014 "),AY=a("a"),nkr=o("FlaxGPT2LMHeadModel"),skr=o(" (OpenAI GPT-2 model)"),lkr=l(),hC=a("li"),kTe=a("strong"),ikr=o("gpt_neo"),dkr=o(" \u2014 "),yY=a("a"),ckr=o("FlaxGPTNeoForCausalLM"),fkr=o(" (GPT Neo model)"),mkr=l(),pC=a("li"),STe=a("strong"),gkr=o("gptj"),hkr=o(" \u2014 "),LY=a("a"),pkr=o("FlaxGPTJForCausalLM"),_kr=o(" (GPT-J model)"),ukr=l(),_C=a("li"),RTe=a("strong"),bkr=o("roberta"),vkr=o(" \u2014 "),xY=a("a"),Fkr=o("FlaxRobertaForCausalLM"),Tkr=o(" (RoBERTa model)"),Mkr=l(),uC=a("li"),PTe=a("strong"),Ekr=o("xglm"),Ckr=o(" \u2014 "),$Y=a("a"),wkr=o("FlaxXGLMForCausalLM"),Akr=o(" (XGLM model)"),ykr=l(),F(bC.$$.fragment),oDe=l(),Ic=a("h2"),vC=a("a"),BTe=a("span"),F(D9.$$.fragment),Lkr=l(),ITe=a("span"),xkr=o("FlaxAutoModelForPreTraining"),rDe=l(),gr=a("div"),F(G9.$$.fragment),$kr=l(),Nc=a("p"),kkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kY=a("a"),Skr=o("from_pretrained()"),Rkr=o(" class method or the "),SY=a("a"),Pkr=o("from_config()"),Bkr=o(` class
method.`),Ikr=l(),O9=a("p"),Nkr=o("This class cannot be instantiated directly using "),NTe=a("code"),qkr=o("__init__()"),jkr=o(" (throws an error)."),Dkr=l(),Xt=a("div"),F(V9.$$.fragment),Gkr=l(),qTe=a("p"),Okr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Vkr=l(),qc=a("p"),Xkr=o(`Note:
Loading a model from its configuration file does `),jTe=a("strong"),zkr=o("not"),Wkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),Qkr=o("from_pretrained()"),Hkr=o(" to load the model weights."),Ukr=l(),F(FC.$$.fragment),Jkr=l(),Gr=a("div"),F(X9.$$.fragment),Ykr=l(),DTe=a("p"),Kkr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Zkr=l(),_n=a("p"),eSr=o("The model class to instantiate is selected based on the "),GTe=a("code"),oSr=o("model_type"),rSr=o(` property of the config object (either
passed as an argument or loaded from `),OTe=a("code"),tSr=o("pretrained_model_name_or_path"),aSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=a("code"),nSr=o("pretrained_model_name_or_path"),sSr=o(":"),lSr=l(),Ee=a("ul"),TC=a("li"),XTe=a("strong"),iSr=o("albert"),dSr=o(" \u2014 "),PY=a("a"),cSr=o("FlaxAlbertForPreTraining"),fSr=o(" (ALBERT model)"),mSr=l(),MC=a("li"),zTe=a("strong"),gSr=o("bart"),hSr=o(" \u2014 "),BY=a("a"),pSr=o("FlaxBartForConditionalGeneration"),_Sr=o(" (BART model)"),uSr=l(),EC=a("li"),WTe=a("strong"),bSr=o("bert"),vSr=o(" \u2014 "),IY=a("a"),FSr=o("FlaxBertForPreTraining"),TSr=o(" (BERT model)"),MSr=l(),CC=a("li"),QTe=a("strong"),ESr=o("big_bird"),CSr=o(" \u2014 "),NY=a("a"),wSr=o("FlaxBigBirdForPreTraining"),ASr=o(" (BigBird model)"),ySr=l(),wC=a("li"),HTe=a("strong"),LSr=o("electra"),xSr=o(" \u2014 "),qY=a("a"),$Sr=o("FlaxElectraForPreTraining"),kSr=o(" (ELECTRA model)"),SSr=l(),AC=a("li"),UTe=a("strong"),RSr=o("mbart"),PSr=o(" \u2014 "),jY=a("a"),BSr=o("FlaxMBartForConditionalGeneration"),ISr=o(" (mBART model)"),NSr=l(),yC=a("li"),JTe=a("strong"),qSr=o("mt5"),jSr=o(" \u2014 "),DY=a("a"),DSr=o("FlaxMT5ForConditionalGeneration"),GSr=o(" (mT5 model)"),OSr=l(),LC=a("li"),YTe=a("strong"),VSr=o("roberta"),XSr=o(" \u2014 "),GY=a("a"),zSr=o("FlaxRobertaForMaskedLM"),WSr=o(" (RoBERTa model)"),QSr=l(),xC=a("li"),KTe=a("strong"),HSr=o("roformer"),USr=o(" \u2014 "),OY=a("a"),JSr=o("FlaxRoFormerForMaskedLM"),YSr=o(" (RoFormer model)"),KSr=l(),$C=a("li"),ZTe=a("strong"),ZSr=o("t5"),eRr=o(" \u2014 "),VY=a("a"),oRr=o("FlaxT5ForConditionalGeneration"),rRr=o(" (T5 model)"),tRr=l(),kC=a("li"),e7e=a("strong"),aRr=o("wav2vec2"),nRr=o(" \u2014 "),XY=a("a"),sRr=o("FlaxWav2Vec2ForPreTraining"),lRr=o(" (Wav2Vec2 model)"),iRr=l(),SC=a("li"),o7e=a("strong"),dRr=o("xlm-roberta"),cRr=o(" \u2014 "),zY=a("a"),fRr=o("FlaxXLMRobertaForMaskedLM"),mRr=o(" (XLM-RoBERTa model)"),gRr=l(),F(RC.$$.fragment),tDe=l(),jc=a("h2"),PC=a("a"),r7e=a("span"),F(z9.$$.fragment),hRr=l(),t7e=a("span"),pRr=o("FlaxAutoModelForMaskedLM"),aDe=l(),hr=a("div"),F(W9.$$.fragment),_Rr=l(),Dc=a("p"),uRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WY=a("a"),bRr=o("from_pretrained()"),vRr=o(" class method or the "),QY=a("a"),FRr=o("from_config()"),TRr=o(` class
method.`),MRr=l(),Q9=a("p"),ERr=o("This class cannot be instantiated directly using "),a7e=a("code"),CRr=o("__init__()"),wRr=o(" (throws an error)."),ARr=l(),zt=a("div"),F(H9.$$.fragment),yRr=l(),n7e=a("p"),LRr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xRr=l(),Gc=a("p"),$Rr=o(`Note:
Loading a model from its configuration file does `),s7e=a("strong"),kRr=o("not"),SRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=a("a"),RRr=o("from_pretrained()"),PRr=o(" to load the model weights."),BRr=l(),F(BC.$$.fragment),IRr=l(),Or=a("div"),F(U9.$$.fragment),NRr=l(),l7e=a("p"),qRr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jRr=l(),un=a("p"),DRr=o("The model class to instantiate is selected based on the "),i7e=a("code"),GRr=o("model_type"),ORr=o(` property of the config object (either
passed as an argument or loaded from `),d7e=a("code"),VRr=o("pretrained_model_name_or_path"),XRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c7e=a("code"),zRr=o("pretrained_model_name_or_path"),WRr=o(":"),QRr=l(),Le=a("ul"),IC=a("li"),f7e=a("strong"),HRr=o("albert"),URr=o(" \u2014 "),UY=a("a"),JRr=o("FlaxAlbertForMaskedLM"),YRr=o(" (ALBERT model)"),KRr=l(),NC=a("li"),m7e=a("strong"),ZRr=o("bart"),ePr=o(" \u2014 "),JY=a("a"),oPr=o("FlaxBartForConditionalGeneration"),rPr=o(" (BART model)"),tPr=l(),qC=a("li"),g7e=a("strong"),aPr=o("bert"),nPr=o(" \u2014 "),YY=a("a"),sPr=o("FlaxBertForMaskedLM"),lPr=o(" (BERT model)"),iPr=l(),jC=a("li"),h7e=a("strong"),dPr=o("big_bird"),cPr=o(" \u2014 "),KY=a("a"),fPr=o("FlaxBigBirdForMaskedLM"),mPr=o(" (BigBird model)"),gPr=l(),DC=a("li"),p7e=a("strong"),hPr=o("distilbert"),pPr=o(" \u2014 "),ZY=a("a"),_Pr=o("FlaxDistilBertForMaskedLM"),uPr=o(" (DistilBERT model)"),bPr=l(),GC=a("li"),_7e=a("strong"),vPr=o("electra"),FPr=o(" \u2014 "),eK=a("a"),TPr=o("FlaxElectraForMaskedLM"),MPr=o(" (ELECTRA model)"),EPr=l(),OC=a("li"),u7e=a("strong"),CPr=o("mbart"),wPr=o(" \u2014 "),oK=a("a"),APr=o("FlaxMBartForConditionalGeneration"),yPr=o(" (mBART model)"),LPr=l(),VC=a("li"),b7e=a("strong"),xPr=o("roberta"),$Pr=o(" \u2014 "),rK=a("a"),kPr=o("FlaxRobertaForMaskedLM"),SPr=o(" (RoBERTa model)"),RPr=l(),XC=a("li"),v7e=a("strong"),PPr=o("roformer"),BPr=o(" \u2014 "),tK=a("a"),IPr=o("FlaxRoFormerForMaskedLM"),NPr=o(" (RoFormer model)"),qPr=l(),zC=a("li"),F7e=a("strong"),jPr=o("xlm-roberta"),DPr=o(" \u2014 "),aK=a("a"),GPr=o("FlaxXLMRobertaForMaskedLM"),OPr=o(" (XLM-RoBERTa model)"),VPr=l(),F(WC.$$.fragment),nDe=l(),Oc=a("h2"),QC=a("a"),T7e=a("span"),F(J9.$$.fragment),XPr=l(),M7e=a("span"),zPr=o("FlaxAutoModelForSeq2SeqLM"),sDe=l(),pr=a("div"),F(Y9.$$.fragment),WPr=l(),Vc=a("p"),QPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nK=a("a"),HPr=o("from_pretrained()"),UPr=o(" class method or the "),sK=a("a"),JPr=o("from_config()"),YPr=o(` class
method.`),KPr=l(),K9=a("p"),ZPr=o("This class cannot be instantiated directly using "),E7e=a("code"),eBr=o("__init__()"),oBr=o(" (throws an error)."),rBr=l(),Wt=a("div"),F(Z9.$$.fragment),tBr=l(),C7e=a("p"),aBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nBr=l(),Xc=a("p"),sBr=o(`Note:
Loading a model from its configuration file does `),w7e=a("strong"),lBr=o("not"),iBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=a("a"),dBr=o("from_pretrained()"),cBr=o(" to load the model weights."),fBr=l(),F(HC.$$.fragment),mBr=l(),Vr=a("div"),F(ex.$$.fragment),gBr=l(),A7e=a("p"),hBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pBr=l(),bn=a("p"),_Br=o("The model class to instantiate is selected based on the "),y7e=a("code"),uBr=o("model_type"),bBr=o(` property of the config object (either
passed as an argument or loaded from `),L7e=a("code"),vBr=o("pretrained_model_name_or_path"),FBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x7e=a("code"),TBr=o("pretrained_model_name_or_path"),MBr=o(":"),EBr=l(),Pe=a("ul"),UC=a("li"),$7e=a("strong"),CBr=o("bart"),wBr=o(" \u2014 "),iK=a("a"),ABr=o("FlaxBartForConditionalGeneration"),yBr=o(" (BART model)"),LBr=l(),JC=a("li"),k7e=a("strong"),xBr=o("blenderbot"),$Br=o(" \u2014 "),dK=a("a"),kBr=o("FlaxBlenderbotForConditionalGeneration"),SBr=o(" (Blenderbot model)"),RBr=l(),YC=a("li"),S7e=a("strong"),PBr=o("blenderbot-small"),BBr=o(" \u2014 "),cK=a("a"),IBr=o("FlaxBlenderbotSmallForConditionalGeneration"),NBr=o(" (BlenderbotSmall model)"),qBr=l(),KC=a("li"),R7e=a("strong"),jBr=o("encoder-decoder"),DBr=o(" \u2014 "),fK=a("a"),GBr=o("FlaxEncoderDecoderModel"),OBr=o(" (Encoder decoder model)"),VBr=l(),ZC=a("li"),P7e=a("strong"),XBr=o("marian"),zBr=o(" \u2014 "),mK=a("a"),WBr=o("FlaxMarianMTModel"),QBr=o(" (Marian model)"),HBr=l(),ew=a("li"),B7e=a("strong"),UBr=o("mbart"),JBr=o(" \u2014 "),gK=a("a"),YBr=o("FlaxMBartForConditionalGeneration"),KBr=o(" (mBART model)"),ZBr=l(),ow=a("li"),I7e=a("strong"),eIr=o("mt5"),oIr=o(" \u2014 "),hK=a("a"),rIr=o("FlaxMT5ForConditionalGeneration"),tIr=o(" (mT5 model)"),aIr=l(),rw=a("li"),N7e=a("strong"),nIr=o("pegasus"),sIr=o(" \u2014 "),pK=a("a"),lIr=o("FlaxPegasusForConditionalGeneration"),iIr=o(" (Pegasus model)"),dIr=l(),tw=a("li"),q7e=a("strong"),cIr=o("t5"),fIr=o(" \u2014 "),_K=a("a"),mIr=o("FlaxT5ForConditionalGeneration"),gIr=o(" (T5 model)"),hIr=l(),F(aw.$$.fragment),lDe=l(),zc=a("h2"),nw=a("a"),j7e=a("span"),F(ox.$$.fragment),pIr=l(),D7e=a("span"),_Ir=o("FlaxAutoModelForSequenceClassification"),iDe=l(),_r=a("div"),F(rx.$$.fragment),uIr=l(),Wc=a("p"),bIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uK=a("a"),vIr=o("from_pretrained()"),FIr=o(" class method or the "),bK=a("a"),TIr=o("from_config()"),MIr=o(` class
method.`),EIr=l(),tx=a("p"),CIr=o("This class cannot be instantiated directly using "),G7e=a("code"),wIr=o("__init__()"),AIr=o(" (throws an error)."),yIr=l(),Qt=a("div"),F(ax.$$.fragment),LIr=l(),O7e=a("p"),xIr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$Ir=l(),Qc=a("p"),kIr=o(`Note:
Loading a model from its configuration file does `),V7e=a("strong"),SIr=o("not"),RIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=a("a"),PIr=o("from_pretrained()"),BIr=o(" to load the model weights."),IIr=l(),F(sw.$$.fragment),NIr=l(),Xr=a("div"),F(nx.$$.fragment),qIr=l(),X7e=a("p"),jIr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),DIr=l(),vn=a("p"),GIr=o("The model class to instantiate is selected based on the "),z7e=a("code"),OIr=o("model_type"),VIr=o(` property of the config object (either
passed as an argument or loaded from `),W7e=a("code"),XIr=o("pretrained_model_name_or_path"),zIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=a("code"),WIr=o("pretrained_model_name_or_path"),QIr=o(":"),HIr=l(),xe=a("ul"),lw=a("li"),H7e=a("strong"),UIr=o("albert"),JIr=o(" \u2014 "),FK=a("a"),YIr=o("FlaxAlbertForSequenceClassification"),KIr=o(" (ALBERT model)"),ZIr=l(),iw=a("li"),U7e=a("strong"),eNr=o("bart"),oNr=o(" \u2014 "),TK=a("a"),rNr=o("FlaxBartForSequenceClassification"),tNr=o(" (BART model)"),aNr=l(),dw=a("li"),J7e=a("strong"),nNr=o("bert"),sNr=o(" \u2014 "),MK=a("a"),lNr=o("FlaxBertForSequenceClassification"),iNr=o(" (BERT model)"),dNr=l(),cw=a("li"),Y7e=a("strong"),cNr=o("big_bird"),fNr=o(" \u2014 "),EK=a("a"),mNr=o("FlaxBigBirdForSequenceClassification"),gNr=o(" (BigBird model)"),hNr=l(),fw=a("li"),K7e=a("strong"),pNr=o("distilbert"),_Nr=o(" \u2014 "),CK=a("a"),uNr=o("FlaxDistilBertForSequenceClassification"),bNr=o(" (DistilBERT model)"),vNr=l(),mw=a("li"),Z7e=a("strong"),FNr=o("electra"),TNr=o(" \u2014 "),wK=a("a"),MNr=o("FlaxElectraForSequenceClassification"),ENr=o(" (ELECTRA model)"),CNr=l(),gw=a("li"),eMe=a("strong"),wNr=o("mbart"),ANr=o(" \u2014 "),AK=a("a"),yNr=o("FlaxMBartForSequenceClassification"),LNr=o(" (mBART model)"),xNr=l(),hw=a("li"),oMe=a("strong"),$Nr=o("roberta"),kNr=o(" \u2014 "),yK=a("a"),SNr=o("FlaxRobertaForSequenceClassification"),RNr=o(" (RoBERTa model)"),PNr=l(),pw=a("li"),rMe=a("strong"),BNr=o("roformer"),INr=o(" \u2014 "),LK=a("a"),NNr=o("FlaxRoFormerForSequenceClassification"),qNr=o(" (RoFormer model)"),jNr=l(),_w=a("li"),tMe=a("strong"),DNr=o("xlm-roberta"),GNr=o(" \u2014 "),xK=a("a"),ONr=o("FlaxXLMRobertaForSequenceClassification"),VNr=o(" (XLM-RoBERTa model)"),XNr=l(),F(uw.$$.fragment),dDe=l(),Hc=a("h2"),bw=a("a"),aMe=a("span"),F(sx.$$.fragment),zNr=l(),nMe=a("span"),WNr=o("FlaxAutoModelForQuestionAnswering"),cDe=l(),ur=a("div"),F(lx.$$.fragment),QNr=l(),Uc=a("p"),HNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$K=a("a"),UNr=o("from_pretrained()"),JNr=o(" class method or the "),kK=a("a"),YNr=o("from_config()"),KNr=o(` class
method.`),ZNr=l(),ix=a("p"),eqr=o("This class cannot be instantiated directly using "),sMe=a("code"),oqr=o("__init__()"),rqr=o(" (throws an error)."),tqr=l(),Ht=a("div"),F(dx.$$.fragment),aqr=l(),lMe=a("p"),nqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sqr=l(),Jc=a("p"),lqr=o(`Note:
Loading a model from its configuration file does `),iMe=a("strong"),iqr=o("not"),dqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SK=a("a"),cqr=o("from_pretrained()"),fqr=o(" to load the model weights."),mqr=l(),F(vw.$$.fragment),gqr=l(),zr=a("div"),F(cx.$$.fragment),hqr=l(),dMe=a("p"),pqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_qr=l(),Fn=a("p"),uqr=o("The model class to instantiate is selected based on the "),cMe=a("code"),bqr=o("model_type"),vqr=o(` property of the config object (either
passed as an argument or loaded from `),fMe=a("code"),Fqr=o("pretrained_model_name_or_path"),Tqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=a("code"),Mqr=o("pretrained_model_name_or_path"),Eqr=o(":"),Cqr=l(),$e=a("ul"),Fw=a("li"),gMe=a("strong"),wqr=o("albert"),Aqr=o(" \u2014 "),RK=a("a"),yqr=o("FlaxAlbertForQuestionAnswering"),Lqr=o(" (ALBERT model)"),xqr=l(),Tw=a("li"),hMe=a("strong"),$qr=o("bart"),kqr=o(" \u2014 "),PK=a("a"),Sqr=o("FlaxBartForQuestionAnswering"),Rqr=o(" (BART model)"),Pqr=l(),Mw=a("li"),pMe=a("strong"),Bqr=o("bert"),Iqr=o(" \u2014 "),BK=a("a"),Nqr=o("FlaxBertForQuestionAnswering"),qqr=o(" (BERT model)"),jqr=l(),Ew=a("li"),_Me=a("strong"),Dqr=o("big_bird"),Gqr=o(" \u2014 "),IK=a("a"),Oqr=o("FlaxBigBirdForQuestionAnswering"),Vqr=o(" (BigBird model)"),Xqr=l(),Cw=a("li"),uMe=a("strong"),zqr=o("distilbert"),Wqr=o(" \u2014 "),NK=a("a"),Qqr=o("FlaxDistilBertForQuestionAnswering"),Hqr=o(" (DistilBERT model)"),Uqr=l(),ww=a("li"),bMe=a("strong"),Jqr=o("electra"),Yqr=o(" \u2014 "),qK=a("a"),Kqr=o("FlaxElectraForQuestionAnswering"),Zqr=o(" (ELECTRA model)"),ejr=l(),Aw=a("li"),vMe=a("strong"),ojr=o("mbart"),rjr=o(" \u2014 "),jK=a("a"),tjr=o("FlaxMBartForQuestionAnswering"),ajr=o(" (mBART model)"),njr=l(),yw=a("li"),FMe=a("strong"),sjr=o("roberta"),ljr=o(" \u2014 "),DK=a("a"),ijr=o("FlaxRobertaForQuestionAnswering"),djr=o(" (RoBERTa model)"),cjr=l(),Lw=a("li"),TMe=a("strong"),fjr=o("roformer"),mjr=o(" \u2014 "),GK=a("a"),gjr=o("FlaxRoFormerForQuestionAnswering"),hjr=o(" (RoFormer model)"),pjr=l(),xw=a("li"),MMe=a("strong"),_jr=o("xlm-roberta"),ujr=o(" \u2014 "),OK=a("a"),bjr=o("FlaxXLMRobertaForQuestionAnswering"),vjr=o(" (XLM-RoBERTa model)"),Fjr=l(),F($w.$$.fragment),fDe=l(),Yc=a("h2"),kw=a("a"),EMe=a("span"),F(fx.$$.fragment),Tjr=l(),CMe=a("span"),Mjr=o("FlaxAutoModelForTokenClassification"),mDe=l(),br=a("div"),F(mx.$$.fragment),Ejr=l(),Kc=a("p"),Cjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VK=a("a"),wjr=o("from_pretrained()"),Ajr=o(" class method or the "),XK=a("a"),yjr=o("from_config()"),Ljr=o(` class
method.`),xjr=l(),gx=a("p"),$jr=o("This class cannot be instantiated directly using "),wMe=a("code"),kjr=o("__init__()"),Sjr=o(" (throws an error)."),Rjr=l(),Ut=a("div"),F(hx.$$.fragment),Pjr=l(),AMe=a("p"),Bjr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ijr=l(),Zc=a("p"),Njr=o(`Note:
Loading a model from its configuration file does `),yMe=a("strong"),qjr=o("not"),jjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zK=a("a"),Djr=o("from_pretrained()"),Gjr=o(" to load the model weights."),Ojr=l(),F(Sw.$$.fragment),Vjr=l(),Wr=a("div"),F(px.$$.fragment),Xjr=l(),LMe=a("p"),zjr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Wjr=l(),Tn=a("p"),Qjr=o("The model class to instantiate is selected based on the "),xMe=a("code"),Hjr=o("model_type"),Ujr=o(` property of the config object (either
passed as an argument or loaded from `),$Me=a("code"),Jjr=o("pretrained_model_name_or_path"),Yjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kMe=a("code"),Kjr=o("pretrained_model_name_or_path"),Zjr=o(":"),eDr=l(),De=a("ul"),Rw=a("li"),SMe=a("strong"),oDr=o("albert"),rDr=o(" \u2014 "),WK=a("a"),tDr=o("FlaxAlbertForTokenClassification"),aDr=o(" (ALBERT model)"),nDr=l(),Pw=a("li"),RMe=a("strong"),sDr=o("bert"),lDr=o(" \u2014 "),QK=a("a"),iDr=o("FlaxBertForTokenClassification"),dDr=o(" (BERT model)"),cDr=l(),Bw=a("li"),PMe=a("strong"),fDr=o("big_bird"),mDr=o(" \u2014 "),HK=a("a"),gDr=o("FlaxBigBirdForTokenClassification"),hDr=o(" (BigBird model)"),pDr=l(),Iw=a("li"),BMe=a("strong"),_Dr=o("distilbert"),uDr=o(" \u2014 "),UK=a("a"),bDr=o("FlaxDistilBertForTokenClassification"),vDr=o(" (DistilBERT model)"),FDr=l(),Nw=a("li"),IMe=a("strong"),TDr=o("electra"),MDr=o(" \u2014 "),JK=a("a"),EDr=o("FlaxElectraForTokenClassification"),CDr=o(" (ELECTRA model)"),wDr=l(),qw=a("li"),NMe=a("strong"),ADr=o("roberta"),yDr=o(" \u2014 "),YK=a("a"),LDr=o("FlaxRobertaForTokenClassification"),xDr=o(" (RoBERTa model)"),$Dr=l(),jw=a("li"),qMe=a("strong"),kDr=o("roformer"),SDr=o(" \u2014 "),KK=a("a"),RDr=o("FlaxRoFormerForTokenClassification"),PDr=o(" (RoFormer model)"),BDr=l(),Dw=a("li"),jMe=a("strong"),IDr=o("xlm-roberta"),NDr=o(" \u2014 "),ZK=a("a"),qDr=o("FlaxXLMRobertaForTokenClassification"),jDr=o(" (XLM-RoBERTa model)"),DDr=l(),F(Gw.$$.fragment),gDe=l(),ef=a("h2"),Ow=a("a"),DMe=a("span"),F(_x.$$.fragment),GDr=l(),GMe=a("span"),ODr=o("FlaxAutoModelForMultipleChoice"),hDe=l(),vr=a("div"),F(ux.$$.fragment),VDr=l(),of=a("p"),XDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eZ=a("a"),zDr=o("from_pretrained()"),WDr=o(" class method or the "),oZ=a("a"),QDr=o("from_config()"),HDr=o(` class
method.`),UDr=l(),bx=a("p"),JDr=o("This class cannot be instantiated directly using "),OMe=a("code"),YDr=o("__init__()"),KDr=o(" (throws an error)."),ZDr=l(),Jt=a("div"),F(vx.$$.fragment),eGr=l(),VMe=a("p"),oGr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rGr=l(),rf=a("p"),tGr=o(`Note:
Loading a model from its configuration file does `),XMe=a("strong"),aGr=o("not"),nGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=a("a"),sGr=o("from_pretrained()"),lGr=o(" to load the model weights."),iGr=l(),F(Vw.$$.fragment),dGr=l(),Qr=a("div"),F(Fx.$$.fragment),cGr=l(),zMe=a("p"),fGr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mGr=l(),Mn=a("p"),gGr=o("The model class to instantiate is selected based on the "),WMe=a("code"),hGr=o("model_type"),pGr=o(` property of the config object (either
passed as an argument or loaded from `),QMe=a("code"),_Gr=o("pretrained_model_name_or_path"),uGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HMe=a("code"),bGr=o("pretrained_model_name_or_path"),vGr=o(":"),FGr=l(),Ge=a("ul"),Xw=a("li"),UMe=a("strong"),TGr=o("albert"),MGr=o(" \u2014 "),tZ=a("a"),EGr=o("FlaxAlbertForMultipleChoice"),CGr=o(" (ALBERT model)"),wGr=l(),zw=a("li"),JMe=a("strong"),AGr=o("bert"),yGr=o(" \u2014 "),aZ=a("a"),LGr=o("FlaxBertForMultipleChoice"),xGr=o(" (BERT model)"),$Gr=l(),Ww=a("li"),YMe=a("strong"),kGr=o("big_bird"),SGr=o(" \u2014 "),nZ=a("a"),RGr=o("FlaxBigBirdForMultipleChoice"),PGr=o(" (BigBird model)"),BGr=l(),Qw=a("li"),KMe=a("strong"),IGr=o("distilbert"),NGr=o(" \u2014 "),sZ=a("a"),qGr=o("FlaxDistilBertForMultipleChoice"),jGr=o(" (DistilBERT model)"),DGr=l(),Hw=a("li"),ZMe=a("strong"),GGr=o("electra"),OGr=o(" \u2014 "),lZ=a("a"),VGr=o("FlaxElectraForMultipleChoice"),XGr=o(" (ELECTRA model)"),zGr=l(),Uw=a("li"),eEe=a("strong"),WGr=o("roberta"),QGr=o(" \u2014 "),iZ=a("a"),HGr=o("FlaxRobertaForMultipleChoice"),UGr=o(" (RoBERTa model)"),JGr=l(),Jw=a("li"),oEe=a("strong"),YGr=o("roformer"),KGr=o(" \u2014 "),dZ=a("a"),ZGr=o("FlaxRoFormerForMultipleChoice"),eOr=o(" (RoFormer model)"),oOr=l(),Yw=a("li"),rEe=a("strong"),rOr=o("xlm-roberta"),tOr=o(" \u2014 "),cZ=a("a"),aOr=o("FlaxXLMRobertaForMultipleChoice"),nOr=o(" (XLM-RoBERTa model)"),sOr=l(),F(Kw.$$.fragment),pDe=l(),tf=a("h2"),Zw=a("a"),tEe=a("span"),F(Tx.$$.fragment),lOr=l(),aEe=a("span"),iOr=o("FlaxAutoModelForNextSentencePrediction"),_De=l(),Fr=a("div"),F(Mx.$$.fragment),dOr=l(),af=a("p"),cOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fZ=a("a"),fOr=o("from_pretrained()"),mOr=o(" class method or the "),mZ=a("a"),gOr=o("from_config()"),hOr=o(` class
method.`),pOr=l(),Ex=a("p"),_Or=o("This class cannot be instantiated directly using "),nEe=a("code"),uOr=o("__init__()"),bOr=o(" (throws an error)."),vOr=l(),Yt=a("div"),F(Cx.$$.fragment),FOr=l(),sEe=a("p"),TOr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),MOr=l(),nf=a("p"),EOr=o(`Note:
Loading a model from its configuration file does `),lEe=a("strong"),COr=o("not"),wOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=a("a"),AOr=o("from_pretrained()"),yOr=o(" to load the model weights."),LOr=l(),F(e0.$$.fragment),xOr=l(),Hr=a("div"),F(wx.$$.fragment),$Or=l(),iEe=a("p"),kOr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SOr=l(),En=a("p"),ROr=o("The model class to instantiate is selected based on the "),dEe=a("code"),POr=o("model_type"),BOr=o(` property of the config object (either
passed as an argument or loaded from `),cEe=a("code"),IOr=o("pretrained_model_name_or_path"),NOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fEe=a("code"),qOr=o("pretrained_model_name_or_path"),jOr=o(":"),DOr=l(),mEe=a("ul"),o0=a("li"),gEe=a("strong"),GOr=o("bert"),OOr=o(" \u2014 "),hZ=a("a"),VOr=o("FlaxBertForNextSentencePrediction"),XOr=o(" (BERT model)"),zOr=l(),F(r0.$$.fragment),uDe=l(),sf=a("h2"),t0=a("a"),hEe=a("span"),F(Ax.$$.fragment),WOr=l(),pEe=a("span"),QOr=o("FlaxAutoModelForImageClassification"),bDe=l(),Tr=a("div"),F(yx.$$.fragment),HOr=l(),lf=a("p"),UOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pZ=a("a"),JOr=o("from_pretrained()"),YOr=o(" class method or the "),_Z=a("a"),KOr=o("from_config()"),ZOr=o(` class
method.`),eVr=l(),Lx=a("p"),oVr=o("This class cannot be instantiated directly using "),_Ee=a("code"),rVr=o("__init__()"),tVr=o(" (throws an error)."),aVr=l(),Kt=a("div"),F(xx.$$.fragment),nVr=l(),uEe=a("p"),sVr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lVr=l(),df=a("p"),iVr=o(`Note:
Loading a model from its configuration file does `),bEe=a("strong"),dVr=o("not"),cVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=a("a"),fVr=o("from_pretrained()"),mVr=o(" to load the model weights."),gVr=l(),F(a0.$$.fragment),hVr=l(),Ur=a("div"),F($x.$$.fragment),pVr=l(),vEe=a("p"),_Vr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),uVr=l(),Cn=a("p"),bVr=o("The model class to instantiate is selected based on the "),FEe=a("code"),vVr=o("model_type"),FVr=o(` property of the config object (either
passed as an argument or loaded from `),TEe=a("code"),TVr=o("pretrained_model_name_or_path"),MVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=a("code"),EVr=o("pretrained_model_name_or_path"),CVr=o(":"),wVr=l(),kx=a("ul"),n0=a("li"),EEe=a("strong"),AVr=o("beit"),yVr=o(" \u2014 "),bZ=a("a"),LVr=o("FlaxBeitForImageClassification"),xVr=o(" (BEiT model)"),$Vr=l(),s0=a("li"),CEe=a("strong"),kVr=o("vit"),SVr=o(" \u2014 "),vZ=a("a"),RVr=o("FlaxViTForImageClassification"),PVr=o(" (ViT model)"),BVr=l(),F(l0.$$.fragment),vDe=l(),cf=a("h2"),i0=a("a"),wEe=a("span"),F(Sx.$$.fragment),IVr=l(),AEe=a("span"),NVr=o("FlaxAutoModelForVision2Seq"),FDe=l(),Mr=a("div"),F(Rx.$$.fragment),qVr=l(),ff=a("p"),jVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FZ=a("a"),DVr=o("from_pretrained()"),GVr=o(" class method or the "),TZ=a("a"),OVr=o("from_config()"),VVr=o(` class
method.`),XVr=l(),Px=a("p"),zVr=o("This class cannot be instantiated directly using "),yEe=a("code"),WVr=o("__init__()"),QVr=o(" (throws an error)."),HVr=l(),Zt=a("div"),F(Bx.$$.fragment),UVr=l(),LEe=a("p"),JVr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),YVr=l(),mf=a("p"),KVr=o(`Note:
Loading a model from its configuration file does `),xEe=a("strong"),ZVr=o("not"),eXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=a("a"),oXr=o("from_pretrained()"),rXr=o(" to load the model weights."),tXr=l(),F(d0.$$.fragment),aXr=l(),Jr=a("div"),F(Ix.$$.fragment),nXr=l(),$Ee=a("p"),sXr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lXr=l(),wn=a("p"),iXr=o("The model class to instantiate is selected based on the "),kEe=a("code"),dXr=o("model_type"),cXr=o(` property of the config object (either
passed as an argument or loaded from `),SEe=a("code"),fXr=o("pretrained_model_name_or_path"),mXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=a("code"),gXr=o("pretrained_model_name_or_path"),hXr=o(":"),pXr=l(),PEe=a("ul"),c0=a("li"),BEe=a("strong"),_Xr=o("vision-encoder-decoder"),uXr=o(" \u2014 "),EZ=a("a"),bXr=o("FlaxVisionEncoderDecoderModel"),vXr=o(" (Vision Encoder decoder model)"),FXr=l(),F(f0.$$.fragment),this.h()},l(f){const u=ckt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Nx=s(p);m=n(Nx,"A",{id:!0,class:!0,href:!0});var IEe=s(m);_=n(IEe,"SPAN",{});var NEe=s(_);T(d.$$.fragment,NEe),NEe.forEach(t),IEe.forEach(t),h=i(Nx),Mo=n(Nx,"SPAN",{});var qEe=s(Mo);mi=r(qEe,"Auto Classes"),qEe.forEach(t),Nx.forEach(t),_f=i(f),tt=n(f,"P",{});var qx=s(tt);gi=r(qx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=n(qx,"CODE",{});var jEe=s(hi);LA=r(jEe,"from_pretrained()"),jEe.forEach(t),uf=r(qx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);pi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var DEe=s(yn);xA=r(DEe,"AutoConfig"),DEe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var GEe=s(xn);$A=r(GEe,"AutoModel"),GEe.forEach(t),_i=r(An,`, and
`),$n=n(An,"A",{href:!0});var OEe=s($n);kA=r(OEe,"AutoTokenizer"),OEe.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),bf=i(f),T(wa.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var jx=s(Ae);J$=r(jx,"will create a model that is an instance of "),bi=n(jx,"A",{href:!0});var VEe=s(bi);Y$=r(VEe,"BertModel"),VEe.forEach(t),K$=r(jx,"."),jx.forEach(t),Eo=i(f),Aa=n(f,"P",{});var Dx=s(Aa);Z$=r(Dx,"There is one class of "),vf=n(Dx,"CODE",{});var XEe=s(vf);ek=r(XEe,"AutoModel"),XEe.forEach(t),xOe=r(Dx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Dx.forEach(t),bqe=i(f),vi=n(f,"H2",{class:!0});var Gx=s(vi);Ff=n(Gx,"A",{id:!0,class:!0,href:!0});var zEe=s(Ff);_oe=n(zEe,"SPAN",{});var WEe=s(_oe);T(SA.$$.fragment,WEe),WEe.forEach(t),zEe.forEach(t),$Oe=i(Gx),uoe=n(Gx,"SPAN",{});var QEe=s(uoe);kOe=r(QEe,"Extending the Auto Classes"),QEe.forEach(t),Gx.forEach(t),vqe=i(f),kn=n(f,"P",{});var gf=s(kn);SOe=r(gf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),boe=n(gf,"CODE",{});var HEe=s(boe);ROe=r(HEe,"NewModel"),HEe.forEach(t),POe=r(gf,", make sure you have a "),voe=n(gf,"CODE",{});var UEe=s(voe);BOe=r(UEe,"NewModelConfig"),UEe.forEach(t),IOe=r(gf,` then you can add those to the auto
classes like this:`),gf.forEach(t),Fqe=i(f),T(RA.$$.fragment,f),Tqe=i(f),ok=n(f,"P",{});var JEe=s(ok);NOe=r(JEe,"You will then be able to use the auto classes like you would usually do!"),JEe.forEach(t),Mqe=i(f),T(Tf.$$.fragment,f),Eqe=i(f),Fi=n(f,"H2",{class:!0});var Ox=s(Fi);Mf=n(Ox,"A",{id:!0,class:!0,href:!0});var YEe=s(Mf);Foe=n(YEe,"SPAN",{});var KEe=s(Foe);T(PA.$$.fragment,KEe),KEe.forEach(t),YEe.forEach(t),qOe=i(Ox),Toe=n(Ox,"SPAN",{});var ZEe=s(Toe);jOe=r(ZEe,"AutoConfig"),ZEe.forEach(t),Ox.forEach(t),Cqe=i(f),Co=n(f,"DIV",{class:!0});var ot=s(Co);T(BA.$$.fragment,ot),DOe=i(ot),IA=n(ot,"P",{});var Vx=s(IA);GOe=r(Vx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),rk=n(Vx,"A",{href:!0});var eCe=s(rk);OOe=r(eCe,"from_pretrained()"),eCe.forEach(t),VOe=r(Vx," class method."),Vx.forEach(t),XOe=i(ot),NA=n(ot,"P",{});var Xx=s(NA);zOe=r(Xx,"This class cannot be instantiated directly using "),Moe=n(Xx,"CODE",{});var oCe=s(Moe);WOe=r(oCe,"__init__()"),oCe.forEach(t),QOe=r(Xx," (throws an error)."),Xx.forEach(t),HOe=i(ot),Er=n(ot,"DIV",{class:!0});var rt=s(Er);T(qA.$$.fragment,rt),UOe=i(rt),Eoe=n(rt,"P",{});var rCe=s(Eoe);JOe=r(rCe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),rCe.forEach(t),YOe=i(rt),Ti=n(rt,"P",{});var hf=s(Ti);KOe=r(hf,"The configuration class to instantiate is selected based on the "),Coe=n(hf,"CODE",{});var tCe=s(Coe);ZOe=r(tCe,"model_type"),tCe.forEach(t),eVe=r(hf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),woe=n(hf,"CODE",{});var aCe=s(woe);oVe=r(aCe,"pretrained_model_name_or_path"),aCe.forEach(t),rVe=r(hf,":"),hf.forEach(t),tVe=i(rt),A=n(rt,"UL",{});var y=s(A);Ef=n(y,"LI",{});var m0=s(Ef);Aoe=n(m0,"STRONG",{});var nCe=s(Aoe);aVe=r(nCe,"albert"),nCe.forEach(t),nVe=r(m0," \u2014 "),tk=n(m0,"A",{href:!0});var sCe=s(tk);sVe=r(sCe,"AlbertConfig"),sCe.forEach(t),lVe=r(m0," (ALBERT model)"),m0.forEach(t),iVe=i(y),Cf=n(y,"LI",{});var g0=s(Cf);yoe=n(g0,"STRONG",{});var lCe=s(yoe);dVe=r(lCe,"bart"),lCe.forEach(t),cVe=r(g0," \u2014 "),ak=n(g0,"A",{href:!0});var iCe=s(ak);fVe=r(iCe,"BartConfig"),iCe.forEach(t),mVe=r(g0," (BART model)"),g0.forEach(t),gVe=i(y),wf=n(y,"LI",{});var h0=s(wf);Loe=n(h0,"STRONG",{});var dCe=s(Loe);hVe=r(dCe,"beit"),dCe.forEach(t),pVe=r(h0," \u2014 "),nk=n(h0,"A",{href:!0});var cCe=s(nk);_Ve=r(cCe,"BeitConfig"),cCe.forEach(t),uVe=r(h0," (BEiT model)"),h0.forEach(t),bVe=i(y),Af=n(y,"LI",{});var p0=s(Af);xoe=n(p0,"STRONG",{});var fCe=s(xoe);vVe=r(fCe,"bert"),fCe.forEach(t),FVe=r(p0," \u2014 "),sk=n(p0,"A",{href:!0});var mCe=s(sk);TVe=r(mCe,"BertConfig"),mCe.forEach(t),MVe=r(p0," (BERT model)"),p0.forEach(t),EVe=i(y),yf=n(y,"LI",{});var _0=s(yf);$oe=n(_0,"STRONG",{});var gCe=s($oe);CVe=r(gCe,"bert-generation"),gCe.forEach(t),wVe=r(_0," \u2014 "),lk=n(_0,"A",{href:!0});var hCe=s(lk);AVe=r(hCe,"BertGenerationConfig"),hCe.forEach(t),yVe=r(_0," (Bert Generation model)"),_0.forEach(t),LVe=i(y),Lf=n(y,"LI",{});var u0=s(Lf);koe=n(u0,"STRONG",{});var pCe=s(koe);xVe=r(pCe,"big_bird"),pCe.forEach(t),$Ve=r(u0," \u2014 "),ik=n(u0,"A",{href:!0});var _Ce=s(ik);kVe=r(_Ce,"BigBirdConfig"),_Ce.forEach(t),SVe=r(u0," (BigBird model)"),u0.forEach(t),RVe=i(y),xf=n(y,"LI",{});var b0=s(xf);Soe=n(b0,"STRONG",{});var uCe=s(Soe);PVe=r(uCe,"bigbird_pegasus"),uCe.forEach(t),BVe=r(b0," \u2014 "),dk=n(b0,"A",{href:!0});var bCe=s(dk);IVe=r(bCe,"BigBirdPegasusConfig"),bCe.forEach(t),NVe=r(b0," (BigBirdPegasus model)"),b0.forEach(t),qVe=i(y),$f=n(y,"LI",{});var v0=s($f);Roe=n(v0,"STRONG",{});var vCe=s(Roe);jVe=r(vCe,"blenderbot"),vCe.forEach(t),DVe=r(v0," \u2014 "),ck=n(v0,"A",{href:!0});var FCe=s(ck);GVe=r(FCe,"BlenderbotConfig"),FCe.forEach(t),OVe=r(v0," (Blenderbot model)"),v0.forEach(t),VVe=i(y),kf=n(y,"LI",{});var F0=s(kf);Poe=n(F0,"STRONG",{});var TCe=s(Poe);XVe=r(TCe,"blenderbot-small"),TCe.forEach(t),zVe=r(F0," \u2014 "),fk=n(F0,"A",{href:!0});var MCe=s(fk);WVe=r(MCe,"BlenderbotSmallConfig"),MCe.forEach(t),QVe=r(F0," (BlenderbotSmall model)"),F0.forEach(t),HVe=i(y),Sf=n(y,"LI",{});var T0=s(Sf);Boe=n(T0,"STRONG",{});var ECe=s(Boe);UVe=r(ECe,"camembert"),ECe.forEach(t),JVe=r(T0," \u2014 "),mk=n(T0,"A",{href:!0});var CCe=s(mk);YVe=r(CCe,"CamembertConfig"),CCe.forEach(t),KVe=r(T0," (CamemBERT model)"),T0.forEach(t),ZVe=i(y),Rf=n(y,"LI",{});var M0=s(Rf);Ioe=n(M0,"STRONG",{});var wCe=s(Ioe);eXe=r(wCe,"canine"),wCe.forEach(t),oXe=r(M0," \u2014 "),gk=n(M0,"A",{href:!0});var ACe=s(gk);rXe=r(ACe,"CanineConfig"),ACe.forEach(t),tXe=r(M0," (Canine model)"),M0.forEach(t),aXe=i(y),Pf=n(y,"LI",{});var E0=s(Pf);Noe=n(E0,"STRONG",{});var yCe=s(Noe);nXe=r(yCe,"clip"),yCe.forEach(t),sXe=r(E0," \u2014 "),hk=n(E0,"A",{href:!0});var LCe=s(hk);lXe=r(LCe,"CLIPConfig"),LCe.forEach(t),iXe=r(E0," (CLIP model)"),E0.forEach(t),dXe=i(y),Bf=n(y,"LI",{});var C0=s(Bf);qoe=n(C0,"STRONG",{});var xCe=s(qoe);cXe=r(xCe,"convbert"),xCe.forEach(t),fXe=r(C0," \u2014 "),pk=n(C0,"A",{href:!0});var $Ce=s(pk);mXe=r($Ce,"ConvBertConfig"),$Ce.forEach(t),gXe=r(C0," (ConvBERT model)"),C0.forEach(t),hXe=i(y),If=n(y,"LI",{});var w0=s(If);joe=n(w0,"STRONG",{});var kCe=s(joe);pXe=r(kCe,"convnext"),kCe.forEach(t),_Xe=r(w0," \u2014 "),_k=n(w0,"A",{href:!0});var SCe=s(_k);uXe=r(SCe,"ConvNextConfig"),SCe.forEach(t),bXe=r(w0," (ConvNext model)"),w0.forEach(t),vXe=i(y),Nf=n(y,"LI",{});var A0=s(Nf);Doe=n(A0,"STRONG",{});var RCe=s(Doe);FXe=r(RCe,"ctrl"),RCe.forEach(t),TXe=r(A0," \u2014 "),uk=n(A0,"A",{href:!0});var PCe=s(uk);MXe=r(PCe,"CTRLConfig"),PCe.forEach(t),EXe=r(A0," (CTRL model)"),A0.forEach(t),CXe=i(y),qf=n(y,"LI",{});var y0=s(qf);Goe=n(y0,"STRONG",{});var BCe=s(Goe);wXe=r(BCe,"cvt"),BCe.forEach(t),AXe=r(y0," \u2014 "),bk=n(y0,"A",{href:!0});var ICe=s(bk);yXe=r(ICe,"CvtConfig"),ICe.forEach(t),LXe=r(y0," (CvT model)"),y0.forEach(t),xXe=i(y),jf=n(y,"LI",{});var L0=s(jf);Ooe=n(L0,"STRONG",{});var NCe=s(Ooe);$Xe=r(NCe,"data2vec-audio"),NCe.forEach(t),kXe=r(L0," \u2014 "),vk=n(L0,"A",{href:!0});var qCe=s(vk);SXe=r(qCe,"Data2VecAudioConfig"),qCe.forEach(t),RXe=r(L0," (Data2VecAudio model)"),L0.forEach(t),PXe=i(y),Df=n(y,"LI",{});var x0=s(Df);Voe=n(x0,"STRONG",{});var jCe=s(Voe);BXe=r(jCe,"data2vec-text"),jCe.forEach(t),IXe=r(x0," \u2014 "),Fk=n(x0,"A",{href:!0});var DCe=s(Fk);NXe=r(DCe,"Data2VecTextConfig"),DCe.forEach(t),qXe=r(x0," (Data2VecText model)"),x0.forEach(t),jXe=i(y),Gf=n(y,"LI",{});var $0=s(Gf);Xoe=n($0,"STRONG",{});var GCe=s(Xoe);DXe=r(GCe,"data2vec-vision"),GCe.forEach(t),GXe=r($0," \u2014 "),Tk=n($0,"A",{href:!0});var OCe=s(Tk);OXe=r(OCe,"Data2VecVisionConfig"),OCe.forEach(t),VXe=r($0," (Data2VecVision model)"),$0.forEach(t),XXe=i(y),Of=n(y,"LI",{});var k0=s(Of);zoe=n(k0,"STRONG",{});var VCe=s(zoe);zXe=r(VCe,"deberta"),VCe.forEach(t),WXe=r(k0," \u2014 "),Mk=n(k0,"A",{href:!0});var XCe=s(Mk);QXe=r(XCe,"DebertaConfig"),XCe.forEach(t),HXe=r(k0," (DeBERTa model)"),k0.forEach(t),UXe=i(y),Vf=n(y,"LI",{});var S0=s(Vf);Woe=n(S0,"STRONG",{});var zCe=s(Woe);JXe=r(zCe,"deberta-v2"),zCe.forEach(t),YXe=r(S0," \u2014 "),Ek=n(S0,"A",{href:!0});var WCe=s(Ek);KXe=r(WCe,"DebertaV2Config"),WCe.forEach(t),ZXe=r(S0," (DeBERTa-v2 model)"),S0.forEach(t),eze=i(y),Xf=n(y,"LI",{});var R0=s(Xf);Qoe=n(R0,"STRONG",{});var QCe=s(Qoe);oze=r(QCe,"decision_transformer"),QCe.forEach(t),rze=r(R0," \u2014 "),Ck=n(R0,"A",{href:!0});var HCe=s(Ck);tze=r(HCe,"DecisionTransformerConfig"),HCe.forEach(t),aze=r(R0," (Decision Transformer model)"),R0.forEach(t),nze=i(y),zf=n(y,"LI",{});var P0=s(zf);Hoe=n(P0,"STRONG",{});var UCe=s(Hoe);sze=r(UCe,"deit"),UCe.forEach(t),lze=r(P0," \u2014 "),wk=n(P0,"A",{href:!0});var MXr=s(wk);ize=r(MXr,"DeiTConfig"),MXr.forEach(t),dze=r(P0," (DeiT model)"),P0.forEach(t),cze=i(y),Wf=n(y,"LI",{});var JCe=s(Wf);Uoe=n(JCe,"STRONG",{});var EXr=s(Uoe);fze=r(EXr,"detr"),EXr.forEach(t),mze=r(JCe," \u2014 "),Ak=n(JCe,"A",{href:!0});var CXr=s(Ak);gze=r(CXr,"DetrConfig"),CXr.forEach(t),hze=r(JCe," (DETR model)"),JCe.forEach(t),pze=i(y),Qf=n(y,"LI",{});var YCe=s(Qf);Joe=n(YCe,"STRONG",{});var wXr=s(Joe);_ze=r(wXr,"distilbert"),wXr.forEach(t),uze=r(YCe," \u2014 "),yk=n(YCe,"A",{href:!0});var AXr=s(yk);bze=r(AXr,"DistilBertConfig"),AXr.forEach(t),vze=r(YCe," (DistilBERT model)"),YCe.forEach(t),Fze=i(y),Hf=n(y,"LI",{});var KCe=s(Hf);Yoe=n(KCe,"STRONG",{});var yXr=s(Yoe);Tze=r(yXr,"dpr"),yXr.forEach(t),Mze=r(KCe," \u2014 "),Lk=n(KCe,"A",{href:!0});var LXr=s(Lk);Eze=r(LXr,"DPRConfig"),LXr.forEach(t),Cze=r(KCe," (DPR model)"),KCe.forEach(t),wze=i(y),Uf=n(y,"LI",{});var ZCe=s(Uf);Koe=n(ZCe,"STRONG",{});var xXr=s(Koe);Aze=r(xXr,"dpt"),xXr.forEach(t),yze=r(ZCe," \u2014 "),xk=n(ZCe,"A",{href:!0});var $Xr=s(xk);Lze=r($Xr,"DPTConfig"),$Xr.forEach(t),xze=r(ZCe," (DPT model)"),ZCe.forEach(t),$ze=i(y),Jf=n(y,"LI",{});var ewe=s(Jf);Zoe=n(ewe,"STRONG",{});var kXr=s(Zoe);kze=r(kXr,"electra"),kXr.forEach(t),Sze=r(ewe," \u2014 "),$k=n(ewe,"A",{href:!0});var SXr=s($k);Rze=r(SXr,"ElectraConfig"),SXr.forEach(t),Pze=r(ewe," (ELECTRA model)"),ewe.forEach(t),Bze=i(y),Yf=n(y,"LI",{});var owe=s(Yf);ere=n(owe,"STRONG",{});var RXr=s(ere);Ize=r(RXr,"encoder-decoder"),RXr.forEach(t),Nze=r(owe," \u2014 "),kk=n(owe,"A",{href:!0});var PXr=s(kk);qze=r(PXr,"EncoderDecoderConfig"),PXr.forEach(t),jze=r(owe," (Encoder decoder model)"),owe.forEach(t),Dze=i(y),Kf=n(y,"LI",{});var rwe=s(Kf);ore=n(rwe,"STRONG",{});var BXr=s(ore);Gze=r(BXr,"flaubert"),BXr.forEach(t),Oze=r(rwe," \u2014 "),Sk=n(rwe,"A",{href:!0});var IXr=s(Sk);Vze=r(IXr,"FlaubertConfig"),IXr.forEach(t),Xze=r(rwe," (FlauBERT model)"),rwe.forEach(t),zze=i(y),Zf=n(y,"LI",{});var twe=s(Zf);rre=n(twe,"STRONG",{});var NXr=s(rre);Wze=r(NXr,"flava"),NXr.forEach(t),Qze=r(twe," \u2014 "),Rk=n(twe,"A",{href:!0});var qXr=s(Rk);Hze=r(qXr,"FlavaConfig"),qXr.forEach(t),Uze=r(twe," (Flava model)"),twe.forEach(t),Jze=i(y),em=n(y,"LI",{});var awe=s(em);tre=n(awe,"STRONG",{});var jXr=s(tre);Yze=r(jXr,"fnet"),jXr.forEach(t),Kze=r(awe," \u2014 "),Pk=n(awe,"A",{href:!0});var DXr=s(Pk);Zze=r(DXr,"FNetConfig"),DXr.forEach(t),eWe=r(awe," (FNet model)"),awe.forEach(t),oWe=i(y),om=n(y,"LI",{});var nwe=s(om);are=n(nwe,"STRONG",{});var GXr=s(are);rWe=r(GXr,"fsmt"),GXr.forEach(t),tWe=r(nwe," \u2014 "),Bk=n(nwe,"A",{href:!0});var OXr=s(Bk);aWe=r(OXr,"FSMTConfig"),OXr.forEach(t),nWe=r(nwe," (FairSeq Machine-Translation model)"),nwe.forEach(t),sWe=i(y),rm=n(y,"LI",{});var swe=s(rm);nre=n(swe,"STRONG",{});var VXr=s(nre);lWe=r(VXr,"funnel"),VXr.forEach(t),iWe=r(swe," \u2014 "),Ik=n(swe,"A",{href:!0});var XXr=s(Ik);dWe=r(XXr,"FunnelConfig"),XXr.forEach(t),cWe=r(swe," (Funnel Transformer model)"),swe.forEach(t),fWe=i(y),tm=n(y,"LI",{});var lwe=s(tm);sre=n(lwe,"STRONG",{});var zXr=s(sre);mWe=r(zXr,"glpn"),zXr.forEach(t),gWe=r(lwe," \u2014 "),Nk=n(lwe,"A",{href:!0});var WXr=s(Nk);hWe=r(WXr,"GLPNConfig"),WXr.forEach(t),pWe=r(lwe," (GLPN model)"),lwe.forEach(t),_We=i(y),am=n(y,"LI",{});var iwe=s(am);lre=n(iwe,"STRONG",{});var QXr=s(lre);uWe=r(QXr,"gpt2"),QXr.forEach(t),bWe=r(iwe," \u2014 "),qk=n(iwe,"A",{href:!0});var HXr=s(qk);vWe=r(HXr,"GPT2Config"),HXr.forEach(t),FWe=r(iwe," (OpenAI GPT-2 model)"),iwe.forEach(t),TWe=i(y),nm=n(y,"LI",{});var dwe=s(nm);ire=n(dwe,"STRONG",{});var UXr=s(ire);MWe=r(UXr,"gpt_neo"),UXr.forEach(t),EWe=r(dwe," \u2014 "),jk=n(dwe,"A",{href:!0});var JXr=s(jk);CWe=r(JXr,"GPTNeoConfig"),JXr.forEach(t),wWe=r(dwe," (GPT Neo model)"),dwe.forEach(t),AWe=i(y),sm=n(y,"LI",{});var cwe=s(sm);dre=n(cwe,"STRONG",{});var YXr=s(dre);yWe=r(YXr,"gpt_neox"),YXr.forEach(t),LWe=r(cwe," \u2014 "),Dk=n(cwe,"A",{href:!0});var KXr=s(Dk);xWe=r(KXr,"GPTNeoXConfig"),KXr.forEach(t),$We=r(cwe," (GPT NeoX model)"),cwe.forEach(t),kWe=i(y),lm=n(y,"LI",{});var fwe=s(lm);cre=n(fwe,"STRONG",{});var ZXr=s(cre);SWe=r(ZXr,"gptj"),ZXr.forEach(t),RWe=r(fwe," \u2014 "),Gk=n(fwe,"A",{href:!0});var ezr=s(Gk);PWe=r(ezr,"GPTJConfig"),ezr.forEach(t),BWe=r(fwe," (GPT-J model)"),fwe.forEach(t),IWe=i(y),im=n(y,"LI",{});var mwe=s(im);fre=n(mwe,"STRONG",{});var ozr=s(fre);NWe=r(ozr,"hubert"),ozr.forEach(t),qWe=r(mwe," \u2014 "),Ok=n(mwe,"A",{href:!0});var rzr=s(Ok);jWe=r(rzr,"HubertConfig"),rzr.forEach(t),DWe=r(mwe," (Hubert model)"),mwe.forEach(t),GWe=i(y),dm=n(y,"LI",{});var gwe=s(dm);mre=n(gwe,"STRONG",{});var tzr=s(mre);OWe=r(tzr,"ibert"),tzr.forEach(t),VWe=r(gwe," \u2014 "),Vk=n(gwe,"A",{href:!0});var azr=s(Vk);XWe=r(azr,"IBertConfig"),azr.forEach(t),zWe=r(gwe," (I-BERT model)"),gwe.forEach(t),WWe=i(y),cm=n(y,"LI",{});var hwe=s(cm);gre=n(hwe,"STRONG",{});var nzr=s(gre);QWe=r(nzr,"imagegpt"),nzr.forEach(t),HWe=r(hwe," \u2014 "),Xk=n(hwe,"A",{href:!0});var szr=s(Xk);UWe=r(szr,"ImageGPTConfig"),szr.forEach(t),JWe=r(hwe," (ImageGPT model)"),hwe.forEach(t),YWe=i(y),fm=n(y,"LI",{});var pwe=s(fm);hre=n(pwe,"STRONG",{});var lzr=s(hre);KWe=r(lzr,"layoutlm"),lzr.forEach(t),ZWe=r(pwe," \u2014 "),zk=n(pwe,"A",{href:!0});var izr=s(zk);eQe=r(izr,"LayoutLMConfig"),izr.forEach(t),oQe=r(pwe," (LayoutLM model)"),pwe.forEach(t),rQe=i(y),mm=n(y,"LI",{});var _we=s(mm);pre=n(_we,"STRONG",{});var dzr=s(pre);tQe=r(dzr,"layoutlmv2"),dzr.forEach(t),aQe=r(_we," \u2014 "),Wk=n(_we,"A",{href:!0});var czr=s(Wk);nQe=r(czr,"LayoutLMv2Config"),czr.forEach(t),sQe=r(_we," (LayoutLMv2 model)"),_we.forEach(t),lQe=i(y),gm=n(y,"LI",{});var uwe=s(gm);_re=n(uwe,"STRONG",{});var fzr=s(_re);iQe=r(fzr,"layoutlmv3"),fzr.forEach(t),dQe=r(uwe," \u2014 "),Qk=n(uwe,"A",{href:!0});var mzr=s(Qk);cQe=r(mzr,"LayoutLMv3Config"),mzr.forEach(t),fQe=r(uwe," (LayoutLMv3 model)"),uwe.forEach(t),mQe=i(y),hm=n(y,"LI",{});var bwe=s(hm);ure=n(bwe,"STRONG",{});var gzr=s(ure);gQe=r(gzr,"led"),gzr.forEach(t),hQe=r(bwe," \u2014 "),Hk=n(bwe,"A",{href:!0});var hzr=s(Hk);pQe=r(hzr,"LEDConfig"),hzr.forEach(t),_Qe=r(bwe," (LED model)"),bwe.forEach(t),uQe=i(y),pm=n(y,"LI",{});var vwe=s(pm);bre=n(vwe,"STRONG",{});var pzr=s(bre);bQe=r(pzr,"longformer"),pzr.forEach(t),vQe=r(vwe," \u2014 "),Uk=n(vwe,"A",{href:!0});var _zr=s(Uk);FQe=r(_zr,"LongformerConfig"),_zr.forEach(t),TQe=r(vwe," (Longformer model)"),vwe.forEach(t),MQe=i(y),_m=n(y,"LI",{});var Fwe=s(_m);vre=n(Fwe,"STRONG",{});var uzr=s(vre);EQe=r(uzr,"luke"),uzr.forEach(t),CQe=r(Fwe," \u2014 "),Jk=n(Fwe,"A",{href:!0});var bzr=s(Jk);wQe=r(bzr,"LukeConfig"),bzr.forEach(t),AQe=r(Fwe," (LUKE model)"),Fwe.forEach(t),yQe=i(y),um=n(y,"LI",{});var Twe=s(um);Fre=n(Twe,"STRONG",{});var vzr=s(Fre);LQe=r(vzr,"lxmert"),vzr.forEach(t),xQe=r(Twe," \u2014 "),Yk=n(Twe,"A",{href:!0});var Fzr=s(Yk);$Qe=r(Fzr,"LxmertConfig"),Fzr.forEach(t),kQe=r(Twe," (LXMERT model)"),Twe.forEach(t),SQe=i(y),bm=n(y,"LI",{});var Mwe=s(bm);Tre=n(Mwe,"STRONG",{});var Tzr=s(Tre);RQe=r(Tzr,"m2m_100"),Tzr.forEach(t),PQe=r(Mwe," \u2014 "),Kk=n(Mwe,"A",{href:!0});var Mzr=s(Kk);BQe=r(Mzr,"M2M100Config"),Mzr.forEach(t),IQe=r(Mwe," (M2M100 model)"),Mwe.forEach(t),NQe=i(y),vm=n(y,"LI",{});var Ewe=s(vm);Mre=n(Ewe,"STRONG",{});var Ezr=s(Mre);qQe=r(Ezr,"marian"),Ezr.forEach(t),jQe=r(Ewe," \u2014 "),Zk=n(Ewe,"A",{href:!0});var Czr=s(Zk);DQe=r(Czr,"MarianConfig"),Czr.forEach(t),GQe=r(Ewe," (Marian model)"),Ewe.forEach(t),OQe=i(y),Fm=n(y,"LI",{});var Cwe=s(Fm);Ere=n(Cwe,"STRONG",{});var wzr=s(Ere);VQe=r(wzr,"maskformer"),wzr.forEach(t),XQe=r(Cwe," \u2014 "),eS=n(Cwe,"A",{href:!0});var Azr=s(eS);zQe=r(Azr,"MaskFormerConfig"),Azr.forEach(t),WQe=r(Cwe," (MaskFormer model)"),Cwe.forEach(t),QQe=i(y),Tm=n(y,"LI",{});var wwe=s(Tm);Cre=n(wwe,"STRONG",{});var yzr=s(Cre);HQe=r(yzr,"mbart"),yzr.forEach(t),UQe=r(wwe," \u2014 "),oS=n(wwe,"A",{href:!0});var Lzr=s(oS);JQe=r(Lzr,"MBartConfig"),Lzr.forEach(t),YQe=r(wwe," (mBART model)"),wwe.forEach(t),KQe=i(y),Mm=n(y,"LI",{});var Awe=s(Mm);wre=n(Awe,"STRONG",{});var xzr=s(wre);ZQe=r(xzr,"megatron-bert"),xzr.forEach(t),eHe=r(Awe," \u2014 "),rS=n(Awe,"A",{href:!0});var $zr=s(rS);oHe=r($zr,"MegatronBertConfig"),$zr.forEach(t),rHe=r(Awe," (MegatronBert model)"),Awe.forEach(t),tHe=i(y),Em=n(y,"LI",{});var ywe=s(Em);Are=n(ywe,"STRONG",{});var kzr=s(Are);aHe=r(kzr,"mobilebert"),kzr.forEach(t),nHe=r(ywe," \u2014 "),tS=n(ywe,"A",{href:!0});var Szr=s(tS);sHe=r(Szr,"MobileBertConfig"),Szr.forEach(t),lHe=r(ywe," (MobileBERT model)"),ywe.forEach(t),iHe=i(y),Cm=n(y,"LI",{});var Lwe=s(Cm);yre=n(Lwe,"STRONG",{});var Rzr=s(yre);dHe=r(Rzr,"mobilevit"),Rzr.forEach(t),cHe=r(Lwe," \u2014 "),aS=n(Lwe,"A",{href:!0});var Pzr=s(aS);fHe=r(Pzr,"MobileViTConfig"),Pzr.forEach(t),mHe=r(Lwe," (MobileViT model)"),Lwe.forEach(t),gHe=i(y),wm=n(y,"LI",{});var xwe=s(wm);Lre=n(xwe,"STRONG",{});var Bzr=s(Lre);hHe=r(Bzr,"mpnet"),Bzr.forEach(t),pHe=r(xwe," \u2014 "),nS=n(xwe,"A",{href:!0});var Izr=s(nS);_He=r(Izr,"MPNetConfig"),Izr.forEach(t),uHe=r(xwe," (MPNet model)"),xwe.forEach(t),bHe=i(y),Am=n(y,"LI",{});var $we=s(Am);xre=n($we,"STRONG",{});var Nzr=s(xre);vHe=r(Nzr,"mt5"),Nzr.forEach(t),FHe=r($we," \u2014 "),sS=n($we,"A",{href:!0});var qzr=s(sS);THe=r(qzr,"MT5Config"),qzr.forEach(t),MHe=r($we," (mT5 model)"),$we.forEach(t),EHe=i(y),ym=n(y,"LI",{});var kwe=s(ym);$re=n(kwe,"STRONG",{});var jzr=s($re);CHe=r(jzr,"nystromformer"),jzr.forEach(t),wHe=r(kwe," \u2014 "),lS=n(kwe,"A",{href:!0});var Dzr=s(lS);AHe=r(Dzr,"NystromformerConfig"),Dzr.forEach(t),yHe=r(kwe," (Nystromformer model)"),kwe.forEach(t),LHe=i(y),Lm=n(y,"LI",{});var Swe=s(Lm);kre=n(Swe,"STRONG",{});var Gzr=s(kre);xHe=r(Gzr,"openai-gpt"),Gzr.forEach(t),$He=r(Swe," \u2014 "),iS=n(Swe,"A",{href:!0});var Ozr=s(iS);kHe=r(Ozr,"OpenAIGPTConfig"),Ozr.forEach(t),SHe=r(Swe," (OpenAI GPT model)"),Swe.forEach(t),RHe=i(y),xm=n(y,"LI",{});var Rwe=s(xm);Sre=n(Rwe,"STRONG",{});var Vzr=s(Sre);PHe=r(Vzr,"opt"),Vzr.forEach(t),BHe=r(Rwe," \u2014 "),dS=n(Rwe,"A",{href:!0});var Xzr=s(dS);IHe=r(Xzr,"OPTConfig"),Xzr.forEach(t),NHe=r(Rwe," (OPT model)"),Rwe.forEach(t),qHe=i(y),$m=n(y,"LI",{});var Pwe=s($m);Rre=n(Pwe,"STRONG",{});var zzr=s(Rre);jHe=r(zzr,"pegasus"),zzr.forEach(t),DHe=r(Pwe," \u2014 "),cS=n(Pwe,"A",{href:!0});var Wzr=s(cS);GHe=r(Wzr,"PegasusConfig"),Wzr.forEach(t),OHe=r(Pwe," (Pegasus model)"),Pwe.forEach(t),VHe=i(y),km=n(y,"LI",{});var Bwe=s(km);Pre=n(Bwe,"STRONG",{});var Qzr=s(Pre);XHe=r(Qzr,"perceiver"),Qzr.forEach(t),zHe=r(Bwe," \u2014 "),fS=n(Bwe,"A",{href:!0});var Hzr=s(fS);WHe=r(Hzr,"PerceiverConfig"),Hzr.forEach(t),QHe=r(Bwe," (Perceiver model)"),Bwe.forEach(t),HHe=i(y),Sm=n(y,"LI",{});var Iwe=s(Sm);Bre=n(Iwe,"STRONG",{});var Uzr=s(Bre);UHe=r(Uzr,"plbart"),Uzr.forEach(t),JHe=r(Iwe," \u2014 "),mS=n(Iwe,"A",{href:!0});var Jzr=s(mS);YHe=r(Jzr,"PLBartConfig"),Jzr.forEach(t),KHe=r(Iwe," (PLBart model)"),Iwe.forEach(t),ZHe=i(y),Rm=n(y,"LI",{});var Nwe=s(Rm);Ire=n(Nwe,"STRONG",{});var Yzr=s(Ire);eUe=r(Yzr,"poolformer"),Yzr.forEach(t),oUe=r(Nwe," \u2014 "),gS=n(Nwe,"A",{href:!0});var Kzr=s(gS);rUe=r(Kzr,"PoolFormerConfig"),Kzr.forEach(t),tUe=r(Nwe," (PoolFormer model)"),Nwe.forEach(t),aUe=i(y),Pm=n(y,"LI",{});var qwe=s(Pm);Nre=n(qwe,"STRONG",{});var Zzr=s(Nre);nUe=r(Zzr,"prophetnet"),Zzr.forEach(t),sUe=r(qwe," \u2014 "),hS=n(qwe,"A",{href:!0});var eWr=s(hS);lUe=r(eWr,"ProphetNetConfig"),eWr.forEach(t),iUe=r(qwe," (ProphetNet model)"),qwe.forEach(t),dUe=i(y),Bm=n(y,"LI",{});var jwe=s(Bm);qre=n(jwe,"STRONG",{});var oWr=s(qre);cUe=r(oWr,"qdqbert"),oWr.forEach(t),fUe=r(jwe," \u2014 "),pS=n(jwe,"A",{href:!0});var rWr=s(pS);mUe=r(rWr,"QDQBertConfig"),rWr.forEach(t),gUe=r(jwe," (QDQBert model)"),jwe.forEach(t),hUe=i(y),Im=n(y,"LI",{});var Dwe=s(Im);jre=n(Dwe,"STRONG",{});var tWr=s(jre);pUe=r(tWr,"rag"),tWr.forEach(t),_Ue=r(Dwe," \u2014 "),_S=n(Dwe,"A",{href:!0});var aWr=s(_S);uUe=r(aWr,"RagConfig"),aWr.forEach(t),bUe=r(Dwe," (RAG model)"),Dwe.forEach(t),vUe=i(y),Nm=n(y,"LI",{});var Gwe=s(Nm);Dre=n(Gwe,"STRONG",{});var nWr=s(Dre);FUe=r(nWr,"realm"),nWr.forEach(t),TUe=r(Gwe," \u2014 "),uS=n(Gwe,"A",{href:!0});var sWr=s(uS);MUe=r(sWr,"RealmConfig"),sWr.forEach(t),EUe=r(Gwe," (Realm model)"),Gwe.forEach(t),CUe=i(y),qm=n(y,"LI",{});var Owe=s(qm);Gre=n(Owe,"STRONG",{});var lWr=s(Gre);wUe=r(lWr,"reformer"),lWr.forEach(t),AUe=r(Owe," \u2014 "),bS=n(Owe,"A",{href:!0});var iWr=s(bS);yUe=r(iWr,"ReformerConfig"),iWr.forEach(t),LUe=r(Owe," (Reformer model)"),Owe.forEach(t),xUe=i(y),jm=n(y,"LI",{});var Vwe=s(jm);Ore=n(Vwe,"STRONG",{});var dWr=s(Ore);$Ue=r(dWr,"regnet"),dWr.forEach(t),kUe=r(Vwe," \u2014 "),vS=n(Vwe,"A",{href:!0});var cWr=s(vS);SUe=r(cWr,"RegNetConfig"),cWr.forEach(t),RUe=r(Vwe," (RegNet model)"),Vwe.forEach(t),PUe=i(y),Dm=n(y,"LI",{});var Xwe=s(Dm);Vre=n(Xwe,"STRONG",{});var fWr=s(Vre);BUe=r(fWr,"rembert"),fWr.forEach(t),IUe=r(Xwe," \u2014 "),FS=n(Xwe,"A",{href:!0});var mWr=s(FS);NUe=r(mWr,"RemBertConfig"),mWr.forEach(t),qUe=r(Xwe," (RemBERT model)"),Xwe.forEach(t),jUe=i(y),Gm=n(y,"LI",{});var zwe=s(Gm);Xre=n(zwe,"STRONG",{});var gWr=s(Xre);DUe=r(gWr,"resnet"),gWr.forEach(t),GUe=r(zwe," \u2014 "),TS=n(zwe,"A",{href:!0});var hWr=s(TS);OUe=r(hWr,"ResNetConfig"),hWr.forEach(t),VUe=r(zwe," (ResNet model)"),zwe.forEach(t),XUe=i(y),Om=n(y,"LI",{});var Wwe=s(Om);zre=n(Wwe,"STRONG",{});var pWr=s(zre);zUe=r(pWr,"retribert"),pWr.forEach(t),WUe=r(Wwe," \u2014 "),MS=n(Wwe,"A",{href:!0});var _Wr=s(MS);QUe=r(_Wr,"RetriBertConfig"),_Wr.forEach(t),HUe=r(Wwe," (RetriBERT model)"),Wwe.forEach(t),UUe=i(y),Vm=n(y,"LI",{});var Qwe=s(Vm);Wre=n(Qwe,"STRONG",{});var uWr=s(Wre);JUe=r(uWr,"roberta"),uWr.forEach(t),YUe=r(Qwe," \u2014 "),ES=n(Qwe,"A",{href:!0});var bWr=s(ES);KUe=r(bWr,"RobertaConfig"),bWr.forEach(t),ZUe=r(Qwe," (RoBERTa model)"),Qwe.forEach(t),eJe=i(y),Xm=n(y,"LI",{});var Hwe=s(Xm);Qre=n(Hwe,"STRONG",{});var vWr=s(Qre);oJe=r(vWr,"roformer"),vWr.forEach(t),rJe=r(Hwe," \u2014 "),CS=n(Hwe,"A",{href:!0});var FWr=s(CS);tJe=r(FWr,"RoFormerConfig"),FWr.forEach(t),aJe=r(Hwe," (RoFormer model)"),Hwe.forEach(t),nJe=i(y),zm=n(y,"LI",{});var Uwe=s(zm);Hre=n(Uwe,"STRONG",{});var TWr=s(Hre);sJe=r(TWr,"segformer"),TWr.forEach(t),lJe=r(Uwe," \u2014 "),wS=n(Uwe,"A",{href:!0});var MWr=s(wS);iJe=r(MWr,"SegformerConfig"),MWr.forEach(t),dJe=r(Uwe," (SegFormer model)"),Uwe.forEach(t),cJe=i(y),Wm=n(y,"LI",{});var Jwe=s(Wm);Ure=n(Jwe,"STRONG",{});var EWr=s(Ure);fJe=r(EWr,"sew"),EWr.forEach(t),mJe=r(Jwe," \u2014 "),AS=n(Jwe,"A",{href:!0});var CWr=s(AS);gJe=r(CWr,"SEWConfig"),CWr.forEach(t),hJe=r(Jwe," (SEW model)"),Jwe.forEach(t),pJe=i(y),Qm=n(y,"LI",{});var Ywe=s(Qm);Jre=n(Ywe,"STRONG",{});var wWr=s(Jre);_Je=r(wWr,"sew-d"),wWr.forEach(t),uJe=r(Ywe," \u2014 "),yS=n(Ywe,"A",{href:!0});var AWr=s(yS);bJe=r(AWr,"SEWDConfig"),AWr.forEach(t),vJe=r(Ywe," (SEW-D model)"),Ywe.forEach(t),FJe=i(y),Hm=n(y,"LI",{});var Kwe=s(Hm);Yre=n(Kwe,"STRONG",{});var yWr=s(Yre);TJe=r(yWr,"speech-encoder-decoder"),yWr.forEach(t),MJe=r(Kwe," \u2014 "),LS=n(Kwe,"A",{href:!0});var LWr=s(LS);EJe=r(LWr,"SpeechEncoderDecoderConfig"),LWr.forEach(t),CJe=r(Kwe," (Speech Encoder decoder model)"),Kwe.forEach(t),wJe=i(y),Um=n(y,"LI",{});var Zwe=s(Um);Kre=n(Zwe,"STRONG",{});var xWr=s(Kre);AJe=r(xWr,"speech_to_text"),xWr.forEach(t),yJe=r(Zwe," \u2014 "),xS=n(Zwe,"A",{href:!0});var $Wr=s(xS);LJe=r($Wr,"Speech2TextConfig"),$Wr.forEach(t),xJe=r(Zwe," (Speech2Text model)"),Zwe.forEach(t),$Je=i(y),Jm=n(y,"LI",{});var e0e=s(Jm);Zre=n(e0e,"STRONG",{});var kWr=s(Zre);kJe=r(kWr,"speech_to_text_2"),kWr.forEach(t),SJe=r(e0e," \u2014 "),$S=n(e0e,"A",{href:!0});var SWr=s($S);RJe=r(SWr,"Speech2Text2Config"),SWr.forEach(t),PJe=r(e0e," (Speech2Text2 model)"),e0e.forEach(t),BJe=i(y),Ym=n(y,"LI",{});var o0e=s(Ym);ete=n(o0e,"STRONG",{});var RWr=s(ete);IJe=r(RWr,"splinter"),RWr.forEach(t),NJe=r(o0e," \u2014 "),kS=n(o0e,"A",{href:!0});var PWr=s(kS);qJe=r(PWr,"SplinterConfig"),PWr.forEach(t),jJe=r(o0e," (Splinter model)"),o0e.forEach(t),DJe=i(y),Km=n(y,"LI",{});var r0e=s(Km);ote=n(r0e,"STRONG",{});var BWr=s(ote);GJe=r(BWr,"squeezebert"),BWr.forEach(t),OJe=r(r0e," \u2014 "),SS=n(r0e,"A",{href:!0});var IWr=s(SS);VJe=r(IWr,"SqueezeBertConfig"),IWr.forEach(t),XJe=r(r0e," (SqueezeBERT model)"),r0e.forEach(t),zJe=i(y),Zm=n(y,"LI",{});var t0e=s(Zm);rte=n(t0e,"STRONG",{});var NWr=s(rte);WJe=r(NWr,"swin"),NWr.forEach(t),QJe=r(t0e," \u2014 "),RS=n(t0e,"A",{href:!0});var qWr=s(RS);HJe=r(qWr,"SwinConfig"),qWr.forEach(t),UJe=r(t0e," (Swin model)"),t0e.forEach(t),JJe=i(y),eg=n(y,"LI",{});var a0e=s(eg);tte=n(a0e,"STRONG",{});var jWr=s(tte);YJe=r(jWr,"t5"),jWr.forEach(t),KJe=r(a0e," \u2014 "),PS=n(a0e,"A",{href:!0});var DWr=s(PS);ZJe=r(DWr,"T5Config"),DWr.forEach(t),eYe=r(a0e," (T5 model)"),a0e.forEach(t),oYe=i(y),og=n(y,"LI",{});var n0e=s(og);ate=n(n0e,"STRONG",{});var GWr=s(ate);rYe=r(GWr,"tapas"),GWr.forEach(t),tYe=r(n0e," \u2014 "),BS=n(n0e,"A",{href:!0});var OWr=s(BS);aYe=r(OWr,"TapasConfig"),OWr.forEach(t),nYe=r(n0e," (TAPAS model)"),n0e.forEach(t),sYe=i(y),rg=n(y,"LI",{});var s0e=s(rg);nte=n(s0e,"STRONG",{});var VWr=s(nte);lYe=r(VWr,"trajectory_transformer"),VWr.forEach(t),iYe=r(s0e," \u2014 "),IS=n(s0e,"A",{href:!0});var XWr=s(IS);dYe=r(XWr,"TrajectoryTransformerConfig"),XWr.forEach(t),cYe=r(s0e," (Trajectory Transformer model)"),s0e.forEach(t),fYe=i(y),tg=n(y,"LI",{});var l0e=s(tg);ste=n(l0e,"STRONG",{});var zWr=s(ste);mYe=r(zWr,"transfo-xl"),zWr.forEach(t),gYe=r(l0e," \u2014 "),NS=n(l0e,"A",{href:!0});var WWr=s(NS);hYe=r(WWr,"TransfoXLConfig"),WWr.forEach(t),pYe=r(l0e," (Transformer-XL model)"),l0e.forEach(t),_Ye=i(y),ag=n(y,"LI",{});var i0e=s(ag);lte=n(i0e,"STRONG",{});var QWr=s(lte);uYe=r(QWr,"trocr"),QWr.forEach(t),bYe=r(i0e," \u2014 "),qS=n(i0e,"A",{href:!0});var HWr=s(qS);vYe=r(HWr,"TrOCRConfig"),HWr.forEach(t),FYe=r(i0e," (TrOCR model)"),i0e.forEach(t),TYe=i(y),ng=n(y,"LI",{});var d0e=s(ng);ite=n(d0e,"STRONG",{});var UWr=s(ite);MYe=r(UWr,"unispeech"),UWr.forEach(t),EYe=r(d0e," \u2014 "),jS=n(d0e,"A",{href:!0});var JWr=s(jS);CYe=r(JWr,"UniSpeechConfig"),JWr.forEach(t),wYe=r(d0e," (UniSpeech model)"),d0e.forEach(t),AYe=i(y),sg=n(y,"LI",{});var c0e=s(sg);dte=n(c0e,"STRONG",{});var YWr=s(dte);yYe=r(YWr,"unispeech-sat"),YWr.forEach(t),LYe=r(c0e," \u2014 "),DS=n(c0e,"A",{href:!0});var KWr=s(DS);xYe=r(KWr,"UniSpeechSatConfig"),KWr.forEach(t),$Ye=r(c0e," (UniSpeechSat model)"),c0e.forEach(t),kYe=i(y),lg=n(y,"LI",{});var f0e=s(lg);cte=n(f0e,"STRONG",{});var ZWr=s(cte);SYe=r(ZWr,"van"),ZWr.forEach(t),RYe=r(f0e," \u2014 "),GS=n(f0e,"A",{href:!0});var eQr=s(GS);PYe=r(eQr,"VanConfig"),eQr.forEach(t),BYe=r(f0e," (VAN model)"),f0e.forEach(t),IYe=i(y),ig=n(y,"LI",{});var m0e=s(ig);fte=n(m0e,"STRONG",{});var oQr=s(fte);NYe=r(oQr,"vilt"),oQr.forEach(t),qYe=r(m0e," \u2014 "),OS=n(m0e,"A",{href:!0});var rQr=s(OS);jYe=r(rQr,"ViltConfig"),rQr.forEach(t),DYe=r(m0e," (ViLT model)"),m0e.forEach(t),GYe=i(y),dg=n(y,"LI",{});var g0e=s(dg);mte=n(g0e,"STRONG",{});var tQr=s(mte);OYe=r(tQr,"vision-encoder-decoder"),tQr.forEach(t),VYe=r(g0e," \u2014 "),VS=n(g0e,"A",{href:!0});var aQr=s(VS);XYe=r(aQr,"VisionEncoderDecoderConfig"),aQr.forEach(t),zYe=r(g0e," (Vision Encoder decoder model)"),g0e.forEach(t),WYe=i(y),cg=n(y,"LI",{});var h0e=s(cg);gte=n(h0e,"STRONG",{});var nQr=s(gte);QYe=r(nQr,"vision-text-dual-encoder"),nQr.forEach(t),HYe=r(h0e," \u2014 "),XS=n(h0e,"A",{href:!0});var sQr=s(XS);UYe=r(sQr,"VisionTextDualEncoderConfig"),sQr.forEach(t),JYe=r(h0e," (VisionTextDualEncoder model)"),h0e.forEach(t),YYe=i(y),fg=n(y,"LI",{});var p0e=s(fg);hte=n(p0e,"STRONG",{});var lQr=s(hte);KYe=r(lQr,"visual_bert"),lQr.forEach(t),ZYe=r(p0e," \u2014 "),zS=n(p0e,"A",{href:!0});var iQr=s(zS);eKe=r(iQr,"VisualBertConfig"),iQr.forEach(t),oKe=r(p0e," (VisualBert model)"),p0e.forEach(t),rKe=i(y),mg=n(y,"LI",{});var _0e=s(mg);pte=n(_0e,"STRONG",{});var dQr=s(pte);tKe=r(dQr,"vit"),dQr.forEach(t),aKe=r(_0e," \u2014 "),WS=n(_0e,"A",{href:!0});var cQr=s(WS);nKe=r(cQr,"ViTConfig"),cQr.forEach(t),sKe=r(_0e," (ViT model)"),_0e.forEach(t),lKe=i(y),gg=n(y,"LI",{});var u0e=s(gg);_te=n(u0e,"STRONG",{});var fQr=s(_te);iKe=r(fQr,"vit_mae"),fQr.forEach(t),dKe=r(u0e," \u2014 "),QS=n(u0e,"A",{href:!0});var mQr=s(QS);cKe=r(mQr,"ViTMAEConfig"),mQr.forEach(t),fKe=r(u0e," (ViTMAE model)"),u0e.forEach(t),mKe=i(y),hg=n(y,"LI",{});var b0e=s(hg);ute=n(b0e,"STRONG",{});var gQr=s(ute);gKe=r(gQr,"wav2vec2"),gQr.forEach(t),hKe=r(b0e," \u2014 "),HS=n(b0e,"A",{href:!0});var hQr=s(HS);pKe=r(hQr,"Wav2Vec2Config"),hQr.forEach(t),_Ke=r(b0e," (Wav2Vec2 model)"),b0e.forEach(t),uKe=i(y),pg=n(y,"LI",{});var v0e=s(pg);bte=n(v0e,"STRONG",{});var pQr=s(bte);bKe=r(pQr,"wav2vec2-conformer"),pQr.forEach(t),vKe=r(v0e," \u2014 "),US=n(v0e,"A",{href:!0});var _Qr=s(US);FKe=r(_Qr,"Wav2Vec2ConformerConfig"),_Qr.forEach(t),TKe=r(v0e," (Wav2Vec2-Conformer model)"),v0e.forEach(t),MKe=i(y),_g=n(y,"LI",{});var F0e=s(_g);vte=n(F0e,"STRONG",{});var uQr=s(vte);EKe=r(uQr,"wavlm"),uQr.forEach(t),CKe=r(F0e," \u2014 "),JS=n(F0e,"A",{href:!0});var bQr=s(JS);wKe=r(bQr,"WavLMConfig"),bQr.forEach(t),AKe=r(F0e," (WavLM model)"),F0e.forEach(t),yKe=i(y),ug=n(y,"LI",{});var T0e=s(ug);Fte=n(T0e,"STRONG",{});var vQr=s(Fte);LKe=r(vQr,"xglm"),vQr.forEach(t),xKe=r(T0e," \u2014 "),YS=n(T0e,"A",{href:!0});var FQr=s(YS);$Ke=r(FQr,"XGLMConfig"),FQr.forEach(t),kKe=r(T0e," (XGLM model)"),T0e.forEach(t),SKe=i(y),bg=n(y,"LI",{});var M0e=s(bg);Tte=n(M0e,"STRONG",{});var TQr=s(Tte);RKe=r(TQr,"xlm"),TQr.forEach(t),PKe=r(M0e," \u2014 "),KS=n(M0e,"A",{href:!0});var MQr=s(KS);BKe=r(MQr,"XLMConfig"),MQr.forEach(t),IKe=r(M0e," (XLM model)"),M0e.forEach(t),NKe=i(y),vg=n(y,"LI",{});var E0e=s(vg);Mte=n(E0e,"STRONG",{});var EQr=s(Mte);qKe=r(EQr,"xlm-prophetnet"),EQr.forEach(t),jKe=r(E0e," \u2014 "),ZS=n(E0e,"A",{href:!0});var CQr=s(ZS);DKe=r(CQr,"XLMProphetNetConfig"),CQr.forEach(t),GKe=r(E0e," (XLMProphetNet model)"),E0e.forEach(t),OKe=i(y),Fg=n(y,"LI",{});var C0e=s(Fg);Ete=n(C0e,"STRONG",{});var wQr=s(Ete);VKe=r(wQr,"xlm-roberta"),wQr.forEach(t),XKe=r(C0e," \u2014 "),eR=n(C0e,"A",{href:!0});var AQr=s(eR);zKe=r(AQr,"XLMRobertaConfig"),AQr.forEach(t),WKe=r(C0e," (XLM-RoBERTa model)"),C0e.forEach(t),QKe=i(y),Tg=n(y,"LI",{});var w0e=s(Tg);Cte=n(w0e,"STRONG",{});var yQr=s(Cte);HKe=r(yQr,"xlm-roberta-xl"),yQr.forEach(t),UKe=r(w0e," \u2014 "),oR=n(w0e,"A",{href:!0});var LQr=s(oR);JKe=r(LQr,"XLMRobertaXLConfig"),LQr.forEach(t),YKe=r(w0e," (XLM-RoBERTa-XL model)"),w0e.forEach(t),KKe=i(y),Mg=n(y,"LI",{});var A0e=s(Mg);wte=n(A0e,"STRONG",{});var xQr=s(wte);ZKe=r(xQr,"xlnet"),xQr.forEach(t),eZe=r(A0e," \u2014 "),rR=n(A0e,"A",{href:!0});var $Qr=s(rR);oZe=r($Qr,"XLNetConfig"),$Qr.forEach(t),rZe=r(A0e," (XLNet model)"),A0e.forEach(t),tZe=i(y),Eg=n(y,"LI",{});var y0e=s(Eg);Ate=n(y0e,"STRONG",{});var kQr=s(Ate);aZe=r(kQr,"yolos"),kQr.forEach(t),nZe=r(y0e," \u2014 "),tR=n(y0e,"A",{href:!0});var SQr=s(tR);sZe=r(SQr,"YolosConfig"),SQr.forEach(t),lZe=r(y0e," (YOLOS model)"),y0e.forEach(t),iZe=i(y),Cg=n(y,"LI",{});var L0e=s(Cg);yte=n(L0e,"STRONG",{});var RQr=s(yte);dZe=r(RQr,"yoso"),RQr.forEach(t),cZe=r(L0e," \u2014 "),aR=n(L0e,"A",{href:!0});var PQr=s(aR);fZe=r(PQr,"YosoConfig"),PQr.forEach(t),mZe=r(L0e," (YOSO model)"),L0e.forEach(t),y.forEach(t),gZe=i(rt),T(wg.$$.fragment,rt),rt.forEach(t),hZe=i(ot),Ag=n(ot,"DIV",{class:!0});var MDe=s(Ag);T(jA.$$.fragment,MDe),pZe=i(MDe),Lte=n(MDe,"P",{});var BQr=s(Lte);_Ze=r(BQr,"Register a new configuration for this class."),BQr.forEach(t),MDe.forEach(t),ot.forEach(t),wqe=i(f),Mi=n(f,"H2",{class:!0});var EDe=s(Mi);yg=n(EDe,"A",{id:!0,class:!0,href:!0});var IQr=s(yg);xte=n(IQr,"SPAN",{});var NQr=s(xte);T(DA.$$.fragment,NQr),NQr.forEach(t),IQr.forEach(t),uZe=i(EDe),$te=n(EDe,"SPAN",{});var qQr=s($te);bZe=r(qQr,"AutoTokenizer"),qQr.forEach(t),EDe.forEach(t),Aqe=i(f),wo=n(f,"DIV",{class:!0});var Ns=s(wo);T(GA.$$.fragment,Ns),vZe=i(Ns),OA=n(Ns,"P",{});var CDe=s(OA);FZe=r(CDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),nR=n(CDe,"A",{href:!0});var jQr=s(nR);TZe=r(jQr,"AutoTokenizer.from_pretrained()"),jQr.forEach(t),MZe=r(CDe," class method."),CDe.forEach(t),EZe=i(Ns),VA=n(Ns,"P",{});var wDe=s(VA);CZe=r(wDe,"This class cannot be instantiated directly using "),kte=n(wDe,"CODE",{});var DQr=s(kte);wZe=r(DQr,"__init__()"),DQr.forEach(t),AZe=r(wDe," (throws an error)."),wDe.forEach(t),yZe=i(Ns),Cr=n(Ns,"DIV",{class:!0});var qs=s(Cr);T(XA.$$.fragment,qs),LZe=i(qs),Ste=n(qs,"P",{});var GQr=s(Ste);xZe=r(GQr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),GQr.forEach(t),$Ze=i(qs),ya=n(qs,"P",{});var B0=s(ya);kZe=r(B0,"The tokenizer class to instantiate is selected based on the "),Rte=n(B0,"CODE",{});var OQr=s(Rte);SZe=r(OQr,"model_type"),OQr.forEach(t),RZe=r(B0,` property of the config object (either
passed as an argument or loaded from `),Pte=n(B0,"CODE",{});var VQr=s(Pte);PZe=r(VQr,"pretrained_model_name_or_path"),VQr.forEach(t),BZe=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bte=n(B0,"CODE",{});var XQr=s(Bte);IZe=r(XQr,"pretrained_model_name_or_path"),XQr.forEach(t),NZe=r(B0,":"),B0.forEach(t),qZe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var zx=s(Sn);Ite=n(zx,"STRONG",{});var zQr=s(Ite);jZe=r(zQr,"albert"),zQr.forEach(t),DZe=r(zx," \u2014 "),sR=n(zx,"A",{href:!0});var WQr=s(sR);GZe=r(WQr,"AlbertTokenizer"),WQr.forEach(t),OZe=r(zx," or "),lR=n(zx,"A",{href:!0});var QQr=s(lR);VZe=r(QQr,"AlbertTokenizerFast"),QQr.forEach(t),XZe=r(zx," (ALBERT model)"),zx.forEach(t),zZe=i(S),Rn=n(S,"LI",{});var Wx=s(Rn);Nte=n(Wx,"STRONG",{});var HQr=s(Nte);WZe=r(HQr,"bart"),HQr.forEach(t),QZe=r(Wx," \u2014 "),iR=n(Wx,"A",{href:!0});var UQr=s(iR);HZe=r(UQr,"BartTokenizer"),UQr.forEach(t),UZe=r(Wx," or "),dR=n(Wx,"A",{href:!0});var JQr=s(dR);JZe=r(JQr,"BartTokenizerFast"),JQr.forEach(t),YZe=r(Wx," (BART model)"),Wx.forEach(t),KZe=i(S),Pn=n(S,"LI",{});var Qx=s(Pn);qte=n(Qx,"STRONG",{});var YQr=s(qte);ZZe=r(YQr,"barthez"),YQr.forEach(t),eeo=r(Qx," \u2014 "),cR=n(Qx,"A",{href:!0});var KQr=s(cR);oeo=r(KQr,"BarthezTokenizer"),KQr.forEach(t),reo=r(Qx," or "),fR=n(Qx,"A",{href:!0});var ZQr=s(fR);teo=r(ZQr,"BarthezTokenizerFast"),ZQr.forEach(t),aeo=r(Qx," (BARThez model)"),Qx.forEach(t),neo=i(S),Lg=n(S,"LI",{});var x0e=s(Lg);jte=n(x0e,"STRONG",{});var eHr=s(jte);seo=r(eHr,"bartpho"),eHr.forEach(t),leo=r(x0e," \u2014 "),mR=n(x0e,"A",{href:!0});var oHr=s(mR);ieo=r(oHr,"BartphoTokenizer"),oHr.forEach(t),deo=r(x0e," (BARTpho model)"),x0e.forEach(t),ceo=i(S),Bn=n(S,"LI",{});var Hx=s(Bn);Dte=n(Hx,"STRONG",{});var rHr=s(Dte);feo=r(rHr,"bert"),rHr.forEach(t),meo=r(Hx," \u2014 "),gR=n(Hx,"A",{href:!0});var tHr=s(gR);geo=r(tHr,"BertTokenizer"),tHr.forEach(t),heo=r(Hx," or "),hR=n(Hx,"A",{href:!0});var aHr=s(hR);peo=r(aHr,"BertTokenizerFast"),aHr.forEach(t),_eo=r(Hx," (BERT model)"),Hx.forEach(t),ueo=i(S),xg=n(S,"LI",{});var $0e=s(xg);Gte=n($0e,"STRONG",{});var nHr=s(Gte);beo=r(nHr,"bert-generation"),nHr.forEach(t),veo=r($0e," \u2014 "),pR=n($0e,"A",{href:!0});var sHr=s(pR);Feo=r(sHr,"BertGenerationTokenizer"),sHr.forEach(t),Teo=r($0e," (Bert Generation model)"),$0e.forEach(t),Meo=i(S),$g=n(S,"LI",{});var k0e=s($g);Ote=n(k0e,"STRONG",{});var lHr=s(Ote);Eeo=r(lHr,"bert-japanese"),lHr.forEach(t),Ceo=r(k0e," \u2014 "),_R=n(k0e,"A",{href:!0});var iHr=s(_R);weo=r(iHr,"BertJapaneseTokenizer"),iHr.forEach(t),Aeo=r(k0e," (BertJapanese model)"),k0e.forEach(t),yeo=i(S),kg=n(S,"LI",{});var S0e=s(kg);Vte=n(S0e,"STRONG",{});var dHr=s(Vte);Leo=r(dHr,"bertweet"),dHr.forEach(t),xeo=r(S0e," \u2014 "),uR=n(S0e,"A",{href:!0});var cHr=s(uR);$eo=r(cHr,"BertweetTokenizer"),cHr.forEach(t),keo=r(S0e," (Bertweet model)"),S0e.forEach(t),Seo=i(S),In=n(S,"LI",{});var Ux=s(In);Xte=n(Ux,"STRONG",{});var fHr=s(Xte);Reo=r(fHr,"big_bird"),fHr.forEach(t),Peo=r(Ux," \u2014 "),bR=n(Ux,"A",{href:!0});var mHr=s(bR);Beo=r(mHr,"BigBirdTokenizer"),mHr.forEach(t),Ieo=r(Ux," or "),vR=n(Ux,"A",{href:!0});var gHr=s(vR);Neo=r(gHr,"BigBirdTokenizerFast"),gHr.forEach(t),qeo=r(Ux," (BigBird model)"),Ux.forEach(t),jeo=i(S),Nn=n(S,"LI",{});var Jx=s(Nn);zte=n(Jx,"STRONG",{});var hHr=s(zte);Deo=r(hHr,"bigbird_pegasus"),hHr.forEach(t),Geo=r(Jx," \u2014 "),FR=n(Jx,"A",{href:!0});var pHr=s(FR);Oeo=r(pHr,"PegasusTokenizer"),pHr.forEach(t),Veo=r(Jx," or "),TR=n(Jx,"A",{href:!0});var _Hr=s(TR);Xeo=r(_Hr,"PegasusTokenizerFast"),_Hr.forEach(t),zeo=r(Jx," (BigBirdPegasus model)"),Jx.forEach(t),Weo=i(S),qn=n(S,"LI",{});var Yx=s(qn);Wte=n(Yx,"STRONG",{});var uHr=s(Wte);Qeo=r(uHr,"blenderbot"),uHr.forEach(t),Heo=r(Yx," \u2014 "),MR=n(Yx,"A",{href:!0});var bHr=s(MR);Ueo=r(bHr,"BlenderbotTokenizer"),bHr.forEach(t),Jeo=r(Yx," or "),ER=n(Yx,"A",{href:!0});var vHr=s(ER);Yeo=r(vHr,"BlenderbotTokenizerFast"),vHr.forEach(t),Keo=r(Yx," (Blenderbot model)"),Yx.forEach(t),Zeo=i(S),Sg=n(S,"LI",{});var R0e=s(Sg);Qte=n(R0e,"STRONG",{});var FHr=s(Qte);eoo=r(FHr,"blenderbot-small"),FHr.forEach(t),ooo=r(R0e," \u2014 "),CR=n(R0e,"A",{href:!0});var THr=s(CR);roo=r(THr,"BlenderbotSmallTokenizer"),THr.forEach(t),too=r(R0e," (BlenderbotSmall model)"),R0e.forEach(t),aoo=i(S),Rg=n(S,"LI",{});var P0e=s(Rg);Hte=n(P0e,"STRONG",{});var MHr=s(Hte);noo=r(MHr,"byt5"),MHr.forEach(t),soo=r(P0e," \u2014 "),wR=n(P0e,"A",{href:!0});var EHr=s(wR);loo=r(EHr,"ByT5Tokenizer"),EHr.forEach(t),ioo=r(P0e," (ByT5 model)"),P0e.forEach(t),doo=i(S),jn=n(S,"LI",{});var Kx=s(jn);Ute=n(Kx,"STRONG",{});var CHr=s(Ute);coo=r(CHr,"camembert"),CHr.forEach(t),foo=r(Kx," \u2014 "),AR=n(Kx,"A",{href:!0});var wHr=s(AR);moo=r(wHr,"CamembertTokenizer"),wHr.forEach(t),goo=r(Kx," or "),yR=n(Kx,"A",{href:!0});var AHr=s(yR);hoo=r(AHr,"CamembertTokenizerFast"),AHr.forEach(t),poo=r(Kx," (CamemBERT model)"),Kx.forEach(t),_oo=i(S),Pg=n(S,"LI",{});var B0e=s(Pg);Jte=n(B0e,"STRONG",{});var yHr=s(Jte);uoo=r(yHr,"canine"),yHr.forEach(t),boo=r(B0e," \u2014 "),LR=n(B0e,"A",{href:!0});var LHr=s(LR);voo=r(LHr,"CanineTokenizer"),LHr.forEach(t),Foo=r(B0e," (Canine model)"),B0e.forEach(t),Too=i(S),Dn=n(S,"LI",{});var Zx=s(Dn);Yte=n(Zx,"STRONG",{});var xHr=s(Yte);Moo=r(xHr,"clip"),xHr.forEach(t),Eoo=r(Zx," \u2014 "),xR=n(Zx,"A",{href:!0});var $Hr=s(xR);Coo=r($Hr,"CLIPTokenizer"),$Hr.forEach(t),woo=r(Zx," or "),$R=n(Zx,"A",{href:!0});var kHr=s($R);Aoo=r(kHr,"CLIPTokenizerFast"),kHr.forEach(t),yoo=r(Zx," (CLIP model)"),Zx.forEach(t),Loo=i(S),Gn=n(S,"LI",{});var e$=s(Gn);Kte=n(e$,"STRONG",{});var SHr=s(Kte);xoo=r(SHr,"convbert"),SHr.forEach(t),$oo=r(e$," \u2014 "),kR=n(e$,"A",{href:!0});var RHr=s(kR);koo=r(RHr,"ConvBertTokenizer"),RHr.forEach(t),Soo=r(e$," or "),SR=n(e$,"A",{href:!0});var PHr=s(SR);Roo=r(PHr,"ConvBertTokenizerFast"),PHr.forEach(t),Poo=r(e$," (ConvBERT model)"),e$.forEach(t),Boo=i(S),On=n(S,"LI",{});var o$=s(On);Zte=n(o$,"STRONG",{});var BHr=s(Zte);Ioo=r(BHr,"cpm"),BHr.forEach(t),Noo=r(o$," \u2014 "),RR=n(o$,"A",{href:!0});var IHr=s(RR);qoo=r(IHr,"CpmTokenizer"),IHr.forEach(t),joo=r(o$," or "),PR=n(o$,"A",{href:!0});var NHr=s(PR);Doo=r(NHr,"CpmTokenizerFast"),NHr.forEach(t),Goo=r(o$," (CPM model)"),o$.forEach(t),Ooo=i(S),Bg=n(S,"LI",{});var I0e=s(Bg);eae=n(I0e,"STRONG",{});var qHr=s(eae);Voo=r(qHr,"ctrl"),qHr.forEach(t),Xoo=r(I0e," \u2014 "),BR=n(I0e,"A",{href:!0});var jHr=s(BR);zoo=r(jHr,"CTRLTokenizer"),jHr.forEach(t),Woo=r(I0e," (CTRL model)"),I0e.forEach(t),Qoo=i(S),Vn=n(S,"LI",{});var r$=s(Vn);oae=n(r$,"STRONG",{});var DHr=s(oae);Hoo=r(DHr,"data2vec-text"),DHr.forEach(t),Uoo=r(r$," \u2014 "),IR=n(r$,"A",{href:!0});var GHr=s(IR);Joo=r(GHr,"RobertaTokenizer"),GHr.forEach(t),Yoo=r(r$," or "),NR=n(r$,"A",{href:!0});var OHr=s(NR);Koo=r(OHr,"RobertaTokenizerFast"),OHr.forEach(t),Zoo=r(r$," (Data2VecText model)"),r$.forEach(t),ero=i(S),Xn=n(S,"LI",{});var t$=s(Xn);rae=n(t$,"STRONG",{});var VHr=s(rae);oro=r(VHr,"deberta"),VHr.forEach(t),rro=r(t$," \u2014 "),qR=n(t$,"A",{href:!0});var XHr=s(qR);tro=r(XHr,"DebertaTokenizer"),XHr.forEach(t),aro=r(t$," or "),jR=n(t$,"A",{href:!0});var zHr=s(jR);nro=r(zHr,"DebertaTokenizerFast"),zHr.forEach(t),sro=r(t$," (DeBERTa model)"),t$.forEach(t),lro=i(S),zn=n(S,"LI",{});var a$=s(zn);tae=n(a$,"STRONG",{});var WHr=s(tae);iro=r(WHr,"deberta-v2"),WHr.forEach(t),dro=r(a$," \u2014 "),DR=n(a$,"A",{href:!0});var QHr=s(DR);cro=r(QHr,"DebertaV2Tokenizer"),QHr.forEach(t),fro=r(a$," or "),GR=n(a$,"A",{href:!0});var HHr=s(GR);mro=r(HHr,"DebertaV2TokenizerFast"),HHr.forEach(t),gro=r(a$," (DeBERTa-v2 model)"),a$.forEach(t),hro=i(S),Wn=n(S,"LI",{});var n$=s(Wn);aae=n(n$,"STRONG",{});var UHr=s(aae);pro=r(UHr,"distilbert"),UHr.forEach(t),_ro=r(n$," \u2014 "),OR=n(n$,"A",{href:!0});var JHr=s(OR);uro=r(JHr,"DistilBertTokenizer"),JHr.forEach(t),bro=r(n$," or "),VR=n(n$,"A",{href:!0});var YHr=s(VR);vro=r(YHr,"DistilBertTokenizerFast"),YHr.forEach(t),Fro=r(n$," (DistilBERT model)"),n$.forEach(t),Tro=i(S),Qn=n(S,"LI",{});var s$=s(Qn);nae=n(s$,"STRONG",{});var KHr=s(nae);Mro=r(KHr,"dpr"),KHr.forEach(t),Ero=r(s$," \u2014 "),XR=n(s$,"A",{href:!0});var ZHr=s(XR);Cro=r(ZHr,"DPRQuestionEncoderTokenizer"),ZHr.forEach(t),wro=r(s$," or "),zR=n(s$,"A",{href:!0});var eUr=s(zR);Aro=r(eUr,"DPRQuestionEncoderTokenizerFast"),eUr.forEach(t),yro=r(s$," (DPR model)"),s$.forEach(t),Lro=i(S),Hn=n(S,"LI",{});var l$=s(Hn);sae=n(l$,"STRONG",{});var oUr=s(sae);xro=r(oUr,"electra"),oUr.forEach(t),$ro=r(l$," \u2014 "),WR=n(l$,"A",{href:!0});var rUr=s(WR);kro=r(rUr,"ElectraTokenizer"),rUr.forEach(t),Sro=r(l$," or "),QR=n(l$,"A",{href:!0});var tUr=s(QR);Rro=r(tUr,"ElectraTokenizerFast"),tUr.forEach(t),Pro=r(l$," (ELECTRA model)"),l$.forEach(t),Bro=i(S),Ig=n(S,"LI",{});var N0e=s(Ig);lae=n(N0e,"STRONG",{});var aUr=s(lae);Iro=r(aUr,"flaubert"),aUr.forEach(t),Nro=r(N0e," \u2014 "),HR=n(N0e,"A",{href:!0});var nUr=s(HR);qro=r(nUr,"FlaubertTokenizer"),nUr.forEach(t),jro=r(N0e," (FlauBERT model)"),N0e.forEach(t),Dro=i(S),Un=n(S,"LI",{});var i$=s(Un);iae=n(i$,"STRONG",{});var sUr=s(iae);Gro=r(sUr,"fnet"),sUr.forEach(t),Oro=r(i$," \u2014 "),UR=n(i$,"A",{href:!0});var lUr=s(UR);Vro=r(lUr,"FNetTokenizer"),lUr.forEach(t),Xro=r(i$," or "),JR=n(i$,"A",{href:!0});var iUr=s(JR);zro=r(iUr,"FNetTokenizerFast"),iUr.forEach(t),Wro=r(i$," (FNet model)"),i$.forEach(t),Qro=i(S),Ng=n(S,"LI",{});var q0e=s(Ng);dae=n(q0e,"STRONG",{});var dUr=s(dae);Hro=r(dUr,"fsmt"),dUr.forEach(t),Uro=r(q0e," \u2014 "),YR=n(q0e,"A",{href:!0});var cUr=s(YR);Jro=r(cUr,"FSMTTokenizer"),cUr.forEach(t),Yro=r(q0e," (FairSeq Machine-Translation model)"),q0e.forEach(t),Kro=i(S),Jn=n(S,"LI",{});var d$=s(Jn);cae=n(d$,"STRONG",{});var fUr=s(cae);Zro=r(fUr,"funnel"),fUr.forEach(t),eto=r(d$," \u2014 "),KR=n(d$,"A",{href:!0});var mUr=s(KR);oto=r(mUr,"FunnelTokenizer"),mUr.forEach(t),rto=r(d$," or "),ZR=n(d$,"A",{href:!0});var gUr=s(ZR);tto=r(gUr,"FunnelTokenizerFast"),gUr.forEach(t),ato=r(d$," (Funnel Transformer model)"),d$.forEach(t),nto=i(S),Yn=n(S,"LI",{});var c$=s(Yn);fae=n(c$,"STRONG",{});var hUr=s(fae);sto=r(hUr,"gpt2"),hUr.forEach(t),lto=r(c$," \u2014 "),eP=n(c$,"A",{href:!0});var pUr=s(eP);ito=r(pUr,"GPT2Tokenizer"),pUr.forEach(t),dto=r(c$," or "),oP=n(c$,"A",{href:!0});var _Ur=s(oP);cto=r(_Ur,"GPT2TokenizerFast"),_Ur.forEach(t),fto=r(c$," (OpenAI GPT-2 model)"),c$.forEach(t),mto=i(S),Kn=n(S,"LI",{});var f$=s(Kn);mae=n(f$,"STRONG",{});var uUr=s(mae);gto=r(uUr,"gpt_neo"),uUr.forEach(t),hto=r(f$," \u2014 "),rP=n(f$,"A",{href:!0});var bUr=s(rP);pto=r(bUr,"GPT2Tokenizer"),bUr.forEach(t),_to=r(f$," or "),tP=n(f$,"A",{href:!0});var vUr=s(tP);uto=r(vUr,"GPT2TokenizerFast"),vUr.forEach(t),bto=r(f$," (GPT Neo model)"),f$.forEach(t),vto=i(S),qg=n(S,"LI",{});var j0e=s(qg);gae=n(j0e,"STRONG",{});var FUr=s(gae);Fto=r(FUr,"gpt_neox"),FUr.forEach(t),Tto=r(j0e," \u2014 "),aP=n(j0e,"A",{href:!0});var TUr=s(aP);Mto=r(TUr,"GPTNeoXTokenizerFast"),TUr.forEach(t),Eto=r(j0e," (GPT NeoX model)"),j0e.forEach(t),Cto=i(S),Zn=n(S,"LI",{});var m$=s(Zn);hae=n(m$,"STRONG",{});var MUr=s(hae);wto=r(MUr,"gptj"),MUr.forEach(t),Ato=r(m$," \u2014 "),nP=n(m$,"A",{href:!0});var EUr=s(nP);yto=r(EUr,"GPT2Tokenizer"),EUr.forEach(t),Lto=r(m$," or "),sP=n(m$,"A",{href:!0});var CUr=s(sP);xto=r(CUr,"GPT2TokenizerFast"),CUr.forEach(t),$to=r(m$," (GPT-J model)"),m$.forEach(t),kto=i(S),es=n(S,"LI",{});var g$=s(es);pae=n(g$,"STRONG",{});var wUr=s(pae);Sto=r(wUr,"herbert"),wUr.forEach(t),Rto=r(g$," \u2014 "),lP=n(g$,"A",{href:!0});var AUr=s(lP);Pto=r(AUr,"HerbertTokenizer"),AUr.forEach(t),Bto=r(g$," or "),iP=n(g$,"A",{href:!0});var yUr=s(iP);Ito=r(yUr,"HerbertTokenizerFast"),yUr.forEach(t),Nto=r(g$," (HerBERT model)"),g$.forEach(t),qto=i(S),jg=n(S,"LI",{});var D0e=s(jg);_ae=n(D0e,"STRONG",{});var LUr=s(_ae);jto=r(LUr,"hubert"),LUr.forEach(t),Dto=r(D0e," \u2014 "),dP=n(D0e,"A",{href:!0});var xUr=s(dP);Gto=r(xUr,"Wav2Vec2CTCTokenizer"),xUr.forEach(t),Oto=r(D0e," (Hubert model)"),D0e.forEach(t),Vto=i(S),os=n(S,"LI",{});var h$=s(os);uae=n(h$,"STRONG",{});var $Ur=s(uae);Xto=r($Ur,"ibert"),$Ur.forEach(t),zto=r(h$," \u2014 "),cP=n(h$,"A",{href:!0});var kUr=s(cP);Wto=r(kUr,"RobertaTokenizer"),kUr.forEach(t),Qto=r(h$," or "),fP=n(h$,"A",{href:!0});var SUr=s(fP);Hto=r(SUr,"RobertaTokenizerFast"),SUr.forEach(t),Uto=r(h$," (I-BERT model)"),h$.forEach(t),Jto=i(S),rs=n(S,"LI",{});var p$=s(rs);bae=n(p$,"STRONG",{});var RUr=s(bae);Yto=r(RUr,"layoutlm"),RUr.forEach(t),Kto=r(p$," \u2014 "),mP=n(p$,"A",{href:!0});var PUr=s(mP);Zto=r(PUr,"LayoutLMTokenizer"),PUr.forEach(t),eao=r(p$," or "),gP=n(p$,"A",{href:!0});var BUr=s(gP);oao=r(BUr,"LayoutLMTokenizerFast"),BUr.forEach(t),rao=r(p$," (LayoutLM model)"),p$.forEach(t),tao=i(S),ts=n(S,"LI",{});var _$=s(ts);vae=n(_$,"STRONG",{});var IUr=s(vae);aao=r(IUr,"layoutlmv2"),IUr.forEach(t),nao=r(_$," \u2014 "),hP=n(_$,"A",{href:!0});var NUr=s(hP);sao=r(NUr,"LayoutLMv2Tokenizer"),NUr.forEach(t),lao=r(_$," or "),pP=n(_$,"A",{href:!0});var qUr=s(pP);iao=r(qUr,"LayoutLMv2TokenizerFast"),qUr.forEach(t),dao=r(_$," (LayoutLMv2 model)"),_$.forEach(t),cao=i(S),as=n(S,"LI",{});var u$=s(as);Fae=n(u$,"STRONG",{});var jUr=s(Fae);fao=r(jUr,"layoutlmv3"),jUr.forEach(t),mao=r(u$," \u2014 "),_P=n(u$,"A",{href:!0});var DUr=s(_P);gao=r(DUr,"LayoutLMv3Tokenizer"),DUr.forEach(t),hao=r(u$," or "),uP=n(u$,"A",{href:!0});var GUr=s(uP);pao=r(GUr,"LayoutLMv3TokenizerFast"),GUr.forEach(t),_ao=r(u$," (LayoutLMv3 model)"),u$.forEach(t),uao=i(S),ns=n(S,"LI",{});var b$=s(ns);Tae=n(b$,"STRONG",{});var OUr=s(Tae);bao=r(OUr,"layoutxlm"),OUr.forEach(t),vao=r(b$," \u2014 "),bP=n(b$,"A",{href:!0});var VUr=s(bP);Fao=r(VUr,"LayoutXLMTokenizer"),VUr.forEach(t),Tao=r(b$," or "),vP=n(b$,"A",{href:!0});var XUr=s(vP);Mao=r(XUr,"LayoutXLMTokenizerFast"),XUr.forEach(t),Eao=r(b$," (LayoutXLM model)"),b$.forEach(t),Cao=i(S),ss=n(S,"LI",{});var v$=s(ss);Mae=n(v$,"STRONG",{});var zUr=s(Mae);wao=r(zUr,"led"),zUr.forEach(t),Aao=r(v$," \u2014 "),FP=n(v$,"A",{href:!0});var WUr=s(FP);yao=r(WUr,"LEDTokenizer"),WUr.forEach(t),Lao=r(v$," or "),TP=n(v$,"A",{href:!0});var QUr=s(TP);xao=r(QUr,"LEDTokenizerFast"),QUr.forEach(t),$ao=r(v$," (LED model)"),v$.forEach(t),kao=i(S),ls=n(S,"LI",{});var F$=s(ls);Eae=n(F$,"STRONG",{});var HUr=s(Eae);Sao=r(HUr,"longformer"),HUr.forEach(t),Rao=r(F$," \u2014 "),MP=n(F$,"A",{href:!0});var UUr=s(MP);Pao=r(UUr,"LongformerTokenizer"),UUr.forEach(t),Bao=r(F$," or "),EP=n(F$,"A",{href:!0});var JUr=s(EP);Iao=r(JUr,"LongformerTokenizerFast"),JUr.forEach(t),Nao=r(F$," (Longformer model)"),F$.forEach(t),qao=i(S),Dg=n(S,"LI",{});var G0e=s(Dg);Cae=n(G0e,"STRONG",{});var YUr=s(Cae);jao=r(YUr,"luke"),YUr.forEach(t),Dao=r(G0e," \u2014 "),CP=n(G0e,"A",{href:!0});var KUr=s(CP);Gao=r(KUr,"LukeTokenizer"),KUr.forEach(t),Oao=r(G0e," (LUKE model)"),G0e.forEach(t),Vao=i(S),is=n(S,"LI",{});var T$=s(is);wae=n(T$,"STRONG",{});var ZUr=s(wae);Xao=r(ZUr,"lxmert"),ZUr.forEach(t),zao=r(T$," \u2014 "),wP=n(T$,"A",{href:!0});var eJr=s(wP);Wao=r(eJr,"LxmertTokenizer"),eJr.forEach(t),Qao=r(T$," or "),AP=n(T$,"A",{href:!0});var oJr=s(AP);Hao=r(oJr,"LxmertTokenizerFast"),oJr.forEach(t),Uao=r(T$," (LXMERT model)"),T$.forEach(t),Jao=i(S),Gg=n(S,"LI",{});var O0e=s(Gg);Aae=n(O0e,"STRONG",{});var rJr=s(Aae);Yao=r(rJr,"m2m_100"),rJr.forEach(t),Kao=r(O0e," \u2014 "),yP=n(O0e,"A",{href:!0});var tJr=s(yP);Zao=r(tJr,"M2M100Tokenizer"),tJr.forEach(t),eno=r(O0e," (M2M100 model)"),O0e.forEach(t),ono=i(S),Og=n(S,"LI",{});var V0e=s(Og);yae=n(V0e,"STRONG",{});var aJr=s(yae);rno=r(aJr,"marian"),aJr.forEach(t),tno=r(V0e," \u2014 "),LP=n(V0e,"A",{href:!0});var nJr=s(LP);ano=r(nJr,"MarianTokenizer"),nJr.forEach(t),nno=r(V0e," (Marian model)"),V0e.forEach(t),sno=i(S),ds=n(S,"LI",{});var M$=s(ds);Lae=n(M$,"STRONG",{});var sJr=s(Lae);lno=r(sJr,"mbart"),sJr.forEach(t),ino=r(M$," \u2014 "),xP=n(M$,"A",{href:!0});var lJr=s(xP);dno=r(lJr,"MBartTokenizer"),lJr.forEach(t),cno=r(M$," or "),$P=n(M$,"A",{href:!0});var iJr=s($P);fno=r(iJr,"MBartTokenizerFast"),iJr.forEach(t),mno=r(M$," (mBART model)"),M$.forEach(t),gno=i(S),cs=n(S,"LI",{});var E$=s(cs);xae=n(E$,"STRONG",{});var dJr=s(xae);hno=r(dJr,"mbart50"),dJr.forEach(t),pno=r(E$," \u2014 "),kP=n(E$,"A",{href:!0});var cJr=s(kP);_no=r(cJr,"MBart50Tokenizer"),cJr.forEach(t),uno=r(E$," or "),SP=n(E$,"A",{href:!0});var fJr=s(SP);bno=r(fJr,"MBart50TokenizerFast"),fJr.forEach(t),vno=r(E$," (mBART-50 model)"),E$.forEach(t),Fno=i(S),fs=n(S,"LI",{});var C$=s(fs);$ae=n(C$,"STRONG",{});var mJr=s($ae);Tno=r(mJr,"megatron-bert"),mJr.forEach(t),Mno=r(C$," \u2014 "),RP=n(C$,"A",{href:!0});var gJr=s(RP);Eno=r(gJr,"BertTokenizer"),gJr.forEach(t),Cno=r(C$," or "),PP=n(C$,"A",{href:!0});var hJr=s(PP);wno=r(hJr,"BertTokenizerFast"),hJr.forEach(t),Ano=r(C$," (MegatronBert model)"),C$.forEach(t),yno=i(S),Vg=n(S,"LI",{});var X0e=s(Vg);kae=n(X0e,"STRONG",{});var pJr=s(kae);Lno=r(pJr,"mluke"),pJr.forEach(t),xno=r(X0e," \u2014 "),BP=n(X0e,"A",{href:!0});var _Jr=s(BP);$no=r(_Jr,"MLukeTokenizer"),_Jr.forEach(t),kno=r(X0e," (mLUKE model)"),X0e.forEach(t),Sno=i(S),ms=n(S,"LI",{});var w$=s(ms);Sae=n(w$,"STRONG",{});var uJr=s(Sae);Rno=r(uJr,"mobilebert"),uJr.forEach(t),Pno=r(w$," \u2014 "),IP=n(w$,"A",{href:!0});var bJr=s(IP);Bno=r(bJr,"MobileBertTokenizer"),bJr.forEach(t),Ino=r(w$," or "),NP=n(w$,"A",{href:!0});var vJr=s(NP);Nno=r(vJr,"MobileBertTokenizerFast"),vJr.forEach(t),qno=r(w$," (MobileBERT model)"),w$.forEach(t),jno=i(S),gs=n(S,"LI",{});var A$=s(gs);Rae=n(A$,"STRONG",{});var FJr=s(Rae);Dno=r(FJr,"mpnet"),FJr.forEach(t),Gno=r(A$," \u2014 "),qP=n(A$,"A",{href:!0});var TJr=s(qP);Ono=r(TJr,"MPNetTokenizer"),TJr.forEach(t),Vno=r(A$," or "),jP=n(A$,"A",{href:!0});var MJr=s(jP);Xno=r(MJr,"MPNetTokenizerFast"),MJr.forEach(t),zno=r(A$," (MPNet model)"),A$.forEach(t),Wno=i(S),hs=n(S,"LI",{});var y$=s(hs);Pae=n(y$,"STRONG",{});var EJr=s(Pae);Qno=r(EJr,"mt5"),EJr.forEach(t),Hno=r(y$," \u2014 "),DP=n(y$,"A",{href:!0});var CJr=s(DP);Uno=r(CJr,"MT5Tokenizer"),CJr.forEach(t),Jno=r(y$," or "),GP=n(y$,"A",{href:!0});var wJr=s(GP);Yno=r(wJr,"MT5TokenizerFast"),wJr.forEach(t),Kno=r(y$," (mT5 model)"),y$.forEach(t),Zno=i(S),ps=n(S,"LI",{});var L$=s(ps);Bae=n(L$,"STRONG",{});var AJr=s(Bae);eso=r(AJr,"nystromformer"),AJr.forEach(t),oso=r(L$," \u2014 "),OP=n(L$,"A",{href:!0});var yJr=s(OP);rso=r(yJr,"AlbertTokenizer"),yJr.forEach(t),tso=r(L$," or "),VP=n(L$,"A",{href:!0});var LJr=s(VP);aso=r(LJr,"AlbertTokenizerFast"),LJr.forEach(t),nso=r(L$," (Nystromformer model)"),L$.forEach(t),sso=i(S),_s=n(S,"LI",{});var x$=s(_s);Iae=n(x$,"STRONG",{});var xJr=s(Iae);lso=r(xJr,"openai-gpt"),xJr.forEach(t),iso=r(x$," \u2014 "),XP=n(x$,"A",{href:!0});var $Jr=s(XP);dso=r($Jr,"OpenAIGPTTokenizer"),$Jr.forEach(t),cso=r(x$," or "),zP=n(x$,"A",{href:!0});var kJr=s(zP);fso=r(kJr,"OpenAIGPTTokenizerFast"),kJr.forEach(t),mso=r(x$," (OpenAI GPT model)"),x$.forEach(t),gso=i(S),Xg=n(S,"LI",{});var z0e=s(Xg);Nae=n(z0e,"STRONG",{});var SJr=s(Nae);hso=r(SJr,"opt"),SJr.forEach(t),pso=r(z0e," \u2014 "),WP=n(z0e,"A",{href:!0});var RJr=s(WP);_so=r(RJr,"GPT2Tokenizer"),RJr.forEach(t),uso=r(z0e," (OPT model)"),z0e.forEach(t),bso=i(S),us=n(S,"LI",{});var $$=s(us);qae=n($$,"STRONG",{});var PJr=s(qae);vso=r(PJr,"pegasus"),PJr.forEach(t),Fso=r($$," \u2014 "),QP=n($$,"A",{href:!0});var BJr=s(QP);Tso=r(BJr,"PegasusTokenizer"),BJr.forEach(t),Mso=r($$," or "),HP=n($$,"A",{href:!0});var IJr=s(HP);Eso=r(IJr,"PegasusTokenizerFast"),IJr.forEach(t),Cso=r($$," (Pegasus model)"),$$.forEach(t),wso=i(S),zg=n(S,"LI",{});var W0e=s(zg);jae=n(W0e,"STRONG",{});var NJr=s(jae);Aso=r(NJr,"perceiver"),NJr.forEach(t),yso=r(W0e," \u2014 "),UP=n(W0e,"A",{href:!0});var qJr=s(UP);Lso=r(qJr,"PerceiverTokenizer"),qJr.forEach(t),xso=r(W0e," (Perceiver model)"),W0e.forEach(t),$so=i(S),Wg=n(S,"LI",{});var Q0e=s(Wg);Dae=n(Q0e,"STRONG",{});var jJr=s(Dae);kso=r(jJr,"phobert"),jJr.forEach(t),Sso=r(Q0e," \u2014 "),JP=n(Q0e,"A",{href:!0});var DJr=s(JP);Rso=r(DJr,"PhobertTokenizer"),DJr.forEach(t),Pso=r(Q0e," (PhoBERT model)"),Q0e.forEach(t),Bso=i(S),Qg=n(S,"LI",{});var H0e=s(Qg);Gae=n(H0e,"STRONG",{});var GJr=s(Gae);Iso=r(GJr,"plbart"),GJr.forEach(t),Nso=r(H0e," \u2014 "),YP=n(H0e,"A",{href:!0});var OJr=s(YP);qso=r(OJr,"PLBartTokenizer"),OJr.forEach(t),jso=r(H0e," (PLBart model)"),H0e.forEach(t),Dso=i(S),Hg=n(S,"LI",{});var U0e=s(Hg);Oae=n(U0e,"STRONG",{});var VJr=s(Oae);Gso=r(VJr,"prophetnet"),VJr.forEach(t),Oso=r(U0e," \u2014 "),KP=n(U0e,"A",{href:!0});var XJr=s(KP);Vso=r(XJr,"ProphetNetTokenizer"),XJr.forEach(t),Xso=r(U0e," (ProphetNet model)"),U0e.forEach(t),zso=i(S),bs=n(S,"LI",{});var k$=s(bs);Vae=n(k$,"STRONG",{});var zJr=s(Vae);Wso=r(zJr,"qdqbert"),zJr.forEach(t),Qso=r(k$," \u2014 "),ZP=n(k$,"A",{href:!0});var WJr=s(ZP);Hso=r(WJr,"BertTokenizer"),WJr.forEach(t),Uso=r(k$," or "),eB=n(k$,"A",{href:!0});var QJr=s(eB);Jso=r(QJr,"BertTokenizerFast"),QJr.forEach(t),Yso=r(k$," (QDQBert model)"),k$.forEach(t),Kso=i(S),Ug=n(S,"LI",{});var J0e=s(Ug);Xae=n(J0e,"STRONG",{});var HJr=s(Xae);Zso=r(HJr,"rag"),HJr.forEach(t),elo=r(J0e," \u2014 "),oB=n(J0e,"A",{href:!0});var UJr=s(oB);olo=r(UJr,"RagTokenizer"),UJr.forEach(t),rlo=r(J0e," (RAG model)"),J0e.forEach(t),tlo=i(S),vs=n(S,"LI",{});var S$=s(vs);zae=n(S$,"STRONG",{});var JJr=s(zae);alo=r(JJr,"realm"),JJr.forEach(t),nlo=r(S$," \u2014 "),rB=n(S$,"A",{href:!0});var YJr=s(rB);slo=r(YJr,"RealmTokenizer"),YJr.forEach(t),llo=r(S$," or "),tB=n(S$,"A",{href:!0});var KJr=s(tB);ilo=r(KJr,"RealmTokenizerFast"),KJr.forEach(t),dlo=r(S$," (Realm model)"),S$.forEach(t),clo=i(S),Fs=n(S,"LI",{});var R$=s(Fs);Wae=n(R$,"STRONG",{});var ZJr=s(Wae);flo=r(ZJr,"reformer"),ZJr.forEach(t),mlo=r(R$," \u2014 "),aB=n(R$,"A",{href:!0});var eYr=s(aB);glo=r(eYr,"ReformerTokenizer"),eYr.forEach(t),hlo=r(R$," or "),nB=n(R$,"A",{href:!0});var oYr=s(nB);plo=r(oYr,"ReformerTokenizerFast"),oYr.forEach(t),_lo=r(R$," (Reformer model)"),R$.forEach(t),ulo=i(S),Ts=n(S,"LI",{});var P$=s(Ts);Qae=n(P$,"STRONG",{});var rYr=s(Qae);blo=r(rYr,"rembert"),rYr.forEach(t),vlo=r(P$," \u2014 "),sB=n(P$,"A",{href:!0});var tYr=s(sB);Flo=r(tYr,"RemBertTokenizer"),tYr.forEach(t),Tlo=r(P$," or "),lB=n(P$,"A",{href:!0});var aYr=s(lB);Mlo=r(aYr,"RemBertTokenizerFast"),aYr.forEach(t),Elo=r(P$," (RemBERT model)"),P$.forEach(t),Clo=i(S),Ms=n(S,"LI",{});var B$=s(Ms);Hae=n(B$,"STRONG",{});var nYr=s(Hae);wlo=r(nYr,"retribert"),nYr.forEach(t),Alo=r(B$," \u2014 "),iB=n(B$,"A",{href:!0});var sYr=s(iB);ylo=r(sYr,"RetriBertTokenizer"),sYr.forEach(t),Llo=r(B$," or "),dB=n(B$,"A",{href:!0});var lYr=s(dB);xlo=r(lYr,"RetriBertTokenizerFast"),lYr.forEach(t),$lo=r(B$," (RetriBERT model)"),B$.forEach(t),klo=i(S),Es=n(S,"LI",{});var I$=s(Es);Uae=n(I$,"STRONG",{});var iYr=s(Uae);Slo=r(iYr,"roberta"),iYr.forEach(t),Rlo=r(I$," \u2014 "),cB=n(I$,"A",{href:!0});var dYr=s(cB);Plo=r(dYr,"RobertaTokenizer"),dYr.forEach(t),Blo=r(I$," or "),fB=n(I$,"A",{href:!0});var cYr=s(fB);Ilo=r(cYr,"RobertaTokenizerFast"),cYr.forEach(t),Nlo=r(I$," (RoBERTa model)"),I$.forEach(t),qlo=i(S),Cs=n(S,"LI",{});var N$=s(Cs);Jae=n(N$,"STRONG",{});var fYr=s(Jae);jlo=r(fYr,"roformer"),fYr.forEach(t),Dlo=r(N$," \u2014 "),mB=n(N$,"A",{href:!0});var mYr=s(mB);Glo=r(mYr,"RoFormerTokenizer"),mYr.forEach(t),Olo=r(N$," or "),gB=n(N$,"A",{href:!0});var gYr=s(gB);Vlo=r(gYr,"RoFormerTokenizerFast"),gYr.forEach(t),Xlo=r(N$," (RoFormer model)"),N$.forEach(t),zlo=i(S),Jg=n(S,"LI",{});var Y0e=s(Jg);Yae=n(Y0e,"STRONG",{});var hYr=s(Yae);Wlo=r(hYr,"speech_to_text"),hYr.forEach(t),Qlo=r(Y0e," \u2014 "),hB=n(Y0e,"A",{href:!0});var pYr=s(hB);Hlo=r(pYr,"Speech2TextTokenizer"),pYr.forEach(t),Ulo=r(Y0e," (Speech2Text model)"),Y0e.forEach(t),Jlo=i(S),Yg=n(S,"LI",{});var K0e=s(Yg);Kae=n(K0e,"STRONG",{});var _Yr=s(Kae);Ylo=r(_Yr,"speech_to_text_2"),_Yr.forEach(t),Klo=r(K0e," \u2014 "),pB=n(K0e,"A",{href:!0});var uYr=s(pB);Zlo=r(uYr,"Speech2Text2Tokenizer"),uYr.forEach(t),eio=r(K0e," (Speech2Text2 model)"),K0e.forEach(t),oio=i(S),ws=n(S,"LI",{});var q$=s(ws);Zae=n(q$,"STRONG",{});var bYr=s(Zae);rio=r(bYr,"splinter"),bYr.forEach(t),tio=r(q$," \u2014 "),_B=n(q$,"A",{href:!0});var vYr=s(_B);aio=r(vYr,"SplinterTokenizer"),vYr.forEach(t),nio=r(q$," or "),uB=n(q$,"A",{href:!0});var FYr=s(uB);sio=r(FYr,"SplinterTokenizerFast"),FYr.forEach(t),lio=r(q$," (Splinter model)"),q$.forEach(t),iio=i(S),As=n(S,"LI",{});var j$=s(As);ene=n(j$,"STRONG",{});var TYr=s(ene);dio=r(TYr,"squeezebert"),TYr.forEach(t),cio=r(j$," \u2014 "),bB=n(j$,"A",{href:!0});var MYr=s(bB);fio=r(MYr,"SqueezeBertTokenizer"),MYr.forEach(t),mio=r(j$," or "),vB=n(j$,"A",{href:!0});var EYr=s(vB);gio=r(EYr,"SqueezeBertTokenizerFast"),EYr.forEach(t),hio=r(j$," (SqueezeBERT model)"),j$.forEach(t),pio=i(S),ys=n(S,"LI",{});var D$=s(ys);one=n(D$,"STRONG",{});var CYr=s(one);_io=r(CYr,"t5"),CYr.forEach(t),uio=r(D$," \u2014 "),FB=n(D$,"A",{href:!0});var wYr=s(FB);bio=r(wYr,"T5Tokenizer"),wYr.forEach(t),vio=r(D$," or "),TB=n(D$,"A",{href:!0});var AYr=s(TB);Fio=r(AYr,"T5TokenizerFast"),AYr.forEach(t),Tio=r(D$," (T5 model)"),D$.forEach(t),Mio=i(S),Kg=n(S,"LI",{});var Z0e=s(Kg);rne=n(Z0e,"STRONG",{});var yYr=s(rne);Eio=r(yYr,"tapas"),yYr.forEach(t),Cio=r(Z0e," \u2014 "),MB=n(Z0e,"A",{href:!0});var LYr=s(MB);wio=r(LYr,"TapasTokenizer"),LYr.forEach(t),Aio=r(Z0e," (TAPAS model)"),Z0e.forEach(t),yio=i(S),Zg=n(S,"LI",{});var e6e=s(Zg);tne=n(e6e,"STRONG",{});var xYr=s(tne);Lio=r(xYr,"tapex"),xYr.forEach(t),xio=r(e6e," \u2014 "),EB=n(e6e,"A",{href:!0});var $Yr=s(EB);$io=r($Yr,"TapexTokenizer"),$Yr.forEach(t),kio=r(e6e," (TAPEX model)"),e6e.forEach(t),Sio=i(S),eh=n(S,"LI",{});var o6e=s(eh);ane=n(o6e,"STRONG",{});var kYr=s(ane);Rio=r(kYr,"transfo-xl"),kYr.forEach(t),Pio=r(o6e," \u2014 "),CB=n(o6e,"A",{href:!0});var SYr=s(CB);Bio=r(SYr,"TransfoXLTokenizer"),SYr.forEach(t),Iio=r(o6e," (Transformer-XL model)"),o6e.forEach(t),Nio=i(S),Ls=n(S,"LI",{});var G$=s(Ls);nne=n(G$,"STRONG",{});var RYr=s(nne);qio=r(RYr,"visual_bert"),RYr.forEach(t),jio=r(G$," \u2014 "),wB=n(G$,"A",{href:!0});var PYr=s(wB);Dio=r(PYr,"BertTokenizer"),PYr.forEach(t),Gio=r(G$," or "),AB=n(G$,"A",{href:!0});var BYr=s(AB);Oio=r(BYr,"BertTokenizerFast"),BYr.forEach(t),Vio=r(G$," (VisualBert model)"),G$.forEach(t),Xio=i(S),oh=n(S,"LI",{});var r6e=s(oh);sne=n(r6e,"STRONG",{});var IYr=s(sne);zio=r(IYr,"wav2vec2"),IYr.forEach(t),Wio=r(r6e," \u2014 "),yB=n(r6e,"A",{href:!0});var NYr=s(yB);Qio=r(NYr,"Wav2Vec2CTCTokenizer"),NYr.forEach(t),Hio=r(r6e," (Wav2Vec2 model)"),r6e.forEach(t),Uio=i(S),rh=n(S,"LI",{});var t6e=s(rh);lne=n(t6e,"STRONG",{});var qYr=s(lne);Jio=r(qYr,"wav2vec2-conformer"),qYr.forEach(t),Yio=r(t6e," \u2014 "),LB=n(t6e,"A",{href:!0});var jYr=s(LB);Kio=r(jYr,"Wav2Vec2CTCTokenizer"),jYr.forEach(t),Zio=r(t6e," (Wav2Vec2-Conformer model)"),t6e.forEach(t),edo=i(S),th=n(S,"LI",{});var a6e=s(th);ine=n(a6e,"STRONG",{});var DYr=s(ine);odo=r(DYr,"wav2vec2_phoneme"),DYr.forEach(t),rdo=r(a6e," \u2014 "),xB=n(a6e,"A",{href:!0});var GYr=s(xB);tdo=r(GYr,"Wav2Vec2PhonemeCTCTokenizer"),GYr.forEach(t),ado=r(a6e," (Wav2Vec2Phoneme model)"),a6e.forEach(t),ndo=i(S),xs=n(S,"LI",{});var O$=s(xs);dne=n(O$,"STRONG",{});var OYr=s(dne);sdo=r(OYr,"xglm"),OYr.forEach(t),ldo=r(O$," \u2014 "),$B=n(O$,"A",{href:!0});var VYr=s($B);ido=r(VYr,"XGLMTokenizer"),VYr.forEach(t),ddo=r(O$," or "),kB=n(O$,"A",{href:!0});var XYr=s(kB);cdo=r(XYr,"XGLMTokenizerFast"),XYr.forEach(t),fdo=r(O$," (XGLM model)"),O$.forEach(t),mdo=i(S),ah=n(S,"LI",{});var n6e=s(ah);cne=n(n6e,"STRONG",{});var zYr=s(cne);gdo=r(zYr,"xlm"),zYr.forEach(t),hdo=r(n6e," \u2014 "),SB=n(n6e,"A",{href:!0});var WYr=s(SB);pdo=r(WYr,"XLMTokenizer"),WYr.forEach(t),_do=r(n6e," (XLM model)"),n6e.forEach(t),udo=i(S),nh=n(S,"LI",{});var s6e=s(nh);fne=n(s6e,"STRONG",{});var QYr=s(fne);bdo=r(QYr,"xlm-prophetnet"),QYr.forEach(t),vdo=r(s6e," \u2014 "),RB=n(s6e,"A",{href:!0});var HYr=s(RB);Fdo=r(HYr,"XLMProphetNetTokenizer"),HYr.forEach(t),Tdo=r(s6e," (XLMProphetNet model)"),s6e.forEach(t),Mdo=i(S),$s=n(S,"LI",{});var V$=s($s);mne=n(V$,"STRONG",{});var UYr=s(mne);Edo=r(UYr,"xlm-roberta"),UYr.forEach(t),Cdo=r(V$," \u2014 "),PB=n(V$,"A",{href:!0});var JYr=s(PB);wdo=r(JYr,"XLMRobertaTokenizer"),JYr.forEach(t),Ado=r(V$," or "),BB=n(V$,"A",{href:!0});var YYr=s(BB);ydo=r(YYr,"XLMRobertaTokenizerFast"),YYr.forEach(t),Ldo=r(V$," (XLM-RoBERTa model)"),V$.forEach(t),xdo=i(S),ks=n(S,"LI",{});var X$=s(ks);gne=n(X$,"STRONG",{});var KYr=s(gne);$do=r(KYr,"xlm-roberta-xl"),KYr.forEach(t),kdo=r(X$," \u2014 "),IB=n(X$,"A",{href:!0});var ZYr=s(IB);Sdo=r(ZYr,"RobertaTokenizer"),ZYr.forEach(t),Rdo=r(X$," or "),NB=n(X$,"A",{href:!0});var eKr=s(NB);Pdo=r(eKr,"RobertaTokenizerFast"),eKr.forEach(t),Bdo=r(X$," (XLM-RoBERTa-XL model)"),X$.forEach(t),Ido=i(S),Ss=n(S,"LI",{});var z$=s(Ss);hne=n(z$,"STRONG",{});var oKr=s(hne);Ndo=r(oKr,"xlnet"),oKr.forEach(t),qdo=r(z$," \u2014 "),qB=n(z$,"A",{href:!0});var rKr=s(qB);jdo=r(rKr,"XLNetTokenizer"),rKr.forEach(t),Ddo=r(z$," or "),jB=n(z$,"A",{href:!0});var tKr=s(jB);Gdo=r(tKr,"XLNetTokenizerFast"),tKr.forEach(t),Odo=r(z$," (XLNet model)"),z$.forEach(t),Vdo=i(S),Rs=n(S,"LI",{});var W$=s(Rs);pne=n(W$,"STRONG",{});var aKr=s(pne);Xdo=r(aKr,"yoso"),aKr.forEach(t),zdo=r(W$," \u2014 "),DB=n(W$,"A",{href:!0});var nKr=s(DB);Wdo=r(nKr,"AlbertTokenizer"),nKr.forEach(t),Qdo=r(W$," or "),GB=n(W$,"A",{href:!0});var sKr=s(GB);Hdo=r(sKr,"AlbertTokenizerFast"),sKr.forEach(t),Udo=r(W$," (YOSO model)"),W$.forEach(t),S.forEach(t),Jdo=i(qs),T(sh.$$.fragment,qs),qs.forEach(t),Ydo=i(Ns),lh=n(Ns,"DIV",{class:!0});var ADe=s(lh);T(zA.$$.fragment,ADe),Kdo=i(ADe),_ne=n(ADe,"P",{});var lKr=s(_ne);Zdo=r(lKr,"Register a new tokenizer in this mapping."),lKr.forEach(t),ADe.forEach(t),Ns.forEach(t),yqe=i(f),Ei=n(f,"H2",{class:!0});var yDe=s(Ei);ih=n(yDe,"A",{id:!0,class:!0,href:!0});var iKr=s(ih);une=n(iKr,"SPAN",{});var dKr=s(une);T(WA.$$.fragment,dKr),dKr.forEach(t),iKr.forEach(t),eco=i(yDe),bne=n(yDe,"SPAN",{});var cKr=s(bne);oco=r(cKr,"AutoFeatureExtractor"),cKr.forEach(t),yDe.forEach(t),Lqe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(QA.$$.fragment,js),rco=i(js),HA=n(js,"P",{});var LDe=s(HA);tco=r(LDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),OB=n(LDe,"A",{href:!0});var fKr=s(OB);aco=r(fKr,"AutoFeatureExtractor.from_pretrained()"),fKr.forEach(t),nco=r(LDe," class method."),LDe.forEach(t),sco=i(js),UA=n(js,"P",{});var xDe=s(UA);lco=r(xDe,"This class cannot be instantiated directly using "),vne=n(xDe,"CODE",{});var mKr=s(vne);ico=r(mKr,"__init__()"),mKr.forEach(t),dco=r(xDe," (throws an error)."),xDe.forEach(t),cco=i(js),He=n(js,"DIV",{class:!0});var ea=s(He);T(JA.$$.fragment,ea),fco=i(ea),Fne=n(ea,"P",{});var gKr=s(Fne);mco=r(gKr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),gKr.forEach(t),gco=i(ea),La=n(ea,"P",{});var I0=s(La);hco=r(I0,"The feature extractor class to instantiate is selected based on the "),Tne=n(I0,"CODE",{});var hKr=s(Tne);pco=r(hKr,"model_type"),hKr.forEach(t),_co=r(I0,` property of the config object
(either passed as an argument or loaded from `),Mne=n(I0,"CODE",{});var pKr=s(Mne);uco=r(pKr,"pretrained_model_name_or_path"),pKr.forEach(t),bco=r(I0,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ene=n(I0,"CODE",{});var _Kr=s(Ene);vco=r(_Kr,"pretrained_model_name_or_path"),_Kr.forEach(t),Fco=r(I0,":"),I0.forEach(t),Tco=i(ea),Y=n(ea,"UL",{});var Z=s(Y);dh=n(Z,"LI",{});var l6e=s(dh);Cne=n(l6e,"STRONG",{});var uKr=s(Cne);Mco=r(uKr,"beit"),uKr.forEach(t),Eco=r(l6e," \u2014 "),VB=n(l6e,"A",{href:!0});var bKr=s(VB);Cco=r(bKr,"BeitFeatureExtractor"),bKr.forEach(t),wco=r(l6e," (BEiT model)"),l6e.forEach(t),Aco=i(Z),ch=n(Z,"LI",{});var i6e=s(ch);wne=n(i6e,"STRONG",{});var vKr=s(wne);yco=r(vKr,"clip"),vKr.forEach(t),Lco=r(i6e," \u2014 "),XB=n(i6e,"A",{href:!0});var FKr=s(XB);xco=r(FKr,"CLIPFeatureExtractor"),FKr.forEach(t),$co=r(i6e," (CLIP model)"),i6e.forEach(t),kco=i(Z),fh=n(Z,"LI",{});var d6e=s(fh);Ane=n(d6e,"STRONG",{});var TKr=s(Ane);Sco=r(TKr,"convnext"),TKr.forEach(t),Rco=r(d6e," \u2014 "),zB=n(d6e,"A",{href:!0});var MKr=s(zB);Pco=r(MKr,"ConvNextFeatureExtractor"),MKr.forEach(t),Bco=r(d6e," (ConvNext model)"),d6e.forEach(t),Ico=i(Z),mh=n(Z,"LI",{});var c6e=s(mh);yne=n(c6e,"STRONG",{});var EKr=s(yne);Nco=r(EKr,"cvt"),EKr.forEach(t),qco=r(c6e," \u2014 "),WB=n(c6e,"A",{href:!0});var CKr=s(WB);jco=r(CKr,"ConvNextFeatureExtractor"),CKr.forEach(t),Dco=r(c6e," (CvT model)"),c6e.forEach(t),Gco=i(Z),gh=n(Z,"LI",{});var f6e=s(gh);Lne=n(f6e,"STRONG",{});var wKr=s(Lne);Oco=r(wKr,"data2vec-audio"),wKr.forEach(t),Vco=r(f6e," \u2014 "),QB=n(f6e,"A",{href:!0});var AKr=s(QB);Xco=r(AKr,"Wav2Vec2FeatureExtractor"),AKr.forEach(t),zco=r(f6e," (Data2VecAudio model)"),f6e.forEach(t),Wco=i(Z),hh=n(Z,"LI",{});var m6e=s(hh);xne=n(m6e,"STRONG",{});var yKr=s(xne);Qco=r(yKr,"data2vec-vision"),yKr.forEach(t),Hco=r(m6e," \u2014 "),HB=n(m6e,"A",{href:!0});var LKr=s(HB);Uco=r(LKr,"BeitFeatureExtractor"),LKr.forEach(t),Jco=r(m6e," (Data2VecVision model)"),m6e.forEach(t),Yco=i(Z),ph=n(Z,"LI",{});var g6e=s(ph);$ne=n(g6e,"STRONG",{});var xKr=s($ne);Kco=r(xKr,"deit"),xKr.forEach(t),Zco=r(g6e," \u2014 "),UB=n(g6e,"A",{href:!0});var $Kr=s(UB);efo=r($Kr,"DeiTFeatureExtractor"),$Kr.forEach(t),ofo=r(g6e," (DeiT model)"),g6e.forEach(t),rfo=i(Z),_h=n(Z,"LI",{});var h6e=s(_h);kne=n(h6e,"STRONG",{});var kKr=s(kne);tfo=r(kKr,"detr"),kKr.forEach(t),afo=r(h6e," \u2014 "),JB=n(h6e,"A",{href:!0});var SKr=s(JB);nfo=r(SKr,"DetrFeatureExtractor"),SKr.forEach(t),sfo=r(h6e," (DETR model)"),h6e.forEach(t),lfo=i(Z),uh=n(Z,"LI",{});var p6e=s(uh);Sne=n(p6e,"STRONG",{});var RKr=s(Sne);ifo=r(RKr,"dpt"),RKr.forEach(t),dfo=r(p6e," \u2014 "),YB=n(p6e,"A",{href:!0});var PKr=s(YB);cfo=r(PKr,"DPTFeatureExtractor"),PKr.forEach(t),ffo=r(p6e," (DPT model)"),p6e.forEach(t),mfo=i(Z),bh=n(Z,"LI",{});var _6e=s(bh);Rne=n(_6e,"STRONG",{});var BKr=s(Rne);gfo=r(BKr,"flava"),BKr.forEach(t),hfo=r(_6e," \u2014 "),KB=n(_6e,"A",{href:!0});var IKr=s(KB);pfo=r(IKr,"FlavaFeatureExtractor"),IKr.forEach(t),_fo=r(_6e," (Flava model)"),_6e.forEach(t),ufo=i(Z),vh=n(Z,"LI",{});var u6e=s(vh);Pne=n(u6e,"STRONG",{});var NKr=s(Pne);bfo=r(NKr,"glpn"),NKr.forEach(t),vfo=r(u6e," \u2014 "),ZB=n(u6e,"A",{href:!0});var qKr=s(ZB);Ffo=r(qKr,"GLPNFeatureExtractor"),qKr.forEach(t),Tfo=r(u6e," (GLPN model)"),u6e.forEach(t),Mfo=i(Z),Fh=n(Z,"LI",{});var b6e=s(Fh);Bne=n(b6e,"STRONG",{});var jKr=s(Bne);Efo=r(jKr,"hubert"),jKr.forEach(t),Cfo=r(b6e," \u2014 "),eI=n(b6e,"A",{href:!0});var DKr=s(eI);wfo=r(DKr,"Wav2Vec2FeatureExtractor"),DKr.forEach(t),Afo=r(b6e," (Hubert model)"),b6e.forEach(t),yfo=i(Z),Th=n(Z,"LI",{});var v6e=s(Th);Ine=n(v6e,"STRONG",{});var GKr=s(Ine);Lfo=r(GKr,"imagegpt"),GKr.forEach(t),xfo=r(v6e," \u2014 "),oI=n(v6e,"A",{href:!0});var OKr=s(oI);$fo=r(OKr,"ImageGPTFeatureExtractor"),OKr.forEach(t),kfo=r(v6e," (ImageGPT model)"),v6e.forEach(t),Sfo=i(Z),Mh=n(Z,"LI",{});var F6e=s(Mh);Nne=n(F6e,"STRONG",{});var VKr=s(Nne);Rfo=r(VKr,"layoutlmv2"),VKr.forEach(t),Pfo=r(F6e," \u2014 "),rI=n(F6e,"A",{href:!0});var XKr=s(rI);Bfo=r(XKr,"LayoutLMv2FeatureExtractor"),XKr.forEach(t),Ifo=r(F6e," (LayoutLMv2 model)"),F6e.forEach(t),Nfo=i(Z),Eh=n(Z,"LI",{});var T6e=s(Eh);qne=n(T6e,"STRONG",{});var zKr=s(qne);qfo=r(zKr,"layoutlmv3"),zKr.forEach(t),jfo=r(T6e," \u2014 "),tI=n(T6e,"A",{href:!0});var WKr=s(tI);Dfo=r(WKr,"LayoutLMv3FeatureExtractor"),WKr.forEach(t),Gfo=r(T6e," (LayoutLMv3 model)"),T6e.forEach(t),Ofo=i(Z),Ch=n(Z,"LI",{});var M6e=s(Ch);jne=n(M6e,"STRONG",{});var QKr=s(jne);Vfo=r(QKr,"maskformer"),QKr.forEach(t),Xfo=r(M6e," \u2014 "),aI=n(M6e,"A",{href:!0});var HKr=s(aI);zfo=r(HKr,"MaskFormerFeatureExtractor"),HKr.forEach(t),Wfo=r(M6e," (MaskFormer model)"),M6e.forEach(t),Qfo=i(Z),wh=n(Z,"LI",{});var E6e=s(wh);Dne=n(E6e,"STRONG",{});var UKr=s(Dne);Hfo=r(UKr,"mobilevit"),UKr.forEach(t),Ufo=r(E6e," \u2014 "),nI=n(E6e,"A",{href:!0});var JKr=s(nI);Jfo=r(JKr,"MobileViTFeatureExtractor"),JKr.forEach(t),Yfo=r(E6e," (MobileViT model)"),E6e.forEach(t),Kfo=i(Z),Ah=n(Z,"LI",{});var C6e=s(Ah);Gne=n(C6e,"STRONG",{});var YKr=s(Gne);Zfo=r(YKr,"perceiver"),YKr.forEach(t),emo=r(C6e," \u2014 "),sI=n(C6e,"A",{href:!0});var KKr=s(sI);omo=r(KKr,"PerceiverFeatureExtractor"),KKr.forEach(t),rmo=r(C6e," (Perceiver model)"),C6e.forEach(t),tmo=i(Z),yh=n(Z,"LI",{});var w6e=s(yh);One=n(w6e,"STRONG",{});var ZKr=s(One);amo=r(ZKr,"poolformer"),ZKr.forEach(t),nmo=r(w6e," \u2014 "),lI=n(w6e,"A",{href:!0});var eZr=s(lI);smo=r(eZr,"PoolFormerFeatureExtractor"),eZr.forEach(t),lmo=r(w6e," (PoolFormer model)"),w6e.forEach(t),imo=i(Z),Lh=n(Z,"LI",{});var A6e=s(Lh);Vne=n(A6e,"STRONG",{});var oZr=s(Vne);dmo=r(oZr,"regnet"),oZr.forEach(t),cmo=r(A6e," \u2014 "),iI=n(A6e,"A",{href:!0});var rZr=s(iI);fmo=r(rZr,"ConvNextFeatureExtractor"),rZr.forEach(t),mmo=r(A6e," (RegNet model)"),A6e.forEach(t),gmo=i(Z),xh=n(Z,"LI",{});var y6e=s(xh);Xne=n(y6e,"STRONG",{});var tZr=s(Xne);hmo=r(tZr,"resnet"),tZr.forEach(t),pmo=r(y6e," \u2014 "),dI=n(y6e,"A",{href:!0});var aZr=s(dI);_mo=r(aZr,"ConvNextFeatureExtractor"),aZr.forEach(t),umo=r(y6e," (ResNet model)"),y6e.forEach(t),bmo=i(Z),$h=n(Z,"LI",{});var L6e=s($h);zne=n(L6e,"STRONG",{});var nZr=s(zne);vmo=r(nZr,"segformer"),nZr.forEach(t),Fmo=r(L6e," \u2014 "),cI=n(L6e,"A",{href:!0});var sZr=s(cI);Tmo=r(sZr,"SegformerFeatureExtractor"),sZr.forEach(t),Mmo=r(L6e," (SegFormer model)"),L6e.forEach(t),Emo=i(Z),kh=n(Z,"LI",{});var x6e=s(kh);Wne=n(x6e,"STRONG",{});var lZr=s(Wne);Cmo=r(lZr,"speech_to_text"),lZr.forEach(t),wmo=r(x6e," \u2014 "),fI=n(x6e,"A",{href:!0});var iZr=s(fI);Amo=r(iZr,"Speech2TextFeatureExtractor"),iZr.forEach(t),ymo=r(x6e," (Speech2Text model)"),x6e.forEach(t),Lmo=i(Z),Sh=n(Z,"LI",{});var $6e=s(Sh);Qne=n($6e,"STRONG",{});var dZr=s(Qne);xmo=r(dZr,"swin"),dZr.forEach(t),$mo=r($6e," \u2014 "),mI=n($6e,"A",{href:!0});var cZr=s(mI);kmo=r(cZr,"ViTFeatureExtractor"),cZr.forEach(t),Smo=r($6e," (Swin model)"),$6e.forEach(t),Rmo=i(Z),Rh=n(Z,"LI",{});var k6e=s(Rh);Hne=n(k6e,"STRONG",{});var fZr=s(Hne);Pmo=r(fZr,"van"),fZr.forEach(t),Bmo=r(k6e," \u2014 "),gI=n(k6e,"A",{href:!0});var mZr=s(gI);Imo=r(mZr,"ConvNextFeatureExtractor"),mZr.forEach(t),Nmo=r(k6e," (VAN model)"),k6e.forEach(t),qmo=i(Z),Ph=n(Z,"LI",{});var S6e=s(Ph);Une=n(S6e,"STRONG",{});var gZr=s(Une);jmo=r(gZr,"vit"),gZr.forEach(t),Dmo=r(S6e," \u2014 "),hI=n(S6e,"A",{href:!0});var hZr=s(hI);Gmo=r(hZr,"ViTFeatureExtractor"),hZr.forEach(t),Omo=r(S6e," (ViT model)"),S6e.forEach(t),Vmo=i(Z),Bh=n(Z,"LI",{});var R6e=s(Bh);Jne=n(R6e,"STRONG",{});var pZr=s(Jne);Xmo=r(pZr,"vit_mae"),pZr.forEach(t),zmo=r(R6e," \u2014 "),pI=n(R6e,"A",{href:!0});var _Zr=s(pI);Wmo=r(_Zr,"ViTFeatureExtractor"),_Zr.forEach(t),Qmo=r(R6e," (ViTMAE model)"),R6e.forEach(t),Hmo=i(Z),Ih=n(Z,"LI",{});var P6e=s(Ih);Yne=n(P6e,"STRONG",{});var uZr=s(Yne);Umo=r(uZr,"wav2vec2"),uZr.forEach(t),Jmo=r(P6e," \u2014 "),_I=n(P6e,"A",{href:!0});var bZr=s(_I);Ymo=r(bZr,"Wav2Vec2FeatureExtractor"),bZr.forEach(t),Kmo=r(P6e," (Wav2Vec2 model)"),P6e.forEach(t),Zmo=i(Z),Nh=n(Z,"LI",{});var B6e=s(Nh);Kne=n(B6e,"STRONG",{});var vZr=s(Kne);ego=r(vZr,"wav2vec2-conformer"),vZr.forEach(t),ogo=r(B6e," \u2014 "),uI=n(B6e,"A",{href:!0});var FZr=s(uI);rgo=r(FZr,"Wav2Vec2FeatureExtractor"),FZr.forEach(t),tgo=r(B6e," (Wav2Vec2-Conformer model)"),B6e.forEach(t),ago=i(Z),qh=n(Z,"LI",{});var I6e=s(qh);Zne=n(I6e,"STRONG",{});var TZr=s(Zne);ngo=r(TZr,"yolos"),TZr.forEach(t),sgo=r(I6e," \u2014 "),bI=n(I6e,"A",{href:!0});var MZr=s(bI);lgo=r(MZr,"YolosFeatureExtractor"),MZr.forEach(t),igo=r(I6e," (YOLOS model)"),I6e.forEach(t),Z.forEach(t),dgo=i(ea),T(jh.$$.fragment,ea),cgo=i(ea),T(Dh.$$.fragment,ea),ea.forEach(t),fgo=i(js),Gh=n(js,"DIV",{class:!0});var $De=s(Gh);T(YA.$$.fragment,$De),mgo=i($De),ese=n($De,"P",{});var EZr=s(ese);ggo=r(EZr,"Register a new feature extractor for this class."),EZr.forEach(t),$De.forEach(t),js.forEach(t),xqe=i(f),Ci=n(f,"H2",{class:!0});var kDe=s(Ci);Oh=n(kDe,"A",{id:!0,class:!0,href:!0});var CZr=s(Oh);ose=n(CZr,"SPAN",{});var wZr=s(ose);T(KA.$$.fragment,wZr),wZr.forEach(t),CZr.forEach(t),hgo=i(kDe),rse=n(kDe,"SPAN",{});var AZr=s(rse);pgo=r(AZr,"AutoProcessor"),AZr.forEach(t),kDe.forEach(t),$qe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(ZA.$$.fragment,Ds),_go=i(Ds),ey=n(Ds,"P",{});var SDe=s(ey);ugo=r(SDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),vI=n(SDe,"A",{href:!0});var yZr=s(vI);bgo=r(yZr,"AutoProcessor.from_pretrained()"),yZr.forEach(t),vgo=r(SDe," class method."),SDe.forEach(t),Fgo=i(Ds),oy=n(Ds,"P",{});var RDe=s(oy);Tgo=r(RDe,"This class cannot be instantiated directly using "),tse=n(RDe,"CODE",{});var LZr=s(tse);Mgo=r(LZr,"__init__()"),LZr.forEach(t),Ego=r(RDe," (throws an error)."),RDe.forEach(t),Cgo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var oa=s(Ue);T(ry.$$.fragment,oa),wgo=i(oa),ase=n(oa,"P",{});var xZr=s(ase);Ago=r(xZr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),xZr.forEach(t),ygo=i(oa),wi=n(oa,"P",{});var CZ=s(wi);Lgo=r(CZ,"The processor class to instantiate is selected based on the "),nse=n(CZ,"CODE",{});var $Zr=s(nse);xgo=r($Zr,"model_type"),$Zr.forEach(t),$go=r(CZ,` property of the config object (either
passed as an argument or loaded from `),sse=n(CZ,"CODE",{});var kZr=s(sse);kgo=r(kZr,"pretrained_model_name_or_path"),kZr.forEach(t),Sgo=r(CZ," if possible):"),CZ.forEach(t),Rgo=i(oa),he=n(oa,"UL",{});var ue=s(he);Vh=n(ue,"LI",{});var N6e=s(Vh);lse=n(N6e,"STRONG",{});var SZr=s(lse);Pgo=r(SZr,"clip"),SZr.forEach(t),Bgo=r(N6e," \u2014 "),FI=n(N6e,"A",{href:!0});var RZr=s(FI);Igo=r(RZr,"CLIPProcessor"),RZr.forEach(t),Ngo=r(N6e," (CLIP model)"),N6e.forEach(t),qgo=i(ue),Xh=n(ue,"LI",{});var q6e=s(Xh);ise=n(q6e,"STRONG",{});var PZr=s(ise);jgo=r(PZr,"flava"),PZr.forEach(t),Dgo=r(q6e," \u2014 "),dse=n(q6e,"CODE",{});var BZr=s(dse);Ggo=r(BZr,"FLAVAProcessor"),BZr.forEach(t),Ogo=r(q6e," (Flava model)"),q6e.forEach(t),Vgo=i(ue),zh=n(ue,"LI",{});var j6e=s(zh);cse=n(j6e,"STRONG",{});var IZr=s(cse);Xgo=r(IZr,"layoutlmv2"),IZr.forEach(t),zgo=r(j6e," \u2014 "),TI=n(j6e,"A",{href:!0});var NZr=s(TI);Wgo=r(NZr,"LayoutLMv2Processor"),NZr.forEach(t),Qgo=r(j6e," (LayoutLMv2 model)"),j6e.forEach(t),Hgo=i(ue),Wh=n(ue,"LI",{});var D6e=s(Wh);fse=n(D6e,"STRONG",{});var qZr=s(fse);Ugo=r(qZr,"layoutlmv3"),qZr.forEach(t),Jgo=r(D6e," \u2014 "),MI=n(D6e,"A",{href:!0});var jZr=s(MI);Ygo=r(jZr,"LayoutLMv3Processor"),jZr.forEach(t),Kgo=r(D6e," (LayoutLMv3 model)"),D6e.forEach(t),Zgo=i(ue),Qh=n(ue,"LI",{});var G6e=s(Qh);mse=n(G6e,"STRONG",{});var DZr=s(mse);eho=r(DZr,"layoutxlm"),DZr.forEach(t),oho=r(G6e," \u2014 "),EI=n(G6e,"A",{href:!0});var GZr=s(EI);rho=r(GZr,"LayoutXLMProcessor"),GZr.forEach(t),tho=r(G6e," (LayoutXLM model)"),G6e.forEach(t),aho=i(ue),Hh=n(ue,"LI",{});var O6e=s(Hh);gse=n(O6e,"STRONG",{});var OZr=s(gse);nho=r(OZr,"sew"),OZr.forEach(t),sho=r(O6e," \u2014 "),CI=n(O6e,"A",{href:!0});var VZr=s(CI);lho=r(VZr,"Wav2Vec2Processor"),VZr.forEach(t),iho=r(O6e," (SEW model)"),O6e.forEach(t),dho=i(ue),Uh=n(ue,"LI",{});var V6e=s(Uh);hse=n(V6e,"STRONG",{});var XZr=s(hse);cho=r(XZr,"sew-d"),XZr.forEach(t),fho=r(V6e," \u2014 "),wI=n(V6e,"A",{href:!0});var zZr=s(wI);mho=r(zZr,"Wav2Vec2Processor"),zZr.forEach(t),gho=r(V6e," (SEW-D model)"),V6e.forEach(t),hho=i(ue),Jh=n(ue,"LI",{});var X6e=s(Jh);pse=n(X6e,"STRONG",{});var WZr=s(pse);pho=r(WZr,"speech_to_text"),WZr.forEach(t),_ho=r(X6e," \u2014 "),AI=n(X6e,"A",{href:!0});var QZr=s(AI);uho=r(QZr,"Speech2TextProcessor"),QZr.forEach(t),bho=r(X6e," (Speech2Text model)"),X6e.forEach(t),vho=i(ue),Yh=n(ue,"LI",{});var z6e=s(Yh);_se=n(z6e,"STRONG",{});var HZr=s(_se);Fho=r(HZr,"speech_to_text_2"),HZr.forEach(t),Tho=r(z6e," \u2014 "),yI=n(z6e,"A",{href:!0});var UZr=s(yI);Mho=r(UZr,"Speech2Text2Processor"),UZr.forEach(t),Eho=r(z6e," (Speech2Text2 model)"),z6e.forEach(t),Cho=i(ue),Kh=n(ue,"LI",{});var W6e=s(Kh);use=n(W6e,"STRONG",{});var JZr=s(use);who=r(JZr,"trocr"),JZr.forEach(t),Aho=r(W6e," \u2014 "),LI=n(W6e,"A",{href:!0});var YZr=s(LI);yho=r(YZr,"TrOCRProcessor"),YZr.forEach(t),Lho=r(W6e," (TrOCR model)"),W6e.forEach(t),xho=i(ue),Zh=n(ue,"LI",{});var Q6e=s(Zh);bse=n(Q6e,"STRONG",{});var KZr=s(bse);$ho=r(KZr,"unispeech"),KZr.forEach(t),kho=r(Q6e," \u2014 "),xI=n(Q6e,"A",{href:!0});var ZZr=s(xI);Sho=r(ZZr,"Wav2Vec2Processor"),ZZr.forEach(t),Rho=r(Q6e," (UniSpeech model)"),Q6e.forEach(t),Pho=i(ue),ep=n(ue,"LI",{});var H6e=s(ep);vse=n(H6e,"STRONG",{});var eet=s(vse);Bho=r(eet,"unispeech-sat"),eet.forEach(t),Iho=r(H6e," \u2014 "),$I=n(H6e,"A",{href:!0});var oet=s($I);Nho=r(oet,"Wav2Vec2Processor"),oet.forEach(t),qho=r(H6e," (UniSpeechSat model)"),H6e.forEach(t),jho=i(ue),op=n(ue,"LI",{});var U6e=s(op);Fse=n(U6e,"STRONG",{});var ret=s(Fse);Dho=r(ret,"vilt"),ret.forEach(t),Gho=r(U6e," \u2014 "),kI=n(U6e,"A",{href:!0});var tet=s(kI);Oho=r(tet,"ViltProcessor"),tet.forEach(t),Vho=r(U6e," (ViLT model)"),U6e.forEach(t),Xho=i(ue),rp=n(ue,"LI",{});var J6e=s(rp);Tse=n(J6e,"STRONG",{});var aet=s(Tse);zho=r(aet,"vision-text-dual-encoder"),aet.forEach(t),Who=r(J6e," \u2014 "),SI=n(J6e,"A",{href:!0});var net=s(SI);Qho=r(net,"VisionTextDualEncoderProcessor"),net.forEach(t),Hho=r(J6e," (VisionTextDualEncoder model)"),J6e.forEach(t),Uho=i(ue),tp=n(ue,"LI",{});var Y6e=s(tp);Mse=n(Y6e,"STRONG",{});var set=s(Mse);Jho=r(set,"wav2vec2"),set.forEach(t),Yho=r(Y6e," \u2014 "),RI=n(Y6e,"A",{href:!0});var iet=s(RI);Kho=r(iet,"Wav2Vec2Processor"),iet.forEach(t),Zho=r(Y6e," (Wav2Vec2 model)"),Y6e.forEach(t),epo=i(ue),ap=n(ue,"LI",{});var K6e=s(ap);Ese=n(K6e,"STRONG",{});var det=s(Ese);opo=r(det,"wav2vec2-conformer"),det.forEach(t),rpo=r(K6e," \u2014 "),PI=n(K6e,"A",{href:!0});var cet=s(PI);tpo=r(cet,"Wav2Vec2Processor"),cet.forEach(t),apo=r(K6e," (Wav2Vec2-Conformer model)"),K6e.forEach(t),npo=i(ue),np=n(ue,"LI",{});var Z6e=s(np);Cse=n(Z6e,"STRONG",{});var fet=s(Cse);spo=r(fet,"wavlm"),fet.forEach(t),lpo=r(Z6e," \u2014 "),BI=n(Z6e,"A",{href:!0});var met=s(BI);ipo=r(met,"Wav2Vec2Processor"),met.forEach(t),dpo=r(Z6e," (WavLM model)"),Z6e.forEach(t),ue.forEach(t),cpo=i(oa),T(sp.$$.fragment,oa),fpo=i(oa),T(lp.$$.fragment,oa),oa.forEach(t),mpo=i(Ds),ip=n(Ds,"DIV",{class:!0});var PDe=s(ip);T(ty.$$.fragment,PDe),gpo=i(PDe),wse=n(PDe,"P",{});var get=s(wse);hpo=r(get,"Register a new processor for this class."),get.forEach(t),PDe.forEach(t),Ds.forEach(t),kqe=i(f),Ai=n(f,"H2",{class:!0});var BDe=s(Ai);dp=n(BDe,"A",{id:!0,class:!0,href:!0});var het=s(dp);Ase=n(het,"SPAN",{});var pet=s(Ase);T(ay.$$.fragment,pet),pet.forEach(t),het.forEach(t),ppo=i(BDe),yse=n(BDe,"SPAN",{});var _et=s(yse);_po=r(_et,"AutoModel"),_et.forEach(t),BDe.forEach(t),Sqe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(ny.$$.fragment,Gs),upo=i(Gs),yi=n(Gs,"P",{});var wZ=s(yi);bpo=r(wZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),II=n(wZ,"A",{href:!0});var uet=s(II);vpo=r(uet,"from_pretrained()"),uet.forEach(t),Fpo=r(wZ," class method or the "),NI=n(wZ,"A",{href:!0});var bet=s(NI);Tpo=r(bet,"from_config()"),bet.forEach(t),Mpo=r(wZ,` class
method.`),wZ.forEach(t),Epo=i(Gs),sy=n(Gs,"P",{});var IDe=s(sy);Cpo=r(IDe,"This class cannot be instantiated directly using "),Lse=n(IDe,"CODE",{});var vet=s(Lse);wpo=r(vet,"__init__()"),vet.forEach(t),Apo=r(IDe," (throws an error)."),IDe.forEach(t),ypo=i(Gs),at=n(Gs,"DIV",{class:!0});var N0=s(at);T(ly.$$.fragment,N0),Lpo=i(N0),xse=n(N0,"P",{});var Fet=s(xse);xpo=r(Fet,"Instantiates one of the base model classes of the library from a configuration."),Fet.forEach(t),$po=i(N0),Li=n(N0,"P",{});var AZ=s(Li);kpo=r(AZ,`Note:
Loading a model from its configuration file does `),$se=n(AZ,"STRONG",{});var Tet=s($se);Spo=r(Tet,"not"),Tet.forEach(t),Rpo=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qI=n(AZ,"A",{href:!0});var Met=s(qI);Ppo=r(Met,"from_pretrained()"),Met.forEach(t),Bpo=r(AZ," to load the model weights."),AZ.forEach(t),Ipo=i(N0),T(cp.$$.fragment,N0),N0.forEach(t),Npo=i(Gs),Je=n(Gs,"DIV",{class:!0});var ra=s(Je);T(iy.$$.fragment,ra),qpo=i(ra),kse=n(ra,"P",{});var Eet=s(kse);jpo=r(Eet,"Instantiate one of the base model classes of the library from a pretrained model."),Eet.forEach(t),Dpo=i(ra),xa=n(ra,"P",{});var q0=s(xa);Gpo=r(q0,"The model class to instantiate is selected based on the "),Sse=n(q0,"CODE",{});var Cet=s(Sse);Opo=r(Cet,"model_type"),Cet.forEach(t),Vpo=r(q0,` property of the config object (either
passed as an argument or loaded from `),Rse=n(q0,"CODE",{});var wet=s(Rse);Xpo=r(wet,"pretrained_model_name_or_path"),wet.forEach(t),zpo=r(q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pse=n(q0,"CODE",{});var Aet=s(Pse);Wpo=r(Aet,"pretrained_model_name_or_path"),Aet.forEach(t),Qpo=r(q0,":"),q0.forEach(t),Hpo=i(ra),x=n(ra,"UL",{});var $=s(x);fp=n($,"LI",{});var eAe=s(fp);Bse=n(eAe,"STRONG",{});var yet=s(Bse);Upo=r(yet,"albert"),yet.forEach(t),Jpo=r(eAe," \u2014 "),jI=n(eAe,"A",{href:!0});var Let=s(jI);Ypo=r(Let,"AlbertModel"),Let.forEach(t),Kpo=r(eAe," (ALBERT model)"),eAe.forEach(t),Zpo=i($),mp=n($,"LI",{});var oAe=s(mp);Ise=n(oAe,"STRONG",{});var xet=s(Ise);e_o=r(xet,"bart"),xet.forEach(t),o_o=r(oAe," \u2014 "),DI=n(oAe,"A",{href:!0});var $et=s(DI);r_o=r($et,"BartModel"),$et.forEach(t),t_o=r(oAe," (BART model)"),oAe.forEach(t),a_o=i($),gp=n($,"LI",{});var rAe=s(gp);Nse=n(rAe,"STRONG",{});var ket=s(Nse);n_o=r(ket,"beit"),ket.forEach(t),s_o=r(rAe," \u2014 "),GI=n(rAe,"A",{href:!0});var Set=s(GI);l_o=r(Set,"BeitModel"),Set.forEach(t),i_o=r(rAe," (BEiT model)"),rAe.forEach(t),d_o=i($),hp=n($,"LI",{});var tAe=s(hp);qse=n(tAe,"STRONG",{});var Ret=s(qse);c_o=r(Ret,"bert"),Ret.forEach(t),f_o=r(tAe," \u2014 "),OI=n(tAe,"A",{href:!0});var Pet=s(OI);m_o=r(Pet,"BertModel"),Pet.forEach(t),g_o=r(tAe," (BERT model)"),tAe.forEach(t),h_o=i($),pp=n($,"LI",{});var aAe=s(pp);jse=n(aAe,"STRONG",{});var Bet=s(jse);p_o=r(Bet,"bert-generation"),Bet.forEach(t),__o=r(aAe," \u2014 "),VI=n(aAe,"A",{href:!0});var Iet=s(VI);u_o=r(Iet,"BertGenerationEncoder"),Iet.forEach(t),b_o=r(aAe," (Bert Generation model)"),aAe.forEach(t),v_o=i($),_p=n($,"LI",{});var nAe=s(_p);Dse=n(nAe,"STRONG",{});var Net=s(Dse);F_o=r(Net,"big_bird"),Net.forEach(t),T_o=r(nAe," \u2014 "),XI=n(nAe,"A",{href:!0});var qet=s(XI);M_o=r(qet,"BigBirdModel"),qet.forEach(t),E_o=r(nAe," (BigBird model)"),nAe.forEach(t),C_o=i($),up=n($,"LI",{});var sAe=s(up);Gse=n(sAe,"STRONG",{});var jet=s(Gse);w_o=r(jet,"bigbird_pegasus"),jet.forEach(t),A_o=r(sAe," \u2014 "),zI=n(sAe,"A",{href:!0});var Det=s(zI);y_o=r(Det,"BigBirdPegasusModel"),Det.forEach(t),L_o=r(sAe," (BigBirdPegasus model)"),sAe.forEach(t),x_o=i($),bp=n($,"LI",{});var lAe=s(bp);Ose=n(lAe,"STRONG",{});var Get=s(Ose);$_o=r(Get,"blenderbot"),Get.forEach(t),k_o=r(lAe," \u2014 "),WI=n(lAe,"A",{href:!0});var Oet=s(WI);S_o=r(Oet,"BlenderbotModel"),Oet.forEach(t),R_o=r(lAe," (Blenderbot model)"),lAe.forEach(t),P_o=i($),vp=n($,"LI",{});var iAe=s(vp);Vse=n(iAe,"STRONG",{});var Vet=s(Vse);B_o=r(Vet,"blenderbot-small"),Vet.forEach(t),I_o=r(iAe," \u2014 "),QI=n(iAe,"A",{href:!0});var Xet=s(QI);N_o=r(Xet,"BlenderbotSmallModel"),Xet.forEach(t),q_o=r(iAe," (BlenderbotSmall model)"),iAe.forEach(t),j_o=i($),Fp=n($,"LI",{});var dAe=s(Fp);Xse=n(dAe,"STRONG",{});var zet=s(Xse);D_o=r(zet,"camembert"),zet.forEach(t),G_o=r(dAe," \u2014 "),HI=n(dAe,"A",{href:!0});var Wet=s(HI);O_o=r(Wet,"CamembertModel"),Wet.forEach(t),V_o=r(dAe," (CamemBERT model)"),dAe.forEach(t),X_o=i($),Tp=n($,"LI",{});var cAe=s(Tp);zse=n(cAe,"STRONG",{});var Qet=s(zse);z_o=r(Qet,"canine"),Qet.forEach(t),W_o=r(cAe," \u2014 "),UI=n(cAe,"A",{href:!0});var Het=s(UI);Q_o=r(Het,"CanineModel"),Het.forEach(t),H_o=r(cAe," (Canine model)"),cAe.forEach(t),U_o=i($),Mp=n($,"LI",{});var fAe=s(Mp);Wse=n(fAe,"STRONG",{});var Uet=s(Wse);J_o=r(Uet,"clip"),Uet.forEach(t),Y_o=r(fAe," \u2014 "),JI=n(fAe,"A",{href:!0});var Jet=s(JI);K_o=r(Jet,"CLIPModel"),Jet.forEach(t),Z_o=r(fAe," (CLIP model)"),fAe.forEach(t),euo=i($),Ep=n($,"LI",{});var mAe=s(Ep);Qse=n(mAe,"STRONG",{});var Yet=s(Qse);ouo=r(Yet,"convbert"),Yet.forEach(t),ruo=r(mAe," \u2014 "),YI=n(mAe,"A",{href:!0});var Ket=s(YI);tuo=r(Ket,"ConvBertModel"),Ket.forEach(t),auo=r(mAe," (ConvBERT model)"),mAe.forEach(t),nuo=i($),Cp=n($,"LI",{});var gAe=s(Cp);Hse=n(gAe,"STRONG",{});var Zet=s(Hse);suo=r(Zet,"convnext"),Zet.forEach(t),luo=r(gAe," \u2014 "),KI=n(gAe,"A",{href:!0});var eot=s(KI);iuo=r(eot,"ConvNextModel"),eot.forEach(t),duo=r(gAe," (ConvNext model)"),gAe.forEach(t),cuo=i($),wp=n($,"LI",{});var hAe=s(wp);Use=n(hAe,"STRONG",{});var oot=s(Use);fuo=r(oot,"ctrl"),oot.forEach(t),muo=r(hAe," \u2014 "),ZI=n(hAe,"A",{href:!0});var rot=s(ZI);guo=r(rot,"CTRLModel"),rot.forEach(t),huo=r(hAe," (CTRL model)"),hAe.forEach(t),puo=i($),Ap=n($,"LI",{});var pAe=s(Ap);Jse=n(pAe,"STRONG",{});var tot=s(Jse);_uo=r(tot,"cvt"),tot.forEach(t),uuo=r(pAe," \u2014 "),eN=n(pAe,"A",{href:!0});var aot=s(eN);buo=r(aot,"CvtModel"),aot.forEach(t),vuo=r(pAe," (CvT model)"),pAe.forEach(t),Fuo=i($),yp=n($,"LI",{});var _Ae=s(yp);Yse=n(_Ae,"STRONG",{});var not=s(Yse);Tuo=r(not,"data2vec-audio"),not.forEach(t),Muo=r(_Ae," \u2014 "),oN=n(_Ae,"A",{href:!0});var sot=s(oN);Euo=r(sot,"Data2VecAudioModel"),sot.forEach(t),Cuo=r(_Ae," (Data2VecAudio model)"),_Ae.forEach(t),wuo=i($),Lp=n($,"LI",{});var uAe=s(Lp);Kse=n(uAe,"STRONG",{});var lot=s(Kse);Auo=r(lot,"data2vec-text"),lot.forEach(t),yuo=r(uAe," \u2014 "),rN=n(uAe,"A",{href:!0});var iot=s(rN);Luo=r(iot,"Data2VecTextModel"),iot.forEach(t),xuo=r(uAe," (Data2VecText model)"),uAe.forEach(t),$uo=i($),xp=n($,"LI",{});var bAe=s(xp);Zse=n(bAe,"STRONG",{});var dot=s(Zse);kuo=r(dot,"data2vec-vision"),dot.forEach(t),Suo=r(bAe," \u2014 "),tN=n(bAe,"A",{href:!0});var cot=s(tN);Ruo=r(cot,"Data2VecVisionModel"),cot.forEach(t),Puo=r(bAe," (Data2VecVision model)"),bAe.forEach(t),Buo=i($),$p=n($,"LI",{});var vAe=s($p);ele=n(vAe,"STRONG",{});var fot=s(ele);Iuo=r(fot,"deberta"),fot.forEach(t),Nuo=r(vAe," \u2014 "),aN=n(vAe,"A",{href:!0});var mot=s(aN);quo=r(mot,"DebertaModel"),mot.forEach(t),juo=r(vAe," (DeBERTa model)"),vAe.forEach(t),Duo=i($),kp=n($,"LI",{});var FAe=s(kp);ole=n(FAe,"STRONG",{});var got=s(ole);Guo=r(got,"deberta-v2"),got.forEach(t),Ouo=r(FAe," \u2014 "),nN=n(FAe,"A",{href:!0});var hot=s(nN);Vuo=r(hot,"DebertaV2Model"),hot.forEach(t),Xuo=r(FAe," (DeBERTa-v2 model)"),FAe.forEach(t),zuo=i($),Sp=n($,"LI",{});var TAe=s(Sp);rle=n(TAe,"STRONG",{});var pot=s(rle);Wuo=r(pot,"decision_transformer"),pot.forEach(t),Quo=r(TAe," \u2014 "),sN=n(TAe,"A",{href:!0});var _ot=s(sN);Huo=r(_ot,"DecisionTransformerModel"),_ot.forEach(t),Uuo=r(TAe," (Decision Transformer model)"),TAe.forEach(t),Juo=i($),Rp=n($,"LI",{});var MAe=s(Rp);tle=n(MAe,"STRONG",{});var uot=s(tle);Yuo=r(uot,"deit"),uot.forEach(t),Kuo=r(MAe," \u2014 "),lN=n(MAe,"A",{href:!0});var bot=s(lN);Zuo=r(bot,"DeiTModel"),bot.forEach(t),e1o=r(MAe," (DeiT model)"),MAe.forEach(t),o1o=i($),Pp=n($,"LI",{});var EAe=s(Pp);ale=n(EAe,"STRONG",{});var vot=s(ale);r1o=r(vot,"detr"),vot.forEach(t),t1o=r(EAe," \u2014 "),iN=n(EAe,"A",{href:!0});var Fot=s(iN);a1o=r(Fot,"DetrModel"),Fot.forEach(t),n1o=r(EAe," (DETR model)"),EAe.forEach(t),s1o=i($),Bp=n($,"LI",{});var CAe=s(Bp);nle=n(CAe,"STRONG",{});var Tot=s(nle);l1o=r(Tot,"distilbert"),Tot.forEach(t),i1o=r(CAe," \u2014 "),dN=n(CAe,"A",{href:!0});var Mot=s(dN);d1o=r(Mot,"DistilBertModel"),Mot.forEach(t),c1o=r(CAe," (DistilBERT model)"),CAe.forEach(t),f1o=i($),Ip=n($,"LI",{});var wAe=s(Ip);sle=n(wAe,"STRONG",{});var Eot=s(sle);m1o=r(Eot,"dpr"),Eot.forEach(t),g1o=r(wAe," \u2014 "),cN=n(wAe,"A",{href:!0});var Cot=s(cN);h1o=r(Cot,"DPRQuestionEncoder"),Cot.forEach(t),p1o=r(wAe," (DPR model)"),wAe.forEach(t),_1o=i($),Np=n($,"LI",{});var AAe=s(Np);lle=n(AAe,"STRONG",{});var wot=s(lle);u1o=r(wot,"dpt"),wot.forEach(t),b1o=r(AAe," \u2014 "),fN=n(AAe,"A",{href:!0});var Aot=s(fN);v1o=r(Aot,"DPTModel"),Aot.forEach(t),F1o=r(AAe," (DPT model)"),AAe.forEach(t),T1o=i($),qp=n($,"LI",{});var yAe=s(qp);ile=n(yAe,"STRONG",{});var yot=s(ile);M1o=r(yot,"electra"),yot.forEach(t),E1o=r(yAe," \u2014 "),mN=n(yAe,"A",{href:!0});var Lot=s(mN);C1o=r(Lot,"ElectraModel"),Lot.forEach(t),w1o=r(yAe," (ELECTRA model)"),yAe.forEach(t),A1o=i($),jp=n($,"LI",{});var LAe=s(jp);dle=n(LAe,"STRONG",{});var xot=s(dle);y1o=r(xot,"flaubert"),xot.forEach(t),L1o=r(LAe," \u2014 "),gN=n(LAe,"A",{href:!0});var $ot=s(gN);x1o=r($ot,"FlaubertModel"),$ot.forEach(t),$1o=r(LAe," (FlauBERT model)"),LAe.forEach(t),k1o=i($),Dp=n($,"LI",{});var xAe=s(Dp);cle=n(xAe,"STRONG",{});var kot=s(cle);S1o=r(kot,"flava"),kot.forEach(t),R1o=r(xAe," \u2014 "),hN=n(xAe,"A",{href:!0});var Sot=s(hN);P1o=r(Sot,"FlavaModel"),Sot.forEach(t),B1o=r(xAe," (Flava model)"),xAe.forEach(t),I1o=i($),Gp=n($,"LI",{});var $Ae=s(Gp);fle=n($Ae,"STRONG",{});var Rot=s(fle);N1o=r(Rot,"fnet"),Rot.forEach(t),q1o=r($Ae," \u2014 "),pN=n($Ae,"A",{href:!0});var Pot=s(pN);j1o=r(Pot,"FNetModel"),Pot.forEach(t),D1o=r($Ae," (FNet model)"),$Ae.forEach(t),G1o=i($),Op=n($,"LI",{});var kAe=s(Op);mle=n(kAe,"STRONG",{});var Bot=s(mle);O1o=r(Bot,"fsmt"),Bot.forEach(t),V1o=r(kAe," \u2014 "),_N=n(kAe,"A",{href:!0});var Iot=s(_N);X1o=r(Iot,"FSMTModel"),Iot.forEach(t),z1o=r(kAe," (FairSeq Machine-Translation model)"),kAe.forEach(t),W1o=i($),Ps=n($,"LI",{});var Q$=s(Ps);gle=n(Q$,"STRONG",{});var Not=s(gle);Q1o=r(Not,"funnel"),Not.forEach(t),H1o=r(Q$," \u2014 "),uN=n(Q$,"A",{href:!0});var qot=s(uN);U1o=r(qot,"FunnelModel"),qot.forEach(t),J1o=r(Q$," or "),bN=n(Q$,"A",{href:!0});var jot=s(bN);Y1o=r(jot,"FunnelBaseModel"),jot.forEach(t),K1o=r(Q$," (Funnel Transformer model)"),Q$.forEach(t),Z1o=i($),Vp=n($,"LI",{});var SAe=s(Vp);hle=n(SAe,"STRONG",{});var Dot=s(hle);ebo=r(Dot,"glpn"),Dot.forEach(t),obo=r(SAe," \u2014 "),vN=n(SAe,"A",{href:!0});var Got=s(vN);rbo=r(Got,"GLPNModel"),Got.forEach(t),tbo=r(SAe," (GLPN model)"),SAe.forEach(t),abo=i($),Xp=n($,"LI",{});var RAe=s(Xp);ple=n(RAe,"STRONG",{});var Oot=s(ple);nbo=r(Oot,"gpt2"),Oot.forEach(t),sbo=r(RAe," \u2014 "),FN=n(RAe,"A",{href:!0});var Vot=s(FN);lbo=r(Vot,"GPT2Model"),Vot.forEach(t),ibo=r(RAe," (OpenAI GPT-2 model)"),RAe.forEach(t),dbo=i($),zp=n($,"LI",{});var PAe=s(zp);_le=n(PAe,"STRONG",{});var Xot=s(_le);cbo=r(Xot,"gpt_neo"),Xot.forEach(t),fbo=r(PAe," \u2014 "),TN=n(PAe,"A",{href:!0});var zot=s(TN);mbo=r(zot,"GPTNeoModel"),zot.forEach(t),gbo=r(PAe," (GPT Neo model)"),PAe.forEach(t),hbo=i($),Wp=n($,"LI",{});var BAe=s(Wp);ule=n(BAe,"STRONG",{});var Wot=s(ule);pbo=r(Wot,"gpt_neox"),Wot.forEach(t),_bo=r(BAe," \u2014 "),MN=n(BAe,"A",{href:!0});var Qot=s(MN);ubo=r(Qot,"GPTNeoXModel"),Qot.forEach(t),bbo=r(BAe," (GPT NeoX model)"),BAe.forEach(t),vbo=i($),Qp=n($,"LI",{});var IAe=s(Qp);ble=n(IAe,"STRONG",{});var Hot=s(ble);Fbo=r(Hot,"gptj"),Hot.forEach(t),Tbo=r(IAe," \u2014 "),EN=n(IAe,"A",{href:!0});var Uot=s(EN);Mbo=r(Uot,"GPTJModel"),Uot.forEach(t),Ebo=r(IAe," (GPT-J model)"),IAe.forEach(t),Cbo=i($),Hp=n($,"LI",{});var NAe=s(Hp);vle=n(NAe,"STRONG",{});var Jot=s(vle);wbo=r(Jot,"hubert"),Jot.forEach(t),Abo=r(NAe," \u2014 "),CN=n(NAe,"A",{href:!0});var Yot=s(CN);ybo=r(Yot,"HubertModel"),Yot.forEach(t),Lbo=r(NAe," (Hubert model)"),NAe.forEach(t),xbo=i($),Up=n($,"LI",{});var qAe=s(Up);Fle=n(qAe,"STRONG",{});var Kot=s(Fle);$bo=r(Kot,"ibert"),Kot.forEach(t),kbo=r(qAe," \u2014 "),wN=n(qAe,"A",{href:!0});var Zot=s(wN);Sbo=r(Zot,"IBertModel"),Zot.forEach(t),Rbo=r(qAe," (I-BERT model)"),qAe.forEach(t),Pbo=i($),Jp=n($,"LI",{});var jAe=s(Jp);Tle=n(jAe,"STRONG",{});var ert=s(Tle);Bbo=r(ert,"imagegpt"),ert.forEach(t),Ibo=r(jAe," \u2014 "),AN=n(jAe,"A",{href:!0});var ort=s(AN);Nbo=r(ort,"ImageGPTModel"),ort.forEach(t),qbo=r(jAe," (ImageGPT model)"),jAe.forEach(t),jbo=i($),Yp=n($,"LI",{});var DAe=s(Yp);Mle=n(DAe,"STRONG",{});var rrt=s(Mle);Dbo=r(rrt,"layoutlm"),rrt.forEach(t),Gbo=r(DAe," \u2014 "),yN=n(DAe,"A",{href:!0});var trt=s(yN);Obo=r(trt,"LayoutLMModel"),trt.forEach(t),Vbo=r(DAe," (LayoutLM model)"),DAe.forEach(t),Xbo=i($),Kp=n($,"LI",{});var GAe=s(Kp);Ele=n(GAe,"STRONG",{});var art=s(Ele);zbo=r(art,"layoutlmv2"),art.forEach(t),Wbo=r(GAe," \u2014 "),LN=n(GAe,"A",{href:!0});var nrt=s(LN);Qbo=r(nrt,"LayoutLMv2Model"),nrt.forEach(t),Hbo=r(GAe," (LayoutLMv2 model)"),GAe.forEach(t),Ubo=i($),Zp=n($,"LI",{});var OAe=s(Zp);Cle=n(OAe,"STRONG",{});var srt=s(Cle);Jbo=r(srt,"layoutlmv3"),srt.forEach(t),Ybo=r(OAe," \u2014 "),xN=n(OAe,"A",{href:!0});var lrt=s(xN);Kbo=r(lrt,"LayoutLMv3Model"),lrt.forEach(t),Zbo=r(OAe," (LayoutLMv3 model)"),OAe.forEach(t),e2o=i($),e_=n($,"LI",{});var VAe=s(e_);wle=n(VAe,"STRONG",{});var irt=s(wle);o2o=r(irt,"led"),irt.forEach(t),r2o=r(VAe," \u2014 "),$N=n(VAe,"A",{href:!0});var drt=s($N);t2o=r(drt,"LEDModel"),drt.forEach(t),a2o=r(VAe," (LED model)"),VAe.forEach(t),n2o=i($),o_=n($,"LI",{});var XAe=s(o_);Ale=n(XAe,"STRONG",{});var crt=s(Ale);s2o=r(crt,"longformer"),crt.forEach(t),l2o=r(XAe," \u2014 "),kN=n(XAe,"A",{href:!0});var frt=s(kN);i2o=r(frt,"LongformerModel"),frt.forEach(t),d2o=r(XAe," (Longformer model)"),XAe.forEach(t),c2o=i($),r_=n($,"LI",{});var zAe=s(r_);yle=n(zAe,"STRONG",{});var mrt=s(yle);f2o=r(mrt,"luke"),mrt.forEach(t),m2o=r(zAe," \u2014 "),SN=n(zAe,"A",{href:!0});var grt=s(SN);g2o=r(grt,"LukeModel"),grt.forEach(t),h2o=r(zAe," (LUKE model)"),zAe.forEach(t),p2o=i($),t_=n($,"LI",{});var WAe=s(t_);Lle=n(WAe,"STRONG",{});var hrt=s(Lle);_2o=r(hrt,"lxmert"),hrt.forEach(t),u2o=r(WAe," \u2014 "),RN=n(WAe,"A",{href:!0});var prt=s(RN);b2o=r(prt,"LxmertModel"),prt.forEach(t),v2o=r(WAe," (LXMERT model)"),WAe.forEach(t),F2o=i($),a_=n($,"LI",{});var QAe=s(a_);xle=n(QAe,"STRONG",{});var _rt=s(xle);T2o=r(_rt,"m2m_100"),_rt.forEach(t),M2o=r(QAe," \u2014 "),PN=n(QAe,"A",{href:!0});var urt=s(PN);E2o=r(urt,"M2M100Model"),urt.forEach(t),C2o=r(QAe," (M2M100 model)"),QAe.forEach(t),w2o=i($),n_=n($,"LI",{});var HAe=s(n_);$le=n(HAe,"STRONG",{});var brt=s($le);A2o=r(brt,"marian"),brt.forEach(t),y2o=r(HAe," \u2014 "),BN=n(HAe,"A",{href:!0});var vrt=s(BN);L2o=r(vrt,"MarianModel"),vrt.forEach(t),x2o=r(HAe," (Marian model)"),HAe.forEach(t),$2o=i($),s_=n($,"LI",{});var UAe=s(s_);kle=n(UAe,"STRONG",{});var Frt=s(kle);k2o=r(Frt,"maskformer"),Frt.forEach(t),S2o=r(UAe," \u2014 "),IN=n(UAe,"A",{href:!0});var Trt=s(IN);R2o=r(Trt,"MaskFormerModel"),Trt.forEach(t),P2o=r(UAe," (MaskFormer model)"),UAe.forEach(t),B2o=i($),l_=n($,"LI",{});var JAe=s(l_);Sle=n(JAe,"STRONG",{});var Mrt=s(Sle);I2o=r(Mrt,"mbart"),Mrt.forEach(t),N2o=r(JAe," \u2014 "),NN=n(JAe,"A",{href:!0});var Ert=s(NN);q2o=r(Ert,"MBartModel"),Ert.forEach(t),j2o=r(JAe," (mBART model)"),JAe.forEach(t),D2o=i($),i_=n($,"LI",{});var YAe=s(i_);Rle=n(YAe,"STRONG",{});var Crt=s(Rle);G2o=r(Crt,"megatron-bert"),Crt.forEach(t),O2o=r(YAe," \u2014 "),qN=n(YAe,"A",{href:!0});var wrt=s(qN);V2o=r(wrt,"MegatronBertModel"),wrt.forEach(t),X2o=r(YAe," (MegatronBert model)"),YAe.forEach(t),z2o=i($),d_=n($,"LI",{});var KAe=s(d_);Ple=n(KAe,"STRONG",{});var Art=s(Ple);W2o=r(Art,"mobilebert"),Art.forEach(t),Q2o=r(KAe," \u2014 "),jN=n(KAe,"A",{href:!0});var yrt=s(jN);H2o=r(yrt,"MobileBertModel"),yrt.forEach(t),U2o=r(KAe," (MobileBERT model)"),KAe.forEach(t),J2o=i($),c_=n($,"LI",{});var ZAe=s(c_);Ble=n(ZAe,"STRONG",{});var Lrt=s(Ble);Y2o=r(Lrt,"mobilevit"),Lrt.forEach(t),K2o=r(ZAe," \u2014 "),DN=n(ZAe,"A",{href:!0});var xrt=s(DN);Z2o=r(xrt,"MobileViTModel"),xrt.forEach(t),e4o=r(ZAe," (MobileViT model)"),ZAe.forEach(t),o4o=i($),f_=n($,"LI",{});var eye=s(f_);Ile=n(eye,"STRONG",{});var $rt=s(Ile);r4o=r($rt,"mpnet"),$rt.forEach(t),t4o=r(eye," \u2014 "),GN=n(eye,"A",{href:!0});var krt=s(GN);a4o=r(krt,"MPNetModel"),krt.forEach(t),n4o=r(eye," (MPNet model)"),eye.forEach(t),s4o=i($),m_=n($,"LI",{});var oye=s(m_);Nle=n(oye,"STRONG",{});var Srt=s(Nle);l4o=r(Srt,"mt5"),Srt.forEach(t),i4o=r(oye," \u2014 "),ON=n(oye,"A",{href:!0});var Rrt=s(ON);d4o=r(Rrt,"MT5Model"),Rrt.forEach(t),c4o=r(oye," (mT5 model)"),oye.forEach(t),f4o=i($),g_=n($,"LI",{});var rye=s(g_);qle=n(rye,"STRONG",{});var Prt=s(qle);m4o=r(Prt,"nystromformer"),Prt.forEach(t),g4o=r(rye," \u2014 "),VN=n(rye,"A",{href:!0});var Brt=s(VN);h4o=r(Brt,"NystromformerModel"),Brt.forEach(t),p4o=r(rye," (Nystromformer model)"),rye.forEach(t),_4o=i($),h_=n($,"LI",{});var tye=s(h_);jle=n(tye,"STRONG",{});var Irt=s(jle);u4o=r(Irt,"openai-gpt"),Irt.forEach(t),b4o=r(tye," \u2014 "),XN=n(tye,"A",{href:!0});var Nrt=s(XN);v4o=r(Nrt,"OpenAIGPTModel"),Nrt.forEach(t),F4o=r(tye," (OpenAI GPT model)"),tye.forEach(t),T4o=i($),p_=n($,"LI",{});var aye=s(p_);Dle=n(aye,"STRONG",{});var qrt=s(Dle);M4o=r(qrt,"opt"),qrt.forEach(t),E4o=r(aye," \u2014 "),zN=n(aye,"A",{href:!0});var jrt=s(zN);C4o=r(jrt,"OPTModel"),jrt.forEach(t),w4o=r(aye," (OPT model)"),aye.forEach(t),A4o=i($),__=n($,"LI",{});var nye=s(__);Gle=n(nye,"STRONG",{});var Drt=s(Gle);y4o=r(Drt,"pegasus"),Drt.forEach(t),L4o=r(nye," \u2014 "),WN=n(nye,"A",{href:!0});var Grt=s(WN);x4o=r(Grt,"PegasusModel"),Grt.forEach(t),$4o=r(nye," (Pegasus model)"),nye.forEach(t),k4o=i($),u_=n($,"LI",{});var sye=s(u_);Ole=n(sye,"STRONG",{});var Ort=s(Ole);S4o=r(Ort,"perceiver"),Ort.forEach(t),R4o=r(sye," \u2014 "),QN=n(sye,"A",{href:!0});var Vrt=s(QN);P4o=r(Vrt,"PerceiverModel"),Vrt.forEach(t),B4o=r(sye," (Perceiver model)"),sye.forEach(t),I4o=i($),b_=n($,"LI",{});var lye=s(b_);Vle=n(lye,"STRONG",{});var Xrt=s(Vle);N4o=r(Xrt,"plbart"),Xrt.forEach(t),q4o=r(lye," \u2014 "),HN=n(lye,"A",{href:!0});var zrt=s(HN);j4o=r(zrt,"PLBartModel"),zrt.forEach(t),D4o=r(lye," (PLBart model)"),lye.forEach(t),G4o=i($),v_=n($,"LI",{});var iye=s(v_);Xle=n(iye,"STRONG",{});var Wrt=s(Xle);O4o=r(Wrt,"poolformer"),Wrt.forEach(t),V4o=r(iye," \u2014 "),UN=n(iye,"A",{href:!0});var Qrt=s(UN);X4o=r(Qrt,"PoolFormerModel"),Qrt.forEach(t),z4o=r(iye," (PoolFormer model)"),iye.forEach(t),W4o=i($),F_=n($,"LI",{});var dye=s(F_);zle=n(dye,"STRONG",{});var Hrt=s(zle);Q4o=r(Hrt,"prophetnet"),Hrt.forEach(t),H4o=r(dye," \u2014 "),JN=n(dye,"A",{href:!0});var Urt=s(JN);U4o=r(Urt,"ProphetNetModel"),Urt.forEach(t),J4o=r(dye," (ProphetNet model)"),dye.forEach(t),Y4o=i($),T_=n($,"LI",{});var cye=s(T_);Wle=n(cye,"STRONG",{});var Jrt=s(Wle);K4o=r(Jrt,"qdqbert"),Jrt.forEach(t),Z4o=r(cye," \u2014 "),YN=n(cye,"A",{href:!0});var Yrt=s(YN);evo=r(Yrt,"QDQBertModel"),Yrt.forEach(t),ovo=r(cye," (QDQBert model)"),cye.forEach(t),rvo=i($),M_=n($,"LI",{});var fye=s(M_);Qle=n(fye,"STRONG",{});var Krt=s(Qle);tvo=r(Krt,"reformer"),Krt.forEach(t),avo=r(fye," \u2014 "),KN=n(fye,"A",{href:!0});var Zrt=s(KN);nvo=r(Zrt,"ReformerModel"),Zrt.forEach(t),svo=r(fye," (Reformer model)"),fye.forEach(t),lvo=i($),E_=n($,"LI",{});var mye=s(E_);Hle=n(mye,"STRONG",{});var ett=s(Hle);ivo=r(ett,"regnet"),ett.forEach(t),dvo=r(mye," \u2014 "),ZN=n(mye,"A",{href:!0});var ott=s(ZN);cvo=r(ott,"RegNetModel"),ott.forEach(t),fvo=r(mye," (RegNet model)"),mye.forEach(t),mvo=i($),C_=n($,"LI",{});var gye=s(C_);Ule=n(gye,"STRONG",{});var rtt=s(Ule);gvo=r(rtt,"rembert"),rtt.forEach(t),hvo=r(gye," \u2014 "),eq=n(gye,"A",{href:!0});var ttt=s(eq);pvo=r(ttt,"RemBertModel"),ttt.forEach(t),_vo=r(gye," (RemBERT model)"),gye.forEach(t),uvo=i($),w_=n($,"LI",{});var hye=s(w_);Jle=n(hye,"STRONG",{});var att=s(Jle);bvo=r(att,"resnet"),att.forEach(t),vvo=r(hye," \u2014 "),oq=n(hye,"A",{href:!0});var ntt=s(oq);Fvo=r(ntt,"ResNetModel"),ntt.forEach(t),Tvo=r(hye," (ResNet model)"),hye.forEach(t),Mvo=i($),A_=n($,"LI",{});var pye=s(A_);Yle=n(pye,"STRONG",{});var stt=s(Yle);Evo=r(stt,"retribert"),stt.forEach(t),Cvo=r(pye," \u2014 "),rq=n(pye,"A",{href:!0});var ltt=s(rq);wvo=r(ltt,"RetriBertModel"),ltt.forEach(t),Avo=r(pye," (RetriBERT model)"),pye.forEach(t),yvo=i($),y_=n($,"LI",{});var _ye=s(y_);Kle=n(_ye,"STRONG",{});var itt=s(Kle);Lvo=r(itt,"roberta"),itt.forEach(t),xvo=r(_ye," \u2014 "),tq=n(_ye,"A",{href:!0});var dtt=s(tq);$vo=r(dtt,"RobertaModel"),dtt.forEach(t),kvo=r(_ye," (RoBERTa model)"),_ye.forEach(t),Svo=i($),L_=n($,"LI",{});var uye=s(L_);Zle=n(uye,"STRONG",{});var ctt=s(Zle);Rvo=r(ctt,"roformer"),ctt.forEach(t),Pvo=r(uye," \u2014 "),aq=n(uye,"A",{href:!0});var ftt=s(aq);Bvo=r(ftt,"RoFormerModel"),ftt.forEach(t),Ivo=r(uye," (RoFormer model)"),uye.forEach(t),Nvo=i($),x_=n($,"LI",{});var bye=s(x_);eie=n(bye,"STRONG",{});var mtt=s(eie);qvo=r(mtt,"segformer"),mtt.forEach(t),jvo=r(bye," \u2014 "),nq=n(bye,"A",{href:!0});var gtt=s(nq);Dvo=r(gtt,"SegformerModel"),gtt.forEach(t),Gvo=r(bye," (SegFormer model)"),bye.forEach(t),Ovo=i($),$_=n($,"LI",{});var vye=s($_);oie=n(vye,"STRONG",{});var htt=s(oie);Vvo=r(htt,"sew"),htt.forEach(t),Xvo=r(vye," \u2014 "),sq=n(vye,"A",{href:!0});var ptt=s(sq);zvo=r(ptt,"SEWModel"),ptt.forEach(t),Wvo=r(vye," (SEW model)"),vye.forEach(t),Qvo=i($),k_=n($,"LI",{});var Fye=s(k_);rie=n(Fye,"STRONG",{});var _tt=s(rie);Hvo=r(_tt,"sew-d"),_tt.forEach(t),Uvo=r(Fye," \u2014 "),lq=n(Fye,"A",{href:!0});var utt=s(lq);Jvo=r(utt,"SEWDModel"),utt.forEach(t),Yvo=r(Fye," (SEW-D model)"),Fye.forEach(t),Kvo=i($),S_=n($,"LI",{});var Tye=s(S_);tie=n(Tye,"STRONG",{});var btt=s(tie);Zvo=r(btt,"speech_to_text"),btt.forEach(t),e5o=r(Tye," \u2014 "),iq=n(Tye,"A",{href:!0});var vtt=s(iq);o5o=r(vtt,"Speech2TextModel"),vtt.forEach(t),r5o=r(Tye," (Speech2Text model)"),Tye.forEach(t),t5o=i($),R_=n($,"LI",{});var Mye=s(R_);aie=n(Mye,"STRONG",{});var Ftt=s(aie);a5o=r(Ftt,"splinter"),Ftt.forEach(t),n5o=r(Mye," \u2014 "),dq=n(Mye,"A",{href:!0});var Ttt=s(dq);s5o=r(Ttt,"SplinterModel"),Ttt.forEach(t),l5o=r(Mye," (Splinter model)"),Mye.forEach(t),i5o=i($),P_=n($,"LI",{});var Eye=s(P_);nie=n(Eye,"STRONG",{});var Mtt=s(nie);d5o=r(Mtt,"squeezebert"),Mtt.forEach(t),c5o=r(Eye," \u2014 "),cq=n(Eye,"A",{href:!0});var Ett=s(cq);f5o=r(Ett,"SqueezeBertModel"),Ett.forEach(t),m5o=r(Eye," (SqueezeBERT model)"),Eye.forEach(t),g5o=i($),B_=n($,"LI",{});var Cye=s(B_);sie=n(Cye,"STRONG",{});var Ctt=s(sie);h5o=r(Ctt,"swin"),Ctt.forEach(t),p5o=r(Cye," \u2014 "),fq=n(Cye,"A",{href:!0});var wtt=s(fq);_5o=r(wtt,"SwinModel"),wtt.forEach(t),u5o=r(Cye," (Swin model)"),Cye.forEach(t),b5o=i($),I_=n($,"LI",{});var wye=s(I_);lie=n(wye,"STRONG",{});var Att=s(lie);v5o=r(Att,"t5"),Att.forEach(t),F5o=r(wye," \u2014 "),mq=n(wye,"A",{href:!0});var ytt=s(mq);T5o=r(ytt,"T5Model"),ytt.forEach(t),M5o=r(wye," (T5 model)"),wye.forEach(t),E5o=i($),N_=n($,"LI",{});var Aye=s(N_);iie=n(Aye,"STRONG",{});var Ltt=s(iie);C5o=r(Ltt,"tapas"),Ltt.forEach(t),w5o=r(Aye," \u2014 "),gq=n(Aye,"A",{href:!0});var xtt=s(gq);A5o=r(xtt,"TapasModel"),xtt.forEach(t),y5o=r(Aye," (TAPAS model)"),Aye.forEach(t),L5o=i($),q_=n($,"LI",{});var yye=s(q_);die=n(yye,"STRONG",{});var $tt=s(die);x5o=r($tt,"trajectory_transformer"),$tt.forEach(t),$5o=r(yye," \u2014 "),hq=n(yye,"A",{href:!0});var ktt=s(hq);k5o=r(ktt,"TrajectoryTransformerModel"),ktt.forEach(t),S5o=r(yye," (Trajectory Transformer model)"),yye.forEach(t),R5o=i($),j_=n($,"LI",{});var Lye=s(j_);cie=n(Lye,"STRONG",{});var Stt=s(cie);P5o=r(Stt,"transfo-xl"),Stt.forEach(t),B5o=r(Lye," \u2014 "),pq=n(Lye,"A",{href:!0});var Rtt=s(pq);I5o=r(Rtt,"TransfoXLModel"),Rtt.forEach(t),N5o=r(Lye," (Transformer-XL model)"),Lye.forEach(t),q5o=i($),D_=n($,"LI",{});var xye=s(D_);fie=n(xye,"STRONG",{});var Ptt=s(fie);j5o=r(Ptt,"unispeech"),Ptt.forEach(t),D5o=r(xye," \u2014 "),_q=n(xye,"A",{href:!0});var Btt=s(_q);G5o=r(Btt,"UniSpeechModel"),Btt.forEach(t),O5o=r(xye," (UniSpeech model)"),xye.forEach(t),V5o=i($),G_=n($,"LI",{});var $ye=s(G_);mie=n($ye,"STRONG",{});var Itt=s(mie);X5o=r(Itt,"unispeech-sat"),Itt.forEach(t),z5o=r($ye," \u2014 "),uq=n($ye,"A",{href:!0});var Ntt=s(uq);W5o=r(Ntt,"UniSpeechSatModel"),Ntt.forEach(t),Q5o=r($ye," (UniSpeechSat model)"),$ye.forEach(t),H5o=i($),O_=n($,"LI",{});var kye=s(O_);gie=n(kye,"STRONG",{});var qtt=s(gie);U5o=r(qtt,"van"),qtt.forEach(t),J5o=r(kye," \u2014 "),bq=n(kye,"A",{href:!0});var jtt=s(bq);Y5o=r(jtt,"VanModel"),jtt.forEach(t),K5o=r(kye," (VAN model)"),kye.forEach(t),Z5o=i($),V_=n($,"LI",{});var Sye=s(V_);hie=n(Sye,"STRONG",{});var Dtt=s(hie);e3o=r(Dtt,"vilt"),Dtt.forEach(t),o3o=r(Sye," \u2014 "),vq=n(Sye,"A",{href:!0});var Gtt=s(vq);r3o=r(Gtt,"ViltModel"),Gtt.forEach(t),t3o=r(Sye," (ViLT model)"),Sye.forEach(t),a3o=i($),X_=n($,"LI",{});var Rye=s(X_);pie=n(Rye,"STRONG",{});var Ott=s(pie);n3o=r(Ott,"vision-text-dual-encoder"),Ott.forEach(t),s3o=r(Rye," \u2014 "),Fq=n(Rye,"A",{href:!0});var Vtt=s(Fq);l3o=r(Vtt,"VisionTextDualEncoderModel"),Vtt.forEach(t),i3o=r(Rye," (VisionTextDualEncoder model)"),Rye.forEach(t),d3o=i($),z_=n($,"LI",{});var Pye=s(z_);_ie=n(Pye,"STRONG",{});var Xtt=s(_ie);c3o=r(Xtt,"visual_bert"),Xtt.forEach(t),f3o=r(Pye," \u2014 "),Tq=n(Pye,"A",{href:!0});var ztt=s(Tq);m3o=r(ztt,"VisualBertModel"),ztt.forEach(t),g3o=r(Pye," (VisualBert model)"),Pye.forEach(t),h3o=i($),W_=n($,"LI",{});var Bye=s(W_);uie=n(Bye,"STRONG",{});var Wtt=s(uie);p3o=r(Wtt,"vit"),Wtt.forEach(t),_3o=r(Bye," \u2014 "),Mq=n(Bye,"A",{href:!0});var Qtt=s(Mq);u3o=r(Qtt,"ViTModel"),Qtt.forEach(t),b3o=r(Bye," (ViT model)"),Bye.forEach(t),v3o=i($),Q_=n($,"LI",{});var Iye=s(Q_);bie=n(Iye,"STRONG",{});var Htt=s(bie);F3o=r(Htt,"vit_mae"),Htt.forEach(t),T3o=r(Iye," \u2014 "),Eq=n(Iye,"A",{href:!0});var Utt=s(Eq);M3o=r(Utt,"ViTMAEModel"),Utt.forEach(t),E3o=r(Iye," (ViTMAE model)"),Iye.forEach(t),C3o=i($),H_=n($,"LI",{});var Nye=s(H_);vie=n(Nye,"STRONG",{});var Jtt=s(vie);w3o=r(Jtt,"wav2vec2"),Jtt.forEach(t),A3o=r(Nye," \u2014 "),Cq=n(Nye,"A",{href:!0});var Ytt=s(Cq);y3o=r(Ytt,"Wav2Vec2Model"),Ytt.forEach(t),L3o=r(Nye," (Wav2Vec2 model)"),Nye.forEach(t),x3o=i($),U_=n($,"LI",{});var qye=s(U_);Fie=n(qye,"STRONG",{});var Ktt=s(Fie);$3o=r(Ktt,"wav2vec2-conformer"),Ktt.forEach(t),k3o=r(qye," \u2014 "),wq=n(qye,"A",{href:!0});var Ztt=s(wq);S3o=r(Ztt,"Wav2Vec2ConformerModel"),Ztt.forEach(t),R3o=r(qye," (Wav2Vec2-Conformer model)"),qye.forEach(t),P3o=i($),J_=n($,"LI",{});var jye=s(J_);Tie=n(jye,"STRONG",{});var eat=s(Tie);B3o=r(eat,"wavlm"),eat.forEach(t),I3o=r(jye," \u2014 "),Aq=n(jye,"A",{href:!0});var oat=s(Aq);N3o=r(oat,"WavLMModel"),oat.forEach(t),q3o=r(jye," (WavLM model)"),jye.forEach(t),j3o=i($),Y_=n($,"LI",{});var Dye=s(Y_);Mie=n(Dye,"STRONG",{});var rat=s(Mie);D3o=r(rat,"xglm"),rat.forEach(t),G3o=r(Dye," \u2014 "),yq=n(Dye,"A",{href:!0});var tat=s(yq);O3o=r(tat,"XGLMModel"),tat.forEach(t),V3o=r(Dye," (XGLM model)"),Dye.forEach(t),X3o=i($),K_=n($,"LI",{});var Gye=s(K_);Eie=n(Gye,"STRONG",{});var aat=s(Eie);z3o=r(aat,"xlm"),aat.forEach(t),W3o=r(Gye," \u2014 "),Lq=n(Gye,"A",{href:!0});var nat=s(Lq);Q3o=r(nat,"XLMModel"),nat.forEach(t),H3o=r(Gye," (XLM model)"),Gye.forEach(t),U3o=i($),Z_=n($,"LI",{});var Oye=s(Z_);Cie=n(Oye,"STRONG",{});var sat=s(Cie);J3o=r(sat,"xlm-prophetnet"),sat.forEach(t),Y3o=r(Oye," \u2014 "),xq=n(Oye,"A",{href:!0});var lat=s(xq);K3o=r(lat,"XLMProphetNetModel"),lat.forEach(t),Z3o=r(Oye," (XLMProphetNet model)"),Oye.forEach(t),eFo=i($),eu=n($,"LI",{});var Vye=s(eu);wie=n(Vye,"STRONG",{});var iat=s(wie);oFo=r(iat,"xlm-roberta"),iat.forEach(t),rFo=r(Vye," \u2014 "),$q=n(Vye,"A",{href:!0});var dat=s($q);tFo=r(dat,"XLMRobertaModel"),dat.forEach(t),aFo=r(Vye," (XLM-RoBERTa model)"),Vye.forEach(t),nFo=i($),ou=n($,"LI",{});var Xye=s(ou);Aie=n(Xye,"STRONG",{});var cat=s(Aie);sFo=r(cat,"xlm-roberta-xl"),cat.forEach(t),lFo=r(Xye," \u2014 "),kq=n(Xye,"A",{href:!0});var fat=s(kq);iFo=r(fat,"XLMRobertaXLModel"),fat.forEach(t),dFo=r(Xye," (XLM-RoBERTa-XL model)"),Xye.forEach(t),cFo=i($),ru=n($,"LI",{});var zye=s(ru);yie=n(zye,"STRONG",{});var mat=s(yie);fFo=r(mat,"xlnet"),mat.forEach(t),mFo=r(zye," \u2014 "),Sq=n(zye,"A",{href:!0});var gat=s(Sq);gFo=r(gat,"XLNetModel"),gat.forEach(t),hFo=r(zye," (XLNet model)"),zye.forEach(t),pFo=i($),tu=n($,"LI",{});var Wye=s(tu);Lie=n(Wye,"STRONG",{});var hat=s(Lie);_Fo=r(hat,"yolos"),hat.forEach(t),uFo=r(Wye," \u2014 "),Rq=n(Wye,"A",{href:!0});var pat=s(Rq);bFo=r(pat,"YolosModel"),pat.forEach(t),vFo=r(Wye," (YOLOS model)"),Wye.forEach(t),FFo=i($),au=n($,"LI",{});var Qye=s(au);xie=n(Qye,"STRONG",{});var _at=s(xie);TFo=r(_at,"yoso"),_at.forEach(t),MFo=r(Qye," \u2014 "),Pq=n(Qye,"A",{href:!0});var uat=s(Pq);EFo=r(uat,"YosoModel"),uat.forEach(t),CFo=r(Qye," (YOSO model)"),Qye.forEach(t),$.forEach(t),wFo=i(ra),nu=n(ra,"P",{});var Hye=s(nu);AFo=r(Hye,"The model is set in evaluation mode by default using "),$ie=n(Hye,"CODE",{});var bat=s($ie);yFo=r(bat,"model.eval()"),bat.forEach(t),LFo=r(Hye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kie=n(Hye,"CODE",{});var vat=s(kie);xFo=r(vat,"model.train()"),vat.forEach(t),Hye.forEach(t),$Fo=i(ra),T(su.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),Rqe=i(f),xi=n(f,"H2",{class:!0});var NDe=s(xi);lu=n(NDe,"A",{id:!0,class:!0,href:!0});var Fat=s(lu);Sie=n(Fat,"SPAN",{});var Tat=s(Sie);T(dy.$$.fragment,Tat),Tat.forEach(t),Fat.forEach(t),kFo=i(NDe),Rie=n(NDe,"SPAN",{});var Mat=s(Rie);SFo=r(Mat,"AutoModelForPreTraining"),Mat.forEach(t),NDe.forEach(t),Pqe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(cy.$$.fragment,Os),RFo=i(Os),$i=n(Os,"P",{});var yZ=s($i);PFo=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Bq=n(yZ,"A",{href:!0});var Eat=s(Bq);BFo=r(Eat,"from_pretrained()"),Eat.forEach(t),IFo=r(yZ," class method or the "),Iq=n(yZ,"A",{href:!0});var Cat=s(Iq);NFo=r(Cat,"from_config()"),Cat.forEach(t),qFo=r(yZ,` class
method.`),yZ.forEach(t),jFo=i(Os),fy=n(Os,"P",{});var qDe=s(fy);DFo=r(qDe,"This class cannot be instantiated directly using "),Pie=n(qDe,"CODE",{});var wat=s(Pie);GFo=r(wat,"__init__()"),wat.forEach(t),OFo=r(qDe," (throws an error)."),qDe.forEach(t),VFo=i(Os),nt=n(Os,"DIV",{class:!0});var j0=s(nt);T(my.$$.fragment,j0),XFo=i(j0),Bie=n(j0,"P",{});var Aat=s(Bie);zFo=r(Aat,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Aat.forEach(t),WFo=i(j0),ki=n(j0,"P",{});var LZ=s(ki);QFo=r(LZ,`Note:
Loading a model from its configuration file does `),Iie=n(LZ,"STRONG",{});var yat=s(Iie);HFo=r(yat,"not"),yat.forEach(t),UFo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nq=n(LZ,"A",{href:!0});var Lat=s(Nq);JFo=r(Lat,"from_pretrained()"),Lat.forEach(t),YFo=r(LZ," to load the model weights."),LZ.forEach(t),KFo=i(j0),T(iu.$$.fragment,j0),j0.forEach(t),ZFo=i(Os),Ye=n(Os,"DIV",{class:!0});var ta=s(Ye);T(gy.$$.fragment,ta),eTo=i(ta),Nie=n(ta,"P",{});var xat=s(Nie);oTo=r(xat,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xat.forEach(t),rTo=i(ta),$a=n(ta,"P",{});var D0=s($a);tTo=r(D0,"The model class to instantiate is selected based on the "),qie=n(D0,"CODE",{});var $at=s(qie);aTo=r($at,"model_type"),$at.forEach(t),nTo=r(D0,` property of the config object (either
passed as an argument or loaded from `),jie=n(D0,"CODE",{});var kat=s(jie);sTo=r(kat,"pretrained_model_name_or_path"),kat.forEach(t),lTo=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=n(D0,"CODE",{});var Sat=s(Die);iTo=r(Sat,"pretrained_model_name_or_path"),Sat.forEach(t),dTo=r(D0,":"),D0.forEach(t),cTo=i(ta),G=n(ta,"UL",{});var O=s(G);du=n(O,"LI",{});var Uye=s(du);Gie=n(Uye,"STRONG",{});var Rat=s(Gie);fTo=r(Rat,"albert"),Rat.forEach(t),mTo=r(Uye," \u2014 "),qq=n(Uye,"A",{href:!0});var Pat=s(qq);gTo=r(Pat,"AlbertForPreTraining"),Pat.forEach(t),hTo=r(Uye," (ALBERT model)"),Uye.forEach(t),pTo=i(O),cu=n(O,"LI",{});var Jye=s(cu);Oie=n(Jye,"STRONG",{});var Bat=s(Oie);_To=r(Bat,"bart"),Bat.forEach(t),uTo=r(Jye," \u2014 "),jq=n(Jye,"A",{href:!0});var Iat=s(jq);bTo=r(Iat,"BartForConditionalGeneration"),Iat.forEach(t),vTo=r(Jye," (BART model)"),Jye.forEach(t),FTo=i(O),fu=n(O,"LI",{});var Yye=s(fu);Vie=n(Yye,"STRONG",{});var Nat=s(Vie);TTo=r(Nat,"bert"),Nat.forEach(t),MTo=r(Yye," \u2014 "),Dq=n(Yye,"A",{href:!0});var qat=s(Dq);ETo=r(qat,"BertForPreTraining"),qat.forEach(t),CTo=r(Yye," (BERT model)"),Yye.forEach(t),wTo=i(O),mu=n(O,"LI",{});var Kye=s(mu);Xie=n(Kye,"STRONG",{});var jat=s(Xie);ATo=r(jat,"big_bird"),jat.forEach(t),yTo=r(Kye," \u2014 "),Gq=n(Kye,"A",{href:!0});var Dat=s(Gq);LTo=r(Dat,"BigBirdForPreTraining"),Dat.forEach(t),xTo=r(Kye," (BigBird model)"),Kye.forEach(t),$To=i(O),gu=n(O,"LI",{});var Zye=s(gu);zie=n(Zye,"STRONG",{});var Gat=s(zie);kTo=r(Gat,"camembert"),Gat.forEach(t),STo=r(Zye," \u2014 "),Oq=n(Zye,"A",{href:!0});var Oat=s(Oq);RTo=r(Oat,"CamembertForMaskedLM"),Oat.forEach(t),PTo=r(Zye," (CamemBERT model)"),Zye.forEach(t),BTo=i(O),hu=n(O,"LI",{});var eLe=s(hu);Wie=n(eLe,"STRONG",{});var Vat=s(Wie);ITo=r(Vat,"ctrl"),Vat.forEach(t),NTo=r(eLe," \u2014 "),Vq=n(eLe,"A",{href:!0});var Xat=s(Vq);qTo=r(Xat,"CTRLLMHeadModel"),Xat.forEach(t),jTo=r(eLe," (CTRL model)"),eLe.forEach(t),DTo=i(O),pu=n(O,"LI",{});var oLe=s(pu);Qie=n(oLe,"STRONG",{});var zat=s(Qie);GTo=r(zat,"data2vec-text"),zat.forEach(t),OTo=r(oLe," \u2014 "),Xq=n(oLe,"A",{href:!0});var Wat=s(Xq);VTo=r(Wat,"Data2VecTextForMaskedLM"),Wat.forEach(t),XTo=r(oLe," (Data2VecText model)"),oLe.forEach(t),zTo=i(O),_u=n(O,"LI",{});var rLe=s(_u);Hie=n(rLe,"STRONG",{});var Qat=s(Hie);WTo=r(Qat,"deberta"),Qat.forEach(t),QTo=r(rLe," \u2014 "),zq=n(rLe,"A",{href:!0});var Hat=s(zq);HTo=r(Hat,"DebertaForMaskedLM"),Hat.forEach(t),UTo=r(rLe," (DeBERTa model)"),rLe.forEach(t),JTo=i(O),uu=n(O,"LI",{});var tLe=s(uu);Uie=n(tLe,"STRONG",{});var Uat=s(Uie);YTo=r(Uat,"deberta-v2"),Uat.forEach(t),KTo=r(tLe," \u2014 "),Wq=n(tLe,"A",{href:!0});var Jat=s(Wq);ZTo=r(Jat,"DebertaV2ForMaskedLM"),Jat.forEach(t),e7o=r(tLe," (DeBERTa-v2 model)"),tLe.forEach(t),o7o=i(O),bu=n(O,"LI",{});var aLe=s(bu);Jie=n(aLe,"STRONG",{});var Yat=s(Jie);r7o=r(Yat,"distilbert"),Yat.forEach(t),t7o=r(aLe," \u2014 "),Qq=n(aLe,"A",{href:!0});var Kat=s(Qq);a7o=r(Kat,"DistilBertForMaskedLM"),Kat.forEach(t),n7o=r(aLe," (DistilBERT model)"),aLe.forEach(t),s7o=i(O),vu=n(O,"LI",{});var nLe=s(vu);Yie=n(nLe,"STRONG",{});var Zat=s(Yie);l7o=r(Zat,"electra"),Zat.forEach(t),i7o=r(nLe," \u2014 "),Hq=n(nLe,"A",{href:!0});var ent=s(Hq);d7o=r(ent,"ElectraForPreTraining"),ent.forEach(t),c7o=r(nLe," (ELECTRA model)"),nLe.forEach(t),f7o=i(O),Fu=n(O,"LI",{});var sLe=s(Fu);Kie=n(sLe,"STRONG",{});var ont=s(Kie);m7o=r(ont,"flaubert"),ont.forEach(t),g7o=r(sLe," \u2014 "),Uq=n(sLe,"A",{href:!0});var rnt=s(Uq);h7o=r(rnt,"FlaubertWithLMHeadModel"),rnt.forEach(t),p7o=r(sLe," (FlauBERT model)"),sLe.forEach(t),_7o=i(O),Tu=n(O,"LI",{});var lLe=s(Tu);Zie=n(lLe,"STRONG",{});var tnt=s(Zie);u7o=r(tnt,"flava"),tnt.forEach(t),b7o=r(lLe," \u2014 "),Jq=n(lLe,"A",{href:!0});var ant=s(Jq);v7o=r(ant,"FlavaForPreTraining"),ant.forEach(t),F7o=r(lLe," (Flava model)"),lLe.forEach(t),T7o=i(O),Mu=n(O,"LI",{});var iLe=s(Mu);ede=n(iLe,"STRONG",{});var nnt=s(ede);M7o=r(nnt,"fnet"),nnt.forEach(t),E7o=r(iLe," \u2014 "),Yq=n(iLe,"A",{href:!0});var snt=s(Yq);C7o=r(snt,"FNetForPreTraining"),snt.forEach(t),w7o=r(iLe," (FNet model)"),iLe.forEach(t),A7o=i(O),Eu=n(O,"LI",{});var dLe=s(Eu);ode=n(dLe,"STRONG",{});var lnt=s(ode);y7o=r(lnt,"fsmt"),lnt.forEach(t),L7o=r(dLe," \u2014 "),Kq=n(dLe,"A",{href:!0});var int=s(Kq);x7o=r(int,"FSMTForConditionalGeneration"),int.forEach(t),$7o=r(dLe," (FairSeq Machine-Translation model)"),dLe.forEach(t),k7o=i(O),Cu=n(O,"LI",{});var cLe=s(Cu);rde=n(cLe,"STRONG",{});var dnt=s(rde);S7o=r(dnt,"funnel"),dnt.forEach(t),R7o=r(cLe," \u2014 "),Zq=n(cLe,"A",{href:!0});var cnt=s(Zq);P7o=r(cnt,"FunnelForPreTraining"),cnt.forEach(t),B7o=r(cLe," (Funnel Transformer model)"),cLe.forEach(t),I7o=i(O),wu=n(O,"LI",{});var fLe=s(wu);tde=n(fLe,"STRONG",{});var fnt=s(tde);N7o=r(fnt,"gpt2"),fnt.forEach(t),q7o=r(fLe," \u2014 "),ej=n(fLe,"A",{href:!0});var mnt=s(ej);j7o=r(mnt,"GPT2LMHeadModel"),mnt.forEach(t),D7o=r(fLe," (OpenAI GPT-2 model)"),fLe.forEach(t),G7o=i(O),Au=n(O,"LI",{});var mLe=s(Au);ade=n(mLe,"STRONG",{});var gnt=s(ade);O7o=r(gnt,"ibert"),gnt.forEach(t),V7o=r(mLe," \u2014 "),oj=n(mLe,"A",{href:!0});var hnt=s(oj);X7o=r(hnt,"IBertForMaskedLM"),hnt.forEach(t),z7o=r(mLe," (I-BERT model)"),mLe.forEach(t),W7o=i(O),yu=n(O,"LI",{});var gLe=s(yu);nde=n(gLe,"STRONG",{});var pnt=s(nde);Q7o=r(pnt,"layoutlm"),pnt.forEach(t),H7o=r(gLe," \u2014 "),rj=n(gLe,"A",{href:!0});var _nt=s(rj);U7o=r(_nt,"LayoutLMForMaskedLM"),_nt.forEach(t),J7o=r(gLe," (LayoutLM model)"),gLe.forEach(t),Y7o=i(O),Lu=n(O,"LI",{});var hLe=s(Lu);sde=n(hLe,"STRONG",{});var unt=s(sde);K7o=r(unt,"longformer"),unt.forEach(t),Z7o=r(hLe," \u2014 "),tj=n(hLe,"A",{href:!0});var bnt=s(tj);eMo=r(bnt,"LongformerForMaskedLM"),bnt.forEach(t),oMo=r(hLe," (Longformer model)"),hLe.forEach(t),rMo=i(O),xu=n(O,"LI",{});var pLe=s(xu);lde=n(pLe,"STRONG",{});var vnt=s(lde);tMo=r(vnt,"lxmert"),vnt.forEach(t),aMo=r(pLe," \u2014 "),aj=n(pLe,"A",{href:!0});var Fnt=s(aj);nMo=r(Fnt,"LxmertForPreTraining"),Fnt.forEach(t),sMo=r(pLe," (LXMERT model)"),pLe.forEach(t),lMo=i(O),$u=n(O,"LI",{});var _Le=s($u);ide=n(_Le,"STRONG",{});var Tnt=s(ide);iMo=r(Tnt,"megatron-bert"),Tnt.forEach(t),dMo=r(_Le," \u2014 "),nj=n(_Le,"A",{href:!0});var Mnt=s(nj);cMo=r(Mnt,"MegatronBertForPreTraining"),Mnt.forEach(t),fMo=r(_Le," (MegatronBert model)"),_Le.forEach(t),mMo=i(O),ku=n(O,"LI",{});var uLe=s(ku);dde=n(uLe,"STRONG",{});var Ent=s(dde);gMo=r(Ent,"mobilebert"),Ent.forEach(t),hMo=r(uLe," \u2014 "),sj=n(uLe,"A",{href:!0});var Cnt=s(sj);pMo=r(Cnt,"MobileBertForPreTraining"),Cnt.forEach(t),_Mo=r(uLe," (MobileBERT model)"),uLe.forEach(t),uMo=i(O),Su=n(O,"LI",{});var bLe=s(Su);cde=n(bLe,"STRONG",{});var wnt=s(cde);bMo=r(wnt,"mpnet"),wnt.forEach(t),vMo=r(bLe," \u2014 "),lj=n(bLe,"A",{href:!0});var Ant=s(lj);FMo=r(Ant,"MPNetForMaskedLM"),Ant.forEach(t),TMo=r(bLe," (MPNet model)"),bLe.forEach(t),MMo=i(O),Ru=n(O,"LI",{});var vLe=s(Ru);fde=n(vLe,"STRONG",{});var ynt=s(fde);EMo=r(ynt,"openai-gpt"),ynt.forEach(t),CMo=r(vLe," \u2014 "),ij=n(vLe,"A",{href:!0});var Lnt=s(ij);wMo=r(Lnt,"OpenAIGPTLMHeadModel"),Lnt.forEach(t),AMo=r(vLe," (OpenAI GPT model)"),vLe.forEach(t),yMo=i(O),Pu=n(O,"LI",{});var FLe=s(Pu);mde=n(FLe,"STRONG",{});var xnt=s(mde);LMo=r(xnt,"retribert"),xnt.forEach(t),xMo=r(FLe," \u2014 "),dj=n(FLe,"A",{href:!0});var $nt=s(dj);$Mo=r($nt,"RetriBertModel"),$nt.forEach(t),kMo=r(FLe," (RetriBERT model)"),FLe.forEach(t),SMo=i(O),Bu=n(O,"LI",{});var TLe=s(Bu);gde=n(TLe,"STRONG",{});var knt=s(gde);RMo=r(knt,"roberta"),knt.forEach(t),PMo=r(TLe," \u2014 "),cj=n(TLe,"A",{href:!0});var Snt=s(cj);BMo=r(Snt,"RobertaForMaskedLM"),Snt.forEach(t),IMo=r(TLe," (RoBERTa model)"),TLe.forEach(t),NMo=i(O),Iu=n(O,"LI",{});var MLe=s(Iu);hde=n(MLe,"STRONG",{});var Rnt=s(hde);qMo=r(Rnt,"splinter"),Rnt.forEach(t),jMo=r(MLe," \u2014 "),fj=n(MLe,"A",{href:!0});var Pnt=s(fj);DMo=r(Pnt,"SplinterForPreTraining"),Pnt.forEach(t),GMo=r(MLe," (Splinter model)"),MLe.forEach(t),OMo=i(O),Nu=n(O,"LI",{});var ELe=s(Nu);pde=n(ELe,"STRONG",{});var Bnt=s(pde);VMo=r(Bnt,"squeezebert"),Bnt.forEach(t),XMo=r(ELe," \u2014 "),mj=n(ELe,"A",{href:!0});var Int=s(mj);zMo=r(Int,"SqueezeBertForMaskedLM"),Int.forEach(t),WMo=r(ELe," (SqueezeBERT model)"),ELe.forEach(t),QMo=i(O),qu=n(O,"LI",{});var CLe=s(qu);_de=n(CLe,"STRONG",{});var Nnt=s(_de);HMo=r(Nnt,"t5"),Nnt.forEach(t),UMo=r(CLe," \u2014 "),gj=n(CLe,"A",{href:!0});var qnt=s(gj);JMo=r(qnt,"T5ForConditionalGeneration"),qnt.forEach(t),YMo=r(CLe," (T5 model)"),CLe.forEach(t),KMo=i(O),ju=n(O,"LI",{});var wLe=s(ju);ude=n(wLe,"STRONG",{});var jnt=s(ude);ZMo=r(jnt,"tapas"),jnt.forEach(t),eEo=r(wLe," \u2014 "),hj=n(wLe,"A",{href:!0});var Dnt=s(hj);oEo=r(Dnt,"TapasForMaskedLM"),Dnt.forEach(t),rEo=r(wLe," (TAPAS model)"),wLe.forEach(t),tEo=i(O),Du=n(O,"LI",{});var ALe=s(Du);bde=n(ALe,"STRONG",{});var Gnt=s(bde);aEo=r(Gnt,"transfo-xl"),Gnt.forEach(t),nEo=r(ALe," \u2014 "),pj=n(ALe,"A",{href:!0});var Ont=s(pj);sEo=r(Ont,"TransfoXLLMHeadModel"),Ont.forEach(t),lEo=r(ALe," (Transformer-XL model)"),ALe.forEach(t),iEo=i(O),Gu=n(O,"LI",{});var yLe=s(Gu);vde=n(yLe,"STRONG",{});var Vnt=s(vde);dEo=r(Vnt,"unispeech"),Vnt.forEach(t),cEo=r(yLe," \u2014 "),_j=n(yLe,"A",{href:!0});var Xnt=s(_j);fEo=r(Xnt,"UniSpeechForPreTraining"),Xnt.forEach(t),mEo=r(yLe," (UniSpeech model)"),yLe.forEach(t),gEo=i(O),Ou=n(O,"LI",{});var LLe=s(Ou);Fde=n(LLe,"STRONG",{});var znt=s(Fde);hEo=r(znt,"unispeech-sat"),znt.forEach(t),pEo=r(LLe," \u2014 "),uj=n(LLe,"A",{href:!0});var Wnt=s(uj);_Eo=r(Wnt,"UniSpeechSatForPreTraining"),Wnt.forEach(t),uEo=r(LLe," (UniSpeechSat model)"),LLe.forEach(t),bEo=i(O),Vu=n(O,"LI",{});var xLe=s(Vu);Tde=n(xLe,"STRONG",{});var Qnt=s(Tde);vEo=r(Qnt,"visual_bert"),Qnt.forEach(t),FEo=r(xLe," \u2014 "),bj=n(xLe,"A",{href:!0});var Hnt=s(bj);TEo=r(Hnt,"VisualBertForPreTraining"),Hnt.forEach(t),MEo=r(xLe," (VisualBert model)"),xLe.forEach(t),EEo=i(O),Xu=n(O,"LI",{});var $Le=s(Xu);Mde=n($Le,"STRONG",{});var Unt=s(Mde);CEo=r(Unt,"vit_mae"),Unt.forEach(t),wEo=r($Le," \u2014 "),vj=n($Le,"A",{href:!0});var Jnt=s(vj);AEo=r(Jnt,"ViTMAEForPreTraining"),Jnt.forEach(t),yEo=r($Le," (ViTMAE model)"),$Le.forEach(t),LEo=i(O),zu=n(O,"LI",{});var kLe=s(zu);Ede=n(kLe,"STRONG",{});var Ynt=s(Ede);xEo=r(Ynt,"wav2vec2"),Ynt.forEach(t),$Eo=r(kLe," \u2014 "),Fj=n(kLe,"A",{href:!0});var Knt=s(Fj);kEo=r(Knt,"Wav2Vec2ForPreTraining"),Knt.forEach(t),SEo=r(kLe," (Wav2Vec2 model)"),kLe.forEach(t),REo=i(O),Wu=n(O,"LI",{});var SLe=s(Wu);Cde=n(SLe,"STRONG",{});var Znt=s(Cde);PEo=r(Znt,"wav2vec2-conformer"),Znt.forEach(t),BEo=r(SLe," \u2014 "),Tj=n(SLe,"A",{href:!0});var est=s(Tj);IEo=r(est,"Wav2Vec2ConformerForPreTraining"),est.forEach(t),NEo=r(SLe," (Wav2Vec2-Conformer model)"),SLe.forEach(t),qEo=i(O),Qu=n(O,"LI",{});var RLe=s(Qu);wde=n(RLe,"STRONG",{});var ost=s(wde);jEo=r(ost,"xlm"),ost.forEach(t),DEo=r(RLe," \u2014 "),Mj=n(RLe,"A",{href:!0});var rst=s(Mj);GEo=r(rst,"XLMWithLMHeadModel"),rst.forEach(t),OEo=r(RLe," (XLM model)"),RLe.forEach(t),VEo=i(O),Hu=n(O,"LI",{});var PLe=s(Hu);Ade=n(PLe,"STRONG",{});var tst=s(Ade);XEo=r(tst,"xlm-roberta"),tst.forEach(t),zEo=r(PLe," \u2014 "),Ej=n(PLe,"A",{href:!0});var ast=s(Ej);WEo=r(ast,"XLMRobertaForMaskedLM"),ast.forEach(t),QEo=r(PLe," (XLM-RoBERTa model)"),PLe.forEach(t),HEo=i(O),Uu=n(O,"LI",{});var BLe=s(Uu);yde=n(BLe,"STRONG",{});var nst=s(yde);UEo=r(nst,"xlm-roberta-xl"),nst.forEach(t),JEo=r(BLe," \u2014 "),Cj=n(BLe,"A",{href:!0});var sst=s(Cj);YEo=r(sst,"XLMRobertaXLForMaskedLM"),sst.forEach(t),KEo=r(BLe," (XLM-RoBERTa-XL model)"),BLe.forEach(t),ZEo=i(O),Ju=n(O,"LI",{});var ILe=s(Ju);Lde=n(ILe,"STRONG",{});var lst=s(Lde);eCo=r(lst,"xlnet"),lst.forEach(t),oCo=r(ILe," \u2014 "),wj=n(ILe,"A",{href:!0});var ist=s(wj);rCo=r(ist,"XLNetLMHeadModel"),ist.forEach(t),tCo=r(ILe," (XLNet model)"),ILe.forEach(t),O.forEach(t),aCo=i(ta),Yu=n(ta,"P",{});var NLe=s(Yu);nCo=r(NLe,"The model is set in evaluation mode by default using "),xde=n(NLe,"CODE",{});var dst=s(xde);sCo=r(dst,"model.eval()"),dst.forEach(t),lCo=r(NLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$de=n(NLe,"CODE",{});var cst=s($de);iCo=r(cst,"model.train()"),cst.forEach(t),NLe.forEach(t),dCo=i(ta),T(Ku.$$.fragment,ta),ta.forEach(t),Os.forEach(t),Bqe=i(f),Si=n(f,"H2",{class:!0});var jDe=s(Si);Zu=n(jDe,"A",{id:!0,class:!0,href:!0});var fst=s(Zu);kde=n(fst,"SPAN",{});var mst=s(kde);T(hy.$$.fragment,mst),mst.forEach(t),fst.forEach(t),cCo=i(jDe),Sde=n(jDe,"SPAN",{});var gst=s(Sde);fCo=r(gst,"AutoModelForCausalLM"),gst.forEach(t),jDe.forEach(t),Iqe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(py.$$.fragment,Vs),mCo=i(Vs),Ri=n(Vs,"P",{});var xZ=s(Ri);gCo=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Aj=n(xZ,"A",{href:!0});var hst=s(Aj);hCo=r(hst,"from_pretrained()"),hst.forEach(t),pCo=r(xZ," class method or the "),yj=n(xZ,"A",{href:!0});var pst=s(yj);_Co=r(pst,"from_config()"),pst.forEach(t),uCo=r(xZ,` class
method.`),xZ.forEach(t),bCo=i(Vs),_y=n(Vs,"P",{});var DDe=s(_y);vCo=r(DDe,"This class cannot be instantiated directly using "),Rde=n(DDe,"CODE",{});var _st=s(Rde);FCo=r(_st,"__init__()"),_st.forEach(t),TCo=r(DDe," (throws an error)."),DDe.forEach(t),MCo=i(Vs),st=n(Vs,"DIV",{class:!0});var G0=s(st);T(uy.$$.fragment,G0),ECo=i(G0),Pde=n(G0,"P",{});var ust=s(Pde);CCo=r(ust,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ust.forEach(t),wCo=i(G0),Pi=n(G0,"P",{});var $Z=s(Pi);ACo=r($Z,`Note:
Loading a model from its configuration file does `),Bde=n($Z,"STRONG",{});var bst=s(Bde);yCo=r(bst,"not"),bst.forEach(t),LCo=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lj=n($Z,"A",{href:!0});var vst=s(Lj);xCo=r(vst,"from_pretrained()"),vst.forEach(t),$Co=r($Z," to load the model weights."),$Z.forEach(t),kCo=i(G0),T(e1.$$.fragment,G0),G0.forEach(t),SCo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var aa=s(Ke);T(by.$$.fragment,aa),RCo=i(aa),Ide=n(aa,"P",{});var Fst=s(Ide);PCo=r(Fst,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Fst.forEach(t),BCo=i(aa),ka=n(aa,"P",{});var O0=s(ka);ICo=r(O0,"The model class to instantiate is selected based on the "),Nde=n(O0,"CODE",{});var Tst=s(Nde);NCo=r(Tst,"model_type"),Tst.forEach(t),qCo=r(O0,` property of the config object (either
passed as an argument or loaded from `),qde=n(O0,"CODE",{});var Mst=s(qde);jCo=r(Mst,"pretrained_model_name_or_path"),Mst.forEach(t),DCo=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jde=n(O0,"CODE",{});var Est=s(jde);GCo=r(Est,"pretrained_model_name_or_path"),Est.forEach(t),OCo=r(O0,":"),O0.forEach(t),VCo=i(aa),z=n(aa,"UL",{});var W=s(z);o1=n(W,"LI",{});var qLe=s(o1);Dde=n(qLe,"STRONG",{});var Cst=s(Dde);XCo=r(Cst,"bart"),Cst.forEach(t),zCo=r(qLe," \u2014 "),xj=n(qLe,"A",{href:!0});var wst=s(xj);WCo=r(wst,"BartForCausalLM"),wst.forEach(t),QCo=r(qLe," (BART model)"),qLe.forEach(t),HCo=i(W),r1=n(W,"LI",{});var jLe=s(r1);Gde=n(jLe,"STRONG",{});var Ast=s(Gde);UCo=r(Ast,"bert"),Ast.forEach(t),JCo=r(jLe," \u2014 "),$j=n(jLe,"A",{href:!0});var yst=s($j);YCo=r(yst,"BertLMHeadModel"),yst.forEach(t),KCo=r(jLe," (BERT model)"),jLe.forEach(t),ZCo=i(W),t1=n(W,"LI",{});var DLe=s(t1);Ode=n(DLe,"STRONG",{});var Lst=s(Ode);ewo=r(Lst,"bert-generation"),Lst.forEach(t),owo=r(DLe," \u2014 "),kj=n(DLe,"A",{href:!0});var xst=s(kj);rwo=r(xst,"BertGenerationDecoder"),xst.forEach(t),two=r(DLe," (Bert Generation model)"),DLe.forEach(t),awo=i(W),a1=n(W,"LI",{});var GLe=s(a1);Vde=n(GLe,"STRONG",{});var $st=s(Vde);nwo=r($st,"big_bird"),$st.forEach(t),swo=r(GLe," \u2014 "),Sj=n(GLe,"A",{href:!0});var kst=s(Sj);lwo=r(kst,"BigBirdForCausalLM"),kst.forEach(t),iwo=r(GLe," (BigBird model)"),GLe.forEach(t),dwo=i(W),n1=n(W,"LI",{});var OLe=s(n1);Xde=n(OLe,"STRONG",{});var Sst=s(Xde);cwo=r(Sst,"bigbird_pegasus"),Sst.forEach(t),fwo=r(OLe," \u2014 "),Rj=n(OLe,"A",{href:!0});var Rst=s(Rj);mwo=r(Rst,"BigBirdPegasusForCausalLM"),Rst.forEach(t),gwo=r(OLe," (BigBirdPegasus model)"),OLe.forEach(t),hwo=i(W),s1=n(W,"LI",{});var VLe=s(s1);zde=n(VLe,"STRONG",{});var Pst=s(zde);pwo=r(Pst,"blenderbot"),Pst.forEach(t),_wo=r(VLe," \u2014 "),Pj=n(VLe,"A",{href:!0});var Bst=s(Pj);uwo=r(Bst,"BlenderbotForCausalLM"),Bst.forEach(t),bwo=r(VLe," (Blenderbot model)"),VLe.forEach(t),vwo=i(W),l1=n(W,"LI",{});var XLe=s(l1);Wde=n(XLe,"STRONG",{});var Ist=s(Wde);Fwo=r(Ist,"blenderbot-small"),Ist.forEach(t),Two=r(XLe," \u2014 "),Bj=n(XLe,"A",{href:!0});var Nst=s(Bj);Mwo=r(Nst,"BlenderbotSmallForCausalLM"),Nst.forEach(t),Ewo=r(XLe," (BlenderbotSmall model)"),XLe.forEach(t),Cwo=i(W),i1=n(W,"LI",{});var zLe=s(i1);Qde=n(zLe,"STRONG",{});var qst=s(Qde);wwo=r(qst,"camembert"),qst.forEach(t),Awo=r(zLe," \u2014 "),Ij=n(zLe,"A",{href:!0});var jst=s(Ij);ywo=r(jst,"CamembertForCausalLM"),jst.forEach(t),Lwo=r(zLe," (CamemBERT model)"),zLe.forEach(t),xwo=i(W),d1=n(W,"LI",{});var WLe=s(d1);Hde=n(WLe,"STRONG",{});var Dst=s(Hde);$wo=r(Dst,"ctrl"),Dst.forEach(t),kwo=r(WLe," \u2014 "),Nj=n(WLe,"A",{href:!0});var Gst=s(Nj);Swo=r(Gst,"CTRLLMHeadModel"),Gst.forEach(t),Rwo=r(WLe," (CTRL model)"),WLe.forEach(t),Pwo=i(W),c1=n(W,"LI",{});var QLe=s(c1);Ude=n(QLe,"STRONG",{});var Ost=s(Ude);Bwo=r(Ost,"data2vec-text"),Ost.forEach(t),Iwo=r(QLe," \u2014 "),qj=n(QLe,"A",{href:!0});var Vst=s(qj);Nwo=r(Vst,"Data2VecTextForCausalLM"),Vst.forEach(t),qwo=r(QLe," (Data2VecText model)"),QLe.forEach(t),jwo=i(W),f1=n(W,"LI",{});var HLe=s(f1);Jde=n(HLe,"STRONG",{});var Xst=s(Jde);Dwo=r(Xst,"electra"),Xst.forEach(t),Gwo=r(HLe," \u2014 "),jj=n(HLe,"A",{href:!0});var zst=s(jj);Owo=r(zst,"ElectraForCausalLM"),zst.forEach(t),Vwo=r(HLe," (ELECTRA model)"),HLe.forEach(t),Xwo=i(W),m1=n(W,"LI",{});var ULe=s(m1);Yde=n(ULe,"STRONG",{});var Wst=s(Yde);zwo=r(Wst,"gpt2"),Wst.forEach(t),Wwo=r(ULe," \u2014 "),Dj=n(ULe,"A",{href:!0});var Qst=s(Dj);Qwo=r(Qst,"GPT2LMHeadModel"),Qst.forEach(t),Hwo=r(ULe," (OpenAI GPT-2 model)"),ULe.forEach(t),Uwo=i(W),g1=n(W,"LI",{});var JLe=s(g1);Kde=n(JLe,"STRONG",{});var Hst=s(Kde);Jwo=r(Hst,"gpt_neo"),Hst.forEach(t),Ywo=r(JLe," \u2014 "),Gj=n(JLe,"A",{href:!0});var Ust=s(Gj);Kwo=r(Ust,"GPTNeoForCausalLM"),Ust.forEach(t),Zwo=r(JLe," (GPT Neo model)"),JLe.forEach(t),e0o=i(W),h1=n(W,"LI",{});var YLe=s(h1);Zde=n(YLe,"STRONG",{});var Jst=s(Zde);o0o=r(Jst,"gpt_neox"),Jst.forEach(t),r0o=r(YLe," \u2014 "),Oj=n(YLe,"A",{href:!0});var Yst=s(Oj);t0o=r(Yst,"GPTNeoXForCausalLM"),Yst.forEach(t),a0o=r(YLe," (GPT NeoX model)"),YLe.forEach(t),n0o=i(W),p1=n(W,"LI",{});var KLe=s(p1);ece=n(KLe,"STRONG",{});var Kst=s(ece);s0o=r(Kst,"gptj"),Kst.forEach(t),l0o=r(KLe," \u2014 "),Vj=n(KLe,"A",{href:!0});var Zst=s(Vj);i0o=r(Zst,"GPTJForCausalLM"),Zst.forEach(t),d0o=r(KLe," (GPT-J model)"),KLe.forEach(t),c0o=i(W),_1=n(W,"LI",{});var ZLe=s(_1);oce=n(ZLe,"STRONG",{});var elt=s(oce);f0o=r(elt,"marian"),elt.forEach(t),m0o=r(ZLe," \u2014 "),Xj=n(ZLe,"A",{href:!0});var olt=s(Xj);g0o=r(olt,"MarianForCausalLM"),olt.forEach(t),h0o=r(ZLe," (Marian model)"),ZLe.forEach(t),p0o=i(W),u1=n(W,"LI",{});var e8e=s(u1);rce=n(e8e,"STRONG",{});var rlt=s(rce);_0o=r(rlt,"mbart"),rlt.forEach(t),u0o=r(e8e," \u2014 "),zj=n(e8e,"A",{href:!0});var tlt=s(zj);b0o=r(tlt,"MBartForCausalLM"),tlt.forEach(t),v0o=r(e8e," (mBART model)"),e8e.forEach(t),F0o=i(W),b1=n(W,"LI",{});var o8e=s(b1);tce=n(o8e,"STRONG",{});var alt=s(tce);T0o=r(alt,"megatron-bert"),alt.forEach(t),M0o=r(o8e," \u2014 "),Wj=n(o8e,"A",{href:!0});var nlt=s(Wj);E0o=r(nlt,"MegatronBertForCausalLM"),nlt.forEach(t),C0o=r(o8e," (MegatronBert model)"),o8e.forEach(t),w0o=i(W),v1=n(W,"LI",{});var r8e=s(v1);ace=n(r8e,"STRONG",{});var slt=s(ace);A0o=r(slt,"openai-gpt"),slt.forEach(t),y0o=r(r8e," \u2014 "),Qj=n(r8e,"A",{href:!0});var llt=s(Qj);L0o=r(llt,"OpenAIGPTLMHeadModel"),llt.forEach(t),x0o=r(r8e," (OpenAI GPT model)"),r8e.forEach(t),$0o=i(W),F1=n(W,"LI",{});var t8e=s(F1);nce=n(t8e,"STRONG",{});var ilt=s(nce);k0o=r(ilt,"opt"),ilt.forEach(t),S0o=r(t8e," \u2014 "),Hj=n(t8e,"A",{href:!0});var dlt=s(Hj);R0o=r(dlt,"OPTForCausalLM"),dlt.forEach(t),P0o=r(t8e," (OPT model)"),t8e.forEach(t),B0o=i(W),T1=n(W,"LI",{});var a8e=s(T1);sce=n(a8e,"STRONG",{});var clt=s(sce);I0o=r(clt,"pegasus"),clt.forEach(t),N0o=r(a8e," \u2014 "),Uj=n(a8e,"A",{href:!0});var flt=s(Uj);q0o=r(flt,"PegasusForCausalLM"),flt.forEach(t),j0o=r(a8e," (Pegasus model)"),a8e.forEach(t),D0o=i(W),M1=n(W,"LI",{});var n8e=s(M1);lce=n(n8e,"STRONG",{});var mlt=s(lce);G0o=r(mlt,"plbart"),mlt.forEach(t),O0o=r(n8e," \u2014 "),Jj=n(n8e,"A",{href:!0});var glt=s(Jj);V0o=r(glt,"PLBartForCausalLM"),glt.forEach(t),X0o=r(n8e," (PLBart model)"),n8e.forEach(t),z0o=i(W),E1=n(W,"LI",{});var s8e=s(E1);ice=n(s8e,"STRONG",{});var hlt=s(ice);W0o=r(hlt,"prophetnet"),hlt.forEach(t),Q0o=r(s8e," \u2014 "),Yj=n(s8e,"A",{href:!0});var plt=s(Yj);H0o=r(plt,"ProphetNetForCausalLM"),plt.forEach(t),U0o=r(s8e," (ProphetNet model)"),s8e.forEach(t),J0o=i(W),C1=n(W,"LI",{});var l8e=s(C1);dce=n(l8e,"STRONG",{});var _lt=s(dce);Y0o=r(_lt,"qdqbert"),_lt.forEach(t),K0o=r(l8e," \u2014 "),Kj=n(l8e,"A",{href:!0});var ult=s(Kj);Z0o=r(ult,"QDQBertLMHeadModel"),ult.forEach(t),e6o=r(l8e," (QDQBert model)"),l8e.forEach(t),o6o=i(W),w1=n(W,"LI",{});var i8e=s(w1);cce=n(i8e,"STRONG",{});var blt=s(cce);r6o=r(blt,"reformer"),blt.forEach(t),t6o=r(i8e," \u2014 "),Zj=n(i8e,"A",{href:!0});var vlt=s(Zj);a6o=r(vlt,"ReformerModelWithLMHead"),vlt.forEach(t),n6o=r(i8e," (Reformer model)"),i8e.forEach(t),s6o=i(W),A1=n(W,"LI",{});var d8e=s(A1);fce=n(d8e,"STRONG",{});var Flt=s(fce);l6o=r(Flt,"rembert"),Flt.forEach(t),i6o=r(d8e," \u2014 "),eD=n(d8e,"A",{href:!0});var Tlt=s(eD);d6o=r(Tlt,"RemBertForCausalLM"),Tlt.forEach(t),c6o=r(d8e," (RemBERT model)"),d8e.forEach(t),f6o=i(W),y1=n(W,"LI",{});var c8e=s(y1);mce=n(c8e,"STRONG",{});var Mlt=s(mce);m6o=r(Mlt,"roberta"),Mlt.forEach(t),g6o=r(c8e," \u2014 "),oD=n(c8e,"A",{href:!0});var Elt=s(oD);h6o=r(Elt,"RobertaForCausalLM"),Elt.forEach(t),p6o=r(c8e," (RoBERTa model)"),c8e.forEach(t),_6o=i(W),L1=n(W,"LI",{});var f8e=s(L1);gce=n(f8e,"STRONG",{});var Clt=s(gce);u6o=r(Clt,"roformer"),Clt.forEach(t),b6o=r(f8e," \u2014 "),rD=n(f8e,"A",{href:!0});var wlt=s(rD);v6o=r(wlt,"RoFormerForCausalLM"),wlt.forEach(t),F6o=r(f8e," (RoFormer model)"),f8e.forEach(t),T6o=i(W),x1=n(W,"LI",{});var m8e=s(x1);hce=n(m8e,"STRONG",{});var Alt=s(hce);M6o=r(Alt,"speech_to_text_2"),Alt.forEach(t),E6o=r(m8e," \u2014 "),tD=n(m8e,"A",{href:!0});var ylt=s(tD);C6o=r(ylt,"Speech2Text2ForCausalLM"),ylt.forEach(t),w6o=r(m8e," (Speech2Text2 model)"),m8e.forEach(t),A6o=i(W),$1=n(W,"LI",{});var g8e=s($1);pce=n(g8e,"STRONG",{});var Llt=s(pce);y6o=r(Llt,"transfo-xl"),Llt.forEach(t),L6o=r(g8e," \u2014 "),aD=n(g8e,"A",{href:!0});var xlt=s(aD);x6o=r(xlt,"TransfoXLLMHeadModel"),xlt.forEach(t),$6o=r(g8e," (Transformer-XL model)"),g8e.forEach(t),k6o=i(W),k1=n(W,"LI",{});var h8e=s(k1);_ce=n(h8e,"STRONG",{});var $lt=s(_ce);S6o=r($lt,"trocr"),$lt.forEach(t),R6o=r(h8e," \u2014 "),nD=n(h8e,"A",{href:!0});var klt=s(nD);P6o=r(klt,"TrOCRForCausalLM"),klt.forEach(t),B6o=r(h8e," (TrOCR model)"),h8e.forEach(t),I6o=i(W),S1=n(W,"LI",{});var p8e=s(S1);uce=n(p8e,"STRONG",{});var Slt=s(uce);N6o=r(Slt,"xglm"),Slt.forEach(t),q6o=r(p8e," \u2014 "),sD=n(p8e,"A",{href:!0});var Rlt=s(sD);j6o=r(Rlt,"XGLMForCausalLM"),Rlt.forEach(t),D6o=r(p8e," (XGLM model)"),p8e.forEach(t),G6o=i(W),R1=n(W,"LI",{});var _8e=s(R1);bce=n(_8e,"STRONG",{});var Plt=s(bce);O6o=r(Plt,"xlm"),Plt.forEach(t),V6o=r(_8e," \u2014 "),lD=n(_8e,"A",{href:!0});var Blt=s(lD);X6o=r(Blt,"XLMWithLMHeadModel"),Blt.forEach(t),z6o=r(_8e," (XLM model)"),_8e.forEach(t),W6o=i(W),P1=n(W,"LI",{});var u8e=s(P1);vce=n(u8e,"STRONG",{});var Ilt=s(vce);Q6o=r(Ilt,"xlm-prophetnet"),Ilt.forEach(t),H6o=r(u8e," \u2014 "),iD=n(u8e,"A",{href:!0});var Nlt=s(iD);U6o=r(Nlt,"XLMProphetNetForCausalLM"),Nlt.forEach(t),J6o=r(u8e," (XLMProphetNet model)"),u8e.forEach(t),Y6o=i(W),B1=n(W,"LI",{});var b8e=s(B1);Fce=n(b8e,"STRONG",{});var qlt=s(Fce);K6o=r(qlt,"xlm-roberta"),qlt.forEach(t),Z6o=r(b8e," \u2014 "),dD=n(b8e,"A",{href:!0});var jlt=s(dD);eAo=r(jlt,"XLMRobertaForCausalLM"),jlt.forEach(t),oAo=r(b8e," (XLM-RoBERTa model)"),b8e.forEach(t),rAo=i(W),I1=n(W,"LI",{});var v8e=s(I1);Tce=n(v8e,"STRONG",{});var Dlt=s(Tce);tAo=r(Dlt,"xlm-roberta-xl"),Dlt.forEach(t),aAo=r(v8e," \u2014 "),cD=n(v8e,"A",{href:!0});var Glt=s(cD);nAo=r(Glt,"XLMRobertaXLForCausalLM"),Glt.forEach(t),sAo=r(v8e," (XLM-RoBERTa-XL model)"),v8e.forEach(t),lAo=i(W),N1=n(W,"LI",{});var F8e=s(N1);Mce=n(F8e,"STRONG",{});var Olt=s(Mce);iAo=r(Olt,"xlnet"),Olt.forEach(t),dAo=r(F8e," \u2014 "),fD=n(F8e,"A",{href:!0});var Vlt=s(fD);cAo=r(Vlt,"XLNetLMHeadModel"),Vlt.forEach(t),fAo=r(F8e," (XLNet model)"),F8e.forEach(t),W.forEach(t),mAo=i(aa),q1=n(aa,"P",{});var T8e=s(q1);gAo=r(T8e,"The model is set in evaluation mode by default using "),Ece=n(T8e,"CODE",{});var Xlt=s(Ece);hAo=r(Xlt,"model.eval()"),Xlt.forEach(t),pAo=r(T8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cce=n(T8e,"CODE",{});var zlt=s(Cce);_Ao=r(zlt,"model.train()"),zlt.forEach(t),T8e.forEach(t),uAo=i(aa),T(j1.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),Nqe=i(f),Bi=n(f,"H2",{class:!0});var GDe=s(Bi);D1=n(GDe,"A",{id:!0,class:!0,href:!0});var Wlt=s(D1);wce=n(Wlt,"SPAN",{});var Qlt=s(wce);T(vy.$$.fragment,Qlt),Qlt.forEach(t),Wlt.forEach(t),bAo=i(GDe),Ace=n(GDe,"SPAN",{});var Hlt=s(Ace);vAo=r(Hlt,"AutoModelForMaskedLM"),Hlt.forEach(t),GDe.forEach(t),qqe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(Fy.$$.fragment,Xs),FAo=i(Xs),Ii=n(Xs,"P",{});var kZ=s(Ii);TAo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mD=n(kZ,"A",{href:!0});var Ult=s(mD);MAo=r(Ult,"from_pretrained()"),Ult.forEach(t),EAo=r(kZ," class method or the "),gD=n(kZ,"A",{href:!0});var Jlt=s(gD);CAo=r(Jlt,"from_config()"),Jlt.forEach(t),wAo=r(kZ,` class
method.`),kZ.forEach(t),AAo=i(Xs),Ty=n(Xs,"P",{});var ODe=s(Ty);yAo=r(ODe,"This class cannot be instantiated directly using "),yce=n(ODe,"CODE",{});var Ylt=s(yce);LAo=r(Ylt,"__init__()"),Ylt.forEach(t),xAo=r(ODe," (throws an error)."),ODe.forEach(t),$Ao=i(Xs),lt=n(Xs,"DIV",{class:!0});var V0=s(lt);T(My.$$.fragment,V0),kAo=i(V0),Lce=n(V0,"P",{});var Klt=s(Lce);SAo=r(Klt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Klt.forEach(t),RAo=i(V0),Ni=n(V0,"P",{});var SZ=s(Ni);PAo=r(SZ,`Note:
Loading a model from its configuration file does `),xce=n(SZ,"STRONG",{});var Zlt=s(xce);BAo=r(Zlt,"not"),Zlt.forEach(t),IAo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hD=n(SZ,"A",{href:!0});var eit=s(hD);NAo=r(eit,"from_pretrained()"),eit.forEach(t),qAo=r(SZ," to load the model weights."),SZ.forEach(t),jAo=i(V0),T(G1.$$.fragment,V0),V0.forEach(t),DAo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var na=s(Ze);T(Ey.$$.fragment,na),GAo=i(na),$ce=n(na,"P",{});var oit=s($ce);OAo=r(oit,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),oit.forEach(t),VAo=i(na),Sa=n(na,"P",{});var X0=s(Sa);XAo=r(X0,"The model class to instantiate is selected based on the "),kce=n(X0,"CODE",{});var rit=s(kce);zAo=r(rit,"model_type"),rit.forEach(t),WAo=r(X0,` property of the config object (either
passed as an argument or loaded from `),Sce=n(X0,"CODE",{});var tit=s(Sce);QAo=r(tit,"pretrained_model_name_or_path"),tit.forEach(t),HAo=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rce=n(X0,"CODE",{});var ait=s(Rce);UAo=r(ait,"pretrained_model_name_or_path"),ait.forEach(t),JAo=r(X0,":"),X0.forEach(t),YAo=i(na),Q=n(na,"UL",{});var U=s(Q);O1=n(U,"LI",{});var M8e=s(O1);Pce=n(M8e,"STRONG",{});var nit=s(Pce);KAo=r(nit,"albert"),nit.forEach(t),ZAo=r(M8e," \u2014 "),pD=n(M8e,"A",{href:!0});var sit=s(pD);eyo=r(sit,"AlbertForMaskedLM"),sit.forEach(t),oyo=r(M8e," (ALBERT model)"),M8e.forEach(t),ryo=i(U),V1=n(U,"LI",{});var E8e=s(V1);Bce=n(E8e,"STRONG",{});var lit=s(Bce);tyo=r(lit,"bart"),lit.forEach(t),ayo=r(E8e," \u2014 "),_D=n(E8e,"A",{href:!0});var iit=s(_D);nyo=r(iit,"BartForConditionalGeneration"),iit.forEach(t),syo=r(E8e," (BART model)"),E8e.forEach(t),lyo=i(U),X1=n(U,"LI",{});var C8e=s(X1);Ice=n(C8e,"STRONG",{});var dit=s(Ice);iyo=r(dit,"bert"),dit.forEach(t),dyo=r(C8e," \u2014 "),uD=n(C8e,"A",{href:!0});var cit=s(uD);cyo=r(cit,"BertForMaskedLM"),cit.forEach(t),fyo=r(C8e," (BERT model)"),C8e.forEach(t),myo=i(U),z1=n(U,"LI",{});var w8e=s(z1);Nce=n(w8e,"STRONG",{});var fit=s(Nce);gyo=r(fit,"big_bird"),fit.forEach(t),hyo=r(w8e," \u2014 "),bD=n(w8e,"A",{href:!0});var mit=s(bD);pyo=r(mit,"BigBirdForMaskedLM"),mit.forEach(t),_yo=r(w8e," (BigBird model)"),w8e.forEach(t),uyo=i(U),W1=n(U,"LI",{});var A8e=s(W1);qce=n(A8e,"STRONG",{});var git=s(qce);byo=r(git,"camembert"),git.forEach(t),vyo=r(A8e," \u2014 "),vD=n(A8e,"A",{href:!0});var hit=s(vD);Fyo=r(hit,"CamembertForMaskedLM"),hit.forEach(t),Tyo=r(A8e," (CamemBERT model)"),A8e.forEach(t),Myo=i(U),Q1=n(U,"LI",{});var y8e=s(Q1);jce=n(y8e,"STRONG",{});var pit=s(jce);Eyo=r(pit,"convbert"),pit.forEach(t),Cyo=r(y8e," \u2014 "),FD=n(y8e,"A",{href:!0});var _it=s(FD);wyo=r(_it,"ConvBertForMaskedLM"),_it.forEach(t),Ayo=r(y8e," (ConvBERT model)"),y8e.forEach(t),yyo=i(U),H1=n(U,"LI",{});var L8e=s(H1);Dce=n(L8e,"STRONG",{});var uit=s(Dce);Lyo=r(uit,"data2vec-text"),uit.forEach(t),xyo=r(L8e," \u2014 "),TD=n(L8e,"A",{href:!0});var bit=s(TD);$yo=r(bit,"Data2VecTextForMaskedLM"),bit.forEach(t),kyo=r(L8e," (Data2VecText model)"),L8e.forEach(t),Syo=i(U),U1=n(U,"LI",{});var x8e=s(U1);Gce=n(x8e,"STRONG",{});var vit=s(Gce);Ryo=r(vit,"deberta"),vit.forEach(t),Pyo=r(x8e," \u2014 "),MD=n(x8e,"A",{href:!0});var Fit=s(MD);Byo=r(Fit,"DebertaForMaskedLM"),Fit.forEach(t),Iyo=r(x8e," (DeBERTa model)"),x8e.forEach(t),Nyo=i(U),J1=n(U,"LI",{});var $8e=s(J1);Oce=n($8e,"STRONG",{});var Tit=s(Oce);qyo=r(Tit,"deberta-v2"),Tit.forEach(t),jyo=r($8e," \u2014 "),ED=n($8e,"A",{href:!0});var Mit=s(ED);Dyo=r(Mit,"DebertaV2ForMaskedLM"),Mit.forEach(t),Gyo=r($8e," (DeBERTa-v2 model)"),$8e.forEach(t),Oyo=i(U),Y1=n(U,"LI",{});var k8e=s(Y1);Vce=n(k8e,"STRONG",{});var Eit=s(Vce);Vyo=r(Eit,"distilbert"),Eit.forEach(t),Xyo=r(k8e," \u2014 "),CD=n(k8e,"A",{href:!0});var Cit=s(CD);zyo=r(Cit,"DistilBertForMaskedLM"),Cit.forEach(t),Wyo=r(k8e," (DistilBERT model)"),k8e.forEach(t),Qyo=i(U),K1=n(U,"LI",{});var S8e=s(K1);Xce=n(S8e,"STRONG",{});var wit=s(Xce);Hyo=r(wit,"electra"),wit.forEach(t),Uyo=r(S8e," \u2014 "),wD=n(S8e,"A",{href:!0});var Ait=s(wD);Jyo=r(Ait,"ElectraForMaskedLM"),Ait.forEach(t),Yyo=r(S8e," (ELECTRA model)"),S8e.forEach(t),Kyo=i(U),Z1=n(U,"LI",{});var R8e=s(Z1);zce=n(R8e,"STRONG",{});var yit=s(zce);Zyo=r(yit,"flaubert"),yit.forEach(t),eLo=r(R8e," \u2014 "),AD=n(R8e,"A",{href:!0});var Lit=s(AD);oLo=r(Lit,"FlaubertWithLMHeadModel"),Lit.forEach(t),rLo=r(R8e," (FlauBERT model)"),R8e.forEach(t),tLo=i(U),eb=n(U,"LI",{});var P8e=s(eb);Wce=n(P8e,"STRONG",{});var xit=s(Wce);aLo=r(xit,"fnet"),xit.forEach(t),nLo=r(P8e," \u2014 "),yD=n(P8e,"A",{href:!0});var $it=s(yD);sLo=r($it,"FNetForMaskedLM"),$it.forEach(t),lLo=r(P8e," (FNet model)"),P8e.forEach(t),iLo=i(U),ob=n(U,"LI",{});var B8e=s(ob);Qce=n(B8e,"STRONG",{});var kit=s(Qce);dLo=r(kit,"funnel"),kit.forEach(t),cLo=r(B8e," \u2014 "),LD=n(B8e,"A",{href:!0});var Sit=s(LD);fLo=r(Sit,"FunnelForMaskedLM"),Sit.forEach(t),mLo=r(B8e," (Funnel Transformer model)"),B8e.forEach(t),gLo=i(U),rb=n(U,"LI",{});var I8e=s(rb);Hce=n(I8e,"STRONG",{});var Rit=s(Hce);hLo=r(Rit,"ibert"),Rit.forEach(t),pLo=r(I8e," \u2014 "),xD=n(I8e,"A",{href:!0});var Pit=s(xD);_Lo=r(Pit,"IBertForMaskedLM"),Pit.forEach(t),uLo=r(I8e," (I-BERT model)"),I8e.forEach(t),bLo=i(U),tb=n(U,"LI",{});var N8e=s(tb);Uce=n(N8e,"STRONG",{});var Bit=s(Uce);vLo=r(Bit,"layoutlm"),Bit.forEach(t),FLo=r(N8e," \u2014 "),$D=n(N8e,"A",{href:!0});var Iit=s($D);TLo=r(Iit,"LayoutLMForMaskedLM"),Iit.forEach(t),MLo=r(N8e," (LayoutLM model)"),N8e.forEach(t),ELo=i(U),ab=n(U,"LI",{});var q8e=s(ab);Jce=n(q8e,"STRONG",{});var Nit=s(Jce);CLo=r(Nit,"longformer"),Nit.forEach(t),wLo=r(q8e," \u2014 "),kD=n(q8e,"A",{href:!0});var qit=s(kD);ALo=r(qit,"LongformerForMaskedLM"),qit.forEach(t),yLo=r(q8e," (Longformer model)"),q8e.forEach(t),LLo=i(U),nb=n(U,"LI",{});var j8e=s(nb);Yce=n(j8e,"STRONG",{});var jit=s(Yce);xLo=r(jit,"mbart"),jit.forEach(t),$Lo=r(j8e," \u2014 "),SD=n(j8e,"A",{href:!0});var Dit=s(SD);kLo=r(Dit,"MBartForConditionalGeneration"),Dit.forEach(t),SLo=r(j8e," (mBART model)"),j8e.forEach(t),RLo=i(U),sb=n(U,"LI",{});var D8e=s(sb);Kce=n(D8e,"STRONG",{});var Git=s(Kce);PLo=r(Git,"megatron-bert"),Git.forEach(t),BLo=r(D8e," \u2014 "),RD=n(D8e,"A",{href:!0});var Oit=s(RD);ILo=r(Oit,"MegatronBertForMaskedLM"),Oit.forEach(t),NLo=r(D8e," (MegatronBert model)"),D8e.forEach(t),qLo=i(U),lb=n(U,"LI",{});var G8e=s(lb);Zce=n(G8e,"STRONG",{});var Vit=s(Zce);jLo=r(Vit,"mobilebert"),Vit.forEach(t),DLo=r(G8e," \u2014 "),PD=n(G8e,"A",{href:!0});var Xit=s(PD);GLo=r(Xit,"MobileBertForMaskedLM"),Xit.forEach(t),OLo=r(G8e," (MobileBERT model)"),G8e.forEach(t),VLo=i(U),ib=n(U,"LI",{});var O8e=s(ib);efe=n(O8e,"STRONG",{});var zit=s(efe);XLo=r(zit,"mpnet"),zit.forEach(t),zLo=r(O8e," \u2014 "),BD=n(O8e,"A",{href:!0});var Wit=s(BD);WLo=r(Wit,"MPNetForMaskedLM"),Wit.forEach(t),QLo=r(O8e," (MPNet model)"),O8e.forEach(t),HLo=i(U),db=n(U,"LI",{});var V8e=s(db);ofe=n(V8e,"STRONG",{});var Qit=s(ofe);ULo=r(Qit,"nystromformer"),Qit.forEach(t),JLo=r(V8e," \u2014 "),ID=n(V8e,"A",{href:!0});var Hit=s(ID);YLo=r(Hit,"NystromformerForMaskedLM"),Hit.forEach(t),KLo=r(V8e," (Nystromformer model)"),V8e.forEach(t),ZLo=i(U),cb=n(U,"LI",{});var X8e=s(cb);rfe=n(X8e,"STRONG",{});var Uit=s(rfe);e8o=r(Uit,"perceiver"),Uit.forEach(t),o8o=r(X8e," \u2014 "),ND=n(X8e,"A",{href:!0});var Jit=s(ND);r8o=r(Jit,"PerceiverForMaskedLM"),Jit.forEach(t),t8o=r(X8e," (Perceiver model)"),X8e.forEach(t),a8o=i(U),fb=n(U,"LI",{});var z8e=s(fb);tfe=n(z8e,"STRONG",{});var Yit=s(tfe);n8o=r(Yit,"qdqbert"),Yit.forEach(t),s8o=r(z8e," \u2014 "),qD=n(z8e,"A",{href:!0});var Kit=s(qD);l8o=r(Kit,"QDQBertForMaskedLM"),Kit.forEach(t),i8o=r(z8e," (QDQBert model)"),z8e.forEach(t),d8o=i(U),mb=n(U,"LI",{});var W8e=s(mb);afe=n(W8e,"STRONG",{});var Zit=s(afe);c8o=r(Zit,"reformer"),Zit.forEach(t),f8o=r(W8e," \u2014 "),jD=n(W8e,"A",{href:!0});var edt=s(jD);m8o=r(edt,"ReformerForMaskedLM"),edt.forEach(t),g8o=r(W8e," (Reformer model)"),W8e.forEach(t),h8o=i(U),gb=n(U,"LI",{});var Q8e=s(gb);nfe=n(Q8e,"STRONG",{});var odt=s(nfe);p8o=r(odt,"rembert"),odt.forEach(t),_8o=r(Q8e," \u2014 "),DD=n(Q8e,"A",{href:!0});var rdt=s(DD);u8o=r(rdt,"RemBertForMaskedLM"),rdt.forEach(t),b8o=r(Q8e," (RemBERT model)"),Q8e.forEach(t),v8o=i(U),hb=n(U,"LI",{});var H8e=s(hb);sfe=n(H8e,"STRONG",{});var tdt=s(sfe);F8o=r(tdt,"roberta"),tdt.forEach(t),T8o=r(H8e," \u2014 "),GD=n(H8e,"A",{href:!0});var adt=s(GD);M8o=r(adt,"RobertaForMaskedLM"),adt.forEach(t),E8o=r(H8e," (RoBERTa model)"),H8e.forEach(t),C8o=i(U),pb=n(U,"LI",{});var U8e=s(pb);lfe=n(U8e,"STRONG",{});var ndt=s(lfe);w8o=r(ndt,"roformer"),ndt.forEach(t),A8o=r(U8e," \u2014 "),OD=n(U8e,"A",{href:!0});var sdt=s(OD);y8o=r(sdt,"RoFormerForMaskedLM"),sdt.forEach(t),L8o=r(U8e," (RoFormer model)"),U8e.forEach(t),x8o=i(U),_b=n(U,"LI",{});var J8e=s(_b);ife=n(J8e,"STRONG",{});var ldt=s(ife);$8o=r(ldt,"squeezebert"),ldt.forEach(t),k8o=r(J8e," \u2014 "),VD=n(J8e,"A",{href:!0});var idt=s(VD);S8o=r(idt,"SqueezeBertForMaskedLM"),idt.forEach(t),R8o=r(J8e," (SqueezeBERT model)"),J8e.forEach(t),P8o=i(U),ub=n(U,"LI",{});var Y8e=s(ub);dfe=n(Y8e,"STRONG",{});var ddt=s(dfe);B8o=r(ddt,"tapas"),ddt.forEach(t),I8o=r(Y8e," \u2014 "),XD=n(Y8e,"A",{href:!0});var cdt=s(XD);N8o=r(cdt,"TapasForMaskedLM"),cdt.forEach(t),q8o=r(Y8e," (TAPAS model)"),Y8e.forEach(t),j8o=i(U),bb=n(U,"LI",{});var K8e=s(bb);cfe=n(K8e,"STRONG",{});var fdt=s(cfe);D8o=r(fdt,"wav2vec2"),fdt.forEach(t),G8o=r(K8e," \u2014 "),ffe=n(K8e,"CODE",{});var mdt=s(ffe);O8o=r(mdt,"Wav2Vec2ForMaskedLM"),mdt.forEach(t),V8o=r(K8e," (Wav2Vec2 model)"),K8e.forEach(t),X8o=i(U),vb=n(U,"LI",{});var Z8e=s(vb);mfe=n(Z8e,"STRONG",{});var gdt=s(mfe);z8o=r(gdt,"xlm"),gdt.forEach(t),W8o=r(Z8e," \u2014 "),zD=n(Z8e,"A",{href:!0});var hdt=s(zD);Q8o=r(hdt,"XLMWithLMHeadModel"),hdt.forEach(t),H8o=r(Z8e," (XLM model)"),Z8e.forEach(t),U8o=i(U),Fb=n(U,"LI",{});var e9e=s(Fb);gfe=n(e9e,"STRONG",{});var pdt=s(gfe);J8o=r(pdt,"xlm-roberta"),pdt.forEach(t),Y8o=r(e9e," \u2014 "),WD=n(e9e,"A",{href:!0});var _dt=s(WD);K8o=r(_dt,"XLMRobertaForMaskedLM"),_dt.forEach(t),Z8o=r(e9e," (XLM-RoBERTa model)"),e9e.forEach(t),e9o=i(U),Tb=n(U,"LI",{});var o9e=s(Tb);hfe=n(o9e,"STRONG",{});var udt=s(hfe);o9o=r(udt,"xlm-roberta-xl"),udt.forEach(t),r9o=r(o9e," \u2014 "),QD=n(o9e,"A",{href:!0});var bdt=s(QD);t9o=r(bdt,"XLMRobertaXLForMaskedLM"),bdt.forEach(t),a9o=r(o9e," (XLM-RoBERTa-XL model)"),o9e.forEach(t),n9o=i(U),Mb=n(U,"LI",{});var r9e=s(Mb);pfe=n(r9e,"STRONG",{});var vdt=s(pfe);s9o=r(vdt,"yoso"),vdt.forEach(t),l9o=r(r9e," \u2014 "),HD=n(r9e,"A",{href:!0});var Fdt=s(HD);i9o=r(Fdt,"YosoForMaskedLM"),Fdt.forEach(t),d9o=r(r9e," (YOSO model)"),r9e.forEach(t),U.forEach(t),c9o=i(na),Eb=n(na,"P",{});var t9e=s(Eb);f9o=r(t9e,"The model is set in evaluation mode by default using "),_fe=n(t9e,"CODE",{});var Tdt=s(_fe);m9o=r(Tdt,"model.eval()"),Tdt.forEach(t),g9o=r(t9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=n(t9e,"CODE",{});var Mdt=s(ufe);h9o=r(Mdt,"model.train()"),Mdt.forEach(t),t9e.forEach(t),p9o=i(na),T(Cb.$$.fragment,na),na.forEach(t),Xs.forEach(t),jqe=i(f),qi=n(f,"H2",{class:!0});var VDe=s(qi);wb=n(VDe,"A",{id:!0,class:!0,href:!0});var Edt=s(wb);bfe=n(Edt,"SPAN",{});var Cdt=s(bfe);T(Cy.$$.fragment,Cdt),Cdt.forEach(t),Edt.forEach(t),_9o=i(VDe),vfe=n(VDe,"SPAN",{});var wdt=s(vfe);u9o=r(wdt,"AutoModelForSeq2SeqLM"),wdt.forEach(t),VDe.forEach(t),Dqe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(wy.$$.fragment,zs),b9o=i(zs),ji=n(zs,"P",{});var RZ=s(ji);v9o=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UD=n(RZ,"A",{href:!0});var Adt=s(UD);F9o=r(Adt,"from_pretrained()"),Adt.forEach(t),T9o=r(RZ," class method or the "),JD=n(RZ,"A",{href:!0});var ydt=s(JD);M9o=r(ydt,"from_config()"),ydt.forEach(t),E9o=r(RZ,` class
method.`),RZ.forEach(t),C9o=i(zs),Ay=n(zs,"P",{});var XDe=s(Ay);w9o=r(XDe,"This class cannot be instantiated directly using "),Ffe=n(XDe,"CODE",{});var Ldt=s(Ffe);A9o=r(Ldt,"__init__()"),Ldt.forEach(t),y9o=r(XDe," (throws an error)."),XDe.forEach(t),L9o=i(zs),it=n(zs,"DIV",{class:!0});var z0=s(it);T(yy.$$.fragment,z0),x9o=i(z0),Tfe=n(z0,"P",{});var xdt=s(Tfe);$9o=r(xdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xdt.forEach(t),k9o=i(z0),Di=n(z0,"P",{});var PZ=s(Di);S9o=r(PZ,`Note:
Loading a model from its configuration file does `),Mfe=n(PZ,"STRONG",{});var $dt=s(Mfe);R9o=r($dt,"not"),$dt.forEach(t),P9o=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YD=n(PZ,"A",{href:!0});var kdt=s(YD);B9o=r(kdt,"from_pretrained()"),kdt.forEach(t),I9o=r(PZ," to load the model weights."),PZ.forEach(t),N9o=i(z0),T(Ab.$$.fragment,z0),z0.forEach(t),q9o=i(zs),eo=n(zs,"DIV",{class:!0});var sa=s(eo);T(Ly.$$.fragment,sa),j9o=i(sa),Efe=n(sa,"P",{});var Sdt=s(Efe);D9o=r(Sdt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Sdt.forEach(t),G9o=i(sa),Ra=n(sa,"P",{});var W0=s(Ra);O9o=r(W0,"The model class to instantiate is selected based on the "),Cfe=n(W0,"CODE",{});var Rdt=s(Cfe);V9o=r(Rdt,"model_type"),Rdt.forEach(t),X9o=r(W0,` property of the config object (either
passed as an argument or loaded from `),wfe=n(W0,"CODE",{});var Pdt=s(wfe);z9o=r(Pdt,"pretrained_model_name_or_path"),Pdt.forEach(t),W9o=r(W0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Afe=n(W0,"CODE",{});var Bdt=s(Afe);Q9o=r(Bdt,"pretrained_model_name_or_path"),Bdt.forEach(t),H9o=r(W0,":"),W0.forEach(t),U9o=i(sa),_e=n(sa,"UL",{});var Fe=s(_e);yb=n(Fe,"LI",{});var a9e=s(yb);yfe=n(a9e,"STRONG",{});var Idt=s(yfe);J9o=r(Idt,"bart"),Idt.forEach(t),Y9o=r(a9e," \u2014 "),KD=n(a9e,"A",{href:!0});var Ndt=s(KD);K9o=r(Ndt,"BartForConditionalGeneration"),Ndt.forEach(t),Z9o=r(a9e," (BART model)"),a9e.forEach(t),exo=i(Fe),Lb=n(Fe,"LI",{});var n9e=s(Lb);Lfe=n(n9e,"STRONG",{});var qdt=s(Lfe);oxo=r(qdt,"bigbird_pegasus"),qdt.forEach(t),rxo=r(n9e," \u2014 "),ZD=n(n9e,"A",{href:!0});var jdt=s(ZD);txo=r(jdt,"BigBirdPegasusForConditionalGeneration"),jdt.forEach(t),axo=r(n9e," (BigBirdPegasus model)"),n9e.forEach(t),nxo=i(Fe),xb=n(Fe,"LI",{});var s9e=s(xb);xfe=n(s9e,"STRONG",{});var Ddt=s(xfe);sxo=r(Ddt,"blenderbot"),Ddt.forEach(t),lxo=r(s9e," \u2014 "),eG=n(s9e,"A",{href:!0});var Gdt=s(eG);ixo=r(Gdt,"BlenderbotForConditionalGeneration"),Gdt.forEach(t),dxo=r(s9e," (Blenderbot model)"),s9e.forEach(t),cxo=i(Fe),$b=n(Fe,"LI",{});var l9e=s($b);$fe=n(l9e,"STRONG",{});var Odt=s($fe);fxo=r(Odt,"blenderbot-small"),Odt.forEach(t),mxo=r(l9e," \u2014 "),oG=n(l9e,"A",{href:!0});var Vdt=s(oG);gxo=r(Vdt,"BlenderbotSmallForConditionalGeneration"),Vdt.forEach(t),hxo=r(l9e," (BlenderbotSmall model)"),l9e.forEach(t),pxo=i(Fe),kb=n(Fe,"LI",{});var i9e=s(kb);kfe=n(i9e,"STRONG",{});var Xdt=s(kfe);_xo=r(Xdt,"encoder-decoder"),Xdt.forEach(t),uxo=r(i9e," \u2014 "),rG=n(i9e,"A",{href:!0});var zdt=s(rG);bxo=r(zdt,"EncoderDecoderModel"),zdt.forEach(t),vxo=r(i9e," (Encoder decoder model)"),i9e.forEach(t),Fxo=i(Fe),Sb=n(Fe,"LI",{});var d9e=s(Sb);Sfe=n(d9e,"STRONG",{});var Wdt=s(Sfe);Txo=r(Wdt,"fsmt"),Wdt.forEach(t),Mxo=r(d9e," \u2014 "),tG=n(d9e,"A",{href:!0});var Qdt=s(tG);Exo=r(Qdt,"FSMTForConditionalGeneration"),Qdt.forEach(t),Cxo=r(d9e," (FairSeq Machine-Translation model)"),d9e.forEach(t),wxo=i(Fe),Rb=n(Fe,"LI",{});var c9e=s(Rb);Rfe=n(c9e,"STRONG",{});var Hdt=s(Rfe);Axo=r(Hdt,"led"),Hdt.forEach(t),yxo=r(c9e," \u2014 "),aG=n(c9e,"A",{href:!0});var Udt=s(aG);Lxo=r(Udt,"LEDForConditionalGeneration"),Udt.forEach(t),xxo=r(c9e," (LED model)"),c9e.forEach(t),$xo=i(Fe),Pb=n(Fe,"LI",{});var f9e=s(Pb);Pfe=n(f9e,"STRONG",{});var Jdt=s(Pfe);kxo=r(Jdt,"m2m_100"),Jdt.forEach(t),Sxo=r(f9e," \u2014 "),nG=n(f9e,"A",{href:!0});var Ydt=s(nG);Rxo=r(Ydt,"M2M100ForConditionalGeneration"),Ydt.forEach(t),Pxo=r(f9e," (M2M100 model)"),f9e.forEach(t),Bxo=i(Fe),Bb=n(Fe,"LI",{});var m9e=s(Bb);Bfe=n(m9e,"STRONG",{});var Kdt=s(Bfe);Ixo=r(Kdt,"marian"),Kdt.forEach(t),Nxo=r(m9e," \u2014 "),sG=n(m9e,"A",{href:!0});var Zdt=s(sG);qxo=r(Zdt,"MarianMTModel"),Zdt.forEach(t),jxo=r(m9e," (Marian model)"),m9e.forEach(t),Dxo=i(Fe),Ib=n(Fe,"LI",{});var g9e=s(Ib);Ife=n(g9e,"STRONG",{});var ect=s(Ife);Gxo=r(ect,"mbart"),ect.forEach(t),Oxo=r(g9e," \u2014 "),lG=n(g9e,"A",{href:!0});var oct=s(lG);Vxo=r(oct,"MBartForConditionalGeneration"),oct.forEach(t),Xxo=r(g9e," (mBART model)"),g9e.forEach(t),zxo=i(Fe),Nb=n(Fe,"LI",{});var h9e=s(Nb);Nfe=n(h9e,"STRONG",{});var rct=s(Nfe);Wxo=r(rct,"mt5"),rct.forEach(t),Qxo=r(h9e," \u2014 "),iG=n(h9e,"A",{href:!0});var tct=s(iG);Hxo=r(tct,"MT5ForConditionalGeneration"),tct.forEach(t),Uxo=r(h9e," (mT5 model)"),h9e.forEach(t),Jxo=i(Fe),qb=n(Fe,"LI",{});var p9e=s(qb);qfe=n(p9e,"STRONG",{});var act=s(qfe);Yxo=r(act,"pegasus"),act.forEach(t),Kxo=r(p9e," \u2014 "),dG=n(p9e,"A",{href:!0});var nct=s(dG);Zxo=r(nct,"PegasusForConditionalGeneration"),nct.forEach(t),e$o=r(p9e," (Pegasus model)"),p9e.forEach(t),o$o=i(Fe),jb=n(Fe,"LI",{});var _9e=s(jb);jfe=n(_9e,"STRONG",{});var sct=s(jfe);r$o=r(sct,"plbart"),sct.forEach(t),t$o=r(_9e," \u2014 "),cG=n(_9e,"A",{href:!0});var lct=s(cG);a$o=r(lct,"PLBartForConditionalGeneration"),lct.forEach(t),n$o=r(_9e," (PLBart model)"),_9e.forEach(t),s$o=i(Fe),Db=n(Fe,"LI",{});var u9e=s(Db);Dfe=n(u9e,"STRONG",{});var ict=s(Dfe);l$o=r(ict,"prophetnet"),ict.forEach(t),i$o=r(u9e," \u2014 "),fG=n(u9e,"A",{href:!0});var dct=s(fG);d$o=r(dct,"ProphetNetForConditionalGeneration"),dct.forEach(t),c$o=r(u9e," (ProphetNet model)"),u9e.forEach(t),f$o=i(Fe),Gb=n(Fe,"LI",{});var b9e=s(Gb);Gfe=n(b9e,"STRONG",{});var cct=s(Gfe);m$o=r(cct,"t5"),cct.forEach(t),g$o=r(b9e," \u2014 "),mG=n(b9e,"A",{href:!0});var fct=s(mG);h$o=r(fct,"T5ForConditionalGeneration"),fct.forEach(t),p$o=r(b9e," (T5 model)"),b9e.forEach(t),_$o=i(Fe),Ob=n(Fe,"LI",{});var v9e=s(Ob);Ofe=n(v9e,"STRONG",{});var mct=s(Ofe);u$o=r(mct,"xlm-prophetnet"),mct.forEach(t),b$o=r(v9e," \u2014 "),gG=n(v9e,"A",{href:!0});var gct=s(gG);v$o=r(gct,"XLMProphetNetForConditionalGeneration"),gct.forEach(t),F$o=r(v9e," (XLMProphetNet model)"),v9e.forEach(t),Fe.forEach(t),T$o=i(sa),Vb=n(sa,"P",{});var F9e=s(Vb);M$o=r(F9e,"The model is set in evaluation mode by default using "),Vfe=n(F9e,"CODE",{});var hct=s(Vfe);E$o=r(hct,"model.eval()"),hct.forEach(t),C$o=r(F9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=n(F9e,"CODE",{});var pct=s(Xfe);w$o=r(pct,"model.train()"),pct.forEach(t),F9e.forEach(t),A$o=i(sa),T(Xb.$$.fragment,sa),sa.forEach(t),zs.forEach(t),Gqe=i(f),Gi=n(f,"H2",{class:!0});var zDe=s(Gi);zb=n(zDe,"A",{id:!0,class:!0,href:!0});var _ct=s(zb);zfe=n(_ct,"SPAN",{});var uct=s(zfe);T(xy.$$.fragment,uct),uct.forEach(t),_ct.forEach(t),y$o=i(zDe),Wfe=n(zDe,"SPAN",{});var bct=s(Wfe);L$o=r(bct,"AutoModelForSequenceClassification"),bct.forEach(t),zDe.forEach(t),Oqe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T($y.$$.fragment,Ws),x$o=i(Ws),Oi=n(Ws,"P",{});var BZ=s(Oi);$$o=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),hG=n(BZ,"A",{href:!0});var vct=s(hG);k$o=r(vct,"from_pretrained()"),vct.forEach(t),S$o=r(BZ," class method or the "),pG=n(BZ,"A",{href:!0});var Fct=s(pG);R$o=r(Fct,"from_config()"),Fct.forEach(t),P$o=r(BZ,` class
method.`),BZ.forEach(t),B$o=i(Ws),ky=n(Ws,"P",{});var WDe=s(ky);I$o=r(WDe,"This class cannot be instantiated directly using "),Qfe=n(WDe,"CODE",{});var Tct=s(Qfe);N$o=r(Tct,"__init__()"),Tct.forEach(t),q$o=r(WDe," (throws an error)."),WDe.forEach(t),j$o=i(Ws),dt=n(Ws,"DIV",{class:!0});var Q0=s(dt);T(Sy.$$.fragment,Q0),D$o=i(Q0),Hfe=n(Q0,"P",{});var Mct=s(Hfe);G$o=r(Mct,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Mct.forEach(t),O$o=i(Q0),Vi=n(Q0,"P",{});var IZ=s(Vi);V$o=r(IZ,`Note:
Loading a model from its configuration file does `),Ufe=n(IZ,"STRONG",{});var Ect=s(Ufe);X$o=r(Ect,"not"),Ect.forEach(t),z$o=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_G=n(IZ,"A",{href:!0});var Cct=s(_G);W$o=r(Cct,"from_pretrained()"),Cct.forEach(t),Q$o=r(IZ," to load the model weights."),IZ.forEach(t),H$o=i(Q0),T(Wb.$$.fragment,Q0),Q0.forEach(t),U$o=i(Ws),oo=n(Ws,"DIV",{class:!0});var la=s(oo);T(Ry.$$.fragment,la),J$o=i(la),Jfe=n(la,"P",{});var wct=s(Jfe);Y$o=r(wct,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wct.forEach(t),K$o=i(la),Pa=n(la,"P",{});var H0=s(Pa);Z$o=r(H0,"The model class to instantiate is selected based on the "),Yfe=n(H0,"CODE",{});var Act=s(Yfe);eko=r(Act,"model_type"),Act.forEach(t),oko=r(H0,` property of the config object (either
passed as an argument or loaded from `),Kfe=n(H0,"CODE",{});var yct=s(Kfe);rko=r(yct,"pretrained_model_name_or_path"),yct.forEach(t),tko=r(H0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zfe=n(H0,"CODE",{});var Lct=s(Zfe);ako=r(Lct,"pretrained_model_name_or_path"),Lct.forEach(t),nko=r(H0,":"),H0.forEach(t),sko=i(la),N=n(la,"UL",{});var j=s(N);Qb=n(j,"LI",{});var T9e=s(Qb);eme=n(T9e,"STRONG",{});var xct=s(eme);lko=r(xct,"albert"),xct.forEach(t),iko=r(T9e," \u2014 "),uG=n(T9e,"A",{href:!0});var $ct=s(uG);dko=r($ct,"AlbertForSequenceClassification"),$ct.forEach(t),cko=r(T9e," (ALBERT model)"),T9e.forEach(t),fko=i(j),Hb=n(j,"LI",{});var M9e=s(Hb);ome=n(M9e,"STRONG",{});var kct=s(ome);mko=r(kct,"bart"),kct.forEach(t),gko=r(M9e," \u2014 "),bG=n(M9e,"A",{href:!0});var Sct=s(bG);hko=r(Sct,"BartForSequenceClassification"),Sct.forEach(t),pko=r(M9e," (BART model)"),M9e.forEach(t),_ko=i(j),Ub=n(j,"LI",{});var E9e=s(Ub);rme=n(E9e,"STRONG",{});var Rct=s(rme);uko=r(Rct,"bert"),Rct.forEach(t),bko=r(E9e," \u2014 "),vG=n(E9e,"A",{href:!0});var Pct=s(vG);vko=r(Pct,"BertForSequenceClassification"),Pct.forEach(t),Fko=r(E9e," (BERT model)"),E9e.forEach(t),Tko=i(j),Jb=n(j,"LI",{});var C9e=s(Jb);tme=n(C9e,"STRONG",{});var Bct=s(tme);Mko=r(Bct,"big_bird"),Bct.forEach(t),Eko=r(C9e," \u2014 "),FG=n(C9e,"A",{href:!0});var Ict=s(FG);Cko=r(Ict,"BigBirdForSequenceClassification"),Ict.forEach(t),wko=r(C9e," (BigBird model)"),C9e.forEach(t),Ako=i(j),Yb=n(j,"LI",{});var w9e=s(Yb);ame=n(w9e,"STRONG",{});var Nct=s(ame);yko=r(Nct,"bigbird_pegasus"),Nct.forEach(t),Lko=r(w9e," \u2014 "),TG=n(w9e,"A",{href:!0});var qct=s(TG);xko=r(qct,"BigBirdPegasusForSequenceClassification"),qct.forEach(t),$ko=r(w9e," (BigBirdPegasus model)"),w9e.forEach(t),kko=i(j),Kb=n(j,"LI",{});var A9e=s(Kb);nme=n(A9e,"STRONG",{});var jct=s(nme);Sko=r(jct,"camembert"),jct.forEach(t),Rko=r(A9e," \u2014 "),MG=n(A9e,"A",{href:!0});var Dct=s(MG);Pko=r(Dct,"CamembertForSequenceClassification"),Dct.forEach(t),Bko=r(A9e," (CamemBERT model)"),A9e.forEach(t),Iko=i(j),Zb=n(j,"LI",{});var y9e=s(Zb);sme=n(y9e,"STRONG",{});var Gct=s(sme);Nko=r(Gct,"canine"),Gct.forEach(t),qko=r(y9e," \u2014 "),EG=n(y9e,"A",{href:!0});var Oct=s(EG);jko=r(Oct,"CanineForSequenceClassification"),Oct.forEach(t),Dko=r(y9e," (Canine model)"),y9e.forEach(t),Gko=i(j),e2=n(j,"LI",{});var L9e=s(e2);lme=n(L9e,"STRONG",{});var Vct=s(lme);Oko=r(Vct,"convbert"),Vct.forEach(t),Vko=r(L9e," \u2014 "),CG=n(L9e,"A",{href:!0});var Xct=s(CG);Xko=r(Xct,"ConvBertForSequenceClassification"),Xct.forEach(t),zko=r(L9e," (ConvBERT model)"),L9e.forEach(t),Wko=i(j),o2=n(j,"LI",{});var x9e=s(o2);ime=n(x9e,"STRONG",{});var zct=s(ime);Qko=r(zct,"ctrl"),zct.forEach(t),Hko=r(x9e," \u2014 "),wG=n(x9e,"A",{href:!0});var Wct=s(wG);Uko=r(Wct,"CTRLForSequenceClassification"),Wct.forEach(t),Jko=r(x9e," (CTRL model)"),x9e.forEach(t),Yko=i(j),r2=n(j,"LI",{});var $9e=s(r2);dme=n($9e,"STRONG",{});var Qct=s(dme);Kko=r(Qct,"data2vec-text"),Qct.forEach(t),Zko=r($9e," \u2014 "),AG=n($9e,"A",{href:!0});var Hct=s(AG);eSo=r(Hct,"Data2VecTextForSequenceClassification"),Hct.forEach(t),oSo=r($9e," (Data2VecText model)"),$9e.forEach(t),rSo=i(j),t2=n(j,"LI",{});var k9e=s(t2);cme=n(k9e,"STRONG",{});var Uct=s(cme);tSo=r(Uct,"deberta"),Uct.forEach(t),aSo=r(k9e," \u2014 "),yG=n(k9e,"A",{href:!0});var Jct=s(yG);nSo=r(Jct,"DebertaForSequenceClassification"),Jct.forEach(t),sSo=r(k9e," (DeBERTa model)"),k9e.forEach(t),lSo=i(j),a2=n(j,"LI",{});var S9e=s(a2);fme=n(S9e,"STRONG",{});var Yct=s(fme);iSo=r(Yct,"deberta-v2"),Yct.forEach(t),dSo=r(S9e," \u2014 "),LG=n(S9e,"A",{href:!0});var Kct=s(LG);cSo=r(Kct,"DebertaV2ForSequenceClassification"),Kct.forEach(t),fSo=r(S9e," (DeBERTa-v2 model)"),S9e.forEach(t),mSo=i(j),n2=n(j,"LI",{});var R9e=s(n2);mme=n(R9e,"STRONG",{});var Zct=s(mme);gSo=r(Zct,"distilbert"),Zct.forEach(t),hSo=r(R9e," \u2014 "),xG=n(R9e,"A",{href:!0});var eft=s(xG);pSo=r(eft,"DistilBertForSequenceClassification"),eft.forEach(t),_So=r(R9e," (DistilBERT model)"),R9e.forEach(t),uSo=i(j),s2=n(j,"LI",{});var P9e=s(s2);gme=n(P9e,"STRONG",{});var oft=s(gme);bSo=r(oft,"electra"),oft.forEach(t),vSo=r(P9e," \u2014 "),$G=n(P9e,"A",{href:!0});var rft=s($G);FSo=r(rft,"ElectraForSequenceClassification"),rft.forEach(t),TSo=r(P9e," (ELECTRA model)"),P9e.forEach(t),MSo=i(j),l2=n(j,"LI",{});var B9e=s(l2);hme=n(B9e,"STRONG",{});var tft=s(hme);ESo=r(tft,"flaubert"),tft.forEach(t),CSo=r(B9e," \u2014 "),kG=n(B9e,"A",{href:!0});var aft=s(kG);wSo=r(aft,"FlaubertForSequenceClassification"),aft.forEach(t),ASo=r(B9e," (FlauBERT model)"),B9e.forEach(t),ySo=i(j),i2=n(j,"LI",{});var I9e=s(i2);pme=n(I9e,"STRONG",{});var nft=s(pme);LSo=r(nft,"fnet"),nft.forEach(t),xSo=r(I9e," \u2014 "),SG=n(I9e,"A",{href:!0});var sft=s(SG);$So=r(sft,"FNetForSequenceClassification"),sft.forEach(t),kSo=r(I9e," (FNet model)"),I9e.forEach(t),SSo=i(j),d2=n(j,"LI",{});var N9e=s(d2);_me=n(N9e,"STRONG",{});var lft=s(_me);RSo=r(lft,"funnel"),lft.forEach(t),PSo=r(N9e," \u2014 "),RG=n(N9e,"A",{href:!0});var ift=s(RG);BSo=r(ift,"FunnelForSequenceClassification"),ift.forEach(t),ISo=r(N9e," (Funnel Transformer model)"),N9e.forEach(t),NSo=i(j),c2=n(j,"LI",{});var q9e=s(c2);ume=n(q9e,"STRONG",{});var dft=s(ume);qSo=r(dft,"gpt2"),dft.forEach(t),jSo=r(q9e," \u2014 "),PG=n(q9e,"A",{href:!0});var cft=s(PG);DSo=r(cft,"GPT2ForSequenceClassification"),cft.forEach(t),GSo=r(q9e," (OpenAI GPT-2 model)"),q9e.forEach(t),OSo=i(j),f2=n(j,"LI",{});var j9e=s(f2);bme=n(j9e,"STRONG",{});var fft=s(bme);VSo=r(fft,"gpt_neo"),fft.forEach(t),XSo=r(j9e," \u2014 "),BG=n(j9e,"A",{href:!0});var mft=s(BG);zSo=r(mft,"GPTNeoForSequenceClassification"),mft.forEach(t),WSo=r(j9e," (GPT Neo model)"),j9e.forEach(t),QSo=i(j),m2=n(j,"LI",{});var D9e=s(m2);vme=n(D9e,"STRONG",{});var gft=s(vme);HSo=r(gft,"gptj"),gft.forEach(t),USo=r(D9e," \u2014 "),IG=n(D9e,"A",{href:!0});var hft=s(IG);JSo=r(hft,"GPTJForSequenceClassification"),hft.forEach(t),YSo=r(D9e," (GPT-J model)"),D9e.forEach(t),KSo=i(j),g2=n(j,"LI",{});var G9e=s(g2);Fme=n(G9e,"STRONG",{});var pft=s(Fme);ZSo=r(pft,"ibert"),pft.forEach(t),eRo=r(G9e," \u2014 "),NG=n(G9e,"A",{href:!0});var _ft=s(NG);oRo=r(_ft,"IBertForSequenceClassification"),_ft.forEach(t),rRo=r(G9e," (I-BERT model)"),G9e.forEach(t),tRo=i(j),h2=n(j,"LI",{});var O9e=s(h2);Tme=n(O9e,"STRONG",{});var uft=s(Tme);aRo=r(uft,"layoutlm"),uft.forEach(t),nRo=r(O9e," \u2014 "),qG=n(O9e,"A",{href:!0});var bft=s(qG);sRo=r(bft,"LayoutLMForSequenceClassification"),bft.forEach(t),lRo=r(O9e," (LayoutLM model)"),O9e.forEach(t),iRo=i(j),p2=n(j,"LI",{});var V9e=s(p2);Mme=n(V9e,"STRONG",{});var vft=s(Mme);dRo=r(vft,"layoutlmv2"),vft.forEach(t),cRo=r(V9e," \u2014 "),jG=n(V9e,"A",{href:!0});var Fft=s(jG);fRo=r(Fft,"LayoutLMv2ForSequenceClassification"),Fft.forEach(t),mRo=r(V9e," (LayoutLMv2 model)"),V9e.forEach(t),gRo=i(j),_2=n(j,"LI",{});var X9e=s(_2);Eme=n(X9e,"STRONG",{});var Tft=s(Eme);hRo=r(Tft,"layoutlmv3"),Tft.forEach(t),pRo=r(X9e," \u2014 "),DG=n(X9e,"A",{href:!0});var Mft=s(DG);_Ro=r(Mft,"LayoutLMv3ForSequenceClassification"),Mft.forEach(t),uRo=r(X9e," (LayoutLMv3 model)"),X9e.forEach(t),bRo=i(j),u2=n(j,"LI",{});var z9e=s(u2);Cme=n(z9e,"STRONG",{});var Eft=s(Cme);vRo=r(Eft,"led"),Eft.forEach(t),FRo=r(z9e," \u2014 "),GG=n(z9e,"A",{href:!0});var Cft=s(GG);TRo=r(Cft,"LEDForSequenceClassification"),Cft.forEach(t),MRo=r(z9e," (LED model)"),z9e.forEach(t),ERo=i(j),b2=n(j,"LI",{});var W9e=s(b2);wme=n(W9e,"STRONG",{});var wft=s(wme);CRo=r(wft,"longformer"),wft.forEach(t),wRo=r(W9e," \u2014 "),OG=n(W9e,"A",{href:!0});var Aft=s(OG);ARo=r(Aft,"LongformerForSequenceClassification"),Aft.forEach(t),yRo=r(W9e," (Longformer model)"),W9e.forEach(t),LRo=i(j),v2=n(j,"LI",{});var Q9e=s(v2);Ame=n(Q9e,"STRONG",{});var yft=s(Ame);xRo=r(yft,"mbart"),yft.forEach(t),$Ro=r(Q9e," \u2014 "),VG=n(Q9e,"A",{href:!0});var Lft=s(VG);kRo=r(Lft,"MBartForSequenceClassification"),Lft.forEach(t),SRo=r(Q9e," (mBART model)"),Q9e.forEach(t),RRo=i(j),F2=n(j,"LI",{});var H9e=s(F2);yme=n(H9e,"STRONG",{});var xft=s(yme);PRo=r(xft,"megatron-bert"),xft.forEach(t),BRo=r(H9e," \u2014 "),XG=n(H9e,"A",{href:!0});var $ft=s(XG);IRo=r($ft,"MegatronBertForSequenceClassification"),$ft.forEach(t),NRo=r(H9e," (MegatronBert model)"),H9e.forEach(t),qRo=i(j),T2=n(j,"LI",{});var U9e=s(T2);Lme=n(U9e,"STRONG",{});var kft=s(Lme);jRo=r(kft,"mobilebert"),kft.forEach(t),DRo=r(U9e," \u2014 "),zG=n(U9e,"A",{href:!0});var Sft=s(zG);GRo=r(Sft,"MobileBertForSequenceClassification"),Sft.forEach(t),ORo=r(U9e," (MobileBERT model)"),U9e.forEach(t),VRo=i(j),M2=n(j,"LI",{});var J9e=s(M2);xme=n(J9e,"STRONG",{});var Rft=s(xme);XRo=r(Rft,"mpnet"),Rft.forEach(t),zRo=r(J9e," \u2014 "),WG=n(J9e,"A",{href:!0});var Pft=s(WG);WRo=r(Pft,"MPNetForSequenceClassification"),Pft.forEach(t),QRo=r(J9e," (MPNet model)"),J9e.forEach(t),HRo=i(j),E2=n(j,"LI",{});var Y9e=s(E2);$me=n(Y9e,"STRONG",{});var Bft=s($me);URo=r(Bft,"nystromformer"),Bft.forEach(t),JRo=r(Y9e," \u2014 "),QG=n(Y9e,"A",{href:!0});var Ift=s(QG);YRo=r(Ift,"NystromformerForSequenceClassification"),Ift.forEach(t),KRo=r(Y9e," (Nystromformer model)"),Y9e.forEach(t),ZRo=i(j),C2=n(j,"LI",{});var K9e=s(C2);kme=n(K9e,"STRONG",{});var Nft=s(kme);ePo=r(Nft,"openai-gpt"),Nft.forEach(t),oPo=r(K9e," \u2014 "),HG=n(K9e,"A",{href:!0});var qft=s(HG);rPo=r(qft,"OpenAIGPTForSequenceClassification"),qft.forEach(t),tPo=r(K9e," (OpenAI GPT model)"),K9e.forEach(t),aPo=i(j),w2=n(j,"LI",{});var Z9e=s(w2);Sme=n(Z9e,"STRONG",{});var jft=s(Sme);nPo=r(jft,"perceiver"),jft.forEach(t),sPo=r(Z9e," \u2014 "),UG=n(Z9e,"A",{href:!0});var Dft=s(UG);lPo=r(Dft,"PerceiverForSequenceClassification"),Dft.forEach(t),iPo=r(Z9e," (Perceiver model)"),Z9e.forEach(t),dPo=i(j),A2=n(j,"LI",{});var exe=s(A2);Rme=n(exe,"STRONG",{});var Gft=s(Rme);cPo=r(Gft,"plbart"),Gft.forEach(t),fPo=r(exe," \u2014 "),JG=n(exe,"A",{href:!0});var Oft=s(JG);mPo=r(Oft,"PLBartForSequenceClassification"),Oft.forEach(t),gPo=r(exe," (PLBart model)"),exe.forEach(t),hPo=i(j),y2=n(j,"LI",{});var oxe=s(y2);Pme=n(oxe,"STRONG",{});var Vft=s(Pme);pPo=r(Vft,"qdqbert"),Vft.forEach(t),_Po=r(oxe," \u2014 "),YG=n(oxe,"A",{href:!0});var Xft=s(YG);uPo=r(Xft,"QDQBertForSequenceClassification"),Xft.forEach(t),bPo=r(oxe," (QDQBert model)"),oxe.forEach(t),vPo=i(j),L2=n(j,"LI",{});var rxe=s(L2);Bme=n(rxe,"STRONG",{});var zft=s(Bme);FPo=r(zft,"reformer"),zft.forEach(t),TPo=r(rxe," \u2014 "),KG=n(rxe,"A",{href:!0});var Wft=s(KG);MPo=r(Wft,"ReformerForSequenceClassification"),Wft.forEach(t),EPo=r(rxe," (Reformer model)"),rxe.forEach(t),CPo=i(j),x2=n(j,"LI",{});var txe=s(x2);Ime=n(txe,"STRONG",{});var Qft=s(Ime);wPo=r(Qft,"rembert"),Qft.forEach(t),APo=r(txe," \u2014 "),ZG=n(txe,"A",{href:!0});var Hft=s(ZG);yPo=r(Hft,"RemBertForSequenceClassification"),Hft.forEach(t),LPo=r(txe," (RemBERT model)"),txe.forEach(t),xPo=i(j),$2=n(j,"LI",{});var axe=s($2);Nme=n(axe,"STRONG",{});var Uft=s(Nme);$Po=r(Uft,"roberta"),Uft.forEach(t),kPo=r(axe," \u2014 "),eO=n(axe,"A",{href:!0});var Jft=s(eO);SPo=r(Jft,"RobertaForSequenceClassification"),Jft.forEach(t),RPo=r(axe," (RoBERTa model)"),axe.forEach(t),PPo=i(j),k2=n(j,"LI",{});var nxe=s(k2);qme=n(nxe,"STRONG",{});var Yft=s(qme);BPo=r(Yft,"roformer"),Yft.forEach(t),IPo=r(nxe," \u2014 "),oO=n(nxe,"A",{href:!0});var Kft=s(oO);NPo=r(Kft,"RoFormerForSequenceClassification"),Kft.forEach(t),qPo=r(nxe," (RoFormer model)"),nxe.forEach(t),jPo=i(j),S2=n(j,"LI",{});var sxe=s(S2);jme=n(sxe,"STRONG",{});var Zft=s(jme);DPo=r(Zft,"squeezebert"),Zft.forEach(t),GPo=r(sxe," \u2014 "),rO=n(sxe,"A",{href:!0});var emt=s(rO);OPo=r(emt,"SqueezeBertForSequenceClassification"),emt.forEach(t),VPo=r(sxe," (SqueezeBERT model)"),sxe.forEach(t),XPo=i(j),R2=n(j,"LI",{});var lxe=s(R2);Dme=n(lxe,"STRONG",{});var omt=s(Dme);zPo=r(omt,"tapas"),omt.forEach(t),WPo=r(lxe," \u2014 "),tO=n(lxe,"A",{href:!0});var rmt=s(tO);QPo=r(rmt,"TapasForSequenceClassification"),rmt.forEach(t),HPo=r(lxe," (TAPAS model)"),lxe.forEach(t),UPo=i(j),P2=n(j,"LI",{});var ixe=s(P2);Gme=n(ixe,"STRONG",{});var tmt=s(Gme);JPo=r(tmt,"transfo-xl"),tmt.forEach(t),YPo=r(ixe," \u2014 "),aO=n(ixe,"A",{href:!0});var amt=s(aO);KPo=r(amt,"TransfoXLForSequenceClassification"),amt.forEach(t),ZPo=r(ixe," (Transformer-XL model)"),ixe.forEach(t),eBo=i(j),B2=n(j,"LI",{});var dxe=s(B2);Ome=n(dxe,"STRONG",{});var nmt=s(Ome);oBo=r(nmt,"xlm"),nmt.forEach(t),rBo=r(dxe," \u2014 "),nO=n(dxe,"A",{href:!0});var smt=s(nO);tBo=r(smt,"XLMForSequenceClassification"),smt.forEach(t),aBo=r(dxe," (XLM model)"),dxe.forEach(t),nBo=i(j),I2=n(j,"LI",{});var cxe=s(I2);Vme=n(cxe,"STRONG",{});var lmt=s(Vme);sBo=r(lmt,"xlm-roberta"),lmt.forEach(t),lBo=r(cxe," \u2014 "),sO=n(cxe,"A",{href:!0});var imt=s(sO);iBo=r(imt,"XLMRobertaForSequenceClassification"),imt.forEach(t),dBo=r(cxe," (XLM-RoBERTa model)"),cxe.forEach(t),cBo=i(j),N2=n(j,"LI",{});var fxe=s(N2);Xme=n(fxe,"STRONG",{});var dmt=s(Xme);fBo=r(dmt,"xlm-roberta-xl"),dmt.forEach(t),mBo=r(fxe," \u2014 "),lO=n(fxe,"A",{href:!0});var cmt=s(lO);gBo=r(cmt,"XLMRobertaXLForSequenceClassification"),cmt.forEach(t),hBo=r(fxe," (XLM-RoBERTa-XL model)"),fxe.forEach(t),pBo=i(j),q2=n(j,"LI",{});var mxe=s(q2);zme=n(mxe,"STRONG",{});var fmt=s(zme);_Bo=r(fmt,"xlnet"),fmt.forEach(t),uBo=r(mxe," \u2014 "),iO=n(mxe,"A",{href:!0});var mmt=s(iO);bBo=r(mmt,"XLNetForSequenceClassification"),mmt.forEach(t),vBo=r(mxe," (XLNet model)"),mxe.forEach(t),FBo=i(j),j2=n(j,"LI",{});var gxe=s(j2);Wme=n(gxe,"STRONG",{});var gmt=s(Wme);TBo=r(gmt,"yoso"),gmt.forEach(t),MBo=r(gxe," \u2014 "),dO=n(gxe,"A",{href:!0});var hmt=s(dO);EBo=r(hmt,"YosoForSequenceClassification"),hmt.forEach(t),CBo=r(gxe," (YOSO model)"),gxe.forEach(t),j.forEach(t),wBo=i(la),D2=n(la,"P",{});var hxe=s(D2);ABo=r(hxe,"The model is set in evaluation mode by default using "),Qme=n(hxe,"CODE",{});var pmt=s(Qme);yBo=r(pmt,"model.eval()"),pmt.forEach(t),LBo=r(hxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hme=n(hxe,"CODE",{});var _mt=s(Hme);xBo=r(_mt,"model.train()"),_mt.forEach(t),hxe.forEach(t),$Bo=i(la),T(G2.$$.fragment,la),la.forEach(t),Ws.forEach(t),Vqe=i(f),Xi=n(f,"H2",{class:!0});var QDe=s(Xi);O2=n(QDe,"A",{id:!0,class:!0,href:!0});var umt=s(O2);Ume=n(umt,"SPAN",{});var bmt=s(Ume);T(Py.$$.fragment,bmt),bmt.forEach(t),umt.forEach(t),kBo=i(QDe),Jme=n(QDe,"SPAN",{});var vmt=s(Jme);SBo=r(vmt,"AutoModelForMultipleChoice"),vmt.forEach(t),QDe.forEach(t),Xqe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(By.$$.fragment,Qs),RBo=i(Qs),zi=n(Qs,"P",{});var NZ=s(zi);PBo=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cO=n(NZ,"A",{href:!0});var Fmt=s(cO);BBo=r(Fmt,"from_pretrained()"),Fmt.forEach(t),IBo=r(NZ," class method or the "),fO=n(NZ,"A",{href:!0});var Tmt=s(fO);NBo=r(Tmt,"from_config()"),Tmt.forEach(t),qBo=r(NZ,` class
method.`),NZ.forEach(t),jBo=i(Qs),Iy=n(Qs,"P",{});var HDe=s(Iy);DBo=r(HDe,"This class cannot be instantiated directly using "),Yme=n(HDe,"CODE",{});var Mmt=s(Yme);GBo=r(Mmt,"__init__()"),Mmt.forEach(t),OBo=r(HDe," (throws an error)."),HDe.forEach(t),VBo=i(Qs),ct=n(Qs,"DIV",{class:!0});var U0=s(ct);T(Ny.$$.fragment,U0),XBo=i(U0),Kme=n(U0,"P",{});var Emt=s(Kme);zBo=r(Emt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Emt.forEach(t),WBo=i(U0),Wi=n(U0,"P",{});var qZ=s(Wi);QBo=r(qZ,`Note:
Loading a model from its configuration file does `),Zme=n(qZ,"STRONG",{});var Cmt=s(Zme);HBo=r(Cmt,"not"),Cmt.forEach(t),UBo=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=n(qZ,"A",{href:!0});var wmt=s(mO);JBo=r(wmt,"from_pretrained()"),wmt.forEach(t),YBo=r(qZ," to load the model weights."),qZ.forEach(t),KBo=i(U0),T(V2.$$.fragment,U0),U0.forEach(t),ZBo=i(Qs),ro=n(Qs,"DIV",{class:!0});var ia=s(ro);T(qy.$$.fragment,ia),eIo=i(ia),ege=n(ia,"P",{});var Amt=s(ege);oIo=r(Amt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Amt.forEach(t),rIo=i(ia),Ba=n(ia,"P",{});var J0=s(Ba);tIo=r(J0,"The model class to instantiate is selected based on the "),oge=n(J0,"CODE",{});var ymt=s(oge);aIo=r(ymt,"model_type"),ymt.forEach(t),nIo=r(J0,` property of the config object (either
passed as an argument or loaded from `),rge=n(J0,"CODE",{});var Lmt=s(rge);sIo=r(Lmt,"pretrained_model_name_or_path"),Lmt.forEach(t),lIo=r(J0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tge=n(J0,"CODE",{});var xmt=s(tge);iIo=r(xmt,"pretrained_model_name_or_path"),xmt.forEach(t),dIo=r(J0,":"),J0.forEach(t),cIo=i(ia),K=n(ia,"UL",{});var ee=s(K);X2=n(ee,"LI",{});var pxe=s(X2);age=n(pxe,"STRONG",{});var $mt=s(age);fIo=r($mt,"albert"),$mt.forEach(t),mIo=r(pxe," \u2014 "),gO=n(pxe,"A",{href:!0});var kmt=s(gO);gIo=r(kmt,"AlbertForMultipleChoice"),kmt.forEach(t),hIo=r(pxe," (ALBERT model)"),pxe.forEach(t),pIo=i(ee),z2=n(ee,"LI",{});var _xe=s(z2);nge=n(_xe,"STRONG",{});var Smt=s(nge);_Io=r(Smt,"bert"),Smt.forEach(t),uIo=r(_xe," \u2014 "),hO=n(_xe,"A",{href:!0});var Rmt=s(hO);bIo=r(Rmt,"BertForMultipleChoice"),Rmt.forEach(t),vIo=r(_xe," (BERT model)"),_xe.forEach(t),FIo=i(ee),W2=n(ee,"LI",{});var uxe=s(W2);sge=n(uxe,"STRONG",{});var Pmt=s(sge);TIo=r(Pmt,"big_bird"),Pmt.forEach(t),MIo=r(uxe," \u2014 "),pO=n(uxe,"A",{href:!0});var Bmt=s(pO);EIo=r(Bmt,"BigBirdForMultipleChoice"),Bmt.forEach(t),CIo=r(uxe," (BigBird model)"),uxe.forEach(t),wIo=i(ee),Q2=n(ee,"LI",{});var bxe=s(Q2);lge=n(bxe,"STRONG",{});var Imt=s(lge);AIo=r(Imt,"camembert"),Imt.forEach(t),yIo=r(bxe," \u2014 "),_O=n(bxe,"A",{href:!0});var Nmt=s(_O);LIo=r(Nmt,"CamembertForMultipleChoice"),Nmt.forEach(t),xIo=r(bxe," (CamemBERT model)"),bxe.forEach(t),$Io=i(ee),H2=n(ee,"LI",{});var vxe=s(H2);ige=n(vxe,"STRONG",{});var qmt=s(ige);kIo=r(qmt,"canine"),qmt.forEach(t),SIo=r(vxe," \u2014 "),uO=n(vxe,"A",{href:!0});var jmt=s(uO);RIo=r(jmt,"CanineForMultipleChoice"),jmt.forEach(t),PIo=r(vxe," (Canine model)"),vxe.forEach(t),BIo=i(ee),U2=n(ee,"LI",{});var Fxe=s(U2);dge=n(Fxe,"STRONG",{});var Dmt=s(dge);IIo=r(Dmt,"convbert"),Dmt.forEach(t),NIo=r(Fxe," \u2014 "),bO=n(Fxe,"A",{href:!0});var Gmt=s(bO);qIo=r(Gmt,"ConvBertForMultipleChoice"),Gmt.forEach(t),jIo=r(Fxe," (ConvBERT model)"),Fxe.forEach(t),DIo=i(ee),J2=n(ee,"LI",{});var Txe=s(J2);cge=n(Txe,"STRONG",{});var Omt=s(cge);GIo=r(Omt,"data2vec-text"),Omt.forEach(t),OIo=r(Txe," \u2014 "),vO=n(Txe,"A",{href:!0});var Vmt=s(vO);VIo=r(Vmt,"Data2VecTextForMultipleChoice"),Vmt.forEach(t),XIo=r(Txe," (Data2VecText model)"),Txe.forEach(t),zIo=i(ee),Y2=n(ee,"LI",{});var Mxe=s(Y2);fge=n(Mxe,"STRONG",{});var Xmt=s(fge);WIo=r(Xmt,"deberta-v2"),Xmt.forEach(t),QIo=r(Mxe," \u2014 "),FO=n(Mxe,"A",{href:!0});var zmt=s(FO);HIo=r(zmt,"DebertaV2ForMultipleChoice"),zmt.forEach(t),UIo=r(Mxe," (DeBERTa-v2 model)"),Mxe.forEach(t),JIo=i(ee),K2=n(ee,"LI",{});var Exe=s(K2);mge=n(Exe,"STRONG",{});var Wmt=s(mge);YIo=r(Wmt,"distilbert"),Wmt.forEach(t),KIo=r(Exe," \u2014 "),TO=n(Exe,"A",{href:!0});var Qmt=s(TO);ZIo=r(Qmt,"DistilBertForMultipleChoice"),Qmt.forEach(t),eNo=r(Exe," (DistilBERT model)"),Exe.forEach(t),oNo=i(ee),Z2=n(ee,"LI",{});var Cxe=s(Z2);gge=n(Cxe,"STRONG",{});var Hmt=s(gge);rNo=r(Hmt,"electra"),Hmt.forEach(t),tNo=r(Cxe," \u2014 "),MO=n(Cxe,"A",{href:!0});var Umt=s(MO);aNo=r(Umt,"ElectraForMultipleChoice"),Umt.forEach(t),nNo=r(Cxe," (ELECTRA model)"),Cxe.forEach(t),sNo=i(ee),e4=n(ee,"LI",{});var wxe=s(e4);hge=n(wxe,"STRONG",{});var Jmt=s(hge);lNo=r(Jmt,"flaubert"),Jmt.forEach(t),iNo=r(wxe," \u2014 "),EO=n(wxe,"A",{href:!0});var Ymt=s(EO);dNo=r(Ymt,"FlaubertForMultipleChoice"),Ymt.forEach(t),cNo=r(wxe," (FlauBERT model)"),wxe.forEach(t),fNo=i(ee),o4=n(ee,"LI",{});var Axe=s(o4);pge=n(Axe,"STRONG",{});var Kmt=s(pge);mNo=r(Kmt,"fnet"),Kmt.forEach(t),gNo=r(Axe," \u2014 "),CO=n(Axe,"A",{href:!0});var Zmt=s(CO);hNo=r(Zmt,"FNetForMultipleChoice"),Zmt.forEach(t),pNo=r(Axe," (FNet model)"),Axe.forEach(t),_No=i(ee),r4=n(ee,"LI",{});var yxe=s(r4);_ge=n(yxe,"STRONG",{});var egt=s(_ge);uNo=r(egt,"funnel"),egt.forEach(t),bNo=r(yxe," \u2014 "),wO=n(yxe,"A",{href:!0});var ogt=s(wO);vNo=r(ogt,"FunnelForMultipleChoice"),ogt.forEach(t),FNo=r(yxe," (Funnel Transformer model)"),yxe.forEach(t),TNo=i(ee),t4=n(ee,"LI",{});var Lxe=s(t4);uge=n(Lxe,"STRONG",{});var rgt=s(uge);MNo=r(rgt,"ibert"),rgt.forEach(t),ENo=r(Lxe," \u2014 "),AO=n(Lxe,"A",{href:!0});var tgt=s(AO);CNo=r(tgt,"IBertForMultipleChoice"),tgt.forEach(t),wNo=r(Lxe," (I-BERT model)"),Lxe.forEach(t),ANo=i(ee),a4=n(ee,"LI",{});var xxe=s(a4);bge=n(xxe,"STRONG",{});var agt=s(bge);yNo=r(agt,"longformer"),agt.forEach(t),LNo=r(xxe," \u2014 "),yO=n(xxe,"A",{href:!0});var ngt=s(yO);xNo=r(ngt,"LongformerForMultipleChoice"),ngt.forEach(t),$No=r(xxe," (Longformer model)"),xxe.forEach(t),kNo=i(ee),n4=n(ee,"LI",{});var $xe=s(n4);vge=n($xe,"STRONG",{});var sgt=s(vge);SNo=r(sgt,"megatron-bert"),sgt.forEach(t),RNo=r($xe," \u2014 "),LO=n($xe,"A",{href:!0});var lgt=s(LO);PNo=r(lgt,"MegatronBertForMultipleChoice"),lgt.forEach(t),BNo=r($xe," (MegatronBert model)"),$xe.forEach(t),INo=i(ee),s4=n(ee,"LI",{});var kxe=s(s4);Fge=n(kxe,"STRONG",{});var igt=s(Fge);NNo=r(igt,"mobilebert"),igt.forEach(t),qNo=r(kxe," \u2014 "),xO=n(kxe,"A",{href:!0});var dgt=s(xO);jNo=r(dgt,"MobileBertForMultipleChoice"),dgt.forEach(t),DNo=r(kxe," (MobileBERT model)"),kxe.forEach(t),GNo=i(ee),l4=n(ee,"LI",{});var Sxe=s(l4);Tge=n(Sxe,"STRONG",{});var cgt=s(Tge);ONo=r(cgt,"mpnet"),cgt.forEach(t),VNo=r(Sxe," \u2014 "),$O=n(Sxe,"A",{href:!0});var fgt=s($O);XNo=r(fgt,"MPNetForMultipleChoice"),fgt.forEach(t),zNo=r(Sxe," (MPNet model)"),Sxe.forEach(t),WNo=i(ee),i4=n(ee,"LI",{});var Rxe=s(i4);Mge=n(Rxe,"STRONG",{});var mgt=s(Mge);QNo=r(mgt,"nystromformer"),mgt.forEach(t),HNo=r(Rxe," \u2014 "),kO=n(Rxe,"A",{href:!0});var ggt=s(kO);UNo=r(ggt,"NystromformerForMultipleChoice"),ggt.forEach(t),JNo=r(Rxe," (Nystromformer model)"),Rxe.forEach(t),YNo=i(ee),d4=n(ee,"LI",{});var Pxe=s(d4);Ege=n(Pxe,"STRONG",{});var hgt=s(Ege);KNo=r(hgt,"qdqbert"),hgt.forEach(t),ZNo=r(Pxe," \u2014 "),SO=n(Pxe,"A",{href:!0});var pgt=s(SO);eqo=r(pgt,"QDQBertForMultipleChoice"),pgt.forEach(t),oqo=r(Pxe," (QDQBert model)"),Pxe.forEach(t),rqo=i(ee),c4=n(ee,"LI",{});var Bxe=s(c4);Cge=n(Bxe,"STRONG",{});var _gt=s(Cge);tqo=r(_gt,"rembert"),_gt.forEach(t),aqo=r(Bxe," \u2014 "),RO=n(Bxe,"A",{href:!0});var ugt=s(RO);nqo=r(ugt,"RemBertForMultipleChoice"),ugt.forEach(t),sqo=r(Bxe," (RemBERT model)"),Bxe.forEach(t),lqo=i(ee),f4=n(ee,"LI",{});var Ixe=s(f4);wge=n(Ixe,"STRONG",{});var bgt=s(wge);iqo=r(bgt,"roberta"),bgt.forEach(t),dqo=r(Ixe," \u2014 "),PO=n(Ixe,"A",{href:!0});var vgt=s(PO);cqo=r(vgt,"RobertaForMultipleChoice"),vgt.forEach(t),fqo=r(Ixe," (RoBERTa model)"),Ixe.forEach(t),mqo=i(ee),m4=n(ee,"LI",{});var Nxe=s(m4);Age=n(Nxe,"STRONG",{});var Fgt=s(Age);gqo=r(Fgt,"roformer"),Fgt.forEach(t),hqo=r(Nxe," \u2014 "),BO=n(Nxe,"A",{href:!0});var Tgt=s(BO);pqo=r(Tgt,"RoFormerForMultipleChoice"),Tgt.forEach(t),_qo=r(Nxe," (RoFormer model)"),Nxe.forEach(t),uqo=i(ee),g4=n(ee,"LI",{});var qxe=s(g4);yge=n(qxe,"STRONG",{});var Mgt=s(yge);bqo=r(Mgt,"squeezebert"),Mgt.forEach(t),vqo=r(qxe," \u2014 "),IO=n(qxe,"A",{href:!0});var Egt=s(IO);Fqo=r(Egt,"SqueezeBertForMultipleChoice"),Egt.forEach(t),Tqo=r(qxe," (SqueezeBERT model)"),qxe.forEach(t),Mqo=i(ee),h4=n(ee,"LI",{});var jxe=s(h4);Lge=n(jxe,"STRONG",{});var Cgt=s(Lge);Eqo=r(Cgt,"xlm"),Cgt.forEach(t),Cqo=r(jxe," \u2014 "),NO=n(jxe,"A",{href:!0});var wgt=s(NO);wqo=r(wgt,"XLMForMultipleChoice"),wgt.forEach(t),Aqo=r(jxe," (XLM model)"),jxe.forEach(t),yqo=i(ee),p4=n(ee,"LI",{});var Dxe=s(p4);xge=n(Dxe,"STRONG",{});var Agt=s(xge);Lqo=r(Agt,"xlm-roberta"),Agt.forEach(t),xqo=r(Dxe," \u2014 "),qO=n(Dxe,"A",{href:!0});var ygt=s(qO);$qo=r(ygt,"XLMRobertaForMultipleChoice"),ygt.forEach(t),kqo=r(Dxe," (XLM-RoBERTa model)"),Dxe.forEach(t),Sqo=i(ee),_4=n(ee,"LI",{});var Gxe=s(_4);$ge=n(Gxe,"STRONG",{});var Lgt=s($ge);Rqo=r(Lgt,"xlm-roberta-xl"),Lgt.forEach(t),Pqo=r(Gxe," \u2014 "),jO=n(Gxe,"A",{href:!0});var xgt=s(jO);Bqo=r(xgt,"XLMRobertaXLForMultipleChoice"),xgt.forEach(t),Iqo=r(Gxe," (XLM-RoBERTa-XL model)"),Gxe.forEach(t),Nqo=i(ee),u4=n(ee,"LI",{});var Oxe=s(u4);kge=n(Oxe,"STRONG",{});var $gt=s(kge);qqo=r($gt,"xlnet"),$gt.forEach(t),jqo=r(Oxe," \u2014 "),DO=n(Oxe,"A",{href:!0});var kgt=s(DO);Dqo=r(kgt,"XLNetForMultipleChoice"),kgt.forEach(t),Gqo=r(Oxe," (XLNet model)"),Oxe.forEach(t),Oqo=i(ee),b4=n(ee,"LI",{});var Vxe=s(b4);Sge=n(Vxe,"STRONG",{});var Sgt=s(Sge);Vqo=r(Sgt,"yoso"),Sgt.forEach(t),Xqo=r(Vxe," \u2014 "),GO=n(Vxe,"A",{href:!0});var Rgt=s(GO);zqo=r(Rgt,"YosoForMultipleChoice"),Rgt.forEach(t),Wqo=r(Vxe," (YOSO model)"),Vxe.forEach(t),ee.forEach(t),Qqo=i(ia),v4=n(ia,"P",{});var Xxe=s(v4);Hqo=r(Xxe,"The model is set in evaluation mode by default using "),Rge=n(Xxe,"CODE",{});var Pgt=s(Rge);Uqo=r(Pgt,"model.eval()"),Pgt.forEach(t),Jqo=r(Xxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pge=n(Xxe,"CODE",{});var Bgt=s(Pge);Yqo=r(Bgt,"model.train()"),Bgt.forEach(t),Xxe.forEach(t),Kqo=i(ia),T(F4.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),zqe=i(f),Qi=n(f,"H2",{class:!0});var UDe=s(Qi);T4=n(UDe,"A",{id:!0,class:!0,href:!0});var Igt=s(T4);Bge=n(Igt,"SPAN",{});var Ngt=s(Bge);T(jy.$$.fragment,Ngt),Ngt.forEach(t),Igt.forEach(t),Zqo=i(UDe),Ige=n(UDe,"SPAN",{});var qgt=s(Ige);ejo=r(qgt,"AutoModelForNextSentencePrediction"),qgt.forEach(t),UDe.forEach(t),Wqe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(Dy.$$.fragment,Hs),ojo=i(Hs),Hi=n(Hs,"P",{});var jZ=s(Hi);rjo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OO=n(jZ,"A",{href:!0});var jgt=s(OO);tjo=r(jgt,"from_pretrained()"),jgt.forEach(t),ajo=r(jZ," class method or the "),VO=n(jZ,"A",{href:!0});var Dgt=s(VO);njo=r(Dgt,"from_config()"),Dgt.forEach(t),sjo=r(jZ,` class
method.`),jZ.forEach(t),ljo=i(Hs),Gy=n(Hs,"P",{});var JDe=s(Gy);ijo=r(JDe,"This class cannot be instantiated directly using "),Nge=n(JDe,"CODE",{});var Ggt=s(Nge);djo=r(Ggt,"__init__()"),Ggt.forEach(t),cjo=r(JDe," (throws an error)."),JDe.forEach(t),fjo=i(Hs),ft=n(Hs,"DIV",{class:!0});var Y0=s(ft);T(Oy.$$.fragment,Y0),mjo=i(Y0),qge=n(Y0,"P",{});var Ogt=s(qge);gjo=r(Ogt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ogt.forEach(t),hjo=i(Y0),Ui=n(Y0,"P",{});var DZ=s(Ui);pjo=r(DZ,`Note:
Loading a model from its configuration file does `),jge=n(DZ,"STRONG",{});var Vgt=s(jge);_jo=r(Vgt,"not"),Vgt.forEach(t),ujo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XO=n(DZ,"A",{href:!0});var Xgt=s(XO);bjo=r(Xgt,"from_pretrained()"),Xgt.forEach(t),vjo=r(DZ," to load the model weights."),DZ.forEach(t),Fjo=i(Y0),T(M4.$$.fragment,Y0),Y0.forEach(t),Tjo=i(Hs),to=n(Hs,"DIV",{class:!0});var da=s(to);T(Vy.$$.fragment,da),Mjo=i(da),Dge=n(da,"P",{});var zgt=s(Dge);Ejo=r(zgt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),zgt.forEach(t),Cjo=i(da),Ia=n(da,"P",{});var K0=s(Ia);wjo=r(K0,"The model class to instantiate is selected based on the "),Gge=n(K0,"CODE",{});var Wgt=s(Gge);Ajo=r(Wgt,"model_type"),Wgt.forEach(t),yjo=r(K0,` property of the config object (either
passed as an argument or loaded from `),Oge=n(K0,"CODE",{});var Qgt=s(Oge);Ljo=r(Qgt,"pretrained_model_name_or_path"),Qgt.forEach(t),xjo=r(K0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vge=n(K0,"CODE",{});var Hgt=s(Vge);$jo=r(Hgt,"pretrained_model_name_or_path"),Hgt.forEach(t),kjo=r(K0,":"),K0.forEach(t),Sjo=i(da),Yr=n(da,"UL",{});var Us=s(Yr);E4=n(Us,"LI",{});var zxe=s(E4);Xge=n(zxe,"STRONG",{});var Ugt=s(Xge);Rjo=r(Ugt,"bert"),Ugt.forEach(t),Pjo=r(zxe," \u2014 "),zO=n(zxe,"A",{href:!0});var Jgt=s(zO);Bjo=r(Jgt,"BertForNextSentencePrediction"),Jgt.forEach(t),Ijo=r(zxe," (BERT model)"),zxe.forEach(t),Njo=i(Us),C4=n(Us,"LI",{});var Wxe=s(C4);zge=n(Wxe,"STRONG",{});var Ygt=s(zge);qjo=r(Ygt,"fnet"),Ygt.forEach(t),jjo=r(Wxe," \u2014 "),WO=n(Wxe,"A",{href:!0});var Kgt=s(WO);Djo=r(Kgt,"FNetForNextSentencePrediction"),Kgt.forEach(t),Gjo=r(Wxe," (FNet model)"),Wxe.forEach(t),Ojo=i(Us),w4=n(Us,"LI",{});var Qxe=s(w4);Wge=n(Qxe,"STRONG",{});var Zgt=s(Wge);Vjo=r(Zgt,"megatron-bert"),Zgt.forEach(t),Xjo=r(Qxe," \u2014 "),QO=n(Qxe,"A",{href:!0});var eht=s(QO);zjo=r(eht,"MegatronBertForNextSentencePrediction"),eht.forEach(t),Wjo=r(Qxe," (MegatronBert model)"),Qxe.forEach(t),Qjo=i(Us),A4=n(Us,"LI",{});var Hxe=s(A4);Qge=n(Hxe,"STRONG",{});var oht=s(Qge);Hjo=r(oht,"mobilebert"),oht.forEach(t),Ujo=r(Hxe," \u2014 "),HO=n(Hxe,"A",{href:!0});var rht=s(HO);Jjo=r(rht,"MobileBertForNextSentencePrediction"),rht.forEach(t),Yjo=r(Hxe," (MobileBERT model)"),Hxe.forEach(t),Kjo=i(Us),y4=n(Us,"LI",{});var Uxe=s(y4);Hge=n(Uxe,"STRONG",{});var tht=s(Hge);Zjo=r(tht,"qdqbert"),tht.forEach(t),eDo=r(Uxe," \u2014 "),UO=n(Uxe,"A",{href:!0});var aht=s(UO);oDo=r(aht,"QDQBertForNextSentencePrediction"),aht.forEach(t),rDo=r(Uxe," (QDQBert model)"),Uxe.forEach(t),Us.forEach(t),tDo=i(da),L4=n(da,"P",{});var Jxe=s(L4);aDo=r(Jxe,"The model is set in evaluation mode by default using "),Uge=n(Jxe,"CODE",{});var nht=s(Uge);nDo=r(nht,"model.eval()"),nht.forEach(t),sDo=r(Jxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jge=n(Jxe,"CODE",{});var sht=s(Jge);lDo=r(sht,"model.train()"),sht.forEach(t),Jxe.forEach(t),iDo=i(da),T(x4.$$.fragment,da),da.forEach(t),Hs.forEach(t),Qqe=i(f),Ji=n(f,"H2",{class:!0});var YDe=s(Ji);$4=n(YDe,"A",{id:!0,class:!0,href:!0});var lht=s($4);Yge=n(lht,"SPAN",{});var iht=s(Yge);T(Xy.$$.fragment,iht),iht.forEach(t),lht.forEach(t),dDo=i(YDe),Kge=n(YDe,"SPAN",{});var dht=s(Kge);cDo=r(dht,"AutoModelForTokenClassification"),dht.forEach(t),YDe.forEach(t),Hqe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(zy.$$.fragment,Js),fDo=i(Js),Yi=n(Js,"P",{});var GZ=s(Yi);mDo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),JO=n(GZ,"A",{href:!0});var cht=s(JO);gDo=r(cht,"from_pretrained()"),cht.forEach(t),hDo=r(GZ," class method or the "),YO=n(GZ,"A",{href:!0});var fht=s(YO);pDo=r(fht,"from_config()"),fht.forEach(t),_Do=r(GZ,` class
method.`),GZ.forEach(t),uDo=i(Js),Wy=n(Js,"P",{});var KDe=s(Wy);bDo=r(KDe,"This class cannot be instantiated directly using "),Zge=n(KDe,"CODE",{});var mht=s(Zge);vDo=r(mht,"__init__()"),mht.forEach(t),FDo=r(KDe," (throws an error)."),KDe.forEach(t),TDo=i(Js),mt=n(Js,"DIV",{class:!0});var Z0=s(mt);T(Qy.$$.fragment,Z0),MDo=i(Z0),ehe=n(Z0,"P",{});var ght=s(ehe);EDo=r(ght,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ght.forEach(t),CDo=i(Z0),Ki=n(Z0,"P",{});var OZ=s(Ki);wDo=r(OZ,`Note:
Loading a model from its configuration file does `),ohe=n(OZ,"STRONG",{});var hht=s(ohe);ADo=r(hht,"not"),hht.forEach(t),yDo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KO=n(OZ,"A",{href:!0});var pht=s(KO);LDo=r(pht,"from_pretrained()"),pht.forEach(t),xDo=r(OZ," to load the model weights."),OZ.forEach(t),$Do=i(Z0),T(k4.$$.fragment,Z0),Z0.forEach(t),kDo=i(Js),ao=n(Js,"DIV",{class:!0});var ca=s(ao);T(Hy.$$.fragment,ca),SDo=i(ca),rhe=n(ca,"P",{});var _ht=s(rhe);RDo=r(_ht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_ht.forEach(t),PDo=i(ca),Na=n(ca,"P",{});var e6=s(Na);BDo=r(e6,"The model class to instantiate is selected based on the "),the=n(e6,"CODE",{});var uht=s(the);IDo=r(uht,"model_type"),uht.forEach(t),NDo=r(e6,` property of the config object (either
passed as an argument or loaded from `),ahe=n(e6,"CODE",{});var bht=s(ahe);qDo=r(bht,"pretrained_model_name_or_path"),bht.forEach(t),jDo=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=n(e6,"CODE",{});var vht=s(nhe);DDo=r(vht,"pretrained_model_name_or_path"),vht.forEach(t),GDo=r(e6,":"),e6.forEach(t),ODo=i(ca),H=n(ca,"UL",{});var J=s(H);S4=n(J,"LI",{});var Yxe=s(S4);she=n(Yxe,"STRONG",{});var Fht=s(she);VDo=r(Fht,"albert"),Fht.forEach(t),XDo=r(Yxe," \u2014 "),ZO=n(Yxe,"A",{href:!0});var Tht=s(ZO);zDo=r(Tht,"AlbertForTokenClassification"),Tht.forEach(t),WDo=r(Yxe," (ALBERT model)"),Yxe.forEach(t),QDo=i(J),R4=n(J,"LI",{});var Kxe=s(R4);lhe=n(Kxe,"STRONG",{});var Mht=s(lhe);HDo=r(Mht,"bert"),Mht.forEach(t),UDo=r(Kxe," \u2014 "),eV=n(Kxe,"A",{href:!0});var Eht=s(eV);JDo=r(Eht,"BertForTokenClassification"),Eht.forEach(t),YDo=r(Kxe," (BERT model)"),Kxe.forEach(t),KDo=i(J),P4=n(J,"LI",{});var Zxe=s(P4);ihe=n(Zxe,"STRONG",{});var Cht=s(ihe);ZDo=r(Cht,"big_bird"),Cht.forEach(t),eGo=r(Zxe," \u2014 "),oV=n(Zxe,"A",{href:!0});var wht=s(oV);oGo=r(wht,"BigBirdForTokenClassification"),wht.forEach(t),rGo=r(Zxe," (BigBird model)"),Zxe.forEach(t),tGo=i(J),B4=n(J,"LI",{});var e$e=s(B4);dhe=n(e$e,"STRONG",{});var Aht=s(dhe);aGo=r(Aht,"camembert"),Aht.forEach(t),nGo=r(e$e," \u2014 "),rV=n(e$e,"A",{href:!0});var yht=s(rV);sGo=r(yht,"CamembertForTokenClassification"),yht.forEach(t),lGo=r(e$e," (CamemBERT model)"),e$e.forEach(t),iGo=i(J),I4=n(J,"LI",{});var o$e=s(I4);che=n(o$e,"STRONG",{});var Lht=s(che);dGo=r(Lht,"canine"),Lht.forEach(t),cGo=r(o$e," \u2014 "),tV=n(o$e,"A",{href:!0});var xht=s(tV);fGo=r(xht,"CanineForTokenClassification"),xht.forEach(t),mGo=r(o$e," (Canine model)"),o$e.forEach(t),gGo=i(J),N4=n(J,"LI",{});var r$e=s(N4);fhe=n(r$e,"STRONG",{});var $ht=s(fhe);hGo=r($ht,"convbert"),$ht.forEach(t),pGo=r(r$e," \u2014 "),aV=n(r$e,"A",{href:!0});var kht=s(aV);_Go=r(kht,"ConvBertForTokenClassification"),kht.forEach(t),uGo=r(r$e," (ConvBERT model)"),r$e.forEach(t),bGo=i(J),q4=n(J,"LI",{});var t$e=s(q4);mhe=n(t$e,"STRONG",{});var Sht=s(mhe);vGo=r(Sht,"data2vec-text"),Sht.forEach(t),FGo=r(t$e," \u2014 "),nV=n(t$e,"A",{href:!0});var Rht=s(nV);TGo=r(Rht,"Data2VecTextForTokenClassification"),Rht.forEach(t),MGo=r(t$e," (Data2VecText model)"),t$e.forEach(t),EGo=i(J),j4=n(J,"LI",{});var a$e=s(j4);ghe=n(a$e,"STRONG",{});var Pht=s(ghe);CGo=r(Pht,"deberta"),Pht.forEach(t),wGo=r(a$e," \u2014 "),sV=n(a$e,"A",{href:!0});var Bht=s(sV);AGo=r(Bht,"DebertaForTokenClassification"),Bht.forEach(t),yGo=r(a$e," (DeBERTa model)"),a$e.forEach(t),LGo=i(J),D4=n(J,"LI",{});var n$e=s(D4);hhe=n(n$e,"STRONG",{});var Iht=s(hhe);xGo=r(Iht,"deberta-v2"),Iht.forEach(t),$Go=r(n$e," \u2014 "),lV=n(n$e,"A",{href:!0});var Nht=s(lV);kGo=r(Nht,"DebertaV2ForTokenClassification"),Nht.forEach(t),SGo=r(n$e," (DeBERTa-v2 model)"),n$e.forEach(t),RGo=i(J),G4=n(J,"LI",{});var s$e=s(G4);phe=n(s$e,"STRONG",{});var qht=s(phe);PGo=r(qht,"distilbert"),qht.forEach(t),BGo=r(s$e," \u2014 "),iV=n(s$e,"A",{href:!0});var jht=s(iV);IGo=r(jht,"DistilBertForTokenClassification"),jht.forEach(t),NGo=r(s$e," (DistilBERT model)"),s$e.forEach(t),qGo=i(J),O4=n(J,"LI",{});var l$e=s(O4);_he=n(l$e,"STRONG",{});var Dht=s(_he);jGo=r(Dht,"electra"),Dht.forEach(t),DGo=r(l$e," \u2014 "),dV=n(l$e,"A",{href:!0});var Ght=s(dV);GGo=r(Ght,"ElectraForTokenClassification"),Ght.forEach(t),OGo=r(l$e," (ELECTRA model)"),l$e.forEach(t),VGo=i(J),V4=n(J,"LI",{});var i$e=s(V4);uhe=n(i$e,"STRONG",{});var Oht=s(uhe);XGo=r(Oht,"flaubert"),Oht.forEach(t),zGo=r(i$e," \u2014 "),cV=n(i$e,"A",{href:!0});var Vht=s(cV);WGo=r(Vht,"FlaubertForTokenClassification"),Vht.forEach(t),QGo=r(i$e," (FlauBERT model)"),i$e.forEach(t),HGo=i(J),X4=n(J,"LI",{});var d$e=s(X4);bhe=n(d$e,"STRONG",{});var Xht=s(bhe);UGo=r(Xht,"fnet"),Xht.forEach(t),JGo=r(d$e," \u2014 "),fV=n(d$e,"A",{href:!0});var zht=s(fV);YGo=r(zht,"FNetForTokenClassification"),zht.forEach(t),KGo=r(d$e," (FNet model)"),d$e.forEach(t),ZGo=i(J),z4=n(J,"LI",{});var c$e=s(z4);vhe=n(c$e,"STRONG",{});var Wht=s(vhe);eOo=r(Wht,"funnel"),Wht.forEach(t),oOo=r(c$e," \u2014 "),mV=n(c$e,"A",{href:!0});var Qht=s(mV);rOo=r(Qht,"FunnelForTokenClassification"),Qht.forEach(t),tOo=r(c$e," (Funnel Transformer model)"),c$e.forEach(t),aOo=i(J),W4=n(J,"LI",{});var f$e=s(W4);Fhe=n(f$e,"STRONG",{});var Hht=s(Fhe);nOo=r(Hht,"gpt2"),Hht.forEach(t),sOo=r(f$e," \u2014 "),gV=n(f$e,"A",{href:!0});var Uht=s(gV);lOo=r(Uht,"GPT2ForTokenClassification"),Uht.forEach(t),iOo=r(f$e," (OpenAI GPT-2 model)"),f$e.forEach(t),dOo=i(J),Q4=n(J,"LI",{});var m$e=s(Q4);The=n(m$e,"STRONG",{});var Jht=s(The);cOo=r(Jht,"ibert"),Jht.forEach(t),fOo=r(m$e," \u2014 "),hV=n(m$e,"A",{href:!0});var Yht=s(hV);mOo=r(Yht,"IBertForTokenClassification"),Yht.forEach(t),gOo=r(m$e," (I-BERT model)"),m$e.forEach(t),hOo=i(J),H4=n(J,"LI",{});var g$e=s(H4);Mhe=n(g$e,"STRONG",{});var Kht=s(Mhe);pOo=r(Kht,"layoutlm"),Kht.forEach(t),_Oo=r(g$e," \u2014 "),pV=n(g$e,"A",{href:!0});var Zht=s(pV);uOo=r(Zht,"LayoutLMForTokenClassification"),Zht.forEach(t),bOo=r(g$e," (LayoutLM model)"),g$e.forEach(t),vOo=i(J),U4=n(J,"LI",{});var h$e=s(U4);Ehe=n(h$e,"STRONG",{});var ept=s(Ehe);FOo=r(ept,"layoutlmv2"),ept.forEach(t),TOo=r(h$e," \u2014 "),_V=n(h$e,"A",{href:!0});var opt=s(_V);MOo=r(opt,"LayoutLMv2ForTokenClassification"),opt.forEach(t),EOo=r(h$e," (LayoutLMv2 model)"),h$e.forEach(t),COo=i(J),J4=n(J,"LI",{});var p$e=s(J4);Che=n(p$e,"STRONG",{});var rpt=s(Che);wOo=r(rpt,"layoutlmv3"),rpt.forEach(t),AOo=r(p$e," \u2014 "),uV=n(p$e,"A",{href:!0});var tpt=s(uV);yOo=r(tpt,"LayoutLMv3ForTokenClassification"),tpt.forEach(t),LOo=r(p$e," (LayoutLMv3 model)"),p$e.forEach(t),xOo=i(J),Y4=n(J,"LI",{});var _$e=s(Y4);whe=n(_$e,"STRONG",{});var apt=s(whe);$Oo=r(apt,"longformer"),apt.forEach(t),kOo=r(_$e," \u2014 "),bV=n(_$e,"A",{href:!0});var npt=s(bV);SOo=r(npt,"LongformerForTokenClassification"),npt.forEach(t),ROo=r(_$e," (Longformer model)"),_$e.forEach(t),POo=i(J),K4=n(J,"LI",{});var u$e=s(K4);Ahe=n(u$e,"STRONG",{});var spt=s(Ahe);BOo=r(spt,"megatron-bert"),spt.forEach(t),IOo=r(u$e," \u2014 "),vV=n(u$e,"A",{href:!0});var lpt=s(vV);NOo=r(lpt,"MegatronBertForTokenClassification"),lpt.forEach(t),qOo=r(u$e," (MegatronBert model)"),u$e.forEach(t),jOo=i(J),Z4=n(J,"LI",{});var b$e=s(Z4);yhe=n(b$e,"STRONG",{});var ipt=s(yhe);DOo=r(ipt,"mobilebert"),ipt.forEach(t),GOo=r(b$e," \u2014 "),FV=n(b$e,"A",{href:!0});var dpt=s(FV);OOo=r(dpt,"MobileBertForTokenClassification"),dpt.forEach(t),VOo=r(b$e," (MobileBERT model)"),b$e.forEach(t),XOo=i(J),ev=n(J,"LI",{});var v$e=s(ev);Lhe=n(v$e,"STRONG",{});var cpt=s(Lhe);zOo=r(cpt,"mpnet"),cpt.forEach(t),WOo=r(v$e," \u2014 "),TV=n(v$e,"A",{href:!0});var fpt=s(TV);QOo=r(fpt,"MPNetForTokenClassification"),fpt.forEach(t),HOo=r(v$e," (MPNet model)"),v$e.forEach(t),UOo=i(J),ov=n(J,"LI",{});var F$e=s(ov);xhe=n(F$e,"STRONG",{});var mpt=s(xhe);JOo=r(mpt,"nystromformer"),mpt.forEach(t),YOo=r(F$e," \u2014 "),MV=n(F$e,"A",{href:!0});var gpt=s(MV);KOo=r(gpt,"NystromformerForTokenClassification"),gpt.forEach(t),ZOo=r(F$e," (Nystromformer model)"),F$e.forEach(t),eVo=i(J),rv=n(J,"LI",{});var T$e=s(rv);$he=n(T$e,"STRONG",{});var hpt=s($he);oVo=r(hpt,"qdqbert"),hpt.forEach(t),rVo=r(T$e," \u2014 "),EV=n(T$e,"A",{href:!0});var ppt=s(EV);tVo=r(ppt,"QDQBertForTokenClassification"),ppt.forEach(t),aVo=r(T$e," (QDQBert model)"),T$e.forEach(t),nVo=i(J),tv=n(J,"LI",{});var M$e=s(tv);khe=n(M$e,"STRONG",{});var _pt=s(khe);sVo=r(_pt,"rembert"),_pt.forEach(t),lVo=r(M$e," \u2014 "),CV=n(M$e,"A",{href:!0});var upt=s(CV);iVo=r(upt,"RemBertForTokenClassification"),upt.forEach(t),dVo=r(M$e," (RemBERT model)"),M$e.forEach(t),cVo=i(J),av=n(J,"LI",{});var E$e=s(av);She=n(E$e,"STRONG",{});var bpt=s(She);fVo=r(bpt,"roberta"),bpt.forEach(t),mVo=r(E$e," \u2014 "),wV=n(E$e,"A",{href:!0});var vpt=s(wV);gVo=r(vpt,"RobertaForTokenClassification"),vpt.forEach(t),hVo=r(E$e," (RoBERTa model)"),E$e.forEach(t),pVo=i(J),nv=n(J,"LI",{});var C$e=s(nv);Rhe=n(C$e,"STRONG",{});var Fpt=s(Rhe);_Vo=r(Fpt,"roformer"),Fpt.forEach(t),uVo=r(C$e," \u2014 "),AV=n(C$e,"A",{href:!0});var Tpt=s(AV);bVo=r(Tpt,"RoFormerForTokenClassification"),Tpt.forEach(t),vVo=r(C$e," (RoFormer model)"),C$e.forEach(t),FVo=i(J),sv=n(J,"LI",{});var w$e=s(sv);Phe=n(w$e,"STRONG",{});var Mpt=s(Phe);TVo=r(Mpt,"squeezebert"),Mpt.forEach(t),MVo=r(w$e," \u2014 "),yV=n(w$e,"A",{href:!0});var Ept=s(yV);EVo=r(Ept,"SqueezeBertForTokenClassification"),Ept.forEach(t),CVo=r(w$e," (SqueezeBERT model)"),w$e.forEach(t),wVo=i(J),lv=n(J,"LI",{});var A$e=s(lv);Bhe=n(A$e,"STRONG",{});var Cpt=s(Bhe);AVo=r(Cpt,"xlm"),Cpt.forEach(t),yVo=r(A$e," \u2014 "),LV=n(A$e,"A",{href:!0});var wpt=s(LV);LVo=r(wpt,"XLMForTokenClassification"),wpt.forEach(t),xVo=r(A$e," (XLM model)"),A$e.forEach(t),$Vo=i(J),iv=n(J,"LI",{});var y$e=s(iv);Ihe=n(y$e,"STRONG",{});var Apt=s(Ihe);kVo=r(Apt,"xlm-roberta"),Apt.forEach(t),SVo=r(y$e," \u2014 "),xV=n(y$e,"A",{href:!0});var ypt=s(xV);RVo=r(ypt,"XLMRobertaForTokenClassification"),ypt.forEach(t),PVo=r(y$e," (XLM-RoBERTa model)"),y$e.forEach(t),BVo=i(J),dv=n(J,"LI",{});var L$e=s(dv);Nhe=n(L$e,"STRONG",{});var Lpt=s(Nhe);IVo=r(Lpt,"xlm-roberta-xl"),Lpt.forEach(t),NVo=r(L$e," \u2014 "),$V=n(L$e,"A",{href:!0});var xpt=s($V);qVo=r(xpt,"XLMRobertaXLForTokenClassification"),xpt.forEach(t),jVo=r(L$e," (XLM-RoBERTa-XL model)"),L$e.forEach(t),DVo=i(J),cv=n(J,"LI",{});var x$e=s(cv);qhe=n(x$e,"STRONG",{});var $pt=s(qhe);GVo=r($pt,"xlnet"),$pt.forEach(t),OVo=r(x$e," \u2014 "),kV=n(x$e,"A",{href:!0});var kpt=s(kV);VVo=r(kpt,"XLNetForTokenClassification"),kpt.forEach(t),XVo=r(x$e," (XLNet model)"),x$e.forEach(t),zVo=i(J),fv=n(J,"LI",{});var $$e=s(fv);jhe=n($$e,"STRONG",{});var Spt=s(jhe);WVo=r(Spt,"yoso"),Spt.forEach(t),QVo=r($$e," \u2014 "),SV=n($$e,"A",{href:!0});var Rpt=s(SV);HVo=r(Rpt,"YosoForTokenClassification"),Rpt.forEach(t),UVo=r($$e," (YOSO model)"),$$e.forEach(t),J.forEach(t),JVo=i(ca),mv=n(ca,"P",{});var k$e=s(mv);YVo=r(k$e,"The model is set in evaluation mode by default using "),Dhe=n(k$e,"CODE",{});var Ppt=s(Dhe);KVo=r(Ppt,"model.eval()"),Ppt.forEach(t),ZVo=r(k$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=n(k$e,"CODE",{});var Bpt=s(Ghe);eXo=r(Bpt,"model.train()"),Bpt.forEach(t),k$e.forEach(t),oXo=i(ca),T(gv.$$.fragment,ca),ca.forEach(t),Js.forEach(t),Uqe=i(f),Zi=n(f,"H2",{class:!0});var ZDe=s(Zi);hv=n(ZDe,"A",{id:!0,class:!0,href:!0});var Ipt=s(hv);Ohe=n(Ipt,"SPAN",{});var Npt=s(Ohe);T(Uy.$$.fragment,Npt),Npt.forEach(t),Ipt.forEach(t),rXo=i(ZDe),Vhe=n(ZDe,"SPAN",{});var qpt=s(Vhe);tXo=r(qpt,"AutoModelForQuestionAnswering"),qpt.forEach(t),ZDe.forEach(t),Jqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(Jy.$$.fragment,Ys),aXo=i(Ys),ed=n(Ys,"P",{});var VZ=s(ed);nXo=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),RV=n(VZ,"A",{href:!0});var jpt=s(RV);sXo=r(jpt,"from_pretrained()"),jpt.forEach(t),lXo=r(VZ," class method or the "),PV=n(VZ,"A",{href:!0});var Dpt=s(PV);iXo=r(Dpt,"from_config()"),Dpt.forEach(t),dXo=r(VZ,` class
method.`),VZ.forEach(t),cXo=i(Ys),Yy=n(Ys,"P",{});var eGe=s(Yy);fXo=r(eGe,"This class cannot be instantiated directly using "),Xhe=n(eGe,"CODE",{});var Gpt=s(Xhe);mXo=r(Gpt,"__init__()"),Gpt.forEach(t),gXo=r(eGe," (throws an error)."),eGe.forEach(t),hXo=i(Ys),gt=n(Ys,"DIV",{class:!0});var o6=s(gt);T(Ky.$$.fragment,o6),pXo=i(o6),zhe=n(o6,"P",{});var Opt=s(zhe);_Xo=r(Opt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Opt.forEach(t),uXo=i(o6),od=n(o6,"P",{});var XZ=s(od);bXo=r(XZ,`Note:
Loading a model from its configuration file does `),Whe=n(XZ,"STRONG",{});var Vpt=s(Whe);vXo=r(Vpt,"not"),Vpt.forEach(t),FXo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=n(XZ,"A",{href:!0});var Xpt=s(BV);TXo=r(Xpt,"from_pretrained()"),Xpt.forEach(t),MXo=r(XZ," to load the model weights."),XZ.forEach(t),EXo=i(o6),T(pv.$$.fragment,o6),o6.forEach(t),CXo=i(Ys),no=n(Ys,"DIV",{class:!0});var fa=s(no);T(Zy.$$.fragment,fa),wXo=i(fa),Qhe=n(fa,"P",{});var zpt=s(Qhe);AXo=r(zpt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zpt.forEach(t),yXo=i(fa),qa=n(fa,"P",{});var r6=s(qa);LXo=r(r6,"The model class to instantiate is selected based on the "),Hhe=n(r6,"CODE",{});var Wpt=s(Hhe);xXo=r(Wpt,"model_type"),Wpt.forEach(t),$Xo=r(r6,` property of the config object (either
passed as an argument or loaded from `),Uhe=n(r6,"CODE",{});var Qpt=s(Uhe);kXo=r(Qpt,"pretrained_model_name_or_path"),Qpt.forEach(t),SXo=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=n(r6,"CODE",{});var Hpt=s(Jhe);RXo=r(Hpt,"pretrained_model_name_or_path"),Hpt.forEach(t),PXo=r(r6,":"),r6.forEach(t),BXo=i(fa),V=n(fa,"UL",{});var X=s(V);_v=n(X,"LI",{});var S$e=s(_v);Yhe=n(S$e,"STRONG",{});var Upt=s(Yhe);IXo=r(Upt,"albert"),Upt.forEach(t),NXo=r(S$e," \u2014 "),IV=n(S$e,"A",{href:!0});var Jpt=s(IV);qXo=r(Jpt,"AlbertForQuestionAnswering"),Jpt.forEach(t),jXo=r(S$e," (ALBERT model)"),S$e.forEach(t),DXo=i(X),uv=n(X,"LI",{});var R$e=s(uv);Khe=n(R$e,"STRONG",{});var Ypt=s(Khe);GXo=r(Ypt,"bart"),Ypt.forEach(t),OXo=r(R$e," \u2014 "),NV=n(R$e,"A",{href:!0});var Kpt=s(NV);VXo=r(Kpt,"BartForQuestionAnswering"),Kpt.forEach(t),XXo=r(R$e," (BART model)"),R$e.forEach(t),zXo=i(X),bv=n(X,"LI",{});var P$e=s(bv);Zhe=n(P$e,"STRONG",{});var Zpt=s(Zhe);WXo=r(Zpt,"bert"),Zpt.forEach(t),QXo=r(P$e," \u2014 "),qV=n(P$e,"A",{href:!0});var e_t=s(qV);HXo=r(e_t,"BertForQuestionAnswering"),e_t.forEach(t),UXo=r(P$e," (BERT model)"),P$e.forEach(t),JXo=i(X),vv=n(X,"LI",{});var B$e=s(vv);epe=n(B$e,"STRONG",{});var o_t=s(epe);YXo=r(o_t,"big_bird"),o_t.forEach(t),KXo=r(B$e," \u2014 "),jV=n(B$e,"A",{href:!0});var r_t=s(jV);ZXo=r(r_t,"BigBirdForQuestionAnswering"),r_t.forEach(t),ezo=r(B$e," (BigBird model)"),B$e.forEach(t),ozo=i(X),Fv=n(X,"LI",{});var I$e=s(Fv);ope=n(I$e,"STRONG",{});var t_t=s(ope);rzo=r(t_t,"bigbird_pegasus"),t_t.forEach(t),tzo=r(I$e," \u2014 "),DV=n(I$e,"A",{href:!0});var a_t=s(DV);azo=r(a_t,"BigBirdPegasusForQuestionAnswering"),a_t.forEach(t),nzo=r(I$e," (BigBirdPegasus model)"),I$e.forEach(t),szo=i(X),Tv=n(X,"LI",{});var N$e=s(Tv);rpe=n(N$e,"STRONG",{});var n_t=s(rpe);lzo=r(n_t,"camembert"),n_t.forEach(t),izo=r(N$e," \u2014 "),GV=n(N$e,"A",{href:!0});var s_t=s(GV);dzo=r(s_t,"CamembertForQuestionAnswering"),s_t.forEach(t),czo=r(N$e," (CamemBERT model)"),N$e.forEach(t),fzo=i(X),Mv=n(X,"LI",{});var q$e=s(Mv);tpe=n(q$e,"STRONG",{});var l_t=s(tpe);mzo=r(l_t,"canine"),l_t.forEach(t),gzo=r(q$e," \u2014 "),OV=n(q$e,"A",{href:!0});var i_t=s(OV);hzo=r(i_t,"CanineForQuestionAnswering"),i_t.forEach(t),pzo=r(q$e," (Canine model)"),q$e.forEach(t),_zo=i(X),Ev=n(X,"LI",{});var j$e=s(Ev);ape=n(j$e,"STRONG",{});var d_t=s(ape);uzo=r(d_t,"convbert"),d_t.forEach(t),bzo=r(j$e," \u2014 "),VV=n(j$e,"A",{href:!0});var c_t=s(VV);vzo=r(c_t,"ConvBertForQuestionAnswering"),c_t.forEach(t),Fzo=r(j$e," (ConvBERT model)"),j$e.forEach(t),Tzo=i(X),Cv=n(X,"LI",{});var D$e=s(Cv);npe=n(D$e,"STRONG",{});var f_t=s(npe);Mzo=r(f_t,"data2vec-text"),f_t.forEach(t),Ezo=r(D$e," \u2014 "),XV=n(D$e,"A",{href:!0});var m_t=s(XV);Czo=r(m_t,"Data2VecTextForQuestionAnswering"),m_t.forEach(t),wzo=r(D$e," (Data2VecText model)"),D$e.forEach(t),Azo=i(X),wv=n(X,"LI",{});var G$e=s(wv);spe=n(G$e,"STRONG",{});var g_t=s(spe);yzo=r(g_t,"deberta"),g_t.forEach(t),Lzo=r(G$e," \u2014 "),zV=n(G$e,"A",{href:!0});var h_t=s(zV);xzo=r(h_t,"DebertaForQuestionAnswering"),h_t.forEach(t),$zo=r(G$e," (DeBERTa model)"),G$e.forEach(t),kzo=i(X),Av=n(X,"LI",{});var O$e=s(Av);lpe=n(O$e,"STRONG",{});var p_t=s(lpe);Szo=r(p_t,"deberta-v2"),p_t.forEach(t),Rzo=r(O$e," \u2014 "),WV=n(O$e,"A",{href:!0});var __t=s(WV);Pzo=r(__t,"DebertaV2ForQuestionAnswering"),__t.forEach(t),Bzo=r(O$e," (DeBERTa-v2 model)"),O$e.forEach(t),Izo=i(X),yv=n(X,"LI",{});var V$e=s(yv);ipe=n(V$e,"STRONG",{});var u_t=s(ipe);Nzo=r(u_t,"distilbert"),u_t.forEach(t),qzo=r(V$e," \u2014 "),QV=n(V$e,"A",{href:!0});var b_t=s(QV);jzo=r(b_t,"DistilBertForQuestionAnswering"),b_t.forEach(t),Dzo=r(V$e," (DistilBERT model)"),V$e.forEach(t),Gzo=i(X),Lv=n(X,"LI",{});var X$e=s(Lv);dpe=n(X$e,"STRONG",{});var v_t=s(dpe);Ozo=r(v_t,"electra"),v_t.forEach(t),Vzo=r(X$e," \u2014 "),HV=n(X$e,"A",{href:!0});var F_t=s(HV);Xzo=r(F_t,"ElectraForQuestionAnswering"),F_t.forEach(t),zzo=r(X$e," (ELECTRA model)"),X$e.forEach(t),Wzo=i(X),xv=n(X,"LI",{});var z$e=s(xv);cpe=n(z$e,"STRONG",{});var T_t=s(cpe);Qzo=r(T_t,"flaubert"),T_t.forEach(t),Hzo=r(z$e," \u2014 "),UV=n(z$e,"A",{href:!0});var M_t=s(UV);Uzo=r(M_t,"FlaubertForQuestionAnsweringSimple"),M_t.forEach(t),Jzo=r(z$e," (FlauBERT model)"),z$e.forEach(t),Yzo=i(X),$v=n(X,"LI",{});var W$e=s($v);fpe=n(W$e,"STRONG",{});var E_t=s(fpe);Kzo=r(E_t,"fnet"),E_t.forEach(t),Zzo=r(W$e," \u2014 "),JV=n(W$e,"A",{href:!0});var C_t=s(JV);eWo=r(C_t,"FNetForQuestionAnswering"),C_t.forEach(t),oWo=r(W$e," (FNet model)"),W$e.forEach(t),rWo=i(X),kv=n(X,"LI",{});var Q$e=s(kv);mpe=n(Q$e,"STRONG",{});var w_t=s(mpe);tWo=r(w_t,"funnel"),w_t.forEach(t),aWo=r(Q$e," \u2014 "),YV=n(Q$e,"A",{href:!0});var A_t=s(YV);nWo=r(A_t,"FunnelForQuestionAnswering"),A_t.forEach(t),sWo=r(Q$e," (Funnel Transformer model)"),Q$e.forEach(t),lWo=i(X),Sv=n(X,"LI",{});var H$e=s(Sv);gpe=n(H$e,"STRONG",{});var y_t=s(gpe);iWo=r(y_t,"gptj"),y_t.forEach(t),dWo=r(H$e," \u2014 "),KV=n(H$e,"A",{href:!0});var L_t=s(KV);cWo=r(L_t,"GPTJForQuestionAnswering"),L_t.forEach(t),fWo=r(H$e," (GPT-J model)"),H$e.forEach(t),mWo=i(X),Rv=n(X,"LI",{});var U$e=s(Rv);hpe=n(U$e,"STRONG",{});var x_t=s(hpe);gWo=r(x_t,"ibert"),x_t.forEach(t),hWo=r(U$e," \u2014 "),ZV=n(U$e,"A",{href:!0});var $_t=s(ZV);pWo=r($_t,"IBertForQuestionAnswering"),$_t.forEach(t),_Wo=r(U$e," (I-BERT model)"),U$e.forEach(t),uWo=i(X),Pv=n(X,"LI",{});var J$e=s(Pv);ppe=n(J$e,"STRONG",{});var k_t=s(ppe);bWo=r(k_t,"layoutlmv2"),k_t.forEach(t),vWo=r(J$e," \u2014 "),eX=n(J$e,"A",{href:!0});var S_t=s(eX);FWo=r(S_t,"LayoutLMv2ForQuestionAnswering"),S_t.forEach(t),TWo=r(J$e," (LayoutLMv2 model)"),J$e.forEach(t),MWo=i(X),Bv=n(X,"LI",{});var Y$e=s(Bv);_pe=n(Y$e,"STRONG",{});var R_t=s(_pe);EWo=r(R_t,"layoutlmv3"),R_t.forEach(t),CWo=r(Y$e," \u2014 "),oX=n(Y$e,"A",{href:!0});var P_t=s(oX);wWo=r(P_t,"LayoutLMv3ForQuestionAnswering"),P_t.forEach(t),AWo=r(Y$e," (LayoutLMv3 model)"),Y$e.forEach(t),yWo=i(X),Iv=n(X,"LI",{});var K$e=s(Iv);upe=n(K$e,"STRONG",{});var B_t=s(upe);LWo=r(B_t,"led"),B_t.forEach(t),xWo=r(K$e," \u2014 "),rX=n(K$e,"A",{href:!0});var I_t=s(rX);$Wo=r(I_t,"LEDForQuestionAnswering"),I_t.forEach(t),kWo=r(K$e," (LED model)"),K$e.forEach(t),SWo=i(X),Nv=n(X,"LI",{});var Z$e=s(Nv);bpe=n(Z$e,"STRONG",{});var N_t=s(bpe);RWo=r(N_t,"longformer"),N_t.forEach(t),PWo=r(Z$e," \u2014 "),tX=n(Z$e,"A",{href:!0});var q_t=s(tX);BWo=r(q_t,"LongformerForQuestionAnswering"),q_t.forEach(t),IWo=r(Z$e," (Longformer model)"),Z$e.forEach(t),NWo=i(X),qv=n(X,"LI",{});var eke=s(qv);vpe=n(eke,"STRONG",{});var j_t=s(vpe);qWo=r(j_t,"lxmert"),j_t.forEach(t),jWo=r(eke," \u2014 "),aX=n(eke,"A",{href:!0});var D_t=s(aX);DWo=r(D_t,"LxmertForQuestionAnswering"),D_t.forEach(t),GWo=r(eke," (LXMERT model)"),eke.forEach(t),OWo=i(X),jv=n(X,"LI",{});var oke=s(jv);Fpe=n(oke,"STRONG",{});var G_t=s(Fpe);VWo=r(G_t,"mbart"),G_t.forEach(t),XWo=r(oke," \u2014 "),nX=n(oke,"A",{href:!0});var O_t=s(nX);zWo=r(O_t,"MBartForQuestionAnswering"),O_t.forEach(t),WWo=r(oke," (mBART model)"),oke.forEach(t),QWo=i(X),Dv=n(X,"LI",{});var rke=s(Dv);Tpe=n(rke,"STRONG",{});var V_t=s(Tpe);HWo=r(V_t,"megatron-bert"),V_t.forEach(t),UWo=r(rke," \u2014 "),sX=n(rke,"A",{href:!0});var X_t=s(sX);JWo=r(X_t,"MegatronBertForQuestionAnswering"),X_t.forEach(t),YWo=r(rke," (MegatronBert model)"),rke.forEach(t),KWo=i(X),Gv=n(X,"LI",{});var tke=s(Gv);Mpe=n(tke,"STRONG",{});var z_t=s(Mpe);ZWo=r(z_t,"mobilebert"),z_t.forEach(t),eQo=r(tke," \u2014 "),lX=n(tke,"A",{href:!0});var W_t=s(lX);oQo=r(W_t,"MobileBertForQuestionAnswering"),W_t.forEach(t),rQo=r(tke," (MobileBERT model)"),tke.forEach(t),tQo=i(X),Ov=n(X,"LI",{});var ake=s(Ov);Epe=n(ake,"STRONG",{});var Q_t=s(Epe);aQo=r(Q_t,"mpnet"),Q_t.forEach(t),nQo=r(ake," \u2014 "),iX=n(ake,"A",{href:!0});var H_t=s(iX);sQo=r(H_t,"MPNetForQuestionAnswering"),H_t.forEach(t),lQo=r(ake," (MPNet model)"),ake.forEach(t),iQo=i(X),Vv=n(X,"LI",{});var nke=s(Vv);Cpe=n(nke,"STRONG",{});var U_t=s(Cpe);dQo=r(U_t,"nystromformer"),U_t.forEach(t),cQo=r(nke," \u2014 "),dX=n(nke,"A",{href:!0});var J_t=s(dX);fQo=r(J_t,"NystromformerForQuestionAnswering"),J_t.forEach(t),mQo=r(nke," (Nystromformer model)"),nke.forEach(t),gQo=i(X),Xv=n(X,"LI",{});var ske=s(Xv);wpe=n(ske,"STRONG",{});var Y_t=s(wpe);hQo=r(Y_t,"qdqbert"),Y_t.forEach(t),pQo=r(ske," \u2014 "),cX=n(ske,"A",{href:!0});var K_t=s(cX);_Qo=r(K_t,"QDQBertForQuestionAnswering"),K_t.forEach(t),uQo=r(ske," (QDQBert model)"),ske.forEach(t),bQo=i(X),zv=n(X,"LI",{});var lke=s(zv);Ape=n(lke,"STRONG",{});var Z_t=s(Ape);vQo=r(Z_t,"reformer"),Z_t.forEach(t),FQo=r(lke," \u2014 "),fX=n(lke,"A",{href:!0});var eut=s(fX);TQo=r(eut,"ReformerForQuestionAnswering"),eut.forEach(t),MQo=r(lke," (Reformer model)"),lke.forEach(t),EQo=i(X),Wv=n(X,"LI",{});var ike=s(Wv);ype=n(ike,"STRONG",{});var out=s(ype);CQo=r(out,"rembert"),out.forEach(t),wQo=r(ike," \u2014 "),mX=n(ike,"A",{href:!0});var rut=s(mX);AQo=r(rut,"RemBertForQuestionAnswering"),rut.forEach(t),yQo=r(ike," (RemBERT model)"),ike.forEach(t),LQo=i(X),Qv=n(X,"LI",{});var dke=s(Qv);Lpe=n(dke,"STRONG",{});var tut=s(Lpe);xQo=r(tut,"roberta"),tut.forEach(t),$Qo=r(dke," \u2014 "),gX=n(dke,"A",{href:!0});var aut=s(gX);kQo=r(aut,"RobertaForQuestionAnswering"),aut.forEach(t),SQo=r(dke," (RoBERTa model)"),dke.forEach(t),RQo=i(X),Hv=n(X,"LI",{});var cke=s(Hv);xpe=n(cke,"STRONG",{});var nut=s(xpe);PQo=r(nut,"roformer"),nut.forEach(t),BQo=r(cke," \u2014 "),hX=n(cke,"A",{href:!0});var sut=s(hX);IQo=r(sut,"RoFormerForQuestionAnswering"),sut.forEach(t),NQo=r(cke," (RoFormer model)"),cke.forEach(t),qQo=i(X),Uv=n(X,"LI",{});var fke=s(Uv);$pe=n(fke,"STRONG",{});var lut=s($pe);jQo=r(lut,"splinter"),lut.forEach(t),DQo=r(fke," \u2014 "),pX=n(fke,"A",{href:!0});var iut=s(pX);GQo=r(iut,"SplinterForQuestionAnswering"),iut.forEach(t),OQo=r(fke," (Splinter model)"),fke.forEach(t),VQo=i(X),Jv=n(X,"LI",{});var mke=s(Jv);kpe=n(mke,"STRONG",{});var dut=s(kpe);XQo=r(dut,"squeezebert"),dut.forEach(t),zQo=r(mke," \u2014 "),_X=n(mke,"A",{href:!0});var cut=s(_X);WQo=r(cut,"SqueezeBertForQuestionAnswering"),cut.forEach(t),QQo=r(mke," (SqueezeBERT model)"),mke.forEach(t),HQo=i(X),Yv=n(X,"LI",{});var gke=s(Yv);Spe=n(gke,"STRONG",{});var fut=s(Spe);UQo=r(fut,"xlm"),fut.forEach(t),JQo=r(gke," \u2014 "),uX=n(gke,"A",{href:!0});var mut=s(uX);YQo=r(mut,"XLMForQuestionAnsweringSimple"),mut.forEach(t),KQo=r(gke," (XLM model)"),gke.forEach(t),ZQo=i(X),Kv=n(X,"LI",{});var hke=s(Kv);Rpe=n(hke,"STRONG",{});var gut=s(Rpe);eHo=r(gut,"xlm-roberta"),gut.forEach(t),oHo=r(hke," \u2014 "),bX=n(hke,"A",{href:!0});var hut=s(bX);rHo=r(hut,"XLMRobertaForQuestionAnswering"),hut.forEach(t),tHo=r(hke," (XLM-RoBERTa model)"),hke.forEach(t),aHo=i(X),Zv=n(X,"LI",{});var pke=s(Zv);Ppe=n(pke,"STRONG",{});var put=s(Ppe);nHo=r(put,"xlm-roberta-xl"),put.forEach(t),sHo=r(pke," \u2014 "),vX=n(pke,"A",{href:!0});var _ut=s(vX);lHo=r(_ut,"XLMRobertaXLForQuestionAnswering"),_ut.forEach(t),iHo=r(pke," (XLM-RoBERTa-XL model)"),pke.forEach(t),dHo=i(X),e5=n(X,"LI",{});var _ke=s(e5);Bpe=n(_ke,"STRONG",{});var uut=s(Bpe);cHo=r(uut,"xlnet"),uut.forEach(t),fHo=r(_ke," \u2014 "),FX=n(_ke,"A",{href:!0});var but=s(FX);mHo=r(but,"XLNetForQuestionAnsweringSimple"),but.forEach(t),gHo=r(_ke," (XLNet model)"),_ke.forEach(t),hHo=i(X),o5=n(X,"LI",{});var uke=s(o5);Ipe=n(uke,"STRONG",{});var vut=s(Ipe);pHo=r(vut,"yoso"),vut.forEach(t),_Ho=r(uke," \u2014 "),TX=n(uke,"A",{href:!0});var Fut=s(TX);uHo=r(Fut,"YosoForQuestionAnswering"),Fut.forEach(t),bHo=r(uke," (YOSO model)"),uke.forEach(t),X.forEach(t),vHo=i(fa),r5=n(fa,"P",{});var bke=s(r5);FHo=r(bke,"The model is set in evaluation mode by default using "),Npe=n(bke,"CODE",{});var Tut=s(Npe);THo=r(Tut,"model.eval()"),Tut.forEach(t),MHo=r(bke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=n(bke,"CODE",{});var Mut=s(qpe);EHo=r(Mut,"model.train()"),Mut.forEach(t),bke.forEach(t),CHo=i(fa),T(t5.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),Yqe=i(f),rd=n(f,"H2",{class:!0});var oGe=s(rd);a5=n(oGe,"A",{id:!0,class:!0,href:!0});var Eut=s(a5);jpe=n(Eut,"SPAN",{});var Cut=s(jpe);T(eL.$$.fragment,Cut),Cut.forEach(t),Eut.forEach(t),wHo=i(oGe),Dpe=n(oGe,"SPAN",{});var wut=s(Dpe);AHo=r(wut,"AutoModelForTableQuestionAnswering"),wut.forEach(t),oGe.forEach(t),Kqe=i(f),qo=n(f,"DIV",{class:!0});var Ks=s(qo);T(oL.$$.fragment,Ks),yHo=i(Ks),td=n(Ks,"P",{});var zZ=s(td);LHo=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),MX=n(zZ,"A",{href:!0});var Aut=s(MX);xHo=r(Aut,"from_pretrained()"),Aut.forEach(t),$Ho=r(zZ," class method or the "),EX=n(zZ,"A",{href:!0});var yut=s(EX);kHo=r(yut,"from_config()"),yut.forEach(t),SHo=r(zZ,` class
method.`),zZ.forEach(t),RHo=i(Ks),rL=n(Ks,"P",{});var rGe=s(rL);PHo=r(rGe,"This class cannot be instantiated directly using "),Gpe=n(rGe,"CODE",{});var Lut=s(Gpe);BHo=r(Lut,"__init__()"),Lut.forEach(t),IHo=r(rGe," (throws an error)."),rGe.forEach(t),NHo=i(Ks),ht=n(Ks,"DIV",{class:!0});var t6=s(ht);T(tL.$$.fragment,t6),qHo=i(t6),Ope=n(t6,"P",{});var xut=s(Ope);jHo=r(xut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xut.forEach(t),DHo=i(t6),ad=n(t6,"P",{});var WZ=s(ad);GHo=r(WZ,`Note:
Loading a model from its configuration file does `),Vpe=n(WZ,"STRONG",{});var $ut=s(Vpe);OHo=r($ut,"not"),$ut.forEach(t),VHo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=n(WZ,"A",{href:!0});var kut=s(CX);XHo=r(kut,"from_pretrained()"),kut.forEach(t),zHo=r(WZ," to load the model weights."),WZ.forEach(t),WHo=i(t6),T(n5.$$.fragment,t6),t6.forEach(t),QHo=i(Ks),so=n(Ks,"DIV",{class:!0});var ma=s(so);T(aL.$$.fragment,ma),HHo=i(ma),Xpe=n(ma,"P",{});var Sut=s(Xpe);UHo=r(Sut,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Sut.forEach(t),JHo=i(ma),ja=n(ma,"P",{});var a6=s(ja);YHo=r(a6,"The model class to instantiate is selected based on the "),zpe=n(a6,"CODE",{});var Rut=s(zpe);KHo=r(Rut,"model_type"),Rut.forEach(t),ZHo=r(a6,` property of the config object (either
passed as an argument or loaded from `),Wpe=n(a6,"CODE",{});var Put=s(Wpe);eUo=r(Put,"pretrained_model_name_or_path"),Put.forEach(t),oUo=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=n(a6,"CODE",{});var But=s(Qpe);rUo=r(But,"pretrained_model_name_or_path"),But.forEach(t),tUo=r(a6,":"),a6.forEach(t),aUo=i(ma),Hpe=n(ma,"UL",{});var Iut=s(Hpe);s5=n(Iut,"LI",{});var vke=s(s5);Upe=n(vke,"STRONG",{});var Nut=s(Upe);nUo=r(Nut,"tapas"),Nut.forEach(t),sUo=r(vke," \u2014 "),wX=n(vke,"A",{href:!0});var qut=s(wX);lUo=r(qut,"TapasForQuestionAnswering"),qut.forEach(t),iUo=r(vke," (TAPAS model)"),vke.forEach(t),Iut.forEach(t),dUo=i(ma),l5=n(ma,"P",{});var Fke=s(l5);cUo=r(Fke,"The model is set in evaluation mode by default using "),Jpe=n(Fke,"CODE",{});var jut=s(Jpe);fUo=r(jut,"model.eval()"),jut.forEach(t),mUo=r(Fke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ype=n(Fke,"CODE",{});var Dut=s(Ype);gUo=r(Dut,"model.train()"),Dut.forEach(t),Fke.forEach(t),hUo=i(ma),T(i5.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),Zqe=i(f),nd=n(f,"H2",{class:!0});var tGe=s(nd);d5=n(tGe,"A",{id:!0,class:!0,href:!0});var Gut=s(d5);Kpe=n(Gut,"SPAN",{});var Out=s(Kpe);T(nL.$$.fragment,Out),Out.forEach(t),Gut.forEach(t),pUo=i(tGe),Zpe=n(tGe,"SPAN",{});var Vut=s(Zpe);_Uo=r(Vut,"AutoModelForImageClassification"),Vut.forEach(t),tGe.forEach(t),eje=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(sL.$$.fragment,Zs),uUo=i(Zs),sd=n(Zs,"P",{});var QZ=s(sd);bUo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),AX=n(QZ,"A",{href:!0});var Xut=s(AX);vUo=r(Xut,"from_pretrained()"),Xut.forEach(t),FUo=r(QZ," class method or the "),yX=n(QZ,"A",{href:!0});var zut=s(yX);TUo=r(zut,"from_config()"),zut.forEach(t),MUo=r(QZ,` class
method.`),QZ.forEach(t),EUo=i(Zs),lL=n(Zs,"P",{});var aGe=s(lL);CUo=r(aGe,"This class cannot be instantiated directly using "),e_e=n(aGe,"CODE",{});var Wut=s(e_e);wUo=r(Wut,"__init__()"),Wut.forEach(t),AUo=r(aGe," (throws an error)."),aGe.forEach(t),yUo=i(Zs),pt=n(Zs,"DIV",{class:!0});var n6=s(pt);T(iL.$$.fragment,n6),LUo=i(n6),o_e=n(n6,"P",{});var Qut=s(o_e);xUo=r(Qut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Qut.forEach(t),$Uo=i(n6),ld=n(n6,"P",{});var HZ=s(ld);kUo=r(HZ,`Note:
Loading a model from its configuration file does `),r_e=n(HZ,"STRONG",{});var Hut=s(r_e);SUo=r(Hut,"not"),Hut.forEach(t),RUo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=n(HZ,"A",{href:!0});var Uut=s(LX);PUo=r(Uut,"from_pretrained()"),Uut.forEach(t),BUo=r(HZ," to load the model weights."),HZ.forEach(t),IUo=i(n6),T(c5.$$.fragment,n6),n6.forEach(t),NUo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ga=s(lo);T(dL.$$.fragment,ga),qUo=i(ga),t_e=n(ga,"P",{});var Jut=s(t_e);jUo=r(Jut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Jut.forEach(t),DUo=i(ga),Da=n(ga,"P",{});var s6=s(Da);GUo=r(s6,"The model class to instantiate is selected based on the "),a_e=n(s6,"CODE",{});var Yut=s(a_e);OUo=r(Yut,"model_type"),Yut.forEach(t),VUo=r(s6,` property of the config object (either
passed as an argument or loaded from `),n_e=n(s6,"CODE",{});var Kut=s(n_e);XUo=r(Kut,"pretrained_model_name_or_path"),Kut.forEach(t),zUo=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=n(s6,"CODE",{});var Zut=s(s_e);WUo=r(Zut,"pretrained_model_name_or_path"),Zut.forEach(t),QUo=r(s6,":"),s6.forEach(t),HUo=i(ga),ve=n(ga,"UL",{});var Te=s(ve);f5=n(Te,"LI",{});var Tke=s(f5);l_e=n(Tke,"STRONG",{});var e1t=s(l_e);UUo=r(e1t,"beit"),e1t.forEach(t),JUo=r(Tke," \u2014 "),xX=n(Tke,"A",{href:!0});var o1t=s(xX);YUo=r(o1t,"BeitForImageClassification"),o1t.forEach(t),KUo=r(Tke," (BEiT model)"),Tke.forEach(t),ZUo=i(Te),m5=n(Te,"LI",{});var Mke=s(m5);i_e=n(Mke,"STRONG",{});var r1t=s(i_e);eJo=r(r1t,"convnext"),r1t.forEach(t),oJo=r(Mke," \u2014 "),$X=n(Mke,"A",{href:!0});var t1t=s($X);rJo=r(t1t,"ConvNextForImageClassification"),t1t.forEach(t),tJo=r(Mke," (ConvNext model)"),Mke.forEach(t),aJo=i(Te),g5=n(Te,"LI",{});var Eke=s(g5);d_e=n(Eke,"STRONG",{});var a1t=s(d_e);nJo=r(a1t,"cvt"),a1t.forEach(t),sJo=r(Eke," \u2014 "),kX=n(Eke,"A",{href:!0});var n1t=s(kX);lJo=r(n1t,"CvtForImageClassification"),n1t.forEach(t),iJo=r(Eke," (CvT model)"),Eke.forEach(t),dJo=i(Te),h5=n(Te,"LI",{});var Cke=s(h5);c_e=n(Cke,"STRONG",{});var s1t=s(c_e);cJo=r(s1t,"data2vec-vision"),s1t.forEach(t),fJo=r(Cke," \u2014 "),SX=n(Cke,"A",{href:!0});var l1t=s(SX);mJo=r(l1t,"Data2VecVisionForImageClassification"),l1t.forEach(t),gJo=r(Cke," (Data2VecVision model)"),Cke.forEach(t),hJo=i(Te),Bs=n(Te,"LI",{});var H$=s(Bs);f_e=n(H$,"STRONG",{});var i1t=s(f_e);pJo=r(i1t,"deit"),i1t.forEach(t),_Jo=r(H$," \u2014 "),RX=n(H$,"A",{href:!0});var d1t=s(RX);uJo=r(d1t,"DeiTForImageClassification"),d1t.forEach(t),bJo=r(H$," or "),PX=n(H$,"A",{href:!0});var c1t=s(PX);vJo=r(c1t,"DeiTForImageClassificationWithTeacher"),c1t.forEach(t),FJo=r(H$," (DeiT model)"),H$.forEach(t),TJo=i(Te),p5=n(Te,"LI",{});var wke=s(p5);m_e=n(wke,"STRONG",{});var f1t=s(m_e);MJo=r(f1t,"imagegpt"),f1t.forEach(t),EJo=r(wke," \u2014 "),BX=n(wke,"A",{href:!0});var m1t=s(BX);CJo=r(m1t,"ImageGPTForImageClassification"),m1t.forEach(t),wJo=r(wke," (ImageGPT model)"),wke.forEach(t),AJo=i(Te),_5=n(Te,"LI",{});var Ake=s(_5);g_e=n(Ake,"STRONG",{});var g1t=s(g_e);yJo=r(g1t,"mobilevit"),g1t.forEach(t),LJo=r(Ake," \u2014 "),IX=n(Ake,"A",{href:!0});var h1t=s(IX);xJo=r(h1t,"MobileViTForImageClassification"),h1t.forEach(t),$Jo=r(Ake," (MobileViT model)"),Ake.forEach(t),kJo=i(Te),_t=n(Te,"LI",{});var pf=s(_t);h_e=n(pf,"STRONG",{});var p1t=s(h_e);SJo=r(p1t,"perceiver"),p1t.forEach(t),RJo=r(pf," \u2014 "),NX=n(pf,"A",{href:!0});var _1t=s(NX);PJo=r(_1t,"PerceiverForImageClassificationLearned"),_1t.forEach(t),BJo=r(pf," or "),qX=n(pf,"A",{href:!0});var u1t=s(qX);IJo=r(u1t,"PerceiverForImageClassificationFourier"),u1t.forEach(t),NJo=r(pf," or "),jX=n(pf,"A",{href:!0});var b1t=s(jX);qJo=r(b1t,"PerceiverForImageClassificationConvProcessing"),b1t.forEach(t),jJo=r(pf," (Perceiver model)"),pf.forEach(t),DJo=i(Te),u5=n(Te,"LI",{});var yke=s(u5);p_e=n(yke,"STRONG",{});var v1t=s(p_e);GJo=r(v1t,"poolformer"),v1t.forEach(t),OJo=r(yke," \u2014 "),DX=n(yke,"A",{href:!0});var F1t=s(DX);VJo=r(F1t,"PoolFormerForImageClassification"),F1t.forEach(t),XJo=r(yke," (PoolFormer model)"),yke.forEach(t),zJo=i(Te),b5=n(Te,"LI",{});var Lke=s(b5);__e=n(Lke,"STRONG",{});var T1t=s(__e);WJo=r(T1t,"regnet"),T1t.forEach(t),QJo=r(Lke," \u2014 "),GX=n(Lke,"A",{href:!0});var M1t=s(GX);HJo=r(M1t,"RegNetForImageClassification"),M1t.forEach(t),UJo=r(Lke," (RegNet model)"),Lke.forEach(t),JJo=i(Te),v5=n(Te,"LI",{});var xke=s(v5);u_e=n(xke,"STRONG",{});var E1t=s(u_e);YJo=r(E1t,"resnet"),E1t.forEach(t),KJo=r(xke," \u2014 "),OX=n(xke,"A",{href:!0});var C1t=s(OX);ZJo=r(C1t,"ResNetForImageClassification"),C1t.forEach(t),eYo=r(xke," (ResNet model)"),xke.forEach(t),oYo=i(Te),F5=n(Te,"LI",{});var $ke=s(F5);b_e=n($ke,"STRONG",{});var w1t=s(b_e);rYo=r(w1t,"segformer"),w1t.forEach(t),tYo=r($ke," \u2014 "),VX=n($ke,"A",{href:!0});var A1t=s(VX);aYo=r(A1t,"SegformerForImageClassification"),A1t.forEach(t),nYo=r($ke," (SegFormer model)"),$ke.forEach(t),sYo=i(Te),T5=n(Te,"LI",{});var kke=s(T5);v_e=n(kke,"STRONG",{});var y1t=s(v_e);lYo=r(y1t,"swin"),y1t.forEach(t),iYo=r(kke," \u2014 "),XX=n(kke,"A",{href:!0});var L1t=s(XX);dYo=r(L1t,"SwinForImageClassification"),L1t.forEach(t),cYo=r(kke," (Swin model)"),kke.forEach(t),fYo=i(Te),M5=n(Te,"LI",{});var Ske=s(M5);F_e=n(Ske,"STRONG",{});var x1t=s(F_e);mYo=r(x1t,"van"),x1t.forEach(t),gYo=r(Ske," \u2014 "),zX=n(Ske,"A",{href:!0});var $1t=s(zX);hYo=r($1t,"VanForImageClassification"),$1t.forEach(t),pYo=r(Ske," (VAN model)"),Ske.forEach(t),_Yo=i(Te),E5=n(Te,"LI",{});var Rke=s(E5);T_e=n(Rke,"STRONG",{});var k1t=s(T_e);uYo=r(k1t,"vit"),k1t.forEach(t),bYo=r(Rke," \u2014 "),WX=n(Rke,"A",{href:!0});var S1t=s(WX);vYo=r(S1t,"ViTForImageClassification"),S1t.forEach(t),FYo=r(Rke," (ViT model)"),Rke.forEach(t),Te.forEach(t),TYo=i(ga),C5=n(ga,"P",{});var Pke=s(C5);MYo=r(Pke,"The model is set in evaluation mode by default using "),M_e=n(Pke,"CODE",{});var R1t=s(M_e);EYo=r(R1t,"model.eval()"),R1t.forEach(t),CYo=r(Pke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E_e=n(Pke,"CODE",{});var P1t=s(E_e);wYo=r(P1t,"model.train()"),P1t.forEach(t),Pke.forEach(t),AYo=i(ga),T(w5.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),oje=i(f),id=n(f,"H2",{class:!0});var nGe=s(id);A5=n(nGe,"A",{id:!0,class:!0,href:!0});var B1t=s(A5);C_e=n(B1t,"SPAN",{});var I1t=s(C_e);T(cL.$$.fragment,I1t),I1t.forEach(t),B1t.forEach(t),yYo=i(nGe),w_e=n(nGe,"SPAN",{});var N1t=s(w_e);LYo=r(N1t,"AutoModelForVision2Seq"),N1t.forEach(t),nGe.forEach(t),rje=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(fL.$$.fragment,el),xYo=i(el),dd=n(el,"P",{});var UZ=s(dd);$Yo=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),QX=n(UZ,"A",{href:!0});var q1t=s(QX);kYo=r(q1t,"from_pretrained()"),q1t.forEach(t),SYo=r(UZ," class method or the "),HX=n(UZ,"A",{href:!0});var j1t=s(HX);RYo=r(j1t,"from_config()"),j1t.forEach(t),PYo=r(UZ,` class
method.`),UZ.forEach(t),BYo=i(el),mL=n(el,"P",{});var sGe=s(mL);IYo=r(sGe,"This class cannot be instantiated directly using "),A_e=n(sGe,"CODE",{});var D1t=s(A_e);NYo=r(D1t,"__init__()"),D1t.forEach(t),qYo=r(sGe," (throws an error)."),sGe.forEach(t),jYo=i(el),ut=n(el,"DIV",{class:!0});var l6=s(ut);T(gL.$$.fragment,l6),DYo=i(l6),y_e=n(l6,"P",{});var G1t=s(y_e);GYo=r(G1t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),G1t.forEach(t),OYo=i(l6),cd=n(l6,"P",{});var JZ=s(cd);VYo=r(JZ,`Note:
Loading a model from its configuration file does `),L_e=n(JZ,"STRONG",{});var O1t=s(L_e);XYo=r(O1t,"not"),O1t.forEach(t),zYo=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(JZ,"A",{href:!0});var V1t=s(UX);WYo=r(V1t,"from_pretrained()"),V1t.forEach(t),QYo=r(JZ," to load the model weights."),JZ.forEach(t),HYo=i(l6),T(y5.$$.fragment,l6),l6.forEach(t),UYo=i(el),io=n(el,"DIV",{class:!0});var ha=s(io);T(hL.$$.fragment,ha),JYo=i(ha),x_e=n(ha,"P",{});var X1t=s(x_e);YYo=r(X1t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),X1t.forEach(t),KYo=i(ha),Ga=n(ha,"P",{});var i6=s(Ga);ZYo=r(i6,"The model class to instantiate is selected based on the "),$_e=n(i6,"CODE",{});var z1t=s($_e);eKo=r(z1t,"model_type"),z1t.forEach(t),oKo=r(i6,` property of the config object (either
passed as an argument or loaded from `),k_e=n(i6,"CODE",{});var W1t=s(k_e);rKo=r(W1t,"pretrained_model_name_or_path"),W1t.forEach(t),tKo=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=n(i6,"CODE",{});var Q1t=s(S_e);aKo=r(Q1t,"pretrained_model_name_or_path"),Q1t.forEach(t),nKo=r(i6,":"),i6.forEach(t),sKo=i(ha),R_e=n(ha,"UL",{});var H1t=s(R_e);L5=n(H1t,"LI",{});var Bke=s(L5);P_e=n(Bke,"STRONG",{});var U1t=s(P_e);lKo=r(U1t,"vision-encoder-decoder"),U1t.forEach(t),iKo=r(Bke," \u2014 "),JX=n(Bke,"A",{href:!0});var J1t=s(JX);dKo=r(J1t,"VisionEncoderDecoderModel"),J1t.forEach(t),cKo=r(Bke," (Vision Encoder decoder model)"),Bke.forEach(t),H1t.forEach(t),fKo=i(ha),x5=n(ha,"P",{});var Ike=s(x5);mKo=r(Ike,"The model is set in evaluation mode by default using "),B_e=n(Ike,"CODE",{});var Y1t=s(B_e);gKo=r(Y1t,"model.eval()"),Y1t.forEach(t),hKo=r(Ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I_e=n(Ike,"CODE",{});var K1t=s(I_e);pKo=r(K1t,"model.train()"),K1t.forEach(t),Ike.forEach(t),_Ko=i(ha),T($5.$$.fragment,ha),ha.forEach(t),el.forEach(t),tje=i(f),fd=n(f,"H2",{class:!0});var lGe=s(fd);k5=n(lGe,"A",{id:!0,class:!0,href:!0});var Z1t=s(k5);N_e=n(Z1t,"SPAN",{});var ebt=s(N_e);T(pL.$$.fragment,ebt),ebt.forEach(t),Z1t.forEach(t),uKo=i(lGe),q_e=n(lGe,"SPAN",{});var obt=s(q_e);bKo=r(obt,"AutoModelForAudioClassification"),obt.forEach(t),lGe.forEach(t),aje=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(_L.$$.fragment,ol),vKo=i(ol),md=n(ol,"P",{});var YZ=s(md);FKo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),YX=n(YZ,"A",{href:!0});var rbt=s(YX);TKo=r(rbt,"from_pretrained()"),rbt.forEach(t),MKo=r(YZ," class method or the "),KX=n(YZ,"A",{href:!0});var tbt=s(KX);EKo=r(tbt,"from_config()"),tbt.forEach(t),CKo=r(YZ,` class
method.`),YZ.forEach(t),wKo=i(ol),uL=n(ol,"P",{});var iGe=s(uL);AKo=r(iGe,"This class cannot be instantiated directly using "),j_e=n(iGe,"CODE",{});var abt=s(j_e);yKo=r(abt,"__init__()"),abt.forEach(t),LKo=r(iGe," (throws an error)."),iGe.forEach(t),xKo=i(ol),bt=n(ol,"DIV",{class:!0});var d6=s(bt);T(bL.$$.fragment,d6),$Ko=i(d6),D_e=n(d6,"P",{});var nbt=s(D_e);kKo=r(nbt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),nbt.forEach(t),SKo=i(d6),gd=n(d6,"P",{});var KZ=s(gd);RKo=r(KZ,`Note:
Loading a model from its configuration file does `),G_e=n(KZ,"STRONG",{});var sbt=s(G_e);PKo=r(sbt,"not"),sbt.forEach(t),BKo=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(KZ,"A",{href:!0});var lbt=s(ZX);IKo=r(lbt,"from_pretrained()"),lbt.forEach(t),NKo=r(KZ," to load the model weights."),KZ.forEach(t),qKo=i(d6),T(S5.$$.fragment,d6),d6.forEach(t),jKo=i(ol),co=n(ol,"DIV",{class:!0});var pa=s(co);T(vL.$$.fragment,pa),DKo=i(pa),O_e=n(pa,"P",{});var ibt=s(O_e);GKo=r(ibt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ibt.forEach(t),OKo=i(pa),Oa=n(pa,"P",{});var c6=s(Oa);VKo=r(c6,"The model class to instantiate is selected based on the "),V_e=n(c6,"CODE",{});var dbt=s(V_e);XKo=r(dbt,"model_type"),dbt.forEach(t),zKo=r(c6,` property of the config object (either
passed as an argument or loaded from `),X_e=n(c6,"CODE",{});var cbt=s(X_e);WKo=r(cbt,"pretrained_model_name_or_path"),cbt.forEach(t),QKo=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z_e=n(c6,"CODE",{});var fbt=s(z_e);HKo=r(fbt,"pretrained_model_name_or_path"),fbt.forEach(t),UKo=r(c6,":"),c6.forEach(t),JKo=i(pa),ke=n(pa,"UL",{});var Oe=s(ke);R5=n(Oe,"LI",{});var Nke=s(R5);W_e=n(Nke,"STRONG",{});var mbt=s(W_e);YKo=r(mbt,"data2vec-audio"),mbt.forEach(t),KKo=r(Nke," \u2014 "),ez=n(Nke,"A",{href:!0});var gbt=s(ez);ZKo=r(gbt,"Data2VecAudioForSequenceClassification"),gbt.forEach(t),eZo=r(Nke," (Data2VecAudio model)"),Nke.forEach(t),oZo=i(Oe),P5=n(Oe,"LI",{});var qke=s(P5);Q_e=n(qke,"STRONG",{});var hbt=s(Q_e);rZo=r(hbt,"hubert"),hbt.forEach(t),tZo=r(qke," \u2014 "),oz=n(qke,"A",{href:!0});var pbt=s(oz);aZo=r(pbt,"HubertForSequenceClassification"),pbt.forEach(t),nZo=r(qke," (Hubert model)"),qke.forEach(t),sZo=i(Oe),B5=n(Oe,"LI",{});var jke=s(B5);H_e=n(jke,"STRONG",{});var _bt=s(H_e);lZo=r(_bt,"sew"),_bt.forEach(t),iZo=r(jke," \u2014 "),rz=n(jke,"A",{href:!0});var ubt=s(rz);dZo=r(ubt,"SEWForSequenceClassification"),ubt.forEach(t),cZo=r(jke," (SEW model)"),jke.forEach(t),fZo=i(Oe),I5=n(Oe,"LI",{});var Dke=s(I5);U_e=n(Dke,"STRONG",{});var bbt=s(U_e);mZo=r(bbt,"sew-d"),bbt.forEach(t),gZo=r(Dke," \u2014 "),tz=n(Dke,"A",{href:!0});var vbt=s(tz);hZo=r(vbt,"SEWDForSequenceClassification"),vbt.forEach(t),pZo=r(Dke," (SEW-D model)"),Dke.forEach(t),_Zo=i(Oe),N5=n(Oe,"LI",{});var Gke=s(N5);J_e=n(Gke,"STRONG",{});var Fbt=s(J_e);uZo=r(Fbt,"unispeech"),Fbt.forEach(t),bZo=r(Gke," \u2014 "),az=n(Gke,"A",{href:!0});var Tbt=s(az);vZo=r(Tbt,"UniSpeechForSequenceClassification"),Tbt.forEach(t),FZo=r(Gke," (UniSpeech model)"),Gke.forEach(t),TZo=i(Oe),q5=n(Oe,"LI",{});var Oke=s(q5);Y_e=n(Oke,"STRONG",{});var Mbt=s(Y_e);MZo=r(Mbt,"unispeech-sat"),Mbt.forEach(t),EZo=r(Oke," \u2014 "),nz=n(Oke,"A",{href:!0});var Ebt=s(nz);CZo=r(Ebt,"UniSpeechSatForSequenceClassification"),Ebt.forEach(t),wZo=r(Oke," (UniSpeechSat model)"),Oke.forEach(t),AZo=i(Oe),j5=n(Oe,"LI",{});var Vke=s(j5);K_e=n(Vke,"STRONG",{});var Cbt=s(K_e);yZo=r(Cbt,"wav2vec2"),Cbt.forEach(t),LZo=r(Vke," \u2014 "),sz=n(Vke,"A",{href:!0});var wbt=s(sz);xZo=r(wbt,"Wav2Vec2ForSequenceClassification"),wbt.forEach(t),$Zo=r(Vke," (Wav2Vec2 model)"),Vke.forEach(t),kZo=i(Oe),D5=n(Oe,"LI",{});var Xke=s(D5);Z_e=n(Xke,"STRONG",{});var Abt=s(Z_e);SZo=r(Abt,"wav2vec2-conformer"),Abt.forEach(t),RZo=r(Xke," \u2014 "),lz=n(Xke,"A",{href:!0});var ybt=s(lz);PZo=r(ybt,"Wav2Vec2ConformerForSequenceClassification"),ybt.forEach(t),BZo=r(Xke," (Wav2Vec2-Conformer model)"),Xke.forEach(t),IZo=i(Oe),G5=n(Oe,"LI",{});var zke=s(G5);eue=n(zke,"STRONG",{});var Lbt=s(eue);NZo=r(Lbt,"wavlm"),Lbt.forEach(t),qZo=r(zke," \u2014 "),iz=n(zke,"A",{href:!0});var xbt=s(iz);jZo=r(xbt,"WavLMForSequenceClassification"),xbt.forEach(t),DZo=r(zke," (WavLM model)"),zke.forEach(t),Oe.forEach(t),GZo=i(pa),O5=n(pa,"P",{});var Wke=s(O5);OZo=r(Wke,"The model is set in evaluation mode by default using "),oue=n(Wke,"CODE",{});var $bt=s(oue);VZo=r($bt,"model.eval()"),$bt.forEach(t),XZo=r(Wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rue=n(Wke,"CODE",{});var kbt=s(rue);zZo=r(kbt,"model.train()"),kbt.forEach(t),Wke.forEach(t),WZo=i(pa),T(V5.$$.fragment,pa),pa.forEach(t),ol.forEach(t),nje=i(f),hd=n(f,"H2",{class:!0});var dGe=s(hd);X5=n(dGe,"A",{id:!0,class:!0,href:!0});var Sbt=s(X5);tue=n(Sbt,"SPAN",{});var Rbt=s(tue);T(FL.$$.fragment,Rbt),Rbt.forEach(t),Sbt.forEach(t),QZo=i(dGe),aue=n(dGe,"SPAN",{});var Pbt=s(aue);HZo=r(Pbt,"AutoModelForAudioFrameClassification"),Pbt.forEach(t),dGe.forEach(t),sje=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(TL.$$.fragment,rl),UZo=i(rl),pd=n(rl,"P",{});var ZZ=s(pd);JZo=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),dz=n(ZZ,"A",{href:!0});var Bbt=s(dz);YZo=r(Bbt,"from_pretrained()"),Bbt.forEach(t),KZo=r(ZZ," class method or the "),cz=n(ZZ,"A",{href:!0});var Ibt=s(cz);ZZo=r(Ibt,"from_config()"),Ibt.forEach(t),eer=r(ZZ,` class
method.`),ZZ.forEach(t),oer=i(rl),ML=n(rl,"P",{});var cGe=s(ML);rer=r(cGe,"This class cannot be instantiated directly using "),nue=n(cGe,"CODE",{});var Nbt=s(nue);ter=r(Nbt,"__init__()"),Nbt.forEach(t),aer=r(cGe," (throws an error)."),cGe.forEach(t),ner=i(rl),vt=n(rl,"DIV",{class:!0});var f6=s(vt);T(EL.$$.fragment,f6),ser=i(f6),sue=n(f6,"P",{});var qbt=s(sue);ler=r(qbt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),qbt.forEach(t),ier=i(f6),_d=n(f6,"P",{});var eee=s(_d);der=r(eee,`Note:
Loading a model from its configuration file does `),lue=n(eee,"STRONG",{});var jbt=s(lue);cer=r(jbt,"not"),jbt.forEach(t),fer=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=n(eee,"A",{href:!0});var Dbt=s(fz);mer=r(Dbt,"from_pretrained()"),Dbt.forEach(t),ger=r(eee," to load the model weights."),eee.forEach(t),her=i(f6),T(z5.$$.fragment,f6),f6.forEach(t),per=i(rl),fo=n(rl,"DIV",{class:!0});var _a=s(fo);T(CL.$$.fragment,_a),_er=i(_a),iue=n(_a,"P",{});var Gbt=s(iue);uer=r(Gbt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Gbt.forEach(t),ber=i(_a),Va=n(_a,"P",{});var m6=s(Va);ver=r(m6,"The model class to instantiate is selected based on the "),due=n(m6,"CODE",{});var Obt=s(due);Fer=r(Obt,"model_type"),Obt.forEach(t),Ter=r(m6,` property of the config object (either
passed as an argument or loaded from `),cue=n(m6,"CODE",{});var Vbt=s(cue);Mer=r(Vbt,"pretrained_model_name_or_path"),Vbt.forEach(t),Eer=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=n(m6,"CODE",{});var Xbt=s(fue);Cer=r(Xbt,"pretrained_model_name_or_path"),Xbt.forEach(t),wer=r(m6,":"),m6.forEach(t),Aer=i(_a),Kr=n(_a,"UL",{});var tl=s(Kr);W5=n(tl,"LI",{});var Qke=s(W5);mue=n(Qke,"STRONG",{});var zbt=s(mue);yer=r(zbt,"data2vec-audio"),zbt.forEach(t),Ler=r(Qke," \u2014 "),mz=n(Qke,"A",{href:!0});var Wbt=s(mz);xer=r(Wbt,"Data2VecAudioForAudioFrameClassification"),Wbt.forEach(t),$er=r(Qke," (Data2VecAudio model)"),Qke.forEach(t),ker=i(tl),Q5=n(tl,"LI",{});var Hke=s(Q5);gue=n(Hke,"STRONG",{});var Qbt=s(gue);Ser=r(Qbt,"unispeech-sat"),Qbt.forEach(t),Rer=r(Hke," \u2014 "),gz=n(Hke,"A",{href:!0});var Hbt=s(gz);Per=r(Hbt,"UniSpeechSatForAudioFrameClassification"),Hbt.forEach(t),Ber=r(Hke," (UniSpeechSat model)"),Hke.forEach(t),Ier=i(tl),H5=n(tl,"LI",{});var Uke=s(H5);hue=n(Uke,"STRONG",{});var Ubt=s(hue);Ner=r(Ubt,"wav2vec2"),Ubt.forEach(t),qer=r(Uke," \u2014 "),hz=n(Uke,"A",{href:!0});var Jbt=s(hz);jer=r(Jbt,"Wav2Vec2ForAudioFrameClassification"),Jbt.forEach(t),Der=r(Uke," (Wav2Vec2 model)"),Uke.forEach(t),Ger=i(tl),U5=n(tl,"LI",{});var Jke=s(U5);pue=n(Jke,"STRONG",{});var Ybt=s(pue);Oer=r(Ybt,"wav2vec2-conformer"),Ybt.forEach(t),Ver=r(Jke," \u2014 "),pz=n(Jke,"A",{href:!0});var Kbt=s(pz);Xer=r(Kbt,"Wav2Vec2ConformerForAudioFrameClassification"),Kbt.forEach(t),zer=r(Jke," (Wav2Vec2-Conformer model)"),Jke.forEach(t),Wer=i(tl),J5=n(tl,"LI",{});var Yke=s(J5);_ue=n(Yke,"STRONG",{});var Zbt=s(_ue);Qer=r(Zbt,"wavlm"),Zbt.forEach(t),Her=r(Yke," \u2014 "),_z=n(Yke,"A",{href:!0});var e2t=s(_z);Uer=r(e2t,"WavLMForAudioFrameClassification"),e2t.forEach(t),Jer=r(Yke," (WavLM model)"),Yke.forEach(t),tl.forEach(t),Yer=i(_a),Y5=n(_a,"P",{});var Kke=s(Y5);Ker=r(Kke,"The model is set in evaluation mode by default using "),uue=n(Kke,"CODE",{});var o2t=s(uue);Zer=r(o2t,"model.eval()"),o2t.forEach(t),eor=r(Kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bue=n(Kke,"CODE",{});var r2t=s(bue);oor=r(r2t,"model.train()"),r2t.forEach(t),Kke.forEach(t),ror=i(_a),T(K5.$$.fragment,_a),_a.forEach(t),rl.forEach(t),lje=i(f),ud=n(f,"H2",{class:!0});var fGe=s(ud);Z5=n(fGe,"A",{id:!0,class:!0,href:!0});var t2t=s(Z5);vue=n(t2t,"SPAN",{});var a2t=s(vue);T(wL.$$.fragment,a2t),a2t.forEach(t),t2t.forEach(t),tor=i(fGe),Fue=n(fGe,"SPAN",{});var n2t=s(Fue);aor=r(n2t,"AutoModelForCTC"),n2t.forEach(t),fGe.forEach(t),ije=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(AL.$$.fragment,al),nor=i(al),bd=n(al,"P",{});var oee=s(bd);sor=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),uz=n(oee,"A",{href:!0});var s2t=s(uz);lor=r(s2t,"from_pretrained()"),s2t.forEach(t),ior=r(oee," class method or the "),bz=n(oee,"A",{href:!0});var l2t=s(bz);dor=r(l2t,"from_config()"),l2t.forEach(t),cor=r(oee,` class
method.`),oee.forEach(t),mor=i(al),yL=n(al,"P",{});var mGe=s(yL);gor=r(mGe,"This class cannot be instantiated directly using "),Tue=n(mGe,"CODE",{});var i2t=s(Tue);hor=r(i2t,"__init__()"),i2t.forEach(t),por=r(mGe," (throws an error)."),mGe.forEach(t),_or=i(al),Ft=n(al,"DIV",{class:!0});var g6=s(Ft);T(LL.$$.fragment,g6),uor=i(g6),Mue=n(g6,"P",{});var d2t=s(Mue);bor=r(d2t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),d2t.forEach(t),vor=i(g6),vd=n(g6,"P",{});var ree=s(vd);For=r(ree,`Note:
Loading a model from its configuration file does `),Eue=n(ree,"STRONG",{});var c2t=s(Eue);Tor=r(c2t,"not"),c2t.forEach(t),Mor=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=n(ree,"A",{href:!0});var f2t=s(vz);Eor=r(f2t,"from_pretrained()"),f2t.forEach(t),Cor=r(ree," to load the model weights."),ree.forEach(t),wor=i(g6),T(e3.$$.fragment,g6),g6.forEach(t),Aor=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(xL.$$.fragment,ua),yor=i(ua),Cue=n(ua,"P",{});var m2t=s(Cue);Lor=r(m2t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),m2t.forEach(t),xor=i(ua),Xa=n(ua,"P",{});var h6=s(Xa);$or=r(h6,"The model class to instantiate is selected based on the "),wue=n(h6,"CODE",{});var g2t=s(wue);kor=r(g2t,"model_type"),g2t.forEach(t),Sor=r(h6,` property of the config object (either
passed as an argument or loaded from `),Aue=n(h6,"CODE",{});var h2t=s(Aue);Ror=r(h2t,"pretrained_model_name_or_path"),h2t.forEach(t),Por=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yue=n(h6,"CODE",{});var p2t=s(yue);Bor=r(p2t,"pretrained_model_name_or_path"),p2t.forEach(t),Ior=r(h6,":"),h6.forEach(t),Nor=i(ua),Se=n(ua,"UL",{});var Ve=s(Se);o3=n(Ve,"LI",{});var Zke=s(o3);Lue=n(Zke,"STRONG",{});var _2t=s(Lue);qor=r(_2t,"data2vec-audio"),_2t.forEach(t),jor=r(Zke," \u2014 "),Fz=n(Zke,"A",{href:!0});var u2t=s(Fz);Dor=r(u2t,"Data2VecAudioForCTC"),u2t.forEach(t),Gor=r(Zke," (Data2VecAudio model)"),Zke.forEach(t),Oor=i(Ve),r3=n(Ve,"LI",{});var eSe=s(r3);xue=n(eSe,"STRONG",{});var b2t=s(xue);Vor=r(b2t,"hubert"),b2t.forEach(t),Xor=r(eSe," \u2014 "),Tz=n(eSe,"A",{href:!0});var v2t=s(Tz);zor=r(v2t,"HubertForCTC"),v2t.forEach(t),Wor=r(eSe," (Hubert model)"),eSe.forEach(t),Qor=i(Ve),t3=n(Ve,"LI",{});var oSe=s(t3);$ue=n(oSe,"STRONG",{});var F2t=s($ue);Hor=r(F2t,"sew"),F2t.forEach(t),Uor=r(oSe," \u2014 "),Mz=n(oSe,"A",{href:!0});var T2t=s(Mz);Jor=r(T2t,"SEWForCTC"),T2t.forEach(t),Yor=r(oSe," (SEW model)"),oSe.forEach(t),Kor=i(Ve),a3=n(Ve,"LI",{});var rSe=s(a3);kue=n(rSe,"STRONG",{});var M2t=s(kue);Zor=r(M2t,"sew-d"),M2t.forEach(t),err=r(rSe," \u2014 "),Ez=n(rSe,"A",{href:!0});var E2t=s(Ez);orr=r(E2t,"SEWDForCTC"),E2t.forEach(t),rrr=r(rSe," (SEW-D model)"),rSe.forEach(t),trr=i(Ve),n3=n(Ve,"LI",{});var tSe=s(n3);Sue=n(tSe,"STRONG",{});var C2t=s(Sue);arr=r(C2t,"unispeech"),C2t.forEach(t),nrr=r(tSe," \u2014 "),Cz=n(tSe,"A",{href:!0});var w2t=s(Cz);srr=r(w2t,"UniSpeechForCTC"),w2t.forEach(t),lrr=r(tSe," (UniSpeech model)"),tSe.forEach(t),irr=i(Ve),s3=n(Ve,"LI",{});var aSe=s(s3);Rue=n(aSe,"STRONG",{});var A2t=s(Rue);drr=r(A2t,"unispeech-sat"),A2t.forEach(t),crr=r(aSe," \u2014 "),wz=n(aSe,"A",{href:!0});var y2t=s(wz);frr=r(y2t,"UniSpeechSatForCTC"),y2t.forEach(t),mrr=r(aSe," (UniSpeechSat model)"),aSe.forEach(t),grr=i(Ve),l3=n(Ve,"LI",{});var nSe=s(l3);Pue=n(nSe,"STRONG",{});var L2t=s(Pue);hrr=r(L2t,"wav2vec2"),L2t.forEach(t),prr=r(nSe," \u2014 "),Az=n(nSe,"A",{href:!0});var x2t=s(Az);_rr=r(x2t,"Wav2Vec2ForCTC"),x2t.forEach(t),urr=r(nSe," (Wav2Vec2 model)"),nSe.forEach(t),brr=i(Ve),i3=n(Ve,"LI",{});var sSe=s(i3);Bue=n(sSe,"STRONG",{});var $2t=s(Bue);vrr=r($2t,"wav2vec2-conformer"),$2t.forEach(t),Frr=r(sSe," \u2014 "),yz=n(sSe,"A",{href:!0});var k2t=s(yz);Trr=r(k2t,"Wav2Vec2ConformerForCTC"),k2t.forEach(t),Mrr=r(sSe," (Wav2Vec2-Conformer model)"),sSe.forEach(t),Err=i(Ve),d3=n(Ve,"LI",{});var lSe=s(d3);Iue=n(lSe,"STRONG",{});var S2t=s(Iue);Crr=r(S2t,"wavlm"),S2t.forEach(t),wrr=r(lSe," \u2014 "),Lz=n(lSe,"A",{href:!0});var R2t=s(Lz);Arr=r(R2t,"WavLMForCTC"),R2t.forEach(t),yrr=r(lSe," (WavLM model)"),lSe.forEach(t),Ve.forEach(t),Lrr=i(ua),c3=n(ua,"P",{});var iSe=s(c3);xrr=r(iSe,"The model is set in evaluation mode by default using "),Nue=n(iSe,"CODE",{});var P2t=s(Nue);$rr=r(P2t,"model.eval()"),P2t.forEach(t),krr=r(iSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),que=n(iSe,"CODE",{});var B2t=s(que);Srr=r(B2t,"model.train()"),B2t.forEach(t),iSe.forEach(t),Rrr=i(ua),T(f3.$$.fragment,ua),ua.forEach(t),al.forEach(t),dje=i(f),Fd=n(f,"H2",{class:!0});var gGe=s(Fd);m3=n(gGe,"A",{id:!0,class:!0,href:!0});var I2t=s(m3);jue=n(I2t,"SPAN",{});var N2t=s(jue);T($L.$$.fragment,N2t),N2t.forEach(t),I2t.forEach(t),Prr=i(gGe),Due=n(gGe,"SPAN",{});var q2t=s(Due);Brr=r(q2t,"AutoModelForSpeechSeq2Seq"),q2t.forEach(t),gGe.forEach(t),cje=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(kL.$$.fragment,nl),Irr=i(nl),Td=n(nl,"P",{});var tee=s(Td);Nrr=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),xz=n(tee,"A",{href:!0});var j2t=s(xz);qrr=r(j2t,"from_pretrained()"),j2t.forEach(t),jrr=r(tee," class method or the "),$z=n(tee,"A",{href:!0});var D2t=s($z);Drr=r(D2t,"from_config()"),D2t.forEach(t),Grr=r(tee,` class
method.`),tee.forEach(t),Orr=i(nl),SL=n(nl,"P",{});var hGe=s(SL);Vrr=r(hGe,"This class cannot be instantiated directly using "),Gue=n(hGe,"CODE",{});var G2t=s(Gue);Xrr=r(G2t,"__init__()"),G2t.forEach(t),zrr=r(hGe," (throws an error)."),hGe.forEach(t),Wrr=i(nl),Tt=n(nl,"DIV",{class:!0});var p6=s(Tt);T(RL.$$.fragment,p6),Qrr=i(p6),Oue=n(p6,"P",{});var O2t=s(Oue);Hrr=r(O2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),O2t.forEach(t),Urr=i(p6),Md=n(p6,"P",{});var aee=s(Md);Jrr=r(aee,`Note:
Loading a model from its configuration file does `),Vue=n(aee,"STRONG",{});var V2t=s(Vue);Yrr=r(V2t,"not"),V2t.forEach(t),Krr=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=n(aee,"A",{href:!0});var X2t=s(kz);Zrr=r(X2t,"from_pretrained()"),X2t.forEach(t),etr=r(aee," to load the model weights."),aee.forEach(t),otr=i(p6),T(g3.$$.fragment,p6),p6.forEach(t),rtr=i(nl),go=n(nl,"DIV",{class:!0});var ba=s(go);T(PL.$$.fragment,ba),ttr=i(ba),Xue=n(ba,"P",{});var z2t=s(Xue);atr=r(z2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),z2t.forEach(t),ntr=i(ba),za=n(ba,"P",{});var _6=s(za);str=r(_6,"The model class to instantiate is selected based on the "),zue=n(_6,"CODE",{});var W2t=s(zue);ltr=r(W2t,"model_type"),W2t.forEach(t),itr=r(_6,` property of the config object (either
passed as an argument or loaded from `),Wue=n(_6,"CODE",{});var Q2t=s(Wue);dtr=r(Q2t,"pretrained_model_name_or_path"),Q2t.forEach(t),ctr=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=n(_6,"CODE",{});var H2t=s(Que);ftr=r(H2t,"pretrained_model_name_or_path"),H2t.forEach(t),mtr=r(_6,":"),_6.forEach(t),gtr=i(ba),BL=n(ba,"UL",{});var pGe=s(BL);h3=n(pGe,"LI",{});var dSe=s(h3);Hue=n(dSe,"STRONG",{});var U2t=s(Hue);htr=r(U2t,"speech-encoder-decoder"),U2t.forEach(t),ptr=r(dSe," \u2014 "),Sz=n(dSe,"A",{href:!0});var J2t=s(Sz);_tr=r(J2t,"SpeechEncoderDecoderModel"),J2t.forEach(t),utr=r(dSe," (Speech Encoder decoder model)"),dSe.forEach(t),btr=i(pGe),p3=n(pGe,"LI",{});var cSe=s(p3);Uue=n(cSe,"STRONG",{});var Y2t=s(Uue);vtr=r(Y2t,"speech_to_text"),Y2t.forEach(t),Ftr=r(cSe," \u2014 "),Rz=n(cSe,"A",{href:!0});var K2t=s(Rz);Ttr=r(K2t,"Speech2TextForConditionalGeneration"),K2t.forEach(t),Mtr=r(cSe," (Speech2Text model)"),cSe.forEach(t),pGe.forEach(t),Etr=i(ba),_3=n(ba,"P",{});var fSe=s(_3);Ctr=r(fSe,"The model is set in evaluation mode by default using "),Jue=n(fSe,"CODE",{});var Z2t=s(Jue);wtr=r(Z2t,"model.eval()"),Z2t.forEach(t),Atr=r(fSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=n(fSe,"CODE",{});var e4t=s(Yue);ytr=r(e4t,"model.train()"),e4t.forEach(t),fSe.forEach(t),Ltr=i(ba),T(u3.$$.fragment,ba),ba.forEach(t),nl.forEach(t),fje=i(f),Ed=n(f,"H2",{class:!0});var _Ge=s(Ed);b3=n(_Ge,"A",{id:!0,class:!0,href:!0});var o4t=s(b3);Kue=n(o4t,"SPAN",{});var r4t=s(Kue);T(IL.$$.fragment,r4t),r4t.forEach(t),o4t.forEach(t),xtr=i(_Ge),Zue=n(_Ge,"SPAN",{});var t4t=s(Zue);$tr=r(t4t,"AutoModelForAudioXVector"),t4t.forEach(t),_Ge.forEach(t),mje=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(NL.$$.fragment,sl),ktr=i(sl),Cd=n(sl,"P",{});var nee=s(Cd);Str=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Pz=n(nee,"A",{href:!0});var a4t=s(Pz);Rtr=r(a4t,"from_pretrained()"),a4t.forEach(t),Ptr=r(nee," class method or the "),Bz=n(nee,"A",{href:!0});var n4t=s(Bz);Btr=r(n4t,"from_config()"),n4t.forEach(t),Itr=r(nee,` class
method.`),nee.forEach(t),Ntr=i(sl),qL=n(sl,"P",{});var uGe=s(qL);qtr=r(uGe,"This class cannot be instantiated directly using "),e1e=n(uGe,"CODE",{});var s4t=s(e1e);jtr=r(s4t,"__init__()"),s4t.forEach(t),Dtr=r(uGe," (throws an error)."),uGe.forEach(t),Gtr=i(sl),Mt=n(sl,"DIV",{class:!0});var u6=s(Mt);T(jL.$$.fragment,u6),Otr=i(u6),o1e=n(u6,"P",{});var l4t=s(o1e);Vtr=r(l4t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),l4t.forEach(t),Xtr=i(u6),wd=n(u6,"P",{});var see=s(wd);ztr=r(see,`Note:
Loading a model from its configuration file does `),r1e=n(see,"STRONG",{});var i4t=s(r1e);Wtr=r(i4t,"not"),i4t.forEach(t),Qtr=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=n(see,"A",{href:!0});var d4t=s(Iz);Htr=r(d4t,"from_pretrained()"),d4t.forEach(t),Utr=r(see," to load the model weights."),see.forEach(t),Jtr=i(u6),T(v3.$$.fragment,u6),u6.forEach(t),Ytr=i(sl),ho=n(sl,"DIV",{class:!0});var va=s(ho);T(DL.$$.fragment,va),Ktr=i(va),t1e=n(va,"P",{});var c4t=s(t1e);Ztr=r(c4t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),c4t.forEach(t),ear=i(va),Wa=n(va,"P",{});var b6=s(Wa);oar=r(b6,"The model class to instantiate is selected based on the "),a1e=n(b6,"CODE",{});var f4t=s(a1e);rar=r(f4t,"model_type"),f4t.forEach(t),tar=r(b6,` property of the config object (either
passed as an argument or loaded from `),n1e=n(b6,"CODE",{});var m4t=s(n1e);aar=r(m4t,"pretrained_model_name_or_path"),m4t.forEach(t),nar=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=n(b6,"CODE",{});var g4t=s(s1e);sar=r(g4t,"pretrained_model_name_or_path"),g4t.forEach(t),lar=r(b6,":"),b6.forEach(t),iar=i(va),Zr=n(va,"UL",{});var ll=s(Zr);F3=n(ll,"LI",{});var mSe=s(F3);l1e=n(mSe,"STRONG",{});var h4t=s(l1e);dar=r(h4t,"data2vec-audio"),h4t.forEach(t),car=r(mSe," \u2014 "),Nz=n(mSe,"A",{href:!0});var p4t=s(Nz);far=r(p4t,"Data2VecAudioForXVector"),p4t.forEach(t),mar=r(mSe," (Data2VecAudio model)"),mSe.forEach(t),gar=i(ll),T3=n(ll,"LI",{});var gSe=s(T3);i1e=n(gSe,"STRONG",{});var _4t=s(i1e);har=r(_4t,"unispeech-sat"),_4t.forEach(t),par=r(gSe," \u2014 "),qz=n(gSe,"A",{href:!0});var u4t=s(qz);_ar=r(u4t,"UniSpeechSatForXVector"),u4t.forEach(t),uar=r(gSe," (UniSpeechSat model)"),gSe.forEach(t),bar=i(ll),M3=n(ll,"LI",{});var hSe=s(M3);d1e=n(hSe,"STRONG",{});var b4t=s(d1e);Far=r(b4t,"wav2vec2"),b4t.forEach(t),Tar=r(hSe," \u2014 "),jz=n(hSe,"A",{href:!0});var v4t=s(jz);Mar=r(v4t,"Wav2Vec2ForXVector"),v4t.forEach(t),Ear=r(hSe," (Wav2Vec2 model)"),hSe.forEach(t),Car=i(ll),E3=n(ll,"LI",{});var pSe=s(E3);c1e=n(pSe,"STRONG",{});var F4t=s(c1e);war=r(F4t,"wav2vec2-conformer"),F4t.forEach(t),Aar=r(pSe," \u2014 "),Dz=n(pSe,"A",{href:!0});var T4t=s(Dz);yar=r(T4t,"Wav2Vec2ConformerForXVector"),T4t.forEach(t),Lar=r(pSe," (Wav2Vec2-Conformer model)"),pSe.forEach(t),xar=i(ll),C3=n(ll,"LI",{});var _Se=s(C3);f1e=n(_Se,"STRONG",{});var M4t=s(f1e);$ar=r(M4t,"wavlm"),M4t.forEach(t),kar=r(_Se," \u2014 "),Gz=n(_Se,"A",{href:!0});var E4t=s(Gz);Sar=r(E4t,"WavLMForXVector"),E4t.forEach(t),Rar=r(_Se," (WavLM model)"),_Se.forEach(t),ll.forEach(t),Par=i(va),w3=n(va,"P",{});var uSe=s(w3);Bar=r(uSe,"The model is set in evaluation mode by default using "),m1e=n(uSe,"CODE",{});var C4t=s(m1e);Iar=r(C4t,"model.eval()"),C4t.forEach(t),Nar=r(uSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g1e=n(uSe,"CODE",{});var w4t=s(g1e);qar=r(w4t,"model.train()"),w4t.forEach(t),uSe.forEach(t),jar=i(va),T(A3.$$.fragment,va),va.forEach(t),sl.forEach(t),gje=i(f),Ad=n(f,"H2",{class:!0});var bGe=s(Ad);y3=n(bGe,"A",{id:!0,class:!0,href:!0});var A4t=s(y3);h1e=n(A4t,"SPAN",{});var y4t=s(h1e);T(GL.$$.fragment,y4t),y4t.forEach(t),A4t.forEach(t),Dar=i(bGe),p1e=n(bGe,"SPAN",{});var L4t=s(p1e);Gar=r(L4t,"AutoModelForMaskedImageModeling"),L4t.forEach(t),bGe.forEach(t),hje=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(OL.$$.fragment,il),Oar=i(il),yd=n(il,"P",{});var lee=s(yd);Var=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Oz=n(lee,"A",{href:!0});var x4t=s(Oz);Xar=r(x4t,"from_pretrained()"),x4t.forEach(t),zar=r(lee," class method or the "),Vz=n(lee,"A",{href:!0});var $4t=s(Vz);War=r($4t,"from_config()"),$4t.forEach(t),Qar=r(lee,` class
method.`),lee.forEach(t),Har=i(il),VL=n(il,"P",{});var vGe=s(VL);Uar=r(vGe,"This class cannot be instantiated directly using "),_1e=n(vGe,"CODE",{});var k4t=s(_1e);Jar=r(k4t,"__init__()"),k4t.forEach(t),Yar=r(vGe," (throws an error)."),vGe.forEach(t),Kar=i(il),Et=n(il,"DIV",{class:!0});var v6=s(Et);T(XL.$$.fragment,v6),Zar=i(v6),u1e=n(v6,"P",{});var S4t=s(u1e);enr=r(S4t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),S4t.forEach(t),onr=i(v6),Ld=n(v6,"P",{});var iee=s(Ld);rnr=r(iee,`Note:
Loading a model from its configuration file does `),b1e=n(iee,"STRONG",{});var R4t=s(b1e);tnr=r(R4t,"not"),R4t.forEach(t),anr=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=n(iee,"A",{href:!0});var P4t=s(Xz);nnr=r(P4t,"from_pretrained()"),P4t.forEach(t),snr=r(iee," to load the model weights."),iee.forEach(t),lnr=i(v6),T(L3.$$.fragment,v6),v6.forEach(t),inr=i(il),po=n(il,"DIV",{class:!0});var Fa=s(po);T(zL.$$.fragment,Fa),dnr=i(Fa),v1e=n(Fa,"P",{});var B4t=s(v1e);cnr=r(B4t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),B4t.forEach(t),fnr=i(Fa),Qa=n(Fa,"P",{});var F6=s(Qa);mnr=r(F6,"The model class to instantiate is selected based on the "),F1e=n(F6,"CODE",{});var I4t=s(F1e);gnr=r(I4t,"model_type"),I4t.forEach(t),hnr=r(F6,` property of the config object (either
passed as an argument or loaded from `),T1e=n(F6,"CODE",{});var N4t=s(T1e);pnr=r(N4t,"pretrained_model_name_or_path"),N4t.forEach(t),_nr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=n(F6,"CODE",{});var q4t=s(M1e);unr=r(q4t,"pretrained_model_name_or_path"),q4t.forEach(t),bnr=r(F6,":"),F6.forEach(t),vnr=i(Fa),xd=n(Fa,"UL",{});var dee=s(xd);x3=n(dee,"LI",{});var bSe=s(x3);E1e=n(bSe,"STRONG",{});var j4t=s(E1e);Fnr=r(j4t,"deit"),j4t.forEach(t),Tnr=r(bSe," \u2014 "),zz=n(bSe,"A",{href:!0});var D4t=s(zz);Mnr=r(D4t,"DeiTForMaskedImageModeling"),D4t.forEach(t),Enr=r(bSe," (DeiT model)"),bSe.forEach(t),Cnr=i(dee),$3=n(dee,"LI",{});var vSe=s($3);C1e=n(vSe,"STRONG",{});var G4t=s(C1e);wnr=r(G4t,"swin"),G4t.forEach(t),Anr=r(vSe," \u2014 "),Wz=n(vSe,"A",{href:!0});var O4t=s(Wz);ynr=r(O4t,"SwinForMaskedImageModeling"),O4t.forEach(t),Lnr=r(vSe," (Swin model)"),vSe.forEach(t),xnr=i(dee),k3=n(dee,"LI",{});var FSe=s(k3);w1e=n(FSe,"STRONG",{});var V4t=s(w1e);$nr=r(V4t,"vit"),V4t.forEach(t),knr=r(FSe," \u2014 "),Qz=n(FSe,"A",{href:!0});var X4t=s(Qz);Snr=r(X4t,"ViTForMaskedImageModeling"),X4t.forEach(t),Rnr=r(FSe," (ViT model)"),FSe.forEach(t),dee.forEach(t),Pnr=i(Fa),S3=n(Fa,"P",{});var TSe=s(S3);Bnr=r(TSe,"The model is set in evaluation mode by default using "),A1e=n(TSe,"CODE",{});var z4t=s(A1e);Inr=r(z4t,"model.eval()"),z4t.forEach(t),Nnr=r(TSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y1e=n(TSe,"CODE",{});var W4t=s(y1e);qnr=r(W4t,"model.train()"),W4t.forEach(t),TSe.forEach(t),jnr=i(Fa),T(R3.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),pje=i(f),$d=n(f,"H2",{class:!0});var FGe=s($d);P3=n(FGe,"A",{id:!0,class:!0,href:!0});var Q4t=s(P3);L1e=n(Q4t,"SPAN",{});var H4t=s(L1e);T(WL.$$.fragment,H4t),H4t.forEach(t),Q4t.forEach(t),Dnr=i(FGe),x1e=n(FGe,"SPAN",{});var U4t=s(x1e);Gnr=r(U4t,"AutoModelForObjectDetection"),U4t.forEach(t),FGe.forEach(t),_je=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(QL.$$.fragment,dl),Onr=i(dl),kd=n(dl,"P",{});var cee=s(kd);Vnr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Hz=n(cee,"A",{href:!0});var J4t=s(Hz);Xnr=r(J4t,"from_pretrained()"),J4t.forEach(t),znr=r(cee," class method or the "),Uz=n(cee,"A",{href:!0});var Y4t=s(Uz);Wnr=r(Y4t,"from_config()"),Y4t.forEach(t),Qnr=r(cee,` class
method.`),cee.forEach(t),Hnr=i(dl),HL=n(dl,"P",{});var TGe=s(HL);Unr=r(TGe,"This class cannot be instantiated directly using "),$1e=n(TGe,"CODE",{});var K4t=s($1e);Jnr=r(K4t,"__init__()"),K4t.forEach(t),Ynr=r(TGe," (throws an error)."),TGe.forEach(t),Knr=i(dl),Ct=n(dl,"DIV",{class:!0});var T6=s(Ct);T(UL.$$.fragment,T6),Znr=i(T6),k1e=n(T6,"P",{});var Z4t=s(k1e);esr=r(Z4t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Z4t.forEach(t),osr=i(T6),Sd=n(T6,"P",{});var fee=s(Sd);rsr=r(fee,`Note:
Loading a model from its configuration file does `),S1e=n(fee,"STRONG",{});var evt=s(S1e);tsr=r(evt,"not"),evt.forEach(t),asr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(fee,"A",{href:!0});var ovt=s(Jz);nsr=r(ovt,"from_pretrained()"),ovt.forEach(t),ssr=r(fee," to load the model weights."),fee.forEach(t),lsr=i(T6),T(B3.$$.fragment,T6),T6.forEach(t),isr=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(JL.$$.fragment,Ta),dsr=i(Ta),R1e=n(Ta,"P",{});var rvt=s(R1e);csr=r(rvt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),rvt.forEach(t),fsr=i(Ta),Ha=n(Ta,"P",{});var M6=s(Ha);msr=r(M6,"The model class to instantiate is selected based on the "),P1e=n(M6,"CODE",{});var tvt=s(P1e);gsr=r(tvt,"model_type"),tvt.forEach(t),hsr=r(M6,` property of the config object (either
passed as an argument or loaded from `),B1e=n(M6,"CODE",{});var avt=s(B1e);psr=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),_sr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=n(M6,"CODE",{});var nvt=s(I1e);usr=r(nvt,"pretrained_model_name_or_path"),nvt.forEach(t),bsr=r(M6,":"),M6.forEach(t),vsr=i(Ta),YL=n(Ta,"UL",{});var MGe=s(YL);I3=n(MGe,"LI",{});var MSe=s(I3);N1e=n(MSe,"STRONG",{});var svt=s(N1e);Fsr=r(svt,"detr"),svt.forEach(t),Tsr=r(MSe," \u2014 "),Yz=n(MSe,"A",{href:!0});var lvt=s(Yz);Msr=r(lvt,"DetrForObjectDetection"),lvt.forEach(t),Esr=r(MSe," (DETR model)"),MSe.forEach(t),Csr=i(MGe),N3=n(MGe,"LI",{});var ESe=s(N3);q1e=n(ESe,"STRONG",{});var ivt=s(q1e);wsr=r(ivt,"yolos"),ivt.forEach(t),Asr=r(ESe," \u2014 "),Kz=n(ESe,"A",{href:!0});var dvt=s(Kz);ysr=r(dvt,"YolosForObjectDetection"),dvt.forEach(t),Lsr=r(ESe," (YOLOS model)"),ESe.forEach(t),MGe.forEach(t),xsr=i(Ta),q3=n(Ta,"P",{});var CSe=s(q3);$sr=r(CSe,"The model is set in evaluation mode by default using "),j1e=n(CSe,"CODE",{});var cvt=s(j1e);ksr=r(cvt,"model.eval()"),cvt.forEach(t),Ssr=r(CSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D1e=n(CSe,"CODE",{});var fvt=s(D1e);Rsr=r(fvt,"model.train()"),fvt.forEach(t),CSe.forEach(t),Psr=i(Ta),T(j3.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),uje=i(f),Rd=n(f,"H2",{class:!0});var EGe=s(Rd);D3=n(EGe,"A",{id:!0,class:!0,href:!0});var mvt=s(D3);G1e=n(mvt,"SPAN",{});var gvt=s(G1e);T(KL.$$.fragment,gvt),gvt.forEach(t),mvt.forEach(t),Bsr=i(EGe),O1e=n(EGe,"SPAN",{});var hvt=s(O1e);Isr=r(hvt,"AutoModelForImageSegmentation"),hvt.forEach(t),EGe.forEach(t),bje=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(ZL.$$.fragment,cl),Nsr=i(cl),Pd=n(cl,"P",{});var mee=s(Pd);qsr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Zz=n(mee,"A",{href:!0});var pvt=s(Zz);jsr=r(pvt,"from_pretrained()"),pvt.forEach(t),Dsr=r(mee," class method or the "),eW=n(mee,"A",{href:!0});var _vt=s(eW);Gsr=r(_vt,"from_config()"),_vt.forEach(t),Osr=r(mee,` class
method.`),mee.forEach(t),Vsr=i(cl),e8=n(cl,"P",{});var CGe=s(e8);Xsr=r(CGe,"This class cannot be instantiated directly using "),V1e=n(CGe,"CODE",{});var uvt=s(V1e);zsr=r(uvt,"__init__()"),uvt.forEach(t),Wsr=r(CGe," (throws an error)."),CGe.forEach(t),Qsr=i(cl),wt=n(cl,"DIV",{class:!0});var E6=s(wt);T(o8.$$.fragment,E6),Hsr=i(E6),X1e=n(E6,"P",{});var bvt=s(X1e);Usr=r(bvt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),bvt.forEach(t),Jsr=i(E6),Bd=n(E6,"P",{});var gee=s(Bd);Ysr=r(gee,`Note:
Loading a model from its configuration file does `),z1e=n(gee,"STRONG",{});var vvt=s(z1e);Ksr=r(vvt,"not"),vvt.forEach(t),Zsr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=n(gee,"A",{href:!0});var Fvt=s(oW);elr=r(Fvt,"from_pretrained()"),Fvt.forEach(t),olr=r(gee," to load the model weights."),gee.forEach(t),rlr=i(E6),T(G3.$$.fragment,E6),E6.forEach(t),tlr=i(cl),uo=n(cl,"DIV",{class:!0});var Ma=s(uo);T(r8.$$.fragment,Ma),alr=i(Ma),W1e=n(Ma,"P",{});var Tvt=s(W1e);nlr=r(Tvt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Tvt.forEach(t),slr=i(Ma),Ua=n(Ma,"P",{});var C6=s(Ua);llr=r(C6,"The model class to instantiate is selected based on the "),Q1e=n(C6,"CODE",{});var Mvt=s(Q1e);ilr=r(Mvt,"model_type"),Mvt.forEach(t),dlr=r(C6,` property of the config object (either
passed as an argument or loaded from `),H1e=n(C6,"CODE",{});var Evt=s(H1e);clr=r(Evt,"pretrained_model_name_or_path"),Evt.forEach(t),flr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=n(C6,"CODE",{});var Cvt=s(U1e);mlr=r(Cvt,"pretrained_model_name_or_path"),Cvt.forEach(t),glr=r(C6,":"),C6.forEach(t),hlr=i(Ma),J1e=n(Ma,"UL",{});var wvt=s(J1e);O3=n(wvt,"LI",{});var wSe=s(O3);Y1e=n(wSe,"STRONG",{});var Avt=s(Y1e);plr=r(Avt,"detr"),Avt.forEach(t),_lr=r(wSe," \u2014 "),rW=n(wSe,"A",{href:!0});var yvt=s(rW);ulr=r(yvt,"DetrForSegmentation"),yvt.forEach(t),blr=r(wSe," (DETR model)"),wSe.forEach(t),wvt.forEach(t),vlr=i(Ma),V3=n(Ma,"P",{});var ASe=s(V3);Flr=r(ASe,"The model is set in evaluation mode by default using "),K1e=n(ASe,"CODE",{});var Lvt=s(K1e);Tlr=r(Lvt,"model.eval()"),Lvt.forEach(t),Mlr=r(ASe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z1e=n(ASe,"CODE",{});var xvt=s(Z1e);Elr=r(xvt,"model.train()"),xvt.forEach(t),ASe.forEach(t),Clr=i(Ma),T(X3.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),vje=i(f),Id=n(f,"H2",{class:!0});var wGe=s(Id);z3=n(wGe,"A",{id:!0,class:!0,href:!0});var $vt=s(z3);ebe=n($vt,"SPAN",{});var kvt=s(ebe);T(t8.$$.fragment,kvt),kvt.forEach(t),$vt.forEach(t),wlr=i(wGe),obe=n(wGe,"SPAN",{});var Svt=s(obe);Alr=r(Svt,"AutoModelForSemanticSegmentation"),Svt.forEach(t),wGe.forEach(t),Fje=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(a8.$$.fragment,fl),ylr=i(fl),Nd=n(fl,"P",{});var hee=s(Nd);Llr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),tW=n(hee,"A",{href:!0});var Rvt=s(tW);xlr=r(Rvt,"from_pretrained()"),Rvt.forEach(t),$lr=r(hee," class method or the "),aW=n(hee,"A",{href:!0});var Pvt=s(aW);klr=r(Pvt,"from_config()"),Pvt.forEach(t),Slr=r(hee,` class
method.`),hee.forEach(t),Rlr=i(fl),n8=n(fl,"P",{});var AGe=s(n8);Plr=r(AGe,"This class cannot be instantiated directly using "),rbe=n(AGe,"CODE",{});var Bvt=s(rbe);Blr=r(Bvt,"__init__()"),Bvt.forEach(t),Ilr=r(AGe," (throws an error)."),AGe.forEach(t),Nlr=i(fl),At=n(fl,"DIV",{class:!0});var w6=s(At);T(s8.$$.fragment,w6),qlr=i(w6),tbe=n(w6,"P",{});var Ivt=s(tbe);jlr=r(Ivt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ivt.forEach(t),Dlr=i(w6),qd=n(w6,"P",{});var pee=s(qd);Glr=r(pee,`Note:
Loading a model from its configuration file does `),abe=n(pee,"STRONG",{});var Nvt=s(abe);Olr=r(Nvt,"not"),Nvt.forEach(t),Vlr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=n(pee,"A",{href:!0});var qvt=s(nW);Xlr=r(qvt,"from_pretrained()"),qvt.forEach(t),zlr=r(pee," to load the model weights."),pee.forEach(t),Wlr=i(w6),T(W3.$$.fragment,w6),w6.forEach(t),Qlr=i(fl),bo=n(fl,"DIV",{class:!0});var Ea=s(bo);T(l8.$$.fragment,Ea),Hlr=i(Ea),nbe=n(Ea,"P",{});var jvt=s(nbe);Ulr=r(jvt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),jvt.forEach(t),Jlr=i(Ea),Ja=n(Ea,"P",{});var A6=s(Ja);Ylr=r(A6,"The model class to instantiate is selected based on the "),sbe=n(A6,"CODE",{});var Dvt=s(sbe);Klr=r(Dvt,"model_type"),Dvt.forEach(t),Zlr=r(A6,` property of the config object (either
passed as an argument or loaded from `),lbe=n(A6,"CODE",{});var Gvt=s(lbe);eir=r(Gvt,"pretrained_model_name_or_path"),Gvt.forEach(t),oir=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=n(A6,"CODE",{});var Ovt=s(ibe);rir=r(Ovt,"pretrained_model_name_or_path"),Ovt.forEach(t),tir=r(A6,":"),A6.forEach(t),air=i(Ea),et=n(Ea,"UL",{});var ml=s(et);Q3=n(ml,"LI",{});var ySe=s(Q3);dbe=n(ySe,"STRONG",{});var Vvt=s(dbe);nir=r(Vvt,"beit"),Vvt.forEach(t),sir=r(ySe," \u2014 "),sW=n(ySe,"A",{href:!0});var Xvt=s(sW);lir=r(Xvt,"BeitForSemanticSegmentation"),Xvt.forEach(t),iir=r(ySe," (BEiT model)"),ySe.forEach(t),dir=i(ml),H3=n(ml,"LI",{});var LSe=s(H3);cbe=n(LSe,"STRONG",{});var zvt=s(cbe);cir=r(zvt,"data2vec-vision"),zvt.forEach(t),fir=r(LSe," \u2014 "),lW=n(LSe,"A",{href:!0});var Wvt=s(lW);mir=r(Wvt,"Data2VecVisionForSemanticSegmentation"),Wvt.forEach(t),gir=r(LSe," (Data2VecVision model)"),LSe.forEach(t),hir=i(ml),U3=n(ml,"LI",{});var xSe=s(U3);fbe=n(xSe,"STRONG",{});var Qvt=s(fbe);pir=r(Qvt,"dpt"),Qvt.forEach(t),_ir=r(xSe," \u2014 "),iW=n(xSe,"A",{href:!0});var Hvt=s(iW);uir=r(Hvt,"DPTForSemanticSegmentation"),Hvt.forEach(t),bir=r(xSe," (DPT model)"),xSe.forEach(t),vir=i(ml),J3=n(ml,"LI",{});var $Se=s(J3);mbe=n($Se,"STRONG",{});var Uvt=s(mbe);Fir=r(Uvt,"mobilevit"),Uvt.forEach(t),Tir=r($Se," \u2014 "),dW=n($Se,"A",{href:!0});var Jvt=s(dW);Mir=r(Jvt,"MobileViTForSemanticSegmentation"),Jvt.forEach(t),Eir=r($Se," (MobileViT model)"),$Se.forEach(t),Cir=i(ml),Y3=n(ml,"LI",{});var kSe=s(Y3);gbe=n(kSe,"STRONG",{});var Yvt=s(gbe);wir=r(Yvt,"segformer"),Yvt.forEach(t),Air=r(kSe," \u2014 "),cW=n(kSe,"A",{href:!0});var Kvt=s(cW);yir=r(Kvt,"SegformerForSemanticSegmentation"),Kvt.forEach(t),Lir=r(kSe," (SegFormer model)"),kSe.forEach(t),ml.forEach(t),xir=i(Ea),K3=n(Ea,"P",{});var SSe=s(K3);$ir=r(SSe,"The model is set in evaluation mode by default using "),hbe=n(SSe,"CODE",{});var Zvt=s(hbe);kir=r(Zvt,"model.eval()"),Zvt.forEach(t),Sir=r(SSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pbe=n(SSe,"CODE",{});var e5t=s(pbe);Rir=r(e5t,"model.train()"),e5t.forEach(t),SSe.forEach(t),Pir=i(Ea),T(Z3.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),Tje=i(f),jd=n(f,"H2",{class:!0});var yGe=s(jd);eF=n(yGe,"A",{id:!0,class:!0,href:!0});var o5t=s(eF);_be=n(o5t,"SPAN",{});var r5t=s(_be);T(i8.$$.fragment,r5t),r5t.forEach(t),o5t.forEach(t),Bir=i(yGe),ube=n(yGe,"SPAN",{});var t5t=s(ube);Iir=r(t5t,"AutoModelForInstanceSegmentation"),t5t.forEach(t),yGe.forEach(t),Mje=i(f),Jo=n(f,"DIV",{class:!0});var gl=s(Jo);T(d8.$$.fragment,gl),Nir=i(gl),Dd=n(gl,"P",{});var _ee=s(Dd);qir=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),fW=n(_ee,"A",{href:!0});var a5t=s(fW);jir=r(a5t,"from_pretrained()"),a5t.forEach(t),Dir=r(_ee," class method or the "),mW=n(_ee,"A",{href:!0});var n5t=s(mW);Gir=r(n5t,"from_config()"),n5t.forEach(t),Oir=r(_ee,` class
method.`),_ee.forEach(t),Vir=i(gl),c8=n(gl,"P",{});var LGe=s(c8);Xir=r(LGe,"This class cannot be instantiated directly using "),bbe=n(LGe,"CODE",{});var s5t=s(bbe);zir=r(s5t,"__init__()"),s5t.forEach(t),Wir=r(LGe," (throws an error)."),LGe.forEach(t),Qir=i(gl),yt=n(gl,"DIV",{class:!0});var y6=s(yt);T(f8.$$.fragment,y6),Hir=i(y6),vbe=n(y6,"P",{});var l5t=s(vbe);Uir=r(l5t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),l5t.forEach(t),Jir=i(y6),Gd=n(y6,"P",{});var uee=s(Gd);Yir=r(uee,`Note:
Loading a model from its configuration file does `),Fbe=n(uee,"STRONG",{});var i5t=s(Fbe);Kir=r(i5t,"not"),i5t.forEach(t),Zir=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(uee,"A",{href:!0});var d5t=s(gW);edr=r(d5t,"from_pretrained()"),d5t.forEach(t),odr=r(uee," to load the model weights."),uee.forEach(t),rdr=i(y6),T(oF.$$.fragment,y6),y6.forEach(t),tdr=i(gl),vo=n(gl,"DIV",{class:!0});var Ca=s(vo);T(m8.$$.fragment,Ca),adr=i(Ca),Tbe=n(Ca,"P",{});var c5t=s(Tbe);ndr=r(c5t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),c5t.forEach(t),sdr=i(Ca),Ya=n(Ca,"P",{});var L6=s(Ya);ldr=r(L6,"The model class to instantiate is selected based on the "),Mbe=n(L6,"CODE",{});var f5t=s(Mbe);idr=r(f5t,"model_type"),f5t.forEach(t),ddr=r(L6,` property of the config object (either
passed as an argument or loaded from `),Ebe=n(L6,"CODE",{});var m5t=s(Ebe);cdr=r(m5t,"pretrained_model_name_or_path"),m5t.forEach(t),fdr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cbe=n(L6,"CODE",{});var g5t=s(Cbe);mdr=r(g5t,"pretrained_model_name_or_path"),g5t.forEach(t),gdr=r(L6,":"),L6.forEach(t),hdr=i(Ca),wbe=n(Ca,"UL",{});var h5t=s(wbe);rF=n(h5t,"LI",{});var RSe=s(rF);Abe=n(RSe,"STRONG",{});var p5t=s(Abe);pdr=r(p5t,"maskformer"),p5t.forEach(t),_dr=r(RSe," \u2014 "),hW=n(RSe,"A",{href:!0});var _5t=s(hW);udr=r(_5t,"MaskFormerForInstanceSegmentation"),_5t.forEach(t),bdr=r(RSe," (MaskFormer model)"),RSe.forEach(t),h5t.forEach(t),vdr=i(Ca),tF=n(Ca,"P",{});var PSe=s(tF);Fdr=r(PSe,"The model is set in evaluation mode by default using "),ybe=n(PSe,"CODE",{});var u5t=s(ybe);Tdr=r(u5t,"model.eval()"),u5t.forEach(t),Mdr=r(PSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lbe=n(PSe,"CODE",{});var b5t=s(Lbe);Edr=r(b5t,"model.train()"),b5t.forEach(t),PSe.forEach(t),Cdr=i(Ca),T(aF.$$.fragment,Ca),Ca.forEach(t),gl.forEach(t),Eje=i(f),Od=n(f,"H2",{class:!0});var xGe=s(Od);nF=n(xGe,"A",{id:!0,class:!0,href:!0});var v5t=s(nF);xbe=n(v5t,"SPAN",{});var F5t=s(xbe);T(g8.$$.fragment,F5t),F5t.forEach(t),v5t.forEach(t),wdr=i(xGe),$be=n(xGe,"SPAN",{});var T5t=s($be);Adr=r(T5t,"TFAutoModel"),T5t.forEach(t),xGe.forEach(t),Cje=i(f),Yo=n(f,"DIV",{class:!0});var hl=s(Yo);T(h8.$$.fragment,hl),ydr=i(hl),Vd=n(hl,"P",{});var bee=s(Vd);Ldr=r(bee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pW=n(bee,"A",{href:!0});var M5t=s(pW);xdr=r(M5t,"from_pretrained()"),M5t.forEach(t),$dr=r(bee," class method or the "),_W=n(bee,"A",{href:!0});var E5t=s(_W);kdr=r(E5t,"from_config()"),E5t.forEach(t),Sdr=r(bee,` class
method.`),bee.forEach(t),Rdr=i(hl),p8=n(hl,"P",{});var $Ge=s(p8);Pdr=r($Ge,"This class cannot be instantiated directly using "),kbe=n($Ge,"CODE",{});var C5t=s(kbe);Bdr=r(C5t,"__init__()"),C5t.forEach(t),Idr=r($Ge," (throws an error)."),$Ge.forEach(t),Ndr=i(hl),Lt=n(hl,"DIV",{class:!0});var x6=s(Lt);T(_8.$$.fragment,x6),qdr=i(x6),Sbe=n(x6,"P",{});var w5t=s(Sbe);jdr=r(w5t,"Instantiates one of the base model classes of the library from a configuration."),w5t.forEach(t),Ddr=i(x6),Xd=n(x6,"P",{});var vee=s(Xd);Gdr=r(vee,`Note:
Loading a model from its configuration file does `),Rbe=n(vee,"STRONG",{});var A5t=s(Rbe);Odr=r(A5t,"not"),A5t.forEach(t),Vdr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(vee,"A",{href:!0});var y5t=s(uW);Xdr=r(y5t,"from_pretrained()"),y5t.forEach(t),zdr=r(vee," to load the model weights."),vee.forEach(t),Wdr=i(x6),T(sF.$$.fragment,x6),x6.forEach(t),Qdr=i(hl),wr=n(hl,"DIV",{class:!0});var pl=s(wr);T(u8.$$.fragment,pl),Hdr=i(pl),Pbe=n(pl,"P",{});var L5t=s(Pbe);Udr=r(L5t,"Instantiate one of the base model classes of the library from a pretrained model."),L5t.forEach(t),Jdr=i(pl),Ka=n(pl,"P",{});var $6=s(Ka);Ydr=r($6,"The model class to instantiate is selected based on the "),Bbe=n($6,"CODE",{});var x5t=s(Bbe);Kdr=r(x5t,"model_type"),x5t.forEach(t),Zdr=r($6,` property of the config object (either
passed as an argument or loaded from `),Ibe=n($6,"CODE",{});var $5t=s(Ibe);ecr=r($5t,"pretrained_model_name_or_path"),$5t.forEach(t),ocr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=n($6,"CODE",{});var k5t=s(Nbe);rcr=r(k5t,"pretrained_model_name_or_path"),k5t.forEach(t),tcr=r($6,":"),$6.forEach(t),acr=i(pl),q=n(pl,"UL",{});var D=s(q);lF=n(D,"LI",{});var BSe=s(lF);qbe=n(BSe,"STRONG",{});var S5t=s(qbe);ncr=r(S5t,"albert"),S5t.forEach(t),scr=r(BSe," \u2014 "),bW=n(BSe,"A",{href:!0});var R5t=s(bW);lcr=r(R5t,"TFAlbertModel"),R5t.forEach(t),icr=r(BSe," (ALBERT model)"),BSe.forEach(t),dcr=i(D),iF=n(D,"LI",{});var ISe=s(iF);jbe=n(ISe,"STRONG",{});var P5t=s(jbe);ccr=r(P5t,"bart"),P5t.forEach(t),fcr=r(ISe," \u2014 "),vW=n(ISe,"A",{href:!0});var B5t=s(vW);mcr=r(B5t,"TFBartModel"),B5t.forEach(t),gcr=r(ISe," (BART model)"),ISe.forEach(t),hcr=i(D),dF=n(D,"LI",{});var NSe=s(dF);Dbe=n(NSe,"STRONG",{});var I5t=s(Dbe);pcr=r(I5t,"bert"),I5t.forEach(t),_cr=r(NSe," \u2014 "),FW=n(NSe,"A",{href:!0});var N5t=s(FW);ucr=r(N5t,"TFBertModel"),N5t.forEach(t),bcr=r(NSe," (BERT model)"),NSe.forEach(t),vcr=i(D),cF=n(D,"LI",{});var qSe=s(cF);Gbe=n(qSe,"STRONG",{});var q5t=s(Gbe);Fcr=r(q5t,"blenderbot"),q5t.forEach(t),Tcr=r(qSe," \u2014 "),TW=n(qSe,"A",{href:!0});var j5t=s(TW);Mcr=r(j5t,"TFBlenderbotModel"),j5t.forEach(t),Ecr=r(qSe," (Blenderbot model)"),qSe.forEach(t),Ccr=i(D),fF=n(D,"LI",{});var jSe=s(fF);Obe=n(jSe,"STRONG",{});var D5t=s(Obe);wcr=r(D5t,"blenderbot-small"),D5t.forEach(t),Acr=r(jSe," \u2014 "),MW=n(jSe,"A",{href:!0});var G5t=s(MW);ycr=r(G5t,"TFBlenderbotSmallModel"),G5t.forEach(t),Lcr=r(jSe," (BlenderbotSmall model)"),jSe.forEach(t),xcr=i(D),mF=n(D,"LI",{});var DSe=s(mF);Vbe=n(DSe,"STRONG",{});var O5t=s(Vbe);$cr=r(O5t,"camembert"),O5t.forEach(t),kcr=r(DSe," \u2014 "),EW=n(DSe,"A",{href:!0});var V5t=s(EW);Scr=r(V5t,"TFCamembertModel"),V5t.forEach(t),Rcr=r(DSe," (CamemBERT model)"),DSe.forEach(t),Pcr=i(D),gF=n(D,"LI",{});var GSe=s(gF);Xbe=n(GSe,"STRONG",{});var X5t=s(Xbe);Bcr=r(X5t,"clip"),X5t.forEach(t),Icr=r(GSe," \u2014 "),CW=n(GSe,"A",{href:!0});var z5t=s(CW);Ncr=r(z5t,"TFCLIPModel"),z5t.forEach(t),qcr=r(GSe," (CLIP model)"),GSe.forEach(t),jcr=i(D),hF=n(D,"LI",{});var OSe=s(hF);zbe=n(OSe,"STRONG",{});var W5t=s(zbe);Dcr=r(W5t,"convbert"),W5t.forEach(t),Gcr=r(OSe," \u2014 "),wW=n(OSe,"A",{href:!0});var Q5t=s(wW);Ocr=r(Q5t,"TFConvBertModel"),Q5t.forEach(t),Vcr=r(OSe," (ConvBERT model)"),OSe.forEach(t),Xcr=i(D),pF=n(D,"LI",{});var VSe=s(pF);Wbe=n(VSe,"STRONG",{});var H5t=s(Wbe);zcr=r(H5t,"convnext"),H5t.forEach(t),Wcr=r(VSe," \u2014 "),AW=n(VSe,"A",{href:!0});var U5t=s(AW);Qcr=r(U5t,"TFConvNextModel"),U5t.forEach(t),Hcr=r(VSe," (ConvNext model)"),VSe.forEach(t),Ucr=i(D),_F=n(D,"LI",{});var XSe=s(_F);Qbe=n(XSe,"STRONG",{});var J5t=s(Qbe);Jcr=r(J5t,"ctrl"),J5t.forEach(t),Ycr=r(XSe," \u2014 "),yW=n(XSe,"A",{href:!0});var Y5t=s(yW);Kcr=r(Y5t,"TFCTRLModel"),Y5t.forEach(t),Zcr=r(XSe," (CTRL model)"),XSe.forEach(t),efr=i(D),uF=n(D,"LI",{});var zSe=s(uF);Hbe=n(zSe,"STRONG",{});var K5t=s(Hbe);ofr=r(K5t,"data2vec-vision"),K5t.forEach(t),rfr=r(zSe," \u2014 "),LW=n(zSe,"A",{href:!0});var Z5t=s(LW);tfr=r(Z5t,"TFData2VecVisionModel"),Z5t.forEach(t),afr=r(zSe," (Data2VecVision model)"),zSe.forEach(t),nfr=i(D),bF=n(D,"LI",{});var WSe=s(bF);Ube=n(WSe,"STRONG",{});var e3t=s(Ube);sfr=r(e3t,"deberta"),e3t.forEach(t),lfr=r(WSe," \u2014 "),xW=n(WSe,"A",{href:!0});var o3t=s(xW);ifr=r(o3t,"TFDebertaModel"),o3t.forEach(t),dfr=r(WSe," (DeBERTa model)"),WSe.forEach(t),cfr=i(D),vF=n(D,"LI",{});var QSe=s(vF);Jbe=n(QSe,"STRONG",{});var r3t=s(Jbe);ffr=r(r3t,"deberta-v2"),r3t.forEach(t),mfr=r(QSe," \u2014 "),$W=n(QSe,"A",{href:!0});var t3t=s($W);gfr=r(t3t,"TFDebertaV2Model"),t3t.forEach(t),hfr=r(QSe," (DeBERTa-v2 model)"),QSe.forEach(t),pfr=i(D),FF=n(D,"LI",{});var HSe=s(FF);Ybe=n(HSe,"STRONG",{});var a3t=s(Ybe);_fr=r(a3t,"distilbert"),a3t.forEach(t),ufr=r(HSe," \u2014 "),kW=n(HSe,"A",{href:!0});var n3t=s(kW);bfr=r(n3t,"TFDistilBertModel"),n3t.forEach(t),vfr=r(HSe," (DistilBERT model)"),HSe.forEach(t),Ffr=i(D),TF=n(D,"LI",{});var USe=s(TF);Kbe=n(USe,"STRONG",{});var s3t=s(Kbe);Tfr=r(s3t,"dpr"),s3t.forEach(t),Mfr=r(USe," \u2014 "),SW=n(USe,"A",{href:!0});var l3t=s(SW);Efr=r(l3t,"TFDPRQuestionEncoder"),l3t.forEach(t),Cfr=r(USe," (DPR model)"),USe.forEach(t),wfr=i(D),MF=n(D,"LI",{});var JSe=s(MF);Zbe=n(JSe,"STRONG",{});var i3t=s(Zbe);Afr=r(i3t,"electra"),i3t.forEach(t),yfr=r(JSe," \u2014 "),RW=n(JSe,"A",{href:!0});var d3t=s(RW);Lfr=r(d3t,"TFElectraModel"),d3t.forEach(t),xfr=r(JSe," (ELECTRA model)"),JSe.forEach(t),$fr=i(D),EF=n(D,"LI",{});var YSe=s(EF);e2e=n(YSe,"STRONG",{});var c3t=s(e2e);kfr=r(c3t,"flaubert"),c3t.forEach(t),Sfr=r(YSe," \u2014 "),PW=n(YSe,"A",{href:!0});var f3t=s(PW);Rfr=r(f3t,"TFFlaubertModel"),f3t.forEach(t),Pfr=r(YSe," (FlauBERT model)"),YSe.forEach(t),Bfr=i(D),Is=n(D,"LI",{});var U$=s(Is);o2e=n(U$,"STRONG",{});var m3t=s(o2e);Ifr=r(m3t,"funnel"),m3t.forEach(t),Nfr=r(U$," \u2014 "),BW=n(U$,"A",{href:!0});var g3t=s(BW);qfr=r(g3t,"TFFunnelModel"),g3t.forEach(t),jfr=r(U$," or "),IW=n(U$,"A",{href:!0});var h3t=s(IW);Dfr=r(h3t,"TFFunnelBaseModel"),h3t.forEach(t),Gfr=r(U$," (Funnel Transformer model)"),U$.forEach(t),Ofr=i(D),CF=n(D,"LI",{});var KSe=s(CF);r2e=n(KSe,"STRONG",{});var p3t=s(r2e);Vfr=r(p3t,"gpt2"),p3t.forEach(t),Xfr=r(KSe," \u2014 "),NW=n(KSe,"A",{href:!0});var _3t=s(NW);zfr=r(_3t,"TFGPT2Model"),_3t.forEach(t),Wfr=r(KSe," (OpenAI GPT-2 model)"),KSe.forEach(t),Qfr=i(D),wF=n(D,"LI",{});var ZSe=s(wF);t2e=n(ZSe,"STRONG",{});var u3t=s(t2e);Hfr=r(u3t,"gptj"),u3t.forEach(t),Ufr=r(ZSe," \u2014 "),qW=n(ZSe,"A",{href:!0});var b3t=s(qW);Jfr=r(b3t,"TFGPTJModel"),b3t.forEach(t),Yfr=r(ZSe," (GPT-J model)"),ZSe.forEach(t),Kfr=i(D),AF=n(D,"LI",{});var eRe=s(AF);a2e=n(eRe,"STRONG",{});var v3t=s(a2e);Zfr=r(v3t,"hubert"),v3t.forEach(t),emr=r(eRe," \u2014 "),jW=n(eRe,"A",{href:!0});var F3t=s(jW);omr=r(F3t,"TFHubertModel"),F3t.forEach(t),rmr=r(eRe," (Hubert model)"),eRe.forEach(t),tmr=i(D),yF=n(D,"LI",{});var oRe=s(yF);n2e=n(oRe,"STRONG",{});var T3t=s(n2e);amr=r(T3t,"layoutlm"),T3t.forEach(t),nmr=r(oRe," \u2014 "),DW=n(oRe,"A",{href:!0});var M3t=s(DW);smr=r(M3t,"TFLayoutLMModel"),M3t.forEach(t),lmr=r(oRe," (LayoutLM model)"),oRe.forEach(t),imr=i(D),LF=n(D,"LI",{});var rRe=s(LF);s2e=n(rRe,"STRONG",{});var E3t=s(s2e);dmr=r(E3t,"led"),E3t.forEach(t),cmr=r(rRe," \u2014 "),GW=n(rRe,"A",{href:!0});var C3t=s(GW);fmr=r(C3t,"TFLEDModel"),C3t.forEach(t),mmr=r(rRe," (LED model)"),rRe.forEach(t),gmr=i(D),xF=n(D,"LI",{});var tRe=s(xF);l2e=n(tRe,"STRONG",{});var w3t=s(l2e);hmr=r(w3t,"longformer"),w3t.forEach(t),pmr=r(tRe," \u2014 "),OW=n(tRe,"A",{href:!0});var A3t=s(OW);_mr=r(A3t,"TFLongformerModel"),A3t.forEach(t),umr=r(tRe," (Longformer model)"),tRe.forEach(t),bmr=i(D),$F=n(D,"LI",{});var aRe=s($F);i2e=n(aRe,"STRONG",{});var y3t=s(i2e);vmr=r(y3t,"lxmert"),y3t.forEach(t),Fmr=r(aRe," \u2014 "),VW=n(aRe,"A",{href:!0});var L3t=s(VW);Tmr=r(L3t,"TFLxmertModel"),L3t.forEach(t),Mmr=r(aRe," (LXMERT model)"),aRe.forEach(t),Emr=i(D),kF=n(D,"LI",{});var nRe=s(kF);d2e=n(nRe,"STRONG",{});var x3t=s(d2e);Cmr=r(x3t,"marian"),x3t.forEach(t),wmr=r(nRe," \u2014 "),XW=n(nRe,"A",{href:!0});var $3t=s(XW);Amr=r($3t,"TFMarianModel"),$3t.forEach(t),ymr=r(nRe," (Marian model)"),nRe.forEach(t),Lmr=i(D),SF=n(D,"LI",{});var sRe=s(SF);c2e=n(sRe,"STRONG",{});var k3t=s(c2e);xmr=r(k3t,"mbart"),k3t.forEach(t),$mr=r(sRe," \u2014 "),zW=n(sRe,"A",{href:!0});var S3t=s(zW);kmr=r(S3t,"TFMBartModel"),S3t.forEach(t),Smr=r(sRe," (mBART model)"),sRe.forEach(t),Rmr=i(D),RF=n(D,"LI",{});var lRe=s(RF);f2e=n(lRe,"STRONG",{});var R3t=s(f2e);Pmr=r(R3t,"mobilebert"),R3t.forEach(t),Bmr=r(lRe," \u2014 "),WW=n(lRe,"A",{href:!0});var P3t=s(WW);Imr=r(P3t,"TFMobileBertModel"),P3t.forEach(t),Nmr=r(lRe," (MobileBERT model)"),lRe.forEach(t),qmr=i(D),PF=n(D,"LI",{});var iRe=s(PF);m2e=n(iRe,"STRONG",{});var B3t=s(m2e);jmr=r(B3t,"mpnet"),B3t.forEach(t),Dmr=r(iRe," \u2014 "),QW=n(iRe,"A",{href:!0});var I3t=s(QW);Gmr=r(I3t,"TFMPNetModel"),I3t.forEach(t),Omr=r(iRe," (MPNet model)"),iRe.forEach(t),Vmr=i(D),BF=n(D,"LI",{});var dRe=s(BF);g2e=n(dRe,"STRONG",{});var N3t=s(g2e);Xmr=r(N3t,"mt5"),N3t.forEach(t),zmr=r(dRe," \u2014 "),HW=n(dRe,"A",{href:!0});var q3t=s(HW);Wmr=r(q3t,"TFMT5Model"),q3t.forEach(t),Qmr=r(dRe," (mT5 model)"),dRe.forEach(t),Hmr=i(D),IF=n(D,"LI",{});var cRe=s(IF);h2e=n(cRe,"STRONG",{});var j3t=s(h2e);Umr=r(j3t,"openai-gpt"),j3t.forEach(t),Jmr=r(cRe," \u2014 "),UW=n(cRe,"A",{href:!0});var D3t=s(UW);Ymr=r(D3t,"TFOpenAIGPTModel"),D3t.forEach(t),Kmr=r(cRe," (OpenAI GPT model)"),cRe.forEach(t),Zmr=i(D),NF=n(D,"LI",{});var fRe=s(NF);p2e=n(fRe,"STRONG",{});var G3t=s(p2e);egr=r(G3t,"pegasus"),G3t.forEach(t),ogr=r(fRe," \u2014 "),JW=n(fRe,"A",{href:!0});var O3t=s(JW);rgr=r(O3t,"TFPegasusModel"),O3t.forEach(t),tgr=r(fRe," (Pegasus model)"),fRe.forEach(t),agr=i(D),qF=n(D,"LI",{});var mRe=s(qF);_2e=n(mRe,"STRONG",{});var V3t=s(_2e);ngr=r(V3t,"rembert"),V3t.forEach(t),sgr=r(mRe," \u2014 "),YW=n(mRe,"A",{href:!0});var X3t=s(YW);lgr=r(X3t,"TFRemBertModel"),X3t.forEach(t),igr=r(mRe," (RemBERT model)"),mRe.forEach(t),dgr=i(D),jF=n(D,"LI",{});var gRe=s(jF);u2e=n(gRe,"STRONG",{});var z3t=s(u2e);cgr=r(z3t,"roberta"),z3t.forEach(t),fgr=r(gRe," \u2014 "),KW=n(gRe,"A",{href:!0});var W3t=s(KW);mgr=r(W3t,"TFRobertaModel"),W3t.forEach(t),ggr=r(gRe," (RoBERTa model)"),gRe.forEach(t),hgr=i(D),DF=n(D,"LI",{});var hRe=s(DF);b2e=n(hRe,"STRONG",{});var Q3t=s(b2e);pgr=r(Q3t,"roformer"),Q3t.forEach(t),_gr=r(hRe," \u2014 "),ZW=n(hRe,"A",{href:!0});var H3t=s(ZW);ugr=r(H3t,"TFRoFormerModel"),H3t.forEach(t),bgr=r(hRe," (RoFormer model)"),hRe.forEach(t),vgr=i(D),GF=n(D,"LI",{});var pRe=s(GF);v2e=n(pRe,"STRONG",{});var U3t=s(v2e);Fgr=r(U3t,"speech_to_text"),U3t.forEach(t),Tgr=r(pRe," \u2014 "),eQ=n(pRe,"A",{href:!0});var J3t=s(eQ);Mgr=r(J3t,"TFSpeech2TextModel"),J3t.forEach(t),Egr=r(pRe," (Speech2Text model)"),pRe.forEach(t),Cgr=i(D),OF=n(D,"LI",{});var _Re=s(OF);F2e=n(_Re,"STRONG",{});var Y3t=s(F2e);wgr=r(Y3t,"swin"),Y3t.forEach(t),Agr=r(_Re," \u2014 "),oQ=n(_Re,"A",{href:!0});var K3t=s(oQ);ygr=r(K3t,"TFSwinModel"),K3t.forEach(t),Lgr=r(_Re," (Swin model)"),_Re.forEach(t),xgr=i(D),VF=n(D,"LI",{});var uRe=s(VF);T2e=n(uRe,"STRONG",{});var Z3t=s(T2e);$gr=r(Z3t,"t5"),Z3t.forEach(t),kgr=r(uRe," \u2014 "),rQ=n(uRe,"A",{href:!0});var eFt=s(rQ);Sgr=r(eFt,"TFT5Model"),eFt.forEach(t),Rgr=r(uRe," (T5 model)"),uRe.forEach(t),Pgr=i(D),XF=n(D,"LI",{});var bRe=s(XF);M2e=n(bRe,"STRONG",{});var oFt=s(M2e);Bgr=r(oFt,"tapas"),oFt.forEach(t),Igr=r(bRe," \u2014 "),tQ=n(bRe,"A",{href:!0});var rFt=s(tQ);Ngr=r(rFt,"TFTapasModel"),rFt.forEach(t),qgr=r(bRe," (TAPAS model)"),bRe.forEach(t),jgr=i(D),zF=n(D,"LI",{});var vRe=s(zF);E2e=n(vRe,"STRONG",{});var tFt=s(E2e);Dgr=r(tFt,"transfo-xl"),tFt.forEach(t),Ggr=r(vRe," \u2014 "),aQ=n(vRe,"A",{href:!0});var aFt=s(aQ);Ogr=r(aFt,"TFTransfoXLModel"),aFt.forEach(t),Vgr=r(vRe," (Transformer-XL model)"),vRe.forEach(t),Xgr=i(D),WF=n(D,"LI",{});var FRe=s(WF);C2e=n(FRe,"STRONG",{});var nFt=s(C2e);zgr=r(nFt,"vit"),nFt.forEach(t),Wgr=r(FRe," \u2014 "),nQ=n(FRe,"A",{href:!0});var sFt=s(nQ);Qgr=r(sFt,"TFViTModel"),sFt.forEach(t),Hgr=r(FRe," (ViT model)"),FRe.forEach(t),Ugr=i(D),QF=n(D,"LI",{});var TRe=s(QF);w2e=n(TRe,"STRONG",{});var lFt=s(w2e);Jgr=r(lFt,"vit_mae"),lFt.forEach(t),Ygr=r(TRe," \u2014 "),sQ=n(TRe,"A",{href:!0});var iFt=s(sQ);Kgr=r(iFt,"TFViTMAEModel"),iFt.forEach(t),Zgr=r(TRe," (ViTMAE model)"),TRe.forEach(t),ehr=i(D),HF=n(D,"LI",{});var MRe=s(HF);A2e=n(MRe,"STRONG",{});var dFt=s(A2e);ohr=r(dFt,"wav2vec2"),dFt.forEach(t),rhr=r(MRe," \u2014 "),lQ=n(MRe,"A",{href:!0});var cFt=s(lQ);thr=r(cFt,"TFWav2Vec2Model"),cFt.forEach(t),ahr=r(MRe," (Wav2Vec2 model)"),MRe.forEach(t),nhr=i(D),UF=n(D,"LI",{});var ERe=s(UF);y2e=n(ERe,"STRONG",{});var fFt=s(y2e);shr=r(fFt,"xlm"),fFt.forEach(t),lhr=r(ERe," \u2014 "),iQ=n(ERe,"A",{href:!0});var mFt=s(iQ);ihr=r(mFt,"TFXLMModel"),mFt.forEach(t),dhr=r(ERe," (XLM model)"),ERe.forEach(t),chr=i(D),JF=n(D,"LI",{});var CRe=s(JF);L2e=n(CRe,"STRONG",{});var gFt=s(L2e);fhr=r(gFt,"xlm-roberta"),gFt.forEach(t),mhr=r(CRe," \u2014 "),dQ=n(CRe,"A",{href:!0});var hFt=s(dQ);ghr=r(hFt,"TFXLMRobertaModel"),hFt.forEach(t),hhr=r(CRe," (XLM-RoBERTa model)"),CRe.forEach(t),phr=i(D),YF=n(D,"LI",{});var wRe=s(YF);x2e=n(wRe,"STRONG",{});var pFt=s(x2e);_hr=r(pFt,"xlnet"),pFt.forEach(t),uhr=r(wRe," \u2014 "),cQ=n(wRe,"A",{href:!0});var _Ft=s(cQ);bhr=r(_Ft,"TFXLNetModel"),_Ft.forEach(t),vhr=r(wRe," (XLNet model)"),wRe.forEach(t),D.forEach(t),Fhr=i(pl),T(KF.$$.fragment,pl),pl.forEach(t),hl.forEach(t),wje=i(f),zd=n(f,"H2",{class:!0});var kGe=s(zd);ZF=n(kGe,"A",{id:!0,class:!0,href:!0});var uFt=s(ZF);$2e=n(uFt,"SPAN",{});var bFt=s($2e);T(b8.$$.fragment,bFt),bFt.forEach(t),uFt.forEach(t),Thr=i(kGe),k2e=n(kGe,"SPAN",{});var vFt=s(k2e);Mhr=r(vFt,"TFAutoModelForPreTraining"),vFt.forEach(t),kGe.forEach(t),Aje=i(f),Ko=n(f,"DIV",{class:!0});var _l=s(Ko);T(v8.$$.fragment,_l),Ehr=i(_l),Wd=n(_l,"P",{});var Fee=s(Wd);Chr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fQ=n(Fee,"A",{href:!0});var FFt=s(fQ);whr=r(FFt,"from_pretrained()"),FFt.forEach(t),Ahr=r(Fee," class method or the "),mQ=n(Fee,"A",{href:!0});var TFt=s(mQ);yhr=r(TFt,"from_config()"),TFt.forEach(t),Lhr=r(Fee,` class
method.`),Fee.forEach(t),xhr=i(_l),F8=n(_l,"P",{});var SGe=s(F8);$hr=r(SGe,"This class cannot be instantiated directly using "),S2e=n(SGe,"CODE",{});var MFt=s(S2e);khr=r(MFt,"__init__()"),MFt.forEach(t),Shr=r(SGe," (throws an error)."),SGe.forEach(t),Rhr=i(_l),xt=n(_l,"DIV",{class:!0});var k6=s(xt);T(T8.$$.fragment,k6),Phr=i(k6),R2e=n(k6,"P",{});var EFt=s(R2e);Bhr=r(EFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),EFt.forEach(t),Ihr=i(k6),Qd=n(k6,"P",{});var Tee=s(Qd);Nhr=r(Tee,`Note:
Loading a model from its configuration file does `),P2e=n(Tee,"STRONG",{});var CFt=s(P2e);qhr=r(CFt,"not"),CFt.forEach(t),jhr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=n(Tee,"A",{href:!0});var wFt=s(gQ);Dhr=r(wFt,"from_pretrained()"),wFt.forEach(t),Ghr=r(Tee," to load the model weights."),Tee.forEach(t),Ohr=i(k6),T(eT.$$.fragment,k6),k6.forEach(t),Vhr=i(_l),Ar=n(_l,"DIV",{class:!0});var ul=s(Ar);T(M8.$$.fragment,ul),Xhr=i(ul),B2e=n(ul,"P",{});var AFt=s(B2e);zhr=r(AFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),AFt.forEach(t),Whr=i(ul),Za=n(ul,"P",{});var S6=s(Za);Qhr=r(S6,"The model class to instantiate is selected based on the "),I2e=n(S6,"CODE",{});var yFt=s(I2e);Hhr=r(yFt,"model_type"),yFt.forEach(t),Uhr=r(S6,` property of the config object (either
passed as an argument or loaded from `),N2e=n(S6,"CODE",{});var LFt=s(N2e);Jhr=r(LFt,"pretrained_model_name_or_path"),LFt.forEach(t),Yhr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=n(S6,"CODE",{});var xFt=s(q2e);Khr=r(xFt,"pretrained_model_name_or_path"),xFt.forEach(t),Zhr=r(S6,":"),S6.forEach(t),epr=i(ul),se=n(ul,"UL",{});var le=s(se);oT=n(le,"LI",{});var ARe=s(oT);j2e=n(ARe,"STRONG",{});var $Ft=s(j2e);opr=r($Ft,"albert"),$Ft.forEach(t),rpr=r(ARe," \u2014 "),hQ=n(ARe,"A",{href:!0});var kFt=s(hQ);tpr=r(kFt,"TFAlbertForPreTraining"),kFt.forEach(t),apr=r(ARe," (ALBERT model)"),ARe.forEach(t),npr=i(le),rT=n(le,"LI",{});var yRe=s(rT);D2e=n(yRe,"STRONG",{});var SFt=s(D2e);spr=r(SFt,"bart"),SFt.forEach(t),lpr=r(yRe," \u2014 "),pQ=n(yRe,"A",{href:!0});var RFt=s(pQ);ipr=r(RFt,"TFBartForConditionalGeneration"),RFt.forEach(t),dpr=r(yRe," (BART model)"),yRe.forEach(t),cpr=i(le),tT=n(le,"LI",{});var LRe=s(tT);G2e=n(LRe,"STRONG",{});var PFt=s(G2e);fpr=r(PFt,"bert"),PFt.forEach(t),mpr=r(LRe," \u2014 "),_Q=n(LRe,"A",{href:!0});var BFt=s(_Q);gpr=r(BFt,"TFBertForPreTraining"),BFt.forEach(t),hpr=r(LRe," (BERT model)"),LRe.forEach(t),ppr=i(le),aT=n(le,"LI",{});var xRe=s(aT);O2e=n(xRe,"STRONG",{});var IFt=s(O2e);_pr=r(IFt,"camembert"),IFt.forEach(t),upr=r(xRe," \u2014 "),uQ=n(xRe,"A",{href:!0});var NFt=s(uQ);bpr=r(NFt,"TFCamembertForMaskedLM"),NFt.forEach(t),vpr=r(xRe," (CamemBERT model)"),xRe.forEach(t),Fpr=i(le),nT=n(le,"LI",{});var $Re=s(nT);V2e=n($Re,"STRONG",{});var qFt=s(V2e);Tpr=r(qFt,"ctrl"),qFt.forEach(t),Mpr=r($Re," \u2014 "),bQ=n($Re,"A",{href:!0});var jFt=s(bQ);Epr=r(jFt,"TFCTRLLMHeadModel"),jFt.forEach(t),Cpr=r($Re," (CTRL model)"),$Re.forEach(t),wpr=i(le),sT=n(le,"LI",{});var kRe=s(sT);X2e=n(kRe,"STRONG",{});var DFt=s(X2e);Apr=r(DFt,"distilbert"),DFt.forEach(t),ypr=r(kRe," \u2014 "),vQ=n(kRe,"A",{href:!0});var GFt=s(vQ);Lpr=r(GFt,"TFDistilBertForMaskedLM"),GFt.forEach(t),xpr=r(kRe," (DistilBERT model)"),kRe.forEach(t),$pr=i(le),lT=n(le,"LI",{});var SRe=s(lT);z2e=n(SRe,"STRONG",{});var OFt=s(z2e);kpr=r(OFt,"electra"),OFt.forEach(t),Spr=r(SRe," \u2014 "),FQ=n(SRe,"A",{href:!0});var VFt=s(FQ);Rpr=r(VFt,"TFElectraForPreTraining"),VFt.forEach(t),Ppr=r(SRe," (ELECTRA model)"),SRe.forEach(t),Bpr=i(le),iT=n(le,"LI",{});var RRe=s(iT);W2e=n(RRe,"STRONG",{});var XFt=s(W2e);Ipr=r(XFt,"flaubert"),XFt.forEach(t),Npr=r(RRe," \u2014 "),TQ=n(RRe,"A",{href:!0});var zFt=s(TQ);qpr=r(zFt,"TFFlaubertWithLMHeadModel"),zFt.forEach(t),jpr=r(RRe," (FlauBERT model)"),RRe.forEach(t),Dpr=i(le),dT=n(le,"LI",{});var PRe=s(dT);Q2e=n(PRe,"STRONG",{});var WFt=s(Q2e);Gpr=r(WFt,"funnel"),WFt.forEach(t),Opr=r(PRe," \u2014 "),MQ=n(PRe,"A",{href:!0});var QFt=s(MQ);Vpr=r(QFt,"TFFunnelForPreTraining"),QFt.forEach(t),Xpr=r(PRe," (Funnel Transformer model)"),PRe.forEach(t),zpr=i(le),cT=n(le,"LI",{});var BRe=s(cT);H2e=n(BRe,"STRONG",{});var HFt=s(H2e);Wpr=r(HFt,"gpt2"),HFt.forEach(t),Qpr=r(BRe," \u2014 "),EQ=n(BRe,"A",{href:!0});var UFt=s(EQ);Hpr=r(UFt,"TFGPT2LMHeadModel"),UFt.forEach(t),Upr=r(BRe," (OpenAI GPT-2 model)"),BRe.forEach(t),Jpr=i(le),fT=n(le,"LI",{});var IRe=s(fT);U2e=n(IRe,"STRONG",{});var JFt=s(U2e);Ypr=r(JFt,"layoutlm"),JFt.forEach(t),Kpr=r(IRe," \u2014 "),CQ=n(IRe,"A",{href:!0});var YFt=s(CQ);Zpr=r(YFt,"TFLayoutLMForMaskedLM"),YFt.forEach(t),e_r=r(IRe," (LayoutLM model)"),IRe.forEach(t),o_r=i(le),mT=n(le,"LI",{});var NRe=s(mT);J2e=n(NRe,"STRONG",{});var KFt=s(J2e);r_r=r(KFt,"lxmert"),KFt.forEach(t),t_r=r(NRe," \u2014 "),wQ=n(NRe,"A",{href:!0});var ZFt=s(wQ);a_r=r(ZFt,"TFLxmertForPreTraining"),ZFt.forEach(t),n_r=r(NRe," (LXMERT model)"),NRe.forEach(t),s_r=i(le),gT=n(le,"LI",{});var qRe=s(gT);Y2e=n(qRe,"STRONG",{});var eTt=s(Y2e);l_r=r(eTt,"mobilebert"),eTt.forEach(t),i_r=r(qRe," \u2014 "),AQ=n(qRe,"A",{href:!0});var oTt=s(AQ);d_r=r(oTt,"TFMobileBertForPreTraining"),oTt.forEach(t),c_r=r(qRe," (MobileBERT model)"),qRe.forEach(t),f_r=i(le),hT=n(le,"LI",{});var jRe=s(hT);K2e=n(jRe,"STRONG",{});var rTt=s(K2e);m_r=r(rTt,"mpnet"),rTt.forEach(t),g_r=r(jRe," \u2014 "),yQ=n(jRe,"A",{href:!0});var tTt=s(yQ);h_r=r(tTt,"TFMPNetForMaskedLM"),tTt.forEach(t),p_r=r(jRe," (MPNet model)"),jRe.forEach(t),__r=i(le),pT=n(le,"LI",{});var DRe=s(pT);Z2e=n(DRe,"STRONG",{});var aTt=s(Z2e);u_r=r(aTt,"openai-gpt"),aTt.forEach(t),b_r=r(DRe," \u2014 "),LQ=n(DRe,"A",{href:!0});var nTt=s(LQ);v_r=r(nTt,"TFOpenAIGPTLMHeadModel"),nTt.forEach(t),F_r=r(DRe," (OpenAI GPT model)"),DRe.forEach(t),T_r=i(le),_T=n(le,"LI",{});var GRe=s(_T);e4e=n(GRe,"STRONG",{});var sTt=s(e4e);M_r=r(sTt,"roberta"),sTt.forEach(t),E_r=r(GRe," \u2014 "),xQ=n(GRe,"A",{href:!0});var lTt=s(xQ);C_r=r(lTt,"TFRobertaForMaskedLM"),lTt.forEach(t),w_r=r(GRe," (RoBERTa model)"),GRe.forEach(t),A_r=i(le),uT=n(le,"LI",{});var ORe=s(uT);o4e=n(ORe,"STRONG",{});var iTt=s(o4e);y_r=r(iTt,"t5"),iTt.forEach(t),L_r=r(ORe," \u2014 "),$Q=n(ORe,"A",{href:!0});var dTt=s($Q);x_r=r(dTt,"TFT5ForConditionalGeneration"),dTt.forEach(t),$_r=r(ORe," (T5 model)"),ORe.forEach(t),k_r=i(le),bT=n(le,"LI",{});var VRe=s(bT);r4e=n(VRe,"STRONG",{});var cTt=s(r4e);S_r=r(cTt,"tapas"),cTt.forEach(t),R_r=r(VRe," \u2014 "),kQ=n(VRe,"A",{href:!0});var fTt=s(kQ);P_r=r(fTt,"TFTapasForMaskedLM"),fTt.forEach(t),B_r=r(VRe," (TAPAS model)"),VRe.forEach(t),I_r=i(le),vT=n(le,"LI",{});var XRe=s(vT);t4e=n(XRe,"STRONG",{});var mTt=s(t4e);N_r=r(mTt,"transfo-xl"),mTt.forEach(t),q_r=r(XRe," \u2014 "),SQ=n(XRe,"A",{href:!0});var gTt=s(SQ);j_r=r(gTt,"TFTransfoXLLMHeadModel"),gTt.forEach(t),D_r=r(XRe," (Transformer-XL model)"),XRe.forEach(t),G_r=i(le),FT=n(le,"LI",{});var zRe=s(FT);a4e=n(zRe,"STRONG",{});var hTt=s(a4e);O_r=r(hTt,"vit_mae"),hTt.forEach(t),V_r=r(zRe," \u2014 "),RQ=n(zRe,"A",{href:!0});var pTt=s(RQ);X_r=r(pTt,"TFViTMAEForPreTraining"),pTt.forEach(t),z_r=r(zRe," (ViTMAE model)"),zRe.forEach(t),W_r=i(le),TT=n(le,"LI",{});var WRe=s(TT);n4e=n(WRe,"STRONG",{});var _Tt=s(n4e);Q_r=r(_Tt,"xlm"),_Tt.forEach(t),H_r=r(WRe," \u2014 "),PQ=n(WRe,"A",{href:!0});var uTt=s(PQ);U_r=r(uTt,"TFXLMWithLMHeadModel"),uTt.forEach(t),J_r=r(WRe," (XLM model)"),WRe.forEach(t),Y_r=i(le),MT=n(le,"LI",{});var QRe=s(MT);s4e=n(QRe,"STRONG",{});var bTt=s(s4e);K_r=r(bTt,"xlm-roberta"),bTt.forEach(t),Z_r=r(QRe," \u2014 "),BQ=n(QRe,"A",{href:!0});var vTt=s(BQ);eur=r(vTt,"TFXLMRobertaForMaskedLM"),vTt.forEach(t),our=r(QRe," (XLM-RoBERTa model)"),QRe.forEach(t),rur=i(le),ET=n(le,"LI",{});var HRe=s(ET);l4e=n(HRe,"STRONG",{});var FTt=s(l4e);tur=r(FTt,"xlnet"),FTt.forEach(t),aur=r(HRe," \u2014 "),IQ=n(HRe,"A",{href:!0});var TTt=s(IQ);nur=r(TTt,"TFXLNetLMHeadModel"),TTt.forEach(t),sur=r(HRe," (XLNet model)"),HRe.forEach(t),le.forEach(t),lur=i(ul),T(CT.$$.fragment,ul),ul.forEach(t),_l.forEach(t),yje=i(f),Hd=n(f,"H2",{class:!0});var RGe=s(Hd);wT=n(RGe,"A",{id:!0,class:!0,href:!0});var MTt=s(wT);i4e=n(MTt,"SPAN",{});var ETt=s(i4e);T(E8.$$.fragment,ETt),ETt.forEach(t),MTt.forEach(t),iur=i(RGe),d4e=n(RGe,"SPAN",{});var CTt=s(d4e);dur=r(CTt,"TFAutoModelForCausalLM"),CTt.forEach(t),RGe.forEach(t),Lje=i(f),Zo=n(f,"DIV",{class:!0});var bl=s(Zo);T(C8.$$.fragment,bl),cur=i(bl),Ud=n(bl,"P",{});var Mee=s(Ud);fur=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),NQ=n(Mee,"A",{href:!0});var wTt=s(NQ);mur=r(wTt,"from_pretrained()"),wTt.forEach(t),gur=r(Mee," class method or the "),qQ=n(Mee,"A",{href:!0});var ATt=s(qQ);hur=r(ATt,"from_config()"),ATt.forEach(t),pur=r(Mee,` class
method.`),Mee.forEach(t),_ur=i(bl),w8=n(bl,"P",{});var PGe=s(w8);uur=r(PGe,"This class cannot be instantiated directly using "),c4e=n(PGe,"CODE",{});var yTt=s(c4e);bur=r(yTt,"__init__()"),yTt.forEach(t),vur=r(PGe," (throws an error)."),PGe.forEach(t),Fur=i(bl),$t=n(bl,"DIV",{class:!0});var R6=s($t);T(A8.$$.fragment,R6),Tur=i(R6),f4e=n(R6,"P",{});var LTt=s(f4e);Mur=r(LTt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),LTt.forEach(t),Eur=i(R6),Jd=n(R6,"P",{});var Eee=s(Jd);Cur=r(Eee,`Note:
Loading a model from its configuration file does `),m4e=n(Eee,"STRONG",{});var xTt=s(m4e);wur=r(xTt,"not"),xTt.forEach(t),Aur=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=n(Eee,"A",{href:!0});var $Tt=s(jQ);yur=r($Tt,"from_pretrained()"),$Tt.forEach(t),Lur=r(Eee," to load the model weights."),Eee.forEach(t),xur=i(R6),T(AT.$$.fragment,R6),R6.forEach(t),$ur=i(bl),yr=n(bl,"DIV",{class:!0});var vl=s(yr);T(y8.$$.fragment,vl),kur=i(vl),g4e=n(vl,"P",{});var kTt=s(g4e);Sur=r(kTt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kTt.forEach(t),Rur=i(vl),en=n(vl,"P",{});var P6=s(en);Pur=r(P6,"The model class to instantiate is selected based on the "),h4e=n(P6,"CODE",{});var STt=s(h4e);Bur=r(STt,"model_type"),STt.forEach(t),Iur=r(P6,` property of the config object (either
passed as an argument or loaded from `),p4e=n(P6,"CODE",{});var RTt=s(p4e);Nur=r(RTt,"pretrained_model_name_or_path"),RTt.forEach(t),qur=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_4e=n(P6,"CODE",{});var PTt=s(_4e);jur=r(PTt,"pretrained_model_name_or_path"),PTt.forEach(t),Dur=r(P6,":"),P6.forEach(t),Gur=i(vl),Me=n(vl,"UL",{});var Ce=s(Me);yT=n(Ce,"LI",{});var URe=s(yT);u4e=n(URe,"STRONG",{});var BTt=s(u4e);Our=r(BTt,"bert"),BTt.forEach(t),Vur=r(URe," \u2014 "),DQ=n(URe,"A",{href:!0});var ITt=s(DQ);Xur=r(ITt,"TFBertLMHeadModel"),ITt.forEach(t),zur=r(URe," (BERT model)"),URe.forEach(t),Wur=i(Ce),LT=n(Ce,"LI",{});var JRe=s(LT);b4e=n(JRe,"STRONG",{});var NTt=s(b4e);Qur=r(NTt,"camembert"),NTt.forEach(t),Hur=r(JRe," \u2014 "),GQ=n(JRe,"A",{href:!0});var qTt=s(GQ);Uur=r(qTt,"TFCamembertForCausalLM"),qTt.forEach(t),Jur=r(JRe," (CamemBERT model)"),JRe.forEach(t),Yur=i(Ce),xT=n(Ce,"LI",{});var YRe=s(xT);v4e=n(YRe,"STRONG",{});var jTt=s(v4e);Kur=r(jTt,"ctrl"),jTt.forEach(t),Zur=r(YRe," \u2014 "),OQ=n(YRe,"A",{href:!0});var DTt=s(OQ);e1r=r(DTt,"TFCTRLLMHeadModel"),DTt.forEach(t),o1r=r(YRe," (CTRL model)"),YRe.forEach(t),r1r=i(Ce),$T=n(Ce,"LI",{});var KRe=s($T);F4e=n(KRe,"STRONG",{});var GTt=s(F4e);t1r=r(GTt,"gpt2"),GTt.forEach(t),a1r=r(KRe," \u2014 "),VQ=n(KRe,"A",{href:!0});var OTt=s(VQ);n1r=r(OTt,"TFGPT2LMHeadModel"),OTt.forEach(t),s1r=r(KRe," (OpenAI GPT-2 model)"),KRe.forEach(t),l1r=i(Ce),kT=n(Ce,"LI",{});var ZRe=s(kT);T4e=n(ZRe,"STRONG",{});var VTt=s(T4e);i1r=r(VTt,"gptj"),VTt.forEach(t),d1r=r(ZRe," \u2014 "),XQ=n(ZRe,"A",{href:!0});var XTt=s(XQ);c1r=r(XTt,"TFGPTJForCausalLM"),XTt.forEach(t),f1r=r(ZRe," (GPT-J model)"),ZRe.forEach(t),m1r=i(Ce),ST=n(Ce,"LI",{});var ePe=s(ST);M4e=n(ePe,"STRONG",{});var zTt=s(M4e);g1r=r(zTt,"openai-gpt"),zTt.forEach(t),h1r=r(ePe," \u2014 "),zQ=n(ePe,"A",{href:!0});var WTt=s(zQ);p1r=r(WTt,"TFOpenAIGPTLMHeadModel"),WTt.forEach(t),_1r=r(ePe," (OpenAI GPT model)"),ePe.forEach(t),u1r=i(Ce),RT=n(Ce,"LI",{});var oPe=s(RT);E4e=n(oPe,"STRONG",{});var QTt=s(E4e);b1r=r(QTt,"rembert"),QTt.forEach(t),v1r=r(oPe," \u2014 "),WQ=n(oPe,"A",{href:!0});var HTt=s(WQ);F1r=r(HTt,"TFRemBertForCausalLM"),HTt.forEach(t),T1r=r(oPe," (RemBERT model)"),oPe.forEach(t),M1r=i(Ce),PT=n(Ce,"LI",{});var rPe=s(PT);C4e=n(rPe,"STRONG",{});var UTt=s(C4e);E1r=r(UTt,"roberta"),UTt.forEach(t),C1r=r(rPe," \u2014 "),QQ=n(rPe,"A",{href:!0});var JTt=s(QQ);w1r=r(JTt,"TFRobertaForCausalLM"),JTt.forEach(t),A1r=r(rPe," (RoBERTa model)"),rPe.forEach(t),y1r=i(Ce),BT=n(Ce,"LI",{});var tPe=s(BT);w4e=n(tPe,"STRONG",{});var YTt=s(w4e);L1r=r(YTt,"roformer"),YTt.forEach(t),x1r=r(tPe," \u2014 "),HQ=n(tPe,"A",{href:!0});var KTt=s(HQ);$1r=r(KTt,"TFRoFormerForCausalLM"),KTt.forEach(t),k1r=r(tPe," (RoFormer model)"),tPe.forEach(t),S1r=i(Ce),IT=n(Ce,"LI",{});var aPe=s(IT);A4e=n(aPe,"STRONG",{});var ZTt=s(A4e);R1r=r(ZTt,"transfo-xl"),ZTt.forEach(t),P1r=r(aPe," \u2014 "),UQ=n(aPe,"A",{href:!0});var e7t=s(UQ);B1r=r(e7t,"TFTransfoXLLMHeadModel"),e7t.forEach(t),I1r=r(aPe," (Transformer-XL model)"),aPe.forEach(t),N1r=i(Ce),NT=n(Ce,"LI",{});var nPe=s(NT);y4e=n(nPe,"STRONG",{});var o7t=s(y4e);q1r=r(o7t,"xlm"),o7t.forEach(t),j1r=r(nPe," \u2014 "),JQ=n(nPe,"A",{href:!0});var r7t=s(JQ);D1r=r(r7t,"TFXLMWithLMHeadModel"),r7t.forEach(t),G1r=r(nPe," (XLM model)"),nPe.forEach(t),O1r=i(Ce),qT=n(Ce,"LI",{});var sPe=s(qT);L4e=n(sPe,"STRONG",{});var t7t=s(L4e);V1r=r(t7t,"xlnet"),t7t.forEach(t),X1r=r(sPe," \u2014 "),YQ=n(sPe,"A",{href:!0});var a7t=s(YQ);z1r=r(a7t,"TFXLNetLMHeadModel"),a7t.forEach(t),W1r=r(sPe," (XLNet model)"),sPe.forEach(t),Ce.forEach(t),Q1r=i(vl),T(jT.$$.fragment,vl),vl.forEach(t),bl.forEach(t),xje=i(f),Yd=n(f,"H2",{class:!0});var BGe=s(Yd);DT=n(BGe,"A",{id:!0,class:!0,href:!0});var n7t=s(DT);x4e=n(n7t,"SPAN",{});var s7t=s(x4e);T(L8.$$.fragment,s7t),s7t.forEach(t),n7t.forEach(t),H1r=i(BGe),$4e=n(BGe,"SPAN",{});var l7t=s($4e);U1r=r(l7t,"TFAutoModelForImageClassification"),l7t.forEach(t),BGe.forEach(t),$je=i(f),er=n(f,"DIV",{class:!0});var Fl=s(er);T(x8.$$.fragment,Fl),J1r=i(Fl),Kd=n(Fl,"P",{});var Cee=s(Kd);Y1r=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KQ=n(Cee,"A",{href:!0});var i7t=s(KQ);K1r=r(i7t,"from_pretrained()"),i7t.forEach(t),Z1r=r(Cee," class method or the "),ZQ=n(Cee,"A",{href:!0});var d7t=s(ZQ);ebr=r(d7t,"from_config()"),d7t.forEach(t),obr=r(Cee,` class
method.`),Cee.forEach(t),rbr=i(Fl),$8=n(Fl,"P",{});var IGe=s($8);tbr=r(IGe,"This class cannot be instantiated directly using "),k4e=n(IGe,"CODE",{});var c7t=s(k4e);abr=r(c7t,"__init__()"),c7t.forEach(t),nbr=r(IGe," (throws an error)."),IGe.forEach(t),sbr=i(Fl),kt=n(Fl,"DIV",{class:!0});var B6=s(kt);T(k8.$$.fragment,B6),lbr=i(B6),S4e=n(B6,"P",{});var f7t=s(S4e);ibr=r(f7t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),f7t.forEach(t),dbr=i(B6),Zd=n(B6,"P",{});var wee=s(Zd);cbr=r(wee,`Note:
Loading a model from its configuration file does `),R4e=n(wee,"STRONG",{});var m7t=s(R4e);fbr=r(m7t,"not"),m7t.forEach(t),mbr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(wee,"A",{href:!0});var g7t=s(eH);gbr=r(g7t,"from_pretrained()"),g7t.forEach(t),hbr=r(wee," to load the model weights."),wee.forEach(t),pbr=i(B6),T(GT.$$.fragment,B6),B6.forEach(t),_br=i(Fl),Lr=n(Fl,"DIV",{class:!0});var Tl=s(Lr);T(S8.$$.fragment,Tl),ubr=i(Tl),P4e=n(Tl,"P",{});var h7t=s(P4e);bbr=r(h7t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),h7t.forEach(t),vbr=i(Tl),on=n(Tl,"P",{});var I6=s(on);Fbr=r(I6,"The model class to instantiate is selected based on the "),B4e=n(I6,"CODE",{});var p7t=s(B4e);Tbr=r(p7t,"model_type"),p7t.forEach(t),Mbr=r(I6,` property of the config object (either
passed as an argument or loaded from `),I4e=n(I6,"CODE",{});var _7t=s(I4e);Ebr=r(_7t,"pretrained_model_name_or_path"),_7t.forEach(t),Cbr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N4e=n(I6,"CODE",{});var u7t=s(N4e);wbr=r(u7t,"pretrained_model_name_or_path"),u7t.forEach(t),Abr=r(I6,":"),I6.forEach(t),ybr=i(Tl),rn=n(Tl,"UL",{});var N6=s(rn);OT=n(N6,"LI",{});var lPe=s(OT);q4e=n(lPe,"STRONG",{});var b7t=s(q4e);Lbr=r(b7t,"convnext"),b7t.forEach(t),xbr=r(lPe," \u2014 "),oH=n(lPe,"A",{href:!0});var v7t=s(oH);$br=r(v7t,"TFConvNextForImageClassification"),v7t.forEach(t),kbr=r(lPe," (ConvNext model)"),lPe.forEach(t),Sbr=i(N6),VT=n(N6,"LI",{});var iPe=s(VT);j4e=n(iPe,"STRONG",{});var F7t=s(j4e);Rbr=r(F7t,"data2vec-vision"),F7t.forEach(t),Pbr=r(iPe," \u2014 "),rH=n(iPe,"A",{href:!0});var T7t=s(rH);Bbr=r(T7t,"TFData2VecVisionForImageClassification"),T7t.forEach(t),Ibr=r(iPe," (Data2VecVision model)"),iPe.forEach(t),Nbr=i(N6),XT=n(N6,"LI",{});var dPe=s(XT);D4e=n(dPe,"STRONG",{});var M7t=s(D4e);qbr=r(M7t,"swin"),M7t.forEach(t),jbr=r(dPe," \u2014 "),tH=n(dPe,"A",{href:!0});var E7t=s(tH);Dbr=r(E7t,"TFSwinForImageClassification"),E7t.forEach(t),Gbr=r(dPe," (Swin model)"),dPe.forEach(t),Obr=i(N6),zT=n(N6,"LI",{});var cPe=s(zT);G4e=n(cPe,"STRONG",{});var C7t=s(G4e);Vbr=r(C7t,"vit"),C7t.forEach(t),Xbr=r(cPe," \u2014 "),aH=n(cPe,"A",{href:!0});var w7t=s(aH);zbr=r(w7t,"TFViTForImageClassification"),w7t.forEach(t),Wbr=r(cPe," (ViT model)"),cPe.forEach(t),N6.forEach(t),Qbr=i(Tl),T(WT.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),kje=i(f),ec=n(f,"H2",{class:!0});var NGe=s(ec);QT=n(NGe,"A",{id:!0,class:!0,href:!0});var A7t=s(QT);O4e=n(A7t,"SPAN",{});var y7t=s(O4e);T(R8.$$.fragment,y7t),y7t.forEach(t),A7t.forEach(t),Hbr=i(NGe),V4e=n(NGe,"SPAN",{});var L7t=s(V4e);Ubr=r(L7t,"TFAutoModelForMaskedLM"),L7t.forEach(t),NGe.forEach(t),Sje=i(f),or=n(f,"DIV",{class:!0});var Ml=s(or);T(P8.$$.fragment,Ml),Jbr=i(Ml),oc=n(Ml,"P",{});var Aee=s(oc);Ybr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nH=n(Aee,"A",{href:!0});var x7t=s(nH);Kbr=r(x7t,"from_pretrained()"),x7t.forEach(t),Zbr=r(Aee," class method or the "),sH=n(Aee,"A",{href:!0});var $7t=s(sH);e2r=r($7t,"from_config()"),$7t.forEach(t),o2r=r(Aee,` class
method.`),Aee.forEach(t),r2r=i(Ml),B8=n(Ml,"P",{});var qGe=s(B8);t2r=r(qGe,"This class cannot be instantiated directly using "),X4e=n(qGe,"CODE",{});var k7t=s(X4e);a2r=r(k7t,"__init__()"),k7t.forEach(t),n2r=r(qGe," (throws an error)."),qGe.forEach(t),s2r=i(Ml),St=n(Ml,"DIV",{class:!0});var q6=s(St);T(I8.$$.fragment,q6),l2r=i(q6),z4e=n(q6,"P",{});var S7t=s(z4e);i2r=r(S7t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),S7t.forEach(t),d2r=i(q6),rc=n(q6,"P",{});var yee=s(rc);c2r=r(yee,`Note:
Loading a model from its configuration file does `),W4e=n(yee,"STRONG",{});var R7t=s(W4e);f2r=r(R7t,"not"),R7t.forEach(t),m2r=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(yee,"A",{href:!0});var P7t=s(lH);g2r=r(P7t,"from_pretrained()"),P7t.forEach(t),h2r=r(yee," to load the model weights."),yee.forEach(t),p2r=i(q6),T(HT.$$.fragment,q6),q6.forEach(t),_2r=i(Ml),xr=n(Ml,"DIV",{class:!0});var El=s(xr);T(N8.$$.fragment,El),u2r=i(El),Q4e=n(El,"P",{});var B7t=s(Q4e);b2r=r(B7t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),B7t.forEach(t),v2r=i(El),tn=n(El,"P",{});var j6=s(tn);F2r=r(j6,"The model class to instantiate is selected based on the "),H4e=n(j6,"CODE",{});var I7t=s(H4e);T2r=r(I7t,"model_type"),I7t.forEach(t),M2r=r(j6,` property of the config object (either
passed as an argument or loaded from `),U4e=n(j6,"CODE",{});var N7t=s(U4e);E2r=r(N7t,"pretrained_model_name_or_path"),N7t.forEach(t),C2r=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=n(j6,"CODE",{});var q7t=s(J4e);w2r=r(q7t,"pretrained_model_name_or_path"),q7t.forEach(t),A2r=r(j6,":"),j6.forEach(t),y2r=i(El),ie=n(El,"UL",{});var fe=s(ie);UT=n(fe,"LI",{});var fPe=s(UT);Y4e=n(fPe,"STRONG",{});var j7t=s(Y4e);L2r=r(j7t,"albert"),j7t.forEach(t),x2r=r(fPe," \u2014 "),iH=n(fPe,"A",{href:!0});var D7t=s(iH);$2r=r(D7t,"TFAlbertForMaskedLM"),D7t.forEach(t),k2r=r(fPe," (ALBERT model)"),fPe.forEach(t),S2r=i(fe),JT=n(fe,"LI",{});var mPe=s(JT);K4e=n(mPe,"STRONG",{});var G7t=s(K4e);R2r=r(G7t,"bert"),G7t.forEach(t),P2r=r(mPe," \u2014 "),dH=n(mPe,"A",{href:!0});var O7t=s(dH);B2r=r(O7t,"TFBertForMaskedLM"),O7t.forEach(t),I2r=r(mPe," (BERT model)"),mPe.forEach(t),N2r=i(fe),YT=n(fe,"LI",{});var gPe=s(YT);Z4e=n(gPe,"STRONG",{});var V7t=s(Z4e);q2r=r(V7t,"camembert"),V7t.forEach(t),j2r=r(gPe," \u2014 "),cH=n(gPe,"A",{href:!0});var X7t=s(cH);D2r=r(X7t,"TFCamembertForMaskedLM"),X7t.forEach(t),G2r=r(gPe," (CamemBERT model)"),gPe.forEach(t),O2r=i(fe),KT=n(fe,"LI",{});var hPe=s(KT);eve=n(hPe,"STRONG",{});var z7t=s(eve);V2r=r(z7t,"convbert"),z7t.forEach(t),X2r=r(hPe," \u2014 "),fH=n(hPe,"A",{href:!0});var W7t=s(fH);z2r=r(W7t,"TFConvBertForMaskedLM"),W7t.forEach(t),W2r=r(hPe," (ConvBERT model)"),hPe.forEach(t),Q2r=i(fe),ZT=n(fe,"LI",{});var pPe=s(ZT);ove=n(pPe,"STRONG",{});var Q7t=s(ove);H2r=r(Q7t,"deberta"),Q7t.forEach(t),U2r=r(pPe," \u2014 "),mH=n(pPe,"A",{href:!0});var H7t=s(mH);J2r=r(H7t,"TFDebertaForMaskedLM"),H7t.forEach(t),Y2r=r(pPe," (DeBERTa model)"),pPe.forEach(t),K2r=i(fe),e7=n(fe,"LI",{});var _Pe=s(e7);rve=n(_Pe,"STRONG",{});var U7t=s(rve);Z2r=r(U7t,"deberta-v2"),U7t.forEach(t),e4r=r(_Pe," \u2014 "),gH=n(_Pe,"A",{href:!0});var J7t=s(gH);o4r=r(J7t,"TFDebertaV2ForMaskedLM"),J7t.forEach(t),r4r=r(_Pe," (DeBERTa-v2 model)"),_Pe.forEach(t),t4r=i(fe),o7=n(fe,"LI",{});var uPe=s(o7);tve=n(uPe,"STRONG",{});var Y7t=s(tve);a4r=r(Y7t,"distilbert"),Y7t.forEach(t),n4r=r(uPe," \u2014 "),hH=n(uPe,"A",{href:!0});var K7t=s(hH);s4r=r(K7t,"TFDistilBertForMaskedLM"),K7t.forEach(t),l4r=r(uPe," (DistilBERT model)"),uPe.forEach(t),i4r=i(fe),r7=n(fe,"LI",{});var bPe=s(r7);ave=n(bPe,"STRONG",{});var Z7t=s(ave);d4r=r(Z7t,"electra"),Z7t.forEach(t),c4r=r(bPe," \u2014 "),pH=n(bPe,"A",{href:!0});var eMt=s(pH);f4r=r(eMt,"TFElectraForMaskedLM"),eMt.forEach(t),m4r=r(bPe," (ELECTRA model)"),bPe.forEach(t),g4r=i(fe),t7=n(fe,"LI",{});var vPe=s(t7);nve=n(vPe,"STRONG",{});var oMt=s(nve);h4r=r(oMt,"flaubert"),oMt.forEach(t),p4r=r(vPe," \u2014 "),_H=n(vPe,"A",{href:!0});var rMt=s(_H);_4r=r(rMt,"TFFlaubertWithLMHeadModel"),rMt.forEach(t),u4r=r(vPe," (FlauBERT model)"),vPe.forEach(t),b4r=i(fe),a7=n(fe,"LI",{});var FPe=s(a7);sve=n(FPe,"STRONG",{});var tMt=s(sve);v4r=r(tMt,"funnel"),tMt.forEach(t),F4r=r(FPe," \u2014 "),uH=n(FPe,"A",{href:!0});var aMt=s(uH);T4r=r(aMt,"TFFunnelForMaskedLM"),aMt.forEach(t),M4r=r(FPe," (Funnel Transformer model)"),FPe.forEach(t),E4r=i(fe),n7=n(fe,"LI",{});var TPe=s(n7);lve=n(TPe,"STRONG",{});var nMt=s(lve);C4r=r(nMt,"layoutlm"),nMt.forEach(t),w4r=r(TPe," \u2014 "),bH=n(TPe,"A",{href:!0});var sMt=s(bH);A4r=r(sMt,"TFLayoutLMForMaskedLM"),sMt.forEach(t),y4r=r(TPe," (LayoutLM model)"),TPe.forEach(t),L4r=i(fe),s7=n(fe,"LI",{});var MPe=s(s7);ive=n(MPe,"STRONG",{});var lMt=s(ive);x4r=r(lMt,"longformer"),lMt.forEach(t),$4r=r(MPe," \u2014 "),vH=n(MPe,"A",{href:!0});var iMt=s(vH);k4r=r(iMt,"TFLongformerForMaskedLM"),iMt.forEach(t),S4r=r(MPe," (Longformer model)"),MPe.forEach(t),R4r=i(fe),l7=n(fe,"LI",{});var EPe=s(l7);dve=n(EPe,"STRONG",{});var dMt=s(dve);P4r=r(dMt,"mobilebert"),dMt.forEach(t),B4r=r(EPe," \u2014 "),FH=n(EPe,"A",{href:!0});var cMt=s(FH);I4r=r(cMt,"TFMobileBertForMaskedLM"),cMt.forEach(t),N4r=r(EPe," (MobileBERT model)"),EPe.forEach(t),q4r=i(fe),i7=n(fe,"LI",{});var CPe=s(i7);cve=n(CPe,"STRONG",{});var fMt=s(cve);j4r=r(fMt,"mpnet"),fMt.forEach(t),D4r=r(CPe," \u2014 "),TH=n(CPe,"A",{href:!0});var mMt=s(TH);G4r=r(mMt,"TFMPNetForMaskedLM"),mMt.forEach(t),O4r=r(CPe," (MPNet model)"),CPe.forEach(t),V4r=i(fe),d7=n(fe,"LI",{});var wPe=s(d7);fve=n(wPe,"STRONG",{});var gMt=s(fve);X4r=r(gMt,"rembert"),gMt.forEach(t),z4r=r(wPe," \u2014 "),MH=n(wPe,"A",{href:!0});var hMt=s(MH);W4r=r(hMt,"TFRemBertForMaskedLM"),hMt.forEach(t),Q4r=r(wPe," (RemBERT model)"),wPe.forEach(t),H4r=i(fe),c7=n(fe,"LI",{});var APe=s(c7);mve=n(APe,"STRONG",{});var pMt=s(mve);U4r=r(pMt,"roberta"),pMt.forEach(t),J4r=r(APe," \u2014 "),EH=n(APe,"A",{href:!0});var _Mt=s(EH);Y4r=r(_Mt,"TFRobertaForMaskedLM"),_Mt.forEach(t),K4r=r(APe," (RoBERTa model)"),APe.forEach(t),Z4r=i(fe),f7=n(fe,"LI",{});var yPe=s(f7);gve=n(yPe,"STRONG",{});var uMt=s(gve);evr=r(uMt,"roformer"),uMt.forEach(t),ovr=r(yPe," \u2014 "),CH=n(yPe,"A",{href:!0});var bMt=s(CH);rvr=r(bMt,"TFRoFormerForMaskedLM"),bMt.forEach(t),tvr=r(yPe," (RoFormer model)"),yPe.forEach(t),avr=i(fe),m7=n(fe,"LI",{});var LPe=s(m7);hve=n(LPe,"STRONG",{});var vMt=s(hve);nvr=r(vMt,"tapas"),vMt.forEach(t),svr=r(LPe," \u2014 "),wH=n(LPe,"A",{href:!0});var FMt=s(wH);lvr=r(FMt,"TFTapasForMaskedLM"),FMt.forEach(t),ivr=r(LPe," (TAPAS model)"),LPe.forEach(t),dvr=i(fe),g7=n(fe,"LI",{});var xPe=s(g7);pve=n(xPe,"STRONG",{});var TMt=s(pve);cvr=r(TMt,"xlm"),TMt.forEach(t),fvr=r(xPe," \u2014 "),AH=n(xPe,"A",{href:!0});var MMt=s(AH);mvr=r(MMt,"TFXLMWithLMHeadModel"),MMt.forEach(t),gvr=r(xPe," (XLM model)"),xPe.forEach(t),hvr=i(fe),h7=n(fe,"LI",{});var $Pe=s(h7);_ve=n($Pe,"STRONG",{});var EMt=s(_ve);pvr=r(EMt,"xlm-roberta"),EMt.forEach(t),_vr=r($Pe," \u2014 "),yH=n($Pe,"A",{href:!0});var CMt=s(yH);uvr=r(CMt,"TFXLMRobertaForMaskedLM"),CMt.forEach(t),bvr=r($Pe," (XLM-RoBERTa model)"),$Pe.forEach(t),fe.forEach(t),vvr=i(El),T(p7.$$.fragment,El),El.forEach(t),Ml.forEach(t),Rje=i(f),tc=n(f,"H2",{class:!0});var jGe=s(tc);_7=n(jGe,"A",{id:!0,class:!0,href:!0});var wMt=s(_7);uve=n(wMt,"SPAN",{});var AMt=s(uve);T(q8.$$.fragment,AMt),AMt.forEach(t),wMt.forEach(t),Fvr=i(jGe),bve=n(jGe,"SPAN",{});var yMt=s(bve);Tvr=r(yMt,"TFAutoModelForSeq2SeqLM"),yMt.forEach(t),jGe.forEach(t),Pje=i(f),rr=n(f,"DIV",{class:!0});var Cl=s(rr);T(j8.$$.fragment,Cl),Mvr=i(Cl),ac=n(Cl,"P",{});var Lee=s(ac);Evr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LH=n(Lee,"A",{href:!0});var LMt=s(LH);Cvr=r(LMt,"from_pretrained()"),LMt.forEach(t),wvr=r(Lee," class method or the "),xH=n(Lee,"A",{href:!0});var xMt=s(xH);Avr=r(xMt,"from_config()"),xMt.forEach(t),yvr=r(Lee,` class
method.`),Lee.forEach(t),Lvr=i(Cl),D8=n(Cl,"P",{});var DGe=s(D8);xvr=r(DGe,"This class cannot be instantiated directly using "),vve=n(DGe,"CODE",{});var $Mt=s(vve);$vr=r($Mt,"__init__()"),$Mt.forEach(t),kvr=r(DGe," (throws an error)."),DGe.forEach(t),Svr=i(Cl),Rt=n(Cl,"DIV",{class:!0});var D6=s(Rt);T(G8.$$.fragment,D6),Rvr=i(D6),Fve=n(D6,"P",{});var kMt=s(Fve);Pvr=r(kMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kMt.forEach(t),Bvr=i(D6),nc=n(D6,"P",{});var xee=s(nc);Ivr=r(xee,`Note:
Loading a model from its configuration file does `),Tve=n(xee,"STRONG",{});var SMt=s(Tve);Nvr=r(SMt,"not"),SMt.forEach(t),qvr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(xee,"A",{href:!0});var RMt=s($H);jvr=r(RMt,"from_pretrained()"),RMt.forEach(t),Dvr=r(xee," to load the model weights."),xee.forEach(t),Gvr=i(D6),T(u7.$$.fragment,D6),D6.forEach(t),Ovr=i(Cl),$r=n(Cl,"DIV",{class:!0});var wl=s($r);T(O8.$$.fragment,wl),Vvr=i(wl),Mve=n(wl,"P",{});var PMt=s(Mve);Xvr=r(PMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),PMt.forEach(t),zvr=i(wl),an=n(wl,"P",{});var G6=s(an);Wvr=r(G6,"The model class to instantiate is selected based on the "),Eve=n(G6,"CODE",{});var BMt=s(Eve);Qvr=r(BMt,"model_type"),BMt.forEach(t),Hvr=r(G6,` property of the config object (either
passed as an argument or loaded from `),Cve=n(G6,"CODE",{});var IMt=s(Cve);Uvr=r(IMt,"pretrained_model_name_or_path"),IMt.forEach(t),Jvr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=n(G6,"CODE",{});var NMt=s(wve);Yvr=r(NMt,"pretrained_model_name_or_path"),NMt.forEach(t),Kvr=r(G6,":"),G6.forEach(t),Zvr=i(wl),ye=n(wl,"UL",{});var Be=s(ye);b7=n(Be,"LI",{});var kPe=s(b7);Ave=n(kPe,"STRONG",{});var qMt=s(Ave);e5r=r(qMt,"bart"),qMt.forEach(t),o5r=r(kPe," \u2014 "),kH=n(kPe,"A",{href:!0});var jMt=s(kH);r5r=r(jMt,"TFBartForConditionalGeneration"),jMt.forEach(t),t5r=r(kPe," (BART model)"),kPe.forEach(t),a5r=i(Be),v7=n(Be,"LI",{});var SPe=s(v7);yve=n(SPe,"STRONG",{});var DMt=s(yve);n5r=r(DMt,"blenderbot"),DMt.forEach(t),s5r=r(SPe," \u2014 "),SH=n(SPe,"A",{href:!0});var GMt=s(SH);l5r=r(GMt,"TFBlenderbotForConditionalGeneration"),GMt.forEach(t),i5r=r(SPe," (Blenderbot model)"),SPe.forEach(t),d5r=i(Be),F7=n(Be,"LI",{});var RPe=s(F7);Lve=n(RPe,"STRONG",{});var OMt=s(Lve);c5r=r(OMt,"blenderbot-small"),OMt.forEach(t),f5r=r(RPe," \u2014 "),RH=n(RPe,"A",{href:!0});var VMt=s(RH);m5r=r(VMt,"TFBlenderbotSmallForConditionalGeneration"),VMt.forEach(t),g5r=r(RPe," (BlenderbotSmall model)"),RPe.forEach(t),h5r=i(Be),T7=n(Be,"LI",{});var PPe=s(T7);xve=n(PPe,"STRONG",{});var XMt=s(xve);p5r=r(XMt,"encoder-decoder"),XMt.forEach(t),_5r=r(PPe," \u2014 "),PH=n(PPe,"A",{href:!0});var zMt=s(PH);u5r=r(zMt,"TFEncoderDecoderModel"),zMt.forEach(t),b5r=r(PPe," (Encoder decoder model)"),PPe.forEach(t),v5r=i(Be),M7=n(Be,"LI",{});var BPe=s(M7);$ve=n(BPe,"STRONG",{});var WMt=s($ve);F5r=r(WMt,"led"),WMt.forEach(t),T5r=r(BPe," \u2014 "),BH=n(BPe,"A",{href:!0});var QMt=s(BH);M5r=r(QMt,"TFLEDForConditionalGeneration"),QMt.forEach(t),E5r=r(BPe," (LED model)"),BPe.forEach(t),C5r=i(Be),E7=n(Be,"LI",{});var IPe=s(E7);kve=n(IPe,"STRONG",{});var HMt=s(kve);w5r=r(HMt,"marian"),HMt.forEach(t),A5r=r(IPe," \u2014 "),IH=n(IPe,"A",{href:!0});var UMt=s(IH);y5r=r(UMt,"TFMarianMTModel"),UMt.forEach(t),L5r=r(IPe," (Marian model)"),IPe.forEach(t),x5r=i(Be),C7=n(Be,"LI",{});var NPe=s(C7);Sve=n(NPe,"STRONG",{});var JMt=s(Sve);$5r=r(JMt,"mbart"),JMt.forEach(t),k5r=r(NPe," \u2014 "),NH=n(NPe,"A",{href:!0});var YMt=s(NH);S5r=r(YMt,"TFMBartForConditionalGeneration"),YMt.forEach(t),R5r=r(NPe," (mBART model)"),NPe.forEach(t),P5r=i(Be),w7=n(Be,"LI",{});var qPe=s(w7);Rve=n(qPe,"STRONG",{});var KMt=s(Rve);B5r=r(KMt,"mt5"),KMt.forEach(t),I5r=r(qPe," \u2014 "),qH=n(qPe,"A",{href:!0});var ZMt=s(qH);N5r=r(ZMt,"TFMT5ForConditionalGeneration"),ZMt.forEach(t),q5r=r(qPe," (mT5 model)"),qPe.forEach(t),j5r=i(Be),A7=n(Be,"LI",{});var jPe=s(A7);Pve=n(jPe,"STRONG",{});var eEt=s(Pve);D5r=r(eEt,"pegasus"),eEt.forEach(t),G5r=r(jPe," \u2014 "),jH=n(jPe,"A",{href:!0});var oEt=s(jH);O5r=r(oEt,"TFPegasusForConditionalGeneration"),oEt.forEach(t),V5r=r(jPe," (Pegasus model)"),jPe.forEach(t),X5r=i(Be),y7=n(Be,"LI",{});var DPe=s(y7);Bve=n(DPe,"STRONG",{});var rEt=s(Bve);z5r=r(rEt,"t5"),rEt.forEach(t),W5r=r(DPe," \u2014 "),DH=n(DPe,"A",{href:!0});var tEt=s(DH);Q5r=r(tEt,"TFT5ForConditionalGeneration"),tEt.forEach(t),H5r=r(DPe," (T5 model)"),DPe.forEach(t),Be.forEach(t),U5r=i(wl),T(L7.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),Bje=i(f),sc=n(f,"H2",{class:!0});var GGe=s(sc);x7=n(GGe,"A",{id:!0,class:!0,href:!0});var aEt=s(x7);Ive=n(aEt,"SPAN",{});var nEt=s(Ive);T(V8.$$.fragment,nEt),nEt.forEach(t),aEt.forEach(t),J5r=i(GGe),Nve=n(GGe,"SPAN",{});var sEt=s(Nve);Y5r=r(sEt,"TFAutoModelForSequenceClassification"),sEt.forEach(t),GGe.forEach(t),Ije=i(f),tr=n(f,"DIV",{class:!0});var Al=s(tr);T(X8.$$.fragment,Al),K5r=i(Al),lc=n(Al,"P",{});var $ee=s(lc);Z5r=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GH=n($ee,"A",{href:!0});var lEt=s(GH);e3r=r(lEt,"from_pretrained()"),lEt.forEach(t),o3r=r($ee," class method or the "),OH=n($ee,"A",{href:!0});var iEt=s(OH);r3r=r(iEt,"from_config()"),iEt.forEach(t),t3r=r($ee,` class
method.`),$ee.forEach(t),a3r=i(Al),z8=n(Al,"P",{});var OGe=s(z8);n3r=r(OGe,"This class cannot be instantiated directly using "),qve=n(OGe,"CODE",{});var dEt=s(qve);s3r=r(dEt,"__init__()"),dEt.forEach(t),l3r=r(OGe," (throws an error)."),OGe.forEach(t),i3r=i(Al),Pt=n(Al,"DIV",{class:!0});var O6=s(Pt);T(W8.$$.fragment,O6),d3r=i(O6),jve=n(O6,"P",{});var cEt=s(jve);c3r=r(cEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cEt.forEach(t),f3r=i(O6),ic=n(O6,"P",{});var kee=s(ic);m3r=r(kee,`Note:
Loading a model from its configuration file does `),Dve=n(kee,"STRONG",{});var fEt=s(Dve);g3r=r(fEt,"not"),fEt.forEach(t),h3r=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=n(kee,"A",{href:!0});var mEt=s(VH);p3r=r(mEt,"from_pretrained()"),mEt.forEach(t),_3r=r(kee," to load the model weights."),kee.forEach(t),u3r=i(O6),T($7.$$.fragment,O6),O6.forEach(t),b3r=i(Al),kr=n(Al,"DIV",{class:!0});var yl=s(kr);T(Q8.$$.fragment,yl),v3r=i(yl),Gve=n(yl,"P",{});var gEt=s(Gve);F3r=r(gEt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gEt.forEach(t),T3r=i(yl),nn=n(yl,"P",{});var V6=s(nn);M3r=r(V6,"The model class to instantiate is selected based on the "),Ove=n(V6,"CODE",{});var hEt=s(Ove);E3r=r(hEt,"model_type"),hEt.forEach(t),C3r=r(V6,` property of the config object (either
passed as an argument or loaded from `),Vve=n(V6,"CODE",{});var pEt=s(Vve);w3r=r(pEt,"pretrained_model_name_or_path"),pEt.forEach(t),A3r=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=n(V6,"CODE",{});var _Et=s(Xve);y3r=r(_Et,"pretrained_model_name_or_path"),_Et.forEach(t),L3r=r(V6,":"),V6.forEach(t),x3r=i(yl),oe=n(yl,"UL",{});var ae=s(oe);k7=n(ae,"LI",{});var GPe=s(k7);zve=n(GPe,"STRONG",{});var uEt=s(zve);$3r=r(uEt,"albert"),uEt.forEach(t),k3r=r(GPe," \u2014 "),XH=n(GPe,"A",{href:!0});var bEt=s(XH);S3r=r(bEt,"TFAlbertForSequenceClassification"),bEt.forEach(t),R3r=r(GPe," (ALBERT model)"),GPe.forEach(t),P3r=i(ae),S7=n(ae,"LI",{});var OPe=s(S7);Wve=n(OPe,"STRONG",{});var vEt=s(Wve);B3r=r(vEt,"bert"),vEt.forEach(t),I3r=r(OPe," \u2014 "),zH=n(OPe,"A",{href:!0});var FEt=s(zH);N3r=r(FEt,"TFBertForSequenceClassification"),FEt.forEach(t),q3r=r(OPe," (BERT model)"),OPe.forEach(t),j3r=i(ae),R7=n(ae,"LI",{});var VPe=s(R7);Qve=n(VPe,"STRONG",{});var TEt=s(Qve);D3r=r(TEt,"camembert"),TEt.forEach(t),G3r=r(VPe," \u2014 "),WH=n(VPe,"A",{href:!0});var MEt=s(WH);O3r=r(MEt,"TFCamembertForSequenceClassification"),MEt.forEach(t),V3r=r(VPe," (CamemBERT model)"),VPe.forEach(t),X3r=i(ae),P7=n(ae,"LI",{});var XPe=s(P7);Hve=n(XPe,"STRONG",{});var EEt=s(Hve);z3r=r(EEt,"convbert"),EEt.forEach(t),W3r=r(XPe," \u2014 "),QH=n(XPe,"A",{href:!0});var CEt=s(QH);Q3r=r(CEt,"TFConvBertForSequenceClassification"),CEt.forEach(t),H3r=r(XPe," (ConvBERT model)"),XPe.forEach(t),U3r=i(ae),B7=n(ae,"LI",{});var zPe=s(B7);Uve=n(zPe,"STRONG",{});var wEt=s(Uve);J3r=r(wEt,"ctrl"),wEt.forEach(t),Y3r=r(zPe," \u2014 "),HH=n(zPe,"A",{href:!0});var AEt=s(HH);K3r=r(AEt,"TFCTRLForSequenceClassification"),AEt.forEach(t),Z3r=r(zPe," (CTRL model)"),zPe.forEach(t),eFr=i(ae),I7=n(ae,"LI",{});var WPe=s(I7);Jve=n(WPe,"STRONG",{});var yEt=s(Jve);oFr=r(yEt,"deberta"),yEt.forEach(t),rFr=r(WPe," \u2014 "),UH=n(WPe,"A",{href:!0});var LEt=s(UH);tFr=r(LEt,"TFDebertaForSequenceClassification"),LEt.forEach(t),aFr=r(WPe," (DeBERTa model)"),WPe.forEach(t),nFr=i(ae),N7=n(ae,"LI",{});var QPe=s(N7);Yve=n(QPe,"STRONG",{});var xEt=s(Yve);sFr=r(xEt,"deberta-v2"),xEt.forEach(t),lFr=r(QPe," \u2014 "),JH=n(QPe,"A",{href:!0});var $Et=s(JH);iFr=r($Et,"TFDebertaV2ForSequenceClassification"),$Et.forEach(t),dFr=r(QPe," (DeBERTa-v2 model)"),QPe.forEach(t),cFr=i(ae),q7=n(ae,"LI",{});var HPe=s(q7);Kve=n(HPe,"STRONG",{});var kEt=s(Kve);fFr=r(kEt,"distilbert"),kEt.forEach(t),mFr=r(HPe," \u2014 "),YH=n(HPe,"A",{href:!0});var SEt=s(YH);gFr=r(SEt,"TFDistilBertForSequenceClassification"),SEt.forEach(t),hFr=r(HPe," (DistilBERT model)"),HPe.forEach(t),pFr=i(ae),j7=n(ae,"LI",{});var UPe=s(j7);Zve=n(UPe,"STRONG",{});var REt=s(Zve);_Fr=r(REt,"electra"),REt.forEach(t),uFr=r(UPe," \u2014 "),KH=n(UPe,"A",{href:!0});var PEt=s(KH);bFr=r(PEt,"TFElectraForSequenceClassification"),PEt.forEach(t),vFr=r(UPe," (ELECTRA model)"),UPe.forEach(t),FFr=i(ae),D7=n(ae,"LI",{});var JPe=s(D7);e5e=n(JPe,"STRONG",{});var BEt=s(e5e);TFr=r(BEt,"flaubert"),BEt.forEach(t),MFr=r(JPe," \u2014 "),ZH=n(JPe,"A",{href:!0});var IEt=s(ZH);EFr=r(IEt,"TFFlaubertForSequenceClassification"),IEt.forEach(t),CFr=r(JPe," (FlauBERT model)"),JPe.forEach(t),wFr=i(ae),G7=n(ae,"LI",{});var YPe=s(G7);o5e=n(YPe,"STRONG",{});var NEt=s(o5e);AFr=r(NEt,"funnel"),NEt.forEach(t),yFr=r(YPe," \u2014 "),eU=n(YPe,"A",{href:!0});var qEt=s(eU);LFr=r(qEt,"TFFunnelForSequenceClassification"),qEt.forEach(t),xFr=r(YPe," (Funnel Transformer model)"),YPe.forEach(t),$Fr=i(ae),O7=n(ae,"LI",{});var KPe=s(O7);r5e=n(KPe,"STRONG",{});var jEt=s(r5e);kFr=r(jEt,"gpt2"),jEt.forEach(t),SFr=r(KPe," \u2014 "),oU=n(KPe,"A",{href:!0});var DEt=s(oU);RFr=r(DEt,"TFGPT2ForSequenceClassification"),DEt.forEach(t),PFr=r(KPe," (OpenAI GPT-2 model)"),KPe.forEach(t),BFr=i(ae),V7=n(ae,"LI",{});var ZPe=s(V7);t5e=n(ZPe,"STRONG",{});var GEt=s(t5e);IFr=r(GEt,"gptj"),GEt.forEach(t),NFr=r(ZPe," \u2014 "),rU=n(ZPe,"A",{href:!0});var OEt=s(rU);qFr=r(OEt,"TFGPTJForSequenceClassification"),OEt.forEach(t),jFr=r(ZPe," (GPT-J model)"),ZPe.forEach(t),DFr=i(ae),X7=n(ae,"LI",{});var eBe=s(X7);a5e=n(eBe,"STRONG",{});var VEt=s(a5e);GFr=r(VEt,"layoutlm"),VEt.forEach(t),OFr=r(eBe," \u2014 "),tU=n(eBe,"A",{href:!0});var XEt=s(tU);VFr=r(XEt,"TFLayoutLMForSequenceClassification"),XEt.forEach(t),XFr=r(eBe," (LayoutLM model)"),eBe.forEach(t),zFr=i(ae),z7=n(ae,"LI",{});var oBe=s(z7);n5e=n(oBe,"STRONG",{});var zEt=s(n5e);WFr=r(zEt,"longformer"),zEt.forEach(t),QFr=r(oBe," \u2014 "),aU=n(oBe,"A",{href:!0});var WEt=s(aU);HFr=r(WEt,"TFLongformerForSequenceClassification"),WEt.forEach(t),UFr=r(oBe," (Longformer model)"),oBe.forEach(t),JFr=i(ae),W7=n(ae,"LI",{});var rBe=s(W7);s5e=n(rBe,"STRONG",{});var QEt=s(s5e);YFr=r(QEt,"mobilebert"),QEt.forEach(t),KFr=r(rBe," \u2014 "),nU=n(rBe,"A",{href:!0});var HEt=s(nU);ZFr=r(HEt,"TFMobileBertForSequenceClassification"),HEt.forEach(t),eTr=r(rBe," (MobileBERT model)"),rBe.forEach(t),oTr=i(ae),Q7=n(ae,"LI",{});var tBe=s(Q7);l5e=n(tBe,"STRONG",{});var UEt=s(l5e);rTr=r(UEt,"mpnet"),UEt.forEach(t),tTr=r(tBe," \u2014 "),sU=n(tBe,"A",{href:!0});var JEt=s(sU);aTr=r(JEt,"TFMPNetForSequenceClassification"),JEt.forEach(t),nTr=r(tBe," (MPNet model)"),tBe.forEach(t),sTr=i(ae),H7=n(ae,"LI",{});var aBe=s(H7);i5e=n(aBe,"STRONG",{});var YEt=s(i5e);lTr=r(YEt,"openai-gpt"),YEt.forEach(t),iTr=r(aBe," \u2014 "),lU=n(aBe,"A",{href:!0});var KEt=s(lU);dTr=r(KEt,"TFOpenAIGPTForSequenceClassification"),KEt.forEach(t),cTr=r(aBe," (OpenAI GPT model)"),aBe.forEach(t),fTr=i(ae),U7=n(ae,"LI",{});var nBe=s(U7);d5e=n(nBe,"STRONG",{});var ZEt=s(d5e);mTr=r(ZEt,"rembert"),ZEt.forEach(t),gTr=r(nBe," \u2014 "),iU=n(nBe,"A",{href:!0});var eCt=s(iU);hTr=r(eCt,"TFRemBertForSequenceClassification"),eCt.forEach(t),pTr=r(nBe," (RemBERT model)"),nBe.forEach(t),_Tr=i(ae),J7=n(ae,"LI",{});var sBe=s(J7);c5e=n(sBe,"STRONG",{});var oCt=s(c5e);uTr=r(oCt,"roberta"),oCt.forEach(t),bTr=r(sBe," \u2014 "),dU=n(sBe,"A",{href:!0});var rCt=s(dU);vTr=r(rCt,"TFRobertaForSequenceClassification"),rCt.forEach(t),FTr=r(sBe," (RoBERTa model)"),sBe.forEach(t),TTr=i(ae),Y7=n(ae,"LI",{});var lBe=s(Y7);f5e=n(lBe,"STRONG",{});var tCt=s(f5e);MTr=r(tCt,"roformer"),tCt.forEach(t),ETr=r(lBe," \u2014 "),cU=n(lBe,"A",{href:!0});var aCt=s(cU);CTr=r(aCt,"TFRoFormerForSequenceClassification"),aCt.forEach(t),wTr=r(lBe," (RoFormer model)"),lBe.forEach(t),ATr=i(ae),K7=n(ae,"LI",{});var iBe=s(K7);m5e=n(iBe,"STRONG",{});var nCt=s(m5e);yTr=r(nCt,"tapas"),nCt.forEach(t),LTr=r(iBe," \u2014 "),fU=n(iBe,"A",{href:!0});var sCt=s(fU);xTr=r(sCt,"TFTapasForSequenceClassification"),sCt.forEach(t),$Tr=r(iBe," (TAPAS model)"),iBe.forEach(t),kTr=i(ae),Z7=n(ae,"LI",{});var dBe=s(Z7);g5e=n(dBe,"STRONG",{});var lCt=s(g5e);STr=r(lCt,"transfo-xl"),lCt.forEach(t),RTr=r(dBe," \u2014 "),mU=n(dBe,"A",{href:!0});var iCt=s(mU);PTr=r(iCt,"TFTransfoXLForSequenceClassification"),iCt.forEach(t),BTr=r(dBe," (Transformer-XL model)"),dBe.forEach(t),ITr=i(ae),eM=n(ae,"LI",{});var cBe=s(eM);h5e=n(cBe,"STRONG",{});var dCt=s(h5e);NTr=r(dCt,"xlm"),dCt.forEach(t),qTr=r(cBe," \u2014 "),gU=n(cBe,"A",{href:!0});var cCt=s(gU);jTr=r(cCt,"TFXLMForSequenceClassification"),cCt.forEach(t),DTr=r(cBe," (XLM model)"),cBe.forEach(t),GTr=i(ae),oM=n(ae,"LI",{});var fBe=s(oM);p5e=n(fBe,"STRONG",{});var fCt=s(p5e);OTr=r(fCt,"xlm-roberta"),fCt.forEach(t),VTr=r(fBe," \u2014 "),hU=n(fBe,"A",{href:!0});var mCt=s(hU);XTr=r(mCt,"TFXLMRobertaForSequenceClassification"),mCt.forEach(t),zTr=r(fBe," (XLM-RoBERTa model)"),fBe.forEach(t),WTr=i(ae),rM=n(ae,"LI",{});var mBe=s(rM);_5e=n(mBe,"STRONG",{});var gCt=s(_5e);QTr=r(gCt,"xlnet"),gCt.forEach(t),HTr=r(mBe," \u2014 "),pU=n(mBe,"A",{href:!0});var hCt=s(pU);UTr=r(hCt,"TFXLNetForSequenceClassification"),hCt.forEach(t),JTr=r(mBe," (XLNet model)"),mBe.forEach(t),ae.forEach(t),YTr=i(yl),T(tM.$$.fragment,yl),yl.forEach(t),Al.forEach(t),Nje=i(f),dc=n(f,"H2",{class:!0});var VGe=s(dc);aM=n(VGe,"A",{id:!0,class:!0,href:!0});var pCt=s(aM);u5e=n(pCt,"SPAN",{});var _Ct=s(u5e);T(H8.$$.fragment,_Ct),_Ct.forEach(t),pCt.forEach(t),KTr=i(VGe),b5e=n(VGe,"SPAN",{});var uCt=s(b5e);ZTr=r(uCt,"TFAutoModelForMultipleChoice"),uCt.forEach(t),VGe.forEach(t),qje=i(f),ar=n(f,"DIV",{class:!0});var Ll=s(ar);T(U8.$$.fragment,Ll),e7r=i(Ll),cc=n(Ll,"P",{});var See=s(cc);o7r=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_U=n(See,"A",{href:!0});var bCt=s(_U);r7r=r(bCt,"from_pretrained()"),bCt.forEach(t),t7r=r(See," class method or the "),uU=n(See,"A",{href:!0});var vCt=s(uU);a7r=r(vCt,"from_config()"),vCt.forEach(t),n7r=r(See,` class
method.`),See.forEach(t),s7r=i(Ll),J8=n(Ll,"P",{});var XGe=s(J8);l7r=r(XGe,"This class cannot be instantiated directly using "),v5e=n(XGe,"CODE",{});var FCt=s(v5e);i7r=r(FCt,"__init__()"),FCt.forEach(t),d7r=r(XGe," (throws an error)."),XGe.forEach(t),c7r=i(Ll),Bt=n(Ll,"DIV",{class:!0});var X6=s(Bt);T(Y8.$$.fragment,X6),f7r=i(X6),F5e=n(X6,"P",{});var TCt=s(F5e);m7r=r(TCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),TCt.forEach(t),g7r=i(X6),fc=n(X6,"P",{});var Ree=s(fc);h7r=r(Ree,`Note:
Loading a model from its configuration file does `),T5e=n(Ree,"STRONG",{});var MCt=s(T5e);p7r=r(MCt,"not"),MCt.forEach(t),_7r=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=n(Ree,"A",{href:!0});var ECt=s(bU);u7r=r(ECt,"from_pretrained()"),ECt.forEach(t),b7r=r(Ree," to load the model weights."),Ree.forEach(t),v7r=i(X6),T(nM.$$.fragment,X6),X6.forEach(t),F7r=i(Ll),Sr=n(Ll,"DIV",{class:!0});var xl=s(Sr);T(K8.$$.fragment,xl),T7r=i(xl),M5e=n(xl,"P",{});var CCt=s(M5e);M7r=r(CCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),CCt.forEach(t),E7r=i(xl),sn=n(xl,"P",{});var z6=s(sn);C7r=r(z6,"The model class to instantiate is selected based on the "),E5e=n(z6,"CODE",{});var wCt=s(E5e);w7r=r(wCt,"model_type"),wCt.forEach(t),A7r=r(z6,` property of the config object (either
passed as an argument or loaded from `),C5e=n(z6,"CODE",{});var ACt=s(C5e);y7r=r(ACt,"pretrained_model_name_or_path"),ACt.forEach(t),L7r=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=n(z6,"CODE",{});var yCt=s(w5e);x7r=r(yCt,"pretrained_model_name_or_path"),yCt.forEach(t),$7r=r(z6,":"),z6.forEach(t),k7r=i(xl),pe=n(xl,"UL",{});var be=s(pe);sM=n(be,"LI",{});var gBe=s(sM);A5e=n(gBe,"STRONG",{});var LCt=s(A5e);S7r=r(LCt,"albert"),LCt.forEach(t),R7r=r(gBe," \u2014 "),vU=n(gBe,"A",{href:!0});var xCt=s(vU);P7r=r(xCt,"TFAlbertForMultipleChoice"),xCt.forEach(t),B7r=r(gBe," (ALBERT model)"),gBe.forEach(t),I7r=i(be),lM=n(be,"LI",{});var hBe=s(lM);y5e=n(hBe,"STRONG",{});var $Ct=s(y5e);N7r=r($Ct,"bert"),$Ct.forEach(t),q7r=r(hBe," \u2014 "),FU=n(hBe,"A",{href:!0});var kCt=s(FU);j7r=r(kCt,"TFBertForMultipleChoice"),kCt.forEach(t),D7r=r(hBe," (BERT model)"),hBe.forEach(t),G7r=i(be),iM=n(be,"LI",{});var pBe=s(iM);L5e=n(pBe,"STRONG",{});var SCt=s(L5e);O7r=r(SCt,"camembert"),SCt.forEach(t),V7r=r(pBe," \u2014 "),TU=n(pBe,"A",{href:!0});var RCt=s(TU);X7r=r(RCt,"TFCamembertForMultipleChoice"),RCt.forEach(t),z7r=r(pBe," (CamemBERT model)"),pBe.forEach(t),W7r=i(be),dM=n(be,"LI",{});var _Be=s(dM);x5e=n(_Be,"STRONG",{});var PCt=s(x5e);Q7r=r(PCt,"convbert"),PCt.forEach(t),H7r=r(_Be," \u2014 "),MU=n(_Be,"A",{href:!0});var BCt=s(MU);U7r=r(BCt,"TFConvBertForMultipleChoice"),BCt.forEach(t),J7r=r(_Be," (ConvBERT model)"),_Be.forEach(t),Y7r=i(be),cM=n(be,"LI",{});var uBe=s(cM);$5e=n(uBe,"STRONG",{});var ICt=s($5e);K7r=r(ICt,"distilbert"),ICt.forEach(t),Z7r=r(uBe," \u2014 "),EU=n(uBe,"A",{href:!0});var NCt=s(EU);eMr=r(NCt,"TFDistilBertForMultipleChoice"),NCt.forEach(t),oMr=r(uBe," (DistilBERT model)"),uBe.forEach(t),rMr=i(be),fM=n(be,"LI",{});var bBe=s(fM);k5e=n(bBe,"STRONG",{});var qCt=s(k5e);tMr=r(qCt,"electra"),qCt.forEach(t),aMr=r(bBe," \u2014 "),CU=n(bBe,"A",{href:!0});var jCt=s(CU);nMr=r(jCt,"TFElectraForMultipleChoice"),jCt.forEach(t),sMr=r(bBe," (ELECTRA model)"),bBe.forEach(t),lMr=i(be),mM=n(be,"LI",{});var vBe=s(mM);S5e=n(vBe,"STRONG",{});var DCt=s(S5e);iMr=r(DCt,"flaubert"),DCt.forEach(t),dMr=r(vBe," \u2014 "),wU=n(vBe,"A",{href:!0});var GCt=s(wU);cMr=r(GCt,"TFFlaubertForMultipleChoice"),GCt.forEach(t),fMr=r(vBe," (FlauBERT model)"),vBe.forEach(t),mMr=i(be),gM=n(be,"LI",{});var FBe=s(gM);R5e=n(FBe,"STRONG",{});var OCt=s(R5e);gMr=r(OCt,"funnel"),OCt.forEach(t),hMr=r(FBe," \u2014 "),AU=n(FBe,"A",{href:!0});var VCt=s(AU);pMr=r(VCt,"TFFunnelForMultipleChoice"),VCt.forEach(t),_Mr=r(FBe," (Funnel Transformer model)"),FBe.forEach(t),uMr=i(be),hM=n(be,"LI",{});var TBe=s(hM);P5e=n(TBe,"STRONG",{});var XCt=s(P5e);bMr=r(XCt,"longformer"),XCt.forEach(t),vMr=r(TBe," \u2014 "),yU=n(TBe,"A",{href:!0});var zCt=s(yU);FMr=r(zCt,"TFLongformerForMultipleChoice"),zCt.forEach(t),TMr=r(TBe," (Longformer model)"),TBe.forEach(t),MMr=i(be),pM=n(be,"LI",{});var MBe=s(pM);B5e=n(MBe,"STRONG",{});var WCt=s(B5e);EMr=r(WCt,"mobilebert"),WCt.forEach(t),CMr=r(MBe," \u2014 "),LU=n(MBe,"A",{href:!0});var QCt=s(LU);wMr=r(QCt,"TFMobileBertForMultipleChoice"),QCt.forEach(t),AMr=r(MBe," (MobileBERT model)"),MBe.forEach(t),yMr=i(be),_M=n(be,"LI",{});var EBe=s(_M);I5e=n(EBe,"STRONG",{});var HCt=s(I5e);LMr=r(HCt,"mpnet"),HCt.forEach(t),xMr=r(EBe," \u2014 "),xU=n(EBe,"A",{href:!0});var UCt=s(xU);$Mr=r(UCt,"TFMPNetForMultipleChoice"),UCt.forEach(t),kMr=r(EBe," (MPNet model)"),EBe.forEach(t),SMr=i(be),uM=n(be,"LI",{});var CBe=s(uM);N5e=n(CBe,"STRONG",{});var JCt=s(N5e);RMr=r(JCt,"rembert"),JCt.forEach(t),PMr=r(CBe," \u2014 "),$U=n(CBe,"A",{href:!0});var YCt=s($U);BMr=r(YCt,"TFRemBertForMultipleChoice"),YCt.forEach(t),IMr=r(CBe," (RemBERT model)"),CBe.forEach(t),NMr=i(be),bM=n(be,"LI",{});var wBe=s(bM);q5e=n(wBe,"STRONG",{});var KCt=s(q5e);qMr=r(KCt,"roberta"),KCt.forEach(t),jMr=r(wBe," \u2014 "),kU=n(wBe,"A",{href:!0});var ZCt=s(kU);DMr=r(ZCt,"TFRobertaForMultipleChoice"),ZCt.forEach(t),GMr=r(wBe," (RoBERTa model)"),wBe.forEach(t),OMr=i(be),vM=n(be,"LI",{});var ABe=s(vM);j5e=n(ABe,"STRONG",{});var ewt=s(j5e);VMr=r(ewt,"roformer"),ewt.forEach(t),XMr=r(ABe," \u2014 "),SU=n(ABe,"A",{href:!0});var owt=s(SU);zMr=r(owt,"TFRoFormerForMultipleChoice"),owt.forEach(t),WMr=r(ABe," (RoFormer model)"),ABe.forEach(t),QMr=i(be),FM=n(be,"LI",{});var yBe=s(FM);D5e=n(yBe,"STRONG",{});var rwt=s(D5e);HMr=r(rwt,"xlm"),rwt.forEach(t),UMr=r(yBe," \u2014 "),RU=n(yBe,"A",{href:!0});var twt=s(RU);JMr=r(twt,"TFXLMForMultipleChoice"),twt.forEach(t),YMr=r(yBe," (XLM model)"),yBe.forEach(t),KMr=i(be),TM=n(be,"LI",{});var LBe=s(TM);G5e=n(LBe,"STRONG",{});var awt=s(G5e);ZMr=r(awt,"xlm-roberta"),awt.forEach(t),eEr=r(LBe," \u2014 "),PU=n(LBe,"A",{href:!0});var nwt=s(PU);oEr=r(nwt,"TFXLMRobertaForMultipleChoice"),nwt.forEach(t),rEr=r(LBe," (XLM-RoBERTa model)"),LBe.forEach(t),tEr=i(be),MM=n(be,"LI",{});var xBe=s(MM);O5e=n(xBe,"STRONG",{});var swt=s(O5e);aEr=r(swt,"xlnet"),swt.forEach(t),nEr=r(xBe," \u2014 "),BU=n(xBe,"A",{href:!0});var lwt=s(BU);sEr=r(lwt,"TFXLNetForMultipleChoice"),lwt.forEach(t),lEr=r(xBe," (XLNet model)"),xBe.forEach(t),be.forEach(t),iEr=i(xl),T(EM.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),jje=i(f),mc=n(f,"H2",{class:!0});var zGe=s(mc);CM=n(zGe,"A",{id:!0,class:!0,href:!0});var iwt=s(CM);V5e=n(iwt,"SPAN",{});var dwt=s(V5e);T(Z8.$$.fragment,dwt),dwt.forEach(t),iwt.forEach(t),dEr=i(zGe),X5e=n(zGe,"SPAN",{});var cwt=s(X5e);cEr=r(cwt,"TFAutoModelForNextSentencePrediction"),cwt.forEach(t),zGe.forEach(t),Dje=i(f),nr=n(f,"DIV",{class:!0});var $l=s(nr);T(e9.$$.fragment,$l),fEr=i($l),gc=n($l,"P",{});var Pee=s(gc);mEr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IU=n(Pee,"A",{href:!0});var fwt=s(IU);gEr=r(fwt,"from_pretrained()"),fwt.forEach(t),hEr=r(Pee," class method or the "),NU=n(Pee,"A",{href:!0});var mwt=s(NU);pEr=r(mwt,"from_config()"),mwt.forEach(t),_Er=r(Pee,` class
method.`),Pee.forEach(t),uEr=i($l),o9=n($l,"P",{});var WGe=s(o9);bEr=r(WGe,"This class cannot be instantiated directly using "),z5e=n(WGe,"CODE",{});var gwt=s(z5e);vEr=r(gwt,"__init__()"),gwt.forEach(t),FEr=r(WGe," (throws an error)."),WGe.forEach(t),TEr=i($l),It=n($l,"DIV",{class:!0});var W6=s(It);T(r9.$$.fragment,W6),MEr=i(W6),W5e=n(W6,"P",{});var hwt=s(W5e);EEr=r(hwt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hwt.forEach(t),CEr=i(W6),hc=n(W6,"P",{});var Bee=s(hc);wEr=r(Bee,`Note:
Loading a model from its configuration file does `),Q5e=n(Bee,"STRONG",{});var pwt=s(Q5e);AEr=r(pwt,"not"),pwt.forEach(t),yEr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=n(Bee,"A",{href:!0});var _wt=s(qU);LEr=r(_wt,"from_pretrained()"),_wt.forEach(t),xEr=r(Bee," to load the model weights."),Bee.forEach(t),$Er=i(W6),T(wM.$$.fragment,W6),W6.forEach(t),kEr=i($l),Rr=n($l,"DIV",{class:!0});var kl=s(Rr);T(t9.$$.fragment,kl),SEr=i(kl),H5e=n(kl,"P",{});var uwt=s(H5e);REr=r(uwt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uwt.forEach(t),PEr=i(kl),ln=n(kl,"P",{});var Q6=s(ln);BEr=r(Q6,"The model class to instantiate is selected based on the "),U5e=n(Q6,"CODE",{});var bwt=s(U5e);IEr=r(bwt,"model_type"),bwt.forEach(t),NEr=r(Q6,` property of the config object (either
passed as an argument or loaded from `),J5e=n(Q6,"CODE",{});var vwt=s(J5e);qEr=r(vwt,"pretrained_model_name_or_path"),vwt.forEach(t),jEr=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=n(Q6,"CODE",{});var Fwt=s(Y5e);DEr=r(Fwt,"pretrained_model_name_or_path"),Fwt.forEach(t),GEr=r(Q6,":"),Q6.forEach(t),OEr=i(kl),a9=n(kl,"UL",{});var QGe=s(a9);AM=n(QGe,"LI",{});var $Be=s(AM);K5e=n($Be,"STRONG",{});var Twt=s(K5e);VEr=r(Twt,"bert"),Twt.forEach(t),XEr=r($Be," \u2014 "),jU=n($Be,"A",{href:!0});var Mwt=s(jU);zEr=r(Mwt,"TFBertForNextSentencePrediction"),Mwt.forEach(t),WEr=r($Be," (BERT model)"),$Be.forEach(t),QEr=i(QGe),yM=n(QGe,"LI",{});var kBe=s(yM);Z5e=n(kBe,"STRONG",{});var Ewt=s(Z5e);HEr=r(Ewt,"mobilebert"),Ewt.forEach(t),UEr=r(kBe," \u2014 "),DU=n(kBe,"A",{href:!0});var Cwt=s(DU);JEr=r(Cwt,"TFMobileBertForNextSentencePrediction"),Cwt.forEach(t),YEr=r(kBe," (MobileBERT model)"),kBe.forEach(t),QGe.forEach(t),KEr=i(kl),T(LM.$$.fragment,kl),kl.forEach(t),$l.forEach(t),Gje=i(f),pc=n(f,"H2",{class:!0});var HGe=s(pc);xM=n(HGe,"A",{id:!0,class:!0,href:!0});var wwt=s(xM);e3e=n(wwt,"SPAN",{});var Awt=s(e3e);T(n9.$$.fragment,Awt),Awt.forEach(t),wwt.forEach(t),ZEr=i(HGe),o3e=n(HGe,"SPAN",{});var ywt=s(o3e);eCr=r(ywt,"TFAutoModelForTableQuestionAnswering"),ywt.forEach(t),HGe.forEach(t),Oje=i(f),sr=n(f,"DIV",{class:!0});var Sl=s(sr);T(s9.$$.fragment,Sl),oCr=i(Sl),_c=n(Sl,"P",{});var Iee=s(_c);rCr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),GU=n(Iee,"A",{href:!0});var Lwt=s(GU);tCr=r(Lwt,"from_pretrained()"),Lwt.forEach(t),aCr=r(Iee," class method or the "),OU=n(Iee,"A",{href:!0});var xwt=s(OU);nCr=r(xwt,"from_config()"),xwt.forEach(t),sCr=r(Iee,` class
method.`),Iee.forEach(t),lCr=i(Sl),l9=n(Sl,"P",{});var UGe=s(l9);iCr=r(UGe,"This class cannot be instantiated directly using "),r3e=n(UGe,"CODE",{});var $wt=s(r3e);dCr=r($wt,"__init__()"),$wt.forEach(t),cCr=r(UGe," (throws an error)."),UGe.forEach(t),fCr=i(Sl),Nt=n(Sl,"DIV",{class:!0});var H6=s(Nt);T(i9.$$.fragment,H6),mCr=i(H6),t3e=n(H6,"P",{});var kwt=s(t3e);gCr=r(kwt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),kwt.forEach(t),hCr=i(H6),uc=n(H6,"P",{});var Nee=s(uc);pCr=r(Nee,`Note:
Loading a model from its configuration file does `),a3e=n(Nee,"STRONG",{});var Swt=s(a3e);_Cr=r(Swt,"not"),Swt.forEach(t),uCr=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=n(Nee,"A",{href:!0});var Rwt=s(VU);bCr=r(Rwt,"from_pretrained()"),Rwt.forEach(t),vCr=r(Nee," to load the model weights."),Nee.forEach(t),FCr=i(H6),T($M.$$.fragment,H6),H6.forEach(t),TCr=i(Sl),Pr=n(Sl,"DIV",{class:!0});var Rl=s(Pr);T(d9.$$.fragment,Rl),MCr=i(Rl),n3e=n(Rl,"P",{});var Pwt=s(n3e);ECr=r(Pwt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Pwt.forEach(t),CCr=i(Rl),dn=n(Rl,"P",{});var U6=s(dn);wCr=r(U6,"The model class to instantiate is selected based on the "),s3e=n(U6,"CODE",{});var Bwt=s(s3e);ACr=r(Bwt,"model_type"),Bwt.forEach(t),yCr=r(U6,` property of the config object (either
passed as an argument or loaded from `),l3e=n(U6,"CODE",{});var Iwt=s(l3e);LCr=r(Iwt,"pretrained_model_name_or_path"),Iwt.forEach(t),xCr=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=n(U6,"CODE",{});var Nwt=s(i3e);$Cr=r(Nwt,"pretrained_model_name_or_path"),Nwt.forEach(t),kCr=r(U6,":"),U6.forEach(t),SCr=i(Rl),d3e=n(Rl,"UL",{});var qwt=s(d3e);kM=n(qwt,"LI",{});var SBe=s(kM);c3e=n(SBe,"STRONG",{});var jwt=s(c3e);RCr=r(jwt,"tapas"),jwt.forEach(t),PCr=r(SBe," \u2014 "),XU=n(SBe,"A",{href:!0});var Dwt=s(XU);BCr=r(Dwt,"TFTapasForQuestionAnswering"),Dwt.forEach(t),ICr=r(SBe," (TAPAS model)"),SBe.forEach(t),qwt.forEach(t),NCr=i(Rl),T(SM.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),Vje=i(f),bc=n(f,"H2",{class:!0});var JGe=s(bc);RM=n(JGe,"A",{id:!0,class:!0,href:!0});var Gwt=s(RM);f3e=n(Gwt,"SPAN",{});var Owt=s(f3e);T(c9.$$.fragment,Owt),Owt.forEach(t),Gwt.forEach(t),qCr=i(JGe),m3e=n(JGe,"SPAN",{});var Vwt=s(m3e);jCr=r(Vwt,"TFAutoModelForTokenClassification"),Vwt.forEach(t),JGe.forEach(t),Xje=i(f),lr=n(f,"DIV",{class:!0});var Pl=s(lr);T(f9.$$.fragment,Pl),DCr=i(Pl),vc=n(Pl,"P",{});var qee=s(vc);GCr=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zU=n(qee,"A",{href:!0});var Xwt=s(zU);OCr=r(Xwt,"from_pretrained()"),Xwt.forEach(t),VCr=r(qee," class method or the "),WU=n(qee,"A",{href:!0});var zwt=s(WU);XCr=r(zwt,"from_config()"),zwt.forEach(t),zCr=r(qee,` class
method.`),qee.forEach(t),WCr=i(Pl),m9=n(Pl,"P",{});var YGe=s(m9);QCr=r(YGe,"This class cannot be instantiated directly using "),g3e=n(YGe,"CODE",{});var Wwt=s(g3e);HCr=r(Wwt,"__init__()"),Wwt.forEach(t),UCr=r(YGe," (throws an error)."),YGe.forEach(t),JCr=i(Pl),qt=n(Pl,"DIV",{class:!0});var J6=s(qt);T(g9.$$.fragment,J6),YCr=i(J6),h3e=n(J6,"P",{});var Qwt=s(h3e);KCr=r(Qwt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Qwt.forEach(t),ZCr=i(J6),Fc=n(J6,"P",{});var jee=s(Fc);ewr=r(jee,`Note:
Loading a model from its configuration file does `),p3e=n(jee,"STRONG",{});var Hwt=s(p3e);owr=r(Hwt,"not"),Hwt.forEach(t),rwr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(jee,"A",{href:!0});var Uwt=s(QU);twr=r(Uwt,"from_pretrained()"),Uwt.forEach(t),awr=r(jee," to load the model weights."),jee.forEach(t),nwr=i(J6),T(PM.$$.fragment,J6),J6.forEach(t),swr=i(Pl),Br=n(Pl,"DIV",{class:!0});var Bl=s(Br);T(h9.$$.fragment,Bl),lwr=i(Bl),_3e=n(Bl,"P",{});var Jwt=s(_3e);iwr=r(Jwt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Jwt.forEach(t),dwr=i(Bl),cn=n(Bl,"P",{});var Y6=s(cn);cwr=r(Y6,"The model class to instantiate is selected based on the "),u3e=n(Y6,"CODE",{});var Ywt=s(u3e);fwr=r(Ywt,"model_type"),Ywt.forEach(t),mwr=r(Y6,` property of the config object (either
passed as an argument or loaded from `),b3e=n(Y6,"CODE",{});var Kwt=s(b3e);gwr=r(Kwt,"pretrained_model_name_or_path"),Kwt.forEach(t),hwr=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v3e=n(Y6,"CODE",{});var Zwt=s(v3e);pwr=r(Zwt,"pretrained_model_name_or_path"),Zwt.forEach(t),_wr=r(Y6,":"),Y6.forEach(t),uwr=i(Bl),de=n(Bl,"UL",{});var me=s(de);BM=n(me,"LI",{});var RBe=s(BM);F3e=n(RBe,"STRONG",{});var e0t=s(F3e);bwr=r(e0t,"albert"),e0t.forEach(t),vwr=r(RBe," \u2014 "),HU=n(RBe,"A",{href:!0});var o0t=s(HU);Fwr=r(o0t,"TFAlbertForTokenClassification"),o0t.forEach(t),Twr=r(RBe," (ALBERT model)"),RBe.forEach(t),Mwr=i(me),IM=n(me,"LI",{});var PBe=s(IM);T3e=n(PBe,"STRONG",{});var r0t=s(T3e);Ewr=r(r0t,"bert"),r0t.forEach(t),Cwr=r(PBe," \u2014 "),UU=n(PBe,"A",{href:!0});var t0t=s(UU);wwr=r(t0t,"TFBertForTokenClassification"),t0t.forEach(t),Awr=r(PBe," (BERT model)"),PBe.forEach(t),ywr=i(me),NM=n(me,"LI",{});var BBe=s(NM);M3e=n(BBe,"STRONG",{});var a0t=s(M3e);Lwr=r(a0t,"camembert"),a0t.forEach(t),xwr=r(BBe," \u2014 "),JU=n(BBe,"A",{href:!0});var n0t=s(JU);$wr=r(n0t,"TFCamembertForTokenClassification"),n0t.forEach(t),kwr=r(BBe," (CamemBERT model)"),BBe.forEach(t),Swr=i(me),qM=n(me,"LI",{});var IBe=s(qM);E3e=n(IBe,"STRONG",{});var s0t=s(E3e);Rwr=r(s0t,"convbert"),s0t.forEach(t),Pwr=r(IBe," \u2014 "),YU=n(IBe,"A",{href:!0});var l0t=s(YU);Bwr=r(l0t,"TFConvBertForTokenClassification"),l0t.forEach(t),Iwr=r(IBe," (ConvBERT model)"),IBe.forEach(t),Nwr=i(me),jM=n(me,"LI",{});var NBe=s(jM);C3e=n(NBe,"STRONG",{});var i0t=s(C3e);qwr=r(i0t,"deberta"),i0t.forEach(t),jwr=r(NBe," \u2014 "),KU=n(NBe,"A",{href:!0});var d0t=s(KU);Dwr=r(d0t,"TFDebertaForTokenClassification"),d0t.forEach(t),Gwr=r(NBe," (DeBERTa model)"),NBe.forEach(t),Owr=i(me),DM=n(me,"LI",{});var qBe=s(DM);w3e=n(qBe,"STRONG",{});var c0t=s(w3e);Vwr=r(c0t,"deberta-v2"),c0t.forEach(t),Xwr=r(qBe," \u2014 "),ZU=n(qBe,"A",{href:!0});var f0t=s(ZU);zwr=r(f0t,"TFDebertaV2ForTokenClassification"),f0t.forEach(t),Wwr=r(qBe," (DeBERTa-v2 model)"),qBe.forEach(t),Qwr=i(me),GM=n(me,"LI",{});var jBe=s(GM);A3e=n(jBe,"STRONG",{});var m0t=s(A3e);Hwr=r(m0t,"distilbert"),m0t.forEach(t),Uwr=r(jBe," \u2014 "),eJ=n(jBe,"A",{href:!0});var g0t=s(eJ);Jwr=r(g0t,"TFDistilBertForTokenClassification"),g0t.forEach(t),Ywr=r(jBe," (DistilBERT model)"),jBe.forEach(t),Kwr=i(me),OM=n(me,"LI",{});var DBe=s(OM);y3e=n(DBe,"STRONG",{});var h0t=s(y3e);Zwr=r(h0t,"electra"),h0t.forEach(t),e0r=r(DBe," \u2014 "),oJ=n(DBe,"A",{href:!0});var p0t=s(oJ);o0r=r(p0t,"TFElectraForTokenClassification"),p0t.forEach(t),r0r=r(DBe," (ELECTRA model)"),DBe.forEach(t),t0r=i(me),VM=n(me,"LI",{});var GBe=s(VM);L3e=n(GBe,"STRONG",{});var _0t=s(L3e);a0r=r(_0t,"flaubert"),_0t.forEach(t),n0r=r(GBe," \u2014 "),rJ=n(GBe,"A",{href:!0});var u0t=s(rJ);s0r=r(u0t,"TFFlaubertForTokenClassification"),u0t.forEach(t),l0r=r(GBe," (FlauBERT model)"),GBe.forEach(t),i0r=i(me),XM=n(me,"LI",{});var OBe=s(XM);x3e=n(OBe,"STRONG",{});var b0t=s(x3e);d0r=r(b0t,"funnel"),b0t.forEach(t),c0r=r(OBe," \u2014 "),tJ=n(OBe,"A",{href:!0});var v0t=s(tJ);f0r=r(v0t,"TFFunnelForTokenClassification"),v0t.forEach(t),m0r=r(OBe," (Funnel Transformer model)"),OBe.forEach(t),g0r=i(me),zM=n(me,"LI",{});var VBe=s(zM);$3e=n(VBe,"STRONG",{});var F0t=s($3e);h0r=r(F0t,"layoutlm"),F0t.forEach(t),p0r=r(VBe," \u2014 "),aJ=n(VBe,"A",{href:!0});var T0t=s(aJ);_0r=r(T0t,"TFLayoutLMForTokenClassification"),T0t.forEach(t),u0r=r(VBe," (LayoutLM model)"),VBe.forEach(t),b0r=i(me),WM=n(me,"LI",{});var XBe=s(WM);k3e=n(XBe,"STRONG",{});var M0t=s(k3e);v0r=r(M0t,"longformer"),M0t.forEach(t),F0r=r(XBe," \u2014 "),nJ=n(XBe,"A",{href:!0});var E0t=s(nJ);T0r=r(E0t,"TFLongformerForTokenClassification"),E0t.forEach(t),M0r=r(XBe," (Longformer model)"),XBe.forEach(t),E0r=i(me),QM=n(me,"LI",{});var zBe=s(QM);S3e=n(zBe,"STRONG",{});var C0t=s(S3e);C0r=r(C0t,"mobilebert"),C0t.forEach(t),w0r=r(zBe," \u2014 "),sJ=n(zBe,"A",{href:!0});var w0t=s(sJ);A0r=r(w0t,"TFMobileBertForTokenClassification"),w0t.forEach(t),y0r=r(zBe," (MobileBERT model)"),zBe.forEach(t),L0r=i(me),HM=n(me,"LI",{});var WBe=s(HM);R3e=n(WBe,"STRONG",{});var A0t=s(R3e);x0r=r(A0t,"mpnet"),A0t.forEach(t),$0r=r(WBe," \u2014 "),lJ=n(WBe,"A",{href:!0});var y0t=s(lJ);k0r=r(y0t,"TFMPNetForTokenClassification"),y0t.forEach(t),S0r=r(WBe," (MPNet model)"),WBe.forEach(t),R0r=i(me),UM=n(me,"LI",{});var QBe=s(UM);P3e=n(QBe,"STRONG",{});var L0t=s(P3e);P0r=r(L0t,"rembert"),L0t.forEach(t),B0r=r(QBe," \u2014 "),iJ=n(QBe,"A",{href:!0});var x0t=s(iJ);I0r=r(x0t,"TFRemBertForTokenClassification"),x0t.forEach(t),N0r=r(QBe," (RemBERT model)"),QBe.forEach(t),q0r=i(me),JM=n(me,"LI",{});var HBe=s(JM);B3e=n(HBe,"STRONG",{});var $0t=s(B3e);j0r=r($0t,"roberta"),$0t.forEach(t),D0r=r(HBe," \u2014 "),dJ=n(HBe,"A",{href:!0});var k0t=s(dJ);G0r=r(k0t,"TFRobertaForTokenClassification"),k0t.forEach(t),O0r=r(HBe," (RoBERTa model)"),HBe.forEach(t),V0r=i(me),YM=n(me,"LI",{});var UBe=s(YM);I3e=n(UBe,"STRONG",{});var S0t=s(I3e);X0r=r(S0t,"roformer"),S0t.forEach(t),z0r=r(UBe," \u2014 "),cJ=n(UBe,"A",{href:!0});var R0t=s(cJ);W0r=r(R0t,"TFRoFormerForTokenClassification"),R0t.forEach(t),Q0r=r(UBe," (RoFormer model)"),UBe.forEach(t),H0r=i(me),KM=n(me,"LI",{});var JBe=s(KM);N3e=n(JBe,"STRONG",{});var P0t=s(N3e);U0r=r(P0t,"xlm"),P0t.forEach(t),J0r=r(JBe," \u2014 "),fJ=n(JBe,"A",{href:!0});var B0t=s(fJ);Y0r=r(B0t,"TFXLMForTokenClassification"),B0t.forEach(t),K0r=r(JBe," (XLM model)"),JBe.forEach(t),Z0r=i(me),ZM=n(me,"LI",{});var YBe=s(ZM);q3e=n(YBe,"STRONG",{});var I0t=s(q3e);e6r=r(I0t,"xlm-roberta"),I0t.forEach(t),o6r=r(YBe," \u2014 "),mJ=n(YBe,"A",{href:!0});var N0t=s(mJ);r6r=r(N0t,"TFXLMRobertaForTokenClassification"),N0t.forEach(t),t6r=r(YBe," (XLM-RoBERTa model)"),YBe.forEach(t),a6r=i(me),eE=n(me,"LI",{});var KBe=s(eE);j3e=n(KBe,"STRONG",{});var q0t=s(j3e);n6r=r(q0t,"xlnet"),q0t.forEach(t),s6r=r(KBe," \u2014 "),gJ=n(KBe,"A",{href:!0});var j0t=s(gJ);l6r=r(j0t,"TFXLNetForTokenClassification"),j0t.forEach(t),i6r=r(KBe," (XLNet model)"),KBe.forEach(t),me.forEach(t),d6r=i(Bl),T(oE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),zje=i(f),Tc=n(f,"H2",{class:!0});var KGe=s(Tc);rE=n(KGe,"A",{id:!0,class:!0,href:!0});var D0t=s(rE);D3e=n(D0t,"SPAN",{});var G0t=s(D3e);T(p9.$$.fragment,G0t),G0t.forEach(t),D0t.forEach(t),c6r=i(KGe),G3e=n(KGe,"SPAN",{});var O0t=s(G3e);f6r=r(O0t,"TFAutoModelForQuestionAnswering"),O0t.forEach(t),KGe.forEach(t),Wje=i(f),ir=n(f,"DIV",{class:!0});var Il=s(ir);T(_9.$$.fragment,Il),m6r=i(Il),Mc=n(Il,"P",{});var Dee=s(Mc);g6r=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hJ=n(Dee,"A",{href:!0});var V0t=s(hJ);h6r=r(V0t,"from_pretrained()"),V0t.forEach(t),p6r=r(Dee," class method or the "),pJ=n(Dee,"A",{href:!0});var X0t=s(pJ);_6r=r(X0t,"from_config()"),X0t.forEach(t),u6r=r(Dee,` class
method.`),Dee.forEach(t),b6r=i(Il),u9=n(Il,"P",{});var ZGe=s(u9);v6r=r(ZGe,"This class cannot be instantiated directly using "),O3e=n(ZGe,"CODE",{});var z0t=s(O3e);F6r=r(z0t,"__init__()"),z0t.forEach(t),T6r=r(ZGe," (throws an error)."),ZGe.forEach(t),M6r=i(Il),jt=n(Il,"DIV",{class:!0});var K6=s(jt);T(b9.$$.fragment,K6),E6r=i(K6),V3e=n(K6,"P",{});var W0t=s(V3e);C6r=r(W0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),W0t.forEach(t),w6r=i(K6),Ec=n(K6,"P",{});var Gee=s(Ec);A6r=r(Gee,`Note:
Loading a model from its configuration file does `),X3e=n(Gee,"STRONG",{});var Q0t=s(X3e);y6r=r(Q0t,"not"),Q0t.forEach(t),L6r=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=n(Gee,"A",{href:!0});var H0t=s(_J);x6r=r(H0t,"from_pretrained()"),H0t.forEach(t),$6r=r(Gee," to load the model weights."),Gee.forEach(t),k6r=i(K6),T(tE.$$.fragment,K6),K6.forEach(t),S6r=i(Il),Ir=n(Il,"DIV",{class:!0});var Nl=s(Ir);T(v9.$$.fragment,Nl),R6r=i(Nl),z3e=n(Nl,"P",{});var U0t=s(z3e);P6r=r(U0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),U0t.forEach(t),B6r=i(Nl),fn=n(Nl,"P",{});var Z6=s(fn);I6r=r(Z6,"The model class to instantiate is selected based on the "),W3e=n(Z6,"CODE",{});var J0t=s(W3e);N6r=r(J0t,"model_type"),J0t.forEach(t),q6r=r(Z6,` property of the config object (either
passed as an argument or loaded from `),Q3e=n(Z6,"CODE",{});var Y0t=s(Q3e);j6r=r(Y0t,"pretrained_model_name_or_path"),Y0t.forEach(t),D6r=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H3e=n(Z6,"CODE",{});var K0t=s(H3e);G6r=r(K0t,"pretrained_model_name_or_path"),K0t.forEach(t),O6r=r(Z6,":"),Z6.forEach(t),V6r=i(Nl),ce=n(Nl,"UL",{});var ge=s(ce);aE=n(ge,"LI",{});var ZBe=s(aE);U3e=n(ZBe,"STRONG",{});var Z0t=s(U3e);X6r=r(Z0t,"albert"),Z0t.forEach(t),z6r=r(ZBe," \u2014 "),uJ=n(ZBe,"A",{href:!0});var e6t=s(uJ);W6r=r(e6t,"TFAlbertForQuestionAnswering"),e6t.forEach(t),Q6r=r(ZBe," (ALBERT model)"),ZBe.forEach(t),H6r=i(ge),nE=n(ge,"LI",{});var eIe=s(nE);J3e=n(eIe,"STRONG",{});var o6t=s(J3e);U6r=r(o6t,"bert"),o6t.forEach(t),J6r=r(eIe," \u2014 "),bJ=n(eIe,"A",{href:!0});var r6t=s(bJ);Y6r=r(r6t,"TFBertForQuestionAnswering"),r6t.forEach(t),K6r=r(eIe," (BERT model)"),eIe.forEach(t),Z6r=i(ge),sE=n(ge,"LI",{});var oIe=s(sE);Y3e=n(oIe,"STRONG",{});var t6t=s(Y3e);eAr=r(t6t,"camembert"),t6t.forEach(t),oAr=r(oIe," \u2014 "),vJ=n(oIe,"A",{href:!0});var a6t=s(vJ);rAr=r(a6t,"TFCamembertForQuestionAnswering"),a6t.forEach(t),tAr=r(oIe," (CamemBERT model)"),oIe.forEach(t),aAr=i(ge),lE=n(ge,"LI",{});var rIe=s(lE);K3e=n(rIe,"STRONG",{});var n6t=s(K3e);nAr=r(n6t,"convbert"),n6t.forEach(t),sAr=r(rIe," \u2014 "),FJ=n(rIe,"A",{href:!0});var s6t=s(FJ);lAr=r(s6t,"TFConvBertForQuestionAnswering"),s6t.forEach(t),iAr=r(rIe," (ConvBERT model)"),rIe.forEach(t),dAr=i(ge),iE=n(ge,"LI",{});var tIe=s(iE);Z3e=n(tIe,"STRONG",{});var l6t=s(Z3e);cAr=r(l6t,"deberta"),l6t.forEach(t),fAr=r(tIe," \u2014 "),TJ=n(tIe,"A",{href:!0});var i6t=s(TJ);mAr=r(i6t,"TFDebertaForQuestionAnswering"),i6t.forEach(t),gAr=r(tIe," (DeBERTa model)"),tIe.forEach(t),hAr=i(ge),dE=n(ge,"LI",{});var aIe=s(dE);eFe=n(aIe,"STRONG",{});var d6t=s(eFe);pAr=r(d6t,"deberta-v2"),d6t.forEach(t),_Ar=r(aIe," \u2014 "),MJ=n(aIe,"A",{href:!0});var c6t=s(MJ);uAr=r(c6t,"TFDebertaV2ForQuestionAnswering"),c6t.forEach(t),bAr=r(aIe," (DeBERTa-v2 model)"),aIe.forEach(t),vAr=i(ge),cE=n(ge,"LI",{});var nIe=s(cE);oFe=n(nIe,"STRONG",{});var f6t=s(oFe);FAr=r(f6t,"distilbert"),f6t.forEach(t),TAr=r(nIe," \u2014 "),EJ=n(nIe,"A",{href:!0});var m6t=s(EJ);MAr=r(m6t,"TFDistilBertForQuestionAnswering"),m6t.forEach(t),EAr=r(nIe," (DistilBERT model)"),nIe.forEach(t),CAr=i(ge),fE=n(ge,"LI",{});var sIe=s(fE);rFe=n(sIe,"STRONG",{});var g6t=s(rFe);wAr=r(g6t,"electra"),g6t.forEach(t),AAr=r(sIe," \u2014 "),CJ=n(sIe,"A",{href:!0});var h6t=s(CJ);yAr=r(h6t,"TFElectraForQuestionAnswering"),h6t.forEach(t),LAr=r(sIe," (ELECTRA model)"),sIe.forEach(t),xAr=i(ge),mE=n(ge,"LI",{});var lIe=s(mE);tFe=n(lIe,"STRONG",{});var p6t=s(tFe);$Ar=r(p6t,"flaubert"),p6t.forEach(t),kAr=r(lIe," \u2014 "),wJ=n(lIe,"A",{href:!0});var _6t=s(wJ);SAr=r(_6t,"TFFlaubertForQuestionAnsweringSimple"),_6t.forEach(t),RAr=r(lIe," (FlauBERT model)"),lIe.forEach(t),PAr=i(ge),gE=n(ge,"LI",{});var iIe=s(gE);aFe=n(iIe,"STRONG",{});var u6t=s(aFe);BAr=r(u6t,"funnel"),u6t.forEach(t),IAr=r(iIe," \u2014 "),AJ=n(iIe,"A",{href:!0});var b6t=s(AJ);NAr=r(b6t,"TFFunnelForQuestionAnswering"),b6t.forEach(t),qAr=r(iIe," (Funnel Transformer model)"),iIe.forEach(t),jAr=i(ge),hE=n(ge,"LI",{});var dIe=s(hE);nFe=n(dIe,"STRONG",{});var v6t=s(nFe);DAr=r(v6t,"gptj"),v6t.forEach(t),GAr=r(dIe," \u2014 "),yJ=n(dIe,"A",{href:!0});var F6t=s(yJ);OAr=r(F6t,"TFGPTJForQuestionAnswering"),F6t.forEach(t),VAr=r(dIe," (GPT-J model)"),dIe.forEach(t),XAr=i(ge),pE=n(ge,"LI",{});var cIe=s(pE);sFe=n(cIe,"STRONG",{});var T6t=s(sFe);zAr=r(T6t,"longformer"),T6t.forEach(t),WAr=r(cIe," \u2014 "),LJ=n(cIe,"A",{href:!0});var M6t=s(LJ);QAr=r(M6t,"TFLongformerForQuestionAnswering"),M6t.forEach(t),HAr=r(cIe," (Longformer model)"),cIe.forEach(t),UAr=i(ge),_E=n(ge,"LI",{});var fIe=s(_E);lFe=n(fIe,"STRONG",{});var E6t=s(lFe);JAr=r(E6t,"mobilebert"),E6t.forEach(t),YAr=r(fIe," \u2014 "),xJ=n(fIe,"A",{href:!0});var C6t=s(xJ);KAr=r(C6t,"TFMobileBertForQuestionAnswering"),C6t.forEach(t),ZAr=r(fIe," (MobileBERT model)"),fIe.forEach(t),eyr=i(ge),uE=n(ge,"LI",{});var mIe=s(uE);iFe=n(mIe,"STRONG",{});var w6t=s(iFe);oyr=r(w6t,"mpnet"),w6t.forEach(t),ryr=r(mIe," \u2014 "),$J=n(mIe,"A",{href:!0});var A6t=s($J);tyr=r(A6t,"TFMPNetForQuestionAnswering"),A6t.forEach(t),ayr=r(mIe," (MPNet model)"),mIe.forEach(t),nyr=i(ge),bE=n(ge,"LI",{});var gIe=s(bE);dFe=n(gIe,"STRONG",{});var y6t=s(dFe);syr=r(y6t,"rembert"),y6t.forEach(t),lyr=r(gIe," \u2014 "),kJ=n(gIe,"A",{href:!0});var L6t=s(kJ);iyr=r(L6t,"TFRemBertForQuestionAnswering"),L6t.forEach(t),dyr=r(gIe," (RemBERT model)"),gIe.forEach(t),cyr=i(ge),vE=n(ge,"LI",{});var hIe=s(vE);cFe=n(hIe,"STRONG",{});var x6t=s(cFe);fyr=r(x6t,"roberta"),x6t.forEach(t),myr=r(hIe," \u2014 "),SJ=n(hIe,"A",{href:!0});var $6t=s(SJ);gyr=r($6t,"TFRobertaForQuestionAnswering"),$6t.forEach(t),hyr=r(hIe," (RoBERTa model)"),hIe.forEach(t),pyr=i(ge),FE=n(ge,"LI",{});var pIe=s(FE);fFe=n(pIe,"STRONG",{});var k6t=s(fFe);_yr=r(k6t,"roformer"),k6t.forEach(t),uyr=r(pIe," \u2014 "),RJ=n(pIe,"A",{href:!0});var S6t=s(RJ);byr=r(S6t,"TFRoFormerForQuestionAnswering"),S6t.forEach(t),vyr=r(pIe," (RoFormer model)"),pIe.forEach(t),Fyr=i(ge),TE=n(ge,"LI",{});var _Ie=s(TE);mFe=n(_Ie,"STRONG",{});var R6t=s(mFe);Tyr=r(R6t,"xlm"),R6t.forEach(t),Myr=r(_Ie," \u2014 "),PJ=n(_Ie,"A",{href:!0});var P6t=s(PJ);Eyr=r(P6t,"TFXLMForQuestionAnsweringSimple"),P6t.forEach(t),Cyr=r(_Ie," (XLM model)"),_Ie.forEach(t),wyr=i(ge),ME=n(ge,"LI",{});var uIe=s(ME);gFe=n(uIe,"STRONG",{});var B6t=s(gFe);Ayr=r(B6t,"xlm-roberta"),B6t.forEach(t),yyr=r(uIe," \u2014 "),BJ=n(uIe,"A",{href:!0});var I6t=s(BJ);Lyr=r(I6t,"TFXLMRobertaForQuestionAnswering"),I6t.forEach(t),xyr=r(uIe," (XLM-RoBERTa model)"),uIe.forEach(t),$yr=i(ge),EE=n(ge,"LI",{});var bIe=s(EE);hFe=n(bIe,"STRONG",{});var N6t=s(hFe);kyr=r(N6t,"xlnet"),N6t.forEach(t),Syr=r(bIe," \u2014 "),IJ=n(bIe,"A",{href:!0});var q6t=s(IJ);Ryr=r(q6t,"TFXLNetForQuestionAnsweringSimple"),q6t.forEach(t),Pyr=r(bIe," (XLNet model)"),bIe.forEach(t),ge.forEach(t),Byr=i(Nl),T(CE.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),Qje=i(f),Cc=n(f,"H2",{class:!0});var eOe=s(Cc);wE=n(eOe,"A",{id:!0,class:!0,href:!0});var j6t=s(wE);pFe=n(j6t,"SPAN",{});var D6t=s(pFe);T(F9.$$.fragment,D6t),D6t.forEach(t),j6t.forEach(t),Iyr=i(eOe),_Fe=n(eOe,"SPAN",{});var G6t=s(_Fe);Nyr=r(G6t,"TFAutoModelForVision2Seq"),G6t.forEach(t),eOe.forEach(t),Hje=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(T9.$$.fragment,ql),qyr=i(ql),wc=n(ql,"P",{});var Oee=s(wc);jyr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NJ=n(Oee,"A",{href:!0});var O6t=s(NJ);Dyr=r(O6t,"from_pretrained()"),O6t.forEach(t),Gyr=r(Oee," class method or the "),qJ=n(Oee,"A",{href:!0});var V6t=s(qJ);Oyr=r(V6t,"from_config()"),V6t.forEach(t),Vyr=r(Oee,` class
method.`),Oee.forEach(t),Xyr=i(ql),M9=n(ql,"P",{});var oOe=s(M9);zyr=r(oOe,"This class cannot be instantiated directly using "),uFe=n(oOe,"CODE",{});var X6t=s(uFe);Wyr=r(X6t,"__init__()"),X6t.forEach(t),Qyr=r(oOe," (throws an error)."),oOe.forEach(t),Hyr=i(ql),Dt=n(ql,"DIV",{class:!0});var eA=s(Dt);T(E9.$$.fragment,eA),Uyr=i(eA),bFe=n(eA,"P",{});var z6t=s(bFe);Jyr=r(z6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),z6t.forEach(t),Yyr=i(eA),Ac=n(eA,"P",{});var Vee=s(Ac);Kyr=r(Vee,`Note:
Loading a model from its configuration file does `),vFe=n(Vee,"STRONG",{});var W6t=s(vFe);Zyr=r(W6t,"not"),W6t.forEach(t),eLr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(Vee,"A",{href:!0});var Q6t=s(jJ);oLr=r(Q6t,"from_pretrained()"),Q6t.forEach(t),rLr=r(Vee," to load the model weights."),Vee.forEach(t),tLr=i(eA),T(AE.$$.fragment,eA),eA.forEach(t),aLr=i(ql),Nr=n(ql,"DIV",{class:!0});var jl=s(Nr);T(C9.$$.fragment,jl),nLr=i(jl),FFe=n(jl,"P",{});var H6t=s(FFe);sLr=r(H6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),H6t.forEach(t),lLr=i(jl),mn=n(jl,"P",{});var oA=s(mn);iLr=r(oA,"The model class to instantiate is selected based on the "),TFe=n(oA,"CODE",{});var U6t=s(TFe);dLr=r(U6t,"model_type"),U6t.forEach(t),cLr=r(oA,` property of the config object (either
passed as an argument or loaded from `),MFe=n(oA,"CODE",{});var J6t=s(MFe);fLr=r(J6t,"pretrained_model_name_or_path"),J6t.forEach(t),mLr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=n(oA,"CODE",{});var Y6t=s(EFe);gLr=r(Y6t,"pretrained_model_name_or_path"),Y6t.forEach(t),hLr=r(oA,":"),oA.forEach(t),pLr=i(jl),CFe=n(jl,"UL",{});var K6t=s(CFe);yE=n(K6t,"LI",{});var vIe=s(yE);wFe=n(vIe,"STRONG",{});var Z6t=s(wFe);_Lr=r(Z6t,"vision-encoder-decoder"),Z6t.forEach(t),uLr=r(vIe," \u2014 "),DJ=n(vIe,"A",{href:!0});var eAt=s(DJ);bLr=r(eAt,"TFVisionEncoderDecoderModel"),eAt.forEach(t),vLr=r(vIe," (Vision Encoder decoder model)"),vIe.forEach(t),K6t.forEach(t),FLr=i(jl),T(LE.$$.fragment,jl),jl.forEach(t),ql.forEach(t),Uje=i(f),yc=n(f,"H2",{class:!0});var rOe=s(yc);xE=n(rOe,"A",{id:!0,class:!0,href:!0});var oAt=s(xE);AFe=n(oAt,"SPAN",{});var rAt=s(AFe);T(w9.$$.fragment,rAt),rAt.forEach(t),oAt.forEach(t),TLr=i(rOe),yFe=n(rOe,"SPAN",{});var tAt=s(yFe);MLr=r(tAt,"TFAutoModelForSpeechSeq2Seq"),tAt.forEach(t),rOe.forEach(t),Jje=i(f),cr=n(f,"DIV",{class:!0});var Dl=s(cr);T(A9.$$.fragment,Dl),ELr=i(Dl),Lc=n(Dl,"P",{});var Xee=s(Lc);CLr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),GJ=n(Xee,"A",{href:!0});var aAt=s(GJ);wLr=r(aAt,"from_pretrained()"),aAt.forEach(t),ALr=r(Xee," class method or the "),OJ=n(Xee,"A",{href:!0});var nAt=s(OJ);yLr=r(nAt,"from_config()"),nAt.forEach(t),LLr=r(Xee,` class
method.`),Xee.forEach(t),xLr=i(Dl),y9=n(Dl,"P",{});var tOe=s(y9);$Lr=r(tOe,"This class cannot be instantiated directly using "),LFe=n(tOe,"CODE",{});var sAt=s(LFe);kLr=r(sAt,"__init__()"),sAt.forEach(t),SLr=r(tOe," (throws an error)."),tOe.forEach(t),RLr=i(Dl),Gt=n(Dl,"DIV",{class:!0});var rA=s(Gt);T(L9.$$.fragment,rA),PLr=i(rA),xFe=n(rA,"P",{});var lAt=s(xFe);BLr=r(lAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),lAt.forEach(t),ILr=i(rA),xc=n(rA,"P",{});var zee=s(xc);NLr=r(zee,`Note:
Loading a model from its configuration file does `),$Fe=n(zee,"STRONG",{});var iAt=s($Fe);qLr=r(iAt,"not"),iAt.forEach(t),jLr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(zee,"A",{href:!0});var dAt=s(VJ);DLr=r(dAt,"from_pretrained()"),dAt.forEach(t),GLr=r(zee," to load the model weights."),zee.forEach(t),OLr=i(rA),T($E.$$.fragment,rA),rA.forEach(t),VLr=i(Dl),qr=n(Dl,"DIV",{class:!0});var Gl=s(qr);T(x9.$$.fragment,Gl),XLr=i(Gl),kFe=n(Gl,"P",{});var cAt=s(kFe);zLr=r(cAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),cAt.forEach(t),WLr=i(Gl),gn=n(Gl,"P",{});var tA=s(gn);QLr=r(tA,"The model class to instantiate is selected based on the "),SFe=n(tA,"CODE",{});var fAt=s(SFe);HLr=r(fAt,"model_type"),fAt.forEach(t),ULr=r(tA,` property of the config object (either
passed as an argument or loaded from `),RFe=n(tA,"CODE",{});var mAt=s(RFe);JLr=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),YLr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=n(tA,"CODE",{});var gAt=s(PFe);KLr=r(gAt,"pretrained_model_name_or_path"),gAt.forEach(t),ZLr=r(tA,":"),tA.forEach(t),e8r=i(Gl),BFe=n(Gl,"UL",{});var hAt=s(BFe);kE=n(hAt,"LI",{});var FIe=s(kE);IFe=n(FIe,"STRONG",{});var pAt=s(IFe);o8r=r(pAt,"speech_to_text"),pAt.forEach(t),r8r=r(FIe," \u2014 "),XJ=n(FIe,"A",{href:!0});var _At=s(XJ);t8r=r(_At,"TFSpeech2TextForConditionalGeneration"),_At.forEach(t),a8r=r(FIe," (Speech2Text model)"),FIe.forEach(t),hAt.forEach(t),n8r=i(Gl),T(SE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),Yje=i(f),$c=n(f,"H2",{class:!0});var aOe=s($c);RE=n(aOe,"A",{id:!0,class:!0,href:!0});var uAt=s(RE);NFe=n(uAt,"SPAN",{});var bAt=s(NFe);T($9.$$.fragment,bAt),bAt.forEach(t),uAt.forEach(t),s8r=i(aOe),qFe=n(aOe,"SPAN",{});var vAt=s(qFe);l8r=r(vAt,"FlaxAutoModel"),vAt.forEach(t),aOe.forEach(t),Kje=i(f),fr=n(f,"DIV",{class:!0});var Ol=s(fr);T(k9.$$.fragment,Ol),i8r=i(Ol),kc=n(Ol,"P",{});var Wee=s(kc);d8r=r(Wee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zJ=n(Wee,"A",{href:!0});var FAt=s(zJ);c8r=r(FAt,"from_pretrained()"),FAt.forEach(t),f8r=r(Wee," class method or the "),WJ=n(Wee,"A",{href:!0});var TAt=s(WJ);m8r=r(TAt,"from_config()"),TAt.forEach(t),g8r=r(Wee,` class
method.`),Wee.forEach(t),h8r=i(Ol),S9=n(Ol,"P",{});var nOe=s(S9);p8r=r(nOe,"This class cannot be instantiated directly using "),jFe=n(nOe,"CODE",{});var MAt=s(jFe);_8r=r(MAt,"__init__()"),MAt.forEach(t),u8r=r(nOe," (throws an error)."),nOe.forEach(t),b8r=i(Ol),Ot=n(Ol,"DIV",{class:!0});var aA=s(Ot);T(R9.$$.fragment,aA),v8r=i(aA),DFe=n(aA,"P",{});var EAt=s(DFe);F8r=r(EAt,"Instantiates one of the base model classes of the library from a configuration."),EAt.forEach(t),T8r=i(aA),Sc=n(aA,"P",{});var Qee=s(Sc);M8r=r(Qee,`Note:
Loading a model from its configuration file does `),GFe=n(Qee,"STRONG",{});var CAt=s(GFe);E8r=r(CAt,"not"),CAt.forEach(t),C8r=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(Qee,"A",{href:!0});var wAt=s(QJ);w8r=r(wAt,"from_pretrained()"),wAt.forEach(t),A8r=r(Qee," to load the model weights."),Qee.forEach(t),y8r=i(aA),T(PE.$$.fragment,aA),aA.forEach(t),L8r=i(Ol),jr=n(Ol,"DIV",{class:!0});var Vl=s(jr);T(P9.$$.fragment,Vl),x8r=i(Vl),OFe=n(Vl,"P",{});var AAt=s(OFe);$8r=r(AAt,"Instantiate one of the base model classes of the library from a pretrained model."),AAt.forEach(t),k8r=i(Vl),hn=n(Vl,"P",{});var nA=s(hn);S8r=r(nA,"The model class to instantiate is selected based on the "),VFe=n(nA,"CODE",{});var yAt=s(VFe);R8r=r(yAt,"model_type"),yAt.forEach(t),P8r=r(nA,` property of the config object (either
passed as an argument or loaded from `),XFe=n(nA,"CODE",{});var LAt=s(XFe);B8r=r(LAt,"pretrained_model_name_or_path"),LAt.forEach(t),I8r=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=n(nA,"CODE",{});var xAt=s(zFe);N8r=r(xAt,"pretrained_model_name_or_path"),xAt.forEach(t),q8r=r(nA,":"),nA.forEach(t),j8r=i(Vl),te=n(Vl,"UL",{});var ne=s(te);BE=n(ne,"LI",{});var TIe=s(BE);WFe=n(TIe,"STRONG",{});var $At=s(WFe);D8r=r($At,"albert"),$At.forEach(t),G8r=r(TIe," \u2014 "),HJ=n(TIe,"A",{href:!0});var kAt=s(HJ);O8r=r(kAt,"FlaxAlbertModel"),kAt.forEach(t),V8r=r(TIe," (ALBERT model)"),TIe.forEach(t),X8r=i(ne),IE=n(ne,"LI",{});var MIe=s(IE);QFe=n(MIe,"STRONG",{});var SAt=s(QFe);z8r=r(SAt,"bart"),SAt.forEach(t),W8r=r(MIe," \u2014 "),UJ=n(MIe,"A",{href:!0});var RAt=s(UJ);Q8r=r(RAt,"FlaxBartModel"),RAt.forEach(t),H8r=r(MIe," (BART model)"),MIe.forEach(t),U8r=i(ne),NE=n(ne,"LI",{});var EIe=s(NE);HFe=n(EIe,"STRONG",{});var PAt=s(HFe);J8r=r(PAt,"beit"),PAt.forEach(t),Y8r=r(EIe," \u2014 "),JJ=n(EIe,"A",{href:!0});var BAt=s(JJ);K8r=r(BAt,"FlaxBeitModel"),BAt.forEach(t),Z8r=r(EIe," (BEiT model)"),EIe.forEach(t),e9r=i(ne),qE=n(ne,"LI",{});var CIe=s(qE);UFe=n(CIe,"STRONG",{});var IAt=s(UFe);o9r=r(IAt,"bert"),IAt.forEach(t),r9r=r(CIe," \u2014 "),YJ=n(CIe,"A",{href:!0});var NAt=s(YJ);t9r=r(NAt,"FlaxBertModel"),NAt.forEach(t),a9r=r(CIe," (BERT model)"),CIe.forEach(t),n9r=i(ne),jE=n(ne,"LI",{});var wIe=s(jE);JFe=n(wIe,"STRONG",{});var qAt=s(JFe);s9r=r(qAt,"big_bird"),qAt.forEach(t),l9r=r(wIe," \u2014 "),KJ=n(wIe,"A",{href:!0});var jAt=s(KJ);i9r=r(jAt,"FlaxBigBirdModel"),jAt.forEach(t),d9r=r(wIe," (BigBird model)"),wIe.forEach(t),c9r=i(ne),DE=n(ne,"LI",{});var AIe=s(DE);YFe=n(AIe,"STRONG",{});var DAt=s(YFe);f9r=r(DAt,"blenderbot"),DAt.forEach(t),m9r=r(AIe," \u2014 "),ZJ=n(AIe,"A",{href:!0});var GAt=s(ZJ);g9r=r(GAt,"FlaxBlenderbotModel"),GAt.forEach(t),h9r=r(AIe," (Blenderbot model)"),AIe.forEach(t),p9r=i(ne),GE=n(ne,"LI",{});var yIe=s(GE);KFe=n(yIe,"STRONG",{});var OAt=s(KFe);_9r=r(OAt,"blenderbot-small"),OAt.forEach(t),u9r=r(yIe," \u2014 "),eY=n(yIe,"A",{href:!0});var VAt=s(eY);b9r=r(VAt,"FlaxBlenderbotSmallModel"),VAt.forEach(t),v9r=r(yIe," (BlenderbotSmall model)"),yIe.forEach(t),F9r=i(ne),OE=n(ne,"LI",{});var LIe=s(OE);ZFe=n(LIe,"STRONG",{});var XAt=s(ZFe);T9r=r(XAt,"clip"),XAt.forEach(t),M9r=r(LIe," \u2014 "),oY=n(LIe,"A",{href:!0});var zAt=s(oY);E9r=r(zAt,"FlaxCLIPModel"),zAt.forEach(t),C9r=r(LIe," (CLIP model)"),LIe.forEach(t),w9r=i(ne),VE=n(ne,"LI",{});var xIe=s(VE);eTe=n(xIe,"STRONG",{});var WAt=s(eTe);A9r=r(WAt,"distilbert"),WAt.forEach(t),y9r=r(xIe," \u2014 "),rY=n(xIe,"A",{href:!0});var QAt=s(rY);L9r=r(QAt,"FlaxDistilBertModel"),QAt.forEach(t),x9r=r(xIe," (DistilBERT model)"),xIe.forEach(t),$9r=i(ne),XE=n(ne,"LI",{});var $Ie=s(XE);oTe=n($Ie,"STRONG",{});var HAt=s(oTe);k9r=r(HAt,"electra"),HAt.forEach(t),S9r=r($Ie," \u2014 "),tY=n($Ie,"A",{href:!0});var UAt=s(tY);R9r=r(UAt,"FlaxElectraModel"),UAt.forEach(t),P9r=r($Ie," (ELECTRA model)"),$Ie.forEach(t),B9r=i(ne),zE=n(ne,"LI",{});var kIe=s(zE);rTe=n(kIe,"STRONG",{});var JAt=s(rTe);I9r=r(JAt,"gpt2"),JAt.forEach(t),N9r=r(kIe," \u2014 "),aY=n(kIe,"A",{href:!0});var YAt=s(aY);q9r=r(YAt,"FlaxGPT2Model"),YAt.forEach(t),j9r=r(kIe," (OpenAI GPT-2 model)"),kIe.forEach(t),D9r=i(ne),WE=n(ne,"LI",{});var SIe=s(WE);tTe=n(SIe,"STRONG",{});var KAt=s(tTe);G9r=r(KAt,"gpt_neo"),KAt.forEach(t),O9r=r(SIe," \u2014 "),nY=n(SIe,"A",{href:!0});var ZAt=s(nY);V9r=r(ZAt,"FlaxGPTNeoModel"),ZAt.forEach(t),X9r=r(SIe," (GPT Neo model)"),SIe.forEach(t),z9r=i(ne),QE=n(ne,"LI",{});var RIe=s(QE);aTe=n(RIe,"STRONG",{});var eyt=s(aTe);W9r=r(eyt,"gptj"),eyt.forEach(t),Q9r=r(RIe," \u2014 "),sY=n(RIe,"A",{href:!0});var oyt=s(sY);H9r=r(oyt,"FlaxGPTJModel"),oyt.forEach(t),U9r=r(RIe," (GPT-J model)"),RIe.forEach(t),J9r=i(ne),HE=n(ne,"LI",{});var PIe=s(HE);nTe=n(PIe,"STRONG",{});var ryt=s(nTe);Y9r=r(ryt,"marian"),ryt.forEach(t),K9r=r(PIe," \u2014 "),lY=n(PIe,"A",{href:!0});var tyt=s(lY);Z9r=r(tyt,"FlaxMarianModel"),tyt.forEach(t),exr=r(PIe," (Marian model)"),PIe.forEach(t),oxr=i(ne),UE=n(ne,"LI",{});var BIe=s(UE);sTe=n(BIe,"STRONG",{});var ayt=s(sTe);rxr=r(ayt,"mbart"),ayt.forEach(t),txr=r(BIe," \u2014 "),iY=n(BIe,"A",{href:!0});var nyt=s(iY);axr=r(nyt,"FlaxMBartModel"),nyt.forEach(t),nxr=r(BIe," (mBART model)"),BIe.forEach(t),sxr=i(ne),JE=n(ne,"LI",{});var IIe=s(JE);lTe=n(IIe,"STRONG",{});var syt=s(lTe);lxr=r(syt,"mt5"),syt.forEach(t),ixr=r(IIe," \u2014 "),dY=n(IIe,"A",{href:!0});var lyt=s(dY);dxr=r(lyt,"FlaxMT5Model"),lyt.forEach(t),cxr=r(IIe," (mT5 model)"),IIe.forEach(t),fxr=i(ne),YE=n(ne,"LI",{});var NIe=s(YE);iTe=n(NIe,"STRONG",{});var iyt=s(iTe);mxr=r(iyt,"pegasus"),iyt.forEach(t),gxr=r(NIe," \u2014 "),cY=n(NIe,"A",{href:!0});var dyt=s(cY);hxr=r(dyt,"FlaxPegasusModel"),dyt.forEach(t),pxr=r(NIe," (Pegasus model)"),NIe.forEach(t),_xr=i(ne),KE=n(ne,"LI",{});var qIe=s(KE);dTe=n(qIe,"STRONG",{});var cyt=s(dTe);uxr=r(cyt,"roberta"),cyt.forEach(t),bxr=r(qIe," \u2014 "),fY=n(qIe,"A",{href:!0});var fyt=s(fY);vxr=r(fyt,"FlaxRobertaModel"),fyt.forEach(t),Fxr=r(qIe," (RoBERTa model)"),qIe.forEach(t),Txr=i(ne),ZE=n(ne,"LI",{});var jIe=s(ZE);cTe=n(jIe,"STRONG",{});var myt=s(cTe);Mxr=r(myt,"roformer"),myt.forEach(t),Exr=r(jIe," \u2014 "),mY=n(jIe,"A",{href:!0});var gyt=s(mY);Cxr=r(gyt,"FlaxRoFormerModel"),gyt.forEach(t),wxr=r(jIe," (RoFormer model)"),jIe.forEach(t),Axr=i(ne),eC=n(ne,"LI",{});var DIe=s(eC);fTe=n(DIe,"STRONG",{});var hyt=s(fTe);yxr=r(hyt,"t5"),hyt.forEach(t),Lxr=r(DIe," \u2014 "),gY=n(DIe,"A",{href:!0});var pyt=s(gY);xxr=r(pyt,"FlaxT5Model"),pyt.forEach(t),$xr=r(DIe," (T5 model)"),DIe.forEach(t),kxr=i(ne),oC=n(ne,"LI",{});var GIe=s(oC);mTe=n(GIe,"STRONG",{});var _yt=s(mTe);Sxr=r(_yt,"vision-text-dual-encoder"),_yt.forEach(t),Rxr=r(GIe," \u2014 "),hY=n(GIe,"A",{href:!0});var uyt=s(hY);Pxr=r(uyt,"FlaxVisionTextDualEncoderModel"),uyt.forEach(t),Bxr=r(GIe," (VisionTextDualEncoder model)"),GIe.forEach(t),Ixr=i(ne),rC=n(ne,"LI",{});var OIe=s(rC);gTe=n(OIe,"STRONG",{});var byt=s(gTe);Nxr=r(byt,"vit"),byt.forEach(t),qxr=r(OIe," \u2014 "),pY=n(OIe,"A",{href:!0});var vyt=s(pY);jxr=r(vyt,"FlaxViTModel"),vyt.forEach(t),Dxr=r(OIe," (ViT model)"),OIe.forEach(t),Gxr=i(ne),tC=n(ne,"LI",{});var VIe=s(tC);hTe=n(VIe,"STRONG",{});var Fyt=s(hTe);Oxr=r(Fyt,"wav2vec2"),Fyt.forEach(t),Vxr=r(VIe," \u2014 "),_Y=n(VIe,"A",{href:!0});var Tyt=s(_Y);Xxr=r(Tyt,"FlaxWav2Vec2Model"),Tyt.forEach(t),zxr=r(VIe," (Wav2Vec2 model)"),VIe.forEach(t),Wxr=i(ne),aC=n(ne,"LI",{});var XIe=s(aC);pTe=n(XIe,"STRONG",{});var Myt=s(pTe);Qxr=r(Myt,"xglm"),Myt.forEach(t),Hxr=r(XIe," \u2014 "),uY=n(XIe,"A",{href:!0});var Eyt=s(uY);Uxr=r(Eyt,"FlaxXGLMModel"),Eyt.forEach(t),Jxr=r(XIe," (XGLM model)"),XIe.forEach(t),Yxr=i(ne),nC=n(ne,"LI",{});var zIe=s(nC);_Te=n(zIe,"STRONG",{});var Cyt=s(_Te);Kxr=r(Cyt,"xlm-roberta"),Cyt.forEach(t),Zxr=r(zIe," \u2014 "),bY=n(zIe,"A",{href:!0});var wyt=s(bY);e$r=r(wyt,"FlaxXLMRobertaModel"),wyt.forEach(t),o$r=r(zIe," (XLM-RoBERTa model)"),zIe.forEach(t),ne.forEach(t),r$r=i(Vl),T(sC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),Zje=i(f),Rc=n(f,"H2",{class:!0});var sOe=s(Rc);lC=n(sOe,"A",{id:!0,class:!0,href:!0});var Ayt=s(lC);uTe=n(Ayt,"SPAN",{});var yyt=s(uTe);T(B9.$$.fragment,yyt),yyt.forEach(t),Ayt.forEach(t),t$r=i(sOe),bTe=n(sOe,"SPAN",{});var Lyt=s(bTe);a$r=r(Lyt,"FlaxAutoModelForCausalLM"),Lyt.forEach(t),sOe.forEach(t),eDe=i(f),mr=n(f,"DIV",{class:!0});var Xl=s(mr);T(I9.$$.fragment,Xl),n$r=i(Xl),Pc=n(Xl,"P",{});var Hee=s(Pc);s$r=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vY=n(Hee,"A",{href:!0});var xyt=s(vY);l$r=r(xyt,"from_pretrained()"),xyt.forEach(t),i$r=r(Hee," class method or the "),FY=n(Hee,"A",{href:!0});var $yt=s(FY);d$r=r($yt,"from_config()"),$yt.forEach(t),c$r=r(Hee,` class
method.`),Hee.forEach(t),f$r=i(Xl),N9=n(Xl,"P",{});var lOe=s(N9);m$r=r(lOe,"This class cannot be instantiated directly using "),vTe=n(lOe,"CODE",{});var kyt=s(vTe);g$r=r(kyt,"__init__()"),kyt.forEach(t),h$r=r(lOe," (throws an error)."),lOe.forEach(t),p$r=i(Xl),Vt=n(Xl,"DIV",{class:!0});var sA=s(Vt);T(q9.$$.fragment,sA),_$r=i(sA),FTe=n(sA,"P",{});var Syt=s(FTe);u$r=r(Syt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Syt.forEach(t),b$r=i(sA),Bc=n(sA,"P",{});var Uee=s(Bc);v$r=r(Uee,`Note:
Loading a model from its configuration file does `),TTe=n(Uee,"STRONG",{});var Ryt=s(TTe);F$r=r(Ryt,"not"),Ryt.forEach(t),T$r=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=n(Uee,"A",{href:!0});var Pyt=s(TY);M$r=r(Pyt,"from_pretrained()"),Pyt.forEach(t),E$r=r(Uee," to load the model weights."),Uee.forEach(t),C$r=i(sA),T(iC.$$.fragment,sA),sA.forEach(t),w$r=i(Xl),Dr=n(Xl,"DIV",{class:!0});var zl=s(Dr);T(j9.$$.fragment,zl),A$r=i(zl),MTe=n(zl,"P",{});var Byt=s(MTe);y$r=r(Byt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Byt.forEach(t),L$r=i(zl),pn=n(zl,"P",{});var lA=s(pn);x$r=r(lA,"The model class to instantiate is selected based on the "),ETe=n(lA,"CODE",{});var Iyt=s(ETe);$$r=r(Iyt,"model_type"),Iyt.forEach(t),k$r=r(lA,` property of the config object (either
passed as an argument or loaded from `),CTe=n(lA,"CODE",{});var Nyt=s(CTe);S$r=r(Nyt,"pretrained_model_name_or_path"),Nyt.forEach(t),R$r=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=n(lA,"CODE",{});var qyt=s(wTe);P$r=r(qyt,"pretrained_model_name_or_path"),qyt.forEach(t),B$r=r(lA,":"),lA.forEach(t),I$r=i(zl),Re=n(zl,"UL",{});var Xe=s(Re);dC=n(Xe,"LI",{});var WIe=s(dC);ATe=n(WIe,"STRONG",{});var jyt=s(ATe);N$r=r(jyt,"bart"),jyt.forEach(t),q$r=r(WIe," \u2014 "),MY=n(WIe,"A",{href:!0});var Dyt=s(MY);j$r=r(Dyt,"FlaxBartForCausalLM"),Dyt.forEach(t),D$r=r(WIe," (BART model)"),WIe.forEach(t),G$r=i(Xe),cC=n(Xe,"LI",{});var QIe=s(cC);yTe=n(QIe,"STRONG",{});var Gyt=s(yTe);O$r=r(Gyt,"bert"),Gyt.forEach(t),V$r=r(QIe," \u2014 "),EY=n(QIe,"A",{href:!0});var Oyt=s(EY);X$r=r(Oyt,"FlaxBertForCausalLM"),Oyt.forEach(t),z$r=r(QIe," (BERT model)"),QIe.forEach(t),W$r=i(Xe),fC=n(Xe,"LI",{});var HIe=s(fC);LTe=n(HIe,"STRONG",{});var Vyt=s(LTe);Q$r=r(Vyt,"big_bird"),Vyt.forEach(t),H$r=r(HIe," \u2014 "),CY=n(HIe,"A",{href:!0});var Xyt=s(CY);U$r=r(Xyt,"FlaxBigBirdForCausalLM"),Xyt.forEach(t),J$r=r(HIe," (BigBird model)"),HIe.forEach(t),Y$r=i(Xe),mC=n(Xe,"LI",{});var UIe=s(mC);xTe=n(UIe,"STRONG",{});var zyt=s(xTe);K$r=r(zyt,"electra"),zyt.forEach(t),Z$r=r(UIe," \u2014 "),wY=n(UIe,"A",{href:!0});var Wyt=s(wY);ekr=r(Wyt,"FlaxElectraForCausalLM"),Wyt.forEach(t),okr=r(UIe," (ELECTRA model)"),UIe.forEach(t),rkr=i(Xe),gC=n(Xe,"LI",{});var JIe=s(gC);$Te=n(JIe,"STRONG",{});var Qyt=s($Te);tkr=r(Qyt,"gpt2"),Qyt.forEach(t),akr=r(JIe," \u2014 "),AY=n(JIe,"A",{href:!0});var Hyt=s(AY);nkr=r(Hyt,"FlaxGPT2LMHeadModel"),Hyt.forEach(t),skr=r(JIe," (OpenAI GPT-2 model)"),JIe.forEach(t),lkr=i(Xe),hC=n(Xe,"LI",{});var YIe=s(hC);kTe=n(YIe,"STRONG",{});var Uyt=s(kTe);ikr=r(Uyt,"gpt_neo"),Uyt.forEach(t),dkr=r(YIe," \u2014 "),yY=n(YIe,"A",{href:!0});var Jyt=s(yY);ckr=r(Jyt,"FlaxGPTNeoForCausalLM"),Jyt.forEach(t),fkr=r(YIe," (GPT Neo model)"),YIe.forEach(t),mkr=i(Xe),pC=n(Xe,"LI",{});var KIe=s(pC);STe=n(KIe,"STRONG",{});var Yyt=s(STe);gkr=r(Yyt,"gptj"),Yyt.forEach(t),hkr=r(KIe," \u2014 "),LY=n(KIe,"A",{href:!0});var Kyt=s(LY);pkr=r(Kyt,"FlaxGPTJForCausalLM"),Kyt.forEach(t),_kr=r(KIe," (GPT-J model)"),KIe.forEach(t),ukr=i(Xe),_C=n(Xe,"LI",{});var ZIe=s(_C);RTe=n(ZIe,"STRONG",{});var Zyt=s(RTe);bkr=r(Zyt,"roberta"),Zyt.forEach(t),vkr=r(ZIe," \u2014 "),xY=n(ZIe,"A",{href:!0});var eLt=s(xY);Fkr=r(eLt,"FlaxRobertaForCausalLM"),eLt.forEach(t),Tkr=r(ZIe," (RoBERTa model)"),ZIe.forEach(t),Mkr=i(Xe),uC=n(Xe,"LI",{});var eNe=s(uC);PTe=n(eNe,"STRONG",{});var oLt=s(PTe);Ekr=r(oLt,"xglm"),oLt.forEach(t),Ckr=r(eNe," \u2014 "),$Y=n(eNe,"A",{href:!0});var rLt=s($Y);wkr=r(rLt,"FlaxXGLMForCausalLM"),rLt.forEach(t),Akr=r(eNe," (XGLM model)"),eNe.forEach(t),Xe.forEach(t),ykr=i(zl),T(bC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),oDe=i(f),Ic=n(f,"H2",{class:!0});var iOe=s(Ic);vC=n(iOe,"A",{id:!0,class:!0,href:!0});var tLt=s(vC);BTe=n(tLt,"SPAN",{});var aLt=s(BTe);T(D9.$$.fragment,aLt),aLt.forEach(t),tLt.forEach(t),Lkr=i(iOe),ITe=n(iOe,"SPAN",{});var nLt=s(ITe);xkr=r(nLt,"FlaxAutoModelForPreTraining"),nLt.forEach(t),iOe.forEach(t),rDe=i(f),gr=n(f,"DIV",{class:!0});var Wl=s(gr);T(G9.$$.fragment,Wl),$kr=i(Wl),Nc=n(Wl,"P",{});var Jee=s(Nc);kkr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kY=n(Jee,"A",{href:!0});var sLt=s(kY);Skr=r(sLt,"from_pretrained()"),sLt.forEach(t),Rkr=r(Jee," class method or the "),SY=n(Jee,"A",{href:!0});var lLt=s(SY);Pkr=r(lLt,"from_config()"),lLt.forEach(t),Bkr=r(Jee,` class
method.`),Jee.forEach(t),Ikr=i(Wl),O9=n(Wl,"P",{});var dOe=s(O9);Nkr=r(dOe,"This class cannot be instantiated directly using "),NTe=n(dOe,"CODE",{});var iLt=s(NTe);qkr=r(iLt,"__init__()"),iLt.forEach(t),jkr=r(dOe," (throws an error)."),dOe.forEach(t),Dkr=i(Wl),Xt=n(Wl,"DIV",{class:!0});var iA=s(Xt);T(V9.$$.fragment,iA),Gkr=i(iA),qTe=n(iA,"P",{});var dLt=s(qTe);Okr=r(dLt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dLt.forEach(t),Vkr=i(iA),qc=n(iA,"P",{});var Yee=s(qc);Xkr=r(Yee,`Note:
Loading a model from its configuration file does `),jTe=n(Yee,"STRONG",{});var cLt=s(jTe);zkr=r(cLt,"not"),cLt.forEach(t),Wkr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(Yee,"A",{href:!0});var fLt=s(RY);Qkr=r(fLt,"from_pretrained()"),fLt.forEach(t),Hkr=r(Yee," to load the model weights."),Yee.forEach(t),Ukr=i(iA),T(FC.$$.fragment,iA),iA.forEach(t),Jkr=i(Wl),Gr=n(Wl,"DIV",{class:!0});var Ql=s(Gr);T(X9.$$.fragment,Ql),Ykr=i(Ql),DTe=n(Ql,"P",{});var mLt=s(DTe);Kkr=r(mLt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mLt.forEach(t),Zkr=i(Ql),_n=n(Ql,"P",{});var dA=s(_n);eSr=r(dA,"The model class to instantiate is selected based on the "),GTe=n(dA,"CODE",{});var gLt=s(GTe);oSr=r(gLt,"model_type"),gLt.forEach(t),rSr=r(dA,` property of the config object (either
passed as an argument or loaded from `),OTe=n(dA,"CODE",{});var hLt=s(OTe);tSr=r(hLt,"pretrained_model_name_or_path"),hLt.forEach(t),aSr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=n(dA,"CODE",{});var pLt=s(VTe);nSr=r(pLt,"pretrained_model_name_or_path"),pLt.forEach(t),sSr=r(dA,":"),dA.forEach(t),lSr=i(Ql),Ee=n(Ql,"UL",{});var we=s(Ee);TC=n(we,"LI",{});var oNe=s(TC);XTe=n(oNe,"STRONG",{});var _Lt=s(XTe);iSr=r(_Lt,"albert"),_Lt.forEach(t),dSr=r(oNe," \u2014 "),PY=n(oNe,"A",{href:!0});var uLt=s(PY);cSr=r(uLt,"FlaxAlbertForPreTraining"),uLt.forEach(t),fSr=r(oNe," (ALBERT model)"),oNe.forEach(t),mSr=i(we),MC=n(we,"LI",{});var rNe=s(MC);zTe=n(rNe,"STRONG",{});var bLt=s(zTe);gSr=r(bLt,"bart"),bLt.forEach(t),hSr=r(rNe," \u2014 "),BY=n(rNe,"A",{href:!0});var vLt=s(BY);pSr=r(vLt,"FlaxBartForConditionalGeneration"),vLt.forEach(t),_Sr=r(rNe," (BART model)"),rNe.forEach(t),uSr=i(we),EC=n(we,"LI",{});var tNe=s(EC);WTe=n(tNe,"STRONG",{});var FLt=s(WTe);bSr=r(FLt,"bert"),FLt.forEach(t),vSr=r(tNe," \u2014 "),IY=n(tNe,"A",{href:!0});var TLt=s(IY);FSr=r(TLt,"FlaxBertForPreTraining"),TLt.forEach(t),TSr=r(tNe," (BERT model)"),tNe.forEach(t),MSr=i(we),CC=n(we,"LI",{});var aNe=s(CC);QTe=n(aNe,"STRONG",{});var MLt=s(QTe);ESr=r(MLt,"big_bird"),MLt.forEach(t),CSr=r(aNe," \u2014 "),NY=n(aNe,"A",{href:!0});var ELt=s(NY);wSr=r(ELt,"FlaxBigBirdForPreTraining"),ELt.forEach(t),ASr=r(aNe," (BigBird model)"),aNe.forEach(t),ySr=i(we),wC=n(we,"LI",{});var nNe=s(wC);HTe=n(nNe,"STRONG",{});var CLt=s(HTe);LSr=r(CLt,"electra"),CLt.forEach(t),xSr=r(nNe," \u2014 "),qY=n(nNe,"A",{href:!0});var wLt=s(qY);$Sr=r(wLt,"FlaxElectraForPreTraining"),wLt.forEach(t),kSr=r(nNe," (ELECTRA model)"),nNe.forEach(t),SSr=i(we),AC=n(we,"LI",{});var sNe=s(AC);UTe=n(sNe,"STRONG",{});var ALt=s(UTe);RSr=r(ALt,"mbart"),ALt.forEach(t),PSr=r(sNe," \u2014 "),jY=n(sNe,"A",{href:!0});var yLt=s(jY);BSr=r(yLt,"FlaxMBartForConditionalGeneration"),yLt.forEach(t),ISr=r(sNe," (mBART model)"),sNe.forEach(t),NSr=i(we),yC=n(we,"LI",{});var lNe=s(yC);JTe=n(lNe,"STRONG",{});var LLt=s(JTe);qSr=r(LLt,"mt5"),LLt.forEach(t),jSr=r(lNe," \u2014 "),DY=n(lNe,"A",{href:!0});var xLt=s(DY);DSr=r(xLt,"FlaxMT5ForConditionalGeneration"),xLt.forEach(t),GSr=r(lNe," (mT5 model)"),lNe.forEach(t),OSr=i(we),LC=n(we,"LI",{});var iNe=s(LC);YTe=n(iNe,"STRONG",{});var $Lt=s(YTe);VSr=r($Lt,"roberta"),$Lt.forEach(t),XSr=r(iNe," \u2014 "),GY=n(iNe,"A",{href:!0});var kLt=s(GY);zSr=r(kLt,"FlaxRobertaForMaskedLM"),kLt.forEach(t),WSr=r(iNe," (RoBERTa model)"),iNe.forEach(t),QSr=i(we),xC=n(we,"LI",{});var dNe=s(xC);KTe=n(dNe,"STRONG",{});var SLt=s(KTe);HSr=r(SLt,"roformer"),SLt.forEach(t),USr=r(dNe," \u2014 "),OY=n(dNe,"A",{href:!0});var RLt=s(OY);JSr=r(RLt,"FlaxRoFormerForMaskedLM"),RLt.forEach(t),YSr=r(dNe," (RoFormer model)"),dNe.forEach(t),KSr=i(we),$C=n(we,"LI",{});var cNe=s($C);ZTe=n(cNe,"STRONG",{});var PLt=s(ZTe);ZSr=r(PLt,"t5"),PLt.forEach(t),eRr=r(cNe," \u2014 "),VY=n(cNe,"A",{href:!0});var BLt=s(VY);oRr=r(BLt,"FlaxT5ForConditionalGeneration"),BLt.forEach(t),rRr=r(cNe," (T5 model)"),cNe.forEach(t),tRr=i(we),kC=n(we,"LI",{});var fNe=s(kC);e7e=n(fNe,"STRONG",{});var ILt=s(e7e);aRr=r(ILt,"wav2vec2"),ILt.forEach(t),nRr=r(fNe," \u2014 "),XY=n(fNe,"A",{href:!0});var NLt=s(XY);sRr=r(NLt,"FlaxWav2Vec2ForPreTraining"),NLt.forEach(t),lRr=r(fNe," (Wav2Vec2 model)"),fNe.forEach(t),iRr=i(we),SC=n(we,"LI",{});var mNe=s(SC);o7e=n(mNe,"STRONG",{});var qLt=s(o7e);dRr=r(qLt,"xlm-roberta"),qLt.forEach(t),cRr=r(mNe," \u2014 "),zY=n(mNe,"A",{href:!0});var jLt=s(zY);fRr=r(jLt,"FlaxXLMRobertaForMaskedLM"),jLt.forEach(t),mRr=r(mNe," (XLM-RoBERTa model)"),mNe.forEach(t),we.forEach(t),gRr=i(Ql),T(RC.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),tDe=i(f),jc=n(f,"H2",{class:!0});var cOe=s(jc);PC=n(cOe,"A",{id:!0,class:!0,href:!0});var DLt=s(PC);r7e=n(DLt,"SPAN",{});var GLt=s(r7e);T(z9.$$.fragment,GLt),GLt.forEach(t),DLt.forEach(t),hRr=i(cOe),t7e=n(cOe,"SPAN",{});var OLt=s(t7e);pRr=r(OLt,"FlaxAutoModelForMaskedLM"),OLt.forEach(t),cOe.forEach(t),aDe=i(f),hr=n(f,"DIV",{class:!0});var Hl=s(hr);T(W9.$$.fragment,Hl),_Rr=i(Hl),Dc=n(Hl,"P",{});var Kee=s(Dc);uRr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WY=n(Kee,"A",{href:!0});var VLt=s(WY);bRr=r(VLt,"from_pretrained()"),VLt.forEach(t),vRr=r(Kee," class method or the "),QY=n(Kee,"A",{href:!0});var XLt=s(QY);FRr=r(XLt,"from_config()"),XLt.forEach(t),TRr=r(Kee,` class
method.`),Kee.forEach(t),MRr=i(Hl),Q9=n(Hl,"P",{});var fOe=s(Q9);ERr=r(fOe,"This class cannot be instantiated directly using "),a7e=n(fOe,"CODE",{});var zLt=s(a7e);CRr=r(zLt,"__init__()"),zLt.forEach(t),wRr=r(fOe," (throws an error)."),fOe.forEach(t),ARr=i(Hl),zt=n(Hl,"DIV",{class:!0});var cA=s(zt);T(H9.$$.fragment,cA),yRr=i(cA),n7e=n(cA,"P",{});var WLt=s(n7e);LRr=r(WLt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),WLt.forEach(t),xRr=i(cA),Gc=n(cA,"P",{});var Zee=s(Gc);$Rr=r(Zee,`Note:
Loading a model from its configuration file does `),s7e=n(Zee,"STRONG",{});var QLt=s(s7e);kRr=r(QLt,"not"),QLt.forEach(t),SRr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=n(Zee,"A",{href:!0});var HLt=s(HY);RRr=r(HLt,"from_pretrained()"),HLt.forEach(t),PRr=r(Zee," to load the model weights."),Zee.forEach(t),BRr=i(cA),T(BC.$$.fragment,cA),cA.forEach(t),IRr=i(Hl),Or=n(Hl,"DIV",{class:!0});var Ul=s(Or);T(U9.$$.fragment,Ul),NRr=i(Ul),l7e=n(Ul,"P",{});var ULt=s(l7e);qRr=r(ULt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ULt.forEach(t),jRr=i(Ul),un=n(Ul,"P",{});var fA=s(un);DRr=r(fA,"The model class to instantiate is selected based on the "),i7e=n(fA,"CODE",{});var JLt=s(i7e);GRr=r(JLt,"model_type"),JLt.forEach(t),ORr=r(fA,` property of the config object (either
passed as an argument or loaded from `),d7e=n(fA,"CODE",{});var YLt=s(d7e);VRr=r(YLt,"pretrained_model_name_or_path"),YLt.forEach(t),XRr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c7e=n(fA,"CODE",{});var KLt=s(c7e);zRr=r(KLt,"pretrained_model_name_or_path"),KLt.forEach(t),WRr=r(fA,":"),fA.forEach(t),QRr=i(Ul),Le=n(Ul,"UL",{});var Ie=s(Le);IC=n(Ie,"LI",{});var gNe=s(IC);f7e=n(gNe,"STRONG",{});var ZLt=s(f7e);HRr=r(ZLt,"albert"),ZLt.forEach(t),URr=r(gNe," \u2014 "),UY=n(gNe,"A",{href:!0});var e8t=s(UY);JRr=r(e8t,"FlaxAlbertForMaskedLM"),e8t.forEach(t),YRr=r(gNe," (ALBERT model)"),gNe.forEach(t),KRr=i(Ie),NC=n(Ie,"LI",{});var hNe=s(NC);m7e=n(hNe,"STRONG",{});var o8t=s(m7e);ZRr=r(o8t,"bart"),o8t.forEach(t),ePr=r(hNe," \u2014 "),JY=n(hNe,"A",{href:!0});var r8t=s(JY);oPr=r(r8t,"FlaxBartForConditionalGeneration"),r8t.forEach(t),rPr=r(hNe," (BART model)"),hNe.forEach(t),tPr=i(Ie),qC=n(Ie,"LI",{});var pNe=s(qC);g7e=n(pNe,"STRONG",{});var t8t=s(g7e);aPr=r(t8t,"bert"),t8t.forEach(t),nPr=r(pNe," \u2014 "),YY=n(pNe,"A",{href:!0});var a8t=s(YY);sPr=r(a8t,"FlaxBertForMaskedLM"),a8t.forEach(t),lPr=r(pNe," (BERT model)"),pNe.forEach(t),iPr=i(Ie),jC=n(Ie,"LI",{});var _Ne=s(jC);h7e=n(_Ne,"STRONG",{});var n8t=s(h7e);dPr=r(n8t,"big_bird"),n8t.forEach(t),cPr=r(_Ne," \u2014 "),KY=n(_Ne,"A",{href:!0});var s8t=s(KY);fPr=r(s8t,"FlaxBigBirdForMaskedLM"),s8t.forEach(t),mPr=r(_Ne," (BigBird model)"),_Ne.forEach(t),gPr=i(Ie),DC=n(Ie,"LI",{});var uNe=s(DC);p7e=n(uNe,"STRONG",{});var l8t=s(p7e);hPr=r(l8t,"distilbert"),l8t.forEach(t),pPr=r(uNe," \u2014 "),ZY=n(uNe,"A",{href:!0});var i8t=s(ZY);_Pr=r(i8t,"FlaxDistilBertForMaskedLM"),i8t.forEach(t),uPr=r(uNe," (DistilBERT model)"),uNe.forEach(t),bPr=i(Ie),GC=n(Ie,"LI",{});var bNe=s(GC);_7e=n(bNe,"STRONG",{});var d8t=s(_7e);vPr=r(d8t,"electra"),d8t.forEach(t),FPr=r(bNe," \u2014 "),eK=n(bNe,"A",{href:!0});var c8t=s(eK);TPr=r(c8t,"FlaxElectraForMaskedLM"),c8t.forEach(t),MPr=r(bNe," (ELECTRA model)"),bNe.forEach(t),EPr=i(Ie),OC=n(Ie,"LI",{});var vNe=s(OC);u7e=n(vNe,"STRONG",{});var f8t=s(u7e);CPr=r(f8t,"mbart"),f8t.forEach(t),wPr=r(vNe," \u2014 "),oK=n(vNe,"A",{href:!0});var m8t=s(oK);APr=r(m8t,"FlaxMBartForConditionalGeneration"),m8t.forEach(t),yPr=r(vNe," (mBART model)"),vNe.forEach(t),LPr=i(Ie),VC=n(Ie,"LI",{});var FNe=s(VC);b7e=n(FNe,"STRONG",{});var g8t=s(b7e);xPr=r(g8t,"roberta"),g8t.forEach(t),$Pr=r(FNe," \u2014 "),rK=n(FNe,"A",{href:!0});var h8t=s(rK);kPr=r(h8t,"FlaxRobertaForMaskedLM"),h8t.forEach(t),SPr=r(FNe," (RoBERTa model)"),FNe.forEach(t),RPr=i(Ie),XC=n(Ie,"LI",{});var TNe=s(XC);v7e=n(TNe,"STRONG",{});var p8t=s(v7e);PPr=r(p8t,"roformer"),p8t.forEach(t),BPr=r(TNe," \u2014 "),tK=n(TNe,"A",{href:!0});var _8t=s(tK);IPr=r(_8t,"FlaxRoFormerForMaskedLM"),_8t.forEach(t),NPr=r(TNe," (RoFormer model)"),TNe.forEach(t),qPr=i(Ie),zC=n(Ie,"LI",{});var MNe=s(zC);F7e=n(MNe,"STRONG",{});var u8t=s(F7e);jPr=r(u8t,"xlm-roberta"),u8t.forEach(t),DPr=r(MNe," \u2014 "),aK=n(MNe,"A",{href:!0});var b8t=s(aK);GPr=r(b8t,"FlaxXLMRobertaForMaskedLM"),b8t.forEach(t),OPr=r(MNe," (XLM-RoBERTa model)"),MNe.forEach(t),Ie.forEach(t),VPr=i(Ul),T(WC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),nDe=i(f),Oc=n(f,"H2",{class:!0});var mOe=s(Oc);QC=n(mOe,"A",{id:!0,class:!0,href:!0});var v8t=s(QC);T7e=n(v8t,"SPAN",{});var F8t=s(T7e);T(J9.$$.fragment,F8t),F8t.forEach(t),v8t.forEach(t),XPr=i(mOe),M7e=n(mOe,"SPAN",{});var T8t=s(M7e);zPr=r(T8t,"FlaxAutoModelForSeq2SeqLM"),T8t.forEach(t),mOe.forEach(t),sDe=i(f),pr=n(f,"DIV",{class:!0});var Jl=s(pr);T(Y9.$$.fragment,Jl),WPr=i(Jl),Vc=n(Jl,"P",{});var eoe=s(Vc);QPr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nK=n(eoe,"A",{href:!0});var M8t=s(nK);HPr=r(M8t,"from_pretrained()"),M8t.forEach(t),UPr=r(eoe," class method or the "),sK=n(eoe,"A",{href:!0});var E8t=s(sK);JPr=r(E8t,"from_config()"),E8t.forEach(t),YPr=r(eoe,` class
method.`),eoe.forEach(t),KPr=i(Jl),K9=n(Jl,"P",{});var gOe=s(K9);ZPr=r(gOe,"This class cannot be instantiated directly using "),E7e=n(gOe,"CODE",{});var C8t=s(E7e);eBr=r(C8t,"__init__()"),C8t.forEach(t),oBr=r(gOe," (throws an error)."),gOe.forEach(t),rBr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var mA=s(Wt);T(Z9.$$.fragment,mA),tBr=i(mA),C7e=n(mA,"P",{});var w8t=s(C7e);aBr=r(w8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),w8t.forEach(t),nBr=i(mA),Xc=n(mA,"P",{});var ooe=s(Xc);sBr=r(ooe,`Note:
Loading a model from its configuration file does `),w7e=n(ooe,"STRONG",{});var A8t=s(w7e);lBr=r(A8t,"not"),A8t.forEach(t),iBr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=n(ooe,"A",{href:!0});var y8t=s(lK);dBr=r(y8t,"from_pretrained()"),y8t.forEach(t),cBr=r(ooe," to load the model weights."),ooe.forEach(t),fBr=i(mA),T(HC.$$.fragment,mA),mA.forEach(t),mBr=i(Jl),Vr=n(Jl,"DIV",{class:!0});var Yl=s(Vr);T(ex.$$.fragment,Yl),gBr=i(Yl),A7e=n(Yl,"P",{});var L8t=s(A7e);hBr=r(L8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),L8t.forEach(t),pBr=i(Yl),bn=n(Yl,"P",{});var gA=s(bn);_Br=r(gA,"The model class to instantiate is selected based on the "),y7e=n(gA,"CODE",{});var x8t=s(y7e);uBr=r(x8t,"model_type"),x8t.forEach(t),bBr=r(gA,` property of the config object (either
passed as an argument or loaded from `),L7e=n(gA,"CODE",{});var $8t=s(L7e);vBr=r($8t,"pretrained_model_name_or_path"),$8t.forEach(t),FBr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x7e=n(gA,"CODE",{});var k8t=s(x7e);TBr=r(k8t,"pretrained_model_name_or_path"),k8t.forEach(t),MBr=r(gA,":"),gA.forEach(t),EBr=i(Yl),Pe=n(Yl,"UL",{});var ze=s(Pe);UC=n(ze,"LI",{});var ENe=s(UC);$7e=n(ENe,"STRONG",{});var S8t=s($7e);CBr=r(S8t,"bart"),S8t.forEach(t),wBr=r(ENe," \u2014 "),iK=n(ENe,"A",{href:!0});var R8t=s(iK);ABr=r(R8t,"FlaxBartForConditionalGeneration"),R8t.forEach(t),yBr=r(ENe," (BART model)"),ENe.forEach(t),LBr=i(ze),JC=n(ze,"LI",{});var CNe=s(JC);k7e=n(CNe,"STRONG",{});var P8t=s(k7e);xBr=r(P8t,"blenderbot"),P8t.forEach(t),$Br=r(CNe," \u2014 "),dK=n(CNe,"A",{href:!0});var B8t=s(dK);kBr=r(B8t,"FlaxBlenderbotForConditionalGeneration"),B8t.forEach(t),SBr=r(CNe," (Blenderbot model)"),CNe.forEach(t),RBr=i(ze),YC=n(ze,"LI",{});var wNe=s(YC);S7e=n(wNe,"STRONG",{});var I8t=s(S7e);PBr=r(I8t,"blenderbot-small"),I8t.forEach(t),BBr=r(wNe," \u2014 "),cK=n(wNe,"A",{href:!0});var N8t=s(cK);IBr=r(N8t,"FlaxBlenderbotSmallForConditionalGeneration"),N8t.forEach(t),NBr=r(wNe," (BlenderbotSmall model)"),wNe.forEach(t),qBr=i(ze),KC=n(ze,"LI",{});var ANe=s(KC);R7e=n(ANe,"STRONG",{});var q8t=s(R7e);jBr=r(q8t,"encoder-decoder"),q8t.forEach(t),DBr=r(ANe," \u2014 "),fK=n(ANe,"A",{href:!0});var j8t=s(fK);GBr=r(j8t,"FlaxEncoderDecoderModel"),j8t.forEach(t),OBr=r(ANe," (Encoder decoder model)"),ANe.forEach(t),VBr=i(ze),ZC=n(ze,"LI",{});var yNe=s(ZC);P7e=n(yNe,"STRONG",{});var D8t=s(P7e);XBr=r(D8t,"marian"),D8t.forEach(t),zBr=r(yNe," \u2014 "),mK=n(yNe,"A",{href:!0});var G8t=s(mK);WBr=r(G8t,"FlaxMarianMTModel"),G8t.forEach(t),QBr=r(yNe," (Marian model)"),yNe.forEach(t),HBr=i(ze),ew=n(ze,"LI",{});var LNe=s(ew);B7e=n(LNe,"STRONG",{});var O8t=s(B7e);UBr=r(O8t,"mbart"),O8t.forEach(t),JBr=r(LNe," \u2014 "),gK=n(LNe,"A",{href:!0});var V8t=s(gK);YBr=r(V8t,"FlaxMBartForConditionalGeneration"),V8t.forEach(t),KBr=r(LNe," (mBART model)"),LNe.forEach(t),ZBr=i(ze),ow=n(ze,"LI",{});var xNe=s(ow);I7e=n(xNe,"STRONG",{});var X8t=s(I7e);eIr=r(X8t,"mt5"),X8t.forEach(t),oIr=r(xNe," \u2014 "),hK=n(xNe,"A",{href:!0});var z8t=s(hK);rIr=r(z8t,"FlaxMT5ForConditionalGeneration"),z8t.forEach(t),tIr=r(xNe," (mT5 model)"),xNe.forEach(t),aIr=i(ze),rw=n(ze,"LI",{});var $Ne=s(rw);N7e=n($Ne,"STRONG",{});var W8t=s(N7e);nIr=r(W8t,"pegasus"),W8t.forEach(t),sIr=r($Ne," \u2014 "),pK=n($Ne,"A",{href:!0});var Q8t=s(pK);lIr=r(Q8t,"FlaxPegasusForConditionalGeneration"),Q8t.forEach(t),iIr=r($Ne," (Pegasus model)"),$Ne.forEach(t),dIr=i(ze),tw=n(ze,"LI",{});var kNe=s(tw);q7e=n(kNe,"STRONG",{});var H8t=s(q7e);cIr=r(H8t,"t5"),H8t.forEach(t),fIr=r(kNe," \u2014 "),_K=n(kNe,"A",{href:!0});var U8t=s(_K);mIr=r(U8t,"FlaxT5ForConditionalGeneration"),U8t.forEach(t),gIr=r(kNe," (T5 model)"),kNe.forEach(t),ze.forEach(t),hIr=i(Yl),T(aw.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),lDe=i(f),zc=n(f,"H2",{class:!0});var hOe=s(zc);nw=n(hOe,"A",{id:!0,class:!0,href:!0});var J8t=s(nw);j7e=n(J8t,"SPAN",{});var Y8t=s(j7e);T(ox.$$.fragment,Y8t),Y8t.forEach(t),J8t.forEach(t),pIr=i(hOe),D7e=n(hOe,"SPAN",{});var K8t=s(D7e);_Ir=r(K8t,"FlaxAutoModelForSequenceClassification"),K8t.forEach(t),hOe.forEach(t),iDe=i(f),_r=n(f,"DIV",{class:!0});var Kl=s(_r);T(rx.$$.fragment,Kl),uIr=i(Kl),Wc=n(Kl,"P",{});var roe=s(Wc);bIr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uK=n(roe,"A",{href:!0});var Z8t=s(uK);vIr=r(Z8t,"from_pretrained()"),Z8t.forEach(t),FIr=r(roe," class method or the "),bK=n(roe,"A",{href:!0});var e9t=s(bK);TIr=r(e9t,"from_config()"),e9t.forEach(t),MIr=r(roe,` class
method.`),roe.forEach(t),EIr=i(Kl),tx=n(Kl,"P",{});var pOe=s(tx);CIr=r(pOe,"This class cannot be instantiated directly using "),G7e=n(pOe,"CODE",{});var o9t=s(G7e);wIr=r(o9t,"__init__()"),o9t.forEach(t),AIr=r(pOe," (throws an error)."),pOe.forEach(t),yIr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var hA=s(Qt);T(ax.$$.fragment,hA),LIr=i(hA),O7e=n(hA,"P",{});var r9t=s(O7e);xIr=r(r9t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),r9t.forEach(t),$Ir=i(hA),Qc=n(hA,"P",{});var toe=s(Qc);kIr=r(toe,`Note:
Loading a model from its configuration file does `),V7e=n(toe,"STRONG",{});var t9t=s(V7e);SIr=r(t9t,"not"),t9t.forEach(t),RIr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=n(toe,"A",{href:!0});var a9t=s(vK);PIr=r(a9t,"from_pretrained()"),a9t.forEach(t),BIr=r(toe," to load the model weights."),toe.forEach(t),IIr=i(hA),T(sw.$$.fragment,hA),hA.forEach(t),NIr=i(Kl),Xr=n(Kl,"DIV",{class:!0});var Zl=s(Xr);T(nx.$$.fragment,Zl),qIr=i(Zl),X7e=n(Zl,"P",{});var n9t=s(X7e);jIr=r(n9t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),n9t.forEach(t),DIr=i(Zl),vn=n(Zl,"P",{});var pA=s(vn);GIr=r(pA,"The model class to instantiate is selected based on the "),z7e=n(pA,"CODE",{});var s9t=s(z7e);OIr=r(s9t,"model_type"),s9t.forEach(t),VIr=r(pA,` property of the config object (either
passed as an argument or loaded from `),W7e=n(pA,"CODE",{});var l9t=s(W7e);XIr=r(l9t,"pretrained_model_name_or_path"),l9t.forEach(t),zIr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=n(pA,"CODE",{});var i9t=s(Q7e);WIr=r(i9t,"pretrained_model_name_or_path"),i9t.forEach(t),QIr=r(pA,":"),pA.forEach(t),HIr=i(Zl),xe=n(Zl,"UL",{});var Ne=s(xe);lw=n(Ne,"LI",{});var SNe=s(lw);H7e=n(SNe,"STRONG",{});var d9t=s(H7e);UIr=r(d9t,"albert"),d9t.forEach(t),JIr=r(SNe," \u2014 "),FK=n(SNe,"A",{href:!0});var c9t=s(FK);YIr=r(c9t,"FlaxAlbertForSequenceClassification"),c9t.forEach(t),KIr=r(SNe," (ALBERT model)"),SNe.forEach(t),ZIr=i(Ne),iw=n(Ne,"LI",{});var RNe=s(iw);U7e=n(RNe,"STRONG",{});var f9t=s(U7e);eNr=r(f9t,"bart"),f9t.forEach(t),oNr=r(RNe," \u2014 "),TK=n(RNe,"A",{href:!0});var m9t=s(TK);rNr=r(m9t,"FlaxBartForSequenceClassification"),m9t.forEach(t),tNr=r(RNe," (BART model)"),RNe.forEach(t),aNr=i(Ne),dw=n(Ne,"LI",{});var PNe=s(dw);J7e=n(PNe,"STRONG",{});var g9t=s(J7e);nNr=r(g9t,"bert"),g9t.forEach(t),sNr=r(PNe," \u2014 "),MK=n(PNe,"A",{href:!0});var h9t=s(MK);lNr=r(h9t,"FlaxBertForSequenceClassification"),h9t.forEach(t),iNr=r(PNe," (BERT model)"),PNe.forEach(t),dNr=i(Ne),cw=n(Ne,"LI",{});var BNe=s(cw);Y7e=n(BNe,"STRONG",{});var p9t=s(Y7e);cNr=r(p9t,"big_bird"),p9t.forEach(t),fNr=r(BNe," \u2014 "),EK=n(BNe,"A",{href:!0});var _9t=s(EK);mNr=r(_9t,"FlaxBigBirdForSequenceClassification"),_9t.forEach(t),gNr=r(BNe," (BigBird model)"),BNe.forEach(t),hNr=i(Ne),fw=n(Ne,"LI",{});var INe=s(fw);K7e=n(INe,"STRONG",{});var u9t=s(K7e);pNr=r(u9t,"distilbert"),u9t.forEach(t),_Nr=r(INe," \u2014 "),CK=n(INe,"A",{href:!0});var b9t=s(CK);uNr=r(b9t,"FlaxDistilBertForSequenceClassification"),b9t.forEach(t),bNr=r(INe," (DistilBERT model)"),INe.forEach(t),vNr=i(Ne),mw=n(Ne,"LI",{});var NNe=s(mw);Z7e=n(NNe,"STRONG",{});var v9t=s(Z7e);FNr=r(v9t,"electra"),v9t.forEach(t),TNr=r(NNe," \u2014 "),wK=n(NNe,"A",{href:!0});var F9t=s(wK);MNr=r(F9t,"FlaxElectraForSequenceClassification"),F9t.forEach(t),ENr=r(NNe," (ELECTRA model)"),NNe.forEach(t),CNr=i(Ne),gw=n(Ne,"LI",{});var qNe=s(gw);eMe=n(qNe,"STRONG",{});var T9t=s(eMe);wNr=r(T9t,"mbart"),T9t.forEach(t),ANr=r(qNe," \u2014 "),AK=n(qNe,"A",{href:!0});var M9t=s(AK);yNr=r(M9t,"FlaxMBartForSequenceClassification"),M9t.forEach(t),LNr=r(qNe," (mBART model)"),qNe.forEach(t),xNr=i(Ne),hw=n(Ne,"LI",{});var jNe=s(hw);oMe=n(jNe,"STRONG",{});var E9t=s(oMe);$Nr=r(E9t,"roberta"),E9t.forEach(t),kNr=r(jNe," \u2014 "),yK=n(jNe,"A",{href:!0});var C9t=s(yK);SNr=r(C9t,"FlaxRobertaForSequenceClassification"),C9t.forEach(t),RNr=r(jNe," (RoBERTa model)"),jNe.forEach(t),PNr=i(Ne),pw=n(Ne,"LI",{});var DNe=s(pw);rMe=n(DNe,"STRONG",{});var w9t=s(rMe);BNr=r(w9t,"roformer"),w9t.forEach(t),INr=r(DNe," \u2014 "),LK=n(DNe,"A",{href:!0});var A9t=s(LK);NNr=r(A9t,"FlaxRoFormerForSequenceClassification"),A9t.forEach(t),qNr=r(DNe," (RoFormer model)"),DNe.forEach(t),jNr=i(Ne),_w=n(Ne,"LI",{});var GNe=s(_w);tMe=n(GNe,"STRONG",{});var y9t=s(tMe);DNr=r(y9t,"xlm-roberta"),y9t.forEach(t),GNr=r(GNe," \u2014 "),xK=n(GNe,"A",{href:!0});var L9t=s(xK);ONr=r(L9t,"FlaxXLMRobertaForSequenceClassification"),L9t.forEach(t),VNr=r(GNe," (XLM-RoBERTa model)"),GNe.forEach(t),Ne.forEach(t),XNr=i(Zl),T(uw.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),dDe=i(f),Hc=n(f,"H2",{class:!0});var _Oe=s(Hc);bw=n(_Oe,"A",{id:!0,class:!0,href:!0});var x9t=s(bw);aMe=n(x9t,"SPAN",{});var $9t=s(aMe);T(sx.$$.fragment,$9t),$9t.forEach(t),x9t.forEach(t),zNr=i(_Oe),nMe=n(_Oe,"SPAN",{});var k9t=s(nMe);WNr=r(k9t,"FlaxAutoModelForQuestionAnswering"),k9t.forEach(t),_Oe.forEach(t),cDe=i(f),ur=n(f,"DIV",{class:!0});var ei=s(ur);T(lx.$$.fragment,ei),QNr=i(ei),Uc=n(ei,"P",{});var aoe=s(Uc);HNr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$K=n(aoe,"A",{href:!0});var S9t=s($K);UNr=r(S9t,"from_pretrained()"),S9t.forEach(t),JNr=r(aoe," class method or the "),kK=n(aoe,"A",{href:!0});var R9t=s(kK);YNr=r(R9t,"from_config()"),R9t.forEach(t),KNr=r(aoe,` class
method.`),aoe.forEach(t),ZNr=i(ei),ix=n(ei,"P",{});var uOe=s(ix);eqr=r(uOe,"This class cannot be instantiated directly using "),sMe=n(uOe,"CODE",{});var P9t=s(sMe);oqr=r(P9t,"__init__()"),P9t.forEach(t),rqr=r(uOe," (throws an error)."),uOe.forEach(t),tqr=i(ei),Ht=n(ei,"DIV",{class:!0});var _A=s(Ht);T(dx.$$.fragment,_A),aqr=i(_A),lMe=n(_A,"P",{});var B9t=s(lMe);nqr=r(B9t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),B9t.forEach(t),sqr=i(_A),Jc=n(_A,"P",{});var noe=s(Jc);lqr=r(noe,`Note:
Loading a model from its configuration file does `),iMe=n(noe,"STRONG",{});var I9t=s(iMe);iqr=r(I9t,"not"),I9t.forEach(t),dqr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SK=n(noe,"A",{href:!0});var N9t=s(SK);cqr=r(N9t,"from_pretrained()"),N9t.forEach(t),fqr=r(noe," to load the model weights."),noe.forEach(t),mqr=i(_A),T(vw.$$.fragment,_A),_A.forEach(t),gqr=i(ei),zr=n(ei,"DIV",{class:!0});var oi=s(zr);T(cx.$$.fragment,oi),hqr=i(oi),dMe=n(oi,"P",{});var q9t=s(dMe);pqr=r(q9t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),q9t.forEach(t),_qr=i(oi),Fn=n(oi,"P",{});var uA=s(Fn);uqr=r(uA,"The model class to instantiate is selected based on the "),cMe=n(uA,"CODE",{});var j9t=s(cMe);bqr=r(j9t,"model_type"),j9t.forEach(t),vqr=r(uA,` property of the config object (either
passed as an argument or loaded from `),fMe=n(uA,"CODE",{});var D9t=s(fMe);Fqr=r(D9t,"pretrained_model_name_or_path"),D9t.forEach(t),Tqr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=n(uA,"CODE",{});var G9t=s(mMe);Mqr=r(G9t,"pretrained_model_name_or_path"),G9t.forEach(t),Eqr=r(uA,":"),uA.forEach(t),Cqr=i(oi),$e=n(oi,"UL",{});var qe=s($e);Fw=n(qe,"LI",{});var ONe=s(Fw);gMe=n(ONe,"STRONG",{});var O9t=s(gMe);wqr=r(O9t,"albert"),O9t.forEach(t),Aqr=r(ONe," \u2014 "),RK=n(ONe,"A",{href:!0});var V9t=s(RK);yqr=r(V9t,"FlaxAlbertForQuestionAnswering"),V9t.forEach(t),Lqr=r(ONe," (ALBERT model)"),ONe.forEach(t),xqr=i(qe),Tw=n(qe,"LI",{});var VNe=s(Tw);hMe=n(VNe,"STRONG",{});var X9t=s(hMe);$qr=r(X9t,"bart"),X9t.forEach(t),kqr=r(VNe," \u2014 "),PK=n(VNe,"A",{href:!0});var z9t=s(PK);Sqr=r(z9t,"FlaxBartForQuestionAnswering"),z9t.forEach(t),Rqr=r(VNe," (BART model)"),VNe.forEach(t),Pqr=i(qe),Mw=n(qe,"LI",{});var XNe=s(Mw);pMe=n(XNe,"STRONG",{});var W9t=s(pMe);Bqr=r(W9t,"bert"),W9t.forEach(t),Iqr=r(XNe," \u2014 "),BK=n(XNe,"A",{href:!0});var Q9t=s(BK);Nqr=r(Q9t,"FlaxBertForQuestionAnswering"),Q9t.forEach(t),qqr=r(XNe," (BERT model)"),XNe.forEach(t),jqr=i(qe),Ew=n(qe,"LI",{});var zNe=s(Ew);_Me=n(zNe,"STRONG",{});var H9t=s(_Me);Dqr=r(H9t,"big_bird"),H9t.forEach(t),Gqr=r(zNe," \u2014 "),IK=n(zNe,"A",{href:!0});var U9t=s(IK);Oqr=r(U9t,"FlaxBigBirdForQuestionAnswering"),U9t.forEach(t),Vqr=r(zNe," (BigBird model)"),zNe.forEach(t),Xqr=i(qe),Cw=n(qe,"LI",{});var WNe=s(Cw);uMe=n(WNe,"STRONG",{});var J9t=s(uMe);zqr=r(J9t,"distilbert"),J9t.forEach(t),Wqr=r(WNe," \u2014 "),NK=n(WNe,"A",{href:!0});var Y9t=s(NK);Qqr=r(Y9t,"FlaxDistilBertForQuestionAnswering"),Y9t.forEach(t),Hqr=r(WNe," (DistilBERT model)"),WNe.forEach(t),Uqr=i(qe),ww=n(qe,"LI",{});var QNe=s(ww);bMe=n(QNe,"STRONG",{});var K9t=s(bMe);Jqr=r(K9t,"electra"),K9t.forEach(t),Yqr=r(QNe," \u2014 "),qK=n(QNe,"A",{href:!0});var Z9t=s(qK);Kqr=r(Z9t,"FlaxElectraForQuestionAnswering"),Z9t.forEach(t),Zqr=r(QNe," (ELECTRA model)"),QNe.forEach(t),ejr=i(qe),Aw=n(qe,"LI",{});var HNe=s(Aw);vMe=n(HNe,"STRONG",{});var ext=s(vMe);ojr=r(ext,"mbart"),ext.forEach(t),rjr=r(HNe," \u2014 "),jK=n(HNe,"A",{href:!0});var oxt=s(jK);tjr=r(oxt,"FlaxMBartForQuestionAnswering"),oxt.forEach(t),ajr=r(HNe," (mBART model)"),HNe.forEach(t),njr=i(qe),yw=n(qe,"LI",{});var UNe=s(yw);FMe=n(UNe,"STRONG",{});var rxt=s(FMe);sjr=r(rxt,"roberta"),rxt.forEach(t),ljr=r(UNe," \u2014 "),DK=n(UNe,"A",{href:!0});var txt=s(DK);ijr=r(txt,"FlaxRobertaForQuestionAnswering"),txt.forEach(t),djr=r(UNe," (RoBERTa model)"),UNe.forEach(t),cjr=i(qe),Lw=n(qe,"LI",{});var JNe=s(Lw);TMe=n(JNe,"STRONG",{});var axt=s(TMe);fjr=r(axt,"roformer"),axt.forEach(t),mjr=r(JNe," \u2014 "),GK=n(JNe,"A",{href:!0});var nxt=s(GK);gjr=r(nxt,"FlaxRoFormerForQuestionAnswering"),nxt.forEach(t),hjr=r(JNe," (RoFormer model)"),JNe.forEach(t),pjr=i(qe),xw=n(qe,"LI",{});var YNe=s(xw);MMe=n(YNe,"STRONG",{});var sxt=s(MMe);_jr=r(sxt,"xlm-roberta"),sxt.forEach(t),ujr=r(YNe," \u2014 "),OK=n(YNe,"A",{href:!0});var lxt=s(OK);bjr=r(lxt,"FlaxXLMRobertaForQuestionAnswering"),lxt.forEach(t),vjr=r(YNe," (XLM-RoBERTa model)"),YNe.forEach(t),qe.forEach(t),Fjr=i(oi),T($w.$$.fragment,oi),oi.forEach(t),ei.forEach(t),fDe=i(f),Yc=n(f,"H2",{class:!0});var bOe=s(Yc);kw=n(bOe,"A",{id:!0,class:!0,href:!0});var ixt=s(kw);EMe=n(ixt,"SPAN",{});var dxt=s(EMe);T(fx.$$.fragment,dxt),dxt.forEach(t),ixt.forEach(t),Tjr=i(bOe),CMe=n(bOe,"SPAN",{});var cxt=s(CMe);Mjr=r(cxt,"FlaxAutoModelForTokenClassification"),cxt.forEach(t),bOe.forEach(t),mDe=i(f),br=n(f,"DIV",{class:!0});var ri=s(br);T(mx.$$.fragment,ri),Ejr=i(ri),Kc=n(ri,"P",{});var soe=s(Kc);Cjr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VK=n(soe,"A",{href:!0});var fxt=s(VK);wjr=r(fxt,"from_pretrained()"),fxt.forEach(t),Ajr=r(soe," class method or the "),XK=n(soe,"A",{href:!0});var mxt=s(XK);yjr=r(mxt,"from_config()"),mxt.forEach(t),Ljr=r(soe,` class
method.`),soe.forEach(t),xjr=i(ri),gx=n(ri,"P",{});var vOe=s(gx);$jr=r(vOe,"This class cannot be instantiated directly using "),wMe=n(vOe,"CODE",{});var gxt=s(wMe);kjr=r(gxt,"__init__()"),gxt.forEach(t),Sjr=r(vOe," (throws an error)."),vOe.forEach(t),Rjr=i(ri),Ut=n(ri,"DIV",{class:!0});var bA=s(Ut);T(hx.$$.fragment,bA),Pjr=i(bA),AMe=n(bA,"P",{});var hxt=s(AMe);Bjr=r(hxt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hxt.forEach(t),Ijr=i(bA),Zc=n(bA,"P",{});var loe=s(Zc);Njr=r(loe,`Note:
Loading a model from its configuration file does `),yMe=n(loe,"STRONG",{});var pxt=s(yMe);qjr=r(pxt,"not"),pxt.forEach(t),jjr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zK=n(loe,"A",{href:!0});var _xt=s(zK);Djr=r(_xt,"from_pretrained()"),_xt.forEach(t),Gjr=r(loe," to load the model weights."),loe.forEach(t),Ojr=i(bA),T(Sw.$$.fragment,bA),bA.forEach(t),Vjr=i(ri),Wr=n(ri,"DIV",{class:!0});var ti=s(Wr);T(px.$$.fragment,ti),Xjr=i(ti),LMe=n(ti,"P",{});var uxt=s(LMe);zjr=r(uxt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uxt.forEach(t),Wjr=i(ti),Tn=n(ti,"P",{});var vA=s(Tn);Qjr=r(vA,"The model class to instantiate is selected based on the "),xMe=n(vA,"CODE",{});var bxt=s(xMe);Hjr=r(bxt,"model_type"),bxt.forEach(t),Ujr=r(vA,` property of the config object (either
passed as an argument or loaded from `),$Me=n(vA,"CODE",{});var vxt=s($Me);Jjr=r(vxt,"pretrained_model_name_or_path"),vxt.forEach(t),Yjr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kMe=n(vA,"CODE",{});var Fxt=s(kMe);Kjr=r(Fxt,"pretrained_model_name_or_path"),Fxt.forEach(t),Zjr=r(vA,":"),vA.forEach(t),eDr=i(ti),De=n(ti,"UL",{});var Fo=s(De);Rw=n(Fo,"LI",{});var KNe=s(Rw);SMe=n(KNe,"STRONG",{});var Txt=s(SMe);oDr=r(Txt,"albert"),Txt.forEach(t),rDr=r(KNe," \u2014 "),WK=n(KNe,"A",{href:!0});var Mxt=s(WK);tDr=r(Mxt,"FlaxAlbertForTokenClassification"),Mxt.forEach(t),aDr=r(KNe," (ALBERT model)"),KNe.forEach(t),nDr=i(Fo),Pw=n(Fo,"LI",{});var ZNe=s(Pw);RMe=n(ZNe,"STRONG",{});var Ext=s(RMe);sDr=r(Ext,"bert"),Ext.forEach(t),lDr=r(ZNe," \u2014 "),QK=n(ZNe,"A",{href:!0});var Cxt=s(QK);iDr=r(Cxt,"FlaxBertForTokenClassification"),Cxt.forEach(t),dDr=r(ZNe," (BERT model)"),ZNe.forEach(t),cDr=i(Fo),Bw=n(Fo,"LI",{});var eqe=s(Bw);PMe=n(eqe,"STRONG",{});var wxt=s(PMe);fDr=r(wxt,"big_bird"),wxt.forEach(t),mDr=r(eqe," \u2014 "),HK=n(eqe,"A",{href:!0});var Axt=s(HK);gDr=r(Axt,"FlaxBigBirdForTokenClassification"),Axt.forEach(t),hDr=r(eqe," (BigBird model)"),eqe.forEach(t),pDr=i(Fo),Iw=n(Fo,"LI",{});var oqe=s(Iw);BMe=n(oqe,"STRONG",{});var yxt=s(BMe);_Dr=r(yxt,"distilbert"),yxt.forEach(t),uDr=r(oqe," \u2014 "),UK=n(oqe,"A",{href:!0});var Lxt=s(UK);bDr=r(Lxt,"FlaxDistilBertForTokenClassification"),Lxt.forEach(t),vDr=r(oqe," (DistilBERT model)"),oqe.forEach(t),FDr=i(Fo),Nw=n(Fo,"LI",{});var rqe=s(Nw);IMe=n(rqe,"STRONG",{});var xxt=s(IMe);TDr=r(xxt,"electra"),xxt.forEach(t),MDr=r(rqe," \u2014 "),JK=n(rqe,"A",{href:!0});var $xt=s(JK);EDr=r($xt,"FlaxElectraForTokenClassification"),$xt.forEach(t),CDr=r(rqe," (ELECTRA model)"),rqe.forEach(t),wDr=i(Fo),qw=n(Fo,"LI",{});var tqe=s(qw);NMe=n(tqe,"STRONG",{});var kxt=s(NMe);ADr=r(kxt,"roberta"),kxt.forEach(t),yDr=r(tqe," \u2014 "),YK=n(tqe,"A",{href:!0});var Sxt=s(YK);LDr=r(Sxt,"FlaxRobertaForTokenClassification"),Sxt.forEach(t),xDr=r(tqe," (RoBERTa model)"),tqe.forEach(t),$Dr=i(Fo),jw=n(Fo,"LI",{});var aqe=s(jw);qMe=n(aqe,"STRONG",{});var Rxt=s(qMe);kDr=r(Rxt,"roformer"),Rxt.forEach(t),SDr=r(aqe," \u2014 "),KK=n(aqe,"A",{href:!0});var Pxt=s(KK);RDr=r(Pxt,"FlaxRoFormerForTokenClassification"),Pxt.forEach(t),PDr=r(aqe," (RoFormer model)"),aqe.forEach(t),BDr=i(Fo),Dw=n(Fo,"LI",{});var nqe=s(Dw);jMe=n(nqe,"STRONG",{});var Bxt=s(jMe);IDr=r(Bxt,"xlm-roberta"),Bxt.forEach(t),NDr=r(nqe," \u2014 "),ZK=n(nqe,"A",{href:!0});var Ixt=s(ZK);qDr=r(Ixt,"FlaxXLMRobertaForTokenClassification"),Ixt.forEach(t),jDr=r(nqe," (XLM-RoBERTa model)"),nqe.forEach(t),Fo.forEach(t),DDr=i(ti),T(Gw.$$.fragment,ti),ti.forEach(t),ri.forEach(t),gDe=i(f),ef=n(f,"H2",{class:!0});var FOe=s(ef);Ow=n(FOe,"A",{id:!0,class:!0,href:!0});var Nxt=s(Ow);DMe=n(Nxt,"SPAN",{});var qxt=s(DMe);T(_x.$$.fragment,qxt),qxt.forEach(t),Nxt.forEach(t),GDr=i(FOe),GMe=n(FOe,"SPAN",{});var jxt=s(GMe);ODr=r(jxt,"FlaxAutoModelForMultipleChoice"),jxt.forEach(t),FOe.forEach(t),hDe=i(f),vr=n(f,"DIV",{class:!0});var ai=s(vr);T(ux.$$.fragment,ai),VDr=i(ai),of=n(ai,"P",{});var ioe=s(of);XDr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eZ=n(ioe,"A",{href:!0});var Dxt=s(eZ);zDr=r(Dxt,"from_pretrained()"),Dxt.forEach(t),WDr=r(ioe," class method or the "),oZ=n(ioe,"A",{href:!0});var Gxt=s(oZ);QDr=r(Gxt,"from_config()"),Gxt.forEach(t),HDr=r(ioe,` class
method.`),ioe.forEach(t),UDr=i(ai),bx=n(ai,"P",{});var TOe=s(bx);JDr=r(TOe,"This class cannot be instantiated directly using "),OMe=n(TOe,"CODE",{});var Oxt=s(OMe);YDr=r(Oxt,"__init__()"),Oxt.forEach(t),KDr=r(TOe," (throws an error)."),TOe.forEach(t),ZDr=i(ai),Jt=n(ai,"DIV",{class:!0});var FA=s(Jt);T(vx.$$.fragment,FA),eGr=i(FA),VMe=n(FA,"P",{});var Vxt=s(VMe);oGr=r(Vxt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Vxt.forEach(t),rGr=i(FA),rf=n(FA,"P",{});var doe=s(rf);tGr=r(doe,`Note:
Loading a model from its configuration file does `),XMe=n(doe,"STRONG",{});var Xxt=s(XMe);aGr=r(Xxt,"not"),Xxt.forEach(t),nGr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=n(doe,"A",{href:!0});var zxt=s(rZ);sGr=r(zxt,"from_pretrained()"),zxt.forEach(t),lGr=r(doe," to load the model weights."),doe.forEach(t),iGr=i(FA),T(Vw.$$.fragment,FA),FA.forEach(t),dGr=i(ai),Qr=n(ai,"DIV",{class:!0});var ni=s(Qr);T(Fx.$$.fragment,ni),cGr=i(ni),zMe=n(ni,"P",{});var Wxt=s(zMe);fGr=r(Wxt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wxt.forEach(t),mGr=i(ni),Mn=n(ni,"P",{});var TA=s(Mn);gGr=r(TA,"The model class to instantiate is selected based on the "),WMe=n(TA,"CODE",{});var Qxt=s(WMe);hGr=r(Qxt,"model_type"),Qxt.forEach(t),pGr=r(TA,` property of the config object (either
passed as an argument or loaded from `),QMe=n(TA,"CODE",{});var Hxt=s(QMe);_Gr=r(Hxt,"pretrained_model_name_or_path"),Hxt.forEach(t),uGr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HMe=n(TA,"CODE",{});var Uxt=s(HMe);bGr=r(Uxt,"pretrained_model_name_or_path"),Uxt.forEach(t),vGr=r(TA,":"),TA.forEach(t),FGr=i(ni),Ge=n(ni,"UL",{});var To=s(Ge);Xw=n(To,"LI",{});var sqe=s(Xw);UMe=n(sqe,"STRONG",{});var Jxt=s(UMe);TGr=r(Jxt,"albert"),Jxt.forEach(t),MGr=r(sqe," \u2014 "),tZ=n(sqe,"A",{href:!0});var Yxt=s(tZ);EGr=r(Yxt,"FlaxAlbertForMultipleChoice"),Yxt.forEach(t),CGr=r(sqe," (ALBERT model)"),sqe.forEach(t),wGr=i(To),zw=n(To,"LI",{});var lqe=s(zw);JMe=n(lqe,"STRONG",{});var Kxt=s(JMe);AGr=r(Kxt,"bert"),Kxt.forEach(t),yGr=r(lqe," \u2014 "),aZ=n(lqe,"A",{href:!0});var Zxt=s(aZ);LGr=r(Zxt,"FlaxBertForMultipleChoice"),Zxt.forEach(t),xGr=r(lqe," (BERT model)"),lqe.forEach(t),$Gr=i(To),Ww=n(To,"LI",{});var iqe=s(Ww);YMe=n(iqe,"STRONG",{});var e$t=s(YMe);kGr=r(e$t,"big_bird"),e$t.forEach(t),SGr=r(iqe," \u2014 "),nZ=n(iqe,"A",{href:!0});var o$t=s(nZ);RGr=r(o$t,"FlaxBigBirdForMultipleChoice"),o$t.forEach(t),PGr=r(iqe," (BigBird model)"),iqe.forEach(t),BGr=i(To),Qw=n(To,"LI",{});var dqe=s(Qw);KMe=n(dqe,"STRONG",{});var r$t=s(KMe);IGr=r(r$t,"distilbert"),r$t.forEach(t),NGr=r(dqe," \u2014 "),sZ=n(dqe,"A",{href:!0});var t$t=s(sZ);qGr=r(t$t,"FlaxDistilBertForMultipleChoice"),t$t.forEach(t),jGr=r(dqe," (DistilBERT model)"),dqe.forEach(t),DGr=i(To),Hw=n(To,"LI",{});var cqe=s(Hw);ZMe=n(cqe,"STRONG",{});var a$t=s(ZMe);GGr=r(a$t,"electra"),a$t.forEach(t),OGr=r(cqe," \u2014 "),lZ=n(cqe,"A",{href:!0});var n$t=s(lZ);VGr=r(n$t,"FlaxElectraForMultipleChoice"),n$t.forEach(t),XGr=r(cqe," (ELECTRA model)"),cqe.forEach(t),zGr=i(To),Uw=n(To,"LI",{});var fqe=s(Uw);eEe=n(fqe,"STRONG",{});var s$t=s(eEe);WGr=r(s$t,"roberta"),s$t.forEach(t),QGr=r(fqe," \u2014 "),iZ=n(fqe,"A",{href:!0});var l$t=s(iZ);HGr=r(l$t,"FlaxRobertaForMultipleChoice"),l$t.forEach(t),UGr=r(fqe," (RoBERTa model)"),fqe.forEach(t),JGr=i(To),Jw=n(To,"LI",{});var mqe=s(Jw);oEe=n(mqe,"STRONG",{});var i$t=s(oEe);YGr=r(i$t,"roformer"),i$t.forEach(t),KGr=r(mqe," \u2014 "),dZ=n(mqe,"A",{href:!0});var d$t=s(dZ);ZGr=r(d$t,"FlaxRoFormerForMultipleChoice"),d$t.forEach(t),eOr=r(mqe," (RoFormer model)"),mqe.forEach(t),oOr=i(To),Yw=n(To,"LI",{});var gqe=s(Yw);rEe=n(gqe,"STRONG",{});var c$t=s(rEe);rOr=r(c$t,"xlm-roberta"),c$t.forEach(t),tOr=r(gqe," \u2014 "),cZ=n(gqe,"A",{href:!0});var f$t=s(cZ);aOr=r(f$t,"FlaxXLMRobertaForMultipleChoice"),f$t.forEach(t),nOr=r(gqe," (XLM-RoBERTa model)"),gqe.forEach(t),To.forEach(t),sOr=i(ni),T(Kw.$$.fragment,ni),ni.forEach(t),ai.forEach(t),pDe=i(f),tf=n(f,"H2",{class:!0});var MOe=s(tf);Zw=n(MOe,"A",{id:!0,class:!0,href:!0});var m$t=s(Zw);tEe=n(m$t,"SPAN",{});var g$t=s(tEe);T(Tx.$$.fragment,g$t),g$t.forEach(t),m$t.forEach(t),lOr=i(MOe),aEe=n(MOe,"SPAN",{});var h$t=s(aEe);iOr=r(h$t,"FlaxAutoModelForNextSentencePrediction"),h$t.forEach(t),MOe.forEach(t),_De=i(f),Fr=n(f,"DIV",{class:!0});var si=s(Fr);T(Mx.$$.fragment,si),dOr=i(si),af=n(si,"P",{});var coe=s(af);cOr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fZ=n(coe,"A",{href:!0});var p$t=s(fZ);fOr=r(p$t,"from_pretrained()"),p$t.forEach(t),mOr=r(coe," class method or the "),mZ=n(coe,"A",{href:!0});var _$t=s(mZ);gOr=r(_$t,"from_config()"),_$t.forEach(t),hOr=r(coe,` class
method.`),coe.forEach(t),pOr=i(si),Ex=n(si,"P",{});var EOe=s(Ex);_Or=r(EOe,"This class cannot be instantiated directly using "),nEe=n(EOe,"CODE",{});var u$t=s(nEe);uOr=r(u$t,"__init__()"),u$t.forEach(t),bOr=r(EOe," (throws an error)."),EOe.forEach(t),vOr=i(si),Yt=n(si,"DIV",{class:!0});var MA=s(Yt);T(Cx.$$.fragment,MA),FOr=i(MA),sEe=n(MA,"P",{});var b$t=s(sEe);TOr=r(b$t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),b$t.forEach(t),MOr=i(MA),nf=n(MA,"P",{});var foe=s(nf);EOr=r(foe,`Note:
Loading a model from its configuration file does `),lEe=n(foe,"STRONG",{});var v$t=s(lEe);COr=r(v$t,"not"),v$t.forEach(t),wOr=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=n(foe,"A",{href:!0});var F$t=s(gZ);AOr=r(F$t,"from_pretrained()"),F$t.forEach(t),yOr=r(foe," to load the model weights."),foe.forEach(t),LOr=i(MA),T(e0.$$.fragment,MA),MA.forEach(t),xOr=i(si),Hr=n(si,"DIV",{class:!0});var li=s(Hr);T(wx.$$.fragment,li),$Or=i(li),iEe=n(li,"P",{});var T$t=s(iEe);kOr=r(T$t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),T$t.forEach(t),SOr=i(li),En=n(li,"P",{});var EA=s(En);ROr=r(EA,"The model class to instantiate is selected based on the "),dEe=n(EA,"CODE",{});var M$t=s(dEe);POr=r(M$t,"model_type"),M$t.forEach(t),BOr=r(EA,` property of the config object (either
passed as an argument or loaded from `),cEe=n(EA,"CODE",{});var E$t=s(cEe);IOr=r(E$t,"pretrained_model_name_or_path"),E$t.forEach(t),NOr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fEe=n(EA,"CODE",{});var C$t=s(fEe);qOr=r(C$t,"pretrained_model_name_or_path"),C$t.forEach(t),jOr=r(EA,":"),EA.forEach(t),DOr=i(li),mEe=n(li,"UL",{});var w$t=s(mEe);o0=n(w$t,"LI",{});var hqe=s(o0);gEe=n(hqe,"STRONG",{});var A$t=s(gEe);GOr=r(A$t,"bert"),A$t.forEach(t),OOr=r(hqe," \u2014 "),hZ=n(hqe,"A",{href:!0});var y$t=s(hZ);VOr=r(y$t,"FlaxBertForNextSentencePrediction"),y$t.forEach(t),XOr=r(hqe," (BERT model)"),hqe.forEach(t),w$t.forEach(t),zOr=i(li),T(r0.$$.fragment,li),li.forEach(t),si.forEach(t),uDe=i(f),sf=n(f,"H2",{class:!0});var COe=s(sf);t0=n(COe,"A",{id:!0,class:!0,href:!0});var L$t=s(t0);hEe=n(L$t,"SPAN",{});var x$t=s(hEe);T(Ax.$$.fragment,x$t),x$t.forEach(t),L$t.forEach(t),WOr=i(COe),pEe=n(COe,"SPAN",{});var $$t=s(pEe);QOr=r($$t,"FlaxAutoModelForImageClassification"),$$t.forEach(t),COe.forEach(t),bDe=i(f),Tr=n(f,"DIV",{class:!0});var ii=s(Tr);T(yx.$$.fragment,ii),HOr=i(ii),lf=n(ii,"P",{});var moe=s(lf);UOr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pZ=n(moe,"A",{href:!0});var k$t=s(pZ);JOr=r(k$t,"from_pretrained()"),k$t.forEach(t),YOr=r(moe," class method or the "),_Z=n(moe,"A",{href:!0});var S$t=s(_Z);KOr=r(S$t,"from_config()"),S$t.forEach(t),ZOr=r(moe,` class
method.`),moe.forEach(t),eVr=i(ii),Lx=n(ii,"P",{});var wOe=s(Lx);oVr=r(wOe,"This class cannot be instantiated directly using "),_Ee=n(wOe,"CODE",{});var R$t=s(_Ee);rVr=r(R$t,"__init__()"),R$t.forEach(t),tVr=r(wOe," (throws an error)."),wOe.forEach(t),aVr=i(ii),Kt=n(ii,"DIV",{class:!0});var CA=s(Kt);T(xx.$$.fragment,CA),nVr=i(CA),uEe=n(CA,"P",{});var P$t=s(uEe);sVr=r(P$t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),P$t.forEach(t),lVr=i(CA),df=n(CA,"P",{});var goe=s(df);iVr=r(goe,`Note:
Loading a model from its configuration file does `),bEe=n(goe,"STRONG",{});var B$t=s(bEe);dVr=r(B$t,"not"),B$t.forEach(t),cVr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=n(goe,"A",{href:!0});var I$t=s(uZ);fVr=r(I$t,"from_pretrained()"),I$t.forEach(t),mVr=r(goe," to load the model weights."),goe.forEach(t),gVr=i(CA),T(a0.$$.fragment,CA),CA.forEach(t),hVr=i(ii),Ur=n(ii,"DIV",{class:!0});var di=s(Ur);T($x.$$.fragment,di),pVr=i(di),vEe=n(di,"P",{});var N$t=s(vEe);_Vr=r(N$t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),N$t.forEach(t),uVr=i(di),Cn=n(di,"P",{});var wA=s(Cn);bVr=r(wA,"The model class to instantiate is selected based on the "),FEe=n(wA,"CODE",{});var q$t=s(FEe);vVr=r(q$t,"model_type"),q$t.forEach(t),FVr=r(wA,` property of the config object (either
passed as an argument or loaded from `),TEe=n(wA,"CODE",{});var j$t=s(TEe);TVr=r(j$t,"pretrained_model_name_or_path"),j$t.forEach(t),MVr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=n(wA,"CODE",{});var D$t=s(MEe);EVr=r(D$t,"pretrained_model_name_or_path"),D$t.forEach(t),CVr=r(wA,":"),wA.forEach(t),wVr=i(di),kx=n(di,"UL",{});var AOe=s(kx);n0=n(AOe,"LI",{});var pqe=s(n0);EEe=n(pqe,"STRONG",{});var G$t=s(EEe);AVr=r(G$t,"beit"),G$t.forEach(t),yVr=r(pqe," \u2014 "),bZ=n(pqe,"A",{href:!0});var O$t=s(bZ);LVr=r(O$t,"FlaxBeitForImageClassification"),O$t.forEach(t),xVr=r(pqe," (BEiT model)"),pqe.forEach(t),$Vr=i(AOe),s0=n(AOe,"LI",{});var _qe=s(s0);CEe=n(_qe,"STRONG",{});var V$t=s(CEe);kVr=r(V$t,"vit"),V$t.forEach(t),SVr=r(_qe," \u2014 "),vZ=n(_qe,"A",{href:!0});var X$t=s(vZ);RVr=r(X$t,"FlaxViTForImageClassification"),X$t.forEach(t),PVr=r(_qe," (ViT model)"),_qe.forEach(t),AOe.forEach(t),BVr=i(di),T(l0.$$.fragment,di),di.forEach(t),ii.forEach(t),vDe=i(f),cf=n(f,"H2",{class:!0});var yOe=s(cf);i0=n(yOe,"A",{id:!0,class:!0,href:!0});var z$t=s(i0);wEe=n(z$t,"SPAN",{});var W$t=s(wEe);T(Sx.$$.fragment,W$t),W$t.forEach(t),z$t.forEach(t),IVr=i(yOe),AEe=n(yOe,"SPAN",{});var Q$t=s(AEe);NVr=r(Q$t,"FlaxAutoModelForVision2Seq"),Q$t.forEach(t),yOe.forEach(t),FDe=i(f),Mr=n(f,"DIV",{class:!0});var ci=s(Mr);T(Rx.$$.fragment,ci),qVr=i(ci),ff=n(ci,"P",{});var hoe=s(ff);jVr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FZ=n(hoe,"A",{href:!0});var H$t=s(FZ);DVr=r(H$t,"from_pretrained()"),H$t.forEach(t),GVr=r(hoe," class method or the "),TZ=n(hoe,"A",{href:!0});var U$t=s(TZ);OVr=r(U$t,"from_config()"),U$t.forEach(t),VVr=r(hoe,` class
method.`),hoe.forEach(t),XVr=i(ci),Px=n(ci,"P",{});var LOe=s(Px);zVr=r(LOe,"This class cannot be instantiated directly using "),yEe=n(LOe,"CODE",{});var J$t=s(yEe);WVr=r(J$t,"__init__()"),J$t.forEach(t),QVr=r(LOe," (throws an error)."),LOe.forEach(t),HVr=i(ci),Zt=n(ci,"DIV",{class:!0});var AA=s(Zt);T(Bx.$$.fragment,AA),UVr=i(AA),LEe=n(AA,"P",{});var Y$t=s(LEe);JVr=r(Y$t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Y$t.forEach(t),YVr=i(AA),mf=n(AA,"P",{});var poe=s(mf);KVr=r(poe,`Note:
Loading a model from its configuration file does `),xEe=n(poe,"STRONG",{});var K$t=s(xEe);ZVr=r(K$t,"not"),K$t.forEach(t),eXr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=n(poe,"A",{href:!0});var Z$t=s(MZ);oXr=r(Z$t,"from_pretrained()"),Z$t.forEach(t),rXr=r(poe," to load the model weights."),poe.forEach(t),tXr=i(AA),T(d0.$$.fragment,AA),AA.forEach(t),aXr=i(ci),Jr=n(ci,"DIV",{class:!0});var fi=s(Jr);T(Ix.$$.fragment,fi),nXr=i(fi),$Ee=n(fi,"P",{});var ekt=s($Ee);sXr=r(ekt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ekt.forEach(t),lXr=i(fi),wn=n(fi,"P",{});var yA=s(wn);iXr=r(yA,"The model class to instantiate is selected based on the "),kEe=n(yA,"CODE",{});var okt=s(kEe);dXr=r(okt,"model_type"),okt.forEach(t),cXr=r(yA,` property of the config object (either
passed as an argument or loaded from `),SEe=n(yA,"CODE",{});var rkt=s(SEe);fXr=r(rkt,"pretrained_model_name_or_path"),rkt.forEach(t),mXr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=n(yA,"CODE",{});var tkt=s(REe);gXr=r(tkt,"pretrained_model_name_or_path"),tkt.forEach(t),hXr=r(yA,":"),yA.forEach(t),pXr=i(fi),PEe=n(fi,"UL",{});var akt=s(PEe);c0=n(akt,"LI",{});var uqe=s(c0);BEe=n(uqe,"STRONG",{});var nkt=s(BEe);_Xr=r(nkt,"vision-encoder-decoder"),nkt.forEach(t),uXr=r(uqe," \u2014 "),EZ=n(uqe,"A",{href:!0});var skt=s(EZ);bXr=r(skt,"FlaxVisionEncoderDecoderModel"),skt.forEach(t),vXr=r(uqe," (Vision Encoder decoder model)"),uqe.forEach(t),akt.forEach(t),FXr=i(fi),T(f0.$$.fragment,fi),fi.forEach(t),ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(cRt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoTokenizer"),c(bi,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertModel"),c(Ff,"id","extending-the-auto-classes"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#extending-the-auto-classes"),c(vi,"class","relative group"),c(Mf,"id","transformers.AutoConfig"),c(Mf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mf,"href","#transformers.AutoConfig"),c(Fi,"class","relative group"),c(rk,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(tk,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig"),c(ak,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig"),c(nk,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig"),c(sk,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig"),c(lk,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(ik,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig"),c(dk,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(ck,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(fk,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(mk,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig"),c(gk,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig"),c(hk,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig"),c(pk,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig"),c(_k,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig"),c(uk,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig"),c(bk,"href","/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtConfig"),c(vk,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Fk,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Tk,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Mk,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig"),c(Ek,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Ck,"href","/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(wk,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig"),c(Ak,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig"),c(yk,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Lk,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRConfig"),c(xk,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTConfig"),c($k,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig"),c(kk,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Sk,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Rk,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaConfig"),c(Pk,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig"),c(Bk,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig"),c(Ik,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig"),c(Nk,"href","/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNConfig"),c(qk,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config"),c(jk,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Dk,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Gk,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig"),c(Ok,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig"),c(Vk,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig"),c(Xk,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(zk,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Wk,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Qk,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Hk,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig"),c(Uk,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig"),c(Jk,"href","/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeConfig"),c(Yk,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig"),c(Kk,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Config"),c(Zk,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig"),c(eS,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(oS,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig"),c(rS,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(tS,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(aS,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(nS,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig"),c(sS,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config"),c(lS,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(iS,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(dS,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig"),c(cS,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig"),c(fS,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig"),c(mS,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig"),c(gS,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(hS,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(pS,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(_S,"href","/docs/transformers/pr_17354/en/model_doc/rag#transformers.RagConfig"),c(uS,"href","/docs/transformers/pr_17354/en/model_doc/realm#transformers.RealmConfig"),c(bS,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig"),c(vS,"href","/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetConfig"),c(FS,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig"),c(TS,"href","/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetConfig"),c(MS,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertConfig"),c(ES,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig"),c(CS,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig"),c(wS,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig"),c(AS,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig"),c(yS,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig"),c(LS,"href","/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(xS,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c($S,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(kS,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig"),c(SS,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(RS,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig"),c(PS,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config"),c(BS,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig"),c(IS,"href","/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(NS,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(qS,"href","/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRConfig"),c(jS,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(DS,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(GS,"href","/docs/transformers/pr_17354/en/model_doc/van#transformers.VanConfig"),c(OS,"href","/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltConfig"),c(VS,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(XS,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(zS,"href","/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(WS,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig"),c(QS,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(HS,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(US,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(JS,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig"),c(YS,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig"),c(KS,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig"),c(ZS,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(eR,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(oR,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(rR,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig"),c(tR,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosConfig"),c(aR,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ag,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yg,"id","transformers.AutoTokenizer"),c(yg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yg,"href","#transformers.AutoTokenizer"),c(Mi,"class","relative group"),c(nR,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(sR,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizer"),c(lR,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(iR,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartTokenizer"),c(dR,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartTokenizerFast"),c(cR,"href","/docs/transformers/pr_17354/en/model_doc/barthez#transformers.BarthezTokenizer"),c(fR,"href","/docs/transformers/pr_17354/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(mR,"href","/docs/transformers/pr_17354/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(gR,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(hR,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(pR,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(_R,"href","/docs/transformers/pr_17354/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(uR,"href","/docs/transformers/pr_17354/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(bR,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(vR,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(FR,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(TR,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(MR,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(ER,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(CR,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(wR,"href","/docs/transformers/pr_17354/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(AR,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertTokenizer"),c(yR,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(LR,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineTokenizer"),c(xR,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPTokenizer"),c($R,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(kR,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(SR,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(RR,"href","/docs/transformers/pr_17354/en/model_doc/cpm#transformers.CpmTokenizer"),c(PR,"href","/docs/transformers/pr_17354/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(BR,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(IR,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(NR,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(qR,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaTokenizer"),c(jR,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(DR,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(GR,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(OR,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(VR,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(XR,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(zR,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(WR,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraTokenizer"),c(QR,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(HR,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(UR,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetTokenizer"),c(JR,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(YR,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(KR,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelTokenizer"),c(ZR,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(eP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(oP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(rP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(aP,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(nP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(lP,"href","/docs/transformers/pr_17354/en/model_doc/herbert#transformers.HerbertTokenizer"),c(iP,"href","/docs/transformers/pr_17354/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(dP,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(cP,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fP,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(gP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(hP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(pP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(_P,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(uP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(bP,"href","/docs/transformers/pr_17354/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(vP,"href","/docs/transformers/pr_17354/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(FP,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDTokenizer"),c(TP,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDTokenizerFast"),c(MP,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerTokenizer"),c(EP,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(CP,"href","/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeTokenizer"),c(wP,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(AP,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(yP,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(LP,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianTokenizer"),c(xP,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartTokenizer"),c($P,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(kP,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(SP,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(RP,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(PP,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(BP,"href","/docs/transformers/pr_17354/en/model_doc/mluke#transformers.MLukeTokenizer"),c(IP,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(NP,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(qP,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(jP,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(DP,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Tokenizer"),c(GP,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5TokenizerFast"),c(OP,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizer"),c(VP,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(XP,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(zP,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(WP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(QP,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(HP,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(UP,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(JP,"href","/docs/transformers/pr_17354/en/model_doc/phobert#transformers.PhobertTokenizer"),c(YP,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartTokenizer"),c(KP,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(ZP,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(eB,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(oB,"href","/docs/transformers/pr_17354/en/model_doc/rag#transformers.RagTokenizer"),c(rB,"href","/docs/transformers/pr_17354/en/model_doc/realm#transformers.RealmTokenizer"),c(tB,"href","/docs/transformers/pr_17354/en/model_doc/realm#transformers.RealmTokenizerFast"),c(aB,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerTokenizer"),c(nB,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(sB,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertTokenizer"),c(lB,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(iB,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(dB,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(cB,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fB,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mB,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(gB,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(hB,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(pB,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(_B,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterTokenizer"),c(uB,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(bB,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(vB,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(FB,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Tokenizer"),c(TB,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5TokenizerFast"),c(MB,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasTokenizer"),c(EB,"href","/docs/transformers/pr_17354/en/model_doc/tapex#transformers.TapexTokenizer"),c(CB,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(wB,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(AB,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(yB,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(LB,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xB,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c($B,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMTokenizer"),c(kB,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(SB,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMTokenizer"),c(RB,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(PB,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(BB,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(IB,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(NB,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(qB,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(jB,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(DB,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizer"),c(GB,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ih,"id","transformers.AutoFeatureExtractor"),c(ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ih,"href","#transformers.AutoFeatureExtractor"),c(Ei,"class","relative group"),c(OB,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(VB,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(HB,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(eI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(oI,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(tI,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(aI,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(nI,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(sI,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(lI,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(iI,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(gI,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hI,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(pI,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(_I,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(uI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(bI,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oh,"id","transformers.AutoProcessor"),c(Oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Oh,"href","#transformers.AutoProcessor"),c(Ci,"class","relative group"),c(vI,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(FI,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPProcessor"),c(TI,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(MI,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(EI,"href","/docs/transformers/pr_17354/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(CI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AI,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(yI,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(LI,"href","/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRProcessor"),c(xI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($I,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kI,"href","/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltProcessor"),c(SI,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(RI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ip,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dp,"id","transformers.AutoModel"),c(dp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dp,"href","#transformers.AutoModel"),c(Ai,"class","relative group"),c(II,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NI,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qI,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jI,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertModel"),c(DI,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartModel"),c(GI,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitModel"),c(OI,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertModel"),c(VI,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(XI,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdModel"),c(zI,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(WI,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(QI,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(HI,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertModel"),c(UI,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineModel"),c(JI,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPModel"),c(YI,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertModel"),c(KI,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextModel"),c(ZI,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLModel"),c(eN,"href","/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtModel"),c(oN,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(rN,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(tN,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(aN,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaModel"),c(nN,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(sN,"href","/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(lN,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTModel"),c(iN,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrModel"),c(dN,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertModel"),c(cN,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(fN,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTModel"),c(mN,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraModel"),c(gN,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertModel"),c(hN,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaModel"),c(pN,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetModel"),c(_N,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTModel"),c(uN,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelModel"),c(bN,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelBaseModel"),c(vN,"href","/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNModel"),c(FN,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Model"),c(TN,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(MN,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(EN,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJModel"),c(CN,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertModel"),c(wN,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertModel"),c(AN,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(yN,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(LN,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(xN,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c($N,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDModel"),c(kN,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerModel"),c(SN,"href","/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeModel"),c(RN,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertModel"),c(PN,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Model"),c(BN,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianModel"),c(IN,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerModel"),c(NN,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartModel"),c(qN,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(jN,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertModel"),c(DN,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTModel"),c(GN,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetModel"),c(ON,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Model"),c(VN,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerModel"),c(XN,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(zN,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTModel"),c(WN,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusModel"),c(QN,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverModel"),c(HN,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartModel"),c(UN,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerModel"),c(JN,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(YN,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertModel"),c(KN,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModel"),c(ZN,"href","/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetModel"),c(eq,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertModel"),c(oq,"href","/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetModel"),c(rq,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel"),c(tq,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaModel"),c(aq,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerModel"),c(nq,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerModel"),c(sq,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWModel"),c(lq,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDModel"),c(iq,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(dq,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterModel"),c(cq,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(fq,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinModel"),c(mq,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Model"),c(gq,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasModel"),c(hq,"href","/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(pq,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(_q,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechModel"),c(uq,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(bq,"href","/docs/transformers/pr_17354/en/model_doc/van#transformers.VanModel"),c(vq,"href","/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltModel"),c(Fq,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Tq,"href","/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Mq,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTModel"),c(Eq,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Cq,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(wq,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Aq,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMModel"),c(yq,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMModel"),c(Lq,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMModel"),c(xq,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c($q,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(kq,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Sq,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetModel"),c(Rq,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosModel"),c(Pq,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lu,"id","transformers.AutoModelForPreTraining"),c(lu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lu,"href","#transformers.AutoModelForPreTraining"),c(xi,"class","relative group"),c(Bq,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iq,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nq,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qq,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForPreTraining"),c(jq,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Dq,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForPreTraining"),c(Gq,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Oq,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Vq,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Xq,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(zq,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Wq,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Qq,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Hq,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Uq,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Jq,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Yq,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Kq,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Zq,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(ej,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(oj,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(rj,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(tj,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(aj,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(nj,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(sj,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(lj,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(ij,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(dj,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel"),c(cj,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(fj,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(mj,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(gj,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(hj,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(pj,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(_j,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(uj,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(bj,"href","/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(vj,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Fj,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Tj,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(Mj,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Ej,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Cj,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(wj,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zu,"id","transformers.AutoModelForCausalLM"),c(Zu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zu,"href","#transformers.AutoModelForCausalLM"),c(Si,"class","relative group"),c(Aj,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yj,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lj,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xj,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForCausalLM"),c($j,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertLMHeadModel"),c(kj,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Sj,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Rj,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Pj,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Bj,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Ij,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Nj,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(qj,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(jj,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Dj,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Gj,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Oj,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Vj,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Xj,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianForCausalLM"),c(zj,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Wj,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Qj,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Hj,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTForCausalLM"),c(Uj,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Jj,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Yj,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Kj,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Zj,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(eD,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(oD,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(rD,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(tD,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(aD,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(nD,"href","/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(sD,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(lD,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(iD,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(dD,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(cD,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(fD,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D1,"id","transformers.AutoModelForMaskedLM"),c(D1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D1,"href","#transformers.AutoModelForMaskedLM"),c(Bi,"class","relative group"),c(mD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pD,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(_D,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(uD,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMaskedLM"),c(bD,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(vD,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(FD,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(TD,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(MD,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(ED,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(CD,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(wD,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(AD,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(yD,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(LD,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(xD,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM"),c($D,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(kD,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(SD,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(RD,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(PD,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(BD,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(ID,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(ND,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(qD,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(jD,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(DD,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(GD,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(OD,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(VD,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(XD,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(zD,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(WD,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(QD,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(HD,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wb,"id","transformers.AutoModelForSeq2SeqLM"),c(wb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wb,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(UD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KD,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ZD,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(eG,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(oG,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(rG,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(tG,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianMTModel"),c(lG,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(iG,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(dG,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(cG,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(fG,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(mG,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(gG,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zb,"id","transformers.AutoModelForSequenceClassification"),c(zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zb,"href","#transformers.AutoModelForSequenceClassification"),c(Gi,"class","relative group"),c(hG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_G,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uG,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c($G,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O2,"id","transformers.AutoModelForMultipleChoice"),c(O2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O2,"href","#transformers.AutoModelForMultipleChoice"),c(Xi,"class","relative group"),c(cO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gO,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(hO,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMultipleChoice"),c(pO,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(_O,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(uO,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(bO,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(vO,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(AO,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(LO,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(xO,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c($O,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(IO,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(NO,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(qO,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(jO,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(DO,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(GO,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T4,"id","transformers.AutoModelForNextSentencePrediction"),c(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T4,"href","#transformers.AutoModelForNextSentencePrediction"),c(Qi,"class","relative group"),c(OO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zO,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(WO,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(QO,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(HO,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(UO,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($4,"id","transformers.AutoModelForTokenClassification"),c($4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($4,"href","#transformers.AutoModelForTokenClassification"),c(Ji,"class","relative group"),c(JO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZO,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(eV,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForTokenClassification"),c(oV,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(rV,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(tV,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForTokenClassification"),c(aV,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(nV,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(sV,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(lV,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(iV,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(dV,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(cV,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(fV,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(mV,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(gV,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(hV,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(pV,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(_V,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(uV,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(bV,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(vV,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(FV,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(TV,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(MV,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(EV,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(CV,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(wV,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(AV,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(yV,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(LV,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(xV,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c($V,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(kV,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(SV,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hv,"id","transformers.AutoModelForQuestionAnswering"),c(hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hv,"href","#transformers.AutoModelForQuestionAnswering"),c(Zi,"class","relative group"),c(RV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IV,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(JV,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(bX,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(TX,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a5,"id","transformers.AutoModelForTableQuestionAnswering"),c(a5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(rd,"class","relative group"),c(MX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wX,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d5,"id","transformers.AutoModelForImageClassification"),c(d5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d5,"href","#transformers.AutoModelForImageClassification"),c(nd,"class","relative group"),c(AX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xX,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForImageClassification"),c($X,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(kX,"href","/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtForImageClassification"),c(SX,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(RX,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassification"),c(PX,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(BX,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(IX,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(NX,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(qX,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(jX,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(DX,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(GX,"href","/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(OX,"href","/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(VX,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(XX,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForImageClassification"),c(zX,"href","/docs/transformers/pr_17354/en/model_doc/van#transformers.VanForImageClassification"),c(WX,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A5,"id","transformers.AutoModelForVision2Seq"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.AutoModelForVision2Seq"),c(id,"class","relative group"),c(QX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k5,"id","transformers.AutoModelForAudioClassification"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.AutoModelForAudioClassification"),c(fd,"class","relative group"),c(YX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(oz,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(rz,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(tz,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(az,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(nz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(sz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(lz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(iz,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X5,"id","transformers.AutoModelForAudioFrameClassification"),c(X5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X5,"href","#transformers.AutoModelForAudioFrameClassification"),c(hd,"class","relative group"),c(dz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mz,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(gz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(hz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(pz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(_z,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z5,"id","transformers.AutoModelForCTC"),c(Z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z5,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(uz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fz,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(Tz,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForCTC"),c(Mz,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForCTC"),c(Ez,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForCTC"),c(Cz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(wz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Az,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(yz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Lz,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m3,"id","transformers.AutoModelForSpeechSeq2Seq"),c(m3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m3,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Fd,"class","relative group"),c(xz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($z,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sz,"href","/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Rz,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b3,"id","transformers.AutoModelForAudioXVector"),c(b3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b3,"href","#transformers.AutoModelForAudioXVector"),c(Ed,"class","relative group"),c(Pz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nz,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(qz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(jz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Dz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Gz,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y3,"id","transformers.AutoModelForMaskedImageModeling"),c(y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y3,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ad,"class","relative group"),c(Oz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zz,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Wz,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Qz,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P3,"id","transformers.AutoModelForObjectDetection"),c(P3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P3,"href","#transformers.AutoModelForObjectDetection"),c($d,"class","relative group"),c(Hz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yz,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Kz,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D3,"id","transformers.AutoModelForImageSegmentation"),c(D3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D3,"href","#transformers.AutoModelForImageSegmentation"),c(Rd,"class","relative group"),c(Zz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rW,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z3,"id","transformers.AutoModelForSemanticSegmentation"),c(z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z3,"href","#transformers.AutoModelForSemanticSegmentation"),c(Id,"class","relative group"),c(tW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sW,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(lW,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(iW,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(dW,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(cW,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForInstanceSegmentation"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForInstanceSegmentation"),c(jd,"class","relative group"),c(fW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hW,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nF,"id","transformers.TFAutoModel"),c(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nF,"href","#transformers.TFAutoModel"),c(Od,"class","relative group"),c(pW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertModel"),c(vW,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartModel"),c(FW,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertModel"),c(TW,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(MW,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(EW,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertModel"),c(CW,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.TFCLIPModel"),c(wW,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertModel"),c(AW,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextModel"),c(yW,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLModel"),c(LW,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(xW,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaModel"),c($W,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(kW,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(SW,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(RW,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraModel"),c(PW,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(BW,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelModel"),c(IW,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(NW,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2Model"),c(qW,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJModel"),c(jW,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.TFHubertModel"),c(DW,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(GW,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDModel"),c(OW,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerModel"),c(VW,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertModel"),c(XW,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianModel"),c(zW,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartModel"),c(WW,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(QW,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetModel"),c(HW,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5Model"),c(UW,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(JW,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusModel"),c(YW,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertModel"),c(KW,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaModel"),c(ZW,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerModel"),c(eQ,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(oQ,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinModel"),c(rQ,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5Model"),c(tQ,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasModel"),c(aQ,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(nQ,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTModel"),c(sQ,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(lQ,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(iQ,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMModel"),c(dQ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(cQ,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.TFAutoModelForPreTraining"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.TFAutoModelForPreTraining"),c(zd,"class","relative group"),c(fQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hQ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(pQ,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(_Q,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForPreTraining"),c(uQ,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(bQ,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(vQ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(TQ,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(MQ,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(EQ,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(CQ,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(AQ,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(yQ,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(xQ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c($Q,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(kQ,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(RQ,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(PQ,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(BQ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(IQ,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wT,"id","transformers.TFAutoModelForCausalLM"),c(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wT,"href","#transformers.TFAutoModelForCausalLM"),c(Hd,"class","relative group"),c(NQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DQ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(GQ,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(OQ,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(VQ,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(XQ,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(zQ,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(WQ,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(QQ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(HQ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(UQ,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(JQ,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(YQ,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.TFAutoModelForImageClassification"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.TFAutoModelForImageClassification"),c(Yd,"class","relative group"),c(KQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oH,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(rH,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(tH,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(aH,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QT,"id","transformers.TFAutoModelForMaskedLM"),c(QT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QT,"href","#transformers.TFAutoModelForMaskedLM"),c(ec,"class","relative group"),c(nH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iH,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(dH,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(cH,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(fH,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(mH,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(gH,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(hH,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(pH,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(_H,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(uH,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(bH,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(vH,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(FH,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(TH,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(MH,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(EH,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(CH,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(wH,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(AH,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(yH,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(_7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(tc,"class","relative group"),c(LH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($H,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kH,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(SH,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(RH,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(PH,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(BH,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(IH,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianMTModel"),c(NH,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(qH,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(jH,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(DH,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x7,"id","transformers.TFAutoModelForSequenceClassification"),c(x7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x7,"href","#transformers.TFAutoModelForSequenceClassification"),c(sc,"class","relative group"),c(GH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XH,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(zH,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(WH,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(QH,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(HH,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(UH,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(JH,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(YH,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(KH,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(eU,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(oU,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(rU,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(tU,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(aU,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(nU,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(sU,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(lU,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(iU,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(dU,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(cU,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(fU,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(mU,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(gU,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(hU,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(pU,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aM,"id","transformers.TFAutoModelForMultipleChoice"),c(aM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aM,"href","#transformers.TFAutoModelForMultipleChoice"),c(dc,"class","relative group"),c(_U,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vU,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(FU,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(TU,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(MU,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(EU,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(CU,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(wU,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(AU,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(yU,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(LU,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(xU,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c($U,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(kU,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(SU,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(RU,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(PU,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(BU,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(CM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(mc,"class","relative group"),c(IU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jU,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(DU,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(xM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(pc,"class","relative group"),c(GU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XU,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RM,"id","transformers.TFAutoModelForTokenClassification"),c(RM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RM,"href","#transformers.TFAutoModelForTokenClassification"),c(bc,"class","relative group"),c(zU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HU,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(UU,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(JU,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(YU,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(KU,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(ZU,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(eJ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(oJ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(rJ,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(tJ,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(aJ,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(nJ,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(sJ,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(lJ,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(iJ,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(dJ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(cJ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(fJ,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(mJ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(gJ,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rE,"id","transformers.TFAutoModelForQuestionAnswering"),c(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Tc,"class","relative group"),c(hJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_J,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uJ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(bJ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(vJ,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(FJ,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(TJ,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(MJ,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(EJ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(wJ,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(AJ,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(xJ,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c($J,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(kJ,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(SJ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(RJ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(PJ,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(BJ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(IJ,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wE,"id","transformers.TFAutoModelForVision2Seq"),c(wE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wE,"href","#transformers.TFAutoModelForVision2Seq"),c(Cc,"class","relative group"),c(NJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(GJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RE,"id","transformers.FlaxAutoModel"),c(RE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RE,"href","#transformers.FlaxAutoModel"),c($c,"class","relative group"),c(zJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertModel"),c(UJ,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartModel"),c(JJ,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitModel"),c(YJ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertModel"),c(KJ,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(ZJ,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(eY,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(oY,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.FlaxCLIPModel"),c(rY,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(tY,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraModel"),c(aY,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(nY,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(sY,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(lY,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianModel"),c(iY,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartModel"),c(dY,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5Model"),c(cY,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(fY,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(mY,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(gY,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5Model"),c(hY,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(pY,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTModel"),c(_Y,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(uY,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(bY,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lC,"id","transformers.FlaxAutoModelForCausalLM"),c(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Rc,"class","relative group"),c(vY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MY,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(EY,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(CY,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(wY,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(AY,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(yY,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(LY,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(xY,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c($Y,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.FlaxAutoModelForPreTraining"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ic,"class","relative group"),c(kY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PY,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(BY,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(IY,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(NY,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(qY,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(jY,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(DY,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(GY,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(OY,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(VY,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(XY,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(zY,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PC,"id","transformers.FlaxAutoModelForMaskedLM"),c(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(jc,"class","relative group"),c(WY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UY,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(JY,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(YY,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(KY,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(ZY,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(eK,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(oK,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(rK,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(tK,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(aK,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Oc,"class","relative group"),c(nK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iK,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(dK,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(cK,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(fK,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(mK,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(gK,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(hK,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(pK,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(_K,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(zc,"class","relative group"),c(uK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(TK,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(MK,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(EK,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(CK,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(wK,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(AK,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(yK,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(LK,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(xK,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(bw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Hc,"class","relative group"),c($K,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RK,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(PK,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(BK,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(IK,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(NK,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(qK,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(jK,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(DK,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(GK,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(OK,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kw,"id","transformers.FlaxAutoModelForTokenClassification"),c(kw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Yc,"class","relative group"),c(VK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(QK,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(HK,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(UK,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(JK,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(YK,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(KK,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(ZK,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ow,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ow,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ef,"class","relative group"),c(eZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tZ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(aZ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(nZ,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(sZ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(lZ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(iZ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(dZ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(cZ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Zw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(tf,"class","relative group"),c(fZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hZ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t0,"id","transformers.FlaxAutoModelForImageClassification"),c(t0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t0,"href","#transformers.FlaxAutoModelForImageClassification"),c(sf,"class","relative group"),c(pZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Z,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bZ,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(vZ,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i0,"id","transformers.FlaxAutoModelForVision2Seq"),c(i0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(cf,"class","relative group"),c(FZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EZ,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,mi),b(f,_f,u),b(f,tt,u),e(tt,gi),e(tt,hi),e(hi,LA),e(tt,uf),b(f,je,u),b(f,We,u),e(We,pi),e(We,yn),e(yn,xA),e(We,Ln),e(We,xn),e(xn,$A),e(We,_i),e(We,$n),e($n,kA),e(We,ui),b(f,bf,u),M(wa,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,J$),e(Ae,bi),e(bi,Y$),e(Ae,K$),b(f,Eo,u),b(f,Aa,u),e(Aa,Z$),e(Aa,vf),e(vf,ek),e(Aa,xOe),b(f,bqe,u),b(f,vi,u),e(vi,Ff),e(Ff,_oe),M(SA,_oe,null),e(vi,$Oe),e(vi,uoe),e(uoe,kOe),b(f,vqe,u),b(f,kn,u),e(kn,SOe),e(kn,boe),e(boe,ROe),e(kn,POe),e(kn,voe),e(voe,BOe),e(kn,IOe),b(f,Fqe,u),M(RA,f,u),b(f,Tqe,u),b(f,ok,u),e(ok,NOe),b(f,Mqe,u),M(Tf,f,u),b(f,Eqe,u),b(f,Fi,u),e(Fi,Mf),e(Mf,Foe),M(PA,Foe,null),e(Fi,qOe),e(Fi,Toe),e(Toe,jOe),b(f,Cqe,u),b(f,Co,u),M(BA,Co,null),e(Co,DOe),e(Co,IA),e(IA,GOe),e(IA,rk),e(rk,OOe),e(IA,VOe),e(Co,XOe),e(Co,NA),e(NA,zOe),e(NA,Moe),e(Moe,WOe),e(NA,QOe),e(Co,HOe),e(Co,Er),M(qA,Er,null),e(Er,UOe),e(Er,Eoe),e(Eoe,JOe),e(Er,YOe),e(Er,Ti),e(Ti,KOe),e(Ti,Coe),e(Coe,ZOe),e(Ti,eVe),e(Ti,woe),e(woe,oVe),e(Ti,rVe),e(Er,tVe),e(Er,A),e(A,Ef),e(Ef,Aoe),e(Aoe,aVe),e(Ef,nVe),e(Ef,tk),e(tk,sVe),e(Ef,lVe),e(A,iVe),e(A,Cf),e(Cf,yoe),e(yoe,dVe),e(Cf,cVe),e(Cf,ak),e(ak,fVe),e(Cf,mVe),e(A,gVe),e(A,wf),e(wf,Loe),e(Loe,hVe),e(wf,pVe),e(wf,nk),e(nk,_Ve),e(wf,uVe),e(A,bVe),e(A,Af),e(Af,xoe),e(xoe,vVe),e(Af,FVe),e(Af,sk),e(sk,TVe),e(Af,MVe),e(A,EVe),e(A,yf),e(yf,$oe),e($oe,CVe),e(yf,wVe),e(yf,lk),e(lk,AVe),e(yf,yVe),e(A,LVe),e(A,Lf),e(Lf,koe),e(koe,xVe),e(Lf,$Ve),e(Lf,ik),e(ik,kVe),e(Lf,SVe),e(A,RVe),e(A,xf),e(xf,Soe),e(Soe,PVe),e(xf,BVe),e(xf,dk),e(dk,IVe),e(xf,NVe),e(A,qVe),e(A,$f),e($f,Roe),e(Roe,jVe),e($f,DVe),e($f,ck),e(ck,GVe),e($f,OVe),e(A,VVe),e(A,kf),e(kf,Poe),e(Poe,XVe),e(kf,zVe),e(kf,fk),e(fk,WVe),e(kf,QVe),e(A,HVe),e(A,Sf),e(Sf,Boe),e(Boe,UVe),e(Sf,JVe),e(Sf,mk),e(mk,YVe),e(Sf,KVe),e(A,ZVe),e(A,Rf),e(Rf,Ioe),e(Ioe,eXe),e(Rf,oXe),e(Rf,gk),e(gk,rXe),e(Rf,tXe),e(A,aXe),e(A,Pf),e(Pf,Noe),e(Noe,nXe),e(Pf,sXe),e(Pf,hk),e(hk,lXe),e(Pf,iXe),e(A,dXe),e(A,Bf),e(Bf,qoe),e(qoe,cXe),e(Bf,fXe),e(Bf,pk),e(pk,mXe),e(Bf,gXe),e(A,hXe),e(A,If),e(If,joe),e(joe,pXe),e(If,_Xe),e(If,_k),e(_k,uXe),e(If,bXe),e(A,vXe),e(A,Nf),e(Nf,Doe),e(Doe,FXe),e(Nf,TXe),e(Nf,uk),e(uk,MXe),e(Nf,EXe),e(A,CXe),e(A,qf),e(qf,Goe),e(Goe,wXe),e(qf,AXe),e(qf,bk),e(bk,yXe),e(qf,LXe),e(A,xXe),e(A,jf),e(jf,Ooe),e(Ooe,$Xe),e(jf,kXe),e(jf,vk),e(vk,SXe),e(jf,RXe),e(A,PXe),e(A,Df),e(Df,Voe),e(Voe,BXe),e(Df,IXe),e(Df,Fk),e(Fk,NXe),e(Df,qXe),e(A,jXe),e(A,Gf),e(Gf,Xoe),e(Xoe,DXe),e(Gf,GXe),e(Gf,Tk),e(Tk,OXe),e(Gf,VXe),e(A,XXe),e(A,Of),e(Of,zoe),e(zoe,zXe),e(Of,WXe),e(Of,Mk),e(Mk,QXe),e(Of,HXe),e(A,UXe),e(A,Vf),e(Vf,Woe),e(Woe,JXe),e(Vf,YXe),e(Vf,Ek),e(Ek,KXe),e(Vf,ZXe),e(A,eze),e(A,Xf),e(Xf,Qoe),e(Qoe,oze),e(Xf,rze),e(Xf,Ck),e(Ck,tze),e(Xf,aze),e(A,nze),e(A,zf),e(zf,Hoe),e(Hoe,sze),e(zf,lze),e(zf,wk),e(wk,ize),e(zf,dze),e(A,cze),e(A,Wf),e(Wf,Uoe),e(Uoe,fze),e(Wf,mze),e(Wf,Ak),e(Ak,gze),e(Wf,hze),e(A,pze),e(A,Qf),e(Qf,Joe),e(Joe,_ze),e(Qf,uze),e(Qf,yk),e(yk,bze),e(Qf,vze),e(A,Fze),e(A,Hf),e(Hf,Yoe),e(Yoe,Tze),e(Hf,Mze),e(Hf,Lk),e(Lk,Eze),e(Hf,Cze),e(A,wze),e(A,Uf),e(Uf,Koe),e(Koe,Aze),e(Uf,yze),e(Uf,xk),e(xk,Lze),e(Uf,xze),e(A,$ze),e(A,Jf),e(Jf,Zoe),e(Zoe,kze),e(Jf,Sze),e(Jf,$k),e($k,Rze),e(Jf,Pze),e(A,Bze),e(A,Yf),e(Yf,ere),e(ere,Ize),e(Yf,Nze),e(Yf,kk),e(kk,qze),e(Yf,jze),e(A,Dze),e(A,Kf),e(Kf,ore),e(ore,Gze),e(Kf,Oze),e(Kf,Sk),e(Sk,Vze),e(Kf,Xze),e(A,zze),e(A,Zf),e(Zf,rre),e(rre,Wze),e(Zf,Qze),e(Zf,Rk),e(Rk,Hze),e(Zf,Uze),e(A,Jze),e(A,em),e(em,tre),e(tre,Yze),e(em,Kze),e(em,Pk),e(Pk,Zze),e(em,eWe),e(A,oWe),e(A,om),e(om,are),e(are,rWe),e(om,tWe),e(om,Bk),e(Bk,aWe),e(om,nWe),e(A,sWe),e(A,rm),e(rm,nre),e(nre,lWe),e(rm,iWe),e(rm,Ik),e(Ik,dWe),e(rm,cWe),e(A,fWe),e(A,tm),e(tm,sre),e(sre,mWe),e(tm,gWe),e(tm,Nk),e(Nk,hWe),e(tm,pWe),e(A,_We),e(A,am),e(am,lre),e(lre,uWe),e(am,bWe),e(am,qk),e(qk,vWe),e(am,FWe),e(A,TWe),e(A,nm),e(nm,ire),e(ire,MWe),e(nm,EWe),e(nm,jk),e(jk,CWe),e(nm,wWe),e(A,AWe),e(A,sm),e(sm,dre),e(dre,yWe),e(sm,LWe),e(sm,Dk),e(Dk,xWe),e(sm,$We),e(A,kWe),e(A,lm),e(lm,cre),e(cre,SWe),e(lm,RWe),e(lm,Gk),e(Gk,PWe),e(lm,BWe),e(A,IWe),e(A,im),e(im,fre),e(fre,NWe),e(im,qWe),e(im,Ok),e(Ok,jWe),e(im,DWe),e(A,GWe),e(A,dm),e(dm,mre),e(mre,OWe),e(dm,VWe),e(dm,Vk),e(Vk,XWe),e(dm,zWe),e(A,WWe),e(A,cm),e(cm,gre),e(gre,QWe),e(cm,HWe),e(cm,Xk),e(Xk,UWe),e(cm,JWe),e(A,YWe),e(A,fm),e(fm,hre),e(hre,KWe),e(fm,ZWe),e(fm,zk),e(zk,eQe),e(fm,oQe),e(A,rQe),e(A,mm),e(mm,pre),e(pre,tQe),e(mm,aQe),e(mm,Wk),e(Wk,nQe),e(mm,sQe),e(A,lQe),e(A,gm),e(gm,_re),e(_re,iQe),e(gm,dQe),e(gm,Qk),e(Qk,cQe),e(gm,fQe),e(A,mQe),e(A,hm),e(hm,ure),e(ure,gQe),e(hm,hQe),e(hm,Hk),e(Hk,pQe),e(hm,_Qe),e(A,uQe),e(A,pm),e(pm,bre),e(bre,bQe),e(pm,vQe),e(pm,Uk),e(Uk,FQe),e(pm,TQe),e(A,MQe),e(A,_m),e(_m,vre),e(vre,EQe),e(_m,CQe),e(_m,Jk),e(Jk,wQe),e(_m,AQe),e(A,yQe),e(A,um),e(um,Fre),e(Fre,LQe),e(um,xQe),e(um,Yk),e(Yk,$Qe),e(um,kQe),e(A,SQe),e(A,bm),e(bm,Tre),e(Tre,RQe),e(bm,PQe),e(bm,Kk),e(Kk,BQe),e(bm,IQe),e(A,NQe),e(A,vm),e(vm,Mre),e(Mre,qQe),e(vm,jQe),e(vm,Zk),e(Zk,DQe),e(vm,GQe),e(A,OQe),e(A,Fm),e(Fm,Ere),e(Ere,VQe),e(Fm,XQe),e(Fm,eS),e(eS,zQe),e(Fm,WQe),e(A,QQe),e(A,Tm),e(Tm,Cre),e(Cre,HQe),e(Tm,UQe),e(Tm,oS),e(oS,JQe),e(Tm,YQe),e(A,KQe),e(A,Mm),e(Mm,wre),e(wre,ZQe),e(Mm,eHe),e(Mm,rS),e(rS,oHe),e(Mm,rHe),e(A,tHe),e(A,Em),e(Em,Are),e(Are,aHe),e(Em,nHe),e(Em,tS),e(tS,sHe),e(Em,lHe),e(A,iHe),e(A,Cm),e(Cm,yre),e(yre,dHe),e(Cm,cHe),e(Cm,aS),e(aS,fHe),e(Cm,mHe),e(A,gHe),e(A,wm),e(wm,Lre),e(Lre,hHe),e(wm,pHe),e(wm,nS),e(nS,_He),e(wm,uHe),e(A,bHe),e(A,Am),e(Am,xre),e(xre,vHe),e(Am,FHe),e(Am,sS),e(sS,THe),e(Am,MHe),e(A,EHe),e(A,ym),e(ym,$re),e($re,CHe),e(ym,wHe),e(ym,lS),e(lS,AHe),e(ym,yHe),e(A,LHe),e(A,Lm),e(Lm,kre),e(kre,xHe),e(Lm,$He),e(Lm,iS),e(iS,kHe),e(Lm,SHe),e(A,RHe),e(A,xm),e(xm,Sre),e(Sre,PHe),e(xm,BHe),e(xm,dS),e(dS,IHe),e(xm,NHe),e(A,qHe),e(A,$m),e($m,Rre),e(Rre,jHe),e($m,DHe),e($m,cS),e(cS,GHe),e($m,OHe),e(A,VHe),e(A,km),e(km,Pre),e(Pre,XHe),e(km,zHe),e(km,fS),e(fS,WHe),e(km,QHe),e(A,HHe),e(A,Sm),e(Sm,Bre),e(Bre,UHe),e(Sm,JHe),e(Sm,mS),e(mS,YHe),e(Sm,KHe),e(A,ZHe),e(A,Rm),e(Rm,Ire),e(Ire,eUe),e(Rm,oUe),e(Rm,gS),e(gS,rUe),e(Rm,tUe),e(A,aUe),e(A,Pm),e(Pm,Nre),e(Nre,nUe),e(Pm,sUe),e(Pm,hS),e(hS,lUe),e(Pm,iUe),e(A,dUe),e(A,Bm),e(Bm,qre),e(qre,cUe),e(Bm,fUe),e(Bm,pS),e(pS,mUe),e(Bm,gUe),e(A,hUe),e(A,Im),e(Im,jre),e(jre,pUe),e(Im,_Ue),e(Im,_S),e(_S,uUe),e(Im,bUe),e(A,vUe),e(A,Nm),e(Nm,Dre),e(Dre,FUe),e(Nm,TUe),e(Nm,uS),e(uS,MUe),e(Nm,EUe),e(A,CUe),e(A,qm),e(qm,Gre),e(Gre,wUe),e(qm,AUe),e(qm,bS),e(bS,yUe),e(qm,LUe),e(A,xUe),e(A,jm),e(jm,Ore),e(Ore,$Ue),e(jm,kUe),e(jm,vS),e(vS,SUe),e(jm,RUe),e(A,PUe),e(A,Dm),e(Dm,Vre),e(Vre,BUe),e(Dm,IUe),e(Dm,FS),e(FS,NUe),e(Dm,qUe),e(A,jUe),e(A,Gm),e(Gm,Xre),e(Xre,DUe),e(Gm,GUe),e(Gm,TS),e(TS,OUe),e(Gm,VUe),e(A,XUe),e(A,Om),e(Om,zre),e(zre,zUe),e(Om,WUe),e(Om,MS),e(MS,QUe),e(Om,HUe),e(A,UUe),e(A,Vm),e(Vm,Wre),e(Wre,JUe),e(Vm,YUe),e(Vm,ES),e(ES,KUe),e(Vm,ZUe),e(A,eJe),e(A,Xm),e(Xm,Qre),e(Qre,oJe),e(Xm,rJe),e(Xm,CS),e(CS,tJe),e(Xm,aJe),e(A,nJe),e(A,zm),e(zm,Hre),e(Hre,sJe),e(zm,lJe),e(zm,wS),e(wS,iJe),e(zm,dJe),e(A,cJe),e(A,Wm),e(Wm,Ure),e(Ure,fJe),e(Wm,mJe),e(Wm,AS),e(AS,gJe),e(Wm,hJe),e(A,pJe),e(A,Qm),e(Qm,Jre),e(Jre,_Je),e(Qm,uJe),e(Qm,yS),e(yS,bJe),e(Qm,vJe),e(A,FJe),e(A,Hm),e(Hm,Yre),e(Yre,TJe),e(Hm,MJe),e(Hm,LS),e(LS,EJe),e(Hm,CJe),e(A,wJe),e(A,Um),e(Um,Kre),e(Kre,AJe),e(Um,yJe),e(Um,xS),e(xS,LJe),e(Um,xJe),e(A,$Je),e(A,Jm),e(Jm,Zre),e(Zre,kJe),e(Jm,SJe),e(Jm,$S),e($S,RJe),e(Jm,PJe),e(A,BJe),e(A,Ym),e(Ym,ete),e(ete,IJe),e(Ym,NJe),e(Ym,kS),e(kS,qJe),e(Ym,jJe),e(A,DJe),e(A,Km),e(Km,ote),e(ote,GJe),e(Km,OJe),e(Km,SS),e(SS,VJe),e(Km,XJe),e(A,zJe),e(A,Zm),e(Zm,rte),e(rte,WJe),e(Zm,QJe),e(Zm,RS),e(RS,HJe),e(Zm,UJe),e(A,JJe),e(A,eg),e(eg,tte),e(tte,YJe),e(eg,KJe),e(eg,PS),e(PS,ZJe),e(eg,eYe),e(A,oYe),e(A,og),e(og,ate),e(ate,rYe),e(og,tYe),e(og,BS),e(BS,aYe),e(og,nYe),e(A,sYe),e(A,rg),e(rg,nte),e(nte,lYe),e(rg,iYe),e(rg,IS),e(IS,dYe),e(rg,cYe),e(A,fYe),e(A,tg),e(tg,ste),e(ste,mYe),e(tg,gYe),e(tg,NS),e(NS,hYe),e(tg,pYe),e(A,_Ye),e(A,ag),e(ag,lte),e(lte,uYe),e(ag,bYe),e(ag,qS),e(qS,vYe),e(ag,FYe),e(A,TYe),e(A,ng),e(ng,ite),e(ite,MYe),e(ng,EYe),e(ng,jS),e(jS,CYe),e(ng,wYe),e(A,AYe),e(A,sg),e(sg,dte),e(dte,yYe),e(sg,LYe),e(sg,DS),e(DS,xYe),e(sg,$Ye),e(A,kYe),e(A,lg),e(lg,cte),e(cte,SYe),e(lg,RYe),e(lg,GS),e(GS,PYe),e(lg,BYe),e(A,IYe),e(A,ig),e(ig,fte),e(fte,NYe),e(ig,qYe),e(ig,OS),e(OS,jYe),e(ig,DYe),e(A,GYe),e(A,dg),e(dg,mte),e(mte,OYe),e(dg,VYe),e(dg,VS),e(VS,XYe),e(dg,zYe),e(A,WYe),e(A,cg),e(cg,gte),e(gte,QYe),e(cg,HYe),e(cg,XS),e(XS,UYe),e(cg,JYe),e(A,YYe),e(A,fg),e(fg,hte),e(hte,KYe),e(fg,ZYe),e(fg,zS),e(zS,eKe),e(fg,oKe),e(A,rKe),e(A,mg),e(mg,pte),e(pte,tKe),e(mg,aKe),e(mg,WS),e(WS,nKe),e(mg,sKe),e(A,lKe),e(A,gg),e(gg,_te),e(_te,iKe),e(gg,dKe),e(gg,QS),e(QS,cKe),e(gg,fKe),e(A,mKe),e(A,hg),e(hg,ute),e(ute,gKe),e(hg,hKe),e(hg,HS),e(HS,pKe),e(hg,_Ke),e(A,uKe),e(A,pg),e(pg,bte),e(bte,bKe),e(pg,vKe),e(pg,US),e(US,FKe),e(pg,TKe),e(A,MKe),e(A,_g),e(_g,vte),e(vte,EKe),e(_g,CKe),e(_g,JS),e(JS,wKe),e(_g,AKe),e(A,yKe),e(A,ug),e(ug,Fte),e(Fte,LKe),e(ug,xKe),e(ug,YS),e(YS,$Ke),e(ug,kKe),e(A,SKe),e(A,bg),e(bg,Tte),e(Tte,RKe),e(bg,PKe),e(bg,KS),e(KS,BKe),e(bg,IKe),e(A,NKe),e(A,vg),e(vg,Mte),e(Mte,qKe),e(vg,jKe),e(vg,ZS),e(ZS,DKe),e(vg,GKe),e(A,OKe),e(A,Fg),e(Fg,Ete),e(Ete,VKe),e(Fg,XKe),e(Fg,eR),e(eR,zKe),e(Fg,WKe),e(A,QKe),e(A,Tg),e(Tg,Cte),e(Cte,HKe),e(Tg,UKe),e(Tg,oR),e(oR,JKe),e(Tg,YKe),e(A,KKe),e(A,Mg),e(Mg,wte),e(wte,ZKe),e(Mg,eZe),e(Mg,rR),e(rR,oZe),e(Mg,rZe),e(A,tZe),e(A,Eg),e(Eg,Ate),e(Ate,aZe),e(Eg,nZe),e(Eg,tR),e(tR,sZe),e(Eg,lZe),e(A,iZe),e(A,Cg),e(Cg,yte),e(yte,dZe),e(Cg,cZe),e(Cg,aR),e(aR,fZe),e(Cg,mZe),e(Er,gZe),M(wg,Er,null),e(Co,hZe),e(Co,Ag),M(jA,Ag,null),e(Ag,pZe),e(Ag,Lte),e(Lte,_Ze),b(f,wqe,u),b(f,Mi,u),e(Mi,yg),e(yg,xte),M(DA,xte,null),e(Mi,uZe),e(Mi,$te),e($te,bZe),b(f,Aqe,u),b(f,wo,u),M(GA,wo,null),e(wo,vZe),e(wo,OA),e(OA,FZe),e(OA,nR),e(nR,TZe),e(OA,MZe),e(wo,EZe),e(wo,VA),e(VA,CZe),e(VA,kte),e(kte,wZe),e(VA,AZe),e(wo,yZe),e(wo,Cr),M(XA,Cr,null),e(Cr,LZe),e(Cr,Ste),e(Ste,xZe),e(Cr,$Ze),e(Cr,ya),e(ya,kZe),e(ya,Rte),e(Rte,SZe),e(ya,RZe),e(ya,Pte),e(Pte,PZe),e(ya,BZe),e(ya,Bte),e(Bte,IZe),e(ya,NZe),e(Cr,qZe),e(Cr,k),e(k,Sn),e(Sn,Ite),e(Ite,jZe),e(Sn,DZe),e(Sn,sR),e(sR,GZe),e(Sn,OZe),e(Sn,lR),e(lR,VZe),e(Sn,XZe),e(k,zZe),e(k,Rn),e(Rn,Nte),e(Nte,WZe),e(Rn,QZe),e(Rn,iR),e(iR,HZe),e(Rn,UZe),e(Rn,dR),e(dR,JZe),e(Rn,YZe),e(k,KZe),e(k,Pn),e(Pn,qte),e(qte,ZZe),e(Pn,eeo),e(Pn,cR),e(cR,oeo),e(Pn,reo),e(Pn,fR),e(fR,teo),e(Pn,aeo),e(k,neo),e(k,Lg),e(Lg,jte),e(jte,seo),e(Lg,leo),e(Lg,mR),e(mR,ieo),e(Lg,deo),e(k,ceo),e(k,Bn),e(Bn,Dte),e(Dte,feo),e(Bn,meo),e(Bn,gR),e(gR,geo),e(Bn,heo),e(Bn,hR),e(hR,peo),e(Bn,_eo),e(k,ueo),e(k,xg),e(xg,Gte),e(Gte,beo),e(xg,veo),e(xg,pR),e(pR,Feo),e(xg,Teo),e(k,Meo),e(k,$g),e($g,Ote),e(Ote,Eeo),e($g,Ceo),e($g,_R),e(_R,weo),e($g,Aeo),e(k,yeo),e(k,kg),e(kg,Vte),e(Vte,Leo),e(kg,xeo),e(kg,uR),e(uR,$eo),e(kg,keo),e(k,Seo),e(k,In),e(In,Xte),e(Xte,Reo),e(In,Peo),e(In,bR),e(bR,Beo),e(In,Ieo),e(In,vR),e(vR,Neo),e(In,qeo),e(k,jeo),e(k,Nn),e(Nn,zte),e(zte,Deo),e(Nn,Geo),e(Nn,FR),e(FR,Oeo),e(Nn,Veo),e(Nn,TR),e(TR,Xeo),e(Nn,zeo),e(k,Weo),e(k,qn),e(qn,Wte),e(Wte,Qeo),e(qn,Heo),e(qn,MR),e(MR,Ueo),e(qn,Jeo),e(qn,ER),e(ER,Yeo),e(qn,Keo),e(k,Zeo),e(k,Sg),e(Sg,Qte),e(Qte,eoo),e(Sg,ooo),e(Sg,CR),e(CR,roo),e(Sg,too),e(k,aoo),e(k,Rg),e(Rg,Hte),e(Hte,noo),e(Rg,soo),e(Rg,wR),e(wR,loo),e(Rg,ioo),e(k,doo),e(k,jn),e(jn,Ute),e(Ute,coo),e(jn,foo),e(jn,AR),e(AR,moo),e(jn,goo),e(jn,yR),e(yR,hoo),e(jn,poo),e(k,_oo),e(k,Pg),e(Pg,Jte),e(Jte,uoo),e(Pg,boo),e(Pg,LR),e(LR,voo),e(Pg,Foo),e(k,Too),e(k,Dn),e(Dn,Yte),e(Yte,Moo),e(Dn,Eoo),e(Dn,xR),e(xR,Coo),e(Dn,woo),e(Dn,$R),e($R,Aoo),e(Dn,yoo),e(k,Loo),e(k,Gn),e(Gn,Kte),e(Kte,xoo),e(Gn,$oo),e(Gn,kR),e(kR,koo),e(Gn,Soo),e(Gn,SR),e(SR,Roo),e(Gn,Poo),e(k,Boo),e(k,On),e(On,Zte),e(Zte,Ioo),e(On,Noo),e(On,RR),e(RR,qoo),e(On,joo),e(On,PR),e(PR,Doo),e(On,Goo),e(k,Ooo),e(k,Bg),e(Bg,eae),e(eae,Voo),e(Bg,Xoo),e(Bg,BR),e(BR,zoo),e(Bg,Woo),e(k,Qoo),e(k,Vn),e(Vn,oae),e(oae,Hoo),e(Vn,Uoo),e(Vn,IR),e(IR,Joo),e(Vn,Yoo),e(Vn,NR),e(NR,Koo),e(Vn,Zoo),e(k,ero),e(k,Xn),e(Xn,rae),e(rae,oro),e(Xn,rro),e(Xn,qR),e(qR,tro),e(Xn,aro),e(Xn,jR),e(jR,nro),e(Xn,sro),e(k,lro),e(k,zn),e(zn,tae),e(tae,iro),e(zn,dro),e(zn,DR),e(DR,cro),e(zn,fro),e(zn,GR),e(GR,mro),e(zn,gro),e(k,hro),e(k,Wn),e(Wn,aae),e(aae,pro),e(Wn,_ro),e(Wn,OR),e(OR,uro),e(Wn,bro),e(Wn,VR),e(VR,vro),e(Wn,Fro),e(k,Tro),e(k,Qn),e(Qn,nae),e(nae,Mro),e(Qn,Ero),e(Qn,XR),e(XR,Cro),e(Qn,wro),e(Qn,zR),e(zR,Aro),e(Qn,yro),e(k,Lro),e(k,Hn),e(Hn,sae),e(sae,xro),e(Hn,$ro),e(Hn,WR),e(WR,kro),e(Hn,Sro),e(Hn,QR),e(QR,Rro),e(Hn,Pro),e(k,Bro),e(k,Ig),e(Ig,lae),e(lae,Iro),e(Ig,Nro),e(Ig,HR),e(HR,qro),e(Ig,jro),e(k,Dro),e(k,Un),e(Un,iae),e(iae,Gro),e(Un,Oro),e(Un,UR),e(UR,Vro),e(Un,Xro),e(Un,JR),e(JR,zro),e(Un,Wro),e(k,Qro),e(k,Ng),e(Ng,dae),e(dae,Hro),e(Ng,Uro),e(Ng,YR),e(YR,Jro),e(Ng,Yro),e(k,Kro),e(k,Jn),e(Jn,cae),e(cae,Zro),e(Jn,eto),e(Jn,KR),e(KR,oto),e(Jn,rto),e(Jn,ZR),e(ZR,tto),e(Jn,ato),e(k,nto),e(k,Yn),e(Yn,fae),e(fae,sto),e(Yn,lto),e(Yn,eP),e(eP,ito),e(Yn,dto),e(Yn,oP),e(oP,cto),e(Yn,fto),e(k,mto),e(k,Kn),e(Kn,mae),e(mae,gto),e(Kn,hto),e(Kn,rP),e(rP,pto),e(Kn,_to),e(Kn,tP),e(tP,uto),e(Kn,bto),e(k,vto),e(k,qg),e(qg,gae),e(gae,Fto),e(qg,Tto),e(qg,aP),e(aP,Mto),e(qg,Eto),e(k,Cto),e(k,Zn),e(Zn,hae),e(hae,wto),e(Zn,Ato),e(Zn,nP),e(nP,yto),e(Zn,Lto),e(Zn,sP),e(sP,xto),e(Zn,$to),e(k,kto),e(k,es),e(es,pae),e(pae,Sto),e(es,Rto),e(es,lP),e(lP,Pto),e(es,Bto),e(es,iP),e(iP,Ito),e(es,Nto),e(k,qto),e(k,jg),e(jg,_ae),e(_ae,jto),e(jg,Dto),e(jg,dP),e(dP,Gto),e(jg,Oto),e(k,Vto),e(k,os),e(os,uae),e(uae,Xto),e(os,zto),e(os,cP),e(cP,Wto),e(os,Qto),e(os,fP),e(fP,Hto),e(os,Uto),e(k,Jto),e(k,rs),e(rs,bae),e(bae,Yto),e(rs,Kto),e(rs,mP),e(mP,Zto),e(rs,eao),e(rs,gP),e(gP,oao),e(rs,rao),e(k,tao),e(k,ts),e(ts,vae),e(vae,aao),e(ts,nao),e(ts,hP),e(hP,sao),e(ts,lao),e(ts,pP),e(pP,iao),e(ts,dao),e(k,cao),e(k,as),e(as,Fae),e(Fae,fao),e(as,mao),e(as,_P),e(_P,gao),e(as,hao),e(as,uP),e(uP,pao),e(as,_ao),e(k,uao),e(k,ns),e(ns,Tae),e(Tae,bao),e(ns,vao),e(ns,bP),e(bP,Fao),e(ns,Tao),e(ns,vP),e(vP,Mao),e(ns,Eao),e(k,Cao),e(k,ss),e(ss,Mae),e(Mae,wao),e(ss,Aao),e(ss,FP),e(FP,yao),e(ss,Lao),e(ss,TP),e(TP,xao),e(ss,$ao),e(k,kao),e(k,ls),e(ls,Eae),e(Eae,Sao),e(ls,Rao),e(ls,MP),e(MP,Pao),e(ls,Bao),e(ls,EP),e(EP,Iao),e(ls,Nao),e(k,qao),e(k,Dg),e(Dg,Cae),e(Cae,jao),e(Dg,Dao),e(Dg,CP),e(CP,Gao),e(Dg,Oao),e(k,Vao),e(k,is),e(is,wae),e(wae,Xao),e(is,zao),e(is,wP),e(wP,Wao),e(is,Qao),e(is,AP),e(AP,Hao),e(is,Uao),e(k,Jao),e(k,Gg),e(Gg,Aae),e(Aae,Yao),e(Gg,Kao),e(Gg,yP),e(yP,Zao),e(Gg,eno),e(k,ono),e(k,Og),e(Og,yae),e(yae,rno),e(Og,tno),e(Og,LP),e(LP,ano),e(Og,nno),e(k,sno),e(k,ds),e(ds,Lae),e(Lae,lno),e(ds,ino),e(ds,xP),e(xP,dno),e(ds,cno),e(ds,$P),e($P,fno),e(ds,mno),e(k,gno),e(k,cs),e(cs,xae),e(xae,hno),e(cs,pno),e(cs,kP),e(kP,_no),e(cs,uno),e(cs,SP),e(SP,bno),e(cs,vno),e(k,Fno),e(k,fs),e(fs,$ae),e($ae,Tno),e(fs,Mno),e(fs,RP),e(RP,Eno),e(fs,Cno),e(fs,PP),e(PP,wno),e(fs,Ano),e(k,yno),e(k,Vg),e(Vg,kae),e(kae,Lno),e(Vg,xno),e(Vg,BP),e(BP,$no),e(Vg,kno),e(k,Sno),e(k,ms),e(ms,Sae),e(Sae,Rno),e(ms,Pno),e(ms,IP),e(IP,Bno),e(ms,Ino),e(ms,NP),e(NP,Nno),e(ms,qno),e(k,jno),e(k,gs),e(gs,Rae),e(Rae,Dno),e(gs,Gno),e(gs,qP),e(qP,Ono),e(gs,Vno),e(gs,jP),e(jP,Xno),e(gs,zno),e(k,Wno),e(k,hs),e(hs,Pae),e(Pae,Qno),e(hs,Hno),e(hs,DP),e(DP,Uno),e(hs,Jno),e(hs,GP),e(GP,Yno),e(hs,Kno),e(k,Zno),e(k,ps),e(ps,Bae),e(Bae,eso),e(ps,oso),e(ps,OP),e(OP,rso),e(ps,tso),e(ps,VP),e(VP,aso),e(ps,nso),e(k,sso),e(k,_s),e(_s,Iae),e(Iae,lso),e(_s,iso),e(_s,XP),e(XP,dso),e(_s,cso),e(_s,zP),e(zP,fso),e(_s,mso),e(k,gso),e(k,Xg),e(Xg,Nae),e(Nae,hso),e(Xg,pso),e(Xg,WP),e(WP,_so),e(Xg,uso),e(k,bso),e(k,us),e(us,qae),e(qae,vso),e(us,Fso),e(us,QP),e(QP,Tso),e(us,Mso),e(us,HP),e(HP,Eso),e(us,Cso),e(k,wso),e(k,zg),e(zg,jae),e(jae,Aso),e(zg,yso),e(zg,UP),e(UP,Lso),e(zg,xso),e(k,$so),e(k,Wg),e(Wg,Dae),e(Dae,kso),e(Wg,Sso),e(Wg,JP),e(JP,Rso),e(Wg,Pso),e(k,Bso),e(k,Qg),e(Qg,Gae),e(Gae,Iso),e(Qg,Nso),e(Qg,YP),e(YP,qso),e(Qg,jso),e(k,Dso),e(k,Hg),e(Hg,Oae),e(Oae,Gso),e(Hg,Oso),e(Hg,KP),e(KP,Vso),e(Hg,Xso),e(k,zso),e(k,bs),e(bs,Vae),e(Vae,Wso),e(bs,Qso),e(bs,ZP),e(ZP,Hso),e(bs,Uso),e(bs,eB),e(eB,Jso),e(bs,Yso),e(k,Kso),e(k,Ug),e(Ug,Xae),e(Xae,Zso),e(Ug,elo),e(Ug,oB),e(oB,olo),e(Ug,rlo),e(k,tlo),e(k,vs),e(vs,zae),e(zae,alo),e(vs,nlo),e(vs,rB),e(rB,slo),e(vs,llo),e(vs,tB),e(tB,ilo),e(vs,dlo),e(k,clo),e(k,Fs),e(Fs,Wae),e(Wae,flo),e(Fs,mlo),e(Fs,aB),e(aB,glo),e(Fs,hlo),e(Fs,nB),e(nB,plo),e(Fs,_lo),e(k,ulo),e(k,Ts),e(Ts,Qae),e(Qae,blo),e(Ts,vlo),e(Ts,sB),e(sB,Flo),e(Ts,Tlo),e(Ts,lB),e(lB,Mlo),e(Ts,Elo),e(k,Clo),e(k,Ms),e(Ms,Hae),e(Hae,wlo),e(Ms,Alo),e(Ms,iB),e(iB,ylo),e(Ms,Llo),e(Ms,dB),e(dB,xlo),e(Ms,$lo),e(k,klo),e(k,Es),e(Es,Uae),e(Uae,Slo),e(Es,Rlo),e(Es,cB),e(cB,Plo),e(Es,Blo),e(Es,fB),e(fB,Ilo),e(Es,Nlo),e(k,qlo),e(k,Cs),e(Cs,Jae),e(Jae,jlo),e(Cs,Dlo),e(Cs,mB),e(mB,Glo),e(Cs,Olo),e(Cs,gB),e(gB,Vlo),e(Cs,Xlo),e(k,zlo),e(k,Jg),e(Jg,Yae),e(Yae,Wlo),e(Jg,Qlo),e(Jg,hB),e(hB,Hlo),e(Jg,Ulo),e(k,Jlo),e(k,Yg),e(Yg,Kae),e(Kae,Ylo),e(Yg,Klo),e(Yg,pB),e(pB,Zlo),e(Yg,eio),e(k,oio),e(k,ws),e(ws,Zae),e(Zae,rio),e(ws,tio),e(ws,_B),e(_B,aio),e(ws,nio),e(ws,uB),e(uB,sio),e(ws,lio),e(k,iio),e(k,As),e(As,ene),e(ene,dio),e(As,cio),e(As,bB),e(bB,fio),e(As,mio),e(As,vB),e(vB,gio),e(As,hio),e(k,pio),e(k,ys),e(ys,one),e(one,_io),e(ys,uio),e(ys,FB),e(FB,bio),e(ys,vio),e(ys,TB),e(TB,Fio),e(ys,Tio),e(k,Mio),e(k,Kg),e(Kg,rne),e(rne,Eio),e(Kg,Cio),e(Kg,MB),e(MB,wio),e(Kg,Aio),e(k,yio),e(k,Zg),e(Zg,tne),e(tne,Lio),e(Zg,xio),e(Zg,EB),e(EB,$io),e(Zg,kio),e(k,Sio),e(k,eh),e(eh,ane),e(ane,Rio),e(eh,Pio),e(eh,CB),e(CB,Bio),e(eh,Iio),e(k,Nio),e(k,Ls),e(Ls,nne),e(nne,qio),e(Ls,jio),e(Ls,wB),e(wB,Dio),e(Ls,Gio),e(Ls,AB),e(AB,Oio),e(Ls,Vio),e(k,Xio),e(k,oh),e(oh,sne),e(sne,zio),e(oh,Wio),e(oh,yB),e(yB,Qio),e(oh,Hio),e(k,Uio),e(k,rh),e(rh,lne),e(lne,Jio),e(rh,Yio),e(rh,LB),e(LB,Kio),e(rh,Zio),e(k,edo),e(k,th),e(th,ine),e(ine,odo),e(th,rdo),e(th,xB),e(xB,tdo),e(th,ado),e(k,ndo),e(k,xs),e(xs,dne),e(dne,sdo),e(xs,ldo),e(xs,$B),e($B,ido),e(xs,ddo),e(xs,kB),e(kB,cdo),e(xs,fdo),e(k,mdo),e(k,ah),e(ah,cne),e(cne,gdo),e(ah,hdo),e(ah,SB),e(SB,pdo),e(ah,_do),e(k,udo),e(k,nh),e(nh,fne),e(fne,bdo),e(nh,vdo),e(nh,RB),e(RB,Fdo),e(nh,Tdo),e(k,Mdo),e(k,$s),e($s,mne),e(mne,Edo),e($s,Cdo),e($s,PB),e(PB,wdo),e($s,Ado),e($s,BB),e(BB,ydo),e($s,Ldo),e(k,xdo),e(k,ks),e(ks,gne),e(gne,$do),e(ks,kdo),e(ks,IB),e(IB,Sdo),e(ks,Rdo),e(ks,NB),e(NB,Pdo),e(ks,Bdo),e(k,Ido),e(k,Ss),e(Ss,hne),e(hne,Ndo),e(Ss,qdo),e(Ss,qB),e(qB,jdo),e(Ss,Ddo),e(Ss,jB),e(jB,Gdo),e(Ss,Odo),e(k,Vdo),e(k,Rs),e(Rs,pne),e(pne,Xdo),e(Rs,zdo),e(Rs,DB),e(DB,Wdo),e(Rs,Qdo),e(Rs,GB),e(GB,Hdo),e(Rs,Udo),e(Cr,Jdo),M(sh,Cr,null),e(wo,Ydo),e(wo,lh),M(zA,lh,null),e(lh,Kdo),e(lh,_ne),e(_ne,Zdo),b(f,yqe,u),b(f,Ei,u),e(Ei,ih),e(ih,une),M(WA,une,null),e(Ei,eco),e(Ei,bne),e(bne,oco),b(f,Lqe,u),b(f,Ao,u),M(QA,Ao,null),e(Ao,rco),e(Ao,HA),e(HA,tco),e(HA,OB),e(OB,aco),e(HA,nco),e(Ao,sco),e(Ao,UA),e(UA,lco),e(UA,vne),e(vne,ico),e(UA,dco),e(Ao,cco),e(Ao,He),M(JA,He,null),e(He,fco),e(He,Fne),e(Fne,mco),e(He,gco),e(He,La),e(La,hco),e(La,Tne),e(Tne,pco),e(La,_co),e(La,Mne),e(Mne,uco),e(La,bco),e(La,Ene),e(Ene,vco),e(La,Fco),e(He,Tco),e(He,Y),e(Y,dh),e(dh,Cne),e(Cne,Mco),e(dh,Eco),e(dh,VB),e(VB,Cco),e(dh,wco),e(Y,Aco),e(Y,ch),e(ch,wne),e(wne,yco),e(ch,Lco),e(ch,XB),e(XB,xco),e(ch,$co),e(Y,kco),e(Y,fh),e(fh,Ane),e(Ane,Sco),e(fh,Rco),e(fh,zB),e(zB,Pco),e(fh,Bco),e(Y,Ico),e(Y,mh),e(mh,yne),e(yne,Nco),e(mh,qco),e(mh,WB),e(WB,jco),e(mh,Dco),e(Y,Gco),e(Y,gh),e(gh,Lne),e(Lne,Oco),e(gh,Vco),e(gh,QB),e(QB,Xco),e(gh,zco),e(Y,Wco),e(Y,hh),e(hh,xne),e(xne,Qco),e(hh,Hco),e(hh,HB),e(HB,Uco),e(hh,Jco),e(Y,Yco),e(Y,ph),e(ph,$ne),e($ne,Kco),e(ph,Zco),e(ph,UB),e(UB,efo),e(ph,ofo),e(Y,rfo),e(Y,_h),e(_h,kne),e(kne,tfo),e(_h,afo),e(_h,JB),e(JB,nfo),e(_h,sfo),e(Y,lfo),e(Y,uh),e(uh,Sne),e(Sne,ifo),e(uh,dfo),e(uh,YB),e(YB,cfo),e(uh,ffo),e(Y,mfo),e(Y,bh),e(bh,Rne),e(Rne,gfo),e(bh,hfo),e(bh,KB),e(KB,pfo),e(bh,_fo),e(Y,ufo),e(Y,vh),e(vh,Pne),e(Pne,bfo),e(vh,vfo),e(vh,ZB),e(ZB,Ffo),e(vh,Tfo),e(Y,Mfo),e(Y,Fh),e(Fh,Bne),e(Bne,Efo),e(Fh,Cfo),e(Fh,eI),e(eI,wfo),e(Fh,Afo),e(Y,yfo),e(Y,Th),e(Th,Ine),e(Ine,Lfo),e(Th,xfo),e(Th,oI),e(oI,$fo),e(Th,kfo),e(Y,Sfo),e(Y,Mh),e(Mh,Nne),e(Nne,Rfo),e(Mh,Pfo),e(Mh,rI),e(rI,Bfo),e(Mh,Ifo),e(Y,Nfo),e(Y,Eh),e(Eh,qne),e(qne,qfo),e(Eh,jfo),e(Eh,tI),e(tI,Dfo),e(Eh,Gfo),e(Y,Ofo),e(Y,Ch),e(Ch,jne),e(jne,Vfo),e(Ch,Xfo),e(Ch,aI),e(aI,zfo),e(Ch,Wfo),e(Y,Qfo),e(Y,wh),e(wh,Dne),e(Dne,Hfo),e(wh,Ufo),e(wh,nI),e(nI,Jfo),e(wh,Yfo),e(Y,Kfo),e(Y,Ah),e(Ah,Gne),e(Gne,Zfo),e(Ah,emo),e(Ah,sI),e(sI,omo),e(Ah,rmo),e(Y,tmo),e(Y,yh),e(yh,One),e(One,amo),e(yh,nmo),e(yh,lI),e(lI,smo),e(yh,lmo),e(Y,imo),e(Y,Lh),e(Lh,Vne),e(Vne,dmo),e(Lh,cmo),e(Lh,iI),e(iI,fmo),e(Lh,mmo),e(Y,gmo),e(Y,xh),e(xh,Xne),e(Xne,hmo),e(xh,pmo),e(xh,dI),e(dI,_mo),e(xh,umo),e(Y,bmo),e(Y,$h),e($h,zne),e(zne,vmo),e($h,Fmo),e($h,cI),e(cI,Tmo),e($h,Mmo),e(Y,Emo),e(Y,kh),e(kh,Wne),e(Wne,Cmo),e(kh,wmo),e(kh,fI),e(fI,Amo),e(kh,ymo),e(Y,Lmo),e(Y,Sh),e(Sh,Qne),e(Qne,xmo),e(Sh,$mo),e(Sh,mI),e(mI,kmo),e(Sh,Smo),e(Y,Rmo),e(Y,Rh),e(Rh,Hne),e(Hne,Pmo),e(Rh,Bmo),e(Rh,gI),e(gI,Imo),e(Rh,Nmo),e(Y,qmo),e(Y,Ph),e(Ph,Une),e(Une,jmo),e(Ph,Dmo),e(Ph,hI),e(hI,Gmo),e(Ph,Omo),e(Y,Vmo),e(Y,Bh),e(Bh,Jne),e(Jne,Xmo),e(Bh,zmo),e(Bh,pI),e(pI,Wmo),e(Bh,Qmo),e(Y,Hmo),e(Y,Ih),e(Ih,Yne),e(Yne,Umo),e(Ih,Jmo),e(Ih,_I),e(_I,Ymo),e(Ih,Kmo),e(Y,Zmo),e(Y,Nh),e(Nh,Kne),e(Kne,ego),e(Nh,ogo),e(Nh,uI),e(uI,rgo),e(Nh,tgo),e(Y,ago),e(Y,qh),e(qh,Zne),e(Zne,ngo),e(qh,sgo),e(qh,bI),e(bI,lgo),e(qh,igo),e(He,dgo),M(jh,He,null),e(He,cgo),M(Dh,He,null),e(Ao,fgo),e(Ao,Gh),M(YA,Gh,null),e(Gh,mgo),e(Gh,ese),e(ese,ggo),b(f,xqe,u),b(f,Ci,u),e(Ci,Oh),e(Oh,ose),M(KA,ose,null),e(Ci,hgo),e(Ci,rse),e(rse,pgo),b(f,$qe,u),b(f,yo,u),M(ZA,yo,null),e(yo,_go),e(yo,ey),e(ey,ugo),e(ey,vI),e(vI,bgo),e(ey,vgo),e(yo,Fgo),e(yo,oy),e(oy,Tgo),e(oy,tse),e(tse,Mgo),e(oy,Ego),e(yo,Cgo),e(yo,Ue),M(ry,Ue,null),e(Ue,wgo),e(Ue,ase),e(ase,Ago),e(Ue,ygo),e(Ue,wi),e(wi,Lgo),e(wi,nse),e(nse,xgo),e(wi,$go),e(wi,sse),e(sse,kgo),e(wi,Sgo),e(Ue,Rgo),e(Ue,he),e(he,Vh),e(Vh,lse),e(lse,Pgo),e(Vh,Bgo),e(Vh,FI),e(FI,Igo),e(Vh,Ngo),e(he,qgo),e(he,Xh),e(Xh,ise),e(ise,jgo),e(Xh,Dgo),e(Xh,dse),e(dse,Ggo),e(Xh,Ogo),e(he,Vgo),e(he,zh),e(zh,cse),e(cse,Xgo),e(zh,zgo),e(zh,TI),e(TI,Wgo),e(zh,Qgo),e(he,Hgo),e(he,Wh),e(Wh,fse),e(fse,Ugo),e(Wh,Jgo),e(Wh,MI),e(MI,Ygo),e(Wh,Kgo),e(he,Zgo),e(he,Qh),e(Qh,mse),e(mse,eho),e(Qh,oho),e(Qh,EI),e(EI,rho),e(Qh,tho),e(he,aho),e(he,Hh),e(Hh,gse),e(gse,nho),e(Hh,sho),e(Hh,CI),e(CI,lho),e(Hh,iho),e(he,dho),e(he,Uh),e(Uh,hse),e(hse,cho),e(Uh,fho),e(Uh,wI),e(wI,mho),e(Uh,gho),e(he,hho),e(he,Jh),e(Jh,pse),e(pse,pho),e(Jh,_ho),e(Jh,AI),e(AI,uho),e(Jh,bho),e(he,vho),e(he,Yh),e(Yh,_se),e(_se,Fho),e(Yh,Tho),e(Yh,yI),e(yI,Mho),e(Yh,Eho),e(he,Cho),e(he,Kh),e(Kh,use),e(use,who),e(Kh,Aho),e(Kh,LI),e(LI,yho),e(Kh,Lho),e(he,xho),e(he,Zh),e(Zh,bse),e(bse,$ho),e(Zh,kho),e(Zh,xI),e(xI,Sho),e(Zh,Rho),e(he,Pho),e(he,ep),e(ep,vse),e(vse,Bho),e(ep,Iho),e(ep,$I),e($I,Nho),e(ep,qho),e(he,jho),e(he,op),e(op,Fse),e(Fse,Dho),e(op,Gho),e(op,kI),e(kI,Oho),e(op,Vho),e(he,Xho),e(he,rp),e(rp,Tse),e(Tse,zho),e(rp,Who),e(rp,SI),e(SI,Qho),e(rp,Hho),e(he,Uho),e(he,tp),e(tp,Mse),e(Mse,Jho),e(tp,Yho),e(tp,RI),e(RI,Kho),e(tp,Zho),e(he,epo),e(he,ap),e(ap,Ese),e(Ese,opo),e(ap,rpo),e(ap,PI),e(PI,tpo),e(ap,apo),e(he,npo),e(he,np),e(np,Cse),e(Cse,spo),e(np,lpo),e(np,BI),e(BI,ipo),e(np,dpo),e(Ue,cpo),M(sp,Ue,null),e(Ue,fpo),M(lp,Ue,null),e(yo,mpo),e(yo,ip),M(ty,ip,null),e(ip,gpo),e(ip,wse),e(wse,hpo),b(f,kqe,u),b(f,Ai,u),e(Ai,dp),e(dp,Ase),M(ay,Ase,null),e(Ai,ppo),e(Ai,yse),e(yse,_po),b(f,Sqe,u),b(f,Lo,u),M(ny,Lo,null),e(Lo,upo),e(Lo,yi),e(yi,bpo),e(yi,II),e(II,vpo),e(yi,Fpo),e(yi,NI),e(NI,Tpo),e(yi,Mpo),e(Lo,Epo),e(Lo,sy),e(sy,Cpo),e(sy,Lse),e(Lse,wpo),e(sy,Apo),e(Lo,ypo),e(Lo,at),M(ly,at,null),e(at,Lpo),e(at,xse),e(xse,xpo),e(at,$po),e(at,Li),e(Li,kpo),e(Li,$se),e($se,Spo),e(Li,Rpo),e(Li,qI),e(qI,Ppo),e(Li,Bpo),e(at,Ipo),M(cp,at,null),e(Lo,Npo),e(Lo,Je),M(iy,Je,null),e(Je,qpo),e(Je,kse),e(kse,jpo),e(Je,Dpo),e(Je,xa),e(xa,Gpo),e(xa,Sse),e(Sse,Opo),e(xa,Vpo),e(xa,Rse),e(Rse,Xpo),e(xa,zpo),e(xa,Pse),e(Pse,Wpo),e(xa,Qpo),e(Je,Hpo),e(Je,x),e(x,fp),e(fp,Bse),e(Bse,Upo),e(fp,Jpo),e(fp,jI),e(jI,Ypo),e(fp,Kpo),e(x,Zpo),e(x,mp),e(mp,Ise),e(Ise,e_o),e(mp,o_o),e(mp,DI),e(DI,r_o),e(mp,t_o),e(x,a_o),e(x,gp),e(gp,Nse),e(Nse,n_o),e(gp,s_o),e(gp,GI),e(GI,l_o),e(gp,i_o),e(x,d_o),e(x,hp),e(hp,qse),e(qse,c_o),e(hp,f_o),e(hp,OI),e(OI,m_o),e(hp,g_o),e(x,h_o),e(x,pp),e(pp,jse),e(jse,p_o),e(pp,__o),e(pp,VI),e(VI,u_o),e(pp,b_o),e(x,v_o),e(x,_p),e(_p,Dse),e(Dse,F_o),e(_p,T_o),e(_p,XI),e(XI,M_o),e(_p,E_o),e(x,C_o),e(x,up),e(up,Gse),e(Gse,w_o),e(up,A_o),e(up,zI),e(zI,y_o),e(up,L_o),e(x,x_o),e(x,bp),e(bp,Ose),e(Ose,$_o),e(bp,k_o),e(bp,WI),e(WI,S_o),e(bp,R_o),e(x,P_o),e(x,vp),e(vp,Vse),e(Vse,B_o),e(vp,I_o),e(vp,QI),e(QI,N_o),e(vp,q_o),e(x,j_o),e(x,Fp),e(Fp,Xse),e(Xse,D_o),e(Fp,G_o),e(Fp,HI),e(HI,O_o),e(Fp,V_o),e(x,X_o),e(x,Tp),e(Tp,zse),e(zse,z_o),e(Tp,W_o),e(Tp,UI),e(UI,Q_o),e(Tp,H_o),e(x,U_o),e(x,Mp),e(Mp,Wse),e(Wse,J_o),e(Mp,Y_o),e(Mp,JI),e(JI,K_o),e(Mp,Z_o),e(x,euo),e(x,Ep),e(Ep,Qse),e(Qse,ouo),e(Ep,ruo),e(Ep,YI),e(YI,tuo),e(Ep,auo),e(x,nuo),e(x,Cp),e(Cp,Hse),e(Hse,suo),e(Cp,luo),e(Cp,KI),e(KI,iuo),e(Cp,duo),e(x,cuo),e(x,wp),e(wp,Use),e(Use,fuo),e(wp,muo),e(wp,ZI),e(ZI,guo),e(wp,huo),e(x,puo),e(x,Ap),e(Ap,Jse),e(Jse,_uo),e(Ap,uuo),e(Ap,eN),e(eN,buo),e(Ap,vuo),e(x,Fuo),e(x,yp),e(yp,Yse),e(Yse,Tuo),e(yp,Muo),e(yp,oN),e(oN,Euo),e(yp,Cuo),e(x,wuo),e(x,Lp),e(Lp,Kse),e(Kse,Auo),e(Lp,yuo),e(Lp,rN),e(rN,Luo),e(Lp,xuo),e(x,$uo),e(x,xp),e(xp,Zse),e(Zse,kuo),e(xp,Suo),e(xp,tN),e(tN,Ruo),e(xp,Puo),e(x,Buo),e(x,$p),e($p,ele),e(ele,Iuo),e($p,Nuo),e($p,aN),e(aN,quo),e($p,juo),e(x,Duo),e(x,kp),e(kp,ole),e(ole,Guo),e(kp,Ouo),e(kp,nN),e(nN,Vuo),e(kp,Xuo),e(x,zuo),e(x,Sp),e(Sp,rle),e(rle,Wuo),e(Sp,Quo),e(Sp,sN),e(sN,Huo),e(Sp,Uuo),e(x,Juo),e(x,Rp),e(Rp,tle),e(tle,Yuo),e(Rp,Kuo),e(Rp,lN),e(lN,Zuo),e(Rp,e1o),e(x,o1o),e(x,Pp),e(Pp,ale),e(ale,r1o),e(Pp,t1o),e(Pp,iN),e(iN,a1o),e(Pp,n1o),e(x,s1o),e(x,Bp),e(Bp,nle),e(nle,l1o),e(Bp,i1o),e(Bp,dN),e(dN,d1o),e(Bp,c1o),e(x,f1o),e(x,Ip),e(Ip,sle),e(sle,m1o),e(Ip,g1o),e(Ip,cN),e(cN,h1o),e(Ip,p1o),e(x,_1o),e(x,Np),e(Np,lle),e(lle,u1o),e(Np,b1o),e(Np,fN),e(fN,v1o),e(Np,F1o),e(x,T1o),e(x,qp),e(qp,ile),e(ile,M1o),e(qp,E1o),e(qp,mN),e(mN,C1o),e(qp,w1o),e(x,A1o),e(x,jp),e(jp,dle),e(dle,y1o),e(jp,L1o),e(jp,gN),e(gN,x1o),e(jp,$1o),e(x,k1o),e(x,Dp),e(Dp,cle),e(cle,S1o),e(Dp,R1o),e(Dp,hN),e(hN,P1o),e(Dp,B1o),e(x,I1o),e(x,Gp),e(Gp,fle),e(fle,N1o),e(Gp,q1o),e(Gp,pN),e(pN,j1o),e(Gp,D1o),e(x,G1o),e(x,Op),e(Op,mle),e(mle,O1o),e(Op,V1o),e(Op,_N),e(_N,X1o),e(Op,z1o),e(x,W1o),e(x,Ps),e(Ps,gle),e(gle,Q1o),e(Ps,H1o),e(Ps,uN),e(uN,U1o),e(Ps,J1o),e(Ps,bN),e(bN,Y1o),e(Ps,K1o),e(x,Z1o),e(x,Vp),e(Vp,hle),e(hle,ebo),e(Vp,obo),e(Vp,vN),e(vN,rbo),e(Vp,tbo),e(x,abo),e(x,Xp),e(Xp,ple),e(ple,nbo),e(Xp,sbo),e(Xp,FN),e(FN,lbo),e(Xp,ibo),e(x,dbo),e(x,zp),e(zp,_le),e(_le,cbo),e(zp,fbo),e(zp,TN),e(TN,mbo),e(zp,gbo),e(x,hbo),e(x,Wp),e(Wp,ule),e(ule,pbo),e(Wp,_bo),e(Wp,MN),e(MN,ubo),e(Wp,bbo),e(x,vbo),e(x,Qp),e(Qp,ble),e(ble,Fbo),e(Qp,Tbo),e(Qp,EN),e(EN,Mbo),e(Qp,Ebo),e(x,Cbo),e(x,Hp),e(Hp,vle),e(vle,wbo),e(Hp,Abo),e(Hp,CN),e(CN,ybo),e(Hp,Lbo),e(x,xbo),e(x,Up),e(Up,Fle),e(Fle,$bo),e(Up,kbo),e(Up,wN),e(wN,Sbo),e(Up,Rbo),e(x,Pbo),e(x,Jp),e(Jp,Tle),e(Tle,Bbo),e(Jp,Ibo),e(Jp,AN),e(AN,Nbo),e(Jp,qbo),e(x,jbo),e(x,Yp),e(Yp,Mle),e(Mle,Dbo),e(Yp,Gbo),e(Yp,yN),e(yN,Obo),e(Yp,Vbo),e(x,Xbo),e(x,Kp),e(Kp,Ele),e(Ele,zbo),e(Kp,Wbo),e(Kp,LN),e(LN,Qbo),e(Kp,Hbo),e(x,Ubo),e(x,Zp),e(Zp,Cle),e(Cle,Jbo),e(Zp,Ybo),e(Zp,xN),e(xN,Kbo),e(Zp,Zbo),e(x,e2o),e(x,e_),e(e_,wle),e(wle,o2o),e(e_,r2o),e(e_,$N),e($N,t2o),e(e_,a2o),e(x,n2o),e(x,o_),e(o_,Ale),e(Ale,s2o),e(o_,l2o),e(o_,kN),e(kN,i2o),e(o_,d2o),e(x,c2o),e(x,r_),e(r_,yle),e(yle,f2o),e(r_,m2o),e(r_,SN),e(SN,g2o),e(r_,h2o),e(x,p2o),e(x,t_),e(t_,Lle),e(Lle,_2o),e(t_,u2o),e(t_,RN),e(RN,b2o),e(t_,v2o),e(x,F2o),e(x,a_),e(a_,xle),e(xle,T2o),e(a_,M2o),e(a_,PN),e(PN,E2o),e(a_,C2o),e(x,w2o),e(x,n_),e(n_,$le),e($le,A2o),e(n_,y2o),e(n_,BN),e(BN,L2o),e(n_,x2o),e(x,$2o),e(x,s_),e(s_,kle),e(kle,k2o),e(s_,S2o),e(s_,IN),e(IN,R2o),e(s_,P2o),e(x,B2o),e(x,l_),e(l_,Sle),e(Sle,I2o),e(l_,N2o),e(l_,NN),e(NN,q2o),e(l_,j2o),e(x,D2o),e(x,i_),e(i_,Rle),e(Rle,G2o),e(i_,O2o),e(i_,qN),e(qN,V2o),e(i_,X2o),e(x,z2o),e(x,d_),e(d_,Ple),e(Ple,W2o),e(d_,Q2o),e(d_,jN),e(jN,H2o),e(d_,U2o),e(x,J2o),e(x,c_),e(c_,Ble),e(Ble,Y2o),e(c_,K2o),e(c_,DN),e(DN,Z2o),e(c_,e4o),e(x,o4o),e(x,f_),e(f_,Ile),e(Ile,r4o),e(f_,t4o),e(f_,GN),e(GN,a4o),e(f_,n4o),e(x,s4o),e(x,m_),e(m_,Nle),e(Nle,l4o),e(m_,i4o),e(m_,ON),e(ON,d4o),e(m_,c4o),e(x,f4o),e(x,g_),e(g_,qle),e(qle,m4o),e(g_,g4o),e(g_,VN),e(VN,h4o),e(g_,p4o),e(x,_4o),e(x,h_),e(h_,jle),e(jle,u4o),e(h_,b4o),e(h_,XN),e(XN,v4o),e(h_,F4o),e(x,T4o),e(x,p_),e(p_,Dle),e(Dle,M4o),e(p_,E4o),e(p_,zN),e(zN,C4o),e(p_,w4o),e(x,A4o),e(x,__),e(__,Gle),e(Gle,y4o),e(__,L4o),e(__,WN),e(WN,x4o),e(__,$4o),e(x,k4o),e(x,u_),e(u_,Ole),e(Ole,S4o),e(u_,R4o),e(u_,QN),e(QN,P4o),e(u_,B4o),e(x,I4o),e(x,b_),e(b_,Vle),e(Vle,N4o),e(b_,q4o),e(b_,HN),e(HN,j4o),e(b_,D4o),e(x,G4o),e(x,v_),e(v_,Xle),e(Xle,O4o),e(v_,V4o),e(v_,UN),e(UN,X4o),e(v_,z4o),e(x,W4o),e(x,F_),e(F_,zle),e(zle,Q4o),e(F_,H4o),e(F_,JN),e(JN,U4o),e(F_,J4o),e(x,Y4o),e(x,T_),e(T_,Wle),e(Wle,K4o),e(T_,Z4o),e(T_,YN),e(YN,evo),e(T_,ovo),e(x,rvo),e(x,M_),e(M_,Qle),e(Qle,tvo),e(M_,avo),e(M_,KN),e(KN,nvo),e(M_,svo),e(x,lvo),e(x,E_),e(E_,Hle),e(Hle,ivo),e(E_,dvo),e(E_,ZN),e(ZN,cvo),e(E_,fvo),e(x,mvo),e(x,C_),e(C_,Ule),e(Ule,gvo),e(C_,hvo),e(C_,eq),e(eq,pvo),e(C_,_vo),e(x,uvo),e(x,w_),e(w_,Jle),e(Jle,bvo),e(w_,vvo),e(w_,oq),e(oq,Fvo),e(w_,Tvo),e(x,Mvo),e(x,A_),e(A_,Yle),e(Yle,Evo),e(A_,Cvo),e(A_,rq),e(rq,wvo),e(A_,Avo),e(x,yvo),e(x,y_),e(y_,Kle),e(Kle,Lvo),e(y_,xvo),e(y_,tq),e(tq,$vo),e(y_,kvo),e(x,Svo),e(x,L_),e(L_,Zle),e(Zle,Rvo),e(L_,Pvo),e(L_,aq),e(aq,Bvo),e(L_,Ivo),e(x,Nvo),e(x,x_),e(x_,eie),e(eie,qvo),e(x_,jvo),e(x_,nq),e(nq,Dvo),e(x_,Gvo),e(x,Ovo),e(x,$_),e($_,oie),e(oie,Vvo),e($_,Xvo),e($_,sq),e(sq,zvo),e($_,Wvo),e(x,Qvo),e(x,k_),e(k_,rie),e(rie,Hvo),e(k_,Uvo),e(k_,lq),e(lq,Jvo),e(k_,Yvo),e(x,Kvo),e(x,S_),e(S_,tie),e(tie,Zvo),e(S_,e5o),e(S_,iq),e(iq,o5o),e(S_,r5o),e(x,t5o),e(x,R_),e(R_,aie),e(aie,a5o),e(R_,n5o),e(R_,dq),e(dq,s5o),e(R_,l5o),e(x,i5o),e(x,P_),e(P_,nie),e(nie,d5o),e(P_,c5o),e(P_,cq),e(cq,f5o),e(P_,m5o),e(x,g5o),e(x,B_),e(B_,sie),e(sie,h5o),e(B_,p5o),e(B_,fq),e(fq,_5o),e(B_,u5o),e(x,b5o),e(x,I_),e(I_,lie),e(lie,v5o),e(I_,F5o),e(I_,mq),e(mq,T5o),e(I_,M5o),e(x,E5o),e(x,N_),e(N_,iie),e(iie,C5o),e(N_,w5o),e(N_,gq),e(gq,A5o),e(N_,y5o),e(x,L5o),e(x,q_),e(q_,die),e(die,x5o),e(q_,$5o),e(q_,hq),e(hq,k5o),e(q_,S5o),e(x,R5o),e(x,j_),e(j_,cie),e(cie,P5o),e(j_,B5o),e(j_,pq),e(pq,I5o),e(j_,N5o),e(x,q5o),e(x,D_),e(D_,fie),e(fie,j5o),e(D_,D5o),e(D_,_q),e(_q,G5o),e(D_,O5o),e(x,V5o),e(x,G_),e(G_,mie),e(mie,X5o),e(G_,z5o),e(G_,uq),e(uq,W5o),e(G_,Q5o),e(x,H5o),e(x,O_),e(O_,gie),e(gie,U5o),e(O_,J5o),e(O_,bq),e(bq,Y5o),e(O_,K5o),e(x,Z5o),e(x,V_),e(V_,hie),e(hie,e3o),e(V_,o3o),e(V_,vq),e(vq,r3o),e(V_,t3o),e(x,a3o),e(x,X_),e(X_,pie),e(pie,n3o),e(X_,s3o),e(X_,Fq),e(Fq,l3o),e(X_,i3o),e(x,d3o),e(x,z_),e(z_,_ie),e(_ie,c3o),e(z_,f3o),e(z_,Tq),e(Tq,m3o),e(z_,g3o),e(x,h3o),e(x,W_),e(W_,uie),e(uie,p3o),e(W_,_3o),e(W_,Mq),e(Mq,u3o),e(W_,b3o),e(x,v3o),e(x,Q_),e(Q_,bie),e(bie,F3o),e(Q_,T3o),e(Q_,Eq),e(Eq,M3o),e(Q_,E3o),e(x,C3o),e(x,H_),e(H_,vie),e(vie,w3o),e(H_,A3o),e(H_,Cq),e(Cq,y3o),e(H_,L3o),e(x,x3o),e(x,U_),e(U_,Fie),e(Fie,$3o),e(U_,k3o),e(U_,wq),e(wq,S3o),e(U_,R3o),e(x,P3o),e(x,J_),e(J_,Tie),e(Tie,B3o),e(J_,I3o),e(J_,Aq),e(Aq,N3o),e(J_,q3o),e(x,j3o),e(x,Y_),e(Y_,Mie),e(Mie,D3o),e(Y_,G3o),e(Y_,yq),e(yq,O3o),e(Y_,V3o),e(x,X3o),e(x,K_),e(K_,Eie),e(Eie,z3o),e(K_,W3o),e(K_,Lq),e(Lq,Q3o),e(K_,H3o),e(x,U3o),e(x,Z_),e(Z_,Cie),e(Cie,J3o),e(Z_,Y3o),e(Z_,xq),e(xq,K3o),e(Z_,Z3o),e(x,eFo),e(x,eu),e(eu,wie),e(wie,oFo),e(eu,rFo),e(eu,$q),e($q,tFo),e(eu,aFo),e(x,nFo),e(x,ou),e(ou,Aie),e(Aie,sFo),e(ou,lFo),e(ou,kq),e(kq,iFo),e(ou,dFo),e(x,cFo),e(x,ru),e(ru,yie),e(yie,fFo),e(ru,mFo),e(ru,Sq),e(Sq,gFo),e(ru,hFo),e(x,pFo),e(x,tu),e(tu,Lie),e(Lie,_Fo),e(tu,uFo),e(tu,Rq),e(Rq,bFo),e(tu,vFo),e(x,FFo),e(x,au),e(au,xie),e(xie,TFo),e(au,MFo),e(au,Pq),e(Pq,EFo),e(au,CFo),e(Je,wFo),e(Je,nu),e(nu,AFo),e(nu,$ie),e($ie,yFo),e(nu,LFo),e(nu,kie),e(kie,xFo),e(Je,$Fo),M(su,Je,null),b(f,Rqe,u),b(f,xi,u),e(xi,lu),e(lu,Sie),M(dy,Sie,null),e(xi,kFo),e(xi,Rie),e(Rie,SFo),b(f,Pqe,u),b(f,xo,u),M(cy,xo,null),e(xo,RFo),e(xo,$i),e($i,PFo),e($i,Bq),e(Bq,BFo),e($i,IFo),e($i,Iq),e(Iq,NFo),e($i,qFo),e(xo,jFo),e(xo,fy),e(fy,DFo),e(fy,Pie),e(Pie,GFo),e(fy,OFo),e(xo,VFo),e(xo,nt),M(my,nt,null),e(nt,XFo),e(nt,Bie),e(Bie,zFo),e(nt,WFo),e(nt,ki),e(ki,QFo),e(ki,Iie),e(Iie,HFo),e(ki,UFo),e(ki,Nq),e(Nq,JFo),e(ki,YFo),e(nt,KFo),M(iu,nt,null),e(xo,ZFo),e(xo,Ye),M(gy,Ye,null),e(Ye,eTo),e(Ye,Nie),e(Nie,oTo),e(Ye,rTo),e(Ye,$a),e($a,tTo),e($a,qie),e(qie,aTo),e($a,nTo),e($a,jie),e(jie,sTo),e($a,lTo),e($a,Die),e(Die,iTo),e($a,dTo),e(Ye,cTo),e(Ye,G),e(G,du),e(du,Gie),e(Gie,fTo),e(du,mTo),e(du,qq),e(qq,gTo),e(du,hTo),e(G,pTo),e(G,cu),e(cu,Oie),e(Oie,_To),e(cu,uTo),e(cu,jq),e(jq,bTo),e(cu,vTo),e(G,FTo),e(G,fu),e(fu,Vie),e(Vie,TTo),e(fu,MTo),e(fu,Dq),e(Dq,ETo),e(fu,CTo),e(G,wTo),e(G,mu),e(mu,Xie),e(Xie,ATo),e(mu,yTo),e(mu,Gq),e(Gq,LTo),e(mu,xTo),e(G,$To),e(G,gu),e(gu,zie),e(zie,kTo),e(gu,STo),e(gu,Oq),e(Oq,RTo),e(gu,PTo),e(G,BTo),e(G,hu),e(hu,Wie),e(Wie,ITo),e(hu,NTo),e(hu,Vq),e(Vq,qTo),e(hu,jTo),e(G,DTo),e(G,pu),e(pu,Qie),e(Qie,GTo),e(pu,OTo),e(pu,Xq),e(Xq,VTo),e(pu,XTo),e(G,zTo),e(G,_u),e(_u,Hie),e(Hie,WTo),e(_u,QTo),e(_u,zq),e(zq,HTo),e(_u,UTo),e(G,JTo),e(G,uu),e(uu,Uie),e(Uie,YTo),e(uu,KTo),e(uu,Wq),e(Wq,ZTo),e(uu,e7o),e(G,o7o),e(G,bu),e(bu,Jie),e(Jie,r7o),e(bu,t7o),e(bu,Qq),e(Qq,a7o),e(bu,n7o),e(G,s7o),e(G,vu),e(vu,Yie),e(Yie,l7o),e(vu,i7o),e(vu,Hq),e(Hq,d7o),e(vu,c7o),e(G,f7o),e(G,Fu),e(Fu,Kie),e(Kie,m7o),e(Fu,g7o),e(Fu,Uq),e(Uq,h7o),e(Fu,p7o),e(G,_7o),e(G,Tu),e(Tu,Zie),e(Zie,u7o),e(Tu,b7o),e(Tu,Jq),e(Jq,v7o),e(Tu,F7o),e(G,T7o),e(G,Mu),e(Mu,ede),e(ede,M7o),e(Mu,E7o),e(Mu,Yq),e(Yq,C7o),e(Mu,w7o),e(G,A7o),e(G,Eu),e(Eu,ode),e(ode,y7o),e(Eu,L7o),e(Eu,Kq),e(Kq,x7o),e(Eu,$7o),e(G,k7o),e(G,Cu),e(Cu,rde),e(rde,S7o),e(Cu,R7o),e(Cu,Zq),e(Zq,P7o),e(Cu,B7o),e(G,I7o),e(G,wu),e(wu,tde),e(tde,N7o),e(wu,q7o),e(wu,ej),e(ej,j7o),e(wu,D7o),e(G,G7o),e(G,Au),e(Au,ade),e(ade,O7o),e(Au,V7o),e(Au,oj),e(oj,X7o),e(Au,z7o),e(G,W7o),e(G,yu),e(yu,nde),e(nde,Q7o),e(yu,H7o),e(yu,rj),e(rj,U7o),e(yu,J7o),e(G,Y7o),e(G,Lu),e(Lu,sde),e(sde,K7o),e(Lu,Z7o),e(Lu,tj),e(tj,eMo),e(Lu,oMo),e(G,rMo),e(G,xu),e(xu,lde),e(lde,tMo),e(xu,aMo),e(xu,aj),e(aj,nMo),e(xu,sMo),e(G,lMo),e(G,$u),e($u,ide),e(ide,iMo),e($u,dMo),e($u,nj),e(nj,cMo),e($u,fMo),e(G,mMo),e(G,ku),e(ku,dde),e(dde,gMo),e(ku,hMo),e(ku,sj),e(sj,pMo),e(ku,_Mo),e(G,uMo),e(G,Su),e(Su,cde),e(cde,bMo),e(Su,vMo),e(Su,lj),e(lj,FMo),e(Su,TMo),e(G,MMo),e(G,Ru),e(Ru,fde),e(fde,EMo),e(Ru,CMo),e(Ru,ij),e(ij,wMo),e(Ru,AMo),e(G,yMo),e(G,Pu),e(Pu,mde),e(mde,LMo),e(Pu,xMo),e(Pu,dj),e(dj,$Mo),e(Pu,kMo),e(G,SMo),e(G,Bu),e(Bu,gde),e(gde,RMo),e(Bu,PMo),e(Bu,cj),e(cj,BMo),e(Bu,IMo),e(G,NMo),e(G,Iu),e(Iu,hde),e(hde,qMo),e(Iu,jMo),e(Iu,fj),e(fj,DMo),e(Iu,GMo),e(G,OMo),e(G,Nu),e(Nu,pde),e(pde,VMo),e(Nu,XMo),e(Nu,mj),e(mj,zMo),e(Nu,WMo),e(G,QMo),e(G,qu),e(qu,_de),e(_de,HMo),e(qu,UMo),e(qu,gj),e(gj,JMo),e(qu,YMo),e(G,KMo),e(G,ju),e(ju,ude),e(ude,ZMo),e(ju,eEo),e(ju,hj),e(hj,oEo),e(ju,rEo),e(G,tEo),e(G,Du),e(Du,bde),e(bde,aEo),e(Du,nEo),e(Du,pj),e(pj,sEo),e(Du,lEo),e(G,iEo),e(G,Gu),e(Gu,vde),e(vde,dEo),e(Gu,cEo),e(Gu,_j),e(_j,fEo),e(Gu,mEo),e(G,gEo),e(G,Ou),e(Ou,Fde),e(Fde,hEo),e(Ou,pEo),e(Ou,uj),e(uj,_Eo),e(Ou,uEo),e(G,bEo),e(G,Vu),e(Vu,Tde),e(Tde,vEo),e(Vu,FEo),e(Vu,bj),e(bj,TEo),e(Vu,MEo),e(G,EEo),e(G,Xu),e(Xu,Mde),e(Mde,CEo),e(Xu,wEo),e(Xu,vj),e(vj,AEo),e(Xu,yEo),e(G,LEo),e(G,zu),e(zu,Ede),e(Ede,xEo),e(zu,$Eo),e(zu,Fj),e(Fj,kEo),e(zu,SEo),e(G,REo),e(G,Wu),e(Wu,Cde),e(Cde,PEo),e(Wu,BEo),e(Wu,Tj),e(Tj,IEo),e(Wu,NEo),e(G,qEo),e(G,Qu),e(Qu,wde),e(wde,jEo),e(Qu,DEo),e(Qu,Mj),e(Mj,GEo),e(Qu,OEo),e(G,VEo),e(G,Hu),e(Hu,Ade),e(Ade,XEo),e(Hu,zEo),e(Hu,Ej),e(Ej,WEo),e(Hu,QEo),e(G,HEo),e(G,Uu),e(Uu,yde),e(yde,UEo),e(Uu,JEo),e(Uu,Cj),e(Cj,YEo),e(Uu,KEo),e(G,ZEo),e(G,Ju),e(Ju,Lde),e(Lde,eCo),e(Ju,oCo),e(Ju,wj),e(wj,rCo),e(Ju,tCo),e(Ye,aCo),e(Ye,Yu),e(Yu,nCo),e(Yu,xde),e(xde,sCo),e(Yu,lCo),e(Yu,$de),e($de,iCo),e(Ye,dCo),M(Ku,Ye,null),b(f,Bqe,u),b(f,Si,u),e(Si,Zu),e(Zu,kde),M(hy,kde,null),e(Si,cCo),e(Si,Sde),e(Sde,fCo),b(f,Iqe,u),b(f,$o,u),M(py,$o,null),e($o,mCo),e($o,Ri),e(Ri,gCo),e(Ri,Aj),e(Aj,hCo),e(Ri,pCo),e(Ri,yj),e(yj,_Co),e(Ri,uCo),e($o,bCo),e($o,_y),e(_y,vCo),e(_y,Rde),e(Rde,FCo),e(_y,TCo),e($o,MCo),e($o,st),M(uy,st,null),e(st,ECo),e(st,Pde),e(Pde,CCo),e(st,wCo),e(st,Pi),e(Pi,ACo),e(Pi,Bde),e(Bde,yCo),e(Pi,LCo),e(Pi,Lj),e(Lj,xCo),e(Pi,$Co),e(st,kCo),M(e1,st,null),e($o,SCo),e($o,Ke),M(by,Ke,null),e(Ke,RCo),e(Ke,Ide),e(Ide,PCo),e(Ke,BCo),e(Ke,ka),e(ka,ICo),e(ka,Nde),e(Nde,NCo),e(ka,qCo),e(ka,qde),e(qde,jCo),e(ka,DCo),e(ka,jde),e(jde,GCo),e(ka,OCo),e(Ke,VCo),e(Ke,z),e(z,o1),e(o1,Dde),e(Dde,XCo),e(o1,zCo),e(o1,xj),e(xj,WCo),e(o1,QCo),e(z,HCo),e(z,r1),e(r1,Gde),e(Gde,UCo),e(r1,JCo),e(r1,$j),e($j,YCo),e(r1,KCo),e(z,ZCo),e(z,t1),e(t1,Ode),e(Ode,ewo),e(t1,owo),e(t1,kj),e(kj,rwo),e(t1,two),e(z,awo),e(z,a1),e(a1,Vde),e(Vde,nwo),e(a1,swo),e(a1,Sj),e(Sj,lwo),e(a1,iwo),e(z,dwo),e(z,n1),e(n1,Xde),e(Xde,cwo),e(n1,fwo),e(n1,Rj),e(Rj,mwo),e(n1,gwo),e(z,hwo),e(z,s1),e(s1,zde),e(zde,pwo),e(s1,_wo),e(s1,Pj),e(Pj,uwo),e(s1,bwo),e(z,vwo),e(z,l1),e(l1,Wde),e(Wde,Fwo),e(l1,Two),e(l1,Bj),e(Bj,Mwo),e(l1,Ewo),e(z,Cwo),e(z,i1),e(i1,Qde),e(Qde,wwo),e(i1,Awo),e(i1,Ij),e(Ij,ywo),e(i1,Lwo),e(z,xwo),e(z,d1),e(d1,Hde),e(Hde,$wo),e(d1,kwo),e(d1,Nj),e(Nj,Swo),e(d1,Rwo),e(z,Pwo),e(z,c1),e(c1,Ude),e(Ude,Bwo),e(c1,Iwo),e(c1,qj),e(qj,Nwo),e(c1,qwo),e(z,jwo),e(z,f1),e(f1,Jde),e(Jde,Dwo),e(f1,Gwo),e(f1,jj),e(jj,Owo),e(f1,Vwo),e(z,Xwo),e(z,m1),e(m1,Yde),e(Yde,zwo),e(m1,Wwo),e(m1,Dj),e(Dj,Qwo),e(m1,Hwo),e(z,Uwo),e(z,g1),e(g1,Kde),e(Kde,Jwo),e(g1,Ywo),e(g1,Gj),e(Gj,Kwo),e(g1,Zwo),e(z,e0o),e(z,h1),e(h1,Zde),e(Zde,o0o),e(h1,r0o),e(h1,Oj),e(Oj,t0o),e(h1,a0o),e(z,n0o),e(z,p1),e(p1,ece),e(ece,s0o),e(p1,l0o),e(p1,Vj),e(Vj,i0o),e(p1,d0o),e(z,c0o),e(z,_1),e(_1,oce),e(oce,f0o),e(_1,m0o),e(_1,Xj),e(Xj,g0o),e(_1,h0o),e(z,p0o),e(z,u1),e(u1,rce),e(rce,_0o),e(u1,u0o),e(u1,zj),e(zj,b0o),e(u1,v0o),e(z,F0o),e(z,b1),e(b1,tce),e(tce,T0o),e(b1,M0o),e(b1,Wj),e(Wj,E0o),e(b1,C0o),e(z,w0o),e(z,v1),e(v1,ace),e(ace,A0o),e(v1,y0o),e(v1,Qj),e(Qj,L0o),e(v1,x0o),e(z,$0o),e(z,F1),e(F1,nce),e(nce,k0o),e(F1,S0o),e(F1,Hj),e(Hj,R0o),e(F1,P0o),e(z,B0o),e(z,T1),e(T1,sce),e(sce,I0o),e(T1,N0o),e(T1,Uj),e(Uj,q0o),e(T1,j0o),e(z,D0o),e(z,M1),e(M1,lce),e(lce,G0o),e(M1,O0o),e(M1,Jj),e(Jj,V0o),e(M1,X0o),e(z,z0o),e(z,E1),e(E1,ice),e(ice,W0o),e(E1,Q0o),e(E1,Yj),e(Yj,H0o),e(E1,U0o),e(z,J0o),e(z,C1),e(C1,dce),e(dce,Y0o),e(C1,K0o),e(C1,Kj),e(Kj,Z0o),e(C1,e6o),e(z,o6o),e(z,w1),e(w1,cce),e(cce,r6o),e(w1,t6o),e(w1,Zj),e(Zj,a6o),e(w1,n6o),e(z,s6o),e(z,A1),e(A1,fce),e(fce,l6o),e(A1,i6o),e(A1,eD),e(eD,d6o),e(A1,c6o),e(z,f6o),e(z,y1),e(y1,mce),e(mce,m6o),e(y1,g6o),e(y1,oD),e(oD,h6o),e(y1,p6o),e(z,_6o),e(z,L1),e(L1,gce),e(gce,u6o),e(L1,b6o),e(L1,rD),e(rD,v6o),e(L1,F6o),e(z,T6o),e(z,x1),e(x1,hce),e(hce,M6o),e(x1,E6o),e(x1,tD),e(tD,C6o),e(x1,w6o),e(z,A6o),e(z,$1),e($1,pce),e(pce,y6o),e($1,L6o),e($1,aD),e(aD,x6o),e($1,$6o),e(z,k6o),e(z,k1),e(k1,_ce),e(_ce,S6o),e(k1,R6o),e(k1,nD),e(nD,P6o),e(k1,B6o),e(z,I6o),e(z,S1),e(S1,uce),e(uce,N6o),e(S1,q6o),e(S1,sD),e(sD,j6o),e(S1,D6o),e(z,G6o),e(z,R1),e(R1,bce),e(bce,O6o),e(R1,V6o),e(R1,lD),e(lD,X6o),e(R1,z6o),e(z,W6o),e(z,P1),e(P1,vce),e(vce,Q6o),e(P1,H6o),e(P1,iD),e(iD,U6o),e(P1,J6o),e(z,Y6o),e(z,B1),e(B1,Fce),e(Fce,K6o),e(B1,Z6o),e(B1,dD),e(dD,eAo),e(B1,oAo),e(z,rAo),e(z,I1),e(I1,Tce),e(Tce,tAo),e(I1,aAo),e(I1,cD),e(cD,nAo),e(I1,sAo),e(z,lAo),e(z,N1),e(N1,Mce),e(Mce,iAo),e(N1,dAo),e(N1,fD),e(fD,cAo),e(N1,fAo),e(Ke,mAo),e(Ke,q1),e(q1,gAo),e(q1,Ece),e(Ece,hAo),e(q1,pAo),e(q1,Cce),e(Cce,_Ao),e(Ke,uAo),M(j1,Ke,null),b(f,Nqe,u),b(f,Bi,u),e(Bi,D1),e(D1,wce),M(vy,wce,null),e(Bi,bAo),e(Bi,Ace),e(Ace,vAo),b(f,qqe,u),b(f,ko,u),M(Fy,ko,null),e(ko,FAo),e(ko,Ii),e(Ii,TAo),e(Ii,mD),e(mD,MAo),e(Ii,EAo),e(Ii,gD),e(gD,CAo),e(Ii,wAo),e(ko,AAo),e(ko,Ty),e(Ty,yAo),e(Ty,yce),e(yce,LAo),e(Ty,xAo),e(ko,$Ao),e(ko,lt),M(My,lt,null),e(lt,kAo),e(lt,Lce),e(Lce,SAo),e(lt,RAo),e(lt,Ni),e(Ni,PAo),e(Ni,xce),e(xce,BAo),e(Ni,IAo),e(Ni,hD),e(hD,NAo),e(Ni,qAo),e(lt,jAo),M(G1,lt,null),e(ko,DAo),e(ko,Ze),M(Ey,Ze,null),e(Ze,GAo),e(Ze,$ce),e($ce,OAo),e(Ze,VAo),e(Ze,Sa),e(Sa,XAo),e(Sa,kce),e(kce,zAo),e(Sa,WAo),e(Sa,Sce),e(Sce,QAo),e(Sa,HAo),e(Sa,Rce),e(Rce,UAo),e(Sa,JAo),e(Ze,YAo),e(Ze,Q),e(Q,O1),e(O1,Pce),e(Pce,KAo),e(O1,ZAo),e(O1,pD),e(pD,eyo),e(O1,oyo),e(Q,ryo),e(Q,V1),e(V1,Bce),e(Bce,tyo),e(V1,ayo),e(V1,_D),e(_D,nyo),e(V1,syo),e(Q,lyo),e(Q,X1),e(X1,Ice),e(Ice,iyo),e(X1,dyo),e(X1,uD),e(uD,cyo),e(X1,fyo),e(Q,myo),e(Q,z1),e(z1,Nce),e(Nce,gyo),e(z1,hyo),e(z1,bD),e(bD,pyo),e(z1,_yo),e(Q,uyo),e(Q,W1),e(W1,qce),e(qce,byo),e(W1,vyo),e(W1,vD),e(vD,Fyo),e(W1,Tyo),e(Q,Myo),e(Q,Q1),e(Q1,jce),e(jce,Eyo),e(Q1,Cyo),e(Q1,FD),e(FD,wyo),e(Q1,Ayo),e(Q,yyo),e(Q,H1),e(H1,Dce),e(Dce,Lyo),e(H1,xyo),e(H1,TD),e(TD,$yo),e(H1,kyo),e(Q,Syo),e(Q,U1),e(U1,Gce),e(Gce,Ryo),e(U1,Pyo),e(U1,MD),e(MD,Byo),e(U1,Iyo),e(Q,Nyo),e(Q,J1),e(J1,Oce),e(Oce,qyo),e(J1,jyo),e(J1,ED),e(ED,Dyo),e(J1,Gyo),e(Q,Oyo),e(Q,Y1),e(Y1,Vce),e(Vce,Vyo),e(Y1,Xyo),e(Y1,CD),e(CD,zyo),e(Y1,Wyo),e(Q,Qyo),e(Q,K1),e(K1,Xce),e(Xce,Hyo),e(K1,Uyo),e(K1,wD),e(wD,Jyo),e(K1,Yyo),e(Q,Kyo),e(Q,Z1),e(Z1,zce),e(zce,Zyo),e(Z1,eLo),e(Z1,AD),e(AD,oLo),e(Z1,rLo),e(Q,tLo),e(Q,eb),e(eb,Wce),e(Wce,aLo),e(eb,nLo),e(eb,yD),e(yD,sLo),e(eb,lLo),e(Q,iLo),e(Q,ob),e(ob,Qce),e(Qce,dLo),e(ob,cLo),e(ob,LD),e(LD,fLo),e(ob,mLo),e(Q,gLo),e(Q,rb),e(rb,Hce),e(Hce,hLo),e(rb,pLo),e(rb,xD),e(xD,_Lo),e(rb,uLo),e(Q,bLo),e(Q,tb),e(tb,Uce),e(Uce,vLo),e(tb,FLo),e(tb,$D),e($D,TLo),e(tb,MLo),e(Q,ELo),e(Q,ab),e(ab,Jce),e(Jce,CLo),e(ab,wLo),e(ab,kD),e(kD,ALo),e(ab,yLo),e(Q,LLo),e(Q,nb),e(nb,Yce),e(Yce,xLo),e(nb,$Lo),e(nb,SD),e(SD,kLo),e(nb,SLo),e(Q,RLo),e(Q,sb),e(sb,Kce),e(Kce,PLo),e(sb,BLo),e(sb,RD),e(RD,ILo),e(sb,NLo),e(Q,qLo),e(Q,lb),e(lb,Zce),e(Zce,jLo),e(lb,DLo),e(lb,PD),e(PD,GLo),e(lb,OLo),e(Q,VLo),e(Q,ib),e(ib,efe),e(efe,XLo),e(ib,zLo),e(ib,BD),e(BD,WLo),e(ib,QLo),e(Q,HLo),e(Q,db),e(db,ofe),e(ofe,ULo),e(db,JLo),e(db,ID),e(ID,YLo),e(db,KLo),e(Q,ZLo),e(Q,cb),e(cb,rfe),e(rfe,e8o),e(cb,o8o),e(cb,ND),e(ND,r8o),e(cb,t8o),e(Q,a8o),e(Q,fb),e(fb,tfe),e(tfe,n8o),e(fb,s8o),e(fb,qD),e(qD,l8o),e(fb,i8o),e(Q,d8o),e(Q,mb),e(mb,afe),e(afe,c8o),e(mb,f8o),e(mb,jD),e(jD,m8o),e(mb,g8o),e(Q,h8o),e(Q,gb),e(gb,nfe),e(nfe,p8o),e(gb,_8o),e(gb,DD),e(DD,u8o),e(gb,b8o),e(Q,v8o),e(Q,hb),e(hb,sfe),e(sfe,F8o),e(hb,T8o),e(hb,GD),e(GD,M8o),e(hb,E8o),e(Q,C8o),e(Q,pb),e(pb,lfe),e(lfe,w8o),e(pb,A8o),e(pb,OD),e(OD,y8o),e(pb,L8o),e(Q,x8o),e(Q,_b),e(_b,ife),e(ife,$8o),e(_b,k8o),e(_b,VD),e(VD,S8o),e(_b,R8o),e(Q,P8o),e(Q,ub),e(ub,dfe),e(dfe,B8o),e(ub,I8o),e(ub,XD),e(XD,N8o),e(ub,q8o),e(Q,j8o),e(Q,bb),e(bb,cfe),e(cfe,D8o),e(bb,G8o),e(bb,ffe),e(ffe,O8o),e(bb,V8o),e(Q,X8o),e(Q,vb),e(vb,mfe),e(mfe,z8o),e(vb,W8o),e(vb,zD),e(zD,Q8o),e(vb,H8o),e(Q,U8o),e(Q,Fb),e(Fb,gfe),e(gfe,J8o),e(Fb,Y8o),e(Fb,WD),e(WD,K8o),e(Fb,Z8o),e(Q,e9o),e(Q,Tb),e(Tb,hfe),e(hfe,o9o),e(Tb,r9o),e(Tb,QD),e(QD,t9o),e(Tb,a9o),e(Q,n9o),e(Q,Mb),e(Mb,pfe),e(pfe,s9o),e(Mb,l9o),e(Mb,HD),e(HD,i9o),e(Mb,d9o),e(Ze,c9o),e(Ze,Eb),e(Eb,f9o),e(Eb,_fe),e(_fe,m9o),e(Eb,g9o),e(Eb,ufe),e(ufe,h9o),e(Ze,p9o),M(Cb,Ze,null),b(f,jqe,u),b(f,qi,u),e(qi,wb),e(wb,bfe),M(Cy,bfe,null),e(qi,_9o),e(qi,vfe),e(vfe,u9o),b(f,Dqe,u),b(f,So,u),M(wy,So,null),e(So,b9o),e(So,ji),e(ji,v9o),e(ji,UD),e(UD,F9o),e(ji,T9o),e(ji,JD),e(JD,M9o),e(ji,E9o),e(So,C9o),e(So,Ay),e(Ay,w9o),e(Ay,Ffe),e(Ffe,A9o),e(Ay,y9o),e(So,L9o),e(So,it),M(yy,it,null),e(it,x9o),e(it,Tfe),e(Tfe,$9o),e(it,k9o),e(it,Di),e(Di,S9o),e(Di,Mfe),e(Mfe,R9o),e(Di,P9o),e(Di,YD),e(YD,B9o),e(Di,I9o),e(it,N9o),M(Ab,it,null),e(So,q9o),e(So,eo),M(Ly,eo,null),e(eo,j9o),e(eo,Efe),e(Efe,D9o),e(eo,G9o),e(eo,Ra),e(Ra,O9o),e(Ra,Cfe),e(Cfe,V9o),e(Ra,X9o),e(Ra,wfe),e(wfe,z9o),e(Ra,W9o),e(Ra,Afe),e(Afe,Q9o),e(Ra,H9o),e(eo,U9o),e(eo,_e),e(_e,yb),e(yb,yfe),e(yfe,J9o),e(yb,Y9o),e(yb,KD),e(KD,K9o),e(yb,Z9o),e(_e,exo),e(_e,Lb),e(Lb,Lfe),e(Lfe,oxo),e(Lb,rxo),e(Lb,ZD),e(ZD,txo),e(Lb,axo),e(_e,nxo),e(_e,xb),e(xb,xfe),e(xfe,sxo),e(xb,lxo),e(xb,eG),e(eG,ixo),e(xb,dxo),e(_e,cxo),e(_e,$b),e($b,$fe),e($fe,fxo),e($b,mxo),e($b,oG),e(oG,gxo),e($b,hxo),e(_e,pxo),e(_e,kb),e(kb,kfe),e(kfe,_xo),e(kb,uxo),e(kb,rG),e(rG,bxo),e(kb,vxo),e(_e,Fxo),e(_e,Sb),e(Sb,Sfe),e(Sfe,Txo),e(Sb,Mxo),e(Sb,tG),e(tG,Exo),e(Sb,Cxo),e(_e,wxo),e(_e,Rb),e(Rb,Rfe),e(Rfe,Axo),e(Rb,yxo),e(Rb,aG),e(aG,Lxo),e(Rb,xxo),e(_e,$xo),e(_e,Pb),e(Pb,Pfe),e(Pfe,kxo),e(Pb,Sxo),e(Pb,nG),e(nG,Rxo),e(Pb,Pxo),e(_e,Bxo),e(_e,Bb),e(Bb,Bfe),e(Bfe,Ixo),e(Bb,Nxo),e(Bb,sG),e(sG,qxo),e(Bb,jxo),e(_e,Dxo),e(_e,Ib),e(Ib,Ife),e(Ife,Gxo),e(Ib,Oxo),e(Ib,lG),e(lG,Vxo),e(Ib,Xxo),e(_e,zxo),e(_e,Nb),e(Nb,Nfe),e(Nfe,Wxo),e(Nb,Qxo),e(Nb,iG),e(iG,Hxo),e(Nb,Uxo),e(_e,Jxo),e(_e,qb),e(qb,qfe),e(qfe,Yxo),e(qb,Kxo),e(qb,dG),e(dG,Zxo),e(qb,e$o),e(_e,o$o),e(_e,jb),e(jb,jfe),e(jfe,r$o),e(jb,t$o),e(jb,cG),e(cG,a$o),e(jb,n$o),e(_e,s$o),e(_e,Db),e(Db,Dfe),e(Dfe,l$o),e(Db,i$o),e(Db,fG),e(fG,d$o),e(Db,c$o),e(_e,f$o),e(_e,Gb),e(Gb,Gfe),e(Gfe,m$o),e(Gb,g$o),e(Gb,mG),e(mG,h$o),e(Gb,p$o),e(_e,_$o),e(_e,Ob),e(Ob,Ofe),e(Ofe,u$o),e(Ob,b$o),e(Ob,gG),e(gG,v$o),e(Ob,F$o),e(eo,T$o),e(eo,Vb),e(Vb,M$o),e(Vb,Vfe),e(Vfe,E$o),e(Vb,C$o),e(Vb,Xfe),e(Xfe,w$o),e(eo,A$o),M(Xb,eo,null),b(f,Gqe,u),b(f,Gi,u),e(Gi,zb),e(zb,zfe),M(xy,zfe,null),e(Gi,y$o),e(Gi,Wfe),e(Wfe,L$o),b(f,Oqe,u),b(f,Ro,u),M($y,Ro,null),e(Ro,x$o),e(Ro,Oi),e(Oi,$$o),e(Oi,hG),e(hG,k$o),e(Oi,S$o),e(Oi,pG),e(pG,R$o),e(Oi,P$o),e(Ro,B$o),e(Ro,ky),e(ky,I$o),e(ky,Qfe),e(Qfe,N$o),e(ky,q$o),e(Ro,j$o),e(Ro,dt),M(Sy,dt,null),e(dt,D$o),e(dt,Hfe),e(Hfe,G$o),e(dt,O$o),e(dt,Vi),e(Vi,V$o),e(Vi,Ufe),e(Ufe,X$o),e(Vi,z$o),e(Vi,_G),e(_G,W$o),e(Vi,Q$o),e(dt,H$o),M(Wb,dt,null),e(Ro,U$o),e(Ro,oo),M(Ry,oo,null),e(oo,J$o),e(oo,Jfe),e(Jfe,Y$o),e(oo,K$o),e(oo,Pa),e(Pa,Z$o),e(Pa,Yfe),e(Yfe,eko),e(Pa,oko),e(Pa,Kfe),e(Kfe,rko),e(Pa,tko),e(Pa,Zfe),e(Zfe,ako),e(Pa,nko),e(oo,sko),e(oo,N),e(N,Qb),e(Qb,eme),e(eme,lko),e(Qb,iko),e(Qb,uG),e(uG,dko),e(Qb,cko),e(N,fko),e(N,Hb),e(Hb,ome),e(ome,mko),e(Hb,gko),e(Hb,bG),e(bG,hko),e(Hb,pko),e(N,_ko),e(N,Ub),e(Ub,rme),e(rme,uko),e(Ub,bko),e(Ub,vG),e(vG,vko),e(Ub,Fko),e(N,Tko),e(N,Jb),e(Jb,tme),e(tme,Mko),e(Jb,Eko),e(Jb,FG),e(FG,Cko),e(Jb,wko),e(N,Ako),e(N,Yb),e(Yb,ame),e(ame,yko),e(Yb,Lko),e(Yb,TG),e(TG,xko),e(Yb,$ko),e(N,kko),e(N,Kb),e(Kb,nme),e(nme,Sko),e(Kb,Rko),e(Kb,MG),e(MG,Pko),e(Kb,Bko),e(N,Iko),e(N,Zb),e(Zb,sme),e(sme,Nko),e(Zb,qko),e(Zb,EG),e(EG,jko),e(Zb,Dko),e(N,Gko),e(N,e2),e(e2,lme),e(lme,Oko),e(e2,Vko),e(e2,CG),e(CG,Xko),e(e2,zko),e(N,Wko),e(N,o2),e(o2,ime),e(ime,Qko),e(o2,Hko),e(o2,wG),e(wG,Uko),e(o2,Jko),e(N,Yko),e(N,r2),e(r2,dme),e(dme,Kko),e(r2,Zko),e(r2,AG),e(AG,eSo),e(r2,oSo),e(N,rSo),e(N,t2),e(t2,cme),e(cme,tSo),e(t2,aSo),e(t2,yG),e(yG,nSo),e(t2,sSo),e(N,lSo),e(N,a2),e(a2,fme),e(fme,iSo),e(a2,dSo),e(a2,LG),e(LG,cSo),e(a2,fSo),e(N,mSo),e(N,n2),e(n2,mme),e(mme,gSo),e(n2,hSo),e(n2,xG),e(xG,pSo),e(n2,_So),e(N,uSo),e(N,s2),e(s2,gme),e(gme,bSo),e(s2,vSo),e(s2,$G),e($G,FSo),e(s2,TSo),e(N,MSo),e(N,l2),e(l2,hme),e(hme,ESo),e(l2,CSo),e(l2,kG),e(kG,wSo),e(l2,ASo),e(N,ySo),e(N,i2),e(i2,pme),e(pme,LSo),e(i2,xSo),e(i2,SG),e(SG,$So),e(i2,kSo),e(N,SSo),e(N,d2),e(d2,_me),e(_me,RSo),e(d2,PSo),e(d2,RG),e(RG,BSo),e(d2,ISo),e(N,NSo),e(N,c2),e(c2,ume),e(ume,qSo),e(c2,jSo),e(c2,PG),e(PG,DSo),e(c2,GSo),e(N,OSo),e(N,f2),e(f2,bme),e(bme,VSo),e(f2,XSo),e(f2,BG),e(BG,zSo),e(f2,WSo),e(N,QSo),e(N,m2),e(m2,vme),e(vme,HSo),e(m2,USo),e(m2,IG),e(IG,JSo),e(m2,YSo),e(N,KSo),e(N,g2),e(g2,Fme),e(Fme,ZSo),e(g2,eRo),e(g2,NG),e(NG,oRo),e(g2,rRo),e(N,tRo),e(N,h2),e(h2,Tme),e(Tme,aRo),e(h2,nRo),e(h2,qG),e(qG,sRo),e(h2,lRo),e(N,iRo),e(N,p2),e(p2,Mme),e(Mme,dRo),e(p2,cRo),e(p2,jG),e(jG,fRo),e(p2,mRo),e(N,gRo),e(N,_2),e(_2,Eme),e(Eme,hRo),e(_2,pRo),e(_2,DG),e(DG,_Ro),e(_2,uRo),e(N,bRo),e(N,u2),e(u2,Cme),e(Cme,vRo),e(u2,FRo),e(u2,GG),e(GG,TRo),e(u2,MRo),e(N,ERo),e(N,b2),e(b2,wme),e(wme,CRo),e(b2,wRo),e(b2,OG),e(OG,ARo),e(b2,yRo),e(N,LRo),e(N,v2),e(v2,Ame),e(Ame,xRo),e(v2,$Ro),e(v2,VG),e(VG,kRo),e(v2,SRo),e(N,RRo),e(N,F2),e(F2,yme),e(yme,PRo),e(F2,BRo),e(F2,XG),e(XG,IRo),e(F2,NRo),e(N,qRo),e(N,T2),e(T2,Lme),e(Lme,jRo),e(T2,DRo),e(T2,zG),e(zG,GRo),e(T2,ORo),e(N,VRo),e(N,M2),e(M2,xme),e(xme,XRo),e(M2,zRo),e(M2,WG),e(WG,WRo),e(M2,QRo),e(N,HRo),e(N,E2),e(E2,$me),e($me,URo),e(E2,JRo),e(E2,QG),e(QG,YRo),e(E2,KRo),e(N,ZRo),e(N,C2),e(C2,kme),e(kme,ePo),e(C2,oPo),e(C2,HG),e(HG,rPo),e(C2,tPo),e(N,aPo),e(N,w2),e(w2,Sme),e(Sme,nPo),e(w2,sPo),e(w2,UG),e(UG,lPo),e(w2,iPo),e(N,dPo),e(N,A2),e(A2,Rme),e(Rme,cPo),e(A2,fPo),e(A2,JG),e(JG,mPo),e(A2,gPo),e(N,hPo),e(N,y2),e(y2,Pme),e(Pme,pPo),e(y2,_Po),e(y2,YG),e(YG,uPo),e(y2,bPo),e(N,vPo),e(N,L2),e(L2,Bme),e(Bme,FPo),e(L2,TPo),e(L2,KG),e(KG,MPo),e(L2,EPo),e(N,CPo),e(N,x2),e(x2,Ime),e(Ime,wPo),e(x2,APo),e(x2,ZG),e(ZG,yPo),e(x2,LPo),e(N,xPo),e(N,$2),e($2,Nme),e(Nme,$Po),e($2,kPo),e($2,eO),e(eO,SPo),e($2,RPo),e(N,PPo),e(N,k2),e(k2,qme),e(qme,BPo),e(k2,IPo),e(k2,oO),e(oO,NPo),e(k2,qPo),e(N,jPo),e(N,S2),e(S2,jme),e(jme,DPo),e(S2,GPo),e(S2,rO),e(rO,OPo),e(S2,VPo),e(N,XPo),e(N,R2),e(R2,Dme),e(Dme,zPo),e(R2,WPo),e(R2,tO),e(tO,QPo),e(R2,HPo),e(N,UPo),e(N,P2),e(P2,Gme),e(Gme,JPo),e(P2,YPo),e(P2,aO),e(aO,KPo),e(P2,ZPo),e(N,eBo),e(N,B2),e(B2,Ome),e(Ome,oBo),e(B2,rBo),e(B2,nO),e(nO,tBo),e(B2,aBo),e(N,nBo),e(N,I2),e(I2,Vme),e(Vme,sBo),e(I2,lBo),e(I2,sO),e(sO,iBo),e(I2,dBo),e(N,cBo),e(N,N2),e(N2,Xme),e(Xme,fBo),e(N2,mBo),e(N2,lO),e(lO,gBo),e(N2,hBo),e(N,pBo),e(N,q2),e(q2,zme),e(zme,_Bo),e(q2,uBo),e(q2,iO),e(iO,bBo),e(q2,vBo),e(N,FBo),e(N,j2),e(j2,Wme),e(Wme,TBo),e(j2,MBo),e(j2,dO),e(dO,EBo),e(j2,CBo),e(oo,wBo),e(oo,D2),e(D2,ABo),e(D2,Qme),e(Qme,yBo),e(D2,LBo),e(D2,Hme),e(Hme,xBo),e(oo,$Bo),M(G2,oo,null),b(f,Vqe,u),b(f,Xi,u),e(Xi,O2),e(O2,Ume),M(Py,Ume,null),e(Xi,kBo),e(Xi,Jme),e(Jme,SBo),b(f,Xqe,u),b(f,Po,u),M(By,Po,null),e(Po,RBo),e(Po,zi),e(zi,PBo),e(zi,cO),e(cO,BBo),e(zi,IBo),e(zi,fO),e(fO,NBo),e(zi,qBo),e(Po,jBo),e(Po,Iy),e(Iy,DBo),e(Iy,Yme),e(Yme,GBo),e(Iy,OBo),e(Po,VBo),e(Po,ct),M(Ny,ct,null),e(ct,XBo),e(ct,Kme),e(Kme,zBo),e(ct,WBo),e(ct,Wi),e(Wi,QBo),e(Wi,Zme),e(Zme,HBo),e(Wi,UBo),e(Wi,mO),e(mO,JBo),e(Wi,YBo),e(ct,KBo),M(V2,ct,null),e(Po,ZBo),e(Po,ro),M(qy,ro,null),e(ro,eIo),e(ro,ege),e(ege,oIo),e(ro,rIo),e(ro,Ba),e(Ba,tIo),e(Ba,oge),e(oge,aIo),e(Ba,nIo),e(Ba,rge),e(rge,sIo),e(Ba,lIo),e(Ba,tge),e(tge,iIo),e(Ba,dIo),e(ro,cIo),e(ro,K),e(K,X2),e(X2,age),e(age,fIo),e(X2,mIo),e(X2,gO),e(gO,gIo),e(X2,hIo),e(K,pIo),e(K,z2),e(z2,nge),e(nge,_Io),e(z2,uIo),e(z2,hO),e(hO,bIo),e(z2,vIo),e(K,FIo),e(K,W2),e(W2,sge),e(sge,TIo),e(W2,MIo),e(W2,pO),e(pO,EIo),e(W2,CIo),e(K,wIo),e(K,Q2),e(Q2,lge),e(lge,AIo),e(Q2,yIo),e(Q2,_O),e(_O,LIo),e(Q2,xIo),e(K,$Io),e(K,H2),e(H2,ige),e(ige,kIo),e(H2,SIo),e(H2,uO),e(uO,RIo),e(H2,PIo),e(K,BIo),e(K,U2),e(U2,dge),e(dge,IIo),e(U2,NIo),e(U2,bO),e(bO,qIo),e(U2,jIo),e(K,DIo),e(K,J2),e(J2,cge),e(cge,GIo),e(J2,OIo),e(J2,vO),e(vO,VIo),e(J2,XIo),e(K,zIo),e(K,Y2),e(Y2,fge),e(fge,WIo),e(Y2,QIo),e(Y2,FO),e(FO,HIo),e(Y2,UIo),e(K,JIo),e(K,K2),e(K2,mge),e(mge,YIo),e(K2,KIo),e(K2,TO),e(TO,ZIo),e(K2,eNo),e(K,oNo),e(K,Z2),e(Z2,gge),e(gge,rNo),e(Z2,tNo),e(Z2,MO),e(MO,aNo),e(Z2,nNo),e(K,sNo),e(K,e4),e(e4,hge),e(hge,lNo),e(e4,iNo),e(e4,EO),e(EO,dNo),e(e4,cNo),e(K,fNo),e(K,o4),e(o4,pge),e(pge,mNo),e(o4,gNo),e(o4,CO),e(CO,hNo),e(o4,pNo),e(K,_No),e(K,r4),e(r4,_ge),e(_ge,uNo),e(r4,bNo),e(r4,wO),e(wO,vNo),e(r4,FNo),e(K,TNo),e(K,t4),e(t4,uge),e(uge,MNo),e(t4,ENo),e(t4,AO),e(AO,CNo),e(t4,wNo),e(K,ANo),e(K,a4),e(a4,bge),e(bge,yNo),e(a4,LNo),e(a4,yO),e(yO,xNo),e(a4,$No),e(K,kNo),e(K,n4),e(n4,vge),e(vge,SNo),e(n4,RNo),e(n4,LO),e(LO,PNo),e(n4,BNo),e(K,INo),e(K,s4),e(s4,Fge),e(Fge,NNo),e(s4,qNo),e(s4,xO),e(xO,jNo),e(s4,DNo),e(K,GNo),e(K,l4),e(l4,Tge),e(Tge,ONo),e(l4,VNo),e(l4,$O),e($O,XNo),e(l4,zNo),e(K,WNo),e(K,i4),e(i4,Mge),e(Mge,QNo),e(i4,HNo),e(i4,kO),e(kO,UNo),e(i4,JNo),e(K,YNo),e(K,d4),e(d4,Ege),e(Ege,KNo),e(d4,ZNo),e(d4,SO),e(SO,eqo),e(d4,oqo),e(K,rqo),e(K,c4),e(c4,Cge),e(Cge,tqo),e(c4,aqo),e(c4,RO),e(RO,nqo),e(c4,sqo),e(K,lqo),e(K,f4),e(f4,wge),e(wge,iqo),e(f4,dqo),e(f4,PO),e(PO,cqo),e(f4,fqo),e(K,mqo),e(K,m4),e(m4,Age),e(Age,gqo),e(m4,hqo),e(m4,BO),e(BO,pqo),e(m4,_qo),e(K,uqo),e(K,g4),e(g4,yge),e(yge,bqo),e(g4,vqo),e(g4,IO),e(IO,Fqo),e(g4,Tqo),e(K,Mqo),e(K,h4),e(h4,Lge),e(Lge,Eqo),e(h4,Cqo),e(h4,NO),e(NO,wqo),e(h4,Aqo),e(K,yqo),e(K,p4),e(p4,xge),e(xge,Lqo),e(p4,xqo),e(p4,qO),e(qO,$qo),e(p4,kqo),e(K,Sqo),e(K,_4),e(_4,$ge),e($ge,Rqo),e(_4,Pqo),e(_4,jO),e(jO,Bqo),e(_4,Iqo),e(K,Nqo),e(K,u4),e(u4,kge),e(kge,qqo),e(u4,jqo),e(u4,DO),e(DO,Dqo),e(u4,Gqo),e(K,Oqo),e(K,b4),e(b4,Sge),e(Sge,Vqo),e(b4,Xqo),e(b4,GO),e(GO,zqo),e(b4,Wqo),e(ro,Qqo),e(ro,v4),e(v4,Hqo),e(v4,Rge),e(Rge,Uqo),e(v4,Jqo),e(v4,Pge),e(Pge,Yqo),e(ro,Kqo),M(F4,ro,null),b(f,zqe,u),b(f,Qi,u),e(Qi,T4),e(T4,Bge),M(jy,Bge,null),e(Qi,Zqo),e(Qi,Ige),e(Ige,ejo),b(f,Wqe,u),b(f,Bo,u),M(Dy,Bo,null),e(Bo,ojo),e(Bo,Hi),e(Hi,rjo),e(Hi,OO),e(OO,tjo),e(Hi,ajo),e(Hi,VO),e(VO,njo),e(Hi,sjo),e(Bo,ljo),e(Bo,Gy),e(Gy,ijo),e(Gy,Nge),e(Nge,djo),e(Gy,cjo),e(Bo,fjo),e(Bo,ft),M(Oy,ft,null),e(ft,mjo),e(ft,qge),e(qge,gjo),e(ft,hjo),e(ft,Ui),e(Ui,pjo),e(Ui,jge),e(jge,_jo),e(Ui,ujo),e(Ui,XO),e(XO,bjo),e(Ui,vjo),e(ft,Fjo),M(M4,ft,null),e(Bo,Tjo),e(Bo,to),M(Vy,to,null),e(to,Mjo),e(to,Dge),e(Dge,Ejo),e(to,Cjo),e(to,Ia),e(Ia,wjo),e(Ia,Gge),e(Gge,Ajo),e(Ia,yjo),e(Ia,Oge),e(Oge,Ljo),e(Ia,xjo),e(Ia,Vge),e(Vge,$jo),e(Ia,kjo),e(to,Sjo),e(to,Yr),e(Yr,E4),e(E4,Xge),e(Xge,Rjo),e(E4,Pjo),e(E4,zO),e(zO,Bjo),e(E4,Ijo),e(Yr,Njo),e(Yr,C4),e(C4,zge),e(zge,qjo),e(C4,jjo),e(C4,WO),e(WO,Djo),e(C4,Gjo),e(Yr,Ojo),e(Yr,w4),e(w4,Wge),e(Wge,Vjo),e(w4,Xjo),e(w4,QO),e(QO,zjo),e(w4,Wjo),e(Yr,Qjo),e(Yr,A4),e(A4,Qge),e(Qge,Hjo),e(A4,Ujo),e(A4,HO),e(HO,Jjo),e(A4,Yjo),e(Yr,Kjo),e(Yr,y4),e(y4,Hge),e(Hge,Zjo),e(y4,eDo),e(y4,UO),e(UO,oDo),e(y4,rDo),e(to,tDo),e(to,L4),e(L4,aDo),e(L4,Uge),e(Uge,nDo),e(L4,sDo),e(L4,Jge),e(Jge,lDo),e(to,iDo),M(x4,to,null),b(f,Qqe,u),b(f,Ji,u),e(Ji,$4),e($4,Yge),M(Xy,Yge,null),e(Ji,dDo),e(Ji,Kge),e(Kge,cDo),b(f,Hqe,u),b(f,Io,u),M(zy,Io,null),e(Io,fDo),e(Io,Yi),e(Yi,mDo),e(Yi,JO),e(JO,gDo),e(Yi,hDo),e(Yi,YO),e(YO,pDo),e(Yi,_Do),e(Io,uDo),e(Io,Wy),e(Wy,bDo),e(Wy,Zge),e(Zge,vDo),e(Wy,FDo),e(Io,TDo),e(Io,mt),M(Qy,mt,null),e(mt,MDo),e(mt,ehe),e(ehe,EDo),e(mt,CDo),e(mt,Ki),e(Ki,wDo),e(Ki,ohe),e(ohe,ADo),e(Ki,yDo),e(Ki,KO),e(KO,LDo),e(Ki,xDo),e(mt,$Do),M(k4,mt,null),e(Io,kDo),e(Io,ao),M(Hy,ao,null),e(ao,SDo),e(ao,rhe),e(rhe,RDo),e(ao,PDo),e(ao,Na),e(Na,BDo),e(Na,the),e(the,IDo),e(Na,NDo),e(Na,ahe),e(ahe,qDo),e(Na,jDo),e(Na,nhe),e(nhe,DDo),e(Na,GDo),e(ao,ODo),e(ao,H),e(H,S4),e(S4,she),e(she,VDo),e(S4,XDo),e(S4,ZO),e(ZO,zDo),e(S4,WDo),e(H,QDo),e(H,R4),e(R4,lhe),e(lhe,HDo),e(R4,UDo),e(R4,eV),e(eV,JDo),e(R4,YDo),e(H,KDo),e(H,P4),e(P4,ihe),e(ihe,ZDo),e(P4,eGo),e(P4,oV),e(oV,oGo),e(P4,rGo),e(H,tGo),e(H,B4),e(B4,dhe),e(dhe,aGo),e(B4,nGo),e(B4,rV),e(rV,sGo),e(B4,lGo),e(H,iGo),e(H,I4),e(I4,che),e(che,dGo),e(I4,cGo),e(I4,tV),e(tV,fGo),e(I4,mGo),e(H,gGo),e(H,N4),e(N4,fhe),e(fhe,hGo),e(N4,pGo),e(N4,aV),e(aV,_Go),e(N4,uGo),e(H,bGo),e(H,q4),e(q4,mhe),e(mhe,vGo),e(q4,FGo),e(q4,nV),e(nV,TGo),e(q4,MGo),e(H,EGo),e(H,j4),e(j4,ghe),e(ghe,CGo),e(j4,wGo),e(j4,sV),e(sV,AGo),e(j4,yGo),e(H,LGo),e(H,D4),e(D4,hhe),e(hhe,xGo),e(D4,$Go),e(D4,lV),e(lV,kGo),e(D4,SGo),e(H,RGo),e(H,G4),e(G4,phe),e(phe,PGo),e(G4,BGo),e(G4,iV),e(iV,IGo),e(G4,NGo),e(H,qGo),e(H,O4),e(O4,_he),e(_he,jGo),e(O4,DGo),e(O4,dV),e(dV,GGo),e(O4,OGo),e(H,VGo),e(H,V4),e(V4,uhe),e(uhe,XGo),e(V4,zGo),e(V4,cV),e(cV,WGo),e(V4,QGo),e(H,HGo),e(H,X4),e(X4,bhe),e(bhe,UGo),e(X4,JGo),e(X4,fV),e(fV,YGo),e(X4,KGo),e(H,ZGo),e(H,z4),e(z4,vhe),e(vhe,eOo),e(z4,oOo),e(z4,mV),e(mV,rOo),e(z4,tOo),e(H,aOo),e(H,W4),e(W4,Fhe),e(Fhe,nOo),e(W4,sOo),e(W4,gV),e(gV,lOo),e(W4,iOo),e(H,dOo),e(H,Q4),e(Q4,The),e(The,cOo),e(Q4,fOo),e(Q4,hV),e(hV,mOo),e(Q4,gOo),e(H,hOo),e(H,H4),e(H4,Mhe),e(Mhe,pOo),e(H4,_Oo),e(H4,pV),e(pV,uOo),e(H4,bOo),e(H,vOo),e(H,U4),e(U4,Ehe),e(Ehe,FOo),e(U4,TOo),e(U4,_V),e(_V,MOo),e(U4,EOo),e(H,COo),e(H,J4),e(J4,Che),e(Che,wOo),e(J4,AOo),e(J4,uV),e(uV,yOo),e(J4,LOo),e(H,xOo),e(H,Y4),e(Y4,whe),e(whe,$Oo),e(Y4,kOo),e(Y4,bV),e(bV,SOo),e(Y4,ROo),e(H,POo),e(H,K4),e(K4,Ahe),e(Ahe,BOo),e(K4,IOo),e(K4,vV),e(vV,NOo),e(K4,qOo),e(H,jOo),e(H,Z4),e(Z4,yhe),e(yhe,DOo),e(Z4,GOo),e(Z4,FV),e(FV,OOo),e(Z4,VOo),e(H,XOo),e(H,ev),e(ev,Lhe),e(Lhe,zOo),e(ev,WOo),e(ev,TV),e(TV,QOo),e(ev,HOo),e(H,UOo),e(H,ov),e(ov,xhe),e(xhe,JOo),e(ov,YOo),e(ov,MV),e(MV,KOo),e(ov,ZOo),e(H,eVo),e(H,rv),e(rv,$he),e($he,oVo),e(rv,rVo),e(rv,EV),e(EV,tVo),e(rv,aVo),e(H,nVo),e(H,tv),e(tv,khe),e(khe,sVo),e(tv,lVo),e(tv,CV),e(CV,iVo),e(tv,dVo),e(H,cVo),e(H,av),e(av,She),e(She,fVo),e(av,mVo),e(av,wV),e(wV,gVo),e(av,hVo),e(H,pVo),e(H,nv),e(nv,Rhe),e(Rhe,_Vo),e(nv,uVo),e(nv,AV),e(AV,bVo),e(nv,vVo),e(H,FVo),e(H,sv),e(sv,Phe),e(Phe,TVo),e(sv,MVo),e(sv,yV),e(yV,EVo),e(sv,CVo),e(H,wVo),e(H,lv),e(lv,Bhe),e(Bhe,AVo),e(lv,yVo),e(lv,LV),e(LV,LVo),e(lv,xVo),e(H,$Vo),e(H,iv),e(iv,Ihe),e(Ihe,kVo),e(iv,SVo),e(iv,xV),e(xV,RVo),e(iv,PVo),e(H,BVo),e(H,dv),e(dv,Nhe),e(Nhe,IVo),e(dv,NVo),e(dv,$V),e($V,qVo),e(dv,jVo),e(H,DVo),e(H,cv),e(cv,qhe),e(qhe,GVo),e(cv,OVo),e(cv,kV),e(kV,VVo),e(cv,XVo),e(H,zVo),e(H,fv),e(fv,jhe),e(jhe,WVo),e(fv,QVo),e(fv,SV),e(SV,HVo),e(fv,UVo),e(ao,JVo),e(ao,mv),e(mv,YVo),e(mv,Dhe),e(Dhe,KVo),e(mv,ZVo),e(mv,Ghe),e(Ghe,eXo),e(ao,oXo),M(gv,ao,null),b(f,Uqe,u),b(f,Zi,u),e(Zi,hv),e(hv,Ohe),M(Uy,Ohe,null),e(Zi,rXo),e(Zi,Vhe),e(Vhe,tXo),b(f,Jqe,u),b(f,No,u),M(Jy,No,null),e(No,aXo),e(No,ed),e(ed,nXo),e(ed,RV),e(RV,sXo),e(ed,lXo),e(ed,PV),e(PV,iXo),e(ed,dXo),e(No,cXo),e(No,Yy),e(Yy,fXo),e(Yy,Xhe),e(Xhe,mXo),e(Yy,gXo),e(No,hXo),e(No,gt),M(Ky,gt,null),e(gt,pXo),e(gt,zhe),e(zhe,_Xo),e(gt,uXo),e(gt,od),e(od,bXo),e(od,Whe),e(Whe,vXo),e(od,FXo),e(od,BV),e(BV,TXo),e(od,MXo),e(gt,EXo),M(pv,gt,null),e(No,CXo),e(No,no),M(Zy,no,null),e(no,wXo),e(no,Qhe),e(Qhe,AXo),e(no,yXo),e(no,qa),e(qa,LXo),e(qa,Hhe),e(Hhe,xXo),e(qa,$Xo),e(qa,Uhe),e(Uhe,kXo),e(qa,SXo),e(qa,Jhe),e(Jhe,RXo),e(qa,PXo),e(no,BXo),e(no,V),e(V,_v),e(_v,Yhe),e(Yhe,IXo),e(_v,NXo),e(_v,IV),e(IV,qXo),e(_v,jXo),e(V,DXo),e(V,uv),e(uv,Khe),e(Khe,GXo),e(uv,OXo),e(uv,NV),e(NV,VXo),e(uv,XXo),e(V,zXo),e(V,bv),e(bv,Zhe),e(Zhe,WXo),e(bv,QXo),e(bv,qV),e(qV,HXo),e(bv,UXo),e(V,JXo),e(V,vv),e(vv,epe),e(epe,YXo),e(vv,KXo),e(vv,jV),e(jV,ZXo),e(vv,ezo),e(V,ozo),e(V,Fv),e(Fv,ope),e(ope,rzo),e(Fv,tzo),e(Fv,DV),e(DV,azo),e(Fv,nzo),e(V,szo),e(V,Tv),e(Tv,rpe),e(rpe,lzo),e(Tv,izo),e(Tv,GV),e(GV,dzo),e(Tv,czo),e(V,fzo),e(V,Mv),e(Mv,tpe),e(tpe,mzo),e(Mv,gzo),e(Mv,OV),e(OV,hzo),e(Mv,pzo),e(V,_zo),e(V,Ev),e(Ev,ape),e(ape,uzo),e(Ev,bzo),e(Ev,VV),e(VV,vzo),e(Ev,Fzo),e(V,Tzo),e(V,Cv),e(Cv,npe),e(npe,Mzo),e(Cv,Ezo),e(Cv,XV),e(XV,Czo),e(Cv,wzo),e(V,Azo),e(V,wv),e(wv,spe),e(spe,yzo),e(wv,Lzo),e(wv,zV),e(zV,xzo),e(wv,$zo),e(V,kzo),e(V,Av),e(Av,lpe),e(lpe,Szo),e(Av,Rzo),e(Av,WV),e(WV,Pzo),e(Av,Bzo),e(V,Izo),e(V,yv),e(yv,ipe),e(ipe,Nzo),e(yv,qzo),e(yv,QV),e(QV,jzo),e(yv,Dzo),e(V,Gzo),e(V,Lv),e(Lv,dpe),e(dpe,Ozo),e(Lv,Vzo),e(Lv,HV),e(HV,Xzo),e(Lv,zzo),e(V,Wzo),e(V,xv),e(xv,cpe),e(cpe,Qzo),e(xv,Hzo),e(xv,UV),e(UV,Uzo),e(xv,Jzo),e(V,Yzo),e(V,$v),e($v,fpe),e(fpe,Kzo),e($v,Zzo),e($v,JV),e(JV,eWo),e($v,oWo),e(V,rWo),e(V,kv),e(kv,mpe),e(mpe,tWo),e(kv,aWo),e(kv,YV),e(YV,nWo),e(kv,sWo),e(V,lWo),e(V,Sv),e(Sv,gpe),e(gpe,iWo),e(Sv,dWo),e(Sv,KV),e(KV,cWo),e(Sv,fWo),e(V,mWo),e(V,Rv),e(Rv,hpe),e(hpe,gWo),e(Rv,hWo),e(Rv,ZV),e(ZV,pWo),e(Rv,_Wo),e(V,uWo),e(V,Pv),e(Pv,ppe),e(ppe,bWo),e(Pv,vWo),e(Pv,eX),e(eX,FWo),e(Pv,TWo),e(V,MWo),e(V,Bv),e(Bv,_pe),e(_pe,EWo),e(Bv,CWo),e(Bv,oX),e(oX,wWo),e(Bv,AWo),e(V,yWo),e(V,Iv),e(Iv,upe),e(upe,LWo),e(Iv,xWo),e(Iv,rX),e(rX,$Wo),e(Iv,kWo),e(V,SWo),e(V,Nv),e(Nv,bpe),e(bpe,RWo),e(Nv,PWo),e(Nv,tX),e(tX,BWo),e(Nv,IWo),e(V,NWo),e(V,qv),e(qv,vpe),e(vpe,qWo),e(qv,jWo),e(qv,aX),e(aX,DWo),e(qv,GWo),e(V,OWo),e(V,jv),e(jv,Fpe),e(Fpe,VWo),e(jv,XWo),e(jv,nX),e(nX,zWo),e(jv,WWo),e(V,QWo),e(V,Dv),e(Dv,Tpe),e(Tpe,HWo),e(Dv,UWo),e(Dv,sX),e(sX,JWo),e(Dv,YWo),e(V,KWo),e(V,Gv),e(Gv,Mpe),e(Mpe,ZWo),e(Gv,eQo),e(Gv,lX),e(lX,oQo),e(Gv,rQo),e(V,tQo),e(V,Ov),e(Ov,Epe),e(Epe,aQo),e(Ov,nQo),e(Ov,iX),e(iX,sQo),e(Ov,lQo),e(V,iQo),e(V,Vv),e(Vv,Cpe),e(Cpe,dQo),e(Vv,cQo),e(Vv,dX),e(dX,fQo),e(Vv,mQo),e(V,gQo),e(V,Xv),e(Xv,wpe),e(wpe,hQo),e(Xv,pQo),e(Xv,cX),e(cX,_Qo),e(Xv,uQo),e(V,bQo),e(V,zv),e(zv,Ape),e(Ape,vQo),e(zv,FQo),e(zv,fX),e(fX,TQo),e(zv,MQo),e(V,EQo),e(V,Wv),e(Wv,ype),e(ype,CQo),e(Wv,wQo),e(Wv,mX),e(mX,AQo),e(Wv,yQo),e(V,LQo),e(V,Qv),e(Qv,Lpe),e(Lpe,xQo),e(Qv,$Qo),e(Qv,gX),e(gX,kQo),e(Qv,SQo),e(V,RQo),e(V,Hv),e(Hv,xpe),e(xpe,PQo),e(Hv,BQo),e(Hv,hX),e(hX,IQo),e(Hv,NQo),e(V,qQo),e(V,Uv),e(Uv,$pe),e($pe,jQo),e(Uv,DQo),e(Uv,pX),e(pX,GQo),e(Uv,OQo),e(V,VQo),e(V,Jv),e(Jv,kpe),e(kpe,XQo),e(Jv,zQo),e(Jv,_X),e(_X,WQo),e(Jv,QQo),e(V,HQo),e(V,Yv),e(Yv,Spe),e(Spe,UQo),e(Yv,JQo),e(Yv,uX),e(uX,YQo),e(Yv,KQo),e(V,ZQo),e(V,Kv),e(Kv,Rpe),e(Rpe,eHo),e(Kv,oHo),e(Kv,bX),e(bX,rHo),e(Kv,tHo),e(V,aHo),e(V,Zv),e(Zv,Ppe),e(Ppe,nHo),e(Zv,sHo),e(Zv,vX),e(vX,lHo),e(Zv,iHo),e(V,dHo),e(V,e5),e(e5,Bpe),e(Bpe,cHo),e(e5,fHo),e(e5,FX),e(FX,mHo),e(e5,gHo),e(V,hHo),e(V,o5),e(o5,Ipe),e(Ipe,pHo),e(o5,_Ho),e(o5,TX),e(TX,uHo),e(o5,bHo),e(no,vHo),e(no,r5),e(r5,FHo),e(r5,Npe),e(Npe,THo),e(r5,MHo),e(r5,qpe),e(qpe,EHo),e(no,CHo),M(t5,no,null),b(f,Yqe,u),b(f,rd,u),e(rd,a5),e(a5,jpe),M(eL,jpe,null),e(rd,wHo),e(rd,Dpe),e(Dpe,AHo),b(f,Kqe,u),b(f,qo,u),M(oL,qo,null),e(qo,yHo),e(qo,td),e(td,LHo),e(td,MX),e(MX,xHo),e(td,$Ho),e(td,EX),e(EX,kHo),e(td,SHo),e(qo,RHo),e(qo,rL),e(rL,PHo),e(rL,Gpe),e(Gpe,BHo),e(rL,IHo),e(qo,NHo),e(qo,ht),M(tL,ht,null),e(ht,qHo),e(ht,Ope),e(Ope,jHo),e(ht,DHo),e(ht,ad),e(ad,GHo),e(ad,Vpe),e(Vpe,OHo),e(ad,VHo),e(ad,CX),e(CX,XHo),e(ad,zHo),e(ht,WHo),M(n5,ht,null),e(qo,QHo),e(qo,so),M(aL,so,null),e(so,HHo),e(so,Xpe),e(Xpe,UHo),e(so,JHo),e(so,ja),e(ja,YHo),e(ja,zpe),e(zpe,KHo),e(ja,ZHo),e(ja,Wpe),e(Wpe,eUo),e(ja,oUo),e(ja,Qpe),e(Qpe,rUo),e(ja,tUo),e(so,aUo),e(so,Hpe),e(Hpe,s5),e(s5,Upe),e(Upe,nUo),e(s5,sUo),e(s5,wX),e(wX,lUo),e(s5,iUo),e(so,dUo),e(so,l5),e(l5,cUo),e(l5,Jpe),e(Jpe,fUo),e(l5,mUo),e(l5,Ype),e(Ype,gUo),e(so,hUo),M(i5,so,null),b(f,Zqe,u),b(f,nd,u),e(nd,d5),e(d5,Kpe),M(nL,Kpe,null),e(nd,pUo),e(nd,Zpe),e(Zpe,_Uo),b(f,eje,u),b(f,jo,u),M(sL,jo,null),e(jo,uUo),e(jo,sd),e(sd,bUo),e(sd,AX),e(AX,vUo),e(sd,FUo),e(sd,yX),e(yX,TUo),e(sd,MUo),e(jo,EUo),e(jo,lL),e(lL,CUo),e(lL,e_e),e(e_e,wUo),e(lL,AUo),e(jo,yUo),e(jo,pt),M(iL,pt,null),e(pt,LUo),e(pt,o_e),e(o_e,xUo),e(pt,$Uo),e(pt,ld),e(ld,kUo),e(ld,r_e),e(r_e,SUo),e(ld,RUo),e(ld,LX),e(LX,PUo),e(ld,BUo),e(pt,IUo),M(c5,pt,null),e(jo,NUo),e(jo,lo),M(dL,lo,null),e(lo,qUo),e(lo,t_e),e(t_e,jUo),e(lo,DUo),e(lo,Da),e(Da,GUo),e(Da,a_e),e(a_e,OUo),e(Da,VUo),e(Da,n_e),e(n_e,XUo),e(Da,zUo),e(Da,s_e),e(s_e,WUo),e(Da,QUo),e(lo,HUo),e(lo,ve),e(ve,f5),e(f5,l_e),e(l_e,UUo),e(f5,JUo),e(f5,xX),e(xX,YUo),e(f5,KUo),e(ve,ZUo),e(ve,m5),e(m5,i_e),e(i_e,eJo),e(m5,oJo),e(m5,$X),e($X,rJo),e(m5,tJo),e(ve,aJo),e(ve,g5),e(g5,d_e),e(d_e,nJo),e(g5,sJo),e(g5,kX),e(kX,lJo),e(g5,iJo),e(ve,dJo),e(ve,h5),e(h5,c_e),e(c_e,cJo),e(h5,fJo),e(h5,SX),e(SX,mJo),e(h5,gJo),e(ve,hJo),e(ve,Bs),e(Bs,f_e),e(f_e,pJo),e(Bs,_Jo),e(Bs,RX),e(RX,uJo),e(Bs,bJo),e(Bs,PX),e(PX,vJo),e(Bs,FJo),e(ve,TJo),e(ve,p5),e(p5,m_e),e(m_e,MJo),e(p5,EJo),e(p5,BX),e(BX,CJo),e(p5,wJo),e(ve,AJo),e(ve,_5),e(_5,g_e),e(g_e,yJo),e(_5,LJo),e(_5,IX),e(IX,xJo),e(_5,$Jo),e(ve,kJo),e(ve,_t),e(_t,h_e),e(h_e,SJo),e(_t,RJo),e(_t,NX),e(NX,PJo),e(_t,BJo),e(_t,qX),e(qX,IJo),e(_t,NJo),e(_t,jX),e(jX,qJo),e(_t,jJo),e(ve,DJo),e(ve,u5),e(u5,p_e),e(p_e,GJo),e(u5,OJo),e(u5,DX),e(DX,VJo),e(u5,XJo),e(ve,zJo),e(ve,b5),e(b5,__e),e(__e,WJo),e(b5,QJo),e(b5,GX),e(GX,HJo),e(b5,UJo),e(ve,JJo),e(ve,v5),e(v5,u_e),e(u_e,YJo),e(v5,KJo),e(v5,OX),e(OX,ZJo),e(v5,eYo),e(ve,oYo),e(ve,F5),e(F5,b_e),e(b_e,rYo),e(F5,tYo),e(F5,VX),e(VX,aYo),e(F5,nYo),e(ve,sYo),e(ve,T5),e(T5,v_e),e(v_e,lYo),e(T5,iYo),e(T5,XX),e(XX,dYo),e(T5,cYo),e(ve,fYo),e(ve,M5),e(M5,F_e),e(F_e,mYo),e(M5,gYo),e(M5,zX),e(zX,hYo),e(M5,pYo),e(ve,_Yo),e(ve,E5),e(E5,T_e),e(T_e,uYo),e(E5,bYo),e(E5,WX),e(WX,vYo),e(E5,FYo),e(lo,TYo),e(lo,C5),e(C5,MYo),e(C5,M_e),e(M_e,EYo),e(C5,CYo),e(C5,E_e),e(E_e,wYo),e(lo,AYo),M(w5,lo,null),b(f,oje,u),b(f,id,u),e(id,A5),e(A5,C_e),M(cL,C_e,null),e(id,yYo),e(id,w_e),e(w_e,LYo),b(f,rje,u),b(f,Do,u),M(fL,Do,null),e(Do,xYo),e(Do,dd),e(dd,$Yo),e(dd,QX),e(QX,kYo),e(dd,SYo),e(dd,HX),e(HX,RYo),e(dd,PYo),e(Do,BYo),e(Do,mL),e(mL,IYo),e(mL,A_e),e(A_e,NYo),e(mL,qYo),e(Do,jYo),e(Do,ut),M(gL,ut,null),e(ut,DYo),e(ut,y_e),e(y_e,GYo),e(ut,OYo),e(ut,cd),e(cd,VYo),e(cd,L_e),e(L_e,XYo),e(cd,zYo),e(cd,UX),e(UX,WYo),e(cd,QYo),e(ut,HYo),M(y5,ut,null),e(Do,UYo),e(Do,io),M(hL,io,null),e(io,JYo),e(io,x_e),e(x_e,YYo),e(io,KYo),e(io,Ga),e(Ga,ZYo),e(Ga,$_e),e($_e,eKo),e(Ga,oKo),e(Ga,k_e),e(k_e,rKo),e(Ga,tKo),e(Ga,S_e),e(S_e,aKo),e(Ga,nKo),e(io,sKo),e(io,R_e),e(R_e,L5),e(L5,P_e),e(P_e,lKo),e(L5,iKo),e(L5,JX),e(JX,dKo),e(L5,cKo),e(io,fKo),e(io,x5),e(x5,mKo),e(x5,B_e),e(B_e,gKo),e(x5,hKo),e(x5,I_e),e(I_e,pKo),e(io,_Ko),M($5,io,null),b(f,tje,u),b(f,fd,u),e(fd,k5),e(k5,N_e),M(pL,N_e,null),e(fd,uKo),e(fd,q_e),e(q_e,bKo),b(f,aje,u),b(f,Go,u),M(_L,Go,null),e(Go,vKo),e(Go,md),e(md,FKo),e(md,YX),e(YX,TKo),e(md,MKo),e(md,KX),e(KX,EKo),e(md,CKo),e(Go,wKo),e(Go,uL),e(uL,AKo),e(uL,j_e),e(j_e,yKo),e(uL,LKo),e(Go,xKo),e(Go,bt),M(bL,bt,null),e(bt,$Ko),e(bt,D_e),e(D_e,kKo),e(bt,SKo),e(bt,gd),e(gd,RKo),e(gd,G_e),e(G_e,PKo),e(gd,BKo),e(gd,ZX),e(ZX,IKo),e(gd,NKo),e(bt,qKo),M(S5,bt,null),e(Go,jKo),e(Go,co),M(vL,co,null),e(co,DKo),e(co,O_e),e(O_e,GKo),e(co,OKo),e(co,Oa),e(Oa,VKo),e(Oa,V_e),e(V_e,XKo),e(Oa,zKo),e(Oa,X_e),e(X_e,WKo),e(Oa,QKo),e(Oa,z_e),e(z_e,HKo),e(Oa,UKo),e(co,JKo),e(co,ke),e(ke,R5),e(R5,W_e),e(W_e,YKo),e(R5,KKo),e(R5,ez),e(ez,ZKo),e(R5,eZo),e(ke,oZo),e(ke,P5),e(P5,Q_e),e(Q_e,rZo),e(P5,tZo),e(P5,oz),e(oz,aZo),e(P5,nZo),e(ke,sZo),e(ke,B5),e(B5,H_e),e(H_e,lZo),e(B5,iZo),e(B5,rz),e(rz,dZo),e(B5,cZo),e(ke,fZo),e(ke,I5),e(I5,U_e),e(U_e,mZo),e(I5,gZo),e(I5,tz),e(tz,hZo),e(I5,pZo),e(ke,_Zo),e(ke,N5),e(N5,J_e),e(J_e,uZo),e(N5,bZo),e(N5,az),e(az,vZo),e(N5,FZo),e(ke,TZo),e(ke,q5),e(q5,Y_e),e(Y_e,MZo),e(q5,EZo),e(q5,nz),e(nz,CZo),e(q5,wZo),e(ke,AZo),e(ke,j5),e(j5,K_e),e(K_e,yZo),e(j5,LZo),e(j5,sz),e(sz,xZo),e(j5,$Zo),e(ke,kZo),e(ke,D5),e(D5,Z_e),e(Z_e,SZo),e(D5,RZo),e(D5,lz),e(lz,PZo),e(D5,BZo),e(ke,IZo),e(ke,G5),e(G5,eue),e(eue,NZo),e(G5,qZo),e(G5,iz),e(iz,jZo),e(G5,DZo),e(co,GZo),e(co,O5),e(O5,OZo),e(O5,oue),e(oue,VZo),e(O5,XZo),e(O5,rue),e(rue,zZo),e(co,WZo),M(V5,co,null),b(f,nje,u),b(f,hd,u),e(hd,X5),e(X5,tue),M(FL,tue,null),e(hd,QZo),e(hd,aue),e(aue,HZo),b(f,sje,u),b(f,Oo,u),M(TL,Oo,null),e(Oo,UZo),e(Oo,pd),e(pd,JZo),e(pd,dz),e(dz,YZo),e(pd,KZo),e(pd,cz),e(cz,ZZo),e(pd,eer),e(Oo,oer),e(Oo,ML),e(ML,rer),e(ML,nue),e(nue,ter),e(ML,aer),e(Oo,ner),e(Oo,vt),M(EL,vt,null),e(vt,ser),e(vt,sue),e(sue,ler),e(vt,ier),e(vt,_d),e(_d,der),e(_d,lue),e(lue,cer),e(_d,fer),e(_d,fz),e(fz,mer),e(_d,ger),e(vt,her),M(z5,vt,null),e(Oo,per),e(Oo,fo),M(CL,fo,null),e(fo,_er),e(fo,iue),e(iue,uer),e(fo,ber),e(fo,Va),e(Va,ver),e(Va,due),e(due,Fer),e(Va,Ter),e(Va,cue),e(cue,Mer),e(Va,Eer),e(Va,fue),e(fue,Cer),e(Va,wer),e(fo,Aer),e(fo,Kr),e(Kr,W5),e(W5,mue),e(mue,yer),e(W5,Ler),e(W5,mz),e(mz,xer),e(W5,$er),e(Kr,ker),e(Kr,Q5),e(Q5,gue),e(gue,Ser),e(Q5,Rer),e(Q5,gz),e(gz,Per),e(Q5,Ber),e(Kr,Ier),e(Kr,H5),e(H5,hue),e(hue,Ner),e(H5,qer),e(H5,hz),e(hz,jer),e(H5,Der),e(Kr,Ger),e(Kr,U5),e(U5,pue),e(pue,Oer),e(U5,Ver),e(U5,pz),e(pz,Xer),e(U5,zer),e(Kr,Wer),e(Kr,J5),e(J5,_ue),e(_ue,Qer),e(J5,Her),e(J5,_z),e(_z,Uer),e(J5,Jer),e(fo,Yer),e(fo,Y5),e(Y5,Ker),e(Y5,uue),e(uue,Zer),e(Y5,eor),e(Y5,bue),e(bue,oor),e(fo,ror),M(K5,fo,null),b(f,lje,u),b(f,ud,u),e(ud,Z5),e(Z5,vue),M(wL,vue,null),e(ud,tor),e(ud,Fue),e(Fue,aor),b(f,ije,u),b(f,Vo,u),M(AL,Vo,null),e(Vo,nor),e(Vo,bd),e(bd,sor),e(bd,uz),e(uz,lor),e(bd,ior),e(bd,bz),e(bz,dor),e(bd,cor),e(Vo,mor),e(Vo,yL),e(yL,gor),e(yL,Tue),e(Tue,hor),e(yL,por),e(Vo,_or),e(Vo,Ft),M(LL,Ft,null),e(Ft,uor),e(Ft,Mue),e(Mue,bor),e(Ft,vor),e(Ft,vd),e(vd,For),e(vd,Eue),e(Eue,Tor),e(vd,Mor),e(vd,vz),e(vz,Eor),e(vd,Cor),e(Ft,wor),M(e3,Ft,null),e(Vo,Aor),e(Vo,mo),M(xL,mo,null),e(mo,yor),e(mo,Cue),e(Cue,Lor),e(mo,xor),e(mo,Xa),e(Xa,$or),e(Xa,wue),e(wue,kor),e(Xa,Sor),e(Xa,Aue),e(Aue,Ror),e(Xa,Por),e(Xa,yue),e(yue,Bor),e(Xa,Ior),e(mo,Nor),e(mo,Se),e(Se,o3),e(o3,Lue),e(Lue,qor),e(o3,jor),e(o3,Fz),e(Fz,Dor),e(o3,Gor),e(Se,Oor),e(Se,r3),e(r3,xue),e(xue,Vor),e(r3,Xor),e(r3,Tz),e(Tz,zor),e(r3,Wor),e(Se,Qor),e(Se,t3),e(t3,$ue),e($ue,Hor),e(t3,Uor),e(t3,Mz),e(Mz,Jor),e(t3,Yor),e(Se,Kor),e(Se,a3),e(a3,kue),e(kue,Zor),e(a3,err),e(a3,Ez),e(Ez,orr),e(a3,rrr),e(Se,trr),e(Se,n3),e(n3,Sue),e(Sue,arr),e(n3,nrr),e(n3,Cz),e(Cz,srr),e(n3,lrr),e(Se,irr),e(Se,s3),e(s3,Rue),e(Rue,drr),e(s3,crr),e(s3,wz),e(wz,frr),e(s3,mrr),e(Se,grr),e(Se,l3),e(l3,Pue),e(Pue,hrr),e(l3,prr),e(l3,Az),e(Az,_rr),e(l3,urr),e(Se,brr),e(Se,i3),e(i3,Bue),e(Bue,vrr),e(i3,Frr),e(i3,yz),e(yz,Trr),e(i3,Mrr),e(Se,Err),e(Se,d3),e(d3,Iue),e(Iue,Crr),e(d3,wrr),e(d3,Lz),e(Lz,Arr),e(d3,yrr),e(mo,Lrr),e(mo,c3),e(c3,xrr),e(c3,Nue),e(Nue,$rr),e(c3,krr),e(c3,que),e(que,Srr),e(mo,Rrr),M(f3,mo,null),b(f,dje,u),b(f,Fd,u),e(Fd,m3),e(m3,jue),M($L,jue,null),e(Fd,Prr),e(Fd,Due),e(Due,Brr),b(f,cje,u),b(f,Xo,u),M(kL,Xo,null),e(Xo,Irr),e(Xo,Td),e(Td,Nrr),e(Td,xz),e(xz,qrr),e(Td,jrr),e(Td,$z),e($z,Drr),e(Td,Grr),e(Xo,Orr),e(Xo,SL),e(SL,Vrr),e(SL,Gue),e(Gue,Xrr),e(SL,zrr),e(Xo,Wrr),e(Xo,Tt),M(RL,Tt,null),e(Tt,Qrr),e(Tt,Oue),e(Oue,Hrr),e(Tt,Urr),e(Tt,Md),e(Md,Jrr),e(Md,Vue),e(Vue,Yrr),e(Md,Krr),e(Md,kz),e(kz,Zrr),e(Md,etr),e(Tt,otr),M(g3,Tt,null),e(Xo,rtr),e(Xo,go),M(PL,go,null),e(go,ttr),e(go,Xue),e(Xue,atr),e(go,ntr),e(go,za),e(za,str),e(za,zue),e(zue,ltr),e(za,itr),e(za,Wue),e(Wue,dtr),e(za,ctr),e(za,Que),e(Que,ftr),e(za,mtr),e(go,gtr),e(go,BL),e(BL,h3),e(h3,Hue),e(Hue,htr),e(h3,ptr),e(h3,Sz),e(Sz,_tr),e(h3,utr),e(BL,btr),e(BL,p3),e(p3,Uue),e(Uue,vtr),e(p3,Ftr),e(p3,Rz),e(Rz,Ttr),e(p3,Mtr),e(go,Etr),e(go,_3),e(_3,Ctr),e(_3,Jue),e(Jue,wtr),e(_3,Atr),e(_3,Yue),e(Yue,ytr),e(go,Ltr),M(u3,go,null),b(f,fje,u),b(f,Ed,u),e(Ed,b3),e(b3,Kue),M(IL,Kue,null),e(Ed,xtr),e(Ed,Zue),e(Zue,$tr),b(f,mje,u),b(f,zo,u),M(NL,zo,null),e(zo,ktr),e(zo,Cd),e(Cd,Str),e(Cd,Pz),e(Pz,Rtr),e(Cd,Ptr),e(Cd,Bz),e(Bz,Btr),e(Cd,Itr),e(zo,Ntr),e(zo,qL),e(qL,qtr),e(qL,e1e),e(e1e,jtr),e(qL,Dtr),e(zo,Gtr),e(zo,Mt),M(jL,Mt,null),e(Mt,Otr),e(Mt,o1e),e(o1e,Vtr),e(Mt,Xtr),e(Mt,wd),e(wd,ztr),e(wd,r1e),e(r1e,Wtr),e(wd,Qtr),e(wd,Iz),e(Iz,Htr),e(wd,Utr),e(Mt,Jtr),M(v3,Mt,null),e(zo,Ytr),e(zo,ho),M(DL,ho,null),e(ho,Ktr),e(ho,t1e),e(t1e,Ztr),e(ho,ear),e(ho,Wa),e(Wa,oar),e(Wa,a1e),e(a1e,rar),e(Wa,tar),e(Wa,n1e),e(n1e,aar),e(Wa,nar),e(Wa,s1e),e(s1e,sar),e(Wa,lar),e(ho,iar),e(ho,Zr),e(Zr,F3),e(F3,l1e),e(l1e,dar),e(F3,car),e(F3,Nz),e(Nz,far),e(F3,mar),e(Zr,gar),e(Zr,T3),e(T3,i1e),e(i1e,har),e(T3,par),e(T3,qz),e(qz,_ar),e(T3,uar),e(Zr,bar),e(Zr,M3),e(M3,d1e),e(d1e,Far),e(M3,Tar),e(M3,jz),e(jz,Mar),e(M3,Ear),e(Zr,Car),e(Zr,E3),e(E3,c1e),e(c1e,war),e(E3,Aar),e(E3,Dz),e(Dz,yar),e(E3,Lar),e(Zr,xar),e(Zr,C3),e(C3,f1e),e(f1e,$ar),e(C3,kar),e(C3,Gz),e(Gz,Sar),e(C3,Rar),e(ho,Par),e(ho,w3),e(w3,Bar),e(w3,m1e),e(m1e,Iar),e(w3,Nar),e(w3,g1e),e(g1e,qar),e(ho,jar),M(A3,ho,null),b(f,gje,u),b(f,Ad,u),e(Ad,y3),e(y3,h1e),M(GL,h1e,null),e(Ad,Dar),e(Ad,p1e),e(p1e,Gar),b(f,hje,u),b(f,Wo,u),M(OL,Wo,null),e(Wo,Oar),e(Wo,yd),e(yd,Var),e(yd,Oz),e(Oz,Xar),e(yd,zar),e(yd,Vz),e(Vz,War),e(yd,Qar),e(Wo,Har),e(Wo,VL),e(VL,Uar),e(VL,_1e),e(_1e,Jar),e(VL,Yar),e(Wo,Kar),e(Wo,Et),M(XL,Et,null),e(Et,Zar),e(Et,u1e),e(u1e,enr),e(Et,onr),e(Et,Ld),e(Ld,rnr),e(Ld,b1e),e(b1e,tnr),e(Ld,anr),e(Ld,Xz),e(Xz,nnr),e(Ld,snr),e(Et,lnr),M(L3,Et,null),e(Wo,inr),e(Wo,po),M(zL,po,null),e(po,dnr),e(po,v1e),e(v1e,cnr),e(po,fnr),e(po,Qa),e(Qa,mnr),e(Qa,F1e),e(F1e,gnr),e(Qa,hnr),e(Qa,T1e),e(T1e,pnr),e(Qa,_nr),e(Qa,M1e),e(M1e,unr),e(Qa,bnr),e(po,vnr),e(po,xd),e(xd,x3),e(x3,E1e),e(E1e,Fnr),e(x3,Tnr),e(x3,zz),e(zz,Mnr),e(x3,Enr),e(xd,Cnr),e(xd,$3),e($3,C1e),e(C1e,wnr),e($3,Anr),e($3,Wz),e(Wz,ynr),e($3,Lnr),e(xd,xnr),e(xd,k3),e(k3,w1e),e(w1e,$nr),e(k3,knr),e(k3,Qz),e(Qz,Snr),e(k3,Rnr),e(po,Pnr),e(po,S3),e(S3,Bnr),e(S3,A1e),e(A1e,Inr),e(S3,Nnr),e(S3,y1e),e(y1e,qnr),e(po,jnr),M(R3,po,null),b(f,pje,u),b(f,$d,u),e($d,P3),e(P3,L1e),M(WL,L1e,null),e($d,Dnr),e($d,x1e),e(x1e,Gnr),b(f,_je,u),b(f,Qo,u),M(QL,Qo,null),e(Qo,Onr),e(Qo,kd),e(kd,Vnr),e(kd,Hz),e(Hz,Xnr),e(kd,znr),e(kd,Uz),e(Uz,Wnr),e(kd,Qnr),e(Qo,Hnr),e(Qo,HL),e(HL,Unr),e(HL,$1e),e($1e,Jnr),e(HL,Ynr),e(Qo,Knr),e(Qo,Ct),M(UL,Ct,null),e(Ct,Znr),e(Ct,k1e),e(k1e,esr),e(Ct,osr),e(Ct,Sd),e(Sd,rsr),e(Sd,S1e),e(S1e,tsr),e(Sd,asr),e(Sd,Jz),e(Jz,nsr),e(Sd,ssr),e(Ct,lsr),M(B3,Ct,null),e(Qo,isr),e(Qo,_o),M(JL,_o,null),e(_o,dsr),e(_o,R1e),e(R1e,csr),e(_o,fsr),e(_o,Ha),e(Ha,msr),e(Ha,P1e),e(P1e,gsr),e(Ha,hsr),e(Ha,B1e),e(B1e,psr),e(Ha,_sr),e(Ha,I1e),e(I1e,usr),e(Ha,bsr),e(_o,vsr),e(_o,YL),e(YL,I3),e(I3,N1e),e(N1e,Fsr),e(I3,Tsr),e(I3,Yz),e(Yz,Msr),e(I3,Esr),e(YL,Csr),e(YL,N3),e(N3,q1e),e(q1e,wsr),e(N3,Asr),e(N3,Kz),e(Kz,ysr),e(N3,Lsr),e(_o,xsr),e(_o,q3),e(q3,$sr),e(q3,j1e),e(j1e,ksr),e(q3,Ssr),e(q3,D1e),e(D1e,Rsr),e(_o,Psr),M(j3,_o,null),b(f,uje,u),b(f,Rd,u),e(Rd,D3),e(D3,G1e),M(KL,G1e,null),e(Rd,Bsr),e(Rd,O1e),e(O1e,Isr),b(f,bje,u),b(f,Ho,u),M(ZL,Ho,null),e(Ho,Nsr),e(Ho,Pd),e(Pd,qsr),e(Pd,Zz),e(Zz,jsr),e(Pd,Dsr),e(Pd,eW),e(eW,Gsr),e(Pd,Osr),e(Ho,Vsr),e(Ho,e8),e(e8,Xsr),e(e8,V1e),e(V1e,zsr),e(e8,Wsr),e(Ho,Qsr),e(Ho,wt),M(o8,wt,null),e(wt,Hsr),e(wt,X1e),e(X1e,Usr),e(wt,Jsr),e(wt,Bd),e(Bd,Ysr),e(Bd,z1e),e(z1e,Ksr),e(Bd,Zsr),e(Bd,oW),e(oW,elr),e(Bd,olr),e(wt,rlr),M(G3,wt,null),e(Ho,tlr),e(Ho,uo),M(r8,uo,null),e(uo,alr),e(uo,W1e),e(W1e,nlr),e(uo,slr),e(uo,Ua),e(Ua,llr),e(Ua,Q1e),e(Q1e,ilr),e(Ua,dlr),e(Ua,H1e),e(H1e,clr),e(Ua,flr),e(Ua,U1e),e(U1e,mlr),e(Ua,glr),e(uo,hlr),e(uo,J1e),e(J1e,O3),e(O3,Y1e),e(Y1e,plr),e(O3,_lr),e(O3,rW),e(rW,ulr),e(O3,blr),e(uo,vlr),e(uo,V3),e(V3,Flr),e(V3,K1e),e(K1e,Tlr),e(V3,Mlr),e(V3,Z1e),e(Z1e,Elr),e(uo,Clr),M(X3,uo,null),b(f,vje,u),b(f,Id,u),e(Id,z3),e(z3,ebe),M(t8,ebe,null),e(Id,wlr),e(Id,obe),e(obe,Alr),b(f,Fje,u),b(f,Uo,u),M(a8,Uo,null),e(Uo,ylr),e(Uo,Nd),e(Nd,Llr),e(Nd,tW),e(tW,xlr),e(Nd,$lr),e(Nd,aW),e(aW,klr),e(Nd,Slr),e(Uo,Rlr),e(Uo,n8),e(n8,Plr),e(n8,rbe),e(rbe,Blr),e(n8,Ilr),e(Uo,Nlr),e(Uo,At),M(s8,At,null),e(At,qlr),e(At,tbe),e(tbe,jlr),e(At,Dlr),e(At,qd),e(qd,Glr),e(qd,abe),e(abe,Olr),e(qd,Vlr),e(qd,nW),e(nW,Xlr),e(qd,zlr),e(At,Wlr),M(W3,At,null),e(Uo,Qlr),e(Uo,bo),M(l8,bo,null),e(bo,Hlr),e(bo,nbe),e(nbe,Ulr),e(bo,Jlr),e(bo,Ja),e(Ja,Ylr),e(Ja,sbe),e(sbe,Klr),e(Ja,Zlr),e(Ja,lbe),e(lbe,eir),e(Ja,oir),e(Ja,ibe),e(ibe,rir),e(Ja,tir),e(bo,air),e(bo,et),e(et,Q3),e(Q3,dbe),e(dbe,nir),e(Q3,sir),e(Q3,sW),e(sW,lir),e(Q3,iir),e(et,dir),e(et,H3),e(H3,cbe),e(cbe,cir),e(H3,fir),e(H3,lW),e(lW,mir),e(H3,gir),e(et,hir),e(et,U3),e(U3,fbe),e(fbe,pir),e(U3,_ir),e(U3,iW),e(iW,uir),e(U3,bir),e(et,vir),e(et,J3),e(J3,mbe),e(mbe,Fir),e(J3,Tir),e(J3,dW),e(dW,Mir),e(J3,Eir),e(et,Cir),e(et,Y3),e(Y3,gbe),e(gbe,wir),e(Y3,Air),e(Y3,cW),e(cW,yir),e(Y3,Lir),e(bo,xir),e(bo,K3),e(K3,$ir),e(K3,hbe),e(hbe,kir),e(K3,Sir),e(K3,pbe),e(pbe,Rir),e(bo,Pir),M(Z3,bo,null),b(f,Tje,u),b(f,jd,u),e(jd,eF),e(eF,_be),M(i8,_be,null),e(jd,Bir),e(jd,ube),e(ube,Iir),b(f,Mje,u),b(f,Jo,u),M(d8,Jo,null),e(Jo,Nir),e(Jo,Dd),e(Dd,qir),e(Dd,fW),e(fW,jir),e(Dd,Dir),e(Dd,mW),e(mW,Gir),e(Dd,Oir),e(Jo,Vir),e(Jo,c8),e(c8,Xir),e(c8,bbe),e(bbe,zir),e(c8,Wir),e(Jo,Qir),e(Jo,yt),M(f8,yt,null),e(yt,Hir),e(yt,vbe),e(vbe,Uir),e(yt,Jir),e(yt,Gd),e(Gd,Yir),e(Gd,Fbe),e(Fbe,Kir),e(Gd,Zir),e(Gd,gW),e(gW,edr),e(Gd,odr),e(yt,rdr),M(oF,yt,null),e(Jo,tdr),e(Jo,vo),M(m8,vo,null),e(vo,adr),e(vo,Tbe),e(Tbe,ndr),e(vo,sdr),e(vo,Ya),e(Ya,ldr),e(Ya,Mbe),e(Mbe,idr),e(Ya,ddr),e(Ya,Ebe),e(Ebe,cdr),e(Ya,fdr),e(Ya,Cbe),e(Cbe,mdr),e(Ya,gdr),e(vo,hdr),e(vo,wbe),e(wbe,rF),e(rF,Abe),e(Abe,pdr),e(rF,_dr),e(rF,hW),e(hW,udr),e(rF,bdr),e(vo,vdr),e(vo,tF),e(tF,Fdr),e(tF,ybe),e(ybe,Tdr),e(tF,Mdr),e(tF,Lbe),e(Lbe,Edr),e(vo,Cdr),M(aF,vo,null),b(f,Eje,u),b(f,Od,u),e(Od,nF),e(nF,xbe),M(g8,xbe,null),e(Od,wdr),e(Od,$be),e($be,Adr),b(f,Cje,u),b(f,Yo,u),M(h8,Yo,null),e(Yo,ydr),e(Yo,Vd),e(Vd,Ldr),e(Vd,pW),e(pW,xdr),e(Vd,$dr),e(Vd,_W),e(_W,kdr),e(Vd,Sdr),e(Yo,Rdr),e(Yo,p8),e(p8,Pdr),e(p8,kbe),e(kbe,Bdr),e(p8,Idr),e(Yo,Ndr),e(Yo,Lt),M(_8,Lt,null),e(Lt,qdr),e(Lt,Sbe),e(Sbe,jdr),e(Lt,Ddr),e(Lt,Xd),e(Xd,Gdr),e(Xd,Rbe),e(Rbe,Odr),e(Xd,Vdr),e(Xd,uW),e(uW,Xdr),e(Xd,zdr),e(Lt,Wdr),M(sF,Lt,null),e(Yo,Qdr),e(Yo,wr),M(u8,wr,null),e(wr,Hdr),e(wr,Pbe),e(Pbe,Udr),e(wr,Jdr),e(wr,Ka),e(Ka,Ydr),e(Ka,Bbe),e(Bbe,Kdr),e(Ka,Zdr),e(Ka,Ibe),e(Ibe,ecr),e(Ka,ocr),e(Ka,Nbe),e(Nbe,rcr),e(Ka,tcr),e(wr,acr),e(wr,q),e(q,lF),e(lF,qbe),e(qbe,ncr),e(lF,scr),e(lF,bW),e(bW,lcr),e(lF,icr),e(q,dcr),e(q,iF),e(iF,jbe),e(jbe,ccr),e(iF,fcr),e(iF,vW),e(vW,mcr),e(iF,gcr),e(q,hcr),e(q,dF),e(dF,Dbe),e(Dbe,pcr),e(dF,_cr),e(dF,FW),e(FW,ucr),e(dF,bcr),e(q,vcr),e(q,cF),e(cF,Gbe),e(Gbe,Fcr),e(cF,Tcr),e(cF,TW),e(TW,Mcr),e(cF,Ecr),e(q,Ccr),e(q,fF),e(fF,Obe),e(Obe,wcr),e(fF,Acr),e(fF,MW),e(MW,ycr),e(fF,Lcr),e(q,xcr),e(q,mF),e(mF,Vbe),e(Vbe,$cr),e(mF,kcr),e(mF,EW),e(EW,Scr),e(mF,Rcr),e(q,Pcr),e(q,gF),e(gF,Xbe),e(Xbe,Bcr),e(gF,Icr),e(gF,CW),e(CW,Ncr),e(gF,qcr),e(q,jcr),e(q,hF),e(hF,zbe),e(zbe,Dcr),e(hF,Gcr),e(hF,wW),e(wW,Ocr),e(hF,Vcr),e(q,Xcr),e(q,pF),e(pF,Wbe),e(Wbe,zcr),e(pF,Wcr),e(pF,AW),e(AW,Qcr),e(pF,Hcr),e(q,Ucr),e(q,_F),e(_F,Qbe),e(Qbe,Jcr),e(_F,Ycr),e(_F,yW),e(yW,Kcr),e(_F,Zcr),e(q,efr),e(q,uF),e(uF,Hbe),e(Hbe,ofr),e(uF,rfr),e(uF,LW),e(LW,tfr),e(uF,afr),e(q,nfr),e(q,bF),e(bF,Ube),e(Ube,sfr),e(bF,lfr),e(bF,xW),e(xW,ifr),e(bF,dfr),e(q,cfr),e(q,vF),e(vF,Jbe),e(Jbe,ffr),e(vF,mfr),e(vF,$W),e($W,gfr),e(vF,hfr),e(q,pfr),e(q,FF),e(FF,Ybe),e(Ybe,_fr),e(FF,ufr),e(FF,kW),e(kW,bfr),e(FF,vfr),e(q,Ffr),e(q,TF),e(TF,Kbe),e(Kbe,Tfr),e(TF,Mfr),e(TF,SW),e(SW,Efr),e(TF,Cfr),e(q,wfr),e(q,MF),e(MF,Zbe),e(Zbe,Afr),e(MF,yfr),e(MF,RW),e(RW,Lfr),e(MF,xfr),e(q,$fr),e(q,EF),e(EF,e2e),e(e2e,kfr),e(EF,Sfr),e(EF,PW),e(PW,Rfr),e(EF,Pfr),e(q,Bfr),e(q,Is),e(Is,o2e),e(o2e,Ifr),e(Is,Nfr),e(Is,BW),e(BW,qfr),e(Is,jfr),e(Is,IW),e(IW,Dfr),e(Is,Gfr),e(q,Ofr),e(q,CF),e(CF,r2e),e(r2e,Vfr),e(CF,Xfr),e(CF,NW),e(NW,zfr),e(CF,Wfr),e(q,Qfr),e(q,wF),e(wF,t2e),e(t2e,Hfr),e(wF,Ufr),e(wF,qW),e(qW,Jfr),e(wF,Yfr),e(q,Kfr),e(q,AF),e(AF,a2e),e(a2e,Zfr),e(AF,emr),e(AF,jW),e(jW,omr),e(AF,rmr),e(q,tmr),e(q,yF),e(yF,n2e),e(n2e,amr),e(yF,nmr),e(yF,DW),e(DW,smr),e(yF,lmr),e(q,imr),e(q,LF),e(LF,s2e),e(s2e,dmr),e(LF,cmr),e(LF,GW),e(GW,fmr),e(LF,mmr),e(q,gmr),e(q,xF),e(xF,l2e),e(l2e,hmr),e(xF,pmr),e(xF,OW),e(OW,_mr),e(xF,umr),e(q,bmr),e(q,$F),e($F,i2e),e(i2e,vmr),e($F,Fmr),e($F,VW),e(VW,Tmr),e($F,Mmr),e(q,Emr),e(q,kF),e(kF,d2e),e(d2e,Cmr),e(kF,wmr),e(kF,XW),e(XW,Amr),e(kF,ymr),e(q,Lmr),e(q,SF),e(SF,c2e),e(c2e,xmr),e(SF,$mr),e(SF,zW),e(zW,kmr),e(SF,Smr),e(q,Rmr),e(q,RF),e(RF,f2e),e(f2e,Pmr),e(RF,Bmr),e(RF,WW),e(WW,Imr),e(RF,Nmr),e(q,qmr),e(q,PF),e(PF,m2e),e(m2e,jmr),e(PF,Dmr),e(PF,QW),e(QW,Gmr),e(PF,Omr),e(q,Vmr),e(q,BF),e(BF,g2e),e(g2e,Xmr),e(BF,zmr),e(BF,HW),e(HW,Wmr),e(BF,Qmr),e(q,Hmr),e(q,IF),e(IF,h2e),e(h2e,Umr),e(IF,Jmr),e(IF,UW),e(UW,Ymr),e(IF,Kmr),e(q,Zmr),e(q,NF),e(NF,p2e),e(p2e,egr),e(NF,ogr),e(NF,JW),e(JW,rgr),e(NF,tgr),e(q,agr),e(q,qF),e(qF,_2e),e(_2e,ngr),e(qF,sgr),e(qF,YW),e(YW,lgr),e(qF,igr),e(q,dgr),e(q,jF),e(jF,u2e),e(u2e,cgr),e(jF,fgr),e(jF,KW),e(KW,mgr),e(jF,ggr),e(q,hgr),e(q,DF),e(DF,b2e),e(b2e,pgr),e(DF,_gr),e(DF,ZW),e(ZW,ugr),e(DF,bgr),e(q,vgr),e(q,GF),e(GF,v2e),e(v2e,Fgr),e(GF,Tgr),e(GF,eQ),e(eQ,Mgr),e(GF,Egr),e(q,Cgr),e(q,OF),e(OF,F2e),e(F2e,wgr),e(OF,Agr),e(OF,oQ),e(oQ,ygr),e(OF,Lgr),e(q,xgr),e(q,VF),e(VF,T2e),e(T2e,$gr),e(VF,kgr),e(VF,rQ),e(rQ,Sgr),e(VF,Rgr),e(q,Pgr),e(q,XF),e(XF,M2e),e(M2e,Bgr),e(XF,Igr),e(XF,tQ),e(tQ,Ngr),e(XF,qgr),e(q,jgr),e(q,zF),e(zF,E2e),e(E2e,Dgr),e(zF,Ggr),e(zF,aQ),e(aQ,Ogr),e(zF,Vgr),e(q,Xgr),e(q,WF),e(WF,C2e),e(C2e,zgr),e(WF,Wgr),e(WF,nQ),e(nQ,Qgr),e(WF,Hgr),e(q,Ugr),e(q,QF),e(QF,w2e),e(w2e,Jgr),e(QF,Ygr),e(QF,sQ),e(sQ,Kgr),e(QF,Zgr),e(q,ehr),e(q,HF),e(HF,A2e),e(A2e,ohr),e(HF,rhr),e(HF,lQ),e(lQ,thr),e(HF,ahr),e(q,nhr),e(q,UF),e(UF,y2e),e(y2e,shr),e(UF,lhr),e(UF,iQ),e(iQ,ihr),e(UF,dhr),e(q,chr),e(q,JF),e(JF,L2e),e(L2e,fhr),e(JF,mhr),e(JF,dQ),e(dQ,ghr),e(JF,hhr),e(q,phr),e(q,YF),e(YF,x2e),e(x2e,_hr),e(YF,uhr),e(YF,cQ),e(cQ,bhr),e(YF,vhr),e(wr,Fhr),M(KF,wr,null),b(f,wje,u),b(f,zd,u),e(zd,ZF),e(ZF,$2e),M(b8,$2e,null),e(zd,Thr),e(zd,k2e),e(k2e,Mhr),b(f,Aje,u),b(f,Ko,u),M(v8,Ko,null),e(Ko,Ehr),e(Ko,Wd),e(Wd,Chr),e(Wd,fQ),e(fQ,whr),e(Wd,Ahr),e(Wd,mQ),e(mQ,yhr),e(Wd,Lhr),e(Ko,xhr),e(Ko,F8),e(F8,$hr),e(F8,S2e),e(S2e,khr),e(F8,Shr),e(Ko,Rhr),e(Ko,xt),M(T8,xt,null),e(xt,Phr),e(xt,R2e),e(R2e,Bhr),e(xt,Ihr),e(xt,Qd),e(Qd,Nhr),e(Qd,P2e),e(P2e,qhr),e(Qd,jhr),e(Qd,gQ),e(gQ,Dhr),e(Qd,Ghr),e(xt,Ohr),M(eT,xt,null),e(Ko,Vhr),e(Ko,Ar),M(M8,Ar,null),e(Ar,Xhr),e(Ar,B2e),e(B2e,zhr),e(Ar,Whr),e(Ar,Za),e(Za,Qhr),e(Za,I2e),e(I2e,Hhr),e(Za,Uhr),e(Za,N2e),e(N2e,Jhr),e(Za,Yhr),e(Za,q2e),e(q2e,Khr),e(Za,Zhr),e(Ar,epr),e(Ar,se),e(se,oT),e(oT,j2e),e(j2e,opr),e(oT,rpr),e(oT,hQ),e(hQ,tpr),e(oT,apr),e(se,npr),e(se,rT),e(rT,D2e),e(D2e,spr),e(rT,lpr),e(rT,pQ),e(pQ,ipr),e(rT,dpr),e(se,cpr),e(se,tT),e(tT,G2e),e(G2e,fpr),e(tT,mpr),e(tT,_Q),e(_Q,gpr),e(tT,hpr),e(se,ppr),e(se,aT),e(aT,O2e),e(O2e,_pr),e(aT,upr),e(aT,uQ),e(uQ,bpr),e(aT,vpr),e(se,Fpr),e(se,nT),e(nT,V2e),e(V2e,Tpr),e(nT,Mpr),e(nT,bQ),e(bQ,Epr),e(nT,Cpr),e(se,wpr),e(se,sT),e(sT,X2e),e(X2e,Apr),e(sT,ypr),e(sT,vQ),e(vQ,Lpr),e(sT,xpr),e(se,$pr),e(se,lT),e(lT,z2e),e(z2e,kpr),e(lT,Spr),e(lT,FQ),e(FQ,Rpr),e(lT,Ppr),e(se,Bpr),e(se,iT),e(iT,W2e),e(W2e,Ipr),e(iT,Npr),e(iT,TQ),e(TQ,qpr),e(iT,jpr),e(se,Dpr),e(se,dT),e(dT,Q2e),e(Q2e,Gpr),e(dT,Opr),e(dT,MQ),e(MQ,Vpr),e(dT,Xpr),e(se,zpr),e(se,cT),e(cT,H2e),e(H2e,Wpr),e(cT,Qpr),e(cT,EQ),e(EQ,Hpr),e(cT,Upr),e(se,Jpr),e(se,fT),e(fT,U2e),e(U2e,Ypr),e(fT,Kpr),e(fT,CQ),e(CQ,Zpr),e(fT,e_r),e(se,o_r),e(se,mT),e(mT,J2e),e(J2e,r_r),e(mT,t_r),e(mT,wQ),e(wQ,a_r),e(mT,n_r),e(se,s_r),e(se,gT),e(gT,Y2e),e(Y2e,l_r),e(gT,i_r),e(gT,AQ),e(AQ,d_r),e(gT,c_r),e(se,f_r),e(se,hT),e(hT,K2e),e(K2e,m_r),e(hT,g_r),e(hT,yQ),e(yQ,h_r),e(hT,p_r),e(se,__r),e(se,pT),e(pT,Z2e),e(Z2e,u_r),e(pT,b_r),e(pT,LQ),e(LQ,v_r),e(pT,F_r),e(se,T_r),e(se,_T),e(_T,e4e),e(e4e,M_r),e(_T,E_r),e(_T,xQ),e(xQ,C_r),e(_T,w_r),e(se,A_r),e(se,uT),e(uT,o4e),e(o4e,y_r),e(uT,L_r),e(uT,$Q),e($Q,x_r),e(uT,$_r),e(se,k_r),e(se,bT),e(bT,r4e),e(r4e,S_r),e(bT,R_r),e(bT,kQ),e(kQ,P_r),e(bT,B_r),e(se,I_r),e(se,vT),e(vT,t4e),e(t4e,N_r),e(vT,q_r),e(vT,SQ),e(SQ,j_r),e(vT,D_r),e(se,G_r),e(se,FT),e(FT,a4e),e(a4e,O_r),e(FT,V_r),e(FT,RQ),e(RQ,X_r),e(FT,z_r),e(se,W_r),e(se,TT),e(TT,n4e),e(n4e,Q_r),e(TT,H_r),e(TT,PQ),e(PQ,U_r),e(TT,J_r),e(se,Y_r),e(se,MT),e(MT,s4e),e(s4e,K_r),e(MT,Z_r),e(MT,BQ),e(BQ,eur),e(MT,our),e(se,rur),e(se,ET),e(ET,l4e),e(l4e,tur),e(ET,aur),e(ET,IQ),e(IQ,nur),e(ET,sur),e(Ar,lur),M(CT,Ar,null),b(f,yje,u),b(f,Hd,u),e(Hd,wT),e(wT,i4e),M(E8,i4e,null),e(Hd,iur),e(Hd,d4e),e(d4e,dur),b(f,Lje,u),b(f,Zo,u),M(C8,Zo,null),e(Zo,cur),e(Zo,Ud),e(Ud,fur),e(Ud,NQ),e(NQ,mur),e(Ud,gur),e(Ud,qQ),e(qQ,hur),e(Ud,pur),e(Zo,_ur),e(Zo,w8),e(w8,uur),e(w8,c4e),e(c4e,bur),e(w8,vur),e(Zo,Fur),e(Zo,$t),M(A8,$t,null),e($t,Tur),e($t,f4e),e(f4e,Mur),e($t,Eur),e($t,Jd),e(Jd,Cur),e(Jd,m4e),e(m4e,wur),e(Jd,Aur),e(Jd,jQ),e(jQ,yur),e(Jd,Lur),e($t,xur),M(AT,$t,null),e(Zo,$ur),e(Zo,yr),M(y8,yr,null),e(yr,kur),e(yr,g4e),e(g4e,Sur),e(yr,Rur),e(yr,en),e(en,Pur),e(en,h4e),e(h4e,Bur),e(en,Iur),e(en,p4e),e(p4e,Nur),e(en,qur),e(en,_4e),e(_4e,jur),e(en,Dur),e(yr,Gur),e(yr,Me),e(Me,yT),e(yT,u4e),e(u4e,Our),e(yT,Vur),e(yT,DQ),e(DQ,Xur),e(yT,zur),e(Me,Wur),e(Me,LT),e(LT,b4e),e(b4e,Qur),e(LT,Hur),e(LT,GQ),e(GQ,Uur),e(LT,Jur),e(Me,Yur),e(Me,xT),e(xT,v4e),e(v4e,Kur),e(xT,Zur),e(xT,OQ),e(OQ,e1r),e(xT,o1r),e(Me,r1r),e(Me,$T),e($T,F4e),e(F4e,t1r),e($T,a1r),e($T,VQ),e(VQ,n1r),e($T,s1r),e(Me,l1r),e(Me,kT),e(kT,T4e),e(T4e,i1r),e(kT,d1r),e(kT,XQ),e(XQ,c1r),e(kT,f1r),e(Me,m1r),e(Me,ST),e(ST,M4e),e(M4e,g1r),e(ST,h1r),e(ST,zQ),e(zQ,p1r),e(ST,_1r),e(Me,u1r),e(Me,RT),e(RT,E4e),e(E4e,b1r),e(RT,v1r),e(RT,WQ),e(WQ,F1r),e(RT,T1r),e(Me,M1r),e(Me,PT),e(PT,C4e),e(C4e,E1r),e(PT,C1r),e(PT,QQ),e(QQ,w1r),e(PT,A1r),e(Me,y1r),e(Me,BT),e(BT,w4e),e(w4e,L1r),e(BT,x1r),e(BT,HQ),e(HQ,$1r),e(BT,k1r),e(Me,S1r),e(Me,IT),e(IT,A4e),e(A4e,R1r),e(IT,P1r),e(IT,UQ),e(UQ,B1r),e(IT,I1r),e(Me,N1r),e(Me,NT),e(NT,y4e),e(y4e,q1r),e(NT,j1r),e(NT,JQ),e(JQ,D1r),e(NT,G1r),e(Me,O1r),e(Me,qT),e(qT,L4e),e(L4e,V1r),e(qT,X1r),e(qT,YQ),e(YQ,z1r),e(qT,W1r),e(yr,Q1r),M(jT,yr,null),b(f,xje,u),b(f,Yd,u),e(Yd,DT),e(DT,x4e),M(L8,x4e,null),e(Yd,H1r),e(Yd,$4e),e($4e,U1r),b(f,$je,u),b(f,er,u),M(x8,er,null),e(er,J1r),e(er,Kd),e(Kd,Y1r),e(Kd,KQ),e(KQ,K1r),e(Kd,Z1r),e(Kd,ZQ),e(ZQ,ebr),e(Kd,obr),e(er,rbr),e(er,$8),e($8,tbr),e($8,k4e),e(k4e,abr),e($8,nbr),e(er,sbr),e(er,kt),M(k8,kt,null),e(kt,lbr),e(kt,S4e),e(S4e,ibr),e(kt,dbr),e(kt,Zd),e(Zd,cbr),e(Zd,R4e),e(R4e,fbr),e(Zd,mbr),e(Zd,eH),e(eH,gbr),e(Zd,hbr),e(kt,pbr),M(GT,kt,null),e(er,_br),e(er,Lr),M(S8,Lr,null),e(Lr,ubr),e(Lr,P4e),e(P4e,bbr),e(Lr,vbr),e(Lr,on),e(on,Fbr),e(on,B4e),e(B4e,Tbr),e(on,Mbr),e(on,I4e),e(I4e,Ebr),e(on,Cbr),e(on,N4e),e(N4e,wbr),e(on,Abr),e(Lr,ybr),e(Lr,rn),e(rn,OT),e(OT,q4e),e(q4e,Lbr),e(OT,xbr),e(OT,oH),e(oH,$br),e(OT,kbr),e(rn,Sbr),e(rn,VT),e(VT,j4e),e(j4e,Rbr),e(VT,Pbr),e(VT,rH),e(rH,Bbr),e(VT,Ibr),e(rn,Nbr),e(rn,XT),e(XT,D4e),e(D4e,qbr),e(XT,jbr),e(XT,tH),e(tH,Dbr),e(XT,Gbr),e(rn,Obr),e(rn,zT),e(zT,G4e),e(G4e,Vbr),e(zT,Xbr),e(zT,aH),e(aH,zbr),e(zT,Wbr),e(Lr,Qbr),M(WT,Lr,null),b(f,kje,u),b(f,ec,u),e(ec,QT),e(QT,O4e),M(R8,O4e,null),e(ec,Hbr),e(ec,V4e),e(V4e,Ubr),b(f,Sje,u),b(f,or,u),M(P8,or,null),e(or,Jbr),e(or,oc),e(oc,Ybr),e(oc,nH),e(nH,Kbr),e(oc,Zbr),e(oc,sH),e(sH,e2r),e(oc,o2r),e(or,r2r),e(or,B8),e(B8,t2r),e(B8,X4e),e(X4e,a2r),e(B8,n2r),e(or,s2r),e(or,St),M(I8,St,null),e(St,l2r),e(St,z4e),e(z4e,i2r),e(St,d2r),e(St,rc),e(rc,c2r),e(rc,W4e),e(W4e,f2r),e(rc,m2r),e(rc,lH),e(lH,g2r),e(rc,h2r),e(St,p2r),M(HT,St,null),e(or,_2r),e(or,xr),M(N8,xr,null),e(xr,u2r),e(xr,Q4e),e(Q4e,b2r),e(xr,v2r),e(xr,tn),e(tn,F2r),e(tn,H4e),e(H4e,T2r),e(tn,M2r),e(tn,U4e),e(U4e,E2r),e(tn,C2r),e(tn,J4e),e(J4e,w2r),e(tn,A2r),e(xr,y2r),e(xr,ie),e(ie,UT),e(UT,Y4e),e(Y4e,L2r),e(UT,x2r),e(UT,iH),e(iH,$2r),e(UT,k2r),e(ie,S2r),e(ie,JT),e(JT,K4e),e(K4e,R2r),e(JT,P2r),e(JT,dH),e(dH,B2r),e(JT,I2r),e(ie,N2r),e(ie,YT),e(YT,Z4e),e(Z4e,q2r),e(YT,j2r),e(YT,cH),e(cH,D2r),e(YT,G2r),e(ie,O2r),e(ie,KT),e(KT,eve),e(eve,V2r),e(KT,X2r),e(KT,fH),e(fH,z2r),e(KT,W2r),e(ie,Q2r),e(ie,ZT),e(ZT,ove),e(ove,H2r),e(ZT,U2r),e(ZT,mH),e(mH,J2r),e(ZT,Y2r),e(ie,K2r),e(ie,e7),e(e7,rve),e(rve,Z2r),e(e7,e4r),e(e7,gH),e(gH,o4r),e(e7,r4r),e(ie,t4r),e(ie,o7),e(o7,tve),e(tve,a4r),e(o7,n4r),e(o7,hH),e(hH,s4r),e(o7,l4r),e(ie,i4r),e(ie,r7),e(r7,ave),e(ave,d4r),e(r7,c4r),e(r7,pH),e(pH,f4r),e(r7,m4r),e(ie,g4r),e(ie,t7),e(t7,nve),e(nve,h4r),e(t7,p4r),e(t7,_H),e(_H,_4r),e(t7,u4r),e(ie,b4r),e(ie,a7),e(a7,sve),e(sve,v4r),e(a7,F4r),e(a7,uH),e(uH,T4r),e(a7,M4r),e(ie,E4r),e(ie,n7),e(n7,lve),e(lve,C4r),e(n7,w4r),e(n7,bH),e(bH,A4r),e(n7,y4r),e(ie,L4r),e(ie,s7),e(s7,ive),e(ive,x4r),e(s7,$4r),e(s7,vH),e(vH,k4r),e(s7,S4r),e(ie,R4r),e(ie,l7),e(l7,dve),e(dve,P4r),e(l7,B4r),e(l7,FH),e(FH,I4r),e(l7,N4r),e(ie,q4r),e(ie,i7),e(i7,cve),e(cve,j4r),e(i7,D4r),e(i7,TH),e(TH,G4r),e(i7,O4r),e(ie,V4r),e(ie,d7),e(d7,fve),e(fve,X4r),e(d7,z4r),e(d7,MH),e(MH,W4r),e(d7,Q4r),e(ie,H4r),e(ie,c7),e(c7,mve),e(mve,U4r),e(c7,J4r),e(c7,EH),e(EH,Y4r),e(c7,K4r),e(ie,Z4r),e(ie,f7),e(f7,gve),e(gve,evr),e(f7,ovr),e(f7,CH),e(CH,rvr),e(f7,tvr),e(ie,avr),e(ie,m7),e(m7,hve),e(hve,nvr),e(m7,svr),e(m7,wH),e(wH,lvr),e(m7,ivr),e(ie,dvr),e(ie,g7),e(g7,pve),e(pve,cvr),e(g7,fvr),e(g7,AH),e(AH,mvr),e(g7,gvr),e(ie,hvr),e(ie,h7),e(h7,_ve),e(_ve,pvr),e(h7,_vr),e(h7,yH),e(yH,uvr),e(h7,bvr),e(xr,vvr),M(p7,xr,null),b(f,Rje,u),b(f,tc,u),e(tc,_7),e(_7,uve),M(q8,uve,null),e(tc,Fvr),e(tc,bve),e(bve,Tvr),b(f,Pje,u),b(f,rr,u),M(j8,rr,null),e(rr,Mvr),e(rr,ac),e(ac,Evr),e(ac,LH),e(LH,Cvr),e(ac,wvr),e(ac,xH),e(xH,Avr),e(ac,yvr),e(rr,Lvr),e(rr,D8),e(D8,xvr),e(D8,vve),e(vve,$vr),e(D8,kvr),e(rr,Svr),e(rr,Rt),M(G8,Rt,null),e(Rt,Rvr),e(Rt,Fve),e(Fve,Pvr),e(Rt,Bvr),e(Rt,nc),e(nc,Ivr),e(nc,Tve),e(Tve,Nvr),e(nc,qvr),e(nc,$H),e($H,jvr),e(nc,Dvr),e(Rt,Gvr),M(u7,Rt,null),e(rr,Ovr),e(rr,$r),M(O8,$r,null),e($r,Vvr),e($r,Mve),e(Mve,Xvr),e($r,zvr),e($r,an),e(an,Wvr),e(an,Eve),e(Eve,Qvr),e(an,Hvr),e(an,Cve),e(Cve,Uvr),e(an,Jvr),e(an,wve),e(wve,Yvr),e(an,Kvr),e($r,Zvr),e($r,ye),e(ye,b7),e(b7,Ave),e(Ave,e5r),e(b7,o5r),e(b7,kH),e(kH,r5r),e(b7,t5r),e(ye,a5r),e(ye,v7),e(v7,yve),e(yve,n5r),e(v7,s5r),e(v7,SH),e(SH,l5r),e(v7,i5r),e(ye,d5r),e(ye,F7),e(F7,Lve),e(Lve,c5r),e(F7,f5r),e(F7,RH),e(RH,m5r),e(F7,g5r),e(ye,h5r),e(ye,T7),e(T7,xve),e(xve,p5r),e(T7,_5r),e(T7,PH),e(PH,u5r),e(T7,b5r),e(ye,v5r),e(ye,M7),e(M7,$ve),e($ve,F5r),e(M7,T5r),e(M7,BH),e(BH,M5r),e(M7,E5r),e(ye,C5r),e(ye,E7),e(E7,kve),e(kve,w5r),e(E7,A5r),e(E7,IH),e(IH,y5r),e(E7,L5r),e(ye,x5r),e(ye,C7),e(C7,Sve),e(Sve,$5r),e(C7,k5r),e(C7,NH),e(NH,S5r),e(C7,R5r),e(ye,P5r),e(ye,w7),e(w7,Rve),e(Rve,B5r),e(w7,I5r),e(w7,qH),e(qH,N5r),e(w7,q5r),e(ye,j5r),e(ye,A7),e(A7,Pve),e(Pve,D5r),e(A7,G5r),e(A7,jH),e(jH,O5r),e(A7,V5r),e(ye,X5r),e(ye,y7),e(y7,Bve),e(Bve,z5r),e(y7,W5r),e(y7,DH),e(DH,Q5r),e(y7,H5r),e($r,U5r),M(L7,$r,null),b(f,Bje,u),b(f,sc,u),e(sc,x7),e(x7,Ive),M(V8,Ive,null),e(sc,J5r),e(sc,Nve),e(Nve,Y5r),b(f,Ije,u),b(f,tr,u),M(X8,tr,null),e(tr,K5r),e(tr,lc),e(lc,Z5r),e(lc,GH),e(GH,e3r),e(lc,o3r),e(lc,OH),e(OH,r3r),e(lc,t3r),e(tr,a3r),e(tr,z8),e(z8,n3r),e(z8,qve),e(qve,s3r),e(z8,l3r),e(tr,i3r),e(tr,Pt),M(W8,Pt,null),e(Pt,d3r),e(Pt,jve),e(jve,c3r),e(Pt,f3r),e(Pt,ic),e(ic,m3r),e(ic,Dve),e(Dve,g3r),e(ic,h3r),e(ic,VH),e(VH,p3r),e(ic,_3r),e(Pt,u3r),M($7,Pt,null),e(tr,b3r),e(tr,kr),M(Q8,kr,null),e(kr,v3r),e(kr,Gve),e(Gve,F3r),e(kr,T3r),e(kr,nn),e(nn,M3r),e(nn,Ove),e(Ove,E3r),e(nn,C3r),e(nn,Vve),e(Vve,w3r),e(nn,A3r),e(nn,Xve),e(Xve,y3r),e(nn,L3r),e(kr,x3r),e(kr,oe),e(oe,k7),e(k7,zve),e(zve,$3r),e(k7,k3r),e(k7,XH),e(XH,S3r),e(k7,R3r),e(oe,P3r),e(oe,S7),e(S7,Wve),e(Wve,B3r),e(S7,I3r),e(S7,zH),e(zH,N3r),e(S7,q3r),e(oe,j3r),e(oe,R7),e(R7,Qve),e(Qve,D3r),e(R7,G3r),e(R7,WH),e(WH,O3r),e(R7,V3r),e(oe,X3r),e(oe,P7),e(P7,Hve),e(Hve,z3r),e(P7,W3r),e(P7,QH),e(QH,Q3r),e(P7,H3r),e(oe,U3r),e(oe,B7),e(B7,Uve),e(Uve,J3r),e(B7,Y3r),e(B7,HH),e(HH,K3r),e(B7,Z3r),e(oe,eFr),e(oe,I7),e(I7,Jve),e(Jve,oFr),e(I7,rFr),e(I7,UH),e(UH,tFr),e(I7,aFr),e(oe,nFr),e(oe,N7),e(N7,Yve),e(Yve,sFr),e(N7,lFr),e(N7,JH),e(JH,iFr),e(N7,dFr),e(oe,cFr),e(oe,q7),e(q7,Kve),e(Kve,fFr),e(q7,mFr),e(q7,YH),e(YH,gFr),e(q7,hFr),e(oe,pFr),e(oe,j7),e(j7,Zve),e(Zve,_Fr),e(j7,uFr),e(j7,KH),e(KH,bFr),e(j7,vFr),e(oe,FFr),e(oe,D7),e(D7,e5e),e(e5e,TFr),e(D7,MFr),e(D7,ZH),e(ZH,EFr),e(D7,CFr),e(oe,wFr),e(oe,G7),e(G7,o5e),e(o5e,AFr),e(G7,yFr),e(G7,eU),e(eU,LFr),e(G7,xFr),e(oe,$Fr),e(oe,O7),e(O7,r5e),e(r5e,kFr),e(O7,SFr),e(O7,oU),e(oU,RFr),e(O7,PFr),e(oe,BFr),e(oe,V7),e(V7,t5e),e(t5e,IFr),e(V7,NFr),e(V7,rU),e(rU,qFr),e(V7,jFr),e(oe,DFr),e(oe,X7),e(X7,a5e),e(a5e,GFr),e(X7,OFr),e(X7,tU),e(tU,VFr),e(X7,XFr),e(oe,zFr),e(oe,z7),e(z7,n5e),e(n5e,WFr),e(z7,QFr),e(z7,aU),e(aU,HFr),e(z7,UFr),e(oe,JFr),e(oe,W7),e(W7,s5e),e(s5e,YFr),e(W7,KFr),e(W7,nU),e(nU,ZFr),e(W7,eTr),e(oe,oTr),e(oe,Q7),e(Q7,l5e),e(l5e,rTr),e(Q7,tTr),e(Q7,sU),e(sU,aTr),e(Q7,nTr),e(oe,sTr),e(oe,H7),e(H7,i5e),e(i5e,lTr),e(H7,iTr),e(H7,lU),e(lU,dTr),e(H7,cTr),e(oe,fTr),e(oe,U7),e(U7,d5e),e(d5e,mTr),e(U7,gTr),e(U7,iU),e(iU,hTr),e(U7,pTr),e(oe,_Tr),e(oe,J7),e(J7,c5e),e(c5e,uTr),e(J7,bTr),e(J7,dU),e(dU,vTr),e(J7,FTr),e(oe,TTr),e(oe,Y7),e(Y7,f5e),e(f5e,MTr),e(Y7,ETr),e(Y7,cU),e(cU,CTr),e(Y7,wTr),e(oe,ATr),e(oe,K7),e(K7,m5e),e(m5e,yTr),e(K7,LTr),e(K7,fU),e(fU,xTr),e(K7,$Tr),e(oe,kTr),e(oe,Z7),e(Z7,g5e),e(g5e,STr),e(Z7,RTr),e(Z7,mU),e(mU,PTr),e(Z7,BTr),e(oe,ITr),e(oe,eM),e(eM,h5e),e(h5e,NTr),e(eM,qTr),e(eM,gU),e(gU,jTr),e(eM,DTr),e(oe,GTr),e(oe,oM),e(oM,p5e),e(p5e,OTr),e(oM,VTr),e(oM,hU),e(hU,XTr),e(oM,zTr),e(oe,WTr),e(oe,rM),e(rM,_5e),e(_5e,QTr),e(rM,HTr),e(rM,pU),e(pU,UTr),e(rM,JTr),e(kr,YTr),M(tM,kr,null),b(f,Nje,u),b(f,dc,u),e(dc,aM),e(aM,u5e),M(H8,u5e,null),e(dc,KTr),e(dc,b5e),e(b5e,ZTr),b(f,qje,u),b(f,ar,u),M(U8,ar,null),e(ar,e7r),e(ar,cc),e(cc,o7r),e(cc,_U),e(_U,r7r),e(cc,t7r),e(cc,uU),e(uU,a7r),e(cc,n7r),e(ar,s7r),e(ar,J8),e(J8,l7r),e(J8,v5e),e(v5e,i7r),e(J8,d7r),e(ar,c7r),e(ar,Bt),M(Y8,Bt,null),e(Bt,f7r),e(Bt,F5e),e(F5e,m7r),e(Bt,g7r),e(Bt,fc),e(fc,h7r),e(fc,T5e),e(T5e,p7r),e(fc,_7r),e(fc,bU),e(bU,u7r),e(fc,b7r),e(Bt,v7r),M(nM,Bt,null),e(ar,F7r),e(ar,Sr),M(K8,Sr,null),e(Sr,T7r),e(Sr,M5e),e(M5e,M7r),e(Sr,E7r),e(Sr,sn),e(sn,C7r),e(sn,E5e),e(E5e,w7r),e(sn,A7r),e(sn,C5e),e(C5e,y7r),e(sn,L7r),e(sn,w5e),e(w5e,x7r),e(sn,$7r),e(Sr,k7r),e(Sr,pe),e(pe,sM),e(sM,A5e),e(A5e,S7r),e(sM,R7r),e(sM,vU),e(vU,P7r),e(sM,B7r),e(pe,I7r),e(pe,lM),e(lM,y5e),e(y5e,N7r),e(lM,q7r),e(lM,FU),e(FU,j7r),e(lM,D7r),e(pe,G7r),e(pe,iM),e(iM,L5e),e(L5e,O7r),e(iM,V7r),e(iM,TU),e(TU,X7r),e(iM,z7r),e(pe,W7r),e(pe,dM),e(dM,x5e),e(x5e,Q7r),e(dM,H7r),e(dM,MU),e(MU,U7r),e(dM,J7r),e(pe,Y7r),e(pe,cM),e(cM,$5e),e($5e,K7r),e(cM,Z7r),e(cM,EU),e(EU,eMr),e(cM,oMr),e(pe,rMr),e(pe,fM),e(fM,k5e),e(k5e,tMr),e(fM,aMr),e(fM,CU),e(CU,nMr),e(fM,sMr),e(pe,lMr),e(pe,mM),e(mM,S5e),e(S5e,iMr),e(mM,dMr),e(mM,wU),e(wU,cMr),e(mM,fMr),e(pe,mMr),e(pe,gM),e(gM,R5e),e(R5e,gMr),e(gM,hMr),e(gM,AU),e(AU,pMr),e(gM,_Mr),e(pe,uMr),e(pe,hM),e(hM,P5e),e(P5e,bMr),e(hM,vMr),e(hM,yU),e(yU,FMr),e(hM,TMr),e(pe,MMr),e(pe,pM),e(pM,B5e),e(B5e,EMr),e(pM,CMr),e(pM,LU),e(LU,wMr),e(pM,AMr),e(pe,yMr),e(pe,_M),e(_M,I5e),e(I5e,LMr),e(_M,xMr),e(_M,xU),e(xU,$Mr),e(_M,kMr),e(pe,SMr),e(pe,uM),e(uM,N5e),e(N5e,RMr),e(uM,PMr),e(uM,$U),e($U,BMr),e(uM,IMr),e(pe,NMr),e(pe,bM),e(bM,q5e),e(q5e,qMr),e(bM,jMr),e(bM,kU),e(kU,DMr),e(bM,GMr),e(pe,OMr),e(pe,vM),e(vM,j5e),e(j5e,VMr),e(vM,XMr),e(vM,SU),e(SU,zMr),e(vM,WMr),e(pe,QMr),e(pe,FM),e(FM,D5e),e(D5e,HMr),e(FM,UMr),e(FM,RU),e(RU,JMr),e(FM,YMr),e(pe,KMr),e(pe,TM),e(TM,G5e),e(G5e,ZMr),e(TM,eEr),e(TM,PU),e(PU,oEr),e(TM,rEr),e(pe,tEr),e(pe,MM),e(MM,O5e),e(O5e,aEr),e(MM,nEr),e(MM,BU),e(BU,sEr),e(MM,lEr),e(Sr,iEr),M(EM,Sr,null),b(f,jje,u),b(f,mc,u),e(mc,CM),e(CM,V5e),M(Z8,V5e,null),e(mc,dEr),e(mc,X5e),e(X5e,cEr),b(f,Dje,u),b(f,nr,u),M(e9,nr,null),e(nr,fEr),e(nr,gc),e(gc,mEr),e(gc,IU),e(IU,gEr),e(gc,hEr),e(gc,NU),e(NU,pEr),e(gc,_Er),e(nr,uEr),e(nr,o9),e(o9,bEr),e(o9,z5e),e(z5e,vEr),e(o9,FEr),e(nr,TEr),e(nr,It),M(r9,It,null),e(It,MEr),e(It,W5e),e(W5e,EEr),e(It,CEr),e(It,hc),e(hc,wEr),e(hc,Q5e),e(Q5e,AEr),e(hc,yEr),e(hc,qU),e(qU,LEr),e(hc,xEr),e(It,$Er),M(wM,It,null),e(nr,kEr),e(nr,Rr),M(t9,Rr,null),e(Rr,SEr),e(Rr,H5e),e(H5e,REr),e(Rr,PEr),e(Rr,ln),e(ln,BEr),e(ln,U5e),e(U5e,IEr),e(ln,NEr),e(ln,J5e),e(J5e,qEr),e(ln,jEr),e(ln,Y5e),e(Y5e,DEr),e(ln,GEr),e(Rr,OEr),e(Rr,a9),e(a9,AM),e(AM,K5e),e(K5e,VEr),e(AM,XEr),e(AM,jU),e(jU,zEr),e(AM,WEr),e(a9,QEr),e(a9,yM),e(yM,Z5e),e(Z5e,HEr),e(yM,UEr),e(yM,DU),e(DU,JEr),e(yM,YEr),e(Rr,KEr),M(LM,Rr,null),b(f,Gje,u),b(f,pc,u),e(pc,xM),e(xM,e3e),M(n9,e3e,null),e(pc,ZEr),e(pc,o3e),e(o3e,eCr),b(f,Oje,u),b(f,sr,u),M(s9,sr,null),e(sr,oCr),e(sr,_c),e(_c,rCr),e(_c,GU),e(GU,tCr),e(_c,aCr),e(_c,OU),e(OU,nCr),e(_c,sCr),e(sr,lCr),e(sr,l9),e(l9,iCr),e(l9,r3e),e(r3e,dCr),e(l9,cCr),e(sr,fCr),e(sr,Nt),M(i9,Nt,null),e(Nt,mCr),e(Nt,t3e),e(t3e,gCr),e(Nt,hCr),e(Nt,uc),e(uc,pCr),e(uc,a3e),e(a3e,_Cr),e(uc,uCr),e(uc,VU),e(VU,bCr),e(uc,vCr),e(Nt,FCr),M($M,Nt,null),e(sr,TCr),e(sr,Pr),M(d9,Pr,null),e(Pr,MCr),e(Pr,n3e),e(n3e,ECr),e(Pr,CCr),e(Pr,dn),e(dn,wCr),e(dn,s3e),e(s3e,ACr),e(dn,yCr),e(dn,l3e),e(l3e,LCr),e(dn,xCr),e(dn,i3e),e(i3e,$Cr),e(dn,kCr),e(Pr,SCr),e(Pr,d3e),e(d3e,kM),e(kM,c3e),e(c3e,RCr),e(kM,PCr),e(kM,XU),e(XU,BCr),e(kM,ICr),e(Pr,NCr),M(SM,Pr,null),b(f,Vje,u),b(f,bc,u),e(bc,RM),e(RM,f3e),M(c9,f3e,null),e(bc,qCr),e(bc,m3e),e(m3e,jCr),b(f,Xje,u),b(f,lr,u),M(f9,lr,null),e(lr,DCr),e(lr,vc),e(vc,GCr),e(vc,zU),e(zU,OCr),e(vc,VCr),e(vc,WU),e(WU,XCr),e(vc,zCr),e(lr,WCr),e(lr,m9),e(m9,QCr),e(m9,g3e),e(g3e,HCr),e(m9,UCr),e(lr,JCr),e(lr,qt),M(g9,qt,null),e(qt,YCr),e(qt,h3e),e(h3e,KCr),e(qt,ZCr),e(qt,Fc),e(Fc,ewr),e(Fc,p3e),e(p3e,owr),e(Fc,rwr),e(Fc,QU),e(QU,twr),e(Fc,awr),e(qt,nwr),M(PM,qt,null),e(lr,swr),e(lr,Br),M(h9,Br,null),e(Br,lwr),e(Br,_3e),e(_3e,iwr),e(Br,dwr),e(Br,cn),e(cn,cwr),e(cn,u3e),e(u3e,fwr),e(cn,mwr),e(cn,b3e),e(b3e,gwr),e(cn,hwr),e(cn,v3e),e(v3e,pwr),e(cn,_wr),e(Br,uwr),e(Br,de),e(de,BM),e(BM,F3e),e(F3e,bwr),e(BM,vwr),e(BM,HU),e(HU,Fwr),e(BM,Twr),e(de,Mwr),e(de,IM),e(IM,T3e),e(T3e,Ewr),e(IM,Cwr),e(IM,UU),e(UU,wwr),e(IM,Awr),e(de,ywr),e(de,NM),e(NM,M3e),e(M3e,Lwr),e(NM,xwr),e(NM,JU),e(JU,$wr),e(NM,kwr),e(de,Swr),e(de,qM),e(qM,E3e),e(E3e,Rwr),e(qM,Pwr),e(qM,YU),e(YU,Bwr),e(qM,Iwr),e(de,Nwr),e(de,jM),e(jM,C3e),e(C3e,qwr),e(jM,jwr),e(jM,KU),e(KU,Dwr),e(jM,Gwr),e(de,Owr),e(de,DM),e(DM,w3e),e(w3e,Vwr),e(DM,Xwr),e(DM,ZU),e(ZU,zwr),e(DM,Wwr),e(de,Qwr),e(de,GM),e(GM,A3e),e(A3e,Hwr),e(GM,Uwr),e(GM,eJ),e(eJ,Jwr),e(GM,Ywr),e(de,Kwr),e(de,OM),e(OM,y3e),e(y3e,Zwr),e(OM,e0r),e(OM,oJ),e(oJ,o0r),e(OM,r0r),e(de,t0r),e(de,VM),e(VM,L3e),e(L3e,a0r),e(VM,n0r),e(VM,rJ),e(rJ,s0r),e(VM,l0r),e(de,i0r),e(de,XM),e(XM,x3e),e(x3e,d0r),e(XM,c0r),e(XM,tJ),e(tJ,f0r),e(XM,m0r),e(de,g0r),e(de,zM),e(zM,$3e),e($3e,h0r),e(zM,p0r),e(zM,aJ),e(aJ,_0r),e(zM,u0r),e(de,b0r),e(de,WM),e(WM,k3e),e(k3e,v0r),e(WM,F0r),e(WM,nJ),e(nJ,T0r),e(WM,M0r),e(de,E0r),e(de,QM),e(QM,S3e),e(S3e,C0r),e(QM,w0r),e(QM,sJ),e(sJ,A0r),e(QM,y0r),e(de,L0r),e(de,HM),e(HM,R3e),e(R3e,x0r),e(HM,$0r),e(HM,lJ),e(lJ,k0r),e(HM,S0r),e(de,R0r),e(de,UM),e(UM,P3e),e(P3e,P0r),e(UM,B0r),e(UM,iJ),e(iJ,I0r),e(UM,N0r),e(de,q0r),e(de,JM),e(JM,B3e),e(B3e,j0r),e(JM,D0r),e(JM,dJ),e(dJ,G0r),e(JM,O0r),e(de,V0r),e(de,YM),e(YM,I3e),e(I3e,X0r),e(YM,z0r),e(YM,cJ),e(cJ,W0r),e(YM,Q0r),e(de,H0r),e(de,KM),e(KM,N3e),e(N3e,U0r),e(KM,J0r),e(KM,fJ),e(fJ,Y0r),e(KM,K0r),e(de,Z0r),e(de,ZM),e(ZM,q3e),e(q3e,e6r),e(ZM,o6r),e(ZM,mJ),e(mJ,r6r),e(ZM,t6r),e(de,a6r),e(de,eE),e(eE,j3e),e(j3e,n6r),e(eE,s6r),e(eE,gJ),e(gJ,l6r),e(eE,i6r),e(Br,d6r),M(oE,Br,null),b(f,zje,u),b(f,Tc,u),e(Tc,rE),e(rE,D3e),M(p9,D3e,null),e(Tc,c6r),e(Tc,G3e),e(G3e,f6r),b(f,Wje,u),b(f,ir,u),M(_9,ir,null),e(ir,m6r),e(ir,Mc),e(Mc,g6r),e(Mc,hJ),e(hJ,h6r),e(Mc,p6r),e(Mc,pJ),e(pJ,_6r),e(Mc,u6r),e(ir,b6r),e(ir,u9),e(u9,v6r),e(u9,O3e),e(O3e,F6r),e(u9,T6r),e(ir,M6r),e(ir,jt),M(b9,jt,null),e(jt,E6r),e(jt,V3e),e(V3e,C6r),e(jt,w6r),e(jt,Ec),e(Ec,A6r),e(Ec,X3e),e(X3e,y6r),e(Ec,L6r),e(Ec,_J),e(_J,x6r),e(Ec,$6r),e(jt,k6r),M(tE,jt,null),e(ir,S6r),e(ir,Ir),M(v9,Ir,null),e(Ir,R6r),e(Ir,z3e),e(z3e,P6r),e(Ir,B6r),e(Ir,fn),e(fn,I6r),e(fn,W3e),e(W3e,N6r),e(fn,q6r),e(fn,Q3e),e(Q3e,j6r),e(fn,D6r),e(fn,H3e),e(H3e,G6r),e(fn,O6r),e(Ir,V6r),e(Ir,ce),e(ce,aE),e(aE,U3e),e(U3e,X6r),e(aE,z6r),e(aE,uJ),e(uJ,W6r),e(aE,Q6r),e(ce,H6r),e(ce,nE),e(nE,J3e),e(J3e,U6r),e(nE,J6r),e(nE,bJ),e(bJ,Y6r),e(nE,K6r),e(ce,Z6r),e(ce,sE),e(sE,Y3e),e(Y3e,eAr),e(sE,oAr),e(sE,vJ),e(vJ,rAr),e(sE,tAr),e(ce,aAr),e(ce,lE),e(lE,K3e),e(K3e,nAr),e(lE,sAr),e(lE,FJ),e(FJ,lAr),e(lE,iAr),e(ce,dAr),e(ce,iE),e(iE,Z3e),e(Z3e,cAr),e(iE,fAr),e(iE,TJ),e(TJ,mAr),e(iE,gAr),e(ce,hAr),e(ce,dE),e(dE,eFe),e(eFe,pAr),e(dE,_Ar),e(dE,MJ),e(MJ,uAr),e(dE,bAr),e(ce,vAr),e(ce,cE),e(cE,oFe),e(oFe,FAr),e(cE,TAr),e(cE,EJ),e(EJ,MAr),e(cE,EAr),e(ce,CAr),e(ce,fE),e(fE,rFe),e(rFe,wAr),e(fE,AAr),e(fE,CJ),e(CJ,yAr),e(fE,LAr),e(ce,xAr),e(ce,mE),e(mE,tFe),e(tFe,$Ar),e(mE,kAr),e(mE,wJ),e(wJ,SAr),e(mE,RAr),e(ce,PAr),e(ce,gE),e(gE,aFe),e(aFe,BAr),e(gE,IAr),e(gE,AJ),e(AJ,NAr),e(gE,qAr),e(ce,jAr),e(ce,hE),e(hE,nFe),e(nFe,DAr),e(hE,GAr),e(hE,yJ),e(yJ,OAr),e(hE,VAr),e(ce,XAr),e(ce,pE),e(pE,sFe),e(sFe,zAr),e(pE,WAr),e(pE,LJ),e(LJ,QAr),e(pE,HAr),e(ce,UAr),e(ce,_E),e(_E,lFe),e(lFe,JAr),e(_E,YAr),e(_E,xJ),e(xJ,KAr),e(_E,ZAr),e(ce,eyr),e(ce,uE),e(uE,iFe),e(iFe,oyr),e(uE,ryr),e(uE,$J),e($J,tyr),e(uE,ayr),e(ce,nyr),e(ce,bE),e(bE,dFe),e(dFe,syr),e(bE,lyr),e(bE,kJ),e(kJ,iyr),e(bE,dyr),e(ce,cyr),e(ce,vE),e(vE,cFe),e(cFe,fyr),e(vE,myr),e(vE,SJ),e(SJ,gyr),e(vE,hyr),e(ce,pyr),e(ce,FE),e(FE,fFe),e(fFe,_yr),e(FE,uyr),e(FE,RJ),e(RJ,byr),e(FE,vyr),e(ce,Fyr),e(ce,TE),e(TE,mFe),e(mFe,Tyr),e(TE,Myr),e(TE,PJ),e(PJ,Eyr),e(TE,Cyr),e(ce,wyr),e(ce,ME),e(ME,gFe),e(gFe,Ayr),e(ME,yyr),e(ME,BJ),e(BJ,Lyr),e(ME,xyr),e(ce,$yr),e(ce,EE),e(EE,hFe),e(hFe,kyr),e(EE,Syr),e(EE,IJ),e(IJ,Ryr),e(EE,Pyr),e(Ir,Byr),M(CE,Ir,null),b(f,Qje,u),b(f,Cc,u),e(Cc,wE),e(wE,pFe),M(F9,pFe,null),e(Cc,Iyr),e(Cc,_Fe),e(_Fe,Nyr),b(f,Hje,u),b(f,dr,u),M(T9,dr,null),e(dr,qyr),e(dr,wc),e(wc,jyr),e(wc,NJ),e(NJ,Dyr),e(wc,Gyr),e(wc,qJ),e(qJ,Oyr),e(wc,Vyr),e(dr,Xyr),e(dr,M9),e(M9,zyr),e(M9,uFe),e(uFe,Wyr),e(M9,Qyr),e(dr,Hyr),e(dr,Dt),M(E9,Dt,null),e(Dt,Uyr),e(Dt,bFe),e(bFe,Jyr),e(Dt,Yyr),e(Dt,Ac),e(Ac,Kyr),e(Ac,vFe),e(vFe,Zyr),e(Ac,eLr),e(Ac,jJ),e(jJ,oLr),e(Ac,rLr),e(Dt,tLr),M(AE,Dt,null),e(dr,aLr),e(dr,Nr),M(C9,Nr,null),e(Nr,nLr),e(Nr,FFe),e(FFe,sLr),e(Nr,lLr),e(Nr,mn),e(mn,iLr),e(mn,TFe),e(TFe,dLr),e(mn,cLr),e(mn,MFe),e(MFe,fLr),e(mn,mLr),e(mn,EFe),e(EFe,gLr),e(mn,hLr),e(Nr,pLr),e(Nr,CFe),e(CFe,yE),e(yE,wFe),e(wFe,_Lr),e(yE,uLr),e(yE,DJ),e(DJ,bLr),e(yE,vLr),e(Nr,FLr),M(LE,Nr,null),b(f,Uje,u),b(f,yc,u),e(yc,xE),e(xE,AFe),M(w9,AFe,null),e(yc,TLr),e(yc,yFe),e(yFe,MLr),b(f,Jje,u),b(f,cr,u),M(A9,cr,null),e(cr,ELr),e(cr,Lc),e(Lc,CLr),e(Lc,GJ),e(GJ,wLr),e(Lc,ALr),e(Lc,OJ),e(OJ,yLr),e(Lc,LLr),e(cr,xLr),e(cr,y9),e(y9,$Lr),e(y9,LFe),e(LFe,kLr),e(y9,SLr),e(cr,RLr),e(cr,Gt),M(L9,Gt,null),e(Gt,PLr),e(Gt,xFe),e(xFe,BLr),e(Gt,ILr),e(Gt,xc),e(xc,NLr),e(xc,$Fe),e($Fe,qLr),e(xc,jLr),e(xc,VJ),e(VJ,DLr),e(xc,GLr),e(Gt,OLr),M($E,Gt,null),e(cr,VLr),e(cr,qr),M(x9,qr,null),e(qr,XLr),e(qr,kFe),e(kFe,zLr),e(qr,WLr),e(qr,gn),e(gn,QLr),e(gn,SFe),e(SFe,HLr),e(gn,ULr),e(gn,RFe),e(RFe,JLr),e(gn,YLr),e(gn,PFe),e(PFe,KLr),e(gn,ZLr),e(qr,e8r),e(qr,BFe),e(BFe,kE),e(kE,IFe),e(IFe,o8r),e(kE,r8r),e(kE,XJ),e(XJ,t8r),e(kE,a8r),e(qr,n8r),M(SE,qr,null),b(f,Yje,u),b(f,$c,u),e($c,RE),e(RE,NFe),M($9,NFe,null),e($c,s8r),e($c,qFe),e(qFe,l8r),b(f,Kje,u),b(f,fr,u),M(k9,fr,null),e(fr,i8r),e(fr,kc),e(kc,d8r),e(kc,zJ),e(zJ,c8r),e(kc,f8r),e(kc,WJ),e(WJ,m8r),e(kc,g8r),e(fr,h8r),e(fr,S9),e(S9,p8r),e(S9,jFe),e(jFe,_8r),e(S9,u8r),e(fr,b8r),e(fr,Ot),M(R9,Ot,null),e(Ot,v8r),e(Ot,DFe),e(DFe,F8r),e(Ot,T8r),e(Ot,Sc),e(Sc,M8r),e(Sc,GFe),e(GFe,E8r),e(Sc,C8r),e(Sc,QJ),e(QJ,w8r),e(Sc,A8r),e(Ot,y8r),M(PE,Ot,null),e(fr,L8r),e(fr,jr),M(P9,jr,null),e(jr,x8r),e(jr,OFe),e(OFe,$8r),e(jr,k8r),e(jr,hn),e(hn,S8r),e(hn,VFe),e(VFe,R8r),e(hn,P8r),e(hn,XFe),e(XFe,B8r),e(hn,I8r),e(hn,zFe),e(zFe,N8r),e(hn,q8r),e(jr,j8r),e(jr,te),e(te,BE),e(BE,WFe),e(WFe,D8r),e(BE,G8r),e(BE,HJ),e(HJ,O8r),e(BE,V8r),e(te,X8r),e(te,IE),e(IE,QFe),e(QFe,z8r),e(IE,W8r),e(IE,UJ),e(UJ,Q8r),e(IE,H8r),e(te,U8r),e(te,NE),e(NE,HFe),e(HFe,J8r),e(NE,Y8r),e(NE,JJ),e(JJ,K8r),e(NE,Z8r),e(te,e9r),e(te,qE),e(qE,UFe),e(UFe,o9r),e(qE,r9r),e(qE,YJ),e(YJ,t9r),e(qE,a9r),e(te,n9r),e(te,jE),e(jE,JFe),e(JFe,s9r),e(jE,l9r),e(jE,KJ),e(KJ,i9r),e(jE,d9r),e(te,c9r),e(te,DE),e(DE,YFe),e(YFe,f9r),e(DE,m9r),e(DE,ZJ),e(ZJ,g9r),e(DE,h9r),e(te,p9r),e(te,GE),e(GE,KFe),e(KFe,_9r),e(GE,u9r),e(GE,eY),e(eY,b9r),e(GE,v9r),e(te,F9r),e(te,OE),e(OE,ZFe),e(ZFe,T9r),e(OE,M9r),e(OE,oY),e(oY,E9r),e(OE,C9r),e(te,w9r),e(te,VE),e(VE,eTe),e(eTe,A9r),e(VE,y9r),e(VE,rY),e(rY,L9r),e(VE,x9r),e(te,$9r),e(te,XE),e(XE,oTe),e(oTe,k9r),e(XE,S9r),e(XE,tY),e(tY,R9r),e(XE,P9r),e(te,B9r),e(te,zE),e(zE,rTe),e(rTe,I9r),e(zE,N9r),e(zE,aY),e(aY,q9r),e(zE,j9r),e(te,D9r),e(te,WE),e(WE,tTe),e(tTe,G9r),e(WE,O9r),e(WE,nY),e(nY,V9r),e(WE,X9r),e(te,z9r),e(te,QE),e(QE,aTe),e(aTe,W9r),e(QE,Q9r),e(QE,sY),e(sY,H9r),e(QE,U9r),e(te,J9r),e(te,HE),e(HE,nTe),e(nTe,Y9r),e(HE,K9r),e(HE,lY),e(lY,Z9r),e(HE,exr),e(te,oxr),e(te,UE),e(UE,sTe),e(sTe,rxr),e(UE,txr),e(UE,iY),e(iY,axr),e(UE,nxr),e(te,sxr),e(te,JE),e(JE,lTe),e(lTe,lxr),e(JE,ixr),e(JE,dY),e(dY,dxr),e(JE,cxr),e(te,fxr),e(te,YE),e(YE,iTe),e(iTe,mxr),e(YE,gxr),e(YE,cY),e(cY,hxr),e(YE,pxr),e(te,_xr),e(te,KE),e(KE,dTe),e(dTe,uxr),e(KE,bxr),e(KE,fY),e(fY,vxr),e(KE,Fxr),e(te,Txr),e(te,ZE),e(ZE,cTe),e(cTe,Mxr),e(ZE,Exr),e(ZE,mY),e(mY,Cxr),e(ZE,wxr),e(te,Axr),e(te,eC),e(eC,fTe),e(fTe,yxr),e(eC,Lxr),e(eC,gY),e(gY,xxr),e(eC,$xr),e(te,kxr),e(te,oC),e(oC,mTe),e(mTe,Sxr),e(oC,Rxr),e(oC,hY),e(hY,Pxr),e(oC,Bxr),e(te,Ixr),e(te,rC),e(rC,gTe),e(gTe,Nxr),e(rC,qxr),e(rC,pY),e(pY,jxr),e(rC,Dxr),e(te,Gxr),e(te,tC),e(tC,hTe),e(hTe,Oxr),e(tC,Vxr),e(tC,_Y),e(_Y,Xxr),e(tC,zxr),e(te,Wxr),e(te,aC),e(aC,pTe),e(pTe,Qxr),e(aC,Hxr),e(aC,uY),e(uY,Uxr),e(aC,Jxr),e(te,Yxr),e(te,nC),e(nC,_Te),e(_Te,Kxr),e(nC,Zxr),e(nC,bY),e(bY,e$r),e(nC,o$r),e(jr,r$r),M(sC,jr,null),b(f,Zje,u),b(f,Rc,u),e(Rc,lC),e(lC,uTe),M(B9,uTe,null),e(Rc,t$r),e(Rc,bTe),e(bTe,a$r),b(f,eDe,u),b(f,mr,u),M(I9,mr,null),e(mr,n$r),e(mr,Pc),e(Pc,s$r),e(Pc,vY),e(vY,l$r),e(Pc,i$r),e(Pc,FY),e(FY,d$r),e(Pc,c$r),e(mr,f$r),e(mr,N9),e(N9,m$r),e(N9,vTe),e(vTe,g$r),e(N9,h$r),e(mr,p$r),e(mr,Vt),M(q9,Vt,null),e(Vt,_$r),e(Vt,FTe),e(FTe,u$r),e(Vt,b$r),e(Vt,Bc),e(Bc,v$r),e(Bc,TTe),e(TTe,F$r),e(Bc,T$r),e(Bc,TY),e(TY,M$r),e(Bc,E$r),e(Vt,C$r),M(iC,Vt,null),e(mr,w$r),e(mr,Dr),M(j9,Dr,null),e(Dr,A$r),e(Dr,MTe),e(MTe,y$r),e(Dr,L$r),e(Dr,pn),e(pn,x$r),e(pn,ETe),e(ETe,$$r),e(pn,k$r),e(pn,CTe),e(CTe,S$r),e(pn,R$r),e(pn,wTe),e(wTe,P$r),e(pn,B$r),e(Dr,I$r),e(Dr,Re),e(Re,dC),e(dC,ATe),e(ATe,N$r),e(dC,q$r),e(dC,MY),e(MY,j$r),e(dC,D$r),e(Re,G$r),e(Re,cC),e(cC,yTe),e(yTe,O$r),e(cC,V$r),e(cC,EY),e(EY,X$r),e(cC,z$r),e(Re,W$r),e(Re,fC),e(fC,LTe),e(LTe,Q$r),e(fC,H$r),e(fC,CY),e(CY,U$r),e(fC,J$r),e(Re,Y$r),e(Re,mC),e(mC,xTe),e(xTe,K$r),e(mC,Z$r),e(mC,wY),e(wY,ekr),e(mC,okr),e(Re,rkr),e(Re,gC),e(gC,$Te),e($Te,tkr),e(gC,akr),e(gC,AY),e(AY,nkr),e(gC,skr),e(Re,lkr),e(Re,hC),e(hC,kTe),e(kTe,ikr),e(hC,dkr),e(hC,yY),e(yY,ckr),e(hC,fkr),e(Re,mkr),e(Re,pC),e(pC,STe),e(STe,gkr),e(pC,hkr),e(pC,LY),e(LY,pkr),e(pC,_kr),e(Re,ukr),e(Re,_C),e(_C,RTe),e(RTe,bkr),e(_C,vkr),e(_C,xY),e(xY,Fkr),e(_C,Tkr),e(Re,Mkr),e(Re,uC),e(uC,PTe),e(PTe,Ekr),e(uC,Ckr),e(uC,$Y),e($Y,wkr),e(uC,Akr),e(Dr,ykr),M(bC,Dr,null),b(f,oDe,u),b(f,Ic,u),e(Ic,vC),e(vC,BTe),M(D9,BTe,null),e(Ic,Lkr),e(Ic,ITe),e(ITe,xkr),b(f,rDe,u),b(f,gr,u),M(G9,gr,null),e(gr,$kr),e(gr,Nc),e(Nc,kkr),e(Nc,kY),e(kY,Skr),e(Nc,Rkr),e(Nc,SY),e(SY,Pkr),e(Nc,Bkr),e(gr,Ikr),e(gr,O9),e(O9,Nkr),e(O9,NTe),e(NTe,qkr),e(O9,jkr),e(gr,Dkr),e(gr,Xt),M(V9,Xt,null),e(Xt,Gkr),e(Xt,qTe),e(qTe,Okr),e(Xt,Vkr),e(Xt,qc),e(qc,Xkr),e(qc,jTe),e(jTe,zkr),e(qc,Wkr),e(qc,RY),e(RY,Qkr),e(qc,Hkr),e(Xt,Ukr),M(FC,Xt,null),e(gr,Jkr),e(gr,Gr),M(X9,Gr,null),e(Gr,Ykr),e(Gr,DTe),e(DTe,Kkr),e(Gr,Zkr),e(Gr,_n),e(_n,eSr),e(_n,GTe),e(GTe,oSr),e(_n,rSr),e(_n,OTe),e(OTe,tSr),e(_n,aSr),e(_n,VTe),e(VTe,nSr),e(_n,sSr),e(Gr,lSr),e(Gr,Ee),e(Ee,TC),e(TC,XTe),e(XTe,iSr),e(TC,dSr),e(TC,PY),e(PY,cSr),e(TC,fSr),e(Ee,mSr),e(Ee,MC),e(MC,zTe),e(zTe,gSr),e(MC,hSr),e(MC,BY),e(BY,pSr),e(MC,_Sr),e(Ee,uSr),e(Ee,EC),e(EC,WTe),e(WTe,bSr),e(EC,vSr),e(EC,IY),e(IY,FSr),e(EC,TSr),e(Ee,MSr),e(Ee,CC),e(CC,QTe),e(QTe,ESr),e(CC,CSr),e(CC,NY),e(NY,wSr),e(CC,ASr),e(Ee,ySr),e(Ee,wC),e(wC,HTe),e(HTe,LSr),e(wC,xSr),e(wC,qY),e(qY,$Sr),e(wC,kSr),e(Ee,SSr),e(Ee,AC),e(AC,UTe),e(UTe,RSr),e(AC,PSr),e(AC,jY),e(jY,BSr),e(AC,ISr),e(Ee,NSr),e(Ee,yC),e(yC,JTe),e(JTe,qSr),e(yC,jSr),e(yC,DY),e(DY,DSr),e(yC,GSr),e(Ee,OSr),e(Ee,LC),e(LC,YTe),e(YTe,VSr),e(LC,XSr),e(LC,GY),e(GY,zSr),e(LC,WSr),e(Ee,QSr),e(Ee,xC),e(xC,KTe),e(KTe,HSr),e(xC,USr),e(xC,OY),e(OY,JSr),e(xC,YSr),e(Ee,KSr),e(Ee,$C),e($C,ZTe),e(ZTe,ZSr),e($C,eRr),e($C,VY),e(VY,oRr),e($C,rRr),e(Ee,tRr),e(Ee,kC),e(kC,e7e),e(e7e,aRr),e(kC,nRr),e(kC,XY),e(XY,sRr),e(kC,lRr),e(Ee,iRr),e(Ee,SC),e(SC,o7e),e(o7e,dRr),e(SC,cRr),e(SC,zY),e(zY,fRr),e(SC,mRr),e(Gr,gRr),M(RC,Gr,null),b(f,tDe,u),b(f,jc,u),e(jc,PC),e(PC,r7e),M(z9,r7e,null),e(jc,hRr),e(jc,t7e),e(t7e,pRr),b(f,aDe,u),b(f,hr,u),M(W9,hr,null),e(hr,_Rr),e(hr,Dc),e(Dc,uRr),e(Dc,WY),e(WY,bRr),e(Dc,vRr),e(Dc,QY),e(QY,FRr),e(Dc,TRr),e(hr,MRr),e(hr,Q9),e(Q9,ERr),e(Q9,a7e),e(a7e,CRr),e(Q9,wRr),e(hr,ARr),e(hr,zt),M(H9,zt,null),e(zt,yRr),e(zt,n7e),e(n7e,LRr),e(zt,xRr),e(zt,Gc),e(Gc,$Rr),e(Gc,s7e),e(s7e,kRr),e(Gc,SRr),e(Gc,HY),e(HY,RRr),e(Gc,PRr),e(zt,BRr),M(BC,zt,null),e(hr,IRr),e(hr,Or),M(U9,Or,null),e(Or,NRr),e(Or,l7e),e(l7e,qRr),e(Or,jRr),e(Or,un),e(un,DRr),e(un,i7e),e(i7e,GRr),e(un,ORr),e(un,d7e),e(d7e,VRr),e(un,XRr),e(un,c7e),e(c7e,zRr),e(un,WRr),e(Or,QRr),e(Or,Le),e(Le,IC),e(IC,f7e),e(f7e,HRr),e(IC,URr),e(IC,UY),e(UY,JRr),e(IC,YRr),e(Le,KRr),e(Le,NC),e(NC,m7e),e(m7e,ZRr),e(NC,ePr),e(NC,JY),e(JY,oPr),e(NC,rPr),e(Le,tPr),e(Le,qC),e(qC,g7e),e(g7e,aPr),e(qC,nPr),e(qC,YY),e(YY,sPr),e(qC,lPr),e(Le,iPr),e(Le,jC),e(jC,h7e),e(h7e,dPr),e(jC,cPr),e(jC,KY),e(KY,fPr),e(jC,mPr),e(Le,gPr),e(Le,DC),e(DC,p7e),e(p7e,hPr),e(DC,pPr),e(DC,ZY),e(ZY,_Pr),e(DC,uPr),e(Le,bPr),e(Le,GC),e(GC,_7e),e(_7e,vPr),e(GC,FPr),e(GC,eK),e(eK,TPr),e(GC,MPr),e(Le,EPr),e(Le,OC),e(OC,u7e),e(u7e,CPr),e(OC,wPr),e(OC,oK),e(oK,APr),e(OC,yPr),e(Le,LPr),e(Le,VC),e(VC,b7e),e(b7e,xPr),e(VC,$Pr),e(VC,rK),e(rK,kPr),e(VC,SPr),e(Le,RPr),e(Le,XC),e(XC,v7e),e(v7e,PPr),e(XC,BPr),e(XC,tK),e(tK,IPr),e(XC,NPr),e(Le,qPr),e(Le,zC),e(zC,F7e),e(F7e,jPr),e(zC,DPr),e(zC,aK),e(aK,GPr),e(zC,OPr),e(Or,VPr),M(WC,Or,null),b(f,nDe,u),b(f,Oc,u),e(Oc,QC),e(QC,T7e),M(J9,T7e,null),e(Oc,XPr),e(Oc,M7e),e(M7e,zPr),b(f,sDe,u),b(f,pr,u),M(Y9,pr,null),e(pr,WPr),e(pr,Vc),e(Vc,QPr),e(Vc,nK),e(nK,HPr),e(Vc,UPr),e(Vc,sK),e(sK,JPr),e(Vc,YPr),e(pr,KPr),e(pr,K9),e(K9,ZPr),e(K9,E7e),e(E7e,eBr),e(K9,oBr),e(pr,rBr),e(pr,Wt),M(Z9,Wt,null),e(Wt,tBr),e(Wt,C7e),e(C7e,aBr),e(Wt,nBr),e(Wt,Xc),e(Xc,sBr),e(Xc,w7e),e(w7e,lBr),e(Xc,iBr),e(Xc,lK),e(lK,dBr),e(Xc,cBr),e(Wt,fBr),M(HC,Wt,null),e(pr,mBr),e(pr,Vr),M(ex,Vr,null),e(Vr,gBr),e(Vr,A7e),e(A7e,hBr),e(Vr,pBr),e(Vr,bn),e(bn,_Br),e(bn,y7e),e(y7e,uBr),e(bn,bBr),e(bn,L7e),e(L7e,vBr),e(bn,FBr),e(bn,x7e),e(x7e,TBr),e(bn,MBr),e(Vr,EBr),e(Vr,Pe),e(Pe,UC),e(UC,$7e),e($7e,CBr),e(UC,wBr),e(UC,iK),e(iK,ABr),e(UC,yBr),e(Pe,LBr),e(Pe,JC),e(JC,k7e),e(k7e,xBr),e(JC,$Br),e(JC,dK),e(dK,kBr),e(JC,SBr),e(Pe,RBr),e(Pe,YC),e(YC,S7e),e(S7e,PBr),e(YC,BBr),e(YC,cK),e(cK,IBr),e(YC,NBr),e(Pe,qBr),e(Pe,KC),e(KC,R7e),e(R7e,jBr),e(KC,DBr),e(KC,fK),e(fK,GBr),e(KC,OBr),e(Pe,VBr),e(Pe,ZC),e(ZC,P7e),e(P7e,XBr),e(ZC,zBr),e(ZC,mK),e(mK,WBr),e(ZC,QBr),e(Pe,HBr),e(Pe,ew),e(ew,B7e),e(B7e,UBr),e(ew,JBr),e(ew,gK),e(gK,YBr),e(ew,KBr),e(Pe,ZBr),e(Pe,ow),e(ow,I7e),e(I7e,eIr),e(ow,oIr),e(ow,hK),e(hK,rIr),e(ow,tIr),e(Pe,aIr),e(Pe,rw),e(rw,N7e),e(N7e,nIr),e(rw,sIr),e(rw,pK),e(pK,lIr),e(rw,iIr),e(Pe,dIr),e(Pe,tw),e(tw,q7e),e(q7e,cIr),e(tw,fIr),e(tw,_K),e(_K,mIr),e(tw,gIr),e(Vr,hIr),M(aw,Vr,null),b(f,lDe,u),b(f,zc,u),e(zc,nw),e(nw,j7e),M(ox,j7e,null),e(zc,pIr),e(zc,D7e),e(D7e,_Ir),b(f,iDe,u),b(f,_r,u),M(rx,_r,null),e(_r,uIr),e(_r,Wc),e(Wc,bIr),e(Wc,uK),e(uK,vIr),e(Wc,FIr),e(Wc,bK),e(bK,TIr),e(Wc,MIr),e(_r,EIr),e(_r,tx),e(tx,CIr),e(tx,G7e),e(G7e,wIr),e(tx,AIr),e(_r,yIr),e(_r,Qt),M(ax,Qt,null),e(Qt,LIr),e(Qt,O7e),e(O7e,xIr),e(Qt,$Ir),e(Qt,Qc),e(Qc,kIr),e(Qc,V7e),e(V7e,SIr),e(Qc,RIr),e(Qc,vK),e(vK,PIr),e(Qc,BIr),e(Qt,IIr),M(sw,Qt,null),e(_r,NIr),e(_r,Xr),M(nx,Xr,null),e(Xr,qIr),e(Xr,X7e),e(X7e,jIr),e(Xr,DIr),e(Xr,vn),e(vn,GIr),e(vn,z7e),e(z7e,OIr),e(vn,VIr),e(vn,W7e),e(W7e,XIr),e(vn,zIr),e(vn,Q7e),e(Q7e,WIr),e(vn,QIr),e(Xr,HIr),e(Xr,xe),e(xe,lw),e(lw,H7e),e(H7e,UIr),e(lw,JIr),e(lw,FK),e(FK,YIr),e(lw,KIr),e(xe,ZIr),e(xe,iw),e(iw,U7e),e(U7e,eNr),e(iw,oNr),e(iw,TK),e(TK,rNr),e(iw,tNr),e(xe,aNr),e(xe,dw),e(dw,J7e),e(J7e,nNr),e(dw,sNr),e(dw,MK),e(MK,lNr),e(dw,iNr),e(xe,dNr),e(xe,cw),e(cw,Y7e),e(Y7e,cNr),e(cw,fNr),e(cw,EK),e(EK,mNr),e(cw,gNr),e(xe,hNr),e(xe,fw),e(fw,K7e),e(K7e,pNr),e(fw,_Nr),e(fw,CK),e(CK,uNr),e(fw,bNr),e(xe,vNr),e(xe,mw),e(mw,Z7e),e(Z7e,FNr),e(mw,TNr),e(mw,wK),e(wK,MNr),e(mw,ENr),e(xe,CNr),e(xe,gw),e(gw,eMe),e(eMe,wNr),e(gw,ANr),e(gw,AK),e(AK,yNr),e(gw,LNr),e(xe,xNr),e(xe,hw),e(hw,oMe),e(oMe,$Nr),e(hw,kNr),e(hw,yK),e(yK,SNr),e(hw,RNr),e(xe,PNr),e(xe,pw),e(pw,rMe),e(rMe,BNr),e(pw,INr),e(pw,LK),e(LK,NNr),e(pw,qNr),e(xe,jNr),e(xe,_w),e(_w,tMe),e(tMe,DNr),e(_w,GNr),e(_w,xK),e(xK,ONr),e(_w,VNr),e(Xr,XNr),M(uw,Xr,null),b(f,dDe,u),b(f,Hc,u),e(Hc,bw),e(bw,aMe),M(sx,aMe,null),e(Hc,zNr),e(Hc,nMe),e(nMe,WNr),b(f,cDe,u),b(f,ur,u),M(lx,ur,null),e(ur,QNr),e(ur,Uc),e(Uc,HNr),e(Uc,$K),e($K,UNr),e(Uc,JNr),e(Uc,kK),e(kK,YNr),e(Uc,KNr),e(ur,ZNr),e(ur,ix),e(ix,eqr),e(ix,sMe),e(sMe,oqr),e(ix,rqr),e(ur,tqr),e(ur,Ht),M(dx,Ht,null),e(Ht,aqr),e(Ht,lMe),e(lMe,nqr),e(Ht,sqr),e(Ht,Jc),e(Jc,lqr),e(Jc,iMe),e(iMe,iqr),e(Jc,dqr),e(Jc,SK),e(SK,cqr),e(Jc,fqr),e(Ht,mqr),M(vw,Ht,null),e(ur,gqr),e(ur,zr),M(cx,zr,null),e(zr,hqr),e(zr,dMe),e(dMe,pqr),e(zr,_qr),e(zr,Fn),e(Fn,uqr),e(Fn,cMe),e(cMe,bqr),e(Fn,vqr),e(Fn,fMe),e(fMe,Fqr),e(Fn,Tqr),e(Fn,mMe),e(mMe,Mqr),e(Fn,Eqr),e(zr,Cqr),e(zr,$e),e($e,Fw),e(Fw,gMe),e(gMe,wqr),e(Fw,Aqr),e(Fw,RK),e(RK,yqr),e(Fw,Lqr),e($e,xqr),e($e,Tw),e(Tw,hMe),e(hMe,$qr),e(Tw,kqr),e(Tw,PK),e(PK,Sqr),e(Tw,Rqr),e($e,Pqr),e($e,Mw),e(Mw,pMe),e(pMe,Bqr),e(Mw,Iqr),e(Mw,BK),e(BK,Nqr),e(Mw,qqr),e($e,jqr),e($e,Ew),e(Ew,_Me),e(_Me,Dqr),e(Ew,Gqr),e(Ew,IK),e(IK,Oqr),e(Ew,Vqr),e($e,Xqr),e($e,Cw),e(Cw,uMe),e(uMe,zqr),e(Cw,Wqr),e(Cw,NK),e(NK,Qqr),e(Cw,Hqr),e($e,Uqr),e($e,ww),e(ww,bMe),e(bMe,Jqr),e(ww,Yqr),e(ww,qK),e(qK,Kqr),e(ww,Zqr),e($e,ejr),e($e,Aw),e(Aw,vMe),e(vMe,ojr),e(Aw,rjr),e(Aw,jK),e(jK,tjr),e(Aw,ajr),e($e,njr),e($e,yw),e(yw,FMe),e(FMe,sjr),e(yw,ljr),e(yw,DK),e(DK,ijr),e(yw,djr),e($e,cjr),e($e,Lw),e(Lw,TMe),e(TMe,fjr),e(Lw,mjr),e(Lw,GK),e(GK,gjr),e(Lw,hjr),e($e,pjr),e($e,xw),e(xw,MMe),e(MMe,_jr),e(xw,ujr),e(xw,OK),e(OK,bjr),e(xw,vjr),e(zr,Fjr),M($w,zr,null),b(f,fDe,u),b(f,Yc,u),e(Yc,kw),e(kw,EMe),M(fx,EMe,null),e(Yc,Tjr),e(Yc,CMe),e(CMe,Mjr),b(f,mDe,u),b(f,br,u),M(mx,br,null),e(br,Ejr),e(br,Kc),e(Kc,Cjr),e(Kc,VK),e(VK,wjr),e(Kc,Ajr),e(Kc,XK),e(XK,yjr),e(Kc,Ljr),e(br,xjr),e(br,gx),e(gx,$jr),e(gx,wMe),e(wMe,kjr),e(gx,Sjr),e(br,Rjr),e(br,Ut),M(hx,Ut,null),e(Ut,Pjr),e(Ut,AMe),e(AMe,Bjr),e(Ut,Ijr),e(Ut,Zc),e(Zc,Njr),e(Zc,yMe),e(yMe,qjr),e(Zc,jjr),e(Zc,zK),e(zK,Djr),e(Zc,Gjr),e(Ut,Ojr),M(Sw,Ut,null),e(br,Vjr),e(br,Wr),M(px,Wr,null),e(Wr,Xjr),e(Wr,LMe),e(LMe,zjr),e(Wr,Wjr),e(Wr,Tn),e(Tn,Qjr),e(Tn,xMe),e(xMe,Hjr),e(Tn,Ujr),e(Tn,$Me),e($Me,Jjr),e(Tn,Yjr),e(Tn,kMe),e(kMe,Kjr),e(Tn,Zjr),e(Wr,eDr),e(Wr,De),e(De,Rw),e(Rw,SMe),e(SMe,oDr),e(Rw,rDr),e(Rw,WK),e(WK,tDr),e(Rw,aDr),e(De,nDr),e(De,Pw),e(Pw,RMe),e(RMe,sDr),e(Pw,lDr),e(Pw,QK),e(QK,iDr),e(Pw,dDr),e(De,cDr),e(De,Bw),e(Bw,PMe),e(PMe,fDr),e(Bw,mDr),e(Bw,HK),e(HK,gDr),e(Bw,hDr),e(De,pDr),e(De,Iw),e(Iw,BMe),e(BMe,_Dr),e(Iw,uDr),e(Iw,UK),e(UK,bDr),e(Iw,vDr),e(De,FDr),e(De,Nw),e(Nw,IMe),e(IMe,TDr),e(Nw,MDr),e(Nw,JK),e(JK,EDr),e(Nw,CDr),e(De,wDr),e(De,qw),e(qw,NMe),e(NMe,ADr),e(qw,yDr),e(qw,YK),e(YK,LDr),e(qw,xDr),e(De,$Dr),e(De,jw),e(jw,qMe),e(qMe,kDr),e(jw,SDr),e(jw,KK),e(KK,RDr),e(jw,PDr),e(De,BDr),e(De,Dw),e(Dw,jMe),e(jMe,IDr),e(Dw,NDr),e(Dw,ZK),e(ZK,qDr),e(Dw,jDr),e(Wr,DDr),M(Gw,Wr,null),b(f,gDe,u),b(f,ef,u),e(ef,Ow),e(Ow,DMe),M(_x,DMe,null),e(ef,GDr),e(ef,GMe),e(GMe,ODr),b(f,hDe,u),b(f,vr,u),M(ux,vr,null),e(vr,VDr),e(vr,of),e(of,XDr),e(of,eZ),e(eZ,zDr),e(of,WDr),e(of,oZ),e(oZ,QDr),e(of,HDr),e(vr,UDr),e(vr,bx),e(bx,JDr),e(bx,OMe),e(OMe,YDr),e(bx,KDr),e(vr,ZDr),e(vr,Jt),M(vx,Jt,null),e(Jt,eGr),e(Jt,VMe),e(VMe,oGr),e(Jt,rGr),e(Jt,rf),e(rf,tGr),e(rf,XMe),e(XMe,aGr),e(rf,nGr),e(rf,rZ),e(rZ,sGr),e(rf,lGr),e(Jt,iGr),M(Vw,Jt,null),e(vr,dGr),e(vr,Qr),M(Fx,Qr,null),e(Qr,cGr),e(Qr,zMe),e(zMe,fGr),e(Qr,mGr),e(Qr,Mn),e(Mn,gGr),e(Mn,WMe),e(WMe,hGr),e(Mn,pGr),e(Mn,QMe),e(QMe,_Gr),e(Mn,uGr),e(Mn,HMe),e(HMe,bGr),e(Mn,vGr),e(Qr,FGr),e(Qr,Ge),e(Ge,Xw),e(Xw,UMe),e(UMe,TGr),e(Xw,MGr),e(Xw,tZ),e(tZ,EGr),e(Xw,CGr),e(Ge,wGr),e(Ge,zw),e(zw,JMe),e(JMe,AGr),e(zw,yGr),e(zw,aZ),e(aZ,LGr),e(zw,xGr),e(Ge,$Gr),e(Ge,Ww),e(Ww,YMe),e(YMe,kGr),e(Ww,SGr),e(Ww,nZ),e(nZ,RGr),e(Ww,PGr),e(Ge,BGr),e(Ge,Qw),e(Qw,KMe),e(KMe,IGr),e(Qw,NGr),e(Qw,sZ),e(sZ,qGr),e(Qw,jGr),e(Ge,DGr),e(Ge,Hw),e(Hw,ZMe),e(ZMe,GGr),e(Hw,OGr),e(Hw,lZ),e(lZ,VGr),e(Hw,XGr),e(Ge,zGr),e(Ge,Uw),e(Uw,eEe),e(eEe,WGr),e(Uw,QGr),e(Uw,iZ),e(iZ,HGr),e(Uw,UGr),e(Ge,JGr),e(Ge,Jw),e(Jw,oEe),e(oEe,YGr),e(Jw,KGr),e(Jw,dZ),e(dZ,ZGr),e(Jw,eOr),e(Ge,oOr),e(Ge,Yw),e(Yw,rEe),e(rEe,rOr),e(Yw,tOr),e(Yw,cZ),e(cZ,aOr),e(Yw,nOr),e(Qr,sOr),M(Kw,Qr,null),b(f,pDe,u),b(f,tf,u),e(tf,Zw),e(Zw,tEe),M(Tx,tEe,null),e(tf,lOr),e(tf,aEe),e(aEe,iOr),b(f,_De,u),b(f,Fr,u),M(Mx,Fr,null),e(Fr,dOr),e(Fr,af),e(af,cOr),e(af,fZ),e(fZ,fOr),e(af,mOr),e(af,mZ),e(mZ,gOr),e(af,hOr),e(Fr,pOr),e(Fr,Ex),e(Ex,_Or),e(Ex,nEe),e(nEe,uOr),e(Ex,bOr),e(Fr,vOr),e(Fr,Yt),M(Cx,Yt,null),e(Yt,FOr),e(Yt,sEe),e(sEe,TOr),e(Yt,MOr),e(Yt,nf),e(nf,EOr),e(nf,lEe),e(lEe,COr),e(nf,wOr),e(nf,gZ),e(gZ,AOr),e(nf,yOr),e(Yt,LOr),M(e0,Yt,null),e(Fr,xOr),e(Fr,Hr),M(wx,Hr,null),e(Hr,$Or),e(Hr,iEe),e(iEe,kOr),e(Hr,SOr),e(Hr,En),e(En,ROr),e(En,dEe),e(dEe,POr),e(En,BOr),e(En,cEe),e(cEe,IOr),e(En,NOr),e(En,fEe),e(fEe,qOr),e(En,jOr),e(Hr,DOr),e(Hr,mEe),e(mEe,o0),e(o0,gEe),e(gEe,GOr),e(o0,OOr),e(o0,hZ),e(hZ,VOr),e(o0,XOr),e(Hr,zOr),M(r0,Hr,null),b(f,uDe,u),b(f,sf,u),e(sf,t0),e(t0,hEe),M(Ax,hEe,null),e(sf,WOr),e(sf,pEe),e(pEe,QOr),b(f,bDe,u),b(f,Tr,u),M(yx,Tr,null),e(Tr,HOr),e(Tr,lf),e(lf,UOr),e(lf,pZ),e(pZ,JOr),e(lf,YOr),e(lf,_Z),e(_Z,KOr),e(lf,ZOr),e(Tr,eVr),e(Tr,Lx),e(Lx,oVr),e(Lx,_Ee),e(_Ee,rVr),e(Lx,tVr),e(Tr,aVr),e(Tr,Kt),M(xx,Kt,null),e(Kt,nVr),e(Kt,uEe),e(uEe,sVr),e(Kt,lVr),e(Kt,df),e(df,iVr),e(df,bEe),e(bEe,dVr),e(df,cVr),e(df,uZ),e(uZ,fVr),e(df,mVr),e(Kt,gVr),M(a0,Kt,null),e(Tr,hVr),e(Tr,Ur),M($x,Ur,null),e(Ur,pVr),e(Ur,vEe),e(vEe,_Vr),e(Ur,uVr),e(Ur,Cn),e(Cn,bVr),e(Cn,FEe),e(FEe,vVr),e(Cn,FVr),e(Cn,TEe),e(TEe,TVr),e(Cn,MVr),e(Cn,MEe),e(MEe,EVr),e(Cn,CVr),e(Ur,wVr),e(Ur,kx),e(kx,n0),e(n0,EEe),e(EEe,AVr),e(n0,yVr),e(n0,bZ),e(bZ,LVr),e(n0,xVr),e(kx,$Vr),e(kx,s0),e(s0,CEe),e(CEe,kVr),e(s0,SVr),e(s0,vZ),e(vZ,RVr),e(s0,PVr),e(Ur,BVr),M(l0,Ur,null),b(f,vDe,u),b(f,cf,u),e(cf,i0),e(i0,wEe),M(Sx,wEe,null),e(cf,IVr),e(cf,AEe),e(AEe,NVr),b(f,FDe,u),b(f,Mr,u),M(Rx,Mr,null),e(Mr,qVr),e(Mr,ff),e(ff,jVr),e(ff,FZ),e(FZ,DVr),e(ff,GVr),e(ff,TZ),e(TZ,OVr),e(ff,VVr),e(Mr,XVr),e(Mr,Px),e(Px,zVr),e(Px,yEe),e(yEe,WVr),e(Px,QVr),e(Mr,HVr),e(Mr,Zt),M(Bx,Zt,null),e(Zt,UVr),e(Zt,LEe),e(LEe,JVr),e(Zt,YVr),e(Zt,mf),e(mf,KVr),e(mf,xEe),e(xEe,ZVr),e(mf,eXr),e(mf,MZ),e(MZ,oXr),e(mf,rXr),e(Zt,tXr),M(d0,Zt,null),e(Mr,aXr),e(Mr,Jr),M(Ix,Jr,null),e(Jr,nXr),e(Jr,$Ee),e($Ee,sXr),e(Jr,lXr),e(Jr,wn),e(wn,iXr),e(wn,kEe),e(kEe,dXr),e(wn,cXr),e(wn,SEe),e(SEe,fXr),e(wn,mXr),e(wn,REe),e(REe,gXr),e(wn,hXr),e(Jr,pXr),e(Jr,PEe),e(PEe,c0),e(c0,BEe),e(BEe,_Xr),e(c0,uXr),e(c0,EZ),e(EZ,bXr),e(c0,vXr),e(Jr,FXr),M(f0,Jr,null),TDe=!0},p(f,[u]){const Nx={};u&2&&(Nx.$$scope={dirty:u,ctx:f}),Tf.$set(Nx);const IEe={};u&2&&(IEe.$$scope={dirty:u,ctx:f}),wg.$set(IEe);const NEe={};u&2&&(NEe.$$scope={dirty:u,ctx:f}),sh.$set(NEe);const qEe={};u&2&&(qEe.$$scope={dirty:u,ctx:f}),jh.$set(qEe);const qx={};u&2&&(qx.$$scope={dirty:u,ctx:f}),Dh.$set(qx);const jEe={};u&2&&(jEe.$$scope={dirty:u,ctx:f}),sp.$set(jEe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),lp.$set(An);const DEe={};u&2&&(DEe.$$scope={dirty:u,ctx:f}),cp.$set(DEe);const GEe={};u&2&&(GEe.$$scope={dirty:u,ctx:f}),su.$set(GEe);const OEe={};u&2&&(OEe.$$scope={dirty:u,ctx:f}),iu.$set(OEe);const jx={};u&2&&(jx.$$scope={dirty:u,ctx:f}),Ku.$set(jx);const VEe={};u&2&&(VEe.$$scope={dirty:u,ctx:f}),e1.$set(VEe);const Dx={};u&2&&(Dx.$$scope={dirty:u,ctx:f}),j1.$set(Dx);const XEe={};u&2&&(XEe.$$scope={dirty:u,ctx:f}),G1.$set(XEe);const Gx={};u&2&&(Gx.$$scope={dirty:u,ctx:f}),Cb.$set(Gx);const zEe={};u&2&&(zEe.$$scope={dirty:u,ctx:f}),Ab.$set(zEe);const WEe={};u&2&&(WEe.$$scope={dirty:u,ctx:f}),Xb.$set(WEe);const QEe={};u&2&&(QEe.$$scope={dirty:u,ctx:f}),Wb.$set(QEe);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),G2.$set(gf);const HEe={};u&2&&(HEe.$$scope={dirty:u,ctx:f}),V2.$set(HEe);const UEe={};u&2&&(UEe.$$scope={dirty:u,ctx:f}),F4.$set(UEe);const JEe={};u&2&&(JEe.$$scope={dirty:u,ctx:f}),M4.$set(JEe);const Ox={};u&2&&(Ox.$$scope={dirty:u,ctx:f}),x4.$set(Ox);const YEe={};u&2&&(YEe.$$scope={dirty:u,ctx:f}),k4.$set(YEe);const KEe={};u&2&&(KEe.$$scope={dirty:u,ctx:f}),gv.$set(KEe);const ZEe={};u&2&&(ZEe.$$scope={dirty:u,ctx:f}),pv.$set(ZEe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),t5.$set(ot);const Vx={};u&2&&(Vx.$$scope={dirty:u,ctx:f}),n5.$set(Vx);const eCe={};u&2&&(eCe.$$scope={dirty:u,ctx:f}),i5.$set(eCe);const Xx={};u&2&&(Xx.$$scope={dirty:u,ctx:f}),c5.$set(Xx);const oCe={};u&2&&(oCe.$$scope={dirty:u,ctx:f}),w5.$set(oCe);const rt={};u&2&&(rt.$$scope={dirty:u,ctx:f}),y5.$set(rt);const rCe={};u&2&&(rCe.$$scope={dirty:u,ctx:f}),$5.$set(rCe);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),S5.$set(hf);const tCe={};u&2&&(tCe.$$scope={dirty:u,ctx:f}),V5.$set(tCe);const aCe={};u&2&&(aCe.$$scope={dirty:u,ctx:f}),z5.$set(aCe);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),K5.$set(y);const m0={};u&2&&(m0.$$scope={dirty:u,ctx:f}),e3.$set(m0);const nCe={};u&2&&(nCe.$$scope={dirty:u,ctx:f}),f3.$set(nCe);const sCe={};u&2&&(sCe.$$scope={dirty:u,ctx:f}),g3.$set(sCe);const g0={};u&2&&(g0.$$scope={dirty:u,ctx:f}),u3.$set(g0);const lCe={};u&2&&(lCe.$$scope={dirty:u,ctx:f}),v3.$set(lCe);const iCe={};u&2&&(iCe.$$scope={dirty:u,ctx:f}),A3.$set(iCe);const h0={};u&2&&(h0.$$scope={dirty:u,ctx:f}),L3.$set(h0);const dCe={};u&2&&(dCe.$$scope={dirty:u,ctx:f}),R3.$set(dCe);const cCe={};u&2&&(cCe.$$scope={dirty:u,ctx:f}),B3.$set(cCe);const p0={};u&2&&(p0.$$scope={dirty:u,ctx:f}),j3.$set(p0);const fCe={};u&2&&(fCe.$$scope={dirty:u,ctx:f}),G3.$set(fCe);const mCe={};u&2&&(mCe.$$scope={dirty:u,ctx:f}),X3.$set(mCe);const _0={};u&2&&(_0.$$scope={dirty:u,ctx:f}),W3.$set(_0);const gCe={};u&2&&(gCe.$$scope={dirty:u,ctx:f}),Z3.$set(gCe);const hCe={};u&2&&(hCe.$$scope={dirty:u,ctx:f}),oF.$set(hCe);const u0={};u&2&&(u0.$$scope={dirty:u,ctx:f}),aF.$set(u0);const pCe={};u&2&&(pCe.$$scope={dirty:u,ctx:f}),sF.$set(pCe);const _Ce={};u&2&&(_Ce.$$scope={dirty:u,ctx:f}),KF.$set(_Ce);const b0={};u&2&&(b0.$$scope={dirty:u,ctx:f}),eT.$set(b0);const uCe={};u&2&&(uCe.$$scope={dirty:u,ctx:f}),CT.$set(uCe);const bCe={};u&2&&(bCe.$$scope={dirty:u,ctx:f}),AT.$set(bCe);const v0={};u&2&&(v0.$$scope={dirty:u,ctx:f}),jT.$set(v0);const vCe={};u&2&&(vCe.$$scope={dirty:u,ctx:f}),GT.$set(vCe);const FCe={};u&2&&(FCe.$$scope={dirty:u,ctx:f}),WT.$set(FCe);const F0={};u&2&&(F0.$$scope={dirty:u,ctx:f}),HT.$set(F0);const TCe={};u&2&&(TCe.$$scope={dirty:u,ctx:f}),p7.$set(TCe);const MCe={};u&2&&(MCe.$$scope={dirty:u,ctx:f}),u7.$set(MCe);const T0={};u&2&&(T0.$$scope={dirty:u,ctx:f}),L7.$set(T0);const ECe={};u&2&&(ECe.$$scope={dirty:u,ctx:f}),$7.$set(ECe);const CCe={};u&2&&(CCe.$$scope={dirty:u,ctx:f}),tM.$set(CCe);const M0={};u&2&&(M0.$$scope={dirty:u,ctx:f}),nM.$set(M0);const wCe={};u&2&&(wCe.$$scope={dirty:u,ctx:f}),EM.$set(wCe);const ACe={};u&2&&(ACe.$$scope={dirty:u,ctx:f}),wM.$set(ACe);const E0={};u&2&&(E0.$$scope={dirty:u,ctx:f}),LM.$set(E0);const yCe={};u&2&&(yCe.$$scope={dirty:u,ctx:f}),$M.$set(yCe);const LCe={};u&2&&(LCe.$$scope={dirty:u,ctx:f}),SM.$set(LCe);const C0={};u&2&&(C0.$$scope={dirty:u,ctx:f}),PM.$set(C0);const xCe={};u&2&&(xCe.$$scope={dirty:u,ctx:f}),oE.$set(xCe);const $Ce={};u&2&&($Ce.$$scope={dirty:u,ctx:f}),tE.$set($Ce);const w0={};u&2&&(w0.$$scope={dirty:u,ctx:f}),CE.$set(w0);const kCe={};u&2&&(kCe.$$scope={dirty:u,ctx:f}),AE.$set(kCe);const SCe={};u&2&&(SCe.$$scope={dirty:u,ctx:f}),LE.$set(SCe);const A0={};u&2&&(A0.$$scope={dirty:u,ctx:f}),$E.$set(A0);const RCe={};u&2&&(RCe.$$scope={dirty:u,ctx:f}),SE.$set(RCe);const PCe={};u&2&&(PCe.$$scope={dirty:u,ctx:f}),PE.$set(PCe);const y0={};u&2&&(y0.$$scope={dirty:u,ctx:f}),sC.$set(y0);const BCe={};u&2&&(BCe.$$scope={dirty:u,ctx:f}),iC.$set(BCe);const ICe={};u&2&&(ICe.$$scope={dirty:u,ctx:f}),bC.$set(ICe);const L0={};u&2&&(L0.$$scope={dirty:u,ctx:f}),FC.$set(L0);const NCe={};u&2&&(NCe.$$scope={dirty:u,ctx:f}),RC.$set(NCe);const qCe={};u&2&&(qCe.$$scope={dirty:u,ctx:f}),BC.$set(qCe);const x0={};u&2&&(x0.$$scope={dirty:u,ctx:f}),WC.$set(x0);const jCe={};u&2&&(jCe.$$scope={dirty:u,ctx:f}),HC.$set(jCe);const DCe={};u&2&&(DCe.$$scope={dirty:u,ctx:f}),aw.$set(DCe);const $0={};u&2&&($0.$$scope={dirty:u,ctx:f}),sw.$set($0);const GCe={};u&2&&(GCe.$$scope={dirty:u,ctx:f}),uw.$set(GCe);const OCe={};u&2&&(OCe.$$scope={dirty:u,ctx:f}),vw.$set(OCe);const k0={};u&2&&(k0.$$scope={dirty:u,ctx:f}),$w.$set(k0);const VCe={};u&2&&(VCe.$$scope={dirty:u,ctx:f}),Sw.$set(VCe);const XCe={};u&2&&(XCe.$$scope={dirty:u,ctx:f}),Gw.$set(XCe);const S0={};u&2&&(S0.$$scope={dirty:u,ctx:f}),Vw.$set(S0);const zCe={};u&2&&(zCe.$$scope={dirty:u,ctx:f}),Kw.$set(zCe);const WCe={};u&2&&(WCe.$$scope={dirty:u,ctx:f}),e0.$set(WCe);const R0={};u&2&&(R0.$$scope={dirty:u,ctx:f}),r0.$set(R0);const QCe={};u&2&&(QCe.$$scope={dirty:u,ctx:f}),a0.$set(QCe);const HCe={};u&2&&(HCe.$$scope={dirty:u,ctx:f}),l0.$set(HCe);const P0={};u&2&&(P0.$$scope={dirty:u,ctx:f}),d0.$set(P0);const UCe={};u&2&&(UCe.$$scope={dirty:u,ctx:f}),f0.$set(UCe)},i(f){TDe||(E(d.$$.fragment,f),E(wa.$$.fragment,f),E(SA.$$.fragment,f),E(RA.$$.fragment,f),E(Tf.$$.fragment,f),E(PA.$$.fragment,f),E(BA.$$.fragment,f),E(qA.$$.fragment,f),E(wg.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(XA.$$.fragment,f),E(sh.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(QA.$$.fragment,f),E(JA.$$.fragment,f),E(jh.$$.fragment,f),E(Dh.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(ry.$$.fragment,f),E(sp.$$.fragment,f),E(lp.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(cp.$$.fragment,f),E(iy.$$.fragment,f),E(su.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(iu.$$.fragment,f),E(gy.$$.fragment,f),E(Ku.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(e1.$$.fragment,f),E(by.$$.fragment,f),E(j1.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(G1.$$.fragment,f),E(Ey.$$.fragment,f),E(Cb.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(Ab.$$.fragment,f),E(Ly.$$.fragment,f),E(Xb.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(Wb.$$.fragment,f),E(Ry.$$.fragment,f),E(G2.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(V2.$$.fragment,f),E(qy.$$.fragment,f),E(F4.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(M4.$$.fragment,f),E(Vy.$$.fragment,f),E(x4.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(k4.$$.fragment,f),E(Hy.$$.fragment,f),E(gv.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(pv.$$.fragment,f),E(Zy.$$.fragment,f),E(t5.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(n5.$$.fragment,f),E(aL.$$.fragment,f),E(i5.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(c5.$$.fragment,f),E(dL.$$.fragment,f),E(w5.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(y5.$$.fragment,f),E(hL.$$.fragment,f),E($5.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(S5.$$.fragment,f),E(vL.$$.fragment,f),E(V5.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(z5.$$.fragment,f),E(CL.$$.fragment,f),E(K5.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(e3.$$.fragment,f),E(xL.$$.fragment,f),E(f3.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(g3.$$.fragment,f),E(PL.$$.fragment,f),E(u3.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(v3.$$.fragment,f),E(DL.$$.fragment,f),E(A3.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(L3.$$.fragment,f),E(zL.$$.fragment,f),E(R3.$$.fragment,f),E(WL.$$.fragment,f),E(QL.$$.fragment,f),E(UL.$$.fragment,f),E(B3.$$.fragment,f),E(JL.$$.fragment,f),E(j3.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(G3.$$.fragment,f),E(r8.$$.fragment,f),E(X3.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(W3.$$.fragment,f),E(l8.$$.fragment,f),E(Z3.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(oF.$$.fragment,f),E(m8.$$.fragment,f),E(aF.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(_8.$$.fragment,f),E(sF.$$.fragment,f),E(u8.$$.fragment,f),E(KF.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(eT.$$.fragment,f),E(M8.$$.fragment,f),E(CT.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(AT.$$.fragment,f),E(y8.$$.fragment,f),E(jT.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(GT.$$.fragment,f),E(S8.$$.fragment,f),E(WT.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(HT.$$.fragment,f),E(N8.$$.fragment,f),E(p7.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(u7.$$.fragment,f),E(O8.$$.fragment,f),E(L7.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(W8.$$.fragment,f),E($7.$$.fragment,f),E(Q8.$$.fragment,f),E(tM.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(nM.$$.fragment,f),E(K8.$$.fragment,f),E(EM.$$.fragment,f),E(Z8.$$.fragment,f),E(e9.$$.fragment,f),E(r9.$$.fragment,f),E(wM.$$.fragment,f),E(t9.$$.fragment,f),E(LM.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E($M.$$.fragment,f),E(d9.$$.fragment,f),E(SM.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(PM.$$.fragment,f),E(h9.$$.fragment,f),E(oE.$$.fragment,f),E(p9.$$.fragment,f),E(_9.$$.fragment,f),E(b9.$$.fragment,f),E(tE.$$.fragment,f),E(v9.$$.fragment,f),E(CE.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(AE.$$.fragment,f),E(C9.$$.fragment,f),E(LE.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E($E.$$.fragment,f),E(x9.$$.fragment,f),E(SE.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(PE.$$.fragment,f),E(P9.$$.fragment,f),E(sC.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(iC.$$.fragment,f),E(j9.$$.fragment,f),E(bC.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(FC.$$.fragment,f),E(X9.$$.fragment,f),E(RC.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(H9.$$.fragment,f),E(BC.$$.fragment,f),E(U9.$$.fragment,f),E(WC.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(HC.$$.fragment,f),E(ex.$$.fragment,f),E(aw.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(sw.$$.fragment,f),E(nx.$$.fragment,f),E(uw.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(vw.$$.fragment,f),E(cx.$$.fragment,f),E($w.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(Sw.$$.fragment,f),E(px.$$.fragment,f),E(Gw.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(Vw.$$.fragment,f),E(Fx.$$.fragment,f),E(Kw.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(e0.$$.fragment,f),E(wx.$$.fragment,f),E(r0.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(a0.$$.fragment,f),E($x.$$.fragment,f),E(l0.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(d0.$$.fragment,f),E(Ix.$$.fragment,f),E(f0.$$.fragment,f),TDe=!0)},o(f){C(d.$$.fragment,f),C(wa.$$.fragment,f),C(SA.$$.fragment,f),C(RA.$$.fragment,f),C(Tf.$$.fragment,f),C(PA.$$.fragment,f),C(BA.$$.fragment,f),C(qA.$$.fragment,f),C(wg.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(XA.$$.fragment,f),C(sh.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(QA.$$.fragment,f),C(JA.$$.fragment,f),C(jh.$$.fragment,f),C(Dh.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(ry.$$.fragment,f),C(sp.$$.fragment,f),C(lp.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(cp.$$.fragment,f),C(iy.$$.fragment,f),C(su.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(iu.$$.fragment,f),C(gy.$$.fragment,f),C(Ku.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(e1.$$.fragment,f),C(by.$$.fragment,f),C(j1.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(G1.$$.fragment,f),C(Ey.$$.fragment,f),C(Cb.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(Ab.$$.fragment,f),C(Ly.$$.fragment,f),C(Xb.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(Wb.$$.fragment,f),C(Ry.$$.fragment,f),C(G2.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(V2.$$.fragment,f),C(qy.$$.fragment,f),C(F4.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(M4.$$.fragment,f),C(Vy.$$.fragment,f),C(x4.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(k4.$$.fragment,f),C(Hy.$$.fragment,f),C(gv.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(pv.$$.fragment,f),C(Zy.$$.fragment,f),C(t5.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(n5.$$.fragment,f),C(aL.$$.fragment,f),C(i5.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(c5.$$.fragment,f),C(dL.$$.fragment,f),C(w5.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(y5.$$.fragment,f),C(hL.$$.fragment,f),C($5.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(S5.$$.fragment,f),C(vL.$$.fragment,f),C(V5.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(z5.$$.fragment,f),C(CL.$$.fragment,f),C(K5.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(e3.$$.fragment,f),C(xL.$$.fragment,f),C(f3.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(g3.$$.fragment,f),C(PL.$$.fragment,f),C(u3.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(v3.$$.fragment,f),C(DL.$$.fragment,f),C(A3.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(L3.$$.fragment,f),C(zL.$$.fragment,f),C(R3.$$.fragment,f),C(WL.$$.fragment,f),C(QL.$$.fragment,f),C(UL.$$.fragment,f),C(B3.$$.fragment,f),C(JL.$$.fragment,f),C(j3.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(G3.$$.fragment,f),C(r8.$$.fragment,f),C(X3.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(W3.$$.fragment,f),C(l8.$$.fragment,f),C(Z3.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(oF.$$.fragment,f),C(m8.$$.fragment,f),C(aF.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(_8.$$.fragment,f),C(sF.$$.fragment,f),C(u8.$$.fragment,f),C(KF.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(eT.$$.fragment,f),C(M8.$$.fragment,f),C(CT.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(AT.$$.fragment,f),C(y8.$$.fragment,f),C(jT.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(GT.$$.fragment,f),C(S8.$$.fragment,f),C(WT.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(HT.$$.fragment,f),C(N8.$$.fragment,f),C(p7.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(u7.$$.fragment,f),C(O8.$$.fragment,f),C(L7.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(W8.$$.fragment,f),C($7.$$.fragment,f),C(Q8.$$.fragment,f),C(tM.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(nM.$$.fragment,f),C(K8.$$.fragment,f),C(EM.$$.fragment,f),C(Z8.$$.fragment,f),C(e9.$$.fragment,f),C(r9.$$.fragment,f),C(wM.$$.fragment,f),C(t9.$$.fragment,f),C(LM.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C($M.$$.fragment,f),C(d9.$$.fragment,f),C(SM.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(PM.$$.fragment,f),C(h9.$$.fragment,f),C(oE.$$.fragment,f),C(p9.$$.fragment,f),C(_9.$$.fragment,f),C(b9.$$.fragment,f),C(tE.$$.fragment,f),C(v9.$$.fragment,f),C(CE.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(AE.$$.fragment,f),C(C9.$$.fragment,f),C(LE.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C($E.$$.fragment,f),C(x9.$$.fragment,f),C(SE.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(PE.$$.fragment,f),C(P9.$$.fragment,f),C(sC.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(iC.$$.fragment,f),C(j9.$$.fragment,f),C(bC.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(FC.$$.fragment,f),C(X9.$$.fragment,f),C(RC.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(H9.$$.fragment,f),C(BC.$$.fragment,f),C(U9.$$.fragment,f),C(WC.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(HC.$$.fragment,f),C(ex.$$.fragment,f),C(aw.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(sw.$$.fragment,f),C(nx.$$.fragment,f),C(uw.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(vw.$$.fragment,f),C(cx.$$.fragment,f),C($w.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(Sw.$$.fragment,f),C(px.$$.fragment,f),C(Gw.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(Vw.$$.fragment,f),C(Fx.$$.fragment,f),C(Kw.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(e0.$$.fragment,f),C(wx.$$.fragment,f),C(r0.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(a0.$$.fragment,f),C($x.$$.fragment,f),C(l0.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(d0.$$.fragment,f),C(Ix.$$.fragment,f),C(f0.$$.fragment,f),TDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(_f),f&&t(tt),f&&t(je),f&&t(We),f&&t(bf),w(wa,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(Aa),f&&t(bqe),f&&t(vi),w(SA),f&&t(vqe),f&&t(kn),f&&t(Fqe),w(RA,f),f&&t(Tqe),f&&t(ok),f&&t(Mqe),w(Tf,f),f&&t(Eqe),f&&t(Fi),w(PA),f&&t(Cqe),f&&t(Co),w(BA),w(qA),w(wg),w(jA),f&&t(wqe),f&&t(Mi),w(DA),f&&t(Aqe),f&&t(wo),w(GA),w(XA),w(sh),w(zA),f&&t(yqe),f&&t(Ei),w(WA),f&&t(Lqe),f&&t(Ao),w(QA),w(JA),w(jh),w(Dh),w(YA),f&&t(xqe),f&&t(Ci),w(KA),f&&t($qe),f&&t(yo),w(ZA),w(ry),w(sp),w(lp),w(ty),f&&t(kqe),f&&t(Ai),w(ay),f&&t(Sqe),f&&t(Lo),w(ny),w(ly),w(cp),w(iy),w(su),f&&t(Rqe),f&&t(xi),w(dy),f&&t(Pqe),f&&t(xo),w(cy),w(my),w(iu),w(gy),w(Ku),f&&t(Bqe),f&&t(Si),w(hy),f&&t(Iqe),f&&t($o),w(py),w(uy),w(e1),w(by),w(j1),f&&t(Nqe),f&&t(Bi),w(vy),f&&t(qqe),f&&t(ko),w(Fy),w(My),w(G1),w(Ey),w(Cb),f&&t(jqe),f&&t(qi),w(Cy),f&&t(Dqe),f&&t(So),w(wy),w(yy),w(Ab),w(Ly),w(Xb),f&&t(Gqe),f&&t(Gi),w(xy),f&&t(Oqe),f&&t(Ro),w($y),w(Sy),w(Wb),w(Ry),w(G2),f&&t(Vqe),f&&t(Xi),w(Py),f&&t(Xqe),f&&t(Po),w(By),w(Ny),w(V2),w(qy),w(F4),f&&t(zqe),f&&t(Qi),w(jy),f&&t(Wqe),f&&t(Bo),w(Dy),w(Oy),w(M4),w(Vy),w(x4),f&&t(Qqe),f&&t(Ji),w(Xy),f&&t(Hqe),f&&t(Io),w(zy),w(Qy),w(k4),w(Hy),w(gv),f&&t(Uqe),f&&t(Zi),w(Uy),f&&t(Jqe),f&&t(No),w(Jy),w(Ky),w(pv),w(Zy),w(t5),f&&t(Yqe),f&&t(rd),w(eL),f&&t(Kqe),f&&t(qo),w(oL),w(tL),w(n5),w(aL),w(i5),f&&t(Zqe),f&&t(nd),w(nL),f&&t(eje),f&&t(jo),w(sL),w(iL),w(c5),w(dL),w(w5),f&&t(oje),f&&t(id),w(cL),f&&t(rje),f&&t(Do),w(fL),w(gL),w(y5),w(hL),w($5),f&&t(tje),f&&t(fd),w(pL),f&&t(aje),f&&t(Go),w(_L),w(bL),w(S5),w(vL),w(V5),f&&t(nje),f&&t(hd),w(FL),f&&t(sje),f&&t(Oo),w(TL),w(EL),w(z5),w(CL),w(K5),f&&t(lje),f&&t(ud),w(wL),f&&t(ije),f&&t(Vo),w(AL),w(LL),w(e3),w(xL),w(f3),f&&t(dje),f&&t(Fd),w($L),f&&t(cje),f&&t(Xo),w(kL),w(RL),w(g3),w(PL),w(u3),f&&t(fje),f&&t(Ed),w(IL),f&&t(mje),f&&t(zo),w(NL),w(jL),w(v3),w(DL),w(A3),f&&t(gje),f&&t(Ad),w(GL),f&&t(hje),f&&t(Wo),w(OL),w(XL),w(L3),w(zL),w(R3),f&&t(pje),f&&t($d),w(WL),f&&t(_je),f&&t(Qo),w(QL),w(UL),w(B3),w(JL),w(j3),f&&t(uje),f&&t(Rd),w(KL),f&&t(bje),f&&t(Ho),w(ZL),w(o8),w(G3),w(r8),w(X3),f&&t(vje),f&&t(Id),w(t8),f&&t(Fje),f&&t(Uo),w(a8),w(s8),w(W3),w(l8),w(Z3),f&&t(Tje),f&&t(jd),w(i8),f&&t(Mje),f&&t(Jo),w(d8),w(f8),w(oF),w(m8),w(aF),f&&t(Eje),f&&t(Od),w(g8),f&&t(Cje),f&&t(Yo),w(h8),w(_8),w(sF),w(u8),w(KF),f&&t(wje),f&&t(zd),w(b8),f&&t(Aje),f&&t(Ko),w(v8),w(T8),w(eT),w(M8),w(CT),f&&t(yje),f&&t(Hd),w(E8),f&&t(Lje),f&&t(Zo),w(C8),w(A8),w(AT),w(y8),w(jT),f&&t(xje),f&&t(Yd),w(L8),f&&t($je),f&&t(er),w(x8),w(k8),w(GT),w(S8),w(WT),f&&t(kje),f&&t(ec),w(R8),f&&t(Sje),f&&t(or),w(P8),w(I8),w(HT),w(N8),w(p7),f&&t(Rje),f&&t(tc),w(q8),f&&t(Pje),f&&t(rr),w(j8),w(G8),w(u7),w(O8),w(L7),f&&t(Bje),f&&t(sc),w(V8),f&&t(Ije),f&&t(tr),w(X8),w(W8),w($7),w(Q8),w(tM),f&&t(Nje),f&&t(dc),w(H8),f&&t(qje),f&&t(ar),w(U8),w(Y8),w(nM),w(K8),w(EM),f&&t(jje),f&&t(mc),w(Z8),f&&t(Dje),f&&t(nr),w(e9),w(r9),w(wM),w(t9),w(LM),f&&t(Gje),f&&t(pc),w(n9),f&&t(Oje),f&&t(sr),w(s9),w(i9),w($M),w(d9),w(SM),f&&t(Vje),f&&t(bc),w(c9),f&&t(Xje),f&&t(lr),w(f9),w(g9),w(PM),w(h9),w(oE),f&&t(zje),f&&t(Tc),w(p9),f&&t(Wje),f&&t(ir),w(_9),w(b9),w(tE),w(v9),w(CE),f&&t(Qje),f&&t(Cc),w(F9),f&&t(Hje),f&&t(dr),w(T9),w(E9),w(AE),w(C9),w(LE),f&&t(Uje),f&&t(yc),w(w9),f&&t(Jje),f&&t(cr),w(A9),w(L9),w($E),w(x9),w(SE),f&&t(Yje),f&&t($c),w($9),f&&t(Kje),f&&t(fr),w(k9),w(R9),w(PE),w(P9),w(sC),f&&t(Zje),f&&t(Rc),w(B9),f&&t(eDe),f&&t(mr),w(I9),w(q9),w(iC),w(j9),w(bC),f&&t(oDe),f&&t(Ic),w(D9),f&&t(rDe),f&&t(gr),w(G9),w(V9),w(FC),w(X9),w(RC),f&&t(tDe),f&&t(jc),w(z9),f&&t(aDe),f&&t(hr),w(W9),w(H9),w(BC),w(U9),w(WC),f&&t(nDe),f&&t(Oc),w(J9),f&&t(sDe),f&&t(pr),w(Y9),w(Z9),w(HC),w(ex),w(aw),f&&t(lDe),f&&t(zc),w(ox),f&&t(iDe),f&&t(_r),w(rx),w(ax),w(sw),w(nx),w(uw),f&&t(dDe),f&&t(Hc),w(sx),f&&t(cDe),f&&t(ur),w(lx),w(dx),w(vw),w(cx),w($w),f&&t(fDe),f&&t(Yc),w(fx),f&&t(mDe),f&&t(br),w(mx),w(hx),w(Sw),w(px),w(Gw),f&&t(gDe),f&&t(ef),w(_x),f&&t(hDe),f&&t(vr),w(ux),w(vx),w(Vw),w(Fx),w(Kw),f&&t(pDe),f&&t(tf),w(Tx),f&&t(_De),f&&t(Fr),w(Mx),w(Cx),w(e0),w(wx),w(r0),f&&t(uDe),f&&t(sf),w(Ax),f&&t(bDe),f&&t(Tr),w(yx),w(xx),w(a0),w($x),w(l0),f&&t(vDe),f&&t(cf),w(Sx),f&&t(FDe),f&&t(Mr),w(Rx),w(Bx),w(d0),w(Ix),w(f0)}}}const cRt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function fRt(L){return fkt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class bRt extends lkt{constructor(g){super();ikt(this,g,fRt,dRt,dkt,{})}}export{bRt as default,cRt as metadata};
