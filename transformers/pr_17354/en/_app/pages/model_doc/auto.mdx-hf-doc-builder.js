import{S as iSt,i as dSt,s as cSt,e as a,k as l,w as F,t as o,M as fSt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as mSt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as mzr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function gSt(L){let g,v,p,m,_,d,h,Mo,mi,_f,tt,gi,hi,RA,uf,De,We,pi,yn,PA,Ln,xn,BA,_i,$n,IA,ui,bf,wa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),mi=a("code"),_f=o("model_type"),tt=o(" attribute is set to the same key you use when registering the config (here "),gi=a("code"),hi=o('"new-model"'),RA=o(")."),uf=l(),De=a("p"),We=o("Likewise, if your "),pi=a("code"),yn=o("NewModel"),PA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),BA=o(`, make sure its
`),_i=a("code"),$n=o("config_class"),IA=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),bf=o("NewModelConfig"),wa=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var ok=s(p);m=r(ok,"NewModelConfig"),ok.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var bi=s(d);h=r(bi,"PretrainedConfig"),bi.forEach(t),Mo=r(Ae,`, make sure its
`),mi=n(Ae,"CODE",{});var rk=s(mi);_f=r(rk,"model_type"),rk.forEach(t),tt=r(Ae," attribute is set to the same key you use when registering the config (here "),gi=n(Ae,"CODE",{});var tk=s(gi);hi=r(tk,'"new-model"'),tk.forEach(t),RA=r(Ae,")."),Ae.forEach(t),uf=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),pi=n(Eo,"CODE",{});var Aa=s(pi);yn=r(Aa,"NewModel"),Aa.forEach(t),PA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var ak=s(Ln);xn=r(ak,"PreTrainedModel"),ak.forEach(t),BA=r(Eo,`, make sure its
`),_i=n(Eo,"CODE",{});var vf=s(_i);$n=r(vf,"config_class"),vf.forEach(t),IA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var nk=s(ui);bf=r(nk,"NewModelConfig"),nk.forEach(t),wa=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,mi),e(mi,_f),e(g,tt),e(g,gi),e(gi,hi),e(g,RA),b(Qe,uf,Ae),b(Qe,De,Ae),e(De,We),e(De,pi),e(pi,yn),e(De,PA),e(De,Ln),e(Ln,xn),e(De,BA),e(De,_i),e(_i,$n),e(De,IA),e(De,ui),e(ui,bf),e(De,wa)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(De)}}}function hSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _St(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function uSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bSt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function vSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ESt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ASt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ySt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ISt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function USt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Rt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ERt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ARt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Rt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ORt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function URt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ePt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cPt(L){let g,v,p,m,_,d,h,Mo,mi,_f,tt,gi,hi,RA,uf,De,We,pi,yn,PA,Ln,xn,BA,_i,$n,IA,ui,bf,wa,Qe,Ae,ok,bi,rk,tk,Eo,Aa,ak,vf,nk,UOe,qqe,vi,Ff,Aoe,NA,JOe,yoe,YOe,jqe,kn,KOe,Loe,ZOe,eVe,xoe,oVe,rVe,Dqe,qA,Gqe,sk,tVe,Oqe,Tf,Vqe,Fi,Mf,$oe,jA,aVe,koe,nVe,Xqe,Co,DA,sVe,GA,lVe,lk,iVe,dVe,cVe,OA,fVe,Soe,mVe,gVe,hVe,Er,VA,pVe,Roe,_Ve,uVe,Ti,bVe,Poe,vVe,FVe,Boe,TVe,MVe,EVe,A,Ef,Ioe,CVe,wVe,ik,AVe,yVe,LVe,Cf,Noe,xVe,$Ve,dk,kVe,SVe,RVe,wf,qoe,PVe,BVe,ck,IVe,NVe,qVe,Af,joe,jVe,DVe,fk,GVe,OVe,VVe,yf,Doe,XVe,zVe,mk,WVe,QVe,HVe,Lf,Goe,UVe,JVe,gk,YVe,KVe,ZVe,xf,Ooe,eXe,oXe,hk,rXe,tXe,aXe,$f,Voe,nXe,sXe,pk,lXe,iXe,dXe,kf,Xoe,cXe,fXe,_k,mXe,gXe,hXe,Sf,zoe,pXe,_Xe,uk,uXe,bXe,vXe,Rf,Woe,FXe,TXe,bk,MXe,EXe,CXe,Pf,Qoe,wXe,AXe,vk,yXe,LXe,xXe,Bf,Hoe,$Xe,kXe,Fk,SXe,RXe,PXe,If,Uoe,BXe,IXe,Tk,NXe,qXe,jXe,Nf,Joe,DXe,GXe,Mk,OXe,VXe,XXe,qf,Yoe,zXe,WXe,Ek,QXe,HXe,UXe,jf,Koe,JXe,YXe,Ck,KXe,ZXe,eze,Df,Zoe,oze,rze,wk,tze,aze,nze,Gf,ere,sze,lze,Ak,ize,dze,cze,Of,ore,fze,mze,yk,gze,hze,pze,Vf,rre,_ze,uze,Lk,bze,vze,Fze,Xf,tre,Tze,Mze,xk,Eze,Cze,wze,zf,are,Aze,yze,$k,Lze,xze,$ze,Wf,nre,kze,Sze,kk,Rze,Pze,Bze,Qf,sre,Ize,Nze,Sk,qze,jze,Dze,Hf,lre,Gze,Oze,Rk,Vze,Xze,zze,Uf,ire,Wze,Qze,Pk,Hze,Uze,Jze,Jf,dre,Yze,Kze,Bk,Zze,eWe,oWe,Yf,cre,rWe,tWe,Ik,aWe,nWe,sWe,Kf,fre,lWe,iWe,Nk,dWe,cWe,fWe,Zf,mre,mWe,gWe,qk,hWe,pWe,_We,em,gre,uWe,bWe,jk,vWe,FWe,TWe,om,hre,MWe,EWe,Dk,CWe,wWe,AWe,rm,pre,yWe,LWe,Gk,xWe,$We,kWe,tm,_re,SWe,RWe,Ok,PWe,BWe,IWe,am,ure,NWe,qWe,Vk,jWe,DWe,GWe,nm,bre,OWe,VWe,Xk,XWe,zWe,WWe,sm,vre,QWe,HWe,zk,UWe,JWe,YWe,lm,Fre,KWe,ZWe,Wk,eQe,oQe,rQe,im,Tre,tQe,aQe,Qk,nQe,sQe,lQe,dm,Mre,iQe,dQe,Hk,cQe,fQe,mQe,cm,Ere,gQe,hQe,Uk,pQe,_Qe,uQe,fm,Cre,bQe,vQe,Jk,FQe,TQe,MQe,mm,wre,EQe,CQe,Yk,wQe,AQe,yQe,gm,Are,LQe,xQe,Kk,$Qe,kQe,SQe,hm,yre,RQe,PQe,Zk,BQe,IQe,NQe,pm,Lre,qQe,jQe,eS,DQe,GQe,OQe,_m,xre,VQe,XQe,oS,zQe,WQe,QQe,um,$re,HQe,UQe,rS,JQe,YQe,KQe,bm,kre,ZQe,eHe,tS,oHe,rHe,tHe,vm,Sre,aHe,nHe,aS,sHe,lHe,iHe,Fm,Rre,dHe,cHe,nS,fHe,mHe,gHe,Tm,Pre,hHe,pHe,sS,_He,uHe,bHe,Mm,Bre,vHe,FHe,lS,THe,MHe,EHe,Em,Ire,CHe,wHe,iS,AHe,yHe,LHe,Cm,Nre,xHe,$He,dS,kHe,SHe,RHe,wm,qre,PHe,BHe,cS,IHe,NHe,qHe,Am,jre,jHe,DHe,fS,GHe,OHe,VHe,ym,Dre,XHe,zHe,mS,WHe,QHe,HHe,Lm,Gre,UHe,JHe,gS,YHe,KHe,ZHe,xm,Ore,eUe,oUe,hS,rUe,tUe,aUe,$m,Vre,nUe,sUe,pS,lUe,iUe,dUe,km,Xre,cUe,fUe,_S,mUe,gUe,hUe,Sm,zre,pUe,_Ue,uS,uUe,bUe,vUe,Rm,Wre,FUe,TUe,bS,MUe,EUe,CUe,Pm,Qre,wUe,AUe,vS,yUe,LUe,xUe,Bm,Hre,$Ue,kUe,FS,SUe,RUe,PUe,Im,Ure,BUe,IUe,TS,NUe,qUe,jUe,Nm,Jre,DUe,GUe,MS,OUe,VUe,XUe,qm,Yre,zUe,WUe,ES,QUe,HUe,UUe,jm,Kre,JUe,YUe,CS,KUe,ZUe,eJe,Dm,Zre,oJe,rJe,wS,tJe,aJe,nJe,Gm,ete,sJe,lJe,AS,iJe,dJe,cJe,Om,ote,fJe,mJe,yS,gJe,hJe,pJe,Vm,rte,_Je,uJe,LS,bJe,vJe,FJe,Xm,tte,TJe,MJe,xS,EJe,CJe,wJe,zm,ate,AJe,yJe,$S,LJe,xJe,$Je,Wm,nte,kJe,SJe,kS,RJe,PJe,BJe,Qm,ste,IJe,NJe,SS,qJe,jJe,DJe,Hm,lte,GJe,OJe,RS,VJe,XJe,zJe,Um,ite,WJe,QJe,PS,HJe,UJe,JJe,Jm,dte,YJe,KJe,BS,ZJe,eYe,oYe,Ym,cte,rYe,tYe,IS,aYe,nYe,sYe,Km,fte,lYe,iYe,NS,dYe,cYe,fYe,Zm,mte,mYe,gYe,qS,hYe,pYe,_Ye,eg,gte,uYe,bYe,jS,vYe,FYe,TYe,og,hte,MYe,EYe,DS,CYe,wYe,AYe,rg,pte,yYe,LYe,GS,xYe,$Ye,kYe,tg,_te,SYe,RYe,OS,PYe,BYe,IYe,ag,ute,NYe,qYe,VS,jYe,DYe,GYe,ng,bte,OYe,VYe,XS,XYe,zYe,WYe,sg,vte,QYe,HYe,zS,UYe,JYe,YYe,lg,Fte,KYe,ZYe,WS,eKe,oKe,rKe,ig,Tte,tKe,aKe,QS,nKe,sKe,lKe,dg,Mte,iKe,dKe,HS,cKe,fKe,mKe,cg,Ete,gKe,hKe,US,pKe,_Ke,uKe,fg,Cte,bKe,vKe,JS,FKe,TKe,MKe,mg,wte,EKe,CKe,YS,wKe,AKe,yKe,gg,Ate,LKe,xKe,KS,$Ke,kKe,SKe,hg,yte,RKe,PKe,ZS,BKe,IKe,NKe,pg,Lte,qKe,jKe,eR,DKe,GKe,OKe,_g,xte,VKe,XKe,oR,zKe,WKe,QKe,ug,$te,HKe,UKe,rR,JKe,YKe,KKe,bg,kte,ZKe,eZe,tR,oZe,rZe,tZe,vg,Ste,aZe,nZe,aR,sZe,lZe,iZe,Fg,Rte,dZe,cZe,nR,fZe,mZe,gZe,Tg,Pte,hZe,pZe,sR,_Ze,uZe,bZe,Mg,Bte,vZe,FZe,lR,TZe,MZe,EZe,Eg,Ite,CZe,wZe,iR,AZe,yZe,LZe,Cg,Nte,xZe,$Ze,dR,kZe,SZe,RZe,wg,PZe,Ag,XA,BZe,qte,IZe,zqe,Mi,yg,jte,zA,NZe,Dte,qZe,Wqe,wo,WA,jZe,QA,DZe,cR,GZe,OZe,VZe,HA,XZe,Gte,zZe,WZe,QZe,Cr,UA,HZe,Ote,UZe,JZe,ya,YZe,Vte,KZe,ZZe,Xte,eeo,oeo,zte,reo,teo,aeo,k,Sn,Wte,neo,seo,fR,leo,ieo,mR,deo,ceo,feo,Rn,Qte,meo,geo,gR,heo,peo,hR,_eo,ueo,beo,Pn,Hte,veo,Feo,pR,Teo,Meo,_R,Eeo,Ceo,weo,Lg,Ute,Aeo,yeo,uR,Leo,xeo,$eo,Bn,Jte,keo,Seo,bR,Reo,Peo,vR,Beo,Ieo,Neo,xg,Yte,qeo,jeo,FR,Deo,Geo,Oeo,$g,Kte,Veo,Xeo,TR,zeo,Weo,Qeo,kg,Zte,Heo,Ueo,MR,Jeo,Yeo,Keo,In,eae,Zeo,eoo,ER,ooo,roo,CR,too,aoo,noo,Nn,oae,soo,loo,wR,ioo,doo,AR,coo,foo,moo,qn,rae,goo,hoo,yR,poo,_oo,LR,uoo,boo,voo,Sg,tae,Foo,Too,xR,Moo,Eoo,Coo,Rg,aae,woo,Aoo,$R,yoo,Loo,xoo,jn,nae,$oo,koo,kR,Soo,Roo,SR,Poo,Boo,Ioo,Pg,sae,Noo,qoo,RR,joo,Doo,Goo,Dn,lae,Ooo,Voo,PR,Xoo,zoo,BR,Woo,Qoo,Hoo,Gn,iae,Uoo,Joo,IR,Yoo,Koo,NR,Zoo,ero,oro,On,dae,rro,tro,qR,aro,nro,jR,sro,lro,iro,Bg,cae,dro,cro,DR,fro,mro,gro,Vn,fae,hro,pro,GR,_ro,uro,OR,bro,vro,Fro,Xn,mae,Tro,Mro,VR,Ero,Cro,XR,wro,Aro,yro,zn,gae,Lro,xro,zR,$ro,kro,WR,Sro,Rro,Pro,Wn,hae,Bro,Iro,QR,Nro,qro,HR,jro,Dro,Gro,Qn,pae,Oro,Vro,UR,Xro,zro,JR,Wro,Qro,Hro,Hn,_ae,Uro,Jro,YR,Yro,Kro,KR,Zro,eto,oto,Ig,uae,rto,tto,ZR,ato,nto,sto,Un,bae,lto,ito,eP,dto,cto,oP,fto,mto,gto,Ng,vae,hto,pto,rP,_to,uto,bto,Jn,Fae,vto,Fto,tP,Tto,Mto,aP,Eto,Cto,wto,Yn,Tae,Ato,yto,nP,Lto,xto,sP,$to,kto,Sto,Kn,Mae,Rto,Pto,lP,Bto,Ito,iP,Nto,qto,jto,qg,Eae,Dto,Gto,dP,Oto,Vto,Xto,Zn,Cae,zto,Wto,cP,Qto,Hto,fP,Uto,Jto,Yto,es,wae,Kto,Zto,mP,eao,oao,gP,rao,tao,aao,jg,Aae,nao,sao,hP,lao,iao,dao,os,yae,cao,fao,pP,mao,gao,_P,hao,pao,_ao,rs,Lae,uao,bao,uP,vao,Fao,bP,Tao,Mao,Eao,ts,xae,Cao,wao,vP,Aao,yao,FP,Lao,xao,$ao,as,$ae,kao,Sao,TP,Rao,Pao,MP,Bao,Iao,Nao,ns,kae,qao,jao,EP,Dao,Gao,CP,Oao,Vao,Xao,ss,Sae,zao,Wao,wP,Qao,Hao,AP,Uao,Jao,Yao,ls,Rae,Kao,Zao,yP,eno,ono,LP,rno,tno,ano,Dg,Pae,nno,sno,xP,lno,ino,dno,is,Bae,cno,fno,$P,mno,gno,kP,hno,pno,_no,Gg,Iae,uno,bno,SP,vno,Fno,Tno,Og,Nae,Mno,Eno,RP,Cno,wno,Ano,ds,qae,yno,Lno,PP,xno,$no,BP,kno,Sno,Rno,cs,jae,Pno,Bno,IP,Ino,Nno,NP,qno,jno,Dno,fs,Dae,Gno,Ono,qP,Vno,Xno,jP,zno,Wno,Qno,Vg,Gae,Hno,Uno,DP,Jno,Yno,Kno,ms,Oae,Zno,eso,GP,oso,rso,OP,tso,aso,nso,gs,Vae,sso,lso,VP,iso,dso,XP,cso,fso,mso,hs,Xae,gso,hso,zP,pso,_so,WP,uso,bso,vso,ps,zae,Fso,Tso,QP,Mso,Eso,HP,Cso,wso,Aso,_s,Wae,yso,Lso,UP,xso,$so,JP,kso,Sso,Rso,Xg,Qae,Pso,Bso,YP,Iso,Nso,qso,us,Hae,jso,Dso,KP,Gso,Oso,ZP,Vso,Xso,zso,zg,Uae,Wso,Qso,eB,Hso,Uso,Jso,Wg,Jae,Yso,Kso,oB,Zso,elo,olo,Qg,Yae,rlo,tlo,rB,alo,nlo,slo,Hg,Kae,llo,ilo,tB,dlo,clo,flo,bs,Zae,mlo,glo,aB,hlo,plo,nB,_lo,ulo,blo,Ug,ene,vlo,Flo,sB,Tlo,Mlo,Elo,vs,one,Clo,wlo,lB,Alo,ylo,iB,Llo,xlo,$lo,Fs,rne,klo,Slo,dB,Rlo,Plo,cB,Blo,Ilo,Nlo,Ts,tne,qlo,jlo,fB,Dlo,Glo,mB,Olo,Vlo,Xlo,Ms,ane,zlo,Wlo,gB,Qlo,Hlo,hB,Ulo,Jlo,Ylo,Es,nne,Klo,Zlo,pB,eio,oio,_B,rio,tio,aio,Cs,sne,nio,sio,uB,lio,iio,bB,dio,cio,fio,Jg,lne,mio,gio,vB,hio,pio,_io,Yg,ine,uio,bio,FB,vio,Fio,Tio,ws,dne,Mio,Eio,TB,Cio,wio,MB,Aio,yio,Lio,As,cne,xio,$io,EB,kio,Sio,CB,Rio,Pio,Bio,ys,fne,Iio,Nio,wB,qio,jio,AB,Dio,Gio,Oio,Kg,mne,Vio,Xio,yB,zio,Wio,Qio,Zg,gne,Hio,Uio,LB,Jio,Yio,Kio,eh,hne,Zio,edo,xB,odo,rdo,tdo,Ls,pne,ado,ndo,$B,sdo,ldo,kB,ido,ddo,cdo,oh,_ne,fdo,mdo,SB,gdo,hdo,pdo,rh,une,_do,udo,RB,bdo,vdo,Fdo,th,bne,Tdo,Mdo,PB,Edo,Cdo,wdo,xs,vne,Ado,ydo,BB,Ldo,xdo,IB,$do,kdo,Sdo,ah,Fne,Rdo,Pdo,NB,Bdo,Ido,Ndo,nh,Tne,qdo,jdo,qB,Ddo,Gdo,Odo,$s,Mne,Vdo,Xdo,jB,zdo,Wdo,DB,Qdo,Hdo,Udo,ks,Ene,Jdo,Ydo,GB,Kdo,Zdo,OB,eco,oco,rco,Ss,Cne,tco,aco,VB,nco,sco,XB,lco,ico,dco,Rs,wne,cco,fco,zB,mco,gco,WB,hco,pco,_co,sh,uco,lh,JA,bco,Ane,vco,Qqe,Ei,ih,yne,YA,Fco,Lne,Tco,Hqe,Ao,KA,Mco,ZA,Eco,QB,Cco,wco,Aco,ey,yco,xne,Lco,xco,$co,He,oy,kco,$ne,Sco,Rco,La,Pco,kne,Bco,Ico,Sne,Nco,qco,Rne,jco,Dco,Gco,Y,dh,Pne,Oco,Vco,HB,Xco,zco,Wco,ch,Bne,Qco,Hco,UB,Uco,Jco,Yco,fh,Ine,Kco,Zco,JB,efo,ofo,rfo,mh,Nne,tfo,afo,YB,nfo,sfo,lfo,gh,qne,ifo,dfo,KB,cfo,ffo,mfo,hh,jne,gfo,hfo,ZB,pfo,_fo,ufo,ph,Dne,bfo,vfo,eI,Ffo,Tfo,Mfo,_h,Gne,Efo,Cfo,oI,wfo,Afo,yfo,uh,One,Lfo,xfo,rI,$fo,kfo,Sfo,bh,Vne,Rfo,Pfo,tI,Bfo,Ifo,Nfo,vh,Xne,qfo,jfo,aI,Dfo,Gfo,Ofo,Fh,zne,Vfo,Xfo,nI,zfo,Wfo,Qfo,Th,Wne,Hfo,Ufo,sI,Jfo,Yfo,Kfo,Mh,Qne,Zfo,emo,lI,omo,rmo,tmo,Eh,Hne,amo,nmo,iI,smo,lmo,imo,Ch,Une,dmo,cmo,dI,fmo,mmo,gmo,wh,Jne,hmo,pmo,cI,_mo,umo,bmo,Ah,Yne,vmo,Fmo,fI,Tmo,Mmo,Emo,yh,Kne,Cmo,wmo,mI,Amo,ymo,Lmo,Lh,Zne,xmo,$mo,gI,kmo,Smo,Rmo,xh,ese,Pmo,Bmo,hI,Imo,Nmo,qmo,$h,ose,jmo,Dmo,pI,Gmo,Omo,Vmo,kh,rse,Xmo,zmo,_I,Wmo,Qmo,Hmo,Sh,tse,Umo,Jmo,uI,Ymo,Kmo,Zmo,Rh,ase,ego,ogo,bI,rgo,tgo,ago,Ph,nse,ngo,sgo,vI,lgo,igo,dgo,Bh,sse,cgo,fgo,FI,mgo,ggo,hgo,Ih,lse,pgo,_go,TI,ugo,bgo,vgo,Nh,ise,Fgo,Tgo,MI,Mgo,Ego,Cgo,qh,dse,wgo,Ago,EI,ygo,Lgo,xgo,jh,$go,Dh,kgo,Gh,ry,Sgo,cse,Rgo,Uqe,Ci,Oh,fse,ty,Pgo,mse,Bgo,Jqe,yo,ay,Igo,ny,Ngo,CI,qgo,jgo,Dgo,sy,Ggo,gse,Ogo,Vgo,Xgo,Ue,ly,zgo,hse,Wgo,Qgo,wi,Hgo,pse,Ugo,Jgo,_se,Ygo,Kgo,Zgo,he,Vh,use,eho,oho,wI,rho,tho,aho,Xh,bse,nho,sho,vse,lho,iho,dho,zh,Fse,cho,fho,AI,mho,gho,hho,Wh,Tse,pho,_ho,yI,uho,bho,vho,Qh,Mse,Fho,Tho,LI,Mho,Eho,Cho,Hh,Ese,who,Aho,xI,yho,Lho,xho,Uh,Cse,$ho,kho,$I,Sho,Rho,Pho,Jh,wse,Bho,Iho,kI,Nho,qho,jho,Yh,Ase,Dho,Gho,SI,Oho,Vho,Xho,Kh,yse,zho,Who,RI,Qho,Hho,Uho,Zh,Lse,Jho,Yho,PI,Kho,Zho,epo,ep,xse,opo,rpo,BI,tpo,apo,npo,op,$se,spo,lpo,II,ipo,dpo,cpo,rp,kse,fpo,mpo,NI,gpo,hpo,ppo,tp,Sse,_po,upo,qI,bpo,vpo,Fpo,ap,Rse,Tpo,Mpo,jI,Epo,Cpo,wpo,np,Pse,Apo,ypo,DI,Lpo,xpo,$po,sp,kpo,lp,Spo,ip,iy,Rpo,Bse,Ppo,Yqe,Ai,dp,Ise,dy,Bpo,Nse,Ipo,Kqe,Lo,cy,Npo,yi,qpo,GI,jpo,Dpo,OI,Gpo,Opo,Vpo,fy,Xpo,qse,zpo,Wpo,Qpo,at,my,Hpo,jse,Upo,Jpo,Li,Ypo,Dse,Kpo,Zpo,VI,e_o,o_o,r_o,cp,t_o,Je,gy,a_o,Gse,n_o,s_o,xa,l_o,Ose,i_o,d_o,Vse,c_o,f_o,Xse,m_o,g_o,h_o,x,fp,zse,p_o,__o,XI,u_o,b_o,v_o,mp,Wse,F_o,T_o,zI,M_o,E_o,C_o,gp,Qse,w_o,A_o,WI,y_o,L_o,x_o,hp,Hse,$_o,k_o,QI,S_o,R_o,P_o,pp,Use,B_o,I_o,HI,N_o,q_o,j_o,_p,Jse,D_o,G_o,UI,O_o,V_o,X_o,up,Yse,z_o,W_o,JI,Q_o,H_o,U_o,bp,Kse,J_o,Y_o,YI,K_o,Z_o,euo,vp,Zse,ouo,ruo,KI,tuo,auo,nuo,Fp,ele,suo,luo,ZI,iuo,duo,cuo,Tp,ole,fuo,muo,eN,guo,huo,puo,Mp,rle,_uo,uuo,oN,buo,vuo,Fuo,Ep,tle,Tuo,Muo,rN,Euo,Cuo,wuo,Cp,ale,Auo,yuo,tN,Luo,xuo,$uo,wp,nle,kuo,Suo,aN,Ruo,Puo,Buo,Ap,sle,Iuo,Nuo,nN,quo,juo,Duo,yp,lle,Guo,Ouo,sN,Vuo,Xuo,zuo,Lp,ile,Wuo,Quo,lN,Huo,Uuo,Juo,xp,dle,Yuo,Kuo,iN,Zuo,e1o,o1o,$p,cle,r1o,t1o,dN,a1o,n1o,s1o,kp,fle,l1o,i1o,cN,d1o,c1o,f1o,Sp,mle,m1o,g1o,fN,h1o,p1o,_1o,Rp,gle,u1o,b1o,mN,v1o,F1o,T1o,Pp,hle,M1o,E1o,gN,C1o,w1o,A1o,Bp,ple,y1o,L1o,hN,x1o,$1o,k1o,Ip,_le,S1o,R1o,pN,P1o,B1o,I1o,Np,ule,N1o,q1o,_N,j1o,D1o,G1o,qp,ble,O1o,V1o,uN,X1o,z1o,W1o,jp,vle,Q1o,H1o,bN,U1o,J1o,Y1o,Dp,Fle,K1o,Z1o,vN,ebo,obo,rbo,Gp,Tle,tbo,abo,FN,nbo,sbo,lbo,Op,Mle,ibo,dbo,TN,cbo,fbo,mbo,Ps,Ele,gbo,hbo,MN,pbo,_bo,EN,ubo,bbo,vbo,Vp,Cle,Fbo,Tbo,CN,Mbo,Ebo,Cbo,Xp,wle,wbo,Abo,wN,ybo,Lbo,xbo,zp,Ale,$bo,kbo,AN,Sbo,Rbo,Pbo,Wp,yle,Bbo,Ibo,yN,Nbo,qbo,jbo,Qp,Lle,Dbo,Gbo,LN,Obo,Vbo,Xbo,Hp,xle,zbo,Wbo,xN,Qbo,Hbo,Ubo,Up,$le,Jbo,Ybo,$N,Kbo,Zbo,e2o,Jp,kle,o2o,r2o,kN,t2o,a2o,n2o,Yp,Sle,s2o,l2o,SN,i2o,d2o,c2o,Kp,Rle,f2o,m2o,RN,g2o,h2o,p2o,Zp,Ple,_2o,u2o,PN,b2o,v2o,F2o,e_,Ble,T2o,M2o,BN,E2o,C2o,w2o,o_,Ile,A2o,y2o,IN,L2o,x2o,$2o,r_,Nle,k2o,S2o,NN,R2o,P2o,B2o,t_,qle,I2o,N2o,qN,q2o,j2o,D2o,a_,jle,G2o,O2o,jN,V2o,X2o,z2o,n_,Dle,W2o,Q2o,DN,H2o,U2o,J2o,s_,Gle,Y2o,K2o,GN,Z2o,e4o,o4o,l_,Ole,r4o,t4o,ON,a4o,n4o,s4o,i_,Vle,l4o,i4o,VN,d4o,c4o,f4o,d_,Xle,m4o,g4o,XN,h4o,p4o,_4o,c_,zle,u4o,b4o,zN,v4o,F4o,T4o,f_,Wle,M4o,E4o,WN,C4o,w4o,A4o,m_,Qle,y4o,L4o,QN,x4o,$4o,k4o,g_,Hle,S4o,R4o,HN,P4o,B4o,I4o,h_,Ule,N4o,q4o,UN,j4o,D4o,G4o,p_,Jle,O4o,V4o,JN,X4o,z4o,W4o,__,Yle,Q4o,H4o,YN,U4o,J4o,Y4o,u_,Kle,K4o,Z4o,KN,e5o,o5o,r5o,b_,Zle,t5o,a5o,ZN,n5o,s5o,l5o,v_,eie,i5o,d5o,eq,c5o,f5o,m5o,F_,oie,g5o,h5o,oq,p5o,_5o,u5o,T_,rie,b5o,v5o,rq,F5o,T5o,M5o,M_,tie,E5o,C5o,tq,w5o,A5o,y5o,E_,aie,L5o,x5o,aq,$5o,k5o,S5o,C_,nie,R5o,P5o,nq,B5o,I5o,N5o,w_,sie,q5o,j5o,sq,D5o,G5o,O5o,A_,lie,V5o,X5o,lq,z5o,W5o,Q5o,y_,iie,H5o,U5o,iq,J5o,Y5o,K5o,L_,die,Z5o,evo,dq,ovo,rvo,tvo,x_,cie,avo,nvo,cq,svo,lvo,ivo,$_,fie,dvo,cvo,fq,fvo,mvo,gvo,k_,mie,hvo,pvo,mq,_vo,uvo,bvo,S_,gie,vvo,Fvo,gq,Tvo,Mvo,Evo,R_,hie,Cvo,wvo,hq,Avo,yvo,Lvo,P_,pie,xvo,$vo,pq,kvo,Svo,Rvo,B_,_ie,Pvo,Bvo,_q,Ivo,Nvo,qvo,I_,uie,jvo,Dvo,uq,Gvo,Ovo,Vvo,N_,bie,Xvo,zvo,bq,Wvo,Qvo,Hvo,q_,vie,Uvo,Jvo,vq,Yvo,Kvo,Zvo,j_,Fie,e3o,o3o,Fq,r3o,t3o,a3o,D_,Tie,n3o,s3o,Tq,l3o,i3o,d3o,G_,Mie,c3o,f3o,Mq,m3o,g3o,h3o,O_,Eie,p3o,_3o,Eq,u3o,b3o,v3o,V_,Cie,F3o,T3o,Cq,M3o,E3o,C3o,X_,wie,w3o,A3o,wq,y3o,L3o,x3o,z_,Aie,$3o,k3o,Aq,S3o,R3o,P3o,W_,yie,B3o,I3o,yq,N3o,q3o,j3o,Q_,Lie,D3o,G3o,Lq,O3o,V3o,X3o,H_,xie,z3o,W3o,xq,Q3o,H3o,U3o,U_,$ie,J3o,Y3o,$q,K3o,Z3o,eFo,J_,kie,oFo,rFo,kq,tFo,aFo,nFo,Y_,Sie,sFo,lFo,Sq,iFo,dFo,cFo,K_,Rie,fFo,mFo,Rq,gFo,hFo,pFo,Z_,Pie,_Fo,uFo,Pq,bFo,vFo,FFo,eu,Bie,TFo,MFo,Bq,EFo,CFo,wFo,ou,Iie,AFo,yFo,Iq,LFo,xFo,$Fo,ru,Nie,kFo,SFo,Nq,RFo,PFo,BFo,tu,qie,IFo,NFo,qq,qFo,jFo,DFo,au,jie,GFo,OFo,jq,VFo,XFo,zFo,nu,WFo,Die,QFo,HFo,Gie,UFo,JFo,su,Zqe,xi,lu,Oie,hy,YFo,Vie,KFo,eje,xo,py,ZFo,$i,eTo,Dq,oTo,rTo,Gq,tTo,aTo,nTo,_y,sTo,Xie,lTo,iTo,dTo,nt,uy,cTo,zie,fTo,mTo,ki,gTo,Wie,hTo,pTo,Oq,_To,uTo,bTo,iu,vTo,Ye,by,FTo,Qie,TTo,MTo,$a,ETo,Hie,CTo,wTo,Uie,ATo,yTo,Jie,LTo,xTo,$To,G,du,Yie,kTo,STo,Vq,RTo,PTo,BTo,cu,Kie,ITo,NTo,Xq,qTo,jTo,DTo,fu,Zie,GTo,OTo,zq,VTo,XTo,zTo,mu,ede,WTo,QTo,Wq,HTo,UTo,JTo,gu,ode,YTo,KTo,Qq,ZTo,e7o,o7o,hu,rde,r7o,t7o,Hq,a7o,n7o,s7o,pu,tde,l7o,i7o,Uq,d7o,c7o,f7o,_u,ade,m7o,g7o,Jq,h7o,p7o,_7o,uu,nde,u7o,b7o,Yq,v7o,F7o,T7o,bu,sde,M7o,E7o,Kq,C7o,w7o,A7o,vu,lde,y7o,L7o,Zq,x7o,$7o,k7o,Fu,ide,S7o,R7o,ej,P7o,B7o,I7o,Tu,dde,N7o,q7o,oj,j7o,D7o,G7o,Mu,cde,O7o,V7o,rj,X7o,z7o,W7o,Eu,fde,Q7o,H7o,tj,U7o,J7o,Y7o,Cu,mde,K7o,Z7o,aj,eMo,oMo,rMo,wu,gde,tMo,aMo,nj,nMo,sMo,lMo,Au,hde,iMo,dMo,sj,cMo,fMo,mMo,yu,pde,gMo,hMo,lj,pMo,_Mo,uMo,Lu,_de,bMo,vMo,ij,FMo,TMo,MMo,xu,ude,EMo,CMo,dj,wMo,AMo,yMo,$u,bde,LMo,xMo,cj,$Mo,kMo,SMo,ku,vde,RMo,PMo,fj,BMo,IMo,NMo,Su,Fde,qMo,jMo,mj,DMo,GMo,OMo,Ru,Tde,VMo,XMo,gj,zMo,WMo,QMo,Pu,Mde,HMo,UMo,hj,JMo,YMo,KMo,Bu,Ede,ZMo,eEo,pj,oEo,rEo,tEo,Iu,Cde,aEo,nEo,_j,sEo,lEo,iEo,Nu,wde,dEo,cEo,uj,fEo,mEo,gEo,qu,Ade,hEo,pEo,bj,_Eo,uEo,bEo,ju,yde,vEo,FEo,vj,TEo,MEo,EEo,Du,Lde,CEo,wEo,Fj,AEo,yEo,LEo,Gu,xde,xEo,$Eo,Tj,kEo,SEo,REo,Ou,$de,PEo,BEo,Mj,IEo,NEo,qEo,Vu,kde,jEo,DEo,Ej,GEo,OEo,VEo,Xu,Sde,XEo,zEo,Cj,WEo,QEo,HEo,zu,Rde,UEo,JEo,wj,YEo,KEo,ZEo,Wu,Pde,eCo,oCo,Aj,rCo,tCo,aCo,Qu,Bde,nCo,sCo,yj,lCo,iCo,dCo,Hu,Ide,cCo,fCo,Lj,mCo,gCo,hCo,Uu,Nde,pCo,_Co,xj,uCo,bCo,vCo,Ju,qde,FCo,TCo,$j,MCo,ECo,CCo,Yu,wCo,jde,ACo,yCo,Dde,LCo,xCo,Ku,oje,Si,Zu,Gde,vy,$Co,Ode,kCo,rje,$o,Fy,SCo,Ri,RCo,kj,PCo,BCo,Sj,ICo,NCo,qCo,Ty,jCo,Vde,DCo,GCo,OCo,st,My,VCo,Xde,XCo,zCo,Pi,WCo,zde,QCo,HCo,Rj,UCo,JCo,YCo,e1,KCo,Ke,Ey,ZCo,Wde,e0o,o0o,ka,r0o,Qde,t0o,a0o,Hde,n0o,s0o,Ude,l0o,i0o,d0o,z,o1,Jde,c0o,f0o,Pj,m0o,g0o,h0o,r1,Yde,p0o,_0o,Bj,u0o,b0o,v0o,t1,Kde,F0o,T0o,Ij,M0o,E0o,C0o,a1,Zde,w0o,A0o,Nj,y0o,L0o,x0o,n1,ece,$0o,k0o,qj,S0o,R0o,P0o,s1,oce,B0o,I0o,jj,N0o,q0o,j0o,l1,rce,D0o,G0o,Dj,O0o,V0o,X0o,i1,tce,z0o,W0o,Gj,Q0o,H0o,U0o,d1,ace,J0o,Y0o,Oj,K0o,Z0o,ewo,c1,nce,owo,rwo,Vj,two,awo,nwo,f1,sce,swo,lwo,Xj,iwo,dwo,cwo,m1,lce,fwo,mwo,zj,gwo,hwo,pwo,g1,ice,_wo,uwo,Wj,bwo,vwo,Fwo,h1,dce,Two,Mwo,Qj,Ewo,Cwo,wwo,p1,cce,Awo,ywo,Hj,Lwo,xwo,$wo,_1,fce,kwo,Swo,Uj,Rwo,Pwo,Bwo,u1,mce,Iwo,Nwo,Jj,qwo,jwo,Dwo,b1,gce,Gwo,Owo,Yj,Vwo,Xwo,zwo,v1,hce,Wwo,Qwo,Kj,Hwo,Uwo,Jwo,F1,pce,Ywo,Kwo,Zj,Zwo,e6o,o6o,T1,_ce,r6o,t6o,eD,a6o,n6o,s6o,M1,uce,l6o,i6o,oD,d6o,c6o,f6o,E1,bce,m6o,g6o,rD,h6o,p6o,_6o,C1,vce,u6o,b6o,tD,v6o,F6o,T6o,w1,Fce,M6o,E6o,aD,C6o,w6o,A6o,A1,Tce,y6o,L6o,nD,x6o,$6o,k6o,y1,Mce,S6o,R6o,sD,P6o,B6o,I6o,L1,Ece,N6o,q6o,lD,j6o,D6o,G6o,x1,Cce,O6o,V6o,iD,X6o,z6o,W6o,$1,wce,Q6o,H6o,dD,U6o,J6o,Y6o,k1,Ace,K6o,Z6o,cD,eAo,oAo,rAo,S1,yce,tAo,aAo,fD,nAo,sAo,lAo,R1,Lce,iAo,dAo,mD,cAo,fAo,mAo,P1,xce,gAo,hAo,gD,pAo,_Ao,uAo,B1,$ce,bAo,vAo,hD,FAo,TAo,MAo,I1,kce,EAo,CAo,pD,wAo,AAo,yAo,N1,Sce,LAo,xAo,_D,$Ao,kAo,SAo,q1,RAo,Rce,PAo,BAo,Pce,IAo,NAo,j1,tje,Bi,D1,Bce,Cy,qAo,Ice,jAo,aje,ko,wy,DAo,Ii,GAo,uD,OAo,VAo,bD,XAo,zAo,WAo,Ay,QAo,Nce,HAo,UAo,JAo,lt,yy,YAo,qce,KAo,ZAo,Ni,eyo,jce,oyo,ryo,vD,tyo,ayo,nyo,G1,syo,Ze,Ly,lyo,Dce,iyo,dyo,Sa,cyo,Gce,fyo,myo,Oce,gyo,hyo,Vce,pyo,_yo,uyo,W,O1,Xce,byo,vyo,FD,Fyo,Tyo,Myo,V1,zce,Eyo,Cyo,TD,wyo,Ayo,yyo,X1,Wce,Lyo,xyo,MD,$yo,kyo,Syo,z1,Qce,Ryo,Pyo,ED,Byo,Iyo,Nyo,W1,Hce,qyo,jyo,CD,Dyo,Gyo,Oyo,Q1,Uce,Vyo,Xyo,wD,zyo,Wyo,Qyo,H1,Jce,Hyo,Uyo,AD,Jyo,Yyo,Kyo,U1,Yce,Zyo,eLo,yD,oLo,rLo,tLo,J1,Kce,aLo,nLo,LD,sLo,lLo,iLo,Y1,Zce,dLo,cLo,xD,fLo,mLo,gLo,K1,efe,hLo,pLo,$D,_Lo,uLo,bLo,Z1,ofe,vLo,FLo,kD,TLo,MLo,ELo,eb,rfe,CLo,wLo,SD,ALo,yLo,LLo,ob,tfe,xLo,$Lo,RD,kLo,SLo,RLo,rb,afe,PLo,BLo,PD,ILo,NLo,qLo,tb,nfe,jLo,DLo,BD,GLo,OLo,VLo,ab,sfe,XLo,zLo,ID,WLo,QLo,HLo,nb,lfe,ULo,JLo,ND,YLo,KLo,ZLo,sb,ife,e8o,o8o,qD,r8o,t8o,a8o,lb,dfe,n8o,s8o,jD,l8o,i8o,d8o,ib,cfe,c8o,f8o,DD,m8o,g8o,h8o,db,ffe,p8o,_8o,GD,u8o,b8o,v8o,cb,mfe,F8o,T8o,OD,M8o,E8o,C8o,fb,gfe,w8o,A8o,VD,y8o,L8o,x8o,mb,hfe,$8o,k8o,XD,S8o,R8o,P8o,gb,pfe,B8o,I8o,zD,N8o,q8o,j8o,hb,_fe,D8o,G8o,WD,O8o,V8o,X8o,pb,ufe,z8o,W8o,QD,Q8o,H8o,U8o,_b,bfe,J8o,Y8o,HD,K8o,Z8o,e9o,ub,vfe,o9o,r9o,UD,t9o,a9o,n9o,bb,Ffe,s9o,l9o,JD,i9o,d9o,c9o,vb,Tfe,f9o,m9o,Mfe,g9o,h9o,p9o,Fb,Efe,_9o,u9o,YD,b9o,v9o,F9o,Tb,Cfe,T9o,M9o,KD,E9o,C9o,w9o,Mb,wfe,A9o,y9o,ZD,L9o,x9o,$9o,Eb,Afe,k9o,S9o,eG,R9o,P9o,B9o,Cb,I9o,yfe,N9o,q9o,Lfe,j9o,D9o,wb,nje,qi,Ab,xfe,xy,G9o,$fe,O9o,sje,So,$y,V9o,ji,X9o,oG,z9o,W9o,rG,Q9o,H9o,U9o,ky,J9o,kfe,Y9o,K9o,Z9o,it,Sy,exo,Sfe,oxo,rxo,Di,txo,Rfe,axo,nxo,tG,sxo,lxo,ixo,yb,dxo,eo,Ry,cxo,Pfe,fxo,mxo,Ra,gxo,Bfe,hxo,pxo,Ife,_xo,uxo,Nfe,bxo,vxo,Fxo,_e,Lb,qfe,Txo,Mxo,aG,Exo,Cxo,wxo,xb,jfe,Axo,yxo,nG,Lxo,xxo,$xo,$b,Dfe,kxo,Sxo,sG,Rxo,Pxo,Bxo,kb,Gfe,Ixo,Nxo,lG,qxo,jxo,Dxo,Sb,Ofe,Gxo,Oxo,iG,Vxo,Xxo,zxo,Rb,Vfe,Wxo,Qxo,dG,Hxo,Uxo,Jxo,Pb,Xfe,Yxo,Kxo,cG,Zxo,e$o,o$o,Bb,zfe,r$o,t$o,fG,a$o,n$o,s$o,Ib,Wfe,l$o,i$o,mG,d$o,c$o,f$o,Nb,Qfe,m$o,g$o,gG,h$o,p$o,_$o,qb,Hfe,u$o,b$o,hG,v$o,F$o,T$o,jb,Ufe,M$o,E$o,pG,C$o,w$o,A$o,Db,Jfe,y$o,L$o,_G,x$o,$$o,k$o,Gb,Yfe,S$o,R$o,uG,P$o,B$o,I$o,Ob,Kfe,N$o,q$o,bG,j$o,D$o,G$o,Vb,Zfe,O$o,V$o,vG,X$o,z$o,W$o,Xb,Q$o,eme,H$o,U$o,ome,J$o,Y$o,zb,lje,Gi,Wb,rme,Py,K$o,tme,Z$o,ije,Ro,By,eko,Oi,oko,FG,rko,tko,TG,ako,nko,sko,Iy,lko,ame,iko,dko,cko,dt,Ny,fko,nme,mko,gko,Vi,hko,sme,pko,_ko,MG,uko,bko,vko,Qb,Fko,oo,qy,Tko,lme,Mko,Eko,Pa,Cko,ime,wko,Ako,dme,yko,Lko,cme,xko,$ko,kko,N,Hb,fme,Sko,Rko,EG,Pko,Bko,Iko,Ub,mme,Nko,qko,CG,jko,Dko,Gko,Jb,gme,Oko,Vko,wG,Xko,zko,Wko,Yb,hme,Qko,Hko,AG,Uko,Jko,Yko,Kb,pme,Kko,Zko,yG,eSo,oSo,rSo,Zb,_me,tSo,aSo,LG,nSo,sSo,lSo,e2,ume,iSo,dSo,xG,cSo,fSo,mSo,o2,bme,gSo,hSo,$G,pSo,_So,uSo,r2,vme,bSo,vSo,kG,FSo,TSo,MSo,t2,Fme,ESo,CSo,SG,wSo,ASo,ySo,a2,Tme,LSo,xSo,RG,$So,kSo,SSo,n2,Mme,RSo,PSo,PG,BSo,ISo,NSo,s2,Eme,qSo,jSo,BG,DSo,GSo,OSo,l2,Cme,VSo,XSo,IG,zSo,WSo,QSo,i2,wme,HSo,USo,NG,JSo,YSo,KSo,d2,Ame,ZSo,eRo,qG,oRo,rRo,tRo,c2,yme,aRo,nRo,jG,sRo,lRo,iRo,f2,Lme,dRo,cRo,DG,fRo,mRo,gRo,m2,xme,hRo,pRo,GG,_Ro,uRo,bRo,g2,$me,vRo,FRo,OG,TRo,MRo,ERo,h2,kme,CRo,wRo,VG,ARo,yRo,LRo,p2,Sme,xRo,$Ro,XG,kRo,SRo,RRo,_2,Rme,PRo,BRo,zG,IRo,NRo,qRo,u2,Pme,jRo,DRo,WG,GRo,ORo,VRo,b2,Bme,XRo,zRo,QG,WRo,QRo,HRo,v2,Ime,URo,JRo,HG,YRo,KRo,ZRo,F2,Nme,ePo,oPo,UG,rPo,tPo,aPo,T2,qme,nPo,sPo,JG,lPo,iPo,dPo,M2,jme,cPo,fPo,YG,mPo,gPo,hPo,E2,Dme,pPo,_Po,KG,uPo,bPo,vPo,C2,Gme,FPo,TPo,ZG,MPo,EPo,CPo,w2,Ome,wPo,APo,eO,yPo,LPo,xPo,A2,Vme,$Po,kPo,oO,SPo,RPo,PPo,y2,Xme,BPo,IPo,rO,NPo,qPo,jPo,L2,zme,DPo,GPo,tO,OPo,VPo,XPo,x2,Wme,zPo,WPo,aO,QPo,HPo,UPo,$2,Qme,JPo,YPo,nO,KPo,ZPo,eBo,k2,Hme,oBo,rBo,sO,tBo,aBo,nBo,S2,Ume,sBo,lBo,lO,iBo,dBo,cBo,R2,Jme,fBo,mBo,iO,gBo,hBo,pBo,P2,Yme,_Bo,uBo,dO,bBo,vBo,FBo,B2,Kme,TBo,MBo,cO,EBo,CBo,wBo,I2,Zme,ABo,yBo,fO,LBo,xBo,$Bo,N2,ege,kBo,SBo,mO,RBo,PBo,BBo,q2,oge,IBo,NBo,gO,qBo,jBo,DBo,j2,rge,GBo,OBo,hO,VBo,XBo,zBo,D2,tge,WBo,QBo,pO,HBo,UBo,JBo,G2,YBo,age,KBo,ZBo,nge,eIo,oIo,O2,dje,Xi,V2,sge,jy,rIo,lge,tIo,cje,Po,Dy,aIo,zi,nIo,_O,sIo,lIo,uO,iIo,dIo,cIo,Gy,fIo,ige,mIo,gIo,hIo,ct,Oy,pIo,dge,_Io,uIo,Wi,bIo,cge,vIo,FIo,bO,TIo,MIo,EIo,X2,CIo,ro,Vy,wIo,fge,AIo,yIo,Ba,LIo,mge,xIo,$Io,gge,kIo,SIo,hge,RIo,PIo,BIo,K,z2,pge,IIo,NIo,vO,qIo,jIo,DIo,W2,_ge,GIo,OIo,FO,VIo,XIo,zIo,Q2,uge,WIo,QIo,TO,HIo,UIo,JIo,H2,bge,YIo,KIo,MO,ZIo,eNo,oNo,U2,vge,rNo,tNo,EO,aNo,nNo,sNo,J2,Fge,lNo,iNo,CO,dNo,cNo,fNo,Y2,Tge,mNo,gNo,wO,hNo,pNo,_No,K2,Mge,uNo,bNo,AO,vNo,FNo,TNo,Z2,Ege,MNo,ENo,yO,CNo,wNo,ANo,e4,Cge,yNo,LNo,LO,xNo,$No,kNo,o4,wge,SNo,RNo,xO,PNo,BNo,INo,r4,Age,NNo,qNo,$O,jNo,DNo,GNo,t4,yge,ONo,VNo,kO,XNo,zNo,WNo,a4,Lge,QNo,HNo,SO,UNo,JNo,YNo,n4,xge,KNo,ZNo,RO,eqo,oqo,rqo,s4,$ge,tqo,aqo,PO,nqo,sqo,lqo,l4,kge,iqo,dqo,BO,cqo,fqo,mqo,i4,Sge,gqo,hqo,IO,pqo,_qo,uqo,d4,Rge,bqo,vqo,NO,Fqo,Tqo,Mqo,c4,Pge,Eqo,Cqo,qO,wqo,Aqo,yqo,f4,Bge,Lqo,xqo,jO,$qo,kqo,Sqo,m4,Ige,Rqo,Pqo,DO,Bqo,Iqo,Nqo,g4,Nge,qqo,jqo,GO,Dqo,Gqo,Oqo,h4,qge,Vqo,Xqo,OO,zqo,Wqo,Qqo,p4,jge,Hqo,Uqo,VO,Jqo,Yqo,Kqo,_4,Dge,Zqo,ejo,XO,ojo,rjo,tjo,u4,Gge,ajo,njo,zO,sjo,ljo,ijo,b4,Oge,djo,cjo,WO,fjo,mjo,gjo,v4,Vge,hjo,pjo,QO,_jo,ujo,bjo,F4,vjo,Xge,Fjo,Tjo,zge,Mjo,Ejo,T4,fje,Qi,M4,Wge,Xy,Cjo,Qge,wjo,mje,Bo,zy,Ajo,Hi,yjo,HO,Ljo,xjo,UO,$jo,kjo,Sjo,Wy,Rjo,Hge,Pjo,Bjo,Ijo,ft,Qy,Njo,Uge,qjo,jjo,Ui,Djo,Jge,Gjo,Ojo,JO,Vjo,Xjo,zjo,E4,Wjo,to,Hy,Qjo,Yge,Hjo,Ujo,Ia,Jjo,Kge,Yjo,Kjo,Zge,Zjo,eDo,ehe,oDo,rDo,tDo,Yr,C4,ohe,aDo,nDo,YO,sDo,lDo,iDo,w4,rhe,dDo,cDo,KO,fDo,mDo,gDo,A4,the,hDo,pDo,ZO,_Do,uDo,bDo,y4,ahe,vDo,FDo,eV,TDo,MDo,EDo,L4,nhe,CDo,wDo,oV,ADo,yDo,LDo,x4,xDo,she,$Do,kDo,lhe,SDo,RDo,$4,gje,Ji,k4,ihe,Uy,PDo,dhe,BDo,hje,Io,Jy,IDo,Yi,NDo,rV,qDo,jDo,tV,DDo,GDo,ODo,Yy,VDo,che,XDo,zDo,WDo,mt,Ky,QDo,fhe,HDo,UDo,Ki,JDo,mhe,YDo,KDo,aV,ZDo,eGo,oGo,S4,rGo,ao,Zy,tGo,ghe,aGo,nGo,Na,sGo,hhe,lGo,iGo,phe,dGo,cGo,_he,fGo,mGo,gGo,U,R4,uhe,hGo,pGo,nV,_Go,uGo,bGo,P4,bhe,vGo,FGo,sV,TGo,MGo,EGo,B4,vhe,CGo,wGo,lV,AGo,yGo,LGo,I4,Fhe,xGo,$Go,iV,kGo,SGo,RGo,N4,The,PGo,BGo,dV,IGo,NGo,qGo,q4,Mhe,jGo,DGo,cV,GGo,OGo,VGo,j4,Ehe,XGo,zGo,fV,WGo,QGo,HGo,D4,Che,UGo,JGo,mV,YGo,KGo,ZGo,G4,whe,eOo,oOo,gV,rOo,tOo,aOo,O4,Ahe,nOo,sOo,hV,lOo,iOo,dOo,V4,yhe,cOo,fOo,pV,mOo,gOo,hOo,X4,Lhe,pOo,_Oo,_V,uOo,bOo,vOo,z4,xhe,FOo,TOo,uV,MOo,EOo,COo,W4,$he,wOo,AOo,bV,yOo,LOo,xOo,Q4,khe,$Oo,kOo,vV,SOo,ROo,POo,H4,She,BOo,IOo,FV,NOo,qOo,jOo,U4,Rhe,DOo,GOo,TV,OOo,VOo,XOo,J4,Phe,zOo,WOo,MV,QOo,HOo,UOo,Y4,Bhe,JOo,YOo,EV,KOo,ZOo,eVo,K4,Ihe,oVo,rVo,CV,tVo,aVo,nVo,Z4,Nhe,sVo,lVo,wV,iVo,dVo,cVo,e5,qhe,fVo,mVo,AV,gVo,hVo,pVo,o5,jhe,_Vo,uVo,yV,bVo,vVo,FVo,r5,Dhe,TVo,MVo,LV,EVo,CVo,wVo,t5,Ghe,AVo,yVo,xV,LVo,xVo,$Vo,a5,Ohe,kVo,SVo,$V,RVo,PVo,BVo,n5,Vhe,IVo,NVo,kV,qVo,jVo,DVo,s5,Xhe,GVo,OVo,SV,VVo,XVo,zVo,l5,zhe,WVo,QVo,RV,HVo,UVo,JVo,i5,Whe,YVo,KVo,PV,ZVo,eXo,oXo,d5,Qhe,rXo,tXo,BV,aXo,nXo,sXo,c5,Hhe,lXo,iXo,IV,dXo,cXo,fXo,f5,Uhe,mXo,gXo,NV,hXo,pXo,_Xo,m5,Jhe,uXo,bXo,qV,vXo,FXo,TXo,g5,MXo,Yhe,EXo,CXo,Khe,wXo,AXo,h5,pje,Zi,p5,Zhe,eL,yXo,epe,LXo,_je,No,oL,xXo,ed,$Xo,jV,kXo,SXo,DV,RXo,PXo,BXo,rL,IXo,ope,NXo,qXo,jXo,gt,tL,DXo,rpe,GXo,OXo,od,VXo,tpe,XXo,zXo,GV,WXo,QXo,HXo,_5,UXo,no,aL,JXo,ape,YXo,KXo,qa,ZXo,npe,ezo,ozo,spe,rzo,tzo,lpe,azo,nzo,szo,V,u5,ipe,lzo,izo,OV,dzo,czo,fzo,b5,dpe,mzo,gzo,VV,hzo,pzo,_zo,v5,cpe,uzo,bzo,XV,vzo,Fzo,Tzo,F5,fpe,Mzo,Ezo,zV,Czo,wzo,Azo,T5,mpe,yzo,Lzo,WV,xzo,$zo,kzo,M5,gpe,Szo,Rzo,QV,Pzo,Bzo,Izo,E5,hpe,Nzo,qzo,HV,jzo,Dzo,Gzo,C5,ppe,Ozo,Vzo,UV,Xzo,zzo,Wzo,w5,_pe,Qzo,Hzo,JV,Uzo,Jzo,Yzo,A5,upe,Kzo,Zzo,YV,eWo,oWo,rWo,y5,bpe,tWo,aWo,KV,nWo,sWo,lWo,L5,vpe,iWo,dWo,ZV,cWo,fWo,mWo,x5,Fpe,gWo,hWo,eX,pWo,_Wo,uWo,$5,Tpe,bWo,vWo,oX,FWo,TWo,MWo,k5,Mpe,EWo,CWo,rX,wWo,AWo,yWo,S5,Epe,LWo,xWo,tX,$Wo,kWo,SWo,R5,Cpe,RWo,PWo,aX,BWo,IWo,NWo,P5,wpe,qWo,jWo,nX,DWo,GWo,OWo,B5,Ape,VWo,XWo,sX,zWo,WWo,QWo,I5,ype,HWo,UWo,lX,JWo,YWo,KWo,N5,Lpe,ZWo,eQo,iX,oQo,rQo,tQo,q5,xpe,aQo,nQo,dX,sQo,lQo,iQo,j5,$pe,dQo,cQo,cX,fQo,mQo,gQo,D5,kpe,hQo,pQo,fX,_Qo,uQo,bQo,G5,Spe,vQo,FQo,mX,TQo,MQo,EQo,O5,Rpe,CQo,wQo,gX,AQo,yQo,LQo,V5,Ppe,xQo,$Qo,hX,kQo,SQo,RQo,X5,Bpe,PQo,BQo,pX,IQo,NQo,qQo,z5,Ipe,jQo,DQo,_X,GQo,OQo,VQo,W5,Npe,XQo,zQo,uX,WQo,QQo,HQo,Q5,qpe,UQo,JQo,bX,YQo,KQo,ZQo,H5,jpe,eHo,oHo,vX,rHo,tHo,aHo,U5,Dpe,nHo,sHo,FX,lHo,iHo,dHo,J5,Gpe,cHo,fHo,TX,mHo,gHo,hHo,Y5,Ope,pHo,_Ho,MX,uHo,bHo,vHo,K5,Vpe,FHo,THo,EX,MHo,EHo,CHo,Z5,Xpe,wHo,AHo,CX,yHo,LHo,xHo,ev,zpe,$Ho,kHo,wX,SHo,RHo,PHo,ov,Wpe,BHo,IHo,AX,NHo,qHo,jHo,rv,Qpe,DHo,GHo,yX,OHo,VHo,XHo,tv,zHo,Hpe,WHo,QHo,Upe,HHo,UHo,av,uje,rd,nv,Jpe,nL,JHo,Ype,YHo,bje,qo,sL,KHo,td,ZHo,LX,eUo,oUo,xX,rUo,tUo,aUo,lL,nUo,Kpe,sUo,lUo,iUo,ht,iL,dUo,Zpe,cUo,fUo,ad,mUo,e_e,gUo,hUo,$X,pUo,_Uo,uUo,sv,bUo,so,dL,vUo,o_e,FUo,TUo,ja,MUo,r_e,EUo,CUo,t_e,wUo,AUo,a_e,yUo,LUo,xUo,n_e,lv,s_e,$Uo,kUo,kX,SUo,RUo,PUo,iv,BUo,l_e,IUo,NUo,i_e,qUo,jUo,dv,vje,nd,cv,d_e,cL,DUo,c_e,GUo,Fje,jo,fL,OUo,sd,VUo,SX,XUo,zUo,RX,WUo,QUo,HUo,mL,UUo,f_e,JUo,YUo,KUo,pt,gL,ZUo,m_e,eJo,oJo,ld,rJo,g_e,tJo,aJo,PX,nJo,sJo,lJo,fv,iJo,lo,hL,dJo,h_e,cJo,fJo,Da,mJo,p_e,gJo,hJo,__e,pJo,_Jo,u_e,uJo,bJo,vJo,ve,mv,b_e,FJo,TJo,BX,MJo,EJo,CJo,gv,v_e,wJo,AJo,IX,yJo,LJo,xJo,hv,F_e,$Jo,kJo,NX,SJo,RJo,PJo,pv,T_e,BJo,IJo,qX,NJo,qJo,jJo,Bs,M_e,DJo,GJo,jX,OJo,VJo,DX,XJo,zJo,WJo,_v,E_e,QJo,HJo,GX,UJo,JJo,YJo,uv,C_e,KJo,ZJo,OX,eYo,oYo,rYo,_t,w_e,tYo,aYo,VX,nYo,sYo,XX,lYo,iYo,zX,dYo,cYo,fYo,bv,A_e,mYo,gYo,WX,hYo,pYo,_Yo,vv,y_e,uYo,bYo,QX,vYo,FYo,TYo,Fv,L_e,MYo,EYo,HX,CYo,wYo,AYo,Tv,x_e,yYo,LYo,UX,xYo,$Yo,kYo,Mv,$_e,SYo,RYo,JX,PYo,BYo,IYo,Ev,k_e,NYo,qYo,YX,jYo,DYo,GYo,Cv,S_e,OYo,VYo,KX,XYo,zYo,WYo,wv,QYo,R_e,HYo,UYo,P_e,JYo,YYo,Av,Tje,id,yv,B_e,pL,KYo,I_e,ZYo,Mje,Do,_L,eKo,dd,oKo,ZX,rKo,tKo,ez,aKo,nKo,sKo,uL,lKo,N_e,iKo,dKo,cKo,ut,bL,fKo,q_e,mKo,gKo,cd,hKo,j_e,pKo,_Ko,oz,uKo,bKo,vKo,Lv,FKo,io,vL,TKo,D_e,MKo,EKo,Ga,CKo,G_e,wKo,AKo,O_e,yKo,LKo,V_e,xKo,$Ko,kKo,X_e,xv,z_e,SKo,RKo,rz,PKo,BKo,IKo,$v,NKo,W_e,qKo,jKo,Q_e,DKo,GKo,kv,Eje,fd,Sv,H_e,FL,OKo,U_e,VKo,Cje,Go,TL,XKo,md,zKo,tz,WKo,QKo,az,HKo,UKo,JKo,ML,YKo,J_e,KKo,ZKo,eZo,bt,EL,oZo,Y_e,rZo,tZo,gd,aZo,K_e,nZo,sZo,nz,lZo,iZo,dZo,Rv,cZo,co,CL,fZo,Z_e,mZo,gZo,Oa,hZo,eue,pZo,_Zo,oue,uZo,bZo,rue,vZo,FZo,TZo,Se,Pv,tue,MZo,EZo,sz,CZo,wZo,AZo,Bv,aue,yZo,LZo,lz,xZo,$Zo,kZo,Iv,nue,SZo,RZo,iz,PZo,BZo,IZo,Nv,sue,NZo,qZo,dz,jZo,DZo,GZo,qv,lue,OZo,VZo,cz,XZo,zZo,WZo,jv,iue,QZo,HZo,fz,UZo,JZo,YZo,Dv,due,KZo,ZZo,mz,eer,oer,rer,Gv,cue,ter,aer,gz,ner,ser,ler,Ov,fue,ier,der,hz,cer,fer,mer,Vv,ger,mue,her,per,gue,_er,uer,Xv,wje,hd,zv,hue,wL,ber,pue,ver,Aje,Oo,AL,Fer,pd,Ter,pz,Mer,Eer,_z,Cer,wer,Aer,yL,yer,_ue,Ler,xer,$er,vt,LL,ker,uue,Ser,Rer,_d,Per,bue,Ber,Ier,uz,Ner,qer,jer,Wv,Der,fo,xL,Ger,vue,Oer,Ver,Va,Xer,Fue,zer,Wer,Tue,Qer,Her,Mue,Uer,Jer,Yer,Kr,Qv,Eue,Ker,Zer,bz,eor,oor,ror,Hv,Cue,tor,aor,vz,nor,sor,lor,Uv,wue,ior,dor,Fz,cor,mor,gor,Jv,Aue,hor,por,Tz,_or,uor,bor,Yv,yue,vor,For,Mz,Tor,Mor,Eor,Kv,Cor,Lue,wor,Aor,xue,yor,Lor,Zv,yje,ud,e3,$ue,$L,xor,kue,$or,Lje,Vo,kL,kor,bd,Sor,Ez,Ror,Por,Cz,Bor,Ior,Nor,SL,qor,Sue,jor,Dor,Gor,Ft,RL,Oor,Rue,Vor,Xor,vd,zor,Pue,Wor,Qor,wz,Hor,Uor,Jor,o3,Yor,mo,PL,Kor,Bue,Zor,err,Xa,orr,Iue,rrr,trr,Nue,arr,nrr,que,srr,lrr,irr,Re,r3,jue,drr,crr,Az,frr,mrr,grr,t3,Due,hrr,prr,yz,_rr,urr,brr,a3,Gue,vrr,Frr,Lz,Trr,Mrr,Err,n3,Oue,Crr,wrr,xz,Arr,yrr,Lrr,s3,Vue,xrr,$rr,$z,krr,Srr,Rrr,l3,Xue,Prr,Brr,kz,Irr,Nrr,qrr,i3,zue,jrr,Drr,Sz,Grr,Orr,Vrr,d3,Wue,Xrr,zrr,Rz,Wrr,Qrr,Hrr,c3,Que,Urr,Jrr,Pz,Yrr,Krr,Zrr,f3,etr,Hue,otr,rtr,Uue,ttr,atr,m3,xje,Fd,g3,Jue,BL,ntr,Yue,str,$je,Xo,IL,ltr,Td,itr,Bz,dtr,ctr,Iz,ftr,mtr,gtr,NL,htr,Kue,ptr,_tr,utr,Tt,qL,btr,Zue,vtr,Ftr,Md,Ttr,e1e,Mtr,Etr,Nz,Ctr,wtr,Atr,h3,ytr,go,jL,Ltr,o1e,xtr,$tr,za,ktr,r1e,Str,Rtr,t1e,Ptr,Btr,a1e,Itr,Ntr,qtr,DL,p3,n1e,jtr,Dtr,qz,Gtr,Otr,Vtr,_3,s1e,Xtr,ztr,jz,Wtr,Qtr,Htr,u3,Utr,l1e,Jtr,Ytr,i1e,Ktr,Ztr,b3,kje,Ed,v3,d1e,GL,ear,c1e,oar,Sje,zo,OL,rar,Cd,tar,Dz,aar,nar,Gz,sar,lar,iar,VL,dar,f1e,car,far,mar,Mt,XL,gar,m1e,har,par,wd,_ar,g1e,uar,bar,Oz,Far,Tar,Mar,F3,Ear,ho,zL,Car,h1e,war,Aar,Wa,yar,p1e,Lar,xar,_1e,$ar,kar,u1e,Sar,Rar,Par,Zr,T3,b1e,Bar,Iar,Vz,Nar,qar,jar,M3,v1e,Dar,Gar,Xz,Oar,Var,Xar,E3,F1e,zar,War,zz,Qar,Har,Uar,C3,T1e,Jar,Yar,Wz,Kar,Zar,enr,w3,M1e,onr,rnr,Qz,tnr,anr,nnr,A3,snr,E1e,lnr,inr,C1e,dnr,cnr,y3,Rje,Ad,L3,w1e,WL,fnr,A1e,mnr,Pje,Wo,QL,gnr,yd,hnr,Hz,pnr,_nr,Uz,unr,bnr,vnr,HL,Fnr,y1e,Tnr,Mnr,Enr,Et,UL,Cnr,L1e,wnr,Anr,Ld,ynr,x1e,Lnr,xnr,Jz,$nr,knr,Snr,x3,Rnr,po,JL,Pnr,$1e,Bnr,Inr,Qa,Nnr,k1e,qnr,jnr,S1e,Dnr,Gnr,R1e,Onr,Vnr,Xnr,xd,$3,P1e,znr,Wnr,Yz,Qnr,Hnr,Unr,k3,B1e,Jnr,Ynr,Kz,Knr,Znr,esr,S3,I1e,osr,rsr,Zz,tsr,asr,nsr,R3,ssr,N1e,lsr,isr,q1e,dsr,csr,P3,Bje,$d,B3,j1e,YL,fsr,D1e,msr,Ije,Qo,KL,gsr,kd,hsr,eW,psr,_sr,oW,usr,bsr,vsr,ZL,Fsr,G1e,Tsr,Msr,Esr,Ct,e8,Csr,O1e,wsr,Asr,Sd,ysr,V1e,Lsr,xsr,rW,$sr,ksr,Ssr,I3,Rsr,_o,o8,Psr,X1e,Bsr,Isr,Ha,Nsr,z1e,qsr,jsr,W1e,Dsr,Gsr,Q1e,Osr,Vsr,Xsr,r8,N3,H1e,zsr,Wsr,tW,Qsr,Hsr,Usr,q3,U1e,Jsr,Ysr,aW,Ksr,Zsr,elr,j3,olr,J1e,rlr,tlr,Y1e,alr,nlr,D3,Nje,Rd,G3,K1e,t8,slr,Z1e,llr,qje,Ho,a8,ilr,Pd,dlr,nW,clr,flr,sW,mlr,glr,hlr,n8,plr,ebe,_lr,ulr,blr,wt,s8,vlr,obe,Flr,Tlr,Bd,Mlr,rbe,Elr,Clr,lW,wlr,Alr,ylr,O3,Llr,uo,l8,xlr,tbe,$lr,klr,Ua,Slr,abe,Rlr,Plr,nbe,Blr,Ilr,sbe,Nlr,qlr,jlr,lbe,V3,ibe,Dlr,Glr,iW,Olr,Vlr,Xlr,X3,zlr,dbe,Wlr,Qlr,cbe,Hlr,Ulr,z3,jje,Id,W3,fbe,i8,Jlr,mbe,Ylr,Dje,Uo,d8,Klr,Nd,Zlr,dW,eir,oir,cW,rir,tir,air,c8,nir,gbe,sir,lir,iir,At,f8,dir,hbe,cir,fir,qd,mir,pbe,gir,hir,fW,pir,_ir,uir,Q3,bir,bo,m8,vir,_be,Fir,Tir,Ja,Mir,ube,Eir,Cir,bbe,wir,Air,vbe,yir,Lir,xir,et,H3,Fbe,$ir,kir,mW,Sir,Rir,Pir,U3,Tbe,Bir,Iir,gW,Nir,qir,jir,J3,Mbe,Dir,Gir,hW,Oir,Vir,Xir,Y3,Ebe,zir,Wir,pW,Qir,Hir,Uir,K3,Cbe,Jir,Yir,_W,Kir,Zir,edr,Z3,odr,wbe,rdr,tdr,Abe,adr,ndr,eF,Gje,jd,oF,ybe,g8,sdr,Lbe,ldr,Oje,Jo,h8,idr,Dd,ddr,uW,cdr,fdr,bW,mdr,gdr,hdr,p8,pdr,xbe,_dr,udr,bdr,yt,_8,vdr,$be,Fdr,Tdr,Gd,Mdr,kbe,Edr,Cdr,vW,wdr,Adr,ydr,rF,Ldr,vo,u8,xdr,Sbe,$dr,kdr,Ya,Sdr,Rbe,Rdr,Pdr,Pbe,Bdr,Idr,Bbe,Ndr,qdr,jdr,Ibe,tF,Nbe,Ddr,Gdr,FW,Odr,Vdr,Xdr,aF,zdr,qbe,Wdr,Qdr,jbe,Hdr,Udr,nF,Vje,Od,sF,Dbe,b8,Jdr,Gbe,Ydr,Xje,Yo,v8,Kdr,Vd,Zdr,TW,ecr,ocr,MW,rcr,tcr,acr,F8,ncr,Obe,scr,lcr,icr,Lt,T8,dcr,Vbe,ccr,fcr,Xd,mcr,Xbe,gcr,hcr,EW,pcr,_cr,ucr,lF,bcr,wr,M8,vcr,zbe,Fcr,Tcr,Ka,Mcr,Wbe,Ecr,Ccr,Qbe,wcr,Acr,Hbe,ycr,Lcr,xcr,q,iF,Ube,$cr,kcr,CW,Scr,Rcr,Pcr,dF,Jbe,Bcr,Icr,wW,Ncr,qcr,jcr,cF,Ybe,Dcr,Gcr,AW,Ocr,Vcr,Xcr,fF,Kbe,zcr,Wcr,yW,Qcr,Hcr,Ucr,mF,Zbe,Jcr,Ycr,LW,Kcr,Zcr,efr,gF,e2e,ofr,rfr,xW,tfr,afr,nfr,hF,o2e,sfr,lfr,$W,ifr,dfr,cfr,pF,r2e,ffr,mfr,kW,gfr,hfr,pfr,_F,t2e,_fr,ufr,SW,bfr,vfr,Ffr,uF,a2e,Tfr,Mfr,RW,Efr,Cfr,wfr,bF,n2e,Afr,yfr,PW,Lfr,xfr,$fr,vF,s2e,kfr,Sfr,BW,Rfr,Pfr,Bfr,FF,l2e,Ifr,Nfr,IW,qfr,jfr,Dfr,TF,i2e,Gfr,Ofr,NW,Vfr,Xfr,zfr,MF,d2e,Wfr,Qfr,qW,Hfr,Ufr,Jfr,EF,c2e,Yfr,Kfr,jW,Zfr,emr,omr,CF,f2e,rmr,tmr,DW,amr,nmr,smr,Is,m2e,lmr,imr,GW,dmr,cmr,OW,fmr,mmr,gmr,wF,g2e,hmr,pmr,VW,_mr,umr,bmr,AF,h2e,vmr,Fmr,XW,Tmr,Mmr,Emr,yF,p2e,Cmr,wmr,zW,Amr,ymr,Lmr,LF,_2e,xmr,$mr,WW,kmr,Smr,Rmr,xF,u2e,Pmr,Bmr,QW,Imr,Nmr,qmr,$F,b2e,jmr,Dmr,HW,Gmr,Omr,Vmr,kF,v2e,Xmr,zmr,UW,Wmr,Qmr,Hmr,SF,F2e,Umr,Jmr,JW,Ymr,Kmr,Zmr,RF,T2e,egr,ogr,YW,rgr,tgr,agr,PF,M2e,ngr,sgr,KW,lgr,igr,dgr,BF,E2e,cgr,fgr,ZW,mgr,ggr,hgr,IF,C2e,pgr,_gr,eQ,ugr,bgr,vgr,NF,w2e,Fgr,Tgr,oQ,Mgr,Egr,Cgr,qF,A2e,wgr,Agr,rQ,ygr,Lgr,xgr,jF,y2e,$gr,kgr,tQ,Sgr,Rgr,Pgr,DF,L2e,Bgr,Igr,aQ,Ngr,qgr,jgr,GF,x2e,Dgr,Ggr,nQ,Ogr,Vgr,Xgr,OF,$2e,zgr,Wgr,sQ,Qgr,Hgr,Ugr,VF,k2e,Jgr,Ygr,lQ,Kgr,Zgr,ehr,XF,S2e,ohr,rhr,iQ,thr,ahr,nhr,zF,R2e,shr,lhr,dQ,ihr,dhr,chr,WF,P2e,fhr,mhr,cQ,ghr,hhr,phr,QF,B2e,_hr,uhr,fQ,bhr,vhr,Fhr,HF,I2e,Thr,Mhr,mQ,Ehr,Chr,whr,UF,N2e,Ahr,yhr,gQ,Lhr,xhr,$hr,JF,q2e,khr,Shr,hQ,Rhr,Phr,Bhr,YF,j2e,Ihr,Nhr,pQ,qhr,jhr,Dhr,KF,D2e,Ghr,Ohr,_Q,Vhr,Xhr,zhr,ZF,G2e,Whr,Qhr,uQ,Hhr,Uhr,Jhr,eT,zje,zd,oT,O2e,E8,Yhr,V2e,Khr,Wje,Ko,C8,Zhr,Wd,epr,bQ,opr,rpr,vQ,tpr,apr,npr,w8,spr,X2e,lpr,ipr,dpr,xt,A8,cpr,z2e,fpr,mpr,Qd,gpr,W2e,hpr,ppr,FQ,_pr,upr,bpr,rT,vpr,Ar,y8,Fpr,Q2e,Tpr,Mpr,Za,Epr,H2e,Cpr,wpr,U2e,Apr,ypr,J2e,Lpr,xpr,$pr,se,tT,Y2e,kpr,Spr,TQ,Rpr,Ppr,Bpr,aT,K2e,Ipr,Npr,MQ,qpr,jpr,Dpr,nT,Z2e,Gpr,Opr,EQ,Vpr,Xpr,zpr,sT,e4e,Wpr,Qpr,CQ,Hpr,Upr,Jpr,lT,o4e,Ypr,Kpr,wQ,Zpr,e_r,o_r,iT,r4e,r_r,t_r,AQ,a_r,n_r,s_r,dT,t4e,l_r,i_r,yQ,d_r,c_r,f_r,cT,a4e,m_r,g_r,LQ,h_r,p_r,__r,fT,n4e,u_r,b_r,xQ,v_r,F_r,T_r,mT,s4e,M_r,E_r,$Q,C_r,w_r,A_r,gT,l4e,y_r,L_r,kQ,x_r,$_r,k_r,hT,i4e,S_r,R_r,SQ,P_r,B_r,I_r,pT,d4e,N_r,q_r,RQ,j_r,D_r,G_r,_T,c4e,O_r,V_r,PQ,X_r,z_r,W_r,uT,f4e,Q_r,H_r,BQ,U_r,J_r,Y_r,bT,m4e,K_r,Z_r,IQ,eur,our,rur,vT,g4e,tur,aur,NQ,nur,sur,lur,FT,h4e,iur,dur,qQ,cur,fur,mur,TT,p4e,gur,hur,jQ,pur,_ur,uur,MT,_4e,bur,vur,DQ,Fur,Tur,Mur,ET,u4e,Eur,Cur,GQ,wur,Aur,yur,CT,b4e,Lur,xur,OQ,$ur,kur,Sur,wT,v4e,Rur,Pur,VQ,Bur,Iur,Nur,AT,Qje,Hd,yT,F4e,L8,qur,T4e,jur,Hje,Zo,x8,Dur,Ud,Gur,XQ,Our,Vur,zQ,Xur,zur,Wur,$8,Qur,M4e,Hur,Uur,Jur,$t,k8,Yur,E4e,Kur,Zur,Jd,e1r,C4e,o1r,r1r,WQ,t1r,a1r,n1r,LT,s1r,yr,S8,l1r,w4e,i1r,d1r,en,c1r,A4e,f1r,m1r,y4e,g1r,h1r,L4e,p1r,_1r,u1r,Me,xT,x4e,b1r,v1r,QQ,F1r,T1r,M1r,$T,$4e,E1r,C1r,HQ,w1r,A1r,y1r,kT,k4e,L1r,x1r,UQ,$1r,k1r,S1r,ST,S4e,R1r,P1r,JQ,B1r,I1r,N1r,RT,R4e,q1r,j1r,YQ,D1r,G1r,O1r,PT,P4e,V1r,X1r,KQ,z1r,W1r,Q1r,BT,B4e,H1r,U1r,ZQ,J1r,Y1r,K1r,IT,I4e,Z1r,ebr,eH,obr,rbr,tbr,NT,N4e,abr,nbr,oH,sbr,lbr,ibr,qT,q4e,dbr,cbr,rH,fbr,mbr,gbr,jT,j4e,hbr,pbr,tH,_br,ubr,bbr,DT,D4e,vbr,Fbr,aH,Tbr,Mbr,Ebr,GT,G4e,Cbr,wbr,nH,Abr,ybr,Lbr,OT,Uje,Yd,VT,O4e,R8,xbr,V4e,$br,Jje,er,P8,kbr,Kd,Sbr,sH,Rbr,Pbr,lH,Bbr,Ibr,Nbr,B8,qbr,X4e,jbr,Dbr,Gbr,kt,I8,Obr,z4e,Vbr,Xbr,Zd,zbr,W4e,Wbr,Qbr,iH,Hbr,Ubr,Jbr,XT,Ybr,Lr,N8,Kbr,Q4e,Zbr,e2r,on,o2r,H4e,r2r,t2r,U4e,a2r,n2r,J4e,s2r,l2r,i2r,rn,zT,Y4e,d2r,c2r,dH,f2r,m2r,g2r,WT,K4e,h2r,p2r,cH,_2r,u2r,b2r,QT,Z4e,v2r,F2r,fH,T2r,M2r,E2r,HT,e5e,C2r,w2r,mH,A2r,y2r,L2r,UT,Yje,ec,JT,o5e,q8,x2r,r5e,$2r,Kje,or,j8,k2r,oc,S2r,gH,R2r,P2r,hH,B2r,I2r,N2r,D8,q2r,t5e,j2r,D2r,G2r,St,G8,O2r,a5e,V2r,X2r,rc,z2r,n5e,W2r,Q2r,pH,H2r,U2r,J2r,YT,Y2r,xr,O8,K2r,s5e,Z2r,e4r,tn,o4r,l5e,r4r,t4r,i5e,a4r,n4r,d5e,s4r,l4r,i4r,ie,KT,c5e,d4r,c4r,_H,f4r,m4r,g4r,ZT,f5e,h4r,p4r,uH,_4r,u4r,b4r,e7,m5e,v4r,F4r,bH,T4r,M4r,E4r,o7,g5e,C4r,w4r,vH,A4r,y4r,L4r,r7,h5e,x4r,$4r,FH,k4r,S4r,R4r,t7,p5e,P4r,B4r,TH,I4r,N4r,q4r,a7,_5e,j4r,D4r,MH,G4r,O4r,V4r,n7,u5e,X4r,z4r,EH,W4r,Q4r,H4r,s7,b5e,U4r,J4r,CH,Y4r,K4r,Z4r,l7,v5e,e5r,o5r,wH,r5r,t5r,a5r,i7,F5e,n5r,s5r,AH,l5r,i5r,d5r,d7,T5e,c5r,f5r,yH,m5r,g5r,h5r,c7,M5e,p5r,_5r,LH,u5r,b5r,v5r,f7,E5e,F5r,T5r,xH,M5r,E5r,C5r,m7,C5e,w5r,A5r,$H,y5r,L5r,x5r,g7,w5e,$5r,k5r,kH,S5r,R5r,P5r,h7,A5e,B5r,I5r,SH,N5r,q5r,j5r,p7,y5e,D5r,G5r,RH,O5r,V5r,X5r,_7,L5e,z5r,W5r,PH,Q5r,H5r,U5r,u7,x5e,J5r,Y5r,BH,K5r,Z5r,evr,b7,Zje,tc,v7,$5e,V8,ovr,k5e,rvr,eDe,rr,X8,tvr,ac,avr,IH,nvr,svr,NH,lvr,ivr,dvr,z8,cvr,S5e,fvr,mvr,gvr,Rt,W8,hvr,R5e,pvr,_vr,nc,uvr,P5e,bvr,vvr,qH,Fvr,Tvr,Mvr,F7,Evr,$r,Q8,Cvr,B5e,wvr,Avr,an,yvr,I5e,Lvr,xvr,N5e,$vr,kvr,q5e,Svr,Rvr,Pvr,ye,T7,j5e,Bvr,Ivr,jH,Nvr,qvr,jvr,M7,D5e,Dvr,Gvr,DH,Ovr,Vvr,Xvr,E7,G5e,zvr,Wvr,GH,Qvr,Hvr,Uvr,C7,O5e,Jvr,Yvr,OH,Kvr,Zvr,e3r,w7,V5e,o3r,r3r,VH,t3r,a3r,n3r,A7,X5e,s3r,l3r,XH,i3r,d3r,c3r,y7,z5e,f3r,m3r,zH,g3r,h3r,p3r,L7,W5e,_3r,u3r,WH,b3r,v3r,F3r,x7,Q5e,T3r,M3r,QH,E3r,C3r,w3r,$7,H5e,A3r,y3r,HH,L3r,x3r,$3r,k7,oDe,sc,S7,U5e,H8,k3r,J5e,S3r,rDe,tr,U8,R3r,lc,P3r,UH,B3r,I3r,JH,N3r,q3r,j3r,J8,D3r,Y5e,G3r,O3r,V3r,Pt,Y8,X3r,K5e,z3r,W3r,ic,Q3r,Z5e,H3r,U3r,YH,J3r,Y3r,K3r,R7,Z3r,kr,K8,eFr,eve,oFr,rFr,nn,tFr,ove,aFr,nFr,rve,sFr,lFr,tve,iFr,dFr,cFr,oe,P7,ave,fFr,mFr,KH,gFr,hFr,pFr,B7,nve,_Fr,uFr,ZH,bFr,vFr,FFr,I7,sve,TFr,MFr,eU,EFr,CFr,wFr,N7,lve,AFr,yFr,oU,LFr,xFr,$Fr,q7,ive,kFr,SFr,rU,RFr,PFr,BFr,j7,dve,IFr,NFr,tU,qFr,jFr,DFr,D7,cve,GFr,OFr,aU,VFr,XFr,zFr,G7,fve,WFr,QFr,nU,HFr,UFr,JFr,O7,mve,YFr,KFr,sU,ZFr,eTr,oTr,V7,gve,rTr,tTr,lU,aTr,nTr,sTr,X7,hve,lTr,iTr,iU,dTr,cTr,fTr,z7,pve,mTr,gTr,dU,hTr,pTr,_Tr,W7,_ve,uTr,bTr,cU,vTr,FTr,TTr,Q7,uve,MTr,ETr,fU,CTr,wTr,ATr,H7,bve,yTr,LTr,mU,xTr,$Tr,kTr,U7,vve,STr,RTr,gU,PTr,BTr,ITr,J7,Fve,NTr,qTr,hU,jTr,DTr,GTr,Y7,Tve,OTr,VTr,pU,XTr,zTr,WTr,K7,Mve,QTr,HTr,_U,UTr,JTr,YTr,Z7,Eve,KTr,ZTr,uU,e7r,o7r,r7r,eM,Cve,t7r,a7r,bU,n7r,s7r,l7r,oM,wve,i7r,d7r,vU,c7r,f7r,m7r,rM,Ave,g7r,h7r,FU,p7r,_7r,u7r,tM,yve,b7r,v7r,TU,F7r,T7r,M7r,aM,Lve,E7r,C7r,MU,w7r,A7r,y7r,nM,xve,L7r,x7r,EU,$7r,k7r,S7r,sM,tDe,dc,lM,$ve,Z8,R7r,kve,P7r,aDe,ar,e9,B7r,cc,I7r,CU,N7r,q7r,wU,j7r,D7r,G7r,o9,O7r,Sve,V7r,X7r,z7r,Bt,r9,W7r,Rve,Q7r,H7r,fc,U7r,Pve,J7r,Y7r,AU,K7r,Z7r,eMr,iM,oMr,Sr,t9,rMr,Bve,tMr,aMr,sn,nMr,Ive,sMr,lMr,Nve,iMr,dMr,qve,cMr,fMr,mMr,pe,dM,jve,gMr,hMr,yU,pMr,_Mr,uMr,cM,Dve,bMr,vMr,LU,FMr,TMr,MMr,fM,Gve,EMr,CMr,xU,wMr,AMr,yMr,mM,Ove,LMr,xMr,$U,$Mr,kMr,SMr,gM,Vve,RMr,PMr,kU,BMr,IMr,NMr,hM,Xve,qMr,jMr,SU,DMr,GMr,OMr,pM,zve,VMr,XMr,RU,zMr,WMr,QMr,_M,Wve,HMr,UMr,PU,JMr,YMr,KMr,uM,Qve,ZMr,eEr,BU,oEr,rEr,tEr,bM,Hve,aEr,nEr,IU,sEr,lEr,iEr,vM,Uve,dEr,cEr,NU,fEr,mEr,gEr,FM,Jve,hEr,pEr,qU,_Er,uEr,bEr,TM,Yve,vEr,FEr,jU,TEr,MEr,EEr,MM,Kve,CEr,wEr,DU,AEr,yEr,LEr,EM,Zve,xEr,$Er,GU,kEr,SEr,REr,CM,e3e,PEr,BEr,OU,IEr,NEr,qEr,wM,o3e,jEr,DEr,VU,GEr,OEr,VEr,AM,nDe,mc,yM,r3e,a9,XEr,t3e,zEr,sDe,nr,n9,WEr,gc,QEr,XU,HEr,UEr,zU,JEr,YEr,KEr,s9,ZEr,a3e,eCr,oCr,rCr,It,l9,tCr,n3e,aCr,nCr,hc,sCr,s3e,lCr,iCr,WU,dCr,cCr,fCr,LM,mCr,Rr,i9,gCr,l3e,hCr,pCr,ln,_Cr,i3e,uCr,bCr,d3e,vCr,FCr,c3e,TCr,MCr,ECr,d9,xM,f3e,CCr,wCr,QU,ACr,yCr,LCr,$M,m3e,xCr,$Cr,HU,kCr,SCr,RCr,kM,lDe,pc,SM,g3e,c9,PCr,h3e,BCr,iDe,sr,f9,ICr,_c,NCr,UU,qCr,jCr,JU,DCr,GCr,OCr,m9,VCr,p3e,XCr,zCr,WCr,Nt,g9,QCr,_3e,HCr,UCr,uc,JCr,u3e,YCr,KCr,YU,ZCr,e0r,o0r,RM,r0r,Pr,h9,t0r,b3e,a0r,n0r,dn,s0r,v3e,l0r,i0r,F3e,d0r,c0r,T3e,f0r,m0r,g0r,M3e,PM,E3e,h0r,p0r,KU,_0r,u0r,b0r,BM,dDe,bc,IM,C3e,p9,v0r,w3e,F0r,cDe,lr,_9,T0r,vc,M0r,ZU,E0r,C0r,eJ,w0r,A0r,y0r,u9,L0r,A3e,x0r,$0r,k0r,qt,b9,S0r,y3e,R0r,P0r,Fc,B0r,L3e,I0r,N0r,oJ,q0r,j0r,D0r,NM,G0r,Br,v9,O0r,x3e,V0r,X0r,cn,z0r,$3e,W0r,Q0r,k3e,H0r,U0r,S3e,J0r,Y0r,K0r,de,qM,R3e,Z0r,ewr,rJ,owr,rwr,twr,jM,P3e,awr,nwr,tJ,swr,lwr,iwr,DM,B3e,dwr,cwr,aJ,fwr,mwr,gwr,GM,I3e,hwr,pwr,nJ,_wr,uwr,bwr,OM,N3e,vwr,Fwr,sJ,Twr,Mwr,Ewr,VM,q3e,Cwr,wwr,lJ,Awr,ywr,Lwr,XM,j3e,xwr,$wr,iJ,kwr,Swr,Rwr,zM,D3e,Pwr,Bwr,dJ,Iwr,Nwr,qwr,WM,G3e,jwr,Dwr,cJ,Gwr,Owr,Vwr,QM,O3e,Xwr,zwr,fJ,Wwr,Qwr,Hwr,HM,V3e,Uwr,Jwr,mJ,Ywr,Kwr,Zwr,UM,X3e,e6r,o6r,gJ,r6r,t6r,a6r,JM,z3e,n6r,s6r,hJ,l6r,i6r,d6r,YM,W3e,c6r,f6r,pJ,m6r,g6r,h6r,KM,Q3e,p6r,_6r,_J,u6r,b6r,v6r,ZM,H3e,F6r,T6r,uJ,M6r,E6r,C6r,eE,U3e,w6r,A6r,bJ,y6r,L6r,x6r,oE,J3e,$6r,k6r,vJ,S6r,R6r,P6r,rE,Y3e,B6r,I6r,FJ,N6r,q6r,j6r,tE,K3e,D6r,G6r,TJ,O6r,V6r,X6r,aE,fDe,Tc,nE,Z3e,F9,z6r,eFe,W6r,mDe,ir,T9,Q6r,Mc,H6r,MJ,U6r,J6r,EJ,Y6r,K6r,Z6r,M9,eAr,oFe,oAr,rAr,tAr,jt,E9,aAr,rFe,nAr,sAr,Ec,lAr,tFe,iAr,dAr,CJ,cAr,fAr,mAr,sE,gAr,Ir,C9,hAr,aFe,pAr,_Ar,fn,uAr,nFe,bAr,vAr,sFe,FAr,TAr,lFe,MAr,EAr,CAr,ce,lE,iFe,wAr,AAr,wJ,yAr,LAr,xAr,iE,dFe,$Ar,kAr,AJ,SAr,RAr,PAr,dE,cFe,BAr,IAr,yJ,NAr,qAr,jAr,cE,fFe,DAr,GAr,LJ,OAr,VAr,XAr,fE,mFe,zAr,WAr,xJ,QAr,HAr,UAr,mE,gFe,JAr,YAr,$J,KAr,ZAr,eyr,gE,hFe,oyr,ryr,kJ,tyr,ayr,nyr,hE,pFe,syr,lyr,SJ,iyr,dyr,cyr,pE,_Fe,fyr,myr,RJ,gyr,hyr,pyr,_E,uFe,_yr,uyr,PJ,byr,vyr,Fyr,uE,bFe,Tyr,Myr,BJ,Eyr,Cyr,wyr,bE,vFe,Ayr,yyr,IJ,Lyr,xyr,$yr,vE,FFe,kyr,Syr,NJ,Ryr,Pyr,Byr,FE,TFe,Iyr,Nyr,qJ,qyr,jyr,Dyr,TE,MFe,Gyr,Oyr,jJ,Vyr,Xyr,zyr,ME,EFe,Wyr,Qyr,DJ,Hyr,Uyr,Jyr,EE,CFe,Yyr,Kyr,GJ,Zyr,eLr,oLr,CE,wFe,rLr,tLr,OJ,aLr,nLr,sLr,wE,AFe,lLr,iLr,VJ,dLr,cLr,fLr,AE,yFe,mLr,gLr,XJ,hLr,pLr,_Lr,yE,gDe,Cc,LE,LFe,w9,uLr,xFe,bLr,hDe,dr,A9,vLr,wc,FLr,zJ,TLr,MLr,WJ,ELr,CLr,wLr,y9,ALr,$Fe,yLr,LLr,xLr,Dt,L9,$Lr,kFe,kLr,SLr,Ac,RLr,SFe,PLr,BLr,QJ,ILr,NLr,qLr,xE,jLr,Nr,x9,DLr,RFe,GLr,OLr,mn,VLr,PFe,XLr,zLr,BFe,WLr,QLr,IFe,HLr,ULr,JLr,NFe,$E,qFe,YLr,KLr,HJ,ZLr,e8r,o8r,kE,pDe,yc,SE,jFe,$9,r8r,DFe,t8r,_De,cr,k9,a8r,Lc,n8r,UJ,s8r,l8r,JJ,i8r,d8r,c8r,S9,f8r,GFe,m8r,g8r,h8r,Gt,R9,p8r,OFe,_8r,u8r,xc,b8r,VFe,v8r,F8r,YJ,T8r,M8r,E8r,RE,C8r,qr,P9,w8r,XFe,A8r,y8r,gn,L8r,zFe,x8r,$8r,WFe,k8r,S8r,QFe,R8r,P8r,B8r,HFe,PE,UFe,I8r,N8r,KJ,q8r,j8r,D8r,BE,uDe,$c,IE,JFe,B9,G8r,YFe,O8r,bDe,fr,I9,V8r,kc,X8r,ZJ,z8r,W8r,eY,Q8r,H8r,U8r,N9,J8r,KFe,Y8r,K8r,Z8r,Ot,q9,e9r,ZFe,o9r,r9r,Sc,t9r,eTe,a9r,n9r,oY,s9r,l9r,i9r,NE,d9r,jr,j9,c9r,oTe,f9r,m9r,hn,g9r,rTe,h9r,p9r,tTe,_9r,u9r,aTe,b9r,v9r,F9r,re,qE,nTe,T9r,M9r,rY,E9r,C9r,w9r,jE,sTe,A9r,y9r,tY,L9r,x9r,$9r,DE,lTe,k9r,S9r,aY,R9r,P9r,B9r,GE,iTe,I9r,N9r,nY,q9r,j9r,D9r,OE,dTe,G9r,O9r,sY,V9r,X9r,z9r,VE,cTe,W9r,Q9r,lY,H9r,U9r,J9r,XE,fTe,Y9r,K9r,iY,Z9r,exr,oxr,zE,mTe,rxr,txr,dY,axr,nxr,sxr,WE,gTe,lxr,ixr,cY,dxr,cxr,fxr,QE,hTe,mxr,gxr,fY,hxr,pxr,_xr,HE,pTe,uxr,bxr,mY,vxr,Fxr,Txr,UE,_Te,Mxr,Exr,gY,Cxr,wxr,Axr,JE,uTe,yxr,Lxr,hY,xxr,$xr,kxr,YE,bTe,Sxr,Rxr,pY,Pxr,Bxr,Ixr,KE,vTe,Nxr,qxr,_Y,jxr,Dxr,Gxr,ZE,FTe,Oxr,Vxr,uY,Xxr,zxr,Wxr,eC,TTe,Qxr,Hxr,bY,Uxr,Jxr,Yxr,oC,MTe,Kxr,Zxr,vY,e$r,o$r,r$r,rC,ETe,t$r,a$r,FY,n$r,s$r,l$r,tC,CTe,i$r,d$r,TY,c$r,f$r,m$r,aC,wTe,g$r,h$r,MY,p$r,_$r,u$r,nC,ATe,b$r,v$r,EY,F$r,T$r,M$r,sC,yTe,E$r,C$r,CY,w$r,A$r,y$r,lC,LTe,L$r,x$r,wY,$$r,k$r,S$r,iC,xTe,R$r,P$r,AY,B$r,I$r,N$r,dC,$Te,q$r,j$r,yY,D$r,G$r,O$r,cC,vDe,Rc,fC,kTe,D9,V$r,STe,X$r,FDe,mr,G9,z$r,Pc,W$r,LY,Q$r,H$r,xY,U$r,J$r,Y$r,O9,K$r,RTe,Z$r,ekr,okr,Vt,V9,rkr,PTe,tkr,akr,Bc,nkr,BTe,skr,lkr,$Y,ikr,dkr,ckr,mC,fkr,Dr,X9,mkr,ITe,gkr,hkr,pn,pkr,NTe,_kr,ukr,qTe,bkr,vkr,jTe,Fkr,Tkr,Mkr,Le,gC,DTe,Ekr,Ckr,kY,wkr,Akr,ykr,hC,GTe,Lkr,xkr,SY,$kr,kkr,Skr,pC,OTe,Rkr,Pkr,RY,Bkr,Ikr,Nkr,_C,VTe,qkr,jkr,PY,Dkr,Gkr,Okr,uC,XTe,Vkr,Xkr,BY,zkr,Wkr,Qkr,bC,zTe,Hkr,Ukr,IY,Jkr,Ykr,Kkr,vC,WTe,Zkr,eSr,NY,oSr,rSr,tSr,FC,QTe,aSr,nSr,qY,sSr,lSr,iSr,TC,HTe,dSr,cSr,jY,fSr,mSr,gSr,MC,UTe,hSr,pSr,DY,_Sr,uSr,bSr,EC,TDe,Ic,CC,JTe,z9,vSr,YTe,FSr,MDe,gr,W9,TSr,Nc,MSr,GY,ESr,CSr,OY,wSr,ASr,ySr,Q9,LSr,KTe,xSr,$Sr,kSr,Xt,H9,SSr,ZTe,RSr,PSr,qc,BSr,e7e,ISr,NSr,VY,qSr,jSr,DSr,wC,GSr,Gr,U9,OSr,o7e,VSr,XSr,_n,zSr,r7e,WSr,QSr,t7e,HSr,USr,a7e,JSr,YSr,KSr,Ee,AC,n7e,ZSr,eRr,XY,oRr,rRr,tRr,yC,s7e,aRr,nRr,zY,sRr,lRr,iRr,LC,l7e,dRr,cRr,WY,fRr,mRr,gRr,xC,i7e,hRr,pRr,QY,_Rr,uRr,bRr,$C,d7e,vRr,FRr,HY,TRr,MRr,ERr,kC,c7e,CRr,wRr,UY,ARr,yRr,LRr,SC,f7e,xRr,$Rr,JY,kRr,SRr,RRr,RC,m7e,PRr,BRr,YY,IRr,NRr,qRr,PC,g7e,jRr,DRr,KY,GRr,ORr,VRr,BC,h7e,XRr,zRr,ZY,WRr,QRr,HRr,IC,p7e,URr,JRr,eK,YRr,KRr,ZRr,NC,_7e,ePr,oPr,oK,rPr,tPr,aPr,qC,EDe,jc,jC,u7e,J9,nPr,b7e,sPr,CDe,hr,Y9,lPr,Dc,iPr,rK,dPr,cPr,tK,fPr,mPr,gPr,K9,hPr,v7e,pPr,_Pr,uPr,zt,Z9,bPr,F7e,vPr,FPr,Gc,TPr,T7e,MPr,EPr,aK,CPr,wPr,APr,DC,yPr,Or,ex,LPr,M7e,xPr,$Pr,un,kPr,E7e,SPr,RPr,C7e,PPr,BPr,w7e,IPr,NPr,qPr,xe,GC,A7e,jPr,DPr,nK,GPr,OPr,VPr,OC,y7e,XPr,zPr,sK,WPr,QPr,HPr,VC,L7e,UPr,JPr,lK,YPr,KPr,ZPr,XC,x7e,eBr,oBr,iK,rBr,tBr,aBr,zC,$7e,nBr,sBr,dK,lBr,iBr,dBr,WC,k7e,cBr,fBr,cK,mBr,gBr,hBr,QC,S7e,pBr,_Br,fK,uBr,bBr,vBr,HC,R7e,FBr,TBr,mK,MBr,EBr,CBr,UC,P7e,wBr,ABr,gK,yBr,LBr,xBr,JC,B7e,$Br,kBr,hK,SBr,RBr,PBr,YC,wDe,Oc,KC,I7e,ox,BBr,N7e,IBr,ADe,pr,rx,NBr,Vc,qBr,pK,jBr,DBr,_K,GBr,OBr,VBr,tx,XBr,q7e,zBr,WBr,QBr,Wt,ax,HBr,j7e,UBr,JBr,Xc,YBr,D7e,KBr,ZBr,uK,eIr,oIr,rIr,ZC,tIr,Vr,nx,aIr,G7e,nIr,sIr,bn,lIr,O7e,iIr,dIr,V7e,cIr,fIr,X7e,mIr,gIr,hIr,Pe,e0,z7e,pIr,_Ir,bK,uIr,bIr,vIr,o0,W7e,FIr,TIr,vK,MIr,EIr,CIr,r0,Q7e,wIr,AIr,FK,yIr,LIr,xIr,t0,H7e,$Ir,kIr,TK,SIr,RIr,PIr,a0,U7e,BIr,IIr,MK,NIr,qIr,jIr,n0,J7e,DIr,GIr,EK,OIr,VIr,XIr,s0,Y7e,zIr,WIr,CK,QIr,HIr,UIr,l0,K7e,JIr,YIr,wK,KIr,ZIr,eNr,i0,Z7e,oNr,rNr,AK,tNr,aNr,nNr,d0,yDe,zc,c0,eMe,sx,sNr,oMe,lNr,LDe,_r,lx,iNr,Wc,dNr,yK,cNr,fNr,LK,mNr,gNr,hNr,ix,pNr,rMe,_Nr,uNr,bNr,Qt,dx,vNr,tMe,FNr,TNr,Qc,MNr,aMe,ENr,CNr,xK,wNr,ANr,yNr,f0,LNr,Xr,cx,xNr,nMe,$Nr,kNr,vn,SNr,sMe,RNr,PNr,lMe,BNr,INr,iMe,NNr,qNr,jNr,$e,m0,dMe,DNr,GNr,$K,ONr,VNr,XNr,g0,cMe,zNr,WNr,kK,QNr,HNr,UNr,h0,fMe,JNr,YNr,SK,KNr,ZNr,eqr,p0,mMe,oqr,rqr,RK,tqr,aqr,nqr,_0,gMe,sqr,lqr,PK,iqr,dqr,cqr,u0,hMe,fqr,mqr,BK,gqr,hqr,pqr,b0,pMe,_qr,uqr,IK,bqr,vqr,Fqr,v0,_Me,Tqr,Mqr,NK,Eqr,Cqr,wqr,F0,uMe,Aqr,yqr,qK,Lqr,xqr,$qr,T0,bMe,kqr,Sqr,jK,Rqr,Pqr,Bqr,M0,xDe,Hc,E0,vMe,fx,Iqr,FMe,Nqr,$De,ur,mx,qqr,Uc,jqr,DK,Dqr,Gqr,GK,Oqr,Vqr,Xqr,gx,zqr,TMe,Wqr,Qqr,Hqr,Ht,hx,Uqr,MMe,Jqr,Yqr,Jc,Kqr,EMe,Zqr,ejr,OK,ojr,rjr,tjr,C0,ajr,zr,px,njr,CMe,sjr,ljr,Fn,ijr,wMe,djr,cjr,AMe,fjr,mjr,yMe,gjr,hjr,pjr,ke,w0,LMe,_jr,ujr,VK,bjr,vjr,Fjr,A0,xMe,Tjr,Mjr,XK,Ejr,Cjr,wjr,y0,$Me,Ajr,yjr,zK,Ljr,xjr,$jr,L0,kMe,kjr,Sjr,WK,Rjr,Pjr,Bjr,x0,SMe,Ijr,Njr,QK,qjr,jjr,Djr,$0,RMe,Gjr,Ojr,HK,Vjr,Xjr,zjr,k0,PMe,Wjr,Qjr,UK,Hjr,Ujr,Jjr,S0,BMe,Yjr,Kjr,JK,Zjr,eDr,oDr,R0,IMe,rDr,tDr,YK,aDr,nDr,sDr,P0,NMe,lDr,iDr,KK,dDr,cDr,fDr,B0,kDe,Yc,I0,qMe,_x,mDr,jMe,gDr,SDe,br,ux,hDr,Kc,pDr,ZK,_Dr,uDr,eZ,bDr,vDr,FDr,bx,TDr,DMe,MDr,EDr,CDr,Ut,vx,wDr,GMe,ADr,yDr,Zc,LDr,OMe,xDr,$Dr,oZ,kDr,SDr,RDr,N0,PDr,Wr,Fx,BDr,VMe,IDr,NDr,Tn,qDr,XMe,jDr,DDr,zMe,GDr,ODr,WMe,VDr,XDr,zDr,Ge,q0,QMe,WDr,QDr,rZ,HDr,UDr,JDr,j0,HMe,YDr,KDr,tZ,ZDr,eGr,oGr,D0,UMe,rGr,tGr,aZ,aGr,nGr,sGr,G0,JMe,lGr,iGr,nZ,dGr,cGr,fGr,O0,YMe,mGr,gGr,sZ,hGr,pGr,_Gr,V0,KMe,uGr,bGr,lZ,vGr,FGr,TGr,X0,ZMe,MGr,EGr,iZ,CGr,wGr,AGr,z0,eEe,yGr,LGr,dZ,xGr,$Gr,kGr,W0,RDe,ef,Q0,oEe,Tx,SGr,rEe,RGr,PDe,vr,Mx,PGr,of,BGr,cZ,IGr,NGr,fZ,qGr,jGr,DGr,Ex,GGr,tEe,OGr,VGr,XGr,Jt,Cx,zGr,aEe,WGr,QGr,rf,HGr,nEe,UGr,JGr,mZ,YGr,KGr,ZGr,H0,eOr,Qr,wx,oOr,sEe,rOr,tOr,Mn,aOr,lEe,nOr,sOr,iEe,lOr,iOr,dEe,dOr,cOr,fOr,Oe,U0,cEe,mOr,gOr,gZ,hOr,pOr,_Or,J0,fEe,uOr,bOr,hZ,vOr,FOr,TOr,Y0,mEe,MOr,EOr,pZ,COr,wOr,AOr,K0,gEe,yOr,LOr,_Z,xOr,$Or,kOr,Z0,hEe,SOr,ROr,uZ,POr,BOr,IOr,ew,pEe,NOr,qOr,bZ,jOr,DOr,GOr,ow,_Ee,OOr,VOr,vZ,XOr,zOr,WOr,rw,uEe,QOr,HOr,FZ,UOr,JOr,YOr,tw,BDe,tf,aw,bEe,Ax,KOr,vEe,ZOr,IDe,Fr,yx,eVr,af,oVr,TZ,rVr,tVr,MZ,aVr,nVr,sVr,Lx,lVr,FEe,iVr,dVr,cVr,Yt,xx,fVr,TEe,mVr,gVr,nf,hVr,MEe,pVr,_Vr,EZ,uVr,bVr,vVr,nw,FVr,Hr,$x,TVr,EEe,MVr,EVr,En,CVr,CEe,wVr,AVr,wEe,yVr,LVr,AEe,xVr,$Vr,kVr,yEe,sw,LEe,SVr,RVr,CZ,PVr,BVr,IVr,lw,NDe,sf,iw,xEe,kx,NVr,$Ee,qVr,qDe,Tr,Sx,jVr,lf,DVr,wZ,GVr,OVr,AZ,VVr,XVr,zVr,Rx,WVr,kEe,QVr,HVr,UVr,Kt,Px,JVr,SEe,YVr,KVr,df,ZVr,REe,eXr,oXr,yZ,rXr,tXr,aXr,dw,nXr,Ur,Bx,sXr,PEe,lXr,iXr,Cn,dXr,BEe,cXr,fXr,IEe,mXr,gXr,NEe,hXr,pXr,_Xr,Ix,cw,qEe,uXr,bXr,LZ,vXr,FXr,TXr,fw,jEe,MXr,EXr,xZ,CXr,wXr,AXr,mw,jDe,cf,gw,DEe,Nx,yXr,GEe,LXr,DDe,Mr,qx,xXr,ff,$Xr,$Z,kXr,SXr,kZ,RXr,PXr,BXr,jx,IXr,OEe,NXr,qXr,jXr,Zt,Dx,DXr,VEe,GXr,OXr,mf,VXr,XEe,XXr,zXr,SZ,WXr,QXr,HXr,hw,UXr,Jr,Gx,JXr,zEe,YXr,KXr,wn,ZXr,WEe,ezr,ozr,QEe,rzr,tzr,HEe,azr,nzr,szr,UEe,pw,JEe,lzr,izr,RZ,dzr,czr,fzr,_w,GDe;return d=new te({}),wa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),NA=new te({}),qA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Tf=new mzr({props:{warning:!0,$$slots:{default:[gSt]},$$scope:{ctx:L}}}),jA=new te({}),DA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/configuration_auto.py#L587"}}),VA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/configuration_auto.py#L610"}}),wg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[hSt]},$$scope:{ctx:L}}}),XA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/configuration_auto.py#L733"}}),zA=new te({}),WA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/tokenization_auto.py#L390"}}),UA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17354/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/tokenization_auto.py#L404"}}),sh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[pSt]},$$scope:{ctx:L}}}),JA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/tokenization_auto.py#L603"}}),YA=new te({}),KA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17354/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/feature_extraction_auto.py#L205"}}),jh=new mzr({props:{$$slots:{default:[_St]},$$scope:{ctx:L}}}),Dh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[uSt]},$$scope:{ctx:L}}}),ry=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/feature_extraction_auto.py#L332"}}),ty=new te({}),ay=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/processing_auto.py#L88"}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/processing_auto.py#L102"}}),sp=new mzr({props:{$$slots:{default:[bSt]},$$scope:{ctx:L}}}),lp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[vSt]},$$scope:{ctx:L}}}),iy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/processing_auto.py#L255"}}),dy=new te({}),cy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L740"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),cp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[FSt]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),su=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[TSt]},$$scope:{ctx:L}}}),hy=new te({}),py=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L747"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),iu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[MSt]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Ku=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ESt]},$$scope:{ctx:L}}}),vy=new te({}),Fy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L762"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),e1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[CSt]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),j1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[wSt]},$$scope:{ctx:L}}}),Cy=new te({}),wy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L769"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),G1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[ASt]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),wb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[ySt]},$$scope:{ctx:L}}}),xy=new te({}),$y=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L776"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),yb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[LSt]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),zb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[xSt]},$$scope:{ctx:L}}}),Py=new te({}),By=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L785"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Qb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[$St]},$$scope:{ctx:L}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),O2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[kSt]},$$scope:{ctx:L}}}),jy=new te({}),Dy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L819"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),X2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[SSt]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),T4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[RSt]},$$scope:{ctx:L}}}),Xy=new te({}),zy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L826"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),E4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[PSt]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),$4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[BSt]},$$scope:{ctx:L}}}),Uy=new te({}),Jy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L812"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),S4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[ISt]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),h5=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[NSt]},$$scope:{ctx:L}}}),eL=new te({}),oL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L794"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),_5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[qSt]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),av=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[jSt]},$$scope:{ctx:L}}}),nL=new te({}),sL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L801"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),sv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[DSt]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),dv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[GSt]},$$scope:{ctx:L}}}),cL=new te({}),fL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L835"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),fv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[OSt]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Av=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[VSt]},$$scope:{ctx:L}}}),pL=new te({}),_L=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L874"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Lv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[XSt]},$$scope:{ctx:L}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),kv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[zSt]},$$scope:{ctx:L}}}),FL=new te({}),TL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L881"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Rv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[WSt]},$$scope:{ctx:L}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Xv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[QSt]},$$scope:{ctx:L}}}),wL=new te({}),AL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L904"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Wv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[HSt]},$$scope:{ctx:L}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[USt]},$$scope:{ctx:L}}}),$L=new te({}),kL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L888"}}),RL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[JSt]},$$scope:{ctx:L}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),m3=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[YSt]},$$scope:{ctx:L}}}),BL=new te({}),IL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L895"}}),qL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),h3=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[KSt]},$$scope:{ctx:L}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),b3=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[ZSt]},$$scope:{ctx:L}}}),GL=new te({}),OL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L913"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),F3=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[eRt]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),y3=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[oRt]},$$scope:{ctx:L}}}),WL=new te({}),QL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L920"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),x3=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[rRt]},$$scope:{ctx:L}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),P3=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[tRt]},$$scope:{ctx:L}}}),YL=new te({}),KL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L867"}}),e8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),I3=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[aRt]},$$scope:{ctx:L}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),D3=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[nRt]},$$scope:{ctx:L}}}),t8=new te({}),a8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L842"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),O3=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[sRt]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),z3=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[lRt]},$$scope:{ctx:L}}}),i8=new te({}),d8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L849"}}),f8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),Q3=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[iRt]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),eF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[dRt]},$$scope:{ctx:L}}}),g8=new te({}),h8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_auto.py#L858"}}),_8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),rF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[cRt]},$$scope:{ctx:L}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),nF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[fRt]},$$scope:{ctx:L}}}),b8=new te({}),v8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),lF=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[mRt]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),eT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[gRt]},$$scope:{ctx:L}}}),E8=new te({}),C8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),rT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[hRt]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[pRt]},$$scope:{ctx:L}}}),L8=new te({}),x8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),LT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[_Rt]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),OT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[uRt]},$$scope:{ctx:L}}}),R8=new te({}),P8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),I8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),XT=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[bRt]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),UT=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[vRt]},$$scope:{ctx:L}}}),q8=new te({}),j8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),YT=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[FRt]},$$scope:{ctx:L}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),b7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[TRt]},$$scope:{ctx:L}}}),V8=new te({}),X8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),F7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[MRt]},$$scope:{ctx:L}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),k7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ERt]},$$scope:{ctx:L}}}),H8=new te({}),U8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),R7=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[CRt]},$$scope:{ctx:L}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),sM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[wRt]},$$scope:{ctx:L}}}),Z8=new te({}),e9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),r9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),iM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[ARt]},$$scope:{ctx:L}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),AM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[yRt]},$$scope:{ctx:L}}}),a9=new te({}),n9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),l9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),LM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[LRt]},$$scope:{ctx:L}}}),i9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),kM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[xRt]},$$scope:{ctx:L}}}),c9=new te({}),f9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),g9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),RM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[$Rt]},$$scope:{ctx:L}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),BM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[kRt]},$$scope:{ctx:L}}}),p9=new te({}),_9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),b9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),NM=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[SRt]},$$scope:{ctx:L}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),aE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[RRt]},$$scope:{ctx:L}}}),F9=new te({}),T9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),E9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),sE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[PRt]},$$scope:{ctx:L}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),yE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[BRt]},$$scope:{ctx:L}}}),w9=new te({}),A9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),L9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),xE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[IRt]},$$scope:{ctx:L}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),kE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[NRt]},$$scope:{ctx:L}}}),$9=new te({}),k9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),R9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),RE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[qRt]},$$scope:{ctx:L}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),BE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[jRt]},$$scope:{ctx:L}}}),B9=new te({}),I9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),q9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),NE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[DRt]},$$scope:{ctx:L}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[GRt]},$$scope:{ctx:L}}}),D9=new te({}),G9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),V9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[ORt]},$$scope:{ctx:L}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[VRt]},$$scope:{ctx:L}}}),z9=new te({}),W9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),H9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[XRt]},$$scope:{ctx:L}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),qC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[zRt]},$$scope:{ctx:L}}}),J9=new te({}),Y9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[WRt]},$$scope:{ctx:L}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),YC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[QRt]},$$scope:{ctx:L}}}),ox=new te({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),ZC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[HRt]},$$scope:{ctx:L}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),d0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[URt]},$$scope:{ctx:L}}}),sx=new te({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),f0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[JRt]},$$scope:{ctx:L}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),M0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[YRt]},$$scope:{ctx:L}}}),fx=new te({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),C0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[KRt]},$$scope:{ctx:L}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),B0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ZRt]},$$scope:{ctx:L}}}),_x=new te({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),N0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[ePt]},$$scope:{ctx:L}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),W0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[oPt]},$$scope:{ctx:L}}}),Tx=new te({}),Mx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),H0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[rPt]},$$scope:{ctx:L}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[tPt]},$$scope:{ctx:L}}}),Ax=new te({}),yx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[aPt]},$$scope:{ctx:L}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),lw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[nPt]},$$scope:{ctx:L}}}),kx=new te({}),Sx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),Px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),dw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[sPt]},$$scope:{ctx:L}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),mw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[lPt]},$$scope:{ctx:L}}}),Nx=new te({}),qx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L389"}}),hw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[iPt]},$$scope:{ctx:L}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17354/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17354/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17354/src/transformers/models/auto/auto_factory.py#L417"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[dPt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),mi=o("Auto Classes"),_f=l(),tt=a("p"),gi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=a("code"),RA=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),pi=o("Instantiating one of "),yn=a("a"),PA=o("AutoConfig"),Ln=o(", "),xn=a("a"),BA=o("AutoModel"),_i=o(`, and
`),$n=a("a"),IA=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),bf=l(),F(wa.$$.fragment),Qe=l(),Ae=a("p"),ok=o("will create a model that is an instance of "),bi=a("a"),rk=o("BertModel"),tk=o("."),Eo=l(),Aa=a("p"),ak=o("There is one class of "),vf=a("code"),nk=o("AutoModel"),UOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),qqe=l(),vi=a("h2"),Ff=a("a"),Aoe=a("span"),F(NA.$$.fragment),JOe=l(),yoe=a("span"),YOe=o("Extending the Auto Classes"),jqe=l(),kn=a("p"),KOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Loe=a("code"),ZOe=o("NewModel"),eVe=o(", make sure you have a "),xoe=a("code"),oVe=o("NewModelConfig"),rVe=o(` then you can add those to the auto
classes like this:`),Dqe=l(),F(qA.$$.fragment),Gqe=l(),sk=a("p"),tVe=o("You will then be able to use the auto classes like you would usually do!"),Oqe=l(),F(Tf.$$.fragment),Vqe=l(),Fi=a("h2"),Mf=a("a"),$oe=a("span"),F(jA.$$.fragment),aVe=l(),koe=a("span"),nVe=o("AutoConfig"),Xqe=l(),Co=a("div"),F(DA.$$.fragment),sVe=l(),GA=a("p"),lVe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),lk=a("a"),iVe=o("from_pretrained()"),dVe=o(" class method."),cVe=l(),OA=a("p"),fVe=o("This class cannot be instantiated directly using "),Soe=a("code"),mVe=o("__init__()"),gVe=o(" (throws an error)."),hVe=l(),Er=a("div"),F(VA.$$.fragment),pVe=l(),Roe=a("p"),_Ve=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),uVe=l(),Ti=a("p"),bVe=o("The configuration class to instantiate is selected based on the "),Poe=a("code"),vVe=o("model_type"),FVe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Boe=a("code"),TVe=o("pretrained_model_name_or_path"),MVe=o(":"),EVe=l(),A=a("ul"),Ef=a("li"),Ioe=a("strong"),CVe=o("albert"),wVe=o(" \u2014 "),ik=a("a"),AVe=o("AlbertConfig"),yVe=o(" (ALBERT model)"),LVe=l(),Cf=a("li"),Noe=a("strong"),xVe=o("bart"),$Ve=o(" \u2014 "),dk=a("a"),kVe=o("BartConfig"),SVe=o(" (BART model)"),RVe=l(),wf=a("li"),qoe=a("strong"),PVe=o("beit"),BVe=o(" \u2014 "),ck=a("a"),IVe=o("BeitConfig"),NVe=o(" (BEiT model)"),qVe=l(),Af=a("li"),joe=a("strong"),jVe=o("bert"),DVe=o(" \u2014 "),fk=a("a"),GVe=o("BertConfig"),OVe=o(" (BERT model)"),VVe=l(),yf=a("li"),Doe=a("strong"),XVe=o("bert-generation"),zVe=o(" \u2014 "),mk=a("a"),WVe=o("BertGenerationConfig"),QVe=o(" (Bert Generation model)"),HVe=l(),Lf=a("li"),Goe=a("strong"),UVe=o("big_bird"),JVe=o(" \u2014 "),gk=a("a"),YVe=o("BigBirdConfig"),KVe=o(" (BigBird model)"),ZVe=l(),xf=a("li"),Ooe=a("strong"),eXe=o("bigbird_pegasus"),oXe=o(" \u2014 "),hk=a("a"),rXe=o("BigBirdPegasusConfig"),tXe=o(" (BigBirdPegasus model)"),aXe=l(),$f=a("li"),Voe=a("strong"),nXe=o("blenderbot"),sXe=o(" \u2014 "),pk=a("a"),lXe=o("BlenderbotConfig"),iXe=o(" (Blenderbot model)"),dXe=l(),kf=a("li"),Xoe=a("strong"),cXe=o("blenderbot-small"),fXe=o(" \u2014 "),_k=a("a"),mXe=o("BlenderbotSmallConfig"),gXe=o(" (BlenderbotSmall model)"),hXe=l(),Sf=a("li"),zoe=a("strong"),pXe=o("camembert"),_Xe=o(" \u2014 "),uk=a("a"),uXe=o("CamembertConfig"),bXe=o(" (CamemBERT model)"),vXe=l(),Rf=a("li"),Woe=a("strong"),FXe=o("canine"),TXe=o(" \u2014 "),bk=a("a"),MXe=o("CanineConfig"),EXe=o(" (Canine model)"),CXe=l(),Pf=a("li"),Qoe=a("strong"),wXe=o("clip"),AXe=o(" \u2014 "),vk=a("a"),yXe=o("CLIPConfig"),LXe=o(" (CLIP model)"),xXe=l(),Bf=a("li"),Hoe=a("strong"),$Xe=o("convbert"),kXe=o(" \u2014 "),Fk=a("a"),SXe=o("ConvBertConfig"),RXe=o(" (ConvBERT model)"),PXe=l(),If=a("li"),Uoe=a("strong"),BXe=o("convnext"),IXe=o(" \u2014 "),Tk=a("a"),NXe=o("ConvNextConfig"),qXe=o(" (ConvNext model)"),jXe=l(),Nf=a("li"),Joe=a("strong"),DXe=o("ctrl"),GXe=o(" \u2014 "),Mk=a("a"),OXe=o("CTRLConfig"),VXe=o(" (CTRL model)"),XXe=l(),qf=a("li"),Yoe=a("strong"),zXe=o("cvt"),WXe=o(" \u2014 "),Ek=a("a"),QXe=o("CvtConfig"),HXe=o(" (CvT model)"),UXe=l(),jf=a("li"),Koe=a("strong"),JXe=o("data2vec-audio"),YXe=o(" \u2014 "),Ck=a("a"),KXe=o("Data2VecAudioConfig"),ZXe=o(" (Data2VecAudio model)"),eze=l(),Df=a("li"),Zoe=a("strong"),oze=o("data2vec-text"),rze=o(" \u2014 "),wk=a("a"),tze=o("Data2VecTextConfig"),aze=o(" (Data2VecText model)"),nze=l(),Gf=a("li"),ere=a("strong"),sze=o("data2vec-vision"),lze=o(" \u2014 "),Ak=a("a"),ize=o("Data2VecVisionConfig"),dze=o(" (Data2VecVision model)"),cze=l(),Of=a("li"),ore=a("strong"),fze=o("deberta"),mze=o(" \u2014 "),yk=a("a"),gze=o("DebertaConfig"),hze=o(" (DeBERTa model)"),pze=l(),Vf=a("li"),rre=a("strong"),_ze=o("deberta-v2"),uze=o(" \u2014 "),Lk=a("a"),bze=o("DebertaV2Config"),vze=o(" (DeBERTa-v2 model)"),Fze=l(),Xf=a("li"),tre=a("strong"),Tze=o("decision_transformer"),Mze=o(" \u2014 "),xk=a("a"),Eze=o("DecisionTransformerConfig"),Cze=o(" (Decision Transformer model)"),wze=l(),zf=a("li"),are=a("strong"),Aze=o("deit"),yze=o(" \u2014 "),$k=a("a"),Lze=o("DeiTConfig"),xze=o(" (DeiT model)"),$ze=l(),Wf=a("li"),nre=a("strong"),kze=o("detr"),Sze=o(" \u2014 "),kk=a("a"),Rze=o("DetrConfig"),Pze=o(" (DETR model)"),Bze=l(),Qf=a("li"),sre=a("strong"),Ize=o("distilbert"),Nze=o(" \u2014 "),Sk=a("a"),qze=o("DistilBertConfig"),jze=o(" (DistilBERT model)"),Dze=l(),Hf=a("li"),lre=a("strong"),Gze=o("dpr"),Oze=o(" \u2014 "),Rk=a("a"),Vze=o("DPRConfig"),Xze=o(" (DPR model)"),zze=l(),Uf=a("li"),ire=a("strong"),Wze=o("dpt"),Qze=o(" \u2014 "),Pk=a("a"),Hze=o("DPTConfig"),Uze=o(" (DPT model)"),Jze=l(),Jf=a("li"),dre=a("strong"),Yze=o("electra"),Kze=o(" \u2014 "),Bk=a("a"),Zze=o("ElectraConfig"),eWe=o(" (ELECTRA model)"),oWe=l(),Yf=a("li"),cre=a("strong"),rWe=o("encoder-decoder"),tWe=o(" \u2014 "),Ik=a("a"),aWe=o("EncoderDecoderConfig"),nWe=o(" (Encoder decoder model)"),sWe=l(),Kf=a("li"),fre=a("strong"),lWe=o("flaubert"),iWe=o(" \u2014 "),Nk=a("a"),dWe=o("FlaubertConfig"),cWe=o(" (FlauBERT model)"),fWe=l(),Zf=a("li"),mre=a("strong"),mWe=o("flava"),gWe=o(" \u2014 "),qk=a("a"),hWe=o("FlavaConfig"),pWe=o(" (Flava model)"),_We=l(),em=a("li"),gre=a("strong"),uWe=o("fnet"),bWe=o(" \u2014 "),jk=a("a"),vWe=o("FNetConfig"),FWe=o(" (FNet model)"),TWe=l(),om=a("li"),hre=a("strong"),MWe=o("fsmt"),EWe=o(" \u2014 "),Dk=a("a"),CWe=o("FSMTConfig"),wWe=o(" (FairSeq Machine-Translation model)"),AWe=l(),rm=a("li"),pre=a("strong"),yWe=o("funnel"),LWe=o(" \u2014 "),Gk=a("a"),xWe=o("FunnelConfig"),$We=o(" (Funnel Transformer model)"),kWe=l(),tm=a("li"),_re=a("strong"),SWe=o("glpn"),RWe=o(" \u2014 "),Ok=a("a"),PWe=o("GLPNConfig"),BWe=o(" (GLPN model)"),IWe=l(),am=a("li"),ure=a("strong"),NWe=o("gpt2"),qWe=o(" \u2014 "),Vk=a("a"),jWe=o("GPT2Config"),DWe=o(" (OpenAI GPT-2 model)"),GWe=l(),nm=a("li"),bre=a("strong"),OWe=o("gpt_neo"),VWe=o(" \u2014 "),Xk=a("a"),XWe=o("GPTNeoConfig"),zWe=o(" (GPT Neo model)"),WWe=l(),sm=a("li"),vre=a("strong"),QWe=o("gpt_neox"),HWe=o(" \u2014 "),zk=a("a"),UWe=o("GPTNeoXConfig"),JWe=o(" (GPT NeoX model)"),YWe=l(),lm=a("li"),Fre=a("strong"),KWe=o("gptj"),ZWe=o(" \u2014 "),Wk=a("a"),eQe=o("GPTJConfig"),oQe=o(" (GPT-J model)"),rQe=l(),im=a("li"),Tre=a("strong"),tQe=o("hubert"),aQe=o(" \u2014 "),Qk=a("a"),nQe=o("HubertConfig"),sQe=o(" (Hubert model)"),lQe=l(),dm=a("li"),Mre=a("strong"),iQe=o("ibert"),dQe=o(" \u2014 "),Hk=a("a"),cQe=o("IBertConfig"),fQe=o(" (I-BERT model)"),mQe=l(),cm=a("li"),Ere=a("strong"),gQe=o("imagegpt"),hQe=o(" \u2014 "),Uk=a("a"),pQe=o("ImageGPTConfig"),_Qe=o(" (ImageGPT model)"),uQe=l(),fm=a("li"),Cre=a("strong"),bQe=o("layoutlm"),vQe=o(" \u2014 "),Jk=a("a"),FQe=o("LayoutLMConfig"),TQe=o(" (LayoutLM model)"),MQe=l(),mm=a("li"),wre=a("strong"),EQe=o("layoutlmv2"),CQe=o(" \u2014 "),Yk=a("a"),wQe=o("LayoutLMv2Config"),AQe=o(" (LayoutLMv2 model)"),yQe=l(),gm=a("li"),Are=a("strong"),LQe=o("layoutlmv3"),xQe=o(" \u2014 "),Kk=a("a"),$Qe=o("LayoutLMv3Config"),kQe=o(" (LayoutLMv3 model)"),SQe=l(),hm=a("li"),yre=a("strong"),RQe=o("led"),PQe=o(" \u2014 "),Zk=a("a"),BQe=o("LEDConfig"),IQe=o(" (LED model)"),NQe=l(),pm=a("li"),Lre=a("strong"),qQe=o("longformer"),jQe=o(" \u2014 "),eS=a("a"),DQe=o("LongformerConfig"),GQe=o(" (Longformer model)"),OQe=l(),_m=a("li"),xre=a("strong"),VQe=o("luke"),XQe=o(" \u2014 "),oS=a("a"),zQe=o("LukeConfig"),WQe=o(" (LUKE model)"),QQe=l(),um=a("li"),$re=a("strong"),HQe=o("lxmert"),UQe=o(" \u2014 "),rS=a("a"),JQe=o("LxmertConfig"),YQe=o(" (LXMERT model)"),KQe=l(),bm=a("li"),kre=a("strong"),ZQe=o("m2m_100"),eHe=o(" \u2014 "),tS=a("a"),oHe=o("M2M100Config"),rHe=o(" (M2M100 model)"),tHe=l(),vm=a("li"),Sre=a("strong"),aHe=o("marian"),nHe=o(" \u2014 "),aS=a("a"),sHe=o("MarianConfig"),lHe=o(" (Marian model)"),iHe=l(),Fm=a("li"),Rre=a("strong"),dHe=o("maskformer"),cHe=o(" \u2014 "),nS=a("a"),fHe=o("MaskFormerConfig"),mHe=o(" (MaskFormer model)"),gHe=l(),Tm=a("li"),Pre=a("strong"),hHe=o("mbart"),pHe=o(" \u2014 "),sS=a("a"),_He=o("MBartConfig"),uHe=o(" (mBART model)"),bHe=l(),Mm=a("li"),Bre=a("strong"),vHe=o("megatron-bert"),FHe=o(" \u2014 "),lS=a("a"),THe=o("MegatronBertConfig"),MHe=o(" (MegatronBert model)"),EHe=l(),Em=a("li"),Ire=a("strong"),CHe=o("mobilebert"),wHe=o(" \u2014 "),iS=a("a"),AHe=o("MobileBertConfig"),yHe=o(" (MobileBERT model)"),LHe=l(),Cm=a("li"),Nre=a("strong"),xHe=o("mobilevit"),$He=o(" \u2014 "),dS=a("a"),kHe=o("MobileViTConfig"),SHe=o(" (MobileViT model)"),RHe=l(),wm=a("li"),qre=a("strong"),PHe=o("mpnet"),BHe=o(" \u2014 "),cS=a("a"),IHe=o("MPNetConfig"),NHe=o(" (MPNet model)"),qHe=l(),Am=a("li"),jre=a("strong"),jHe=o("mt5"),DHe=o(" \u2014 "),fS=a("a"),GHe=o("MT5Config"),OHe=o(" (mT5 model)"),VHe=l(),ym=a("li"),Dre=a("strong"),XHe=o("nystromformer"),zHe=o(" \u2014 "),mS=a("a"),WHe=o("NystromformerConfig"),QHe=o(" (Nystromformer model)"),HHe=l(),Lm=a("li"),Gre=a("strong"),UHe=o("openai-gpt"),JHe=o(" \u2014 "),gS=a("a"),YHe=o("OpenAIGPTConfig"),KHe=o(" (OpenAI GPT model)"),ZHe=l(),xm=a("li"),Ore=a("strong"),eUe=o("opt"),oUe=o(" \u2014 "),hS=a("a"),rUe=o("OPTConfig"),tUe=o(" (OPT model)"),aUe=l(),$m=a("li"),Vre=a("strong"),nUe=o("pegasus"),sUe=o(" \u2014 "),pS=a("a"),lUe=o("PegasusConfig"),iUe=o(" (Pegasus model)"),dUe=l(),km=a("li"),Xre=a("strong"),cUe=o("perceiver"),fUe=o(" \u2014 "),_S=a("a"),mUe=o("PerceiverConfig"),gUe=o(" (Perceiver model)"),hUe=l(),Sm=a("li"),zre=a("strong"),pUe=o("plbart"),_Ue=o(" \u2014 "),uS=a("a"),uUe=o("PLBartConfig"),bUe=o(" (PLBart model)"),vUe=l(),Rm=a("li"),Wre=a("strong"),FUe=o("poolformer"),TUe=o(" \u2014 "),bS=a("a"),MUe=o("PoolFormerConfig"),EUe=o(" (PoolFormer model)"),CUe=l(),Pm=a("li"),Qre=a("strong"),wUe=o("prophetnet"),AUe=o(" \u2014 "),vS=a("a"),yUe=o("ProphetNetConfig"),LUe=o(" (ProphetNet model)"),xUe=l(),Bm=a("li"),Hre=a("strong"),$Ue=o("qdqbert"),kUe=o(" \u2014 "),FS=a("a"),SUe=o("QDQBertConfig"),RUe=o(" (QDQBert model)"),PUe=l(),Im=a("li"),Ure=a("strong"),BUe=o("rag"),IUe=o(" \u2014 "),TS=a("a"),NUe=o("RagConfig"),qUe=o(" (RAG model)"),jUe=l(),Nm=a("li"),Jre=a("strong"),DUe=o("realm"),GUe=o(" \u2014 "),MS=a("a"),OUe=o("RealmConfig"),VUe=o(" (Realm model)"),XUe=l(),qm=a("li"),Yre=a("strong"),zUe=o("reformer"),WUe=o(" \u2014 "),ES=a("a"),QUe=o("ReformerConfig"),HUe=o(" (Reformer model)"),UUe=l(),jm=a("li"),Kre=a("strong"),JUe=o("regnet"),YUe=o(" \u2014 "),CS=a("a"),KUe=o("RegNetConfig"),ZUe=o(" (RegNet model)"),eJe=l(),Dm=a("li"),Zre=a("strong"),oJe=o("rembert"),rJe=o(" \u2014 "),wS=a("a"),tJe=o("RemBertConfig"),aJe=o(" (RemBERT model)"),nJe=l(),Gm=a("li"),ete=a("strong"),sJe=o("resnet"),lJe=o(" \u2014 "),AS=a("a"),iJe=o("ResNetConfig"),dJe=o(" (ResNet model)"),cJe=l(),Om=a("li"),ote=a("strong"),fJe=o("retribert"),mJe=o(" \u2014 "),yS=a("a"),gJe=o("RetriBertConfig"),hJe=o(" (RetriBERT model)"),pJe=l(),Vm=a("li"),rte=a("strong"),_Je=o("roberta"),uJe=o(" \u2014 "),LS=a("a"),bJe=o("RobertaConfig"),vJe=o(" (RoBERTa model)"),FJe=l(),Xm=a("li"),tte=a("strong"),TJe=o("roformer"),MJe=o(" \u2014 "),xS=a("a"),EJe=o("RoFormerConfig"),CJe=o(" (RoFormer model)"),wJe=l(),zm=a("li"),ate=a("strong"),AJe=o("segformer"),yJe=o(" \u2014 "),$S=a("a"),LJe=o("SegformerConfig"),xJe=o(" (SegFormer model)"),$Je=l(),Wm=a("li"),nte=a("strong"),kJe=o("sew"),SJe=o(" \u2014 "),kS=a("a"),RJe=o("SEWConfig"),PJe=o(" (SEW model)"),BJe=l(),Qm=a("li"),ste=a("strong"),IJe=o("sew-d"),NJe=o(" \u2014 "),SS=a("a"),qJe=o("SEWDConfig"),jJe=o(" (SEW-D model)"),DJe=l(),Hm=a("li"),lte=a("strong"),GJe=o("speech-encoder-decoder"),OJe=o(" \u2014 "),RS=a("a"),VJe=o("SpeechEncoderDecoderConfig"),XJe=o(" (Speech Encoder decoder model)"),zJe=l(),Um=a("li"),ite=a("strong"),WJe=o("speech_to_text"),QJe=o(" \u2014 "),PS=a("a"),HJe=o("Speech2TextConfig"),UJe=o(" (Speech2Text model)"),JJe=l(),Jm=a("li"),dte=a("strong"),YJe=o("speech_to_text_2"),KJe=o(" \u2014 "),BS=a("a"),ZJe=o("Speech2Text2Config"),eYe=o(" (Speech2Text2 model)"),oYe=l(),Ym=a("li"),cte=a("strong"),rYe=o("splinter"),tYe=o(" \u2014 "),IS=a("a"),aYe=o("SplinterConfig"),nYe=o(" (Splinter model)"),sYe=l(),Km=a("li"),fte=a("strong"),lYe=o("squeezebert"),iYe=o(" \u2014 "),NS=a("a"),dYe=o("SqueezeBertConfig"),cYe=o(" (SqueezeBERT model)"),fYe=l(),Zm=a("li"),mte=a("strong"),mYe=o("swin"),gYe=o(" \u2014 "),qS=a("a"),hYe=o("SwinConfig"),pYe=o(" (Swin model)"),_Ye=l(),eg=a("li"),gte=a("strong"),uYe=o("t5"),bYe=o(" \u2014 "),jS=a("a"),vYe=o("T5Config"),FYe=o(" (T5 model)"),TYe=l(),og=a("li"),hte=a("strong"),MYe=o("tapas"),EYe=o(" \u2014 "),DS=a("a"),CYe=o("TapasConfig"),wYe=o(" (TAPAS model)"),AYe=l(),rg=a("li"),pte=a("strong"),yYe=o("trajectory_transformer"),LYe=o(" \u2014 "),GS=a("a"),xYe=o("TrajectoryTransformerConfig"),$Ye=o(" (Trajectory Transformer model)"),kYe=l(),tg=a("li"),_te=a("strong"),SYe=o("transfo-xl"),RYe=o(" \u2014 "),OS=a("a"),PYe=o("TransfoXLConfig"),BYe=o(" (Transformer-XL model)"),IYe=l(),ag=a("li"),ute=a("strong"),NYe=o("trocr"),qYe=o(" \u2014 "),VS=a("a"),jYe=o("TrOCRConfig"),DYe=o(" (TrOCR model)"),GYe=l(),ng=a("li"),bte=a("strong"),OYe=o("unispeech"),VYe=o(" \u2014 "),XS=a("a"),XYe=o("UniSpeechConfig"),zYe=o(" (UniSpeech model)"),WYe=l(),sg=a("li"),vte=a("strong"),QYe=o("unispeech-sat"),HYe=o(" \u2014 "),zS=a("a"),UYe=o("UniSpeechSatConfig"),JYe=o(" (UniSpeechSat model)"),YYe=l(),lg=a("li"),Fte=a("strong"),KYe=o("van"),ZYe=o(" \u2014 "),WS=a("a"),eKe=o("VanConfig"),oKe=o(" (VAN model)"),rKe=l(),ig=a("li"),Tte=a("strong"),tKe=o("vilt"),aKe=o(" \u2014 "),QS=a("a"),nKe=o("ViltConfig"),sKe=o(" (ViLT model)"),lKe=l(),dg=a("li"),Mte=a("strong"),iKe=o("vision-encoder-decoder"),dKe=o(" \u2014 "),HS=a("a"),cKe=o("VisionEncoderDecoderConfig"),fKe=o(" (Vision Encoder decoder model)"),mKe=l(),cg=a("li"),Ete=a("strong"),gKe=o("vision-text-dual-encoder"),hKe=o(" \u2014 "),US=a("a"),pKe=o("VisionTextDualEncoderConfig"),_Ke=o(" (VisionTextDualEncoder model)"),uKe=l(),fg=a("li"),Cte=a("strong"),bKe=o("visual_bert"),vKe=o(" \u2014 "),JS=a("a"),FKe=o("VisualBertConfig"),TKe=o(" (VisualBert model)"),MKe=l(),mg=a("li"),wte=a("strong"),EKe=o("vit"),CKe=o(" \u2014 "),YS=a("a"),wKe=o("ViTConfig"),AKe=o(" (ViT model)"),yKe=l(),gg=a("li"),Ate=a("strong"),LKe=o("vit_mae"),xKe=o(" \u2014 "),KS=a("a"),$Ke=o("ViTMAEConfig"),kKe=o(" (ViTMAE model)"),SKe=l(),hg=a("li"),yte=a("strong"),RKe=o("wav2vec2"),PKe=o(" \u2014 "),ZS=a("a"),BKe=o("Wav2Vec2Config"),IKe=o(" (Wav2Vec2 model)"),NKe=l(),pg=a("li"),Lte=a("strong"),qKe=o("wav2vec2-conformer"),jKe=o(" \u2014 "),eR=a("a"),DKe=o("Wav2Vec2ConformerConfig"),GKe=o(" (Wav2Vec2-Conformer model)"),OKe=l(),_g=a("li"),xte=a("strong"),VKe=o("wavlm"),XKe=o(" \u2014 "),oR=a("a"),zKe=o("WavLMConfig"),WKe=o(" (WavLM model)"),QKe=l(),ug=a("li"),$te=a("strong"),HKe=o("xglm"),UKe=o(" \u2014 "),rR=a("a"),JKe=o("XGLMConfig"),YKe=o(" (XGLM model)"),KKe=l(),bg=a("li"),kte=a("strong"),ZKe=o("xlm"),eZe=o(" \u2014 "),tR=a("a"),oZe=o("XLMConfig"),rZe=o(" (XLM model)"),tZe=l(),vg=a("li"),Ste=a("strong"),aZe=o("xlm-prophetnet"),nZe=o(" \u2014 "),aR=a("a"),sZe=o("XLMProphetNetConfig"),lZe=o(" (XLMProphetNet model)"),iZe=l(),Fg=a("li"),Rte=a("strong"),dZe=o("xlm-roberta"),cZe=o(" \u2014 "),nR=a("a"),fZe=o("XLMRobertaConfig"),mZe=o(" (XLM-RoBERTa model)"),gZe=l(),Tg=a("li"),Pte=a("strong"),hZe=o("xlm-roberta-xl"),pZe=o(" \u2014 "),sR=a("a"),_Ze=o("XLMRobertaXLConfig"),uZe=o(" (XLM-RoBERTa-XL model)"),bZe=l(),Mg=a("li"),Bte=a("strong"),vZe=o("xlnet"),FZe=o(" \u2014 "),lR=a("a"),TZe=o("XLNetConfig"),MZe=o(" (XLNet model)"),EZe=l(),Eg=a("li"),Ite=a("strong"),CZe=o("yolos"),wZe=o(" \u2014 "),iR=a("a"),AZe=o("YolosConfig"),yZe=o(" (YOLOS model)"),LZe=l(),Cg=a("li"),Nte=a("strong"),xZe=o("yoso"),$Ze=o(" \u2014 "),dR=a("a"),kZe=o("YosoConfig"),SZe=o(" (YOSO model)"),RZe=l(),F(wg.$$.fragment),PZe=l(),Ag=a("div"),F(XA.$$.fragment),BZe=l(),qte=a("p"),IZe=o("Register a new configuration for this class."),zqe=l(),Mi=a("h2"),yg=a("a"),jte=a("span"),F(zA.$$.fragment),NZe=l(),Dte=a("span"),qZe=o("AutoTokenizer"),Wqe=l(),wo=a("div"),F(WA.$$.fragment),jZe=l(),QA=a("p"),DZe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),cR=a("a"),GZe=o("AutoTokenizer.from_pretrained()"),OZe=o(" class method."),VZe=l(),HA=a("p"),XZe=o("This class cannot be instantiated directly using "),Gte=a("code"),zZe=o("__init__()"),WZe=o(" (throws an error)."),QZe=l(),Cr=a("div"),F(UA.$$.fragment),HZe=l(),Ote=a("p"),UZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),JZe=l(),ya=a("p"),YZe=o("The tokenizer class to instantiate is selected based on the "),Vte=a("code"),KZe=o("model_type"),ZZe=o(` property of the config object (either
passed as an argument or loaded from `),Xte=a("code"),eeo=o("pretrained_model_name_or_path"),oeo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zte=a("code"),reo=o("pretrained_model_name_or_path"),teo=o(":"),aeo=l(),k=a("ul"),Sn=a("li"),Wte=a("strong"),neo=o("albert"),seo=o(" \u2014 "),fR=a("a"),leo=o("AlbertTokenizer"),ieo=o(" or "),mR=a("a"),deo=o("AlbertTokenizerFast"),ceo=o(" (ALBERT model)"),feo=l(),Rn=a("li"),Qte=a("strong"),meo=o("bart"),geo=o(" \u2014 "),gR=a("a"),heo=o("BartTokenizer"),peo=o(" or "),hR=a("a"),_eo=o("BartTokenizerFast"),ueo=o(" (BART model)"),beo=l(),Pn=a("li"),Hte=a("strong"),veo=o("barthez"),Feo=o(" \u2014 "),pR=a("a"),Teo=o("BarthezTokenizer"),Meo=o(" or "),_R=a("a"),Eeo=o("BarthezTokenizerFast"),Ceo=o(" (BARThez model)"),weo=l(),Lg=a("li"),Ute=a("strong"),Aeo=o("bartpho"),yeo=o(" \u2014 "),uR=a("a"),Leo=o("BartphoTokenizer"),xeo=o(" (BARTpho model)"),$eo=l(),Bn=a("li"),Jte=a("strong"),keo=o("bert"),Seo=o(" \u2014 "),bR=a("a"),Reo=o("BertTokenizer"),Peo=o(" or "),vR=a("a"),Beo=o("BertTokenizerFast"),Ieo=o(" (BERT model)"),Neo=l(),xg=a("li"),Yte=a("strong"),qeo=o("bert-generation"),jeo=o(" \u2014 "),FR=a("a"),Deo=o("BertGenerationTokenizer"),Geo=o(" (Bert Generation model)"),Oeo=l(),$g=a("li"),Kte=a("strong"),Veo=o("bert-japanese"),Xeo=o(" \u2014 "),TR=a("a"),zeo=o("BertJapaneseTokenizer"),Weo=o(" (BertJapanese model)"),Qeo=l(),kg=a("li"),Zte=a("strong"),Heo=o("bertweet"),Ueo=o(" \u2014 "),MR=a("a"),Jeo=o("BertweetTokenizer"),Yeo=o(" (Bertweet model)"),Keo=l(),In=a("li"),eae=a("strong"),Zeo=o("big_bird"),eoo=o(" \u2014 "),ER=a("a"),ooo=o("BigBirdTokenizer"),roo=o(" or "),CR=a("a"),too=o("BigBirdTokenizerFast"),aoo=o(" (BigBird model)"),noo=l(),Nn=a("li"),oae=a("strong"),soo=o("bigbird_pegasus"),loo=o(" \u2014 "),wR=a("a"),ioo=o("PegasusTokenizer"),doo=o(" or "),AR=a("a"),coo=o("PegasusTokenizerFast"),foo=o(" (BigBirdPegasus model)"),moo=l(),qn=a("li"),rae=a("strong"),goo=o("blenderbot"),hoo=o(" \u2014 "),yR=a("a"),poo=o("BlenderbotTokenizer"),_oo=o(" or "),LR=a("a"),uoo=o("BlenderbotTokenizerFast"),boo=o(" (Blenderbot model)"),voo=l(),Sg=a("li"),tae=a("strong"),Foo=o("blenderbot-small"),Too=o(" \u2014 "),xR=a("a"),Moo=o("BlenderbotSmallTokenizer"),Eoo=o(" (BlenderbotSmall model)"),Coo=l(),Rg=a("li"),aae=a("strong"),woo=o("byt5"),Aoo=o(" \u2014 "),$R=a("a"),yoo=o("ByT5Tokenizer"),Loo=o(" (ByT5 model)"),xoo=l(),jn=a("li"),nae=a("strong"),$oo=o("camembert"),koo=o(" \u2014 "),kR=a("a"),Soo=o("CamembertTokenizer"),Roo=o(" or "),SR=a("a"),Poo=o("CamembertTokenizerFast"),Boo=o(" (CamemBERT model)"),Ioo=l(),Pg=a("li"),sae=a("strong"),Noo=o("canine"),qoo=o(" \u2014 "),RR=a("a"),joo=o("CanineTokenizer"),Doo=o(" (Canine model)"),Goo=l(),Dn=a("li"),lae=a("strong"),Ooo=o("clip"),Voo=o(" \u2014 "),PR=a("a"),Xoo=o("CLIPTokenizer"),zoo=o(" or "),BR=a("a"),Woo=o("CLIPTokenizerFast"),Qoo=o(" (CLIP model)"),Hoo=l(),Gn=a("li"),iae=a("strong"),Uoo=o("convbert"),Joo=o(" \u2014 "),IR=a("a"),Yoo=o("ConvBertTokenizer"),Koo=o(" or "),NR=a("a"),Zoo=o("ConvBertTokenizerFast"),ero=o(" (ConvBERT model)"),oro=l(),On=a("li"),dae=a("strong"),rro=o("cpm"),tro=o(" \u2014 "),qR=a("a"),aro=o("CpmTokenizer"),nro=o(" or "),jR=a("a"),sro=o("CpmTokenizerFast"),lro=o(" (CPM model)"),iro=l(),Bg=a("li"),cae=a("strong"),dro=o("ctrl"),cro=o(" \u2014 "),DR=a("a"),fro=o("CTRLTokenizer"),mro=o(" (CTRL model)"),gro=l(),Vn=a("li"),fae=a("strong"),hro=o("data2vec-text"),pro=o(" \u2014 "),GR=a("a"),_ro=o("RobertaTokenizer"),uro=o(" or "),OR=a("a"),bro=o("RobertaTokenizerFast"),vro=o(" (Data2VecText model)"),Fro=l(),Xn=a("li"),mae=a("strong"),Tro=o("deberta"),Mro=o(" \u2014 "),VR=a("a"),Ero=o("DebertaTokenizer"),Cro=o(" or "),XR=a("a"),wro=o("DebertaTokenizerFast"),Aro=o(" (DeBERTa model)"),yro=l(),zn=a("li"),gae=a("strong"),Lro=o("deberta-v2"),xro=o(" \u2014 "),zR=a("a"),$ro=o("DebertaV2Tokenizer"),kro=o(" or "),WR=a("a"),Sro=o("DebertaV2TokenizerFast"),Rro=o(" (DeBERTa-v2 model)"),Pro=l(),Wn=a("li"),hae=a("strong"),Bro=o("distilbert"),Iro=o(" \u2014 "),QR=a("a"),Nro=o("DistilBertTokenizer"),qro=o(" or "),HR=a("a"),jro=o("DistilBertTokenizerFast"),Dro=o(" (DistilBERT model)"),Gro=l(),Qn=a("li"),pae=a("strong"),Oro=o("dpr"),Vro=o(" \u2014 "),UR=a("a"),Xro=o("DPRQuestionEncoderTokenizer"),zro=o(" or "),JR=a("a"),Wro=o("DPRQuestionEncoderTokenizerFast"),Qro=o(" (DPR model)"),Hro=l(),Hn=a("li"),_ae=a("strong"),Uro=o("electra"),Jro=o(" \u2014 "),YR=a("a"),Yro=o("ElectraTokenizer"),Kro=o(" or "),KR=a("a"),Zro=o("ElectraTokenizerFast"),eto=o(" (ELECTRA model)"),oto=l(),Ig=a("li"),uae=a("strong"),rto=o("flaubert"),tto=o(" \u2014 "),ZR=a("a"),ato=o("FlaubertTokenizer"),nto=o(" (FlauBERT model)"),sto=l(),Un=a("li"),bae=a("strong"),lto=o("fnet"),ito=o(" \u2014 "),eP=a("a"),dto=o("FNetTokenizer"),cto=o(" or "),oP=a("a"),fto=o("FNetTokenizerFast"),mto=o(" (FNet model)"),gto=l(),Ng=a("li"),vae=a("strong"),hto=o("fsmt"),pto=o(" \u2014 "),rP=a("a"),_to=o("FSMTTokenizer"),uto=o(" (FairSeq Machine-Translation model)"),bto=l(),Jn=a("li"),Fae=a("strong"),vto=o("funnel"),Fto=o(" \u2014 "),tP=a("a"),Tto=o("FunnelTokenizer"),Mto=o(" or "),aP=a("a"),Eto=o("FunnelTokenizerFast"),Cto=o(" (Funnel Transformer model)"),wto=l(),Yn=a("li"),Tae=a("strong"),Ato=o("gpt2"),yto=o(" \u2014 "),nP=a("a"),Lto=o("GPT2Tokenizer"),xto=o(" or "),sP=a("a"),$to=o("GPT2TokenizerFast"),kto=o(" (OpenAI GPT-2 model)"),Sto=l(),Kn=a("li"),Mae=a("strong"),Rto=o("gpt_neo"),Pto=o(" \u2014 "),lP=a("a"),Bto=o("GPT2Tokenizer"),Ito=o(" or "),iP=a("a"),Nto=o("GPT2TokenizerFast"),qto=o(" (GPT Neo model)"),jto=l(),qg=a("li"),Eae=a("strong"),Dto=o("gpt_neox"),Gto=o(" \u2014 "),dP=a("a"),Oto=o("GPTNeoXTokenizerFast"),Vto=o(" (GPT NeoX model)"),Xto=l(),Zn=a("li"),Cae=a("strong"),zto=o("gptj"),Wto=o(" \u2014 "),cP=a("a"),Qto=o("GPT2Tokenizer"),Hto=o(" or "),fP=a("a"),Uto=o("GPT2TokenizerFast"),Jto=o(" (GPT-J model)"),Yto=l(),es=a("li"),wae=a("strong"),Kto=o("herbert"),Zto=o(" \u2014 "),mP=a("a"),eao=o("HerbertTokenizer"),oao=o(" or "),gP=a("a"),rao=o("HerbertTokenizerFast"),tao=o(" (HerBERT model)"),aao=l(),jg=a("li"),Aae=a("strong"),nao=o("hubert"),sao=o(" \u2014 "),hP=a("a"),lao=o("Wav2Vec2CTCTokenizer"),iao=o(" (Hubert model)"),dao=l(),os=a("li"),yae=a("strong"),cao=o("ibert"),fao=o(" \u2014 "),pP=a("a"),mao=o("RobertaTokenizer"),gao=o(" or "),_P=a("a"),hao=o("RobertaTokenizerFast"),pao=o(" (I-BERT model)"),_ao=l(),rs=a("li"),Lae=a("strong"),uao=o("layoutlm"),bao=o(" \u2014 "),uP=a("a"),vao=o("LayoutLMTokenizer"),Fao=o(" or "),bP=a("a"),Tao=o("LayoutLMTokenizerFast"),Mao=o(" (LayoutLM model)"),Eao=l(),ts=a("li"),xae=a("strong"),Cao=o("layoutlmv2"),wao=o(" \u2014 "),vP=a("a"),Aao=o("LayoutLMv2Tokenizer"),yao=o(" or "),FP=a("a"),Lao=o("LayoutLMv2TokenizerFast"),xao=o(" (LayoutLMv2 model)"),$ao=l(),as=a("li"),$ae=a("strong"),kao=o("layoutlmv3"),Sao=o(" \u2014 "),TP=a("a"),Rao=o("LayoutLMv3Tokenizer"),Pao=o(" or "),MP=a("a"),Bao=o("LayoutLMv3TokenizerFast"),Iao=o(" (LayoutLMv3 model)"),Nao=l(),ns=a("li"),kae=a("strong"),qao=o("layoutxlm"),jao=o(" \u2014 "),EP=a("a"),Dao=o("LayoutXLMTokenizer"),Gao=o(" or "),CP=a("a"),Oao=o("LayoutXLMTokenizerFast"),Vao=o(" (LayoutXLM model)"),Xao=l(),ss=a("li"),Sae=a("strong"),zao=o("led"),Wao=o(" \u2014 "),wP=a("a"),Qao=o("LEDTokenizer"),Hao=o(" or "),AP=a("a"),Uao=o("LEDTokenizerFast"),Jao=o(" (LED model)"),Yao=l(),ls=a("li"),Rae=a("strong"),Kao=o("longformer"),Zao=o(" \u2014 "),yP=a("a"),eno=o("LongformerTokenizer"),ono=o(" or "),LP=a("a"),rno=o("LongformerTokenizerFast"),tno=o(" (Longformer model)"),ano=l(),Dg=a("li"),Pae=a("strong"),nno=o("luke"),sno=o(" \u2014 "),xP=a("a"),lno=o("LukeTokenizer"),ino=o(" (LUKE model)"),dno=l(),is=a("li"),Bae=a("strong"),cno=o("lxmert"),fno=o(" \u2014 "),$P=a("a"),mno=o("LxmertTokenizer"),gno=o(" or "),kP=a("a"),hno=o("LxmertTokenizerFast"),pno=o(" (LXMERT model)"),_no=l(),Gg=a("li"),Iae=a("strong"),uno=o("m2m_100"),bno=o(" \u2014 "),SP=a("a"),vno=o("M2M100Tokenizer"),Fno=o(" (M2M100 model)"),Tno=l(),Og=a("li"),Nae=a("strong"),Mno=o("marian"),Eno=o(" \u2014 "),RP=a("a"),Cno=o("MarianTokenizer"),wno=o(" (Marian model)"),Ano=l(),ds=a("li"),qae=a("strong"),yno=o("mbart"),Lno=o(" \u2014 "),PP=a("a"),xno=o("MBartTokenizer"),$no=o(" or "),BP=a("a"),kno=o("MBartTokenizerFast"),Sno=o(" (mBART model)"),Rno=l(),cs=a("li"),jae=a("strong"),Pno=o("mbart50"),Bno=o(" \u2014 "),IP=a("a"),Ino=o("MBart50Tokenizer"),Nno=o(" or "),NP=a("a"),qno=o("MBart50TokenizerFast"),jno=o(" (mBART-50 model)"),Dno=l(),fs=a("li"),Dae=a("strong"),Gno=o("megatron-bert"),Ono=o(" \u2014 "),qP=a("a"),Vno=o("BertTokenizer"),Xno=o(" or "),jP=a("a"),zno=o("BertTokenizerFast"),Wno=o(" (MegatronBert model)"),Qno=l(),Vg=a("li"),Gae=a("strong"),Hno=o("mluke"),Uno=o(" \u2014 "),DP=a("a"),Jno=o("MLukeTokenizer"),Yno=o(" (mLUKE model)"),Kno=l(),ms=a("li"),Oae=a("strong"),Zno=o("mobilebert"),eso=o(" \u2014 "),GP=a("a"),oso=o("MobileBertTokenizer"),rso=o(" or "),OP=a("a"),tso=o("MobileBertTokenizerFast"),aso=o(" (MobileBERT model)"),nso=l(),gs=a("li"),Vae=a("strong"),sso=o("mpnet"),lso=o(" \u2014 "),VP=a("a"),iso=o("MPNetTokenizer"),dso=o(" or "),XP=a("a"),cso=o("MPNetTokenizerFast"),fso=o(" (MPNet model)"),mso=l(),hs=a("li"),Xae=a("strong"),gso=o("mt5"),hso=o(" \u2014 "),zP=a("a"),pso=o("MT5Tokenizer"),_so=o(" or "),WP=a("a"),uso=o("MT5TokenizerFast"),bso=o(" (mT5 model)"),vso=l(),ps=a("li"),zae=a("strong"),Fso=o("nystromformer"),Tso=o(" \u2014 "),QP=a("a"),Mso=o("AlbertTokenizer"),Eso=o(" or "),HP=a("a"),Cso=o("AlbertTokenizerFast"),wso=o(" (Nystromformer model)"),Aso=l(),_s=a("li"),Wae=a("strong"),yso=o("openai-gpt"),Lso=o(" \u2014 "),UP=a("a"),xso=o("OpenAIGPTTokenizer"),$so=o(" or "),JP=a("a"),kso=o("OpenAIGPTTokenizerFast"),Sso=o(" (OpenAI GPT model)"),Rso=l(),Xg=a("li"),Qae=a("strong"),Pso=o("opt"),Bso=o(" \u2014 "),YP=a("a"),Iso=o("GPT2Tokenizer"),Nso=o(" (OPT model)"),qso=l(),us=a("li"),Hae=a("strong"),jso=o("pegasus"),Dso=o(" \u2014 "),KP=a("a"),Gso=o("PegasusTokenizer"),Oso=o(" or "),ZP=a("a"),Vso=o("PegasusTokenizerFast"),Xso=o(" (Pegasus model)"),zso=l(),zg=a("li"),Uae=a("strong"),Wso=o("perceiver"),Qso=o(" \u2014 "),eB=a("a"),Hso=o("PerceiverTokenizer"),Uso=o(" (Perceiver model)"),Jso=l(),Wg=a("li"),Jae=a("strong"),Yso=o("phobert"),Kso=o(" \u2014 "),oB=a("a"),Zso=o("PhobertTokenizer"),elo=o(" (PhoBERT model)"),olo=l(),Qg=a("li"),Yae=a("strong"),rlo=o("plbart"),tlo=o(" \u2014 "),rB=a("a"),alo=o("PLBartTokenizer"),nlo=o(" (PLBart model)"),slo=l(),Hg=a("li"),Kae=a("strong"),llo=o("prophetnet"),ilo=o(" \u2014 "),tB=a("a"),dlo=o("ProphetNetTokenizer"),clo=o(" (ProphetNet model)"),flo=l(),bs=a("li"),Zae=a("strong"),mlo=o("qdqbert"),glo=o(" \u2014 "),aB=a("a"),hlo=o("BertTokenizer"),plo=o(" or "),nB=a("a"),_lo=o("BertTokenizerFast"),ulo=o(" (QDQBert model)"),blo=l(),Ug=a("li"),ene=a("strong"),vlo=o("rag"),Flo=o(" \u2014 "),sB=a("a"),Tlo=o("RagTokenizer"),Mlo=o(" (RAG model)"),Elo=l(),vs=a("li"),one=a("strong"),Clo=o("realm"),wlo=o(" \u2014 "),lB=a("a"),Alo=o("RealmTokenizer"),ylo=o(" or "),iB=a("a"),Llo=o("RealmTokenizerFast"),xlo=o(" (Realm model)"),$lo=l(),Fs=a("li"),rne=a("strong"),klo=o("reformer"),Slo=o(" \u2014 "),dB=a("a"),Rlo=o("ReformerTokenizer"),Plo=o(" or "),cB=a("a"),Blo=o("ReformerTokenizerFast"),Ilo=o(" (Reformer model)"),Nlo=l(),Ts=a("li"),tne=a("strong"),qlo=o("rembert"),jlo=o(" \u2014 "),fB=a("a"),Dlo=o("RemBertTokenizer"),Glo=o(" or "),mB=a("a"),Olo=o("RemBertTokenizerFast"),Vlo=o(" (RemBERT model)"),Xlo=l(),Ms=a("li"),ane=a("strong"),zlo=o("retribert"),Wlo=o(" \u2014 "),gB=a("a"),Qlo=o("RetriBertTokenizer"),Hlo=o(" or "),hB=a("a"),Ulo=o("RetriBertTokenizerFast"),Jlo=o(" (RetriBERT model)"),Ylo=l(),Es=a("li"),nne=a("strong"),Klo=o("roberta"),Zlo=o(" \u2014 "),pB=a("a"),eio=o("RobertaTokenizer"),oio=o(" or "),_B=a("a"),rio=o("RobertaTokenizerFast"),tio=o(" (RoBERTa model)"),aio=l(),Cs=a("li"),sne=a("strong"),nio=o("roformer"),sio=o(" \u2014 "),uB=a("a"),lio=o("RoFormerTokenizer"),iio=o(" or "),bB=a("a"),dio=o("RoFormerTokenizerFast"),cio=o(" (RoFormer model)"),fio=l(),Jg=a("li"),lne=a("strong"),mio=o("speech_to_text"),gio=o(" \u2014 "),vB=a("a"),hio=o("Speech2TextTokenizer"),pio=o(" (Speech2Text model)"),_io=l(),Yg=a("li"),ine=a("strong"),uio=o("speech_to_text_2"),bio=o(" \u2014 "),FB=a("a"),vio=o("Speech2Text2Tokenizer"),Fio=o(" (Speech2Text2 model)"),Tio=l(),ws=a("li"),dne=a("strong"),Mio=o("splinter"),Eio=o(" \u2014 "),TB=a("a"),Cio=o("SplinterTokenizer"),wio=o(" or "),MB=a("a"),Aio=o("SplinterTokenizerFast"),yio=o(" (Splinter model)"),Lio=l(),As=a("li"),cne=a("strong"),xio=o("squeezebert"),$io=o(" \u2014 "),EB=a("a"),kio=o("SqueezeBertTokenizer"),Sio=o(" or "),CB=a("a"),Rio=o("SqueezeBertTokenizerFast"),Pio=o(" (SqueezeBERT model)"),Bio=l(),ys=a("li"),fne=a("strong"),Iio=o("t5"),Nio=o(" \u2014 "),wB=a("a"),qio=o("T5Tokenizer"),jio=o(" or "),AB=a("a"),Dio=o("T5TokenizerFast"),Gio=o(" (T5 model)"),Oio=l(),Kg=a("li"),mne=a("strong"),Vio=o("tapas"),Xio=o(" \u2014 "),yB=a("a"),zio=o("TapasTokenizer"),Wio=o(" (TAPAS model)"),Qio=l(),Zg=a("li"),gne=a("strong"),Hio=o("tapex"),Uio=o(" \u2014 "),LB=a("a"),Jio=o("TapexTokenizer"),Yio=o(" (TAPEX model)"),Kio=l(),eh=a("li"),hne=a("strong"),Zio=o("transfo-xl"),edo=o(" \u2014 "),xB=a("a"),odo=o("TransfoXLTokenizer"),rdo=o(" (Transformer-XL model)"),tdo=l(),Ls=a("li"),pne=a("strong"),ado=o("visual_bert"),ndo=o(" \u2014 "),$B=a("a"),sdo=o("BertTokenizer"),ldo=o(" or "),kB=a("a"),ido=o("BertTokenizerFast"),ddo=o(" (VisualBert model)"),cdo=l(),oh=a("li"),_ne=a("strong"),fdo=o("wav2vec2"),mdo=o(" \u2014 "),SB=a("a"),gdo=o("Wav2Vec2CTCTokenizer"),hdo=o(" (Wav2Vec2 model)"),pdo=l(),rh=a("li"),une=a("strong"),_do=o("wav2vec2-conformer"),udo=o(" \u2014 "),RB=a("a"),bdo=o("Wav2Vec2CTCTokenizer"),vdo=o(" (Wav2Vec2-Conformer model)"),Fdo=l(),th=a("li"),bne=a("strong"),Tdo=o("wav2vec2_phoneme"),Mdo=o(" \u2014 "),PB=a("a"),Edo=o("Wav2Vec2PhonemeCTCTokenizer"),Cdo=o(" (Wav2Vec2Phoneme model)"),wdo=l(),xs=a("li"),vne=a("strong"),Ado=o("xglm"),ydo=o(" \u2014 "),BB=a("a"),Ldo=o("XGLMTokenizer"),xdo=o(" or "),IB=a("a"),$do=o("XGLMTokenizerFast"),kdo=o(" (XGLM model)"),Sdo=l(),ah=a("li"),Fne=a("strong"),Rdo=o("xlm"),Pdo=o(" \u2014 "),NB=a("a"),Bdo=o("XLMTokenizer"),Ido=o(" (XLM model)"),Ndo=l(),nh=a("li"),Tne=a("strong"),qdo=o("xlm-prophetnet"),jdo=o(" \u2014 "),qB=a("a"),Ddo=o("XLMProphetNetTokenizer"),Gdo=o(" (XLMProphetNet model)"),Odo=l(),$s=a("li"),Mne=a("strong"),Vdo=o("xlm-roberta"),Xdo=o(" \u2014 "),jB=a("a"),zdo=o("XLMRobertaTokenizer"),Wdo=o(" or "),DB=a("a"),Qdo=o("XLMRobertaTokenizerFast"),Hdo=o(" (XLM-RoBERTa model)"),Udo=l(),ks=a("li"),Ene=a("strong"),Jdo=o("xlm-roberta-xl"),Ydo=o(" \u2014 "),GB=a("a"),Kdo=o("RobertaTokenizer"),Zdo=o(" or "),OB=a("a"),eco=o("RobertaTokenizerFast"),oco=o(" (XLM-RoBERTa-XL model)"),rco=l(),Ss=a("li"),Cne=a("strong"),tco=o("xlnet"),aco=o(" \u2014 "),VB=a("a"),nco=o("XLNetTokenizer"),sco=o(" or "),XB=a("a"),lco=o("XLNetTokenizerFast"),ico=o(" (XLNet model)"),dco=l(),Rs=a("li"),wne=a("strong"),cco=o("yoso"),fco=o(" \u2014 "),zB=a("a"),mco=o("AlbertTokenizer"),gco=o(" or "),WB=a("a"),hco=o("AlbertTokenizerFast"),pco=o(" (YOSO model)"),_co=l(),F(sh.$$.fragment),uco=l(),lh=a("div"),F(JA.$$.fragment),bco=l(),Ane=a("p"),vco=o("Register a new tokenizer in this mapping."),Qqe=l(),Ei=a("h2"),ih=a("a"),yne=a("span"),F(YA.$$.fragment),Fco=l(),Lne=a("span"),Tco=o("AutoFeatureExtractor"),Hqe=l(),Ao=a("div"),F(KA.$$.fragment),Mco=l(),ZA=a("p"),Eco=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),QB=a("a"),Cco=o("AutoFeatureExtractor.from_pretrained()"),wco=o(" class method."),Aco=l(),ey=a("p"),yco=o("This class cannot be instantiated directly using "),xne=a("code"),Lco=o("__init__()"),xco=o(" (throws an error)."),$co=l(),He=a("div"),F(oy.$$.fragment),kco=l(),$ne=a("p"),Sco=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Rco=l(),La=a("p"),Pco=o("The feature extractor class to instantiate is selected based on the "),kne=a("code"),Bco=o("model_type"),Ico=o(` property of the config object
(either passed as an argument or loaded from `),Sne=a("code"),Nco=o("pretrained_model_name_or_path"),qco=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Rne=a("code"),jco=o("pretrained_model_name_or_path"),Dco=o(":"),Gco=l(),Y=a("ul"),dh=a("li"),Pne=a("strong"),Oco=o("beit"),Vco=o(" \u2014 "),HB=a("a"),Xco=o("BeitFeatureExtractor"),zco=o(" (BEiT model)"),Wco=l(),ch=a("li"),Bne=a("strong"),Qco=o("clip"),Hco=o(" \u2014 "),UB=a("a"),Uco=o("CLIPFeatureExtractor"),Jco=o(" (CLIP model)"),Yco=l(),fh=a("li"),Ine=a("strong"),Kco=o("convnext"),Zco=o(" \u2014 "),JB=a("a"),efo=o("ConvNextFeatureExtractor"),ofo=o(" (ConvNext model)"),rfo=l(),mh=a("li"),Nne=a("strong"),tfo=o("cvt"),afo=o(" \u2014 "),YB=a("a"),nfo=o("ConvNextFeatureExtractor"),sfo=o(" (CvT model)"),lfo=l(),gh=a("li"),qne=a("strong"),ifo=o("data2vec-audio"),dfo=o(" \u2014 "),KB=a("a"),cfo=o("Wav2Vec2FeatureExtractor"),ffo=o(" (Data2VecAudio model)"),mfo=l(),hh=a("li"),jne=a("strong"),gfo=o("data2vec-vision"),hfo=o(" \u2014 "),ZB=a("a"),pfo=o("BeitFeatureExtractor"),_fo=o(" (Data2VecVision model)"),ufo=l(),ph=a("li"),Dne=a("strong"),bfo=o("deit"),vfo=o(" \u2014 "),eI=a("a"),Ffo=o("DeiTFeatureExtractor"),Tfo=o(" (DeiT model)"),Mfo=l(),_h=a("li"),Gne=a("strong"),Efo=o("detr"),Cfo=o(" \u2014 "),oI=a("a"),wfo=o("DetrFeatureExtractor"),Afo=o(" (DETR model)"),yfo=l(),uh=a("li"),One=a("strong"),Lfo=o("dpt"),xfo=o(" \u2014 "),rI=a("a"),$fo=o("DPTFeatureExtractor"),kfo=o(" (DPT model)"),Sfo=l(),bh=a("li"),Vne=a("strong"),Rfo=o("flava"),Pfo=o(" \u2014 "),tI=a("a"),Bfo=o("FlavaFeatureExtractor"),Ifo=o(" (Flava model)"),Nfo=l(),vh=a("li"),Xne=a("strong"),qfo=o("glpn"),jfo=o(" \u2014 "),aI=a("a"),Dfo=o("GLPNFeatureExtractor"),Gfo=o(" (GLPN model)"),Ofo=l(),Fh=a("li"),zne=a("strong"),Vfo=o("hubert"),Xfo=o(" \u2014 "),nI=a("a"),zfo=o("Wav2Vec2FeatureExtractor"),Wfo=o(" (Hubert model)"),Qfo=l(),Th=a("li"),Wne=a("strong"),Hfo=o("imagegpt"),Ufo=o(" \u2014 "),sI=a("a"),Jfo=o("ImageGPTFeatureExtractor"),Yfo=o(" (ImageGPT model)"),Kfo=l(),Mh=a("li"),Qne=a("strong"),Zfo=o("layoutlmv2"),emo=o(" \u2014 "),lI=a("a"),omo=o("LayoutLMv2FeatureExtractor"),rmo=o(" (LayoutLMv2 model)"),tmo=l(),Eh=a("li"),Hne=a("strong"),amo=o("layoutlmv3"),nmo=o(" \u2014 "),iI=a("a"),smo=o("LayoutLMv3FeatureExtractor"),lmo=o(" (LayoutLMv3 model)"),imo=l(),Ch=a("li"),Une=a("strong"),dmo=o("maskformer"),cmo=o(" \u2014 "),dI=a("a"),fmo=o("MaskFormerFeatureExtractor"),mmo=o(" (MaskFormer model)"),gmo=l(),wh=a("li"),Jne=a("strong"),hmo=o("mobilevit"),pmo=o(" \u2014 "),cI=a("a"),_mo=o("MobileViTFeatureExtractor"),umo=o(" (MobileViT model)"),bmo=l(),Ah=a("li"),Yne=a("strong"),vmo=o("perceiver"),Fmo=o(" \u2014 "),fI=a("a"),Tmo=o("PerceiverFeatureExtractor"),Mmo=o(" (Perceiver model)"),Emo=l(),yh=a("li"),Kne=a("strong"),Cmo=o("poolformer"),wmo=o(" \u2014 "),mI=a("a"),Amo=o("PoolFormerFeatureExtractor"),ymo=o(" (PoolFormer model)"),Lmo=l(),Lh=a("li"),Zne=a("strong"),xmo=o("regnet"),$mo=o(" \u2014 "),gI=a("a"),kmo=o("ConvNextFeatureExtractor"),Smo=o(" (RegNet model)"),Rmo=l(),xh=a("li"),ese=a("strong"),Pmo=o("resnet"),Bmo=o(" \u2014 "),hI=a("a"),Imo=o("ConvNextFeatureExtractor"),Nmo=o(" (ResNet model)"),qmo=l(),$h=a("li"),ose=a("strong"),jmo=o("segformer"),Dmo=o(" \u2014 "),pI=a("a"),Gmo=o("SegformerFeatureExtractor"),Omo=o(" (SegFormer model)"),Vmo=l(),kh=a("li"),rse=a("strong"),Xmo=o("speech_to_text"),zmo=o(" \u2014 "),_I=a("a"),Wmo=o("Speech2TextFeatureExtractor"),Qmo=o(" (Speech2Text model)"),Hmo=l(),Sh=a("li"),tse=a("strong"),Umo=o("swin"),Jmo=o(" \u2014 "),uI=a("a"),Ymo=o("ViTFeatureExtractor"),Kmo=o(" (Swin model)"),Zmo=l(),Rh=a("li"),ase=a("strong"),ego=o("van"),ogo=o(" \u2014 "),bI=a("a"),rgo=o("ConvNextFeatureExtractor"),tgo=o(" (VAN model)"),ago=l(),Ph=a("li"),nse=a("strong"),ngo=o("vit"),sgo=o(" \u2014 "),vI=a("a"),lgo=o("ViTFeatureExtractor"),igo=o(" (ViT model)"),dgo=l(),Bh=a("li"),sse=a("strong"),cgo=o("vit_mae"),fgo=o(" \u2014 "),FI=a("a"),mgo=o("ViTFeatureExtractor"),ggo=o(" (ViTMAE model)"),hgo=l(),Ih=a("li"),lse=a("strong"),pgo=o("wav2vec2"),_go=o(" \u2014 "),TI=a("a"),ugo=o("Wav2Vec2FeatureExtractor"),bgo=o(" (Wav2Vec2 model)"),vgo=l(),Nh=a("li"),ise=a("strong"),Fgo=o("wav2vec2-conformer"),Tgo=o(" \u2014 "),MI=a("a"),Mgo=o("Wav2Vec2FeatureExtractor"),Ego=o(" (Wav2Vec2-Conformer model)"),Cgo=l(),qh=a("li"),dse=a("strong"),wgo=o("yolos"),Ago=o(" \u2014 "),EI=a("a"),ygo=o("YolosFeatureExtractor"),Lgo=o(" (YOLOS model)"),xgo=l(),F(jh.$$.fragment),$go=l(),F(Dh.$$.fragment),kgo=l(),Gh=a("div"),F(ry.$$.fragment),Sgo=l(),cse=a("p"),Rgo=o("Register a new feature extractor for this class."),Uqe=l(),Ci=a("h2"),Oh=a("a"),fse=a("span"),F(ty.$$.fragment),Pgo=l(),mse=a("span"),Bgo=o("AutoProcessor"),Jqe=l(),yo=a("div"),F(ay.$$.fragment),Igo=l(),ny=a("p"),Ngo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),CI=a("a"),qgo=o("AutoProcessor.from_pretrained()"),jgo=o(" class method."),Dgo=l(),sy=a("p"),Ggo=o("This class cannot be instantiated directly using "),gse=a("code"),Ogo=o("__init__()"),Vgo=o(" (throws an error)."),Xgo=l(),Ue=a("div"),F(ly.$$.fragment),zgo=l(),hse=a("p"),Wgo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Qgo=l(),wi=a("p"),Hgo=o("The processor class to instantiate is selected based on the "),pse=a("code"),Ugo=o("model_type"),Jgo=o(` property of the config object (either
passed as an argument or loaded from `),_se=a("code"),Ygo=o("pretrained_model_name_or_path"),Kgo=o(" if possible):"),Zgo=l(),he=a("ul"),Vh=a("li"),use=a("strong"),eho=o("clip"),oho=o(" \u2014 "),wI=a("a"),rho=o("CLIPProcessor"),tho=o(" (CLIP model)"),aho=l(),Xh=a("li"),bse=a("strong"),nho=o("flava"),sho=o(" \u2014 "),vse=a("code"),lho=o("FLAVAProcessor"),iho=o(" (Flava model)"),dho=l(),zh=a("li"),Fse=a("strong"),cho=o("layoutlmv2"),fho=o(" \u2014 "),AI=a("a"),mho=o("LayoutLMv2Processor"),gho=o(" (LayoutLMv2 model)"),hho=l(),Wh=a("li"),Tse=a("strong"),pho=o("layoutlmv3"),_ho=o(" \u2014 "),yI=a("a"),uho=o("LayoutLMv3Processor"),bho=o(" (LayoutLMv3 model)"),vho=l(),Qh=a("li"),Mse=a("strong"),Fho=o("layoutxlm"),Tho=o(" \u2014 "),LI=a("a"),Mho=o("LayoutXLMProcessor"),Eho=o(" (LayoutXLM model)"),Cho=l(),Hh=a("li"),Ese=a("strong"),who=o("sew"),Aho=o(" \u2014 "),xI=a("a"),yho=o("Wav2Vec2Processor"),Lho=o(" (SEW model)"),xho=l(),Uh=a("li"),Cse=a("strong"),$ho=o("sew-d"),kho=o(" \u2014 "),$I=a("a"),Sho=o("Wav2Vec2Processor"),Rho=o(" (SEW-D model)"),Pho=l(),Jh=a("li"),wse=a("strong"),Bho=o("speech_to_text"),Iho=o(" \u2014 "),kI=a("a"),Nho=o("Speech2TextProcessor"),qho=o(" (Speech2Text model)"),jho=l(),Yh=a("li"),Ase=a("strong"),Dho=o("speech_to_text_2"),Gho=o(" \u2014 "),SI=a("a"),Oho=o("Speech2Text2Processor"),Vho=o(" (Speech2Text2 model)"),Xho=l(),Kh=a("li"),yse=a("strong"),zho=o("trocr"),Who=o(" \u2014 "),RI=a("a"),Qho=o("TrOCRProcessor"),Hho=o(" (TrOCR model)"),Uho=l(),Zh=a("li"),Lse=a("strong"),Jho=o("unispeech"),Yho=o(" \u2014 "),PI=a("a"),Kho=o("Wav2Vec2Processor"),Zho=o(" (UniSpeech model)"),epo=l(),ep=a("li"),xse=a("strong"),opo=o("unispeech-sat"),rpo=o(" \u2014 "),BI=a("a"),tpo=o("Wav2Vec2Processor"),apo=o(" (UniSpeechSat model)"),npo=l(),op=a("li"),$se=a("strong"),spo=o("vilt"),lpo=o(" \u2014 "),II=a("a"),ipo=o("ViltProcessor"),dpo=o(" (ViLT model)"),cpo=l(),rp=a("li"),kse=a("strong"),fpo=o("vision-text-dual-encoder"),mpo=o(" \u2014 "),NI=a("a"),gpo=o("VisionTextDualEncoderProcessor"),hpo=o(" (VisionTextDualEncoder model)"),ppo=l(),tp=a("li"),Sse=a("strong"),_po=o("wav2vec2"),upo=o(" \u2014 "),qI=a("a"),bpo=o("Wav2Vec2Processor"),vpo=o(" (Wav2Vec2 model)"),Fpo=l(),ap=a("li"),Rse=a("strong"),Tpo=o("wav2vec2-conformer"),Mpo=o(" \u2014 "),jI=a("a"),Epo=o("Wav2Vec2Processor"),Cpo=o(" (Wav2Vec2-Conformer model)"),wpo=l(),np=a("li"),Pse=a("strong"),Apo=o("wavlm"),ypo=o(" \u2014 "),DI=a("a"),Lpo=o("Wav2Vec2Processor"),xpo=o(" (WavLM model)"),$po=l(),F(sp.$$.fragment),kpo=l(),F(lp.$$.fragment),Spo=l(),ip=a("div"),F(iy.$$.fragment),Rpo=l(),Bse=a("p"),Ppo=o("Register a new processor for this class."),Yqe=l(),Ai=a("h2"),dp=a("a"),Ise=a("span"),F(dy.$$.fragment),Bpo=l(),Nse=a("span"),Ipo=o("AutoModel"),Kqe=l(),Lo=a("div"),F(cy.$$.fragment),Npo=l(),yi=a("p"),qpo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GI=a("a"),jpo=o("from_pretrained()"),Dpo=o(" class method or the "),OI=a("a"),Gpo=o("from_config()"),Opo=o(` class
method.`),Vpo=l(),fy=a("p"),Xpo=o("This class cannot be instantiated directly using "),qse=a("code"),zpo=o("__init__()"),Wpo=o(" (throws an error)."),Qpo=l(),at=a("div"),F(my.$$.fragment),Hpo=l(),jse=a("p"),Upo=o("Instantiates one of the base model classes of the library from a configuration."),Jpo=l(),Li=a("p"),Ypo=o(`Note:
Loading a model from its configuration file does `),Dse=a("strong"),Kpo=o("not"),Zpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VI=a("a"),e_o=o("from_pretrained()"),o_o=o(" to load the model weights."),r_o=l(),F(cp.$$.fragment),t_o=l(),Je=a("div"),F(gy.$$.fragment),a_o=l(),Gse=a("p"),n_o=o("Instantiate one of the base model classes of the library from a pretrained model."),s_o=l(),xa=a("p"),l_o=o("The model class to instantiate is selected based on the "),Ose=a("code"),i_o=o("model_type"),d_o=o(` property of the config object (either
passed as an argument or loaded from `),Vse=a("code"),c_o=o("pretrained_model_name_or_path"),f_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xse=a("code"),m_o=o("pretrained_model_name_or_path"),g_o=o(":"),h_o=l(),x=a("ul"),fp=a("li"),zse=a("strong"),p_o=o("albert"),__o=o(" \u2014 "),XI=a("a"),u_o=o("AlbertModel"),b_o=o(" (ALBERT model)"),v_o=l(),mp=a("li"),Wse=a("strong"),F_o=o("bart"),T_o=o(" \u2014 "),zI=a("a"),M_o=o("BartModel"),E_o=o(" (BART model)"),C_o=l(),gp=a("li"),Qse=a("strong"),w_o=o("beit"),A_o=o(" \u2014 "),WI=a("a"),y_o=o("BeitModel"),L_o=o(" (BEiT model)"),x_o=l(),hp=a("li"),Hse=a("strong"),$_o=o("bert"),k_o=o(" \u2014 "),QI=a("a"),S_o=o("BertModel"),R_o=o(" (BERT model)"),P_o=l(),pp=a("li"),Use=a("strong"),B_o=o("bert-generation"),I_o=o(" \u2014 "),HI=a("a"),N_o=o("BertGenerationEncoder"),q_o=o(" (Bert Generation model)"),j_o=l(),_p=a("li"),Jse=a("strong"),D_o=o("big_bird"),G_o=o(" \u2014 "),UI=a("a"),O_o=o("BigBirdModel"),V_o=o(" (BigBird model)"),X_o=l(),up=a("li"),Yse=a("strong"),z_o=o("bigbird_pegasus"),W_o=o(" \u2014 "),JI=a("a"),Q_o=o("BigBirdPegasusModel"),H_o=o(" (BigBirdPegasus model)"),U_o=l(),bp=a("li"),Kse=a("strong"),J_o=o("blenderbot"),Y_o=o(" \u2014 "),YI=a("a"),K_o=o("BlenderbotModel"),Z_o=o(" (Blenderbot model)"),euo=l(),vp=a("li"),Zse=a("strong"),ouo=o("blenderbot-small"),ruo=o(" \u2014 "),KI=a("a"),tuo=o("BlenderbotSmallModel"),auo=o(" (BlenderbotSmall model)"),nuo=l(),Fp=a("li"),ele=a("strong"),suo=o("camembert"),luo=o(" \u2014 "),ZI=a("a"),iuo=o("CamembertModel"),duo=o(" (CamemBERT model)"),cuo=l(),Tp=a("li"),ole=a("strong"),fuo=o("canine"),muo=o(" \u2014 "),eN=a("a"),guo=o("CanineModel"),huo=o(" (Canine model)"),puo=l(),Mp=a("li"),rle=a("strong"),_uo=o("clip"),uuo=o(" \u2014 "),oN=a("a"),buo=o("CLIPModel"),vuo=o(" (CLIP model)"),Fuo=l(),Ep=a("li"),tle=a("strong"),Tuo=o("convbert"),Muo=o(" \u2014 "),rN=a("a"),Euo=o("ConvBertModel"),Cuo=o(" (ConvBERT model)"),wuo=l(),Cp=a("li"),ale=a("strong"),Auo=o("convnext"),yuo=o(" \u2014 "),tN=a("a"),Luo=o("ConvNextModel"),xuo=o(" (ConvNext model)"),$uo=l(),wp=a("li"),nle=a("strong"),kuo=o("ctrl"),Suo=o(" \u2014 "),aN=a("a"),Ruo=o("CTRLModel"),Puo=o(" (CTRL model)"),Buo=l(),Ap=a("li"),sle=a("strong"),Iuo=o("cvt"),Nuo=o(" \u2014 "),nN=a("a"),quo=o("CvtModel"),juo=o(" (CvT model)"),Duo=l(),yp=a("li"),lle=a("strong"),Guo=o("data2vec-audio"),Ouo=o(" \u2014 "),sN=a("a"),Vuo=o("Data2VecAudioModel"),Xuo=o(" (Data2VecAudio model)"),zuo=l(),Lp=a("li"),ile=a("strong"),Wuo=o("data2vec-text"),Quo=o(" \u2014 "),lN=a("a"),Huo=o("Data2VecTextModel"),Uuo=o(" (Data2VecText model)"),Juo=l(),xp=a("li"),dle=a("strong"),Yuo=o("data2vec-vision"),Kuo=o(" \u2014 "),iN=a("a"),Zuo=o("Data2VecVisionModel"),e1o=o(" (Data2VecVision model)"),o1o=l(),$p=a("li"),cle=a("strong"),r1o=o("deberta"),t1o=o(" \u2014 "),dN=a("a"),a1o=o("DebertaModel"),n1o=o(" (DeBERTa model)"),s1o=l(),kp=a("li"),fle=a("strong"),l1o=o("deberta-v2"),i1o=o(" \u2014 "),cN=a("a"),d1o=o("DebertaV2Model"),c1o=o(" (DeBERTa-v2 model)"),f1o=l(),Sp=a("li"),mle=a("strong"),m1o=o("decision_transformer"),g1o=o(" \u2014 "),fN=a("a"),h1o=o("DecisionTransformerModel"),p1o=o(" (Decision Transformer model)"),_1o=l(),Rp=a("li"),gle=a("strong"),u1o=o("deit"),b1o=o(" \u2014 "),mN=a("a"),v1o=o("DeiTModel"),F1o=o(" (DeiT model)"),T1o=l(),Pp=a("li"),hle=a("strong"),M1o=o("detr"),E1o=o(" \u2014 "),gN=a("a"),C1o=o("DetrModel"),w1o=o(" (DETR model)"),A1o=l(),Bp=a("li"),ple=a("strong"),y1o=o("distilbert"),L1o=o(" \u2014 "),hN=a("a"),x1o=o("DistilBertModel"),$1o=o(" (DistilBERT model)"),k1o=l(),Ip=a("li"),_le=a("strong"),S1o=o("dpr"),R1o=o(" \u2014 "),pN=a("a"),P1o=o("DPRQuestionEncoder"),B1o=o(" (DPR model)"),I1o=l(),Np=a("li"),ule=a("strong"),N1o=o("dpt"),q1o=o(" \u2014 "),_N=a("a"),j1o=o("DPTModel"),D1o=o(" (DPT model)"),G1o=l(),qp=a("li"),ble=a("strong"),O1o=o("electra"),V1o=o(" \u2014 "),uN=a("a"),X1o=o("ElectraModel"),z1o=o(" (ELECTRA model)"),W1o=l(),jp=a("li"),vle=a("strong"),Q1o=o("flaubert"),H1o=o(" \u2014 "),bN=a("a"),U1o=o("FlaubertModel"),J1o=o(" (FlauBERT model)"),Y1o=l(),Dp=a("li"),Fle=a("strong"),K1o=o("flava"),Z1o=o(" \u2014 "),vN=a("a"),ebo=o("FlavaModel"),obo=o(" (Flava model)"),rbo=l(),Gp=a("li"),Tle=a("strong"),tbo=o("fnet"),abo=o(" \u2014 "),FN=a("a"),nbo=o("FNetModel"),sbo=o(" (FNet model)"),lbo=l(),Op=a("li"),Mle=a("strong"),ibo=o("fsmt"),dbo=o(" \u2014 "),TN=a("a"),cbo=o("FSMTModel"),fbo=o(" (FairSeq Machine-Translation model)"),mbo=l(),Ps=a("li"),Ele=a("strong"),gbo=o("funnel"),hbo=o(" \u2014 "),MN=a("a"),pbo=o("FunnelModel"),_bo=o(" or "),EN=a("a"),ubo=o("FunnelBaseModel"),bbo=o(" (Funnel Transformer model)"),vbo=l(),Vp=a("li"),Cle=a("strong"),Fbo=o("glpn"),Tbo=o(" \u2014 "),CN=a("a"),Mbo=o("GLPNModel"),Ebo=o(" (GLPN model)"),Cbo=l(),Xp=a("li"),wle=a("strong"),wbo=o("gpt2"),Abo=o(" \u2014 "),wN=a("a"),ybo=o("GPT2Model"),Lbo=o(" (OpenAI GPT-2 model)"),xbo=l(),zp=a("li"),Ale=a("strong"),$bo=o("gpt_neo"),kbo=o(" \u2014 "),AN=a("a"),Sbo=o("GPTNeoModel"),Rbo=o(" (GPT Neo model)"),Pbo=l(),Wp=a("li"),yle=a("strong"),Bbo=o("gpt_neox"),Ibo=o(" \u2014 "),yN=a("a"),Nbo=o("GPTNeoXModel"),qbo=o(" (GPT NeoX model)"),jbo=l(),Qp=a("li"),Lle=a("strong"),Dbo=o("gptj"),Gbo=o(" \u2014 "),LN=a("a"),Obo=o("GPTJModel"),Vbo=o(" (GPT-J model)"),Xbo=l(),Hp=a("li"),xle=a("strong"),zbo=o("hubert"),Wbo=o(" \u2014 "),xN=a("a"),Qbo=o("HubertModel"),Hbo=o(" (Hubert model)"),Ubo=l(),Up=a("li"),$le=a("strong"),Jbo=o("ibert"),Ybo=o(" \u2014 "),$N=a("a"),Kbo=o("IBertModel"),Zbo=o(" (I-BERT model)"),e2o=l(),Jp=a("li"),kle=a("strong"),o2o=o("imagegpt"),r2o=o(" \u2014 "),kN=a("a"),t2o=o("ImageGPTModel"),a2o=o(" (ImageGPT model)"),n2o=l(),Yp=a("li"),Sle=a("strong"),s2o=o("layoutlm"),l2o=o(" \u2014 "),SN=a("a"),i2o=o("LayoutLMModel"),d2o=o(" (LayoutLM model)"),c2o=l(),Kp=a("li"),Rle=a("strong"),f2o=o("layoutlmv2"),m2o=o(" \u2014 "),RN=a("a"),g2o=o("LayoutLMv2Model"),h2o=o(" (LayoutLMv2 model)"),p2o=l(),Zp=a("li"),Ple=a("strong"),_2o=o("layoutlmv3"),u2o=o(" \u2014 "),PN=a("a"),b2o=o("LayoutLMv3Model"),v2o=o(" (LayoutLMv3 model)"),F2o=l(),e_=a("li"),Ble=a("strong"),T2o=o("led"),M2o=o(" \u2014 "),BN=a("a"),E2o=o("LEDModel"),C2o=o(" (LED model)"),w2o=l(),o_=a("li"),Ile=a("strong"),A2o=o("longformer"),y2o=o(" \u2014 "),IN=a("a"),L2o=o("LongformerModel"),x2o=o(" (Longformer model)"),$2o=l(),r_=a("li"),Nle=a("strong"),k2o=o("luke"),S2o=o(" \u2014 "),NN=a("a"),R2o=o("LukeModel"),P2o=o(" (LUKE model)"),B2o=l(),t_=a("li"),qle=a("strong"),I2o=o("lxmert"),N2o=o(" \u2014 "),qN=a("a"),q2o=o("LxmertModel"),j2o=o(" (LXMERT model)"),D2o=l(),a_=a("li"),jle=a("strong"),G2o=o("m2m_100"),O2o=o(" \u2014 "),jN=a("a"),V2o=o("M2M100Model"),X2o=o(" (M2M100 model)"),z2o=l(),n_=a("li"),Dle=a("strong"),W2o=o("marian"),Q2o=o(" \u2014 "),DN=a("a"),H2o=o("MarianModel"),U2o=o(" (Marian model)"),J2o=l(),s_=a("li"),Gle=a("strong"),Y2o=o("maskformer"),K2o=o(" \u2014 "),GN=a("a"),Z2o=o("MaskFormerModel"),e4o=o(" (MaskFormer model)"),o4o=l(),l_=a("li"),Ole=a("strong"),r4o=o("mbart"),t4o=o(" \u2014 "),ON=a("a"),a4o=o("MBartModel"),n4o=o(" (mBART model)"),s4o=l(),i_=a("li"),Vle=a("strong"),l4o=o("megatron-bert"),i4o=o(" \u2014 "),VN=a("a"),d4o=o("MegatronBertModel"),c4o=o(" (MegatronBert model)"),f4o=l(),d_=a("li"),Xle=a("strong"),m4o=o("mobilebert"),g4o=o(" \u2014 "),XN=a("a"),h4o=o("MobileBertModel"),p4o=o(" (MobileBERT model)"),_4o=l(),c_=a("li"),zle=a("strong"),u4o=o("mobilevit"),b4o=o(" \u2014 "),zN=a("a"),v4o=o("MobileViTModel"),F4o=o(" (MobileViT model)"),T4o=l(),f_=a("li"),Wle=a("strong"),M4o=o("mpnet"),E4o=o(" \u2014 "),WN=a("a"),C4o=o("MPNetModel"),w4o=o(" (MPNet model)"),A4o=l(),m_=a("li"),Qle=a("strong"),y4o=o("mt5"),L4o=o(" \u2014 "),QN=a("a"),x4o=o("MT5Model"),$4o=o(" (mT5 model)"),k4o=l(),g_=a("li"),Hle=a("strong"),S4o=o("nystromformer"),R4o=o(" \u2014 "),HN=a("a"),P4o=o("NystromformerModel"),B4o=o(" (Nystromformer model)"),I4o=l(),h_=a("li"),Ule=a("strong"),N4o=o("openai-gpt"),q4o=o(" \u2014 "),UN=a("a"),j4o=o("OpenAIGPTModel"),D4o=o(" (OpenAI GPT model)"),G4o=l(),p_=a("li"),Jle=a("strong"),O4o=o("opt"),V4o=o(" \u2014 "),JN=a("a"),X4o=o("OPTModel"),z4o=o(" (OPT model)"),W4o=l(),__=a("li"),Yle=a("strong"),Q4o=o("pegasus"),H4o=o(" \u2014 "),YN=a("a"),U4o=o("PegasusModel"),J4o=o(" (Pegasus model)"),Y4o=l(),u_=a("li"),Kle=a("strong"),K4o=o("perceiver"),Z4o=o(" \u2014 "),KN=a("a"),e5o=o("PerceiverModel"),o5o=o(" (Perceiver model)"),r5o=l(),b_=a("li"),Zle=a("strong"),t5o=o("plbart"),a5o=o(" \u2014 "),ZN=a("a"),n5o=o("PLBartModel"),s5o=o(" (PLBart model)"),l5o=l(),v_=a("li"),eie=a("strong"),i5o=o("poolformer"),d5o=o(" \u2014 "),eq=a("a"),c5o=o("PoolFormerModel"),f5o=o(" (PoolFormer model)"),m5o=l(),F_=a("li"),oie=a("strong"),g5o=o("prophetnet"),h5o=o(" \u2014 "),oq=a("a"),p5o=o("ProphetNetModel"),_5o=o(" (ProphetNet model)"),u5o=l(),T_=a("li"),rie=a("strong"),b5o=o("qdqbert"),v5o=o(" \u2014 "),rq=a("a"),F5o=o("QDQBertModel"),T5o=o(" (QDQBert model)"),M5o=l(),M_=a("li"),tie=a("strong"),E5o=o("reformer"),C5o=o(" \u2014 "),tq=a("a"),w5o=o("ReformerModel"),A5o=o(" (Reformer model)"),y5o=l(),E_=a("li"),aie=a("strong"),L5o=o("regnet"),x5o=o(" \u2014 "),aq=a("a"),$5o=o("RegNetModel"),k5o=o(" (RegNet model)"),S5o=l(),C_=a("li"),nie=a("strong"),R5o=o("rembert"),P5o=o(" \u2014 "),nq=a("a"),B5o=o("RemBertModel"),I5o=o(" (RemBERT model)"),N5o=l(),w_=a("li"),sie=a("strong"),q5o=o("resnet"),j5o=o(" \u2014 "),sq=a("a"),D5o=o("ResNetModel"),G5o=o(" (ResNet model)"),O5o=l(),A_=a("li"),lie=a("strong"),V5o=o("retribert"),X5o=o(" \u2014 "),lq=a("a"),z5o=o("RetriBertModel"),W5o=o(" (RetriBERT model)"),Q5o=l(),y_=a("li"),iie=a("strong"),H5o=o("roberta"),U5o=o(" \u2014 "),iq=a("a"),J5o=o("RobertaModel"),Y5o=o(" (RoBERTa model)"),K5o=l(),L_=a("li"),die=a("strong"),Z5o=o("roformer"),evo=o(" \u2014 "),dq=a("a"),ovo=o("RoFormerModel"),rvo=o(" (RoFormer model)"),tvo=l(),x_=a("li"),cie=a("strong"),avo=o("segformer"),nvo=o(" \u2014 "),cq=a("a"),svo=o("SegformerModel"),lvo=o(" (SegFormer model)"),ivo=l(),$_=a("li"),fie=a("strong"),dvo=o("sew"),cvo=o(" \u2014 "),fq=a("a"),fvo=o("SEWModel"),mvo=o(" (SEW model)"),gvo=l(),k_=a("li"),mie=a("strong"),hvo=o("sew-d"),pvo=o(" \u2014 "),mq=a("a"),_vo=o("SEWDModel"),uvo=o(" (SEW-D model)"),bvo=l(),S_=a("li"),gie=a("strong"),vvo=o("speech_to_text"),Fvo=o(" \u2014 "),gq=a("a"),Tvo=o("Speech2TextModel"),Mvo=o(" (Speech2Text model)"),Evo=l(),R_=a("li"),hie=a("strong"),Cvo=o("splinter"),wvo=o(" \u2014 "),hq=a("a"),Avo=o("SplinterModel"),yvo=o(" (Splinter model)"),Lvo=l(),P_=a("li"),pie=a("strong"),xvo=o("squeezebert"),$vo=o(" \u2014 "),pq=a("a"),kvo=o("SqueezeBertModel"),Svo=o(" (SqueezeBERT model)"),Rvo=l(),B_=a("li"),_ie=a("strong"),Pvo=o("swin"),Bvo=o(" \u2014 "),_q=a("a"),Ivo=o("SwinModel"),Nvo=o(" (Swin model)"),qvo=l(),I_=a("li"),uie=a("strong"),jvo=o("t5"),Dvo=o(" \u2014 "),uq=a("a"),Gvo=o("T5Model"),Ovo=o(" (T5 model)"),Vvo=l(),N_=a("li"),bie=a("strong"),Xvo=o("tapas"),zvo=o(" \u2014 "),bq=a("a"),Wvo=o("TapasModel"),Qvo=o(" (TAPAS model)"),Hvo=l(),q_=a("li"),vie=a("strong"),Uvo=o("trajectory_transformer"),Jvo=o(" \u2014 "),vq=a("a"),Yvo=o("TrajectoryTransformerModel"),Kvo=o(" (Trajectory Transformer model)"),Zvo=l(),j_=a("li"),Fie=a("strong"),e3o=o("transfo-xl"),o3o=o(" \u2014 "),Fq=a("a"),r3o=o("TransfoXLModel"),t3o=o(" (Transformer-XL model)"),a3o=l(),D_=a("li"),Tie=a("strong"),n3o=o("unispeech"),s3o=o(" \u2014 "),Tq=a("a"),l3o=o("UniSpeechModel"),i3o=o(" (UniSpeech model)"),d3o=l(),G_=a("li"),Mie=a("strong"),c3o=o("unispeech-sat"),f3o=o(" \u2014 "),Mq=a("a"),m3o=o("UniSpeechSatModel"),g3o=o(" (UniSpeechSat model)"),h3o=l(),O_=a("li"),Eie=a("strong"),p3o=o("van"),_3o=o(" \u2014 "),Eq=a("a"),u3o=o("VanModel"),b3o=o(" (VAN model)"),v3o=l(),V_=a("li"),Cie=a("strong"),F3o=o("vilt"),T3o=o(" \u2014 "),Cq=a("a"),M3o=o("ViltModel"),E3o=o(" (ViLT model)"),C3o=l(),X_=a("li"),wie=a("strong"),w3o=o("vision-text-dual-encoder"),A3o=o(" \u2014 "),wq=a("a"),y3o=o("VisionTextDualEncoderModel"),L3o=o(" (VisionTextDualEncoder model)"),x3o=l(),z_=a("li"),Aie=a("strong"),$3o=o("visual_bert"),k3o=o(" \u2014 "),Aq=a("a"),S3o=o("VisualBertModel"),R3o=o(" (VisualBert model)"),P3o=l(),W_=a("li"),yie=a("strong"),B3o=o("vit"),I3o=o(" \u2014 "),yq=a("a"),N3o=o("ViTModel"),q3o=o(" (ViT model)"),j3o=l(),Q_=a("li"),Lie=a("strong"),D3o=o("vit_mae"),G3o=o(" \u2014 "),Lq=a("a"),O3o=o("ViTMAEModel"),V3o=o(" (ViTMAE model)"),X3o=l(),H_=a("li"),xie=a("strong"),z3o=o("wav2vec2"),W3o=o(" \u2014 "),xq=a("a"),Q3o=o("Wav2Vec2Model"),H3o=o(" (Wav2Vec2 model)"),U3o=l(),U_=a("li"),$ie=a("strong"),J3o=o("wav2vec2-conformer"),Y3o=o(" \u2014 "),$q=a("a"),K3o=o("Wav2Vec2ConformerModel"),Z3o=o(" (Wav2Vec2-Conformer model)"),eFo=l(),J_=a("li"),kie=a("strong"),oFo=o("wavlm"),rFo=o(" \u2014 "),kq=a("a"),tFo=o("WavLMModel"),aFo=o(" (WavLM model)"),nFo=l(),Y_=a("li"),Sie=a("strong"),sFo=o("xglm"),lFo=o(" \u2014 "),Sq=a("a"),iFo=o("XGLMModel"),dFo=o(" (XGLM model)"),cFo=l(),K_=a("li"),Rie=a("strong"),fFo=o("xlm"),mFo=o(" \u2014 "),Rq=a("a"),gFo=o("XLMModel"),hFo=o(" (XLM model)"),pFo=l(),Z_=a("li"),Pie=a("strong"),_Fo=o("xlm-prophetnet"),uFo=o(" \u2014 "),Pq=a("a"),bFo=o("XLMProphetNetModel"),vFo=o(" (XLMProphetNet model)"),FFo=l(),eu=a("li"),Bie=a("strong"),TFo=o("xlm-roberta"),MFo=o(" \u2014 "),Bq=a("a"),EFo=o("XLMRobertaModel"),CFo=o(" (XLM-RoBERTa model)"),wFo=l(),ou=a("li"),Iie=a("strong"),AFo=o("xlm-roberta-xl"),yFo=o(" \u2014 "),Iq=a("a"),LFo=o("XLMRobertaXLModel"),xFo=o(" (XLM-RoBERTa-XL model)"),$Fo=l(),ru=a("li"),Nie=a("strong"),kFo=o("xlnet"),SFo=o(" \u2014 "),Nq=a("a"),RFo=o("XLNetModel"),PFo=o(" (XLNet model)"),BFo=l(),tu=a("li"),qie=a("strong"),IFo=o("yolos"),NFo=o(" \u2014 "),qq=a("a"),qFo=o("YolosModel"),jFo=o(" (YOLOS model)"),DFo=l(),au=a("li"),jie=a("strong"),GFo=o("yoso"),OFo=o(" \u2014 "),jq=a("a"),VFo=o("YosoModel"),XFo=o(" (YOSO model)"),zFo=l(),nu=a("p"),WFo=o("The model is set in evaluation mode by default using "),Die=a("code"),QFo=o("model.eval()"),HFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=a("code"),UFo=o("model.train()"),JFo=l(),F(su.$$.fragment),Zqe=l(),xi=a("h2"),lu=a("a"),Oie=a("span"),F(hy.$$.fragment),YFo=l(),Vie=a("span"),KFo=o("AutoModelForPreTraining"),eje=l(),xo=a("div"),F(py.$$.fragment),ZFo=l(),$i=a("p"),eTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Dq=a("a"),oTo=o("from_pretrained()"),rTo=o(" class method or the "),Gq=a("a"),tTo=o("from_config()"),aTo=o(` class
method.`),nTo=l(),_y=a("p"),sTo=o("This class cannot be instantiated directly using "),Xie=a("code"),lTo=o("__init__()"),iTo=o(" (throws an error)."),dTo=l(),nt=a("div"),F(uy.$$.fragment),cTo=l(),zie=a("p"),fTo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mTo=l(),ki=a("p"),gTo=o(`Note:
Loading a model from its configuration file does `),Wie=a("strong"),hTo=o("not"),pTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oq=a("a"),_To=o("from_pretrained()"),uTo=o(" to load the model weights."),bTo=l(),F(iu.$$.fragment),vTo=l(),Ye=a("div"),F(by.$$.fragment),FTo=l(),Qie=a("p"),TTo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),MTo=l(),$a=a("p"),ETo=o("The model class to instantiate is selected based on the "),Hie=a("code"),CTo=o("model_type"),wTo=o(` property of the config object (either
passed as an argument or loaded from `),Uie=a("code"),ATo=o("pretrained_model_name_or_path"),yTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=a("code"),LTo=o("pretrained_model_name_or_path"),xTo=o(":"),$To=l(),G=a("ul"),du=a("li"),Yie=a("strong"),kTo=o("albert"),STo=o(" \u2014 "),Vq=a("a"),RTo=o("AlbertForPreTraining"),PTo=o(" (ALBERT model)"),BTo=l(),cu=a("li"),Kie=a("strong"),ITo=o("bart"),NTo=o(" \u2014 "),Xq=a("a"),qTo=o("BartForConditionalGeneration"),jTo=o(" (BART model)"),DTo=l(),fu=a("li"),Zie=a("strong"),GTo=o("bert"),OTo=o(" \u2014 "),zq=a("a"),VTo=o("BertForPreTraining"),XTo=o(" (BERT model)"),zTo=l(),mu=a("li"),ede=a("strong"),WTo=o("big_bird"),QTo=o(" \u2014 "),Wq=a("a"),HTo=o("BigBirdForPreTraining"),UTo=o(" (BigBird model)"),JTo=l(),gu=a("li"),ode=a("strong"),YTo=o("camembert"),KTo=o(" \u2014 "),Qq=a("a"),ZTo=o("CamembertForMaskedLM"),e7o=o(" (CamemBERT model)"),o7o=l(),hu=a("li"),rde=a("strong"),r7o=o("ctrl"),t7o=o(" \u2014 "),Hq=a("a"),a7o=o("CTRLLMHeadModel"),n7o=o(" (CTRL model)"),s7o=l(),pu=a("li"),tde=a("strong"),l7o=o("data2vec-text"),i7o=o(" \u2014 "),Uq=a("a"),d7o=o("Data2VecTextForMaskedLM"),c7o=o(" (Data2VecText model)"),f7o=l(),_u=a("li"),ade=a("strong"),m7o=o("deberta"),g7o=o(" \u2014 "),Jq=a("a"),h7o=o("DebertaForMaskedLM"),p7o=o(" (DeBERTa model)"),_7o=l(),uu=a("li"),nde=a("strong"),u7o=o("deberta-v2"),b7o=o(" \u2014 "),Yq=a("a"),v7o=o("DebertaV2ForMaskedLM"),F7o=o(" (DeBERTa-v2 model)"),T7o=l(),bu=a("li"),sde=a("strong"),M7o=o("distilbert"),E7o=o(" \u2014 "),Kq=a("a"),C7o=o("DistilBertForMaskedLM"),w7o=o(" (DistilBERT model)"),A7o=l(),vu=a("li"),lde=a("strong"),y7o=o("electra"),L7o=o(" \u2014 "),Zq=a("a"),x7o=o("ElectraForPreTraining"),$7o=o(" (ELECTRA model)"),k7o=l(),Fu=a("li"),ide=a("strong"),S7o=o("flaubert"),R7o=o(" \u2014 "),ej=a("a"),P7o=o("FlaubertWithLMHeadModel"),B7o=o(" (FlauBERT model)"),I7o=l(),Tu=a("li"),dde=a("strong"),N7o=o("flava"),q7o=o(" \u2014 "),oj=a("a"),j7o=o("FlavaForPreTraining"),D7o=o(" (Flava model)"),G7o=l(),Mu=a("li"),cde=a("strong"),O7o=o("fnet"),V7o=o(" \u2014 "),rj=a("a"),X7o=o("FNetForPreTraining"),z7o=o(" (FNet model)"),W7o=l(),Eu=a("li"),fde=a("strong"),Q7o=o("fsmt"),H7o=o(" \u2014 "),tj=a("a"),U7o=o("FSMTForConditionalGeneration"),J7o=o(" (FairSeq Machine-Translation model)"),Y7o=l(),Cu=a("li"),mde=a("strong"),K7o=o("funnel"),Z7o=o(" \u2014 "),aj=a("a"),eMo=o("FunnelForPreTraining"),oMo=o(" (Funnel Transformer model)"),rMo=l(),wu=a("li"),gde=a("strong"),tMo=o("gpt2"),aMo=o(" \u2014 "),nj=a("a"),nMo=o("GPT2LMHeadModel"),sMo=o(" (OpenAI GPT-2 model)"),lMo=l(),Au=a("li"),hde=a("strong"),iMo=o("ibert"),dMo=o(" \u2014 "),sj=a("a"),cMo=o("IBertForMaskedLM"),fMo=o(" (I-BERT model)"),mMo=l(),yu=a("li"),pde=a("strong"),gMo=o("layoutlm"),hMo=o(" \u2014 "),lj=a("a"),pMo=o("LayoutLMForMaskedLM"),_Mo=o(" (LayoutLM model)"),uMo=l(),Lu=a("li"),_de=a("strong"),bMo=o("longformer"),vMo=o(" \u2014 "),ij=a("a"),FMo=o("LongformerForMaskedLM"),TMo=o(" (Longformer model)"),MMo=l(),xu=a("li"),ude=a("strong"),EMo=o("lxmert"),CMo=o(" \u2014 "),dj=a("a"),wMo=o("LxmertForPreTraining"),AMo=o(" (LXMERT model)"),yMo=l(),$u=a("li"),bde=a("strong"),LMo=o("megatron-bert"),xMo=o(" \u2014 "),cj=a("a"),$Mo=o("MegatronBertForPreTraining"),kMo=o(" (MegatronBert model)"),SMo=l(),ku=a("li"),vde=a("strong"),RMo=o("mobilebert"),PMo=o(" \u2014 "),fj=a("a"),BMo=o("MobileBertForPreTraining"),IMo=o(" (MobileBERT model)"),NMo=l(),Su=a("li"),Fde=a("strong"),qMo=o("mpnet"),jMo=o(" \u2014 "),mj=a("a"),DMo=o("MPNetForMaskedLM"),GMo=o(" (MPNet model)"),OMo=l(),Ru=a("li"),Tde=a("strong"),VMo=o("openai-gpt"),XMo=o(" \u2014 "),gj=a("a"),zMo=o("OpenAIGPTLMHeadModel"),WMo=o(" (OpenAI GPT model)"),QMo=l(),Pu=a("li"),Mde=a("strong"),HMo=o("retribert"),UMo=o(" \u2014 "),hj=a("a"),JMo=o("RetriBertModel"),YMo=o(" (RetriBERT model)"),KMo=l(),Bu=a("li"),Ede=a("strong"),ZMo=o("roberta"),eEo=o(" \u2014 "),pj=a("a"),oEo=o("RobertaForMaskedLM"),rEo=o(" (RoBERTa model)"),tEo=l(),Iu=a("li"),Cde=a("strong"),aEo=o("splinter"),nEo=o(" \u2014 "),_j=a("a"),sEo=o("SplinterForPreTraining"),lEo=o(" (Splinter model)"),iEo=l(),Nu=a("li"),wde=a("strong"),dEo=o("squeezebert"),cEo=o(" \u2014 "),uj=a("a"),fEo=o("SqueezeBertForMaskedLM"),mEo=o(" (SqueezeBERT model)"),gEo=l(),qu=a("li"),Ade=a("strong"),hEo=o("t5"),pEo=o(" \u2014 "),bj=a("a"),_Eo=o("T5ForConditionalGeneration"),uEo=o(" (T5 model)"),bEo=l(),ju=a("li"),yde=a("strong"),vEo=o("tapas"),FEo=o(" \u2014 "),vj=a("a"),TEo=o("TapasForMaskedLM"),MEo=o(" (TAPAS model)"),EEo=l(),Du=a("li"),Lde=a("strong"),CEo=o("transfo-xl"),wEo=o(" \u2014 "),Fj=a("a"),AEo=o("TransfoXLLMHeadModel"),yEo=o(" (Transformer-XL model)"),LEo=l(),Gu=a("li"),xde=a("strong"),xEo=o("unispeech"),$Eo=o(" \u2014 "),Tj=a("a"),kEo=o("UniSpeechForPreTraining"),SEo=o(" (UniSpeech model)"),REo=l(),Ou=a("li"),$de=a("strong"),PEo=o("unispeech-sat"),BEo=o(" \u2014 "),Mj=a("a"),IEo=o("UniSpeechSatForPreTraining"),NEo=o(" (UniSpeechSat model)"),qEo=l(),Vu=a("li"),kde=a("strong"),jEo=o("visual_bert"),DEo=o(" \u2014 "),Ej=a("a"),GEo=o("VisualBertForPreTraining"),OEo=o(" (VisualBert model)"),VEo=l(),Xu=a("li"),Sde=a("strong"),XEo=o("vit_mae"),zEo=o(" \u2014 "),Cj=a("a"),WEo=o("ViTMAEForPreTraining"),QEo=o(" (ViTMAE model)"),HEo=l(),zu=a("li"),Rde=a("strong"),UEo=o("wav2vec2"),JEo=o(" \u2014 "),wj=a("a"),YEo=o("Wav2Vec2ForPreTraining"),KEo=o(" (Wav2Vec2 model)"),ZEo=l(),Wu=a("li"),Pde=a("strong"),eCo=o("wav2vec2-conformer"),oCo=o(" \u2014 "),Aj=a("a"),rCo=o("Wav2Vec2ConformerForPreTraining"),tCo=o(" (Wav2Vec2-Conformer model)"),aCo=l(),Qu=a("li"),Bde=a("strong"),nCo=o("xlm"),sCo=o(" \u2014 "),yj=a("a"),lCo=o("XLMWithLMHeadModel"),iCo=o(" (XLM model)"),dCo=l(),Hu=a("li"),Ide=a("strong"),cCo=o("xlm-roberta"),fCo=o(" \u2014 "),Lj=a("a"),mCo=o("XLMRobertaForMaskedLM"),gCo=o(" (XLM-RoBERTa model)"),hCo=l(),Uu=a("li"),Nde=a("strong"),pCo=o("xlm-roberta-xl"),_Co=o(" \u2014 "),xj=a("a"),uCo=o("XLMRobertaXLForMaskedLM"),bCo=o(" (XLM-RoBERTa-XL model)"),vCo=l(),Ju=a("li"),qde=a("strong"),FCo=o("xlnet"),TCo=o(" \u2014 "),$j=a("a"),MCo=o("XLNetLMHeadModel"),ECo=o(" (XLNet model)"),CCo=l(),Yu=a("p"),wCo=o("The model is set in evaluation mode by default using "),jde=a("code"),ACo=o("model.eval()"),yCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dde=a("code"),LCo=o("model.train()"),xCo=l(),F(Ku.$$.fragment),oje=l(),Si=a("h2"),Zu=a("a"),Gde=a("span"),F(vy.$$.fragment),$Co=l(),Ode=a("span"),kCo=o("AutoModelForCausalLM"),rje=l(),$o=a("div"),F(Fy.$$.fragment),SCo=l(),Ri=a("p"),RCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kj=a("a"),PCo=o("from_pretrained()"),BCo=o(" class method or the "),Sj=a("a"),ICo=o("from_config()"),NCo=o(` class
method.`),qCo=l(),Ty=a("p"),jCo=o("This class cannot be instantiated directly using "),Vde=a("code"),DCo=o("__init__()"),GCo=o(" (throws an error)."),OCo=l(),st=a("div"),F(My.$$.fragment),VCo=l(),Xde=a("p"),XCo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zCo=l(),Pi=a("p"),WCo=o(`Note:
Loading a model from its configuration file does `),zde=a("strong"),QCo=o("not"),HCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rj=a("a"),UCo=o("from_pretrained()"),JCo=o(" to load the model weights."),YCo=l(),F(e1.$$.fragment),KCo=l(),Ke=a("div"),F(Ey.$$.fragment),ZCo=l(),Wde=a("p"),e0o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),o0o=l(),ka=a("p"),r0o=o("The model class to instantiate is selected based on the "),Qde=a("code"),t0o=o("model_type"),a0o=o(` property of the config object (either
passed as an argument or loaded from `),Hde=a("code"),n0o=o("pretrained_model_name_or_path"),s0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ude=a("code"),l0o=o("pretrained_model_name_or_path"),i0o=o(":"),d0o=l(),z=a("ul"),o1=a("li"),Jde=a("strong"),c0o=o("bart"),f0o=o(" \u2014 "),Pj=a("a"),m0o=o("BartForCausalLM"),g0o=o(" (BART model)"),h0o=l(),r1=a("li"),Yde=a("strong"),p0o=o("bert"),_0o=o(" \u2014 "),Bj=a("a"),u0o=o("BertLMHeadModel"),b0o=o(" (BERT model)"),v0o=l(),t1=a("li"),Kde=a("strong"),F0o=o("bert-generation"),T0o=o(" \u2014 "),Ij=a("a"),M0o=o("BertGenerationDecoder"),E0o=o(" (Bert Generation model)"),C0o=l(),a1=a("li"),Zde=a("strong"),w0o=o("big_bird"),A0o=o(" \u2014 "),Nj=a("a"),y0o=o("BigBirdForCausalLM"),L0o=o(" (BigBird model)"),x0o=l(),n1=a("li"),ece=a("strong"),$0o=o("bigbird_pegasus"),k0o=o(" \u2014 "),qj=a("a"),S0o=o("BigBirdPegasusForCausalLM"),R0o=o(" (BigBirdPegasus model)"),P0o=l(),s1=a("li"),oce=a("strong"),B0o=o("blenderbot"),I0o=o(" \u2014 "),jj=a("a"),N0o=o("BlenderbotForCausalLM"),q0o=o(" (Blenderbot model)"),j0o=l(),l1=a("li"),rce=a("strong"),D0o=o("blenderbot-small"),G0o=o(" \u2014 "),Dj=a("a"),O0o=o("BlenderbotSmallForCausalLM"),V0o=o(" (BlenderbotSmall model)"),X0o=l(),i1=a("li"),tce=a("strong"),z0o=o("camembert"),W0o=o(" \u2014 "),Gj=a("a"),Q0o=o("CamembertForCausalLM"),H0o=o(" (CamemBERT model)"),U0o=l(),d1=a("li"),ace=a("strong"),J0o=o("ctrl"),Y0o=o(" \u2014 "),Oj=a("a"),K0o=o("CTRLLMHeadModel"),Z0o=o(" (CTRL model)"),ewo=l(),c1=a("li"),nce=a("strong"),owo=o("data2vec-text"),rwo=o(" \u2014 "),Vj=a("a"),two=o("Data2VecTextForCausalLM"),awo=o(" (Data2VecText model)"),nwo=l(),f1=a("li"),sce=a("strong"),swo=o("electra"),lwo=o(" \u2014 "),Xj=a("a"),iwo=o("ElectraForCausalLM"),dwo=o(" (ELECTRA model)"),cwo=l(),m1=a("li"),lce=a("strong"),fwo=o("gpt2"),mwo=o(" \u2014 "),zj=a("a"),gwo=o("GPT2LMHeadModel"),hwo=o(" (OpenAI GPT-2 model)"),pwo=l(),g1=a("li"),ice=a("strong"),_wo=o("gpt_neo"),uwo=o(" \u2014 "),Wj=a("a"),bwo=o("GPTNeoForCausalLM"),vwo=o(" (GPT Neo model)"),Fwo=l(),h1=a("li"),dce=a("strong"),Two=o("gpt_neox"),Mwo=o(" \u2014 "),Qj=a("a"),Ewo=o("GPTNeoXForCausalLM"),Cwo=o(" (GPT NeoX model)"),wwo=l(),p1=a("li"),cce=a("strong"),Awo=o("gptj"),ywo=o(" \u2014 "),Hj=a("a"),Lwo=o("GPTJForCausalLM"),xwo=o(" (GPT-J model)"),$wo=l(),_1=a("li"),fce=a("strong"),kwo=o("marian"),Swo=o(" \u2014 "),Uj=a("a"),Rwo=o("MarianForCausalLM"),Pwo=o(" (Marian model)"),Bwo=l(),u1=a("li"),mce=a("strong"),Iwo=o("mbart"),Nwo=o(" \u2014 "),Jj=a("a"),qwo=o("MBartForCausalLM"),jwo=o(" (mBART model)"),Dwo=l(),b1=a("li"),gce=a("strong"),Gwo=o("megatron-bert"),Owo=o(" \u2014 "),Yj=a("a"),Vwo=o("MegatronBertForCausalLM"),Xwo=o(" (MegatronBert model)"),zwo=l(),v1=a("li"),hce=a("strong"),Wwo=o("openai-gpt"),Qwo=o(" \u2014 "),Kj=a("a"),Hwo=o("OpenAIGPTLMHeadModel"),Uwo=o(" (OpenAI GPT model)"),Jwo=l(),F1=a("li"),pce=a("strong"),Ywo=o("opt"),Kwo=o(" \u2014 "),Zj=a("a"),Zwo=o("OPTForCausalLM"),e6o=o(" (OPT model)"),o6o=l(),T1=a("li"),_ce=a("strong"),r6o=o("pegasus"),t6o=o(" \u2014 "),eD=a("a"),a6o=o("PegasusForCausalLM"),n6o=o(" (Pegasus model)"),s6o=l(),M1=a("li"),uce=a("strong"),l6o=o("plbart"),i6o=o(" \u2014 "),oD=a("a"),d6o=o("PLBartForCausalLM"),c6o=o(" (PLBart model)"),f6o=l(),E1=a("li"),bce=a("strong"),m6o=o("prophetnet"),g6o=o(" \u2014 "),rD=a("a"),h6o=o("ProphetNetForCausalLM"),p6o=o(" (ProphetNet model)"),_6o=l(),C1=a("li"),vce=a("strong"),u6o=o("qdqbert"),b6o=o(" \u2014 "),tD=a("a"),v6o=o("QDQBertLMHeadModel"),F6o=o(" (QDQBert model)"),T6o=l(),w1=a("li"),Fce=a("strong"),M6o=o("reformer"),E6o=o(" \u2014 "),aD=a("a"),C6o=o("ReformerModelWithLMHead"),w6o=o(" (Reformer model)"),A6o=l(),A1=a("li"),Tce=a("strong"),y6o=o("rembert"),L6o=o(" \u2014 "),nD=a("a"),x6o=o("RemBertForCausalLM"),$6o=o(" (RemBERT model)"),k6o=l(),y1=a("li"),Mce=a("strong"),S6o=o("roberta"),R6o=o(" \u2014 "),sD=a("a"),P6o=o("RobertaForCausalLM"),B6o=o(" (RoBERTa model)"),I6o=l(),L1=a("li"),Ece=a("strong"),N6o=o("roformer"),q6o=o(" \u2014 "),lD=a("a"),j6o=o("RoFormerForCausalLM"),D6o=o(" (RoFormer model)"),G6o=l(),x1=a("li"),Cce=a("strong"),O6o=o("speech_to_text_2"),V6o=o(" \u2014 "),iD=a("a"),X6o=o("Speech2Text2ForCausalLM"),z6o=o(" (Speech2Text2 model)"),W6o=l(),$1=a("li"),wce=a("strong"),Q6o=o("transfo-xl"),H6o=o(" \u2014 "),dD=a("a"),U6o=o("TransfoXLLMHeadModel"),J6o=o(" (Transformer-XL model)"),Y6o=l(),k1=a("li"),Ace=a("strong"),K6o=o("trocr"),Z6o=o(" \u2014 "),cD=a("a"),eAo=o("TrOCRForCausalLM"),oAo=o(" (TrOCR model)"),rAo=l(),S1=a("li"),yce=a("strong"),tAo=o("xglm"),aAo=o(" \u2014 "),fD=a("a"),nAo=o("XGLMForCausalLM"),sAo=o(" (XGLM model)"),lAo=l(),R1=a("li"),Lce=a("strong"),iAo=o("xlm"),dAo=o(" \u2014 "),mD=a("a"),cAo=o("XLMWithLMHeadModel"),fAo=o(" (XLM model)"),mAo=l(),P1=a("li"),xce=a("strong"),gAo=o("xlm-prophetnet"),hAo=o(" \u2014 "),gD=a("a"),pAo=o("XLMProphetNetForCausalLM"),_Ao=o(" (XLMProphetNet model)"),uAo=l(),B1=a("li"),$ce=a("strong"),bAo=o("xlm-roberta"),vAo=o(" \u2014 "),hD=a("a"),FAo=o("XLMRobertaForCausalLM"),TAo=o(" (XLM-RoBERTa model)"),MAo=l(),I1=a("li"),kce=a("strong"),EAo=o("xlm-roberta-xl"),CAo=o(" \u2014 "),pD=a("a"),wAo=o("XLMRobertaXLForCausalLM"),AAo=o(" (XLM-RoBERTa-XL model)"),yAo=l(),N1=a("li"),Sce=a("strong"),LAo=o("xlnet"),xAo=o(" \u2014 "),_D=a("a"),$Ao=o("XLNetLMHeadModel"),kAo=o(" (XLNet model)"),SAo=l(),q1=a("p"),RAo=o("The model is set in evaluation mode by default using "),Rce=a("code"),PAo=o("model.eval()"),BAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pce=a("code"),IAo=o("model.train()"),NAo=l(),F(j1.$$.fragment),tje=l(),Bi=a("h2"),D1=a("a"),Bce=a("span"),F(Cy.$$.fragment),qAo=l(),Ice=a("span"),jAo=o("AutoModelForMaskedLM"),aje=l(),ko=a("div"),F(wy.$$.fragment),DAo=l(),Ii=a("p"),GAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uD=a("a"),OAo=o("from_pretrained()"),VAo=o(" class method or the "),bD=a("a"),XAo=o("from_config()"),zAo=o(` class
method.`),WAo=l(),Ay=a("p"),QAo=o("This class cannot be instantiated directly using "),Nce=a("code"),HAo=o("__init__()"),UAo=o(" (throws an error)."),JAo=l(),lt=a("div"),F(yy.$$.fragment),YAo=l(),qce=a("p"),KAo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ZAo=l(),Ni=a("p"),eyo=o(`Note:
Loading a model from its configuration file does `),jce=a("strong"),oyo=o("not"),ryo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vD=a("a"),tyo=o("from_pretrained()"),ayo=o(" to load the model weights."),nyo=l(),F(G1.$$.fragment),syo=l(),Ze=a("div"),F(Ly.$$.fragment),lyo=l(),Dce=a("p"),iyo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dyo=l(),Sa=a("p"),cyo=o("The model class to instantiate is selected based on the "),Gce=a("code"),fyo=o("model_type"),myo=o(` property of the config object (either
passed as an argument or loaded from `),Oce=a("code"),gyo=o("pretrained_model_name_or_path"),hyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=a("code"),pyo=o("pretrained_model_name_or_path"),_yo=o(":"),uyo=l(),W=a("ul"),O1=a("li"),Xce=a("strong"),byo=o("albert"),vyo=o(" \u2014 "),FD=a("a"),Fyo=o("AlbertForMaskedLM"),Tyo=o(" (ALBERT model)"),Myo=l(),V1=a("li"),zce=a("strong"),Eyo=o("bart"),Cyo=o(" \u2014 "),TD=a("a"),wyo=o("BartForConditionalGeneration"),Ayo=o(" (BART model)"),yyo=l(),X1=a("li"),Wce=a("strong"),Lyo=o("bert"),xyo=o(" \u2014 "),MD=a("a"),$yo=o("BertForMaskedLM"),kyo=o(" (BERT model)"),Syo=l(),z1=a("li"),Qce=a("strong"),Ryo=o("big_bird"),Pyo=o(" \u2014 "),ED=a("a"),Byo=o("BigBirdForMaskedLM"),Iyo=o(" (BigBird model)"),Nyo=l(),W1=a("li"),Hce=a("strong"),qyo=o("camembert"),jyo=o(" \u2014 "),CD=a("a"),Dyo=o("CamembertForMaskedLM"),Gyo=o(" (CamemBERT model)"),Oyo=l(),Q1=a("li"),Uce=a("strong"),Vyo=o("convbert"),Xyo=o(" \u2014 "),wD=a("a"),zyo=o("ConvBertForMaskedLM"),Wyo=o(" (ConvBERT model)"),Qyo=l(),H1=a("li"),Jce=a("strong"),Hyo=o("data2vec-text"),Uyo=o(" \u2014 "),AD=a("a"),Jyo=o("Data2VecTextForMaskedLM"),Yyo=o(" (Data2VecText model)"),Kyo=l(),U1=a("li"),Yce=a("strong"),Zyo=o("deberta"),eLo=o(" \u2014 "),yD=a("a"),oLo=o("DebertaForMaskedLM"),rLo=o(" (DeBERTa model)"),tLo=l(),J1=a("li"),Kce=a("strong"),aLo=o("deberta-v2"),nLo=o(" \u2014 "),LD=a("a"),sLo=o("DebertaV2ForMaskedLM"),lLo=o(" (DeBERTa-v2 model)"),iLo=l(),Y1=a("li"),Zce=a("strong"),dLo=o("distilbert"),cLo=o(" \u2014 "),xD=a("a"),fLo=o("DistilBertForMaskedLM"),mLo=o(" (DistilBERT model)"),gLo=l(),K1=a("li"),efe=a("strong"),hLo=o("electra"),pLo=o(" \u2014 "),$D=a("a"),_Lo=o("ElectraForMaskedLM"),uLo=o(" (ELECTRA model)"),bLo=l(),Z1=a("li"),ofe=a("strong"),vLo=o("flaubert"),FLo=o(" \u2014 "),kD=a("a"),TLo=o("FlaubertWithLMHeadModel"),MLo=o(" (FlauBERT model)"),ELo=l(),eb=a("li"),rfe=a("strong"),CLo=o("fnet"),wLo=o(" \u2014 "),SD=a("a"),ALo=o("FNetForMaskedLM"),yLo=o(" (FNet model)"),LLo=l(),ob=a("li"),tfe=a("strong"),xLo=o("funnel"),$Lo=o(" \u2014 "),RD=a("a"),kLo=o("FunnelForMaskedLM"),SLo=o(" (Funnel Transformer model)"),RLo=l(),rb=a("li"),afe=a("strong"),PLo=o("ibert"),BLo=o(" \u2014 "),PD=a("a"),ILo=o("IBertForMaskedLM"),NLo=o(" (I-BERT model)"),qLo=l(),tb=a("li"),nfe=a("strong"),jLo=o("layoutlm"),DLo=o(" \u2014 "),BD=a("a"),GLo=o("LayoutLMForMaskedLM"),OLo=o(" (LayoutLM model)"),VLo=l(),ab=a("li"),sfe=a("strong"),XLo=o("longformer"),zLo=o(" \u2014 "),ID=a("a"),WLo=o("LongformerForMaskedLM"),QLo=o(" (Longformer model)"),HLo=l(),nb=a("li"),lfe=a("strong"),ULo=o("luke"),JLo=o(" \u2014 "),ND=a("a"),YLo=o("LukeForMaskedLM"),KLo=o(" (LUKE model)"),ZLo=l(),sb=a("li"),ife=a("strong"),e8o=o("mbart"),o8o=o(" \u2014 "),qD=a("a"),r8o=o("MBartForConditionalGeneration"),t8o=o(" (mBART model)"),a8o=l(),lb=a("li"),dfe=a("strong"),n8o=o("megatron-bert"),s8o=o(" \u2014 "),jD=a("a"),l8o=o("MegatronBertForMaskedLM"),i8o=o(" (MegatronBert model)"),d8o=l(),ib=a("li"),cfe=a("strong"),c8o=o("mobilebert"),f8o=o(" \u2014 "),DD=a("a"),m8o=o("MobileBertForMaskedLM"),g8o=o(" (MobileBERT model)"),h8o=l(),db=a("li"),ffe=a("strong"),p8o=o("mpnet"),_8o=o(" \u2014 "),GD=a("a"),u8o=o("MPNetForMaskedLM"),b8o=o(" (MPNet model)"),v8o=l(),cb=a("li"),mfe=a("strong"),F8o=o("nystromformer"),T8o=o(" \u2014 "),OD=a("a"),M8o=o("NystromformerForMaskedLM"),E8o=o(" (Nystromformer model)"),C8o=l(),fb=a("li"),gfe=a("strong"),w8o=o("perceiver"),A8o=o(" \u2014 "),VD=a("a"),y8o=o("PerceiverForMaskedLM"),L8o=o(" (Perceiver model)"),x8o=l(),mb=a("li"),hfe=a("strong"),$8o=o("qdqbert"),k8o=o(" \u2014 "),XD=a("a"),S8o=o("QDQBertForMaskedLM"),R8o=o(" (QDQBert model)"),P8o=l(),gb=a("li"),pfe=a("strong"),B8o=o("reformer"),I8o=o(" \u2014 "),zD=a("a"),N8o=o("ReformerForMaskedLM"),q8o=o(" (Reformer model)"),j8o=l(),hb=a("li"),_fe=a("strong"),D8o=o("rembert"),G8o=o(" \u2014 "),WD=a("a"),O8o=o("RemBertForMaskedLM"),V8o=o(" (RemBERT model)"),X8o=l(),pb=a("li"),ufe=a("strong"),z8o=o("roberta"),W8o=o(" \u2014 "),QD=a("a"),Q8o=o("RobertaForMaskedLM"),H8o=o(" (RoBERTa model)"),U8o=l(),_b=a("li"),bfe=a("strong"),J8o=o("roformer"),Y8o=o(" \u2014 "),HD=a("a"),K8o=o("RoFormerForMaskedLM"),Z8o=o(" (RoFormer model)"),e9o=l(),ub=a("li"),vfe=a("strong"),o9o=o("squeezebert"),r9o=o(" \u2014 "),UD=a("a"),t9o=o("SqueezeBertForMaskedLM"),a9o=o(" (SqueezeBERT model)"),n9o=l(),bb=a("li"),Ffe=a("strong"),s9o=o("tapas"),l9o=o(" \u2014 "),JD=a("a"),i9o=o("TapasForMaskedLM"),d9o=o(" (TAPAS model)"),c9o=l(),vb=a("li"),Tfe=a("strong"),f9o=o("wav2vec2"),m9o=o(" \u2014 "),Mfe=a("code"),g9o=o("Wav2Vec2ForMaskedLM"),h9o=o(" (Wav2Vec2 model)"),p9o=l(),Fb=a("li"),Efe=a("strong"),_9o=o("xlm"),u9o=o(" \u2014 "),YD=a("a"),b9o=o("XLMWithLMHeadModel"),v9o=o(" (XLM model)"),F9o=l(),Tb=a("li"),Cfe=a("strong"),T9o=o("xlm-roberta"),M9o=o(" \u2014 "),KD=a("a"),E9o=o("XLMRobertaForMaskedLM"),C9o=o(" (XLM-RoBERTa model)"),w9o=l(),Mb=a("li"),wfe=a("strong"),A9o=o("xlm-roberta-xl"),y9o=o(" \u2014 "),ZD=a("a"),L9o=o("XLMRobertaXLForMaskedLM"),x9o=o(" (XLM-RoBERTa-XL model)"),$9o=l(),Eb=a("li"),Afe=a("strong"),k9o=o("yoso"),S9o=o(" \u2014 "),eG=a("a"),R9o=o("YosoForMaskedLM"),P9o=o(" (YOSO model)"),B9o=l(),Cb=a("p"),I9o=o("The model is set in evaluation mode by default using "),yfe=a("code"),N9o=o("model.eval()"),q9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lfe=a("code"),j9o=o("model.train()"),D9o=l(),F(wb.$$.fragment),nje=l(),qi=a("h2"),Ab=a("a"),xfe=a("span"),F(xy.$$.fragment),G9o=l(),$fe=a("span"),O9o=o("AutoModelForSeq2SeqLM"),sje=l(),So=a("div"),F($y.$$.fragment),V9o=l(),ji=a("p"),X9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oG=a("a"),z9o=o("from_pretrained()"),W9o=o(" class method or the "),rG=a("a"),Q9o=o("from_config()"),H9o=o(` class
method.`),U9o=l(),ky=a("p"),J9o=o("This class cannot be instantiated directly using "),kfe=a("code"),Y9o=o("__init__()"),K9o=o(" (throws an error)."),Z9o=l(),it=a("div"),F(Sy.$$.fragment),exo=l(),Sfe=a("p"),oxo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rxo=l(),Di=a("p"),txo=o(`Note:
Loading a model from its configuration file does `),Rfe=a("strong"),axo=o("not"),nxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=a("a"),sxo=o("from_pretrained()"),lxo=o(" to load the model weights."),ixo=l(),F(yb.$$.fragment),dxo=l(),eo=a("div"),F(Ry.$$.fragment),cxo=l(),Pfe=a("p"),fxo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mxo=l(),Ra=a("p"),gxo=o("The model class to instantiate is selected based on the "),Bfe=a("code"),hxo=o("model_type"),pxo=o(` property of the config object (either
passed as an argument or loaded from `),Ife=a("code"),_xo=o("pretrained_model_name_or_path"),uxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nfe=a("code"),bxo=o("pretrained_model_name_or_path"),vxo=o(":"),Fxo=l(),_e=a("ul"),Lb=a("li"),qfe=a("strong"),Txo=o("bart"),Mxo=o(" \u2014 "),aG=a("a"),Exo=o("BartForConditionalGeneration"),Cxo=o(" (BART model)"),wxo=l(),xb=a("li"),jfe=a("strong"),Axo=o("bigbird_pegasus"),yxo=o(" \u2014 "),nG=a("a"),Lxo=o("BigBirdPegasusForConditionalGeneration"),xxo=o(" (BigBirdPegasus model)"),$xo=l(),$b=a("li"),Dfe=a("strong"),kxo=o("blenderbot"),Sxo=o(" \u2014 "),sG=a("a"),Rxo=o("BlenderbotForConditionalGeneration"),Pxo=o(" (Blenderbot model)"),Bxo=l(),kb=a("li"),Gfe=a("strong"),Ixo=o("blenderbot-small"),Nxo=o(" \u2014 "),lG=a("a"),qxo=o("BlenderbotSmallForConditionalGeneration"),jxo=o(" (BlenderbotSmall model)"),Dxo=l(),Sb=a("li"),Ofe=a("strong"),Gxo=o("encoder-decoder"),Oxo=o(" \u2014 "),iG=a("a"),Vxo=o("EncoderDecoderModel"),Xxo=o(" (Encoder decoder model)"),zxo=l(),Rb=a("li"),Vfe=a("strong"),Wxo=o("fsmt"),Qxo=o(" \u2014 "),dG=a("a"),Hxo=o("FSMTForConditionalGeneration"),Uxo=o(" (FairSeq Machine-Translation model)"),Jxo=l(),Pb=a("li"),Xfe=a("strong"),Yxo=o("led"),Kxo=o(" \u2014 "),cG=a("a"),Zxo=o("LEDForConditionalGeneration"),e$o=o(" (LED model)"),o$o=l(),Bb=a("li"),zfe=a("strong"),r$o=o("m2m_100"),t$o=o(" \u2014 "),fG=a("a"),a$o=o("M2M100ForConditionalGeneration"),n$o=o(" (M2M100 model)"),s$o=l(),Ib=a("li"),Wfe=a("strong"),l$o=o("marian"),i$o=o(" \u2014 "),mG=a("a"),d$o=o("MarianMTModel"),c$o=o(" (Marian model)"),f$o=l(),Nb=a("li"),Qfe=a("strong"),m$o=o("mbart"),g$o=o(" \u2014 "),gG=a("a"),h$o=o("MBartForConditionalGeneration"),p$o=o(" (mBART model)"),_$o=l(),qb=a("li"),Hfe=a("strong"),u$o=o("mt5"),b$o=o(" \u2014 "),hG=a("a"),v$o=o("MT5ForConditionalGeneration"),F$o=o(" (mT5 model)"),T$o=l(),jb=a("li"),Ufe=a("strong"),M$o=o("pegasus"),E$o=o(" \u2014 "),pG=a("a"),C$o=o("PegasusForConditionalGeneration"),w$o=o(" (Pegasus model)"),A$o=l(),Db=a("li"),Jfe=a("strong"),y$o=o("plbart"),L$o=o(" \u2014 "),_G=a("a"),x$o=o("PLBartForConditionalGeneration"),$$o=o(" (PLBart model)"),k$o=l(),Gb=a("li"),Yfe=a("strong"),S$o=o("prophetnet"),R$o=o(" \u2014 "),uG=a("a"),P$o=o("ProphetNetForConditionalGeneration"),B$o=o(" (ProphetNet model)"),I$o=l(),Ob=a("li"),Kfe=a("strong"),N$o=o("t5"),q$o=o(" \u2014 "),bG=a("a"),j$o=o("T5ForConditionalGeneration"),D$o=o(" (T5 model)"),G$o=l(),Vb=a("li"),Zfe=a("strong"),O$o=o("xlm-prophetnet"),V$o=o(" \u2014 "),vG=a("a"),X$o=o("XLMProphetNetForConditionalGeneration"),z$o=o(" (XLMProphetNet model)"),W$o=l(),Xb=a("p"),Q$o=o("The model is set in evaluation mode by default using "),eme=a("code"),H$o=o("model.eval()"),U$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=a("code"),J$o=o("model.train()"),Y$o=l(),F(zb.$$.fragment),lje=l(),Gi=a("h2"),Wb=a("a"),rme=a("span"),F(Py.$$.fragment),K$o=l(),tme=a("span"),Z$o=o("AutoModelForSequenceClassification"),ije=l(),Ro=a("div"),F(By.$$.fragment),eko=l(),Oi=a("p"),oko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),FG=a("a"),rko=o("from_pretrained()"),tko=o(" class method or the "),TG=a("a"),ako=o("from_config()"),nko=o(` class
method.`),sko=l(),Iy=a("p"),lko=o("This class cannot be instantiated directly using "),ame=a("code"),iko=o("__init__()"),dko=o(" (throws an error)."),cko=l(),dt=a("div"),F(Ny.$$.fragment),fko=l(),nme=a("p"),mko=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gko=l(),Vi=a("p"),hko=o(`Note:
Loading a model from its configuration file does `),sme=a("strong"),pko=o("not"),_ko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=a("a"),uko=o("from_pretrained()"),bko=o(" to load the model weights."),vko=l(),F(Qb.$$.fragment),Fko=l(),oo=a("div"),F(qy.$$.fragment),Tko=l(),lme=a("p"),Mko=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Eko=l(),Pa=a("p"),Cko=o("The model class to instantiate is selected based on the "),ime=a("code"),wko=o("model_type"),Ako=o(` property of the config object (either
passed as an argument or loaded from `),dme=a("code"),yko=o("pretrained_model_name_or_path"),Lko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cme=a("code"),xko=o("pretrained_model_name_or_path"),$ko=o(":"),kko=l(),N=a("ul"),Hb=a("li"),fme=a("strong"),Sko=o("albert"),Rko=o(" \u2014 "),EG=a("a"),Pko=o("AlbertForSequenceClassification"),Bko=o(" (ALBERT model)"),Iko=l(),Ub=a("li"),mme=a("strong"),Nko=o("bart"),qko=o(" \u2014 "),CG=a("a"),jko=o("BartForSequenceClassification"),Dko=o(" (BART model)"),Gko=l(),Jb=a("li"),gme=a("strong"),Oko=o("bert"),Vko=o(" \u2014 "),wG=a("a"),Xko=o("BertForSequenceClassification"),zko=o(" (BERT model)"),Wko=l(),Yb=a("li"),hme=a("strong"),Qko=o("big_bird"),Hko=o(" \u2014 "),AG=a("a"),Uko=o("BigBirdForSequenceClassification"),Jko=o(" (BigBird model)"),Yko=l(),Kb=a("li"),pme=a("strong"),Kko=o("bigbird_pegasus"),Zko=o(" \u2014 "),yG=a("a"),eSo=o("BigBirdPegasusForSequenceClassification"),oSo=o(" (BigBirdPegasus model)"),rSo=l(),Zb=a("li"),_me=a("strong"),tSo=o("camembert"),aSo=o(" \u2014 "),LG=a("a"),nSo=o("CamembertForSequenceClassification"),sSo=o(" (CamemBERT model)"),lSo=l(),e2=a("li"),ume=a("strong"),iSo=o("canine"),dSo=o(" \u2014 "),xG=a("a"),cSo=o("CanineForSequenceClassification"),fSo=o(" (Canine model)"),mSo=l(),o2=a("li"),bme=a("strong"),gSo=o("convbert"),hSo=o(" \u2014 "),$G=a("a"),pSo=o("ConvBertForSequenceClassification"),_So=o(" (ConvBERT model)"),uSo=l(),r2=a("li"),vme=a("strong"),bSo=o("ctrl"),vSo=o(" \u2014 "),kG=a("a"),FSo=o("CTRLForSequenceClassification"),TSo=o(" (CTRL model)"),MSo=l(),t2=a("li"),Fme=a("strong"),ESo=o("data2vec-text"),CSo=o(" \u2014 "),SG=a("a"),wSo=o("Data2VecTextForSequenceClassification"),ASo=o(" (Data2VecText model)"),ySo=l(),a2=a("li"),Tme=a("strong"),LSo=o("deberta"),xSo=o(" \u2014 "),RG=a("a"),$So=o("DebertaForSequenceClassification"),kSo=o(" (DeBERTa model)"),SSo=l(),n2=a("li"),Mme=a("strong"),RSo=o("deberta-v2"),PSo=o(" \u2014 "),PG=a("a"),BSo=o("DebertaV2ForSequenceClassification"),ISo=o(" (DeBERTa-v2 model)"),NSo=l(),s2=a("li"),Eme=a("strong"),qSo=o("distilbert"),jSo=o(" \u2014 "),BG=a("a"),DSo=o("DistilBertForSequenceClassification"),GSo=o(" (DistilBERT model)"),OSo=l(),l2=a("li"),Cme=a("strong"),VSo=o("electra"),XSo=o(" \u2014 "),IG=a("a"),zSo=o("ElectraForSequenceClassification"),WSo=o(" (ELECTRA model)"),QSo=l(),i2=a("li"),wme=a("strong"),HSo=o("flaubert"),USo=o(" \u2014 "),NG=a("a"),JSo=o("FlaubertForSequenceClassification"),YSo=o(" (FlauBERT model)"),KSo=l(),d2=a("li"),Ame=a("strong"),ZSo=o("fnet"),eRo=o(" \u2014 "),qG=a("a"),oRo=o("FNetForSequenceClassification"),rRo=o(" (FNet model)"),tRo=l(),c2=a("li"),yme=a("strong"),aRo=o("funnel"),nRo=o(" \u2014 "),jG=a("a"),sRo=o("FunnelForSequenceClassification"),lRo=o(" (Funnel Transformer model)"),iRo=l(),f2=a("li"),Lme=a("strong"),dRo=o("gpt2"),cRo=o(" \u2014 "),DG=a("a"),fRo=o("GPT2ForSequenceClassification"),mRo=o(" (OpenAI GPT-2 model)"),gRo=l(),m2=a("li"),xme=a("strong"),hRo=o("gpt_neo"),pRo=o(" \u2014 "),GG=a("a"),_Ro=o("GPTNeoForSequenceClassification"),uRo=o(" (GPT Neo model)"),bRo=l(),g2=a("li"),$me=a("strong"),vRo=o("gptj"),FRo=o(" \u2014 "),OG=a("a"),TRo=o("GPTJForSequenceClassification"),MRo=o(" (GPT-J model)"),ERo=l(),h2=a("li"),kme=a("strong"),CRo=o("ibert"),wRo=o(" \u2014 "),VG=a("a"),ARo=o("IBertForSequenceClassification"),yRo=o(" (I-BERT model)"),LRo=l(),p2=a("li"),Sme=a("strong"),xRo=o("layoutlm"),$Ro=o(" \u2014 "),XG=a("a"),kRo=o("LayoutLMForSequenceClassification"),SRo=o(" (LayoutLM model)"),RRo=l(),_2=a("li"),Rme=a("strong"),PRo=o("layoutlmv2"),BRo=o(" \u2014 "),zG=a("a"),IRo=o("LayoutLMv2ForSequenceClassification"),NRo=o(" (LayoutLMv2 model)"),qRo=l(),u2=a("li"),Pme=a("strong"),jRo=o("layoutlmv3"),DRo=o(" \u2014 "),WG=a("a"),GRo=o("LayoutLMv3ForSequenceClassification"),ORo=o(" (LayoutLMv3 model)"),VRo=l(),b2=a("li"),Bme=a("strong"),XRo=o("led"),zRo=o(" \u2014 "),QG=a("a"),WRo=o("LEDForSequenceClassification"),QRo=o(" (LED model)"),HRo=l(),v2=a("li"),Ime=a("strong"),URo=o("longformer"),JRo=o(" \u2014 "),HG=a("a"),YRo=o("LongformerForSequenceClassification"),KRo=o(" (Longformer model)"),ZRo=l(),F2=a("li"),Nme=a("strong"),ePo=o("mbart"),oPo=o(" \u2014 "),UG=a("a"),rPo=o("MBartForSequenceClassification"),tPo=o(" (mBART model)"),aPo=l(),T2=a("li"),qme=a("strong"),nPo=o("megatron-bert"),sPo=o(" \u2014 "),JG=a("a"),lPo=o("MegatronBertForSequenceClassification"),iPo=o(" (MegatronBert model)"),dPo=l(),M2=a("li"),jme=a("strong"),cPo=o("mobilebert"),fPo=o(" \u2014 "),YG=a("a"),mPo=o("MobileBertForSequenceClassification"),gPo=o(" (MobileBERT model)"),hPo=l(),E2=a("li"),Dme=a("strong"),pPo=o("mpnet"),_Po=o(" \u2014 "),KG=a("a"),uPo=o("MPNetForSequenceClassification"),bPo=o(" (MPNet model)"),vPo=l(),C2=a("li"),Gme=a("strong"),FPo=o("nystromformer"),TPo=o(" \u2014 "),ZG=a("a"),MPo=o("NystromformerForSequenceClassification"),EPo=o(" (Nystromformer model)"),CPo=l(),w2=a("li"),Ome=a("strong"),wPo=o("openai-gpt"),APo=o(" \u2014 "),eO=a("a"),yPo=o("OpenAIGPTForSequenceClassification"),LPo=o(" (OpenAI GPT model)"),xPo=l(),A2=a("li"),Vme=a("strong"),$Po=o("perceiver"),kPo=o(" \u2014 "),oO=a("a"),SPo=o("PerceiverForSequenceClassification"),RPo=o(" (Perceiver model)"),PPo=l(),y2=a("li"),Xme=a("strong"),BPo=o("plbart"),IPo=o(" \u2014 "),rO=a("a"),NPo=o("PLBartForSequenceClassification"),qPo=o(" (PLBart model)"),jPo=l(),L2=a("li"),zme=a("strong"),DPo=o("qdqbert"),GPo=o(" \u2014 "),tO=a("a"),OPo=o("QDQBertForSequenceClassification"),VPo=o(" (QDQBert model)"),XPo=l(),x2=a("li"),Wme=a("strong"),zPo=o("reformer"),WPo=o(" \u2014 "),aO=a("a"),QPo=o("ReformerForSequenceClassification"),HPo=o(" (Reformer model)"),UPo=l(),$2=a("li"),Qme=a("strong"),JPo=o("rembert"),YPo=o(" \u2014 "),nO=a("a"),KPo=o("RemBertForSequenceClassification"),ZPo=o(" (RemBERT model)"),eBo=l(),k2=a("li"),Hme=a("strong"),oBo=o("roberta"),rBo=o(" \u2014 "),sO=a("a"),tBo=o("RobertaForSequenceClassification"),aBo=o(" (RoBERTa model)"),nBo=l(),S2=a("li"),Ume=a("strong"),sBo=o("roformer"),lBo=o(" \u2014 "),lO=a("a"),iBo=o("RoFormerForSequenceClassification"),dBo=o(" (RoFormer model)"),cBo=l(),R2=a("li"),Jme=a("strong"),fBo=o("squeezebert"),mBo=o(" \u2014 "),iO=a("a"),gBo=o("SqueezeBertForSequenceClassification"),hBo=o(" (SqueezeBERT model)"),pBo=l(),P2=a("li"),Yme=a("strong"),_Bo=o("tapas"),uBo=o(" \u2014 "),dO=a("a"),bBo=o("TapasForSequenceClassification"),vBo=o(" (TAPAS model)"),FBo=l(),B2=a("li"),Kme=a("strong"),TBo=o("transfo-xl"),MBo=o(" \u2014 "),cO=a("a"),EBo=o("TransfoXLForSequenceClassification"),CBo=o(" (Transformer-XL model)"),wBo=l(),I2=a("li"),Zme=a("strong"),ABo=o("xlm"),yBo=o(" \u2014 "),fO=a("a"),LBo=o("XLMForSequenceClassification"),xBo=o(" (XLM model)"),$Bo=l(),N2=a("li"),ege=a("strong"),kBo=o("xlm-roberta"),SBo=o(" \u2014 "),mO=a("a"),RBo=o("XLMRobertaForSequenceClassification"),PBo=o(" (XLM-RoBERTa model)"),BBo=l(),q2=a("li"),oge=a("strong"),IBo=o("xlm-roberta-xl"),NBo=o(" \u2014 "),gO=a("a"),qBo=o("XLMRobertaXLForSequenceClassification"),jBo=o(" (XLM-RoBERTa-XL model)"),DBo=l(),j2=a("li"),rge=a("strong"),GBo=o("xlnet"),OBo=o(" \u2014 "),hO=a("a"),VBo=o("XLNetForSequenceClassification"),XBo=o(" (XLNet model)"),zBo=l(),D2=a("li"),tge=a("strong"),WBo=o("yoso"),QBo=o(" \u2014 "),pO=a("a"),HBo=o("YosoForSequenceClassification"),UBo=o(" (YOSO model)"),JBo=l(),G2=a("p"),YBo=o("The model is set in evaluation mode by default using "),age=a("code"),KBo=o("model.eval()"),ZBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=a("code"),eIo=o("model.train()"),oIo=l(),F(O2.$$.fragment),dje=l(),Xi=a("h2"),V2=a("a"),sge=a("span"),F(jy.$$.fragment),rIo=l(),lge=a("span"),tIo=o("AutoModelForMultipleChoice"),cje=l(),Po=a("div"),F(Dy.$$.fragment),aIo=l(),zi=a("p"),nIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_O=a("a"),sIo=o("from_pretrained()"),lIo=o(" class method or the "),uO=a("a"),iIo=o("from_config()"),dIo=o(` class
method.`),cIo=l(),Gy=a("p"),fIo=o("This class cannot be instantiated directly using "),ige=a("code"),mIo=o("__init__()"),gIo=o(" (throws an error)."),hIo=l(),ct=a("div"),F(Oy.$$.fragment),pIo=l(),dge=a("p"),_Io=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uIo=l(),Wi=a("p"),bIo=o(`Note:
Loading a model from its configuration file does `),cge=a("strong"),vIo=o("not"),FIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=a("a"),TIo=o("from_pretrained()"),MIo=o(" to load the model weights."),EIo=l(),F(X2.$$.fragment),CIo=l(),ro=a("div"),F(Vy.$$.fragment),wIo=l(),fge=a("p"),AIo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yIo=l(),Ba=a("p"),LIo=o("The model class to instantiate is selected based on the "),mge=a("code"),xIo=o("model_type"),$Io=o(` property of the config object (either
passed as an argument or loaded from `),gge=a("code"),kIo=o("pretrained_model_name_or_path"),SIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=a("code"),RIo=o("pretrained_model_name_or_path"),PIo=o(":"),BIo=l(),K=a("ul"),z2=a("li"),pge=a("strong"),IIo=o("albert"),NIo=o(" \u2014 "),vO=a("a"),qIo=o("AlbertForMultipleChoice"),jIo=o(" (ALBERT model)"),DIo=l(),W2=a("li"),_ge=a("strong"),GIo=o("bert"),OIo=o(" \u2014 "),FO=a("a"),VIo=o("BertForMultipleChoice"),XIo=o(" (BERT model)"),zIo=l(),Q2=a("li"),uge=a("strong"),WIo=o("big_bird"),QIo=o(" \u2014 "),TO=a("a"),HIo=o("BigBirdForMultipleChoice"),UIo=o(" (BigBird model)"),JIo=l(),H2=a("li"),bge=a("strong"),YIo=o("camembert"),KIo=o(" \u2014 "),MO=a("a"),ZIo=o("CamembertForMultipleChoice"),eNo=o(" (CamemBERT model)"),oNo=l(),U2=a("li"),vge=a("strong"),rNo=o("canine"),tNo=o(" \u2014 "),EO=a("a"),aNo=o("CanineForMultipleChoice"),nNo=o(" (Canine model)"),sNo=l(),J2=a("li"),Fge=a("strong"),lNo=o("convbert"),iNo=o(" \u2014 "),CO=a("a"),dNo=o("ConvBertForMultipleChoice"),cNo=o(" (ConvBERT model)"),fNo=l(),Y2=a("li"),Tge=a("strong"),mNo=o("data2vec-text"),gNo=o(" \u2014 "),wO=a("a"),hNo=o("Data2VecTextForMultipleChoice"),pNo=o(" (Data2VecText model)"),_No=l(),K2=a("li"),Mge=a("strong"),uNo=o("deberta-v2"),bNo=o(" \u2014 "),AO=a("a"),vNo=o("DebertaV2ForMultipleChoice"),FNo=o(" (DeBERTa-v2 model)"),TNo=l(),Z2=a("li"),Ege=a("strong"),MNo=o("distilbert"),ENo=o(" \u2014 "),yO=a("a"),CNo=o("DistilBertForMultipleChoice"),wNo=o(" (DistilBERT model)"),ANo=l(),e4=a("li"),Cge=a("strong"),yNo=o("electra"),LNo=o(" \u2014 "),LO=a("a"),xNo=o("ElectraForMultipleChoice"),$No=o(" (ELECTRA model)"),kNo=l(),o4=a("li"),wge=a("strong"),SNo=o("flaubert"),RNo=o(" \u2014 "),xO=a("a"),PNo=o("FlaubertForMultipleChoice"),BNo=o(" (FlauBERT model)"),INo=l(),r4=a("li"),Age=a("strong"),NNo=o("fnet"),qNo=o(" \u2014 "),$O=a("a"),jNo=o("FNetForMultipleChoice"),DNo=o(" (FNet model)"),GNo=l(),t4=a("li"),yge=a("strong"),ONo=o("funnel"),VNo=o(" \u2014 "),kO=a("a"),XNo=o("FunnelForMultipleChoice"),zNo=o(" (Funnel Transformer model)"),WNo=l(),a4=a("li"),Lge=a("strong"),QNo=o("ibert"),HNo=o(" \u2014 "),SO=a("a"),UNo=o("IBertForMultipleChoice"),JNo=o(" (I-BERT model)"),YNo=l(),n4=a("li"),xge=a("strong"),KNo=o("longformer"),ZNo=o(" \u2014 "),RO=a("a"),eqo=o("LongformerForMultipleChoice"),oqo=o(" (Longformer model)"),rqo=l(),s4=a("li"),$ge=a("strong"),tqo=o("megatron-bert"),aqo=o(" \u2014 "),PO=a("a"),nqo=o("MegatronBertForMultipleChoice"),sqo=o(" (MegatronBert model)"),lqo=l(),l4=a("li"),kge=a("strong"),iqo=o("mobilebert"),dqo=o(" \u2014 "),BO=a("a"),cqo=o("MobileBertForMultipleChoice"),fqo=o(" (MobileBERT model)"),mqo=l(),i4=a("li"),Sge=a("strong"),gqo=o("mpnet"),hqo=o(" \u2014 "),IO=a("a"),pqo=o("MPNetForMultipleChoice"),_qo=o(" (MPNet model)"),uqo=l(),d4=a("li"),Rge=a("strong"),bqo=o("nystromformer"),vqo=o(" \u2014 "),NO=a("a"),Fqo=o("NystromformerForMultipleChoice"),Tqo=o(" (Nystromformer model)"),Mqo=l(),c4=a("li"),Pge=a("strong"),Eqo=o("qdqbert"),Cqo=o(" \u2014 "),qO=a("a"),wqo=o("QDQBertForMultipleChoice"),Aqo=o(" (QDQBert model)"),yqo=l(),f4=a("li"),Bge=a("strong"),Lqo=o("rembert"),xqo=o(" \u2014 "),jO=a("a"),$qo=o("RemBertForMultipleChoice"),kqo=o(" (RemBERT model)"),Sqo=l(),m4=a("li"),Ige=a("strong"),Rqo=o("roberta"),Pqo=o(" \u2014 "),DO=a("a"),Bqo=o("RobertaForMultipleChoice"),Iqo=o(" (RoBERTa model)"),Nqo=l(),g4=a("li"),Nge=a("strong"),qqo=o("roformer"),jqo=o(" \u2014 "),GO=a("a"),Dqo=o("RoFormerForMultipleChoice"),Gqo=o(" (RoFormer model)"),Oqo=l(),h4=a("li"),qge=a("strong"),Vqo=o("squeezebert"),Xqo=o(" \u2014 "),OO=a("a"),zqo=o("SqueezeBertForMultipleChoice"),Wqo=o(" (SqueezeBERT model)"),Qqo=l(),p4=a("li"),jge=a("strong"),Hqo=o("xlm"),Uqo=o(" \u2014 "),VO=a("a"),Jqo=o("XLMForMultipleChoice"),Yqo=o(" (XLM model)"),Kqo=l(),_4=a("li"),Dge=a("strong"),Zqo=o("xlm-roberta"),ejo=o(" \u2014 "),XO=a("a"),ojo=o("XLMRobertaForMultipleChoice"),rjo=o(" (XLM-RoBERTa model)"),tjo=l(),u4=a("li"),Gge=a("strong"),ajo=o("xlm-roberta-xl"),njo=o(" \u2014 "),zO=a("a"),sjo=o("XLMRobertaXLForMultipleChoice"),ljo=o(" (XLM-RoBERTa-XL model)"),ijo=l(),b4=a("li"),Oge=a("strong"),djo=o("xlnet"),cjo=o(" \u2014 "),WO=a("a"),fjo=o("XLNetForMultipleChoice"),mjo=o(" (XLNet model)"),gjo=l(),v4=a("li"),Vge=a("strong"),hjo=o("yoso"),pjo=o(" \u2014 "),QO=a("a"),_jo=o("YosoForMultipleChoice"),ujo=o(" (YOSO model)"),bjo=l(),F4=a("p"),vjo=o("The model is set in evaluation mode by default using "),Xge=a("code"),Fjo=o("model.eval()"),Tjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=a("code"),Mjo=o("model.train()"),Ejo=l(),F(T4.$$.fragment),fje=l(),Qi=a("h2"),M4=a("a"),Wge=a("span"),F(Xy.$$.fragment),Cjo=l(),Qge=a("span"),wjo=o("AutoModelForNextSentencePrediction"),mje=l(),Bo=a("div"),F(zy.$$.fragment),Ajo=l(),Hi=a("p"),yjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HO=a("a"),Ljo=o("from_pretrained()"),xjo=o(" class method or the "),UO=a("a"),$jo=o("from_config()"),kjo=o(` class
method.`),Sjo=l(),Wy=a("p"),Rjo=o("This class cannot be instantiated directly using "),Hge=a("code"),Pjo=o("__init__()"),Bjo=o(" (throws an error)."),Ijo=l(),ft=a("div"),F(Qy.$$.fragment),Njo=l(),Uge=a("p"),qjo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jjo=l(),Ui=a("p"),Djo=o(`Note:
Loading a model from its configuration file does `),Jge=a("strong"),Gjo=o("not"),Ojo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=a("a"),Vjo=o("from_pretrained()"),Xjo=o(" to load the model weights."),zjo=l(),F(E4.$$.fragment),Wjo=l(),to=a("div"),F(Hy.$$.fragment),Qjo=l(),Yge=a("p"),Hjo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ujo=l(),Ia=a("p"),Jjo=o("The model class to instantiate is selected based on the "),Kge=a("code"),Yjo=o("model_type"),Kjo=o(` property of the config object (either
passed as an argument or loaded from `),Zge=a("code"),Zjo=o("pretrained_model_name_or_path"),eDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=a("code"),oDo=o("pretrained_model_name_or_path"),rDo=o(":"),tDo=l(),Yr=a("ul"),C4=a("li"),ohe=a("strong"),aDo=o("bert"),nDo=o(" \u2014 "),YO=a("a"),sDo=o("BertForNextSentencePrediction"),lDo=o(" (BERT model)"),iDo=l(),w4=a("li"),rhe=a("strong"),dDo=o("fnet"),cDo=o(" \u2014 "),KO=a("a"),fDo=o("FNetForNextSentencePrediction"),mDo=o(" (FNet model)"),gDo=l(),A4=a("li"),the=a("strong"),hDo=o("megatron-bert"),pDo=o(" \u2014 "),ZO=a("a"),_Do=o("MegatronBertForNextSentencePrediction"),uDo=o(" (MegatronBert model)"),bDo=l(),y4=a("li"),ahe=a("strong"),vDo=o("mobilebert"),FDo=o(" \u2014 "),eV=a("a"),TDo=o("MobileBertForNextSentencePrediction"),MDo=o(" (MobileBERT model)"),EDo=l(),L4=a("li"),nhe=a("strong"),CDo=o("qdqbert"),wDo=o(" \u2014 "),oV=a("a"),ADo=o("QDQBertForNextSentencePrediction"),yDo=o(" (QDQBert model)"),LDo=l(),x4=a("p"),xDo=o("The model is set in evaluation mode by default using "),she=a("code"),$Do=o("model.eval()"),kDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=a("code"),SDo=o("model.train()"),RDo=l(),F($4.$$.fragment),gje=l(),Ji=a("h2"),k4=a("a"),ihe=a("span"),F(Uy.$$.fragment),PDo=l(),dhe=a("span"),BDo=o("AutoModelForTokenClassification"),hje=l(),Io=a("div"),F(Jy.$$.fragment),IDo=l(),Yi=a("p"),NDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rV=a("a"),qDo=o("from_pretrained()"),jDo=o(" class method or the "),tV=a("a"),DDo=o("from_config()"),GDo=o(` class
method.`),ODo=l(),Yy=a("p"),VDo=o("This class cannot be instantiated directly using "),che=a("code"),XDo=o("__init__()"),zDo=o(" (throws an error)."),WDo=l(),mt=a("div"),F(Ky.$$.fragment),QDo=l(),fhe=a("p"),HDo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),UDo=l(),Ki=a("p"),JDo=o(`Note:
Loading a model from its configuration file does `),mhe=a("strong"),YDo=o("not"),KDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=a("a"),ZDo=o("from_pretrained()"),eGo=o(" to load the model weights."),oGo=l(),F(S4.$$.fragment),rGo=l(),ao=a("div"),F(Zy.$$.fragment),tGo=l(),ghe=a("p"),aGo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nGo=l(),Na=a("p"),sGo=o("The model class to instantiate is selected based on the "),hhe=a("code"),lGo=o("model_type"),iGo=o(` property of the config object (either
passed as an argument or loaded from `),phe=a("code"),dGo=o("pretrained_model_name_or_path"),cGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=a("code"),fGo=o("pretrained_model_name_or_path"),mGo=o(":"),gGo=l(),U=a("ul"),R4=a("li"),uhe=a("strong"),hGo=o("albert"),pGo=o(" \u2014 "),nV=a("a"),_Go=o("AlbertForTokenClassification"),uGo=o(" (ALBERT model)"),bGo=l(),P4=a("li"),bhe=a("strong"),vGo=o("bert"),FGo=o(" \u2014 "),sV=a("a"),TGo=o("BertForTokenClassification"),MGo=o(" (BERT model)"),EGo=l(),B4=a("li"),vhe=a("strong"),CGo=o("big_bird"),wGo=o(" \u2014 "),lV=a("a"),AGo=o("BigBirdForTokenClassification"),yGo=o(" (BigBird model)"),LGo=l(),I4=a("li"),Fhe=a("strong"),xGo=o("camembert"),$Go=o(" \u2014 "),iV=a("a"),kGo=o("CamembertForTokenClassification"),SGo=o(" (CamemBERT model)"),RGo=l(),N4=a("li"),The=a("strong"),PGo=o("canine"),BGo=o(" \u2014 "),dV=a("a"),IGo=o("CanineForTokenClassification"),NGo=o(" (Canine model)"),qGo=l(),q4=a("li"),Mhe=a("strong"),jGo=o("convbert"),DGo=o(" \u2014 "),cV=a("a"),GGo=o("ConvBertForTokenClassification"),OGo=o(" (ConvBERT model)"),VGo=l(),j4=a("li"),Ehe=a("strong"),XGo=o("data2vec-text"),zGo=o(" \u2014 "),fV=a("a"),WGo=o("Data2VecTextForTokenClassification"),QGo=o(" (Data2VecText model)"),HGo=l(),D4=a("li"),Che=a("strong"),UGo=o("deberta"),JGo=o(" \u2014 "),mV=a("a"),YGo=o("DebertaForTokenClassification"),KGo=o(" (DeBERTa model)"),ZGo=l(),G4=a("li"),whe=a("strong"),eOo=o("deberta-v2"),oOo=o(" \u2014 "),gV=a("a"),rOo=o("DebertaV2ForTokenClassification"),tOo=o(" (DeBERTa-v2 model)"),aOo=l(),O4=a("li"),Ahe=a("strong"),nOo=o("distilbert"),sOo=o(" \u2014 "),hV=a("a"),lOo=o("DistilBertForTokenClassification"),iOo=o(" (DistilBERT model)"),dOo=l(),V4=a("li"),yhe=a("strong"),cOo=o("electra"),fOo=o(" \u2014 "),pV=a("a"),mOo=o("ElectraForTokenClassification"),gOo=o(" (ELECTRA model)"),hOo=l(),X4=a("li"),Lhe=a("strong"),pOo=o("flaubert"),_Oo=o(" \u2014 "),_V=a("a"),uOo=o("FlaubertForTokenClassification"),bOo=o(" (FlauBERT model)"),vOo=l(),z4=a("li"),xhe=a("strong"),FOo=o("fnet"),TOo=o(" \u2014 "),uV=a("a"),MOo=o("FNetForTokenClassification"),EOo=o(" (FNet model)"),COo=l(),W4=a("li"),$he=a("strong"),wOo=o("funnel"),AOo=o(" \u2014 "),bV=a("a"),yOo=o("FunnelForTokenClassification"),LOo=o(" (Funnel Transformer model)"),xOo=l(),Q4=a("li"),khe=a("strong"),$Oo=o("gpt2"),kOo=o(" \u2014 "),vV=a("a"),SOo=o("GPT2ForTokenClassification"),ROo=o(" (OpenAI GPT-2 model)"),POo=l(),H4=a("li"),She=a("strong"),BOo=o("ibert"),IOo=o(" \u2014 "),FV=a("a"),NOo=o("IBertForTokenClassification"),qOo=o(" (I-BERT model)"),jOo=l(),U4=a("li"),Rhe=a("strong"),DOo=o("layoutlm"),GOo=o(" \u2014 "),TV=a("a"),OOo=o("LayoutLMForTokenClassification"),VOo=o(" (LayoutLM model)"),XOo=l(),J4=a("li"),Phe=a("strong"),zOo=o("layoutlmv2"),WOo=o(" \u2014 "),MV=a("a"),QOo=o("LayoutLMv2ForTokenClassification"),HOo=o(" (LayoutLMv2 model)"),UOo=l(),Y4=a("li"),Bhe=a("strong"),JOo=o("layoutlmv3"),YOo=o(" \u2014 "),EV=a("a"),KOo=o("LayoutLMv3ForTokenClassification"),ZOo=o(" (LayoutLMv3 model)"),eVo=l(),K4=a("li"),Ihe=a("strong"),oVo=o("longformer"),rVo=o(" \u2014 "),CV=a("a"),tVo=o("LongformerForTokenClassification"),aVo=o(" (Longformer model)"),nVo=l(),Z4=a("li"),Nhe=a("strong"),sVo=o("megatron-bert"),lVo=o(" \u2014 "),wV=a("a"),iVo=o("MegatronBertForTokenClassification"),dVo=o(" (MegatronBert model)"),cVo=l(),e5=a("li"),qhe=a("strong"),fVo=o("mobilebert"),mVo=o(" \u2014 "),AV=a("a"),gVo=o("MobileBertForTokenClassification"),hVo=o(" (MobileBERT model)"),pVo=l(),o5=a("li"),jhe=a("strong"),_Vo=o("mpnet"),uVo=o(" \u2014 "),yV=a("a"),bVo=o("MPNetForTokenClassification"),vVo=o(" (MPNet model)"),FVo=l(),r5=a("li"),Dhe=a("strong"),TVo=o("nystromformer"),MVo=o(" \u2014 "),LV=a("a"),EVo=o("NystromformerForTokenClassification"),CVo=o(" (Nystromformer model)"),wVo=l(),t5=a("li"),Ghe=a("strong"),AVo=o("qdqbert"),yVo=o(" \u2014 "),xV=a("a"),LVo=o("QDQBertForTokenClassification"),xVo=o(" (QDQBert model)"),$Vo=l(),a5=a("li"),Ohe=a("strong"),kVo=o("rembert"),SVo=o(" \u2014 "),$V=a("a"),RVo=o("RemBertForTokenClassification"),PVo=o(" (RemBERT model)"),BVo=l(),n5=a("li"),Vhe=a("strong"),IVo=o("roberta"),NVo=o(" \u2014 "),kV=a("a"),qVo=o("RobertaForTokenClassification"),jVo=o(" (RoBERTa model)"),DVo=l(),s5=a("li"),Xhe=a("strong"),GVo=o("roformer"),OVo=o(" \u2014 "),SV=a("a"),VVo=o("RoFormerForTokenClassification"),XVo=o(" (RoFormer model)"),zVo=l(),l5=a("li"),zhe=a("strong"),WVo=o("squeezebert"),QVo=o(" \u2014 "),RV=a("a"),HVo=o("SqueezeBertForTokenClassification"),UVo=o(" (SqueezeBERT model)"),JVo=l(),i5=a("li"),Whe=a("strong"),YVo=o("xlm"),KVo=o(" \u2014 "),PV=a("a"),ZVo=o("XLMForTokenClassification"),eXo=o(" (XLM model)"),oXo=l(),d5=a("li"),Qhe=a("strong"),rXo=o("xlm-roberta"),tXo=o(" \u2014 "),BV=a("a"),aXo=o("XLMRobertaForTokenClassification"),nXo=o(" (XLM-RoBERTa model)"),sXo=l(),c5=a("li"),Hhe=a("strong"),lXo=o("xlm-roberta-xl"),iXo=o(" \u2014 "),IV=a("a"),dXo=o("XLMRobertaXLForTokenClassification"),cXo=o(" (XLM-RoBERTa-XL model)"),fXo=l(),f5=a("li"),Uhe=a("strong"),mXo=o("xlnet"),gXo=o(" \u2014 "),NV=a("a"),hXo=o("XLNetForTokenClassification"),pXo=o(" (XLNet model)"),_Xo=l(),m5=a("li"),Jhe=a("strong"),uXo=o("yoso"),bXo=o(" \u2014 "),qV=a("a"),vXo=o("YosoForTokenClassification"),FXo=o(" (YOSO model)"),TXo=l(),g5=a("p"),MXo=o("The model is set in evaluation mode by default using "),Yhe=a("code"),EXo=o("model.eval()"),CXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Khe=a("code"),wXo=o("model.train()"),AXo=l(),F(h5.$$.fragment),pje=l(),Zi=a("h2"),p5=a("a"),Zhe=a("span"),F(eL.$$.fragment),yXo=l(),epe=a("span"),LXo=o("AutoModelForQuestionAnswering"),_je=l(),No=a("div"),F(oL.$$.fragment),xXo=l(),ed=a("p"),$Xo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jV=a("a"),kXo=o("from_pretrained()"),SXo=o(" class method or the "),DV=a("a"),RXo=o("from_config()"),PXo=o(` class
method.`),BXo=l(),rL=a("p"),IXo=o("This class cannot be instantiated directly using "),ope=a("code"),NXo=o("__init__()"),qXo=o(" (throws an error)."),jXo=l(),gt=a("div"),F(tL.$$.fragment),DXo=l(),rpe=a("p"),GXo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),OXo=l(),od=a("p"),VXo=o(`Note:
Loading a model from its configuration file does `),tpe=a("strong"),XXo=o("not"),zXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=a("a"),WXo=o("from_pretrained()"),QXo=o(" to load the model weights."),HXo=l(),F(_5.$$.fragment),UXo=l(),no=a("div"),F(aL.$$.fragment),JXo=l(),ape=a("p"),YXo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),KXo=l(),qa=a("p"),ZXo=o("The model class to instantiate is selected based on the "),npe=a("code"),ezo=o("model_type"),ozo=o(` property of the config object (either
passed as an argument or loaded from `),spe=a("code"),rzo=o("pretrained_model_name_or_path"),tzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=a("code"),azo=o("pretrained_model_name_or_path"),nzo=o(":"),szo=l(),V=a("ul"),u5=a("li"),ipe=a("strong"),lzo=o("albert"),izo=o(" \u2014 "),OV=a("a"),dzo=o("AlbertForQuestionAnswering"),czo=o(" (ALBERT model)"),fzo=l(),b5=a("li"),dpe=a("strong"),mzo=o("bart"),gzo=o(" \u2014 "),VV=a("a"),hzo=o("BartForQuestionAnswering"),pzo=o(" (BART model)"),_zo=l(),v5=a("li"),cpe=a("strong"),uzo=o("bert"),bzo=o(" \u2014 "),XV=a("a"),vzo=o("BertForQuestionAnswering"),Fzo=o(" (BERT model)"),Tzo=l(),F5=a("li"),fpe=a("strong"),Mzo=o("big_bird"),Ezo=o(" \u2014 "),zV=a("a"),Czo=o("BigBirdForQuestionAnswering"),wzo=o(" (BigBird model)"),Azo=l(),T5=a("li"),mpe=a("strong"),yzo=o("bigbird_pegasus"),Lzo=o(" \u2014 "),WV=a("a"),xzo=o("BigBirdPegasusForQuestionAnswering"),$zo=o(" (BigBirdPegasus model)"),kzo=l(),M5=a("li"),gpe=a("strong"),Szo=o("camembert"),Rzo=o(" \u2014 "),QV=a("a"),Pzo=o("CamembertForQuestionAnswering"),Bzo=o(" (CamemBERT model)"),Izo=l(),E5=a("li"),hpe=a("strong"),Nzo=o("canine"),qzo=o(" \u2014 "),HV=a("a"),jzo=o("CanineForQuestionAnswering"),Dzo=o(" (Canine model)"),Gzo=l(),C5=a("li"),ppe=a("strong"),Ozo=o("convbert"),Vzo=o(" \u2014 "),UV=a("a"),Xzo=o("ConvBertForQuestionAnswering"),zzo=o(" (ConvBERT model)"),Wzo=l(),w5=a("li"),_pe=a("strong"),Qzo=o("data2vec-text"),Hzo=o(" \u2014 "),JV=a("a"),Uzo=o("Data2VecTextForQuestionAnswering"),Jzo=o(" (Data2VecText model)"),Yzo=l(),A5=a("li"),upe=a("strong"),Kzo=o("deberta"),Zzo=o(" \u2014 "),YV=a("a"),eWo=o("DebertaForQuestionAnswering"),oWo=o(" (DeBERTa model)"),rWo=l(),y5=a("li"),bpe=a("strong"),tWo=o("deberta-v2"),aWo=o(" \u2014 "),KV=a("a"),nWo=o("DebertaV2ForQuestionAnswering"),sWo=o(" (DeBERTa-v2 model)"),lWo=l(),L5=a("li"),vpe=a("strong"),iWo=o("distilbert"),dWo=o(" \u2014 "),ZV=a("a"),cWo=o("DistilBertForQuestionAnswering"),fWo=o(" (DistilBERT model)"),mWo=l(),x5=a("li"),Fpe=a("strong"),gWo=o("electra"),hWo=o(" \u2014 "),eX=a("a"),pWo=o("ElectraForQuestionAnswering"),_Wo=o(" (ELECTRA model)"),uWo=l(),$5=a("li"),Tpe=a("strong"),bWo=o("flaubert"),vWo=o(" \u2014 "),oX=a("a"),FWo=o("FlaubertForQuestionAnsweringSimple"),TWo=o(" (FlauBERT model)"),MWo=l(),k5=a("li"),Mpe=a("strong"),EWo=o("fnet"),CWo=o(" \u2014 "),rX=a("a"),wWo=o("FNetForQuestionAnswering"),AWo=o(" (FNet model)"),yWo=l(),S5=a("li"),Epe=a("strong"),LWo=o("funnel"),xWo=o(" \u2014 "),tX=a("a"),$Wo=o("FunnelForQuestionAnswering"),kWo=o(" (Funnel Transformer model)"),SWo=l(),R5=a("li"),Cpe=a("strong"),RWo=o("gptj"),PWo=o(" \u2014 "),aX=a("a"),BWo=o("GPTJForQuestionAnswering"),IWo=o(" (GPT-J model)"),NWo=l(),P5=a("li"),wpe=a("strong"),qWo=o("ibert"),jWo=o(" \u2014 "),nX=a("a"),DWo=o("IBertForQuestionAnswering"),GWo=o(" (I-BERT model)"),OWo=l(),B5=a("li"),Ape=a("strong"),VWo=o("layoutlmv2"),XWo=o(" \u2014 "),sX=a("a"),zWo=o("LayoutLMv2ForQuestionAnswering"),WWo=o(" (LayoutLMv2 model)"),QWo=l(),I5=a("li"),ype=a("strong"),HWo=o("layoutlmv3"),UWo=o(" \u2014 "),lX=a("a"),JWo=o("LayoutLMv3ForQuestionAnswering"),YWo=o(" (LayoutLMv3 model)"),KWo=l(),N5=a("li"),Lpe=a("strong"),ZWo=o("led"),eQo=o(" \u2014 "),iX=a("a"),oQo=o("LEDForQuestionAnswering"),rQo=o(" (LED model)"),tQo=l(),q5=a("li"),xpe=a("strong"),aQo=o("longformer"),nQo=o(" \u2014 "),dX=a("a"),sQo=o("LongformerForQuestionAnswering"),lQo=o(" (Longformer model)"),iQo=l(),j5=a("li"),$pe=a("strong"),dQo=o("lxmert"),cQo=o(" \u2014 "),cX=a("a"),fQo=o("LxmertForQuestionAnswering"),mQo=o(" (LXMERT model)"),gQo=l(),D5=a("li"),kpe=a("strong"),hQo=o("mbart"),pQo=o(" \u2014 "),fX=a("a"),_Qo=o("MBartForQuestionAnswering"),uQo=o(" (mBART model)"),bQo=l(),G5=a("li"),Spe=a("strong"),vQo=o("megatron-bert"),FQo=o(" \u2014 "),mX=a("a"),TQo=o("MegatronBertForQuestionAnswering"),MQo=o(" (MegatronBert model)"),EQo=l(),O5=a("li"),Rpe=a("strong"),CQo=o("mobilebert"),wQo=o(" \u2014 "),gX=a("a"),AQo=o("MobileBertForQuestionAnswering"),yQo=o(" (MobileBERT model)"),LQo=l(),V5=a("li"),Ppe=a("strong"),xQo=o("mpnet"),$Qo=o(" \u2014 "),hX=a("a"),kQo=o("MPNetForQuestionAnswering"),SQo=o(" (MPNet model)"),RQo=l(),X5=a("li"),Bpe=a("strong"),PQo=o("nystromformer"),BQo=o(" \u2014 "),pX=a("a"),IQo=o("NystromformerForQuestionAnswering"),NQo=o(" (Nystromformer model)"),qQo=l(),z5=a("li"),Ipe=a("strong"),jQo=o("qdqbert"),DQo=o(" \u2014 "),_X=a("a"),GQo=o("QDQBertForQuestionAnswering"),OQo=o(" (QDQBert model)"),VQo=l(),W5=a("li"),Npe=a("strong"),XQo=o("reformer"),zQo=o(" \u2014 "),uX=a("a"),WQo=o("ReformerForQuestionAnswering"),QQo=o(" (Reformer model)"),HQo=l(),Q5=a("li"),qpe=a("strong"),UQo=o("rembert"),JQo=o(" \u2014 "),bX=a("a"),YQo=o("RemBertForQuestionAnswering"),KQo=o(" (RemBERT model)"),ZQo=l(),H5=a("li"),jpe=a("strong"),eHo=o("roberta"),oHo=o(" \u2014 "),vX=a("a"),rHo=o("RobertaForQuestionAnswering"),tHo=o(" (RoBERTa model)"),aHo=l(),U5=a("li"),Dpe=a("strong"),nHo=o("roformer"),sHo=o(" \u2014 "),FX=a("a"),lHo=o("RoFormerForQuestionAnswering"),iHo=o(" (RoFormer model)"),dHo=l(),J5=a("li"),Gpe=a("strong"),cHo=o("splinter"),fHo=o(" \u2014 "),TX=a("a"),mHo=o("SplinterForQuestionAnswering"),gHo=o(" (Splinter model)"),hHo=l(),Y5=a("li"),Ope=a("strong"),pHo=o("squeezebert"),_Ho=o(" \u2014 "),MX=a("a"),uHo=o("SqueezeBertForQuestionAnswering"),bHo=o(" (SqueezeBERT model)"),vHo=l(),K5=a("li"),Vpe=a("strong"),FHo=o("xlm"),THo=o(" \u2014 "),EX=a("a"),MHo=o("XLMForQuestionAnsweringSimple"),EHo=o(" (XLM model)"),CHo=l(),Z5=a("li"),Xpe=a("strong"),wHo=o("xlm-roberta"),AHo=o(" \u2014 "),CX=a("a"),yHo=o("XLMRobertaForQuestionAnswering"),LHo=o(" (XLM-RoBERTa model)"),xHo=l(),ev=a("li"),zpe=a("strong"),$Ho=o("xlm-roberta-xl"),kHo=o(" \u2014 "),wX=a("a"),SHo=o("XLMRobertaXLForQuestionAnswering"),RHo=o(" (XLM-RoBERTa-XL model)"),PHo=l(),ov=a("li"),Wpe=a("strong"),BHo=o("xlnet"),IHo=o(" \u2014 "),AX=a("a"),NHo=o("XLNetForQuestionAnsweringSimple"),qHo=o(" (XLNet model)"),jHo=l(),rv=a("li"),Qpe=a("strong"),DHo=o("yoso"),GHo=o(" \u2014 "),yX=a("a"),OHo=o("YosoForQuestionAnswering"),VHo=o(" (YOSO model)"),XHo=l(),tv=a("p"),zHo=o("The model is set in evaluation mode by default using "),Hpe=a("code"),WHo=o("model.eval()"),QHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=a("code"),HHo=o("model.train()"),UHo=l(),F(av.$$.fragment),uje=l(),rd=a("h2"),nv=a("a"),Jpe=a("span"),F(nL.$$.fragment),JHo=l(),Ype=a("span"),YHo=o("AutoModelForTableQuestionAnswering"),bje=l(),qo=a("div"),F(sL.$$.fragment),KHo=l(),td=a("p"),ZHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LX=a("a"),eUo=o("from_pretrained()"),oUo=o(" class method or the "),xX=a("a"),rUo=o("from_config()"),tUo=o(` class
method.`),aUo=l(),lL=a("p"),nUo=o("This class cannot be instantiated directly using "),Kpe=a("code"),sUo=o("__init__()"),lUo=o(" (throws an error)."),iUo=l(),ht=a("div"),F(iL.$$.fragment),dUo=l(),Zpe=a("p"),cUo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fUo=l(),ad=a("p"),mUo=o(`Note:
Loading a model from its configuration file does `),e_e=a("strong"),gUo=o("not"),hUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),pUo=o("from_pretrained()"),_Uo=o(" to load the model weights."),uUo=l(),F(sv.$$.fragment),bUo=l(),so=a("div"),F(dL.$$.fragment),vUo=l(),o_e=a("p"),FUo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),TUo=l(),ja=a("p"),MUo=o("The model class to instantiate is selected based on the "),r_e=a("code"),EUo=o("model_type"),CUo=o(` property of the config object (either
passed as an argument or loaded from `),t_e=a("code"),wUo=o("pretrained_model_name_or_path"),AUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=a("code"),yUo=o("pretrained_model_name_or_path"),LUo=o(":"),xUo=l(),n_e=a("ul"),lv=a("li"),s_e=a("strong"),$Uo=o("tapas"),kUo=o(" \u2014 "),kX=a("a"),SUo=o("TapasForQuestionAnswering"),RUo=o(" (TAPAS model)"),PUo=l(),iv=a("p"),BUo=o("The model is set in evaluation mode by default using "),l_e=a("code"),IUo=o("model.eval()"),NUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=a("code"),qUo=o("model.train()"),jUo=l(),F(dv.$$.fragment),vje=l(),nd=a("h2"),cv=a("a"),d_e=a("span"),F(cL.$$.fragment),DUo=l(),c_e=a("span"),GUo=o("AutoModelForImageClassification"),Fje=l(),jo=a("div"),F(fL.$$.fragment),OUo=l(),sd=a("p"),VUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SX=a("a"),XUo=o("from_pretrained()"),zUo=o(" class method or the "),RX=a("a"),WUo=o("from_config()"),QUo=o(` class
method.`),HUo=l(),mL=a("p"),UUo=o("This class cannot be instantiated directly using "),f_e=a("code"),JUo=o("__init__()"),YUo=o(" (throws an error)."),KUo=l(),pt=a("div"),F(gL.$$.fragment),ZUo=l(),m_e=a("p"),eJo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),oJo=l(),ld=a("p"),rJo=o(`Note:
Loading a model from its configuration file does `),g_e=a("strong"),tJo=o("not"),aJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),nJo=o("from_pretrained()"),sJo=o(" to load the model weights."),lJo=l(),F(fv.$$.fragment),iJo=l(),lo=a("div"),F(hL.$$.fragment),dJo=l(),h_e=a("p"),cJo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fJo=l(),Da=a("p"),mJo=o("The model class to instantiate is selected based on the "),p_e=a("code"),gJo=o("model_type"),hJo=o(` property of the config object (either
passed as an argument or loaded from `),__e=a("code"),pJo=o("pretrained_model_name_or_path"),_Jo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=a("code"),uJo=o("pretrained_model_name_or_path"),bJo=o(":"),vJo=l(),ve=a("ul"),mv=a("li"),b_e=a("strong"),FJo=o("beit"),TJo=o(" \u2014 "),BX=a("a"),MJo=o("BeitForImageClassification"),EJo=o(" (BEiT model)"),CJo=l(),gv=a("li"),v_e=a("strong"),wJo=o("convnext"),AJo=o(" \u2014 "),IX=a("a"),yJo=o("ConvNextForImageClassification"),LJo=o(" (ConvNext model)"),xJo=l(),hv=a("li"),F_e=a("strong"),$Jo=o("cvt"),kJo=o(" \u2014 "),NX=a("a"),SJo=o("CvtForImageClassification"),RJo=o(" (CvT model)"),PJo=l(),pv=a("li"),T_e=a("strong"),BJo=o("data2vec-vision"),IJo=o(" \u2014 "),qX=a("a"),NJo=o("Data2VecVisionForImageClassification"),qJo=o(" (Data2VecVision model)"),jJo=l(),Bs=a("li"),M_e=a("strong"),DJo=o("deit"),GJo=o(" \u2014 "),jX=a("a"),OJo=o("DeiTForImageClassification"),VJo=o(" or "),DX=a("a"),XJo=o("DeiTForImageClassificationWithTeacher"),zJo=o(" (DeiT model)"),WJo=l(),_v=a("li"),E_e=a("strong"),QJo=o("imagegpt"),HJo=o(" \u2014 "),GX=a("a"),UJo=o("ImageGPTForImageClassification"),JJo=o(" (ImageGPT model)"),YJo=l(),uv=a("li"),C_e=a("strong"),KJo=o("mobilevit"),ZJo=o(" \u2014 "),OX=a("a"),eYo=o("MobileViTForImageClassification"),oYo=o(" (MobileViT model)"),rYo=l(),_t=a("li"),w_e=a("strong"),tYo=o("perceiver"),aYo=o(" \u2014 "),VX=a("a"),nYo=o("PerceiverForImageClassificationLearned"),sYo=o(" or "),XX=a("a"),lYo=o("PerceiverForImageClassificationFourier"),iYo=o(" or "),zX=a("a"),dYo=o("PerceiverForImageClassificationConvProcessing"),cYo=o(" (Perceiver model)"),fYo=l(),bv=a("li"),A_e=a("strong"),mYo=o("poolformer"),gYo=o(" \u2014 "),WX=a("a"),hYo=o("PoolFormerForImageClassification"),pYo=o(" (PoolFormer model)"),_Yo=l(),vv=a("li"),y_e=a("strong"),uYo=o("regnet"),bYo=o(" \u2014 "),QX=a("a"),vYo=o("RegNetForImageClassification"),FYo=o(" (RegNet model)"),TYo=l(),Fv=a("li"),L_e=a("strong"),MYo=o("resnet"),EYo=o(" \u2014 "),HX=a("a"),CYo=o("ResNetForImageClassification"),wYo=o(" (ResNet model)"),AYo=l(),Tv=a("li"),x_e=a("strong"),yYo=o("segformer"),LYo=o(" \u2014 "),UX=a("a"),xYo=o("SegformerForImageClassification"),$Yo=o(" (SegFormer model)"),kYo=l(),Mv=a("li"),$_e=a("strong"),SYo=o("swin"),RYo=o(" \u2014 "),JX=a("a"),PYo=o("SwinForImageClassification"),BYo=o(" (Swin model)"),IYo=l(),Ev=a("li"),k_e=a("strong"),NYo=o("van"),qYo=o(" \u2014 "),YX=a("a"),jYo=o("VanForImageClassification"),DYo=o(" (VAN model)"),GYo=l(),Cv=a("li"),S_e=a("strong"),OYo=o("vit"),VYo=o(" \u2014 "),KX=a("a"),XYo=o("ViTForImageClassification"),zYo=o(" (ViT model)"),WYo=l(),wv=a("p"),QYo=o("The model is set in evaluation mode by default using "),R_e=a("code"),HYo=o("model.eval()"),UYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=a("code"),JYo=o("model.train()"),YYo=l(),F(Av.$$.fragment),Tje=l(),id=a("h2"),yv=a("a"),B_e=a("span"),F(pL.$$.fragment),KYo=l(),I_e=a("span"),ZYo=o("AutoModelForVision2Seq"),Mje=l(),Do=a("div"),F(_L.$$.fragment),eKo=l(),dd=a("p"),oKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ZX=a("a"),rKo=o("from_pretrained()"),tKo=o(" class method or the "),ez=a("a"),aKo=o("from_config()"),nKo=o(` class
method.`),sKo=l(),uL=a("p"),lKo=o("This class cannot be instantiated directly using "),N_e=a("code"),iKo=o("__init__()"),dKo=o(" (throws an error)."),cKo=l(),ut=a("div"),F(bL.$$.fragment),fKo=l(),q_e=a("p"),mKo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),gKo=l(),cd=a("p"),hKo=o(`Note:
Loading a model from its configuration file does `),j_e=a("strong"),pKo=o("not"),_Ko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),uKo=o("from_pretrained()"),bKo=o(" to load the model weights."),vKo=l(),F(Lv.$$.fragment),FKo=l(),io=a("div"),F(vL.$$.fragment),TKo=l(),D_e=a("p"),MKo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),EKo=l(),Ga=a("p"),CKo=o("The model class to instantiate is selected based on the "),G_e=a("code"),wKo=o("model_type"),AKo=o(` property of the config object (either
passed as an argument or loaded from `),O_e=a("code"),yKo=o("pretrained_model_name_or_path"),LKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=a("code"),xKo=o("pretrained_model_name_or_path"),$Ko=o(":"),kKo=l(),X_e=a("ul"),xv=a("li"),z_e=a("strong"),SKo=o("vision-encoder-decoder"),RKo=o(" \u2014 "),rz=a("a"),PKo=o("VisionEncoderDecoderModel"),BKo=o(" (Vision Encoder decoder model)"),IKo=l(),$v=a("p"),NKo=o("The model is set in evaluation mode by default using "),W_e=a("code"),qKo=o("model.eval()"),jKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q_e=a("code"),DKo=o("model.train()"),GKo=l(),F(kv.$$.fragment),Eje=l(),fd=a("h2"),Sv=a("a"),H_e=a("span"),F(FL.$$.fragment),OKo=l(),U_e=a("span"),VKo=o("AutoModelForAudioClassification"),Cje=l(),Go=a("div"),F(TL.$$.fragment),XKo=l(),md=a("p"),zKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),tz=a("a"),WKo=o("from_pretrained()"),QKo=o(" class method or the "),az=a("a"),HKo=o("from_config()"),UKo=o(` class
method.`),JKo=l(),ML=a("p"),YKo=o("This class cannot be instantiated directly using "),J_e=a("code"),KKo=o("__init__()"),ZKo=o(" (throws an error)."),eZo=l(),bt=a("div"),F(EL.$$.fragment),oZo=l(),Y_e=a("p"),rZo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),tZo=l(),gd=a("p"),aZo=o(`Note:
Loading a model from its configuration file does `),K_e=a("strong"),nZo=o("not"),sZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=a("a"),lZo=o("from_pretrained()"),iZo=o(" to load the model weights."),dZo=l(),F(Rv.$$.fragment),cZo=l(),co=a("div"),F(CL.$$.fragment),fZo=l(),Z_e=a("p"),mZo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),gZo=l(),Oa=a("p"),hZo=o("The model class to instantiate is selected based on the "),eue=a("code"),pZo=o("model_type"),_Zo=o(` property of the config object (either
passed as an argument or loaded from `),oue=a("code"),uZo=o("pretrained_model_name_or_path"),bZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=a("code"),vZo=o("pretrained_model_name_or_path"),FZo=o(":"),TZo=l(),Se=a("ul"),Pv=a("li"),tue=a("strong"),MZo=o("data2vec-audio"),EZo=o(" \u2014 "),sz=a("a"),CZo=o("Data2VecAudioForSequenceClassification"),wZo=o(" (Data2VecAudio model)"),AZo=l(),Bv=a("li"),aue=a("strong"),yZo=o("hubert"),LZo=o(" \u2014 "),lz=a("a"),xZo=o("HubertForSequenceClassification"),$Zo=o(" (Hubert model)"),kZo=l(),Iv=a("li"),nue=a("strong"),SZo=o("sew"),RZo=o(" \u2014 "),iz=a("a"),PZo=o("SEWForSequenceClassification"),BZo=o(" (SEW model)"),IZo=l(),Nv=a("li"),sue=a("strong"),NZo=o("sew-d"),qZo=o(" \u2014 "),dz=a("a"),jZo=o("SEWDForSequenceClassification"),DZo=o(" (SEW-D model)"),GZo=l(),qv=a("li"),lue=a("strong"),OZo=o("unispeech"),VZo=o(" \u2014 "),cz=a("a"),XZo=o("UniSpeechForSequenceClassification"),zZo=o(" (UniSpeech model)"),WZo=l(),jv=a("li"),iue=a("strong"),QZo=o("unispeech-sat"),HZo=o(" \u2014 "),fz=a("a"),UZo=o("UniSpeechSatForSequenceClassification"),JZo=o(" (UniSpeechSat model)"),YZo=l(),Dv=a("li"),due=a("strong"),KZo=o("wav2vec2"),ZZo=o(" \u2014 "),mz=a("a"),eer=o("Wav2Vec2ForSequenceClassification"),oer=o(" (Wav2Vec2 model)"),rer=l(),Gv=a("li"),cue=a("strong"),ter=o("wav2vec2-conformer"),aer=o(" \u2014 "),gz=a("a"),ner=o("Wav2Vec2ConformerForSequenceClassification"),ser=o(" (Wav2Vec2-Conformer model)"),ler=l(),Ov=a("li"),fue=a("strong"),ier=o("wavlm"),der=o(" \u2014 "),hz=a("a"),cer=o("WavLMForSequenceClassification"),fer=o(" (WavLM model)"),mer=l(),Vv=a("p"),ger=o("The model is set in evaluation mode by default using "),mue=a("code"),her=o("model.eval()"),per=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gue=a("code"),_er=o("model.train()"),uer=l(),F(Xv.$$.fragment),wje=l(),hd=a("h2"),zv=a("a"),hue=a("span"),F(wL.$$.fragment),ber=l(),pue=a("span"),ver=o("AutoModelForAudioFrameClassification"),Aje=l(),Oo=a("div"),F(AL.$$.fragment),Fer=l(),pd=a("p"),Ter=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),pz=a("a"),Mer=o("from_pretrained()"),Eer=o(" class method or the "),_z=a("a"),Cer=o("from_config()"),wer=o(` class
method.`),Aer=l(),yL=a("p"),yer=o("This class cannot be instantiated directly using "),_ue=a("code"),Ler=o("__init__()"),xer=o(" (throws an error)."),$er=l(),vt=a("div"),F(LL.$$.fragment),ker=l(),uue=a("p"),Ser=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Rer=l(),_d=a("p"),Per=o(`Note:
Loading a model from its configuration file does `),bue=a("strong"),Ber=o("not"),Ier=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=a("a"),Ner=o("from_pretrained()"),qer=o(" to load the model weights."),jer=l(),F(Wv.$$.fragment),Der=l(),fo=a("div"),F(xL.$$.fragment),Ger=l(),vue=a("p"),Oer=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Ver=l(),Va=a("p"),Xer=o("The model class to instantiate is selected based on the "),Fue=a("code"),zer=o("model_type"),Wer=o(` property of the config object (either
passed as an argument or loaded from `),Tue=a("code"),Qer=o("pretrained_model_name_or_path"),Her=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mue=a("code"),Uer=o("pretrained_model_name_or_path"),Jer=o(":"),Yer=l(),Kr=a("ul"),Qv=a("li"),Eue=a("strong"),Ker=o("data2vec-audio"),Zer=o(" \u2014 "),bz=a("a"),eor=o("Data2VecAudioForAudioFrameClassification"),oor=o(" (Data2VecAudio model)"),ror=l(),Hv=a("li"),Cue=a("strong"),tor=o("unispeech-sat"),aor=o(" \u2014 "),vz=a("a"),nor=o("UniSpeechSatForAudioFrameClassification"),sor=o(" (UniSpeechSat model)"),lor=l(),Uv=a("li"),wue=a("strong"),ior=o("wav2vec2"),dor=o(" \u2014 "),Fz=a("a"),cor=o("Wav2Vec2ForAudioFrameClassification"),mor=o(" (Wav2Vec2 model)"),gor=l(),Jv=a("li"),Aue=a("strong"),hor=o("wav2vec2-conformer"),por=o(" \u2014 "),Tz=a("a"),_or=o("Wav2Vec2ConformerForAudioFrameClassification"),uor=o(" (Wav2Vec2-Conformer model)"),bor=l(),Yv=a("li"),yue=a("strong"),vor=o("wavlm"),For=o(" \u2014 "),Mz=a("a"),Tor=o("WavLMForAudioFrameClassification"),Mor=o(" (WavLM model)"),Eor=l(),Kv=a("p"),Cor=o("The model is set in evaluation mode by default using "),Lue=a("code"),wor=o("model.eval()"),Aor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=a("code"),yor=o("model.train()"),Lor=l(),F(Zv.$$.fragment),yje=l(),ud=a("h2"),e3=a("a"),$ue=a("span"),F($L.$$.fragment),xor=l(),kue=a("span"),$or=o("AutoModelForCTC"),Lje=l(),Vo=a("div"),F(kL.$$.fragment),kor=l(),bd=a("p"),Sor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Ez=a("a"),Ror=o("from_pretrained()"),Por=o(" class method or the "),Cz=a("a"),Bor=o("from_config()"),Ior=o(` class
method.`),Nor=l(),SL=a("p"),qor=o("This class cannot be instantiated directly using "),Sue=a("code"),jor=o("__init__()"),Dor=o(" (throws an error)."),Gor=l(),Ft=a("div"),F(RL.$$.fragment),Oor=l(),Rue=a("p"),Vor=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Xor=l(),vd=a("p"),zor=o(`Note:
Loading a model from its configuration file does `),Pue=a("strong"),Wor=o("not"),Qor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=a("a"),Hor=o("from_pretrained()"),Uor=o(" to load the model weights."),Jor=l(),F(o3.$$.fragment),Yor=l(),mo=a("div"),F(PL.$$.fragment),Kor=l(),Bue=a("p"),Zor=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),err=l(),Xa=a("p"),orr=o("The model class to instantiate is selected based on the "),Iue=a("code"),rrr=o("model_type"),trr=o(` property of the config object (either
passed as an argument or loaded from `),Nue=a("code"),arr=o("pretrained_model_name_or_path"),nrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=a("code"),srr=o("pretrained_model_name_or_path"),lrr=o(":"),irr=l(),Re=a("ul"),r3=a("li"),jue=a("strong"),drr=o("data2vec-audio"),crr=o(" \u2014 "),Az=a("a"),frr=o("Data2VecAudioForCTC"),mrr=o(" (Data2VecAudio model)"),grr=l(),t3=a("li"),Due=a("strong"),hrr=o("hubert"),prr=o(" \u2014 "),yz=a("a"),_rr=o("HubertForCTC"),urr=o(" (Hubert model)"),brr=l(),a3=a("li"),Gue=a("strong"),vrr=o("sew"),Frr=o(" \u2014 "),Lz=a("a"),Trr=o("SEWForCTC"),Mrr=o(" (SEW model)"),Err=l(),n3=a("li"),Oue=a("strong"),Crr=o("sew-d"),wrr=o(" \u2014 "),xz=a("a"),Arr=o("SEWDForCTC"),yrr=o(" (SEW-D model)"),Lrr=l(),s3=a("li"),Vue=a("strong"),xrr=o("unispeech"),$rr=o(" \u2014 "),$z=a("a"),krr=o("UniSpeechForCTC"),Srr=o(" (UniSpeech model)"),Rrr=l(),l3=a("li"),Xue=a("strong"),Prr=o("unispeech-sat"),Brr=o(" \u2014 "),kz=a("a"),Irr=o("UniSpeechSatForCTC"),Nrr=o(" (UniSpeechSat model)"),qrr=l(),i3=a("li"),zue=a("strong"),jrr=o("wav2vec2"),Drr=o(" \u2014 "),Sz=a("a"),Grr=o("Wav2Vec2ForCTC"),Orr=o(" (Wav2Vec2 model)"),Vrr=l(),d3=a("li"),Wue=a("strong"),Xrr=o("wav2vec2-conformer"),zrr=o(" \u2014 "),Rz=a("a"),Wrr=o("Wav2Vec2ConformerForCTC"),Qrr=o(" (Wav2Vec2-Conformer model)"),Hrr=l(),c3=a("li"),Que=a("strong"),Urr=o("wavlm"),Jrr=o(" \u2014 "),Pz=a("a"),Yrr=o("WavLMForCTC"),Krr=o(" (WavLM model)"),Zrr=l(),f3=a("p"),etr=o("The model is set in evaluation mode by default using "),Hue=a("code"),otr=o("model.eval()"),rtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=a("code"),ttr=o("model.train()"),atr=l(),F(m3.$$.fragment),xje=l(),Fd=a("h2"),g3=a("a"),Jue=a("span"),F(BL.$$.fragment),ntr=l(),Yue=a("span"),str=o("AutoModelForSpeechSeq2Seq"),$je=l(),Xo=a("div"),F(IL.$$.fragment),ltr=l(),Td=a("p"),itr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Bz=a("a"),dtr=o("from_pretrained()"),ctr=o(" class method or the "),Iz=a("a"),ftr=o("from_config()"),mtr=o(` class
method.`),gtr=l(),NL=a("p"),htr=o("This class cannot be instantiated directly using "),Kue=a("code"),ptr=o("__init__()"),_tr=o(" (throws an error)."),utr=l(),Tt=a("div"),F(qL.$$.fragment),btr=l(),Zue=a("p"),vtr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ftr=l(),Md=a("p"),Ttr=o(`Note:
Loading a model from its configuration file does `),e1e=a("strong"),Mtr=o("not"),Etr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),Ctr=o("from_pretrained()"),wtr=o(" to load the model weights."),Atr=l(),F(h3.$$.fragment),ytr=l(),go=a("div"),F(jL.$$.fragment),Ltr=l(),o1e=a("p"),xtr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),$tr=l(),za=a("p"),ktr=o("The model class to instantiate is selected based on the "),r1e=a("code"),Str=o("model_type"),Rtr=o(` property of the config object (either
passed as an argument or loaded from `),t1e=a("code"),Ptr=o("pretrained_model_name_or_path"),Btr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=a("code"),Itr=o("pretrained_model_name_or_path"),Ntr=o(":"),qtr=l(),DL=a("ul"),p3=a("li"),n1e=a("strong"),jtr=o("speech-encoder-decoder"),Dtr=o(" \u2014 "),qz=a("a"),Gtr=o("SpeechEncoderDecoderModel"),Otr=o(" (Speech Encoder decoder model)"),Vtr=l(),_3=a("li"),s1e=a("strong"),Xtr=o("speech_to_text"),ztr=o(" \u2014 "),jz=a("a"),Wtr=o("Speech2TextForConditionalGeneration"),Qtr=o(" (Speech2Text model)"),Htr=l(),u3=a("p"),Utr=o("The model is set in evaluation mode by default using "),l1e=a("code"),Jtr=o("model.eval()"),Ytr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i1e=a("code"),Ktr=o("model.train()"),Ztr=l(),F(b3.$$.fragment),kje=l(),Ed=a("h2"),v3=a("a"),d1e=a("span"),F(GL.$$.fragment),ear=l(),c1e=a("span"),oar=o("AutoModelForAudioXVector"),Sje=l(),zo=a("div"),F(OL.$$.fragment),rar=l(),Cd=a("p"),tar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Dz=a("a"),aar=o("from_pretrained()"),nar=o(" class method or the "),Gz=a("a"),sar=o("from_config()"),lar=o(` class
method.`),iar=l(),VL=a("p"),dar=o("This class cannot be instantiated directly using "),f1e=a("code"),car=o("__init__()"),far=o(" (throws an error)."),mar=l(),Mt=a("div"),F(XL.$$.fragment),gar=l(),m1e=a("p"),har=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),par=l(),wd=a("p"),_ar=o(`Note:
Loading a model from its configuration file does `),g1e=a("strong"),uar=o("not"),bar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=a("a"),Far=o("from_pretrained()"),Tar=o(" to load the model weights."),Mar=l(),F(F3.$$.fragment),Ear=l(),ho=a("div"),F(zL.$$.fragment),Car=l(),h1e=a("p"),war=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Aar=l(),Wa=a("p"),yar=o("The model class to instantiate is selected based on the "),p1e=a("code"),Lar=o("model_type"),xar=o(` property of the config object (either
passed as an argument or loaded from `),_1e=a("code"),$ar=o("pretrained_model_name_or_path"),kar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=a("code"),Sar=o("pretrained_model_name_or_path"),Rar=o(":"),Par=l(),Zr=a("ul"),T3=a("li"),b1e=a("strong"),Bar=o("data2vec-audio"),Iar=o(" \u2014 "),Vz=a("a"),Nar=o("Data2VecAudioForXVector"),qar=o(" (Data2VecAudio model)"),jar=l(),M3=a("li"),v1e=a("strong"),Dar=o("unispeech-sat"),Gar=o(" \u2014 "),Xz=a("a"),Oar=o("UniSpeechSatForXVector"),Var=o(" (UniSpeechSat model)"),Xar=l(),E3=a("li"),F1e=a("strong"),zar=o("wav2vec2"),War=o(" \u2014 "),zz=a("a"),Qar=o("Wav2Vec2ForXVector"),Har=o(" (Wav2Vec2 model)"),Uar=l(),C3=a("li"),T1e=a("strong"),Jar=o("wav2vec2-conformer"),Yar=o(" \u2014 "),Wz=a("a"),Kar=o("Wav2Vec2ConformerForXVector"),Zar=o(" (Wav2Vec2-Conformer model)"),enr=l(),w3=a("li"),M1e=a("strong"),onr=o("wavlm"),rnr=o(" \u2014 "),Qz=a("a"),tnr=o("WavLMForXVector"),anr=o(" (WavLM model)"),nnr=l(),A3=a("p"),snr=o("The model is set in evaluation mode by default using "),E1e=a("code"),lnr=o("model.eval()"),inr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C1e=a("code"),dnr=o("model.train()"),cnr=l(),F(y3.$$.fragment),Rje=l(),Ad=a("h2"),L3=a("a"),w1e=a("span"),F(WL.$$.fragment),fnr=l(),A1e=a("span"),mnr=o("AutoModelForMaskedImageModeling"),Pje=l(),Wo=a("div"),F(QL.$$.fragment),gnr=l(),yd=a("p"),hnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Hz=a("a"),pnr=o("from_pretrained()"),_nr=o(" class method or the "),Uz=a("a"),unr=o("from_config()"),bnr=o(` class
method.`),vnr=l(),HL=a("p"),Fnr=o("This class cannot be instantiated directly using "),y1e=a("code"),Tnr=o("__init__()"),Mnr=o(" (throws an error)."),Enr=l(),Et=a("div"),F(UL.$$.fragment),Cnr=l(),L1e=a("p"),wnr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Anr=l(),Ld=a("p"),ynr=o(`Note:
Loading a model from its configuration file does `),x1e=a("strong"),Lnr=o("not"),xnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),$nr=o("from_pretrained()"),knr=o(" to load the model weights."),Snr=l(),F(x3.$$.fragment),Rnr=l(),po=a("div"),F(JL.$$.fragment),Pnr=l(),$1e=a("p"),Bnr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Inr=l(),Qa=a("p"),Nnr=o("The model class to instantiate is selected based on the "),k1e=a("code"),qnr=o("model_type"),jnr=o(` property of the config object (either
passed as an argument or loaded from `),S1e=a("code"),Dnr=o("pretrained_model_name_or_path"),Gnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=a("code"),Onr=o("pretrained_model_name_or_path"),Vnr=o(":"),Xnr=l(),xd=a("ul"),$3=a("li"),P1e=a("strong"),znr=o("deit"),Wnr=o(" \u2014 "),Yz=a("a"),Qnr=o("DeiTForMaskedImageModeling"),Hnr=o(" (DeiT model)"),Unr=l(),k3=a("li"),B1e=a("strong"),Jnr=o("swin"),Ynr=o(" \u2014 "),Kz=a("a"),Knr=o("SwinForMaskedImageModeling"),Znr=o(" (Swin model)"),esr=l(),S3=a("li"),I1e=a("strong"),osr=o("vit"),rsr=o(" \u2014 "),Zz=a("a"),tsr=o("ViTForMaskedImageModeling"),asr=o(" (ViT model)"),nsr=l(),R3=a("p"),ssr=o("The model is set in evaluation mode by default using "),N1e=a("code"),lsr=o("model.eval()"),isr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q1e=a("code"),dsr=o("model.train()"),csr=l(),F(P3.$$.fragment),Bje=l(),$d=a("h2"),B3=a("a"),j1e=a("span"),F(YL.$$.fragment),fsr=l(),D1e=a("span"),msr=o("AutoModelForObjectDetection"),Ije=l(),Qo=a("div"),F(KL.$$.fragment),gsr=l(),kd=a("p"),hsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),eW=a("a"),psr=o("from_pretrained()"),_sr=o(" class method or the "),oW=a("a"),usr=o("from_config()"),bsr=o(` class
method.`),vsr=l(),ZL=a("p"),Fsr=o("This class cannot be instantiated directly using "),G1e=a("code"),Tsr=o("__init__()"),Msr=o(" (throws an error)."),Esr=l(),Ct=a("div"),F(e8.$$.fragment),Csr=l(),O1e=a("p"),wsr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Asr=l(),Sd=a("p"),ysr=o(`Note:
Loading a model from its configuration file does `),V1e=a("strong"),Lsr=o("not"),xsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=a("a"),$sr=o("from_pretrained()"),ksr=o(" to load the model weights."),Ssr=l(),F(I3.$$.fragment),Rsr=l(),_o=a("div"),F(o8.$$.fragment),Psr=l(),X1e=a("p"),Bsr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Isr=l(),Ha=a("p"),Nsr=o("The model class to instantiate is selected based on the "),z1e=a("code"),qsr=o("model_type"),jsr=o(` property of the config object (either
passed as an argument or loaded from `),W1e=a("code"),Dsr=o("pretrained_model_name_or_path"),Gsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=a("code"),Osr=o("pretrained_model_name_or_path"),Vsr=o(":"),Xsr=l(),r8=a("ul"),N3=a("li"),H1e=a("strong"),zsr=o("detr"),Wsr=o(" \u2014 "),tW=a("a"),Qsr=o("DetrForObjectDetection"),Hsr=o(" (DETR model)"),Usr=l(),q3=a("li"),U1e=a("strong"),Jsr=o("yolos"),Ysr=o(" \u2014 "),aW=a("a"),Ksr=o("YolosForObjectDetection"),Zsr=o(" (YOLOS model)"),elr=l(),j3=a("p"),olr=o("The model is set in evaluation mode by default using "),J1e=a("code"),rlr=o("model.eval()"),tlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y1e=a("code"),alr=o("model.train()"),nlr=l(),F(D3.$$.fragment),Nje=l(),Rd=a("h2"),G3=a("a"),K1e=a("span"),F(t8.$$.fragment),slr=l(),Z1e=a("span"),llr=o("AutoModelForImageSegmentation"),qje=l(),Ho=a("div"),F(a8.$$.fragment),ilr=l(),Pd=a("p"),dlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),nW=a("a"),clr=o("from_pretrained()"),flr=o(" class method or the "),sW=a("a"),mlr=o("from_config()"),glr=o(` class
method.`),hlr=l(),n8=a("p"),plr=o("This class cannot be instantiated directly using "),ebe=a("code"),_lr=o("__init__()"),ulr=o(" (throws an error)."),blr=l(),wt=a("div"),F(s8.$$.fragment),vlr=l(),obe=a("p"),Flr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Tlr=l(),Bd=a("p"),Mlr=o(`Note:
Loading a model from its configuration file does `),rbe=a("strong"),Elr=o("not"),Clr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),wlr=o("from_pretrained()"),Alr=o(" to load the model weights."),ylr=l(),F(O3.$$.fragment),Llr=l(),uo=a("div"),F(l8.$$.fragment),xlr=l(),tbe=a("p"),$lr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),klr=l(),Ua=a("p"),Slr=o("The model class to instantiate is selected based on the "),abe=a("code"),Rlr=o("model_type"),Plr=o(` property of the config object (either
passed as an argument or loaded from `),nbe=a("code"),Blr=o("pretrained_model_name_or_path"),Ilr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=a("code"),Nlr=o("pretrained_model_name_or_path"),qlr=o(":"),jlr=l(),lbe=a("ul"),V3=a("li"),ibe=a("strong"),Dlr=o("detr"),Glr=o(" \u2014 "),iW=a("a"),Olr=o("DetrForSegmentation"),Vlr=o(" (DETR model)"),Xlr=l(),X3=a("p"),zlr=o("The model is set in evaluation mode by default using "),dbe=a("code"),Wlr=o("model.eval()"),Qlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cbe=a("code"),Hlr=o("model.train()"),Ulr=l(),F(z3.$$.fragment),jje=l(),Id=a("h2"),W3=a("a"),fbe=a("span"),F(i8.$$.fragment),Jlr=l(),mbe=a("span"),Ylr=o("AutoModelForSemanticSegmentation"),Dje=l(),Uo=a("div"),F(d8.$$.fragment),Klr=l(),Nd=a("p"),Zlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),dW=a("a"),eir=o("from_pretrained()"),oir=o(" class method or the "),cW=a("a"),rir=o("from_config()"),tir=o(` class
method.`),air=l(),c8=a("p"),nir=o("This class cannot be instantiated directly using "),gbe=a("code"),sir=o("__init__()"),lir=o(" (throws an error)."),iir=l(),At=a("div"),F(f8.$$.fragment),dir=l(),hbe=a("p"),cir=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),fir=l(),qd=a("p"),mir=o(`Note:
Loading a model from its configuration file does `),pbe=a("strong"),gir=o("not"),hir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),pir=o("from_pretrained()"),_ir=o(" to load the model weights."),uir=l(),F(Q3.$$.fragment),bir=l(),bo=a("div"),F(m8.$$.fragment),vir=l(),_be=a("p"),Fir=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Tir=l(),Ja=a("p"),Mir=o("The model class to instantiate is selected based on the "),ube=a("code"),Eir=o("model_type"),Cir=o(` property of the config object (either
passed as an argument or loaded from `),bbe=a("code"),wir=o("pretrained_model_name_or_path"),Air=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=a("code"),yir=o("pretrained_model_name_or_path"),Lir=o(":"),xir=l(),et=a("ul"),H3=a("li"),Fbe=a("strong"),$ir=o("beit"),kir=o(" \u2014 "),mW=a("a"),Sir=o("BeitForSemanticSegmentation"),Rir=o(" (BEiT model)"),Pir=l(),U3=a("li"),Tbe=a("strong"),Bir=o("data2vec-vision"),Iir=o(" \u2014 "),gW=a("a"),Nir=o("Data2VecVisionForSemanticSegmentation"),qir=o(" (Data2VecVision model)"),jir=l(),J3=a("li"),Mbe=a("strong"),Dir=o("dpt"),Gir=o(" \u2014 "),hW=a("a"),Oir=o("DPTForSemanticSegmentation"),Vir=o(" (DPT model)"),Xir=l(),Y3=a("li"),Ebe=a("strong"),zir=o("mobilevit"),Wir=o(" \u2014 "),pW=a("a"),Qir=o("MobileViTForSemanticSegmentation"),Hir=o(" (MobileViT model)"),Uir=l(),K3=a("li"),Cbe=a("strong"),Jir=o("segformer"),Yir=o(" \u2014 "),_W=a("a"),Kir=o("SegformerForSemanticSegmentation"),Zir=o(" (SegFormer model)"),edr=l(),Z3=a("p"),odr=o("The model is set in evaluation mode by default using "),wbe=a("code"),rdr=o("model.eval()"),tdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Abe=a("code"),adr=o("model.train()"),ndr=l(),F(eF.$$.fragment),Gje=l(),jd=a("h2"),oF=a("a"),ybe=a("span"),F(g8.$$.fragment),sdr=l(),Lbe=a("span"),ldr=o("AutoModelForInstanceSegmentation"),Oje=l(),Jo=a("div"),F(h8.$$.fragment),idr=l(),Dd=a("p"),ddr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),uW=a("a"),cdr=o("from_pretrained()"),fdr=o(" class method or the "),bW=a("a"),mdr=o("from_config()"),gdr=o(` class
method.`),hdr=l(),p8=a("p"),pdr=o("This class cannot be instantiated directly using "),xbe=a("code"),_dr=o("__init__()"),udr=o(" (throws an error)."),bdr=l(),yt=a("div"),F(_8.$$.fragment),vdr=l(),$be=a("p"),Fdr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Tdr=l(),Gd=a("p"),Mdr=o(`Note:
Loading a model from its configuration file does `),kbe=a("strong"),Edr=o("not"),Cdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=a("a"),wdr=o("from_pretrained()"),Adr=o(" to load the model weights."),ydr=l(),F(rF.$$.fragment),Ldr=l(),vo=a("div"),F(u8.$$.fragment),xdr=l(),Sbe=a("p"),$dr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),kdr=l(),Ya=a("p"),Sdr=o("The model class to instantiate is selected based on the "),Rbe=a("code"),Rdr=o("model_type"),Pdr=o(` property of the config object (either
passed as an argument or loaded from `),Pbe=a("code"),Bdr=o("pretrained_model_name_or_path"),Idr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=a("code"),Ndr=o("pretrained_model_name_or_path"),qdr=o(":"),jdr=l(),Ibe=a("ul"),tF=a("li"),Nbe=a("strong"),Ddr=o("maskformer"),Gdr=o(" \u2014 "),FW=a("a"),Odr=o("MaskFormerForInstanceSegmentation"),Vdr=o(" (MaskFormer model)"),Xdr=l(),aF=a("p"),zdr=o("The model is set in evaluation mode by default using "),qbe=a("code"),Wdr=o("model.eval()"),Qdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jbe=a("code"),Hdr=o("model.train()"),Udr=l(),F(nF.$$.fragment),Vje=l(),Od=a("h2"),sF=a("a"),Dbe=a("span"),F(b8.$$.fragment),Jdr=l(),Gbe=a("span"),Ydr=o("TFAutoModel"),Xje=l(),Yo=a("div"),F(v8.$$.fragment),Kdr=l(),Vd=a("p"),Zdr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TW=a("a"),ecr=o("from_pretrained()"),ocr=o(" class method or the "),MW=a("a"),rcr=o("from_config()"),tcr=o(` class
method.`),acr=l(),F8=a("p"),ncr=o("This class cannot be instantiated directly using "),Obe=a("code"),scr=o("__init__()"),lcr=o(" (throws an error)."),icr=l(),Lt=a("div"),F(T8.$$.fragment),dcr=l(),Vbe=a("p"),ccr=o("Instantiates one of the base model classes of the library from a configuration."),fcr=l(),Xd=a("p"),mcr=o(`Note:
Loading a model from its configuration file does `),Xbe=a("strong"),gcr=o("not"),hcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=a("a"),pcr=o("from_pretrained()"),_cr=o(" to load the model weights."),ucr=l(),F(lF.$$.fragment),bcr=l(),wr=a("div"),F(M8.$$.fragment),vcr=l(),zbe=a("p"),Fcr=o("Instantiate one of the base model classes of the library from a pretrained model."),Tcr=l(),Ka=a("p"),Mcr=o("The model class to instantiate is selected based on the "),Wbe=a("code"),Ecr=o("model_type"),Ccr=o(` property of the config object (either
passed as an argument or loaded from `),Qbe=a("code"),wcr=o("pretrained_model_name_or_path"),Acr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=a("code"),ycr=o("pretrained_model_name_or_path"),Lcr=o(":"),xcr=l(),q=a("ul"),iF=a("li"),Ube=a("strong"),$cr=o("albert"),kcr=o(" \u2014 "),CW=a("a"),Scr=o("TFAlbertModel"),Rcr=o(" (ALBERT model)"),Pcr=l(),dF=a("li"),Jbe=a("strong"),Bcr=o("bart"),Icr=o(" \u2014 "),wW=a("a"),Ncr=o("TFBartModel"),qcr=o(" (BART model)"),jcr=l(),cF=a("li"),Ybe=a("strong"),Dcr=o("bert"),Gcr=o(" \u2014 "),AW=a("a"),Ocr=o("TFBertModel"),Vcr=o(" (BERT model)"),Xcr=l(),fF=a("li"),Kbe=a("strong"),zcr=o("blenderbot"),Wcr=o(" \u2014 "),yW=a("a"),Qcr=o("TFBlenderbotModel"),Hcr=o(" (Blenderbot model)"),Ucr=l(),mF=a("li"),Zbe=a("strong"),Jcr=o("blenderbot-small"),Ycr=o(" \u2014 "),LW=a("a"),Kcr=o("TFBlenderbotSmallModel"),Zcr=o(" (BlenderbotSmall model)"),efr=l(),gF=a("li"),e2e=a("strong"),ofr=o("camembert"),rfr=o(" \u2014 "),xW=a("a"),tfr=o("TFCamembertModel"),afr=o(" (CamemBERT model)"),nfr=l(),hF=a("li"),o2e=a("strong"),sfr=o("clip"),lfr=o(" \u2014 "),$W=a("a"),ifr=o("TFCLIPModel"),dfr=o(" (CLIP model)"),cfr=l(),pF=a("li"),r2e=a("strong"),ffr=o("convbert"),mfr=o(" \u2014 "),kW=a("a"),gfr=o("TFConvBertModel"),hfr=o(" (ConvBERT model)"),pfr=l(),_F=a("li"),t2e=a("strong"),_fr=o("convnext"),ufr=o(" \u2014 "),SW=a("a"),bfr=o("TFConvNextModel"),vfr=o(" (ConvNext model)"),Ffr=l(),uF=a("li"),a2e=a("strong"),Tfr=o("ctrl"),Mfr=o(" \u2014 "),RW=a("a"),Efr=o("TFCTRLModel"),Cfr=o(" (CTRL model)"),wfr=l(),bF=a("li"),n2e=a("strong"),Afr=o("data2vec-vision"),yfr=o(" \u2014 "),PW=a("a"),Lfr=o("TFData2VecVisionModel"),xfr=o(" (Data2VecVision model)"),$fr=l(),vF=a("li"),s2e=a("strong"),kfr=o("deberta"),Sfr=o(" \u2014 "),BW=a("a"),Rfr=o("TFDebertaModel"),Pfr=o(" (DeBERTa model)"),Bfr=l(),FF=a("li"),l2e=a("strong"),Ifr=o("deberta-v2"),Nfr=o(" \u2014 "),IW=a("a"),qfr=o("TFDebertaV2Model"),jfr=o(" (DeBERTa-v2 model)"),Dfr=l(),TF=a("li"),i2e=a("strong"),Gfr=o("distilbert"),Ofr=o(" \u2014 "),NW=a("a"),Vfr=o("TFDistilBertModel"),Xfr=o(" (DistilBERT model)"),zfr=l(),MF=a("li"),d2e=a("strong"),Wfr=o("dpr"),Qfr=o(" \u2014 "),qW=a("a"),Hfr=o("TFDPRQuestionEncoder"),Ufr=o(" (DPR model)"),Jfr=l(),EF=a("li"),c2e=a("strong"),Yfr=o("electra"),Kfr=o(" \u2014 "),jW=a("a"),Zfr=o("TFElectraModel"),emr=o(" (ELECTRA model)"),omr=l(),CF=a("li"),f2e=a("strong"),rmr=o("flaubert"),tmr=o(" \u2014 "),DW=a("a"),amr=o("TFFlaubertModel"),nmr=o(" (FlauBERT model)"),smr=l(),Is=a("li"),m2e=a("strong"),lmr=o("funnel"),imr=o(" \u2014 "),GW=a("a"),dmr=o("TFFunnelModel"),cmr=o(" or "),OW=a("a"),fmr=o("TFFunnelBaseModel"),mmr=o(" (Funnel Transformer model)"),gmr=l(),wF=a("li"),g2e=a("strong"),hmr=o("gpt2"),pmr=o(" \u2014 "),VW=a("a"),_mr=o("TFGPT2Model"),umr=o(" (OpenAI GPT-2 model)"),bmr=l(),AF=a("li"),h2e=a("strong"),vmr=o("gptj"),Fmr=o(" \u2014 "),XW=a("a"),Tmr=o("TFGPTJModel"),Mmr=o(" (GPT-J model)"),Emr=l(),yF=a("li"),p2e=a("strong"),Cmr=o("hubert"),wmr=o(" \u2014 "),zW=a("a"),Amr=o("TFHubertModel"),ymr=o(" (Hubert model)"),Lmr=l(),LF=a("li"),_2e=a("strong"),xmr=o("layoutlm"),$mr=o(" \u2014 "),WW=a("a"),kmr=o("TFLayoutLMModel"),Smr=o(" (LayoutLM model)"),Rmr=l(),xF=a("li"),u2e=a("strong"),Pmr=o("led"),Bmr=o(" \u2014 "),QW=a("a"),Imr=o("TFLEDModel"),Nmr=o(" (LED model)"),qmr=l(),$F=a("li"),b2e=a("strong"),jmr=o("longformer"),Dmr=o(" \u2014 "),HW=a("a"),Gmr=o("TFLongformerModel"),Omr=o(" (Longformer model)"),Vmr=l(),kF=a("li"),v2e=a("strong"),Xmr=o("lxmert"),zmr=o(" \u2014 "),UW=a("a"),Wmr=o("TFLxmertModel"),Qmr=o(" (LXMERT model)"),Hmr=l(),SF=a("li"),F2e=a("strong"),Umr=o("marian"),Jmr=o(" \u2014 "),JW=a("a"),Ymr=o("TFMarianModel"),Kmr=o(" (Marian model)"),Zmr=l(),RF=a("li"),T2e=a("strong"),egr=o("mbart"),ogr=o(" \u2014 "),YW=a("a"),rgr=o("TFMBartModel"),tgr=o(" (mBART model)"),agr=l(),PF=a("li"),M2e=a("strong"),ngr=o("mobilebert"),sgr=o(" \u2014 "),KW=a("a"),lgr=o("TFMobileBertModel"),igr=o(" (MobileBERT model)"),dgr=l(),BF=a("li"),E2e=a("strong"),cgr=o("mpnet"),fgr=o(" \u2014 "),ZW=a("a"),mgr=o("TFMPNetModel"),ggr=o(" (MPNet model)"),hgr=l(),IF=a("li"),C2e=a("strong"),pgr=o("mt5"),_gr=o(" \u2014 "),eQ=a("a"),ugr=o("TFMT5Model"),bgr=o(" (mT5 model)"),vgr=l(),NF=a("li"),w2e=a("strong"),Fgr=o("openai-gpt"),Tgr=o(" \u2014 "),oQ=a("a"),Mgr=o("TFOpenAIGPTModel"),Egr=o(" (OpenAI GPT model)"),Cgr=l(),qF=a("li"),A2e=a("strong"),wgr=o("opt"),Agr=o(" \u2014 "),rQ=a("a"),ygr=o("TFOPTModel"),Lgr=o(" (OPT model)"),xgr=l(),jF=a("li"),y2e=a("strong"),$gr=o("pegasus"),kgr=o(" \u2014 "),tQ=a("a"),Sgr=o("TFPegasusModel"),Rgr=o(" (Pegasus model)"),Pgr=l(),DF=a("li"),L2e=a("strong"),Bgr=o("rembert"),Igr=o(" \u2014 "),aQ=a("a"),Ngr=o("TFRemBertModel"),qgr=o(" (RemBERT model)"),jgr=l(),GF=a("li"),x2e=a("strong"),Dgr=o("roberta"),Ggr=o(" \u2014 "),nQ=a("a"),Ogr=o("TFRobertaModel"),Vgr=o(" (RoBERTa model)"),Xgr=l(),OF=a("li"),$2e=a("strong"),zgr=o("roformer"),Wgr=o(" \u2014 "),sQ=a("a"),Qgr=o("TFRoFormerModel"),Hgr=o(" (RoFormer model)"),Ugr=l(),VF=a("li"),k2e=a("strong"),Jgr=o("speech_to_text"),Ygr=o(" \u2014 "),lQ=a("a"),Kgr=o("TFSpeech2TextModel"),Zgr=o(" (Speech2Text model)"),ehr=l(),XF=a("li"),S2e=a("strong"),ohr=o("swin"),rhr=o(" \u2014 "),iQ=a("a"),thr=o("TFSwinModel"),ahr=o(" (Swin model)"),nhr=l(),zF=a("li"),R2e=a("strong"),shr=o("t5"),lhr=o(" \u2014 "),dQ=a("a"),ihr=o("TFT5Model"),dhr=o(" (T5 model)"),chr=l(),WF=a("li"),P2e=a("strong"),fhr=o("tapas"),mhr=o(" \u2014 "),cQ=a("a"),ghr=o("TFTapasModel"),hhr=o(" (TAPAS model)"),phr=l(),QF=a("li"),B2e=a("strong"),_hr=o("transfo-xl"),uhr=o(" \u2014 "),fQ=a("a"),bhr=o("TFTransfoXLModel"),vhr=o(" (Transformer-XL model)"),Fhr=l(),HF=a("li"),I2e=a("strong"),Thr=o("vit"),Mhr=o(" \u2014 "),mQ=a("a"),Ehr=o("TFViTModel"),Chr=o(" (ViT model)"),whr=l(),UF=a("li"),N2e=a("strong"),Ahr=o("vit_mae"),yhr=o(" \u2014 "),gQ=a("a"),Lhr=o("TFViTMAEModel"),xhr=o(" (ViTMAE model)"),$hr=l(),JF=a("li"),q2e=a("strong"),khr=o("wav2vec2"),Shr=o(" \u2014 "),hQ=a("a"),Rhr=o("TFWav2Vec2Model"),Phr=o(" (Wav2Vec2 model)"),Bhr=l(),YF=a("li"),j2e=a("strong"),Ihr=o("xlm"),Nhr=o(" \u2014 "),pQ=a("a"),qhr=o("TFXLMModel"),jhr=o(" (XLM model)"),Dhr=l(),KF=a("li"),D2e=a("strong"),Ghr=o("xlm-roberta"),Ohr=o(" \u2014 "),_Q=a("a"),Vhr=o("TFXLMRobertaModel"),Xhr=o(" (XLM-RoBERTa model)"),zhr=l(),ZF=a("li"),G2e=a("strong"),Whr=o("xlnet"),Qhr=o(" \u2014 "),uQ=a("a"),Hhr=o("TFXLNetModel"),Uhr=o(" (XLNet model)"),Jhr=l(),F(eT.$$.fragment),zje=l(),zd=a("h2"),oT=a("a"),O2e=a("span"),F(E8.$$.fragment),Yhr=l(),V2e=a("span"),Khr=o("TFAutoModelForPreTraining"),Wje=l(),Ko=a("div"),F(C8.$$.fragment),Zhr=l(),Wd=a("p"),epr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),bQ=a("a"),opr=o("from_pretrained()"),rpr=o(" class method or the "),vQ=a("a"),tpr=o("from_config()"),apr=o(` class
method.`),npr=l(),w8=a("p"),spr=o("This class cannot be instantiated directly using "),X2e=a("code"),lpr=o("__init__()"),ipr=o(" (throws an error)."),dpr=l(),xt=a("div"),F(A8.$$.fragment),cpr=l(),z2e=a("p"),fpr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mpr=l(),Qd=a("p"),gpr=o(`Note:
Loading a model from its configuration file does `),W2e=a("strong"),hpr=o("not"),ppr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),_pr=o("from_pretrained()"),upr=o(" to load the model weights."),bpr=l(),F(rT.$$.fragment),vpr=l(),Ar=a("div"),F(y8.$$.fragment),Fpr=l(),Q2e=a("p"),Tpr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Mpr=l(),Za=a("p"),Epr=o("The model class to instantiate is selected based on the "),H2e=a("code"),Cpr=o("model_type"),wpr=o(` property of the config object (either
passed as an argument or loaded from `),U2e=a("code"),Apr=o("pretrained_model_name_or_path"),ypr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=a("code"),Lpr=o("pretrained_model_name_or_path"),xpr=o(":"),$pr=l(),se=a("ul"),tT=a("li"),Y2e=a("strong"),kpr=o("albert"),Spr=o(" \u2014 "),TQ=a("a"),Rpr=o("TFAlbertForPreTraining"),Ppr=o(" (ALBERT model)"),Bpr=l(),aT=a("li"),K2e=a("strong"),Ipr=o("bart"),Npr=o(" \u2014 "),MQ=a("a"),qpr=o("TFBartForConditionalGeneration"),jpr=o(" (BART model)"),Dpr=l(),nT=a("li"),Z2e=a("strong"),Gpr=o("bert"),Opr=o(" \u2014 "),EQ=a("a"),Vpr=o("TFBertForPreTraining"),Xpr=o(" (BERT model)"),zpr=l(),sT=a("li"),e4e=a("strong"),Wpr=o("camembert"),Qpr=o(" \u2014 "),CQ=a("a"),Hpr=o("TFCamembertForMaskedLM"),Upr=o(" (CamemBERT model)"),Jpr=l(),lT=a("li"),o4e=a("strong"),Ypr=o("ctrl"),Kpr=o(" \u2014 "),wQ=a("a"),Zpr=o("TFCTRLLMHeadModel"),e_r=o(" (CTRL model)"),o_r=l(),iT=a("li"),r4e=a("strong"),r_r=o("distilbert"),t_r=o(" \u2014 "),AQ=a("a"),a_r=o("TFDistilBertForMaskedLM"),n_r=o(" (DistilBERT model)"),s_r=l(),dT=a("li"),t4e=a("strong"),l_r=o("electra"),i_r=o(" \u2014 "),yQ=a("a"),d_r=o("TFElectraForPreTraining"),c_r=o(" (ELECTRA model)"),f_r=l(),cT=a("li"),a4e=a("strong"),m_r=o("flaubert"),g_r=o(" \u2014 "),LQ=a("a"),h_r=o("TFFlaubertWithLMHeadModel"),p_r=o(" (FlauBERT model)"),__r=l(),fT=a("li"),n4e=a("strong"),u_r=o("funnel"),b_r=o(" \u2014 "),xQ=a("a"),v_r=o("TFFunnelForPreTraining"),F_r=o(" (Funnel Transformer model)"),T_r=l(),mT=a("li"),s4e=a("strong"),M_r=o("gpt2"),E_r=o(" \u2014 "),$Q=a("a"),C_r=o("TFGPT2LMHeadModel"),w_r=o(" (OpenAI GPT-2 model)"),A_r=l(),gT=a("li"),l4e=a("strong"),y_r=o("layoutlm"),L_r=o(" \u2014 "),kQ=a("a"),x_r=o("TFLayoutLMForMaskedLM"),$_r=o(" (LayoutLM model)"),k_r=l(),hT=a("li"),i4e=a("strong"),S_r=o("lxmert"),R_r=o(" \u2014 "),SQ=a("a"),P_r=o("TFLxmertForPreTraining"),B_r=o(" (LXMERT model)"),I_r=l(),pT=a("li"),d4e=a("strong"),N_r=o("mobilebert"),q_r=o(" \u2014 "),RQ=a("a"),j_r=o("TFMobileBertForPreTraining"),D_r=o(" (MobileBERT model)"),G_r=l(),_T=a("li"),c4e=a("strong"),O_r=o("mpnet"),V_r=o(" \u2014 "),PQ=a("a"),X_r=o("TFMPNetForMaskedLM"),z_r=o(" (MPNet model)"),W_r=l(),uT=a("li"),f4e=a("strong"),Q_r=o("openai-gpt"),H_r=o(" \u2014 "),BQ=a("a"),U_r=o("TFOpenAIGPTLMHeadModel"),J_r=o(" (OpenAI GPT model)"),Y_r=l(),bT=a("li"),m4e=a("strong"),K_r=o("roberta"),Z_r=o(" \u2014 "),IQ=a("a"),eur=o("TFRobertaForMaskedLM"),our=o(" (RoBERTa model)"),rur=l(),vT=a("li"),g4e=a("strong"),tur=o("t5"),aur=o(" \u2014 "),NQ=a("a"),nur=o("TFT5ForConditionalGeneration"),sur=o(" (T5 model)"),lur=l(),FT=a("li"),h4e=a("strong"),iur=o("tapas"),dur=o(" \u2014 "),qQ=a("a"),cur=o("TFTapasForMaskedLM"),fur=o(" (TAPAS model)"),mur=l(),TT=a("li"),p4e=a("strong"),gur=o("transfo-xl"),hur=o(" \u2014 "),jQ=a("a"),pur=o("TFTransfoXLLMHeadModel"),_ur=o(" (Transformer-XL model)"),uur=l(),MT=a("li"),_4e=a("strong"),bur=o("vit_mae"),vur=o(" \u2014 "),DQ=a("a"),Fur=o("TFViTMAEForPreTraining"),Tur=o(" (ViTMAE model)"),Mur=l(),ET=a("li"),u4e=a("strong"),Eur=o("xlm"),Cur=o(" \u2014 "),GQ=a("a"),wur=o("TFXLMWithLMHeadModel"),Aur=o(" (XLM model)"),yur=l(),CT=a("li"),b4e=a("strong"),Lur=o("xlm-roberta"),xur=o(" \u2014 "),OQ=a("a"),$ur=o("TFXLMRobertaForMaskedLM"),kur=o(" (XLM-RoBERTa model)"),Sur=l(),wT=a("li"),v4e=a("strong"),Rur=o("xlnet"),Pur=o(" \u2014 "),VQ=a("a"),Bur=o("TFXLNetLMHeadModel"),Iur=o(" (XLNet model)"),Nur=l(),F(AT.$$.fragment),Qje=l(),Hd=a("h2"),yT=a("a"),F4e=a("span"),F(L8.$$.fragment),qur=l(),T4e=a("span"),jur=o("TFAutoModelForCausalLM"),Hje=l(),Zo=a("div"),F(x8.$$.fragment),Dur=l(),Ud=a("p"),Gur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),XQ=a("a"),Our=o("from_pretrained()"),Vur=o(" class method or the "),zQ=a("a"),Xur=o("from_config()"),zur=o(` class
method.`),Wur=l(),$8=a("p"),Qur=o("This class cannot be instantiated directly using "),M4e=a("code"),Hur=o("__init__()"),Uur=o(" (throws an error)."),Jur=l(),$t=a("div"),F(k8.$$.fragment),Yur=l(),E4e=a("p"),Kur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Zur=l(),Jd=a("p"),e1r=o(`Note:
Loading a model from its configuration file does `),C4e=a("strong"),o1r=o("not"),r1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=a("a"),t1r=o("from_pretrained()"),a1r=o(" to load the model weights."),n1r=l(),F(LT.$$.fragment),s1r=l(),yr=a("div"),F(S8.$$.fragment),l1r=l(),w4e=a("p"),i1r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),d1r=l(),en=a("p"),c1r=o("The model class to instantiate is selected based on the "),A4e=a("code"),f1r=o("model_type"),m1r=o(` property of the config object (either
passed as an argument or loaded from `),y4e=a("code"),g1r=o("pretrained_model_name_or_path"),h1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L4e=a("code"),p1r=o("pretrained_model_name_or_path"),_1r=o(":"),u1r=l(),Me=a("ul"),xT=a("li"),x4e=a("strong"),b1r=o("bert"),v1r=o(" \u2014 "),QQ=a("a"),F1r=o("TFBertLMHeadModel"),T1r=o(" (BERT model)"),M1r=l(),$T=a("li"),$4e=a("strong"),E1r=o("camembert"),C1r=o(" \u2014 "),HQ=a("a"),w1r=o("TFCamembertForCausalLM"),A1r=o(" (CamemBERT model)"),y1r=l(),kT=a("li"),k4e=a("strong"),L1r=o("ctrl"),x1r=o(" \u2014 "),UQ=a("a"),$1r=o("TFCTRLLMHeadModel"),k1r=o(" (CTRL model)"),S1r=l(),ST=a("li"),S4e=a("strong"),R1r=o("gpt2"),P1r=o(" \u2014 "),JQ=a("a"),B1r=o("TFGPT2LMHeadModel"),I1r=o(" (OpenAI GPT-2 model)"),N1r=l(),RT=a("li"),R4e=a("strong"),q1r=o("gptj"),j1r=o(" \u2014 "),YQ=a("a"),D1r=o("TFGPTJForCausalLM"),G1r=o(" (GPT-J model)"),O1r=l(),PT=a("li"),P4e=a("strong"),V1r=o("openai-gpt"),X1r=o(" \u2014 "),KQ=a("a"),z1r=o("TFOpenAIGPTLMHeadModel"),W1r=o(" (OpenAI GPT model)"),Q1r=l(),BT=a("li"),B4e=a("strong"),H1r=o("opt"),U1r=o(" \u2014 "),ZQ=a("a"),J1r=o("TFOPTForCausalLM"),Y1r=o(" (OPT model)"),K1r=l(),IT=a("li"),I4e=a("strong"),Z1r=o("rembert"),ebr=o(" \u2014 "),eH=a("a"),obr=o("TFRemBertForCausalLM"),rbr=o(" (RemBERT model)"),tbr=l(),NT=a("li"),N4e=a("strong"),abr=o("roberta"),nbr=o(" \u2014 "),oH=a("a"),sbr=o("TFRobertaForCausalLM"),lbr=o(" (RoBERTa model)"),ibr=l(),qT=a("li"),q4e=a("strong"),dbr=o("roformer"),cbr=o(" \u2014 "),rH=a("a"),fbr=o("TFRoFormerForCausalLM"),mbr=o(" (RoFormer model)"),gbr=l(),jT=a("li"),j4e=a("strong"),hbr=o("transfo-xl"),pbr=o(" \u2014 "),tH=a("a"),_br=o("TFTransfoXLLMHeadModel"),ubr=o(" (Transformer-XL model)"),bbr=l(),DT=a("li"),D4e=a("strong"),vbr=o("xlm"),Fbr=o(" \u2014 "),aH=a("a"),Tbr=o("TFXLMWithLMHeadModel"),Mbr=o(" (XLM model)"),Ebr=l(),GT=a("li"),G4e=a("strong"),Cbr=o("xlnet"),wbr=o(" \u2014 "),nH=a("a"),Abr=o("TFXLNetLMHeadModel"),ybr=o(" (XLNet model)"),Lbr=l(),F(OT.$$.fragment),Uje=l(),Yd=a("h2"),VT=a("a"),O4e=a("span"),F(R8.$$.fragment),xbr=l(),V4e=a("span"),$br=o("TFAutoModelForImageClassification"),Jje=l(),er=a("div"),F(P8.$$.fragment),kbr=l(),Kd=a("p"),Sbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sH=a("a"),Rbr=o("from_pretrained()"),Pbr=o(" class method or the "),lH=a("a"),Bbr=o("from_config()"),Ibr=o(` class
method.`),Nbr=l(),B8=a("p"),qbr=o("This class cannot be instantiated directly using "),X4e=a("code"),jbr=o("__init__()"),Dbr=o(" (throws an error)."),Gbr=l(),kt=a("div"),F(I8.$$.fragment),Obr=l(),z4e=a("p"),Vbr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Xbr=l(),Zd=a("p"),zbr=o(`Note:
Loading a model from its configuration file does `),W4e=a("strong"),Wbr=o("not"),Qbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=a("a"),Hbr=o("from_pretrained()"),Ubr=o(" to load the model weights."),Jbr=l(),F(XT.$$.fragment),Ybr=l(),Lr=a("div"),F(N8.$$.fragment),Kbr=l(),Q4e=a("p"),Zbr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),e2r=l(),on=a("p"),o2r=o("The model class to instantiate is selected based on the "),H4e=a("code"),r2r=o("model_type"),t2r=o(` property of the config object (either
passed as an argument or loaded from `),U4e=a("code"),a2r=o("pretrained_model_name_or_path"),n2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=a("code"),s2r=o("pretrained_model_name_or_path"),l2r=o(":"),i2r=l(),rn=a("ul"),zT=a("li"),Y4e=a("strong"),d2r=o("convnext"),c2r=o(" \u2014 "),dH=a("a"),f2r=o("TFConvNextForImageClassification"),m2r=o(" (ConvNext model)"),g2r=l(),WT=a("li"),K4e=a("strong"),h2r=o("data2vec-vision"),p2r=o(" \u2014 "),cH=a("a"),_2r=o("TFData2VecVisionForImageClassification"),u2r=o(" (Data2VecVision model)"),b2r=l(),QT=a("li"),Z4e=a("strong"),v2r=o("swin"),F2r=o(" \u2014 "),fH=a("a"),T2r=o("TFSwinForImageClassification"),M2r=o(" (Swin model)"),E2r=l(),HT=a("li"),e5e=a("strong"),C2r=o("vit"),w2r=o(" \u2014 "),mH=a("a"),A2r=o("TFViTForImageClassification"),y2r=o(" (ViT model)"),L2r=l(),F(UT.$$.fragment),Yje=l(),ec=a("h2"),JT=a("a"),o5e=a("span"),F(q8.$$.fragment),x2r=l(),r5e=a("span"),$2r=o("TFAutoModelForMaskedLM"),Kje=l(),or=a("div"),F(j8.$$.fragment),k2r=l(),oc=a("p"),S2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gH=a("a"),R2r=o("from_pretrained()"),P2r=o(" class method or the "),hH=a("a"),B2r=o("from_config()"),I2r=o(` class
method.`),N2r=l(),D8=a("p"),q2r=o("This class cannot be instantiated directly using "),t5e=a("code"),j2r=o("__init__()"),D2r=o(" (throws an error)."),G2r=l(),St=a("div"),F(G8.$$.fragment),O2r=l(),a5e=a("p"),V2r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),X2r=l(),rc=a("p"),z2r=o(`Note:
Loading a model from its configuration file does `),n5e=a("strong"),W2r=o("not"),Q2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=a("a"),H2r=o("from_pretrained()"),U2r=o(" to load the model weights."),J2r=l(),F(YT.$$.fragment),Y2r=l(),xr=a("div"),F(O8.$$.fragment),K2r=l(),s5e=a("p"),Z2r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),e4r=l(),tn=a("p"),o4r=o("The model class to instantiate is selected based on the "),l5e=a("code"),r4r=o("model_type"),t4r=o(` property of the config object (either
passed as an argument or loaded from `),i5e=a("code"),a4r=o("pretrained_model_name_or_path"),n4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=a("code"),s4r=o("pretrained_model_name_or_path"),l4r=o(":"),i4r=l(),ie=a("ul"),KT=a("li"),c5e=a("strong"),d4r=o("albert"),c4r=o(" \u2014 "),_H=a("a"),f4r=o("TFAlbertForMaskedLM"),m4r=o(" (ALBERT model)"),g4r=l(),ZT=a("li"),f5e=a("strong"),h4r=o("bert"),p4r=o(" \u2014 "),uH=a("a"),_4r=o("TFBertForMaskedLM"),u4r=o(" (BERT model)"),b4r=l(),e7=a("li"),m5e=a("strong"),v4r=o("camembert"),F4r=o(" \u2014 "),bH=a("a"),T4r=o("TFCamembertForMaskedLM"),M4r=o(" (CamemBERT model)"),E4r=l(),o7=a("li"),g5e=a("strong"),C4r=o("convbert"),w4r=o(" \u2014 "),vH=a("a"),A4r=o("TFConvBertForMaskedLM"),y4r=o(" (ConvBERT model)"),L4r=l(),r7=a("li"),h5e=a("strong"),x4r=o("deberta"),$4r=o(" \u2014 "),FH=a("a"),k4r=o("TFDebertaForMaskedLM"),S4r=o(" (DeBERTa model)"),R4r=l(),t7=a("li"),p5e=a("strong"),P4r=o("deberta-v2"),B4r=o(" \u2014 "),TH=a("a"),I4r=o("TFDebertaV2ForMaskedLM"),N4r=o(" (DeBERTa-v2 model)"),q4r=l(),a7=a("li"),_5e=a("strong"),j4r=o("distilbert"),D4r=o(" \u2014 "),MH=a("a"),G4r=o("TFDistilBertForMaskedLM"),O4r=o(" (DistilBERT model)"),V4r=l(),n7=a("li"),u5e=a("strong"),X4r=o("electra"),z4r=o(" \u2014 "),EH=a("a"),W4r=o("TFElectraForMaskedLM"),Q4r=o(" (ELECTRA model)"),H4r=l(),s7=a("li"),b5e=a("strong"),U4r=o("flaubert"),J4r=o(" \u2014 "),CH=a("a"),Y4r=o("TFFlaubertWithLMHeadModel"),K4r=o(" (FlauBERT model)"),Z4r=l(),l7=a("li"),v5e=a("strong"),e5r=o("funnel"),o5r=o(" \u2014 "),wH=a("a"),r5r=o("TFFunnelForMaskedLM"),t5r=o(" (Funnel Transformer model)"),a5r=l(),i7=a("li"),F5e=a("strong"),n5r=o("layoutlm"),s5r=o(" \u2014 "),AH=a("a"),l5r=o("TFLayoutLMForMaskedLM"),i5r=o(" (LayoutLM model)"),d5r=l(),d7=a("li"),T5e=a("strong"),c5r=o("longformer"),f5r=o(" \u2014 "),yH=a("a"),m5r=o("TFLongformerForMaskedLM"),g5r=o(" (Longformer model)"),h5r=l(),c7=a("li"),M5e=a("strong"),p5r=o("mobilebert"),_5r=o(" \u2014 "),LH=a("a"),u5r=o("TFMobileBertForMaskedLM"),b5r=o(" (MobileBERT model)"),v5r=l(),f7=a("li"),E5e=a("strong"),F5r=o("mpnet"),T5r=o(" \u2014 "),xH=a("a"),M5r=o("TFMPNetForMaskedLM"),E5r=o(" (MPNet model)"),C5r=l(),m7=a("li"),C5e=a("strong"),w5r=o("rembert"),A5r=o(" \u2014 "),$H=a("a"),y5r=o("TFRemBertForMaskedLM"),L5r=o(" (RemBERT model)"),x5r=l(),g7=a("li"),w5e=a("strong"),$5r=o("roberta"),k5r=o(" \u2014 "),kH=a("a"),S5r=o("TFRobertaForMaskedLM"),R5r=o(" (RoBERTa model)"),P5r=l(),h7=a("li"),A5e=a("strong"),B5r=o("roformer"),I5r=o(" \u2014 "),SH=a("a"),N5r=o("TFRoFormerForMaskedLM"),q5r=o(" (RoFormer model)"),j5r=l(),p7=a("li"),y5e=a("strong"),D5r=o("tapas"),G5r=o(" \u2014 "),RH=a("a"),O5r=o("TFTapasForMaskedLM"),V5r=o(" (TAPAS model)"),X5r=l(),_7=a("li"),L5e=a("strong"),z5r=o("xlm"),W5r=o(" \u2014 "),PH=a("a"),Q5r=o("TFXLMWithLMHeadModel"),H5r=o(" (XLM model)"),U5r=l(),u7=a("li"),x5e=a("strong"),J5r=o("xlm-roberta"),Y5r=o(" \u2014 "),BH=a("a"),K5r=o("TFXLMRobertaForMaskedLM"),Z5r=o(" (XLM-RoBERTa model)"),evr=l(),F(b7.$$.fragment),Zje=l(),tc=a("h2"),v7=a("a"),$5e=a("span"),F(V8.$$.fragment),ovr=l(),k5e=a("span"),rvr=o("TFAutoModelForSeq2SeqLM"),eDe=l(),rr=a("div"),F(X8.$$.fragment),tvr=l(),ac=a("p"),avr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IH=a("a"),nvr=o("from_pretrained()"),svr=o(" class method or the "),NH=a("a"),lvr=o("from_config()"),ivr=o(` class
method.`),dvr=l(),z8=a("p"),cvr=o("This class cannot be instantiated directly using "),S5e=a("code"),fvr=o("__init__()"),mvr=o(" (throws an error)."),gvr=l(),Rt=a("div"),F(W8.$$.fragment),hvr=l(),R5e=a("p"),pvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_vr=l(),nc=a("p"),uvr=o(`Note:
Loading a model from its configuration file does `),P5e=a("strong"),bvr=o("not"),vvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=a("a"),Fvr=o("from_pretrained()"),Tvr=o(" to load the model weights."),Mvr=l(),F(F7.$$.fragment),Evr=l(),$r=a("div"),F(Q8.$$.fragment),Cvr=l(),B5e=a("p"),wvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Avr=l(),an=a("p"),yvr=o("The model class to instantiate is selected based on the "),I5e=a("code"),Lvr=o("model_type"),xvr=o(` property of the config object (either
passed as an argument or loaded from `),N5e=a("code"),$vr=o("pretrained_model_name_or_path"),kvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q5e=a("code"),Svr=o("pretrained_model_name_or_path"),Rvr=o(":"),Pvr=l(),ye=a("ul"),T7=a("li"),j5e=a("strong"),Bvr=o("bart"),Ivr=o(" \u2014 "),jH=a("a"),Nvr=o("TFBartForConditionalGeneration"),qvr=o(" (BART model)"),jvr=l(),M7=a("li"),D5e=a("strong"),Dvr=o("blenderbot"),Gvr=o(" \u2014 "),DH=a("a"),Ovr=o("TFBlenderbotForConditionalGeneration"),Vvr=o(" (Blenderbot model)"),Xvr=l(),E7=a("li"),G5e=a("strong"),zvr=o("blenderbot-small"),Wvr=o(" \u2014 "),GH=a("a"),Qvr=o("TFBlenderbotSmallForConditionalGeneration"),Hvr=o(" (BlenderbotSmall model)"),Uvr=l(),C7=a("li"),O5e=a("strong"),Jvr=o("encoder-decoder"),Yvr=o(" \u2014 "),OH=a("a"),Kvr=o("TFEncoderDecoderModel"),Zvr=o(" (Encoder decoder model)"),e3r=l(),w7=a("li"),V5e=a("strong"),o3r=o("led"),r3r=o(" \u2014 "),VH=a("a"),t3r=o("TFLEDForConditionalGeneration"),a3r=o(" (LED model)"),n3r=l(),A7=a("li"),X5e=a("strong"),s3r=o("marian"),l3r=o(" \u2014 "),XH=a("a"),i3r=o("TFMarianMTModel"),d3r=o(" (Marian model)"),c3r=l(),y7=a("li"),z5e=a("strong"),f3r=o("mbart"),m3r=o(" \u2014 "),zH=a("a"),g3r=o("TFMBartForConditionalGeneration"),h3r=o(" (mBART model)"),p3r=l(),L7=a("li"),W5e=a("strong"),_3r=o("mt5"),u3r=o(" \u2014 "),WH=a("a"),b3r=o("TFMT5ForConditionalGeneration"),v3r=o(" (mT5 model)"),F3r=l(),x7=a("li"),Q5e=a("strong"),T3r=o("pegasus"),M3r=o(" \u2014 "),QH=a("a"),E3r=o("TFPegasusForConditionalGeneration"),C3r=o(" (Pegasus model)"),w3r=l(),$7=a("li"),H5e=a("strong"),A3r=o("t5"),y3r=o(" \u2014 "),HH=a("a"),L3r=o("TFT5ForConditionalGeneration"),x3r=o(" (T5 model)"),$3r=l(),F(k7.$$.fragment),oDe=l(),sc=a("h2"),S7=a("a"),U5e=a("span"),F(H8.$$.fragment),k3r=l(),J5e=a("span"),S3r=o("TFAutoModelForSequenceClassification"),rDe=l(),tr=a("div"),F(U8.$$.fragment),R3r=l(),lc=a("p"),P3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UH=a("a"),B3r=o("from_pretrained()"),I3r=o(" class method or the "),JH=a("a"),N3r=o("from_config()"),q3r=o(` class
method.`),j3r=l(),J8=a("p"),D3r=o("This class cannot be instantiated directly using "),Y5e=a("code"),G3r=o("__init__()"),O3r=o(" (throws an error)."),V3r=l(),Pt=a("div"),F(Y8.$$.fragment),X3r=l(),K5e=a("p"),z3r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),W3r=l(),ic=a("p"),Q3r=o(`Note:
Loading a model from its configuration file does `),Z5e=a("strong"),H3r=o("not"),U3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),J3r=o("from_pretrained()"),Y3r=o(" to load the model weights."),K3r=l(),F(R7.$$.fragment),Z3r=l(),kr=a("div"),F(K8.$$.fragment),eFr=l(),eve=a("p"),oFr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rFr=l(),nn=a("p"),tFr=o("The model class to instantiate is selected based on the "),ove=a("code"),aFr=o("model_type"),nFr=o(` property of the config object (either
passed as an argument or loaded from `),rve=a("code"),sFr=o("pretrained_model_name_or_path"),lFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tve=a("code"),iFr=o("pretrained_model_name_or_path"),dFr=o(":"),cFr=l(),oe=a("ul"),P7=a("li"),ave=a("strong"),fFr=o("albert"),mFr=o(" \u2014 "),KH=a("a"),gFr=o("TFAlbertForSequenceClassification"),hFr=o(" (ALBERT model)"),pFr=l(),B7=a("li"),nve=a("strong"),_Fr=o("bert"),uFr=o(" \u2014 "),ZH=a("a"),bFr=o("TFBertForSequenceClassification"),vFr=o(" (BERT model)"),FFr=l(),I7=a("li"),sve=a("strong"),TFr=o("camembert"),MFr=o(" \u2014 "),eU=a("a"),EFr=o("TFCamembertForSequenceClassification"),CFr=o(" (CamemBERT model)"),wFr=l(),N7=a("li"),lve=a("strong"),AFr=o("convbert"),yFr=o(" \u2014 "),oU=a("a"),LFr=o("TFConvBertForSequenceClassification"),xFr=o(" (ConvBERT model)"),$Fr=l(),q7=a("li"),ive=a("strong"),kFr=o("ctrl"),SFr=o(" \u2014 "),rU=a("a"),RFr=o("TFCTRLForSequenceClassification"),PFr=o(" (CTRL model)"),BFr=l(),j7=a("li"),dve=a("strong"),IFr=o("deberta"),NFr=o(" \u2014 "),tU=a("a"),qFr=o("TFDebertaForSequenceClassification"),jFr=o(" (DeBERTa model)"),DFr=l(),D7=a("li"),cve=a("strong"),GFr=o("deberta-v2"),OFr=o(" \u2014 "),aU=a("a"),VFr=o("TFDebertaV2ForSequenceClassification"),XFr=o(" (DeBERTa-v2 model)"),zFr=l(),G7=a("li"),fve=a("strong"),WFr=o("distilbert"),QFr=o(" \u2014 "),nU=a("a"),HFr=o("TFDistilBertForSequenceClassification"),UFr=o(" (DistilBERT model)"),JFr=l(),O7=a("li"),mve=a("strong"),YFr=o("electra"),KFr=o(" \u2014 "),sU=a("a"),ZFr=o("TFElectraForSequenceClassification"),eTr=o(" (ELECTRA model)"),oTr=l(),V7=a("li"),gve=a("strong"),rTr=o("flaubert"),tTr=o(" \u2014 "),lU=a("a"),aTr=o("TFFlaubertForSequenceClassification"),nTr=o(" (FlauBERT model)"),sTr=l(),X7=a("li"),hve=a("strong"),lTr=o("funnel"),iTr=o(" \u2014 "),iU=a("a"),dTr=o("TFFunnelForSequenceClassification"),cTr=o(" (Funnel Transformer model)"),fTr=l(),z7=a("li"),pve=a("strong"),mTr=o("gpt2"),gTr=o(" \u2014 "),dU=a("a"),hTr=o("TFGPT2ForSequenceClassification"),pTr=o(" (OpenAI GPT-2 model)"),_Tr=l(),W7=a("li"),_ve=a("strong"),uTr=o("gptj"),bTr=o(" \u2014 "),cU=a("a"),vTr=o("TFGPTJForSequenceClassification"),FTr=o(" (GPT-J model)"),TTr=l(),Q7=a("li"),uve=a("strong"),MTr=o("layoutlm"),ETr=o(" \u2014 "),fU=a("a"),CTr=o("TFLayoutLMForSequenceClassification"),wTr=o(" (LayoutLM model)"),ATr=l(),H7=a("li"),bve=a("strong"),yTr=o("longformer"),LTr=o(" \u2014 "),mU=a("a"),xTr=o("TFLongformerForSequenceClassification"),$Tr=o(" (Longformer model)"),kTr=l(),U7=a("li"),vve=a("strong"),STr=o("mobilebert"),RTr=o(" \u2014 "),gU=a("a"),PTr=o("TFMobileBertForSequenceClassification"),BTr=o(" (MobileBERT model)"),ITr=l(),J7=a("li"),Fve=a("strong"),NTr=o("mpnet"),qTr=o(" \u2014 "),hU=a("a"),jTr=o("TFMPNetForSequenceClassification"),DTr=o(" (MPNet model)"),GTr=l(),Y7=a("li"),Tve=a("strong"),OTr=o("openai-gpt"),VTr=o(" \u2014 "),pU=a("a"),XTr=o("TFOpenAIGPTForSequenceClassification"),zTr=o(" (OpenAI GPT model)"),WTr=l(),K7=a("li"),Mve=a("strong"),QTr=o("rembert"),HTr=o(" \u2014 "),_U=a("a"),UTr=o("TFRemBertForSequenceClassification"),JTr=o(" (RemBERT model)"),YTr=l(),Z7=a("li"),Eve=a("strong"),KTr=o("roberta"),ZTr=o(" \u2014 "),uU=a("a"),e7r=o("TFRobertaForSequenceClassification"),o7r=o(" (RoBERTa model)"),r7r=l(),eM=a("li"),Cve=a("strong"),t7r=o("roformer"),a7r=o(" \u2014 "),bU=a("a"),n7r=o("TFRoFormerForSequenceClassification"),s7r=o(" (RoFormer model)"),l7r=l(),oM=a("li"),wve=a("strong"),i7r=o("tapas"),d7r=o(" \u2014 "),vU=a("a"),c7r=o("TFTapasForSequenceClassification"),f7r=o(" (TAPAS model)"),m7r=l(),rM=a("li"),Ave=a("strong"),g7r=o("transfo-xl"),h7r=o(" \u2014 "),FU=a("a"),p7r=o("TFTransfoXLForSequenceClassification"),_7r=o(" (Transformer-XL model)"),u7r=l(),tM=a("li"),yve=a("strong"),b7r=o("xlm"),v7r=o(" \u2014 "),TU=a("a"),F7r=o("TFXLMForSequenceClassification"),T7r=o(" (XLM model)"),M7r=l(),aM=a("li"),Lve=a("strong"),E7r=o("xlm-roberta"),C7r=o(" \u2014 "),MU=a("a"),w7r=o("TFXLMRobertaForSequenceClassification"),A7r=o(" (XLM-RoBERTa model)"),y7r=l(),nM=a("li"),xve=a("strong"),L7r=o("xlnet"),x7r=o(" \u2014 "),EU=a("a"),$7r=o("TFXLNetForSequenceClassification"),k7r=o(" (XLNet model)"),S7r=l(),F(sM.$$.fragment),tDe=l(),dc=a("h2"),lM=a("a"),$ve=a("span"),F(Z8.$$.fragment),R7r=l(),kve=a("span"),P7r=o("TFAutoModelForMultipleChoice"),aDe=l(),ar=a("div"),F(e9.$$.fragment),B7r=l(),cc=a("p"),I7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CU=a("a"),N7r=o("from_pretrained()"),q7r=o(" class method or the "),wU=a("a"),j7r=o("from_config()"),D7r=o(` class
method.`),G7r=l(),o9=a("p"),O7r=o("This class cannot be instantiated directly using "),Sve=a("code"),V7r=o("__init__()"),X7r=o(" (throws an error)."),z7r=l(),Bt=a("div"),F(r9.$$.fragment),W7r=l(),Rve=a("p"),Q7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),H7r=l(),fc=a("p"),U7r=o(`Note:
Loading a model from its configuration file does `),Pve=a("strong"),J7r=o("not"),Y7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=a("a"),K7r=o("from_pretrained()"),Z7r=o(" to load the model weights."),eMr=l(),F(iM.$$.fragment),oMr=l(),Sr=a("div"),F(t9.$$.fragment),rMr=l(),Bve=a("p"),tMr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),aMr=l(),sn=a("p"),nMr=o("The model class to instantiate is selected based on the "),Ive=a("code"),sMr=o("model_type"),lMr=o(` property of the config object (either
passed as an argument or loaded from `),Nve=a("code"),iMr=o("pretrained_model_name_or_path"),dMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=a("code"),cMr=o("pretrained_model_name_or_path"),fMr=o(":"),mMr=l(),pe=a("ul"),dM=a("li"),jve=a("strong"),gMr=o("albert"),hMr=o(" \u2014 "),yU=a("a"),pMr=o("TFAlbertForMultipleChoice"),_Mr=o(" (ALBERT model)"),uMr=l(),cM=a("li"),Dve=a("strong"),bMr=o("bert"),vMr=o(" \u2014 "),LU=a("a"),FMr=o("TFBertForMultipleChoice"),TMr=o(" (BERT model)"),MMr=l(),fM=a("li"),Gve=a("strong"),EMr=o("camembert"),CMr=o(" \u2014 "),xU=a("a"),wMr=o("TFCamembertForMultipleChoice"),AMr=o(" (CamemBERT model)"),yMr=l(),mM=a("li"),Ove=a("strong"),LMr=o("convbert"),xMr=o(" \u2014 "),$U=a("a"),$Mr=o("TFConvBertForMultipleChoice"),kMr=o(" (ConvBERT model)"),SMr=l(),gM=a("li"),Vve=a("strong"),RMr=o("distilbert"),PMr=o(" \u2014 "),kU=a("a"),BMr=o("TFDistilBertForMultipleChoice"),IMr=o(" (DistilBERT model)"),NMr=l(),hM=a("li"),Xve=a("strong"),qMr=o("electra"),jMr=o(" \u2014 "),SU=a("a"),DMr=o("TFElectraForMultipleChoice"),GMr=o(" (ELECTRA model)"),OMr=l(),pM=a("li"),zve=a("strong"),VMr=o("flaubert"),XMr=o(" \u2014 "),RU=a("a"),zMr=o("TFFlaubertForMultipleChoice"),WMr=o(" (FlauBERT model)"),QMr=l(),_M=a("li"),Wve=a("strong"),HMr=o("funnel"),UMr=o(" \u2014 "),PU=a("a"),JMr=o("TFFunnelForMultipleChoice"),YMr=o(" (Funnel Transformer model)"),KMr=l(),uM=a("li"),Qve=a("strong"),ZMr=o("longformer"),eEr=o(" \u2014 "),BU=a("a"),oEr=o("TFLongformerForMultipleChoice"),rEr=o(" (Longformer model)"),tEr=l(),bM=a("li"),Hve=a("strong"),aEr=o("mobilebert"),nEr=o(" \u2014 "),IU=a("a"),sEr=o("TFMobileBertForMultipleChoice"),lEr=o(" (MobileBERT model)"),iEr=l(),vM=a("li"),Uve=a("strong"),dEr=o("mpnet"),cEr=o(" \u2014 "),NU=a("a"),fEr=o("TFMPNetForMultipleChoice"),mEr=o(" (MPNet model)"),gEr=l(),FM=a("li"),Jve=a("strong"),hEr=o("rembert"),pEr=o(" \u2014 "),qU=a("a"),_Er=o("TFRemBertForMultipleChoice"),uEr=o(" (RemBERT model)"),bEr=l(),TM=a("li"),Yve=a("strong"),vEr=o("roberta"),FEr=o(" \u2014 "),jU=a("a"),TEr=o("TFRobertaForMultipleChoice"),MEr=o(" (RoBERTa model)"),EEr=l(),MM=a("li"),Kve=a("strong"),CEr=o("roformer"),wEr=o(" \u2014 "),DU=a("a"),AEr=o("TFRoFormerForMultipleChoice"),yEr=o(" (RoFormer model)"),LEr=l(),EM=a("li"),Zve=a("strong"),xEr=o("xlm"),$Er=o(" \u2014 "),GU=a("a"),kEr=o("TFXLMForMultipleChoice"),SEr=o(" (XLM model)"),REr=l(),CM=a("li"),e3e=a("strong"),PEr=o("xlm-roberta"),BEr=o(" \u2014 "),OU=a("a"),IEr=o("TFXLMRobertaForMultipleChoice"),NEr=o(" (XLM-RoBERTa model)"),qEr=l(),wM=a("li"),o3e=a("strong"),jEr=o("xlnet"),DEr=o(" \u2014 "),VU=a("a"),GEr=o("TFXLNetForMultipleChoice"),OEr=o(" (XLNet model)"),VEr=l(),F(AM.$$.fragment),nDe=l(),mc=a("h2"),yM=a("a"),r3e=a("span"),F(a9.$$.fragment),XEr=l(),t3e=a("span"),zEr=o("TFAutoModelForNextSentencePrediction"),sDe=l(),nr=a("div"),F(n9.$$.fragment),WEr=l(),gc=a("p"),QEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XU=a("a"),HEr=o("from_pretrained()"),UEr=o(" class method or the "),zU=a("a"),JEr=o("from_config()"),YEr=o(` class
method.`),KEr=l(),s9=a("p"),ZEr=o("This class cannot be instantiated directly using "),a3e=a("code"),eCr=o("__init__()"),oCr=o(" (throws an error)."),rCr=l(),It=a("div"),F(l9.$$.fragment),tCr=l(),n3e=a("p"),aCr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),nCr=l(),hc=a("p"),sCr=o(`Note:
Loading a model from its configuration file does `),s3e=a("strong"),lCr=o("not"),iCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WU=a("a"),dCr=o("from_pretrained()"),cCr=o(" to load the model weights."),fCr=l(),F(LM.$$.fragment),mCr=l(),Rr=a("div"),F(i9.$$.fragment),gCr=l(),l3e=a("p"),hCr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pCr=l(),ln=a("p"),_Cr=o("The model class to instantiate is selected based on the "),i3e=a("code"),uCr=o("model_type"),bCr=o(` property of the config object (either
passed as an argument or loaded from `),d3e=a("code"),vCr=o("pretrained_model_name_or_path"),FCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=a("code"),TCr=o("pretrained_model_name_or_path"),MCr=o(":"),ECr=l(),d9=a("ul"),xM=a("li"),f3e=a("strong"),CCr=o("bert"),wCr=o(" \u2014 "),QU=a("a"),ACr=o("TFBertForNextSentencePrediction"),yCr=o(" (BERT model)"),LCr=l(),$M=a("li"),m3e=a("strong"),xCr=o("mobilebert"),$Cr=o(" \u2014 "),HU=a("a"),kCr=o("TFMobileBertForNextSentencePrediction"),SCr=o(" (MobileBERT model)"),RCr=l(),F(kM.$$.fragment),lDe=l(),pc=a("h2"),SM=a("a"),g3e=a("span"),F(c9.$$.fragment),PCr=l(),h3e=a("span"),BCr=o("TFAutoModelForTableQuestionAnswering"),iDe=l(),sr=a("div"),F(f9.$$.fragment),ICr=l(),_c=a("p"),NCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UU=a("a"),qCr=o("from_pretrained()"),jCr=o(" class method or the "),JU=a("a"),DCr=o("from_config()"),GCr=o(` class
method.`),OCr=l(),m9=a("p"),VCr=o("This class cannot be instantiated directly using "),p3e=a("code"),XCr=o("__init__()"),zCr=o(" (throws an error)."),WCr=l(),Nt=a("div"),F(g9.$$.fragment),QCr=l(),_3e=a("p"),HCr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),UCr=l(),uc=a("p"),JCr=o(`Note:
Loading a model from its configuration file does `),u3e=a("strong"),YCr=o("not"),KCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),ZCr=o("from_pretrained()"),e0r=o(" to load the model weights."),o0r=l(),F(RM.$$.fragment),r0r=l(),Pr=a("div"),F(h9.$$.fragment),t0r=l(),b3e=a("p"),a0r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),n0r=l(),dn=a("p"),s0r=o("The model class to instantiate is selected based on the "),v3e=a("code"),l0r=o("model_type"),i0r=o(` property of the config object (either
passed as an argument or loaded from `),F3e=a("code"),d0r=o("pretrained_model_name_or_path"),c0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T3e=a("code"),f0r=o("pretrained_model_name_or_path"),m0r=o(":"),g0r=l(),M3e=a("ul"),PM=a("li"),E3e=a("strong"),h0r=o("tapas"),p0r=o(" \u2014 "),KU=a("a"),_0r=o("TFTapasForQuestionAnswering"),u0r=o(" (TAPAS model)"),b0r=l(),F(BM.$$.fragment),dDe=l(),bc=a("h2"),IM=a("a"),C3e=a("span"),F(p9.$$.fragment),v0r=l(),w3e=a("span"),F0r=o("TFAutoModelForTokenClassification"),cDe=l(),lr=a("div"),F(_9.$$.fragment),T0r=l(),vc=a("p"),M0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZU=a("a"),E0r=o("from_pretrained()"),C0r=o(" class method or the "),eJ=a("a"),w0r=o("from_config()"),A0r=o(` class
method.`),y0r=l(),u9=a("p"),L0r=o("This class cannot be instantiated directly using "),A3e=a("code"),x0r=o("__init__()"),$0r=o(" (throws an error)."),k0r=l(),qt=a("div"),F(b9.$$.fragment),S0r=l(),y3e=a("p"),R0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),P0r=l(),Fc=a("p"),B0r=o(`Note:
Loading a model from its configuration file does `),L3e=a("strong"),I0r=o("not"),N0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=a("a"),q0r=o("from_pretrained()"),j0r=o(" to load the model weights."),D0r=l(),F(NM.$$.fragment),G0r=l(),Br=a("div"),F(v9.$$.fragment),O0r=l(),x3e=a("p"),V0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),X0r=l(),cn=a("p"),z0r=o("The model class to instantiate is selected based on the "),$3e=a("code"),W0r=o("model_type"),Q0r=o(` property of the config object (either
passed as an argument or loaded from `),k3e=a("code"),H0r=o("pretrained_model_name_or_path"),U0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S3e=a("code"),J0r=o("pretrained_model_name_or_path"),Y0r=o(":"),K0r=l(),de=a("ul"),qM=a("li"),R3e=a("strong"),Z0r=o("albert"),ewr=o(" \u2014 "),rJ=a("a"),owr=o("TFAlbertForTokenClassification"),rwr=o(" (ALBERT model)"),twr=l(),jM=a("li"),P3e=a("strong"),awr=o("bert"),nwr=o(" \u2014 "),tJ=a("a"),swr=o("TFBertForTokenClassification"),lwr=o(" (BERT model)"),iwr=l(),DM=a("li"),B3e=a("strong"),dwr=o("camembert"),cwr=o(" \u2014 "),aJ=a("a"),fwr=o("TFCamembertForTokenClassification"),mwr=o(" (CamemBERT model)"),gwr=l(),GM=a("li"),I3e=a("strong"),hwr=o("convbert"),pwr=o(" \u2014 "),nJ=a("a"),_wr=o("TFConvBertForTokenClassification"),uwr=o(" (ConvBERT model)"),bwr=l(),OM=a("li"),N3e=a("strong"),vwr=o("deberta"),Fwr=o(" \u2014 "),sJ=a("a"),Twr=o("TFDebertaForTokenClassification"),Mwr=o(" (DeBERTa model)"),Ewr=l(),VM=a("li"),q3e=a("strong"),Cwr=o("deberta-v2"),wwr=o(" \u2014 "),lJ=a("a"),Awr=o("TFDebertaV2ForTokenClassification"),ywr=o(" (DeBERTa-v2 model)"),Lwr=l(),XM=a("li"),j3e=a("strong"),xwr=o("distilbert"),$wr=o(" \u2014 "),iJ=a("a"),kwr=o("TFDistilBertForTokenClassification"),Swr=o(" (DistilBERT model)"),Rwr=l(),zM=a("li"),D3e=a("strong"),Pwr=o("electra"),Bwr=o(" \u2014 "),dJ=a("a"),Iwr=o("TFElectraForTokenClassification"),Nwr=o(" (ELECTRA model)"),qwr=l(),WM=a("li"),G3e=a("strong"),jwr=o("flaubert"),Dwr=o(" \u2014 "),cJ=a("a"),Gwr=o("TFFlaubertForTokenClassification"),Owr=o(" (FlauBERT model)"),Vwr=l(),QM=a("li"),O3e=a("strong"),Xwr=o("funnel"),zwr=o(" \u2014 "),fJ=a("a"),Wwr=o("TFFunnelForTokenClassification"),Qwr=o(" (Funnel Transformer model)"),Hwr=l(),HM=a("li"),V3e=a("strong"),Uwr=o("layoutlm"),Jwr=o(" \u2014 "),mJ=a("a"),Ywr=o("TFLayoutLMForTokenClassification"),Kwr=o(" (LayoutLM model)"),Zwr=l(),UM=a("li"),X3e=a("strong"),e6r=o("longformer"),o6r=o(" \u2014 "),gJ=a("a"),r6r=o("TFLongformerForTokenClassification"),t6r=o(" (Longformer model)"),a6r=l(),JM=a("li"),z3e=a("strong"),n6r=o("mobilebert"),s6r=o(" \u2014 "),hJ=a("a"),l6r=o("TFMobileBertForTokenClassification"),i6r=o(" (MobileBERT model)"),d6r=l(),YM=a("li"),W3e=a("strong"),c6r=o("mpnet"),f6r=o(" \u2014 "),pJ=a("a"),m6r=o("TFMPNetForTokenClassification"),g6r=o(" (MPNet model)"),h6r=l(),KM=a("li"),Q3e=a("strong"),p6r=o("rembert"),_6r=o(" \u2014 "),_J=a("a"),u6r=o("TFRemBertForTokenClassification"),b6r=o(" (RemBERT model)"),v6r=l(),ZM=a("li"),H3e=a("strong"),F6r=o("roberta"),T6r=o(" \u2014 "),uJ=a("a"),M6r=o("TFRobertaForTokenClassification"),E6r=o(" (RoBERTa model)"),C6r=l(),eE=a("li"),U3e=a("strong"),w6r=o("roformer"),A6r=o(" \u2014 "),bJ=a("a"),y6r=o("TFRoFormerForTokenClassification"),L6r=o(" (RoFormer model)"),x6r=l(),oE=a("li"),J3e=a("strong"),$6r=o("xlm"),k6r=o(" \u2014 "),vJ=a("a"),S6r=o("TFXLMForTokenClassification"),R6r=o(" (XLM model)"),P6r=l(),rE=a("li"),Y3e=a("strong"),B6r=o("xlm-roberta"),I6r=o(" \u2014 "),FJ=a("a"),N6r=o("TFXLMRobertaForTokenClassification"),q6r=o(" (XLM-RoBERTa model)"),j6r=l(),tE=a("li"),K3e=a("strong"),D6r=o("xlnet"),G6r=o(" \u2014 "),TJ=a("a"),O6r=o("TFXLNetForTokenClassification"),V6r=o(" (XLNet model)"),X6r=l(),F(aE.$$.fragment),fDe=l(),Tc=a("h2"),nE=a("a"),Z3e=a("span"),F(F9.$$.fragment),z6r=l(),eFe=a("span"),W6r=o("TFAutoModelForQuestionAnswering"),mDe=l(),ir=a("div"),F(T9.$$.fragment),Q6r=l(),Mc=a("p"),H6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MJ=a("a"),U6r=o("from_pretrained()"),J6r=o(" class method or the "),EJ=a("a"),Y6r=o("from_config()"),K6r=o(` class
method.`),Z6r=l(),M9=a("p"),eAr=o("This class cannot be instantiated directly using "),oFe=a("code"),oAr=o("__init__()"),rAr=o(" (throws an error)."),tAr=l(),jt=a("div"),F(E9.$$.fragment),aAr=l(),rFe=a("p"),nAr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sAr=l(),Ec=a("p"),lAr=o(`Note:
Loading a model from its configuration file does `),tFe=a("strong"),iAr=o("not"),dAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CJ=a("a"),cAr=o("from_pretrained()"),fAr=o(" to load the model weights."),mAr=l(),F(sE.$$.fragment),gAr=l(),Ir=a("div"),F(C9.$$.fragment),hAr=l(),aFe=a("p"),pAr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_Ar=l(),fn=a("p"),uAr=o("The model class to instantiate is selected based on the "),nFe=a("code"),bAr=o("model_type"),vAr=o(` property of the config object (either
passed as an argument or loaded from `),sFe=a("code"),FAr=o("pretrained_model_name_or_path"),TAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=a("code"),MAr=o("pretrained_model_name_or_path"),EAr=o(":"),CAr=l(),ce=a("ul"),lE=a("li"),iFe=a("strong"),wAr=o("albert"),AAr=o(" \u2014 "),wJ=a("a"),yAr=o("TFAlbertForQuestionAnswering"),LAr=o(" (ALBERT model)"),xAr=l(),iE=a("li"),dFe=a("strong"),$Ar=o("bert"),kAr=o(" \u2014 "),AJ=a("a"),SAr=o("TFBertForQuestionAnswering"),RAr=o(" (BERT model)"),PAr=l(),dE=a("li"),cFe=a("strong"),BAr=o("camembert"),IAr=o(" \u2014 "),yJ=a("a"),NAr=o("TFCamembertForQuestionAnswering"),qAr=o(" (CamemBERT model)"),jAr=l(),cE=a("li"),fFe=a("strong"),DAr=o("convbert"),GAr=o(" \u2014 "),LJ=a("a"),OAr=o("TFConvBertForQuestionAnswering"),VAr=o(" (ConvBERT model)"),XAr=l(),fE=a("li"),mFe=a("strong"),zAr=o("deberta"),WAr=o(" \u2014 "),xJ=a("a"),QAr=o("TFDebertaForQuestionAnswering"),HAr=o(" (DeBERTa model)"),UAr=l(),mE=a("li"),gFe=a("strong"),JAr=o("deberta-v2"),YAr=o(" \u2014 "),$J=a("a"),KAr=o("TFDebertaV2ForQuestionAnswering"),ZAr=o(" (DeBERTa-v2 model)"),eyr=l(),gE=a("li"),hFe=a("strong"),oyr=o("distilbert"),ryr=o(" \u2014 "),kJ=a("a"),tyr=o("TFDistilBertForQuestionAnswering"),ayr=o(" (DistilBERT model)"),nyr=l(),hE=a("li"),pFe=a("strong"),syr=o("electra"),lyr=o(" \u2014 "),SJ=a("a"),iyr=o("TFElectraForQuestionAnswering"),dyr=o(" (ELECTRA model)"),cyr=l(),pE=a("li"),_Fe=a("strong"),fyr=o("flaubert"),myr=o(" \u2014 "),RJ=a("a"),gyr=o("TFFlaubertForQuestionAnsweringSimple"),hyr=o(" (FlauBERT model)"),pyr=l(),_E=a("li"),uFe=a("strong"),_yr=o("funnel"),uyr=o(" \u2014 "),PJ=a("a"),byr=o("TFFunnelForQuestionAnswering"),vyr=o(" (Funnel Transformer model)"),Fyr=l(),uE=a("li"),bFe=a("strong"),Tyr=o("gptj"),Myr=o(" \u2014 "),BJ=a("a"),Eyr=o("TFGPTJForQuestionAnswering"),Cyr=o(" (GPT-J model)"),wyr=l(),bE=a("li"),vFe=a("strong"),Ayr=o("longformer"),yyr=o(" \u2014 "),IJ=a("a"),Lyr=o("TFLongformerForQuestionAnswering"),xyr=o(" (Longformer model)"),$yr=l(),vE=a("li"),FFe=a("strong"),kyr=o("mobilebert"),Syr=o(" \u2014 "),NJ=a("a"),Ryr=o("TFMobileBertForQuestionAnswering"),Pyr=o(" (MobileBERT model)"),Byr=l(),FE=a("li"),TFe=a("strong"),Iyr=o("mpnet"),Nyr=o(" \u2014 "),qJ=a("a"),qyr=o("TFMPNetForQuestionAnswering"),jyr=o(" (MPNet model)"),Dyr=l(),TE=a("li"),MFe=a("strong"),Gyr=o("rembert"),Oyr=o(" \u2014 "),jJ=a("a"),Vyr=o("TFRemBertForQuestionAnswering"),Xyr=o(" (RemBERT model)"),zyr=l(),ME=a("li"),EFe=a("strong"),Wyr=o("roberta"),Qyr=o(" \u2014 "),DJ=a("a"),Hyr=o("TFRobertaForQuestionAnswering"),Uyr=o(" (RoBERTa model)"),Jyr=l(),EE=a("li"),CFe=a("strong"),Yyr=o("roformer"),Kyr=o(" \u2014 "),GJ=a("a"),Zyr=o("TFRoFormerForQuestionAnswering"),eLr=o(" (RoFormer model)"),oLr=l(),CE=a("li"),wFe=a("strong"),rLr=o("xlm"),tLr=o(" \u2014 "),OJ=a("a"),aLr=o("TFXLMForQuestionAnsweringSimple"),nLr=o(" (XLM model)"),sLr=l(),wE=a("li"),AFe=a("strong"),lLr=o("xlm-roberta"),iLr=o(" \u2014 "),VJ=a("a"),dLr=o("TFXLMRobertaForQuestionAnswering"),cLr=o(" (XLM-RoBERTa model)"),fLr=l(),AE=a("li"),yFe=a("strong"),mLr=o("xlnet"),gLr=o(" \u2014 "),XJ=a("a"),hLr=o("TFXLNetForQuestionAnsweringSimple"),pLr=o(" (XLNet model)"),_Lr=l(),F(yE.$$.fragment),gDe=l(),Cc=a("h2"),LE=a("a"),LFe=a("span"),F(w9.$$.fragment),uLr=l(),xFe=a("span"),bLr=o("TFAutoModelForVision2Seq"),hDe=l(),dr=a("div"),F(A9.$$.fragment),vLr=l(),wc=a("p"),FLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zJ=a("a"),TLr=o("from_pretrained()"),MLr=o(" class method or the "),WJ=a("a"),ELr=o("from_config()"),CLr=o(` class
method.`),wLr=l(),y9=a("p"),ALr=o("This class cannot be instantiated directly using "),$Fe=a("code"),yLr=o("__init__()"),LLr=o(" (throws an error)."),xLr=l(),Dt=a("div"),F(L9.$$.fragment),$Lr=l(),kFe=a("p"),kLr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),SLr=l(),Ac=a("p"),RLr=o(`Note:
Loading a model from its configuration file does `),SFe=a("strong"),PLr=o("not"),BLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),ILr=o("from_pretrained()"),NLr=o(" to load the model weights."),qLr=l(),F(xE.$$.fragment),jLr=l(),Nr=a("div"),F(x9.$$.fragment),DLr=l(),RFe=a("p"),GLr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),OLr=l(),mn=a("p"),VLr=o("The model class to instantiate is selected based on the "),PFe=a("code"),XLr=o("model_type"),zLr=o(` property of the config object (either
passed as an argument or loaded from `),BFe=a("code"),WLr=o("pretrained_model_name_or_path"),QLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=a("code"),HLr=o("pretrained_model_name_or_path"),ULr=o(":"),JLr=l(),NFe=a("ul"),$E=a("li"),qFe=a("strong"),YLr=o("vision-encoder-decoder"),KLr=o(" \u2014 "),HJ=a("a"),ZLr=o("TFVisionEncoderDecoderModel"),e8r=o(" (Vision Encoder decoder model)"),o8r=l(),F(kE.$$.fragment),pDe=l(),yc=a("h2"),SE=a("a"),jFe=a("span"),F($9.$$.fragment),r8r=l(),DFe=a("span"),t8r=o("TFAutoModelForSpeechSeq2Seq"),_De=l(),cr=a("div"),F(k9.$$.fragment),a8r=l(),Lc=a("p"),n8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),UJ=a("a"),s8r=o("from_pretrained()"),l8r=o(" class method or the "),JJ=a("a"),i8r=o("from_config()"),d8r=o(` class
method.`),c8r=l(),S9=a("p"),f8r=o("This class cannot be instantiated directly using "),GFe=a("code"),m8r=o("__init__()"),g8r=o(" (throws an error)."),h8r=l(),Gt=a("div"),F(R9.$$.fragment),p8r=l(),OFe=a("p"),_8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),u8r=l(),xc=a("p"),b8r=o(`Note:
Loading a model from its configuration file does `),VFe=a("strong"),v8r=o("not"),F8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=a("a"),T8r=o("from_pretrained()"),M8r=o(" to load the model weights."),E8r=l(),F(RE.$$.fragment),C8r=l(),qr=a("div"),F(P9.$$.fragment),w8r=l(),XFe=a("p"),A8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),y8r=l(),gn=a("p"),L8r=o("The model class to instantiate is selected based on the "),zFe=a("code"),x8r=o("model_type"),$8r=o(` property of the config object (either
passed as an argument or loaded from `),WFe=a("code"),k8r=o("pretrained_model_name_or_path"),S8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=a("code"),R8r=o("pretrained_model_name_or_path"),P8r=o(":"),B8r=l(),HFe=a("ul"),PE=a("li"),UFe=a("strong"),I8r=o("speech_to_text"),N8r=o(" \u2014 "),KJ=a("a"),q8r=o("TFSpeech2TextForConditionalGeneration"),j8r=o(" (Speech2Text model)"),D8r=l(),F(BE.$$.fragment),uDe=l(),$c=a("h2"),IE=a("a"),JFe=a("span"),F(B9.$$.fragment),G8r=l(),YFe=a("span"),O8r=o("FlaxAutoModel"),bDe=l(),fr=a("div"),F(I9.$$.fragment),V8r=l(),kc=a("p"),X8r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZJ=a("a"),z8r=o("from_pretrained()"),W8r=o(" class method or the "),eY=a("a"),Q8r=o("from_config()"),H8r=o(` class
method.`),U8r=l(),N9=a("p"),J8r=o("This class cannot be instantiated directly using "),KFe=a("code"),Y8r=o("__init__()"),K8r=o(" (throws an error)."),Z8r=l(),Ot=a("div"),F(q9.$$.fragment),e9r=l(),ZFe=a("p"),o9r=o("Instantiates one of the base model classes of the library from a configuration."),r9r=l(),Sc=a("p"),t9r=o(`Note:
Loading a model from its configuration file does `),eTe=a("strong"),a9r=o("not"),n9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),s9r=o("from_pretrained()"),l9r=o(" to load the model weights."),i9r=l(),F(NE.$$.fragment),d9r=l(),jr=a("div"),F(j9.$$.fragment),c9r=l(),oTe=a("p"),f9r=o("Instantiate one of the base model classes of the library from a pretrained model."),m9r=l(),hn=a("p"),g9r=o("The model class to instantiate is selected based on the "),rTe=a("code"),h9r=o("model_type"),p9r=o(` property of the config object (either
passed as an argument or loaded from `),tTe=a("code"),_9r=o("pretrained_model_name_or_path"),u9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=a("code"),b9r=o("pretrained_model_name_or_path"),v9r=o(":"),F9r=l(),re=a("ul"),qE=a("li"),nTe=a("strong"),T9r=o("albert"),M9r=o(" \u2014 "),rY=a("a"),E9r=o("FlaxAlbertModel"),C9r=o(" (ALBERT model)"),w9r=l(),jE=a("li"),sTe=a("strong"),A9r=o("bart"),y9r=o(" \u2014 "),tY=a("a"),L9r=o("FlaxBartModel"),x9r=o(" (BART model)"),$9r=l(),DE=a("li"),lTe=a("strong"),k9r=o("beit"),S9r=o(" \u2014 "),aY=a("a"),R9r=o("FlaxBeitModel"),P9r=o(" (BEiT model)"),B9r=l(),GE=a("li"),iTe=a("strong"),I9r=o("bert"),N9r=o(" \u2014 "),nY=a("a"),q9r=o("FlaxBertModel"),j9r=o(" (BERT model)"),D9r=l(),OE=a("li"),dTe=a("strong"),G9r=o("big_bird"),O9r=o(" \u2014 "),sY=a("a"),V9r=o("FlaxBigBirdModel"),X9r=o(" (BigBird model)"),z9r=l(),VE=a("li"),cTe=a("strong"),W9r=o("blenderbot"),Q9r=o(" \u2014 "),lY=a("a"),H9r=o("FlaxBlenderbotModel"),U9r=o(" (Blenderbot model)"),J9r=l(),XE=a("li"),fTe=a("strong"),Y9r=o("blenderbot-small"),K9r=o(" \u2014 "),iY=a("a"),Z9r=o("FlaxBlenderbotSmallModel"),exr=o(" (BlenderbotSmall model)"),oxr=l(),zE=a("li"),mTe=a("strong"),rxr=o("clip"),txr=o(" \u2014 "),dY=a("a"),axr=o("FlaxCLIPModel"),nxr=o(" (CLIP model)"),sxr=l(),WE=a("li"),gTe=a("strong"),lxr=o("distilbert"),ixr=o(" \u2014 "),cY=a("a"),dxr=o("FlaxDistilBertModel"),cxr=o(" (DistilBERT model)"),fxr=l(),QE=a("li"),hTe=a("strong"),mxr=o("electra"),gxr=o(" \u2014 "),fY=a("a"),hxr=o("FlaxElectraModel"),pxr=o(" (ELECTRA model)"),_xr=l(),HE=a("li"),pTe=a("strong"),uxr=o("gpt2"),bxr=o(" \u2014 "),mY=a("a"),vxr=o("FlaxGPT2Model"),Fxr=o(" (OpenAI GPT-2 model)"),Txr=l(),UE=a("li"),_Te=a("strong"),Mxr=o("gpt_neo"),Exr=o(" \u2014 "),gY=a("a"),Cxr=o("FlaxGPTNeoModel"),wxr=o(" (GPT Neo model)"),Axr=l(),JE=a("li"),uTe=a("strong"),yxr=o("gptj"),Lxr=o(" \u2014 "),hY=a("a"),xxr=o("FlaxGPTJModel"),$xr=o(" (GPT-J model)"),kxr=l(),YE=a("li"),bTe=a("strong"),Sxr=o("marian"),Rxr=o(" \u2014 "),pY=a("a"),Pxr=o("FlaxMarianModel"),Bxr=o(" (Marian model)"),Ixr=l(),KE=a("li"),vTe=a("strong"),Nxr=o("mbart"),qxr=o(" \u2014 "),_Y=a("a"),jxr=o("FlaxMBartModel"),Dxr=o(" (mBART model)"),Gxr=l(),ZE=a("li"),FTe=a("strong"),Oxr=o("mt5"),Vxr=o(" \u2014 "),uY=a("a"),Xxr=o("FlaxMT5Model"),zxr=o(" (mT5 model)"),Wxr=l(),eC=a("li"),TTe=a("strong"),Qxr=o("opt"),Hxr=o(" \u2014 "),bY=a("a"),Uxr=o("FlaxOPTModel"),Jxr=o(" (OPT model)"),Yxr=l(),oC=a("li"),MTe=a("strong"),Kxr=o("pegasus"),Zxr=o(" \u2014 "),vY=a("a"),e$r=o("FlaxPegasusModel"),o$r=o(" (Pegasus model)"),r$r=l(),rC=a("li"),ETe=a("strong"),t$r=o("roberta"),a$r=o(" \u2014 "),FY=a("a"),n$r=o("FlaxRobertaModel"),s$r=o(" (RoBERTa model)"),l$r=l(),tC=a("li"),CTe=a("strong"),i$r=o("roformer"),d$r=o(" \u2014 "),TY=a("a"),c$r=o("FlaxRoFormerModel"),f$r=o(" (RoFormer model)"),m$r=l(),aC=a("li"),wTe=a("strong"),g$r=o("t5"),h$r=o(" \u2014 "),MY=a("a"),p$r=o("FlaxT5Model"),_$r=o(" (T5 model)"),u$r=l(),nC=a("li"),ATe=a("strong"),b$r=o("vision-text-dual-encoder"),v$r=o(" \u2014 "),EY=a("a"),F$r=o("FlaxVisionTextDualEncoderModel"),T$r=o(" (VisionTextDualEncoder model)"),M$r=l(),sC=a("li"),yTe=a("strong"),E$r=o("vit"),C$r=o(" \u2014 "),CY=a("a"),w$r=o("FlaxViTModel"),A$r=o(" (ViT model)"),y$r=l(),lC=a("li"),LTe=a("strong"),L$r=o("wav2vec2"),x$r=o(" \u2014 "),wY=a("a"),$$r=o("FlaxWav2Vec2Model"),k$r=o(" (Wav2Vec2 model)"),S$r=l(),iC=a("li"),xTe=a("strong"),R$r=o("xglm"),P$r=o(" \u2014 "),AY=a("a"),B$r=o("FlaxXGLMModel"),I$r=o(" (XGLM model)"),N$r=l(),dC=a("li"),$Te=a("strong"),q$r=o("xlm-roberta"),j$r=o(" \u2014 "),yY=a("a"),D$r=o("FlaxXLMRobertaModel"),G$r=o(" (XLM-RoBERTa model)"),O$r=l(),F(cC.$$.fragment),vDe=l(),Rc=a("h2"),fC=a("a"),kTe=a("span"),F(D9.$$.fragment),V$r=l(),STe=a("span"),X$r=o("FlaxAutoModelForCausalLM"),FDe=l(),mr=a("div"),F(G9.$$.fragment),z$r=l(),Pc=a("p"),W$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),LY=a("a"),Q$r=o("from_pretrained()"),H$r=o(" class method or the "),xY=a("a"),U$r=o("from_config()"),J$r=o(` class
method.`),Y$r=l(),O9=a("p"),K$r=o("This class cannot be instantiated directly using "),RTe=a("code"),Z$r=o("__init__()"),ekr=o(" (throws an error)."),okr=l(),Vt=a("div"),F(V9.$$.fragment),rkr=l(),PTe=a("p"),tkr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),akr=l(),Bc=a("p"),nkr=o(`Note:
Loading a model from its configuration file does `),BTe=a("strong"),skr=o("not"),lkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=a("a"),ikr=o("from_pretrained()"),dkr=o(" to load the model weights."),ckr=l(),F(mC.$$.fragment),fkr=l(),Dr=a("div"),F(X9.$$.fragment),mkr=l(),ITe=a("p"),gkr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hkr=l(),pn=a("p"),pkr=o("The model class to instantiate is selected based on the "),NTe=a("code"),_kr=o("model_type"),ukr=o(` property of the config object (either
passed as an argument or loaded from `),qTe=a("code"),bkr=o("pretrained_model_name_or_path"),vkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=a("code"),Fkr=o("pretrained_model_name_or_path"),Tkr=o(":"),Mkr=l(),Le=a("ul"),gC=a("li"),DTe=a("strong"),Ekr=o("bart"),Ckr=o(" \u2014 "),kY=a("a"),wkr=o("FlaxBartForCausalLM"),Akr=o(" (BART model)"),ykr=l(),hC=a("li"),GTe=a("strong"),Lkr=o("bert"),xkr=o(" \u2014 "),SY=a("a"),$kr=o("FlaxBertForCausalLM"),kkr=o(" (BERT model)"),Skr=l(),pC=a("li"),OTe=a("strong"),Rkr=o("big_bird"),Pkr=o(" \u2014 "),RY=a("a"),Bkr=o("FlaxBigBirdForCausalLM"),Ikr=o(" (BigBird model)"),Nkr=l(),_C=a("li"),VTe=a("strong"),qkr=o("electra"),jkr=o(" \u2014 "),PY=a("a"),Dkr=o("FlaxElectraForCausalLM"),Gkr=o(" (ELECTRA model)"),Okr=l(),uC=a("li"),XTe=a("strong"),Vkr=o("gpt2"),Xkr=o(" \u2014 "),BY=a("a"),zkr=o("FlaxGPT2LMHeadModel"),Wkr=o(" (OpenAI GPT-2 model)"),Qkr=l(),bC=a("li"),zTe=a("strong"),Hkr=o("gpt_neo"),Ukr=o(" \u2014 "),IY=a("a"),Jkr=o("FlaxGPTNeoForCausalLM"),Ykr=o(" (GPT Neo model)"),Kkr=l(),vC=a("li"),WTe=a("strong"),Zkr=o("gptj"),eSr=o(" \u2014 "),NY=a("a"),oSr=o("FlaxGPTJForCausalLM"),rSr=o(" (GPT-J model)"),tSr=l(),FC=a("li"),QTe=a("strong"),aSr=o("opt"),nSr=o(" \u2014 "),qY=a("a"),sSr=o("FlaxOPTForCausalLM"),lSr=o(" (OPT model)"),iSr=l(),TC=a("li"),HTe=a("strong"),dSr=o("roberta"),cSr=o(" \u2014 "),jY=a("a"),fSr=o("FlaxRobertaForCausalLM"),mSr=o(" (RoBERTa model)"),gSr=l(),MC=a("li"),UTe=a("strong"),hSr=o("xglm"),pSr=o(" \u2014 "),DY=a("a"),_Sr=o("FlaxXGLMForCausalLM"),uSr=o(" (XGLM model)"),bSr=l(),F(EC.$$.fragment),TDe=l(),Ic=a("h2"),CC=a("a"),JTe=a("span"),F(z9.$$.fragment),vSr=l(),YTe=a("span"),FSr=o("FlaxAutoModelForPreTraining"),MDe=l(),gr=a("div"),F(W9.$$.fragment),TSr=l(),Nc=a("p"),MSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GY=a("a"),ESr=o("from_pretrained()"),CSr=o(" class method or the "),OY=a("a"),wSr=o("from_config()"),ASr=o(` class
method.`),ySr=l(),Q9=a("p"),LSr=o("This class cannot be instantiated directly using "),KTe=a("code"),xSr=o("__init__()"),$Sr=o(" (throws an error)."),kSr=l(),Xt=a("div"),F(H9.$$.fragment),SSr=l(),ZTe=a("p"),RSr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),PSr=l(),qc=a("p"),BSr=o(`Note:
Loading a model from its configuration file does `),e7e=a("strong"),ISr=o("not"),NSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=a("a"),qSr=o("from_pretrained()"),jSr=o(" to load the model weights."),DSr=l(),F(wC.$$.fragment),GSr=l(),Gr=a("div"),F(U9.$$.fragment),OSr=l(),o7e=a("p"),VSr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),XSr=l(),_n=a("p"),zSr=o("The model class to instantiate is selected based on the "),r7e=a("code"),WSr=o("model_type"),QSr=o(` property of the config object (either
passed as an argument or loaded from `),t7e=a("code"),HSr=o("pretrained_model_name_or_path"),USr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a7e=a("code"),JSr=o("pretrained_model_name_or_path"),YSr=o(":"),KSr=l(),Ee=a("ul"),AC=a("li"),n7e=a("strong"),ZSr=o("albert"),eRr=o(" \u2014 "),XY=a("a"),oRr=o("FlaxAlbertForPreTraining"),rRr=o(" (ALBERT model)"),tRr=l(),yC=a("li"),s7e=a("strong"),aRr=o("bart"),nRr=o(" \u2014 "),zY=a("a"),sRr=o("FlaxBartForConditionalGeneration"),lRr=o(" (BART model)"),iRr=l(),LC=a("li"),l7e=a("strong"),dRr=o("bert"),cRr=o(" \u2014 "),WY=a("a"),fRr=o("FlaxBertForPreTraining"),mRr=o(" (BERT model)"),gRr=l(),xC=a("li"),i7e=a("strong"),hRr=o("big_bird"),pRr=o(" \u2014 "),QY=a("a"),_Rr=o("FlaxBigBirdForPreTraining"),uRr=o(" (BigBird model)"),bRr=l(),$C=a("li"),d7e=a("strong"),vRr=o("electra"),FRr=o(" \u2014 "),HY=a("a"),TRr=o("FlaxElectraForPreTraining"),MRr=o(" (ELECTRA model)"),ERr=l(),kC=a("li"),c7e=a("strong"),CRr=o("mbart"),wRr=o(" \u2014 "),UY=a("a"),ARr=o("FlaxMBartForConditionalGeneration"),yRr=o(" (mBART model)"),LRr=l(),SC=a("li"),f7e=a("strong"),xRr=o("mt5"),$Rr=o(" \u2014 "),JY=a("a"),kRr=o("FlaxMT5ForConditionalGeneration"),SRr=o(" (mT5 model)"),RRr=l(),RC=a("li"),m7e=a("strong"),PRr=o("roberta"),BRr=o(" \u2014 "),YY=a("a"),IRr=o("FlaxRobertaForMaskedLM"),NRr=o(" (RoBERTa model)"),qRr=l(),PC=a("li"),g7e=a("strong"),jRr=o("roformer"),DRr=o(" \u2014 "),KY=a("a"),GRr=o("FlaxRoFormerForMaskedLM"),ORr=o(" (RoFormer model)"),VRr=l(),BC=a("li"),h7e=a("strong"),XRr=o("t5"),zRr=o(" \u2014 "),ZY=a("a"),WRr=o("FlaxT5ForConditionalGeneration"),QRr=o(" (T5 model)"),HRr=l(),IC=a("li"),p7e=a("strong"),URr=o("wav2vec2"),JRr=o(" \u2014 "),eK=a("a"),YRr=o("FlaxWav2Vec2ForPreTraining"),KRr=o(" (Wav2Vec2 model)"),ZRr=l(),NC=a("li"),_7e=a("strong"),ePr=o("xlm-roberta"),oPr=o(" \u2014 "),oK=a("a"),rPr=o("FlaxXLMRobertaForMaskedLM"),tPr=o(" (XLM-RoBERTa model)"),aPr=l(),F(qC.$$.fragment),EDe=l(),jc=a("h2"),jC=a("a"),u7e=a("span"),F(J9.$$.fragment),nPr=l(),b7e=a("span"),sPr=o("FlaxAutoModelForMaskedLM"),CDe=l(),hr=a("div"),F(Y9.$$.fragment),lPr=l(),Dc=a("p"),iPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rK=a("a"),dPr=o("from_pretrained()"),cPr=o(" class method or the "),tK=a("a"),fPr=o("from_config()"),mPr=o(` class
method.`),gPr=l(),K9=a("p"),hPr=o("This class cannot be instantiated directly using "),v7e=a("code"),pPr=o("__init__()"),_Pr=o(" (throws an error)."),uPr=l(),zt=a("div"),F(Z9.$$.fragment),bPr=l(),F7e=a("p"),vPr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),FPr=l(),Gc=a("p"),TPr=o(`Note:
Loading a model from its configuration file does `),T7e=a("strong"),MPr=o("not"),EPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),CPr=o("from_pretrained()"),wPr=o(" to load the model weights."),APr=l(),F(DC.$$.fragment),yPr=l(),Or=a("div"),F(ex.$$.fragment),LPr=l(),M7e=a("p"),xPr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$Pr=l(),un=a("p"),kPr=o("The model class to instantiate is selected based on the "),E7e=a("code"),SPr=o("model_type"),RPr=o(` property of the config object (either
passed as an argument or loaded from `),C7e=a("code"),PPr=o("pretrained_model_name_or_path"),BPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=a("code"),IPr=o("pretrained_model_name_or_path"),NPr=o(":"),qPr=l(),xe=a("ul"),GC=a("li"),A7e=a("strong"),jPr=o("albert"),DPr=o(" \u2014 "),nK=a("a"),GPr=o("FlaxAlbertForMaskedLM"),OPr=o(" (ALBERT model)"),VPr=l(),OC=a("li"),y7e=a("strong"),XPr=o("bart"),zPr=o(" \u2014 "),sK=a("a"),WPr=o("FlaxBartForConditionalGeneration"),QPr=o(" (BART model)"),HPr=l(),VC=a("li"),L7e=a("strong"),UPr=o("bert"),JPr=o(" \u2014 "),lK=a("a"),YPr=o("FlaxBertForMaskedLM"),KPr=o(" (BERT model)"),ZPr=l(),XC=a("li"),x7e=a("strong"),eBr=o("big_bird"),oBr=o(" \u2014 "),iK=a("a"),rBr=o("FlaxBigBirdForMaskedLM"),tBr=o(" (BigBird model)"),aBr=l(),zC=a("li"),$7e=a("strong"),nBr=o("distilbert"),sBr=o(" \u2014 "),dK=a("a"),lBr=o("FlaxDistilBertForMaskedLM"),iBr=o(" (DistilBERT model)"),dBr=l(),WC=a("li"),k7e=a("strong"),cBr=o("electra"),fBr=o(" \u2014 "),cK=a("a"),mBr=o("FlaxElectraForMaskedLM"),gBr=o(" (ELECTRA model)"),hBr=l(),QC=a("li"),S7e=a("strong"),pBr=o("mbart"),_Br=o(" \u2014 "),fK=a("a"),uBr=o("FlaxMBartForConditionalGeneration"),bBr=o(" (mBART model)"),vBr=l(),HC=a("li"),R7e=a("strong"),FBr=o("roberta"),TBr=o(" \u2014 "),mK=a("a"),MBr=o("FlaxRobertaForMaskedLM"),EBr=o(" (RoBERTa model)"),CBr=l(),UC=a("li"),P7e=a("strong"),wBr=o("roformer"),ABr=o(" \u2014 "),gK=a("a"),yBr=o("FlaxRoFormerForMaskedLM"),LBr=o(" (RoFormer model)"),xBr=l(),JC=a("li"),B7e=a("strong"),$Br=o("xlm-roberta"),kBr=o(" \u2014 "),hK=a("a"),SBr=o("FlaxXLMRobertaForMaskedLM"),RBr=o(" (XLM-RoBERTa model)"),PBr=l(),F(YC.$$.fragment),wDe=l(),Oc=a("h2"),KC=a("a"),I7e=a("span"),F(ox.$$.fragment),BBr=l(),N7e=a("span"),IBr=o("FlaxAutoModelForSeq2SeqLM"),ADe=l(),pr=a("div"),F(rx.$$.fragment),NBr=l(),Vc=a("p"),qBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pK=a("a"),jBr=o("from_pretrained()"),DBr=o(" class method or the "),_K=a("a"),GBr=o("from_config()"),OBr=o(` class
method.`),VBr=l(),tx=a("p"),XBr=o("This class cannot be instantiated directly using "),q7e=a("code"),zBr=o("__init__()"),WBr=o(" (throws an error)."),QBr=l(),Wt=a("div"),F(ax.$$.fragment),HBr=l(),j7e=a("p"),UBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),JBr=l(),Xc=a("p"),YBr=o(`Note:
Loading a model from its configuration file does `),D7e=a("strong"),KBr=o("not"),ZBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),eIr=o("from_pretrained()"),oIr=o(" to load the model weights."),rIr=l(),F(ZC.$$.fragment),tIr=l(),Vr=a("div"),F(nx.$$.fragment),aIr=l(),G7e=a("p"),nIr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sIr=l(),bn=a("p"),lIr=o("The model class to instantiate is selected based on the "),O7e=a("code"),iIr=o("model_type"),dIr=o(` property of the config object (either
passed as an argument or loaded from `),V7e=a("code"),cIr=o("pretrained_model_name_or_path"),fIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X7e=a("code"),mIr=o("pretrained_model_name_or_path"),gIr=o(":"),hIr=l(),Pe=a("ul"),e0=a("li"),z7e=a("strong"),pIr=o("bart"),_Ir=o(" \u2014 "),bK=a("a"),uIr=o("FlaxBartForConditionalGeneration"),bIr=o(" (BART model)"),vIr=l(),o0=a("li"),W7e=a("strong"),FIr=o("blenderbot"),TIr=o(" \u2014 "),vK=a("a"),MIr=o("FlaxBlenderbotForConditionalGeneration"),EIr=o(" (Blenderbot model)"),CIr=l(),r0=a("li"),Q7e=a("strong"),wIr=o("blenderbot-small"),AIr=o(" \u2014 "),FK=a("a"),yIr=o("FlaxBlenderbotSmallForConditionalGeneration"),LIr=o(" (BlenderbotSmall model)"),xIr=l(),t0=a("li"),H7e=a("strong"),$Ir=o("encoder-decoder"),kIr=o(" \u2014 "),TK=a("a"),SIr=o("FlaxEncoderDecoderModel"),RIr=o(" (Encoder decoder model)"),PIr=l(),a0=a("li"),U7e=a("strong"),BIr=o("marian"),IIr=o(" \u2014 "),MK=a("a"),NIr=o("FlaxMarianMTModel"),qIr=o(" (Marian model)"),jIr=l(),n0=a("li"),J7e=a("strong"),DIr=o("mbart"),GIr=o(" \u2014 "),EK=a("a"),OIr=o("FlaxMBartForConditionalGeneration"),VIr=o(" (mBART model)"),XIr=l(),s0=a("li"),Y7e=a("strong"),zIr=o("mt5"),WIr=o(" \u2014 "),CK=a("a"),QIr=o("FlaxMT5ForConditionalGeneration"),HIr=o(" (mT5 model)"),UIr=l(),l0=a("li"),K7e=a("strong"),JIr=o("pegasus"),YIr=o(" \u2014 "),wK=a("a"),KIr=o("FlaxPegasusForConditionalGeneration"),ZIr=o(" (Pegasus model)"),eNr=l(),i0=a("li"),Z7e=a("strong"),oNr=o("t5"),rNr=o(" \u2014 "),AK=a("a"),tNr=o("FlaxT5ForConditionalGeneration"),aNr=o(" (T5 model)"),nNr=l(),F(d0.$$.fragment),yDe=l(),zc=a("h2"),c0=a("a"),eMe=a("span"),F(sx.$$.fragment),sNr=l(),oMe=a("span"),lNr=o("FlaxAutoModelForSequenceClassification"),LDe=l(),_r=a("div"),F(lx.$$.fragment),iNr=l(),Wc=a("p"),dNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yK=a("a"),cNr=o("from_pretrained()"),fNr=o(" class method or the "),LK=a("a"),mNr=o("from_config()"),gNr=o(` class
method.`),hNr=l(),ix=a("p"),pNr=o("This class cannot be instantiated directly using "),rMe=a("code"),_Nr=o("__init__()"),uNr=o(" (throws an error)."),bNr=l(),Qt=a("div"),F(dx.$$.fragment),vNr=l(),tMe=a("p"),FNr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),TNr=l(),Qc=a("p"),MNr=o(`Note:
Loading a model from its configuration file does `),aMe=a("strong"),ENr=o("not"),CNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=a("a"),wNr=o("from_pretrained()"),ANr=o(" to load the model weights."),yNr=l(),F(f0.$$.fragment),LNr=l(),Xr=a("div"),F(cx.$$.fragment),xNr=l(),nMe=a("p"),$Nr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),kNr=l(),vn=a("p"),SNr=o("The model class to instantiate is selected based on the "),sMe=a("code"),RNr=o("model_type"),PNr=o(` property of the config object (either
passed as an argument or loaded from `),lMe=a("code"),BNr=o("pretrained_model_name_or_path"),INr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=a("code"),NNr=o("pretrained_model_name_or_path"),qNr=o(":"),jNr=l(),$e=a("ul"),m0=a("li"),dMe=a("strong"),DNr=o("albert"),GNr=o(" \u2014 "),$K=a("a"),ONr=o("FlaxAlbertForSequenceClassification"),VNr=o(" (ALBERT model)"),XNr=l(),g0=a("li"),cMe=a("strong"),zNr=o("bart"),WNr=o(" \u2014 "),kK=a("a"),QNr=o("FlaxBartForSequenceClassification"),HNr=o(" (BART model)"),UNr=l(),h0=a("li"),fMe=a("strong"),JNr=o("bert"),YNr=o(" \u2014 "),SK=a("a"),KNr=o("FlaxBertForSequenceClassification"),ZNr=o(" (BERT model)"),eqr=l(),p0=a("li"),mMe=a("strong"),oqr=o("big_bird"),rqr=o(" \u2014 "),RK=a("a"),tqr=o("FlaxBigBirdForSequenceClassification"),aqr=o(" (BigBird model)"),nqr=l(),_0=a("li"),gMe=a("strong"),sqr=o("distilbert"),lqr=o(" \u2014 "),PK=a("a"),iqr=o("FlaxDistilBertForSequenceClassification"),dqr=o(" (DistilBERT model)"),cqr=l(),u0=a("li"),hMe=a("strong"),fqr=o("electra"),mqr=o(" \u2014 "),BK=a("a"),gqr=o("FlaxElectraForSequenceClassification"),hqr=o(" (ELECTRA model)"),pqr=l(),b0=a("li"),pMe=a("strong"),_qr=o("mbart"),uqr=o(" \u2014 "),IK=a("a"),bqr=o("FlaxMBartForSequenceClassification"),vqr=o(" (mBART model)"),Fqr=l(),v0=a("li"),_Me=a("strong"),Tqr=o("roberta"),Mqr=o(" \u2014 "),NK=a("a"),Eqr=o("FlaxRobertaForSequenceClassification"),Cqr=o(" (RoBERTa model)"),wqr=l(),F0=a("li"),uMe=a("strong"),Aqr=o("roformer"),yqr=o(" \u2014 "),qK=a("a"),Lqr=o("FlaxRoFormerForSequenceClassification"),xqr=o(" (RoFormer model)"),$qr=l(),T0=a("li"),bMe=a("strong"),kqr=o("xlm-roberta"),Sqr=o(" \u2014 "),jK=a("a"),Rqr=o("FlaxXLMRobertaForSequenceClassification"),Pqr=o(" (XLM-RoBERTa model)"),Bqr=l(),F(M0.$$.fragment),xDe=l(),Hc=a("h2"),E0=a("a"),vMe=a("span"),F(fx.$$.fragment),Iqr=l(),FMe=a("span"),Nqr=o("FlaxAutoModelForQuestionAnswering"),$De=l(),ur=a("div"),F(mx.$$.fragment),qqr=l(),Uc=a("p"),jqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DK=a("a"),Dqr=o("from_pretrained()"),Gqr=o(" class method or the "),GK=a("a"),Oqr=o("from_config()"),Vqr=o(` class
method.`),Xqr=l(),gx=a("p"),zqr=o("This class cannot be instantiated directly using "),TMe=a("code"),Wqr=o("__init__()"),Qqr=o(" (throws an error)."),Hqr=l(),Ht=a("div"),F(hx.$$.fragment),Uqr=l(),MMe=a("p"),Jqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Yqr=l(),Jc=a("p"),Kqr=o(`Note:
Loading a model from its configuration file does `),EMe=a("strong"),Zqr=o("not"),ejr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("a"),ojr=o("from_pretrained()"),rjr=o(" to load the model weights."),tjr=l(),F(C0.$$.fragment),ajr=l(),zr=a("div"),F(px.$$.fragment),njr=l(),CMe=a("p"),sjr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ljr=l(),Fn=a("p"),ijr=o("The model class to instantiate is selected based on the "),wMe=a("code"),djr=o("model_type"),cjr=o(` property of the config object (either
passed as an argument or loaded from `),AMe=a("code"),fjr=o("pretrained_model_name_or_path"),mjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yMe=a("code"),gjr=o("pretrained_model_name_or_path"),hjr=o(":"),pjr=l(),ke=a("ul"),w0=a("li"),LMe=a("strong"),_jr=o("albert"),ujr=o(" \u2014 "),VK=a("a"),bjr=o("FlaxAlbertForQuestionAnswering"),vjr=o(" (ALBERT model)"),Fjr=l(),A0=a("li"),xMe=a("strong"),Tjr=o("bart"),Mjr=o(" \u2014 "),XK=a("a"),Ejr=o("FlaxBartForQuestionAnswering"),Cjr=o(" (BART model)"),wjr=l(),y0=a("li"),$Me=a("strong"),Ajr=o("bert"),yjr=o(" \u2014 "),zK=a("a"),Ljr=o("FlaxBertForQuestionAnswering"),xjr=o(" (BERT model)"),$jr=l(),L0=a("li"),kMe=a("strong"),kjr=o("big_bird"),Sjr=o(" \u2014 "),WK=a("a"),Rjr=o("FlaxBigBirdForQuestionAnswering"),Pjr=o(" (BigBird model)"),Bjr=l(),x0=a("li"),SMe=a("strong"),Ijr=o("distilbert"),Njr=o(" \u2014 "),QK=a("a"),qjr=o("FlaxDistilBertForQuestionAnswering"),jjr=o(" (DistilBERT model)"),Djr=l(),$0=a("li"),RMe=a("strong"),Gjr=o("electra"),Ojr=o(" \u2014 "),HK=a("a"),Vjr=o("FlaxElectraForQuestionAnswering"),Xjr=o(" (ELECTRA model)"),zjr=l(),k0=a("li"),PMe=a("strong"),Wjr=o("mbart"),Qjr=o(" \u2014 "),UK=a("a"),Hjr=o("FlaxMBartForQuestionAnswering"),Ujr=o(" (mBART model)"),Jjr=l(),S0=a("li"),BMe=a("strong"),Yjr=o("roberta"),Kjr=o(" \u2014 "),JK=a("a"),Zjr=o("FlaxRobertaForQuestionAnswering"),eDr=o(" (RoBERTa model)"),oDr=l(),R0=a("li"),IMe=a("strong"),rDr=o("roformer"),tDr=o(" \u2014 "),YK=a("a"),aDr=o("FlaxRoFormerForQuestionAnswering"),nDr=o(" (RoFormer model)"),sDr=l(),P0=a("li"),NMe=a("strong"),lDr=o("xlm-roberta"),iDr=o(" \u2014 "),KK=a("a"),dDr=o("FlaxXLMRobertaForQuestionAnswering"),cDr=o(" (XLM-RoBERTa model)"),fDr=l(),F(B0.$$.fragment),kDe=l(),Yc=a("h2"),I0=a("a"),qMe=a("span"),F(_x.$$.fragment),mDr=l(),jMe=a("span"),gDr=o("FlaxAutoModelForTokenClassification"),SDe=l(),br=a("div"),F(ux.$$.fragment),hDr=l(),Kc=a("p"),pDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZK=a("a"),_Dr=o("from_pretrained()"),uDr=o(" class method or the "),eZ=a("a"),bDr=o("from_config()"),vDr=o(` class
method.`),FDr=l(),bx=a("p"),TDr=o("This class cannot be instantiated directly using "),DMe=a("code"),MDr=o("__init__()"),EDr=o(" (throws an error)."),CDr=l(),Ut=a("div"),F(vx.$$.fragment),wDr=l(),GMe=a("p"),ADr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yDr=l(),Zc=a("p"),LDr=o(`Note:
Loading a model from its configuration file does `),OMe=a("strong"),xDr=o("not"),$Dr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oZ=a("a"),kDr=o("from_pretrained()"),SDr=o(" to load the model weights."),RDr=l(),F(N0.$$.fragment),PDr=l(),Wr=a("div"),F(Fx.$$.fragment),BDr=l(),VMe=a("p"),IDr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),NDr=l(),Tn=a("p"),qDr=o("The model class to instantiate is selected based on the "),XMe=a("code"),jDr=o("model_type"),DDr=o(` property of the config object (either
passed as an argument or loaded from `),zMe=a("code"),GDr=o("pretrained_model_name_or_path"),ODr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WMe=a("code"),VDr=o("pretrained_model_name_or_path"),XDr=o(":"),zDr=l(),Ge=a("ul"),q0=a("li"),QMe=a("strong"),WDr=o("albert"),QDr=o(" \u2014 "),rZ=a("a"),HDr=o("FlaxAlbertForTokenClassification"),UDr=o(" (ALBERT model)"),JDr=l(),j0=a("li"),HMe=a("strong"),YDr=o("bert"),KDr=o(" \u2014 "),tZ=a("a"),ZDr=o("FlaxBertForTokenClassification"),eGr=o(" (BERT model)"),oGr=l(),D0=a("li"),UMe=a("strong"),rGr=o("big_bird"),tGr=o(" \u2014 "),aZ=a("a"),aGr=o("FlaxBigBirdForTokenClassification"),nGr=o(" (BigBird model)"),sGr=l(),G0=a("li"),JMe=a("strong"),lGr=o("distilbert"),iGr=o(" \u2014 "),nZ=a("a"),dGr=o("FlaxDistilBertForTokenClassification"),cGr=o(" (DistilBERT model)"),fGr=l(),O0=a("li"),YMe=a("strong"),mGr=o("electra"),gGr=o(" \u2014 "),sZ=a("a"),hGr=o("FlaxElectraForTokenClassification"),pGr=o(" (ELECTRA model)"),_Gr=l(),V0=a("li"),KMe=a("strong"),uGr=o("roberta"),bGr=o(" \u2014 "),lZ=a("a"),vGr=o("FlaxRobertaForTokenClassification"),FGr=o(" (RoBERTa model)"),TGr=l(),X0=a("li"),ZMe=a("strong"),MGr=o("roformer"),EGr=o(" \u2014 "),iZ=a("a"),CGr=o("FlaxRoFormerForTokenClassification"),wGr=o(" (RoFormer model)"),AGr=l(),z0=a("li"),eEe=a("strong"),yGr=o("xlm-roberta"),LGr=o(" \u2014 "),dZ=a("a"),xGr=o("FlaxXLMRobertaForTokenClassification"),$Gr=o(" (XLM-RoBERTa model)"),kGr=l(),F(W0.$$.fragment),RDe=l(),ef=a("h2"),Q0=a("a"),oEe=a("span"),F(Tx.$$.fragment),SGr=l(),rEe=a("span"),RGr=o("FlaxAutoModelForMultipleChoice"),PDe=l(),vr=a("div"),F(Mx.$$.fragment),PGr=l(),of=a("p"),BGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cZ=a("a"),IGr=o("from_pretrained()"),NGr=o(" class method or the "),fZ=a("a"),qGr=o("from_config()"),jGr=o(` class
method.`),DGr=l(),Ex=a("p"),GGr=o("This class cannot be instantiated directly using "),tEe=a("code"),OGr=o("__init__()"),VGr=o(" (throws an error)."),XGr=l(),Jt=a("div"),F(Cx.$$.fragment),zGr=l(),aEe=a("p"),WGr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),QGr=l(),rf=a("p"),HGr=o(`Note:
Loading a model from its configuration file does `),nEe=a("strong"),UGr=o("not"),JGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=a("a"),YGr=o("from_pretrained()"),KGr=o(" to load the model weights."),ZGr=l(),F(H0.$$.fragment),eOr=l(),Qr=a("div"),F(wx.$$.fragment),oOr=l(),sEe=a("p"),rOr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tOr=l(),Mn=a("p"),aOr=o("The model class to instantiate is selected based on the "),lEe=a("code"),nOr=o("model_type"),sOr=o(` property of the config object (either
passed as an argument or loaded from `),iEe=a("code"),lOr=o("pretrained_model_name_or_path"),iOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=a("code"),dOr=o("pretrained_model_name_or_path"),cOr=o(":"),fOr=l(),Oe=a("ul"),U0=a("li"),cEe=a("strong"),mOr=o("albert"),gOr=o(" \u2014 "),gZ=a("a"),hOr=o("FlaxAlbertForMultipleChoice"),pOr=o(" (ALBERT model)"),_Or=l(),J0=a("li"),fEe=a("strong"),uOr=o("bert"),bOr=o(" \u2014 "),hZ=a("a"),vOr=o("FlaxBertForMultipleChoice"),FOr=o(" (BERT model)"),TOr=l(),Y0=a("li"),mEe=a("strong"),MOr=o("big_bird"),EOr=o(" \u2014 "),pZ=a("a"),COr=o("FlaxBigBirdForMultipleChoice"),wOr=o(" (BigBird model)"),AOr=l(),K0=a("li"),gEe=a("strong"),yOr=o("distilbert"),LOr=o(" \u2014 "),_Z=a("a"),xOr=o("FlaxDistilBertForMultipleChoice"),$Or=o(" (DistilBERT model)"),kOr=l(),Z0=a("li"),hEe=a("strong"),SOr=o("electra"),ROr=o(" \u2014 "),uZ=a("a"),POr=o("FlaxElectraForMultipleChoice"),BOr=o(" (ELECTRA model)"),IOr=l(),ew=a("li"),pEe=a("strong"),NOr=o("roberta"),qOr=o(" \u2014 "),bZ=a("a"),jOr=o("FlaxRobertaForMultipleChoice"),DOr=o(" (RoBERTa model)"),GOr=l(),ow=a("li"),_Ee=a("strong"),OOr=o("roformer"),VOr=o(" \u2014 "),vZ=a("a"),XOr=o("FlaxRoFormerForMultipleChoice"),zOr=o(" (RoFormer model)"),WOr=l(),rw=a("li"),uEe=a("strong"),QOr=o("xlm-roberta"),HOr=o(" \u2014 "),FZ=a("a"),UOr=o("FlaxXLMRobertaForMultipleChoice"),JOr=o(" (XLM-RoBERTa model)"),YOr=l(),F(tw.$$.fragment),BDe=l(),tf=a("h2"),aw=a("a"),bEe=a("span"),F(Ax.$$.fragment),KOr=l(),vEe=a("span"),ZOr=o("FlaxAutoModelForNextSentencePrediction"),IDe=l(),Fr=a("div"),F(yx.$$.fragment),eVr=l(),af=a("p"),oVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),TZ=a("a"),rVr=o("from_pretrained()"),tVr=o(" class method or the "),MZ=a("a"),aVr=o("from_config()"),nVr=o(` class
method.`),sVr=l(),Lx=a("p"),lVr=o("This class cannot be instantiated directly using "),FEe=a("code"),iVr=o("__init__()"),dVr=o(" (throws an error)."),cVr=l(),Yt=a("div"),F(xx.$$.fragment),fVr=l(),TEe=a("p"),mVr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gVr=l(),nf=a("p"),hVr=o(`Note:
Loading a model from its configuration file does `),MEe=a("strong"),pVr=o("not"),_Vr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=a("a"),uVr=o("from_pretrained()"),bVr=o(" to load the model weights."),vVr=l(),F(nw.$$.fragment),FVr=l(),Hr=a("div"),F($x.$$.fragment),TVr=l(),EEe=a("p"),MVr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),EVr=l(),En=a("p"),CVr=o("The model class to instantiate is selected based on the "),CEe=a("code"),wVr=o("model_type"),AVr=o(` property of the config object (either
passed as an argument or loaded from `),wEe=a("code"),yVr=o("pretrained_model_name_or_path"),LVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AEe=a("code"),xVr=o("pretrained_model_name_or_path"),$Vr=o(":"),kVr=l(),yEe=a("ul"),sw=a("li"),LEe=a("strong"),SVr=o("bert"),RVr=o(" \u2014 "),CZ=a("a"),PVr=o("FlaxBertForNextSentencePrediction"),BVr=o(" (BERT model)"),IVr=l(),F(lw.$$.fragment),NDe=l(),sf=a("h2"),iw=a("a"),xEe=a("span"),F(kx.$$.fragment),NVr=l(),$Ee=a("span"),qVr=o("FlaxAutoModelForImageClassification"),qDe=l(),Tr=a("div"),F(Sx.$$.fragment),jVr=l(),lf=a("p"),DVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wZ=a("a"),GVr=o("from_pretrained()"),OVr=o(" class method or the "),AZ=a("a"),VVr=o("from_config()"),XVr=o(` class
method.`),zVr=l(),Rx=a("p"),WVr=o("This class cannot be instantiated directly using "),kEe=a("code"),QVr=o("__init__()"),HVr=o(" (throws an error)."),UVr=l(),Kt=a("div"),F(Px.$$.fragment),JVr=l(),SEe=a("p"),YVr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),KVr=l(),df=a("p"),ZVr=o(`Note:
Loading a model from its configuration file does `),REe=a("strong"),eXr=o("not"),oXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=a("a"),rXr=o("from_pretrained()"),tXr=o(" to load the model weights."),aXr=l(),F(dw.$$.fragment),nXr=l(),Ur=a("div"),F(Bx.$$.fragment),sXr=l(),PEe=a("p"),lXr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iXr=l(),Cn=a("p"),dXr=o("The model class to instantiate is selected based on the "),BEe=a("code"),cXr=o("model_type"),fXr=o(` property of the config object (either
passed as an argument or loaded from `),IEe=a("code"),mXr=o("pretrained_model_name_or_path"),gXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NEe=a("code"),hXr=o("pretrained_model_name_or_path"),pXr=o(":"),_Xr=l(),Ix=a("ul"),cw=a("li"),qEe=a("strong"),uXr=o("beit"),bXr=o(" \u2014 "),LZ=a("a"),vXr=o("FlaxBeitForImageClassification"),FXr=o(" (BEiT model)"),TXr=l(),fw=a("li"),jEe=a("strong"),MXr=o("vit"),EXr=o(" \u2014 "),xZ=a("a"),CXr=o("FlaxViTForImageClassification"),wXr=o(" (ViT model)"),AXr=l(),F(mw.$$.fragment),jDe=l(),cf=a("h2"),gw=a("a"),DEe=a("span"),F(Nx.$$.fragment),yXr=l(),GEe=a("span"),LXr=o("FlaxAutoModelForVision2Seq"),DDe=l(),Mr=a("div"),F(qx.$$.fragment),xXr=l(),ff=a("p"),$Xr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$Z=a("a"),kXr=o("from_pretrained()"),SXr=o(" class method or the "),kZ=a("a"),RXr=o("from_config()"),PXr=o(` class
method.`),BXr=l(),jx=a("p"),IXr=o("This class cannot be instantiated directly using "),OEe=a("code"),NXr=o("__init__()"),qXr=o(" (throws an error)."),jXr=l(),Zt=a("div"),F(Dx.$$.fragment),DXr=l(),VEe=a("p"),GXr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OXr=l(),mf=a("p"),VXr=o(`Note:
Loading a model from its configuration file does `),XEe=a("strong"),XXr=o("not"),zXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=a("a"),WXr=o("from_pretrained()"),QXr=o(" to load the model weights."),HXr=l(),F(hw.$$.fragment),UXr=l(),Jr=a("div"),F(Gx.$$.fragment),JXr=l(),zEe=a("p"),YXr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),KXr=l(),wn=a("p"),ZXr=o("The model class to instantiate is selected based on the "),WEe=a("code"),ezr=o("model_type"),ozr=o(` property of the config object (either
passed as an argument or loaded from `),QEe=a("code"),rzr=o("pretrained_model_name_or_path"),tzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HEe=a("code"),azr=o("pretrained_model_name_or_path"),nzr=o(":"),szr=l(),UEe=a("ul"),pw=a("li"),JEe=a("strong"),lzr=o("vision-encoder-decoder"),izr=o(" \u2014 "),RZ=a("a"),dzr=o("FlaxVisionEncoderDecoderModel"),czr=o(" (Vision Encoder decoder model)"),fzr=l(),F(_w.$$.fragment),this.h()},l(f){const u=fSt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Ox=s(p);m=n(Ox,"A",{id:!0,class:!0,href:!0});var YEe=s(m);_=n(YEe,"SPAN",{});var KEe=s(_);T(d.$$.fragment,KEe),KEe.forEach(t),YEe.forEach(t),h=i(Ox),Mo=n(Ox,"SPAN",{});var ZEe=s(Mo);mi=r(ZEe,"Auto Classes"),ZEe.forEach(t),Ox.forEach(t),_f=i(f),tt=n(f,"P",{});var Vx=s(tt);gi=r(Vx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=n(Vx,"CODE",{});var eCe=s(hi);RA=r(eCe,"from_pretrained()"),eCe.forEach(t),uf=r(Vx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Vx.forEach(t),De=i(f),We=n(f,"P",{});var An=s(We);pi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var oCe=s(yn);PA=r(oCe,"AutoConfig"),oCe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var rCe=s(xn);BA=r(rCe,"AutoModel"),rCe.forEach(t),_i=r(An,`, and
`),$n=n(An,"A",{href:!0});var tCe=s($n);IA=r(tCe,"AutoTokenizer"),tCe.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),bf=i(f),T(wa.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Xx=s(Ae);ok=r(Xx,"will create a model that is an instance of "),bi=n(Xx,"A",{href:!0});var aCe=s(bi);rk=r(aCe,"BertModel"),aCe.forEach(t),tk=r(Xx,"."),Xx.forEach(t),Eo=i(f),Aa=n(f,"P",{});var zx=s(Aa);ak=r(zx,"There is one class of "),vf=n(zx,"CODE",{});var nCe=s(vf);nk=r(nCe,"AutoModel"),nCe.forEach(t),UOe=r(zx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),zx.forEach(t),qqe=i(f),vi=n(f,"H2",{class:!0});var Wx=s(vi);Ff=n(Wx,"A",{id:!0,class:!0,href:!0});var sCe=s(Ff);Aoe=n(sCe,"SPAN",{});var lCe=s(Aoe);T(NA.$$.fragment,lCe),lCe.forEach(t),sCe.forEach(t),JOe=i(Wx),yoe=n(Wx,"SPAN",{});var iCe=s(yoe);YOe=r(iCe,"Extending the Auto Classes"),iCe.forEach(t),Wx.forEach(t),jqe=i(f),kn=n(f,"P",{});var gf=s(kn);KOe=r(gf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Loe=n(gf,"CODE",{});var dCe=s(Loe);ZOe=r(dCe,"NewModel"),dCe.forEach(t),eVe=r(gf,", make sure you have a "),xoe=n(gf,"CODE",{});var cCe=s(xoe);oVe=r(cCe,"NewModelConfig"),cCe.forEach(t),rVe=r(gf,` then you can add those to the auto
classes like this:`),gf.forEach(t),Dqe=i(f),T(qA.$$.fragment,f),Gqe=i(f),sk=n(f,"P",{});var fCe=s(sk);tVe=r(fCe,"You will then be able to use the auto classes like you would usually do!"),fCe.forEach(t),Oqe=i(f),T(Tf.$$.fragment,f),Vqe=i(f),Fi=n(f,"H2",{class:!0});var Qx=s(Fi);Mf=n(Qx,"A",{id:!0,class:!0,href:!0});var mCe=s(Mf);$oe=n(mCe,"SPAN",{});var gCe=s($oe);T(jA.$$.fragment,gCe),gCe.forEach(t),mCe.forEach(t),aVe=i(Qx),koe=n(Qx,"SPAN",{});var hCe=s(koe);nVe=r(hCe,"AutoConfig"),hCe.forEach(t),Qx.forEach(t),Xqe=i(f),Co=n(f,"DIV",{class:!0});var ot=s(Co);T(DA.$$.fragment,ot),sVe=i(ot),GA=n(ot,"P",{});var Hx=s(GA);lVe=r(Hx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),lk=n(Hx,"A",{href:!0});var pCe=s(lk);iVe=r(pCe,"from_pretrained()"),pCe.forEach(t),dVe=r(Hx," class method."),Hx.forEach(t),cVe=i(ot),OA=n(ot,"P",{});var Ux=s(OA);fVe=r(Ux,"This class cannot be instantiated directly using "),Soe=n(Ux,"CODE",{});var _Ce=s(Soe);mVe=r(_Ce,"__init__()"),_Ce.forEach(t),gVe=r(Ux," (throws an error)."),Ux.forEach(t),hVe=i(ot),Er=n(ot,"DIV",{class:!0});var rt=s(Er);T(VA.$$.fragment,rt),pVe=i(rt),Roe=n(rt,"P",{});var uCe=s(Roe);_Ve=r(uCe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),uCe.forEach(t),uVe=i(rt),Ti=n(rt,"P",{});var hf=s(Ti);bVe=r(hf,"The configuration class to instantiate is selected based on the "),Poe=n(hf,"CODE",{});var bCe=s(Poe);vVe=r(bCe,"model_type"),bCe.forEach(t),FVe=r(hf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Boe=n(hf,"CODE",{});var vCe=s(Boe);TVe=r(vCe,"pretrained_model_name_or_path"),vCe.forEach(t),MVe=r(hf,":"),hf.forEach(t),EVe=i(rt),A=n(rt,"UL",{});var y=s(A);Ef=n(y,"LI",{});var uw=s(Ef);Ioe=n(uw,"STRONG",{});var FCe=s(Ioe);CVe=r(FCe,"albert"),FCe.forEach(t),wVe=r(uw," \u2014 "),ik=n(uw,"A",{href:!0});var TCe=s(ik);AVe=r(TCe,"AlbertConfig"),TCe.forEach(t),yVe=r(uw," (ALBERT model)"),uw.forEach(t),LVe=i(y),Cf=n(y,"LI",{});var bw=s(Cf);Noe=n(bw,"STRONG",{});var MCe=s(Noe);xVe=r(MCe,"bart"),MCe.forEach(t),$Ve=r(bw," \u2014 "),dk=n(bw,"A",{href:!0});var ECe=s(dk);kVe=r(ECe,"BartConfig"),ECe.forEach(t),SVe=r(bw," (BART model)"),bw.forEach(t),RVe=i(y),wf=n(y,"LI",{});var vw=s(wf);qoe=n(vw,"STRONG",{});var CCe=s(qoe);PVe=r(CCe,"beit"),CCe.forEach(t),BVe=r(vw," \u2014 "),ck=n(vw,"A",{href:!0});var wCe=s(ck);IVe=r(wCe,"BeitConfig"),wCe.forEach(t),NVe=r(vw," (BEiT model)"),vw.forEach(t),qVe=i(y),Af=n(y,"LI",{});var Fw=s(Af);joe=n(Fw,"STRONG",{});var ACe=s(joe);jVe=r(ACe,"bert"),ACe.forEach(t),DVe=r(Fw," \u2014 "),fk=n(Fw,"A",{href:!0});var yCe=s(fk);GVe=r(yCe,"BertConfig"),yCe.forEach(t),OVe=r(Fw," (BERT model)"),Fw.forEach(t),VVe=i(y),yf=n(y,"LI",{});var Tw=s(yf);Doe=n(Tw,"STRONG",{});var LCe=s(Doe);XVe=r(LCe,"bert-generation"),LCe.forEach(t),zVe=r(Tw," \u2014 "),mk=n(Tw,"A",{href:!0});var xCe=s(mk);WVe=r(xCe,"BertGenerationConfig"),xCe.forEach(t),QVe=r(Tw," (Bert Generation model)"),Tw.forEach(t),HVe=i(y),Lf=n(y,"LI",{});var Mw=s(Lf);Goe=n(Mw,"STRONG",{});var $Ce=s(Goe);UVe=r($Ce,"big_bird"),$Ce.forEach(t),JVe=r(Mw," \u2014 "),gk=n(Mw,"A",{href:!0});var kCe=s(gk);YVe=r(kCe,"BigBirdConfig"),kCe.forEach(t),KVe=r(Mw," (BigBird model)"),Mw.forEach(t),ZVe=i(y),xf=n(y,"LI",{});var Ew=s(xf);Ooe=n(Ew,"STRONG",{});var SCe=s(Ooe);eXe=r(SCe,"bigbird_pegasus"),SCe.forEach(t),oXe=r(Ew," \u2014 "),hk=n(Ew,"A",{href:!0});var RCe=s(hk);rXe=r(RCe,"BigBirdPegasusConfig"),RCe.forEach(t),tXe=r(Ew," (BigBirdPegasus model)"),Ew.forEach(t),aXe=i(y),$f=n(y,"LI",{});var Cw=s($f);Voe=n(Cw,"STRONG",{});var PCe=s(Voe);nXe=r(PCe,"blenderbot"),PCe.forEach(t),sXe=r(Cw," \u2014 "),pk=n(Cw,"A",{href:!0});var BCe=s(pk);lXe=r(BCe,"BlenderbotConfig"),BCe.forEach(t),iXe=r(Cw," (Blenderbot model)"),Cw.forEach(t),dXe=i(y),kf=n(y,"LI",{});var ww=s(kf);Xoe=n(ww,"STRONG",{});var ICe=s(Xoe);cXe=r(ICe,"blenderbot-small"),ICe.forEach(t),fXe=r(ww," \u2014 "),_k=n(ww,"A",{href:!0});var NCe=s(_k);mXe=r(NCe,"BlenderbotSmallConfig"),NCe.forEach(t),gXe=r(ww," (BlenderbotSmall model)"),ww.forEach(t),hXe=i(y),Sf=n(y,"LI",{});var Aw=s(Sf);zoe=n(Aw,"STRONG",{});var qCe=s(zoe);pXe=r(qCe,"camembert"),qCe.forEach(t),_Xe=r(Aw," \u2014 "),uk=n(Aw,"A",{href:!0});var jCe=s(uk);uXe=r(jCe,"CamembertConfig"),jCe.forEach(t),bXe=r(Aw," (CamemBERT model)"),Aw.forEach(t),vXe=i(y),Rf=n(y,"LI",{});var yw=s(Rf);Woe=n(yw,"STRONG",{});var DCe=s(Woe);FXe=r(DCe,"canine"),DCe.forEach(t),TXe=r(yw," \u2014 "),bk=n(yw,"A",{href:!0});var GCe=s(bk);MXe=r(GCe,"CanineConfig"),GCe.forEach(t),EXe=r(yw," (Canine model)"),yw.forEach(t),CXe=i(y),Pf=n(y,"LI",{});var Lw=s(Pf);Qoe=n(Lw,"STRONG",{});var OCe=s(Qoe);wXe=r(OCe,"clip"),OCe.forEach(t),AXe=r(Lw," \u2014 "),vk=n(Lw,"A",{href:!0});var VCe=s(vk);yXe=r(VCe,"CLIPConfig"),VCe.forEach(t),LXe=r(Lw," (CLIP model)"),Lw.forEach(t),xXe=i(y),Bf=n(y,"LI",{});var xw=s(Bf);Hoe=n(xw,"STRONG",{});var XCe=s(Hoe);$Xe=r(XCe,"convbert"),XCe.forEach(t),kXe=r(xw," \u2014 "),Fk=n(xw,"A",{href:!0});var zCe=s(Fk);SXe=r(zCe,"ConvBertConfig"),zCe.forEach(t),RXe=r(xw," (ConvBERT model)"),xw.forEach(t),PXe=i(y),If=n(y,"LI",{});var $w=s(If);Uoe=n($w,"STRONG",{});var WCe=s(Uoe);BXe=r(WCe,"convnext"),WCe.forEach(t),IXe=r($w," \u2014 "),Tk=n($w,"A",{href:!0});var QCe=s(Tk);NXe=r(QCe,"ConvNextConfig"),QCe.forEach(t),qXe=r($w," (ConvNext model)"),$w.forEach(t),jXe=i(y),Nf=n(y,"LI",{});var kw=s(Nf);Joe=n(kw,"STRONG",{});var HCe=s(Joe);DXe=r(HCe,"ctrl"),HCe.forEach(t),GXe=r(kw," \u2014 "),Mk=n(kw,"A",{href:!0});var UCe=s(Mk);OXe=r(UCe,"CTRLConfig"),UCe.forEach(t),VXe=r(kw," (CTRL model)"),kw.forEach(t),XXe=i(y),qf=n(y,"LI",{});var Sw=s(qf);Yoe=n(Sw,"STRONG",{});var JCe=s(Yoe);zXe=r(JCe,"cvt"),JCe.forEach(t),WXe=r(Sw," \u2014 "),Ek=n(Sw,"A",{href:!0});var YCe=s(Ek);QXe=r(YCe,"CvtConfig"),YCe.forEach(t),HXe=r(Sw," (CvT model)"),Sw.forEach(t),UXe=i(y),jf=n(y,"LI",{});var Rw=s(jf);Koe=n(Rw,"STRONG",{});var KCe=s(Koe);JXe=r(KCe,"data2vec-audio"),KCe.forEach(t),YXe=r(Rw," \u2014 "),Ck=n(Rw,"A",{href:!0});var ZCe=s(Ck);KXe=r(ZCe,"Data2VecAudioConfig"),ZCe.forEach(t),ZXe=r(Rw," (Data2VecAudio model)"),Rw.forEach(t),eze=i(y),Df=n(y,"LI",{});var Pw=s(Df);Zoe=n(Pw,"STRONG",{});var e0e=s(Zoe);oze=r(e0e,"data2vec-text"),e0e.forEach(t),rze=r(Pw," \u2014 "),wk=n(Pw,"A",{href:!0});var o0e=s(wk);tze=r(o0e,"Data2VecTextConfig"),o0e.forEach(t),aze=r(Pw," (Data2VecText model)"),Pw.forEach(t),nze=i(y),Gf=n(y,"LI",{});var Bw=s(Gf);ere=n(Bw,"STRONG",{});var r0e=s(ere);sze=r(r0e,"data2vec-vision"),r0e.forEach(t),lze=r(Bw," \u2014 "),Ak=n(Bw,"A",{href:!0});var t0e=s(Ak);ize=r(t0e,"Data2VecVisionConfig"),t0e.forEach(t),dze=r(Bw," (Data2VecVision model)"),Bw.forEach(t),cze=i(y),Of=n(y,"LI",{});var Iw=s(Of);ore=n(Iw,"STRONG",{});var a0e=s(ore);fze=r(a0e,"deberta"),a0e.forEach(t),mze=r(Iw," \u2014 "),yk=n(Iw,"A",{href:!0});var n0e=s(yk);gze=r(n0e,"DebertaConfig"),n0e.forEach(t),hze=r(Iw," (DeBERTa model)"),Iw.forEach(t),pze=i(y),Vf=n(y,"LI",{});var Nw=s(Vf);rre=n(Nw,"STRONG",{});var s0e=s(rre);_ze=r(s0e,"deberta-v2"),s0e.forEach(t),uze=r(Nw," \u2014 "),Lk=n(Nw,"A",{href:!0});var l0e=s(Lk);bze=r(l0e,"DebertaV2Config"),l0e.forEach(t),vze=r(Nw," (DeBERTa-v2 model)"),Nw.forEach(t),Fze=i(y),Xf=n(y,"LI",{});var qw=s(Xf);tre=n(qw,"STRONG",{});var i0e=s(tre);Tze=r(i0e,"decision_transformer"),i0e.forEach(t),Mze=r(qw," \u2014 "),xk=n(qw,"A",{href:!0});var d0e=s(xk);Eze=r(d0e,"DecisionTransformerConfig"),d0e.forEach(t),Cze=r(qw," (Decision Transformer model)"),qw.forEach(t),wze=i(y),zf=n(y,"LI",{});var jw=s(zf);are=n(jw,"STRONG",{});var c0e=s(are);Aze=r(c0e,"deit"),c0e.forEach(t),yze=r(jw," \u2014 "),$k=n(jw,"A",{href:!0});var gzr=s($k);Lze=r(gzr,"DeiTConfig"),gzr.forEach(t),xze=r(jw," (DeiT model)"),jw.forEach(t),$ze=i(y),Wf=n(y,"LI",{});var f0e=s(Wf);nre=n(f0e,"STRONG",{});var hzr=s(nre);kze=r(hzr,"detr"),hzr.forEach(t),Sze=r(f0e," \u2014 "),kk=n(f0e,"A",{href:!0});var pzr=s(kk);Rze=r(pzr,"DetrConfig"),pzr.forEach(t),Pze=r(f0e," (DETR model)"),f0e.forEach(t),Bze=i(y),Qf=n(y,"LI",{});var m0e=s(Qf);sre=n(m0e,"STRONG",{});var _zr=s(sre);Ize=r(_zr,"distilbert"),_zr.forEach(t),Nze=r(m0e," \u2014 "),Sk=n(m0e,"A",{href:!0});var uzr=s(Sk);qze=r(uzr,"DistilBertConfig"),uzr.forEach(t),jze=r(m0e," (DistilBERT model)"),m0e.forEach(t),Dze=i(y),Hf=n(y,"LI",{});var g0e=s(Hf);lre=n(g0e,"STRONG",{});var bzr=s(lre);Gze=r(bzr,"dpr"),bzr.forEach(t),Oze=r(g0e," \u2014 "),Rk=n(g0e,"A",{href:!0});var vzr=s(Rk);Vze=r(vzr,"DPRConfig"),vzr.forEach(t),Xze=r(g0e," (DPR model)"),g0e.forEach(t),zze=i(y),Uf=n(y,"LI",{});var h0e=s(Uf);ire=n(h0e,"STRONG",{});var Fzr=s(ire);Wze=r(Fzr,"dpt"),Fzr.forEach(t),Qze=r(h0e," \u2014 "),Pk=n(h0e,"A",{href:!0});var Tzr=s(Pk);Hze=r(Tzr,"DPTConfig"),Tzr.forEach(t),Uze=r(h0e," (DPT model)"),h0e.forEach(t),Jze=i(y),Jf=n(y,"LI",{});var p0e=s(Jf);dre=n(p0e,"STRONG",{});var Mzr=s(dre);Yze=r(Mzr,"electra"),Mzr.forEach(t),Kze=r(p0e," \u2014 "),Bk=n(p0e,"A",{href:!0});var Ezr=s(Bk);Zze=r(Ezr,"ElectraConfig"),Ezr.forEach(t),eWe=r(p0e," (ELECTRA model)"),p0e.forEach(t),oWe=i(y),Yf=n(y,"LI",{});var _0e=s(Yf);cre=n(_0e,"STRONG",{});var Czr=s(cre);rWe=r(Czr,"encoder-decoder"),Czr.forEach(t),tWe=r(_0e," \u2014 "),Ik=n(_0e,"A",{href:!0});var wzr=s(Ik);aWe=r(wzr,"EncoderDecoderConfig"),wzr.forEach(t),nWe=r(_0e," (Encoder decoder model)"),_0e.forEach(t),sWe=i(y),Kf=n(y,"LI",{});var u0e=s(Kf);fre=n(u0e,"STRONG",{});var Azr=s(fre);lWe=r(Azr,"flaubert"),Azr.forEach(t),iWe=r(u0e," \u2014 "),Nk=n(u0e,"A",{href:!0});var yzr=s(Nk);dWe=r(yzr,"FlaubertConfig"),yzr.forEach(t),cWe=r(u0e," (FlauBERT model)"),u0e.forEach(t),fWe=i(y),Zf=n(y,"LI",{});var b0e=s(Zf);mre=n(b0e,"STRONG",{});var Lzr=s(mre);mWe=r(Lzr,"flava"),Lzr.forEach(t),gWe=r(b0e," \u2014 "),qk=n(b0e,"A",{href:!0});var xzr=s(qk);hWe=r(xzr,"FlavaConfig"),xzr.forEach(t),pWe=r(b0e," (Flava model)"),b0e.forEach(t),_We=i(y),em=n(y,"LI",{});var v0e=s(em);gre=n(v0e,"STRONG",{});var $zr=s(gre);uWe=r($zr,"fnet"),$zr.forEach(t),bWe=r(v0e," \u2014 "),jk=n(v0e,"A",{href:!0});var kzr=s(jk);vWe=r(kzr,"FNetConfig"),kzr.forEach(t),FWe=r(v0e," (FNet model)"),v0e.forEach(t),TWe=i(y),om=n(y,"LI",{});var F0e=s(om);hre=n(F0e,"STRONG",{});var Szr=s(hre);MWe=r(Szr,"fsmt"),Szr.forEach(t),EWe=r(F0e," \u2014 "),Dk=n(F0e,"A",{href:!0});var Rzr=s(Dk);CWe=r(Rzr,"FSMTConfig"),Rzr.forEach(t),wWe=r(F0e," (FairSeq Machine-Translation model)"),F0e.forEach(t),AWe=i(y),rm=n(y,"LI",{});var T0e=s(rm);pre=n(T0e,"STRONG",{});var Pzr=s(pre);yWe=r(Pzr,"funnel"),Pzr.forEach(t),LWe=r(T0e," \u2014 "),Gk=n(T0e,"A",{href:!0});var Bzr=s(Gk);xWe=r(Bzr,"FunnelConfig"),Bzr.forEach(t),$We=r(T0e," (Funnel Transformer model)"),T0e.forEach(t),kWe=i(y),tm=n(y,"LI",{});var M0e=s(tm);_re=n(M0e,"STRONG",{});var Izr=s(_re);SWe=r(Izr,"glpn"),Izr.forEach(t),RWe=r(M0e," \u2014 "),Ok=n(M0e,"A",{href:!0});var Nzr=s(Ok);PWe=r(Nzr,"GLPNConfig"),Nzr.forEach(t),BWe=r(M0e," (GLPN model)"),M0e.forEach(t),IWe=i(y),am=n(y,"LI",{});var E0e=s(am);ure=n(E0e,"STRONG",{});var qzr=s(ure);NWe=r(qzr,"gpt2"),qzr.forEach(t),qWe=r(E0e," \u2014 "),Vk=n(E0e,"A",{href:!0});var jzr=s(Vk);jWe=r(jzr,"GPT2Config"),jzr.forEach(t),DWe=r(E0e," (OpenAI GPT-2 model)"),E0e.forEach(t),GWe=i(y),nm=n(y,"LI",{});var C0e=s(nm);bre=n(C0e,"STRONG",{});var Dzr=s(bre);OWe=r(Dzr,"gpt_neo"),Dzr.forEach(t),VWe=r(C0e," \u2014 "),Xk=n(C0e,"A",{href:!0});var Gzr=s(Xk);XWe=r(Gzr,"GPTNeoConfig"),Gzr.forEach(t),zWe=r(C0e," (GPT Neo model)"),C0e.forEach(t),WWe=i(y),sm=n(y,"LI",{});var w0e=s(sm);vre=n(w0e,"STRONG",{});var Ozr=s(vre);QWe=r(Ozr,"gpt_neox"),Ozr.forEach(t),HWe=r(w0e," \u2014 "),zk=n(w0e,"A",{href:!0});var Vzr=s(zk);UWe=r(Vzr,"GPTNeoXConfig"),Vzr.forEach(t),JWe=r(w0e," (GPT NeoX model)"),w0e.forEach(t),YWe=i(y),lm=n(y,"LI",{});var A0e=s(lm);Fre=n(A0e,"STRONG",{});var Xzr=s(Fre);KWe=r(Xzr,"gptj"),Xzr.forEach(t),ZWe=r(A0e," \u2014 "),Wk=n(A0e,"A",{href:!0});var zzr=s(Wk);eQe=r(zzr,"GPTJConfig"),zzr.forEach(t),oQe=r(A0e," (GPT-J model)"),A0e.forEach(t),rQe=i(y),im=n(y,"LI",{});var y0e=s(im);Tre=n(y0e,"STRONG",{});var Wzr=s(Tre);tQe=r(Wzr,"hubert"),Wzr.forEach(t),aQe=r(y0e," \u2014 "),Qk=n(y0e,"A",{href:!0});var Qzr=s(Qk);nQe=r(Qzr,"HubertConfig"),Qzr.forEach(t),sQe=r(y0e," (Hubert model)"),y0e.forEach(t),lQe=i(y),dm=n(y,"LI",{});var L0e=s(dm);Mre=n(L0e,"STRONG",{});var Hzr=s(Mre);iQe=r(Hzr,"ibert"),Hzr.forEach(t),dQe=r(L0e," \u2014 "),Hk=n(L0e,"A",{href:!0});var Uzr=s(Hk);cQe=r(Uzr,"IBertConfig"),Uzr.forEach(t),fQe=r(L0e," (I-BERT model)"),L0e.forEach(t),mQe=i(y),cm=n(y,"LI",{});var x0e=s(cm);Ere=n(x0e,"STRONG",{});var Jzr=s(Ere);gQe=r(Jzr,"imagegpt"),Jzr.forEach(t),hQe=r(x0e," \u2014 "),Uk=n(x0e,"A",{href:!0});var Yzr=s(Uk);pQe=r(Yzr,"ImageGPTConfig"),Yzr.forEach(t),_Qe=r(x0e," (ImageGPT model)"),x0e.forEach(t),uQe=i(y),fm=n(y,"LI",{});var $0e=s(fm);Cre=n($0e,"STRONG",{});var Kzr=s(Cre);bQe=r(Kzr,"layoutlm"),Kzr.forEach(t),vQe=r($0e," \u2014 "),Jk=n($0e,"A",{href:!0});var Zzr=s(Jk);FQe=r(Zzr,"LayoutLMConfig"),Zzr.forEach(t),TQe=r($0e," (LayoutLM model)"),$0e.forEach(t),MQe=i(y),mm=n(y,"LI",{});var k0e=s(mm);wre=n(k0e,"STRONG",{});var eWr=s(wre);EQe=r(eWr,"layoutlmv2"),eWr.forEach(t),CQe=r(k0e," \u2014 "),Yk=n(k0e,"A",{href:!0});var oWr=s(Yk);wQe=r(oWr,"LayoutLMv2Config"),oWr.forEach(t),AQe=r(k0e," (LayoutLMv2 model)"),k0e.forEach(t),yQe=i(y),gm=n(y,"LI",{});var S0e=s(gm);Are=n(S0e,"STRONG",{});var rWr=s(Are);LQe=r(rWr,"layoutlmv3"),rWr.forEach(t),xQe=r(S0e," \u2014 "),Kk=n(S0e,"A",{href:!0});var tWr=s(Kk);$Qe=r(tWr,"LayoutLMv3Config"),tWr.forEach(t),kQe=r(S0e," (LayoutLMv3 model)"),S0e.forEach(t),SQe=i(y),hm=n(y,"LI",{});var R0e=s(hm);yre=n(R0e,"STRONG",{});var aWr=s(yre);RQe=r(aWr,"led"),aWr.forEach(t),PQe=r(R0e," \u2014 "),Zk=n(R0e,"A",{href:!0});var nWr=s(Zk);BQe=r(nWr,"LEDConfig"),nWr.forEach(t),IQe=r(R0e," (LED model)"),R0e.forEach(t),NQe=i(y),pm=n(y,"LI",{});var P0e=s(pm);Lre=n(P0e,"STRONG",{});var sWr=s(Lre);qQe=r(sWr,"longformer"),sWr.forEach(t),jQe=r(P0e," \u2014 "),eS=n(P0e,"A",{href:!0});var lWr=s(eS);DQe=r(lWr,"LongformerConfig"),lWr.forEach(t),GQe=r(P0e," (Longformer model)"),P0e.forEach(t),OQe=i(y),_m=n(y,"LI",{});var B0e=s(_m);xre=n(B0e,"STRONG",{});var iWr=s(xre);VQe=r(iWr,"luke"),iWr.forEach(t),XQe=r(B0e," \u2014 "),oS=n(B0e,"A",{href:!0});var dWr=s(oS);zQe=r(dWr,"LukeConfig"),dWr.forEach(t),WQe=r(B0e," (LUKE model)"),B0e.forEach(t),QQe=i(y),um=n(y,"LI",{});var I0e=s(um);$re=n(I0e,"STRONG",{});var cWr=s($re);HQe=r(cWr,"lxmert"),cWr.forEach(t),UQe=r(I0e," \u2014 "),rS=n(I0e,"A",{href:!0});var fWr=s(rS);JQe=r(fWr,"LxmertConfig"),fWr.forEach(t),YQe=r(I0e," (LXMERT model)"),I0e.forEach(t),KQe=i(y),bm=n(y,"LI",{});var N0e=s(bm);kre=n(N0e,"STRONG",{});var mWr=s(kre);ZQe=r(mWr,"m2m_100"),mWr.forEach(t),eHe=r(N0e," \u2014 "),tS=n(N0e,"A",{href:!0});var gWr=s(tS);oHe=r(gWr,"M2M100Config"),gWr.forEach(t),rHe=r(N0e," (M2M100 model)"),N0e.forEach(t),tHe=i(y),vm=n(y,"LI",{});var q0e=s(vm);Sre=n(q0e,"STRONG",{});var hWr=s(Sre);aHe=r(hWr,"marian"),hWr.forEach(t),nHe=r(q0e," \u2014 "),aS=n(q0e,"A",{href:!0});var pWr=s(aS);sHe=r(pWr,"MarianConfig"),pWr.forEach(t),lHe=r(q0e," (Marian model)"),q0e.forEach(t),iHe=i(y),Fm=n(y,"LI",{});var j0e=s(Fm);Rre=n(j0e,"STRONG",{});var _Wr=s(Rre);dHe=r(_Wr,"maskformer"),_Wr.forEach(t),cHe=r(j0e," \u2014 "),nS=n(j0e,"A",{href:!0});var uWr=s(nS);fHe=r(uWr,"MaskFormerConfig"),uWr.forEach(t),mHe=r(j0e," (MaskFormer model)"),j0e.forEach(t),gHe=i(y),Tm=n(y,"LI",{});var D0e=s(Tm);Pre=n(D0e,"STRONG",{});var bWr=s(Pre);hHe=r(bWr,"mbart"),bWr.forEach(t),pHe=r(D0e," \u2014 "),sS=n(D0e,"A",{href:!0});var vWr=s(sS);_He=r(vWr,"MBartConfig"),vWr.forEach(t),uHe=r(D0e," (mBART model)"),D0e.forEach(t),bHe=i(y),Mm=n(y,"LI",{});var G0e=s(Mm);Bre=n(G0e,"STRONG",{});var FWr=s(Bre);vHe=r(FWr,"megatron-bert"),FWr.forEach(t),FHe=r(G0e," \u2014 "),lS=n(G0e,"A",{href:!0});var TWr=s(lS);THe=r(TWr,"MegatronBertConfig"),TWr.forEach(t),MHe=r(G0e," (MegatronBert model)"),G0e.forEach(t),EHe=i(y),Em=n(y,"LI",{});var O0e=s(Em);Ire=n(O0e,"STRONG",{});var MWr=s(Ire);CHe=r(MWr,"mobilebert"),MWr.forEach(t),wHe=r(O0e," \u2014 "),iS=n(O0e,"A",{href:!0});var EWr=s(iS);AHe=r(EWr,"MobileBertConfig"),EWr.forEach(t),yHe=r(O0e," (MobileBERT model)"),O0e.forEach(t),LHe=i(y),Cm=n(y,"LI",{});var V0e=s(Cm);Nre=n(V0e,"STRONG",{});var CWr=s(Nre);xHe=r(CWr,"mobilevit"),CWr.forEach(t),$He=r(V0e," \u2014 "),dS=n(V0e,"A",{href:!0});var wWr=s(dS);kHe=r(wWr,"MobileViTConfig"),wWr.forEach(t),SHe=r(V0e," (MobileViT model)"),V0e.forEach(t),RHe=i(y),wm=n(y,"LI",{});var X0e=s(wm);qre=n(X0e,"STRONG",{});var AWr=s(qre);PHe=r(AWr,"mpnet"),AWr.forEach(t),BHe=r(X0e," \u2014 "),cS=n(X0e,"A",{href:!0});var yWr=s(cS);IHe=r(yWr,"MPNetConfig"),yWr.forEach(t),NHe=r(X0e," (MPNet model)"),X0e.forEach(t),qHe=i(y),Am=n(y,"LI",{});var z0e=s(Am);jre=n(z0e,"STRONG",{});var LWr=s(jre);jHe=r(LWr,"mt5"),LWr.forEach(t),DHe=r(z0e," \u2014 "),fS=n(z0e,"A",{href:!0});var xWr=s(fS);GHe=r(xWr,"MT5Config"),xWr.forEach(t),OHe=r(z0e," (mT5 model)"),z0e.forEach(t),VHe=i(y),ym=n(y,"LI",{});var W0e=s(ym);Dre=n(W0e,"STRONG",{});var $Wr=s(Dre);XHe=r($Wr,"nystromformer"),$Wr.forEach(t),zHe=r(W0e," \u2014 "),mS=n(W0e,"A",{href:!0});var kWr=s(mS);WHe=r(kWr,"NystromformerConfig"),kWr.forEach(t),QHe=r(W0e," (Nystromformer model)"),W0e.forEach(t),HHe=i(y),Lm=n(y,"LI",{});var Q0e=s(Lm);Gre=n(Q0e,"STRONG",{});var SWr=s(Gre);UHe=r(SWr,"openai-gpt"),SWr.forEach(t),JHe=r(Q0e," \u2014 "),gS=n(Q0e,"A",{href:!0});var RWr=s(gS);YHe=r(RWr,"OpenAIGPTConfig"),RWr.forEach(t),KHe=r(Q0e," (OpenAI GPT model)"),Q0e.forEach(t),ZHe=i(y),xm=n(y,"LI",{});var H0e=s(xm);Ore=n(H0e,"STRONG",{});var PWr=s(Ore);eUe=r(PWr,"opt"),PWr.forEach(t),oUe=r(H0e," \u2014 "),hS=n(H0e,"A",{href:!0});var BWr=s(hS);rUe=r(BWr,"OPTConfig"),BWr.forEach(t),tUe=r(H0e," (OPT model)"),H0e.forEach(t),aUe=i(y),$m=n(y,"LI",{});var U0e=s($m);Vre=n(U0e,"STRONG",{});var IWr=s(Vre);nUe=r(IWr,"pegasus"),IWr.forEach(t),sUe=r(U0e," \u2014 "),pS=n(U0e,"A",{href:!0});var NWr=s(pS);lUe=r(NWr,"PegasusConfig"),NWr.forEach(t),iUe=r(U0e," (Pegasus model)"),U0e.forEach(t),dUe=i(y),km=n(y,"LI",{});var J0e=s(km);Xre=n(J0e,"STRONG",{});var qWr=s(Xre);cUe=r(qWr,"perceiver"),qWr.forEach(t),fUe=r(J0e," \u2014 "),_S=n(J0e,"A",{href:!0});var jWr=s(_S);mUe=r(jWr,"PerceiverConfig"),jWr.forEach(t),gUe=r(J0e," (Perceiver model)"),J0e.forEach(t),hUe=i(y),Sm=n(y,"LI",{});var Y0e=s(Sm);zre=n(Y0e,"STRONG",{});var DWr=s(zre);pUe=r(DWr,"plbart"),DWr.forEach(t),_Ue=r(Y0e," \u2014 "),uS=n(Y0e,"A",{href:!0});var GWr=s(uS);uUe=r(GWr,"PLBartConfig"),GWr.forEach(t),bUe=r(Y0e," (PLBart model)"),Y0e.forEach(t),vUe=i(y),Rm=n(y,"LI",{});var K0e=s(Rm);Wre=n(K0e,"STRONG",{});var OWr=s(Wre);FUe=r(OWr,"poolformer"),OWr.forEach(t),TUe=r(K0e," \u2014 "),bS=n(K0e,"A",{href:!0});var VWr=s(bS);MUe=r(VWr,"PoolFormerConfig"),VWr.forEach(t),EUe=r(K0e," (PoolFormer model)"),K0e.forEach(t),CUe=i(y),Pm=n(y,"LI",{});var Z0e=s(Pm);Qre=n(Z0e,"STRONG",{});var XWr=s(Qre);wUe=r(XWr,"prophetnet"),XWr.forEach(t),AUe=r(Z0e," \u2014 "),vS=n(Z0e,"A",{href:!0});var zWr=s(vS);yUe=r(zWr,"ProphetNetConfig"),zWr.forEach(t),LUe=r(Z0e," (ProphetNet model)"),Z0e.forEach(t),xUe=i(y),Bm=n(y,"LI",{});var ewe=s(Bm);Hre=n(ewe,"STRONG",{});var WWr=s(Hre);$Ue=r(WWr,"qdqbert"),WWr.forEach(t),kUe=r(ewe," \u2014 "),FS=n(ewe,"A",{href:!0});var QWr=s(FS);SUe=r(QWr,"QDQBertConfig"),QWr.forEach(t),RUe=r(ewe," (QDQBert model)"),ewe.forEach(t),PUe=i(y),Im=n(y,"LI",{});var owe=s(Im);Ure=n(owe,"STRONG",{});var HWr=s(Ure);BUe=r(HWr,"rag"),HWr.forEach(t),IUe=r(owe," \u2014 "),TS=n(owe,"A",{href:!0});var UWr=s(TS);NUe=r(UWr,"RagConfig"),UWr.forEach(t),qUe=r(owe," (RAG model)"),owe.forEach(t),jUe=i(y),Nm=n(y,"LI",{});var rwe=s(Nm);Jre=n(rwe,"STRONG",{});var JWr=s(Jre);DUe=r(JWr,"realm"),JWr.forEach(t),GUe=r(rwe," \u2014 "),MS=n(rwe,"A",{href:!0});var YWr=s(MS);OUe=r(YWr,"RealmConfig"),YWr.forEach(t),VUe=r(rwe," (Realm model)"),rwe.forEach(t),XUe=i(y),qm=n(y,"LI",{});var twe=s(qm);Yre=n(twe,"STRONG",{});var KWr=s(Yre);zUe=r(KWr,"reformer"),KWr.forEach(t),WUe=r(twe," \u2014 "),ES=n(twe,"A",{href:!0});var ZWr=s(ES);QUe=r(ZWr,"ReformerConfig"),ZWr.forEach(t),HUe=r(twe," (Reformer model)"),twe.forEach(t),UUe=i(y),jm=n(y,"LI",{});var awe=s(jm);Kre=n(awe,"STRONG",{});var eQr=s(Kre);JUe=r(eQr,"regnet"),eQr.forEach(t),YUe=r(awe," \u2014 "),CS=n(awe,"A",{href:!0});var oQr=s(CS);KUe=r(oQr,"RegNetConfig"),oQr.forEach(t),ZUe=r(awe," (RegNet model)"),awe.forEach(t),eJe=i(y),Dm=n(y,"LI",{});var nwe=s(Dm);Zre=n(nwe,"STRONG",{});var rQr=s(Zre);oJe=r(rQr,"rembert"),rQr.forEach(t),rJe=r(nwe," \u2014 "),wS=n(nwe,"A",{href:!0});var tQr=s(wS);tJe=r(tQr,"RemBertConfig"),tQr.forEach(t),aJe=r(nwe," (RemBERT model)"),nwe.forEach(t),nJe=i(y),Gm=n(y,"LI",{});var swe=s(Gm);ete=n(swe,"STRONG",{});var aQr=s(ete);sJe=r(aQr,"resnet"),aQr.forEach(t),lJe=r(swe," \u2014 "),AS=n(swe,"A",{href:!0});var nQr=s(AS);iJe=r(nQr,"ResNetConfig"),nQr.forEach(t),dJe=r(swe," (ResNet model)"),swe.forEach(t),cJe=i(y),Om=n(y,"LI",{});var lwe=s(Om);ote=n(lwe,"STRONG",{});var sQr=s(ote);fJe=r(sQr,"retribert"),sQr.forEach(t),mJe=r(lwe," \u2014 "),yS=n(lwe,"A",{href:!0});var lQr=s(yS);gJe=r(lQr,"RetriBertConfig"),lQr.forEach(t),hJe=r(lwe," (RetriBERT model)"),lwe.forEach(t),pJe=i(y),Vm=n(y,"LI",{});var iwe=s(Vm);rte=n(iwe,"STRONG",{});var iQr=s(rte);_Je=r(iQr,"roberta"),iQr.forEach(t),uJe=r(iwe," \u2014 "),LS=n(iwe,"A",{href:!0});var dQr=s(LS);bJe=r(dQr,"RobertaConfig"),dQr.forEach(t),vJe=r(iwe," (RoBERTa model)"),iwe.forEach(t),FJe=i(y),Xm=n(y,"LI",{});var dwe=s(Xm);tte=n(dwe,"STRONG",{});var cQr=s(tte);TJe=r(cQr,"roformer"),cQr.forEach(t),MJe=r(dwe," \u2014 "),xS=n(dwe,"A",{href:!0});var fQr=s(xS);EJe=r(fQr,"RoFormerConfig"),fQr.forEach(t),CJe=r(dwe," (RoFormer model)"),dwe.forEach(t),wJe=i(y),zm=n(y,"LI",{});var cwe=s(zm);ate=n(cwe,"STRONG",{});var mQr=s(ate);AJe=r(mQr,"segformer"),mQr.forEach(t),yJe=r(cwe," \u2014 "),$S=n(cwe,"A",{href:!0});var gQr=s($S);LJe=r(gQr,"SegformerConfig"),gQr.forEach(t),xJe=r(cwe," (SegFormer model)"),cwe.forEach(t),$Je=i(y),Wm=n(y,"LI",{});var fwe=s(Wm);nte=n(fwe,"STRONG",{});var hQr=s(nte);kJe=r(hQr,"sew"),hQr.forEach(t),SJe=r(fwe," \u2014 "),kS=n(fwe,"A",{href:!0});var pQr=s(kS);RJe=r(pQr,"SEWConfig"),pQr.forEach(t),PJe=r(fwe," (SEW model)"),fwe.forEach(t),BJe=i(y),Qm=n(y,"LI",{});var mwe=s(Qm);ste=n(mwe,"STRONG",{});var _Qr=s(ste);IJe=r(_Qr,"sew-d"),_Qr.forEach(t),NJe=r(mwe," \u2014 "),SS=n(mwe,"A",{href:!0});var uQr=s(SS);qJe=r(uQr,"SEWDConfig"),uQr.forEach(t),jJe=r(mwe," (SEW-D model)"),mwe.forEach(t),DJe=i(y),Hm=n(y,"LI",{});var gwe=s(Hm);lte=n(gwe,"STRONG",{});var bQr=s(lte);GJe=r(bQr,"speech-encoder-decoder"),bQr.forEach(t),OJe=r(gwe," \u2014 "),RS=n(gwe,"A",{href:!0});var vQr=s(RS);VJe=r(vQr,"SpeechEncoderDecoderConfig"),vQr.forEach(t),XJe=r(gwe," (Speech Encoder decoder model)"),gwe.forEach(t),zJe=i(y),Um=n(y,"LI",{});var hwe=s(Um);ite=n(hwe,"STRONG",{});var FQr=s(ite);WJe=r(FQr,"speech_to_text"),FQr.forEach(t),QJe=r(hwe," \u2014 "),PS=n(hwe,"A",{href:!0});var TQr=s(PS);HJe=r(TQr,"Speech2TextConfig"),TQr.forEach(t),UJe=r(hwe," (Speech2Text model)"),hwe.forEach(t),JJe=i(y),Jm=n(y,"LI",{});var pwe=s(Jm);dte=n(pwe,"STRONG",{});var MQr=s(dte);YJe=r(MQr,"speech_to_text_2"),MQr.forEach(t),KJe=r(pwe," \u2014 "),BS=n(pwe,"A",{href:!0});var EQr=s(BS);ZJe=r(EQr,"Speech2Text2Config"),EQr.forEach(t),eYe=r(pwe," (Speech2Text2 model)"),pwe.forEach(t),oYe=i(y),Ym=n(y,"LI",{});var _we=s(Ym);cte=n(_we,"STRONG",{});var CQr=s(cte);rYe=r(CQr,"splinter"),CQr.forEach(t),tYe=r(_we," \u2014 "),IS=n(_we,"A",{href:!0});var wQr=s(IS);aYe=r(wQr,"SplinterConfig"),wQr.forEach(t),nYe=r(_we," (Splinter model)"),_we.forEach(t),sYe=i(y),Km=n(y,"LI",{});var uwe=s(Km);fte=n(uwe,"STRONG",{});var AQr=s(fte);lYe=r(AQr,"squeezebert"),AQr.forEach(t),iYe=r(uwe," \u2014 "),NS=n(uwe,"A",{href:!0});var yQr=s(NS);dYe=r(yQr,"SqueezeBertConfig"),yQr.forEach(t),cYe=r(uwe," (SqueezeBERT model)"),uwe.forEach(t),fYe=i(y),Zm=n(y,"LI",{});var bwe=s(Zm);mte=n(bwe,"STRONG",{});var LQr=s(mte);mYe=r(LQr,"swin"),LQr.forEach(t),gYe=r(bwe," \u2014 "),qS=n(bwe,"A",{href:!0});var xQr=s(qS);hYe=r(xQr,"SwinConfig"),xQr.forEach(t),pYe=r(bwe," (Swin model)"),bwe.forEach(t),_Ye=i(y),eg=n(y,"LI",{});var vwe=s(eg);gte=n(vwe,"STRONG",{});var $Qr=s(gte);uYe=r($Qr,"t5"),$Qr.forEach(t),bYe=r(vwe," \u2014 "),jS=n(vwe,"A",{href:!0});var kQr=s(jS);vYe=r(kQr,"T5Config"),kQr.forEach(t),FYe=r(vwe," (T5 model)"),vwe.forEach(t),TYe=i(y),og=n(y,"LI",{});var Fwe=s(og);hte=n(Fwe,"STRONG",{});var SQr=s(hte);MYe=r(SQr,"tapas"),SQr.forEach(t),EYe=r(Fwe," \u2014 "),DS=n(Fwe,"A",{href:!0});var RQr=s(DS);CYe=r(RQr,"TapasConfig"),RQr.forEach(t),wYe=r(Fwe," (TAPAS model)"),Fwe.forEach(t),AYe=i(y),rg=n(y,"LI",{});var Twe=s(rg);pte=n(Twe,"STRONG",{});var PQr=s(pte);yYe=r(PQr,"trajectory_transformer"),PQr.forEach(t),LYe=r(Twe," \u2014 "),GS=n(Twe,"A",{href:!0});var BQr=s(GS);xYe=r(BQr,"TrajectoryTransformerConfig"),BQr.forEach(t),$Ye=r(Twe," (Trajectory Transformer model)"),Twe.forEach(t),kYe=i(y),tg=n(y,"LI",{});var Mwe=s(tg);_te=n(Mwe,"STRONG",{});var IQr=s(_te);SYe=r(IQr,"transfo-xl"),IQr.forEach(t),RYe=r(Mwe," \u2014 "),OS=n(Mwe,"A",{href:!0});var NQr=s(OS);PYe=r(NQr,"TransfoXLConfig"),NQr.forEach(t),BYe=r(Mwe," (Transformer-XL model)"),Mwe.forEach(t),IYe=i(y),ag=n(y,"LI",{});var Ewe=s(ag);ute=n(Ewe,"STRONG",{});var qQr=s(ute);NYe=r(qQr,"trocr"),qQr.forEach(t),qYe=r(Ewe," \u2014 "),VS=n(Ewe,"A",{href:!0});var jQr=s(VS);jYe=r(jQr,"TrOCRConfig"),jQr.forEach(t),DYe=r(Ewe," (TrOCR model)"),Ewe.forEach(t),GYe=i(y),ng=n(y,"LI",{});var Cwe=s(ng);bte=n(Cwe,"STRONG",{});var DQr=s(bte);OYe=r(DQr,"unispeech"),DQr.forEach(t),VYe=r(Cwe," \u2014 "),XS=n(Cwe,"A",{href:!0});var GQr=s(XS);XYe=r(GQr,"UniSpeechConfig"),GQr.forEach(t),zYe=r(Cwe," (UniSpeech model)"),Cwe.forEach(t),WYe=i(y),sg=n(y,"LI",{});var wwe=s(sg);vte=n(wwe,"STRONG",{});var OQr=s(vte);QYe=r(OQr,"unispeech-sat"),OQr.forEach(t),HYe=r(wwe," \u2014 "),zS=n(wwe,"A",{href:!0});var VQr=s(zS);UYe=r(VQr,"UniSpeechSatConfig"),VQr.forEach(t),JYe=r(wwe," (UniSpeechSat model)"),wwe.forEach(t),YYe=i(y),lg=n(y,"LI",{});var Awe=s(lg);Fte=n(Awe,"STRONG",{});var XQr=s(Fte);KYe=r(XQr,"van"),XQr.forEach(t),ZYe=r(Awe," \u2014 "),WS=n(Awe,"A",{href:!0});var zQr=s(WS);eKe=r(zQr,"VanConfig"),zQr.forEach(t),oKe=r(Awe," (VAN model)"),Awe.forEach(t),rKe=i(y),ig=n(y,"LI",{});var ywe=s(ig);Tte=n(ywe,"STRONG",{});var WQr=s(Tte);tKe=r(WQr,"vilt"),WQr.forEach(t),aKe=r(ywe," \u2014 "),QS=n(ywe,"A",{href:!0});var QQr=s(QS);nKe=r(QQr,"ViltConfig"),QQr.forEach(t),sKe=r(ywe," (ViLT model)"),ywe.forEach(t),lKe=i(y),dg=n(y,"LI",{});var Lwe=s(dg);Mte=n(Lwe,"STRONG",{});var HQr=s(Mte);iKe=r(HQr,"vision-encoder-decoder"),HQr.forEach(t),dKe=r(Lwe," \u2014 "),HS=n(Lwe,"A",{href:!0});var UQr=s(HS);cKe=r(UQr,"VisionEncoderDecoderConfig"),UQr.forEach(t),fKe=r(Lwe," (Vision Encoder decoder model)"),Lwe.forEach(t),mKe=i(y),cg=n(y,"LI",{});var xwe=s(cg);Ete=n(xwe,"STRONG",{});var JQr=s(Ete);gKe=r(JQr,"vision-text-dual-encoder"),JQr.forEach(t),hKe=r(xwe," \u2014 "),US=n(xwe,"A",{href:!0});var YQr=s(US);pKe=r(YQr,"VisionTextDualEncoderConfig"),YQr.forEach(t),_Ke=r(xwe," (VisionTextDualEncoder model)"),xwe.forEach(t),uKe=i(y),fg=n(y,"LI",{});var $we=s(fg);Cte=n($we,"STRONG",{});var KQr=s(Cte);bKe=r(KQr,"visual_bert"),KQr.forEach(t),vKe=r($we," \u2014 "),JS=n($we,"A",{href:!0});var ZQr=s(JS);FKe=r(ZQr,"VisualBertConfig"),ZQr.forEach(t),TKe=r($we," (VisualBert model)"),$we.forEach(t),MKe=i(y),mg=n(y,"LI",{});var kwe=s(mg);wte=n(kwe,"STRONG",{});var eHr=s(wte);EKe=r(eHr,"vit"),eHr.forEach(t),CKe=r(kwe," \u2014 "),YS=n(kwe,"A",{href:!0});var oHr=s(YS);wKe=r(oHr,"ViTConfig"),oHr.forEach(t),AKe=r(kwe," (ViT model)"),kwe.forEach(t),yKe=i(y),gg=n(y,"LI",{});var Swe=s(gg);Ate=n(Swe,"STRONG",{});var rHr=s(Ate);LKe=r(rHr,"vit_mae"),rHr.forEach(t),xKe=r(Swe," \u2014 "),KS=n(Swe,"A",{href:!0});var tHr=s(KS);$Ke=r(tHr,"ViTMAEConfig"),tHr.forEach(t),kKe=r(Swe," (ViTMAE model)"),Swe.forEach(t),SKe=i(y),hg=n(y,"LI",{});var Rwe=s(hg);yte=n(Rwe,"STRONG",{});var aHr=s(yte);RKe=r(aHr,"wav2vec2"),aHr.forEach(t),PKe=r(Rwe," \u2014 "),ZS=n(Rwe,"A",{href:!0});var nHr=s(ZS);BKe=r(nHr,"Wav2Vec2Config"),nHr.forEach(t),IKe=r(Rwe," (Wav2Vec2 model)"),Rwe.forEach(t),NKe=i(y),pg=n(y,"LI",{});var Pwe=s(pg);Lte=n(Pwe,"STRONG",{});var sHr=s(Lte);qKe=r(sHr,"wav2vec2-conformer"),sHr.forEach(t),jKe=r(Pwe," \u2014 "),eR=n(Pwe,"A",{href:!0});var lHr=s(eR);DKe=r(lHr,"Wav2Vec2ConformerConfig"),lHr.forEach(t),GKe=r(Pwe," (Wav2Vec2-Conformer model)"),Pwe.forEach(t),OKe=i(y),_g=n(y,"LI",{});var Bwe=s(_g);xte=n(Bwe,"STRONG",{});var iHr=s(xte);VKe=r(iHr,"wavlm"),iHr.forEach(t),XKe=r(Bwe," \u2014 "),oR=n(Bwe,"A",{href:!0});var dHr=s(oR);zKe=r(dHr,"WavLMConfig"),dHr.forEach(t),WKe=r(Bwe," (WavLM model)"),Bwe.forEach(t),QKe=i(y),ug=n(y,"LI",{});var Iwe=s(ug);$te=n(Iwe,"STRONG",{});var cHr=s($te);HKe=r(cHr,"xglm"),cHr.forEach(t),UKe=r(Iwe," \u2014 "),rR=n(Iwe,"A",{href:!0});var fHr=s(rR);JKe=r(fHr,"XGLMConfig"),fHr.forEach(t),YKe=r(Iwe," (XGLM model)"),Iwe.forEach(t),KKe=i(y),bg=n(y,"LI",{});var Nwe=s(bg);kte=n(Nwe,"STRONG",{});var mHr=s(kte);ZKe=r(mHr,"xlm"),mHr.forEach(t),eZe=r(Nwe," \u2014 "),tR=n(Nwe,"A",{href:!0});var gHr=s(tR);oZe=r(gHr,"XLMConfig"),gHr.forEach(t),rZe=r(Nwe," (XLM model)"),Nwe.forEach(t),tZe=i(y),vg=n(y,"LI",{});var qwe=s(vg);Ste=n(qwe,"STRONG",{});var hHr=s(Ste);aZe=r(hHr,"xlm-prophetnet"),hHr.forEach(t),nZe=r(qwe," \u2014 "),aR=n(qwe,"A",{href:!0});var pHr=s(aR);sZe=r(pHr,"XLMProphetNetConfig"),pHr.forEach(t),lZe=r(qwe," (XLMProphetNet model)"),qwe.forEach(t),iZe=i(y),Fg=n(y,"LI",{});var jwe=s(Fg);Rte=n(jwe,"STRONG",{});var _Hr=s(Rte);dZe=r(_Hr,"xlm-roberta"),_Hr.forEach(t),cZe=r(jwe," \u2014 "),nR=n(jwe,"A",{href:!0});var uHr=s(nR);fZe=r(uHr,"XLMRobertaConfig"),uHr.forEach(t),mZe=r(jwe," (XLM-RoBERTa model)"),jwe.forEach(t),gZe=i(y),Tg=n(y,"LI",{});var Dwe=s(Tg);Pte=n(Dwe,"STRONG",{});var bHr=s(Pte);hZe=r(bHr,"xlm-roberta-xl"),bHr.forEach(t),pZe=r(Dwe," \u2014 "),sR=n(Dwe,"A",{href:!0});var vHr=s(sR);_Ze=r(vHr,"XLMRobertaXLConfig"),vHr.forEach(t),uZe=r(Dwe," (XLM-RoBERTa-XL model)"),Dwe.forEach(t),bZe=i(y),Mg=n(y,"LI",{});var Gwe=s(Mg);Bte=n(Gwe,"STRONG",{});var FHr=s(Bte);vZe=r(FHr,"xlnet"),FHr.forEach(t),FZe=r(Gwe," \u2014 "),lR=n(Gwe,"A",{href:!0});var THr=s(lR);TZe=r(THr,"XLNetConfig"),THr.forEach(t),MZe=r(Gwe," (XLNet model)"),Gwe.forEach(t),EZe=i(y),Eg=n(y,"LI",{});var Owe=s(Eg);Ite=n(Owe,"STRONG",{});var MHr=s(Ite);CZe=r(MHr,"yolos"),MHr.forEach(t),wZe=r(Owe," \u2014 "),iR=n(Owe,"A",{href:!0});var EHr=s(iR);AZe=r(EHr,"YolosConfig"),EHr.forEach(t),yZe=r(Owe," (YOLOS model)"),Owe.forEach(t),LZe=i(y),Cg=n(y,"LI",{});var Vwe=s(Cg);Nte=n(Vwe,"STRONG",{});var CHr=s(Nte);xZe=r(CHr,"yoso"),CHr.forEach(t),$Ze=r(Vwe," \u2014 "),dR=n(Vwe,"A",{href:!0});var wHr=s(dR);kZe=r(wHr,"YosoConfig"),wHr.forEach(t),SZe=r(Vwe," (YOSO model)"),Vwe.forEach(t),y.forEach(t),RZe=i(rt),T(wg.$$.fragment,rt),rt.forEach(t),PZe=i(ot),Ag=n(ot,"DIV",{class:!0});var ODe=s(Ag);T(XA.$$.fragment,ODe),BZe=i(ODe),qte=n(ODe,"P",{});var AHr=s(qte);IZe=r(AHr,"Register a new configuration for this class."),AHr.forEach(t),ODe.forEach(t),ot.forEach(t),zqe=i(f),Mi=n(f,"H2",{class:!0});var VDe=s(Mi);yg=n(VDe,"A",{id:!0,class:!0,href:!0});var yHr=s(yg);jte=n(yHr,"SPAN",{});var LHr=s(jte);T(zA.$$.fragment,LHr),LHr.forEach(t),yHr.forEach(t),NZe=i(VDe),Dte=n(VDe,"SPAN",{});var xHr=s(Dte);qZe=r(xHr,"AutoTokenizer"),xHr.forEach(t),VDe.forEach(t),Wqe=i(f),wo=n(f,"DIV",{class:!0});var Ns=s(wo);T(WA.$$.fragment,Ns),jZe=i(Ns),QA=n(Ns,"P",{});var XDe=s(QA);DZe=r(XDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),cR=n(XDe,"A",{href:!0});var $Hr=s(cR);GZe=r($Hr,"AutoTokenizer.from_pretrained()"),$Hr.forEach(t),OZe=r(XDe," class method."),XDe.forEach(t),VZe=i(Ns),HA=n(Ns,"P",{});var zDe=s(HA);XZe=r(zDe,"This class cannot be instantiated directly using "),Gte=n(zDe,"CODE",{});var kHr=s(Gte);zZe=r(kHr,"__init__()"),kHr.forEach(t),WZe=r(zDe," (throws an error)."),zDe.forEach(t),QZe=i(Ns),Cr=n(Ns,"DIV",{class:!0});var qs=s(Cr);T(UA.$$.fragment,qs),HZe=i(qs),Ote=n(qs,"P",{});var SHr=s(Ote);UZe=r(SHr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),SHr.forEach(t),JZe=i(qs),ya=n(qs,"P",{});var Dw=s(ya);YZe=r(Dw,"The tokenizer class to instantiate is selected based on the "),Vte=n(Dw,"CODE",{});var RHr=s(Vte);KZe=r(RHr,"model_type"),RHr.forEach(t),ZZe=r(Dw,` property of the config object (either
passed as an argument or loaded from `),Xte=n(Dw,"CODE",{});var PHr=s(Xte);eeo=r(PHr,"pretrained_model_name_or_path"),PHr.forEach(t),oeo=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zte=n(Dw,"CODE",{});var BHr=s(zte);reo=r(BHr,"pretrained_model_name_or_path"),BHr.forEach(t),teo=r(Dw,":"),Dw.forEach(t),aeo=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Jx=s(Sn);Wte=n(Jx,"STRONG",{});var IHr=s(Wte);neo=r(IHr,"albert"),IHr.forEach(t),seo=r(Jx," \u2014 "),fR=n(Jx,"A",{href:!0});var NHr=s(fR);leo=r(NHr,"AlbertTokenizer"),NHr.forEach(t),ieo=r(Jx," or "),mR=n(Jx,"A",{href:!0});var qHr=s(mR);deo=r(qHr,"AlbertTokenizerFast"),qHr.forEach(t),ceo=r(Jx," (ALBERT model)"),Jx.forEach(t),feo=i(S),Rn=n(S,"LI",{});var Yx=s(Rn);Qte=n(Yx,"STRONG",{});var jHr=s(Qte);meo=r(jHr,"bart"),jHr.forEach(t),geo=r(Yx," \u2014 "),gR=n(Yx,"A",{href:!0});var DHr=s(gR);heo=r(DHr,"BartTokenizer"),DHr.forEach(t),peo=r(Yx," or "),hR=n(Yx,"A",{href:!0});var GHr=s(hR);_eo=r(GHr,"BartTokenizerFast"),GHr.forEach(t),ueo=r(Yx," (BART model)"),Yx.forEach(t),beo=i(S),Pn=n(S,"LI",{});var Kx=s(Pn);Hte=n(Kx,"STRONG",{});var OHr=s(Hte);veo=r(OHr,"barthez"),OHr.forEach(t),Feo=r(Kx," \u2014 "),pR=n(Kx,"A",{href:!0});var VHr=s(pR);Teo=r(VHr,"BarthezTokenizer"),VHr.forEach(t),Meo=r(Kx," or "),_R=n(Kx,"A",{href:!0});var XHr=s(_R);Eeo=r(XHr,"BarthezTokenizerFast"),XHr.forEach(t),Ceo=r(Kx," (BARThez model)"),Kx.forEach(t),weo=i(S),Lg=n(S,"LI",{});var Xwe=s(Lg);Ute=n(Xwe,"STRONG",{});var zHr=s(Ute);Aeo=r(zHr,"bartpho"),zHr.forEach(t),yeo=r(Xwe," \u2014 "),uR=n(Xwe,"A",{href:!0});var WHr=s(uR);Leo=r(WHr,"BartphoTokenizer"),WHr.forEach(t),xeo=r(Xwe," (BARTpho model)"),Xwe.forEach(t),$eo=i(S),Bn=n(S,"LI",{});var Zx=s(Bn);Jte=n(Zx,"STRONG",{});var QHr=s(Jte);keo=r(QHr,"bert"),QHr.forEach(t),Seo=r(Zx," \u2014 "),bR=n(Zx,"A",{href:!0});var HHr=s(bR);Reo=r(HHr,"BertTokenizer"),HHr.forEach(t),Peo=r(Zx," or "),vR=n(Zx,"A",{href:!0});var UHr=s(vR);Beo=r(UHr,"BertTokenizerFast"),UHr.forEach(t),Ieo=r(Zx," (BERT model)"),Zx.forEach(t),Neo=i(S),xg=n(S,"LI",{});var zwe=s(xg);Yte=n(zwe,"STRONG",{});var JHr=s(Yte);qeo=r(JHr,"bert-generation"),JHr.forEach(t),jeo=r(zwe," \u2014 "),FR=n(zwe,"A",{href:!0});var YHr=s(FR);Deo=r(YHr,"BertGenerationTokenizer"),YHr.forEach(t),Geo=r(zwe," (Bert Generation model)"),zwe.forEach(t),Oeo=i(S),$g=n(S,"LI",{});var Wwe=s($g);Kte=n(Wwe,"STRONG",{});var KHr=s(Kte);Veo=r(KHr,"bert-japanese"),KHr.forEach(t),Xeo=r(Wwe," \u2014 "),TR=n(Wwe,"A",{href:!0});var ZHr=s(TR);zeo=r(ZHr,"BertJapaneseTokenizer"),ZHr.forEach(t),Weo=r(Wwe," (BertJapanese model)"),Wwe.forEach(t),Qeo=i(S),kg=n(S,"LI",{});var Qwe=s(kg);Zte=n(Qwe,"STRONG",{});var eUr=s(Zte);Heo=r(eUr,"bertweet"),eUr.forEach(t),Ueo=r(Qwe," \u2014 "),MR=n(Qwe,"A",{href:!0});var oUr=s(MR);Jeo=r(oUr,"BertweetTokenizer"),oUr.forEach(t),Yeo=r(Qwe," (Bertweet model)"),Qwe.forEach(t),Keo=i(S),In=n(S,"LI",{});var e$=s(In);eae=n(e$,"STRONG",{});var rUr=s(eae);Zeo=r(rUr,"big_bird"),rUr.forEach(t),eoo=r(e$," \u2014 "),ER=n(e$,"A",{href:!0});var tUr=s(ER);ooo=r(tUr,"BigBirdTokenizer"),tUr.forEach(t),roo=r(e$," or "),CR=n(e$,"A",{href:!0});var aUr=s(CR);too=r(aUr,"BigBirdTokenizerFast"),aUr.forEach(t),aoo=r(e$," (BigBird model)"),e$.forEach(t),noo=i(S),Nn=n(S,"LI",{});var o$=s(Nn);oae=n(o$,"STRONG",{});var nUr=s(oae);soo=r(nUr,"bigbird_pegasus"),nUr.forEach(t),loo=r(o$," \u2014 "),wR=n(o$,"A",{href:!0});var sUr=s(wR);ioo=r(sUr,"PegasusTokenizer"),sUr.forEach(t),doo=r(o$," or "),AR=n(o$,"A",{href:!0});var lUr=s(AR);coo=r(lUr,"PegasusTokenizerFast"),lUr.forEach(t),foo=r(o$," (BigBirdPegasus model)"),o$.forEach(t),moo=i(S),qn=n(S,"LI",{});var r$=s(qn);rae=n(r$,"STRONG",{});var iUr=s(rae);goo=r(iUr,"blenderbot"),iUr.forEach(t),hoo=r(r$," \u2014 "),yR=n(r$,"A",{href:!0});var dUr=s(yR);poo=r(dUr,"BlenderbotTokenizer"),dUr.forEach(t),_oo=r(r$," or "),LR=n(r$,"A",{href:!0});var cUr=s(LR);uoo=r(cUr,"BlenderbotTokenizerFast"),cUr.forEach(t),boo=r(r$," (Blenderbot model)"),r$.forEach(t),voo=i(S),Sg=n(S,"LI",{});var Hwe=s(Sg);tae=n(Hwe,"STRONG",{});var fUr=s(tae);Foo=r(fUr,"blenderbot-small"),fUr.forEach(t),Too=r(Hwe," \u2014 "),xR=n(Hwe,"A",{href:!0});var mUr=s(xR);Moo=r(mUr,"BlenderbotSmallTokenizer"),mUr.forEach(t),Eoo=r(Hwe," (BlenderbotSmall model)"),Hwe.forEach(t),Coo=i(S),Rg=n(S,"LI",{});var Uwe=s(Rg);aae=n(Uwe,"STRONG",{});var gUr=s(aae);woo=r(gUr,"byt5"),gUr.forEach(t),Aoo=r(Uwe," \u2014 "),$R=n(Uwe,"A",{href:!0});var hUr=s($R);yoo=r(hUr,"ByT5Tokenizer"),hUr.forEach(t),Loo=r(Uwe," (ByT5 model)"),Uwe.forEach(t),xoo=i(S),jn=n(S,"LI",{});var t$=s(jn);nae=n(t$,"STRONG",{});var pUr=s(nae);$oo=r(pUr,"camembert"),pUr.forEach(t),koo=r(t$," \u2014 "),kR=n(t$,"A",{href:!0});var _Ur=s(kR);Soo=r(_Ur,"CamembertTokenizer"),_Ur.forEach(t),Roo=r(t$," or "),SR=n(t$,"A",{href:!0});var uUr=s(SR);Poo=r(uUr,"CamembertTokenizerFast"),uUr.forEach(t),Boo=r(t$," (CamemBERT model)"),t$.forEach(t),Ioo=i(S),Pg=n(S,"LI",{});var Jwe=s(Pg);sae=n(Jwe,"STRONG",{});var bUr=s(sae);Noo=r(bUr,"canine"),bUr.forEach(t),qoo=r(Jwe," \u2014 "),RR=n(Jwe,"A",{href:!0});var vUr=s(RR);joo=r(vUr,"CanineTokenizer"),vUr.forEach(t),Doo=r(Jwe," (Canine model)"),Jwe.forEach(t),Goo=i(S),Dn=n(S,"LI",{});var a$=s(Dn);lae=n(a$,"STRONG",{});var FUr=s(lae);Ooo=r(FUr,"clip"),FUr.forEach(t),Voo=r(a$," \u2014 "),PR=n(a$,"A",{href:!0});var TUr=s(PR);Xoo=r(TUr,"CLIPTokenizer"),TUr.forEach(t),zoo=r(a$," or "),BR=n(a$,"A",{href:!0});var MUr=s(BR);Woo=r(MUr,"CLIPTokenizerFast"),MUr.forEach(t),Qoo=r(a$," (CLIP model)"),a$.forEach(t),Hoo=i(S),Gn=n(S,"LI",{});var n$=s(Gn);iae=n(n$,"STRONG",{});var EUr=s(iae);Uoo=r(EUr,"convbert"),EUr.forEach(t),Joo=r(n$," \u2014 "),IR=n(n$,"A",{href:!0});var CUr=s(IR);Yoo=r(CUr,"ConvBertTokenizer"),CUr.forEach(t),Koo=r(n$," or "),NR=n(n$,"A",{href:!0});var wUr=s(NR);Zoo=r(wUr,"ConvBertTokenizerFast"),wUr.forEach(t),ero=r(n$," (ConvBERT model)"),n$.forEach(t),oro=i(S),On=n(S,"LI",{});var s$=s(On);dae=n(s$,"STRONG",{});var AUr=s(dae);rro=r(AUr,"cpm"),AUr.forEach(t),tro=r(s$," \u2014 "),qR=n(s$,"A",{href:!0});var yUr=s(qR);aro=r(yUr,"CpmTokenizer"),yUr.forEach(t),nro=r(s$," or "),jR=n(s$,"A",{href:!0});var LUr=s(jR);sro=r(LUr,"CpmTokenizerFast"),LUr.forEach(t),lro=r(s$," (CPM model)"),s$.forEach(t),iro=i(S),Bg=n(S,"LI",{});var Ywe=s(Bg);cae=n(Ywe,"STRONG",{});var xUr=s(cae);dro=r(xUr,"ctrl"),xUr.forEach(t),cro=r(Ywe," \u2014 "),DR=n(Ywe,"A",{href:!0});var $Ur=s(DR);fro=r($Ur,"CTRLTokenizer"),$Ur.forEach(t),mro=r(Ywe," (CTRL model)"),Ywe.forEach(t),gro=i(S),Vn=n(S,"LI",{});var l$=s(Vn);fae=n(l$,"STRONG",{});var kUr=s(fae);hro=r(kUr,"data2vec-text"),kUr.forEach(t),pro=r(l$," \u2014 "),GR=n(l$,"A",{href:!0});var SUr=s(GR);_ro=r(SUr,"RobertaTokenizer"),SUr.forEach(t),uro=r(l$," or "),OR=n(l$,"A",{href:!0});var RUr=s(OR);bro=r(RUr,"RobertaTokenizerFast"),RUr.forEach(t),vro=r(l$," (Data2VecText model)"),l$.forEach(t),Fro=i(S),Xn=n(S,"LI",{});var i$=s(Xn);mae=n(i$,"STRONG",{});var PUr=s(mae);Tro=r(PUr,"deberta"),PUr.forEach(t),Mro=r(i$," \u2014 "),VR=n(i$,"A",{href:!0});var BUr=s(VR);Ero=r(BUr,"DebertaTokenizer"),BUr.forEach(t),Cro=r(i$," or "),XR=n(i$,"A",{href:!0});var IUr=s(XR);wro=r(IUr,"DebertaTokenizerFast"),IUr.forEach(t),Aro=r(i$," (DeBERTa model)"),i$.forEach(t),yro=i(S),zn=n(S,"LI",{});var d$=s(zn);gae=n(d$,"STRONG",{});var NUr=s(gae);Lro=r(NUr,"deberta-v2"),NUr.forEach(t),xro=r(d$," \u2014 "),zR=n(d$,"A",{href:!0});var qUr=s(zR);$ro=r(qUr,"DebertaV2Tokenizer"),qUr.forEach(t),kro=r(d$," or "),WR=n(d$,"A",{href:!0});var jUr=s(WR);Sro=r(jUr,"DebertaV2TokenizerFast"),jUr.forEach(t),Rro=r(d$," (DeBERTa-v2 model)"),d$.forEach(t),Pro=i(S),Wn=n(S,"LI",{});var c$=s(Wn);hae=n(c$,"STRONG",{});var DUr=s(hae);Bro=r(DUr,"distilbert"),DUr.forEach(t),Iro=r(c$," \u2014 "),QR=n(c$,"A",{href:!0});var GUr=s(QR);Nro=r(GUr,"DistilBertTokenizer"),GUr.forEach(t),qro=r(c$," or "),HR=n(c$,"A",{href:!0});var OUr=s(HR);jro=r(OUr,"DistilBertTokenizerFast"),OUr.forEach(t),Dro=r(c$," (DistilBERT model)"),c$.forEach(t),Gro=i(S),Qn=n(S,"LI",{});var f$=s(Qn);pae=n(f$,"STRONG",{});var VUr=s(pae);Oro=r(VUr,"dpr"),VUr.forEach(t),Vro=r(f$," \u2014 "),UR=n(f$,"A",{href:!0});var XUr=s(UR);Xro=r(XUr,"DPRQuestionEncoderTokenizer"),XUr.forEach(t),zro=r(f$," or "),JR=n(f$,"A",{href:!0});var zUr=s(JR);Wro=r(zUr,"DPRQuestionEncoderTokenizerFast"),zUr.forEach(t),Qro=r(f$," (DPR model)"),f$.forEach(t),Hro=i(S),Hn=n(S,"LI",{});var m$=s(Hn);_ae=n(m$,"STRONG",{});var WUr=s(_ae);Uro=r(WUr,"electra"),WUr.forEach(t),Jro=r(m$," \u2014 "),YR=n(m$,"A",{href:!0});var QUr=s(YR);Yro=r(QUr,"ElectraTokenizer"),QUr.forEach(t),Kro=r(m$," or "),KR=n(m$,"A",{href:!0});var HUr=s(KR);Zro=r(HUr,"ElectraTokenizerFast"),HUr.forEach(t),eto=r(m$," (ELECTRA model)"),m$.forEach(t),oto=i(S),Ig=n(S,"LI",{});var Kwe=s(Ig);uae=n(Kwe,"STRONG",{});var UUr=s(uae);rto=r(UUr,"flaubert"),UUr.forEach(t),tto=r(Kwe," \u2014 "),ZR=n(Kwe,"A",{href:!0});var JUr=s(ZR);ato=r(JUr,"FlaubertTokenizer"),JUr.forEach(t),nto=r(Kwe," (FlauBERT model)"),Kwe.forEach(t),sto=i(S),Un=n(S,"LI",{});var g$=s(Un);bae=n(g$,"STRONG",{});var YUr=s(bae);lto=r(YUr,"fnet"),YUr.forEach(t),ito=r(g$," \u2014 "),eP=n(g$,"A",{href:!0});var KUr=s(eP);dto=r(KUr,"FNetTokenizer"),KUr.forEach(t),cto=r(g$," or "),oP=n(g$,"A",{href:!0});var ZUr=s(oP);fto=r(ZUr,"FNetTokenizerFast"),ZUr.forEach(t),mto=r(g$," (FNet model)"),g$.forEach(t),gto=i(S),Ng=n(S,"LI",{});var Zwe=s(Ng);vae=n(Zwe,"STRONG",{});var eJr=s(vae);hto=r(eJr,"fsmt"),eJr.forEach(t),pto=r(Zwe," \u2014 "),rP=n(Zwe,"A",{href:!0});var oJr=s(rP);_to=r(oJr,"FSMTTokenizer"),oJr.forEach(t),uto=r(Zwe," (FairSeq Machine-Translation model)"),Zwe.forEach(t),bto=i(S),Jn=n(S,"LI",{});var h$=s(Jn);Fae=n(h$,"STRONG",{});var rJr=s(Fae);vto=r(rJr,"funnel"),rJr.forEach(t),Fto=r(h$," \u2014 "),tP=n(h$,"A",{href:!0});var tJr=s(tP);Tto=r(tJr,"FunnelTokenizer"),tJr.forEach(t),Mto=r(h$," or "),aP=n(h$,"A",{href:!0});var aJr=s(aP);Eto=r(aJr,"FunnelTokenizerFast"),aJr.forEach(t),Cto=r(h$," (Funnel Transformer model)"),h$.forEach(t),wto=i(S),Yn=n(S,"LI",{});var p$=s(Yn);Tae=n(p$,"STRONG",{});var nJr=s(Tae);Ato=r(nJr,"gpt2"),nJr.forEach(t),yto=r(p$," \u2014 "),nP=n(p$,"A",{href:!0});var sJr=s(nP);Lto=r(sJr,"GPT2Tokenizer"),sJr.forEach(t),xto=r(p$," or "),sP=n(p$,"A",{href:!0});var lJr=s(sP);$to=r(lJr,"GPT2TokenizerFast"),lJr.forEach(t),kto=r(p$," (OpenAI GPT-2 model)"),p$.forEach(t),Sto=i(S),Kn=n(S,"LI",{});var _$=s(Kn);Mae=n(_$,"STRONG",{});var iJr=s(Mae);Rto=r(iJr,"gpt_neo"),iJr.forEach(t),Pto=r(_$," \u2014 "),lP=n(_$,"A",{href:!0});var dJr=s(lP);Bto=r(dJr,"GPT2Tokenizer"),dJr.forEach(t),Ito=r(_$," or "),iP=n(_$,"A",{href:!0});var cJr=s(iP);Nto=r(cJr,"GPT2TokenizerFast"),cJr.forEach(t),qto=r(_$," (GPT Neo model)"),_$.forEach(t),jto=i(S),qg=n(S,"LI",{});var e6e=s(qg);Eae=n(e6e,"STRONG",{});var fJr=s(Eae);Dto=r(fJr,"gpt_neox"),fJr.forEach(t),Gto=r(e6e," \u2014 "),dP=n(e6e,"A",{href:!0});var mJr=s(dP);Oto=r(mJr,"GPTNeoXTokenizerFast"),mJr.forEach(t),Vto=r(e6e," (GPT NeoX model)"),e6e.forEach(t),Xto=i(S),Zn=n(S,"LI",{});var u$=s(Zn);Cae=n(u$,"STRONG",{});var gJr=s(Cae);zto=r(gJr,"gptj"),gJr.forEach(t),Wto=r(u$," \u2014 "),cP=n(u$,"A",{href:!0});var hJr=s(cP);Qto=r(hJr,"GPT2Tokenizer"),hJr.forEach(t),Hto=r(u$," or "),fP=n(u$,"A",{href:!0});var pJr=s(fP);Uto=r(pJr,"GPT2TokenizerFast"),pJr.forEach(t),Jto=r(u$," (GPT-J model)"),u$.forEach(t),Yto=i(S),es=n(S,"LI",{});var b$=s(es);wae=n(b$,"STRONG",{});var _Jr=s(wae);Kto=r(_Jr,"herbert"),_Jr.forEach(t),Zto=r(b$," \u2014 "),mP=n(b$,"A",{href:!0});var uJr=s(mP);eao=r(uJr,"HerbertTokenizer"),uJr.forEach(t),oao=r(b$," or "),gP=n(b$,"A",{href:!0});var bJr=s(gP);rao=r(bJr,"HerbertTokenizerFast"),bJr.forEach(t),tao=r(b$," (HerBERT model)"),b$.forEach(t),aao=i(S),jg=n(S,"LI",{});var o6e=s(jg);Aae=n(o6e,"STRONG",{});var vJr=s(Aae);nao=r(vJr,"hubert"),vJr.forEach(t),sao=r(o6e," \u2014 "),hP=n(o6e,"A",{href:!0});var FJr=s(hP);lao=r(FJr,"Wav2Vec2CTCTokenizer"),FJr.forEach(t),iao=r(o6e," (Hubert model)"),o6e.forEach(t),dao=i(S),os=n(S,"LI",{});var v$=s(os);yae=n(v$,"STRONG",{});var TJr=s(yae);cao=r(TJr,"ibert"),TJr.forEach(t),fao=r(v$," \u2014 "),pP=n(v$,"A",{href:!0});var MJr=s(pP);mao=r(MJr,"RobertaTokenizer"),MJr.forEach(t),gao=r(v$," or "),_P=n(v$,"A",{href:!0});var EJr=s(_P);hao=r(EJr,"RobertaTokenizerFast"),EJr.forEach(t),pao=r(v$," (I-BERT model)"),v$.forEach(t),_ao=i(S),rs=n(S,"LI",{});var F$=s(rs);Lae=n(F$,"STRONG",{});var CJr=s(Lae);uao=r(CJr,"layoutlm"),CJr.forEach(t),bao=r(F$," \u2014 "),uP=n(F$,"A",{href:!0});var wJr=s(uP);vao=r(wJr,"LayoutLMTokenizer"),wJr.forEach(t),Fao=r(F$," or "),bP=n(F$,"A",{href:!0});var AJr=s(bP);Tao=r(AJr,"LayoutLMTokenizerFast"),AJr.forEach(t),Mao=r(F$," (LayoutLM model)"),F$.forEach(t),Eao=i(S),ts=n(S,"LI",{});var T$=s(ts);xae=n(T$,"STRONG",{});var yJr=s(xae);Cao=r(yJr,"layoutlmv2"),yJr.forEach(t),wao=r(T$," \u2014 "),vP=n(T$,"A",{href:!0});var LJr=s(vP);Aao=r(LJr,"LayoutLMv2Tokenizer"),LJr.forEach(t),yao=r(T$," or "),FP=n(T$,"A",{href:!0});var xJr=s(FP);Lao=r(xJr,"LayoutLMv2TokenizerFast"),xJr.forEach(t),xao=r(T$," (LayoutLMv2 model)"),T$.forEach(t),$ao=i(S),as=n(S,"LI",{});var M$=s(as);$ae=n(M$,"STRONG",{});var $Jr=s($ae);kao=r($Jr,"layoutlmv3"),$Jr.forEach(t),Sao=r(M$," \u2014 "),TP=n(M$,"A",{href:!0});var kJr=s(TP);Rao=r(kJr,"LayoutLMv3Tokenizer"),kJr.forEach(t),Pao=r(M$," or "),MP=n(M$,"A",{href:!0});var SJr=s(MP);Bao=r(SJr,"LayoutLMv3TokenizerFast"),SJr.forEach(t),Iao=r(M$," (LayoutLMv3 model)"),M$.forEach(t),Nao=i(S),ns=n(S,"LI",{});var E$=s(ns);kae=n(E$,"STRONG",{});var RJr=s(kae);qao=r(RJr,"layoutxlm"),RJr.forEach(t),jao=r(E$," \u2014 "),EP=n(E$,"A",{href:!0});var PJr=s(EP);Dao=r(PJr,"LayoutXLMTokenizer"),PJr.forEach(t),Gao=r(E$," or "),CP=n(E$,"A",{href:!0});var BJr=s(CP);Oao=r(BJr,"LayoutXLMTokenizerFast"),BJr.forEach(t),Vao=r(E$," (LayoutXLM model)"),E$.forEach(t),Xao=i(S),ss=n(S,"LI",{});var C$=s(ss);Sae=n(C$,"STRONG",{});var IJr=s(Sae);zao=r(IJr,"led"),IJr.forEach(t),Wao=r(C$," \u2014 "),wP=n(C$,"A",{href:!0});var NJr=s(wP);Qao=r(NJr,"LEDTokenizer"),NJr.forEach(t),Hao=r(C$," or "),AP=n(C$,"A",{href:!0});var qJr=s(AP);Uao=r(qJr,"LEDTokenizerFast"),qJr.forEach(t),Jao=r(C$," (LED model)"),C$.forEach(t),Yao=i(S),ls=n(S,"LI",{});var w$=s(ls);Rae=n(w$,"STRONG",{});var jJr=s(Rae);Kao=r(jJr,"longformer"),jJr.forEach(t),Zao=r(w$," \u2014 "),yP=n(w$,"A",{href:!0});var DJr=s(yP);eno=r(DJr,"LongformerTokenizer"),DJr.forEach(t),ono=r(w$," or "),LP=n(w$,"A",{href:!0});var GJr=s(LP);rno=r(GJr,"LongformerTokenizerFast"),GJr.forEach(t),tno=r(w$," (Longformer model)"),w$.forEach(t),ano=i(S),Dg=n(S,"LI",{});var r6e=s(Dg);Pae=n(r6e,"STRONG",{});var OJr=s(Pae);nno=r(OJr,"luke"),OJr.forEach(t),sno=r(r6e," \u2014 "),xP=n(r6e,"A",{href:!0});var VJr=s(xP);lno=r(VJr,"LukeTokenizer"),VJr.forEach(t),ino=r(r6e," (LUKE model)"),r6e.forEach(t),dno=i(S),is=n(S,"LI",{});var A$=s(is);Bae=n(A$,"STRONG",{});var XJr=s(Bae);cno=r(XJr,"lxmert"),XJr.forEach(t),fno=r(A$," \u2014 "),$P=n(A$,"A",{href:!0});var zJr=s($P);mno=r(zJr,"LxmertTokenizer"),zJr.forEach(t),gno=r(A$," or "),kP=n(A$,"A",{href:!0});var WJr=s(kP);hno=r(WJr,"LxmertTokenizerFast"),WJr.forEach(t),pno=r(A$," (LXMERT model)"),A$.forEach(t),_no=i(S),Gg=n(S,"LI",{});var t6e=s(Gg);Iae=n(t6e,"STRONG",{});var QJr=s(Iae);uno=r(QJr,"m2m_100"),QJr.forEach(t),bno=r(t6e," \u2014 "),SP=n(t6e,"A",{href:!0});var HJr=s(SP);vno=r(HJr,"M2M100Tokenizer"),HJr.forEach(t),Fno=r(t6e," (M2M100 model)"),t6e.forEach(t),Tno=i(S),Og=n(S,"LI",{});var a6e=s(Og);Nae=n(a6e,"STRONG",{});var UJr=s(Nae);Mno=r(UJr,"marian"),UJr.forEach(t),Eno=r(a6e," \u2014 "),RP=n(a6e,"A",{href:!0});var JJr=s(RP);Cno=r(JJr,"MarianTokenizer"),JJr.forEach(t),wno=r(a6e," (Marian model)"),a6e.forEach(t),Ano=i(S),ds=n(S,"LI",{});var y$=s(ds);qae=n(y$,"STRONG",{});var YJr=s(qae);yno=r(YJr,"mbart"),YJr.forEach(t),Lno=r(y$," \u2014 "),PP=n(y$,"A",{href:!0});var KJr=s(PP);xno=r(KJr,"MBartTokenizer"),KJr.forEach(t),$no=r(y$," or "),BP=n(y$,"A",{href:!0});var ZJr=s(BP);kno=r(ZJr,"MBartTokenizerFast"),ZJr.forEach(t),Sno=r(y$," (mBART model)"),y$.forEach(t),Rno=i(S),cs=n(S,"LI",{});var L$=s(cs);jae=n(L$,"STRONG",{});var eYr=s(jae);Pno=r(eYr,"mbart50"),eYr.forEach(t),Bno=r(L$," \u2014 "),IP=n(L$,"A",{href:!0});var oYr=s(IP);Ino=r(oYr,"MBart50Tokenizer"),oYr.forEach(t),Nno=r(L$," or "),NP=n(L$,"A",{href:!0});var rYr=s(NP);qno=r(rYr,"MBart50TokenizerFast"),rYr.forEach(t),jno=r(L$," (mBART-50 model)"),L$.forEach(t),Dno=i(S),fs=n(S,"LI",{});var x$=s(fs);Dae=n(x$,"STRONG",{});var tYr=s(Dae);Gno=r(tYr,"megatron-bert"),tYr.forEach(t),Ono=r(x$," \u2014 "),qP=n(x$,"A",{href:!0});var aYr=s(qP);Vno=r(aYr,"BertTokenizer"),aYr.forEach(t),Xno=r(x$," or "),jP=n(x$,"A",{href:!0});var nYr=s(jP);zno=r(nYr,"BertTokenizerFast"),nYr.forEach(t),Wno=r(x$," (MegatronBert model)"),x$.forEach(t),Qno=i(S),Vg=n(S,"LI",{});var n6e=s(Vg);Gae=n(n6e,"STRONG",{});var sYr=s(Gae);Hno=r(sYr,"mluke"),sYr.forEach(t),Uno=r(n6e," \u2014 "),DP=n(n6e,"A",{href:!0});var lYr=s(DP);Jno=r(lYr,"MLukeTokenizer"),lYr.forEach(t),Yno=r(n6e," (mLUKE model)"),n6e.forEach(t),Kno=i(S),ms=n(S,"LI",{});var $$=s(ms);Oae=n($$,"STRONG",{});var iYr=s(Oae);Zno=r(iYr,"mobilebert"),iYr.forEach(t),eso=r($$," \u2014 "),GP=n($$,"A",{href:!0});var dYr=s(GP);oso=r(dYr,"MobileBertTokenizer"),dYr.forEach(t),rso=r($$," or "),OP=n($$,"A",{href:!0});var cYr=s(OP);tso=r(cYr,"MobileBertTokenizerFast"),cYr.forEach(t),aso=r($$," (MobileBERT model)"),$$.forEach(t),nso=i(S),gs=n(S,"LI",{});var k$=s(gs);Vae=n(k$,"STRONG",{});var fYr=s(Vae);sso=r(fYr,"mpnet"),fYr.forEach(t),lso=r(k$," \u2014 "),VP=n(k$,"A",{href:!0});var mYr=s(VP);iso=r(mYr,"MPNetTokenizer"),mYr.forEach(t),dso=r(k$," or "),XP=n(k$,"A",{href:!0});var gYr=s(XP);cso=r(gYr,"MPNetTokenizerFast"),gYr.forEach(t),fso=r(k$," (MPNet model)"),k$.forEach(t),mso=i(S),hs=n(S,"LI",{});var S$=s(hs);Xae=n(S$,"STRONG",{});var hYr=s(Xae);gso=r(hYr,"mt5"),hYr.forEach(t),hso=r(S$," \u2014 "),zP=n(S$,"A",{href:!0});var pYr=s(zP);pso=r(pYr,"MT5Tokenizer"),pYr.forEach(t),_so=r(S$," or "),WP=n(S$,"A",{href:!0});var _Yr=s(WP);uso=r(_Yr,"MT5TokenizerFast"),_Yr.forEach(t),bso=r(S$," (mT5 model)"),S$.forEach(t),vso=i(S),ps=n(S,"LI",{});var R$=s(ps);zae=n(R$,"STRONG",{});var uYr=s(zae);Fso=r(uYr,"nystromformer"),uYr.forEach(t),Tso=r(R$," \u2014 "),QP=n(R$,"A",{href:!0});var bYr=s(QP);Mso=r(bYr,"AlbertTokenizer"),bYr.forEach(t),Eso=r(R$," or "),HP=n(R$,"A",{href:!0});var vYr=s(HP);Cso=r(vYr,"AlbertTokenizerFast"),vYr.forEach(t),wso=r(R$," (Nystromformer model)"),R$.forEach(t),Aso=i(S),_s=n(S,"LI",{});var P$=s(_s);Wae=n(P$,"STRONG",{});var FYr=s(Wae);yso=r(FYr,"openai-gpt"),FYr.forEach(t),Lso=r(P$," \u2014 "),UP=n(P$,"A",{href:!0});var TYr=s(UP);xso=r(TYr,"OpenAIGPTTokenizer"),TYr.forEach(t),$so=r(P$," or "),JP=n(P$,"A",{href:!0});var MYr=s(JP);kso=r(MYr,"OpenAIGPTTokenizerFast"),MYr.forEach(t),Sso=r(P$," (OpenAI GPT model)"),P$.forEach(t),Rso=i(S),Xg=n(S,"LI",{});var s6e=s(Xg);Qae=n(s6e,"STRONG",{});var EYr=s(Qae);Pso=r(EYr,"opt"),EYr.forEach(t),Bso=r(s6e," \u2014 "),YP=n(s6e,"A",{href:!0});var CYr=s(YP);Iso=r(CYr,"GPT2Tokenizer"),CYr.forEach(t),Nso=r(s6e," (OPT model)"),s6e.forEach(t),qso=i(S),us=n(S,"LI",{});var B$=s(us);Hae=n(B$,"STRONG",{});var wYr=s(Hae);jso=r(wYr,"pegasus"),wYr.forEach(t),Dso=r(B$," \u2014 "),KP=n(B$,"A",{href:!0});var AYr=s(KP);Gso=r(AYr,"PegasusTokenizer"),AYr.forEach(t),Oso=r(B$," or "),ZP=n(B$,"A",{href:!0});var yYr=s(ZP);Vso=r(yYr,"PegasusTokenizerFast"),yYr.forEach(t),Xso=r(B$," (Pegasus model)"),B$.forEach(t),zso=i(S),zg=n(S,"LI",{});var l6e=s(zg);Uae=n(l6e,"STRONG",{});var LYr=s(Uae);Wso=r(LYr,"perceiver"),LYr.forEach(t),Qso=r(l6e," \u2014 "),eB=n(l6e,"A",{href:!0});var xYr=s(eB);Hso=r(xYr,"PerceiverTokenizer"),xYr.forEach(t),Uso=r(l6e," (Perceiver model)"),l6e.forEach(t),Jso=i(S),Wg=n(S,"LI",{});var i6e=s(Wg);Jae=n(i6e,"STRONG",{});var $Yr=s(Jae);Yso=r($Yr,"phobert"),$Yr.forEach(t),Kso=r(i6e," \u2014 "),oB=n(i6e,"A",{href:!0});var kYr=s(oB);Zso=r(kYr,"PhobertTokenizer"),kYr.forEach(t),elo=r(i6e," (PhoBERT model)"),i6e.forEach(t),olo=i(S),Qg=n(S,"LI",{});var d6e=s(Qg);Yae=n(d6e,"STRONG",{});var SYr=s(Yae);rlo=r(SYr,"plbart"),SYr.forEach(t),tlo=r(d6e," \u2014 "),rB=n(d6e,"A",{href:!0});var RYr=s(rB);alo=r(RYr,"PLBartTokenizer"),RYr.forEach(t),nlo=r(d6e," (PLBart model)"),d6e.forEach(t),slo=i(S),Hg=n(S,"LI",{});var c6e=s(Hg);Kae=n(c6e,"STRONG",{});var PYr=s(Kae);llo=r(PYr,"prophetnet"),PYr.forEach(t),ilo=r(c6e," \u2014 "),tB=n(c6e,"A",{href:!0});var BYr=s(tB);dlo=r(BYr,"ProphetNetTokenizer"),BYr.forEach(t),clo=r(c6e," (ProphetNet model)"),c6e.forEach(t),flo=i(S),bs=n(S,"LI",{});var I$=s(bs);Zae=n(I$,"STRONG",{});var IYr=s(Zae);mlo=r(IYr,"qdqbert"),IYr.forEach(t),glo=r(I$," \u2014 "),aB=n(I$,"A",{href:!0});var NYr=s(aB);hlo=r(NYr,"BertTokenizer"),NYr.forEach(t),plo=r(I$," or "),nB=n(I$,"A",{href:!0});var qYr=s(nB);_lo=r(qYr,"BertTokenizerFast"),qYr.forEach(t),ulo=r(I$," (QDQBert model)"),I$.forEach(t),blo=i(S),Ug=n(S,"LI",{});var f6e=s(Ug);ene=n(f6e,"STRONG",{});var jYr=s(ene);vlo=r(jYr,"rag"),jYr.forEach(t),Flo=r(f6e," \u2014 "),sB=n(f6e,"A",{href:!0});var DYr=s(sB);Tlo=r(DYr,"RagTokenizer"),DYr.forEach(t),Mlo=r(f6e," (RAG model)"),f6e.forEach(t),Elo=i(S),vs=n(S,"LI",{});var N$=s(vs);one=n(N$,"STRONG",{});var GYr=s(one);Clo=r(GYr,"realm"),GYr.forEach(t),wlo=r(N$," \u2014 "),lB=n(N$,"A",{href:!0});var OYr=s(lB);Alo=r(OYr,"RealmTokenizer"),OYr.forEach(t),ylo=r(N$," or "),iB=n(N$,"A",{href:!0});var VYr=s(iB);Llo=r(VYr,"RealmTokenizerFast"),VYr.forEach(t),xlo=r(N$," (Realm model)"),N$.forEach(t),$lo=i(S),Fs=n(S,"LI",{});var q$=s(Fs);rne=n(q$,"STRONG",{});var XYr=s(rne);klo=r(XYr,"reformer"),XYr.forEach(t),Slo=r(q$," \u2014 "),dB=n(q$,"A",{href:!0});var zYr=s(dB);Rlo=r(zYr,"ReformerTokenizer"),zYr.forEach(t),Plo=r(q$," or "),cB=n(q$,"A",{href:!0});var WYr=s(cB);Blo=r(WYr,"ReformerTokenizerFast"),WYr.forEach(t),Ilo=r(q$," (Reformer model)"),q$.forEach(t),Nlo=i(S),Ts=n(S,"LI",{});var j$=s(Ts);tne=n(j$,"STRONG",{});var QYr=s(tne);qlo=r(QYr,"rembert"),QYr.forEach(t),jlo=r(j$," \u2014 "),fB=n(j$,"A",{href:!0});var HYr=s(fB);Dlo=r(HYr,"RemBertTokenizer"),HYr.forEach(t),Glo=r(j$," or "),mB=n(j$,"A",{href:!0});var UYr=s(mB);Olo=r(UYr,"RemBertTokenizerFast"),UYr.forEach(t),Vlo=r(j$," (RemBERT model)"),j$.forEach(t),Xlo=i(S),Ms=n(S,"LI",{});var D$=s(Ms);ane=n(D$,"STRONG",{});var JYr=s(ane);zlo=r(JYr,"retribert"),JYr.forEach(t),Wlo=r(D$," \u2014 "),gB=n(D$,"A",{href:!0});var YYr=s(gB);Qlo=r(YYr,"RetriBertTokenizer"),YYr.forEach(t),Hlo=r(D$," or "),hB=n(D$,"A",{href:!0});var KYr=s(hB);Ulo=r(KYr,"RetriBertTokenizerFast"),KYr.forEach(t),Jlo=r(D$," (RetriBERT model)"),D$.forEach(t),Ylo=i(S),Es=n(S,"LI",{});var G$=s(Es);nne=n(G$,"STRONG",{});var ZYr=s(nne);Klo=r(ZYr,"roberta"),ZYr.forEach(t),Zlo=r(G$," \u2014 "),pB=n(G$,"A",{href:!0});var eKr=s(pB);eio=r(eKr,"RobertaTokenizer"),eKr.forEach(t),oio=r(G$," or "),_B=n(G$,"A",{href:!0});var oKr=s(_B);rio=r(oKr,"RobertaTokenizerFast"),oKr.forEach(t),tio=r(G$," (RoBERTa model)"),G$.forEach(t),aio=i(S),Cs=n(S,"LI",{});var O$=s(Cs);sne=n(O$,"STRONG",{});var rKr=s(sne);nio=r(rKr,"roformer"),rKr.forEach(t),sio=r(O$," \u2014 "),uB=n(O$,"A",{href:!0});var tKr=s(uB);lio=r(tKr,"RoFormerTokenizer"),tKr.forEach(t),iio=r(O$," or "),bB=n(O$,"A",{href:!0});var aKr=s(bB);dio=r(aKr,"RoFormerTokenizerFast"),aKr.forEach(t),cio=r(O$," (RoFormer model)"),O$.forEach(t),fio=i(S),Jg=n(S,"LI",{});var m6e=s(Jg);lne=n(m6e,"STRONG",{});var nKr=s(lne);mio=r(nKr,"speech_to_text"),nKr.forEach(t),gio=r(m6e," \u2014 "),vB=n(m6e,"A",{href:!0});var sKr=s(vB);hio=r(sKr,"Speech2TextTokenizer"),sKr.forEach(t),pio=r(m6e," (Speech2Text model)"),m6e.forEach(t),_io=i(S),Yg=n(S,"LI",{});var g6e=s(Yg);ine=n(g6e,"STRONG",{});var lKr=s(ine);uio=r(lKr,"speech_to_text_2"),lKr.forEach(t),bio=r(g6e," \u2014 "),FB=n(g6e,"A",{href:!0});var iKr=s(FB);vio=r(iKr,"Speech2Text2Tokenizer"),iKr.forEach(t),Fio=r(g6e," (Speech2Text2 model)"),g6e.forEach(t),Tio=i(S),ws=n(S,"LI",{});var V$=s(ws);dne=n(V$,"STRONG",{});var dKr=s(dne);Mio=r(dKr,"splinter"),dKr.forEach(t),Eio=r(V$," \u2014 "),TB=n(V$,"A",{href:!0});var cKr=s(TB);Cio=r(cKr,"SplinterTokenizer"),cKr.forEach(t),wio=r(V$," or "),MB=n(V$,"A",{href:!0});var fKr=s(MB);Aio=r(fKr,"SplinterTokenizerFast"),fKr.forEach(t),yio=r(V$," (Splinter model)"),V$.forEach(t),Lio=i(S),As=n(S,"LI",{});var X$=s(As);cne=n(X$,"STRONG",{});var mKr=s(cne);xio=r(mKr,"squeezebert"),mKr.forEach(t),$io=r(X$," \u2014 "),EB=n(X$,"A",{href:!0});var gKr=s(EB);kio=r(gKr,"SqueezeBertTokenizer"),gKr.forEach(t),Sio=r(X$," or "),CB=n(X$,"A",{href:!0});var hKr=s(CB);Rio=r(hKr,"SqueezeBertTokenizerFast"),hKr.forEach(t),Pio=r(X$," (SqueezeBERT model)"),X$.forEach(t),Bio=i(S),ys=n(S,"LI",{});var z$=s(ys);fne=n(z$,"STRONG",{});var pKr=s(fne);Iio=r(pKr,"t5"),pKr.forEach(t),Nio=r(z$," \u2014 "),wB=n(z$,"A",{href:!0});var _Kr=s(wB);qio=r(_Kr,"T5Tokenizer"),_Kr.forEach(t),jio=r(z$," or "),AB=n(z$,"A",{href:!0});var uKr=s(AB);Dio=r(uKr,"T5TokenizerFast"),uKr.forEach(t),Gio=r(z$," (T5 model)"),z$.forEach(t),Oio=i(S),Kg=n(S,"LI",{});var h6e=s(Kg);mne=n(h6e,"STRONG",{});var bKr=s(mne);Vio=r(bKr,"tapas"),bKr.forEach(t),Xio=r(h6e," \u2014 "),yB=n(h6e,"A",{href:!0});var vKr=s(yB);zio=r(vKr,"TapasTokenizer"),vKr.forEach(t),Wio=r(h6e," (TAPAS model)"),h6e.forEach(t),Qio=i(S),Zg=n(S,"LI",{});var p6e=s(Zg);gne=n(p6e,"STRONG",{});var FKr=s(gne);Hio=r(FKr,"tapex"),FKr.forEach(t),Uio=r(p6e," \u2014 "),LB=n(p6e,"A",{href:!0});var TKr=s(LB);Jio=r(TKr,"TapexTokenizer"),TKr.forEach(t),Yio=r(p6e," (TAPEX model)"),p6e.forEach(t),Kio=i(S),eh=n(S,"LI",{});var _6e=s(eh);hne=n(_6e,"STRONG",{});var MKr=s(hne);Zio=r(MKr,"transfo-xl"),MKr.forEach(t),edo=r(_6e," \u2014 "),xB=n(_6e,"A",{href:!0});var EKr=s(xB);odo=r(EKr,"TransfoXLTokenizer"),EKr.forEach(t),rdo=r(_6e," (Transformer-XL model)"),_6e.forEach(t),tdo=i(S),Ls=n(S,"LI",{});var W$=s(Ls);pne=n(W$,"STRONG",{});var CKr=s(pne);ado=r(CKr,"visual_bert"),CKr.forEach(t),ndo=r(W$," \u2014 "),$B=n(W$,"A",{href:!0});var wKr=s($B);sdo=r(wKr,"BertTokenizer"),wKr.forEach(t),ldo=r(W$," or "),kB=n(W$,"A",{href:!0});var AKr=s(kB);ido=r(AKr,"BertTokenizerFast"),AKr.forEach(t),ddo=r(W$," (VisualBert model)"),W$.forEach(t),cdo=i(S),oh=n(S,"LI",{});var u6e=s(oh);_ne=n(u6e,"STRONG",{});var yKr=s(_ne);fdo=r(yKr,"wav2vec2"),yKr.forEach(t),mdo=r(u6e," \u2014 "),SB=n(u6e,"A",{href:!0});var LKr=s(SB);gdo=r(LKr,"Wav2Vec2CTCTokenizer"),LKr.forEach(t),hdo=r(u6e," (Wav2Vec2 model)"),u6e.forEach(t),pdo=i(S),rh=n(S,"LI",{});var b6e=s(rh);une=n(b6e,"STRONG",{});var xKr=s(une);_do=r(xKr,"wav2vec2-conformer"),xKr.forEach(t),udo=r(b6e," \u2014 "),RB=n(b6e,"A",{href:!0});var $Kr=s(RB);bdo=r($Kr,"Wav2Vec2CTCTokenizer"),$Kr.forEach(t),vdo=r(b6e," (Wav2Vec2-Conformer model)"),b6e.forEach(t),Fdo=i(S),th=n(S,"LI",{});var v6e=s(th);bne=n(v6e,"STRONG",{});var kKr=s(bne);Tdo=r(kKr,"wav2vec2_phoneme"),kKr.forEach(t),Mdo=r(v6e," \u2014 "),PB=n(v6e,"A",{href:!0});var SKr=s(PB);Edo=r(SKr,"Wav2Vec2PhonemeCTCTokenizer"),SKr.forEach(t),Cdo=r(v6e," (Wav2Vec2Phoneme model)"),v6e.forEach(t),wdo=i(S),xs=n(S,"LI",{});var Q$=s(xs);vne=n(Q$,"STRONG",{});var RKr=s(vne);Ado=r(RKr,"xglm"),RKr.forEach(t),ydo=r(Q$," \u2014 "),BB=n(Q$,"A",{href:!0});var PKr=s(BB);Ldo=r(PKr,"XGLMTokenizer"),PKr.forEach(t),xdo=r(Q$," or "),IB=n(Q$,"A",{href:!0});var BKr=s(IB);$do=r(BKr,"XGLMTokenizerFast"),BKr.forEach(t),kdo=r(Q$," (XGLM model)"),Q$.forEach(t),Sdo=i(S),ah=n(S,"LI",{});var F6e=s(ah);Fne=n(F6e,"STRONG",{});var IKr=s(Fne);Rdo=r(IKr,"xlm"),IKr.forEach(t),Pdo=r(F6e," \u2014 "),NB=n(F6e,"A",{href:!0});var NKr=s(NB);Bdo=r(NKr,"XLMTokenizer"),NKr.forEach(t),Ido=r(F6e," (XLM model)"),F6e.forEach(t),Ndo=i(S),nh=n(S,"LI",{});var T6e=s(nh);Tne=n(T6e,"STRONG",{});var qKr=s(Tne);qdo=r(qKr,"xlm-prophetnet"),qKr.forEach(t),jdo=r(T6e," \u2014 "),qB=n(T6e,"A",{href:!0});var jKr=s(qB);Ddo=r(jKr,"XLMProphetNetTokenizer"),jKr.forEach(t),Gdo=r(T6e," (XLMProphetNet model)"),T6e.forEach(t),Odo=i(S),$s=n(S,"LI",{});var H$=s($s);Mne=n(H$,"STRONG",{});var DKr=s(Mne);Vdo=r(DKr,"xlm-roberta"),DKr.forEach(t),Xdo=r(H$," \u2014 "),jB=n(H$,"A",{href:!0});var GKr=s(jB);zdo=r(GKr,"XLMRobertaTokenizer"),GKr.forEach(t),Wdo=r(H$," or "),DB=n(H$,"A",{href:!0});var OKr=s(DB);Qdo=r(OKr,"XLMRobertaTokenizerFast"),OKr.forEach(t),Hdo=r(H$," (XLM-RoBERTa model)"),H$.forEach(t),Udo=i(S),ks=n(S,"LI",{});var U$=s(ks);Ene=n(U$,"STRONG",{});var VKr=s(Ene);Jdo=r(VKr,"xlm-roberta-xl"),VKr.forEach(t),Ydo=r(U$," \u2014 "),GB=n(U$,"A",{href:!0});var XKr=s(GB);Kdo=r(XKr,"RobertaTokenizer"),XKr.forEach(t),Zdo=r(U$," or "),OB=n(U$,"A",{href:!0});var zKr=s(OB);eco=r(zKr,"RobertaTokenizerFast"),zKr.forEach(t),oco=r(U$," (XLM-RoBERTa-XL model)"),U$.forEach(t),rco=i(S),Ss=n(S,"LI",{});var J$=s(Ss);Cne=n(J$,"STRONG",{});var WKr=s(Cne);tco=r(WKr,"xlnet"),WKr.forEach(t),aco=r(J$," \u2014 "),VB=n(J$,"A",{href:!0});var QKr=s(VB);nco=r(QKr,"XLNetTokenizer"),QKr.forEach(t),sco=r(J$," or "),XB=n(J$,"A",{href:!0});var HKr=s(XB);lco=r(HKr,"XLNetTokenizerFast"),HKr.forEach(t),ico=r(J$," (XLNet model)"),J$.forEach(t),dco=i(S),Rs=n(S,"LI",{});var Y$=s(Rs);wne=n(Y$,"STRONG",{});var UKr=s(wne);cco=r(UKr,"yoso"),UKr.forEach(t),fco=r(Y$," \u2014 "),zB=n(Y$,"A",{href:!0});var JKr=s(zB);mco=r(JKr,"AlbertTokenizer"),JKr.forEach(t),gco=r(Y$," or "),WB=n(Y$,"A",{href:!0});var YKr=s(WB);hco=r(YKr,"AlbertTokenizerFast"),YKr.forEach(t),pco=r(Y$," (YOSO model)"),Y$.forEach(t),S.forEach(t),_co=i(qs),T(sh.$$.fragment,qs),qs.forEach(t),uco=i(Ns),lh=n(Ns,"DIV",{class:!0});var WDe=s(lh);T(JA.$$.fragment,WDe),bco=i(WDe),Ane=n(WDe,"P",{});var KKr=s(Ane);vco=r(KKr,"Register a new tokenizer in this mapping."),KKr.forEach(t),WDe.forEach(t),Ns.forEach(t),Qqe=i(f),Ei=n(f,"H2",{class:!0});var QDe=s(Ei);ih=n(QDe,"A",{id:!0,class:!0,href:!0});var ZKr=s(ih);yne=n(ZKr,"SPAN",{});var eZr=s(yne);T(YA.$$.fragment,eZr),eZr.forEach(t),ZKr.forEach(t),Fco=i(QDe),Lne=n(QDe,"SPAN",{});var oZr=s(Lne);Tco=r(oZr,"AutoFeatureExtractor"),oZr.forEach(t),QDe.forEach(t),Hqe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(KA.$$.fragment,js),Mco=i(js),ZA=n(js,"P",{});var HDe=s(ZA);Eco=r(HDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),QB=n(HDe,"A",{href:!0});var rZr=s(QB);Cco=r(rZr,"AutoFeatureExtractor.from_pretrained()"),rZr.forEach(t),wco=r(HDe," class method."),HDe.forEach(t),Aco=i(js),ey=n(js,"P",{});var UDe=s(ey);yco=r(UDe,"This class cannot be instantiated directly using "),xne=n(UDe,"CODE",{});var tZr=s(xne);Lco=r(tZr,"__init__()"),tZr.forEach(t),xco=r(UDe," (throws an error)."),UDe.forEach(t),$co=i(js),He=n(js,"DIV",{class:!0});var ea=s(He);T(oy.$$.fragment,ea),kco=i(ea),$ne=n(ea,"P",{});var aZr=s($ne);Sco=r(aZr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),aZr.forEach(t),Rco=i(ea),La=n(ea,"P",{});var Gw=s(La);Pco=r(Gw,"The feature extractor class to instantiate is selected based on the "),kne=n(Gw,"CODE",{});var nZr=s(kne);Bco=r(nZr,"model_type"),nZr.forEach(t),Ico=r(Gw,` property of the config object
(either passed as an argument or loaded from `),Sne=n(Gw,"CODE",{});var sZr=s(Sne);Nco=r(sZr,"pretrained_model_name_or_path"),sZr.forEach(t),qco=r(Gw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Rne=n(Gw,"CODE",{});var lZr=s(Rne);jco=r(lZr,"pretrained_model_name_or_path"),lZr.forEach(t),Dco=r(Gw,":"),Gw.forEach(t),Gco=i(ea),Y=n(ea,"UL",{});var Z=s(Y);dh=n(Z,"LI",{});var M6e=s(dh);Pne=n(M6e,"STRONG",{});var iZr=s(Pne);Oco=r(iZr,"beit"),iZr.forEach(t),Vco=r(M6e," \u2014 "),HB=n(M6e,"A",{href:!0});var dZr=s(HB);Xco=r(dZr,"BeitFeatureExtractor"),dZr.forEach(t),zco=r(M6e," (BEiT model)"),M6e.forEach(t),Wco=i(Z),ch=n(Z,"LI",{});var E6e=s(ch);Bne=n(E6e,"STRONG",{});var cZr=s(Bne);Qco=r(cZr,"clip"),cZr.forEach(t),Hco=r(E6e," \u2014 "),UB=n(E6e,"A",{href:!0});var fZr=s(UB);Uco=r(fZr,"CLIPFeatureExtractor"),fZr.forEach(t),Jco=r(E6e," (CLIP model)"),E6e.forEach(t),Yco=i(Z),fh=n(Z,"LI",{});var C6e=s(fh);Ine=n(C6e,"STRONG",{});var mZr=s(Ine);Kco=r(mZr,"convnext"),mZr.forEach(t),Zco=r(C6e," \u2014 "),JB=n(C6e,"A",{href:!0});var gZr=s(JB);efo=r(gZr,"ConvNextFeatureExtractor"),gZr.forEach(t),ofo=r(C6e," (ConvNext model)"),C6e.forEach(t),rfo=i(Z),mh=n(Z,"LI",{});var w6e=s(mh);Nne=n(w6e,"STRONG",{});var hZr=s(Nne);tfo=r(hZr,"cvt"),hZr.forEach(t),afo=r(w6e," \u2014 "),YB=n(w6e,"A",{href:!0});var pZr=s(YB);nfo=r(pZr,"ConvNextFeatureExtractor"),pZr.forEach(t),sfo=r(w6e," (CvT model)"),w6e.forEach(t),lfo=i(Z),gh=n(Z,"LI",{});var A6e=s(gh);qne=n(A6e,"STRONG",{});var _Zr=s(qne);ifo=r(_Zr,"data2vec-audio"),_Zr.forEach(t),dfo=r(A6e," \u2014 "),KB=n(A6e,"A",{href:!0});var uZr=s(KB);cfo=r(uZr,"Wav2Vec2FeatureExtractor"),uZr.forEach(t),ffo=r(A6e," (Data2VecAudio model)"),A6e.forEach(t),mfo=i(Z),hh=n(Z,"LI",{});var y6e=s(hh);jne=n(y6e,"STRONG",{});var bZr=s(jne);gfo=r(bZr,"data2vec-vision"),bZr.forEach(t),hfo=r(y6e," \u2014 "),ZB=n(y6e,"A",{href:!0});var vZr=s(ZB);pfo=r(vZr,"BeitFeatureExtractor"),vZr.forEach(t),_fo=r(y6e," (Data2VecVision model)"),y6e.forEach(t),ufo=i(Z),ph=n(Z,"LI",{});var L6e=s(ph);Dne=n(L6e,"STRONG",{});var FZr=s(Dne);bfo=r(FZr,"deit"),FZr.forEach(t),vfo=r(L6e," \u2014 "),eI=n(L6e,"A",{href:!0});var TZr=s(eI);Ffo=r(TZr,"DeiTFeatureExtractor"),TZr.forEach(t),Tfo=r(L6e," (DeiT model)"),L6e.forEach(t),Mfo=i(Z),_h=n(Z,"LI",{});var x6e=s(_h);Gne=n(x6e,"STRONG",{});var MZr=s(Gne);Efo=r(MZr,"detr"),MZr.forEach(t),Cfo=r(x6e," \u2014 "),oI=n(x6e,"A",{href:!0});var EZr=s(oI);wfo=r(EZr,"DetrFeatureExtractor"),EZr.forEach(t),Afo=r(x6e," (DETR model)"),x6e.forEach(t),yfo=i(Z),uh=n(Z,"LI",{});var $6e=s(uh);One=n($6e,"STRONG",{});var CZr=s(One);Lfo=r(CZr,"dpt"),CZr.forEach(t),xfo=r($6e," \u2014 "),rI=n($6e,"A",{href:!0});var wZr=s(rI);$fo=r(wZr,"DPTFeatureExtractor"),wZr.forEach(t),kfo=r($6e," (DPT model)"),$6e.forEach(t),Sfo=i(Z),bh=n(Z,"LI",{});var k6e=s(bh);Vne=n(k6e,"STRONG",{});var AZr=s(Vne);Rfo=r(AZr,"flava"),AZr.forEach(t),Pfo=r(k6e," \u2014 "),tI=n(k6e,"A",{href:!0});var yZr=s(tI);Bfo=r(yZr,"FlavaFeatureExtractor"),yZr.forEach(t),Ifo=r(k6e," (Flava model)"),k6e.forEach(t),Nfo=i(Z),vh=n(Z,"LI",{});var S6e=s(vh);Xne=n(S6e,"STRONG",{});var LZr=s(Xne);qfo=r(LZr,"glpn"),LZr.forEach(t),jfo=r(S6e," \u2014 "),aI=n(S6e,"A",{href:!0});var xZr=s(aI);Dfo=r(xZr,"GLPNFeatureExtractor"),xZr.forEach(t),Gfo=r(S6e," (GLPN model)"),S6e.forEach(t),Ofo=i(Z),Fh=n(Z,"LI",{});var R6e=s(Fh);zne=n(R6e,"STRONG",{});var $Zr=s(zne);Vfo=r($Zr,"hubert"),$Zr.forEach(t),Xfo=r(R6e," \u2014 "),nI=n(R6e,"A",{href:!0});var kZr=s(nI);zfo=r(kZr,"Wav2Vec2FeatureExtractor"),kZr.forEach(t),Wfo=r(R6e," (Hubert model)"),R6e.forEach(t),Qfo=i(Z),Th=n(Z,"LI",{});var P6e=s(Th);Wne=n(P6e,"STRONG",{});var SZr=s(Wne);Hfo=r(SZr,"imagegpt"),SZr.forEach(t),Ufo=r(P6e," \u2014 "),sI=n(P6e,"A",{href:!0});var RZr=s(sI);Jfo=r(RZr,"ImageGPTFeatureExtractor"),RZr.forEach(t),Yfo=r(P6e," (ImageGPT model)"),P6e.forEach(t),Kfo=i(Z),Mh=n(Z,"LI",{});var B6e=s(Mh);Qne=n(B6e,"STRONG",{});var PZr=s(Qne);Zfo=r(PZr,"layoutlmv2"),PZr.forEach(t),emo=r(B6e," \u2014 "),lI=n(B6e,"A",{href:!0});var BZr=s(lI);omo=r(BZr,"LayoutLMv2FeatureExtractor"),BZr.forEach(t),rmo=r(B6e," (LayoutLMv2 model)"),B6e.forEach(t),tmo=i(Z),Eh=n(Z,"LI",{});var I6e=s(Eh);Hne=n(I6e,"STRONG",{});var IZr=s(Hne);amo=r(IZr,"layoutlmv3"),IZr.forEach(t),nmo=r(I6e," \u2014 "),iI=n(I6e,"A",{href:!0});var NZr=s(iI);smo=r(NZr,"LayoutLMv3FeatureExtractor"),NZr.forEach(t),lmo=r(I6e," (LayoutLMv3 model)"),I6e.forEach(t),imo=i(Z),Ch=n(Z,"LI",{});var N6e=s(Ch);Une=n(N6e,"STRONG",{});var qZr=s(Une);dmo=r(qZr,"maskformer"),qZr.forEach(t),cmo=r(N6e," \u2014 "),dI=n(N6e,"A",{href:!0});var jZr=s(dI);fmo=r(jZr,"MaskFormerFeatureExtractor"),jZr.forEach(t),mmo=r(N6e," (MaskFormer model)"),N6e.forEach(t),gmo=i(Z),wh=n(Z,"LI",{});var q6e=s(wh);Jne=n(q6e,"STRONG",{});var DZr=s(Jne);hmo=r(DZr,"mobilevit"),DZr.forEach(t),pmo=r(q6e," \u2014 "),cI=n(q6e,"A",{href:!0});var GZr=s(cI);_mo=r(GZr,"MobileViTFeatureExtractor"),GZr.forEach(t),umo=r(q6e," (MobileViT model)"),q6e.forEach(t),bmo=i(Z),Ah=n(Z,"LI",{});var j6e=s(Ah);Yne=n(j6e,"STRONG",{});var OZr=s(Yne);vmo=r(OZr,"perceiver"),OZr.forEach(t),Fmo=r(j6e," \u2014 "),fI=n(j6e,"A",{href:!0});var VZr=s(fI);Tmo=r(VZr,"PerceiverFeatureExtractor"),VZr.forEach(t),Mmo=r(j6e," (Perceiver model)"),j6e.forEach(t),Emo=i(Z),yh=n(Z,"LI",{});var D6e=s(yh);Kne=n(D6e,"STRONG",{});var XZr=s(Kne);Cmo=r(XZr,"poolformer"),XZr.forEach(t),wmo=r(D6e," \u2014 "),mI=n(D6e,"A",{href:!0});var zZr=s(mI);Amo=r(zZr,"PoolFormerFeatureExtractor"),zZr.forEach(t),ymo=r(D6e," (PoolFormer model)"),D6e.forEach(t),Lmo=i(Z),Lh=n(Z,"LI",{});var G6e=s(Lh);Zne=n(G6e,"STRONG",{});var WZr=s(Zne);xmo=r(WZr,"regnet"),WZr.forEach(t),$mo=r(G6e," \u2014 "),gI=n(G6e,"A",{href:!0});var QZr=s(gI);kmo=r(QZr,"ConvNextFeatureExtractor"),QZr.forEach(t),Smo=r(G6e," (RegNet model)"),G6e.forEach(t),Rmo=i(Z),xh=n(Z,"LI",{});var O6e=s(xh);ese=n(O6e,"STRONG",{});var HZr=s(ese);Pmo=r(HZr,"resnet"),HZr.forEach(t),Bmo=r(O6e," \u2014 "),hI=n(O6e,"A",{href:!0});var UZr=s(hI);Imo=r(UZr,"ConvNextFeatureExtractor"),UZr.forEach(t),Nmo=r(O6e," (ResNet model)"),O6e.forEach(t),qmo=i(Z),$h=n(Z,"LI",{});var V6e=s($h);ose=n(V6e,"STRONG",{});var JZr=s(ose);jmo=r(JZr,"segformer"),JZr.forEach(t),Dmo=r(V6e," \u2014 "),pI=n(V6e,"A",{href:!0});var YZr=s(pI);Gmo=r(YZr,"SegformerFeatureExtractor"),YZr.forEach(t),Omo=r(V6e," (SegFormer model)"),V6e.forEach(t),Vmo=i(Z),kh=n(Z,"LI",{});var X6e=s(kh);rse=n(X6e,"STRONG",{});var KZr=s(rse);Xmo=r(KZr,"speech_to_text"),KZr.forEach(t),zmo=r(X6e," \u2014 "),_I=n(X6e,"A",{href:!0});var ZZr=s(_I);Wmo=r(ZZr,"Speech2TextFeatureExtractor"),ZZr.forEach(t),Qmo=r(X6e," (Speech2Text model)"),X6e.forEach(t),Hmo=i(Z),Sh=n(Z,"LI",{});var z6e=s(Sh);tse=n(z6e,"STRONG",{});var eet=s(tse);Umo=r(eet,"swin"),eet.forEach(t),Jmo=r(z6e," \u2014 "),uI=n(z6e,"A",{href:!0});var oet=s(uI);Ymo=r(oet,"ViTFeatureExtractor"),oet.forEach(t),Kmo=r(z6e," (Swin model)"),z6e.forEach(t),Zmo=i(Z),Rh=n(Z,"LI",{});var W6e=s(Rh);ase=n(W6e,"STRONG",{});var ret=s(ase);ego=r(ret,"van"),ret.forEach(t),ogo=r(W6e," \u2014 "),bI=n(W6e,"A",{href:!0});var tet=s(bI);rgo=r(tet,"ConvNextFeatureExtractor"),tet.forEach(t),tgo=r(W6e," (VAN model)"),W6e.forEach(t),ago=i(Z),Ph=n(Z,"LI",{});var Q6e=s(Ph);nse=n(Q6e,"STRONG",{});var aet=s(nse);ngo=r(aet,"vit"),aet.forEach(t),sgo=r(Q6e," \u2014 "),vI=n(Q6e,"A",{href:!0});var net=s(vI);lgo=r(net,"ViTFeatureExtractor"),net.forEach(t),igo=r(Q6e," (ViT model)"),Q6e.forEach(t),dgo=i(Z),Bh=n(Z,"LI",{});var H6e=s(Bh);sse=n(H6e,"STRONG",{});var set=s(sse);cgo=r(set,"vit_mae"),set.forEach(t),fgo=r(H6e," \u2014 "),FI=n(H6e,"A",{href:!0});var iet=s(FI);mgo=r(iet,"ViTFeatureExtractor"),iet.forEach(t),ggo=r(H6e," (ViTMAE model)"),H6e.forEach(t),hgo=i(Z),Ih=n(Z,"LI",{});var U6e=s(Ih);lse=n(U6e,"STRONG",{});var det=s(lse);pgo=r(det,"wav2vec2"),det.forEach(t),_go=r(U6e," \u2014 "),TI=n(U6e,"A",{href:!0});var cet=s(TI);ugo=r(cet,"Wav2Vec2FeatureExtractor"),cet.forEach(t),bgo=r(U6e," (Wav2Vec2 model)"),U6e.forEach(t),vgo=i(Z),Nh=n(Z,"LI",{});var J6e=s(Nh);ise=n(J6e,"STRONG",{});var fet=s(ise);Fgo=r(fet,"wav2vec2-conformer"),fet.forEach(t),Tgo=r(J6e," \u2014 "),MI=n(J6e,"A",{href:!0});var met=s(MI);Mgo=r(met,"Wav2Vec2FeatureExtractor"),met.forEach(t),Ego=r(J6e," (Wav2Vec2-Conformer model)"),J6e.forEach(t),Cgo=i(Z),qh=n(Z,"LI",{});var Y6e=s(qh);dse=n(Y6e,"STRONG",{});var get=s(dse);wgo=r(get,"yolos"),get.forEach(t),Ago=r(Y6e," \u2014 "),EI=n(Y6e,"A",{href:!0});var het=s(EI);ygo=r(het,"YolosFeatureExtractor"),het.forEach(t),Lgo=r(Y6e," (YOLOS model)"),Y6e.forEach(t),Z.forEach(t),xgo=i(ea),T(jh.$$.fragment,ea),$go=i(ea),T(Dh.$$.fragment,ea),ea.forEach(t),kgo=i(js),Gh=n(js,"DIV",{class:!0});var JDe=s(Gh);T(ry.$$.fragment,JDe),Sgo=i(JDe),cse=n(JDe,"P",{});var pet=s(cse);Rgo=r(pet,"Register a new feature extractor for this class."),pet.forEach(t),JDe.forEach(t),js.forEach(t),Uqe=i(f),Ci=n(f,"H2",{class:!0});var YDe=s(Ci);Oh=n(YDe,"A",{id:!0,class:!0,href:!0});var _et=s(Oh);fse=n(_et,"SPAN",{});var uet=s(fse);T(ty.$$.fragment,uet),uet.forEach(t),_et.forEach(t),Pgo=i(YDe),mse=n(YDe,"SPAN",{});var bet=s(mse);Bgo=r(bet,"AutoProcessor"),bet.forEach(t),YDe.forEach(t),Jqe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(ay.$$.fragment,Ds),Igo=i(Ds),ny=n(Ds,"P",{});var KDe=s(ny);Ngo=r(KDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),CI=n(KDe,"A",{href:!0});var vet=s(CI);qgo=r(vet,"AutoProcessor.from_pretrained()"),vet.forEach(t),jgo=r(KDe," class method."),KDe.forEach(t),Dgo=i(Ds),sy=n(Ds,"P",{});var ZDe=s(sy);Ggo=r(ZDe,"This class cannot be instantiated directly using "),gse=n(ZDe,"CODE",{});var Fet=s(gse);Ogo=r(Fet,"__init__()"),Fet.forEach(t),Vgo=r(ZDe," (throws an error)."),ZDe.forEach(t),Xgo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var oa=s(Ue);T(ly.$$.fragment,oa),zgo=i(oa),hse=n(oa,"P",{});var Tet=s(hse);Wgo=r(Tet,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Tet.forEach(t),Qgo=i(oa),wi=n(oa,"P",{});var PZ=s(wi);Hgo=r(PZ,"The processor class to instantiate is selected based on the "),pse=n(PZ,"CODE",{});var Met=s(pse);Ugo=r(Met,"model_type"),Met.forEach(t),Jgo=r(PZ,` property of the config object (either
passed as an argument or loaded from `),_se=n(PZ,"CODE",{});var Eet=s(_se);Ygo=r(Eet,"pretrained_model_name_or_path"),Eet.forEach(t),Kgo=r(PZ," if possible):"),PZ.forEach(t),Zgo=i(oa),he=n(oa,"UL",{});var ue=s(he);Vh=n(ue,"LI",{});var K6e=s(Vh);use=n(K6e,"STRONG",{});var Cet=s(use);eho=r(Cet,"clip"),Cet.forEach(t),oho=r(K6e," \u2014 "),wI=n(K6e,"A",{href:!0});var wet=s(wI);rho=r(wet,"CLIPProcessor"),wet.forEach(t),tho=r(K6e," (CLIP model)"),K6e.forEach(t),aho=i(ue),Xh=n(ue,"LI",{});var Z6e=s(Xh);bse=n(Z6e,"STRONG",{});var Aet=s(bse);nho=r(Aet,"flava"),Aet.forEach(t),sho=r(Z6e," \u2014 "),vse=n(Z6e,"CODE",{});var yet=s(vse);lho=r(yet,"FLAVAProcessor"),yet.forEach(t),iho=r(Z6e," (Flava model)"),Z6e.forEach(t),dho=i(ue),zh=n(ue,"LI",{});var eAe=s(zh);Fse=n(eAe,"STRONG",{});var Let=s(Fse);cho=r(Let,"layoutlmv2"),Let.forEach(t),fho=r(eAe," \u2014 "),AI=n(eAe,"A",{href:!0});var xet=s(AI);mho=r(xet,"LayoutLMv2Processor"),xet.forEach(t),gho=r(eAe," (LayoutLMv2 model)"),eAe.forEach(t),hho=i(ue),Wh=n(ue,"LI",{});var oAe=s(Wh);Tse=n(oAe,"STRONG",{});var $et=s(Tse);pho=r($et,"layoutlmv3"),$et.forEach(t),_ho=r(oAe," \u2014 "),yI=n(oAe,"A",{href:!0});var ket=s(yI);uho=r(ket,"LayoutLMv3Processor"),ket.forEach(t),bho=r(oAe," (LayoutLMv3 model)"),oAe.forEach(t),vho=i(ue),Qh=n(ue,"LI",{});var rAe=s(Qh);Mse=n(rAe,"STRONG",{});var Set=s(Mse);Fho=r(Set,"layoutxlm"),Set.forEach(t),Tho=r(rAe," \u2014 "),LI=n(rAe,"A",{href:!0});var Ret=s(LI);Mho=r(Ret,"LayoutXLMProcessor"),Ret.forEach(t),Eho=r(rAe," (LayoutXLM model)"),rAe.forEach(t),Cho=i(ue),Hh=n(ue,"LI",{});var tAe=s(Hh);Ese=n(tAe,"STRONG",{});var Pet=s(Ese);who=r(Pet,"sew"),Pet.forEach(t),Aho=r(tAe," \u2014 "),xI=n(tAe,"A",{href:!0});var Bet=s(xI);yho=r(Bet,"Wav2Vec2Processor"),Bet.forEach(t),Lho=r(tAe," (SEW model)"),tAe.forEach(t),xho=i(ue),Uh=n(ue,"LI",{});var aAe=s(Uh);Cse=n(aAe,"STRONG",{});var Iet=s(Cse);$ho=r(Iet,"sew-d"),Iet.forEach(t),kho=r(aAe," \u2014 "),$I=n(aAe,"A",{href:!0});var Net=s($I);Sho=r(Net,"Wav2Vec2Processor"),Net.forEach(t),Rho=r(aAe," (SEW-D model)"),aAe.forEach(t),Pho=i(ue),Jh=n(ue,"LI",{});var nAe=s(Jh);wse=n(nAe,"STRONG",{});var qet=s(wse);Bho=r(qet,"speech_to_text"),qet.forEach(t),Iho=r(nAe," \u2014 "),kI=n(nAe,"A",{href:!0});var jet=s(kI);Nho=r(jet,"Speech2TextProcessor"),jet.forEach(t),qho=r(nAe," (Speech2Text model)"),nAe.forEach(t),jho=i(ue),Yh=n(ue,"LI",{});var sAe=s(Yh);Ase=n(sAe,"STRONG",{});var Det=s(Ase);Dho=r(Det,"speech_to_text_2"),Det.forEach(t),Gho=r(sAe," \u2014 "),SI=n(sAe,"A",{href:!0});var Get=s(SI);Oho=r(Get,"Speech2Text2Processor"),Get.forEach(t),Vho=r(sAe," (Speech2Text2 model)"),sAe.forEach(t),Xho=i(ue),Kh=n(ue,"LI",{});var lAe=s(Kh);yse=n(lAe,"STRONG",{});var Oet=s(yse);zho=r(Oet,"trocr"),Oet.forEach(t),Who=r(lAe," \u2014 "),RI=n(lAe,"A",{href:!0});var Vet=s(RI);Qho=r(Vet,"TrOCRProcessor"),Vet.forEach(t),Hho=r(lAe," (TrOCR model)"),lAe.forEach(t),Uho=i(ue),Zh=n(ue,"LI",{});var iAe=s(Zh);Lse=n(iAe,"STRONG",{});var Xet=s(Lse);Jho=r(Xet,"unispeech"),Xet.forEach(t),Yho=r(iAe," \u2014 "),PI=n(iAe,"A",{href:!0});var zet=s(PI);Kho=r(zet,"Wav2Vec2Processor"),zet.forEach(t),Zho=r(iAe," (UniSpeech model)"),iAe.forEach(t),epo=i(ue),ep=n(ue,"LI",{});var dAe=s(ep);xse=n(dAe,"STRONG",{});var Wet=s(xse);opo=r(Wet,"unispeech-sat"),Wet.forEach(t),rpo=r(dAe," \u2014 "),BI=n(dAe,"A",{href:!0});var Qet=s(BI);tpo=r(Qet,"Wav2Vec2Processor"),Qet.forEach(t),apo=r(dAe," (UniSpeechSat model)"),dAe.forEach(t),npo=i(ue),op=n(ue,"LI",{});var cAe=s(op);$se=n(cAe,"STRONG",{});var Het=s($se);spo=r(Het,"vilt"),Het.forEach(t),lpo=r(cAe," \u2014 "),II=n(cAe,"A",{href:!0});var Uet=s(II);ipo=r(Uet,"ViltProcessor"),Uet.forEach(t),dpo=r(cAe," (ViLT model)"),cAe.forEach(t),cpo=i(ue),rp=n(ue,"LI",{});var fAe=s(rp);kse=n(fAe,"STRONG",{});var Jet=s(kse);fpo=r(Jet,"vision-text-dual-encoder"),Jet.forEach(t),mpo=r(fAe," \u2014 "),NI=n(fAe,"A",{href:!0});var Yet=s(NI);gpo=r(Yet,"VisionTextDualEncoderProcessor"),Yet.forEach(t),hpo=r(fAe," (VisionTextDualEncoder model)"),fAe.forEach(t),ppo=i(ue),tp=n(ue,"LI",{});var mAe=s(tp);Sse=n(mAe,"STRONG",{});var Ket=s(Sse);_po=r(Ket,"wav2vec2"),Ket.forEach(t),upo=r(mAe," \u2014 "),qI=n(mAe,"A",{href:!0});var Zet=s(qI);bpo=r(Zet,"Wav2Vec2Processor"),Zet.forEach(t),vpo=r(mAe," (Wav2Vec2 model)"),mAe.forEach(t),Fpo=i(ue),ap=n(ue,"LI",{});var gAe=s(ap);Rse=n(gAe,"STRONG",{});var eot=s(Rse);Tpo=r(eot,"wav2vec2-conformer"),eot.forEach(t),Mpo=r(gAe," \u2014 "),jI=n(gAe,"A",{href:!0});var oot=s(jI);Epo=r(oot,"Wav2Vec2Processor"),oot.forEach(t),Cpo=r(gAe," (Wav2Vec2-Conformer model)"),gAe.forEach(t),wpo=i(ue),np=n(ue,"LI",{});var hAe=s(np);Pse=n(hAe,"STRONG",{});var rot=s(Pse);Apo=r(rot,"wavlm"),rot.forEach(t),ypo=r(hAe," \u2014 "),DI=n(hAe,"A",{href:!0});var tot=s(DI);Lpo=r(tot,"Wav2Vec2Processor"),tot.forEach(t),xpo=r(hAe," (WavLM model)"),hAe.forEach(t),ue.forEach(t),$po=i(oa),T(sp.$$.fragment,oa),kpo=i(oa),T(lp.$$.fragment,oa),oa.forEach(t),Spo=i(Ds),ip=n(Ds,"DIV",{class:!0});var eGe=s(ip);T(iy.$$.fragment,eGe),Rpo=i(eGe),Bse=n(eGe,"P",{});var aot=s(Bse);Ppo=r(aot,"Register a new processor for this class."),aot.forEach(t),eGe.forEach(t),Ds.forEach(t),Yqe=i(f),Ai=n(f,"H2",{class:!0});var oGe=s(Ai);dp=n(oGe,"A",{id:!0,class:!0,href:!0});var not=s(dp);Ise=n(not,"SPAN",{});var sot=s(Ise);T(dy.$$.fragment,sot),sot.forEach(t),not.forEach(t),Bpo=i(oGe),Nse=n(oGe,"SPAN",{});var lot=s(Nse);Ipo=r(lot,"AutoModel"),lot.forEach(t),oGe.forEach(t),Kqe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(cy.$$.fragment,Gs),Npo=i(Gs),yi=n(Gs,"P",{});var BZ=s(yi);qpo=r(BZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GI=n(BZ,"A",{href:!0});var iot=s(GI);jpo=r(iot,"from_pretrained()"),iot.forEach(t),Dpo=r(BZ," class method or the "),OI=n(BZ,"A",{href:!0});var dot=s(OI);Gpo=r(dot,"from_config()"),dot.forEach(t),Opo=r(BZ,` class
method.`),BZ.forEach(t),Vpo=i(Gs),fy=n(Gs,"P",{});var rGe=s(fy);Xpo=r(rGe,"This class cannot be instantiated directly using "),qse=n(rGe,"CODE",{});var cot=s(qse);zpo=r(cot,"__init__()"),cot.forEach(t),Wpo=r(rGe," (throws an error)."),rGe.forEach(t),Qpo=i(Gs),at=n(Gs,"DIV",{class:!0});var Ow=s(at);T(my.$$.fragment,Ow),Hpo=i(Ow),jse=n(Ow,"P",{});var fot=s(jse);Upo=r(fot,"Instantiates one of the base model classes of the library from a configuration."),fot.forEach(t),Jpo=i(Ow),Li=n(Ow,"P",{});var IZ=s(Li);Ypo=r(IZ,`Note:
Loading a model from its configuration file does `),Dse=n(IZ,"STRONG",{});var mot=s(Dse);Kpo=r(mot,"not"),mot.forEach(t),Zpo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VI=n(IZ,"A",{href:!0});var got=s(VI);e_o=r(got,"from_pretrained()"),got.forEach(t),o_o=r(IZ," to load the model weights."),IZ.forEach(t),r_o=i(Ow),T(cp.$$.fragment,Ow),Ow.forEach(t),t_o=i(Gs),Je=n(Gs,"DIV",{class:!0});var ra=s(Je);T(gy.$$.fragment,ra),a_o=i(ra),Gse=n(ra,"P",{});var hot=s(Gse);n_o=r(hot,"Instantiate one of the base model classes of the library from a pretrained model."),hot.forEach(t),s_o=i(ra),xa=n(ra,"P",{});var Vw=s(xa);l_o=r(Vw,"The model class to instantiate is selected based on the "),Ose=n(Vw,"CODE",{});var pot=s(Ose);i_o=r(pot,"model_type"),pot.forEach(t),d_o=r(Vw,` property of the config object (either
passed as an argument or loaded from `),Vse=n(Vw,"CODE",{});var _ot=s(Vse);c_o=r(_ot,"pretrained_model_name_or_path"),_ot.forEach(t),f_o=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xse=n(Vw,"CODE",{});var uot=s(Xse);m_o=r(uot,"pretrained_model_name_or_path"),uot.forEach(t),g_o=r(Vw,":"),Vw.forEach(t),h_o=i(ra),x=n(ra,"UL",{});var $=s(x);fp=n($,"LI",{});var pAe=s(fp);zse=n(pAe,"STRONG",{});var bot=s(zse);p_o=r(bot,"albert"),bot.forEach(t),__o=r(pAe," \u2014 "),XI=n(pAe,"A",{href:!0});var vot=s(XI);u_o=r(vot,"AlbertModel"),vot.forEach(t),b_o=r(pAe," (ALBERT model)"),pAe.forEach(t),v_o=i($),mp=n($,"LI",{});var _Ae=s(mp);Wse=n(_Ae,"STRONG",{});var Fot=s(Wse);F_o=r(Fot,"bart"),Fot.forEach(t),T_o=r(_Ae," \u2014 "),zI=n(_Ae,"A",{href:!0});var Tot=s(zI);M_o=r(Tot,"BartModel"),Tot.forEach(t),E_o=r(_Ae," (BART model)"),_Ae.forEach(t),C_o=i($),gp=n($,"LI",{});var uAe=s(gp);Qse=n(uAe,"STRONG",{});var Mot=s(Qse);w_o=r(Mot,"beit"),Mot.forEach(t),A_o=r(uAe," \u2014 "),WI=n(uAe,"A",{href:!0});var Eot=s(WI);y_o=r(Eot,"BeitModel"),Eot.forEach(t),L_o=r(uAe," (BEiT model)"),uAe.forEach(t),x_o=i($),hp=n($,"LI",{});var bAe=s(hp);Hse=n(bAe,"STRONG",{});var Cot=s(Hse);$_o=r(Cot,"bert"),Cot.forEach(t),k_o=r(bAe," \u2014 "),QI=n(bAe,"A",{href:!0});var wot=s(QI);S_o=r(wot,"BertModel"),wot.forEach(t),R_o=r(bAe," (BERT model)"),bAe.forEach(t),P_o=i($),pp=n($,"LI",{});var vAe=s(pp);Use=n(vAe,"STRONG",{});var Aot=s(Use);B_o=r(Aot,"bert-generation"),Aot.forEach(t),I_o=r(vAe," \u2014 "),HI=n(vAe,"A",{href:!0});var yot=s(HI);N_o=r(yot,"BertGenerationEncoder"),yot.forEach(t),q_o=r(vAe," (Bert Generation model)"),vAe.forEach(t),j_o=i($),_p=n($,"LI",{});var FAe=s(_p);Jse=n(FAe,"STRONG",{});var Lot=s(Jse);D_o=r(Lot,"big_bird"),Lot.forEach(t),G_o=r(FAe," \u2014 "),UI=n(FAe,"A",{href:!0});var xot=s(UI);O_o=r(xot,"BigBirdModel"),xot.forEach(t),V_o=r(FAe," (BigBird model)"),FAe.forEach(t),X_o=i($),up=n($,"LI",{});var TAe=s(up);Yse=n(TAe,"STRONG",{});var $ot=s(Yse);z_o=r($ot,"bigbird_pegasus"),$ot.forEach(t),W_o=r(TAe," \u2014 "),JI=n(TAe,"A",{href:!0});var kot=s(JI);Q_o=r(kot,"BigBirdPegasusModel"),kot.forEach(t),H_o=r(TAe," (BigBirdPegasus model)"),TAe.forEach(t),U_o=i($),bp=n($,"LI",{});var MAe=s(bp);Kse=n(MAe,"STRONG",{});var Sot=s(Kse);J_o=r(Sot,"blenderbot"),Sot.forEach(t),Y_o=r(MAe," \u2014 "),YI=n(MAe,"A",{href:!0});var Rot=s(YI);K_o=r(Rot,"BlenderbotModel"),Rot.forEach(t),Z_o=r(MAe," (Blenderbot model)"),MAe.forEach(t),euo=i($),vp=n($,"LI",{});var EAe=s(vp);Zse=n(EAe,"STRONG",{});var Pot=s(Zse);ouo=r(Pot,"blenderbot-small"),Pot.forEach(t),ruo=r(EAe," \u2014 "),KI=n(EAe,"A",{href:!0});var Bot=s(KI);tuo=r(Bot,"BlenderbotSmallModel"),Bot.forEach(t),auo=r(EAe," (BlenderbotSmall model)"),EAe.forEach(t),nuo=i($),Fp=n($,"LI",{});var CAe=s(Fp);ele=n(CAe,"STRONG",{});var Iot=s(ele);suo=r(Iot,"camembert"),Iot.forEach(t),luo=r(CAe," \u2014 "),ZI=n(CAe,"A",{href:!0});var Not=s(ZI);iuo=r(Not,"CamembertModel"),Not.forEach(t),duo=r(CAe," (CamemBERT model)"),CAe.forEach(t),cuo=i($),Tp=n($,"LI",{});var wAe=s(Tp);ole=n(wAe,"STRONG",{});var qot=s(ole);fuo=r(qot,"canine"),qot.forEach(t),muo=r(wAe," \u2014 "),eN=n(wAe,"A",{href:!0});var jot=s(eN);guo=r(jot,"CanineModel"),jot.forEach(t),huo=r(wAe," (Canine model)"),wAe.forEach(t),puo=i($),Mp=n($,"LI",{});var AAe=s(Mp);rle=n(AAe,"STRONG",{});var Dot=s(rle);_uo=r(Dot,"clip"),Dot.forEach(t),uuo=r(AAe," \u2014 "),oN=n(AAe,"A",{href:!0});var Got=s(oN);buo=r(Got,"CLIPModel"),Got.forEach(t),vuo=r(AAe," (CLIP model)"),AAe.forEach(t),Fuo=i($),Ep=n($,"LI",{});var yAe=s(Ep);tle=n(yAe,"STRONG",{});var Oot=s(tle);Tuo=r(Oot,"convbert"),Oot.forEach(t),Muo=r(yAe," \u2014 "),rN=n(yAe,"A",{href:!0});var Vot=s(rN);Euo=r(Vot,"ConvBertModel"),Vot.forEach(t),Cuo=r(yAe," (ConvBERT model)"),yAe.forEach(t),wuo=i($),Cp=n($,"LI",{});var LAe=s(Cp);ale=n(LAe,"STRONG",{});var Xot=s(ale);Auo=r(Xot,"convnext"),Xot.forEach(t),yuo=r(LAe," \u2014 "),tN=n(LAe,"A",{href:!0});var zot=s(tN);Luo=r(zot,"ConvNextModel"),zot.forEach(t),xuo=r(LAe," (ConvNext model)"),LAe.forEach(t),$uo=i($),wp=n($,"LI",{});var xAe=s(wp);nle=n(xAe,"STRONG",{});var Wot=s(nle);kuo=r(Wot,"ctrl"),Wot.forEach(t),Suo=r(xAe," \u2014 "),aN=n(xAe,"A",{href:!0});var Qot=s(aN);Ruo=r(Qot,"CTRLModel"),Qot.forEach(t),Puo=r(xAe," (CTRL model)"),xAe.forEach(t),Buo=i($),Ap=n($,"LI",{});var $Ae=s(Ap);sle=n($Ae,"STRONG",{});var Hot=s(sle);Iuo=r(Hot,"cvt"),Hot.forEach(t),Nuo=r($Ae," \u2014 "),nN=n($Ae,"A",{href:!0});var Uot=s(nN);quo=r(Uot,"CvtModel"),Uot.forEach(t),juo=r($Ae," (CvT model)"),$Ae.forEach(t),Duo=i($),yp=n($,"LI",{});var kAe=s(yp);lle=n(kAe,"STRONG",{});var Jot=s(lle);Guo=r(Jot,"data2vec-audio"),Jot.forEach(t),Ouo=r(kAe," \u2014 "),sN=n(kAe,"A",{href:!0});var Yot=s(sN);Vuo=r(Yot,"Data2VecAudioModel"),Yot.forEach(t),Xuo=r(kAe," (Data2VecAudio model)"),kAe.forEach(t),zuo=i($),Lp=n($,"LI",{});var SAe=s(Lp);ile=n(SAe,"STRONG",{});var Kot=s(ile);Wuo=r(Kot,"data2vec-text"),Kot.forEach(t),Quo=r(SAe," \u2014 "),lN=n(SAe,"A",{href:!0});var Zot=s(lN);Huo=r(Zot,"Data2VecTextModel"),Zot.forEach(t),Uuo=r(SAe," (Data2VecText model)"),SAe.forEach(t),Juo=i($),xp=n($,"LI",{});var RAe=s(xp);dle=n(RAe,"STRONG",{});var ert=s(dle);Yuo=r(ert,"data2vec-vision"),ert.forEach(t),Kuo=r(RAe," \u2014 "),iN=n(RAe,"A",{href:!0});var ort=s(iN);Zuo=r(ort,"Data2VecVisionModel"),ort.forEach(t),e1o=r(RAe," (Data2VecVision model)"),RAe.forEach(t),o1o=i($),$p=n($,"LI",{});var PAe=s($p);cle=n(PAe,"STRONG",{});var rrt=s(cle);r1o=r(rrt,"deberta"),rrt.forEach(t),t1o=r(PAe," \u2014 "),dN=n(PAe,"A",{href:!0});var trt=s(dN);a1o=r(trt,"DebertaModel"),trt.forEach(t),n1o=r(PAe," (DeBERTa model)"),PAe.forEach(t),s1o=i($),kp=n($,"LI",{});var BAe=s(kp);fle=n(BAe,"STRONG",{});var art=s(fle);l1o=r(art,"deberta-v2"),art.forEach(t),i1o=r(BAe," \u2014 "),cN=n(BAe,"A",{href:!0});var nrt=s(cN);d1o=r(nrt,"DebertaV2Model"),nrt.forEach(t),c1o=r(BAe," (DeBERTa-v2 model)"),BAe.forEach(t),f1o=i($),Sp=n($,"LI",{});var IAe=s(Sp);mle=n(IAe,"STRONG",{});var srt=s(mle);m1o=r(srt,"decision_transformer"),srt.forEach(t),g1o=r(IAe," \u2014 "),fN=n(IAe,"A",{href:!0});var lrt=s(fN);h1o=r(lrt,"DecisionTransformerModel"),lrt.forEach(t),p1o=r(IAe," (Decision Transformer model)"),IAe.forEach(t),_1o=i($),Rp=n($,"LI",{});var NAe=s(Rp);gle=n(NAe,"STRONG",{});var irt=s(gle);u1o=r(irt,"deit"),irt.forEach(t),b1o=r(NAe," \u2014 "),mN=n(NAe,"A",{href:!0});var drt=s(mN);v1o=r(drt,"DeiTModel"),drt.forEach(t),F1o=r(NAe," (DeiT model)"),NAe.forEach(t),T1o=i($),Pp=n($,"LI",{});var qAe=s(Pp);hle=n(qAe,"STRONG",{});var crt=s(hle);M1o=r(crt,"detr"),crt.forEach(t),E1o=r(qAe," \u2014 "),gN=n(qAe,"A",{href:!0});var frt=s(gN);C1o=r(frt,"DetrModel"),frt.forEach(t),w1o=r(qAe," (DETR model)"),qAe.forEach(t),A1o=i($),Bp=n($,"LI",{});var jAe=s(Bp);ple=n(jAe,"STRONG",{});var mrt=s(ple);y1o=r(mrt,"distilbert"),mrt.forEach(t),L1o=r(jAe," \u2014 "),hN=n(jAe,"A",{href:!0});var grt=s(hN);x1o=r(grt,"DistilBertModel"),grt.forEach(t),$1o=r(jAe," (DistilBERT model)"),jAe.forEach(t),k1o=i($),Ip=n($,"LI",{});var DAe=s(Ip);_le=n(DAe,"STRONG",{});var hrt=s(_le);S1o=r(hrt,"dpr"),hrt.forEach(t),R1o=r(DAe," \u2014 "),pN=n(DAe,"A",{href:!0});var prt=s(pN);P1o=r(prt,"DPRQuestionEncoder"),prt.forEach(t),B1o=r(DAe," (DPR model)"),DAe.forEach(t),I1o=i($),Np=n($,"LI",{});var GAe=s(Np);ule=n(GAe,"STRONG",{});var _rt=s(ule);N1o=r(_rt,"dpt"),_rt.forEach(t),q1o=r(GAe," \u2014 "),_N=n(GAe,"A",{href:!0});var urt=s(_N);j1o=r(urt,"DPTModel"),urt.forEach(t),D1o=r(GAe," (DPT model)"),GAe.forEach(t),G1o=i($),qp=n($,"LI",{});var OAe=s(qp);ble=n(OAe,"STRONG",{});var brt=s(ble);O1o=r(brt,"electra"),brt.forEach(t),V1o=r(OAe," \u2014 "),uN=n(OAe,"A",{href:!0});var vrt=s(uN);X1o=r(vrt,"ElectraModel"),vrt.forEach(t),z1o=r(OAe," (ELECTRA model)"),OAe.forEach(t),W1o=i($),jp=n($,"LI",{});var VAe=s(jp);vle=n(VAe,"STRONG",{});var Frt=s(vle);Q1o=r(Frt,"flaubert"),Frt.forEach(t),H1o=r(VAe," \u2014 "),bN=n(VAe,"A",{href:!0});var Trt=s(bN);U1o=r(Trt,"FlaubertModel"),Trt.forEach(t),J1o=r(VAe," (FlauBERT model)"),VAe.forEach(t),Y1o=i($),Dp=n($,"LI",{});var XAe=s(Dp);Fle=n(XAe,"STRONG",{});var Mrt=s(Fle);K1o=r(Mrt,"flava"),Mrt.forEach(t),Z1o=r(XAe," \u2014 "),vN=n(XAe,"A",{href:!0});var Ert=s(vN);ebo=r(Ert,"FlavaModel"),Ert.forEach(t),obo=r(XAe," (Flava model)"),XAe.forEach(t),rbo=i($),Gp=n($,"LI",{});var zAe=s(Gp);Tle=n(zAe,"STRONG",{});var Crt=s(Tle);tbo=r(Crt,"fnet"),Crt.forEach(t),abo=r(zAe," \u2014 "),FN=n(zAe,"A",{href:!0});var wrt=s(FN);nbo=r(wrt,"FNetModel"),wrt.forEach(t),sbo=r(zAe," (FNet model)"),zAe.forEach(t),lbo=i($),Op=n($,"LI",{});var WAe=s(Op);Mle=n(WAe,"STRONG",{});var Art=s(Mle);ibo=r(Art,"fsmt"),Art.forEach(t),dbo=r(WAe," \u2014 "),TN=n(WAe,"A",{href:!0});var yrt=s(TN);cbo=r(yrt,"FSMTModel"),yrt.forEach(t),fbo=r(WAe," (FairSeq Machine-Translation model)"),WAe.forEach(t),mbo=i($),Ps=n($,"LI",{});var K$=s(Ps);Ele=n(K$,"STRONG",{});var Lrt=s(Ele);gbo=r(Lrt,"funnel"),Lrt.forEach(t),hbo=r(K$," \u2014 "),MN=n(K$,"A",{href:!0});var xrt=s(MN);pbo=r(xrt,"FunnelModel"),xrt.forEach(t),_bo=r(K$," or "),EN=n(K$,"A",{href:!0});var $rt=s(EN);ubo=r($rt,"FunnelBaseModel"),$rt.forEach(t),bbo=r(K$," (Funnel Transformer model)"),K$.forEach(t),vbo=i($),Vp=n($,"LI",{});var QAe=s(Vp);Cle=n(QAe,"STRONG",{});var krt=s(Cle);Fbo=r(krt,"glpn"),krt.forEach(t),Tbo=r(QAe," \u2014 "),CN=n(QAe,"A",{href:!0});var Srt=s(CN);Mbo=r(Srt,"GLPNModel"),Srt.forEach(t),Ebo=r(QAe," (GLPN model)"),QAe.forEach(t),Cbo=i($),Xp=n($,"LI",{});var HAe=s(Xp);wle=n(HAe,"STRONG",{});var Rrt=s(wle);wbo=r(Rrt,"gpt2"),Rrt.forEach(t),Abo=r(HAe," \u2014 "),wN=n(HAe,"A",{href:!0});var Prt=s(wN);ybo=r(Prt,"GPT2Model"),Prt.forEach(t),Lbo=r(HAe," (OpenAI GPT-2 model)"),HAe.forEach(t),xbo=i($),zp=n($,"LI",{});var UAe=s(zp);Ale=n(UAe,"STRONG",{});var Brt=s(Ale);$bo=r(Brt,"gpt_neo"),Brt.forEach(t),kbo=r(UAe," \u2014 "),AN=n(UAe,"A",{href:!0});var Irt=s(AN);Sbo=r(Irt,"GPTNeoModel"),Irt.forEach(t),Rbo=r(UAe," (GPT Neo model)"),UAe.forEach(t),Pbo=i($),Wp=n($,"LI",{});var JAe=s(Wp);yle=n(JAe,"STRONG",{});var Nrt=s(yle);Bbo=r(Nrt,"gpt_neox"),Nrt.forEach(t),Ibo=r(JAe," \u2014 "),yN=n(JAe,"A",{href:!0});var qrt=s(yN);Nbo=r(qrt,"GPTNeoXModel"),qrt.forEach(t),qbo=r(JAe," (GPT NeoX model)"),JAe.forEach(t),jbo=i($),Qp=n($,"LI",{});var YAe=s(Qp);Lle=n(YAe,"STRONG",{});var jrt=s(Lle);Dbo=r(jrt,"gptj"),jrt.forEach(t),Gbo=r(YAe," \u2014 "),LN=n(YAe,"A",{href:!0});var Drt=s(LN);Obo=r(Drt,"GPTJModel"),Drt.forEach(t),Vbo=r(YAe," (GPT-J model)"),YAe.forEach(t),Xbo=i($),Hp=n($,"LI",{});var KAe=s(Hp);xle=n(KAe,"STRONG",{});var Grt=s(xle);zbo=r(Grt,"hubert"),Grt.forEach(t),Wbo=r(KAe," \u2014 "),xN=n(KAe,"A",{href:!0});var Ort=s(xN);Qbo=r(Ort,"HubertModel"),Ort.forEach(t),Hbo=r(KAe," (Hubert model)"),KAe.forEach(t),Ubo=i($),Up=n($,"LI",{});var ZAe=s(Up);$le=n(ZAe,"STRONG",{});var Vrt=s($le);Jbo=r(Vrt,"ibert"),Vrt.forEach(t),Ybo=r(ZAe," \u2014 "),$N=n(ZAe,"A",{href:!0});var Xrt=s($N);Kbo=r(Xrt,"IBertModel"),Xrt.forEach(t),Zbo=r(ZAe," (I-BERT model)"),ZAe.forEach(t),e2o=i($),Jp=n($,"LI",{});var eye=s(Jp);kle=n(eye,"STRONG",{});var zrt=s(kle);o2o=r(zrt,"imagegpt"),zrt.forEach(t),r2o=r(eye," \u2014 "),kN=n(eye,"A",{href:!0});var Wrt=s(kN);t2o=r(Wrt,"ImageGPTModel"),Wrt.forEach(t),a2o=r(eye," (ImageGPT model)"),eye.forEach(t),n2o=i($),Yp=n($,"LI",{});var oye=s(Yp);Sle=n(oye,"STRONG",{});var Qrt=s(Sle);s2o=r(Qrt,"layoutlm"),Qrt.forEach(t),l2o=r(oye," \u2014 "),SN=n(oye,"A",{href:!0});var Hrt=s(SN);i2o=r(Hrt,"LayoutLMModel"),Hrt.forEach(t),d2o=r(oye," (LayoutLM model)"),oye.forEach(t),c2o=i($),Kp=n($,"LI",{});var rye=s(Kp);Rle=n(rye,"STRONG",{});var Urt=s(Rle);f2o=r(Urt,"layoutlmv2"),Urt.forEach(t),m2o=r(rye," \u2014 "),RN=n(rye,"A",{href:!0});var Jrt=s(RN);g2o=r(Jrt,"LayoutLMv2Model"),Jrt.forEach(t),h2o=r(rye," (LayoutLMv2 model)"),rye.forEach(t),p2o=i($),Zp=n($,"LI",{});var tye=s(Zp);Ple=n(tye,"STRONG",{});var Yrt=s(Ple);_2o=r(Yrt,"layoutlmv3"),Yrt.forEach(t),u2o=r(tye," \u2014 "),PN=n(tye,"A",{href:!0});var Krt=s(PN);b2o=r(Krt,"LayoutLMv3Model"),Krt.forEach(t),v2o=r(tye," (LayoutLMv3 model)"),tye.forEach(t),F2o=i($),e_=n($,"LI",{});var aye=s(e_);Ble=n(aye,"STRONG",{});var Zrt=s(Ble);T2o=r(Zrt,"led"),Zrt.forEach(t),M2o=r(aye," \u2014 "),BN=n(aye,"A",{href:!0});var ett=s(BN);E2o=r(ett,"LEDModel"),ett.forEach(t),C2o=r(aye," (LED model)"),aye.forEach(t),w2o=i($),o_=n($,"LI",{});var nye=s(o_);Ile=n(nye,"STRONG",{});var ott=s(Ile);A2o=r(ott,"longformer"),ott.forEach(t),y2o=r(nye," \u2014 "),IN=n(nye,"A",{href:!0});var rtt=s(IN);L2o=r(rtt,"LongformerModel"),rtt.forEach(t),x2o=r(nye," (Longformer model)"),nye.forEach(t),$2o=i($),r_=n($,"LI",{});var sye=s(r_);Nle=n(sye,"STRONG",{});var ttt=s(Nle);k2o=r(ttt,"luke"),ttt.forEach(t),S2o=r(sye," \u2014 "),NN=n(sye,"A",{href:!0});var att=s(NN);R2o=r(att,"LukeModel"),att.forEach(t),P2o=r(sye," (LUKE model)"),sye.forEach(t),B2o=i($),t_=n($,"LI",{});var lye=s(t_);qle=n(lye,"STRONG",{});var ntt=s(qle);I2o=r(ntt,"lxmert"),ntt.forEach(t),N2o=r(lye," \u2014 "),qN=n(lye,"A",{href:!0});var stt=s(qN);q2o=r(stt,"LxmertModel"),stt.forEach(t),j2o=r(lye," (LXMERT model)"),lye.forEach(t),D2o=i($),a_=n($,"LI",{});var iye=s(a_);jle=n(iye,"STRONG",{});var ltt=s(jle);G2o=r(ltt,"m2m_100"),ltt.forEach(t),O2o=r(iye," \u2014 "),jN=n(iye,"A",{href:!0});var itt=s(jN);V2o=r(itt,"M2M100Model"),itt.forEach(t),X2o=r(iye," (M2M100 model)"),iye.forEach(t),z2o=i($),n_=n($,"LI",{});var dye=s(n_);Dle=n(dye,"STRONG",{});var dtt=s(Dle);W2o=r(dtt,"marian"),dtt.forEach(t),Q2o=r(dye," \u2014 "),DN=n(dye,"A",{href:!0});var ctt=s(DN);H2o=r(ctt,"MarianModel"),ctt.forEach(t),U2o=r(dye," (Marian model)"),dye.forEach(t),J2o=i($),s_=n($,"LI",{});var cye=s(s_);Gle=n(cye,"STRONG",{});var ftt=s(Gle);Y2o=r(ftt,"maskformer"),ftt.forEach(t),K2o=r(cye," \u2014 "),GN=n(cye,"A",{href:!0});var mtt=s(GN);Z2o=r(mtt,"MaskFormerModel"),mtt.forEach(t),e4o=r(cye," (MaskFormer model)"),cye.forEach(t),o4o=i($),l_=n($,"LI",{});var fye=s(l_);Ole=n(fye,"STRONG",{});var gtt=s(Ole);r4o=r(gtt,"mbart"),gtt.forEach(t),t4o=r(fye," \u2014 "),ON=n(fye,"A",{href:!0});var htt=s(ON);a4o=r(htt,"MBartModel"),htt.forEach(t),n4o=r(fye," (mBART model)"),fye.forEach(t),s4o=i($),i_=n($,"LI",{});var mye=s(i_);Vle=n(mye,"STRONG",{});var ptt=s(Vle);l4o=r(ptt,"megatron-bert"),ptt.forEach(t),i4o=r(mye," \u2014 "),VN=n(mye,"A",{href:!0});var _tt=s(VN);d4o=r(_tt,"MegatronBertModel"),_tt.forEach(t),c4o=r(mye," (MegatronBert model)"),mye.forEach(t),f4o=i($),d_=n($,"LI",{});var gye=s(d_);Xle=n(gye,"STRONG",{});var utt=s(Xle);m4o=r(utt,"mobilebert"),utt.forEach(t),g4o=r(gye," \u2014 "),XN=n(gye,"A",{href:!0});var btt=s(XN);h4o=r(btt,"MobileBertModel"),btt.forEach(t),p4o=r(gye," (MobileBERT model)"),gye.forEach(t),_4o=i($),c_=n($,"LI",{});var hye=s(c_);zle=n(hye,"STRONG",{});var vtt=s(zle);u4o=r(vtt,"mobilevit"),vtt.forEach(t),b4o=r(hye," \u2014 "),zN=n(hye,"A",{href:!0});var Ftt=s(zN);v4o=r(Ftt,"MobileViTModel"),Ftt.forEach(t),F4o=r(hye," (MobileViT model)"),hye.forEach(t),T4o=i($),f_=n($,"LI",{});var pye=s(f_);Wle=n(pye,"STRONG",{});var Ttt=s(Wle);M4o=r(Ttt,"mpnet"),Ttt.forEach(t),E4o=r(pye," \u2014 "),WN=n(pye,"A",{href:!0});var Mtt=s(WN);C4o=r(Mtt,"MPNetModel"),Mtt.forEach(t),w4o=r(pye," (MPNet model)"),pye.forEach(t),A4o=i($),m_=n($,"LI",{});var _ye=s(m_);Qle=n(_ye,"STRONG",{});var Ett=s(Qle);y4o=r(Ett,"mt5"),Ett.forEach(t),L4o=r(_ye," \u2014 "),QN=n(_ye,"A",{href:!0});var Ctt=s(QN);x4o=r(Ctt,"MT5Model"),Ctt.forEach(t),$4o=r(_ye," (mT5 model)"),_ye.forEach(t),k4o=i($),g_=n($,"LI",{});var uye=s(g_);Hle=n(uye,"STRONG",{});var wtt=s(Hle);S4o=r(wtt,"nystromformer"),wtt.forEach(t),R4o=r(uye," \u2014 "),HN=n(uye,"A",{href:!0});var Att=s(HN);P4o=r(Att,"NystromformerModel"),Att.forEach(t),B4o=r(uye," (Nystromformer model)"),uye.forEach(t),I4o=i($),h_=n($,"LI",{});var bye=s(h_);Ule=n(bye,"STRONG",{});var ytt=s(Ule);N4o=r(ytt,"openai-gpt"),ytt.forEach(t),q4o=r(bye," \u2014 "),UN=n(bye,"A",{href:!0});var Ltt=s(UN);j4o=r(Ltt,"OpenAIGPTModel"),Ltt.forEach(t),D4o=r(bye," (OpenAI GPT model)"),bye.forEach(t),G4o=i($),p_=n($,"LI",{});var vye=s(p_);Jle=n(vye,"STRONG",{});var xtt=s(Jle);O4o=r(xtt,"opt"),xtt.forEach(t),V4o=r(vye," \u2014 "),JN=n(vye,"A",{href:!0});var $tt=s(JN);X4o=r($tt,"OPTModel"),$tt.forEach(t),z4o=r(vye," (OPT model)"),vye.forEach(t),W4o=i($),__=n($,"LI",{});var Fye=s(__);Yle=n(Fye,"STRONG",{});var ktt=s(Yle);Q4o=r(ktt,"pegasus"),ktt.forEach(t),H4o=r(Fye," \u2014 "),YN=n(Fye,"A",{href:!0});var Stt=s(YN);U4o=r(Stt,"PegasusModel"),Stt.forEach(t),J4o=r(Fye," (Pegasus model)"),Fye.forEach(t),Y4o=i($),u_=n($,"LI",{});var Tye=s(u_);Kle=n(Tye,"STRONG",{});var Rtt=s(Kle);K4o=r(Rtt,"perceiver"),Rtt.forEach(t),Z4o=r(Tye," \u2014 "),KN=n(Tye,"A",{href:!0});var Ptt=s(KN);e5o=r(Ptt,"PerceiverModel"),Ptt.forEach(t),o5o=r(Tye," (Perceiver model)"),Tye.forEach(t),r5o=i($),b_=n($,"LI",{});var Mye=s(b_);Zle=n(Mye,"STRONG",{});var Btt=s(Zle);t5o=r(Btt,"plbart"),Btt.forEach(t),a5o=r(Mye," \u2014 "),ZN=n(Mye,"A",{href:!0});var Itt=s(ZN);n5o=r(Itt,"PLBartModel"),Itt.forEach(t),s5o=r(Mye," (PLBart model)"),Mye.forEach(t),l5o=i($),v_=n($,"LI",{});var Eye=s(v_);eie=n(Eye,"STRONG",{});var Ntt=s(eie);i5o=r(Ntt,"poolformer"),Ntt.forEach(t),d5o=r(Eye," \u2014 "),eq=n(Eye,"A",{href:!0});var qtt=s(eq);c5o=r(qtt,"PoolFormerModel"),qtt.forEach(t),f5o=r(Eye," (PoolFormer model)"),Eye.forEach(t),m5o=i($),F_=n($,"LI",{});var Cye=s(F_);oie=n(Cye,"STRONG",{});var jtt=s(oie);g5o=r(jtt,"prophetnet"),jtt.forEach(t),h5o=r(Cye," \u2014 "),oq=n(Cye,"A",{href:!0});var Dtt=s(oq);p5o=r(Dtt,"ProphetNetModel"),Dtt.forEach(t),_5o=r(Cye," (ProphetNet model)"),Cye.forEach(t),u5o=i($),T_=n($,"LI",{});var wye=s(T_);rie=n(wye,"STRONG",{});var Gtt=s(rie);b5o=r(Gtt,"qdqbert"),Gtt.forEach(t),v5o=r(wye," \u2014 "),rq=n(wye,"A",{href:!0});var Ott=s(rq);F5o=r(Ott,"QDQBertModel"),Ott.forEach(t),T5o=r(wye," (QDQBert model)"),wye.forEach(t),M5o=i($),M_=n($,"LI",{});var Aye=s(M_);tie=n(Aye,"STRONG",{});var Vtt=s(tie);E5o=r(Vtt,"reformer"),Vtt.forEach(t),C5o=r(Aye," \u2014 "),tq=n(Aye,"A",{href:!0});var Xtt=s(tq);w5o=r(Xtt,"ReformerModel"),Xtt.forEach(t),A5o=r(Aye," (Reformer model)"),Aye.forEach(t),y5o=i($),E_=n($,"LI",{});var yye=s(E_);aie=n(yye,"STRONG",{});var ztt=s(aie);L5o=r(ztt,"regnet"),ztt.forEach(t),x5o=r(yye," \u2014 "),aq=n(yye,"A",{href:!0});var Wtt=s(aq);$5o=r(Wtt,"RegNetModel"),Wtt.forEach(t),k5o=r(yye," (RegNet model)"),yye.forEach(t),S5o=i($),C_=n($,"LI",{});var Lye=s(C_);nie=n(Lye,"STRONG",{});var Qtt=s(nie);R5o=r(Qtt,"rembert"),Qtt.forEach(t),P5o=r(Lye," \u2014 "),nq=n(Lye,"A",{href:!0});var Htt=s(nq);B5o=r(Htt,"RemBertModel"),Htt.forEach(t),I5o=r(Lye," (RemBERT model)"),Lye.forEach(t),N5o=i($),w_=n($,"LI",{});var xye=s(w_);sie=n(xye,"STRONG",{});var Utt=s(sie);q5o=r(Utt,"resnet"),Utt.forEach(t),j5o=r(xye," \u2014 "),sq=n(xye,"A",{href:!0});var Jtt=s(sq);D5o=r(Jtt,"ResNetModel"),Jtt.forEach(t),G5o=r(xye," (ResNet model)"),xye.forEach(t),O5o=i($),A_=n($,"LI",{});var $ye=s(A_);lie=n($ye,"STRONG",{});var Ytt=s(lie);V5o=r(Ytt,"retribert"),Ytt.forEach(t),X5o=r($ye," \u2014 "),lq=n($ye,"A",{href:!0});var Ktt=s(lq);z5o=r(Ktt,"RetriBertModel"),Ktt.forEach(t),W5o=r($ye," (RetriBERT model)"),$ye.forEach(t),Q5o=i($),y_=n($,"LI",{});var kye=s(y_);iie=n(kye,"STRONG",{});var Ztt=s(iie);H5o=r(Ztt,"roberta"),Ztt.forEach(t),U5o=r(kye," \u2014 "),iq=n(kye,"A",{href:!0});var eat=s(iq);J5o=r(eat,"RobertaModel"),eat.forEach(t),Y5o=r(kye," (RoBERTa model)"),kye.forEach(t),K5o=i($),L_=n($,"LI",{});var Sye=s(L_);die=n(Sye,"STRONG",{});var oat=s(die);Z5o=r(oat,"roformer"),oat.forEach(t),evo=r(Sye," \u2014 "),dq=n(Sye,"A",{href:!0});var rat=s(dq);ovo=r(rat,"RoFormerModel"),rat.forEach(t),rvo=r(Sye," (RoFormer model)"),Sye.forEach(t),tvo=i($),x_=n($,"LI",{});var Rye=s(x_);cie=n(Rye,"STRONG",{});var tat=s(cie);avo=r(tat,"segformer"),tat.forEach(t),nvo=r(Rye," \u2014 "),cq=n(Rye,"A",{href:!0});var aat=s(cq);svo=r(aat,"SegformerModel"),aat.forEach(t),lvo=r(Rye," (SegFormer model)"),Rye.forEach(t),ivo=i($),$_=n($,"LI",{});var Pye=s($_);fie=n(Pye,"STRONG",{});var nat=s(fie);dvo=r(nat,"sew"),nat.forEach(t),cvo=r(Pye," \u2014 "),fq=n(Pye,"A",{href:!0});var sat=s(fq);fvo=r(sat,"SEWModel"),sat.forEach(t),mvo=r(Pye," (SEW model)"),Pye.forEach(t),gvo=i($),k_=n($,"LI",{});var Bye=s(k_);mie=n(Bye,"STRONG",{});var lat=s(mie);hvo=r(lat,"sew-d"),lat.forEach(t),pvo=r(Bye," \u2014 "),mq=n(Bye,"A",{href:!0});var iat=s(mq);_vo=r(iat,"SEWDModel"),iat.forEach(t),uvo=r(Bye," (SEW-D model)"),Bye.forEach(t),bvo=i($),S_=n($,"LI",{});var Iye=s(S_);gie=n(Iye,"STRONG",{});var dat=s(gie);vvo=r(dat,"speech_to_text"),dat.forEach(t),Fvo=r(Iye," \u2014 "),gq=n(Iye,"A",{href:!0});var cat=s(gq);Tvo=r(cat,"Speech2TextModel"),cat.forEach(t),Mvo=r(Iye," (Speech2Text model)"),Iye.forEach(t),Evo=i($),R_=n($,"LI",{});var Nye=s(R_);hie=n(Nye,"STRONG",{});var fat=s(hie);Cvo=r(fat,"splinter"),fat.forEach(t),wvo=r(Nye," \u2014 "),hq=n(Nye,"A",{href:!0});var mat=s(hq);Avo=r(mat,"SplinterModel"),mat.forEach(t),yvo=r(Nye," (Splinter model)"),Nye.forEach(t),Lvo=i($),P_=n($,"LI",{});var qye=s(P_);pie=n(qye,"STRONG",{});var gat=s(pie);xvo=r(gat,"squeezebert"),gat.forEach(t),$vo=r(qye," \u2014 "),pq=n(qye,"A",{href:!0});var hat=s(pq);kvo=r(hat,"SqueezeBertModel"),hat.forEach(t),Svo=r(qye," (SqueezeBERT model)"),qye.forEach(t),Rvo=i($),B_=n($,"LI",{});var jye=s(B_);_ie=n(jye,"STRONG",{});var pat=s(_ie);Pvo=r(pat,"swin"),pat.forEach(t),Bvo=r(jye," \u2014 "),_q=n(jye,"A",{href:!0});var _at=s(_q);Ivo=r(_at,"SwinModel"),_at.forEach(t),Nvo=r(jye," (Swin model)"),jye.forEach(t),qvo=i($),I_=n($,"LI",{});var Dye=s(I_);uie=n(Dye,"STRONG",{});var uat=s(uie);jvo=r(uat,"t5"),uat.forEach(t),Dvo=r(Dye," \u2014 "),uq=n(Dye,"A",{href:!0});var bat=s(uq);Gvo=r(bat,"T5Model"),bat.forEach(t),Ovo=r(Dye," (T5 model)"),Dye.forEach(t),Vvo=i($),N_=n($,"LI",{});var Gye=s(N_);bie=n(Gye,"STRONG",{});var vat=s(bie);Xvo=r(vat,"tapas"),vat.forEach(t),zvo=r(Gye," \u2014 "),bq=n(Gye,"A",{href:!0});var Fat=s(bq);Wvo=r(Fat,"TapasModel"),Fat.forEach(t),Qvo=r(Gye," (TAPAS model)"),Gye.forEach(t),Hvo=i($),q_=n($,"LI",{});var Oye=s(q_);vie=n(Oye,"STRONG",{});var Tat=s(vie);Uvo=r(Tat,"trajectory_transformer"),Tat.forEach(t),Jvo=r(Oye," \u2014 "),vq=n(Oye,"A",{href:!0});var Mat=s(vq);Yvo=r(Mat,"TrajectoryTransformerModel"),Mat.forEach(t),Kvo=r(Oye," (Trajectory Transformer model)"),Oye.forEach(t),Zvo=i($),j_=n($,"LI",{});var Vye=s(j_);Fie=n(Vye,"STRONG",{});var Eat=s(Fie);e3o=r(Eat,"transfo-xl"),Eat.forEach(t),o3o=r(Vye," \u2014 "),Fq=n(Vye,"A",{href:!0});var Cat=s(Fq);r3o=r(Cat,"TransfoXLModel"),Cat.forEach(t),t3o=r(Vye," (Transformer-XL model)"),Vye.forEach(t),a3o=i($),D_=n($,"LI",{});var Xye=s(D_);Tie=n(Xye,"STRONG",{});var wat=s(Tie);n3o=r(wat,"unispeech"),wat.forEach(t),s3o=r(Xye," \u2014 "),Tq=n(Xye,"A",{href:!0});var Aat=s(Tq);l3o=r(Aat,"UniSpeechModel"),Aat.forEach(t),i3o=r(Xye," (UniSpeech model)"),Xye.forEach(t),d3o=i($),G_=n($,"LI",{});var zye=s(G_);Mie=n(zye,"STRONG",{});var yat=s(Mie);c3o=r(yat,"unispeech-sat"),yat.forEach(t),f3o=r(zye," \u2014 "),Mq=n(zye,"A",{href:!0});var Lat=s(Mq);m3o=r(Lat,"UniSpeechSatModel"),Lat.forEach(t),g3o=r(zye," (UniSpeechSat model)"),zye.forEach(t),h3o=i($),O_=n($,"LI",{});var Wye=s(O_);Eie=n(Wye,"STRONG",{});var xat=s(Eie);p3o=r(xat,"van"),xat.forEach(t),_3o=r(Wye," \u2014 "),Eq=n(Wye,"A",{href:!0});var $at=s(Eq);u3o=r($at,"VanModel"),$at.forEach(t),b3o=r(Wye," (VAN model)"),Wye.forEach(t),v3o=i($),V_=n($,"LI",{});var Qye=s(V_);Cie=n(Qye,"STRONG",{});var kat=s(Cie);F3o=r(kat,"vilt"),kat.forEach(t),T3o=r(Qye," \u2014 "),Cq=n(Qye,"A",{href:!0});var Sat=s(Cq);M3o=r(Sat,"ViltModel"),Sat.forEach(t),E3o=r(Qye," (ViLT model)"),Qye.forEach(t),C3o=i($),X_=n($,"LI",{});var Hye=s(X_);wie=n(Hye,"STRONG",{});var Rat=s(wie);w3o=r(Rat,"vision-text-dual-encoder"),Rat.forEach(t),A3o=r(Hye," \u2014 "),wq=n(Hye,"A",{href:!0});var Pat=s(wq);y3o=r(Pat,"VisionTextDualEncoderModel"),Pat.forEach(t),L3o=r(Hye," (VisionTextDualEncoder model)"),Hye.forEach(t),x3o=i($),z_=n($,"LI",{});var Uye=s(z_);Aie=n(Uye,"STRONG",{});var Bat=s(Aie);$3o=r(Bat,"visual_bert"),Bat.forEach(t),k3o=r(Uye," \u2014 "),Aq=n(Uye,"A",{href:!0});var Iat=s(Aq);S3o=r(Iat,"VisualBertModel"),Iat.forEach(t),R3o=r(Uye," (VisualBert model)"),Uye.forEach(t),P3o=i($),W_=n($,"LI",{});var Jye=s(W_);yie=n(Jye,"STRONG",{});var Nat=s(yie);B3o=r(Nat,"vit"),Nat.forEach(t),I3o=r(Jye," \u2014 "),yq=n(Jye,"A",{href:!0});var qat=s(yq);N3o=r(qat,"ViTModel"),qat.forEach(t),q3o=r(Jye," (ViT model)"),Jye.forEach(t),j3o=i($),Q_=n($,"LI",{});var Yye=s(Q_);Lie=n(Yye,"STRONG",{});var jat=s(Lie);D3o=r(jat,"vit_mae"),jat.forEach(t),G3o=r(Yye," \u2014 "),Lq=n(Yye,"A",{href:!0});var Dat=s(Lq);O3o=r(Dat,"ViTMAEModel"),Dat.forEach(t),V3o=r(Yye," (ViTMAE model)"),Yye.forEach(t),X3o=i($),H_=n($,"LI",{});var Kye=s(H_);xie=n(Kye,"STRONG",{});var Gat=s(xie);z3o=r(Gat,"wav2vec2"),Gat.forEach(t),W3o=r(Kye," \u2014 "),xq=n(Kye,"A",{href:!0});var Oat=s(xq);Q3o=r(Oat,"Wav2Vec2Model"),Oat.forEach(t),H3o=r(Kye," (Wav2Vec2 model)"),Kye.forEach(t),U3o=i($),U_=n($,"LI",{});var Zye=s(U_);$ie=n(Zye,"STRONG",{});var Vat=s($ie);J3o=r(Vat,"wav2vec2-conformer"),Vat.forEach(t),Y3o=r(Zye," \u2014 "),$q=n(Zye,"A",{href:!0});var Xat=s($q);K3o=r(Xat,"Wav2Vec2ConformerModel"),Xat.forEach(t),Z3o=r(Zye," (Wav2Vec2-Conformer model)"),Zye.forEach(t),eFo=i($),J_=n($,"LI",{});var eLe=s(J_);kie=n(eLe,"STRONG",{});var zat=s(kie);oFo=r(zat,"wavlm"),zat.forEach(t),rFo=r(eLe," \u2014 "),kq=n(eLe,"A",{href:!0});var Wat=s(kq);tFo=r(Wat,"WavLMModel"),Wat.forEach(t),aFo=r(eLe," (WavLM model)"),eLe.forEach(t),nFo=i($),Y_=n($,"LI",{});var oLe=s(Y_);Sie=n(oLe,"STRONG",{});var Qat=s(Sie);sFo=r(Qat,"xglm"),Qat.forEach(t),lFo=r(oLe," \u2014 "),Sq=n(oLe,"A",{href:!0});var Hat=s(Sq);iFo=r(Hat,"XGLMModel"),Hat.forEach(t),dFo=r(oLe," (XGLM model)"),oLe.forEach(t),cFo=i($),K_=n($,"LI",{});var rLe=s(K_);Rie=n(rLe,"STRONG",{});var Uat=s(Rie);fFo=r(Uat,"xlm"),Uat.forEach(t),mFo=r(rLe," \u2014 "),Rq=n(rLe,"A",{href:!0});var Jat=s(Rq);gFo=r(Jat,"XLMModel"),Jat.forEach(t),hFo=r(rLe," (XLM model)"),rLe.forEach(t),pFo=i($),Z_=n($,"LI",{});var tLe=s(Z_);Pie=n(tLe,"STRONG",{});var Yat=s(Pie);_Fo=r(Yat,"xlm-prophetnet"),Yat.forEach(t),uFo=r(tLe," \u2014 "),Pq=n(tLe,"A",{href:!0});var Kat=s(Pq);bFo=r(Kat,"XLMProphetNetModel"),Kat.forEach(t),vFo=r(tLe," (XLMProphetNet model)"),tLe.forEach(t),FFo=i($),eu=n($,"LI",{});var aLe=s(eu);Bie=n(aLe,"STRONG",{});var Zat=s(Bie);TFo=r(Zat,"xlm-roberta"),Zat.forEach(t),MFo=r(aLe," \u2014 "),Bq=n(aLe,"A",{href:!0});var ent=s(Bq);EFo=r(ent,"XLMRobertaModel"),ent.forEach(t),CFo=r(aLe," (XLM-RoBERTa model)"),aLe.forEach(t),wFo=i($),ou=n($,"LI",{});var nLe=s(ou);Iie=n(nLe,"STRONG",{});var ont=s(Iie);AFo=r(ont,"xlm-roberta-xl"),ont.forEach(t),yFo=r(nLe," \u2014 "),Iq=n(nLe,"A",{href:!0});var rnt=s(Iq);LFo=r(rnt,"XLMRobertaXLModel"),rnt.forEach(t),xFo=r(nLe," (XLM-RoBERTa-XL model)"),nLe.forEach(t),$Fo=i($),ru=n($,"LI",{});var sLe=s(ru);Nie=n(sLe,"STRONG",{});var tnt=s(Nie);kFo=r(tnt,"xlnet"),tnt.forEach(t),SFo=r(sLe," \u2014 "),Nq=n(sLe,"A",{href:!0});var ant=s(Nq);RFo=r(ant,"XLNetModel"),ant.forEach(t),PFo=r(sLe," (XLNet model)"),sLe.forEach(t),BFo=i($),tu=n($,"LI",{});var lLe=s(tu);qie=n(lLe,"STRONG",{});var nnt=s(qie);IFo=r(nnt,"yolos"),nnt.forEach(t),NFo=r(lLe," \u2014 "),qq=n(lLe,"A",{href:!0});var snt=s(qq);qFo=r(snt,"YolosModel"),snt.forEach(t),jFo=r(lLe," (YOLOS model)"),lLe.forEach(t),DFo=i($),au=n($,"LI",{});var iLe=s(au);jie=n(iLe,"STRONG",{});var lnt=s(jie);GFo=r(lnt,"yoso"),lnt.forEach(t),OFo=r(iLe," \u2014 "),jq=n(iLe,"A",{href:!0});var int=s(jq);VFo=r(int,"YosoModel"),int.forEach(t),XFo=r(iLe," (YOSO model)"),iLe.forEach(t),$.forEach(t),zFo=i(ra),nu=n(ra,"P",{});var dLe=s(nu);WFo=r(dLe,"The model is set in evaluation mode by default using "),Die=n(dLe,"CODE",{});var dnt=s(Die);QFo=r(dnt,"model.eval()"),dnt.forEach(t),HFo=r(dLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=n(dLe,"CODE",{});var cnt=s(Gie);UFo=r(cnt,"model.train()"),cnt.forEach(t),dLe.forEach(t),JFo=i(ra),T(su.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),Zqe=i(f),xi=n(f,"H2",{class:!0});var tGe=s(xi);lu=n(tGe,"A",{id:!0,class:!0,href:!0});var fnt=s(lu);Oie=n(fnt,"SPAN",{});var mnt=s(Oie);T(hy.$$.fragment,mnt),mnt.forEach(t),fnt.forEach(t),YFo=i(tGe),Vie=n(tGe,"SPAN",{});var gnt=s(Vie);KFo=r(gnt,"AutoModelForPreTraining"),gnt.forEach(t),tGe.forEach(t),eje=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(py.$$.fragment,Os),ZFo=i(Os),$i=n(Os,"P",{});var NZ=s($i);eTo=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Dq=n(NZ,"A",{href:!0});var hnt=s(Dq);oTo=r(hnt,"from_pretrained()"),hnt.forEach(t),rTo=r(NZ," class method or the "),Gq=n(NZ,"A",{href:!0});var pnt=s(Gq);tTo=r(pnt,"from_config()"),pnt.forEach(t),aTo=r(NZ,` class
method.`),NZ.forEach(t),nTo=i(Os),_y=n(Os,"P",{});var aGe=s(_y);sTo=r(aGe,"This class cannot be instantiated directly using "),Xie=n(aGe,"CODE",{});var _nt=s(Xie);lTo=r(_nt,"__init__()"),_nt.forEach(t),iTo=r(aGe," (throws an error)."),aGe.forEach(t),dTo=i(Os),nt=n(Os,"DIV",{class:!0});var Xw=s(nt);T(uy.$$.fragment,Xw),cTo=i(Xw),zie=n(Xw,"P",{});var unt=s(zie);fTo=r(unt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),unt.forEach(t),mTo=i(Xw),ki=n(Xw,"P",{});var qZ=s(ki);gTo=r(qZ,`Note:
Loading a model from its configuration file does `),Wie=n(qZ,"STRONG",{});var bnt=s(Wie);hTo=r(bnt,"not"),bnt.forEach(t),pTo=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oq=n(qZ,"A",{href:!0});var vnt=s(Oq);_To=r(vnt,"from_pretrained()"),vnt.forEach(t),uTo=r(qZ," to load the model weights."),qZ.forEach(t),bTo=i(Xw),T(iu.$$.fragment,Xw),Xw.forEach(t),vTo=i(Os),Ye=n(Os,"DIV",{class:!0});var ta=s(Ye);T(by.$$.fragment,ta),FTo=i(ta),Qie=n(ta,"P",{});var Fnt=s(Qie);TTo=r(Fnt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Fnt.forEach(t),MTo=i(ta),$a=n(ta,"P",{});var zw=s($a);ETo=r(zw,"The model class to instantiate is selected based on the "),Hie=n(zw,"CODE",{});var Tnt=s(Hie);CTo=r(Tnt,"model_type"),Tnt.forEach(t),wTo=r(zw,` property of the config object (either
passed as an argument or loaded from `),Uie=n(zw,"CODE",{});var Mnt=s(Uie);ATo=r(Mnt,"pretrained_model_name_or_path"),Mnt.forEach(t),yTo=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=n(zw,"CODE",{});var Ent=s(Jie);LTo=r(Ent,"pretrained_model_name_or_path"),Ent.forEach(t),xTo=r(zw,":"),zw.forEach(t),$To=i(ta),G=n(ta,"UL",{});var O=s(G);du=n(O,"LI",{});var cLe=s(du);Yie=n(cLe,"STRONG",{});var Cnt=s(Yie);kTo=r(Cnt,"albert"),Cnt.forEach(t),STo=r(cLe," \u2014 "),Vq=n(cLe,"A",{href:!0});var wnt=s(Vq);RTo=r(wnt,"AlbertForPreTraining"),wnt.forEach(t),PTo=r(cLe," (ALBERT model)"),cLe.forEach(t),BTo=i(O),cu=n(O,"LI",{});var fLe=s(cu);Kie=n(fLe,"STRONG",{});var Ant=s(Kie);ITo=r(Ant,"bart"),Ant.forEach(t),NTo=r(fLe," \u2014 "),Xq=n(fLe,"A",{href:!0});var ynt=s(Xq);qTo=r(ynt,"BartForConditionalGeneration"),ynt.forEach(t),jTo=r(fLe," (BART model)"),fLe.forEach(t),DTo=i(O),fu=n(O,"LI",{});var mLe=s(fu);Zie=n(mLe,"STRONG",{});var Lnt=s(Zie);GTo=r(Lnt,"bert"),Lnt.forEach(t),OTo=r(mLe," \u2014 "),zq=n(mLe,"A",{href:!0});var xnt=s(zq);VTo=r(xnt,"BertForPreTraining"),xnt.forEach(t),XTo=r(mLe," (BERT model)"),mLe.forEach(t),zTo=i(O),mu=n(O,"LI",{});var gLe=s(mu);ede=n(gLe,"STRONG",{});var $nt=s(ede);WTo=r($nt,"big_bird"),$nt.forEach(t),QTo=r(gLe," \u2014 "),Wq=n(gLe,"A",{href:!0});var knt=s(Wq);HTo=r(knt,"BigBirdForPreTraining"),knt.forEach(t),UTo=r(gLe," (BigBird model)"),gLe.forEach(t),JTo=i(O),gu=n(O,"LI",{});var hLe=s(gu);ode=n(hLe,"STRONG",{});var Snt=s(ode);YTo=r(Snt,"camembert"),Snt.forEach(t),KTo=r(hLe," \u2014 "),Qq=n(hLe,"A",{href:!0});var Rnt=s(Qq);ZTo=r(Rnt,"CamembertForMaskedLM"),Rnt.forEach(t),e7o=r(hLe," (CamemBERT model)"),hLe.forEach(t),o7o=i(O),hu=n(O,"LI",{});var pLe=s(hu);rde=n(pLe,"STRONG",{});var Pnt=s(rde);r7o=r(Pnt,"ctrl"),Pnt.forEach(t),t7o=r(pLe," \u2014 "),Hq=n(pLe,"A",{href:!0});var Bnt=s(Hq);a7o=r(Bnt,"CTRLLMHeadModel"),Bnt.forEach(t),n7o=r(pLe," (CTRL model)"),pLe.forEach(t),s7o=i(O),pu=n(O,"LI",{});var _Le=s(pu);tde=n(_Le,"STRONG",{});var Int=s(tde);l7o=r(Int,"data2vec-text"),Int.forEach(t),i7o=r(_Le," \u2014 "),Uq=n(_Le,"A",{href:!0});var Nnt=s(Uq);d7o=r(Nnt,"Data2VecTextForMaskedLM"),Nnt.forEach(t),c7o=r(_Le," (Data2VecText model)"),_Le.forEach(t),f7o=i(O),_u=n(O,"LI",{});var uLe=s(_u);ade=n(uLe,"STRONG",{});var qnt=s(ade);m7o=r(qnt,"deberta"),qnt.forEach(t),g7o=r(uLe," \u2014 "),Jq=n(uLe,"A",{href:!0});var jnt=s(Jq);h7o=r(jnt,"DebertaForMaskedLM"),jnt.forEach(t),p7o=r(uLe," (DeBERTa model)"),uLe.forEach(t),_7o=i(O),uu=n(O,"LI",{});var bLe=s(uu);nde=n(bLe,"STRONG",{});var Dnt=s(nde);u7o=r(Dnt,"deberta-v2"),Dnt.forEach(t),b7o=r(bLe," \u2014 "),Yq=n(bLe,"A",{href:!0});var Gnt=s(Yq);v7o=r(Gnt,"DebertaV2ForMaskedLM"),Gnt.forEach(t),F7o=r(bLe," (DeBERTa-v2 model)"),bLe.forEach(t),T7o=i(O),bu=n(O,"LI",{});var vLe=s(bu);sde=n(vLe,"STRONG",{});var Ont=s(sde);M7o=r(Ont,"distilbert"),Ont.forEach(t),E7o=r(vLe," \u2014 "),Kq=n(vLe,"A",{href:!0});var Vnt=s(Kq);C7o=r(Vnt,"DistilBertForMaskedLM"),Vnt.forEach(t),w7o=r(vLe," (DistilBERT model)"),vLe.forEach(t),A7o=i(O),vu=n(O,"LI",{});var FLe=s(vu);lde=n(FLe,"STRONG",{});var Xnt=s(lde);y7o=r(Xnt,"electra"),Xnt.forEach(t),L7o=r(FLe," \u2014 "),Zq=n(FLe,"A",{href:!0});var znt=s(Zq);x7o=r(znt,"ElectraForPreTraining"),znt.forEach(t),$7o=r(FLe," (ELECTRA model)"),FLe.forEach(t),k7o=i(O),Fu=n(O,"LI",{});var TLe=s(Fu);ide=n(TLe,"STRONG",{});var Wnt=s(ide);S7o=r(Wnt,"flaubert"),Wnt.forEach(t),R7o=r(TLe," \u2014 "),ej=n(TLe,"A",{href:!0});var Qnt=s(ej);P7o=r(Qnt,"FlaubertWithLMHeadModel"),Qnt.forEach(t),B7o=r(TLe," (FlauBERT model)"),TLe.forEach(t),I7o=i(O),Tu=n(O,"LI",{});var MLe=s(Tu);dde=n(MLe,"STRONG",{});var Hnt=s(dde);N7o=r(Hnt,"flava"),Hnt.forEach(t),q7o=r(MLe," \u2014 "),oj=n(MLe,"A",{href:!0});var Unt=s(oj);j7o=r(Unt,"FlavaForPreTraining"),Unt.forEach(t),D7o=r(MLe," (Flava model)"),MLe.forEach(t),G7o=i(O),Mu=n(O,"LI",{});var ELe=s(Mu);cde=n(ELe,"STRONG",{});var Jnt=s(cde);O7o=r(Jnt,"fnet"),Jnt.forEach(t),V7o=r(ELe," \u2014 "),rj=n(ELe,"A",{href:!0});var Ynt=s(rj);X7o=r(Ynt,"FNetForPreTraining"),Ynt.forEach(t),z7o=r(ELe," (FNet model)"),ELe.forEach(t),W7o=i(O),Eu=n(O,"LI",{});var CLe=s(Eu);fde=n(CLe,"STRONG",{});var Knt=s(fde);Q7o=r(Knt,"fsmt"),Knt.forEach(t),H7o=r(CLe," \u2014 "),tj=n(CLe,"A",{href:!0});var Znt=s(tj);U7o=r(Znt,"FSMTForConditionalGeneration"),Znt.forEach(t),J7o=r(CLe," (FairSeq Machine-Translation model)"),CLe.forEach(t),Y7o=i(O),Cu=n(O,"LI",{});var wLe=s(Cu);mde=n(wLe,"STRONG",{});var est=s(mde);K7o=r(est,"funnel"),est.forEach(t),Z7o=r(wLe," \u2014 "),aj=n(wLe,"A",{href:!0});var ost=s(aj);eMo=r(ost,"FunnelForPreTraining"),ost.forEach(t),oMo=r(wLe," (Funnel Transformer model)"),wLe.forEach(t),rMo=i(O),wu=n(O,"LI",{});var ALe=s(wu);gde=n(ALe,"STRONG",{});var rst=s(gde);tMo=r(rst,"gpt2"),rst.forEach(t),aMo=r(ALe," \u2014 "),nj=n(ALe,"A",{href:!0});var tst=s(nj);nMo=r(tst,"GPT2LMHeadModel"),tst.forEach(t),sMo=r(ALe," (OpenAI GPT-2 model)"),ALe.forEach(t),lMo=i(O),Au=n(O,"LI",{});var yLe=s(Au);hde=n(yLe,"STRONG",{});var ast=s(hde);iMo=r(ast,"ibert"),ast.forEach(t),dMo=r(yLe," \u2014 "),sj=n(yLe,"A",{href:!0});var nst=s(sj);cMo=r(nst,"IBertForMaskedLM"),nst.forEach(t),fMo=r(yLe," (I-BERT model)"),yLe.forEach(t),mMo=i(O),yu=n(O,"LI",{});var LLe=s(yu);pde=n(LLe,"STRONG",{});var sst=s(pde);gMo=r(sst,"layoutlm"),sst.forEach(t),hMo=r(LLe," \u2014 "),lj=n(LLe,"A",{href:!0});var lst=s(lj);pMo=r(lst,"LayoutLMForMaskedLM"),lst.forEach(t),_Mo=r(LLe," (LayoutLM model)"),LLe.forEach(t),uMo=i(O),Lu=n(O,"LI",{});var xLe=s(Lu);_de=n(xLe,"STRONG",{});var ist=s(_de);bMo=r(ist,"longformer"),ist.forEach(t),vMo=r(xLe," \u2014 "),ij=n(xLe,"A",{href:!0});var dst=s(ij);FMo=r(dst,"LongformerForMaskedLM"),dst.forEach(t),TMo=r(xLe," (Longformer model)"),xLe.forEach(t),MMo=i(O),xu=n(O,"LI",{});var $Le=s(xu);ude=n($Le,"STRONG",{});var cst=s(ude);EMo=r(cst,"lxmert"),cst.forEach(t),CMo=r($Le," \u2014 "),dj=n($Le,"A",{href:!0});var fst=s(dj);wMo=r(fst,"LxmertForPreTraining"),fst.forEach(t),AMo=r($Le," (LXMERT model)"),$Le.forEach(t),yMo=i(O),$u=n(O,"LI",{});var kLe=s($u);bde=n(kLe,"STRONG",{});var mst=s(bde);LMo=r(mst,"megatron-bert"),mst.forEach(t),xMo=r(kLe," \u2014 "),cj=n(kLe,"A",{href:!0});var gst=s(cj);$Mo=r(gst,"MegatronBertForPreTraining"),gst.forEach(t),kMo=r(kLe," (MegatronBert model)"),kLe.forEach(t),SMo=i(O),ku=n(O,"LI",{});var SLe=s(ku);vde=n(SLe,"STRONG",{});var hst=s(vde);RMo=r(hst,"mobilebert"),hst.forEach(t),PMo=r(SLe," \u2014 "),fj=n(SLe,"A",{href:!0});var pst=s(fj);BMo=r(pst,"MobileBertForPreTraining"),pst.forEach(t),IMo=r(SLe," (MobileBERT model)"),SLe.forEach(t),NMo=i(O),Su=n(O,"LI",{});var RLe=s(Su);Fde=n(RLe,"STRONG",{});var _st=s(Fde);qMo=r(_st,"mpnet"),_st.forEach(t),jMo=r(RLe," \u2014 "),mj=n(RLe,"A",{href:!0});var ust=s(mj);DMo=r(ust,"MPNetForMaskedLM"),ust.forEach(t),GMo=r(RLe," (MPNet model)"),RLe.forEach(t),OMo=i(O),Ru=n(O,"LI",{});var PLe=s(Ru);Tde=n(PLe,"STRONG",{});var bst=s(Tde);VMo=r(bst,"openai-gpt"),bst.forEach(t),XMo=r(PLe," \u2014 "),gj=n(PLe,"A",{href:!0});var vst=s(gj);zMo=r(vst,"OpenAIGPTLMHeadModel"),vst.forEach(t),WMo=r(PLe," (OpenAI GPT model)"),PLe.forEach(t),QMo=i(O),Pu=n(O,"LI",{});var BLe=s(Pu);Mde=n(BLe,"STRONG",{});var Fst=s(Mde);HMo=r(Fst,"retribert"),Fst.forEach(t),UMo=r(BLe," \u2014 "),hj=n(BLe,"A",{href:!0});var Tst=s(hj);JMo=r(Tst,"RetriBertModel"),Tst.forEach(t),YMo=r(BLe," (RetriBERT model)"),BLe.forEach(t),KMo=i(O),Bu=n(O,"LI",{});var ILe=s(Bu);Ede=n(ILe,"STRONG",{});var Mst=s(Ede);ZMo=r(Mst,"roberta"),Mst.forEach(t),eEo=r(ILe," \u2014 "),pj=n(ILe,"A",{href:!0});var Est=s(pj);oEo=r(Est,"RobertaForMaskedLM"),Est.forEach(t),rEo=r(ILe," (RoBERTa model)"),ILe.forEach(t),tEo=i(O),Iu=n(O,"LI",{});var NLe=s(Iu);Cde=n(NLe,"STRONG",{});var Cst=s(Cde);aEo=r(Cst,"splinter"),Cst.forEach(t),nEo=r(NLe," \u2014 "),_j=n(NLe,"A",{href:!0});var wst=s(_j);sEo=r(wst,"SplinterForPreTraining"),wst.forEach(t),lEo=r(NLe," (Splinter model)"),NLe.forEach(t),iEo=i(O),Nu=n(O,"LI",{});var qLe=s(Nu);wde=n(qLe,"STRONG",{});var Ast=s(wde);dEo=r(Ast,"squeezebert"),Ast.forEach(t),cEo=r(qLe," \u2014 "),uj=n(qLe,"A",{href:!0});var yst=s(uj);fEo=r(yst,"SqueezeBertForMaskedLM"),yst.forEach(t),mEo=r(qLe," (SqueezeBERT model)"),qLe.forEach(t),gEo=i(O),qu=n(O,"LI",{});var jLe=s(qu);Ade=n(jLe,"STRONG",{});var Lst=s(Ade);hEo=r(Lst,"t5"),Lst.forEach(t),pEo=r(jLe," \u2014 "),bj=n(jLe,"A",{href:!0});var xst=s(bj);_Eo=r(xst,"T5ForConditionalGeneration"),xst.forEach(t),uEo=r(jLe," (T5 model)"),jLe.forEach(t),bEo=i(O),ju=n(O,"LI",{});var DLe=s(ju);yde=n(DLe,"STRONG",{});var $st=s(yde);vEo=r($st,"tapas"),$st.forEach(t),FEo=r(DLe," \u2014 "),vj=n(DLe,"A",{href:!0});var kst=s(vj);TEo=r(kst,"TapasForMaskedLM"),kst.forEach(t),MEo=r(DLe," (TAPAS model)"),DLe.forEach(t),EEo=i(O),Du=n(O,"LI",{});var GLe=s(Du);Lde=n(GLe,"STRONG",{});var Sst=s(Lde);CEo=r(Sst,"transfo-xl"),Sst.forEach(t),wEo=r(GLe," \u2014 "),Fj=n(GLe,"A",{href:!0});var Rst=s(Fj);AEo=r(Rst,"TransfoXLLMHeadModel"),Rst.forEach(t),yEo=r(GLe," (Transformer-XL model)"),GLe.forEach(t),LEo=i(O),Gu=n(O,"LI",{});var OLe=s(Gu);xde=n(OLe,"STRONG",{});var Pst=s(xde);xEo=r(Pst,"unispeech"),Pst.forEach(t),$Eo=r(OLe," \u2014 "),Tj=n(OLe,"A",{href:!0});var Bst=s(Tj);kEo=r(Bst,"UniSpeechForPreTraining"),Bst.forEach(t),SEo=r(OLe," (UniSpeech model)"),OLe.forEach(t),REo=i(O),Ou=n(O,"LI",{});var VLe=s(Ou);$de=n(VLe,"STRONG",{});var Ist=s($de);PEo=r(Ist,"unispeech-sat"),Ist.forEach(t),BEo=r(VLe," \u2014 "),Mj=n(VLe,"A",{href:!0});var Nst=s(Mj);IEo=r(Nst,"UniSpeechSatForPreTraining"),Nst.forEach(t),NEo=r(VLe," (UniSpeechSat model)"),VLe.forEach(t),qEo=i(O),Vu=n(O,"LI",{});var XLe=s(Vu);kde=n(XLe,"STRONG",{});var qst=s(kde);jEo=r(qst,"visual_bert"),qst.forEach(t),DEo=r(XLe," \u2014 "),Ej=n(XLe,"A",{href:!0});var jst=s(Ej);GEo=r(jst,"VisualBertForPreTraining"),jst.forEach(t),OEo=r(XLe," (VisualBert model)"),XLe.forEach(t),VEo=i(O),Xu=n(O,"LI",{});var zLe=s(Xu);Sde=n(zLe,"STRONG",{});var Dst=s(Sde);XEo=r(Dst,"vit_mae"),Dst.forEach(t),zEo=r(zLe," \u2014 "),Cj=n(zLe,"A",{href:!0});var Gst=s(Cj);WEo=r(Gst,"ViTMAEForPreTraining"),Gst.forEach(t),QEo=r(zLe," (ViTMAE model)"),zLe.forEach(t),HEo=i(O),zu=n(O,"LI",{});var WLe=s(zu);Rde=n(WLe,"STRONG",{});var Ost=s(Rde);UEo=r(Ost,"wav2vec2"),Ost.forEach(t),JEo=r(WLe," \u2014 "),wj=n(WLe,"A",{href:!0});var Vst=s(wj);YEo=r(Vst,"Wav2Vec2ForPreTraining"),Vst.forEach(t),KEo=r(WLe," (Wav2Vec2 model)"),WLe.forEach(t),ZEo=i(O),Wu=n(O,"LI",{});var QLe=s(Wu);Pde=n(QLe,"STRONG",{});var Xst=s(Pde);eCo=r(Xst,"wav2vec2-conformer"),Xst.forEach(t),oCo=r(QLe," \u2014 "),Aj=n(QLe,"A",{href:!0});var zst=s(Aj);rCo=r(zst,"Wav2Vec2ConformerForPreTraining"),zst.forEach(t),tCo=r(QLe," (Wav2Vec2-Conformer model)"),QLe.forEach(t),aCo=i(O),Qu=n(O,"LI",{});var HLe=s(Qu);Bde=n(HLe,"STRONG",{});var Wst=s(Bde);nCo=r(Wst,"xlm"),Wst.forEach(t),sCo=r(HLe," \u2014 "),yj=n(HLe,"A",{href:!0});var Qst=s(yj);lCo=r(Qst,"XLMWithLMHeadModel"),Qst.forEach(t),iCo=r(HLe," (XLM model)"),HLe.forEach(t),dCo=i(O),Hu=n(O,"LI",{});var ULe=s(Hu);Ide=n(ULe,"STRONG",{});var Hst=s(Ide);cCo=r(Hst,"xlm-roberta"),Hst.forEach(t),fCo=r(ULe," \u2014 "),Lj=n(ULe,"A",{href:!0});var Ust=s(Lj);mCo=r(Ust,"XLMRobertaForMaskedLM"),Ust.forEach(t),gCo=r(ULe," (XLM-RoBERTa model)"),ULe.forEach(t),hCo=i(O),Uu=n(O,"LI",{});var JLe=s(Uu);Nde=n(JLe,"STRONG",{});var Jst=s(Nde);pCo=r(Jst,"xlm-roberta-xl"),Jst.forEach(t),_Co=r(JLe," \u2014 "),xj=n(JLe,"A",{href:!0});var Yst=s(xj);uCo=r(Yst,"XLMRobertaXLForMaskedLM"),Yst.forEach(t),bCo=r(JLe," (XLM-RoBERTa-XL model)"),JLe.forEach(t),vCo=i(O),Ju=n(O,"LI",{});var YLe=s(Ju);qde=n(YLe,"STRONG",{});var Kst=s(qde);FCo=r(Kst,"xlnet"),Kst.forEach(t),TCo=r(YLe," \u2014 "),$j=n(YLe,"A",{href:!0});var Zst=s($j);MCo=r(Zst,"XLNetLMHeadModel"),Zst.forEach(t),ECo=r(YLe," (XLNet model)"),YLe.forEach(t),O.forEach(t),CCo=i(ta),Yu=n(ta,"P",{});var KLe=s(Yu);wCo=r(KLe,"The model is set in evaluation mode by default using "),jde=n(KLe,"CODE",{});var elt=s(jde);ACo=r(elt,"model.eval()"),elt.forEach(t),yCo=r(KLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dde=n(KLe,"CODE",{});var olt=s(Dde);LCo=r(olt,"model.train()"),olt.forEach(t),KLe.forEach(t),xCo=i(ta),T(Ku.$$.fragment,ta),ta.forEach(t),Os.forEach(t),oje=i(f),Si=n(f,"H2",{class:!0});var nGe=s(Si);Zu=n(nGe,"A",{id:!0,class:!0,href:!0});var rlt=s(Zu);Gde=n(rlt,"SPAN",{});var tlt=s(Gde);T(vy.$$.fragment,tlt),tlt.forEach(t),rlt.forEach(t),$Co=i(nGe),Ode=n(nGe,"SPAN",{});var alt=s(Ode);kCo=r(alt,"AutoModelForCausalLM"),alt.forEach(t),nGe.forEach(t),rje=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(Fy.$$.fragment,Vs),SCo=i(Vs),Ri=n(Vs,"P",{});var jZ=s(Ri);RCo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kj=n(jZ,"A",{href:!0});var nlt=s(kj);PCo=r(nlt,"from_pretrained()"),nlt.forEach(t),BCo=r(jZ," class method or the "),Sj=n(jZ,"A",{href:!0});var slt=s(Sj);ICo=r(slt,"from_config()"),slt.forEach(t),NCo=r(jZ,` class
method.`),jZ.forEach(t),qCo=i(Vs),Ty=n(Vs,"P",{});var sGe=s(Ty);jCo=r(sGe,"This class cannot be instantiated directly using "),Vde=n(sGe,"CODE",{});var llt=s(Vde);DCo=r(llt,"__init__()"),llt.forEach(t),GCo=r(sGe," (throws an error)."),sGe.forEach(t),OCo=i(Vs),st=n(Vs,"DIV",{class:!0});var Ww=s(st);T(My.$$.fragment,Ww),VCo=i(Ww),Xde=n(Ww,"P",{});var ilt=s(Xde);XCo=r(ilt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ilt.forEach(t),zCo=i(Ww),Pi=n(Ww,"P",{});var DZ=s(Pi);WCo=r(DZ,`Note:
Loading a model from its configuration file does `),zde=n(DZ,"STRONG",{});var dlt=s(zde);QCo=r(dlt,"not"),dlt.forEach(t),HCo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rj=n(DZ,"A",{href:!0});var clt=s(Rj);UCo=r(clt,"from_pretrained()"),clt.forEach(t),JCo=r(DZ," to load the model weights."),DZ.forEach(t),YCo=i(Ww),T(e1.$$.fragment,Ww),Ww.forEach(t),KCo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var aa=s(Ke);T(Ey.$$.fragment,aa),ZCo=i(aa),Wde=n(aa,"P",{});var flt=s(Wde);e0o=r(flt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),flt.forEach(t),o0o=i(aa),ka=n(aa,"P",{});var Qw=s(ka);r0o=r(Qw,"The model class to instantiate is selected based on the "),Qde=n(Qw,"CODE",{});var mlt=s(Qde);t0o=r(mlt,"model_type"),mlt.forEach(t),a0o=r(Qw,` property of the config object (either
passed as an argument or loaded from `),Hde=n(Qw,"CODE",{});var glt=s(Hde);n0o=r(glt,"pretrained_model_name_or_path"),glt.forEach(t),s0o=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ude=n(Qw,"CODE",{});var hlt=s(Ude);l0o=r(hlt,"pretrained_model_name_or_path"),hlt.forEach(t),i0o=r(Qw,":"),Qw.forEach(t),d0o=i(aa),z=n(aa,"UL",{});var Q=s(z);o1=n(Q,"LI",{});var ZLe=s(o1);Jde=n(ZLe,"STRONG",{});var plt=s(Jde);c0o=r(plt,"bart"),plt.forEach(t),f0o=r(ZLe," \u2014 "),Pj=n(ZLe,"A",{href:!0});var _lt=s(Pj);m0o=r(_lt,"BartForCausalLM"),_lt.forEach(t),g0o=r(ZLe," (BART model)"),ZLe.forEach(t),h0o=i(Q),r1=n(Q,"LI",{});var e8e=s(r1);Yde=n(e8e,"STRONG",{});var ult=s(Yde);p0o=r(ult,"bert"),ult.forEach(t),_0o=r(e8e," \u2014 "),Bj=n(e8e,"A",{href:!0});var blt=s(Bj);u0o=r(blt,"BertLMHeadModel"),blt.forEach(t),b0o=r(e8e," (BERT model)"),e8e.forEach(t),v0o=i(Q),t1=n(Q,"LI",{});var o8e=s(t1);Kde=n(o8e,"STRONG",{});var vlt=s(Kde);F0o=r(vlt,"bert-generation"),vlt.forEach(t),T0o=r(o8e," \u2014 "),Ij=n(o8e,"A",{href:!0});var Flt=s(Ij);M0o=r(Flt,"BertGenerationDecoder"),Flt.forEach(t),E0o=r(o8e," (Bert Generation model)"),o8e.forEach(t),C0o=i(Q),a1=n(Q,"LI",{});var r8e=s(a1);Zde=n(r8e,"STRONG",{});var Tlt=s(Zde);w0o=r(Tlt,"big_bird"),Tlt.forEach(t),A0o=r(r8e," \u2014 "),Nj=n(r8e,"A",{href:!0});var Mlt=s(Nj);y0o=r(Mlt,"BigBirdForCausalLM"),Mlt.forEach(t),L0o=r(r8e," (BigBird model)"),r8e.forEach(t),x0o=i(Q),n1=n(Q,"LI",{});var t8e=s(n1);ece=n(t8e,"STRONG",{});var Elt=s(ece);$0o=r(Elt,"bigbird_pegasus"),Elt.forEach(t),k0o=r(t8e," \u2014 "),qj=n(t8e,"A",{href:!0});var Clt=s(qj);S0o=r(Clt,"BigBirdPegasusForCausalLM"),Clt.forEach(t),R0o=r(t8e," (BigBirdPegasus model)"),t8e.forEach(t),P0o=i(Q),s1=n(Q,"LI",{});var a8e=s(s1);oce=n(a8e,"STRONG",{});var wlt=s(oce);B0o=r(wlt,"blenderbot"),wlt.forEach(t),I0o=r(a8e," \u2014 "),jj=n(a8e,"A",{href:!0});var Alt=s(jj);N0o=r(Alt,"BlenderbotForCausalLM"),Alt.forEach(t),q0o=r(a8e," (Blenderbot model)"),a8e.forEach(t),j0o=i(Q),l1=n(Q,"LI",{});var n8e=s(l1);rce=n(n8e,"STRONG",{});var ylt=s(rce);D0o=r(ylt,"blenderbot-small"),ylt.forEach(t),G0o=r(n8e," \u2014 "),Dj=n(n8e,"A",{href:!0});var Llt=s(Dj);O0o=r(Llt,"BlenderbotSmallForCausalLM"),Llt.forEach(t),V0o=r(n8e," (BlenderbotSmall model)"),n8e.forEach(t),X0o=i(Q),i1=n(Q,"LI",{});var s8e=s(i1);tce=n(s8e,"STRONG",{});var xlt=s(tce);z0o=r(xlt,"camembert"),xlt.forEach(t),W0o=r(s8e," \u2014 "),Gj=n(s8e,"A",{href:!0});var $lt=s(Gj);Q0o=r($lt,"CamembertForCausalLM"),$lt.forEach(t),H0o=r(s8e," (CamemBERT model)"),s8e.forEach(t),U0o=i(Q),d1=n(Q,"LI",{});var l8e=s(d1);ace=n(l8e,"STRONG",{});var klt=s(ace);J0o=r(klt,"ctrl"),klt.forEach(t),Y0o=r(l8e," \u2014 "),Oj=n(l8e,"A",{href:!0});var Slt=s(Oj);K0o=r(Slt,"CTRLLMHeadModel"),Slt.forEach(t),Z0o=r(l8e," (CTRL model)"),l8e.forEach(t),ewo=i(Q),c1=n(Q,"LI",{});var i8e=s(c1);nce=n(i8e,"STRONG",{});var Rlt=s(nce);owo=r(Rlt,"data2vec-text"),Rlt.forEach(t),rwo=r(i8e," \u2014 "),Vj=n(i8e,"A",{href:!0});var Plt=s(Vj);two=r(Plt,"Data2VecTextForCausalLM"),Plt.forEach(t),awo=r(i8e," (Data2VecText model)"),i8e.forEach(t),nwo=i(Q),f1=n(Q,"LI",{});var d8e=s(f1);sce=n(d8e,"STRONG",{});var Blt=s(sce);swo=r(Blt,"electra"),Blt.forEach(t),lwo=r(d8e," \u2014 "),Xj=n(d8e,"A",{href:!0});var Ilt=s(Xj);iwo=r(Ilt,"ElectraForCausalLM"),Ilt.forEach(t),dwo=r(d8e," (ELECTRA model)"),d8e.forEach(t),cwo=i(Q),m1=n(Q,"LI",{});var c8e=s(m1);lce=n(c8e,"STRONG",{});var Nlt=s(lce);fwo=r(Nlt,"gpt2"),Nlt.forEach(t),mwo=r(c8e," \u2014 "),zj=n(c8e,"A",{href:!0});var qlt=s(zj);gwo=r(qlt,"GPT2LMHeadModel"),qlt.forEach(t),hwo=r(c8e," (OpenAI GPT-2 model)"),c8e.forEach(t),pwo=i(Q),g1=n(Q,"LI",{});var f8e=s(g1);ice=n(f8e,"STRONG",{});var jlt=s(ice);_wo=r(jlt,"gpt_neo"),jlt.forEach(t),uwo=r(f8e," \u2014 "),Wj=n(f8e,"A",{href:!0});var Dlt=s(Wj);bwo=r(Dlt,"GPTNeoForCausalLM"),Dlt.forEach(t),vwo=r(f8e," (GPT Neo model)"),f8e.forEach(t),Fwo=i(Q),h1=n(Q,"LI",{});var m8e=s(h1);dce=n(m8e,"STRONG",{});var Glt=s(dce);Two=r(Glt,"gpt_neox"),Glt.forEach(t),Mwo=r(m8e," \u2014 "),Qj=n(m8e,"A",{href:!0});var Olt=s(Qj);Ewo=r(Olt,"GPTNeoXForCausalLM"),Olt.forEach(t),Cwo=r(m8e," (GPT NeoX model)"),m8e.forEach(t),wwo=i(Q),p1=n(Q,"LI",{});var g8e=s(p1);cce=n(g8e,"STRONG",{});var Vlt=s(cce);Awo=r(Vlt,"gptj"),Vlt.forEach(t),ywo=r(g8e," \u2014 "),Hj=n(g8e,"A",{href:!0});var Xlt=s(Hj);Lwo=r(Xlt,"GPTJForCausalLM"),Xlt.forEach(t),xwo=r(g8e," (GPT-J model)"),g8e.forEach(t),$wo=i(Q),_1=n(Q,"LI",{});var h8e=s(_1);fce=n(h8e,"STRONG",{});var zlt=s(fce);kwo=r(zlt,"marian"),zlt.forEach(t),Swo=r(h8e," \u2014 "),Uj=n(h8e,"A",{href:!0});var Wlt=s(Uj);Rwo=r(Wlt,"MarianForCausalLM"),Wlt.forEach(t),Pwo=r(h8e," (Marian model)"),h8e.forEach(t),Bwo=i(Q),u1=n(Q,"LI",{});var p8e=s(u1);mce=n(p8e,"STRONG",{});var Qlt=s(mce);Iwo=r(Qlt,"mbart"),Qlt.forEach(t),Nwo=r(p8e," \u2014 "),Jj=n(p8e,"A",{href:!0});var Hlt=s(Jj);qwo=r(Hlt,"MBartForCausalLM"),Hlt.forEach(t),jwo=r(p8e," (mBART model)"),p8e.forEach(t),Dwo=i(Q),b1=n(Q,"LI",{});var _8e=s(b1);gce=n(_8e,"STRONG",{});var Ult=s(gce);Gwo=r(Ult,"megatron-bert"),Ult.forEach(t),Owo=r(_8e," \u2014 "),Yj=n(_8e,"A",{href:!0});var Jlt=s(Yj);Vwo=r(Jlt,"MegatronBertForCausalLM"),Jlt.forEach(t),Xwo=r(_8e," (MegatronBert model)"),_8e.forEach(t),zwo=i(Q),v1=n(Q,"LI",{});var u8e=s(v1);hce=n(u8e,"STRONG",{});var Ylt=s(hce);Wwo=r(Ylt,"openai-gpt"),Ylt.forEach(t),Qwo=r(u8e," \u2014 "),Kj=n(u8e,"A",{href:!0});var Klt=s(Kj);Hwo=r(Klt,"OpenAIGPTLMHeadModel"),Klt.forEach(t),Uwo=r(u8e," (OpenAI GPT model)"),u8e.forEach(t),Jwo=i(Q),F1=n(Q,"LI",{});var b8e=s(F1);pce=n(b8e,"STRONG",{});var Zlt=s(pce);Ywo=r(Zlt,"opt"),Zlt.forEach(t),Kwo=r(b8e," \u2014 "),Zj=n(b8e,"A",{href:!0});var eit=s(Zj);Zwo=r(eit,"OPTForCausalLM"),eit.forEach(t),e6o=r(b8e," (OPT model)"),b8e.forEach(t),o6o=i(Q),T1=n(Q,"LI",{});var v8e=s(T1);_ce=n(v8e,"STRONG",{});var oit=s(_ce);r6o=r(oit,"pegasus"),oit.forEach(t),t6o=r(v8e," \u2014 "),eD=n(v8e,"A",{href:!0});var rit=s(eD);a6o=r(rit,"PegasusForCausalLM"),rit.forEach(t),n6o=r(v8e," (Pegasus model)"),v8e.forEach(t),s6o=i(Q),M1=n(Q,"LI",{});var F8e=s(M1);uce=n(F8e,"STRONG",{});var tit=s(uce);l6o=r(tit,"plbart"),tit.forEach(t),i6o=r(F8e," \u2014 "),oD=n(F8e,"A",{href:!0});var ait=s(oD);d6o=r(ait,"PLBartForCausalLM"),ait.forEach(t),c6o=r(F8e," (PLBart model)"),F8e.forEach(t),f6o=i(Q),E1=n(Q,"LI",{});var T8e=s(E1);bce=n(T8e,"STRONG",{});var nit=s(bce);m6o=r(nit,"prophetnet"),nit.forEach(t),g6o=r(T8e," \u2014 "),rD=n(T8e,"A",{href:!0});var sit=s(rD);h6o=r(sit,"ProphetNetForCausalLM"),sit.forEach(t),p6o=r(T8e," (ProphetNet model)"),T8e.forEach(t),_6o=i(Q),C1=n(Q,"LI",{});var M8e=s(C1);vce=n(M8e,"STRONG",{});var lit=s(vce);u6o=r(lit,"qdqbert"),lit.forEach(t),b6o=r(M8e," \u2014 "),tD=n(M8e,"A",{href:!0});var iit=s(tD);v6o=r(iit,"QDQBertLMHeadModel"),iit.forEach(t),F6o=r(M8e," (QDQBert model)"),M8e.forEach(t),T6o=i(Q),w1=n(Q,"LI",{});var E8e=s(w1);Fce=n(E8e,"STRONG",{});var dit=s(Fce);M6o=r(dit,"reformer"),dit.forEach(t),E6o=r(E8e," \u2014 "),aD=n(E8e,"A",{href:!0});var cit=s(aD);C6o=r(cit,"ReformerModelWithLMHead"),cit.forEach(t),w6o=r(E8e," (Reformer model)"),E8e.forEach(t),A6o=i(Q),A1=n(Q,"LI",{});var C8e=s(A1);Tce=n(C8e,"STRONG",{});var fit=s(Tce);y6o=r(fit,"rembert"),fit.forEach(t),L6o=r(C8e," \u2014 "),nD=n(C8e,"A",{href:!0});var mit=s(nD);x6o=r(mit,"RemBertForCausalLM"),mit.forEach(t),$6o=r(C8e," (RemBERT model)"),C8e.forEach(t),k6o=i(Q),y1=n(Q,"LI",{});var w8e=s(y1);Mce=n(w8e,"STRONG",{});var git=s(Mce);S6o=r(git,"roberta"),git.forEach(t),R6o=r(w8e," \u2014 "),sD=n(w8e,"A",{href:!0});var hit=s(sD);P6o=r(hit,"RobertaForCausalLM"),hit.forEach(t),B6o=r(w8e," (RoBERTa model)"),w8e.forEach(t),I6o=i(Q),L1=n(Q,"LI",{});var A8e=s(L1);Ece=n(A8e,"STRONG",{});var pit=s(Ece);N6o=r(pit,"roformer"),pit.forEach(t),q6o=r(A8e," \u2014 "),lD=n(A8e,"A",{href:!0});var _it=s(lD);j6o=r(_it,"RoFormerForCausalLM"),_it.forEach(t),D6o=r(A8e," (RoFormer model)"),A8e.forEach(t),G6o=i(Q),x1=n(Q,"LI",{});var y8e=s(x1);Cce=n(y8e,"STRONG",{});var uit=s(Cce);O6o=r(uit,"speech_to_text_2"),uit.forEach(t),V6o=r(y8e," \u2014 "),iD=n(y8e,"A",{href:!0});var bit=s(iD);X6o=r(bit,"Speech2Text2ForCausalLM"),bit.forEach(t),z6o=r(y8e," (Speech2Text2 model)"),y8e.forEach(t),W6o=i(Q),$1=n(Q,"LI",{});var L8e=s($1);wce=n(L8e,"STRONG",{});var vit=s(wce);Q6o=r(vit,"transfo-xl"),vit.forEach(t),H6o=r(L8e," \u2014 "),dD=n(L8e,"A",{href:!0});var Fit=s(dD);U6o=r(Fit,"TransfoXLLMHeadModel"),Fit.forEach(t),J6o=r(L8e," (Transformer-XL model)"),L8e.forEach(t),Y6o=i(Q),k1=n(Q,"LI",{});var x8e=s(k1);Ace=n(x8e,"STRONG",{});var Tit=s(Ace);K6o=r(Tit,"trocr"),Tit.forEach(t),Z6o=r(x8e," \u2014 "),cD=n(x8e,"A",{href:!0});var Mit=s(cD);eAo=r(Mit,"TrOCRForCausalLM"),Mit.forEach(t),oAo=r(x8e," (TrOCR model)"),x8e.forEach(t),rAo=i(Q),S1=n(Q,"LI",{});var $8e=s(S1);yce=n($8e,"STRONG",{});var Eit=s(yce);tAo=r(Eit,"xglm"),Eit.forEach(t),aAo=r($8e," \u2014 "),fD=n($8e,"A",{href:!0});var Cit=s(fD);nAo=r(Cit,"XGLMForCausalLM"),Cit.forEach(t),sAo=r($8e," (XGLM model)"),$8e.forEach(t),lAo=i(Q),R1=n(Q,"LI",{});var k8e=s(R1);Lce=n(k8e,"STRONG",{});var wit=s(Lce);iAo=r(wit,"xlm"),wit.forEach(t),dAo=r(k8e," \u2014 "),mD=n(k8e,"A",{href:!0});var Ait=s(mD);cAo=r(Ait,"XLMWithLMHeadModel"),Ait.forEach(t),fAo=r(k8e," (XLM model)"),k8e.forEach(t),mAo=i(Q),P1=n(Q,"LI",{});var S8e=s(P1);xce=n(S8e,"STRONG",{});var yit=s(xce);gAo=r(yit,"xlm-prophetnet"),yit.forEach(t),hAo=r(S8e," \u2014 "),gD=n(S8e,"A",{href:!0});var Lit=s(gD);pAo=r(Lit,"XLMProphetNetForCausalLM"),Lit.forEach(t),_Ao=r(S8e," (XLMProphetNet model)"),S8e.forEach(t),uAo=i(Q),B1=n(Q,"LI",{});var R8e=s(B1);$ce=n(R8e,"STRONG",{});var xit=s($ce);bAo=r(xit,"xlm-roberta"),xit.forEach(t),vAo=r(R8e," \u2014 "),hD=n(R8e,"A",{href:!0});var $it=s(hD);FAo=r($it,"XLMRobertaForCausalLM"),$it.forEach(t),TAo=r(R8e," (XLM-RoBERTa model)"),R8e.forEach(t),MAo=i(Q),I1=n(Q,"LI",{});var P8e=s(I1);kce=n(P8e,"STRONG",{});var kit=s(kce);EAo=r(kit,"xlm-roberta-xl"),kit.forEach(t),CAo=r(P8e," \u2014 "),pD=n(P8e,"A",{href:!0});var Sit=s(pD);wAo=r(Sit,"XLMRobertaXLForCausalLM"),Sit.forEach(t),AAo=r(P8e," (XLM-RoBERTa-XL model)"),P8e.forEach(t),yAo=i(Q),N1=n(Q,"LI",{});var B8e=s(N1);Sce=n(B8e,"STRONG",{});var Rit=s(Sce);LAo=r(Rit,"xlnet"),Rit.forEach(t),xAo=r(B8e," \u2014 "),_D=n(B8e,"A",{href:!0});var Pit=s(_D);$Ao=r(Pit,"XLNetLMHeadModel"),Pit.forEach(t),kAo=r(B8e," (XLNet model)"),B8e.forEach(t),Q.forEach(t),SAo=i(aa),q1=n(aa,"P",{});var I8e=s(q1);RAo=r(I8e,"The model is set in evaluation mode by default using "),Rce=n(I8e,"CODE",{});var Bit=s(Rce);PAo=r(Bit,"model.eval()"),Bit.forEach(t),BAo=r(I8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pce=n(I8e,"CODE",{});var Iit=s(Pce);IAo=r(Iit,"model.train()"),Iit.forEach(t),I8e.forEach(t),NAo=i(aa),T(j1.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),tje=i(f),Bi=n(f,"H2",{class:!0});var lGe=s(Bi);D1=n(lGe,"A",{id:!0,class:!0,href:!0});var Nit=s(D1);Bce=n(Nit,"SPAN",{});var qit=s(Bce);T(Cy.$$.fragment,qit),qit.forEach(t),Nit.forEach(t),qAo=i(lGe),Ice=n(lGe,"SPAN",{});var jit=s(Ice);jAo=r(jit,"AutoModelForMaskedLM"),jit.forEach(t),lGe.forEach(t),aje=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(wy.$$.fragment,Xs),DAo=i(Xs),Ii=n(Xs,"P",{});var GZ=s(Ii);GAo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uD=n(GZ,"A",{href:!0});var Dit=s(uD);OAo=r(Dit,"from_pretrained()"),Dit.forEach(t),VAo=r(GZ," class method or the "),bD=n(GZ,"A",{href:!0});var Git=s(bD);XAo=r(Git,"from_config()"),Git.forEach(t),zAo=r(GZ,` class
method.`),GZ.forEach(t),WAo=i(Xs),Ay=n(Xs,"P",{});var iGe=s(Ay);QAo=r(iGe,"This class cannot be instantiated directly using "),Nce=n(iGe,"CODE",{});var Oit=s(Nce);HAo=r(Oit,"__init__()"),Oit.forEach(t),UAo=r(iGe," (throws an error)."),iGe.forEach(t),JAo=i(Xs),lt=n(Xs,"DIV",{class:!0});var Hw=s(lt);T(yy.$$.fragment,Hw),YAo=i(Hw),qce=n(Hw,"P",{});var Vit=s(qce);KAo=r(Vit,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Vit.forEach(t),ZAo=i(Hw),Ni=n(Hw,"P",{});var OZ=s(Ni);eyo=r(OZ,`Note:
Loading a model from its configuration file does `),jce=n(OZ,"STRONG",{});var Xit=s(jce);oyo=r(Xit,"not"),Xit.forEach(t),ryo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vD=n(OZ,"A",{href:!0});var zit=s(vD);tyo=r(zit,"from_pretrained()"),zit.forEach(t),ayo=r(OZ," to load the model weights."),OZ.forEach(t),nyo=i(Hw),T(G1.$$.fragment,Hw),Hw.forEach(t),syo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var na=s(Ze);T(Ly.$$.fragment,na),lyo=i(na),Dce=n(na,"P",{});var Wit=s(Dce);iyo=r(Wit,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Wit.forEach(t),dyo=i(na),Sa=n(na,"P",{});var Uw=s(Sa);cyo=r(Uw,"The model class to instantiate is selected based on the "),Gce=n(Uw,"CODE",{});var Qit=s(Gce);fyo=r(Qit,"model_type"),Qit.forEach(t),myo=r(Uw,` property of the config object (either
passed as an argument or loaded from `),Oce=n(Uw,"CODE",{});var Hit=s(Oce);gyo=r(Hit,"pretrained_model_name_or_path"),Hit.forEach(t),hyo=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=n(Uw,"CODE",{});var Uit=s(Vce);pyo=r(Uit,"pretrained_model_name_or_path"),Uit.forEach(t),_yo=r(Uw,":"),Uw.forEach(t),uyo=i(na),W=n(na,"UL",{});var H=s(W);O1=n(H,"LI",{});var N8e=s(O1);Xce=n(N8e,"STRONG",{});var Jit=s(Xce);byo=r(Jit,"albert"),Jit.forEach(t),vyo=r(N8e," \u2014 "),FD=n(N8e,"A",{href:!0});var Yit=s(FD);Fyo=r(Yit,"AlbertForMaskedLM"),Yit.forEach(t),Tyo=r(N8e," (ALBERT model)"),N8e.forEach(t),Myo=i(H),V1=n(H,"LI",{});var q8e=s(V1);zce=n(q8e,"STRONG",{});var Kit=s(zce);Eyo=r(Kit,"bart"),Kit.forEach(t),Cyo=r(q8e," \u2014 "),TD=n(q8e,"A",{href:!0});var Zit=s(TD);wyo=r(Zit,"BartForConditionalGeneration"),Zit.forEach(t),Ayo=r(q8e," (BART model)"),q8e.forEach(t),yyo=i(H),X1=n(H,"LI",{});var j8e=s(X1);Wce=n(j8e,"STRONG",{});var edt=s(Wce);Lyo=r(edt,"bert"),edt.forEach(t),xyo=r(j8e," \u2014 "),MD=n(j8e,"A",{href:!0});var odt=s(MD);$yo=r(odt,"BertForMaskedLM"),odt.forEach(t),kyo=r(j8e," (BERT model)"),j8e.forEach(t),Syo=i(H),z1=n(H,"LI",{});var D8e=s(z1);Qce=n(D8e,"STRONG",{});var rdt=s(Qce);Ryo=r(rdt,"big_bird"),rdt.forEach(t),Pyo=r(D8e," \u2014 "),ED=n(D8e,"A",{href:!0});var tdt=s(ED);Byo=r(tdt,"BigBirdForMaskedLM"),tdt.forEach(t),Iyo=r(D8e," (BigBird model)"),D8e.forEach(t),Nyo=i(H),W1=n(H,"LI",{});var G8e=s(W1);Hce=n(G8e,"STRONG",{});var adt=s(Hce);qyo=r(adt,"camembert"),adt.forEach(t),jyo=r(G8e," \u2014 "),CD=n(G8e,"A",{href:!0});var ndt=s(CD);Dyo=r(ndt,"CamembertForMaskedLM"),ndt.forEach(t),Gyo=r(G8e," (CamemBERT model)"),G8e.forEach(t),Oyo=i(H),Q1=n(H,"LI",{});var O8e=s(Q1);Uce=n(O8e,"STRONG",{});var sdt=s(Uce);Vyo=r(sdt,"convbert"),sdt.forEach(t),Xyo=r(O8e," \u2014 "),wD=n(O8e,"A",{href:!0});var ldt=s(wD);zyo=r(ldt,"ConvBertForMaskedLM"),ldt.forEach(t),Wyo=r(O8e," (ConvBERT model)"),O8e.forEach(t),Qyo=i(H),H1=n(H,"LI",{});var V8e=s(H1);Jce=n(V8e,"STRONG",{});var idt=s(Jce);Hyo=r(idt,"data2vec-text"),idt.forEach(t),Uyo=r(V8e," \u2014 "),AD=n(V8e,"A",{href:!0});var ddt=s(AD);Jyo=r(ddt,"Data2VecTextForMaskedLM"),ddt.forEach(t),Yyo=r(V8e," (Data2VecText model)"),V8e.forEach(t),Kyo=i(H),U1=n(H,"LI",{});var X8e=s(U1);Yce=n(X8e,"STRONG",{});var cdt=s(Yce);Zyo=r(cdt,"deberta"),cdt.forEach(t),eLo=r(X8e," \u2014 "),yD=n(X8e,"A",{href:!0});var fdt=s(yD);oLo=r(fdt,"DebertaForMaskedLM"),fdt.forEach(t),rLo=r(X8e," (DeBERTa model)"),X8e.forEach(t),tLo=i(H),J1=n(H,"LI",{});var z8e=s(J1);Kce=n(z8e,"STRONG",{});var mdt=s(Kce);aLo=r(mdt,"deberta-v2"),mdt.forEach(t),nLo=r(z8e," \u2014 "),LD=n(z8e,"A",{href:!0});var gdt=s(LD);sLo=r(gdt,"DebertaV2ForMaskedLM"),gdt.forEach(t),lLo=r(z8e," (DeBERTa-v2 model)"),z8e.forEach(t),iLo=i(H),Y1=n(H,"LI",{});var W8e=s(Y1);Zce=n(W8e,"STRONG",{});var hdt=s(Zce);dLo=r(hdt,"distilbert"),hdt.forEach(t),cLo=r(W8e," \u2014 "),xD=n(W8e,"A",{href:!0});var pdt=s(xD);fLo=r(pdt,"DistilBertForMaskedLM"),pdt.forEach(t),mLo=r(W8e," (DistilBERT model)"),W8e.forEach(t),gLo=i(H),K1=n(H,"LI",{});var Q8e=s(K1);efe=n(Q8e,"STRONG",{});var _dt=s(efe);hLo=r(_dt,"electra"),_dt.forEach(t),pLo=r(Q8e," \u2014 "),$D=n(Q8e,"A",{href:!0});var udt=s($D);_Lo=r(udt,"ElectraForMaskedLM"),udt.forEach(t),uLo=r(Q8e," (ELECTRA model)"),Q8e.forEach(t),bLo=i(H),Z1=n(H,"LI",{});var H8e=s(Z1);ofe=n(H8e,"STRONG",{});var bdt=s(ofe);vLo=r(bdt,"flaubert"),bdt.forEach(t),FLo=r(H8e," \u2014 "),kD=n(H8e,"A",{href:!0});var vdt=s(kD);TLo=r(vdt,"FlaubertWithLMHeadModel"),vdt.forEach(t),MLo=r(H8e," (FlauBERT model)"),H8e.forEach(t),ELo=i(H),eb=n(H,"LI",{});var U8e=s(eb);rfe=n(U8e,"STRONG",{});var Fdt=s(rfe);CLo=r(Fdt,"fnet"),Fdt.forEach(t),wLo=r(U8e," \u2014 "),SD=n(U8e,"A",{href:!0});var Tdt=s(SD);ALo=r(Tdt,"FNetForMaskedLM"),Tdt.forEach(t),yLo=r(U8e," (FNet model)"),U8e.forEach(t),LLo=i(H),ob=n(H,"LI",{});var J8e=s(ob);tfe=n(J8e,"STRONG",{});var Mdt=s(tfe);xLo=r(Mdt,"funnel"),Mdt.forEach(t),$Lo=r(J8e," \u2014 "),RD=n(J8e,"A",{href:!0});var Edt=s(RD);kLo=r(Edt,"FunnelForMaskedLM"),Edt.forEach(t),SLo=r(J8e," (Funnel Transformer model)"),J8e.forEach(t),RLo=i(H),rb=n(H,"LI",{});var Y8e=s(rb);afe=n(Y8e,"STRONG",{});var Cdt=s(afe);PLo=r(Cdt,"ibert"),Cdt.forEach(t),BLo=r(Y8e," \u2014 "),PD=n(Y8e,"A",{href:!0});var wdt=s(PD);ILo=r(wdt,"IBertForMaskedLM"),wdt.forEach(t),NLo=r(Y8e," (I-BERT model)"),Y8e.forEach(t),qLo=i(H),tb=n(H,"LI",{});var K8e=s(tb);nfe=n(K8e,"STRONG",{});var Adt=s(nfe);jLo=r(Adt,"layoutlm"),Adt.forEach(t),DLo=r(K8e," \u2014 "),BD=n(K8e,"A",{href:!0});var ydt=s(BD);GLo=r(ydt,"LayoutLMForMaskedLM"),ydt.forEach(t),OLo=r(K8e," (LayoutLM model)"),K8e.forEach(t),VLo=i(H),ab=n(H,"LI",{});var Z8e=s(ab);sfe=n(Z8e,"STRONG",{});var Ldt=s(sfe);XLo=r(Ldt,"longformer"),Ldt.forEach(t),zLo=r(Z8e," \u2014 "),ID=n(Z8e,"A",{href:!0});var xdt=s(ID);WLo=r(xdt,"LongformerForMaskedLM"),xdt.forEach(t),QLo=r(Z8e," (Longformer model)"),Z8e.forEach(t),HLo=i(H),nb=n(H,"LI",{});var e9e=s(nb);lfe=n(e9e,"STRONG",{});var $dt=s(lfe);ULo=r($dt,"luke"),$dt.forEach(t),JLo=r(e9e," \u2014 "),ND=n(e9e,"A",{href:!0});var kdt=s(ND);YLo=r(kdt,"LukeForMaskedLM"),kdt.forEach(t),KLo=r(e9e," (LUKE model)"),e9e.forEach(t),ZLo=i(H),sb=n(H,"LI",{});var o9e=s(sb);ife=n(o9e,"STRONG",{});var Sdt=s(ife);e8o=r(Sdt,"mbart"),Sdt.forEach(t),o8o=r(o9e," \u2014 "),qD=n(o9e,"A",{href:!0});var Rdt=s(qD);r8o=r(Rdt,"MBartForConditionalGeneration"),Rdt.forEach(t),t8o=r(o9e," (mBART model)"),o9e.forEach(t),a8o=i(H),lb=n(H,"LI",{});var r9e=s(lb);dfe=n(r9e,"STRONG",{});var Pdt=s(dfe);n8o=r(Pdt,"megatron-bert"),Pdt.forEach(t),s8o=r(r9e," \u2014 "),jD=n(r9e,"A",{href:!0});var Bdt=s(jD);l8o=r(Bdt,"MegatronBertForMaskedLM"),Bdt.forEach(t),i8o=r(r9e," (MegatronBert model)"),r9e.forEach(t),d8o=i(H),ib=n(H,"LI",{});var t9e=s(ib);cfe=n(t9e,"STRONG",{});var Idt=s(cfe);c8o=r(Idt,"mobilebert"),Idt.forEach(t),f8o=r(t9e," \u2014 "),DD=n(t9e,"A",{href:!0});var Ndt=s(DD);m8o=r(Ndt,"MobileBertForMaskedLM"),Ndt.forEach(t),g8o=r(t9e," (MobileBERT model)"),t9e.forEach(t),h8o=i(H),db=n(H,"LI",{});var a9e=s(db);ffe=n(a9e,"STRONG",{});var qdt=s(ffe);p8o=r(qdt,"mpnet"),qdt.forEach(t),_8o=r(a9e," \u2014 "),GD=n(a9e,"A",{href:!0});var jdt=s(GD);u8o=r(jdt,"MPNetForMaskedLM"),jdt.forEach(t),b8o=r(a9e," (MPNet model)"),a9e.forEach(t),v8o=i(H),cb=n(H,"LI",{});var n9e=s(cb);mfe=n(n9e,"STRONG",{});var Ddt=s(mfe);F8o=r(Ddt,"nystromformer"),Ddt.forEach(t),T8o=r(n9e," \u2014 "),OD=n(n9e,"A",{href:!0});var Gdt=s(OD);M8o=r(Gdt,"NystromformerForMaskedLM"),Gdt.forEach(t),E8o=r(n9e," (Nystromformer model)"),n9e.forEach(t),C8o=i(H),fb=n(H,"LI",{});var s9e=s(fb);gfe=n(s9e,"STRONG",{});var Odt=s(gfe);w8o=r(Odt,"perceiver"),Odt.forEach(t),A8o=r(s9e," \u2014 "),VD=n(s9e,"A",{href:!0});var Vdt=s(VD);y8o=r(Vdt,"PerceiverForMaskedLM"),Vdt.forEach(t),L8o=r(s9e," (Perceiver model)"),s9e.forEach(t),x8o=i(H),mb=n(H,"LI",{});var l9e=s(mb);hfe=n(l9e,"STRONG",{});var Xdt=s(hfe);$8o=r(Xdt,"qdqbert"),Xdt.forEach(t),k8o=r(l9e," \u2014 "),XD=n(l9e,"A",{href:!0});var zdt=s(XD);S8o=r(zdt,"QDQBertForMaskedLM"),zdt.forEach(t),R8o=r(l9e," (QDQBert model)"),l9e.forEach(t),P8o=i(H),gb=n(H,"LI",{});var i9e=s(gb);pfe=n(i9e,"STRONG",{});var Wdt=s(pfe);B8o=r(Wdt,"reformer"),Wdt.forEach(t),I8o=r(i9e," \u2014 "),zD=n(i9e,"A",{href:!0});var Qdt=s(zD);N8o=r(Qdt,"ReformerForMaskedLM"),Qdt.forEach(t),q8o=r(i9e," (Reformer model)"),i9e.forEach(t),j8o=i(H),hb=n(H,"LI",{});var d9e=s(hb);_fe=n(d9e,"STRONG",{});var Hdt=s(_fe);D8o=r(Hdt,"rembert"),Hdt.forEach(t),G8o=r(d9e," \u2014 "),WD=n(d9e,"A",{href:!0});var Udt=s(WD);O8o=r(Udt,"RemBertForMaskedLM"),Udt.forEach(t),V8o=r(d9e," (RemBERT model)"),d9e.forEach(t),X8o=i(H),pb=n(H,"LI",{});var c9e=s(pb);ufe=n(c9e,"STRONG",{});var Jdt=s(ufe);z8o=r(Jdt,"roberta"),Jdt.forEach(t),W8o=r(c9e," \u2014 "),QD=n(c9e,"A",{href:!0});var Ydt=s(QD);Q8o=r(Ydt,"RobertaForMaskedLM"),Ydt.forEach(t),H8o=r(c9e," (RoBERTa model)"),c9e.forEach(t),U8o=i(H),_b=n(H,"LI",{});var f9e=s(_b);bfe=n(f9e,"STRONG",{});var Kdt=s(bfe);J8o=r(Kdt,"roformer"),Kdt.forEach(t),Y8o=r(f9e," \u2014 "),HD=n(f9e,"A",{href:!0});var Zdt=s(HD);K8o=r(Zdt,"RoFormerForMaskedLM"),Zdt.forEach(t),Z8o=r(f9e," (RoFormer model)"),f9e.forEach(t),e9o=i(H),ub=n(H,"LI",{});var m9e=s(ub);vfe=n(m9e,"STRONG",{});var ect=s(vfe);o9o=r(ect,"squeezebert"),ect.forEach(t),r9o=r(m9e," \u2014 "),UD=n(m9e,"A",{href:!0});var oct=s(UD);t9o=r(oct,"SqueezeBertForMaskedLM"),oct.forEach(t),a9o=r(m9e," (SqueezeBERT model)"),m9e.forEach(t),n9o=i(H),bb=n(H,"LI",{});var g9e=s(bb);Ffe=n(g9e,"STRONG",{});var rct=s(Ffe);s9o=r(rct,"tapas"),rct.forEach(t),l9o=r(g9e," \u2014 "),JD=n(g9e,"A",{href:!0});var tct=s(JD);i9o=r(tct,"TapasForMaskedLM"),tct.forEach(t),d9o=r(g9e," (TAPAS model)"),g9e.forEach(t),c9o=i(H),vb=n(H,"LI",{});var h9e=s(vb);Tfe=n(h9e,"STRONG",{});var act=s(Tfe);f9o=r(act,"wav2vec2"),act.forEach(t),m9o=r(h9e," \u2014 "),Mfe=n(h9e,"CODE",{});var nct=s(Mfe);g9o=r(nct,"Wav2Vec2ForMaskedLM"),nct.forEach(t),h9o=r(h9e," (Wav2Vec2 model)"),h9e.forEach(t),p9o=i(H),Fb=n(H,"LI",{});var p9e=s(Fb);Efe=n(p9e,"STRONG",{});var sct=s(Efe);_9o=r(sct,"xlm"),sct.forEach(t),u9o=r(p9e," \u2014 "),YD=n(p9e,"A",{href:!0});var lct=s(YD);b9o=r(lct,"XLMWithLMHeadModel"),lct.forEach(t),v9o=r(p9e," (XLM model)"),p9e.forEach(t),F9o=i(H),Tb=n(H,"LI",{});var _9e=s(Tb);Cfe=n(_9e,"STRONG",{});var ict=s(Cfe);T9o=r(ict,"xlm-roberta"),ict.forEach(t),M9o=r(_9e," \u2014 "),KD=n(_9e,"A",{href:!0});var dct=s(KD);E9o=r(dct,"XLMRobertaForMaskedLM"),dct.forEach(t),C9o=r(_9e," (XLM-RoBERTa model)"),_9e.forEach(t),w9o=i(H),Mb=n(H,"LI",{});var u9e=s(Mb);wfe=n(u9e,"STRONG",{});var cct=s(wfe);A9o=r(cct,"xlm-roberta-xl"),cct.forEach(t),y9o=r(u9e," \u2014 "),ZD=n(u9e,"A",{href:!0});var fct=s(ZD);L9o=r(fct,"XLMRobertaXLForMaskedLM"),fct.forEach(t),x9o=r(u9e," (XLM-RoBERTa-XL model)"),u9e.forEach(t),$9o=i(H),Eb=n(H,"LI",{});var b9e=s(Eb);Afe=n(b9e,"STRONG",{});var mct=s(Afe);k9o=r(mct,"yoso"),mct.forEach(t),S9o=r(b9e," \u2014 "),eG=n(b9e,"A",{href:!0});var gct=s(eG);R9o=r(gct,"YosoForMaskedLM"),gct.forEach(t),P9o=r(b9e," (YOSO model)"),b9e.forEach(t),H.forEach(t),B9o=i(na),Cb=n(na,"P",{});var v9e=s(Cb);I9o=r(v9e,"The model is set in evaluation mode by default using "),yfe=n(v9e,"CODE",{});var hct=s(yfe);N9o=r(hct,"model.eval()"),hct.forEach(t),q9o=r(v9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lfe=n(v9e,"CODE",{});var pct=s(Lfe);j9o=r(pct,"model.train()"),pct.forEach(t),v9e.forEach(t),D9o=i(na),T(wb.$$.fragment,na),na.forEach(t),Xs.forEach(t),nje=i(f),qi=n(f,"H2",{class:!0});var dGe=s(qi);Ab=n(dGe,"A",{id:!0,class:!0,href:!0});var _ct=s(Ab);xfe=n(_ct,"SPAN",{});var uct=s(xfe);T(xy.$$.fragment,uct),uct.forEach(t),_ct.forEach(t),G9o=i(dGe),$fe=n(dGe,"SPAN",{});var bct=s($fe);O9o=r(bct,"AutoModelForSeq2SeqLM"),bct.forEach(t),dGe.forEach(t),sje=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T($y.$$.fragment,zs),V9o=i(zs),ji=n(zs,"P",{});var VZ=s(ji);X9o=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oG=n(VZ,"A",{href:!0});var vct=s(oG);z9o=r(vct,"from_pretrained()"),vct.forEach(t),W9o=r(VZ," class method or the "),rG=n(VZ,"A",{href:!0});var Fct=s(rG);Q9o=r(Fct,"from_config()"),Fct.forEach(t),H9o=r(VZ,` class
method.`),VZ.forEach(t),U9o=i(zs),ky=n(zs,"P",{});var cGe=s(ky);J9o=r(cGe,"This class cannot be instantiated directly using "),kfe=n(cGe,"CODE",{});var Tct=s(kfe);Y9o=r(Tct,"__init__()"),Tct.forEach(t),K9o=r(cGe," (throws an error)."),cGe.forEach(t),Z9o=i(zs),it=n(zs,"DIV",{class:!0});var Jw=s(it);T(Sy.$$.fragment,Jw),exo=i(Jw),Sfe=n(Jw,"P",{});var Mct=s(Sfe);oxo=r(Mct,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Mct.forEach(t),rxo=i(Jw),Di=n(Jw,"P",{});var XZ=s(Di);txo=r(XZ,`Note:
Loading a model from its configuration file does `),Rfe=n(XZ,"STRONG",{});var Ect=s(Rfe);axo=r(Ect,"not"),Ect.forEach(t),nxo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=n(XZ,"A",{href:!0});var Cct=s(tG);sxo=r(Cct,"from_pretrained()"),Cct.forEach(t),lxo=r(XZ," to load the model weights."),XZ.forEach(t),ixo=i(Jw),T(yb.$$.fragment,Jw),Jw.forEach(t),dxo=i(zs),eo=n(zs,"DIV",{class:!0});var sa=s(eo);T(Ry.$$.fragment,sa),cxo=i(sa),Pfe=n(sa,"P",{});var wct=s(Pfe);fxo=r(wct,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),wct.forEach(t),mxo=i(sa),Ra=n(sa,"P",{});var Yw=s(Ra);gxo=r(Yw,"The model class to instantiate is selected based on the "),Bfe=n(Yw,"CODE",{});var Act=s(Bfe);hxo=r(Act,"model_type"),Act.forEach(t),pxo=r(Yw,` property of the config object (either
passed as an argument or loaded from `),Ife=n(Yw,"CODE",{});var yct=s(Ife);_xo=r(yct,"pretrained_model_name_or_path"),yct.forEach(t),uxo=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nfe=n(Yw,"CODE",{});var Lct=s(Nfe);bxo=r(Lct,"pretrained_model_name_or_path"),Lct.forEach(t),vxo=r(Yw,":"),Yw.forEach(t),Fxo=i(sa),_e=n(sa,"UL",{});var Fe=s(_e);Lb=n(Fe,"LI",{});var F9e=s(Lb);qfe=n(F9e,"STRONG",{});var xct=s(qfe);Txo=r(xct,"bart"),xct.forEach(t),Mxo=r(F9e," \u2014 "),aG=n(F9e,"A",{href:!0});var $ct=s(aG);Exo=r($ct,"BartForConditionalGeneration"),$ct.forEach(t),Cxo=r(F9e," (BART model)"),F9e.forEach(t),wxo=i(Fe),xb=n(Fe,"LI",{});var T9e=s(xb);jfe=n(T9e,"STRONG",{});var kct=s(jfe);Axo=r(kct,"bigbird_pegasus"),kct.forEach(t),yxo=r(T9e," \u2014 "),nG=n(T9e,"A",{href:!0});var Sct=s(nG);Lxo=r(Sct,"BigBirdPegasusForConditionalGeneration"),Sct.forEach(t),xxo=r(T9e," (BigBirdPegasus model)"),T9e.forEach(t),$xo=i(Fe),$b=n(Fe,"LI",{});var M9e=s($b);Dfe=n(M9e,"STRONG",{});var Rct=s(Dfe);kxo=r(Rct,"blenderbot"),Rct.forEach(t),Sxo=r(M9e," \u2014 "),sG=n(M9e,"A",{href:!0});var Pct=s(sG);Rxo=r(Pct,"BlenderbotForConditionalGeneration"),Pct.forEach(t),Pxo=r(M9e," (Blenderbot model)"),M9e.forEach(t),Bxo=i(Fe),kb=n(Fe,"LI",{});var E9e=s(kb);Gfe=n(E9e,"STRONG",{});var Bct=s(Gfe);Ixo=r(Bct,"blenderbot-small"),Bct.forEach(t),Nxo=r(E9e," \u2014 "),lG=n(E9e,"A",{href:!0});var Ict=s(lG);qxo=r(Ict,"BlenderbotSmallForConditionalGeneration"),Ict.forEach(t),jxo=r(E9e," (BlenderbotSmall model)"),E9e.forEach(t),Dxo=i(Fe),Sb=n(Fe,"LI",{});var C9e=s(Sb);Ofe=n(C9e,"STRONG",{});var Nct=s(Ofe);Gxo=r(Nct,"encoder-decoder"),Nct.forEach(t),Oxo=r(C9e," \u2014 "),iG=n(C9e,"A",{href:!0});var qct=s(iG);Vxo=r(qct,"EncoderDecoderModel"),qct.forEach(t),Xxo=r(C9e," (Encoder decoder model)"),C9e.forEach(t),zxo=i(Fe),Rb=n(Fe,"LI",{});var w9e=s(Rb);Vfe=n(w9e,"STRONG",{});var jct=s(Vfe);Wxo=r(jct,"fsmt"),jct.forEach(t),Qxo=r(w9e," \u2014 "),dG=n(w9e,"A",{href:!0});var Dct=s(dG);Hxo=r(Dct,"FSMTForConditionalGeneration"),Dct.forEach(t),Uxo=r(w9e," (FairSeq Machine-Translation model)"),w9e.forEach(t),Jxo=i(Fe),Pb=n(Fe,"LI",{});var A9e=s(Pb);Xfe=n(A9e,"STRONG",{});var Gct=s(Xfe);Yxo=r(Gct,"led"),Gct.forEach(t),Kxo=r(A9e," \u2014 "),cG=n(A9e,"A",{href:!0});var Oct=s(cG);Zxo=r(Oct,"LEDForConditionalGeneration"),Oct.forEach(t),e$o=r(A9e," (LED model)"),A9e.forEach(t),o$o=i(Fe),Bb=n(Fe,"LI",{});var y9e=s(Bb);zfe=n(y9e,"STRONG",{});var Vct=s(zfe);r$o=r(Vct,"m2m_100"),Vct.forEach(t),t$o=r(y9e," \u2014 "),fG=n(y9e,"A",{href:!0});var Xct=s(fG);a$o=r(Xct,"M2M100ForConditionalGeneration"),Xct.forEach(t),n$o=r(y9e," (M2M100 model)"),y9e.forEach(t),s$o=i(Fe),Ib=n(Fe,"LI",{});var L9e=s(Ib);Wfe=n(L9e,"STRONG",{});var zct=s(Wfe);l$o=r(zct,"marian"),zct.forEach(t),i$o=r(L9e," \u2014 "),mG=n(L9e,"A",{href:!0});var Wct=s(mG);d$o=r(Wct,"MarianMTModel"),Wct.forEach(t),c$o=r(L9e," (Marian model)"),L9e.forEach(t),f$o=i(Fe),Nb=n(Fe,"LI",{});var x9e=s(Nb);Qfe=n(x9e,"STRONG",{});var Qct=s(Qfe);m$o=r(Qct,"mbart"),Qct.forEach(t),g$o=r(x9e," \u2014 "),gG=n(x9e,"A",{href:!0});var Hct=s(gG);h$o=r(Hct,"MBartForConditionalGeneration"),Hct.forEach(t),p$o=r(x9e," (mBART model)"),x9e.forEach(t),_$o=i(Fe),qb=n(Fe,"LI",{});var $9e=s(qb);Hfe=n($9e,"STRONG",{});var Uct=s(Hfe);u$o=r(Uct,"mt5"),Uct.forEach(t),b$o=r($9e," \u2014 "),hG=n($9e,"A",{href:!0});var Jct=s(hG);v$o=r(Jct,"MT5ForConditionalGeneration"),Jct.forEach(t),F$o=r($9e," (mT5 model)"),$9e.forEach(t),T$o=i(Fe),jb=n(Fe,"LI",{});var k9e=s(jb);Ufe=n(k9e,"STRONG",{});var Yct=s(Ufe);M$o=r(Yct,"pegasus"),Yct.forEach(t),E$o=r(k9e," \u2014 "),pG=n(k9e,"A",{href:!0});var Kct=s(pG);C$o=r(Kct,"PegasusForConditionalGeneration"),Kct.forEach(t),w$o=r(k9e," (Pegasus model)"),k9e.forEach(t),A$o=i(Fe),Db=n(Fe,"LI",{});var S9e=s(Db);Jfe=n(S9e,"STRONG",{});var Zct=s(Jfe);y$o=r(Zct,"plbart"),Zct.forEach(t),L$o=r(S9e," \u2014 "),_G=n(S9e,"A",{href:!0});var eft=s(_G);x$o=r(eft,"PLBartForConditionalGeneration"),eft.forEach(t),$$o=r(S9e," (PLBart model)"),S9e.forEach(t),k$o=i(Fe),Gb=n(Fe,"LI",{});var R9e=s(Gb);Yfe=n(R9e,"STRONG",{});var oft=s(Yfe);S$o=r(oft,"prophetnet"),oft.forEach(t),R$o=r(R9e," \u2014 "),uG=n(R9e,"A",{href:!0});var rft=s(uG);P$o=r(rft,"ProphetNetForConditionalGeneration"),rft.forEach(t),B$o=r(R9e," (ProphetNet model)"),R9e.forEach(t),I$o=i(Fe),Ob=n(Fe,"LI",{});var P9e=s(Ob);Kfe=n(P9e,"STRONG",{});var tft=s(Kfe);N$o=r(tft,"t5"),tft.forEach(t),q$o=r(P9e," \u2014 "),bG=n(P9e,"A",{href:!0});var aft=s(bG);j$o=r(aft,"T5ForConditionalGeneration"),aft.forEach(t),D$o=r(P9e," (T5 model)"),P9e.forEach(t),G$o=i(Fe),Vb=n(Fe,"LI",{});var B9e=s(Vb);Zfe=n(B9e,"STRONG",{});var nft=s(Zfe);O$o=r(nft,"xlm-prophetnet"),nft.forEach(t),V$o=r(B9e," \u2014 "),vG=n(B9e,"A",{href:!0});var sft=s(vG);X$o=r(sft,"XLMProphetNetForConditionalGeneration"),sft.forEach(t),z$o=r(B9e," (XLMProphetNet model)"),B9e.forEach(t),Fe.forEach(t),W$o=i(sa),Xb=n(sa,"P",{});var I9e=s(Xb);Q$o=r(I9e,"The model is set in evaluation mode by default using "),eme=n(I9e,"CODE",{});var lft=s(eme);H$o=r(lft,"model.eval()"),lft.forEach(t),U$o=r(I9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=n(I9e,"CODE",{});var ift=s(ome);J$o=r(ift,"model.train()"),ift.forEach(t),I9e.forEach(t),Y$o=i(sa),T(zb.$$.fragment,sa),sa.forEach(t),zs.forEach(t),lje=i(f),Gi=n(f,"H2",{class:!0});var fGe=s(Gi);Wb=n(fGe,"A",{id:!0,class:!0,href:!0});var dft=s(Wb);rme=n(dft,"SPAN",{});var cft=s(rme);T(Py.$$.fragment,cft),cft.forEach(t),dft.forEach(t),K$o=i(fGe),tme=n(fGe,"SPAN",{});var fft=s(tme);Z$o=r(fft,"AutoModelForSequenceClassification"),fft.forEach(t),fGe.forEach(t),ije=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(By.$$.fragment,Ws),eko=i(Ws),Oi=n(Ws,"P",{});var zZ=s(Oi);oko=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),FG=n(zZ,"A",{href:!0});var mft=s(FG);rko=r(mft,"from_pretrained()"),mft.forEach(t),tko=r(zZ," class method or the "),TG=n(zZ,"A",{href:!0});var gft=s(TG);ako=r(gft,"from_config()"),gft.forEach(t),nko=r(zZ,` class
method.`),zZ.forEach(t),sko=i(Ws),Iy=n(Ws,"P",{});var mGe=s(Iy);lko=r(mGe,"This class cannot be instantiated directly using "),ame=n(mGe,"CODE",{});var hft=s(ame);iko=r(hft,"__init__()"),hft.forEach(t),dko=r(mGe," (throws an error)."),mGe.forEach(t),cko=i(Ws),dt=n(Ws,"DIV",{class:!0});var Kw=s(dt);T(Ny.$$.fragment,Kw),fko=i(Kw),nme=n(Kw,"P",{});var pft=s(nme);mko=r(pft,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),pft.forEach(t),gko=i(Kw),Vi=n(Kw,"P",{});var WZ=s(Vi);hko=r(WZ,`Note:
Loading a model from its configuration file does `),sme=n(WZ,"STRONG",{});var _ft=s(sme);pko=r(_ft,"not"),_ft.forEach(t),_ko=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=n(WZ,"A",{href:!0});var uft=s(MG);uko=r(uft,"from_pretrained()"),uft.forEach(t),bko=r(WZ," to load the model weights."),WZ.forEach(t),vko=i(Kw),T(Qb.$$.fragment,Kw),Kw.forEach(t),Fko=i(Ws),oo=n(Ws,"DIV",{class:!0});var la=s(oo);T(qy.$$.fragment,la),Tko=i(la),lme=n(la,"P",{});var bft=s(lme);Mko=r(bft,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),bft.forEach(t),Eko=i(la),Pa=n(la,"P",{});var Zw=s(Pa);Cko=r(Zw,"The model class to instantiate is selected based on the "),ime=n(Zw,"CODE",{});var vft=s(ime);wko=r(vft,"model_type"),vft.forEach(t),Ako=r(Zw,` property of the config object (either
passed as an argument or loaded from `),dme=n(Zw,"CODE",{});var Fft=s(dme);yko=r(Fft,"pretrained_model_name_or_path"),Fft.forEach(t),Lko=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cme=n(Zw,"CODE",{});var Tft=s(cme);xko=r(Tft,"pretrained_model_name_or_path"),Tft.forEach(t),$ko=r(Zw,":"),Zw.forEach(t),kko=i(la),N=n(la,"UL",{});var j=s(N);Hb=n(j,"LI",{});var N9e=s(Hb);fme=n(N9e,"STRONG",{});var Mft=s(fme);Sko=r(Mft,"albert"),Mft.forEach(t),Rko=r(N9e," \u2014 "),EG=n(N9e,"A",{href:!0});var Eft=s(EG);Pko=r(Eft,"AlbertForSequenceClassification"),Eft.forEach(t),Bko=r(N9e," (ALBERT model)"),N9e.forEach(t),Iko=i(j),Ub=n(j,"LI",{});var q9e=s(Ub);mme=n(q9e,"STRONG",{});var Cft=s(mme);Nko=r(Cft,"bart"),Cft.forEach(t),qko=r(q9e," \u2014 "),CG=n(q9e,"A",{href:!0});var wft=s(CG);jko=r(wft,"BartForSequenceClassification"),wft.forEach(t),Dko=r(q9e," (BART model)"),q9e.forEach(t),Gko=i(j),Jb=n(j,"LI",{});var j9e=s(Jb);gme=n(j9e,"STRONG",{});var Aft=s(gme);Oko=r(Aft,"bert"),Aft.forEach(t),Vko=r(j9e," \u2014 "),wG=n(j9e,"A",{href:!0});var yft=s(wG);Xko=r(yft,"BertForSequenceClassification"),yft.forEach(t),zko=r(j9e," (BERT model)"),j9e.forEach(t),Wko=i(j),Yb=n(j,"LI",{});var D9e=s(Yb);hme=n(D9e,"STRONG",{});var Lft=s(hme);Qko=r(Lft,"big_bird"),Lft.forEach(t),Hko=r(D9e," \u2014 "),AG=n(D9e,"A",{href:!0});var xft=s(AG);Uko=r(xft,"BigBirdForSequenceClassification"),xft.forEach(t),Jko=r(D9e," (BigBird model)"),D9e.forEach(t),Yko=i(j),Kb=n(j,"LI",{});var G9e=s(Kb);pme=n(G9e,"STRONG",{});var $ft=s(pme);Kko=r($ft,"bigbird_pegasus"),$ft.forEach(t),Zko=r(G9e," \u2014 "),yG=n(G9e,"A",{href:!0});var kft=s(yG);eSo=r(kft,"BigBirdPegasusForSequenceClassification"),kft.forEach(t),oSo=r(G9e," (BigBirdPegasus model)"),G9e.forEach(t),rSo=i(j),Zb=n(j,"LI",{});var O9e=s(Zb);_me=n(O9e,"STRONG",{});var Sft=s(_me);tSo=r(Sft,"camembert"),Sft.forEach(t),aSo=r(O9e," \u2014 "),LG=n(O9e,"A",{href:!0});var Rft=s(LG);nSo=r(Rft,"CamembertForSequenceClassification"),Rft.forEach(t),sSo=r(O9e," (CamemBERT model)"),O9e.forEach(t),lSo=i(j),e2=n(j,"LI",{});var V9e=s(e2);ume=n(V9e,"STRONG",{});var Pft=s(ume);iSo=r(Pft,"canine"),Pft.forEach(t),dSo=r(V9e," \u2014 "),xG=n(V9e,"A",{href:!0});var Bft=s(xG);cSo=r(Bft,"CanineForSequenceClassification"),Bft.forEach(t),fSo=r(V9e," (Canine model)"),V9e.forEach(t),mSo=i(j),o2=n(j,"LI",{});var X9e=s(o2);bme=n(X9e,"STRONG",{});var Ift=s(bme);gSo=r(Ift,"convbert"),Ift.forEach(t),hSo=r(X9e," \u2014 "),$G=n(X9e,"A",{href:!0});var Nft=s($G);pSo=r(Nft,"ConvBertForSequenceClassification"),Nft.forEach(t),_So=r(X9e," (ConvBERT model)"),X9e.forEach(t),uSo=i(j),r2=n(j,"LI",{});var z9e=s(r2);vme=n(z9e,"STRONG",{});var qft=s(vme);bSo=r(qft,"ctrl"),qft.forEach(t),vSo=r(z9e," \u2014 "),kG=n(z9e,"A",{href:!0});var jft=s(kG);FSo=r(jft,"CTRLForSequenceClassification"),jft.forEach(t),TSo=r(z9e," (CTRL model)"),z9e.forEach(t),MSo=i(j),t2=n(j,"LI",{});var W9e=s(t2);Fme=n(W9e,"STRONG",{});var Dft=s(Fme);ESo=r(Dft,"data2vec-text"),Dft.forEach(t),CSo=r(W9e," \u2014 "),SG=n(W9e,"A",{href:!0});var Gft=s(SG);wSo=r(Gft,"Data2VecTextForSequenceClassification"),Gft.forEach(t),ASo=r(W9e," (Data2VecText model)"),W9e.forEach(t),ySo=i(j),a2=n(j,"LI",{});var Q9e=s(a2);Tme=n(Q9e,"STRONG",{});var Oft=s(Tme);LSo=r(Oft,"deberta"),Oft.forEach(t),xSo=r(Q9e," \u2014 "),RG=n(Q9e,"A",{href:!0});var Vft=s(RG);$So=r(Vft,"DebertaForSequenceClassification"),Vft.forEach(t),kSo=r(Q9e," (DeBERTa model)"),Q9e.forEach(t),SSo=i(j),n2=n(j,"LI",{});var H9e=s(n2);Mme=n(H9e,"STRONG",{});var Xft=s(Mme);RSo=r(Xft,"deberta-v2"),Xft.forEach(t),PSo=r(H9e," \u2014 "),PG=n(H9e,"A",{href:!0});var zft=s(PG);BSo=r(zft,"DebertaV2ForSequenceClassification"),zft.forEach(t),ISo=r(H9e," (DeBERTa-v2 model)"),H9e.forEach(t),NSo=i(j),s2=n(j,"LI",{});var U9e=s(s2);Eme=n(U9e,"STRONG",{});var Wft=s(Eme);qSo=r(Wft,"distilbert"),Wft.forEach(t),jSo=r(U9e," \u2014 "),BG=n(U9e,"A",{href:!0});var Qft=s(BG);DSo=r(Qft,"DistilBertForSequenceClassification"),Qft.forEach(t),GSo=r(U9e," (DistilBERT model)"),U9e.forEach(t),OSo=i(j),l2=n(j,"LI",{});var J9e=s(l2);Cme=n(J9e,"STRONG",{});var Hft=s(Cme);VSo=r(Hft,"electra"),Hft.forEach(t),XSo=r(J9e," \u2014 "),IG=n(J9e,"A",{href:!0});var Uft=s(IG);zSo=r(Uft,"ElectraForSequenceClassification"),Uft.forEach(t),WSo=r(J9e," (ELECTRA model)"),J9e.forEach(t),QSo=i(j),i2=n(j,"LI",{});var Y9e=s(i2);wme=n(Y9e,"STRONG",{});var Jft=s(wme);HSo=r(Jft,"flaubert"),Jft.forEach(t),USo=r(Y9e," \u2014 "),NG=n(Y9e,"A",{href:!0});var Yft=s(NG);JSo=r(Yft,"FlaubertForSequenceClassification"),Yft.forEach(t),YSo=r(Y9e," (FlauBERT model)"),Y9e.forEach(t),KSo=i(j),d2=n(j,"LI",{});var K9e=s(d2);Ame=n(K9e,"STRONG",{});var Kft=s(Ame);ZSo=r(Kft,"fnet"),Kft.forEach(t),eRo=r(K9e," \u2014 "),qG=n(K9e,"A",{href:!0});var Zft=s(qG);oRo=r(Zft,"FNetForSequenceClassification"),Zft.forEach(t),rRo=r(K9e," (FNet model)"),K9e.forEach(t),tRo=i(j),c2=n(j,"LI",{});var Z9e=s(c2);yme=n(Z9e,"STRONG",{});var emt=s(yme);aRo=r(emt,"funnel"),emt.forEach(t),nRo=r(Z9e," \u2014 "),jG=n(Z9e,"A",{href:!0});var omt=s(jG);sRo=r(omt,"FunnelForSequenceClassification"),omt.forEach(t),lRo=r(Z9e," (Funnel Transformer model)"),Z9e.forEach(t),iRo=i(j),f2=n(j,"LI",{});var exe=s(f2);Lme=n(exe,"STRONG",{});var rmt=s(Lme);dRo=r(rmt,"gpt2"),rmt.forEach(t),cRo=r(exe," \u2014 "),DG=n(exe,"A",{href:!0});var tmt=s(DG);fRo=r(tmt,"GPT2ForSequenceClassification"),tmt.forEach(t),mRo=r(exe," (OpenAI GPT-2 model)"),exe.forEach(t),gRo=i(j),m2=n(j,"LI",{});var oxe=s(m2);xme=n(oxe,"STRONG",{});var amt=s(xme);hRo=r(amt,"gpt_neo"),amt.forEach(t),pRo=r(oxe," \u2014 "),GG=n(oxe,"A",{href:!0});var nmt=s(GG);_Ro=r(nmt,"GPTNeoForSequenceClassification"),nmt.forEach(t),uRo=r(oxe," (GPT Neo model)"),oxe.forEach(t),bRo=i(j),g2=n(j,"LI",{});var rxe=s(g2);$me=n(rxe,"STRONG",{});var smt=s($me);vRo=r(smt,"gptj"),smt.forEach(t),FRo=r(rxe," \u2014 "),OG=n(rxe,"A",{href:!0});var lmt=s(OG);TRo=r(lmt,"GPTJForSequenceClassification"),lmt.forEach(t),MRo=r(rxe," (GPT-J model)"),rxe.forEach(t),ERo=i(j),h2=n(j,"LI",{});var txe=s(h2);kme=n(txe,"STRONG",{});var imt=s(kme);CRo=r(imt,"ibert"),imt.forEach(t),wRo=r(txe," \u2014 "),VG=n(txe,"A",{href:!0});var dmt=s(VG);ARo=r(dmt,"IBertForSequenceClassification"),dmt.forEach(t),yRo=r(txe," (I-BERT model)"),txe.forEach(t),LRo=i(j),p2=n(j,"LI",{});var axe=s(p2);Sme=n(axe,"STRONG",{});var cmt=s(Sme);xRo=r(cmt,"layoutlm"),cmt.forEach(t),$Ro=r(axe," \u2014 "),XG=n(axe,"A",{href:!0});var fmt=s(XG);kRo=r(fmt,"LayoutLMForSequenceClassification"),fmt.forEach(t),SRo=r(axe," (LayoutLM model)"),axe.forEach(t),RRo=i(j),_2=n(j,"LI",{});var nxe=s(_2);Rme=n(nxe,"STRONG",{});var mmt=s(Rme);PRo=r(mmt,"layoutlmv2"),mmt.forEach(t),BRo=r(nxe," \u2014 "),zG=n(nxe,"A",{href:!0});var gmt=s(zG);IRo=r(gmt,"LayoutLMv2ForSequenceClassification"),gmt.forEach(t),NRo=r(nxe," (LayoutLMv2 model)"),nxe.forEach(t),qRo=i(j),u2=n(j,"LI",{});var sxe=s(u2);Pme=n(sxe,"STRONG",{});var hmt=s(Pme);jRo=r(hmt,"layoutlmv3"),hmt.forEach(t),DRo=r(sxe," \u2014 "),WG=n(sxe,"A",{href:!0});var pmt=s(WG);GRo=r(pmt,"LayoutLMv3ForSequenceClassification"),pmt.forEach(t),ORo=r(sxe," (LayoutLMv3 model)"),sxe.forEach(t),VRo=i(j),b2=n(j,"LI",{});var lxe=s(b2);Bme=n(lxe,"STRONG",{});var _mt=s(Bme);XRo=r(_mt,"led"),_mt.forEach(t),zRo=r(lxe," \u2014 "),QG=n(lxe,"A",{href:!0});var umt=s(QG);WRo=r(umt,"LEDForSequenceClassification"),umt.forEach(t),QRo=r(lxe," (LED model)"),lxe.forEach(t),HRo=i(j),v2=n(j,"LI",{});var ixe=s(v2);Ime=n(ixe,"STRONG",{});var bmt=s(Ime);URo=r(bmt,"longformer"),bmt.forEach(t),JRo=r(ixe," \u2014 "),HG=n(ixe,"A",{href:!0});var vmt=s(HG);YRo=r(vmt,"LongformerForSequenceClassification"),vmt.forEach(t),KRo=r(ixe," (Longformer model)"),ixe.forEach(t),ZRo=i(j),F2=n(j,"LI",{});var dxe=s(F2);Nme=n(dxe,"STRONG",{});var Fmt=s(Nme);ePo=r(Fmt,"mbart"),Fmt.forEach(t),oPo=r(dxe," \u2014 "),UG=n(dxe,"A",{href:!0});var Tmt=s(UG);rPo=r(Tmt,"MBartForSequenceClassification"),Tmt.forEach(t),tPo=r(dxe," (mBART model)"),dxe.forEach(t),aPo=i(j),T2=n(j,"LI",{});var cxe=s(T2);qme=n(cxe,"STRONG",{});var Mmt=s(qme);nPo=r(Mmt,"megatron-bert"),Mmt.forEach(t),sPo=r(cxe," \u2014 "),JG=n(cxe,"A",{href:!0});var Emt=s(JG);lPo=r(Emt,"MegatronBertForSequenceClassification"),Emt.forEach(t),iPo=r(cxe," (MegatronBert model)"),cxe.forEach(t),dPo=i(j),M2=n(j,"LI",{});var fxe=s(M2);jme=n(fxe,"STRONG",{});var Cmt=s(jme);cPo=r(Cmt,"mobilebert"),Cmt.forEach(t),fPo=r(fxe," \u2014 "),YG=n(fxe,"A",{href:!0});var wmt=s(YG);mPo=r(wmt,"MobileBertForSequenceClassification"),wmt.forEach(t),gPo=r(fxe," (MobileBERT model)"),fxe.forEach(t),hPo=i(j),E2=n(j,"LI",{});var mxe=s(E2);Dme=n(mxe,"STRONG",{});var Amt=s(Dme);pPo=r(Amt,"mpnet"),Amt.forEach(t),_Po=r(mxe," \u2014 "),KG=n(mxe,"A",{href:!0});var ymt=s(KG);uPo=r(ymt,"MPNetForSequenceClassification"),ymt.forEach(t),bPo=r(mxe," (MPNet model)"),mxe.forEach(t),vPo=i(j),C2=n(j,"LI",{});var gxe=s(C2);Gme=n(gxe,"STRONG",{});var Lmt=s(Gme);FPo=r(Lmt,"nystromformer"),Lmt.forEach(t),TPo=r(gxe," \u2014 "),ZG=n(gxe,"A",{href:!0});var xmt=s(ZG);MPo=r(xmt,"NystromformerForSequenceClassification"),xmt.forEach(t),EPo=r(gxe," (Nystromformer model)"),gxe.forEach(t),CPo=i(j),w2=n(j,"LI",{});var hxe=s(w2);Ome=n(hxe,"STRONG",{});var $mt=s(Ome);wPo=r($mt,"openai-gpt"),$mt.forEach(t),APo=r(hxe," \u2014 "),eO=n(hxe,"A",{href:!0});var kmt=s(eO);yPo=r(kmt,"OpenAIGPTForSequenceClassification"),kmt.forEach(t),LPo=r(hxe," (OpenAI GPT model)"),hxe.forEach(t),xPo=i(j),A2=n(j,"LI",{});var pxe=s(A2);Vme=n(pxe,"STRONG",{});var Smt=s(Vme);$Po=r(Smt,"perceiver"),Smt.forEach(t),kPo=r(pxe," \u2014 "),oO=n(pxe,"A",{href:!0});var Rmt=s(oO);SPo=r(Rmt,"PerceiverForSequenceClassification"),Rmt.forEach(t),RPo=r(pxe," (Perceiver model)"),pxe.forEach(t),PPo=i(j),y2=n(j,"LI",{});var _xe=s(y2);Xme=n(_xe,"STRONG",{});var Pmt=s(Xme);BPo=r(Pmt,"plbart"),Pmt.forEach(t),IPo=r(_xe," \u2014 "),rO=n(_xe,"A",{href:!0});var Bmt=s(rO);NPo=r(Bmt,"PLBartForSequenceClassification"),Bmt.forEach(t),qPo=r(_xe," (PLBart model)"),_xe.forEach(t),jPo=i(j),L2=n(j,"LI",{});var uxe=s(L2);zme=n(uxe,"STRONG",{});var Imt=s(zme);DPo=r(Imt,"qdqbert"),Imt.forEach(t),GPo=r(uxe," \u2014 "),tO=n(uxe,"A",{href:!0});var Nmt=s(tO);OPo=r(Nmt,"QDQBertForSequenceClassification"),Nmt.forEach(t),VPo=r(uxe," (QDQBert model)"),uxe.forEach(t),XPo=i(j),x2=n(j,"LI",{});var bxe=s(x2);Wme=n(bxe,"STRONG",{});var qmt=s(Wme);zPo=r(qmt,"reformer"),qmt.forEach(t),WPo=r(bxe," \u2014 "),aO=n(bxe,"A",{href:!0});var jmt=s(aO);QPo=r(jmt,"ReformerForSequenceClassification"),jmt.forEach(t),HPo=r(bxe," (Reformer model)"),bxe.forEach(t),UPo=i(j),$2=n(j,"LI",{});var vxe=s($2);Qme=n(vxe,"STRONG",{});var Dmt=s(Qme);JPo=r(Dmt,"rembert"),Dmt.forEach(t),YPo=r(vxe," \u2014 "),nO=n(vxe,"A",{href:!0});var Gmt=s(nO);KPo=r(Gmt,"RemBertForSequenceClassification"),Gmt.forEach(t),ZPo=r(vxe," (RemBERT model)"),vxe.forEach(t),eBo=i(j),k2=n(j,"LI",{});var Fxe=s(k2);Hme=n(Fxe,"STRONG",{});var Omt=s(Hme);oBo=r(Omt,"roberta"),Omt.forEach(t),rBo=r(Fxe," \u2014 "),sO=n(Fxe,"A",{href:!0});var Vmt=s(sO);tBo=r(Vmt,"RobertaForSequenceClassification"),Vmt.forEach(t),aBo=r(Fxe," (RoBERTa model)"),Fxe.forEach(t),nBo=i(j),S2=n(j,"LI",{});var Txe=s(S2);Ume=n(Txe,"STRONG",{});var Xmt=s(Ume);sBo=r(Xmt,"roformer"),Xmt.forEach(t),lBo=r(Txe," \u2014 "),lO=n(Txe,"A",{href:!0});var zmt=s(lO);iBo=r(zmt,"RoFormerForSequenceClassification"),zmt.forEach(t),dBo=r(Txe," (RoFormer model)"),Txe.forEach(t),cBo=i(j),R2=n(j,"LI",{});var Mxe=s(R2);Jme=n(Mxe,"STRONG",{});var Wmt=s(Jme);fBo=r(Wmt,"squeezebert"),Wmt.forEach(t),mBo=r(Mxe," \u2014 "),iO=n(Mxe,"A",{href:!0});var Qmt=s(iO);gBo=r(Qmt,"SqueezeBertForSequenceClassification"),Qmt.forEach(t),hBo=r(Mxe," (SqueezeBERT model)"),Mxe.forEach(t),pBo=i(j),P2=n(j,"LI",{});var Exe=s(P2);Yme=n(Exe,"STRONG",{});var Hmt=s(Yme);_Bo=r(Hmt,"tapas"),Hmt.forEach(t),uBo=r(Exe," \u2014 "),dO=n(Exe,"A",{href:!0});var Umt=s(dO);bBo=r(Umt,"TapasForSequenceClassification"),Umt.forEach(t),vBo=r(Exe," (TAPAS model)"),Exe.forEach(t),FBo=i(j),B2=n(j,"LI",{});var Cxe=s(B2);Kme=n(Cxe,"STRONG",{});var Jmt=s(Kme);TBo=r(Jmt,"transfo-xl"),Jmt.forEach(t),MBo=r(Cxe," \u2014 "),cO=n(Cxe,"A",{href:!0});var Ymt=s(cO);EBo=r(Ymt,"TransfoXLForSequenceClassification"),Ymt.forEach(t),CBo=r(Cxe," (Transformer-XL model)"),Cxe.forEach(t),wBo=i(j),I2=n(j,"LI",{});var wxe=s(I2);Zme=n(wxe,"STRONG",{});var Kmt=s(Zme);ABo=r(Kmt,"xlm"),Kmt.forEach(t),yBo=r(wxe," \u2014 "),fO=n(wxe,"A",{href:!0});var Zmt=s(fO);LBo=r(Zmt,"XLMForSequenceClassification"),Zmt.forEach(t),xBo=r(wxe," (XLM model)"),wxe.forEach(t),$Bo=i(j),N2=n(j,"LI",{});var Axe=s(N2);ege=n(Axe,"STRONG",{});var egt=s(ege);kBo=r(egt,"xlm-roberta"),egt.forEach(t),SBo=r(Axe," \u2014 "),mO=n(Axe,"A",{href:!0});var ogt=s(mO);RBo=r(ogt,"XLMRobertaForSequenceClassification"),ogt.forEach(t),PBo=r(Axe," (XLM-RoBERTa model)"),Axe.forEach(t),BBo=i(j),q2=n(j,"LI",{});var yxe=s(q2);oge=n(yxe,"STRONG",{});var rgt=s(oge);IBo=r(rgt,"xlm-roberta-xl"),rgt.forEach(t),NBo=r(yxe," \u2014 "),gO=n(yxe,"A",{href:!0});var tgt=s(gO);qBo=r(tgt,"XLMRobertaXLForSequenceClassification"),tgt.forEach(t),jBo=r(yxe," (XLM-RoBERTa-XL model)"),yxe.forEach(t),DBo=i(j),j2=n(j,"LI",{});var Lxe=s(j2);rge=n(Lxe,"STRONG",{});var agt=s(rge);GBo=r(agt,"xlnet"),agt.forEach(t),OBo=r(Lxe," \u2014 "),hO=n(Lxe,"A",{href:!0});var ngt=s(hO);VBo=r(ngt,"XLNetForSequenceClassification"),ngt.forEach(t),XBo=r(Lxe," (XLNet model)"),Lxe.forEach(t),zBo=i(j),D2=n(j,"LI",{});var xxe=s(D2);tge=n(xxe,"STRONG",{});var sgt=s(tge);WBo=r(sgt,"yoso"),sgt.forEach(t),QBo=r(xxe," \u2014 "),pO=n(xxe,"A",{href:!0});var lgt=s(pO);HBo=r(lgt,"YosoForSequenceClassification"),lgt.forEach(t),UBo=r(xxe," (YOSO model)"),xxe.forEach(t),j.forEach(t),JBo=i(la),G2=n(la,"P",{});var $xe=s(G2);YBo=r($xe,"The model is set in evaluation mode by default using "),age=n($xe,"CODE",{});var igt=s(age);KBo=r(igt,"model.eval()"),igt.forEach(t),ZBo=r($xe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=n($xe,"CODE",{});var dgt=s(nge);eIo=r(dgt,"model.train()"),dgt.forEach(t),$xe.forEach(t),oIo=i(la),T(O2.$$.fragment,la),la.forEach(t),Ws.forEach(t),dje=i(f),Xi=n(f,"H2",{class:!0});var gGe=s(Xi);V2=n(gGe,"A",{id:!0,class:!0,href:!0});var cgt=s(V2);sge=n(cgt,"SPAN",{});var fgt=s(sge);T(jy.$$.fragment,fgt),fgt.forEach(t),cgt.forEach(t),rIo=i(gGe),lge=n(gGe,"SPAN",{});var mgt=s(lge);tIo=r(mgt,"AutoModelForMultipleChoice"),mgt.forEach(t),gGe.forEach(t),cje=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(Dy.$$.fragment,Qs),aIo=i(Qs),zi=n(Qs,"P",{});var QZ=s(zi);nIo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_O=n(QZ,"A",{href:!0});var ggt=s(_O);sIo=r(ggt,"from_pretrained()"),ggt.forEach(t),lIo=r(QZ," class method or the "),uO=n(QZ,"A",{href:!0});var hgt=s(uO);iIo=r(hgt,"from_config()"),hgt.forEach(t),dIo=r(QZ,` class
method.`),QZ.forEach(t),cIo=i(Qs),Gy=n(Qs,"P",{});var hGe=s(Gy);fIo=r(hGe,"This class cannot be instantiated directly using "),ige=n(hGe,"CODE",{});var pgt=s(ige);mIo=r(pgt,"__init__()"),pgt.forEach(t),gIo=r(hGe," (throws an error)."),hGe.forEach(t),hIo=i(Qs),ct=n(Qs,"DIV",{class:!0});var e6=s(ct);T(Oy.$$.fragment,e6),pIo=i(e6),dge=n(e6,"P",{});var _gt=s(dge);_Io=r(_gt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_gt.forEach(t),uIo=i(e6),Wi=n(e6,"P",{});var HZ=s(Wi);bIo=r(HZ,`Note:
Loading a model from its configuration file does `),cge=n(HZ,"STRONG",{});var ugt=s(cge);vIo=r(ugt,"not"),ugt.forEach(t),FIo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=n(HZ,"A",{href:!0});var bgt=s(bO);TIo=r(bgt,"from_pretrained()"),bgt.forEach(t),MIo=r(HZ," to load the model weights."),HZ.forEach(t),EIo=i(e6),T(X2.$$.fragment,e6),e6.forEach(t),CIo=i(Qs),ro=n(Qs,"DIV",{class:!0});var ia=s(ro);T(Vy.$$.fragment,ia),wIo=i(ia),fge=n(ia,"P",{});var vgt=s(fge);AIo=r(vgt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vgt.forEach(t),yIo=i(ia),Ba=n(ia,"P",{});var o6=s(Ba);LIo=r(o6,"The model class to instantiate is selected based on the "),mge=n(o6,"CODE",{});var Fgt=s(mge);xIo=r(Fgt,"model_type"),Fgt.forEach(t),$Io=r(o6,` property of the config object (either
passed as an argument or loaded from `),gge=n(o6,"CODE",{});var Tgt=s(gge);kIo=r(Tgt,"pretrained_model_name_or_path"),Tgt.forEach(t),SIo=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=n(o6,"CODE",{});var Mgt=s(hge);RIo=r(Mgt,"pretrained_model_name_or_path"),Mgt.forEach(t),PIo=r(o6,":"),o6.forEach(t),BIo=i(ia),K=n(ia,"UL",{});var ee=s(K);z2=n(ee,"LI",{});var kxe=s(z2);pge=n(kxe,"STRONG",{});var Egt=s(pge);IIo=r(Egt,"albert"),Egt.forEach(t),NIo=r(kxe," \u2014 "),vO=n(kxe,"A",{href:!0});var Cgt=s(vO);qIo=r(Cgt,"AlbertForMultipleChoice"),Cgt.forEach(t),jIo=r(kxe," (ALBERT model)"),kxe.forEach(t),DIo=i(ee),W2=n(ee,"LI",{});var Sxe=s(W2);_ge=n(Sxe,"STRONG",{});var wgt=s(_ge);GIo=r(wgt,"bert"),wgt.forEach(t),OIo=r(Sxe," \u2014 "),FO=n(Sxe,"A",{href:!0});var Agt=s(FO);VIo=r(Agt,"BertForMultipleChoice"),Agt.forEach(t),XIo=r(Sxe," (BERT model)"),Sxe.forEach(t),zIo=i(ee),Q2=n(ee,"LI",{});var Rxe=s(Q2);uge=n(Rxe,"STRONG",{});var ygt=s(uge);WIo=r(ygt,"big_bird"),ygt.forEach(t),QIo=r(Rxe," \u2014 "),TO=n(Rxe,"A",{href:!0});var Lgt=s(TO);HIo=r(Lgt,"BigBirdForMultipleChoice"),Lgt.forEach(t),UIo=r(Rxe," (BigBird model)"),Rxe.forEach(t),JIo=i(ee),H2=n(ee,"LI",{});var Pxe=s(H2);bge=n(Pxe,"STRONG",{});var xgt=s(bge);YIo=r(xgt,"camembert"),xgt.forEach(t),KIo=r(Pxe," \u2014 "),MO=n(Pxe,"A",{href:!0});var $gt=s(MO);ZIo=r($gt,"CamembertForMultipleChoice"),$gt.forEach(t),eNo=r(Pxe," (CamemBERT model)"),Pxe.forEach(t),oNo=i(ee),U2=n(ee,"LI",{});var Bxe=s(U2);vge=n(Bxe,"STRONG",{});var kgt=s(vge);rNo=r(kgt,"canine"),kgt.forEach(t),tNo=r(Bxe," \u2014 "),EO=n(Bxe,"A",{href:!0});var Sgt=s(EO);aNo=r(Sgt,"CanineForMultipleChoice"),Sgt.forEach(t),nNo=r(Bxe," (Canine model)"),Bxe.forEach(t),sNo=i(ee),J2=n(ee,"LI",{});var Ixe=s(J2);Fge=n(Ixe,"STRONG",{});var Rgt=s(Fge);lNo=r(Rgt,"convbert"),Rgt.forEach(t),iNo=r(Ixe," \u2014 "),CO=n(Ixe,"A",{href:!0});var Pgt=s(CO);dNo=r(Pgt,"ConvBertForMultipleChoice"),Pgt.forEach(t),cNo=r(Ixe," (ConvBERT model)"),Ixe.forEach(t),fNo=i(ee),Y2=n(ee,"LI",{});var Nxe=s(Y2);Tge=n(Nxe,"STRONG",{});var Bgt=s(Tge);mNo=r(Bgt,"data2vec-text"),Bgt.forEach(t),gNo=r(Nxe," \u2014 "),wO=n(Nxe,"A",{href:!0});var Igt=s(wO);hNo=r(Igt,"Data2VecTextForMultipleChoice"),Igt.forEach(t),pNo=r(Nxe," (Data2VecText model)"),Nxe.forEach(t),_No=i(ee),K2=n(ee,"LI",{});var qxe=s(K2);Mge=n(qxe,"STRONG",{});var Ngt=s(Mge);uNo=r(Ngt,"deberta-v2"),Ngt.forEach(t),bNo=r(qxe," \u2014 "),AO=n(qxe,"A",{href:!0});var qgt=s(AO);vNo=r(qgt,"DebertaV2ForMultipleChoice"),qgt.forEach(t),FNo=r(qxe," (DeBERTa-v2 model)"),qxe.forEach(t),TNo=i(ee),Z2=n(ee,"LI",{});var jxe=s(Z2);Ege=n(jxe,"STRONG",{});var jgt=s(Ege);MNo=r(jgt,"distilbert"),jgt.forEach(t),ENo=r(jxe," \u2014 "),yO=n(jxe,"A",{href:!0});var Dgt=s(yO);CNo=r(Dgt,"DistilBertForMultipleChoice"),Dgt.forEach(t),wNo=r(jxe," (DistilBERT model)"),jxe.forEach(t),ANo=i(ee),e4=n(ee,"LI",{});var Dxe=s(e4);Cge=n(Dxe,"STRONG",{});var Ggt=s(Cge);yNo=r(Ggt,"electra"),Ggt.forEach(t),LNo=r(Dxe," \u2014 "),LO=n(Dxe,"A",{href:!0});var Ogt=s(LO);xNo=r(Ogt,"ElectraForMultipleChoice"),Ogt.forEach(t),$No=r(Dxe," (ELECTRA model)"),Dxe.forEach(t),kNo=i(ee),o4=n(ee,"LI",{});var Gxe=s(o4);wge=n(Gxe,"STRONG",{});var Vgt=s(wge);SNo=r(Vgt,"flaubert"),Vgt.forEach(t),RNo=r(Gxe," \u2014 "),xO=n(Gxe,"A",{href:!0});var Xgt=s(xO);PNo=r(Xgt,"FlaubertForMultipleChoice"),Xgt.forEach(t),BNo=r(Gxe," (FlauBERT model)"),Gxe.forEach(t),INo=i(ee),r4=n(ee,"LI",{});var Oxe=s(r4);Age=n(Oxe,"STRONG",{});var zgt=s(Age);NNo=r(zgt,"fnet"),zgt.forEach(t),qNo=r(Oxe," \u2014 "),$O=n(Oxe,"A",{href:!0});var Wgt=s($O);jNo=r(Wgt,"FNetForMultipleChoice"),Wgt.forEach(t),DNo=r(Oxe," (FNet model)"),Oxe.forEach(t),GNo=i(ee),t4=n(ee,"LI",{});var Vxe=s(t4);yge=n(Vxe,"STRONG",{});var Qgt=s(yge);ONo=r(Qgt,"funnel"),Qgt.forEach(t),VNo=r(Vxe," \u2014 "),kO=n(Vxe,"A",{href:!0});var Hgt=s(kO);XNo=r(Hgt,"FunnelForMultipleChoice"),Hgt.forEach(t),zNo=r(Vxe," (Funnel Transformer model)"),Vxe.forEach(t),WNo=i(ee),a4=n(ee,"LI",{});var Xxe=s(a4);Lge=n(Xxe,"STRONG",{});var Ugt=s(Lge);QNo=r(Ugt,"ibert"),Ugt.forEach(t),HNo=r(Xxe," \u2014 "),SO=n(Xxe,"A",{href:!0});var Jgt=s(SO);UNo=r(Jgt,"IBertForMultipleChoice"),Jgt.forEach(t),JNo=r(Xxe," (I-BERT model)"),Xxe.forEach(t),YNo=i(ee),n4=n(ee,"LI",{});var zxe=s(n4);xge=n(zxe,"STRONG",{});var Ygt=s(xge);KNo=r(Ygt,"longformer"),Ygt.forEach(t),ZNo=r(zxe," \u2014 "),RO=n(zxe,"A",{href:!0});var Kgt=s(RO);eqo=r(Kgt,"LongformerForMultipleChoice"),Kgt.forEach(t),oqo=r(zxe," (Longformer model)"),zxe.forEach(t),rqo=i(ee),s4=n(ee,"LI",{});var Wxe=s(s4);$ge=n(Wxe,"STRONG",{});var Zgt=s($ge);tqo=r(Zgt,"megatron-bert"),Zgt.forEach(t),aqo=r(Wxe," \u2014 "),PO=n(Wxe,"A",{href:!0});var eht=s(PO);nqo=r(eht,"MegatronBertForMultipleChoice"),eht.forEach(t),sqo=r(Wxe," (MegatronBert model)"),Wxe.forEach(t),lqo=i(ee),l4=n(ee,"LI",{});var Qxe=s(l4);kge=n(Qxe,"STRONG",{});var oht=s(kge);iqo=r(oht,"mobilebert"),oht.forEach(t),dqo=r(Qxe," \u2014 "),BO=n(Qxe,"A",{href:!0});var rht=s(BO);cqo=r(rht,"MobileBertForMultipleChoice"),rht.forEach(t),fqo=r(Qxe," (MobileBERT model)"),Qxe.forEach(t),mqo=i(ee),i4=n(ee,"LI",{});var Hxe=s(i4);Sge=n(Hxe,"STRONG",{});var tht=s(Sge);gqo=r(tht,"mpnet"),tht.forEach(t),hqo=r(Hxe," \u2014 "),IO=n(Hxe,"A",{href:!0});var aht=s(IO);pqo=r(aht,"MPNetForMultipleChoice"),aht.forEach(t),_qo=r(Hxe," (MPNet model)"),Hxe.forEach(t),uqo=i(ee),d4=n(ee,"LI",{});var Uxe=s(d4);Rge=n(Uxe,"STRONG",{});var nht=s(Rge);bqo=r(nht,"nystromformer"),nht.forEach(t),vqo=r(Uxe," \u2014 "),NO=n(Uxe,"A",{href:!0});var sht=s(NO);Fqo=r(sht,"NystromformerForMultipleChoice"),sht.forEach(t),Tqo=r(Uxe," (Nystromformer model)"),Uxe.forEach(t),Mqo=i(ee),c4=n(ee,"LI",{});var Jxe=s(c4);Pge=n(Jxe,"STRONG",{});var lht=s(Pge);Eqo=r(lht,"qdqbert"),lht.forEach(t),Cqo=r(Jxe," \u2014 "),qO=n(Jxe,"A",{href:!0});var iht=s(qO);wqo=r(iht,"QDQBertForMultipleChoice"),iht.forEach(t),Aqo=r(Jxe," (QDQBert model)"),Jxe.forEach(t),yqo=i(ee),f4=n(ee,"LI",{});var Yxe=s(f4);Bge=n(Yxe,"STRONG",{});var dht=s(Bge);Lqo=r(dht,"rembert"),dht.forEach(t),xqo=r(Yxe," \u2014 "),jO=n(Yxe,"A",{href:!0});var cht=s(jO);$qo=r(cht,"RemBertForMultipleChoice"),cht.forEach(t),kqo=r(Yxe," (RemBERT model)"),Yxe.forEach(t),Sqo=i(ee),m4=n(ee,"LI",{});var Kxe=s(m4);Ige=n(Kxe,"STRONG",{});var fht=s(Ige);Rqo=r(fht,"roberta"),fht.forEach(t),Pqo=r(Kxe," \u2014 "),DO=n(Kxe,"A",{href:!0});var mht=s(DO);Bqo=r(mht,"RobertaForMultipleChoice"),mht.forEach(t),Iqo=r(Kxe," (RoBERTa model)"),Kxe.forEach(t),Nqo=i(ee),g4=n(ee,"LI",{});var Zxe=s(g4);Nge=n(Zxe,"STRONG",{});var ght=s(Nge);qqo=r(ght,"roformer"),ght.forEach(t),jqo=r(Zxe," \u2014 "),GO=n(Zxe,"A",{href:!0});var hht=s(GO);Dqo=r(hht,"RoFormerForMultipleChoice"),hht.forEach(t),Gqo=r(Zxe," (RoFormer model)"),Zxe.forEach(t),Oqo=i(ee),h4=n(ee,"LI",{});var e$e=s(h4);qge=n(e$e,"STRONG",{});var pht=s(qge);Vqo=r(pht,"squeezebert"),pht.forEach(t),Xqo=r(e$e," \u2014 "),OO=n(e$e,"A",{href:!0});var _ht=s(OO);zqo=r(_ht,"SqueezeBertForMultipleChoice"),_ht.forEach(t),Wqo=r(e$e," (SqueezeBERT model)"),e$e.forEach(t),Qqo=i(ee),p4=n(ee,"LI",{});var o$e=s(p4);jge=n(o$e,"STRONG",{});var uht=s(jge);Hqo=r(uht,"xlm"),uht.forEach(t),Uqo=r(o$e," \u2014 "),VO=n(o$e,"A",{href:!0});var bht=s(VO);Jqo=r(bht,"XLMForMultipleChoice"),bht.forEach(t),Yqo=r(o$e," (XLM model)"),o$e.forEach(t),Kqo=i(ee),_4=n(ee,"LI",{});var r$e=s(_4);Dge=n(r$e,"STRONG",{});var vht=s(Dge);Zqo=r(vht,"xlm-roberta"),vht.forEach(t),ejo=r(r$e," \u2014 "),XO=n(r$e,"A",{href:!0});var Fht=s(XO);ojo=r(Fht,"XLMRobertaForMultipleChoice"),Fht.forEach(t),rjo=r(r$e," (XLM-RoBERTa model)"),r$e.forEach(t),tjo=i(ee),u4=n(ee,"LI",{});var t$e=s(u4);Gge=n(t$e,"STRONG",{});var Tht=s(Gge);ajo=r(Tht,"xlm-roberta-xl"),Tht.forEach(t),njo=r(t$e," \u2014 "),zO=n(t$e,"A",{href:!0});var Mht=s(zO);sjo=r(Mht,"XLMRobertaXLForMultipleChoice"),Mht.forEach(t),ljo=r(t$e," (XLM-RoBERTa-XL model)"),t$e.forEach(t),ijo=i(ee),b4=n(ee,"LI",{});var a$e=s(b4);Oge=n(a$e,"STRONG",{});var Eht=s(Oge);djo=r(Eht,"xlnet"),Eht.forEach(t),cjo=r(a$e," \u2014 "),WO=n(a$e,"A",{href:!0});var Cht=s(WO);fjo=r(Cht,"XLNetForMultipleChoice"),Cht.forEach(t),mjo=r(a$e," (XLNet model)"),a$e.forEach(t),gjo=i(ee),v4=n(ee,"LI",{});var n$e=s(v4);Vge=n(n$e,"STRONG",{});var wht=s(Vge);hjo=r(wht,"yoso"),wht.forEach(t),pjo=r(n$e," \u2014 "),QO=n(n$e,"A",{href:!0});var Aht=s(QO);_jo=r(Aht,"YosoForMultipleChoice"),Aht.forEach(t),ujo=r(n$e," (YOSO model)"),n$e.forEach(t),ee.forEach(t),bjo=i(ia),F4=n(ia,"P",{});var s$e=s(F4);vjo=r(s$e,"The model is set in evaluation mode by default using "),Xge=n(s$e,"CODE",{});var yht=s(Xge);Fjo=r(yht,"model.eval()"),yht.forEach(t),Tjo=r(s$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=n(s$e,"CODE",{});var Lht=s(zge);Mjo=r(Lht,"model.train()"),Lht.forEach(t),s$e.forEach(t),Ejo=i(ia),T(T4.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),fje=i(f),Qi=n(f,"H2",{class:!0});var pGe=s(Qi);M4=n(pGe,"A",{id:!0,class:!0,href:!0});var xht=s(M4);Wge=n(xht,"SPAN",{});var $ht=s(Wge);T(Xy.$$.fragment,$ht),$ht.forEach(t),xht.forEach(t),Cjo=i(pGe),Qge=n(pGe,"SPAN",{});var kht=s(Qge);wjo=r(kht,"AutoModelForNextSentencePrediction"),kht.forEach(t),pGe.forEach(t),mje=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(zy.$$.fragment,Hs),Ajo=i(Hs),Hi=n(Hs,"P",{});var UZ=s(Hi);yjo=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HO=n(UZ,"A",{href:!0});var Sht=s(HO);Ljo=r(Sht,"from_pretrained()"),Sht.forEach(t),xjo=r(UZ," class method or the "),UO=n(UZ,"A",{href:!0});var Rht=s(UO);$jo=r(Rht,"from_config()"),Rht.forEach(t),kjo=r(UZ,` class
method.`),UZ.forEach(t),Sjo=i(Hs),Wy=n(Hs,"P",{});var _Ge=s(Wy);Rjo=r(_Ge,"This class cannot be instantiated directly using "),Hge=n(_Ge,"CODE",{});var Pht=s(Hge);Pjo=r(Pht,"__init__()"),Pht.forEach(t),Bjo=r(_Ge," (throws an error)."),_Ge.forEach(t),Ijo=i(Hs),ft=n(Hs,"DIV",{class:!0});var r6=s(ft);T(Qy.$$.fragment,r6),Njo=i(r6),Uge=n(r6,"P",{});var Bht=s(Uge);qjo=r(Bht,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Bht.forEach(t),jjo=i(r6),Ui=n(r6,"P",{});var JZ=s(Ui);Djo=r(JZ,`Note:
Loading a model from its configuration file does `),Jge=n(JZ,"STRONG",{});var Iht=s(Jge);Gjo=r(Iht,"not"),Iht.forEach(t),Ojo=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=n(JZ,"A",{href:!0});var Nht=s(JO);Vjo=r(Nht,"from_pretrained()"),Nht.forEach(t),Xjo=r(JZ," to load the model weights."),JZ.forEach(t),zjo=i(r6),T(E4.$$.fragment,r6),r6.forEach(t),Wjo=i(Hs),to=n(Hs,"DIV",{class:!0});var da=s(to);T(Hy.$$.fragment,da),Qjo=i(da),Yge=n(da,"P",{});var qht=s(Yge);Hjo=r(qht,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qht.forEach(t),Ujo=i(da),Ia=n(da,"P",{});var t6=s(Ia);Jjo=r(t6,"The model class to instantiate is selected based on the "),Kge=n(t6,"CODE",{});var jht=s(Kge);Yjo=r(jht,"model_type"),jht.forEach(t),Kjo=r(t6,` property of the config object (either
passed as an argument or loaded from `),Zge=n(t6,"CODE",{});var Dht=s(Zge);Zjo=r(Dht,"pretrained_model_name_or_path"),Dht.forEach(t),eDo=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=n(t6,"CODE",{});var Ght=s(ehe);oDo=r(Ght,"pretrained_model_name_or_path"),Ght.forEach(t),rDo=r(t6,":"),t6.forEach(t),tDo=i(da),Yr=n(da,"UL",{});var Us=s(Yr);C4=n(Us,"LI",{});var l$e=s(C4);ohe=n(l$e,"STRONG",{});var Oht=s(ohe);aDo=r(Oht,"bert"),Oht.forEach(t),nDo=r(l$e," \u2014 "),YO=n(l$e,"A",{href:!0});var Vht=s(YO);sDo=r(Vht,"BertForNextSentencePrediction"),Vht.forEach(t),lDo=r(l$e," (BERT model)"),l$e.forEach(t),iDo=i(Us),w4=n(Us,"LI",{});var i$e=s(w4);rhe=n(i$e,"STRONG",{});var Xht=s(rhe);dDo=r(Xht,"fnet"),Xht.forEach(t),cDo=r(i$e," \u2014 "),KO=n(i$e,"A",{href:!0});var zht=s(KO);fDo=r(zht,"FNetForNextSentencePrediction"),zht.forEach(t),mDo=r(i$e," (FNet model)"),i$e.forEach(t),gDo=i(Us),A4=n(Us,"LI",{});var d$e=s(A4);the=n(d$e,"STRONG",{});var Wht=s(the);hDo=r(Wht,"megatron-bert"),Wht.forEach(t),pDo=r(d$e," \u2014 "),ZO=n(d$e,"A",{href:!0});var Qht=s(ZO);_Do=r(Qht,"MegatronBertForNextSentencePrediction"),Qht.forEach(t),uDo=r(d$e," (MegatronBert model)"),d$e.forEach(t),bDo=i(Us),y4=n(Us,"LI",{});var c$e=s(y4);ahe=n(c$e,"STRONG",{});var Hht=s(ahe);vDo=r(Hht,"mobilebert"),Hht.forEach(t),FDo=r(c$e," \u2014 "),eV=n(c$e,"A",{href:!0});var Uht=s(eV);TDo=r(Uht,"MobileBertForNextSentencePrediction"),Uht.forEach(t),MDo=r(c$e," (MobileBERT model)"),c$e.forEach(t),EDo=i(Us),L4=n(Us,"LI",{});var f$e=s(L4);nhe=n(f$e,"STRONG",{});var Jht=s(nhe);CDo=r(Jht,"qdqbert"),Jht.forEach(t),wDo=r(f$e," \u2014 "),oV=n(f$e,"A",{href:!0});var Yht=s(oV);ADo=r(Yht,"QDQBertForNextSentencePrediction"),Yht.forEach(t),yDo=r(f$e," (QDQBert model)"),f$e.forEach(t),Us.forEach(t),LDo=i(da),x4=n(da,"P",{});var m$e=s(x4);xDo=r(m$e,"The model is set in evaluation mode by default using "),she=n(m$e,"CODE",{});var Kht=s(she);$Do=r(Kht,"model.eval()"),Kht.forEach(t),kDo=r(m$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=n(m$e,"CODE",{});var Zht=s(lhe);SDo=r(Zht,"model.train()"),Zht.forEach(t),m$e.forEach(t),RDo=i(da),T($4.$$.fragment,da),da.forEach(t),Hs.forEach(t),gje=i(f),Ji=n(f,"H2",{class:!0});var uGe=s(Ji);k4=n(uGe,"A",{id:!0,class:!0,href:!0});var ept=s(k4);ihe=n(ept,"SPAN",{});var opt=s(ihe);T(Uy.$$.fragment,opt),opt.forEach(t),ept.forEach(t),PDo=i(uGe),dhe=n(uGe,"SPAN",{});var rpt=s(dhe);BDo=r(rpt,"AutoModelForTokenClassification"),rpt.forEach(t),uGe.forEach(t),hje=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(Jy.$$.fragment,Js),IDo=i(Js),Yi=n(Js,"P",{});var YZ=s(Yi);NDo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rV=n(YZ,"A",{href:!0});var tpt=s(rV);qDo=r(tpt,"from_pretrained()"),tpt.forEach(t),jDo=r(YZ," class method or the "),tV=n(YZ,"A",{href:!0});var apt=s(tV);DDo=r(apt,"from_config()"),apt.forEach(t),GDo=r(YZ,` class
method.`),YZ.forEach(t),ODo=i(Js),Yy=n(Js,"P",{});var bGe=s(Yy);VDo=r(bGe,"This class cannot be instantiated directly using "),che=n(bGe,"CODE",{});var npt=s(che);XDo=r(npt,"__init__()"),npt.forEach(t),zDo=r(bGe," (throws an error)."),bGe.forEach(t),WDo=i(Js),mt=n(Js,"DIV",{class:!0});var a6=s(mt);T(Ky.$$.fragment,a6),QDo=i(a6),fhe=n(a6,"P",{});var spt=s(fhe);HDo=r(spt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),spt.forEach(t),UDo=i(a6),Ki=n(a6,"P",{});var KZ=s(Ki);JDo=r(KZ,`Note:
Loading a model from its configuration file does `),mhe=n(KZ,"STRONG",{});var lpt=s(mhe);YDo=r(lpt,"not"),lpt.forEach(t),KDo=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=n(KZ,"A",{href:!0});var ipt=s(aV);ZDo=r(ipt,"from_pretrained()"),ipt.forEach(t),eGo=r(KZ," to load the model weights."),KZ.forEach(t),oGo=i(a6),T(S4.$$.fragment,a6),a6.forEach(t),rGo=i(Js),ao=n(Js,"DIV",{class:!0});var ca=s(ao);T(Zy.$$.fragment,ca),tGo=i(ca),ghe=n(ca,"P",{});var dpt=s(ghe);aGo=r(dpt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dpt.forEach(t),nGo=i(ca),Na=n(ca,"P",{});var n6=s(Na);sGo=r(n6,"The model class to instantiate is selected based on the "),hhe=n(n6,"CODE",{});var cpt=s(hhe);lGo=r(cpt,"model_type"),cpt.forEach(t),iGo=r(n6,` property of the config object (either
passed as an argument or loaded from `),phe=n(n6,"CODE",{});var fpt=s(phe);dGo=r(fpt,"pretrained_model_name_or_path"),fpt.forEach(t),cGo=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=n(n6,"CODE",{});var mpt=s(_he);fGo=r(mpt,"pretrained_model_name_or_path"),mpt.forEach(t),mGo=r(n6,":"),n6.forEach(t),gGo=i(ca),U=n(ca,"UL",{});var J=s(U);R4=n(J,"LI",{});var g$e=s(R4);uhe=n(g$e,"STRONG",{});var gpt=s(uhe);hGo=r(gpt,"albert"),gpt.forEach(t),pGo=r(g$e," \u2014 "),nV=n(g$e,"A",{href:!0});var hpt=s(nV);_Go=r(hpt,"AlbertForTokenClassification"),hpt.forEach(t),uGo=r(g$e," (ALBERT model)"),g$e.forEach(t),bGo=i(J),P4=n(J,"LI",{});var h$e=s(P4);bhe=n(h$e,"STRONG",{});var ppt=s(bhe);vGo=r(ppt,"bert"),ppt.forEach(t),FGo=r(h$e," \u2014 "),sV=n(h$e,"A",{href:!0});var _pt=s(sV);TGo=r(_pt,"BertForTokenClassification"),_pt.forEach(t),MGo=r(h$e," (BERT model)"),h$e.forEach(t),EGo=i(J),B4=n(J,"LI",{});var p$e=s(B4);vhe=n(p$e,"STRONG",{});var upt=s(vhe);CGo=r(upt,"big_bird"),upt.forEach(t),wGo=r(p$e," \u2014 "),lV=n(p$e,"A",{href:!0});var bpt=s(lV);AGo=r(bpt,"BigBirdForTokenClassification"),bpt.forEach(t),yGo=r(p$e," (BigBird model)"),p$e.forEach(t),LGo=i(J),I4=n(J,"LI",{});var _$e=s(I4);Fhe=n(_$e,"STRONG",{});var vpt=s(Fhe);xGo=r(vpt,"camembert"),vpt.forEach(t),$Go=r(_$e," \u2014 "),iV=n(_$e,"A",{href:!0});var Fpt=s(iV);kGo=r(Fpt,"CamembertForTokenClassification"),Fpt.forEach(t),SGo=r(_$e," (CamemBERT model)"),_$e.forEach(t),RGo=i(J),N4=n(J,"LI",{});var u$e=s(N4);The=n(u$e,"STRONG",{});var Tpt=s(The);PGo=r(Tpt,"canine"),Tpt.forEach(t),BGo=r(u$e," \u2014 "),dV=n(u$e,"A",{href:!0});var Mpt=s(dV);IGo=r(Mpt,"CanineForTokenClassification"),Mpt.forEach(t),NGo=r(u$e," (Canine model)"),u$e.forEach(t),qGo=i(J),q4=n(J,"LI",{});var b$e=s(q4);Mhe=n(b$e,"STRONG",{});var Ept=s(Mhe);jGo=r(Ept,"convbert"),Ept.forEach(t),DGo=r(b$e," \u2014 "),cV=n(b$e,"A",{href:!0});var Cpt=s(cV);GGo=r(Cpt,"ConvBertForTokenClassification"),Cpt.forEach(t),OGo=r(b$e," (ConvBERT model)"),b$e.forEach(t),VGo=i(J),j4=n(J,"LI",{});var v$e=s(j4);Ehe=n(v$e,"STRONG",{});var wpt=s(Ehe);XGo=r(wpt,"data2vec-text"),wpt.forEach(t),zGo=r(v$e," \u2014 "),fV=n(v$e,"A",{href:!0});var Apt=s(fV);WGo=r(Apt,"Data2VecTextForTokenClassification"),Apt.forEach(t),QGo=r(v$e," (Data2VecText model)"),v$e.forEach(t),HGo=i(J),D4=n(J,"LI",{});var F$e=s(D4);Che=n(F$e,"STRONG",{});var ypt=s(Che);UGo=r(ypt,"deberta"),ypt.forEach(t),JGo=r(F$e," \u2014 "),mV=n(F$e,"A",{href:!0});var Lpt=s(mV);YGo=r(Lpt,"DebertaForTokenClassification"),Lpt.forEach(t),KGo=r(F$e," (DeBERTa model)"),F$e.forEach(t),ZGo=i(J),G4=n(J,"LI",{});var T$e=s(G4);whe=n(T$e,"STRONG",{});var xpt=s(whe);eOo=r(xpt,"deberta-v2"),xpt.forEach(t),oOo=r(T$e," \u2014 "),gV=n(T$e,"A",{href:!0});var $pt=s(gV);rOo=r($pt,"DebertaV2ForTokenClassification"),$pt.forEach(t),tOo=r(T$e," (DeBERTa-v2 model)"),T$e.forEach(t),aOo=i(J),O4=n(J,"LI",{});var M$e=s(O4);Ahe=n(M$e,"STRONG",{});var kpt=s(Ahe);nOo=r(kpt,"distilbert"),kpt.forEach(t),sOo=r(M$e," \u2014 "),hV=n(M$e,"A",{href:!0});var Spt=s(hV);lOo=r(Spt,"DistilBertForTokenClassification"),Spt.forEach(t),iOo=r(M$e," (DistilBERT model)"),M$e.forEach(t),dOo=i(J),V4=n(J,"LI",{});var E$e=s(V4);yhe=n(E$e,"STRONG",{});var Rpt=s(yhe);cOo=r(Rpt,"electra"),Rpt.forEach(t),fOo=r(E$e," \u2014 "),pV=n(E$e,"A",{href:!0});var Ppt=s(pV);mOo=r(Ppt,"ElectraForTokenClassification"),Ppt.forEach(t),gOo=r(E$e," (ELECTRA model)"),E$e.forEach(t),hOo=i(J),X4=n(J,"LI",{});var C$e=s(X4);Lhe=n(C$e,"STRONG",{});var Bpt=s(Lhe);pOo=r(Bpt,"flaubert"),Bpt.forEach(t),_Oo=r(C$e," \u2014 "),_V=n(C$e,"A",{href:!0});var Ipt=s(_V);uOo=r(Ipt,"FlaubertForTokenClassification"),Ipt.forEach(t),bOo=r(C$e," (FlauBERT model)"),C$e.forEach(t),vOo=i(J),z4=n(J,"LI",{});var w$e=s(z4);xhe=n(w$e,"STRONG",{});var Npt=s(xhe);FOo=r(Npt,"fnet"),Npt.forEach(t),TOo=r(w$e," \u2014 "),uV=n(w$e,"A",{href:!0});var qpt=s(uV);MOo=r(qpt,"FNetForTokenClassification"),qpt.forEach(t),EOo=r(w$e," (FNet model)"),w$e.forEach(t),COo=i(J),W4=n(J,"LI",{});var A$e=s(W4);$he=n(A$e,"STRONG",{});var jpt=s($he);wOo=r(jpt,"funnel"),jpt.forEach(t),AOo=r(A$e," \u2014 "),bV=n(A$e,"A",{href:!0});var Dpt=s(bV);yOo=r(Dpt,"FunnelForTokenClassification"),Dpt.forEach(t),LOo=r(A$e," (Funnel Transformer model)"),A$e.forEach(t),xOo=i(J),Q4=n(J,"LI",{});var y$e=s(Q4);khe=n(y$e,"STRONG",{});var Gpt=s(khe);$Oo=r(Gpt,"gpt2"),Gpt.forEach(t),kOo=r(y$e," \u2014 "),vV=n(y$e,"A",{href:!0});var Opt=s(vV);SOo=r(Opt,"GPT2ForTokenClassification"),Opt.forEach(t),ROo=r(y$e," (OpenAI GPT-2 model)"),y$e.forEach(t),POo=i(J),H4=n(J,"LI",{});var L$e=s(H4);She=n(L$e,"STRONG",{});var Vpt=s(She);BOo=r(Vpt,"ibert"),Vpt.forEach(t),IOo=r(L$e," \u2014 "),FV=n(L$e,"A",{href:!0});var Xpt=s(FV);NOo=r(Xpt,"IBertForTokenClassification"),Xpt.forEach(t),qOo=r(L$e," (I-BERT model)"),L$e.forEach(t),jOo=i(J),U4=n(J,"LI",{});var x$e=s(U4);Rhe=n(x$e,"STRONG",{});var zpt=s(Rhe);DOo=r(zpt,"layoutlm"),zpt.forEach(t),GOo=r(x$e," \u2014 "),TV=n(x$e,"A",{href:!0});var Wpt=s(TV);OOo=r(Wpt,"LayoutLMForTokenClassification"),Wpt.forEach(t),VOo=r(x$e," (LayoutLM model)"),x$e.forEach(t),XOo=i(J),J4=n(J,"LI",{});var $$e=s(J4);Phe=n($$e,"STRONG",{});var Qpt=s(Phe);zOo=r(Qpt,"layoutlmv2"),Qpt.forEach(t),WOo=r($$e," \u2014 "),MV=n($$e,"A",{href:!0});var Hpt=s(MV);QOo=r(Hpt,"LayoutLMv2ForTokenClassification"),Hpt.forEach(t),HOo=r($$e," (LayoutLMv2 model)"),$$e.forEach(t),UOo=i(J),Y4=n(J,"LI",{});var k$e=s(Y4);Bhe=n(k$e,"STRONG",{});var Upt=s(Bhe);JOo=r(Upt,"layoutlmv3"),Upt.forEach(t),YOo=r(k$e," \u2014 "),EV=n(k$e,"A",{href:!0});var Jpt=s(EV);KOo=r(Jpt,"LayoutLMv3ForTokenClassification"),Jpt.forEach(t),ZOo=r(k$e," (LayoutLMv3 model)"),k$e.forEach(t),eVo=i(J),K4=n(J,"LI",{});var S$e=s(K4);Ihe=n(S$e,"STRONG",{});var Ypt=s(Ihe);oVo=r(Ypt,"longformer"),Ypt.forEach(t),rVo=r(S$e," \u2014 "),CV=n(S$e,"A",{href:!0});var Kpt=s(CV);tVo=r(Kpt,"LongformerForTokenClassification"),Kpt.forEach(t),aVo=r(S$e," (Longformer model)"),S$e.forEach(t),nVo=i(J),Z4=n(J,"LI",{});var R$e=s(Z4);Nhe=n(R$e,"STRONG",{});var Zpt=s(Nhe);sVo=r(Zpt,"megatron-bert"),Zpt.forEach(t),lVo=r(R$e," \u2014 "),wV=n(R$e,"A",{href:!0});var e_t=s(wV);iVo=r(e_t,"MegatronBertForTokenClassification"),e_t.forEach(t),dVo=r(R$e," (MegatronBert model)"),R$e.forEach(t),cVo=i(J),e5=n(J,"LI",{});var P$e=s(e5);qhe=n(P$e,"STRONG",{});var o_t=s(qhe);fVo=r(o_t,"mobilebert"),o_t.forEach(t),mVo=r(P$e," \u2014 "),AV=n(P$e,"A",{href:!0});var r_t=s(AV);gVo=r(r_t,"MobileBertForTokenClassification"),r_t.forEach(t),hVo=r(P$e," (MobileBERT model)"),P$e.forEach(t),pVo=i(J),o5=n(J,"LI",{});var B$e=s(o5);jhe=n(B$e,"STRONG",{});var t_t=s(jhe);_Vo=r(t_t,"mpnet"),t_t.forEach(t),uVo=r(B$e," \u2014 "),yV=n(B$e,"A",{href:!0});var a_t=s(yV);bVo=r(a_t,"MPNetForTokenClassification"),a_t.forEach(t),vVo=r(B$e," (MPNet model)"),B$e.forEach(t),FVo=i(J),r5=n(J,"LI",{});var I$e=s(r5);Dhe=n(I$e,"STRONG",{});var n_t=s(Dhe);TVo=r(n_t,"nystromformer"),n_t.forEach(t),MVo=r(I$e," \u2014 "),LV=n(I$e,"A",{href:!0});var s_t=s(LV);EVo=r(s_t,"NystromformerForTokenClassification"),s_t.forEach(t),CVo=r(I$e," (Nystromformer model)"),I$e.forEach(t),wVo=i(J),t5=n(J,"LI",{});var N$e=s(t5);Ghe=n(N$e,"STRONG",{});var l_t=s(Ghe);AVo=r(l_t,"qdqbert"),l_t.forEach(t),yVo=r(N$e," \u2014 "),xV=n(N$e,"A",{href:!0});var i_t=s(xV);LVo=r(i_t,"QDQBertForTokenClassification"),i_t.forEach(t),xVo=r(N$e," (QDQBert model)"),N$e.forEach(t),$Vo=i(J),a5=n(J,"LI",{});var q$e=s(a5);Ohe=n(q$e,"STRONG",{});var d_t=s(Ohe);kVo=r(d_t,"rembert"),d_t.forEach(t),SVo=r(q$e," \u2014 "),$V=n(q$e,"A",{href:!0});var c_t=s($V);RVo=r(c_t,"RemBertForTokenClassification"),c_t.forEach(t),PVo=r(q$e," (RemBERT model)"),q$e.forEach(t),BVo=i(J),n5=n(J,"LI",{});var j$e=s(n5);Vhe=n(j$e,"STRONG",{});var f_t=s(Vhe);IVo=r(f_t,"roberta"),f_t.forEach(t),NVo=r(j$e," \u2014 "),kV=n(j$e,"A",{href:!0});var m_t=s(kV);qVo=r(m_t,"RobertaForTokenClassification"),m_t.forEach(t),jVo=r(j$e," (RoBERTa model)"),j$e.forEach(t),DVo=i(J),s5=n(J,"LI",{});var D$e=s(s5);Xhe=n(D$e,"STRONG",{});var g_t=s(Xhe);GVo=r(g_t,"roformer"),g_t.forEach(t),OVo=r(D$e," \u2014 "),SV=n(D$e,"A",{href:!0});var h_t=s(SV);VVo=r(h_t,"RoFormerForTokenClassification"),h_t.forEach(t),XVo=r(D$e," (RoFormer model)"),D$e.forEach(t),zVo=i(J),l5=n(J,"LI",{});var G$e=s(l5);zhe=n(G$e,"STRONG",{});var p_t=s(zhe);WVo=r(p_t,"squeezebert"),p_t.forEach(t),QVo=r(G$e," \u2014 "),RV=n(G$e,"A",{href:!0});var __t=s(RV);HVo=r(__t,"SqueezeBertForTokenClassification"),__t.forEach(t),UVo=r(G$e," (SqueezeBERT model)"),G$e.forEach(t),JVo=i(J),i5=n(J,"LI",{});var O$e=s(i5);Whe=n(O$e,"STRONG",{});var u_t=s(Whe);YVo=r(u_t,"xlm"),u_t.forEach(t),KVo=r(O$e," \u2014 "),PV=n(O$e,"A",{href:!0});var b_t=s(PV);ZVo=r(b_t,"XLMForTokenClassification"),b_t.forEach(t),eXo=r(O$e," (XLM model)"),O$e.forEach(t),oXo=i(J),d5=n(J,"LI",{});var V$e=s(d5);Qhe=n(V$e,"STRONG",{});var v_t=s(Qhe);rXo=r(v_t,"xlm-roberta"),v_t.forEach(t),tXo=r(V$e," \u2014 "),BV=n(V$e,"A",{href:!0});var F_t=s(BV);aXo=r(F_t,"XLMRobertaForTokenClassification"),F_t.forEach(t),nXo=r(V$e," (XLM-RoBERTa model)"),V$e.forEach(t),sXo=i(J),c5=n(J,"LI",{});var X$e=s(c5);Hhe=n(X$e,"STRONG",{});var T_t=s(Hhe);lXo=r(T_t,"xlm-roberta-xl"),T_t.forEach(t),iXo=r(X$e," \u2014 "),IV=n(X$e,"A",{href:!0});var M_t=s(IV);dXo=r(M_t,"XLMRobertaXLForTokenClassification"),M_t.forEach(t),cXo=r(X$e," (XLM-RoBERTa-XL model)"),X$e.forEach(t),fXo=i(J),f5=n(J,"LI",{});var z$e=s(f5);Uhe=n(z$e,"STRONG",{});var E_t=s(Uhe);mXo=r(E_t,"xlnet"),E_t.forEach(t),gXo=r(z$e," \u2014 "),NV=n(z$e,"A",{href:!0});var C_t=s(NV);hXo=r(C_t,"XLNetForTokenClassification"),C_t.forEach(t),pXo=r(z$e," (XLNet model)"),z$e.forEach(t),_Xo=i(J),m5=n(J,"LI",{});var W$e=s(m5);Jhe=n(W$e,"STRONG",{});var w_t=s(Jhe);uXo=r(w_t,"yoso"),w_t.forEach(t),bXo=r(W$e," \u2014 "),qV=n(W$e,"A",{href:!0});var A_t=s(qV);vXo=r(A_t,"YosoForTokenClassification"),A_t.forEach(t),FXo=r(W$e," (YOSO model)"),W$e.forEach(t),J.forEach(t),TXo=i(ca),g5=n(ca,"P",{});var Q$e=s(g5);MXo=r(Q$e,"The model is set in evaluation mode by default using "),Yhe=n(Q$e,"CODE",{});var y_t=s(Yhe);EXo=r(y_t,"model.eval()"),y_t.forEach(t),CXo=r(Q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Khe=n(Q$e,"CODE",{});var L_t=s(Khe);wXo=r(L_t,"model.train()"),L_t.forEach(t),Q$e.forEach(t),AXo=i(ca),T(h5.$$.fragment,ca),ca.forEach(t),Js.forEach(t),pje=i(f),Zi=n(f,"H2",{class:!0});var vGe=s(Zi);p5=n(vGe,"A",{id:!0,class:!0,href:!0});var x_t=s(p5);Zhe=n(x_t,"SPAN",{});var $_t=s(Zhe);T(eL.$$.fragment,$_t),$_t.forEach(t),x_t.forEach(t),yXo=i(vGe),epe=n(vGe,"SPAN",{});var k_t=s(epe);LXo=r(k_t,"AutoModelForQuestionAnswering"),k_t.forEach(t),vGe.forEach(t),_je=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(oL.$$.fragment,Ys),xXo=i(Ys),ed=n(Ys,"P",{});var ZZ=s(ed);$Xo=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jV=n(ZZ,"A",{href:!0});var S_t=s(jV);kXo=r(S_t,"from_pretrained()"),S_t.forEach(t),SXo=r(ZZ," class method or the "),DV=n(ZZ,"A",{href:!0});var R_t=s(DV);RXo=r(R_t,"from_config()"),R_t.forEach(t),PXo=r(ZZ,` class
method.`),ZZ.forEach(t),BXo=i(Ys),rL=n(Ys,"P",{});var FGe=s(rL);IXo=r(FGe,"This class cannot be instantiated directly using "),ope=n(FGe,"CODE",{});var P_t=s(ope);NXo=r(P_t,"__init__()"),P_t.forEach(t),qXo=r(FGe," (throws an error)."),FGe.forEach(t),jXo=i(Ys),gt=n(Ys,"DIV",{class:!0});var s6=s(gt);T(tL.$$.fragment,s6),DXo=i(s6),rpe=n(s6,"P",{});var B_t=s(rpe);GXo=r(B_t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),B_t.forEach(t),OXo=i(s6),od=n(s6,"P",{});var eee=s(od);VXo=r(eee,`Note:
Loading a model from its configuration file does `),tpe=n(eee,"STRONG",{});var I_t=s(tpe);XXo=r(I_t,"not"),I_t.forEach(t),zXo=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=n(eee,"A",{href:!0});var N_t=s(GV);WXo=r(N_t,"from_pretrained()"),N_t.forEach(t),QXo=r(eee," to load the model weights."),eee.forEach(t),HXo=i(s6),T(_5.$$.fragment,s6),s6.forEach(t),UXo=i(Ys),no=n(Ys,"DIV",{class:!0});var fa=s(no);T(aL.$$.fragment,fa),JXo=i(fa),ape=n(fa,"P",{});var q_t=s(ape);YXo=r(q_t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),q_t.forEach(t),KXo=i(fa),qa=n(fa,"P",{});var l6=s(qa);ZXo=r(l6,"The model class to instantiate is selected based on the "),npe=n(l6,"CODE",{});var j_t=s(npe);ezo=r(j_t,"model_type"),j_t.forEach(t),ozo=r(l6,` property of the config object (either
passed as an argument or loaded from `),spe=n(l6,"CODE",{});var D_t=s(spe);rzo=r(D_t,"pretrained_model_name_or_path"),D_t.forEach(t),tzo=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=n(l6,"CODE",{});var G_t=s(lpe);azo=r(G_t,"pretrained_model_name_or_path"),G_t.forEach(t),nzo=r(l6,":"),l6.forEach(t),szo=i(fa),V=n(fa,"UL",{});var X=s(V);u5=n(X,"LI",{});var H$e=s(u5);ipe=n(H$e,"STRONG",{});var O_t=s(ipe);lzo=r(O_t,"albert"),O_t.forEach(t),izo=r(H$e," \u2014 "),OV=n(H$e,"A",{href:!0});var V_t=s(OV);dzo=r(V_t,"AlbertForQuestionAnswering"),V_t.forEach(t),czo=r(H$e," (ALBERT model)"),H$e.forEach(t),fzo=i(X),b5=n(X,"LI",{});var U$e=s(b5);dpe=n(U$e,"STRONG",{});var X_t=s(dpe);mzo=r(X_t,"bart"),X_t.forEach(t),gzo=r(U$e," \u2014 "),VV=n(U$e,"A",{href:!0});var z_t=s(VV);hzo=r(z_t,"BartForQuestionAnswering"),z_t.forEach(t),pzo=r(U$e," (BART model)"),U$e.forEach(t),_zo=i(X),v5=n(X,"LI",{});var J$e=s(v5);cpe=n(J$e,"STRONG",{});var W_t=s(cpe);uzo=r(W_t,"bert"),W_t.forEach(t),bzo=r(J$e," \u2014 "),XV=n(J$e,"A",{href:!0});var Q_t=s(XV);vzo=r(Q_t,"BertForQuestionAnswering"),Q_t.forEach(t),Fzo=r(J$e," (BERT model)"),J$e.forEach(t),Tzo=i(X),F5=n(X,"LI",{});var Y$e=s(F5);fpe=n(Y$e,"STRONG",{});var H_t=s(fpe);Mzo=r(H_t,"big_bird"),H_t.forEach(t),Ezo=r(Y$e," \u2014 "),zV=n(Y$e,"A",{href:!0});var U_t=s(zV);Czo=r(U_t,"BigBirdForQuestionAnswering"),U_t.forEach(t),wzo=r(Y$e," (BigBird model)"),Y$e.forEach(t),Azo=i(X),T5=n(X,"LI",{});var K$e=s(T5);mpe=n(K$e,"STRONG",{});var J_t=s(mpe);yzo=r(J_t,"bigbird_pegasus"),J_t.forEach(t),Lzo=r(K$e," \u2014 "),WV=n(K$e,"A",{href:!0});var Y_t=s(WV);xzo=r(Y_t,"BigBirdPegasusForQuestionAnswering"),Y_t.forEach(t),$zo=r(K$e," (BigBirdPegasus model)"),K$e.forEach(t),kzo=i(X),M5=n(X,"LI",{});var Z$e=s(M5);gpe=n(Z$e,"STRONG",{});var K_t=s(gpe);Szo=r(K_t,"camembert"),K_t.forEach(t),Rzo=r(Z$e," \u2014 "),QV=n(Z$e,"A",{href:!0});var Z_t=s(QV);Pzo=r(Z_t,"CamembertForQuestionAnswering"),Z_t.forEach(t),Bzo=r(Z$e," (CamemBERT model)"),Z$e.forEach(t),Izo=i(X),E5=n(X,"LI",{});var eke=s(E5);hpe=n(eke,"STRONG",{});var eut=s(hpe);Nzo=r(eut,"canine"),eut.forEach(t),qzo=r(eke," \u2014 "),HV=n(eke,"A",{href:!0});var out=s(HV);jzo=r(out,"CanineForQuestionAnswering"),out.forEach(t),Dzo=r(eke," (Canine model)"),eke.forEach(t),Gzo=i(X),C5=n(X,"LI",{});var oke=s(C5);ppe=n(oke,"STRONG",{});var rut=s(ppe);Ozo=r(rut,"convbert"),rut.forEach(t),Vzo=r(oke," \u2014 "),UV=n(oke,"A",{href:!0});var tut=s(UV);Xzo=r(tut,"ConvBertForQuestionAnswering"),tut.forEach(t),zzo=r(oke," (ConvBERT model)"),oke.forEach(t),Wzo=i(X),w5=n(X,"LI",{});var rke=s(w5);_pe=n(rke,"STRONG",{});var aut=s(_pe);Qzo=r(aut,"data2vec-text"),aut.forEach(t),Hzo=r(rke," \u2014 "),JV=n(rke,"A",{href:!0});var nut=s(JV);Uzo=r(nut,"Data2VecTextForQuestionAnswering"),nut.forEach(t),Jzo=r(rke," (Data2VecText model)"),rke.forEach(t),Yzo=i(X),A5=n(X,"LI",{});var tke=s(A5);upe=n(tke,"STRONG",{});var sut=s(upe);Kzo=r(sut,"deberta"),sut.forEach(t),Zzo=r(tke," \u2014 "),YV=n(tke,"A",{href:!0});var lut=s(YV);eWo=r(lut,"DebertaForQuestionAnswering"),lut.forEach(t),oWo=r(tke," (DeBERTa model)"),tke.forEach(t),rWo=i(X),y5=n(X,"LI",{});var ake=s(y5);bpe=n(ake,"STRONG",{});var iut=s(bpe);tWo=r(iut,"deberta-v2"),iut.forEach(t),aWo=r(ake," \u2014 "),KV=n(ake,"A",{href:!0});var dut=s(KV);nWo=r(dut,"DebertaV2ForQuestionAnswering"),dut.forEach(t),sWo=r(ake," (DeBERTa-v2 model)"),ake.forEach(t),lWo=i(X),L5=n(X,"LI",{});var nke=s(L5);vpe=n(nke,"STRONG",{});var cut=s(vpe);iWo=r(cut,"distilbert"),cut.forEach(t),dWo=r(nke," \u2014 "),ZV=n(nke,"A",{href:!0});var fut=s(ZV);cWo=r(fut,"DistilBertForQuestionAnswering"),fut.forEach(t),fWo=r(nke," (DistilBERT model)"),nke.forEach(t),mWo=i(X),x5=n(X,"LI",{});var ske=s(x5);Fpe=n(ske,"STRONG",{});var mut=s(Fpe);gWo=r(mut,"electra"),mut.forEach(t),hWo=r(ske," \u2014 "),eX=n(ske,"A",{href:!0});var gut=s(eX);pWo=r(gut,"ElectraForQuestionAnswering"),gut.forEach(t),_Wo=r(ske," (ELECTRA model)"),ske.forEach(t),uWo=i(X),$5=n(X,"LI",{});var lke=s($5);Tpe=n(lke,"STRONG",{});var hut=s(Tpe);bWo=r(hut,"flaubert"),hut.forEach(t),vWo=r(lke," \u2014 "),oX=n(lke,"A",{href:!0});var put=s(oX);FWo=r(put,"FlaubertForQuestionAnsweringSimple"),put.forEach(t),TWo=r(lke," (FlauBERT model)"),lke.forEach(t),MWo=i(X),k5=n(X,"LI",{});var ike=s(k5);Mpe=n(ike,"STRONG",{});var _ut=s(Mpe);EWo=r(_ut,"fnet"),_ut.forEach(t),CWo=r(ike," \u2014 "),rX=n(ike,"A",{href:!0});var uut=s(rX);wWo=r(uut,"FNetForQuestionAnswering"),uut.forEach(t),AWo=r(ike," (FNet model)"),ike.forEach(t),yWo=i(X),S5=n(X,"LI",{});var dke=s(S5);Epe=n(dke,"STRONG",{});var but=s(Epe);LWo=r(but,"funnel"),but.forEach(t),xWo=r(dke," \u2014 "),tX=n(dke,"A",{href:!0});var vut=s(tX);$Wo=r(vut,"FunnelForQuestionAnswering"),vut.forEach(t),kWo=r(dke," (Funnel Transformer model)"),dke.forEach(t),SWo=i(X),R5=n(X,"LI",{});var cke=s(R5);Cpe=n(cke,"STRONG",{});var Fut=s(Cpe);RWo=r(Fut,"gptj"),Fut.forEach(t),PWo=r(cke," \u2014 "),aX=n(cke,"A",{href:!0});var Tut=s(aX);BWo=r(Tut,"GPTJForQuestionAnswering"),Tut.forEach(t),IWo=r(cke," (GPT-J model)"),cke.forEach(t),NWo=i(X),P5=n(X,"LI",{});var fke=s(P5);wpe=n(fke,"STRONG",{});var Mut=s(wpe);qWo=r(Mut,"ibert"),Mut.forEach(t),jWo=r(fke," \u2014 "),nX=n(fke,"A",{href:!0});var Eut=s(nX);DWo=r(Eut,"IBertForQuestionAnswering"),Eut.forEach(t),GWo=r(fke," (I-BERT model)"),fke.forEach(t),OWo=i(X),B5=n(X,"LI",{});var mke=s(B5);Ape=n(mke,"STRONG",{});var Cut=s(Ape);VWo=r(Cut,"layoutlmv2"),Cut.forEach(t),XWo=r(mke," \u2014 "),sX=n(mke,"A",{href:!0});var wut=s(sX);zWo=r(wut,"LayoutLMv2ForQuestionAnswering"),wut.forEach(t),WWo=r(mke," (LayoutLMv2 model)"),mke.forEach(t),QWo=i(X),I5=n(X,"LI",{});var gke=s(I5);ype=n(gke,"STRONG",{});var Aut=s(ype);HWo=r(Aut,"layoutlmv3"),Aut.forEach(t),UWo=r(gke," \u2014 "),lX=n(gke,"A",{href:!0});var yut=s(lX);JWo=r(yut,"LayoutLMv3ForQuestionAnswering"),yut.forEach(t),YWo=r(gke," (LayoutLMv3 model)"),gke.forEach(t),KWo=i(X),N5=n(X,"LI",{});var hke=s(N5);Lpe=n(hke,"STRONG",{});var Lut=s(Lpe);ZWo=r(Lut,"led"),Lut.forEach(t),eQo=r(hke," \u2014 "),iX=n(hke,"A",{href:!0});var xut=s(iX);oQo=r(xut,"LEDForQuestionAnswering"),xut.forEach(t),rQo=r(hke," (LED model)"),hke.forEach(t),tQo=i(X),q5=n(X,"LI",{});var pke=s(q5);xpe=n(pke,"STRONG",{});var $ut=s(xpe);aQo=r($ut,"longformer"),$ut.forEach(t),nQo=r(pke," \u2014 "),dX=n(pke,"A",{href:!0});var kut=s(dX);sQo=r(kut,"LongformerForQuestionAnswering"),kut.forEach(t),lQo=r(pke," (Longformer model)"),pke.forEach(t),iQo=i(X),j5=n(X,"LI",{});var _ke=s(j5);$pe=n(_ke,"STRONG",{});var Sut=s($pe);dQo=r(Sut,"lxmert"),Sut.forEach(t),cQo=r(_ke," \u2014 "),cX=n(_ke,"A",{href:!0});var Rut=s(cX);fQo=r(Rut,"LxmertForQuestionAnswering"),Rut.forEach(t),mQo=r(_ke," (LXMERT model)"),_ke.forEach(t),gQo=i(X),D5=n(X,"LI",{});var uke=s(D5);kpe=n(uke,"STRONG",{});var Put=s(kpe);hQo=r(Put,"mbart"),Put.forEach(t),pQo=r(uke," \u2014 "),fX=n(uke,"A",{href:!0});var But=s(fX);_Qo=r(But,"MBartForQuestionAnswering"),But.forEach(t),uQo=r(uke," (mBART model)"),uke.forEach(t),bQo=i(X),G5=n(X,"LI",{});var bke=s(G5);Spe=n(bke,"STRONG",{});var Iut=s(Spe);vQo=r(Iut,"megatron-bert"),Iut.forEach(t),FQo=r(bke," \u2014 "),mX=n(bke,"A",{href:!0});var Nut=s(mX);TQo=r(Nut,"MegatronBertForQuestionAnswering"),Nut.forEach(t),MQo=r(bke," (MegatronBert model)"),bke.forEach(t),EQo=i(X),O5=n(X,"LI",{});var vke=s(O5);Rpe=n(vke,"STRONG",{});var qut=s(Rpe);CQo=r(qut,"mobilebert"),qut.forEach(t),wQo=r(vke," \u2014 "),gX=n(vke,"A",{href:!0});var jut=s(gX);AQo=r(jut,"MobileBertForQuestionAnswering"),jut.forEach(t),yQo=r(vke," (MobileBERT model)"),vke.forEach(t),LQo=i(X),V5=n(X,"LI",{});var Fke=s(V5);Ppe=n(Fke,"STRONG",{});var Dut=s(Ppe);xQo=r(Dut,"mpnet"),Dut.forEach(t),$Qo=r(Fke," \u2014 "),hX=n(Fke,"A",{href:!0});var Gut=s(hX);kQo=r(Gut,"MPNetForQuestionAnswering"),Gut.forEach(t),SQo=r(Fke," (MPNet model)"),Fke.forEach(t),RQo=i(X),X5=n(X,"LI",{});var Tke=s(X5);Bpe=n(Tke,"STRONG",{});var Out=s(Bpe);PQo=r(Out,"nystromformer"),Out.forEach(t),BQo=r(Tke," \u2014 "),pX=n(Tke,"A",{href:!0});var Vut=s(pX);IQo=r(Vut,"NystromformerForQuestionAnswering"),Vut.forEach(t),NQo=r(Tke," (Nystromformer model)"),Tke.forEach(t),qQo=i(X),z5=n(X,"LI",{});var Mke=s(z5);Ipe=n(Mke,"STRONG",{});var Xut=s(Ipe);jQo=r(Xut,"qdqbert"),Xut.forEach(t),DQo=r(Mke," \u2014 "),_X=n(Mke,"A",{href:!0});var zut=s(_X);GQo=r(zut,"QDQBertForQuestionAnswering"),zut.forEach(t),OQo=r(Mke," (QDQBert model)"),Mke.forEach(t),VQo=i(X),W5=n(X,"LI",{});var Eke=s(W5);Npe=n(Eke,"STRONG",{});var Wut=s(Npe);XQo=r(Wut,"reformer"),Wut.forEach(t),zQo=r(Eke," \u2014 "),uX=n(Eke,"A",{href:!0});var Qut=s(uX);WQo=r(Qut,"ReformerForQuestionAnswering"),Qut.forEach(t),QQo=r(Eke," (Reformer model)"),Eke.forEach(t),HQo=i(X),Q5=n(X,"LI",{});var Cke=s(Q5);qpe=n(Cke,"STRONG",{});var Hut=s(qpe);UQo=r(Hut,"rembert"),Hut.forEach(t),JQo=r(Cke," \u2014 "),bX=n(Cke,"A",{href:!0});var Uut=s(bX);YQo=r(Uut,"RemBertForQuestionAnswering"),Uut.forEach(t),KQo=r(Cke," (RemBERT model)"),Cke.forEach(t),ZQo=i(X),H5=n(X,"LI",{});var wke=s(H5);jpe=n(wke,"STRONG",{});var Jut=s(jpe);eHo=r(Jut,"roberta"),Jut.forEach(t),oHo=r(wke," \u2014 "),vX=n(wke,"A",{href:!0});var Yut=s(vX);rHo=r(Yut,"RobertaForQuestionAnswering"),Yut.forEach(t),tHo=r(wke," (RoBERTa model)"),wke.forEach(t),aHo=i(X),U5=n(X,"LI",{});var Ake=s(U5);Dpe=n(Ake,"STRONG",{});var Kut=s(Dpe);nHo=r(Kut,"roformer"),Kut.forEach(t),sHo=r(Ake," \u2014 "),FX=n(Ake,"A",{href:!0});var Zut=s(FX);lHo=r(Zut,"RoFormerForQuestionAnswering"),Zut.forEach(t),iHo=r(Ake," (RoFormer model)"),Ake.forEach(t),dHo=i(X),J5=n(X,"LI",{});var yke=s(J5);Gpe=n(yke,"STRONG",{});var e1t=s(Gpe);cHo=r(e1t,"splinter"),e1t.forEach(t),fHo=r(yke," \u2014 "),TX=n(yke,"A",{href:!0});var o1t=s(TX);mHo=r(o1t,"SplinterForQuestionAnswering"),o1t.forEach(t),gHo=r(yke," (Splinter model)"),yke.forEach(t),hHo=i(X),Y5=n(X,"LI",{});var Lke=s(Y5);Ope=n(Lke,"STRONG",{});var r1t=s(Ope);pHo=r(r1t,"squeezebert"),r1t.forEach(t),_Ho=r(Lke," \u2014 "),MX=n(Lke,"A",{href:!0});var t1t=s(MX);uHo=r(t1t,"SqueezeBertForQuestionAnswering"),t1t.forEach(t),bHo=r(Lke," (SqueezeBERT model)"),Lke.forEach(t),vHo=i(X),K5=n(X,"LI",{});var xke=s(K5);Vpe=n(xke,"STRONG",{});var a1t=s(Vpe);FHo=r(a1t,"xlm"),a1t.forEach(t),THo=r(xke," \u2014 "),EX=n(xke,"A",{href:!0});var n1t=s(EX);MHo=r(n1t,"XLMForQuestionAnsweringSimple"),n1t.forEach(t),EHo=r(xke," (XLM model)"),xke.forEach(t),CHo=i(X),Z5=n(X,"LI",{});var $ke=s(Z5);Xpe=n($ke,"STRONG",{});var s1t=s(Xpe);wHo=r(s1t,"xlm-roberta"),s1t.forEach(t),AHo=r($ke," \u2014 "),CX=n($ke,"A",{href:!0});var l1t=s(CX);yHo=r(l1t,"XLMRobertaForQuestionAnswering"),l1t.forEach(t),LHo=r($ke," (XLM-RoBERTa model)"),$ke.forEach(t),xHo=i(X),ev=n(X,"LI",{});var kke=s(ev);zpe=n(kke,"STRONG",{});var i1t=s(zpe);$Ho=r(i1t,"xlm-roberta-xl"),i1t.forEach(t),kHo=r(kke," \u2014 "),wX=n(kke,"A",{href:!0});var d1t=s(wX);SHo=r(d1t,"XLMRobertaXLForQuestionAnswering"),d1t.forEach(t),RHo=r(kke," (XLM-RoBERTa-XL model)"),kke.forEach(t),PHo=i(X),ov=n(X,"LI",{});var Ske=s(ov);Wpe=n(Ske,"STRONG",{});var c1t=s(Wpe);BHo=r(c1t,"xlnet"),c1t.forEach(t),IHo=r(Ske," \u2014 "),AX=n(Ske,"A",{href:!0});var f1t=s(AX);NHo=r(f1t,"XLNetForQuestionAnsweringSimple"),f1t.forEach(t),qHo=r(Ske," (XLNet model)"),Ske.forEach(t),jHo=i(X),rv=n(X,"LI",{});var Rke=s(rv);Qpe=n(Rke,"STRONG",{});var m1t=s(Qpe);DHo=r(m1t,"yoso"),m1t.forEach(t),GHo=r(Rke," \u2014 "),yX=n(Rke,"A",{href:!0});var g1t=s(yX);OHo=r(g1t,"YosoForQuestionAnswering"),g1t.forEach(t),VHo=r(Rke," (YOSO model)"),Rke.forEach(t),X.forEach(t),XHo=i(fa),tv=n(fa,"P",{});var Pke=s(tv);zHo=r(Pke,"The model is set in evaluation mode by default using "),Hpe=n(Pke,"CODE",{});var h1t=s(Hpe);WHo=r(h1t,"model.eval()"),h1t.forEach(t),QHo=r(Pke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=n(Pke,"CODE",{});var p1t=s(Upe);HHo=r(p1t,"model.train()"),p1t.forEach(t),Pke.forEach(t),UHo=i(fa),T(av.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),uje=i(f),rd=n(f,"H2",{class:!0});var TGe=s(rd);nv=n(TGe,"A",{id:!0,class:!0,href:!0});var _1t=s(nv);Jpe=n(_1t,"SPAN",{});var u1t=s(Jpe);T(nL.$$.fragment,u1t),u1t.forEach(t),_1t.forEach(t),JHo=i(TGe),Ype=n(TGe,"SPAN",{});var b1t=s(Ype);YHo=r(b1t,"AutoModelForTableQuestionAnswering"),b1t.forEach(t),TGe.forEach(t),bje=i(f),qo=n(f,"DIV",{class:!0});var Ks=s(qo);T(sL.$$.fragment,Ks),KHo=i(Ks),td=n(Ks,"P",{});var oee=s(td);ZHo=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LX=n(oee,"A",{href:!0});var v1t=s(LX);eUo=r(v1t,"from_pretrained()"),v1t.forEach(t),oUo=r(oee," class method or the "),xX=n(oee,"A",{href:!0});var F1t=s(xX);rUo=r(F1t,"from_config()"),F1t.forEach(t),tUo=r(oee,` class
method.`),oee.forEach(t),aUo=i(Ks),lL=n(Ks,"P",{});var MGe=s(lL);nUo=r(MGe,"This class cannot be instantiated directly using "),Kpe=n(MGe,"CODE",{});var T1t=s(Kpe);sUo=r(T1t,"__init__()"),T1t.forEach(t),lUo=r(MGe," (throws an error)."),MGe.forEach(t),iUo=i(Ks),ht=n(Ks,"DIV",{class:!0});var i6=s(ht);T(iL.$$.fragment,i6),dUo=i(i6),Zpe=n(i6,"P",{});var M1t=s(Zpe);cUo=r(M1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),M1t.forEach(t),fUo=i(i6),ad=n(i6,"P",{});var ree=s(ad);mUo=r(ree,`Note:
Loading a model from its configuration file does `),e_e=n(ree,"STRONG",{});var E1t=s(e_e);gUo=r(E1t,"not"),E1t.forEach(t),hUo=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(ree,"A",{href:!0});var C1t=s($X);pUo=r(C1t,"from_pretrained()"),C1t.forEach(t),_Uo=r(ree," to load the model weights."),ree.forEach(t),uUo=i(i6),T(sv.$$.fragment,i6),i6.forEach(t),bUo=i(Ks),so=n(Ks,"DIV",{class:!0});var ma=s(so);T(dL.$$.fragment,ma),vUo=i(ma),o_e=n(ma,"P",{});var w1t=s(o_e);FUo=r(w1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),w1t.forEach(t),TUo=i(ma),ja=n(ma,"P",{});var d6=s(ja);MUo=r(d6,"The model class to instantiate is selected based on the "),r_e=n(d6,"CODE",{});var A1t=s(r_e);EUo=r(A1t,"model_type"),A1t.forEach(t),CUo=r(d6,` property of the config object (either
passed as an argument or loaded from `),t_e=n(d6,"CODE",{});var y1t=s(t_e);wUo=r(y1t,"pretrained_model_name_or_path"),y1t.forEach(t),AUo=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=n(d6,"CODE",{});var L1t=s(a_e);yUo=r(L1t,"pretrained_model_name_or_path"),L1t.forEach(t),LUo=r(d6,":"),d6.forEach(t),xUo=i(ma),n_e=n(ma,"UL",{});var x1t=s(n_e);lv=n(x1t,"LI",{});var Bke=s(lv);s_e=n(Bke,"STRONG",{});var $1t=s(s_e);$Uo=r($1t,"tapas"),$1t.forEach(t),kUo=r(Bke," \u2014 "),kX=n(Bke,"A",{href:!0});var k1t=s(kX);SUo=r(k1t,"TapasForQuestionAnswering"),k1t.forEach(t),RUo=r(Bke," (TAPAS model)"),Bke.forEach(t),x1t.forEach(t),PUo=i(ma),iv=n(ma,"P",{});var Ike=s(iv);BUo=r(Ike,"The model is set in evaluation mode by default using "),l_e=n(Ike,"CODE",{});var S1t=s(l_e);IUo=r(S1t,"model.eval()"),S1t.forEach(t),NUo=r(Ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=n(Ike,"CODE",{});var R1t=s(i_e);qUo=r(R1t,"model.train()"),R1t.forEach(t),Ike.forEach(t),jUo=i(ma),T(dv.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),vje=i(f),nd=n(f,"H2",{class:!0});var EGe=s(nd);cv=n(EGe,"A",{id:!0,class:!0,href:!0});var P1t=s(cv);d_e=n(P1t,"SPAN",{});var B1t=s(d_e);T(cL.$$.fragment,B1t),B1t.forEach(t),P1t.forEach(t),DUo=i(EGe),c_e=n(EGe,"SPAN",{});var I1t=s(c_e);GUo=r(I1t,"AutoModelForImageClassification"),I1t.forEach(t),EGe.forEach(t),Fje=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(fL.$$.fragment,Zs),OUo=i(Zs),sd=n(Zs,"P",{});var tee=s(sd);VUo=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SX=n(tee,"A",{href:!0});var N1t=s(SX);XUo=r(N1t,"from_pretrained()"),N1t.forEach(t),zUo=r(tee," class method or the "),RX=n(tee,"A",{href:!0});var q1t=s(RX);WUo=r(q1t,"from_config()"),q1t.forEach(t),QUo=r(tee,` class
method.`),tee.forEach(t),HUo=i(Zs),mL=n(Zs,"P",{});var CGe=s(mL);UUo=r(CGe,"This class cannot be instantiated directly using "),f_e=n(CGe,"CODE",{});var j1t=s(f_e);JUo=r(j1t,"__init__()"),j1t.forEach(t),YUo=r(CGe," (throws an error)."),CGe.forEach(t),KUo=i(Zs),pt=n(Zs,"DIV",{class:!0});var c6=s(pt);T(gL.$$.fragment,c6),ZUo=i(c6),m_e=n(c6,"P",{});var D1t=s(m_e);eJo=r(D1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),D1t.forEach(t),oJo=i(c6),ld=n(c6,"P",{});var aee=s(ld);rJo=r(aee,`Note:
Loading a model from its configuration file does `),g_e=n(aee,"STRONG",{});var G1t=s(g_e);tJo=r(G1t,"not"),G1t.forEach(t),aJo=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(aee,"A",{href:!0});var O1t=s(PX);nJo=r(O1t,"from_pretrained()"),O1t.forEach(t),sJo=r(aee," to load the model weights."),aee.forEach(t),lJo=i(c6),T(fv.$$.fragment,c6),c6.forEach(t),iJo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ga=s(lo);T(hL.$$.fragment,ga),dJo=i(ga),h_e=n(ga,"P",{});var V1t=s(h_e);cJo=r(V1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),V1t.forEach(t),fJo=i(ga),Da=n(ga,"P",{});var f6=s(Da);mJo=r(f6,"The model class to instantiate is selected based on the "),p_e=n(f6,"CODE",{});var X1t=s(p_e);gJo=r(X1t,"model_type"),X1t.forEach(t),hJo=r(f6,` property of the config object (either
passed as an argument or loaded from `),__e=n(f6,"CODE",{});var z1t=s(__e);pJo=r(z1t,"pretrained_model_name_or_path"),z1t.forEach(t),_Jo=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=n(f6,"CODE",{});var W1t=s(u_e);uJo=r(W1t,"pretrained_model_name_or_path"),W1t.forEach(t),bJo=r(f6,":"),f6.forEach(t),vJo=i(ga),ve=n(ga,"UL",{});var Te=s(ve);mv=n(Te,"LI",{});var Nke=s(mv);b_e=n(Nke,"STRONG",{});var Q1t=s(b_e);FJo=r(Q1t,"beit"),Q1t.forEach(t),TJo=r(Nke," \u2014 "),BX=n(Nke,"A",{href:!0});var H1t=s(BX);MJo=r(H1t,"BeitForImageClassification"),H1t.forEach(t),EJo=r(Nke," (BEiT model)"),Nke.forEach(t),CJo=i(Te),gv=n(Te,"LI",{});var qke=s(gv);v_e=n(qke,"STRONG",{});var U1t=s(v_e);wJo=r(U1t,"convnext"),U1t.forEach(t),AJo=r(qke," \u2014 "),IX=n(qke,"A",{href:!0});var J1t=s(IX);yJo=r(J1t,"ConvNextForImageClassification"),J1t.forEach(t),LJo=r(qke," (ConvNext model)"),qke.forEach(t),xJo=i(Te),hv=n(Te,"LI",{});var jke=s(hv);F_e=n(jke,"STRONG",{});var Y1t=s(F_e);$Jo=r(Y1t,"cvt"),Y1t.forEach(t),kJo=r(jke," \u2014 "),NX=n(jke,"A",{href:!0});var K1t=s(NX);SJo=r(K1t,"CvtForImageClassification"),K1t.forEach(t),RJo=r(jke," (CvT model)"),jke.forEach(t),PJo=i(Te),pv=n(Te,"LI",{});var Dke=s(pv);T_e=n(Dke,"STRONG",{});var Z1t=s(T_e);BJo=r(Z1t,"data2vec-vision"),Z1t.forEach(t),IJo=r(Dke," \u2014 "),qX=n(Dke,"A",{href:!0});var ebt=s(qX);NJo=r(ebt,"Data2VecVisionForImageClassification"),ebt.forEach(t),qJo=r(Dke," (Data2VecVision model)"),Dke.forEach(t),jJo=i(Te),Bs=n(Te,"LI",{});var Z$=s(Bs);M_e=n(Z$,"STRONG",{});var obt=s(M_e);DJo=r(obt,"deit"),obt.forEach(t),GJo=r(Z$," \u2014 "),jX=n(Z$,"A",{href:!0});var rbt=s(jX);OJo=r(rbt,"DeiTForImageClassification"),rbt.forEach(t),VJo=r(Z$," or "),DX=n(Z$,"A",{href:!0});var tbt=s(DX);XJo=r(tbt,"DeiTForImageClassificationWithTeacher"),tbt.forEach(t),zJo=r(Z$," (DeiT model)"),Z$.forEach(t),WJo=i(Te),_v=n(Te,"LI",{});var Gke=s(_v);E_e=n(Gke,"STRONG",{});var abt=s(E_e);QJo=r(abt,"imagegpt"),abt.forEach(t),HJo=r(Gke," \u2014 "),GX=n(Gke,"A",{href:!0});var nbt=s(GX);UJo=r(nbt,"ImageGPTForImageClassification"),nbt.forEach(t),JJo=r(Gke," (ImageGPT model)"),Gke.forEach(t),YJo=i(Te),uv=n(Te,"LI",{});var Oke=s(uv);C_e=n(Oke,"STRONG",{});var sbt=s(C_e);KJo=r(sbt,"mobilevit"),sbt.forEach(t),ZJo=r(Oke," \u2014 "),OX=n(Oke,"A",{href:!0});var lbt=s(OX);eYo=r(lbt,"MobileViTForImageClassification"),lbt.forEach(t),oYo=r(Oke," (MobileViT model)"),Oke.forEach(t),rYo=i(Te),_t=n(Te,"LI",{});var pf=s(_t);w_e=n(pf,"STRONG",{});var ibt=s(w_e);tYo=r(ibt,"perceiver"),ibt.forEach(t),aYo=r(pf," \u2014 "),VX=n(pf,"A",{href:!0});var dbt=s(VX);nYo=r(dbt,"PerceiverForImageClassificationLearned"),dbt.forEach(t),sYo=r(pf," or "),XX=n(pf,"A",{href:!0});var cbt=s(XX);lYo=r(cbt,"PerceiverForImageClassificationFourier"),cbt.forEach(t),iYo=r(pf," or "),zX=n(pf,"A",{href:!0});var fbt=s(zX);dYo=r(fbt,"PerceiverForImageClassificationConvProcessing"),fbt.forEach(t),cYo=r(pf," (Perceiver model)"),pf.forEach(t),fYo=i(Te),bv=n(Te,"LI",{});var Vke=s(bv);A_e=n(Vke,"STRONG",{});var mbt=s(A_e);mYo=r(mbt,"poolformer"),mbt.forEach(t),gYo=r(Vke," \u2014 "),WX=n(Vke,"A",{href:!0});var gbt=s(WX);hYo=r(gbt,"PoolFormerForImageClassification"),gbt.forEach(t),pYo=r(Vke," (PoolFormer model)"),Vke.forEach(t),_Yo=i(Te),vv=n(Te,"LI",{});var Xke=s(vv);y_e=n(Xke,"STRONG",{});var hbt=s(y_e);uYo=r(hbt,"regnet"),hbt.forEach(t),bYo=r(Xke," \u2014 "),QX=n(Xke,"A",{href:!0});var pbt=s(QX);vYo=r(pbt,"RegNetForImageClassification"),pbt.forEach(t),FYo=r(Xke," (RegNet model)"),Xke.forEach(t),TYo=i(Te),Fv=n(Te,"LI",{});var zke=s(Fv);L_e=n(zke,"STRONG",{});var _bt=s(L_e);MYo=r(_bt,"resnet"),_bt.forEach(t),EYo=r(zke," \u2014 "),HX=n(zke,"A",{href:!0});var ubt=s(HX);CYo=r(ubt,"ResNetForImageClassification"),ubt.forEach(t),wYo=r(zke," (ResNet model)"),zke.forEach(t),AYo=i(Te),Tv=n(Te,"LI",{});var Wke=s(Tv);x_e=n(Wke,"STRONG",{});var bbt=s(x_e);yYo=r(bbt,"segformer"),bbt.forEach(t),LYo=r(Wke," \u2014 "),UX=n(Wke,"A",{href:!0});var vbt=s(UX);xYo=r(vbt,"SegformerForImageClassification"),vbt.forEach(t),$Yo=r(Wke," (SegFormer model)"),Wke.forEach(t),kYo=i(Te),Mv=n(Te,"LI",{});var Qke=s(Mv);$_e=n(Qke,"STRONG",{});var Fbt=s($_e);SYo=r(Fbt,"swin"),Fbt.forEach(t),RYo=r(Qke," \u2014 "),JX=n(Qke,"A",{href:!0});var Tbt=s(JX);PYo=r(Tbt,"SwinForImageClassification"),Tbt.forEach(t),BYo=r(Qke," (Swin model)"),Qke.forEach(t),IYo=i(Te),Ev=n(Te,"LI",{});var Hke=s(Ev);k_e=n(Hke,"STRONG",{});var Mbt=s(k_e);NYo=r(Mbt,"van"),Mbt.forEach(t),qYo=r(Hke," \u2014 "),YX=n(Hke,"A",{href:!0});var Ebt=s(YX);jYo=r(Ebt,"VanForImageClassification"),Ebt.forEach(t),DYo=r(Hke," (VAN model)"),Hke.forEach(t),GYo=i(Te),Cv=n(Te,"LI",{});var Uke=s(Cv);S_e=n(Uke,"STRONG",{});var Cbt=s(S_e);OYo=r(Cbt,"vit"),Cbt.forEach(t),VYo=r(Uke," \u2014 "),KX=n(Uke,"A",{href:!0});var wbt=s(KX);XYo=r(wbt,"ViTForImageClassification"),wbt.forEach(t),zYo=r(Uke," (ViT model)"),Uke.forEach(t),Te.forEach(t),WYo=i(ga),wv=n(ga,"P",{});var Jke=s(wv);QYo=r(Jke,"The model is set in evaluation mode by default using "),R_e=n(Jke,"CODE",{});var Abt=s(R_e);HYo=r(Abt,"model.eval()"),Abt.forEach(t),UYo=r(Jke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=n(Jke,"CODE",{});var ybt=s(P_e);JYo=r(ybt,"model.train()"),ybt.forEach(t),Jke.forEach(t),YYo=i(ga),T(Av.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),Tje=i(f),id=n(f,"H2",{class:!0});var wGe=s(id);yv=n(wGe,"A",{id:!0,class:!0,href:!0});var Lbt=s(yv);B_e=n(Lbt,"SPAN",{});var xbt=s(B_e);T(pL.$$.fragment,xbt),xbt.forEach(t),Lbt.forEach(t),KYo=i(wGe),I_e=n(wGe,"SPAN",{});var $bt=s(I_e);ZYo=r($bt,"AutoModelForVision2Seq"),$bt.forEach(t),wGe.forEach(t),Mje=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(_L.$$.fragment,el),eKo=i(el),dd=n(el,"P",{});var nee=s(dd);oKo=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ZX=n(nee,"A",{href:!0});var kbt=s(ZX);rKo=r(kbt,"from_pretrained()"),kbt.forEach(t),tKo=r(nee," class method or the "),ez=n(nee,"A",{href:!0});var Sbt=s(ez);aKo=r(Sbt,"from_config()"),Sbt.forEach(t),nKo=r(nee,` class
method.`),nee.forEach(t),sKo=i(el),uL=n(el,"P",{});var AGe=s(uL);lKo=r(AGe,"This class cannot be instantiated directly using "),N_e=n(AGe,"CODE",{});var Rbt=s(N_e);iKo=r(Rbt,"__init__()"),Rbt.forEach(t),dKo=r(AGe," (throws an error)."),AGe.forEach(t),cKo=i(el),ut=n(el,"DIV",{class:!0});var m6=s(ut);T(bL.$$.fragment,m6),fKo=i(m6),q_e=n(m6,"P",{});var Pbt=s(q_e);mKo=r(Pbt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pbt.forEach(t),gKo=i(m6),cd=n(m6,"P",{});var see=s(cd);hKo=r(see,`Note:
Loading a model from its configuration file does `),j_e=n(see,"STRONG",{});var Bbt=s(j_e);pKo=r(Bbt,"not"),Bbt.forEach(t),_Ko=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(see,"A",{href:!0});var Ibt=s(oz);uKo=r(Ibt,"from_pretrained()"),Ibt.forEach(t),bKo=r(see," to load the model weights."),see.forEach(t),vKo=i(m6),T(Lv.$$.fragment,m6),m6.forEach(t),FKo=i(el),io=n(el,"DIV",{class:!0});var ha=s(io);T(vL.$$.fragment,ha),TKo=i(ha),D_e=n(ha,"P",{});var Nbt=s(D_e);MKo=r(Nbt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Nbt.forEach(t),EKo=i(ha),Ga=n(ha,"P",{});var g6=s(Ga);CKo=r(g6,"The model class to instantiate is selected based on the "),G_e=n(g6,"CODE",{});var qbt=s(G_e);wKo=r(qbt,"model_type"),qbt.forEach(t),AKo=r(g6,` property of the config object (either
passed as an argument or loaded from `),O_e=n(g6,"CODE",{});var jbt=s(O_e);yKo=r(jbt,"pretrained_model_name_or_path"),jbt.forEach(t),LKo=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=n(g6,"CODE",{});var Dbt=s(V_e);xKo=r(Dbt,"pretrained_model_name_or_path"),Dbt.forEach(t),$Ko=r(g6,":"),g6.forEach(t),kKo=i(ha),X_e=n(ha,"UL",{});var Gbt=s(X_e);xv=n(Gbt,"LI",{});var Yke=s(xv);z_e=n(Yke,"STRONG",{});var Obt=s(z_e);SKo=r(Obt,"vision-encoder-decoder"),Obt.forEach(t),RKo=r(Yke," \u2014 "),rz=n(Yke,"A",{href:!0});var Vbt=s(rz);PKo=r(Vbt,"VisionEncoderDecoderModel"),Vbt.forEach(t),BKo=r(Yke," (Vision Encoder decoder model)"),Yke.forEach(t),Gbt.forEach(t),IKo=i(ha),$v=n(ha,"P",{});var Kke=s($v);NKo=r(Kke,"The model is set in evaluation mode by default using "),W_e=n(Kke,"CODE",{});var Xbt=s(W_e);qKo=r(Xbt,"model.eval()"),Xbt.forEach(t),jKo=r(Kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q_e=n(Kke,"CODE",{});var zbt=s(Q_e);DKo=r(zbt,"model.train()"),zbt.forEach(t),Kke.forEach(t),GKo=i(ha),T(kv.$$.fragment,ha),ha.forEach(t),el.forEach(t),Eje=i(f),fd=n(f,"H2",{class:!0});var yGe=s(fd);Sv=n(yGe,"A",{id:!0,class:!0,href:!0});var Wbt=s(Sv);H_e=n(Wbt,"SPAN",{});var Qbt=s(H_e);T(FL.$$.fragment,Qbt),Qbt.forEach(t),Wbt.forEach(t),OKo=i(yGe),U_e=n(yGe,"SPAN",{});var Hbt=s(U_e);VKo=r(Hbt,"AutoModelForAudioClassification"),Hbt.forEach(t),yGe.forEach(t),Cje=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(TL.$$.fragment,ol),XKo=i(ol),md=n(ol,"P",{});var lee=s(md);zKo=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),tz=n(lee,"A",{href:!0});var Ubt=s(tz);WKo=r(Ubt,"from_pretrained()"),Ubt.forEach(t),QKo=r(lee," class method or the "),az=n(lee,"A",{href:!0});var Jbt=s(az);HKo=r(Jbt,"from_config()"),Jbt.forEach(t),UKo=r(lee,` class
method.`),lee.forEach(t),JKo=i(ol),ML=n(ol,"P",{});var LGe=s(ML);YKo=r(LGe,"This class cannot be instantiated directly using "),J_e=n(LGe,"CODE",{});var Ybt=s(J_e);KKo=r(Ybt,"__init__()"),Ybt.forEach(t),ZKo=r(LGe," (throws an error)."),LGe.forEach(t),eZo=i(ol),bt=n(ol,"DIV",{class:!0});var h6=s(bt);T(EL.$$.fragment,h6),oZo=i(h6),Y_e=n(h6,"P",{});var Kbt=s(Y_e);rZo=r(Kbt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Kbt.forEach(t),tZo=i(h6),gd=n(h6,"P",{});var iee=s(gd);aZo=r(iee,`Note:
Loading a model from its configuration file does `),K_e=n(iee,"STRONG",{});var Zbt=s(K_e);nZo=r(Zbt,"not"),Zbt.forEach(t),sZo=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=n(iee,"A",{href:!0});var e2t=s(nz);lZo=r(e2t,"from_pretrained()"),e2t.forEach(t),iZo=r(iee," to load the model weights."),iee.forEach(t),dZo=i(h6),T(Rv.$$.fragment,h6),h6.forEach(t),cZo=i(ol),co=n(ol,"DIV",{class:!0});var pa=s(co);T(CL.$$.fragment,pa),fZo=i(pa),Z_e=n(pa,"P",{});var o2t=s(Z_e);mZo=r(o2t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),o2t.forEach(t),gZo=i(pa),Oa=n(pa,"P",{});var p6=s(Oa);hZo=r(p6,"The model class to instantiate is selected based on the "),eue=n(p6,"CODE",{});var r2t=s(eue);pZo=r(r2t,"model_type"),r2t.forEach(t),_Zo=r(p6,` property of the config object (either
passed as an argument or loaded from `),oue=n(p6,"CODE",{});var t2t=s(oue);uZo=r(t2t,"pretrained_model_name_or_path"),t2t.forEach(t),bZo=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=n(p6,"CODE",{});var a2t=s(rue);vZo=r(a2t,"pretrained_model_name_or_path"),a2t.forEach(t),FZo=r(p6,":"),p6.forEach(t),TZo=i(pa),Se=n(pa,"UL",{});var Ve=s(Se);Pv=n(Ve,"LI",{});var Zke=s(Pv);tue=n(Zke,"STRONG",{});var n2t=s(tue);MZo=r(n2t,"data2vec-audio"),n2t.forEach(t),EZo=r(Zke," \u2014 "),sz=n(Zke,"A",{href:!0});var s2t=s(sz);CZo=r(s2t,"Data2VecAudioForSequenceClassification"),s2t.forEach(t),wZo=r(Zke," (Data2VecAudio model)"),Zke.forEach(t),AZo=i(Ve),Bv=n(Ve,"LI",{});var eSe=s(Bv);aue=n(eSe,"STRONG",{});var l2t=s(aue);yZo=r(l2t,"hubert"),l2t.forEach(t),LZo=r(eSe," \u2014 "),lz=n(eSe,"A",{href:!0});var i2t=s(lz);xZo=r(i2t,"HubertForSequenceClassification"),i2t.forEach(t),$Zo=r(eSe," (Hubert model)"),eSe.forEach(t),kZo=i(Ve),Iv=n(Ve,"LI",{});var oSe=s(Iv);nue=n(oSe,"STRONG",{});var d2t=s(nue);SZo=r(d2t,"sew"),d2t.forEach(t),RZo=r(oSe," \u2014 "),iz=n(oSe,"A",{href:!0});var c2t=s(iz);PZo=r(c2t,"SEWForSequenceClassification"),c2t.forEach(t),BZo=r(oSe," (SEW model)"),oSe.forEach(t),IZo=i(Ve),Nv=n(Ve,"LI",{});var rSe=s(Nv);sue=n(rSe,"STRONG",{});var f2t=s(sue);NZo=r(f2t,"sew-d"),f2t.forEach(t),qZo=r(rSe," \u2014 "),dz=n(rSe,"A",{href:!0});var m2t=s(dz);jZo=r(m2t,"SEWDForSequenceClassification"),m2t.forEach(t),DZo=r(rSe," (SEW-D model)"),rSe.forEach(t),GZo=i(Ve),qv=n(Ve,"LI",{});var tSe=s(qv);lue=n(tSe,"STRONG",{});var g2t=s(lue);OZo=r(g2t,"unispeech"),g2t.forEach(t),VZo=r(tSe," \u2014 "),cz=n(tSe,"A",{href:!0});var h2t=s(cz);XZo=r(h2t,"UniSpeechForSequenceClassification"),h2t.forEach(t),zZo=r(tSe," (UniSpeech model)"),tSe.forEach(t),WZo=i(Ve),jv=n(Ve,"LI",{});var aSe=s(jv);iue=n(aSe,"STRONG",{});var p2t=s(iue);QZo=r(p2t,"unispeech-sat"),p2t.forEach(t),HZo=r(aSe," \u2014 "),fz=n(aSe,"A",{href:!0});var _2t=s(fz);UZo=r(_2t,"UniSpeechSatForSequenceClassification"),_2t.forEach(t),JZo=r(aSe," (UniSpeechSat model)"),aSe.forEach(t),YZo=i(Ve),Dv=n(Ve,"LI",{});var nSe=s(Dv);due=n(nSe,"STRONG",{});var u2t=s(due);KZo=r(u2t,"wav2vec2"),u2t.forEach(t),ZZo=r(nSe," \u2014 "),mz=n(nSe,"A",{href:!0});var b2t=s(mz);eer=r(b2t,"Wav2Vec2ForSequenceClassification"),b2t.forEach(t),oer=r(nSe," (Wav2Vec2 model)"),nSe.forEach(t),rer=i(Ve),Gv=n(Ve,"LI",{});var sSe=s(Gv);cue=n(sSe,"STRONG",{});var v2t=s(cue);ter=r(v2t,"wav2vec2-conformer"),v2t.forEach(t),aer=r(sSe," \u2014 "),gz=n(sSe,"A",{href:!0});var F2t=s(gz);ner=r(F2t,"Wav2Vec2ConformerForSequenceClassification"),F2t.forEach(t),ser=r(sSe," (Wav2Vec2-Conformer model)"),sSe.forEach(t),ler=i(Ve),Ov=n(Ve,"LI",{});var lSe=s(Ov);fue=n(lSe,"STRONG",{});var T2t=s(fue);ier=r(T2t,"wavlm"),T2t.forEach(t),der=r(lSe," \u2014 "),hz=n(lSe,"A",{href:!0});var M2t=s(hz);cer=r(M2t,"WavLMForSequenceClassification"),M2t.forEach(t),fer=r(lSe," (WavLM model)"),lSe.forEach(t),Ve.forEach(t),mer=i(pa),Vv=n(pa,"P",{});var iSe=s(Vv);ger=r(iSe,"The model is set in evaluation mode by default using "),mue=n(iSe,"CODE",{});var E2t=s(mue);her=r(E2t,"model.eval()"),E2t.forEach(t),per=r(iSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gue=n(iSe,"CODE",{});var C2t=s(gue);_er=r(C2t,"model.train()"),C2t.forEach(t),iSe.forEach(t),uer=i(pa),T(Xv.$$.fragment,pa),pa.forEach(t),ol.forEach(t),wje=i(f),hd=n(f,"H2",{class:!0});var xGe=s(hd);zv=n(xGe,"A",{id:!0,class:!0,href:!0});var w2t=s(zv);hue=n(w2t,"SPAN",{});var A2t=s(hue);T(wL.$$.fragment,A2t),A2t.forEach(t),w2t.forEach(t),ber=i(xGe),pue=n(xGe,"SPAN",{});var y2t=s(pue);ver=r(y2t,"AutoModelForAudioFrameClassification"),y2t.forEach(t),xGe.forEach(t),Aje=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(AL.$$.fragment,rl),Fer=i(rl),pd=n(rl,"P",{});var dee=s(pd);Ter=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),pz=n(dee,"A",{href:!0});var L2t=s(pz);Mer=r(L2t,"from_pretrained()"),L2t.forEach(t),Eer=r(dee," class method or the "),_z=n(dee,"A",{href:!0});var x2t=s(_z);Cer=r(x2t,"from_config()"),x2t.forEach(t),wer=r(dee,` class
method.`),dee.forEach(t),Aer=i(rl),yL=n(rl,"P",{});var $Ge=s(yL);yer=r($Ge,"This class cannot be instantiated directly using "),_ue=n($Ge,"CODE",{});var $2t=s(_ue);Ler=r($2t,"__init__()"),$2t.forEach(t),xer=r($Ge," (throws an error)."),$Ge.forEach(t),$er=i(rl),vt=n(rl,"DIV",{class:!0});var _6=s(vt);T(LL.$$.fragment,_6),ker=i(_6),uue=n(_6,"P",{});var k2t=s(uue);Ser=r(k2t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),k2t.forEach(t),Rer=i(_6),_d=n(_6,"P",{});var cee=s(_d);Per=r(cee,`Note:
Loading a model from its configuration file does `),bue=n(cee,"STRONG",{});var S2t=s(bue);Ber=r(S2t,"not"),S2t.forEach(t),Ier=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=n(cee,"A",{href:!0});var R2t=s(uz);Ner=r(R2t,"from_pretrained()"),R2t.forEach(t),qer=r(cee," to load the model weights."),cee.forEach(t),jer=i(_6),T(Wv.$$.fragment,_6),_6.forEach(t),Der=i(rl),fo=n(rl,"DIV",{class:!0});var _a=s(fo);T(xL.$$.fragment,_a),Ger=i(_a),vue=n(_a,"P",{});var P2t=s(vue);Oer=r(P2t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),P2t.forEach(t),Ver=i(_a),Va=n(_a,"P",{});var u6=s(Va);Xer=r(u6,"The model class to instantiate is selected based on the "),Fue=n(u6,"CODE",{});var B2t=s(Fue);zer=r(B2t,"model_type"),B2t.forEach(t),Wer=r(u6,` property of the config object (either
passed as an argument or loaded from `),Tue=n(u6,"CODE",{});var I2t=s(Tue);Qer=r(I2t,"pretrained_model_name_or_path"),I2t.forEach(t),Her=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mue=n(u6,"CODE",{});var N2t=s(Mue);Uer=r(N2t,"pretrained_model_name_or_path"),N2t.forEach(t),Jer=r(u6,":"),u6.forEach(t),Yer=i(_a),Kr=n(_a,"UL",{});var tl=s(Kr);Qv=n(tl,"LI",{});var dSe=s(Qv);Eue=n(dSe,"STRONG",{});var q2t=s(Eue);Ker=r(q2t,"data2vec-audio"),q2t.forEach(t),Zer=r(dSe," \u2014 "),bz=n(dSe,"A",{href:!0});var j2t=s(bz);eor=r(j2t,"Data2VecAudioForAudioFrameClassification"),j2t.forEach(t),oor=r(dSe," (Data2VecAudio model)"),dSe.forEach(t),ror=i(tl),Hv=n(tl,"LI",{});var cSe=s(Hv);Cue=n(cSe,"STRONG",{});var D2t=s(Cue);tor=r(D2t,"unispeech-sat"),D2t.forEach(t),aor=r(cSe," \u2014 "),vz=n(cSe,"A",{href:!0});var G2t=s(vz);nor=r(G2t,"UniSpeechSatForAudioFrameClassification"),G2t.forEach(t),sor=r(cSe," (UniSpeechSat model)"),cSe.forEach(t),lor=i(tl),Uv=n(tl,"LI",{});var fSe=s(Uv);wue=n(fSe,"STRONG",{});var O2t=s(wue);ior=r(O2t,"wav2vec2"),O2t.forEach(t),dor=r(fSe," \u2014 "),Fz=n(fSe,"A",{href:!0});var V2t=s(Fz);cor=r(V2t,"Wav2Vec2ForAudioFrameClassification"),V2t.forEach(t),mor=r(fSe," (Wav2Vec2 model)"),fSe.forEach(t),gor=i(tl),Jv=n(tl,"LI",{});var mSe=s(Jv);Aue=n(mSe,"STRONG",{});var X2t=s(Aue);hor=r(X2t,"wav2vec2-conformer"),X2t.forEach(t),por=r(mSe," \u2014 "),Tz=n(mSe,"A",{href:!0});var z2t=s(Tz);_or=r(z2t,"Wav2Vec2ConformerForAudioFrameClassification"),z2t.forEach(t),uor=r(mSe," (Wav2Vec2-Conformer model)"),mSe.forEach(t),bor=i(tl),Yv=n(tl,"LI",{});var gSe=s(Yv);yue=n(gSe,"STRONG",{});var W2t=s(yue);vor=r(W2t,"wavlm"),W2t.forEach(t),For=r(gSe," \u2014 "),Mz=n(gSe,"A",{href:!0});var Q2t=s(Mz);Tor=r(Q2t,"WavLMForAudioFrameClassification"),Q2t.forEach(t),Mor=r(gSe," (WavLM model)"),gSe.forEach(t),tl.forEach(t),Eor=i(_a),Kv=n(_a,"P",{});var hSe=s(Kv);Cor=r(hSe,"The model is set in evaluation mode by default using "),Lue=n(hSe,"CODE",{});var H2t=s(Lue);wor=r(H2t,"model.eval()"),H2t.forEach(t),Aor=r(hSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=n(hSe,"CODE",{});var U2t=s(xue);yor=r(U2t,"model.train()"),U2t.forEach(t),hSe.forEach(t),Lor=i(_a),T(Zv.$$.fragment,_a),_a.forEach(t),rl.forEach(t),yje=i(f),ud=n(f,"H2",{class:!0});var kGe=s(ud);e3=n(kGe,"A",{id:!0,class:!0,href:!0});var J2t=s(e3);$ue=n(J2t,"SPAN",{});var Y2t=s($ue);T($L.$$.fragment,Y2t),Y2t.forEach(t),J2t.forEach(t),xor=i(kGe),kue=n(kGe,"SPAN",{});var K2t=s(kue);$or=r(K2t,"AutoModelForCTC"),K2t.forEach(t),kGe.forEach(t),Lje=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(kL.$$.fragment,al),kor=i(al),bd=n(al,"P",{});var fee=s(bd);Sor=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Ez=n(fee,"A",{href:!0});var Z2t=s(Ez);Ror=r(Z2t,"from_pretrained()"),Z2t.forEach(t),Por=r(fee," class method or the "),Cz=n(fee,"A",{href:!0});var e4t=s(Cz);Bor=r(e4t,"from_config()"),e4t.forEach(t),Ior=r(fee,` class
method.`),fee.forEach(t),Nor=i(al),SL=n(al,"P",{});var SGe=s(SL);qor=r(SGe,"This class cannot be instantiated directly using "),Sue=n(SGe,"CODE",{});var o4t=s(Sue);jor=r(o4t,"__init__()"),o4t.forEach(t),Dor=r(SGe," (throws an error)."),SGe.forEach(t),Gor=i(al),Ft=n(al,"DIV",{class:!0});var b6=s(Ft);T(RL.$$.fragment,b6),Oor=i(b6),Rue=n(b6,"P",{});var r4t=s(Rue);Vor=r(r4t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),r4t.forEach(t),Xor=i(b6),vd=n(b6,"P",{});var mee=s(vd);zor=r(mee,`Note:
Loading a model from its configuration file does `),Pue=n(mee,"STRONG",{});var t4t=s(Pue);Wor=r(t4t,"not"),t4t.forEach(t),Qor=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=n(mee,"A",{href:!0});var a4t=s(wz);Hor=r(a4t,"from_pretrained()"),a4t.forEach(t),Uor=r(mee," to load the model weights."),mee.forEach(t),Jor=i(b6),T(o3.$$.fragment,b6),b6.forEach(t),Yor=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(PL.$$.fragment,ua),Kor=i(ua),Bue=n(ua,"P",{});var n4t=s(Bue);Zor=r(n4t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),n4t.forEach(t),err=i(ua),Xa=n(ua,"P",{});var v6=s(Xa);orr=r(v6,"The model class to instantiate is selected based on the "),Iue=n(v6,"CODE",{});var s4t=s(Iue);rrr=r(s4t,"model_type"),s4t.forEach(t),trr=r(v6,` property of the config object (either
passed as an argument or loaded from `),Nue=n(v6,"CODE",{});var l4t=s(Nue);arr=r(l4t,"pretrained_model_name_or_path"),l4t.forEach(t),nrr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=n(v6,"CODE",{});var i4t=s(que);srr=r(i4t,"pretrained_model_name_or_path"),i4t.forEach(t),lrr=r(v6,":"),v6.forEach(t),irr=i(ua),Re=n(ua,"UL",{});var Xe=s(Re);r3=n(Xe,"LI",{});var pSe=s(r3);jue=n(pSe,"STRONG",{});var d4t=s(jue);drr=r(d4t,"data2vec-audio"),d4t.forEach(t),crr=r(pSe," \u2014 "),Az=n(pSe,"A",{href:!0});var c4t=s(Az);frr=r(c4t,"Data2VecAudioForCTC"),c4t.forEach(t),mrr=r(pSe," (Data2VecAudio model)"),pSe.forEach(t),grr=i(Xe),t3=n(Xe,"LI",{});var _Se=s(t3);Due=n(_Se,"STRONG",{});var f4t=s(Due);hrr=r(f4t,"hubert"),f4t.forEach(t),prr=r(_Se," \u2014 "),yz=n(_Se,"A",{href:!0});var m4t=s(yz);_rr=r(m4t,"HubertForCTC"),m4t.forEach(t),urr=r(_Se," (Hubert model)"),_Se.forEach(t),brr=i(Xe),a3=n(Xe,"LI",{});var uSe=s(a3);Gue=n(uSe,"STRONG",{});var g4t=s(Gue);vrr=r(g4t,"sew"),g4t.forEach(t),Frr=r(uSe," \u2014 "),Lz=n(uSe,"A",{href:!0});var h4t=s(Lz);Trr=r(h4t,"SEWForCTC"),h4t.forEach(t),Mrr=r(uSe," (SEW model)"),uSe.forEach(t),Err=i(Xe),n3=n(Xe,"LI",{});var bSe=s(n3);Oue=n(bSe,"STRONG",{});var p4t=s(Oue);Crr=r(p4t,"sew-d"),p4t.forEach(t),wrr=r(bSe," \u2014 "),xz=n(bSe,"A",{href:!0});var _4t=s(xz);Arr=r(_4t,"SEWDForCTC"),_4t.forEach(t),yrr=r(bSe," (SEW-D model)"),bSe.forEach(t),Lrr=i(Xe),s3=n(Xe,"LI",{});var vSe=s(s3);Vue=n(vSe,"STRONG",{});var u4t=s(Vue);xrr=r(u4t,"unispeech"),u4t.forEach(t),$rr=r(vSe," \u2014 "),$z=n(vSe,"A",{href:!0});var b4t=s($z);krr=r(b4t,"UniSpeechForCTC"),b4t.forEach(t),Srr=r(vSe," (UniSpeech model)"),vSe.forEach(t),Rrr=i(Xe),l3=n(Xe,"LI",{});var FSe=s(l3);Xue=n(FSe,"STRONG",{});var v4t=s(Xue);Prr=r(v4t,"unispeech-sat"),v4t.forEach(t),Brr=r(FSe," \u2014 "),kz=n(FSe,"A",{href:!0});var F4t=s(kz);Irr=r(F4t,"UniSpeechSatForCTC"),F4t.forEach(t),Nrr=r(FSe," (UniSpeechSat model)"),FSe.forEach(t),qrr=i(Xe),i3=n(Xe,"LI",{});var TSe=s(i3);zue=n(TSe,"STRONG",{});var T4t=s(zue);jrr=r(T4t,"wav2vec2"),T4t.forEach(t),Drr=r(TSe," \u2014 "),Sz=n(TSe,"A",{href:!0});var M4t=s(Sz);Grr=r(M4t,"Wav2Vec2ForCTC"),M4t.forEach(t),Orr=r(TSe," (Wav2Vec2 model)"),TSe.forEach(t),Vrr=i(Xe),d3=n(Xe,"LI",{});var MSe=s(d3);Wue=n(MSe,"STRONG",{});var E4t=s(Wue);Xrr=r(E4t,"wav2vec2-conformer"),E4t.forEach(t),zrr=r(MSe," \u2014 "),Rz=n(MSe,"A",{href:!0});var C4t=s(Rz);Wrr=r(C4t,"Wav2Vec2ConformerForCTC"),C4t.forEach(t),Qrr=r(MSe," (Wav2Vec2-Conformer model)"),MSe.forEach(t),Hrr=i(Xe),c3=n(Xe,"LI",{});var ESe=s(c3);Que=n(ESe,"STRONG",{});var w4t=s(Que);Urr=r(w4t,"wavlm"),w4t.forEach(t),Jrr=r(ESe," \u2014 "),Pz=n(ESe,"A",{href:!0});var A4t=s(Pz);Yrr=r(A4t,"WavLMForCTC"),A4t.forEach(t),Krr=r(ESe," (WavLM model)"),ESe.forEach(t),Xe.forEach(t),Zrr=i(ua),f3=n(ua,"P",{});var CSe=s(f3);etr=r(CSe,"The model is set in evaluation mode by default using "),Hue=n(CSe,"CODE",{});var y4t=s(Hue);otr=r(y4t,"model.eval()"),y4t.forEach(t),rtr=r(CSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=n(CSe,"CODE",{});var L4t=s(Uue);ttr=r(L4t,"model.train()"),L4t.forEach(t),CSe.forEach(t),atr=i(ua),T(m3.$$.fragment,ua),ua.forEach(t),al.forEach(t),xje=i(f),Fd=n(f,"H2",{class:!0});var RGe=s(Fd);g3=n(RGe,"A",{id:!0,class:!0,href:!0});var x4t=s(g3);Jue=n(x4t,"SPAN",{});var $4t=s(Jue);T(BL.$$.fragment,$4t),$4t.forEach(t),x4t.forEach(t),ntr=i(RGe),Yue=n(RGe,"SPAN",{});var k4t=s(Yue);str=r(k4t,"AutoModelForSpeechSeq2Seq"),k4t.forEach(t),RGe.forEach(t),$je=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(IL.$$.fragment,nl),ltr=i(nl),Td=n(nl,"P",{});var gee=s(Td);itr=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Bz=n(gee,"A",{href:!0});var S4t=s(Bz);dtr=r(S4t,"from_pretrained()"),S4t.forEach(t),ctr=r(gee," class method or the "),Iz=n(gee,"A",{href:!0});var R4t=s(Iz);ftr=r(R4t,"from_config()"),R4t.forEach(t),mtr=r(gee,` class
method.`),gee.forEach(t),gtr=i(nl),NL=n(nl,"P",{});var PGe=s(NL);htr=r(PGe,"This class cannot be instantiated directly using "),Kue=n(PGe,"CODE",{});var P4t=s(Kue);ptr=r(P4t,"__init__()"),P4t.forEach(t),_tr=r(PGe," (throws an error)."),PGe.forEach(t),utr=i(nl),Tt=n(nl,"DIV",{class:!0});var F6=s(Tt);T(qL.$$.fragment,F6),btr=i(F6),Zue=n(F6,"P",{});var B4t=s(Zue);vtr=r(B4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),B4t.forEach(t),Ftr=i(F6),Md=n(F6,"P",{});var hee=s(Md);Ttr=r(hee,`Note:
Loading a model from its configuration file does `),e1e=n(hee,"STRONG",{});var I4t=s(e1e);Mtr=r(I4t,"not"),I4t.forEach(t),Etr=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(hee,"A",{href:!0});var N4t=s(Nz);Ctr=r(N4t,"from_pretrained()"),N4t.forEach(t),wtr=r(hee," to load the model weights."),hee.forEach(t),Atr=i(F6),T(h3.$$.fragment,F6),F6.forEach(t),ytr=i(nl),go=n(nl,"DIV",{class:!0});var ba=s(go);T(jL.$$.fragment,ba),Ltr=i(ba),o1e=n(ba,"P",{});var q4t=s(o1e);xtr=r(q4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),q4t.forEach(t),$tr=i(ba),za=n(ba,"P",{});var T6=s(za);ktr=r(T6,"The model class to instantiate is selected based on the "),r1e=n(T6,"CODE",{});var j4t=s(r1e);Str=r(j4t,"model_type"),j4t.forEach(t),Rtr=r(T6,` property of the config object (either
passed as an argument or loaded from `),t1e=n(T6,"CODE",{});var D4t=s(t1e);Ptr=r(D4t,"pretrained_model_name_or_path"),D4t.forEach(t),Btr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=n(T6,"CODE",{});var G4t=s(a1e);Itr=r(G4t,"pretrained_model_name_or_path"),G4t.forEach(t),Ntr=r(T6,":"),T6.forEach(t),qtr=i(ba),DL=n(ba,"UL",{});var BGe=s(DL);p3=n(BGe,"LI",{});var wSe=s(p3);n1e=n(wSe,"STRONG",{});var O4t=s(n1e);jtr=r(O4t,"speech-encoder-decoder"),O4t.forEach(t),Dtr=r(wSe," \u2014 "),qz=n(wSe,"A",{href:!0});var V4t=s(qz);Gtr=r(V4t,"SpeechEncoderDecoderModel"),V4t.forEach(t),Otr=r(wSe," (Speech Encoder decoder model)"),wSe.forEach(t),Vtr=i(BGe),_3=n(BGe,"LI",{});var ASe=s(_3);s1e=n(ASe,"STRONG",{});var X4t=s(s1e);Xtr=r(X4t,"speech_to_text"),X4t.forEach(t),ztr=r(ASe," \u2014 "),jz=n(ASe,"A",{href:!0});var z4t=s(jz);Wtr=r(z4t,"Speech2TextForConditionalGeneration"),z4t.forEach(t),Qtr=r(ASe," (Speech2Text model)"),ASe.forEach(t),BGe.forEach(t),Htr=i(ba),u3=n(ba,"P",{});var ySe=s(u3);Utr=r(ySe,"The model is set in evaluation mode by default using "),l1e=n(ySe,"CODE",{});var W4t=s(l1e);Jtr=r(W4t,"model.eval()"),W4t.forEach(t),Ytr=r(ySe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i1e=n(ySe,"CODE",{});var Q4t=s(i1e);Ktr=r(Q4t,"model.train()"),Q4t.forEach(t),ySe.forEach(t),Ztr=i(ba),T(b3.$$.fragment,ba),ba.forEach(t),nl.forEach(t),kje=i(f),Ed=n(f,"H2",{class:!0});var IGe=s(Ed);v3=n(IGe,"A",{id:!0,class:!0,href:!0});var H4t=s(v3);d1e=n(H4t,"SPAN",{});var U4t=s(d1e);T(GL.$$.fragment,U4t),U4t.forEach(t),H4t.forEach(t),ear=i(IGe),c1e=n(IGe,"SPAN",{});var J4t=s(c1e);oar=r(J4t,"AutoModelForAudioXVector"),J4t.forEach(t),IGe.forEach(t),Sje=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(OL.$$.fragment,sl),rar=i(sl),Cd=n(sl,"P",{});var pee=s(Cd);tar=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Dz=n(pee,"A",{href:!0});var Y4t=s(Dz);aar=r(Y4t,"from_pretrained()"),Y4t.forEach(t),nar=r(pee," class method or the "),Gz=n(pee,"A",{href:!0});var K4t=s(Gz);sar=r(K4t,"from_config()"),K4t.forEach(t),lar=r(pee,` class
method.`),pee.forEach(t),iar=i(sl),VL=n(sl,"P",{});var NGe=s(VL);dar=r(NGe,"This class cannot be instantiated directly using "),f1e=n(NGe,"CODE",{});var Z4t=s(f1e);car=r(Z4t,"__init__()"),Z4t.forEach(t),far=r(NGe," (throws an error)."),NGe.forEach(t),mar=i(sl),Mt=n(sl,"DIV",{class:!0});var M6=s(Mt);T(XL.$$.fragment,M6),gar=i(M6),m1e=n(M6,"P",{});var e5t=s(m1e);har=r(e5t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),e5t.forEach(t),par=i(M6),wd=n(M6,"P",{});var _ee=s(wd);_ar=r(_ee,`Note:
Loading a model from its configuration file does `),g1e=n(_ee,"STRONG",{});var o5t=s(g1e);uar=r(o5t,"not"),o5t.forEach(t),bar=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=n(_ee,"A",{href:!0});var r5t=s(Oz);Far=r(r5t,"from_pretrained()"),r5t.forEach(t),Tar=r(_ee," to load the model weights."),_ee.forEach(t),Mar=i(M6),T(F3.$$.fragment,M6),M6.forEach(t),Ear=i(sl),ho=n(sl,"DIV",{class:!0});var va=s(ho);T(zL.$$.fragment,va),Car=i(va),h1e=n(va,"P",{});var t5t=s(h1e);war=r(t5t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),t5t.forEach(t),Aar=i(va),Wa=n(va,"P",{});var E6=s(Wa);yar=r(E6,"The model class to instantiate is selected based on the "),p1e=n(E6,"CODE",{});var a5t=s(p1e);Lar=r(a5t,"model_type"),a5t.forEach(t),xar=r(E6,` property of the config object (either
passed as an argument or loaded from `),_1e=n(E6,"CODE",{});var n5t=s(_1e);$ar=r(n5t,"pretrained_model_name_or_path"),n5t.forEach(t),kar=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=n(E6,"CODE",{});var s5t=s(u1e);Sar=r(s5t,"pretrained_model_name_or_path"),s5t.forEach(t),Rar=r(E6,":"),E6.forEach(t),Par=i(va),Zr=n(va,"UL",{});var ll=s(Zr);T3=n(ll,"LI",{});var LSe=s(T3);b1e=n(LSe,"STRONG",{});var l5t=s(b1e);Bar=r(l5t,"data2vec-audio"),l5t.forEach(t),Iar=r(LSe," \u2014 "),Vz=n(LSe,"A",{href:!0});var i5t=s(Vz);Nar=r(i5t,"Data2VecAudioForXVector"),i5t.forEach(t),qar=r(LSe," (Data2VecAudio model)"),LSe.forEach(t),jar=i(ll),M3=n(ll,"LI",{});var xSe=s(M3);v1e=n(xSe,"STRONG",{});var d5t=s(v1e);Dar=r(d5t,"unispeech-sat"),d5t.forEach(t),Gar=r(xSe," \u2014 "),Xz=n(xSe,"A",{href:!0});var c5t=s(Xz);Oar=r(c5t,"UniSpeechSatForXVector"),c5t.forEach(t),Var=r(xSe," (UniSpeechSat model)"),xSe.forEach(t),Xar=i(ll),E3=n(ll,"LI",{});var $Se=s(E3);F1e=n($Se,"STRONG",{});var f5t=s(F1e);zar=r(f5t,"wav2vec2"),f5t.forEach(t),War=r($Se," \u2014 "),zz=n($Se,"A",{href:!0});var m5t=s(zz);Qar=r(m5t,"Wav2Vec2ForXVector"),m5t.forEach(t),Har=r($Se," (Wav2Vec2 model)"),$Se.forEach(t),Uar=i(ll),C3=n(ll,"LI",{});var kSe=s(C3);T1e=n(kSe,"STRONG",{});var g5t=s(T1e);Jar=r(g5t,"wav2vec2-conformer"),g5t.forEach(t),Yar=r(kSe," \u2014 "),Wz=n(kSe,"A",{href:!0});var h5t=s(Wz);Kar=r(h5t,"Wav2Vec2ConformerForXVector"),h5t.forEach(t),Zar=r(kSe," (Wav2Vec2-Conformer model)"),kSe.forEach(t),enr=i(ll),w3=n(ll,"LI",{});var SSe=s(w3);M1e=n(SSe,"STRONG",{});var p5t=s(M1e);onr=r(p5t,"wavlm"),p5t.forEach(t),rnr=r(SSe," \u2014 "),Qz=n(SSe,"A",{href:!0});var _5t=s(Qz);tnr=r(_5t,"WavLMForXVector"),_5t.forEach(t),anr=r(SSe," (WavLM model)"),SSe.forEach(t),ll.forEach(t),nnr=i(va),A3=n(va,"P",{});var RSe=s(A3);snr=r(RSe,"The model is set in evaluation mode by default using "),E1e=n(RSe,"CODE",{});var u5t=s(E1e);lnr=r(u5t,"model.eval()"),u5t.forEach(t),inr=r(RSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C1e=n(RSe,"CODE",{});var b5t=s(C1e);dnr=r(b5t,"model.train()"),b5t.forEach(t),RSe.forEach(t),cnr=i(va),T(y3.$$.fragment,va),va.forEach(t),sl.forEach(t),Rje=i(f),Ad=n(f,"H2",{class:!0});var qGe=s(Ad);L3=n(qGe,"A",{id:!0,class:!0,href:!0});var v5t=s(L3);w1e=n(v5t,"SPAN",{});var F5t=s(w1e);T(WL.$$.fragment,F5t),F5t.forEach(t),v5t.forEach(t),fnr=i(qGe),A1e=n(qGe,"SPAN",{});var T5t=s(A1e);mnr=r(T5t,"AutoModelForMaskedImageModeling"),T5t.forEach(t),qGe.forEach(t),Pje=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(QL.$$.fragment,il),gnr=i(il),yd=n(il,"P",{});var uee=s(yd);hnr=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Hz=n(uee,"A",{href:!0});var M5t=s(Hz);pnr=r(M5t,"from_pretrained()"),M5t.forEach(t),_nr=r(uee," class method or the "),Uz=n(uee,"A",{href:!0});var E5t=s(Uz);unr=r(E5t,"from_config()"),E5t.forEach(t),bnr=r(uee,` class
method.`),uee.forEach(t),vnr=i(il),HL=n(il,"P",{});var jGe=s(HL);Fnr=r(jGe,"This class cannot be instantiated directly using "),y1e=n(jGe,"CODE",{});var C5t=s(y1e);Tnr=r(C5t,"__init__()"),C5t.forEach(t),Mnr=r(jGe," (throws an error)."),jGe.forEach(t),Enr=i(il),Et=n(il,"DIV",{class:!0});var C6=s(Et);T(UL.$$.fragment,C6),Cnr=i(C6),L1e=n(C6,"P",{});var w5t=s(L1e);wnr=r(w5t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),w5t.forEach(t),Anr=i(C6),Ld=n(C6,"P",{});var bee=s(Ld);ynr=r(bee,`Note:
Loading a model from its configuration file does `),x1e=n(bee,"STRONG",{});var A5t=s(x1e);Lnr=r(A5t,"not"),A5t.forEach(t),xnr=r(bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(bee,"A",{href:!0});var y5t=s(Jz);$nr=r(y5t,"from_pretrained()"),y5t.forEach(t),knr=r(bee," to load the model weights."),bee.forEach(t),Snr=i(C6),T(x3.$$.fragment,C6),C6.forEach(t),Rnr=i(il),po=n(il,"DIV",{class:!0});var Fa=s(po);T(JL.$$.fragment,Fa),Pnr=i(Fa),$1e=n(Fa,"P",{});var L5t=s($1e);Bnr=r(L5t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),L5t.forEach(t),Inr=i(Fa),Qa=n(Fa,"P",{});var w6=s(Qa);Nnr=r(w6,"The model class to instantiate is selected based on the "),k1e=n(w6,"CODE",{});var x5t=s(k1e);qnr=r(x5t,"model_type"),x5t.forEach(t),jnr=r(w6,` property of the config object (either
passed as an argument or loaded from `),S1e=n(w6,"CODE",{});var $5t=s(S1e);Dnr=r($5t,"pretrained_model_name_or_path"),$5t.forEach(t),Gnr=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=n(w6,"CODE",{});var k5t=s(R1e);Onr=r(k5t,"pretrained_model_name_or_path"),k5t.forEach(t),Vnr=r(w6,":"),w6.forEach(t),Xnr=i(Fa),xd=n(Fa,"UL",{});var vee=s(xd);$3=n(vee,"LI",{});var PSe=s($3);P1e=n(PSe,"STRONG",{});var S5t=s(P1e);znr=r(S5t,"deit"),S5t.forEach(t),Wnr=r(PSe," \u2014 "),Yz=n(PSe,"A",{href:!0});var R5t=s(Yz);Qnr=r(R5t,"DeiTForMaskedImageModeling"),R5t.forEach(t),Hnr=r(PSe," (DeiT model)"),PSe.forEach(t),Unr=i(vee),k3=n(vee,"LI",{});var BSe=s(k3);B1e=n(BSe,"STRONG",{});var P5t=s(B1e);Jnr=r(P5t,"swin"),P5t.forEach(t),Ynr=r(BSe," \u2014 "),Kz=n(BSe,"A",{href:!0});var B5t=s(Kz);Knr=r(B5t,"SwinForMaskedImageModeling"),B5t.forEach(t),Znr=r(BSe," (Swin model)"),BSe.forEach(t),esr=i(vee),S3=n(vee,"LI",{});var ISe=s(S3);I1e=n(ISe,"STRONG",{});var I5t=s(I1e);osr=r(I5t,"vit"),I5t.forEach(t),rsr=r(ISe," \u2014 "),Zz=n(ISe,"A",{href:!0});var N5t=s(Zz);tsr=r(N5t,"ViTForMaskedImageModeling"),N5t.forEach(t),asr=r(ISe," (ViT model)"),ISe.forEach(t),vee.forEach(t),nsr=i(Fa),R3=n(Fa,"P",{});var NSe=s(R3);ssr=r(NSe,"The model is set in evaluation mode by default using "),N1e=n(NSe,"CODE",{});var q5t=s(N1e);lsr=r(q5t,"model.eval()"),q5t.forEach(t),isr=r(NSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q1e=n(NSe,"CODE",{});var j5t=s(q1e);dsr=r(j5t,"model.train()"),j5t.forEach(t),NSe.forEach(t),csr=i(Fa),T(P3.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),Bje=i(f),$d=n(f,"H2",{class:!0});var DGe=s($d);B3=n(DGe,"A",{id:!0,class:!0,href:!0});var D5t=s(B3);j1e=n(D5t,"SPAN",{});var G5t=s(j1e);T(YL.$$.fragment,G5t),G5t.forEach(t),D5t.forEach(t),fsr=i(DGe),D1e=n(DGe,"SPAN",{});var O5t=s(D1e);msr=r(O5t,"AutoModelForObjectDetection"),O5t.forEach(t),DGe.forEach(t),Ije=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(KL.$$.fragment,dl),gsr=i(dl),kd=n(dl,"P",{});var Fee=s(kd);hsr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),eW=n(Fee,"A",{href:!0});var V5t=s(eW);psr=r(V5t,"from_pretrained()"),V5t.forEach(t),_sr=r(Fee," class method or the "),oW=n(Fee,"A",{href:!0});var X5t=s(oW);usr=r(X5t,"from_config()"),X5t.forEach(t),bsr=r(Fee,` class
method.`),Fee.forEach(t),vsr=i(dl),ZL=n(dl,"P",{});var GGe=s(ZL);Fsr=r(GGe,"This class cannot be instantiated directly using "),G1e=n(GGe,"CODE",{});var z5t=s(G1e);Tsr=r(z5t,"__init__()"),z5t.forEach(t),Msr=r(GGe," (throws an error)."),GGe.forEach(t),Esr=i(dl),Ct=n(dl,"DIV",{class:!0});var A6=s(Ct);T(e8.$$.fragment,A6),Csr=i(A6),O1e=n(A6,"P",{});var W5t=s(O1e);wsr=r(W5t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),W5t.forEach(t),Asr=i(A6),Sd=n(A6,"P",{});var Tee=s(Sd);ysr=r(Tee,`Note:
Loading a model from its configuration file does `),V1e=n(Tee,"STRONG",{});var Q5t=s(V1e);Lsr=r(Q5t,"not"),Q5t.forEach(t),xsr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=n(Tee,"A",{href:!0});var H5t=s(rW);$sr=r(H5t,"from_pretrained()"),H5t.forEach(t),ksr=r(Tee," to load the model weights."),Tee.forEach(t),Ssr=i(A6),T(I3.$$.fragment,A6),A6.forEach(t),Rsr=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(o8.$$.fragment,Ta),Psr=i(Ta),X1e=n(Ta,"P",{});var U5t=s(X1e);Bsr=r(U5t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),U5t.forEach(t),Isr=i(Ta),Ha=n(Ta,"P",{});var y6=s(Ha);Nsr=r(y6,"The model class to instantiate is selected based on the "),z1e=n(y6,"CODE",{});var J5t=s(z1e);qsr=r(J5t,"model_type"),J5t.forEach(t),jsr=r(y6,` property of the config object (either
passed as an argument or loaded from `),W1e=n(y6,"CODE",{});var Y5t=s(W1e);Dsr=r(Y5t,"pretrained_model_name_or_path"),Y5t.forEach(t),Gsr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=n(y6,"CODE",{});var K5t=s(Q1e);Osr=r(K5t,"pretrained_model_name_or_path"),K5t.forEach(t),Vsr=r(y6,":"),y6.forEach(t),Xsr=i(Ta),r8=n(Ta,"UL",{});var OGe=s(r8);N3=n(OGe,"LI",{});var qSe=s(N3);H1e=n(qSe,"STRONG",{});var Z5t=s(H1e);zsr=r(Z5t,"detr"),Z5t.forEach(t),Wsr=r(qSe," \u2014 "),tW=n(qSe,"A",{href:!0});var evt=s(tW);Qsr=r(evt,"DetrForObjectDetection"),evt.forEach(t),Hsr=r(qSe," (DETR model)"),qSe.forEach(t),Usr=i(OGe),q3=n(OGe,"LI",{});var jSe=s(q3);U1e=n(jSe,"STRONG",{});var ovt=s(U1e);Jsr=r(ovt,"yolos"),ovt.forEach(t),Ysr=r(jSe," \u2014 "),aW=n(jSe,"A",{href:!0});var rvt=s(aW);Ksr=r(rvt,"YolosForObjectDetection"),rvt.forEach(t),Zsr=r(jSe," (YOLOS model)"),jSe.forEach(t),OGe.forEach(t),elr=i(Ta),j3=n(Ta,"P",{});var DSe=s(j3);olr=r(DSe,"The model is set in evaluation mode by default using "),J1e=n(DSe,"CODE",{});var tvt=s(J1e);rlr=r(tvt,"model.eval()"),tvt.forEach(t),tlr=r(DSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y1e=n(DSe,"CODE",{});var avt=s(Y1e);alr=r(avt,"model.train()"),avt.forEach(t),DSe.forEach(t),nlr=i(Ta),T(D3.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),Nje=i(f),Rd=n(f,"H2",{class:!0});var VGe=s(Rd);G3=n(VGe,"A",{id:!0,class:!0,href:!0});var nvt=s(G3);K1e=n(nvt,"SPAN",{});var svt=s(K1e);T(t8.$$.fragment,svt),svt.forEach(t),nvt.forEach(t),slr=i(VGe),Z1e=n(VGe,"SPAN",{});var lvt=s(Z1e);llr=r(lvt,"AutoModelForImageSegmentation"),lvt.forEach(t),VGe.forEach(t),qje=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(a8.$$.fragment,cl),ilr=i(cl),Pd=n(cl,"P",{});var Mee=s(Pd);dlr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),nW=n(Mee,"A",{href:!0});var ivt=s(nW);clr=r(ivt,"from_pretrained()"),ivt.forEach(t),flr=r(Mee," class method or the "),sW=n(Mee,"A",{href:!0});var dvt=s(sW);mlr=r(dvt,"from_config()"),dvt.forEach(t),glr=r(Mee,` class
method.`),Mee.forEach(t),hlr=i(cl),n8=n(cl,"P",{});var XGe=s(n8);plr=r(XGe,"This class cannot be instantiated directly using "),ebe=n(XGe,"CODE",{});var cvt=s(ebe);_lr=r(cvt,"__init__()"),cvt.forEach(t),ulr=r(XGe," (throws an error)."),XGe.forEach(t),blr=i(cl),wt=n(cl,"DIV",{class:!0});var L6=s(wt);T(s8.$$.fragment,L6),vlr=i(L6),obe=n(L6,"P",{});var fvt=s(obe);Flr=r(fvt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),fvt.forEach(t),Tlr=i(L6),Bd=n(L6,"P",{});var Eee=s(Bd);Mlr=r(Eee,`Note:
Loading a model from its configuration file does `),rbe=n(Eee,"STRONG",{});var mvt=s(rbe);Elr=r(mvt,"not"),mvt.forEach(t),Clr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(Eee,"A",{href:!0});var gvt=s(lW);wlr=r(gvt,"from_pretrained()"),gvt.forEach(t),Alr=r(Eee," to load the model weights."),Eee.forEach(t),ylr=i(L6),T(O3.$$.fragment,L6),L6.forEach(t),Llr=i(cl),uo=n(cl,"DIV",{class:!0});var Ma=s(uo);T(l8.$$.fragment,Ma),xlr=i(Ma),tbe=n(Ma,"P",{});var hvt=s(tbe);$lr=r(hvt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),hvt.forEach(t),klr=i(Ma),Ua=n(Ma,"P",{});var x6=s(Ua);Slr=r(x6,"The model class to instantiate is selected based on the "),abe=n(x6,"CODE",{});var pvt=s(abe);Rlr=r(pvt,"model_type"),pvt.forEach(t),Plr=r(x6,` property of the config object (either
passed as an argument or loaded from `),nbe=n(x6,"CODE",{});var _vt=s(nbe);Blr=r(_vt,"pretrained_model_name_or_path"),_vt.forEach(t),Ilr=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=n(x6,"CODE",{});var uvt=s(sbe);Nlr=r(uvt,"pretrained_model_name_or_path"),uvt.forEach(t),qlr=r(x6,":"),x6.forEach(t),jlr=i(Ma),lbe=n(Ma,"UL",{});var bvt=s(lbe);V3=n(bvt,"LI",{});var GSe=s(V3);ibe=n(GSe,"STRONG",{});var vvt=s(ibe);Dlr=r(vvt,"detr"),vvt.forEach(t),Glr=r(GSe," \u2014 "),iW=n(GSe,"A",{href:!0});var Fvt=s(iW);Olr=r(Fvt,"DetrForSegmentation"),Fvt.forEach(t),Vlr=r(GSe," (DETR model)"),GSe.forEach(t),bvt.forEach(t),Xlr=i(Ma),X3=n(Ma,"P",{});var OSe=s(X3);zlr=r(OSe,"The model is set in evaluation mode by default using "),dbe=n(OSe,"CODE",{});var Tvt=s(dbe);Wlr=r(Tvt,"model.eval()"),Tvt.forEach(t),Qlr=r(OSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cbe=n(OSe,"CODE",{});var Mvt=s(cbe);Hlr=r(Mvt,"model.train()"),Mvt.forEach(t),OSe.forEach(t),Ulr=i(Ma),T(z3.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),jje=i(f),Id=n(f,"H2",{class:!0});var zGe=s(Id);W3=n(zGe,"A",{id:!0,class:!0,href:!0});var Evt=s(W3);fbe=n(Evt,"SPAN",{});var Cvt=s(fbe);T(i8.$$.fragment,Cvt),Cvt.forEach(t),Evt.forEach(t),Jlr=i(zGe),mbe=n(zGe,"SPAN",{});var wvt=s(mbe);Ylr=r(wvt,"AutoModelForSemanticSegmentation"),wvt.forEach(t),zGe.forEach(t),Dje=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(d8.$$.fragment,fl),Klr=i(fl),Nd=n(fl,"P",{});var Cee=s(Nd);Zlr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),dW=n(Cee,"A",{href:!0});var Avt=s(dW);eir=r(Avt,"from_pretrained()"),Avt.forEach(t),oir=r(Cee," class method or the "),cW=n(Cee,"A",{href:!0});var yvt=s(cW);rir=r(yvt,"from_config()"),yvt.forEach(t),tir=r(Cee,` class
method.`),Cee.forEach(t),air=i(fl),c8=n(fl,"P",{});var WGe=s(c8);nir=r(WGe,"This class cannot be instantiated directly using "),gbe=n(WGe,"CODE",{});var Lvt=s(gbe);sir=r(Lvt,"__init__()"),Lvt.forEach(t),lir=r(WGe," (throws an error)."),WGe.forEach(t),iir=i(fl),At=n(fl,"DIV",{class:!0});var $6=s(At);T(f8.$$.fragment,$6),dir=i($6),hbe=n($6,"P",{});var xvt=s(hbe);cir=r(xvt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),xvt.forEach(t),fir=i($6),qd=n($6,"P",{});var wee=s(qd);mir=r(wee,`Note:
Loading a model from its configuration file does `),pbe=n(wee,"STRONG",{});var $vt=s(pbe);gir=r($vt,"not"),$vt.forEach(t),hir=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(wee,"A",{href:!0});var kvt=s(fW);pir=r(kvt,"from_pretrained()"),kvt.forEach(t),_ir=r(wee," to load the model weights."),wee.forEach(t),uir=i($6),T(Q3.$$.fragment,$6),$6.forEach(t),bir=i(fl),bo=n(fl,"DIV",{class:!0});var Ea=s(bo);T(m8.$$.fragment,Ea),vir=i(Ea),_be=n(Ea,"P",{});var Svt=s(_be);Fir=r(Svt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Svt.forEach(t),Tir=i(Ea),Ja=n(Ea,"P",{});var k6=s(Ja);Mir=r(k6,"The model class to instantiate is selected based on the "),ube=n(k6,"CODE",{});var Rvt=s(ube);Eir=r(Rvt,"model_type"),Rvt.forEach(t),Cir=r(k6,` property of the config object (either
passed as an argument or loaded from `),bbe=n(k6,"CODE",{});var Pvt=s(bbe);wir=r(Pvt,"pretrained_model_name_or_path"),Pvt.forEach(t),Air=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=n(k6,"CODE",{});var Bvt=s(vbe);yir=r(Bvt,"pretrained_model_name_or_path"),Bvt.forEach(t),Lir=r(k6,":"),k6.forEach(t),xir=i(Ea),et=n(Ea,"UL",{});var ml=s(et);H3=n(ml,"LI",{});var VSe=s(H3);Fbe=n(VSe,"STRONG",{});var Ivt=s(Fbe);$ir=r(Ivt,"beit"),Ivt.forEach(t),kir=r(VSe," \u2014 "),mW=n(VSe,"A",{href:!0});var Nvt=s(mW);Sir=r(Nvt,"BeitForSemanticSegmentation"),Nvt.forEach(t),Rir=r(VSe," (BEiT model)"),VSe.forEach(t),Pir=i(ml),U3=n(ml,"LI",{});var XSe=s(U3);Tbe=n(XSe,"STRONG",{});var qvt=s(Tbe);Bir=r(qvt,"data2vec-vision"),qvt.forEach(t),Iir=r(XSe," \u2014 "),gW=n(XSe,"A",{href:!0});var jvt=s(gW);Nir=r(jvt,"Data2VecVisionForSemanticSegmentation"),jvt.forEach(t),qir=r(XSe," (Data2VecVision model)"),XSe.forEach(t),jir=i(ml),J3=n(ml,"LI",{});var zSe=s(J3);Mbe=n(zSe,"STRONG",{});var Dvt=s(Mbe);Dir=r(Dvt,"dpt"),Dvt.forEach(t),Gir=r(zSe," \u2014 "),hW=n(zSe,"A",{href:!0});var Gvt=s(hW);Oir=r(Gvt,"DPTForSemanticSegmentation"),Gvt.forEach(t),Vir=r(zSe," (DPT model)"),zSe.forEach(t),Xir=i(ml),Y3=n(ml,"LI",{});var WSe=s(Y3);Ebe=n(WSe,"STRONG",{});var Ovt=s(Ebe);zir=r(Ovt,"mobilevit"),Ovt.forEach(t),Wir=r(WSe," \u2014 "),pW=n(WSe,"A",{href:!0});var Vvt=s(pW);Qir=r(Vvt,"MobileViTForSemanticSegmentation"),Vvt.forEach(t),Hir=r(WSe," (MobileViT model)"),WSe.forEach(t),Uir=i(ml),K3=n(ml,"LI",{});var QSe=s(K3);Cbe=n(QSe,"STRONG",{});var Xvt=s(Cbe);Jir=r(Xvt,"segformer"),Xvt.forEach(t),Yir=r(QSe," \u2014 "),_W=n(QSe,"A",{href:!0});var zvt=s(_W);Kir=r(zvt,"SegformerForSemanticSegmentation"),zvt.forEach(t),Zir=r(QSe," (SegFormer model)"),QSe.forEach(t),ml.forEach(t),edr=i(Ea),Z3=n(Ea,"P",{});var HSe=s(Z3);odr=r(HSe,"The model is set in evaluation mode by default using "),wbe=n(HSe,"CODE",{});var Wvt=s(wbe);rdr=r(Wvt,"model.eval()"),Wvt.forEach(t),tdr=r(HSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Abe=n(HSe,"CODE",{});var Qvt=s(Abe);adr=r(Qvt,"model.train()"),Qvt.forEach(t),HSe.forEach(t),ndr=i(Ea),T(eF.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),Gje=i(f),jd=n(f,"H2",{class:!0});var QGe=s(jd);oF=n(QGe,"A",{id:!0,class:!0,href:!0});var Hvt=s(oF);ybe=n(Hvt,"SPAN",{});var Uvt=s(ybe);T(g8.$$.fragment,Uvt),Uvt.forEach(t),Hvt.forEach(t),sdr=i(QGe),Lbe=n(QGe,"SPAN",{});var Jvt=s(Lbe);ldr=r(Jvt,"AutoModelForInstanceSegmentation"),Jvt.forEach(t),QGe.forEach(t),Oje=i(f),Jo=n(f,"DIV",{class:!0});var gl=s(Jo);T(h8.$$.fragment,gl),idr=i(gl),Dd=n(gl,"P",{});var Aee=s(Dd);ddr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),uW=n(Aee,"A",{href:!0});var Yvt=s(uW);cdr=r(Yvt,"from_pretrained()"),Yvt.forEach(t),fdr=r(Aee," class method or the "),bW=n(Aee,"A",{href:!0});var Kvt=s(bW);mdr=r(Kvt,"from_config()"),Kvt.forEach(t),gdr=r(Aee,` class
method.`),Aee.forEach(t),hdr=i(gl),p8=n(gl,"P",{});var HGe=s(p8);pdr=r(HGe,"This class cannot be instantiated directly using "),xbe=n(HGe,"CODE",{});var Zvt=s(xbe);_dr=r(Zvt,"__init__()"),Zvt.forEach(t),udr=r(HGe," (throws an error)."),HGe.forEach(t),bdr=i(gl),yt=n(gl,"DIV",{class:!0});var S6=s(yt);T(_8.$$.fragment,S6),vdr=i(S6),$be=n(S6,"P",{});var e3t=s($be);Fdr=r(e3t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),e3t.forEach(t),Tdr=i(S6),Gd=n(S6,"P",{});var yee=s(Gd);Mdr=r(yee,`Note:
Loading a model from its configuration file does `),kbe=n(yee,"STRONG",{});var o3t=s(kbe);Edr=r(o3t,"not"),o3t.forEach(t),Cdr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=n(yee,"A",{href:!0});var r3t=s(vW);wdr=r(r3t,"from_pretrained()"),r3t.forEach(t),Adr=r(yee," to load the model weights."),yee.forEach(t),ydr=i(S6),T(rF.$$.fragment,S6),S6.forEach(t),Ldr=i(gl),vo=n(gl,"DIV",{class:!0});var Ca=s(vo);T(u8.$$.fragment,Ca),xdr=i(Ca),Sbe=n(Ca,"P",{});var t3t=s(Sbe);$dr=r(t3t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),t3t.forEach(t),kdr=i(Ca),Ya=n(Ca,"P",{});var R6=s(Ya);Sdr=r(R6,"The model class to instantiate is selected based on the "),Rbe=n(R6,"CODE",{});var a3t=s(Rbe);Rdr=r(a3t,"model_type"),a3t.forEach(t),Pdr=r(R6,` property of the config object (either
passed as an argument or loaded from `),Pbe=n(R6,"CODE",{});var n3t=s(Pbe);Bdr=r(n3t,"pretrained_model_name_or_path"),n3t.forEach(t),Idr=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=n(R6,"CODE",{});var s3t=s(Bbe);Ndr=r(s3t,"pretrained_model_name_or_path"),s3t.forEach(t),qdr=r(R6,":"),R6.forEach(t),jdr=i(Ca),Ibe=n(Ca,"UL",{});var l3t=s(Ibe);tF=n(l3t,"LI",{});var USe=s(tF);Nbe=n(USe,"STRONG",{});var i3t=s(Nbe);Ddr=r(i3t,"maskformer"),i3t.forEach(t),Gdr=r(USe," \u2014 "),FW=n(USe,"A",{href:!0});var d3t=s(FW);Odr=r(d3t,"MaskFormerForInstanceSegmentation"),d3t.forEach(t),Vdr=r(USe," (MaskFormer model)"),USe.forEach(t),l3t.forEach(t),Xdr=i(Ca),aF=n(Ca,"P",{});var JSe=s(aF);zdr=r(JSe,"The model is set in evaluation mode by default using "),qbe=n(JSe,"CODE",{});var c3t=s(qbe);Wdr=r(c3t,"model.eval()"),c3t.forEach(t),Qdr=r(JSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jbe=n(JSe,"CODE",{});var f3t=s(jbe);Hdr=r(f3t,"model.train()"),f3t.forEach(t),JSe.forEach(t),Udr=i(Ca),T(nF.$$.fragment,Ca),Ca.forEach(t),gl.forEach(t),Vje=i(f),Od=n(f,"H2",{class:!0});var UGe=s(Od);sF=n(UGe,"A",{id:!0,class:!0,href:!0});var m3t=s(sF);Dbe=n(m3t,"SPAN",{});var g3t=s(Dbe);T(b8.$$.fragment,g3t),g3t.forEach(t),m3t.forEach(t),Jdr=i(UGe),Gbe=n(UGe,"SPAN",{});var h3t=s(Gbe);Ydr=r(h3t,"TFAutoModel"),h3t.forEach(t),UGe.forEach(t),Xje=i(f),Yo=n(f,"DIV",{class:!0});var hl=s(Yo);T(v8.$$.fragment,hl),Kdr=i(hl),Vd=n(hl,"P",{});var Lee=s(Vd);Zdr=r(Lee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TW=n(Lee,"A",{href:!0});var p3t=s(TW);ecr=r(p3t,"from_pretrained()"),p3t.forEach(t),ocr=r(Lee," class method or the "),MW=n(Lee,"A",{href:!0});var _3t=s(MW);rcr=r(_3t,"from_config()"),_3t.forEach(t),tcr=r(Lee,` class
method.`),Lee.forEach(t),acr=i(hl),F8=n(hl,"P",{});var JGe=s(F8);ncr=r(JGe,"This class cannot be instantiated directly using "),Obe=n(JGe,"CODE",{});var u3t=s(Obe);scr=r(u3t,"__init__()"),u3t.forEach(t),lcr=r(JGe," (throws an error)."),JGe.forEach(t),icr=i(hl),Lt=n(hl,"DIV",{class:!0});var P6=s(Lt);T(T8.$$.fragment,P6),dcr=i(P6),Vbe=n(P6,"P",{});var b3t=s(Vbe);ccr=r(b3t,"Instantiates one of the base model classes of the library from a configuration."),b3t.forEach(t),fcr=i(P6),Xd=n(P6,"P",{});var xee=s(Xd);mcr=r(xee,`Note:
Loading a model from its configuration file does `),Xbe=n(xee,"STRONG",{});var v3t=s(Xbe);gcr=r(v3t,"not"),v3t.forEach(t),hcr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=n(xee,"A",{href:!0});var F3t=s(EW);pcr=r(F3t,"from_pretrained()"),F3t.forEach(t),_cr=r(xee," to load the model weights."),xee.forEach(t),ucr=i(P6),T(lF.$$.fragment,P6),P6.forEach(t),bcr=i(hl),wr=n(hl,"DIV",{class:!0});var pl=s(wr);T(M8.$$.fragment,pl),vcr=i(pl),zbe=n(pl,"P",{});var T3t=s(zbe);Fcr=r(T3t,"Instantiate one of the base model classes of the library from a pretrained model."),T3t.forEach(t),Tcr=i(pl),Ka=n(pl,"P",{});var B6=s(Ka);Mcr=r(B6,"The model class to instantiate is selected based on the "),Wbe=n(B6,"CODE",{});var M3t=s(Wbe);Ecr=r(M3t,"model_type"),M3t.forEach(t),Ccr=r(B6,` property of the config object (either
passed as an argument or loaded from `),Qbe=n(B6,"CODE",{});var E3t=s(Qbe);wcr=r(E3t,"pretrained_model_name_or_path"),E3t.forEach(t),Acr=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=n(B6,"CODE",{});var C3t=s(Hbe);ycr=r(C3t,"pretrained_model_name_or_path"),C3t.forEach(t),Lcr=r(B6,":"),B6.forEach(t),xcr=i(pl),q=n(pl,"UL",{});var D=s(q);iF=n(D,"LI",{});var YSe=s(iF);Ube=n(YSe,"STRONG",{});var w3t=s(Ube);$cr=r(w3t,"albert"),w3t.forEach(t),kcr=r(YSe," \u2014 "),CW=n(YSe,"A",{href:!0});var A3t=s(CW);Scr=r(A3t,"TFAlbertModel"),A3t.forEach(t),Rcr=r(YSe," (ALBERT model)"),YSe.forEach(t),Pcr=i(D),dF=n(D,"LI",{});var KSe=s(dF);Jbe=n(KSe,"STRONG",{});var y3t=s(Jbe);Bcr=r(y3t,"bart"),y3t.forEach(t),Icr=r(KSe," \u2014 "),wW=n(KSe,"A",{href:!0});var L3t=s(wW);Ncr=r(L3t,"TFBartModel"),L3t.forEach(t),qcr=r(KSe," (BART model)"),KSe.forEach(t),jcr=i(D),cF=n(D,"LI",{});var ZSe=s(cF);Ybe=n(ZSe,"STRONG",{});var x3t=s(Ybe);Dcr=r(x3t,"bert"),x3t.forEach(t),Gcr=r(ZSe," \u2014 "),AW=n(ZSe,"A",{href:!0});var $3t=s(AW);Ocr=r($3t,"TFBertModel"),$3t.forEach(t),Vcr=r(ZSe," (BERT model)"),ZSe.forEach(t),Xcr=i(D),fF=n(D,"LI",{});var eRe=s(fF);Kbe=n(eRe,"STRONG",{});var k3t=s(Kbe);zcr=r(k3t,"blenderbot"),k3t.forEach(t),Wcr=r(eRe," \u2014 "),yW=n(eRe,"A",{href:!0});var S3t=s(yW);Qcr=r(S3t,"TFBlenderbotModel"),S3t.forEach(t),Hcr=r(eRe," (Blenderbot model)"),eRe.forEach(t),Ucr=i(D),mF=n(D,"LI",{});var oRe=s(mF);Zbe=n(oRe,"STRONG",{});var R3t=s(Zbe);Jcr=r(R3t,"blenderbot-small"),R3t.forEach(t),Ycr=r(oRe," \u2014 "),LW=n(oRe,"A",{href:!0});var P3t=s(LW);Kcr=r(P3t,"TFBlenderbotSmallModel"),P3t.forEach(t),Zcr=r(oRe," (BlenderbotSmall model)"),oRe.forEach(t),efr=i(D),gF=n(D,"LI",{});var rRe=s(gF);e2e=n(rRe,"STRONG",{});var B3t=s(e2e);ofr=r(B3t,"camembert"),B3t.forEach(t),rfr=r(rRe," \u2014 "),xW=n(rRe,"A",{href:!0});var I3t=s(xW);tfr=r(I3t,"TFCamembertModel"),I3t.forEach(t),afr=r(rRe," (CamemBERT model)"),rRe.forEach(t),nfr=i(D),hF=n(D,"LI",{});var tRe=s(hF);o2e=n(tRe,"STRONG",{});var N3t=s(o2e);sfr=r(N3t,"clip"),N3t.forEach(t),lfr=r(tRe," \u2014 "),$W=n(tRe,"A",{href:!0});var q3t=s($W);ifr=r(q3t,"TFCLIPModel"),q3t.forEach(t),dfr=r(tRe," (CLIP model)"),tRe.forEach(t),cfr=i(D),pF=n(D,"LI",{});var aRe=s(pF);r2e=n(aRe,"STRONG",{});var j3t=s(r2e);ffr=r(j3t,"convbert"),j3t.forEach(t),mfr=r(aRe," \u2014 "),kW=n(aRe,"A",{href:!0});var D3t=s(kW);gfr=r(D3t,"TFConvBertModel"),D3t.forEach(t),hfr=r(aRe," (ConvBERT model)"),aRe.forEach(t),pfr=i(D),_F=n(D,"LI",{});var nRe=s(_F);t2e=n(nRe,"STRONG",{});var G3t=s(t2e);_fr=r(G3t,"convnext"),G3t.forEach(t),ufr=r(nRe," \u2014 "),SW=n(nRe,"A",{href:!0});var O3t=s(SW);bfr=r(O3t,"TFConvNextModel"),O3t.forEach(t),vfr=r(nRe," (ConvNext model)"),nRe.forEach(t),Ffr=i(D),uF=n(D,"LI",{});var sRe=s(uF);a2e=n(sRe,"STRONG",{});var V3t=s(a2e);Tfr=r(V3t,"ctrl"),V3t.forEach(t),Mfr=r(sRe," \u2014 "),RW=n(sRe,"A",{href:!0});var X3t=s(RW);Efr=r(X3t,"TFCTRLModel"),X3t.forEach(t),Cfr=r(sRe," (CTRL model)"),sRe.forEach(t),wfr=i(D),bF=n(D,"LI",{});var lRe=s(bF);n2e=n(lRe,"STRONG",{});var z3t=s(n2e);Afr=r(z3t,"data2vec-vision"),z3t.forEach(t),yfr=r(lRe," \u2014 "),PW=n(lRe,"A",{href:!0});var W3t=s(PW);Lfr=r(W3t,"TFData2VecVisionModel"),W3t.forEach(t),xfr=r(lRe," (Data2VecVision model)"),lRe.forEach(t),$fr=i(D),vF=n(D,"LI",{});var iRe=s(vF);s2e=n(iRe,"STRONG",{});var Q3t=s(s2e);kfr=r(Q3t,"deberta"),Q3t.forEach(t),Sfr=r(iRe," \u2014 "),BW=n(iRe,"A",{href:!0});var H3t=s(BW);Rfr=r(H3t,"TFDebertaModel"),H3t.forEach(t),Pfr=r(iRe," (DeBERTa model)"),iRe.forEach(t),Bfr=i(D),FF=n(D,"LI",{});var dRe=s(FF);l2e=n(dRe,"STRONG",{});var U3t=s(l2e);Ifr=r(U3t,"deberta-v2"),U3t.forEach(t),Nfr=r(dRe," \u2014 "),IW=n(dRe,"A",{href:!0});var J3t=s(IW);qfr=r(J3t,"TFDebertaV2Model"),J3t.forEach(t),jfr=r(dRe," (DeBERTa-v2 model)"),dRe.forEach(t),Dfr=i(D),TF=n(D,"LI",{});var cRe=s(TF);i2e=n(cRe,"STRONG",{});var Y3t=s(i2e);Gfr=r(Y3t,"distilbert"),Y3t.forEach(t),Ofr=r(cRe," \u2014 "),NW=n(cRe,"A",{href:!0});var K3t=s(NW);Vfr=r(K3t,"TFDistilBertModel"),K3t.forEach(t),Xfr=r(cRe," (DistilBERT model)"),cRe.forEach(t),zfr=i(D),MF=n(D,"LI",{});var fRe=s(MF);d2e=n(fRe,"STRONG",{});var Z3t=s(d2e);Wfr=r(Z3t,"dpr"),Z3t.forEach(t),Qfr=r(fRe," \u2014 "),qW=n(fRe,"A",{href:!0});var eFt=s(qW);Hfr=r(eFt,"TFDPRQuestionEncoder"),eFt.forEach(t),Ufr=r(fRe," (DPR model)"),fRe.forEach(t),Jfr=i(D),EF=n(D,"LI",{});var mRe=s(EF);c2e=n(mRe,"STRONG",{});var oFt=s(c2e);Yfr=r(oFt,"electra"),oFt.forEach(t),Kfr=r(mRe," \u2014 "),jW=n(mRe,"A",{href:!0});var rFt=s(jW);Zfr=r(rFt,"TFElectraModel"),rFt.forEach(t),emr=r(mRe," (ELECTRA model)"),mRe.forEach(t),omr=i(D),CF=n(D,"LI",{});var gRe=s(CF);f2e=n(gRe,"STRONG",{});var tFt=s(f2e);rmr=r(tFt,"flaubert"),tFt.forEach(t),tmr=r(gRe," \u2014 "),DW=n(gRe,"A",{href:!0});var aFt=s(DW);amr=r(aFt,"TFFlaubertModel"),aFt.forEach(t),nmr=r(gRe," (FlauBERT model)"),gRe.forEach(t),smr=i(D),Is=n(D,"LI",{});var ek=s(Is);m2e=n(ek,"STRONG",{});var nFt=s(m2e);lmr=r(nFt,"funnel"),nFt.forEach(t),imr=r(ek," \u2014 "),GW=n(ek,"A",{href:!0});var sFt=s(GW);dmr=r(sFt,"TFFunnelModel"),sFt.forEach(t),cmr=r(ek," or "),OW=n(ek,"A",{href:!0});var lFt=s(OW);fmr=r(lFt,"TFFunnelBaseModel"),lFt.forEach(t),mmr=r(ek," (Funnel Transformer model)"),ek.forEach(t),gmr=i(D),wF=n(D,"LI",{});var hRe=s(wF);g2e=n(hRe,"STRONG",{});var iFt=s(g2e);hmr=r(iFt,"gpt2"),iFt.forEach(t),pmr=r(hRe," \u2014 "),VW=n(hRe,"A",{href:!0});var dFt=s(VW);_mr=r(dFt,"TFGPT2Model"),dFt.forEach(t),umr=r(hRe," (OpenAI GPT-2 model)"),hRe.forEach(t),bmr=i(D),AF=n(D,"LI",{});var pRe=s(AF);h2e=n(pRe,"STRONG",{});var cFt=s(h2e);vmr=r(cFt,"gptj"),cFt.forEach(t),Fmr=r(pRe," \u2014 "),XW=n(pRe,"A",{href:!0});var fFt=s(XW);Tmr=r(fFt,"TFGPTJModel"),fFt.forEach(t),Mmr=r(pRe," (GPT-J model)"),pRe.forEach(t),Emr=i(D),yF=n(D,"LI",{});var _Re=s(yF);p2e=n(_Re,"STRONG",{});var mFt=s(p2e);Cmr=r(mFt,"hubert"),mFt.forEach(t),wmr=r(_Re," \u2014 "),zW=n(_Re,"A",{href:!0});var gFt=s(zW);Amr=r(gFt,"TFHubertModel"),gFt.forEach(t),ymr=r(_Re," (Hubert model)"),_Re.forEach(t),Lmr=i(D),LF=n(D,"LI",{});var uRe=s(LF);_2e=n(uRe,"STRONG",{});var hFt=s(_2e);xmr=r(hFt,"layoutlm"),hFt.forEach(t),$mr=r(uRe," \u2014 "),WW=n(uRe,"A",{href:!0});var pFt=s(WW);kmr=r(pFt,"TFLayoutLMModel"),pFt.forEach(t),Smr=r(uRe," (LayoutLM model)"),uRe.forEach(t),Rmr=i(D),xF=n(D,"LI",{});var bRe=s(xF);u2e=n(bRe,"STRONG",{});var _Ft=s(u2e);Pmr=r(_Ft,"led"),_Ft.forEach(t),Bmr=r(bRe," \u2014 "),QW=n(bRe,"A",{href:!0});var uFt=s(QW);Imr=r(uFt,"TFLEDModel"),uFt.forEach(t),Nmr=r(bRe," (LED model)"),bRe.forEach(t),qmr=i(D),$F=n(D,"LI",{});var vRe=s($F);b2e=n(vRe,"STRONG",{});var bFt=s(b2e);jmr=r(bFt,"longformer"),bFt.forEach(t),Dmr=r(vRe," \u2014 "),HW=n(vRe,"A",{href:!0});var vFt=s(HW);Gmr=r(vFt,"TFLongformerModel"),vFt.forEach(t),Omr=r(vRe," (Longformer model)"),vRe.forEach(t),Vmr=i(D),kF=n(D,"LI",{});var FRe=s(kF);v2e=n(FRe,"STRONG",{});var FFt=s(v2e);Xmr=r(FFt,"lxmert"),FFt.forEach(t),zmr=r(FRe," \u2014 "),UW=n(FRe,"A",{href:!0});var TFt=s(UW);Wmr=r(TFt,"TFLxmertModel"),TFt.forEach(t),Qmr=r(FRe," (LXMERT model)"),FRe.forEach(t),Hmr=i(D),SF=n(D,"LI",{});var TRe=s(SF);F2e=n(TRe,"STRONG",{});var MFt=s(F2e);Umr=r(MFt,"marian"),MFt.forEach(t),Jmr=r(TRe," \u2014 "),JW=n(TRe,"A",{href:!0});var EFt=s(JW);Ymr=r(EFt,"TFMarianModel"),EFt.forEach(t),Kmr=r(TRe," (Marian model)"),TRe.forEach(t),Zmr=i(D),RF=n(D,"LI",{});var MRe=s(RF);T2e=n(MRe,"STRONG",{});var CFt=s(T2e);egr=r(CFt,"mbart"),CFt.forEach(t),ogr=r(MRe," \u2014 "),YW=n(MRe,"A",{href:!0});var wFt=s(YW);rgr=r(wFt,"TFMBartModel"),wFt.forEach(t),tgr=r(MRe," (mBART model)"),MRe.forEach(t),agr=i(D),PF=n(D,"LI",{});var ERe=s(PF);M2e=n(ERe,"STRONG",{});var AFt=s(M2e);ngr=r(AFt,"mobilebert"),AFt.forEach(t),sgr=r(ERe," \u2014 "),KW=n(ERe,"A",{href:!0});var yFt=s(KW);lgr=r(yFt,"TFMobileBertModel"),yFt.forEach(t),igr=r(ERe," (MobileBERT model)"),ERe.forEach(t),dgr=i(D),BF=n(D,"LI",{});var CRe=s(BF);E2e=n(CRe,"STRONG",{});var LFt=s(E2e);cgr=r(LFt,"mpnet"),LFt.forEach(t),fgr=r(CRe," \u2014 "),ZW=n(CRe,"A",{href:!0});var xFt=s(ZW);mgr=r(xFt,"TFMPNetModel"),xFt.forEach(t),ggr=r(CRe," (MPNet model)"),CRe.forEach(t),hgr=i(D),IF=n(D,"LI",{});var wRe=s(IF);C2e=n(wRe,"STRONG",{});var $Ft=s(C2e);pgr=r($Ft,"mt5"),$Ft.forEach(t),_gr=r(wRe," \u2014 "),eQ=n(wRe,"A",{href:!0});var kFt=s(eQ);ugr=r(kFt,"TFMT5Model"),kFt.forEach(t),bgr=r(wRe," (mT5 model)"),wRe.forEach(t),vgr=i(D),NF=n(D,"LI",{});var ARe=s(NF);w2e=n(ARe,"STRONG",{});var SFt=s(w2e);Fgr=r(SFt,"openai-gpt"),SFt.forEach(t),Tgr=r(ARe," \u2014 "),oQ=n(ARe,"A",{href:!0});var RFt=s(oQ);Mgr=r(RFt,"TFOpenAIGPTModel"),RFt.forEach(t),Egr=r(ARe," (OpenAI GPT model)"),ARe.forEach(t),Cgr=i(D),qF=n(D,"LI",{});var yRe=s(qF);A2e=n(yRe,"STRONG",{});var PFt=s(A2e);wgr=r(PFt,"opt"),PFt.forEach(t),Agr=r(yRe," \u2014 "),rQ=n(yRe,"A",{href:!0});var BFt=s(rQ);ygr=r(BFt,"TFOPTModel"),BFt.forEach(t),Lgr=r(yRe," (OPT model)"),yRe.forEach(t),xgr=i(D),jF=n(D,"LI",{});var LRe=s(jF);y2e=n(LRe,"STRONG",{});var IFt=s(y2e);$gr=r(IFt,"pegasus"),IFt.forEach(t),kgr=r(LRe," \u2014 "),tQ=n(LRe,"A",{href:!0});var NFt=s(tQ);Sgr=r(NFt,"TFPegasusModel"),NFt.forEach(t),Rgr=r(LRe," (Pegasus model)"),LRe.forEach(t),Pgr=i(D),DF=n(D,"LI",{});var xRe=s(DF);L2e=n(xRe,"STRONG",{});var qFt=s(L2e);Bgr=r(qFt,"rembert"),qFt.forEach(t),Igr=r(xRe," \u2014 "),aQ=n(xRe,"A",{href:!0});var jFt=s(aQ);Ngr=r(jFt,"TFRemBertModel"),jFt.forEach(t),qgr=r(xRe," (RemBERT model)"),xRe.forEach(t),jgr=i(D),GF=n(D,"LI",{});var $Re=s(GF);x2e=n($Re,"STRONG",{});var DFt=s(x2e);Dgr=r(DFt,"roberta"),DFt.forEach(t),Ggr=r($Re," \u2014 "),nQ=n($Re,"A",{href:!0});var GFt=s(nQ);Ogr=r(GFt,"TFRobertaModel"),GFt.forEach(t),Vgr=r($Re," (RoBERTa model)"),$Re.forEach(t),Xgr=i(D),OF=n(D,"LI",{});var kRe=s(OF);$2e=n(kRe,"STRONG",{});var OFt=s($2e);zgr=r(OFt,"roformer"),OFt.forEach(t),Wgr=r(kRe," \u2014 "),sQ=n(kRe,"A",{href:!0});var VFt=s(sQ);Qgr=r(VFt,"TFRoFormerModel"),VFt.forEach(t),Hgr=r(kRe," (RoFormer model)"),kRe.forEach(t),Ugr=i(D),VF=n(D,"LI",{});var SRe=s(VF);k2e=n(SRe,"STRONG",{});var XFt=s(k2e);Jgr=r(XFt,"speech_to_text"),XFt.forEach(t),Ygr=r(SRe," \u2014 "),lQ=n(SRe,"A",{href:!0});var zFt=s(lQ);Kgr=r(zFt,"TFSpeech2TextModel"),zFt.forEach(t),Zgr=r(SRe," (Speech2Text model)"),SRe.forEach(t),ehr=i(D),XF=n(D,"LI",{});var RRe=s(XF);S2e=n(RRe,"STRONG",{});var WFt=s(S2e);ohr=r(WFt,"swin"),WFt.forEach(t),rhr=r(RRe," \u2014 "),iQ=n(RRe,"A",{href:!0});var QFt=s(iQ);thr=r(QFt,"TFSwinModel"),QFt.forEach(t),ahr=r(RRe," (Swin model)"),RRe.forEach(t),nhr=i(D),zF=n(D,"LI",{});var PRe=s(zF);R2e=n(PRe,"STRONG",{});var HFt=s(R2e);shr=r(HFt,"t5"),HFt.forEach(t),lhr=r(PRe," \u2014 "),dQ=n(PRe,"A",{href:!0});var UFt=s(dQ);ihr=r(UFt,"TFT5Model"),UFt.forEach(t),dhr=r(PRe," (T5 model)"),PRe.forEach(t),chr=i(D),WF=n(D,"LI",{});var BRe=s(WF);P2e=n(BRe,"STRONG",{});var JFt=s(P2e);fhr=r(JFt,"tapas"),JFt.forEach(t),mhr=r(BRe," \u2014 "),cQ=n(BRe,"A",{href:!0});var YFt=s(cQ);ghr=r(YFt,"TFTapasModel"),YFt.forEach(t),hhr=r(BRe," (TAPAS model)"),BRe.forEach(t),phr=i(D),QF=n(D,"LI",{});var IRe=s(QF);B2e=n(IRe,"STRONG",{});var KFt=s(B2e);_hr=r(KFt,"transfo-xl"),KFt.forEach(t),uhr=r(IRe," \u2014 "),fQ=n(IRe,"A",{href:!0});var ZFt=s(fQ);bhr=r(ZFt,"TFTransfoXLModel"),ZFt.forEach(t),vhr=r(IRe," (Transformer-XL model)"),IRe.forEach(t),Fhr=i(D),HF=n(D,"LI",{});var NRe=s(HF);I2e=n(NRe,"STRONG",{});var eTt=s(I2e);Thr=r(eTt,"vit"),eTt.forEach(t),Mhr=r(NRe," \u2014 "),mQ=n(NRe,"A",{href:!0});var oTt=s(mQ);Ehr=r(oTt,"TFViTModel"),oTt.forEach(t),Chr=r(NRe," (ViT model)"),NRe.forEach(t),whr=i(D),UF=n(D,"LI",{});var qRe=s(UF);N2e=n(qRe,"STRONG",{});var rTt=s(N2e);Ahr=r(rTt,"vit_mae"),rTt.forEach(t),yhr=r(qRe," \u2014 "),gQ=n(qRe,"A",{href:!0});var tTt=s(gQ);Lhr=r(tTt,"TFViTMAEModel"),tTt.forEach(t),xhr=r(qRe," (ViTMAE model)"),qRe.forEach(t),$hr=i(D),JF=n(D,"LI",{});var jRe=s(JF);q2e=n(jRe,"STRONG",{});var aTt=s(q2e);khr=r(aTt,"wav2vec2"),aTt.forEach(t),Shr=r(jRe," \u2014 "),hQ=n(jRe,"A",{href:!0});var nTt=s(hQ);Rhr=r(nTt,"TFWav2Vec2Model"),nTt.forEach(t),Phr=r(jRe," (Wav2Vec2 model)"),jRe.forEach(t),Bhr=i(D),YF=n(D,"LI",{});var DRe=s(YF);j2e=n(DRe,"STRONG",{});var sTt=s(j2e);Ihr=r(sTt,"xlm"),sTt.forEach(t),Nhr=r(DRe," \u2014 "),pQ=n(DRe,"A",{href:!0});var lTt=s(pQ);qhr=r(lTt,"TFXLMModel"),lTt.forEach(t),jhr=r(DRe," (XLM model)"),DRe.forEach(t),Dhr=i(D),KF=n(D,"LI",{});var GRe=s(KF);D2e=n(GRe,"STRONG",{});var iTt=s(D2e);Ghr=r(iTt,"xlm-roberta"),iTt.forEach(t),Ohr=r(GRe," \u2014 "),_Q=n(GRe,"A",{href:!0});var dTt=s(_Q);Vhr=r(dTt,"TFXLMRobertaModel"),dTt.forEach(t),Xhr=r(GRe," (XLM-RoBERTa model)"),GRe.forEach(t),zhr=i(D),ZF=n(D,"LI",{});var ORe=s(ZF);G2e=n(ORe,"STRONG",{});var cTt=s(G2e);Whr=r(cTt,"xlnet"),cTt.forEach(t),Qhr=r(ORe," \u2014 "),uQ=n(ORe,"A",{href:!0});var fTt=s(uQ);Hhr=r(fTt,"TFXLNetModel"),fTt.forEach(t),Uhr=r(ORe," (XLNet model)"),ORe.forEach(t),D.forEach(t),Jhr=i(pl),T(eT.$$.fragment,pl),pl.forEach(t),hl.forEach(t),zje=i(f),zd=n(f,"H2",{class:!0});var YGe=s(zd);oT=n(YGe,"A",{id:!0,class:!0,href:!0});var mTt=s(oT);O2e=n(mTt,"SPAN",{});var gTt=s(O2e);T(E8.$$.fragment,gTt),gTt.forEach(t),mTt.forEach(t),Yhr=i(YGe),V2e=n(YGe,"SPAN",{});var hTt=s(V2e);Khr=r(hTt,"TFAutoModelForPreTraining"),hTt.forEach(t),YGe.forEach(t),Wje=i(f),Ko=n(f,"DIV",{class:!0});var _l=s(Ko);T(C8.$$.fragment,_l),Zhr=i(_l),Wd=n(_l,"P",{});var $ee=s(Wd);epr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),bQ=n($ee,"A",{href:!0});var pTt=s(bQ);opr=r(pTt,"from_pretrained()"),pTt.forEach(t),rpr=r($ee," class method or the "),vQ=n($ee,"A",{href:!0});var _Tt=s(vQ);tpr=r(_Tt,"from_config()"),_Tt.forEach(t),apr=r($ee,` class
method.`),$ee.forEach(t),npr=i(_l),w8=n(_l,"P",{});var KGe=s(w8);spr=r(KGe,"This class cannot be instantiated directly using "),X2e=n(KGe,"CODE",{});var uTt=s(X2e);lpr=r(uTt,"__init__()"),uTt.forEach(t),ipr=r(KGe," (throws an error)."),KGe.forEach(t),dpr=i(_l),xt=n(_l,"DIV",{class:!0});var I6=s(xt);T(A8.$$.fragment,I6),cpr=i(I6),z2e=n(I6,"P",{});var bTt=s(z2e);fpr=r(bTt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),bTt.forEach(t),mpr=i(I6),Qd=n(I6,"P",{});var kee=s(Qd);gpr=r(kee,`Note:
Loading a model from its configuration file does `),W2e=n(kee,"STRONG",{});var vTt=s(W2e);hpr=r(vTt,"not"),vTt.forEach(t),ppr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(kee,"A",{href:!0});var FTt=s(FQ);_pr=r(FTt,"from_pretrained()"),FTt.forEach(t),upr=r(kee," to load the model weights."),kee.forEach(t),bpr=i(I6),T(rT.$$.fragment,I6),I6.forEach(t),vpr=i(_l),Ar=n(_l,"DIV",{class:!0});var ul=s(Ar);T(y8.$$.fragment,ul),Fpr=i(ul),Q2e=n(ul,"P",{});var TTt=s(Q2e);Tpr=r(TTt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),TTt.forEach(t),Mpr=i(ul),Za=n(ul,"P",{});var N6=s(Za);Epr=r(N6,"The model class to instantiate is selected based on the "),H2e=n(N6,"CODE",{});var MTt=s(H2e);Cpr=r(MTt,"model_type"),MTt.forEach(t),wpr=r(N6,` property of the config object (either
passed as an argument or loaded from `),U2e=n(N6,"CODE",{});var ETt=s(U2e);Apr=r(ETt,"pretrained_model_name_or_path"),ETt.forEach(t),ypr=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=n(N6,"CODE",{});var CTt=s(J2e);Lpr=r(CTt,"pretrained_model_name_or_path"),CTt.forEach(t),xpr=r(N6,":"),N6.forEach(t),$pr=i(ul),se=n(ul,"UL",{});var le=s(se);tT=n(le,"LI",{});var VRe=s(tT);Y2e=n(VRe,"STRONG",{});var wTt=s(Y2e);kpr=r(wTt,"albert"),wTt.forEach(t),Spr=r(VRe," \u2014 "),TQ=n(VRe,"A",{href:!0});var ATt=s(TQ);Rpr=r(ATt,"TFAlbertForPreTraining"),ATt.forEach(t),Ppr=r(VRe," (ALBERT model)"),VRe.forEach(t),Bpr=i(le),aT=n(le,"LI",{});var XRe=s(aT);K2e=n(XRe,"STRONG",{});var yTt=s(K2e);Ipr=r(yTt,"bart"),yTt.forEach(t),Npr=r(XRe," \u2014 "),MQ=n(XRe,"A",{href:!0});var LTt=s(MQ);qpr=r(LTt,"TFBartForConditionalGeneration"),LTt.forEach(t),jpr=r(XRe," (BART model)"),XRe.forEach(t),Dpr=i(le),nT=n(le,"LI",{});var zRe=s(nT);Z2e=n(zRe,"STRONG",{});var xTt=s(Z2e);Gpr=r(xTt,"bert"),xTt.forEach(t),Opr=r(zRe," \u2014 "),EQ=n(zRe,"A",{href:!0});var $Tt=s(EQ);Vpr=r($Tt,"TFBertForPreTraining"),$Tt.forEach(t),Xpr=r(zRe," (BERT model)"),zRe.forEach(t),zpr=i(le),sT=n(le,"LI",{});var WRe=s(sT);e4e=n(WRe,"STRONG",{});var kTt=s(e4e);Wpr=r(kTt,"camembert"),kTt.forEach(t),Qpr=r(WRe," \u2014 "),CQ=n(WRe,"A",{href:!0});var STt=s(CQ);Hpr=r(STt,"TFCamembertForMaskedLM"),STt.forEach(t),Upr=r(WRe," (CamemBERT model)"),WRe.forEach(t),Jpr=i(le),lT=n(le,"LI",{});var QRe=s(lT);o4e=n(QRe,"STRONG",{});var RTt=s(o4e);Ypr=r(RTt,"ctrl"),RTt.forEach(t),Kpr=r(QRe," \u2014 "),wQ=n(QRe,"A",{href:!0});var PTt=s(wQ);Zpr=r(PTt,"TFCTRLLMHeadModel"),PTt.forEach(t),e_r=r(QRe," (CTRL model)"),QRe.forEach(t),o_r=i(le),iT=n(le,"LI",{});var HRe=s(iT);r4e=n(HRe,"STRONG",{});var BTt=s(r4e);r_r=r(BTt,"distilbert"),BTt.forEach(t),t_r=r(HRe," \u2014 "),AQ=n(HRe,"A",{href:!0});var ITt=s(AQ);a_r=r(ITt,"TFDistilBertForMaskedLM"),ITt.forEach(t),n_r=r(HRe," (DistilBERT model)"),HRe.forEach(t),s_r=i(le),dT=n(le,"LI",{});var URe=s(dT);t4e=n(URe,"STRONG",{});var NTt=s(t4e);l_r=r(NTt,"electra"),NTt.forEach(t),i_r=r(URe," \u2014 "),yQ=n(URe,"A",{href:!0});var qTt=s(yQ);d_r=r(qTt,"TFElectraForPreTraining"),qTt.forEach(t),c_r=r(URe," (ELECTRA model)"),URe.forEach(t),f_r=i(le),cT=n(le,"LI",{});var JRe=s(cT);a4e=n(JRe,"STRONG",{});var jTt=s(a4e);m_r=r(jTt,"flaubert"),jTt.forEach(t),g_r=r(JRe," \u2014 "),LQ=n(JRe,"A",{href:!0});var DTt=s(LQ);h_r=r(DTt,"TFFlaubertWithLMHeadModel"),DTt.forEach(t),p_r=r(JRe," (FlauBERT model)"),JRe.forEach(t),__r=i(le),fT=n(le,"LI",{});var YRe=s(fT);n4e=n(YRe,"STRONG",{});var GTt=s(n4e);u_r=r(GTt,"funnel"),GTt.forEach(t),b_r=r(YRe," \u2014 "),xQ=n(YRe,"A",{href:!0});var OTt=s(xQ);v_r=r(OTt,"TFFunnelForPreTraining"),OTt.forEach(t),F_r=r(YRe," (Funnel Transformer model)"),YRe.forEach(t),T_r=i(le),mT=n(le,"LI",{});var KRe=s(mT);s4e=n(KRe,"STRONG",{});var VTt=s(s4e);M_r=r(VTt,"gpt2"),VTt.forEach(t),E_r=r(KRe," \u2014 "),$Q=n(KRe,"A",{href:!0});var XTt=s($Q);C_r=r(XTt,"TFGPT2LMHeadModel"),XTt.forEach(t),w_r=r(KRe," (OpenAI GPT-2 model)"),KRe.forEach(t),A_r=i(le),gT=n(le,"LI",{});var ZRe=s(gT);l4e=n(ZRe,"STRONG",{});var zTt=s(l4e);y_r=r(zTt,"layoutlm"),zTt.forEach(t),L_r=r(ZRe," \u2014 "),kQ=n(ZRe,"A",{href:!0});var WTt=s(kQ);x_r=r(WTt,"TFLayoutLMForMaskedLM"),WTt.forEach(t),$_r=r(ZRe," (LayoutLM model)"),ZRe.forEach(t),k_r=i(le),hT=n(le,"LI",{});var ePe=s(hT);i4e=n(ePe,"STRONG",{});var QTt=s(i4e);S_r=r(QTt,"lxmert"),QTt.forEach(t),R_r=r(ePe," \u2014 "),SQ=n(ePe,"A",{href:!0});var HTt=s(SQ);P_r=r(HTt,"TFLxmertForPreTraining"),HTt.forEach(t),B_r=r(ePe," (LXMERT model)"),ePe.forEach(t),I_r=i(le),pT=n(le,"LI",{});var oPe=s(pT);d4e=n(oPe,"STRONG",{});var UTt=s(d4e);N_r=r(UTt,"mobilebert"),UTt.forEach(t),q_r=r(oPe," \u2014 "),RQ=n(oPe,"A",{href:!0});var JTt=s(RQ);j_r=r(JTt,"TFMobileBertForPreTraining"),JTt.forEach(t),D_r=r(oPe," (MobileBERT model)"),oPe.forEach(t),G_r=i(le),_T=n(le,"LI",{});var rPe=s(_T);c4e=n(rPe,"STRONG",{});var YTt=s(c4e);O_r=r(YTt,"mpnet"),YTt.forEach(t),V_r=r(rPe," \u2014 "),PQ=n(rPe,"A",{href:!0});var KTt=s(PQ);X_r=r(KTt,"TFMPNetForMaskedLM"),KTt.forEach(t),z_r=r(rPe," (MPNet model)"),rPe.forEach(t),W_r=i(le),uT=n(le,"LI",{});var tPe=s(uT);f4e=n(tPe,"STRONG",{});var ZTt=s(f4e);Q_r=r(ZTt,"openai-gpt"),ZTt.forEach(t),H_r=r(tPe," \u2014 "),BQ=n(tPe,"A",{href:!0});var e7t=s(BQ);U_r=r(e7t,"TFOpenAIGPTLMHeadModel"),e7t.forEach(t),J_r=r(tPe," (OpenAI GPT model)"),tPe.forEach(t),Y_r=i(le),bT=n(le,"LI",{});var aPe=s(bT);m4e=n(aPe,"STRONG",{});var o7t=s(m4e);K_r=r(o7t,"roberta"),o7t.forEach(t),Z_r=r(aPe," \u2014 "),IQ=n(aPe,"A",{href:!0});var r7t=s(IQ);eur=r(r7t,"TFRobertaForMaskedLM"),r7t.forEach(t),our=r(aPe," (RoBERTa model)"),aPe.forEach(t),rur=i(le),vT=n(le,"LI",{});var nPe=s(vT);g4e=n(nPe,"STRONG",{});var t7t=s(g4e);tur=r(t7t,"t5"),t7t.forEach(t),aur=r(nPe," \u2014 "),NQ=n(nPe,"A",{href:!0});var a7t=s(NQ);nur=r(a7t,"TFT5ForConditionalGeneration"),a7t.forEach(t),sur=r(nPe," (T5 model)"),nPe.forEach(t),lur=i(le),FT=n(le,"LI",{});var sPe=s(FT);h4e=n(sPe,"STRONG",{});var n7t=s(h4e);iur=r(n7t,"tapas"),n7t.forEach(t),dur=r(sPe," \u2014 "),qQ=n(sPe,"A",{href:!0});var s7t=s(qQ);cur=r(s7t,"TFTapasForMaskedLM"),s7t.forEach(t),fur=r(sPe," (TAPAS model)"),sPe.forEach(t),mur=i(le),TT=n(le,"LI",{});var lPe=s(TT);p4e=n(lPe,"STRONG",{});var l7t=s(p4e);gur=r(l7t,"transfo-xl"),l7t.forEach(t),hur=r(lPe," \u2014 "),jQ=n(lPe,"A",{href:!0});var i7t=s(jQ);pur=r(i7t,"TFTransfoXLLMHeadModel"),i7t.forEach(t),_ur=r(lPe," (Transformer-XL model)"),lPe.forEach(t),uur=i(le),MT=n(le,"LI",{});var iPe=s(MT);_4e=n(iPe,"STRONG",{});var d7t=s(_4e);bur=r(d7t,"vit_mae"),d7t.forEach(t),vur=r(iPe," \u2014 "),DQ=n(iPe,"A",{href:!0});var c7t=s(DQ);Fur=r(c7t,"TFViTMAEForPreTraining"),c7t.forEach(t),Tur=r(iPe," (ViTMAE model)"),iPe.forEach(t),Mur=i(le),ET=n(le,"LI",{});var dPe=s(ET);u4e=n(dPe,"STRONG",{});var f7t=s(u4e);Eur=r(f7t,"xlm"),f7t.forEach(t),Cur=r(dPe," \u2014 "),GQ=n(dPe,"A",{href:!0});var m7t=s(GQ);wur=r(m7t,"TFXLMWithLMHeadModel"),m7t.forEach(t),Aur=r(dPe," (XLM model)"),dPe.forEach(t),yur=i(le),CT=n(le,"LI",{});var cPe=s(CT);b4e=n(cPe,"STRONG",{});var g7t=s(b4e);Lur=r(g7t,"xlm-roberta"),g7t.forEach(t),xur=r(cPe," \u2014 "),OQ=n(cPe,"A",{href:!0});var h7t=s(OQ);$ur=r(h7t,"TFXLMRobertaForMaskedLM"),h7t.forEach(t),kur=r(cPe," (XLM-RoBERTa model)"),cPe.forEach(t),Sur=i(le),wT=n(le,"LI",{});var fPe=s(wT);v4e=n(fPe,"STRONG",{});var p7t=s(v4e);Rur=r(p7t,"xlnet"),p7t.forEach(t),Pur=r(fPe," \u2014 "),VQ=n(fPe,"A",{href:!0});var _7t=s(VQ);Bur=r(_7t,"TFXLNetLMHeadModel"),_7t.forEach(t),Iur=r(fPe," (XLNet model)"),fPe.forEach(t),le.forEach(t),Nur=i(ul),T(AT.$$.fragment,ul),ul.forEach(t),_l.forEach(t),Qje=i(f),Hd=n(f,"H2",{class:!0});var ZGe=s(Hd);yT=n(ZGe,"A",{id:!0,class:!0,href:!0});var u7t=s(yT);F4e=n(u7t,"SPAN",{});var b7t=s(F4e);T(L8.$$.fragment,b7t),b7t.forEach(t),u7t.forEach(t),qur=i(ZGe),T4e=n(ZGe,"SPAN",{});var v7t=s(T4e);jur=r(v7t,"TFAutoModelForCausalLM"),v7t.forEach(t),ZGe.forEach(t),Hje=i(f),Zo=n(f,"DIV",{class:!0});var bl=s(Zo);T(x8.$$.fragment,bl),Dur=i(bl),Ud=n(bl,"P",{});var See=s(Ud);Gur=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),XQ=n(See,"A",{href:!0});var F7t=s(XQ);Our=r(F7t,"from_pretrained()"),F7t.forEach(t),Vur=r(See," class method or the "),zQ=n(See,"A",{href:!0});var T7t=s(zQ);Xur=r(T7t,"from_config()"),T7t.forEach(t),zur=r(See,` class
method.`),See.forEach(t),Wur=i(bl),$8=n(bl,"P",{});var eOe=s($8);Qur=r(eOe,"This class cannot be instantiated directly using "),M4e=n(eOe,"CODE",{});var M7t=s(M4e);Hur=r(M7t,"__init__()"),M7t.forEach(t),Uur=r(eOe," (throws an error)."),eOe.forEach(t),Jur=i(bl),$t=n(bl,"DIV",{class:!0});var q6=s($t);T(k8.$$.fragment,q6),Yur=i(q6),E4e=n(q6,"P",{});var E7t=s(E4e);Kur=r(E7t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),E7t.forEach(t),Zur=i(q6),Jd=n(q6,"P",{});var Ree=s(Jd);e1r=r(Ree,`Note:
Loading a model from its configuration file does `),C4e=n(Ree,"STRONG",{});var C7t=s(C4e);o1r=r(C7t,"not"),C7t.forEach(t),r1r=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=n(Ree,"A",{href:!0});var w7t=s(WQ);t1r=r(w7t,"from_pretrained()"),w7t.forEach(t),a1r=r(Ree," to load the model weights."),Ree.forEach(t),n1r=i(q6),T(LT.$$.fragment,q6),q6.forEach(t),s1r=i(bl),yr=n(bl,"DIV",{class:!0});var vl=s(yr);T(S8.$$.fragment,vl),l1r=i(vl),w4e=n(vl,"P",{});var A7t=s(w4e);i1r=r(A7t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),A7t.forEach(t),d1r=i(vl),en=n(vl,"P",{});var j6=s(en);c1r=r(j6,"The model class to instantiate is selected based on the "),A4e=n(j6,"CODE",{});var y7t=s(A4e);f1r=r(y7t,"model_type"),y7t.forEach(t),m1r=r(j6,` property of the config object (either
passed as an argument or loaded from `),y4e=n(j6,"CODE",{});var L7t=s(y4e);g1r=r(L7t,"pretrained_model_name_or_path"),L7t.forEach(t),h1r=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L4e=n(j6,"CODE",{});var x7t=s(L4e);p1r=r(x7t,"pretrained_model_name_or_path"),x7t.forEach(t),_1r=r(j6,":"),j6.forEach(t),u1r=i(vl),Me=n(vl,"UL",{});var Ce=s(Me);xT=n(Ce,"LI",{});var mPe=s(xT);x4e=n(mPe,"STRONG",{});var $7t=s(x4e);b1r=r($7t,"bert"),$7t.forEach(t),v1r=r(mPe," \u2014 "),QQ=n(mPe,"A",{href:!0});var k7t=s(QQ);F1r=r(k7t,"TFBertLMHeadModel"),k7t.forEach(t),T1r=r(mPe," (BERT model)"),mPe.forEach(t),M1r=i(Ce),$T=n(Ce,"LI",{});var gPe=s($T);$4e=n(gPe,"STRONG",{});var S7t=s($4e);E1r=r(S7t,"camembert"),S7t.forEach(t),C1r=r(gPe," \u2014 "),HQ=n(gPe,"A",{href:!0});var R7t=s(HQ);w1r=r(R7t,"TFCamembertForCausalLM"),R7t.forEach(t),A1r=r(gPe," (CamemBERT model)"),gPe.forEach(t),y1r=i(Ce),kT=n(Ce,"LI",{});var hPe=s(kT);k4e=n(hPe,"STRONG",{});var P7t=s(k4e);L1r=r(P7t,"ctrl"),P7t.forEach(t),x1r=r(hPe," \u2014 "),UQ=n(hPe,"A",{href:!0});var B7t=s(UQ);$1r=r(B7t,"TFCTRLLMHeadModel"),B7t.forEach(t),k1r=r(hPe," (CTRL model)"),hPe.forEach(t),S1r=i(Ce),ST=n(Ce,"LI",{});var pPe=s(ST);S4e=n(pPe,"STRONG",{});var I7t=s(S4e);R1r=r(I7t,"gpt2"),I7t.forEach(t),P1r=r(pPe," \u2014 "),JQ=n(pPe,"A",{href:!0});var N7t=s(JQ);B1r=r(N7t,"TFGPT2LMHeadModel"),N7t.forEach(t),I1r=r(pPe," (OpenAI GPT-2 model)"),pPe.forEach(t),N1r=i(Ce),RT=n(Ce,"LI",{});var _Pe=s(RT);R4e=n(_Pe,"STRONG",{});var q7t=s(R4e);q1r=r(q7t,"gptj"),q7t.forEach(t),j1r=r(_Pe," \u2014 "),YQ=n(_Pe,"A",{href:!0});var j7t=s(YQ);D1r=r(j7t,"TFGPTJForCausalLM"),j7t.forEach(t),G1r=r(_Pe," (GPT-J model)"),_Pe.forEach(t),O1r=i(Ce),PT=n(Ce,"LI",{});var uPe=s(PT);P4e=n(uPe,"STRONG",{});var D7t=s(P4e);V1r=r(D7t,"openai-gpt"),D7t.forEach(t),X1r=r(uPe," \u2014 "),KQ=n(uPe,"A",{href:!0});var G7t=s(KQ);z1r=r(G7t,"TFOpenAIGPTLMHeadModel"),G7t.forEach(t),W1r=r(uPe," (OpenAI GPT model)"),uPe.forEach(t),Q1r=i(Ce),BT=n(Ce,"LI",{});var bPe=s(BT);B4e=n(bPe,"STRONG",{});var O7t=s(B4e);H1r=r(O7t,"opt"),O7t.forEach(t),U1r=r(bPe," \u2014 "),ZQ=n(bPe,"A",{href:!0});var V7t=s(ZQ);J1r=r(V7t,"TFOPTForCausalLM"),V7t.forEach(t),Y1r=r(bPe," (OPT model)"),bPe.forEach(t),K1r=i(Ce),IT=n(Ce,"LI",{});var vPe=s(IT);I4e=n(vPe,"STRONG",{});var X7t=s(I4e);Z1r=r(X7t,"rembert"),X7t.forEach(t),ebr=r(vPe," \u2014 "),eH=n(vPe,"A",{href:!0});var z7t=s(eH);obr=r(z7t,"TFRemBertForCausalLM"),z7t.forEach(t),rbr=r(vPe," (RemBERT model)"),vPe.forEach(t),tbr=i(Ce),NT=n(Ce,"LI",{});var FPe=s(NT);N4e=n(FPe,"STRONG",{});var W7t=s(N4e);abr=r(W7t,"roberta"),W7t.forEach(t),nbr=r(FPe," \u2014 "),oH=n(FPe,"A",{href:!0});var Q7t=s(oH);sbr=r(Q7t,"TFRobertaForCausalLM"),Q7t.forEach(t),lbr=r(FPe," (RoBERTa model)"),FPe.forEach(t),ibr=i(Ce),qT=n(Ce,"LI",{});var TPe=s(qT);q4e=n(TPe,"STRONG",{});var H7t=s(q4e);dbr=r(H7t,"roformer"),H7t.forEach(t),cbr=r(TPe," \u2014 "),rH=n(TPe,"A",{href:!0});var U7t=s(rH);fbr=r(U7t,"TFRoFormerForCausalLM"),U7t.forEach(t),mbr=r(TPe," (RoFormer model)"),TPe.forEach(t),gbr=i(Ce),jT=n(Ce,"LI",{});var MPe=s(jT);j4e=n(MPe,"STRONG",{});var J7t=s(j4e);hbr=r(J7t,"transfo-xl"),J7t.forEach(t),pbr=r(MPe," \u2014 "),tH=n(MPe,"A",{href:!0});var Y7t=s(tH);_br=r(Y7t,"TFTransfoXLLMHeadModel"),Y7t.forEach(t),ubr=r(MPe," (Transformer-XL model)"),MPe.forEach(t),bbr=i(Ce),DT=n(Ce,"LI",{});var EPe=s(DT);D4e=n(EPe,"STRONG",{});var K7t=s(D4e);vbr=r(K7t,"xlm"),K7t.forEach(t),Fbr=r(EPe," \u2014 "),aH=n(EPe,"A",{href:!0});var Z7t=s(aH);Tbr=r(Z7t,"TFXLMWithLMHeadModel"),Z7t.forEach(t),Mbr=r(EPe," (XLM model)"),EPe.forEach(t),Ebr=i(Ce),GT=n(Ce,"LI",{});var CPe=s(GT);G4e=n(CPe,"STRONG",{});var eMt=s(G4e);Cbr=r(eMt,"xlnet"),eMt.forEach(t),wbr=r(CPe," \u2014 "),nH=n(CPe,"A",{href:!0});var oMt=s(nH);Abr=r(oMt,"TFXLNetLMHeadModel"),oMt.forEach(t),ybr=r(CPe," (XLNet model)"),CPe.forEach(t),Ce.forEach(t),Lbr=i(vl),T(OT.$$.fragment,vl),vl.forEach(t),bl.forEach(t),Uje=i(f),Yd=n(f,"H2",{class:!0});var oOe=s(Yd);VT=n(oOe,"A",{id:!0,class:!0,href:!0});var rMt=s(VT);O4e=n(rMt,"SPAN",{});var tMt=s(O4e);T(R8.$$.fragment,tMt),tMt.forEach(t),rMt.forEach(t),xbr=i(oOe),V4e=n(oOe,"SPAN",{});var aMt=s(V4e);$br=r(aMt,"TFAutoModelForImageClassification"),aMt.forEach(t),oOe.forEach(t),Jje=i(f),er=n(f,"DIV",{class:!0});var Fl=s(er);T(P8.$$.fragment,Fl),kbr=i(Fl),Kd=n(Fl,"P",{});var Pee=s(Kd);Sbr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sH=n(Pee,"A",{href:!0});var nMt=s(sH);Rbr=r(nMt,"from_pretrained()"),nMt.forEach(t),Pbr=r(Pee," class method or the "),lH=n(Pee,"A",{href:!0});var sMt=s(lH);Bbr=r(sMt,"from_config()"),sMt.forEach(t),Ibr=r(Pee,` class
method.`),Pee.forEach(t),Nbr=i(Fl),B8=n(Fl,"P",{});var rOe=s(B8);qbr=r(rOe,"This class cannot be instantiated directly using "),X4e=n(rOe,"CODE",{});var lMt=s(X4e);jbr=r(lMt,"__init__()"),lMt.forEach(t),Dbr=r(rOe," (throws an error)."),rOe.forEach(t),Gbr=i(Fl),kt=n(Fl,"DIV",{class:!0});var D6=s(kt);T(I8.$$.fragment,D6),Obr=i(D6),z4e=n(D6,"P",{});var iMt=s(z4e);Vbr=r(iMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iMt.forEach(t),Xbr=i(D6),Zd=n(D6,"P",{});var Bee=s(Zd);zbr=r(Bee,`Note:
Loading a model from its configuration file does `),W4e=n(Bee,"STRONG",{});var dMt=s(W4e);Wbr=r(dMt,"not"),dMt.forEach(t),Qbr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=n(Bee,"A",{href:!0});var cMt=s(iH);Hbr=r(cMt,"from_pretrained()"),cMt.forEach(t),Ubr=r(Bee," to load the model weights."),Bee.forEach(t),Jbr=i(D6),T(XT.$$.fragment,D6),D6.forEach(t),Ybr=i(Fl),Lr=n(Fl,"DIV",{class:!0});var Tl=s(Lr);T(N8.$$.fragment,Tl),Kbr=i(Tl),Q4e=n(Tl,"P",{});var fMt=s(Q4e);Zbr=r(fMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fMt.forEach(t),e2r=i(Tl),on=n(Tl,"P",{});var G6=s(on);o2r=r(G6,"The model class to instantiate is selected based on the "),H4e=n(G6,"CODE",{});var mMt=s(H4e);r2r=r(mMt,"model_type"),mMt.forEach(t),t2r=r(G6,` property of the config object (either
passed as an argument or loaded from `),U4e=n(G6,"CODE",{});var gMt=s(U4e);a2r=r(gMt,"pretrained_model_name_or_path"),gMt.forEach(t),n2r=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=n(G6,"CODE",{});var hMt=s(J4e);s2r=r(hMt,"pretrained_model_name_or_path"),hMt.forEach(t),l2r=r(G6,":"),G6.forEach(t),i2r=i(Tl),rn=n(Tl,"UL",{});var O6=s(rn);zT=n(O6,"LI",{});var wPe=s(zT);Y4e=n(wPe,"STRONG",{});var pMt=s(Y4e);d2r=r(pMt,"convnext"),pMt.forEach(t),c2r=r(wPe," \u2014 "),dH=n(wPe,"A",{href:!0});var _Mt=s(dH);f2r=r(_Mt,"TFConvNextForImageClassification"),_Mt.forEach(t),m2r=r(wPe," (ConvNext model)"),wPe.forEach(t),g2r=i(O6),WT=n(O6,"LI",{});var APe=s(WT);K4e=n(APe,"STRONG",{});var uMt=s(K4e);h2r=r(uMt,"data2vec-vision"),uMt.forEach(t),p2r=r(APe," \u2014 "),cH=n(APe,"A",{href:!0});var bMt=s(cH);_2r=r(bMt,"TFData2VecVisionForImageClassification"),bMt.forEach(t),u2r=r(APe," (Data2VecVision model)"),APe.forEach(t),b2r=i(O6),QT=n(O6,"LI",{});var yPe=s(QT);Z4e=n(yPe,"STRONG",{});var vMt=s(Z4e);v2r=r(vMt,"swin"),vMt.forEach(t),F2r=r(yPe," \u2014 "),fH=n(yPe,"A",{href:!0});var FMt=s(fH);T2r=r(FMt,"TFSwinForImageClassification"),FMt.forEach(t),M2r=r(yPe," (Swin model)"),yPe.forEach(t),E2r=i(O6),HT=n(O6,"LI",{});var LPe=s(HT);e5e=n(LPe,"STRONG",{});var TMt=s(e5e);C2r=r(TMt,"vit"),TMt.forEach(t),w2r=r(LPe," \u2014 "),mH=n(LPe,"A",{href:!0});var MMt=s(mH);A2r=r(MMt,"TFViTForImageClassification"),MMt.forEach(t),y2r=r(LPe," (ViT model)"),LPe.forEach(t),O6.forEach(t),L2r=i(Tl),T(UT.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),Yje=i(f),ec=n(f,"H2",{class:!0});var tOe=s(ec);JT=n(tOe,"A",{id:!0,class:!0,href:!0});var EMt=s(JT);o5e=n(EMt,"SPAN",{});var CMt=s(o5e);T(q8.$$.fragment,CMt),CMt.forEach(t),EMt.forEach(t),x2r=i(tOe),r5e=n(tOe,"SPAN",{});var wMt=s(r5e);$2r=r(wMt,"TFAutoModelForMaskedLM"),wMt.forEach(t),tOe.forEach(t),Kje=i(f),or=n(f,"DIV",{class:!0});var Ml=s(or);T(j8.$$.fragment,Ml),k2r=i(Ml),oc=n(Ml,"P",{});var Iee=s(oc);S2r=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gH=n(Iee,"A",{href:!0});var AMt=s(gH);R2r=r(AMt,"from_pretrained()"),AMt.forEach(t),P2r=r(Iee," class method or the "),hH=n(Iee,"A",{href:!0});var yMt=s(hH);B2r=r(yMt,"from_config()"),yMt.forEach(t),I2r=r(Iee,` class
method.`),Iee.forEach(t),N2r=i(Ml),D8=n(Ml,"P",{});var aOe=s(D8);q2r=r(aOe,"This class cannot be instantiated directly using "),t5e=n(aOe,"CODE",{});var LMt=s(t5e);j2r=r(LMt,"__init__()"),LMt.forEach(t),D2r=r(aOe," (throws an error)."),aOe.forEach(t),G2r=i(Ml),St=n(Ml,"DIV",{class:!0});var V6=s(St);T(G8.$$.fragment,V6),O2r=i(V6),a5e=n(V6,"P",{});var xMt=s(a5e);V2r=r(xMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xMt.forEach(t),X2r=i(V6),rc=n(V6,"P",{});var Nee=s(rc);z2r=r(Nee,`Note:
Loading a model from its configuration file does `),n5e=n(Nee,"STRONG",{});var $Mt=s(n5e);W2r=r($Mt,"not"),$Mt.forEach(t),Q2r=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=n(Nee,"A",{href:!0});var kMt=s(pH);H2r=r(kMt,"from_pretrained()"),kMt.forEach(t),U2r=r(Nee," to load the model weights."),Nee.forEach(t),J2r=i(V6),T(YT.$$.fragment,V6),V6.forEach(t),Y2r=i(Ml),xr=n(Ml,"DIV",{class:!0});var El=s(xr);T(O8.$$.fragment,El),K2r=i(El),s5e=n(El,"P",{});var SMt=s(s5e);Z2r=r(SMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),SMt.forEach(t),e4r=i(El),tn=n(El,"P",{});var X6=s(tn);o4r=r(X6,"The model class to instantiate is selected based on the "),l5e=n(X6,"CODE",{});var RMt=s(l5e);r4r=r(RMt,"model_type"),RMt.forEach(t),t4r=r(X6,` property of the config object (either
passed as an argument or loaded from `),i5e=n(X6,"CODE",{});var PMt=s(i5e);a4r=r(PMt,"pretrained_model_name_or_path"),PMt.forEach(t),n4r=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=n(X6,"CODE",{});var BMt=s(d5e);s4r=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),l4r=r(X6,":"),X6.forEach(t),i4r=i(El),ie=n(El,"UL",{});var fe=s(ie);KT=n(fe,"LI",{});var xPe=s(KT);c5e=n(xPe,"STRONG",{});var IMt=s(c5e);d4r=r(IMt,"albert"),IMt.forEach(t),c4r=r(xPe," \u2014 "),_H=n(xPe,"A",{href:!0});var NMt=s(_H);f4r=r(NMt,"TFAlbertForMaskedLM"),NMt.forEach(t),m4r=r(xPe," (ALBERT model)"),xPe.forEach(t),g4r=i(fe),ZT=n(fe,"LI",{});var $Pe=s(ZT);f5e=n($Pe,"STRONG",{});var qMt=s(f5e);h4r=r(qMt,"bert"),qMt.forEach(t),p4r=r($Pe," \u2014 "),uH=n($Pe,"A",{href:!0});var jMt=s(uH);_4r=r(jMt,"TFBertForMaskedLM"),jMt.forEach(t),u4r=r($Pe," (BERT model)"),$Pe.forEach(t),b4r=i(fe),e7=n(fe,"LI",{});var kPe=s(e7);m5e=n(kPe,"STRONG",{});var DMt=s(m5e);v4r=r(DMt,"camembert"),DMt.forEach(t),F4r=r(kPe," \u2014 "),bH=n(kPe,"A",{href:!0});var GMt=s(bH);T4r=r(GMt,"TFCamembertForMaskedLM"),GMt.forEach(t),M4r=r(kPe," (CamemBERT model)"),kPe.forEach(t),E4r=i(fe),o7=n(fe,"LI",{});var SPe=s(o7);g5e=n(SPe,"STRONG",{});var OMt=s(g5e);C4r=r(OMt,"convbert"),OMt.forEach(t),w4r=r(SPe," \u2014 "),vH=n(SPe,"A",{href:!0});var VMt=s(vH);A4r=r(VMt,"TFConvBertForMaskedLM"),VMt.forEach(t),y4r=r(SPe," (ConvBERT model)"),SPe.forEach(t),L4r=i(fe),r7=n(fe,"LI",{});var RPe=s(r7);h5e=n(RPe,"STRONG",{});var XMt=s(h5e);x4r=r(XMt,"deberta"),XMt.forEach(t),$4r=r(RPe," \u2014 "),FH=n(RPe,"A",{href:!0});var zMt=s(FH);k4r=r(zMt,"TFDebertaForMaskedLM"),zMt.forEach(t),S4r=r(RPe," (DeBERTa model)"),RPe.forEach(t),R4r=i(fe),t7=n(fe,"LI",{});var PPe=s(t7);p5e=n(PPe,"STRONG",{});var WMt=s(p5e);P4r=r(WMt,"deberta-v2"),WMt.forEach(t),B4r=r(PPe," \u2014 "),TH=n(PPe,"A",{href:!0});var QMt=s(TH);I4r=r(QMt,"TFDebertaV2ForMaskedLM"),QMt.forEach(t),N4r=r(PPe," (DeBERTa-v2 model)"),PPe.forEach(t),q4r=i(fe),a7=n(fe,"LI",{});var BPe=s(a7);_5e=n(BPe,"STRONG",{});var HMt=s(_5e);j4r=r(HMt,"distilbert"),HMt.forEach(t),D4r=r(BPe," \u2014 "),MH=n(BPe,"A",{href:!0});var UMt=s(MH);G4r=r(UMt,"TFDistilBertForMaskedLM"),UMt.forEach(t),O4r=r(BPe," (DistilBERT model)"),BPe.forEach(t),V4r=i(fe),n7=n(fe,"LI",{});var IPe=s(n7);u5e=n(IPe,"STRONG",{});var JMt=s(u5e);X4r=r(JMt,"electra"),JMt.forEach(t),z4r=r(IPe," \u2014 "),EH=n(IPe,"A",{href:!0});var YMt=s(EH);W4r=r(YMt,"TFElectraForMaskedLM"),YMt.forEach(t),Q4r=r(IPe," (ELECTRA model)"),IPe.forEach(t),H4r=i(fe),s7=n(fe,"LI",{});var NPe=s(s7);b5e=n(NPe,"STRONG",{});var KMt=s(b5e);U4r=r(KMt,"flaubert"),KMt.forEach(t),J4r=r(NPe," \u2014 "),CH=n(NPe,"A",{href:!0});var ZMt=s(CH);Y4r=r(ZMt,"TFFlaubertWithLMHeadModel"),ZMt.forEach(t),K4r=r(NPe," (FlauBERT model)"),NPe.forEach(t),Z4r=i(fe),l7=n(fe,"LI",{});var qPe=s(l7);v5e=n(qPe,"STRONG",{});var eEt=s(v5e);e5r=r(eEt,"funnel"),eEt.forEach(t),o5r=r(qPe," \u2014 "),wH=n(qPe,"A",{href:!0});var oEt=s(wH);r5r=r(oEt,"TFFunnelForMaskedLM"),oEt.forEach(t),t5r=r(qPe," (Funnel Transformer model)"),qPe.forEach(t),a5r=i(fe),i7=n(fe,"LI",{});var jPe=s(i7);F5e=n(jPe,"STRONG",{});var rEt=s(F5e);n5r=r(rEt,"layoutlm"),rEt.forEach(t),s5r=r(jPe," \u2014 "),AH=n(jPe,"A",{href:!0});var tEt=s(AH);l5r=r(tEt,"TFLayoutLMForMaskedLM"),tEt.forEach(t),i5r=r(jPe," (LayoutLM model)"),jPe.forEach(t),d5r=i(fe),d7=n(fe,"LI",{});var DPe=s(d7);T5e=n(DPe,"STRONG",{});var aEt=s(T5e);c5r=r(aEt,"longformer"),aEt.forEach(t),f5r=r(DPe," \u2014 "),yH=n(DPe,"A",{href:!0});var nEt=s(yH);m5r=r(nEt,"TFLongformerForMaskedLM"),nEt.forEach(t),g5r=r(DPe," (Longformer model)"),DPe.forEach(t),h5r=i(fe),c7=n(fe,"LI",{});var GPe=s(c7);M5e=n(GPe,"STRONG",{});var sEt=s(M5e);p5r=r(sEt,"mobilebert"),sEt.forEach(t),_5r=r(GPe," \u2014 "),LH=n(GPe,"A",{href:!0});var lEt=s(LH);u5r=r(lEt,"TFMobileBertForMaskedLM"),lEt.forEach(t),b5r=r(GPe," (MobileBERT model)"),GPe.forEach(t),v5r=i(fe),f7=n(fe,"LI",{});var OPe=s(f7);E5e=n(OPe,"STRONG",{});var iEt=s(E5e);F5r=r(iEt,"mpnet"),iEt.forEach(t),T5r=r(OPe," \u2014 "),xH=n(OPe,"A",{href:!0});var dEt=s(xH);M5r=r(dEt,"TFMPNetForMaskedLM"),dEt.forEach(t),E5r=r(OPe," (MPNet model)"),OPe.forEach(t),C5r=i(fe),m7=n(fe,"LI",{});var VPe=s(m7);C5e=n(VPe,"STRONG",{});var cEt=s(C5e);w5r=r(cEt,"rembert"),cEt.forEach(t),A5r=r(VPe," \u2014 "),$H=n(VPe,"A",{href:!0});var fEt=s($H);y5r=r(fEt,"TFRemBertForMaskedLM"),fEt.forEach(t),L5r=r(VPe," (RemBERT model)"),VPe.forEach(t),x5r=i(fe),g7=n(fe,"LI",{});var XPe=s(g7);w5e=n(XPe,"STRONG",{});var mEt=s(w5e);$5r=r(mEt,"roberta"),mEt.forEach(t),k5r=r(XPe," \u2014 "),kH=n(XPe,"A",{href:!0});var gEt=s(kH);S5r=r(gEt,"TFRobertaForMaskedLM"),gEt.forEach(t),R5r=r(XPe," (RoBERTa model)"),XPe.forEach(t),P5r=i(fe),h7=n(fe,"LI",{});var zPe=s(h7);A5e=n(zPe,"STRONG",{});var hEt=s(A5e);B5r=r(hEt,"roformer"),hEt.forEach(t),I5r=r(zPe," \u2014 "),SH=n(zPe,"A",{href:!0});var pEt=s(SH);N5r=r(pEt,"TFRoFormerForMaskedLM"),pEt.forEach(t),q5r=r(zPe," (RoFormer model)"),zPe.forEach(t),j5r=i(fe),p7=n(fe,"LI",{});var WPe=s(p7);y5e=n(WPe,"STRONG",{});var _Et=s(y5e);D5r=r(_Et,"tapas"),_Et.forEach(t),G5r=r(WPe," \u2014 "),RH=n(WPe,"A",{href:!0});var uEt=s(RH);O5r=r(uEt,"TFTapasForMaskedLM"),uEt.forEach(t),V5r=r(WPe," (TAPAS model)"),WPe.forEach(t),X5r=i(fe),_7=n(fe,"LI",{});var QPe=s(_7);L5e=n(QPe,"STRONG",{});var bEt=s(L5e);z5r=r(bEt,"xlm"),bEt.forEach(t),W5r=r(QPe," \u2014 "),PH=n(QPe,"A",{href:!0});var vEt=s(PH);Q5r=r(vEt,"TFXLMWithLMHeadModel"),vEt.forEach(t),H5r=r(QPe," (XLM model)"),QPe.forEach(t),U5r=i(fe),u7=n(fe,"LI",{});var HPe=s(u7);x5e=n(HPe,"STRONG",{});var FEt=s(x5e);J5r=r(FEt,"xlm-roberta"),FEt.forEach(t),Y5r=r(HPe," \u2014 "),BH=n(HPe,"A",{href:!0});var TEt=s(BH);K5r=r(TEt,"TFXLMRobertaForMaskedLM"),TEt.forEach(t),Z5r=r(HPe," (XLM-RoBERTa model)"),HPe.forEach(t),fe.forEach(t),evr=i(El),T(b7.$$.fragment,El),El.forEach(t),Ml.forEach(t),Zje=i(f),tc=n(f,"H2",{class:!0});var nOe=s(tc);v7=n(nOe,"A",{id:!0,class:!0,href:!0});var MEt=s(v7);$5e=n(MEt,"SPAN",{});var EEt=s($5e);T(V8.$$.fragment,EEt),EEt.forEach(t),MEt.forEach(t),ovr=i(nOe),k5e=n(nOe,"SPAN",{});var CEt=s(k5e);rvr=r(CEt,"TFAutoModelForSeq2SeqLM"),CEt.forEach(t),nOe.forEach(t),eDe=i(f),rr=n(f,"DIV",{class:!0});var Cl=s(rr);T(X8.$$.fragment,Cl),tvr=i(Cl),ac=n(Cl,"P",{});var qee=s(ac);avr=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IH=n(qee,"A",{href:!0});var wEt=s(IH);nvr=r(wEt,"from_pretrained()"),wEt.forEach(t),svr=r(qee," class method or the "),NH=n(qee,"A",{href:!0});var AEt=s(NH);lvr=r(AEt,"from_config()"),AEt.forEach(t),ivr=r(qee,` class
method.`),qee.forEach(t),dvr=i(Cl),z8=n(Cl,"P",{});var sOe=s(z8);cvr=r(sOe,"This class cannot be instantiated directly using "),S5e=n(sOe,"CODE",{});var yEt=s(S5e);fvr=r(yEt,"__init__()"),yEt.forEach(t),mvr=r(sOe," (throws an error)."),sOe.forEach(t),gvr=i(Cl),Rt=n(Cl,"DIV",{class:!0});var z6=s(Rt);T(W8.$$.fragment,z6),hvr=i(z6),R5e=n(z6,"P",{});var LEt=s(R5e);pvr=r(LEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),LEt.forEach(t),_vr=i(z6),nc=n(z6,"P",{});var jee=s(nc);uvr=r(jee,`Note:
Loading a model from its configuration file does `),P5e=n(jee,"STRONG",{});var xEt=s(P5e);bvr=r(xEt,"not"),xEt.forEach(t),vvr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=n(jee,"A",{href:!0});var $Et=s(qH);Fvr=r($Et,"from_pretrained()"),$Et.forEach(t),Tvr=r(jee," to load the model weights."),jee.forEach(t),Mvr=i(z6),T(F7.$$.fragment,z6),z6.forEach(t),Evr=i(Cl),$r=n(Cl,"DIV",{class:!0});var wl=s($r);T(Q8.$$.fragment,wl),Cvr=i(wl),B5e=n(wl,"P",{});var kEt=s(B5e);wvr=r(kEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kEt.forEach(t),Avr=i(wl),an=n(wl,"P",{});var W6=s(an);yvr=r(W6,"The model class to instantiate is selected based on the "),I5e=n(W6,"CODE",{});var SEt=s(I5e);Lvr=r(SEt,"model_type"),SEt.forEach(t),xvr=r(W6,` property of the config object (either
passed as an argument or loaded from `),N5e=n(W6,"CODE",{});var REt=s(N5e);$vr=r(REt,"pretrained_model_name_or_path"),REt.forEach(t),kvr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q5e=n(W6,"CODE",{});var PEt=s(q5e);Svr=r(PEt,"pretrained_model_name_or_path"),PEt.forEach(t),Rvr=r(W6,":"),W6.forEach(t),Pvr=i(wl),ye=n(wl,"UL",{});var Be=s(ye);T7=n(Be,"LI",{});var UPe=s(T7);j5e=n(UPe,"STRONG",{});var BEt=s(j5e);Bvr=r(BEt,"bart"),BEt.forEach(t),Ivr=r(UPe," \u2014 "),jH=n(UPe,"A",{href:!0});var IEt=s(jH);Nvr=r(IEt,"TFBartForConditionalGeneration"),IEt.forEach(t),qvr=r(UPe," (BART model)"),UPe.forEach(t),jvr=i(Be),M7=n(Be,"LI",{});var JPe=s(M7);D5e=n(JPe,"STRONG",{});var NEt=s(D5e);Dvr=r(NEt,"blenderbot"),NEt.forEach(t),Gvr=r(JPe," \u2014 "),DH=n(JPe,"A",{href:!0});var qEt=s(DH);Ovr=r(qEt,"TFBlenderbotForConditionalGeneration"),qEt.forEach(t),Vvr=r(JPe," (Blenderbot model)"),JPe.forEach(t),Xvr=i(Be),E7=n(Be,"LI",{});var YPe=s(E7);G5e=n(YPe,"STRONG",{});var jEt=s(G5e);zvr=r(jEt,"blenderbot-small"),jEt.forEach(t),Wvr=r(YPe," \u2014 "),GH=n(YPe,"A",{href:!0});var DEt=s(GH);Qvr=r(DEt,"TFBlenderbotSmallForConditionalGeneration"),DEt.forEach(t),Hvr=r(YPe," (BlenderbotSmall model)"),YPe.forEach(t),Uvr=i(Be),C7=n(Be,"LI",{});var KPe=s(C7);O5e=n(KPe,"STRONG",{});var GEt=s(O5e);Jvr=r(GEt,"encoder-decoder"),GEt.forEach(t),Yvr=r(KPe," \u2014 "),OH=n(KPe,"A",{href:!0});var OEt=s(OH);Kvr=r(OEt,"TFEncoderDecoderModel"),OEt.forEach(t),Zvr=r(KPe," (Encoder decoder model)"),KPe.forEach(t),e3r=i(Be),w7=n(Be,"LI",{});var ZPe=s(w7);V5e=n(ZPe,"STRONG",{});var VEt=s(V5e);o3r=r(VEt,"led"),VEt.forEach(t),r3r=r(ZPe," \u2014 "),VH=n(ZPe,"A",{href:!0});var XEt=s(VH);t3r=r(XEt,"TFLEDForConditionalGeneration"),XEt.forEach(t),a3r=r(ZPe," (LED model)"),ZPe.forEach(t),n3r=i(Be),A7=n(Be,"LI",{});var eBe=s(A7);X5e=n(eBe,"STRONG",{});var zEt=s(X5e);s3r=r(zEt,"marian"),zEt.forEach(t),l3r=r(eBe," \u2014 "),XH=n(eBe,"A",{href:!0});var WEt=s(XH);i3r=r(WEt,"TFMarianMTModel"),WEt.forEach(t),d3r=r(eBe," (Marian model)"),eBe.forEach(t),c3r=i(Be),y7=n(Be,"LI",{});var oBe=s(y7);z5e=n(oBe,"STRONG",{});var QEt=s(z5e);f3r=r(QEt,"mbart"),QEt.forEach(t),m3r=r(oBe," \u2014 "),zH=n(oBe,"A",{href:!0});var HEt=s(zH);g3r=r(HEt,"TFMBartForConditionalGeneration"),HEt.forEach(t),h3r=r(oBe," (mBART model)"),oBe.forEach(t),p3r=i(Be),L7=n(Be,"LI",{});var rBe=s(L7);W5e=n(rBe,"STRONG",{});var UEt=s(W5e);_3r=r(UEt,"mt5"),UEt.forEach(t),u3r=r(rBe," \u2014 "),WH=n(rBe,"A",{href:!0});var JEt=s(WH);b3r=r(JEt,"TFMT5ForConditionalGeneration"),JEt.forEach(t),v3r=r(rBe," (mT5 model)"),rBe.forEach(t),F3r=i(Be),x7=n(Be,"LI",{});var tBe=s(x7);Q5e=n(tBe,"STRONG",{});var YEt=s(Q5e);T3r=r(YEt,"pegasus"),YEt.forEach(t),M3r=r(tBe," \u2014 "),QH=n(tBe,"A",{href:!0});var KEt=s(QH);E3r=r(KEt,"TFPegasusForConditionalGeneration"),KEt.forEach(t),C3r=r(tBe," (Pegasus model)"),tBe.forEach(t),w3r=i(Be),$7=n(Be,"LI",{});var aBe=s($7);H5e=n(aBe,"STRONG",{});var ZEt=s(H5e);A3r=r(ZEt,"t5"),ZEt.forEach(t),y3r=r(aBe," \u2014 "),HH=n(aBe,"A",{href:!0});var eCt=s(HH);L3r=r(eCt,"TFT5ForConditionalGeneration"),eCt.forEach(t),x3r=r(aBe," (T5 model)"),aBe.forEach(t),Be.forEach(t),$3r=i(wl),T(k7.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),oDe=i(f),sc=n(f,"H2",{class:!0});var lOe=s(sc);S7=n(lOe,"A",{id:!0,class:!0,href:!0});var oCt=s(S7);U5e=n(oCt,"SPAN",{});var rCt=s(U5e);T(H8.$$.fragment,rCt),rCt.forEach(t),oCt.forEach(t),k3r=i(lOe),J5e=n(lOe,"SPAN",{});var tCt=s(J5e);S3r=r(tCt,"TFAutoModelForSequenceClassification"),tCt.forEach(t),lOe.forEach(t),rDe=i(f),tr=n(f,"DIV",{class:!0});var Al=s(tr);T(U8.$$.fragment,Al),R3r=i(Al),lc=n(Al,"P",{});var Dee=s(lc);P3r=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UH=n(Dee,"A",{href:!0});var aCt=s(UH);B3r=r(aCt,"from_pretrained()"),aCt.forEach(t),I3r=r(Dee," class method or the "),JH=n(Dee,"A",{href:!0});var nCt=s(JH);N3r=r(nCt,"from_config()"),nCt.forEach(t),q3r=r(Dee,` class
method.`),Dee.forEach(t),j3r=i(Al),J8=n(Al,"P",{});var iOe=s(J8);D3r=r(iOe,"This class cannot be instantiated directly using "),Y5e=n(iOe,"CODE",{});var sCt=s(Y5e);G3r=r(sCt,"__init__()"),sCt.forEach(t),O3r=r(iOe," (throws an error)."),iOe.forEach(t),V3r=i(Al),Pt=n(Al,"DIV",{class:!0});var Q6=s(Pt);T(Y8.$$.fragment,Q6),X3r=i(Q6),K5e=n(Q6,"P",{});var lCt=s(K5e);z3r=r(lCt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lCt.forEach(t),W3r=i(Q6),ic=n(Q6,"P",{});var Gee=s(ic);Q3r=r(Gee,`Note:
Loading a model from its configuration file does `),Z5e=n(Gee,"STRONG",{});var iCt=s(Z5e);H3r=r(iCt,"not"),iCt.forEach(t),U3r=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(Gee,"A",{href:!0});var dCt=s(YH);J3r=r(dCt,"from_pretrained()"),dCt.forEach(t),Y3r=r(Gee," to load the model weights."),Gee.forEach(t),K3r=i(Q6),T(R7.$$.fragment,Q6),Q6.forEach(t),Z3r=i(Al),kr=n(Al,"DIV",{class:!0});var yl=s(kr);T(K8.$$.fragment,yl),eFr=i(yl),eve=n(yl,"P",{});var cCt=s(eve);oFr=r(cCt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cCt.forEach(t),rFr=i(yl),nn=n(yl,"P",{});var H6=s(nn);tFr=r(H6,"The model class to instantiate is selected based on the "),ove=n(H6,"CODE",{});var fCt=s(ove);aFr=r(fCt,"model_type"),fCt.forEach(t),nFr=r(H6,` property of the config object (either
passed as an argument or loaded from `),rve=n(H6,"CODE",{});var mCt=s(rve);sFr=r(mCt,"pretrained_model_name_or_path"),mCt.forEach(t),lFr=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tve=n(H6,"CODE",{});var gCt=s(tve);iFr=r(gCt,"pretrained_model_name_or_path"),gCt.forEach(t),dFr=r(H6,":"),H6.forEach(t),cFr=i(yl),oe=n(yl,"UL",{});var ae=s(oe);P7=n(ae,"LI",{});var nBe=s(P7);ave=n(nBe,"STRONG",{});var hCt=s(ave);fFr=r(hCt,"albert"),hCt.forEach(t),mFr=r(nBe," \u2014 "),KH=n(nBe,"A",{href:!0});var pCt=s(KH);gFr=r(pCt,"TFAlbertForSequenceClassification"),pCt.forEach(t),hFr=r(nBe," (ALBERT model)"),nBe.forEach(t),pFr=i(ae),B7=n(ae,"LI",{});var sBe=s(B7);nve=n(sBe,"STRONG",{});var _Ct=s(nve);_Fr=r(_Ct,"bert"),_Ct.forEach(t),uFr=r(sBe," \u2014 "),ZH=n(sBe,"A",{href:!0});var uCt=s(ZH);bFr=r(uCt,"TFBertForSequenceClassification"),uCt.forEach(t),vFr=r(sBe," (BERT model)"),sBe.forEach(t),FFr=i(ae),I7=n(ae,"LI",{});var lBe=s(I7);sve=n(lBe,"STRONG",{});var bCt=s(sve);TFr=r(bCt,"camembert"),bCt.forEach(t),MFr=r(lBe," \u2014 "),eU=n(lBe,"A",{href:!0});var vCt=s(eU);EFr=r(vCt,"TFCamembertForSequenceClassification"),vCt.forEach(t),CFr=r(lBe," (CamemBERT model)"),lBe.forEach(t),wFr=i(ae),N7=n(ae,"LI",{});var iBe=s(N7);lve=n(iBe,"STRONG",{});var FCt=s(lve);AFr=r(FCt,"convbert"),FCt.forEach(t),yFr=r(iBe," \u2014 "),oU=n(iBe,"A",{href:!0});var TCt=s(oU);LFr=r(TCt,"TFConvBertForSequenceClassification"),TCt.forEach(t),xFr=r(iBe," (ConvBERT model)"),iBe.forEach(t),$Fr=i(ae),q7=n(ae,"LI",{});var dBe=s(q7);ive=n(dBe,"STRONG",{});var MCt=s(ive);kFr=r(MCt,"ctrl"),MCt.forEach(t),SFr=r(dBe," \u2014 "),rU=n(dBe,"A",{href:!0});var ECt=s(rU);RFr=r(ECt,"TFCTRLForSequenceClassification"),ECt.forEach(t),PFr=r(dBe," (CTRL model)"),dBe.forEach(t),BFr=i(ae),j7=n(ae,"LI",{});var cBe=s(j7);dve=n(cBe,"STRONG",{});var CCt=s(dve);IFr=r(CCt,"deberta"),CCt.forEach(t),NFr=r(cBe," \u2014 "),tU=n(cBe,"A",{href:!0});var wCt=s(tU);qFr=r(wCt,"TFDebertaForSequenceClassification"),wCt.forEach(t),jFr=r(cBe," (DeBERTa model)"),cBe.forEach(t),DFr=i(ae),D7=n(ae,"LI",{});var fBe=s(D7);cve=n(fBe,"STRONG",{});var ACt=s(cve);GFr=r(ACt,"deberta-v2"),ACt.forEach(t),OFr=r(fBe," \u2014 "),aU=n(fBe,"A",{href:!0});var yCt=s(aU);VFr=r(yCt,"TFDebertaV2ForSequenceClassification"),yCt.forEach(t),XFr=r(fBe," (DeBERTa-v2 model)"),fBe.forEach(t),zFr=i(ae),G7=n(ae,"LI",{});var mBe=s(G7);fve=n(mBe,"STRONG",{});var LCt=s(fve);WFr=r(LCt,"distilbert"),LCt.forEach(t),QFr=r(mBe," \u2014 "),nU=n(mBe,"A",{href:!0});var xCt=s(nU);HFr=r(xCt,"TFDistilBertForSequenceClassification"),xCt.forEach(t),UFr=r(mBe," (DistilBERT model)"),mBe.forEach(t),JFr=i(ae),O7=n(ae,"LI",{});var gBe=s(O7);mve=n(gBe,"STRONG",{});var $Ct=s(mve);YFr=r($Ct,"electra"),$Ct.forEach(t),KFr=r(gBe," \u2014 "),sU=n(gBe,"A",{href:!0});var kCt=s(sU);ZFr=r(kCt,"TFElectraForSequenceClassification"),kCt.forEach(t),eTr=r(gBe," (ELECTRA model)"),gBe.forEach(t),oTr=i(ae),V7=n(ae,"LI",{});var hBe=s(V7);gve=n(hBe,"STRONG",{});var SCt=s(gve);rTr=r(SCt,"flaubert"),SCt.forEach(t),tTr=r(hBe," \u2014 "),lU=n(hBe,"A",{href:!0});var RCt=s(lU);aTr=r(RCt,"TFFlaubertForSequenceClassification"),RCt.forEach(t),nTr=r(hBe," (FlauBERT model)"),hBe.forEach(t),sTr=i(ae),X7=n(ae,"LI",{});var pBe=s(X7);hve=n(pBe,"STRONG",{});var PCt=s(hve);lTr=r(PCt,"funnel"),PCt.forEach(t),iTr=r(pBe," \u2014 "),iU=n(pBe,"A",{href:!0});var BCt=s(iU);dTr=r(BCt,"TFFunnelForSequenceClassification"),BCt.forEach(t),cTr=r(pBe," (Funnel Transformer model)"),pBe.forEach(t),fTr=i(ae),z7=n(ae,"LI",{});var _Be=s(z7);pve=n(_Be,"STRONG",{});var ICt=s(pve);mTr=r(ICt,"gpt2"),ICt.forEach(t),gTr=r(_Be," \u2014 "),dU=n(_Be,"A",{href:!0});var NCt=s(dU);hTr=r(NCt,"TFGPT2ForSequenceClassification"),NCt.forEach(t),pTr=r(_Be," (OpenAI GPT-2 model)"),_Be.forEach(t),_Tr=i(ae),W7=n(ae,"LI",{});var uBe=s(W7);_ve=n(uBe,"STRONG",{});var qCt=s(_ve);uTr=r(qCt,"gptj"),qCt.forEach(t),bTr=r(uBe," \u2014 "),cU=n(uBe,"A",{href:!0});var jCt=s(cU);vTr=r(jCt,"TFGPTJForSequenceClassification"),jCt.forEach(t),FTr=r(uBe," (GPT-J model)"),uBe.forEach(t),TTr=i(ae),Q7=n(ae,"LI",{});var bBe=s(Q7);uve=n(bBe,"STRONG",{});var DCt=s(uve);MTr=r(DCt,"layoutlm"),DCt.forEach(t),ETr=r(bBe," \u2014 "),fU=n(bBe,"A",{href:!0});var GCt=s(fU);CTr=r(GCt,"TFLayoutLMForSequenceClassification"),GCt.forEach(t),wTr=r(bBe," (LayoutLM model)"),bBe.forEach(t),ATr=i(ae),H7=n(ae,"LI",{});var vBe=s(H7);bve=n(vBe,"STRONG",{});var OCt=s(bve);yTr=r(OCt,"longformer"),OCt.forEach(t),LTr=r(vBe," \u2014 "),mU=n(vBe,"A",{href:!0});var VCt=s(mU);xTr=r(VCt,"TFLongformerForSequenceClassification"),VCt.forEach(t),$Tr=r(vBe," (Longformer model)"),vBe.forEach(t),kTr=i(ae),U7=n(ae,"LI",{});var FBe=s(U7);vve=n(FBe,"STRONG",{});var XCt=s(vve);STr=r(XCt,"mobilebert"),XCt.forEach(t),RTr=r(FBe," \u2014 "),gU=n(FBe,"A",{href:!0});var zCt=s(gU);PTr=r(zCt,"TFMobileBertForSequenceClassification"),zCt.forEach(t),BTr=r(FBe," (MobileBERT model)"),FBe.forEach(t),ITr=i(ae),J7=n(ae,"LI",{});var TBe=s(J7);Fve=n(TBe,"STRONG",{});var WCt=s(Fve);NTr=r(WCt,"mpnet"),WCt.forEach(t),qTr=r(TBe," \u2014 "),hU=n(TBe,"A",{href:!0});var QCt=s(hU);jTr=r(QCt,"TFMPNetForSequenceClassification"),QCt.forEach(t),DTr=r(TBe," (MPNet model)"),TBe.forEach(t),GTr=i(ae),Y7=n(ae,"LI",{});var MBe=s(Y7);Tve=n(MBe,"STRONG",{});var HCt=s(Tve);OTr=r(HCt,"openai-gpt"),HCt.forEach(t),VTr=r(MBe," \u2014 "),pU=n(MBe,"A",{href:!0});var UCt=s(pU);XTr=r(UCt,"TFOpenAIGPTForSequenceClassification"),UCt.forEach(t),zTr=r(MBe," (OpenAI GPT model)"),MBe.forEach(t),WTr=i(ae),K7=n(ae,"LI",{});var EBe=s(K7);Mve=n(EBe,"STRONG",{});var JCt=s(Mve);QTr=r(JCt,"rembert"),JCt.forEach(t),HTr=r(EBe," \u2014 "),_U=n(EBe,"A",{href:!0});var YCt=s(_U);UTr=r(YCt,"TFRemBertForSequenceClassification"),YCt.forEach(t),JTr=r(EBe," (RemBERT model)"),EBe.forEach(t),YTr=i(ae),Z7=n(ae,"LI",{});var CBe=s(Z7);Eve=n(CBe,"STRONG",{});var KCt=s(Eve);KTr=r(KCt,"roberta"),KCt.forEach(t),ZTr=r(CBe," \u2014 "),uU=n(CBe,"A",{href:!0});var ZCt=s(uU);e7r=r(ZCt,"TFRobertaForSequenceClassification"),ZCt.forEach(t),o7r=r(CBe," (RoBERTa model)"),CBe.forEach(t),r7r=i(ae),eM=n(ae,"LI",{});var wBe=s(eM);Cve=n(wBe,"STRONG",{});var e0t=s(Cve);t7r=r(e0t,"roformer"),e0t.forEach(t),a7r=r(wBe," \u2014 "),bU=n(wBe,"A",{href:!0});var o0t=s(bU);n7r=r(o0t,"TFRoFormerForSequenceClassification"),o0t.forEach(t),s7r=r(wBe," (RoFormer model)"),wBe.forEach(t),l7r=i(ae),oM=n(ae,"LI",{});var ABe=s(oM);wve=n(ABe,"STRONG",{});var r0t=s(wve);i7r=r(r0t,"tapas"),r0t.forEach(t),d7r=r(ABe," \u2014 "),vU=n(ABe,"A",{href:!0});var t0t=s(vU);c7r=r(t0t,"TFTapasForSequenceClassification"),t0t.forEach(t),f7r=r(ABe," (TAPAS model)"),ABe.forEach(t),m7r=i(ae),rM=n(ae,"LI",{});var yBe=s(rM);Ave=n(yBe,"STRONG",{});var a0t=s(Ave);g7r=r(a0t,"transfo-xl"),a0t.forEach(t),h7r=r(yBe," \u2014 "),FU=n(yBe,"A",{href:!0});var n0t=s(FU);p7r=r(n0t,"TFTransfoXLForSequenceClassification"),n0t.forEach(t),_7r=r(yBe," (Transformer-XL model)"),yBe.forEach(t),u7r=i(ae),tM=n(ae,"LI",{});var LBe=s(tM);yve=n(LBe,"STRONG",{});var s0t=s(yve);b7r=r(s0t,"xlm"),s0t.forEach(t),v7r=r(LBe," \u2014 "),TU=n(LBe,"A",{href:!0});var l0t=s(TU);F7r=r(l0t,"TFXLMForSequenceClassification"),l0t.forEach(t),T7r=r(LBe," (XLM model)"),LBe.forEach(t),M7r=i(ae),aM=n(ae,"LI",{});var xBe=s(aM);Lve=n(xBe,"STRONG",{});var i0t=s(Lve);E7r=r(i0t,"xlm-roberta"),i0t.forEach(t),C7r=r(xBe," \u2014 "),MU=n(xBe,"A",{href:!0});var d0t=s(MU);w7r=r(d0t,"TFXLMRobertaForSequenceClassification"),d0t.forEach(t),A7r=r(xBe," (XLM-RoBERTa model)"),xBe.forEach(t),y7r=i(ae),nM=n(ae,"LI",{});var $Be=s(nM);xve=n($Be,"STRONG",{});var c0t=s(xve);L7r=r(c0t,"xlnet"),c0t.forEach(t),x7r=r($Be," \u2014 "),EU=n($Be,"A",{href:!0});var f0t=s(EU);$7r=r(f0t,"TFXLNetForSequenceClassification"),f0t.forEach(t),k7r=r($Be," (XLNet model)"),$Be.forEach(t),ae.forEach(t),S7r=i(yl),T(sM.$$.fragment,yl),yl.forEach(t),Al.forEach(t),tDe=i(f),dc=n(f,"H2",{class:!0});var dOe=s(dc);lM=n(dOe,"A",{id:!0,class:!0,href:!0});var m0t=s(lM);$ve=n(m0t,"SPAN",{});var g0t=s($ve);T(Z8.$$.fragment,g0t),g0t.forEach(t),m0t.forEach(t),R7r=i(dOe),kve=n(dOe,"SPAN",{});var h0t=s(kve);P7r=r(h0t,"TFAutoModelForMultipleChoice"),h0t.forEach(t),dOe.forEach(t),aDe=i(f),ar=n(f,"DIV",{class:!0});var Ll=s(ar);T(e9.$$.fragment,Ll),B7r=i(Ll),cc=n(Ll,"P",{});var Oee=s(cc);I7r=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CU=n(Oee,"A",{href:!0});var p0t=s(CU);N7r=r(p0t,"from_pretrained()"),p0t.forEach(t),q7r=r(Oee," class method or the "),wU=n(Oee,"A",{href:!0});var _0t=s(wU);j7r=r(_0t,"from_config()"),_0t.forEach(t),D7r=r(Oee,` class
method.`),Oee.forEach(t),G7r=i(Ll),o9=n(Ll,"P",{});var cOe=s(o9);O7r=r(cOe,"This class cannot be instantiated directly using "),Sve=n(cOe,"CODE",{});var u0t=s(Sve);V7r=r(u0t,"__init__()"),u0t.forEach(t),X7r=r(cOe," (throws an error)."),cOe.forEach(t),z7r=i(Ll),Bt=n(Ll,"DIV",{class:!0});var U6=s(Bt);T(r9.$$.fragment,U6),W7r=i(U6),Rve=n(U6,"P",{});var b0t=s(Rve);Q7r=r(b0t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),b0t.forEach(t),H7r=i(U6),fc=n(U6,"P",{});var Vee=s(fc);U7r=r(Vee,`Note:
Loading a model from its configuration file does `),Pve=n(Vee,"STRONG",{});var v0t=s(Pve);J7r=r(v0t,"not"),v0t.forEach(t),Y7r=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=n(Vee,"A",{href:!0});var F0t=s(AU);K7r=r(F0t,"from_pretrained()"),F0t.forEach(t),Z7r=r(Vee," to load the model weights."),Vee.forEach(t),eMr=i(U6),T(iM.$$.fragment,U6),U6.forEach(t),oMr=i(Ll),Sr=n(Ll,"DIV",{class:!0});var xl=s(Sr);T(t9.$$.fragment,xl),rMr=i(xl),Bve=n(xl,"P",{});var T0t=s(Bve);tMr=r(T0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),T0t.forEach(t),aMr=i(xl),sn=n(xl,"P",{});var J6=s(sn);nMr=r(J6,"The model class to instantiate is selected based on the "),Ive=n(J6,"CODE",{});var M0t=s(Ive);sMr=r(M0t,"model_type"),M0t.forEach(t),lMr=r(J6,` property of the config object (either
passed as an argument or loaded from `),Nve=n(J6,"CODE",{});var E0t=s(Nve);iMr=r(E0t,"pretrained_model_name_or_path"),E0t.forEach(t),dMr=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=n(J6,"CODE",{});var C0t=s(qve);cMr=r(C0t,"pretrained_model_name_or_path"),C0t.forEach(t),fMr=r(J6,":"),J6.forEach(t),mMr=i(xl),pe=n(xl,"UL",{});var be=s(pe);dM=n(be,"LI",{});var kBe=s(dM);jve=n(kBe,"STRONG",{});var w0t=s(jve);gMr=r(w0t,"albert"),w0t.forEach(t),hMr=r(kBe," \u2014 "),yU=n(kBe,"A",{href:!0});var A0t=s(yU);pMr=r(A0t,"TFAlbertForMultipleChoice"),A0t.forEach(t),_Mr=r(kBe," (ALBERT model)"),kBe.forEach(t),uMr=i(be),cM=n(be,"LI",{});var SBe=s(cM);Dve=n(SBe,"STRONG",{});var y0t=s(Dve);bMr=r(y0t,"bert"),y0t.forEach(t),vMr=r(SBe," \u2014 "),LU=n(SBe,"A",{href:!0});var L0t=s(LU);FMr=r(L0t,"TFBertForMultipleChoice"),L0t.forEach(t),TMr=r(SBe," (BERT model)"),SBe.forEach(t),MMr=i(be),fM=n(be,"LI",{});var RBe=s(fM);Gve=n(RBe,"STRONG",{});var x0t=s(Gve);EMr=r(x0t,"camembert"),x0t.forEach(t),CMr=r(RBe," \u2014 "),xU=n(RBe,"A",{href:!0});var $0t=s(xU);wMr=r($0t,"TFCamembertForMultipleChoice"),$0t.forEach(t),AMr=r(RBe," (CamemBERT model)"),RBe.forEach(t),yMr=i(be),mM=n(be,"LI",{});var PBe=s(mM);Ove=n(PBe,"STRONG",{});var k0t=s(Ove);LMr=r(k0t,"convbert"),k0t.forEach(t),xMr=r(PBe," \u2014 "),$U=n(PBe,"A",{href:!0});var S0t=s($U);$Mr=r(S0t,"TFConvBertForMultipleChoice"),S0t.forEach(t),kMr=r(PBe," (ConvBERT model)"),PBe.forEach(t),SMr=i(be),gM=n(be,"LI",{});var BBe=s(gM);Vve=n(BBe,"STRONG",{});var R0t=s(Vve);RMr=r(R0t,"distilbert"),R0t.forEach(t),PMr=r(BBe," \u2014 "),kU=n(BBe,"A",{href:!0});var P0t=s(kU);BMr=r(P0t,"TFDistilBertForMultipleChoice"),P0t.forEach(t),IMr=r(BBe," (DistilBERT model)"),BBe.forEach(t),NMr=i(be),hM=n(be,"LI",{});var IBe=s(hM);Xve=n(IBe,"STRONG",{});var B0t=s(Xve);qMr=r(B0t,"electra"),B0t.forEach(t),jMr=r(IBe," \u2014 "),SU=n(IBe,"A",{href:!0});var I0t=s(SU);DMr=r(I0t,"TFElectraForMultipleChoice"),I0t.forEach(t),GMr=r(IBe," (ELECTRA model)"),IBe.forEach(t),OMr=i(be),pM=n(be,"LI",{});var NBe=s(pM);zve=n(NBe,"STRONG",{});var N0t=s(zve);VMr=r(N0t,"flaubert"),N0t.forEach(t),XMr=r(NBe," \u2014 "),RU=n(NBe,"A",{href:!0});var q0t=s(RU);zMr=r(q0t,"TFFlaubertForMultipleChoice"),q0t.forEach(t),WMr=r(NBe," (FlauBERT model)"),NBe.forEach(t),QMr=i(be),_M=n(be,"LI",{});var qBe=s(_M);Wve=n(qBe,"STRONG",{});var j0t=s(Wve);HMr=r(j0t,"funnel"),j0t.forEach(t),UMr=r(qBe," \u2014 "),PU=n(qBe,"A",{href:!0});var D0t=s(PU);JMr=r(D0t,"TFFunnelForMultipleChoice"),D0t.forEach(t),YMr=r(qBe," (Funnel Transformer model)"),qBe.forEach(t),KMr=i(be),uM=n(be,"LI",{});var jBe=s(uM);Qve=n(jBe,"STRONG",{});var G0t=s(Qve);ZMr=r(G0t,"longformer"),G0t.forEach(t),eEr=r(jBe," \u2014 "),BU=n(jBe,"A",{href:!0});var O0t=s(BU);oEr=r(O0t,"TFLongformerForMultipleChoice"),O0t.forEach(t),rEr=r(jBe," (Longformer model)"),jBe.forEach(t),tEr=i(be),bM=n(be,"LI",{});var DBe=s(bM);Hve=n(DBe,"STRONG",{});var V0t=s(Hve);aEr=r(V0t,"mobilebert"),V0t.forEach(t),nEr=r(DBe," \u2014 "),IU=n(DBe,"A",{href:!0});var X0t=s(IU);sEr=r(X0t,"TFMobileBertForMultipleChoice"),X0t.forEach(t),lEr=r(DBe," (MobileBERT model)"),DBe.forEach(t),iEr=i(be),vM=n(be,"LI",{});var GBe=s(vM);Uve=n(GBe,"STRONG",{});var z0t=s(Uve);dEr=r(z0t,"mpnet"),z0t.forEach(t),cEr=r(GBe," \u2014 "),NU=n(GBe,"A",{href:!0});var W0t=s(NU);fEr=r(W0t,"TFMPNetForMultipleChoice"),W0t.forEach(t),mEr=r(GBe," (MPNet model)"),GBe.forEach(t),gEr=i(be),FM=n(be,"LI",{});var OBe=s(FM);Jve=n(OBe,"STRONG",{});var Q0t=s(Jve);hEr=r(Q0t,"rembert"),Q0t.forEach(t),pEr=r(OBe," \u2014 "),qU=n(OBe,"A",{href:!0});var H0t=s(qU);_Er=r(H0t,"TFRemBertForMultipleChoice"),H0t.forEach(t),uEr=r(OBe," (RemBERT model)"),OBe.forEach(t),bEr=i(be),TM=n(be,"LI",{});var VBe=s(TM);Yve=n(VBe,"STRONG",{});var U0t=s(Yve);vEr=r(U0t,"roberta"),U0t.forEach(t),FEr=r(VBe," \u2014 "),jU=n(VBe,"A",{href:!0});var J0t=s(jU);TEr=r(J0t,"TFRobertaForMultipleChoice"),J0t.forEach(t),MEr=r(VBe," (RoBERTa model)"),VBe.forEach(t),EEr=i(be),MM=n(be,"LI",{});var XBe=s(MM);Kve=n(XBe,"STRONG",{});var Y0t=s(Kve);CEr=r(Y0t,"roformer"),Y0t.forEach(t),wEr=r(XBe," \u2014 "),DU=n(XBe,"A",{href:!0});var K0t=s(DU);AEr=r(K0t,"TFRoFormerForMultipleChoice"),K0t.forEach(t),yEr=r(XBe," (RoFormer model)"),XBe.forEach(t),LEr=i(be),EM=n(be,"LI",{});var zBe=s(EM);Zve=n(zBe,"STRONG",{});var Z0t=s(Zve);xEr=r(Z0t,"xlm"),Z0t.forEach(t),$Er=r(zBe," \u2014 "),GU=n(zBe,"A",{href:!0});var ewt=s(GU);kEr=r(ewt,"TFXLMForMultipleChoice"),ewt.forEach(t),SEr=r(zBe," (XLM model)"),zBe.forEach(t),REr=i(be),CM=n(be,"LI",{});var WBe=s(CM);e3e=n(WBe,"STRONG",{});var owt=s(e3e);PEr=r(owt,"xlm-roberta"),owt.forEach(t),BEr=r(WBe," \u2014 "),OU=n(WBe,"A",{href:!0});var rwt=s(OU);IEr=r(rwt,"TFXLMRobertaForMultipleChoice"),rwt.forEach(t),NEr=r(WBe," (XLM-RoBERTa model)"),WBe.forEach(t),qEr=i(be),wM=n(be,"LI",{});var QBe=s(wM);o3e=n(QBe,"STRONG",{});var twt=s(o3e);jEr=r(twt,"xlnet"),twt.forEach(t),DEr=r(QBe," \u2014 "),VU=n(QBe,"A",{href:!0});var awt=s(VU);GEr=r(awt,"TFXLNetForMultipleChoice"),awt.forEach(t),OEr=r(QBe," (XLNet model)"),QBe.forEach(t),be.forEach(t),VEr=i(xl),T(AM.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),nDe=i(f),mc=n(f,"H2",{class:!0});var fOe=s(mc);yM=n(fOe,"A",{id:!0,class:!0,href:!0});var nwt=s(yM);r3e=n(nwt,"SPAN",{});var swt=s(r3e);T(a9.$$.fragment,swt),swt.forEach(t),nwt.forEach(t),XEr=i(fOe),t3e=n(fOe,"SPAN",{});var lwt=s(t3e);zEr=r(lwt,"TFAutoModelForNextSentencePrediction"),lwt.forEach(t),fOe.forEach(t),sDe=i(f),nr=n(f,"DIV",{class:!0});var $l=s(nr);T(n9.$$.fragment,$l),WEr=i($l),gc=n($l,"P",{});var Xee=s(gc);QEr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XU=n(Xee,"A",{href:!0});var iwt=s(XU);HEr=r(iwt,"from_pretrained()"),iwt.forEach(t),UEr=r(Xee," class method or the "),zU=n(Xee,"A",{href:!0});var dwt=s(zU);JEr=r(dwt,"from_config()"),dwt.forEach(t),YEr=r(Xee,` class
method.`),Xee.forEach(t),KEr=i($l),s9=n($l,"P",{});var mOe=s(s9);ZEr=r(mOe,"This class cannot be instantiated directly using "),a3e=n(mOe,"CODE",{});var cwt=s(a3e);eCr=r(cwt,"__init__()"),cwt.forEach(t),oCr=r(mOe," (throws an error)."),mOe.forEach(t),rCr=i($l),It=n($l,"DIV",{class:!0});var Y6=s(It);T(l9.$$.fragment,Y6),tCr=i(Y6),n3e=n(Y6,"P",{});var fwt=s(n3e);aCr=r(fwt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),fwt.forEach(t),nCr=i(Y6),hc=n(Y6,"P",{});var zee=s(hc);sCr=r(zee,`Note:
Loading a model from its configuration file does `),s3e=n(zee,"STRONG",{});var mwt=s(s3e);lCr=r(mwt,"not"),mwt.forEach(t),iCr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),WU=n(zee,"A",{href:!0});var gwt=s(WU);dCr=r(gwt,"from_pretrained()"),gwt.forEach(t),cCr=r(zee," to load the model weights."),zee.forEach(t),fCr=i(Y6),T(LM.$$.fragment,Y6),Y6.forEach(t),mCr=i($l),Rr=n($l,"DIV",{class:!0});var kl=s(Rr);T(i9.$$.fragment,kl),gCr=i(kl),l3e=n(kl,"P",{});var hwt=s(l3e);hCr=r(hwt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hwt.forEach(t),pCr=i(kl),ln=n(kl,"P",{});var K6=s(ln);_Cr=r(K6,"The model class to instantiate is selected based on the "),i3e=n(K6,"CODE",{});var pwt=s(i3e);uCr=r(pwt,"model_type"),pwt.forEach(t),bCr=r(K6,` property of the config object (either
passed as an argument or loaded from `),d3e=n(K6,"CODE",{});var _wt=s(d3e);vCr=r(_wt,"pretrained_model_name_or_path"),_wt.forEach(t),FCr=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=n(K6,"CODE",{});var uwt=s(c3e);TCr=r(uwt,"pretrained_model_name_or_path"),uwt.forEach(t),MCr=r(K6,":"),K6.forEach(t),ECr=i(kl),d9=n(kl,"UL",{});var gOe=s(d9);xM=n(gOe,"LI",{});var HBe=s(xM);f3e=n(HBe,"STRONG",{});var bwt=s(f3e);CCr=r(bwt,"bert"),bwt.forEach(t),wCr=r(HBe," \u2014 "),QU=n(HBe,"A",{href:!0});var vwt=s(QU);ACr=r(vwt,"TFBertForNextSentencePrediction"),vwt.forEach(t),yCr=r(HBe," (BERT model)"),HBe.forEach(t),LCr=i(gOe),$M=n(gOe,"LI",{});var UBe=s($M);m3e=n(UBe,"STRONG",{});var Fwt=s(m3e);xCr=r(Fwt,"mobilebert"),Fwt.forEach(t),$Cr=r(UBe," \u2014 "),HU=n(UBe,"A",{href:!0});var Twt=s(HU);kCr=r(Twt,"TFMobileBertForNextSentencePrediction"),Twt.forEach(t),SCr=r(UBe," (MobileBERT model)"),UBe.forEach(t),gOe.forEach(t),RCr=i(kl),T(kM.$$.fragment,kl),kl.forEach(t),$l.forEach(t),lDe=i(f),pc=n(f,"H2",{class:!0});var hOe=s(pc);SM=n(hOe,"A",{id:!0,class:!0,href:!0});var Mwt=s(SM);g3e=n(Mwt,"SPAN",{});var Ewt=s(g3e);T(c9.$$.fragment,Ewt),Ewt.forEach(t),Mwt.forEach(t),PCr=i(hOe),h3e=n(hOe,"SPAN",{});var Cwt=s(h3e);BCr=r(Cwt,"TFAutoModelForTableQuestionAnswering"),Cwt.forEach(t),hOe.forEach(t),iDe=i(f),sr=n(f,"DIV",{class:!0});var Sl=s(sr);T(f9.$$.fragment,Sl),ICr=i(Sl),_c=n(Sl,"P",{});var Wee=s(_c);NCr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UU=n(Wee,"A",{href:!0});var wwt=s(UU);qCr=r(wwt,"from_pretrained()"),wwt.forEach(t),jCr=r(Wee," class method or the "),JU=n(Wee,"A",{href:!0});var Awt=s(JU);DCr=r(Awt,"from_config()"),Awt.forEach(t),GCr=r(Wee,` class
method.`),Wee.forEach(t),OCr=i(Sl),m9=n(Sl,"P",{});var pOe=s(m9);VCr=r(pOe,"This class cannot be instantiated directly using "),p3e=n(pOe,"CODE",{});var ywt=s(p3e);XCr=r(ywt,"__init__()"),ywt.forEach(t),zCr=r(pOe," (throws an error)."),pOe.forEach(t),WCr=i(Sl),Nt=n(Sl,"DIV",{class:!0});var Z6=s(Nt);T(g9.$$.fragment,Z6),QCr=i(Z6),_3e=n(Z6,"P",{});var Lwt=s(_3e);HCr=r(Lwt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Lwt.forEach(t),UCr=i(Z6),uc=n(Z6,"P",{});var Qee=s(uc);JCr=r(Qee,`Note:
Loading a model from its configuration file does `),u3e=n(Qee,"STRONG",{});var xwt=s(u3e);YCr=r(xwt,"not"),xwt.forEach(t),KCr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(Qee,"A",{href:!0});var $wt=s(YU);ZCr=r($wt,"from_pretrained()"),$wt.forEach(t),e0r=r(Qee," to load the model weights."),Qee.forEach(t),o0r=i(Z6),T(RM.$$.fragment,Z6),Z6.forEach(t),r0r=i(Sl),Pr=n(Sl,"DIV",{class:!0});var Rl=s(Pr);T(h9.$$.fragment,Rl),t0r=i(Rl),b3e=n(Rl,"P",{});var kwt=s(b3e);a0r=r(kwt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),kwt.forEach(t),n0r=i(Rl),dn=n(Rl,"P",{});var eA=s(dn);s0r=r(eA,"The model class to instantiate is selected based on the "),v3e=n(eA,"CODE",{});var Swt=s(v3e);l0r=r(Swt,"model_type"),Swt.forEach(t),i0r=r(eA,` property of the config object (either
passed as an argument or loaded from `),F3e=n(eA,"CODE",{});var Rwt=s(F3e);d0r=r(Rwt,"pretrained_model_name_or_path"),Rwt.forEach(t),c0r=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T3e=n(eA,"CODE",{});var Pwt=s(T3e);f0r=r(Pwt,"pretrained_model_name_or_path"),Pwt.forEach(t),m0r=r(eA,":"),eA.forEach(t),g0r=i(Rl),M3e=n(Rl,"UL",{});var Bwt=s(M3e);PM=n(Bwt,"LI",{});var JBe=s(PM);E3e=n(JBe,"STRONG",{});var Iwt=s(E3e);h0r=r(Iwt,"tapas"),Iwt.forEach(t),p0r=r(JBe," \u2014 "),KU=n(JBe,"A",{href:!0});var Nwt=s(KU);_0r=r(Nwt,"TFTapasForQuestionAnswering"),Nwt.forEach(t),u0r=r(JBe," (TAPAS model)"),JBe.forEach(t),Bwt.forEach(t),b0r=i(Rl),T(BM.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),dDe=i(f),bc=n(f,"H2",{class:!0});var _Oe=s(bc);IM=n(_Oe,"A",{id:!0,class:!0,href:!0});var qwt=s(IM);C3e=n(qwt,"SPAN",{});var jwt=s(C3e);T(p9.$$.fragment,jwt),jwt.forEach(t),qwt.forEach(t),v0r=i(_Oe),w3e=n(_Oe,"SPAN",{});var Dwt=s(w3e);F0r=r(Dwt,"TFAutoModelForTokenClassification"),Dwt.forEach(t),_Oe.forEach(t),cDe=i(f),lr=n(f,"DIV",{class:!0});var Pl=s(lr);T(_9.$$.fragment,Pl),T0r=i(Pl),vc=n(Pl,"P",{});var Hee=s(vc);M0r=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZU=n(Hee,"A",{href:!0});var Gwt=s(ZU);E0r=r(Gwt,"from_pretrained()"),Gwt.forEach(t),C0r=r(Hee," class method or the "),eJ=n(Hee,"A",{href:!0});var Owt=s(eJ);w0r=r(Owt,"from_config()"),Owt.forEach(t),A0r=r(Hee,` class
method.`),Hee.forEach(t),y0r=i(Pl),u9=n(Pl,"P",{});var uOe=s(u9);L0r=r(uOe,"This class cannot be instantiated directly using "),A3e=n(uOe,"CODE",{});var Vwt=s(A3e);x0r=r(Vwt,"__init__()"),Vwt.forEach(t),$0r=r(uOe," (throws an error)."),uOe.forEach(t),k0r=i(Pl),qt=n(Pl,"DIV",{class:!0});var oA=s(qt);T(b9.$$.fragment,oA),S0r=i(oA),y3e=n(oA,"P",{});var Xwt=s(y3e);R0r=r(Xwt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Xwt.forEach(t),P0r=i(oA),Fc=n(oA,"P",{});var Uee=s(Fc);B0r=r(Uee,`Note:
Loading a model from its configuration file does `),L3e=n(Uee,"STRONG",{});var zwt=s(L3e);I0r=r(zwt,"not"),zwt.forEach(t),N0r=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=n(Uee,"A",{href:!0});var Wwt=s(oJ);q0r=r(Wwt,"from_pretrained()"),Wwt.forEach(t),j0r=r(Uee," to load the model weights."),Uee.forEach(t),D0r=i(oA),T(NM.$$.fragment,oA),oA.forEach(t),G0r=i(Pl),Br=n(Pl,"DIV",{class:!0});var Bl=s(Br);T(v9.$$.fragment,Bl),O0r=i(Bl),x3e=n(Bl,"P",{});var Qwt=s(x3e);V0r=r(Qwt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Qwt.forEach(t),X0r=i(Bl),cn=n(Bl,"P",{});var rA=s(cn);z0r=r(rA,"The model class to instantiate is selected based on the "),$3e=n(rA,"CODE",{});var Hwt=s($3e);W0r=r(Hwt,"model_type"),Hwt.forEach(t),Q0r=r(rA,` property of the config object (either
passed as an argument or loaded from `),k3e=n(rA,"CODE",{});var Uwt=s(k3e);H0r=r(Uwt,"pretrained_model_name_or_path"),Uwt.forEach(t),U0r=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S3e=n(rA,"CODE",{});var Jwt=s(S3e);J0r=r(Jwt,"pretrained_model_name_or_path"),Jwt.forEach(t),Y0r=r(rA,":"),rA.forEach(t),K0r=i(Bl),de=n(Bl,"UL",{});var me=s(de);qM=n(me,"LI",{});var YBe=s(qM);R3e=n(YBe,"STRONG",{});var Ywt=s(R3e);Z0r=r(Ywt,"albert"),Ywt.forEach(t),ewr=r(YBe," \u2014 "),rJ=n(YBe,"A",{href:!0});var Kwt=s(rJ);owr=r(Kwt,"TFAlbertForTokenClassification"),Kwt.forEach(t),rwr=r(YBe," (ALBERT model)"),YBe.forEach(t),twr=i(me),jM=n(me,"LI",{});var KBe=s(jM);P3e=n(KBe,"STRONG",{});var Zwt=s(P3e);awr=r(Zwt,"bert"),Zwt.forEach(t),nwr=r(KBe," \u2014 "),tJ=n(KBe,"A",{href:!0});var e6t=s(tJ);swr=r(e6t,"TFBertForTokenClassification"),e6t.forEach(t),lwr=r(KBe," (BERT model)"),KBe.forEach(t),iwr=i(me),DM=n(me,"LI",{});var ZBe=s(DM);B3e=n(ZBe,"STRONG",{});var o6t=s(B3e);dwr=r(o6t,"camembert"),o6t.forEach(t),cwr=r(ZBe," \u2014 "),aJ=n(ZBe,"A",{href:!0});var r6t=s(aJ);fwr=r(r6t,"TFCamembertForTokenClassification"),r6t.forEach(t),mwr=r(ZBe," (CamemBERT model)"),ZBe.forEach(t),gwr=i(me),GM=n(me,"LI",{});var eIe=s(GM);I3e=n(eIe,"STRONG",{});var t6t=s(I3e);hwr=r(t6t,"convbert"),t6t.forEach(t),pwr=r(eIe," \u2014 "),nJ=n(eIe,"A",{href:!0});var a6t=s(nJ);_wr=r(a6t,"TFConvBertForTokenClassification"),a6t.forEach(t),uwr=r(eIe," (ConvBERT model)"),eIe.forEach(t),bwr=i(me),OM=n(me,"LI",{});var oIe=s(OM);N3e=n(oIe,"STRONG",{});var n6t=s(N3e);vwr=r(n6t,"deberta"),n6t.forEach(t),Fwr=r(oIe," \u2014 "),sJ=n(oIe,"A",{href:!0});var s6t=s(sJ);Twr=r(s6t,"TFDebertaForTokenClassification"),s6t.forEach(t),Mwr=r(oIe," (DeBERTa model)"),oIe.forEach(t),Ewr=i(me),VM=n(me,"LI",{});var rIe=s(VM);q3e=n(rIe,"STRONG",{});var l6t=s(q3e);Cwr=r(l6t,"deberta-v2"),l6t.forEach(t),wwr=r(rIe," \u2014 "),lJ=n(rIe,"A",{href:!0});var i6t=s(lJ);Awr=r(i6t,"TFDebertaV2ForTokenClassification"),i6t.forEach(t),ywr=r(rIe," (DeBERTa-v2 model)"),rIe.forEach(t),Lwr=i(me),XM=n(me,"LI",{});var tIe=s(XM);j3e=n(tIe,"STRONG",{});var d6t=s(j3e);xwr=r(d6t,"distilbert"),d6t.forEach(t),$wr=r(tIe," \u2014 "),iJ=n(tIe,"A",{href:!0});var c6t=s(iJ);kwr=r(c6t,"TFDistilBertForTokenClassification"),c6t.forEach(t),Swr=r(tIe," (DistilBERT model)"),tIe.forEach(t),Rwr=i(me),zM=n(me,"LI",{});var aIe=s(zM);D3e=n(aIe,"STRONG",{});var f6t=s(D3e);Pwr=r(f6t,"electra"),f6t.forEach(t),Bwr=r(aIe," \u2014 "),dJ=n(aIe,"A",{href:!0});var m6t=s(dJ);Iwr=r(m6t,"TFElectraForTokenClassification"),m6t.forEach(t),Nwr=r(aIe," (ELECTRA model)"),aIe.forEach(t),qwr=i(me),WM=n(me,"LI",{});var nIe=s(WM);G3e=n(nIe,"STRONG",{});var g6t=s(G3e);jwr=r(g6t,"flaubert"),g6t.forEach(t),Dwr=r(nIe," \u2014 "),cJ=n(nIe,"A",{href:!0});var h6t=s(cJ);Gwr=r(h6t,"TFFlaubertForTokenClassification"),h6t.forEach(t),Owr=r(nIe," (FlauBERT model)"),nIe.forEach(t),Vwr=i(me),QM=n(me,"LI",{});var sIe=s(QM);O3e=n(sIe,"STRONG",{});var p6t=s(O3e);Xwr=r(p6t,"funnel"),p6t.forEach(t),zwr=r(sIe," \u2014 "),fJ=n(sIe,"A",{href:!0});var _6t=s(fJ);Wwr=r(_6t,"TFFunnelForTokenClassification"),_6t.forEach(t),Qwr=r(sIe," (Funnel Transformer model)"),sIe.forEach(t),Hwr=i(me),HM=n(me,"LI",{});var lIe=s(HM);V3e=n(lIe,"STRONG",{});var u6t=s(V3e);Uwr=r(u6t,"layoutlm"),u6t.forEach(t),Jwr=r(lIe," \u2014 "),mJ=n(lIe,"A",{href:!0});var b6t=s(mJ);Ywr=r(b6t,"TFLayoutLMForTokenClassification"),b6t.forEach(t),Kwr=r(lIe," (LayoutLM model)"),lIe.forEach(t),Zwr=i(me),UM=n(me,"LI",{});var iIe=s(UM);X3e=n(iIe,"STRONG",{});var v6t=s(X3e);e6r=r(v6t,"longformer"),v6t.forEach(t),o6r=r(iIe," \u2014 "),gJ=n(iIe,"A",{href:!0});var F6t=s(gJ);r6r=r(F6t,"TFLongformerForTokenClassification"),F6t.forEach(t),t6r=r(iIe," (Longformer model)"),iIe.forEach(t),a6r=i(me),JM=n(me,"LI",{});var dIe=s(JM);z3e=n(dIe,"STRONG",{});var T6t=s(z3e);n6r=r(T6t,"mobilebert"),T6t.forEach(t),s6r=r(dIe," \u2014 "),hJ=n(dIe,"A",{href:!0});var M6t=s(hJ);l6r=r(M6t,"TFMobileBertForTokenClassification"),M6t.forEach(t),i6r=r(dIe," (MobileBERT model)"),dIe.forEach(t),d6r=i(me),YM=n(me,"LI",{});var cIe=s(YM);W3e=n(cIe,"STRONG",{});var E6t=s(W3e);c6r=r(E6t,"mpnet"),E6t.forEach(t),f6r=r(cIe," \u2014 "),pJ=n(cIe,"A",{href:!0});var C6t=s(pJ);m6r=r(C6t,"TFMPNetForTokenClassification"),C6t.forEach(t),g6r=r(cIe," (MPNet model)"),cIe.forEach(t),h6r=i(me),KM=n(me,"LI",{});var fIe=s(KM);Q3e=n(fIe,"STRONG",{});var w6t=s(Q3e);p6r=r(w6t,"rembert"),w6t.forEach(t),_6r=r(fIe," \u2014 "),_J=n(fIe,"A",{href:!0});var A6t=s(_J);u6r=r(A6t,"TFRemBertForTokenClassification"),A6t.forEach(t),b6r=r(fIe," (RemBERT model)"),fIe.forEach(t),v6r=i(me),ZM=n(me,"LI",{});var mIe=s(ZM);H3e=n(mIe,"STRONG",{});var y6t=s(H3e);F6r=r(y6t,"roberta"),y6t.forEach(t),T6r=r(mIe," \u2014 "),uJ=n(mIe,"A",{href:!0});var L6t=s(uJ);M6r=r(L6t,"TFRobertaForTokenClassification"),L6t.forEach(t),E6r=r(mIe," (RoBERTa model)"),mIe.forEach(t),C6r=i(me),eE=n(me,"LI",{});var gIe=s(eE);U3e=n(gIe,"STRONG",{});var x6t=s(U3e);w6r=r(x6t,"roformer"),x6t.forEach(t),A6r=r(gIe," \u2014 "),bJ=n(gIe,"A",{href:!0});var $6t=s(bJ);y6r=r($6t,"TFRoFormerForTokenClassification"),$6t.forEach(t),L6r=r(gIe," (RoFormer model)"),gIe.forEach(t),x6r=i(me),oE=n(me,"LI",{});var hIe=s(oE);J3e=n(hIe,"STRONG",{});var k6t=s(J3e);$6r=r(k6t,"xlm"),k6t.forEach(t),k6r=r(hIe," \u2014 "),vJ=n(hIe,"A",{href:!0});var S6t=s(vJ);S6r=r(S6t,"TFXLMForTokenClassification"),S6t.forEach(t),R6r=r(hIe," (XLM model)"),hIe.forEach(t),P6r=i(me),rE=n(me,"LI",{});var pIe=s(rE);Y3e=n(pIe,"STRONG",{});var R6t=s(Y3e);B6r=r(R6t,"xlm-roberta"),R6t.forEach(t),I6r=r(pIe," \u2014 "),FJ=n(pIe,"A",{href:!0});var P6t=s(FJ);N6r=r(P6t,"TFXLMRobertaForTokenClassification"),P6t.forEach(t),q6r=r(pIe," (XLM-RoBERTa model)"),pIe.forEach(t),j6r=i(me),tE=n(me,"LI",{});var _Ie=s(tE);K3e=n(_Ie,"STRONG",{});var B6t=s(K3e);D6r=r(B6t,"xlnet"),B6t.forEach(t),G6r=r(_Ie," \u2014 "),TJ=n(_Ie,"A",{href:!0});var I6t=s(TJ);O6r=r(I6t,"TFXLNetForTokenClassification"),I6t.forEach(t),V6r=r(_Ie," (XLNet model)"),_Ie.forEach(t),me.forEach(t),X6r=i(Bl),T(aE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),fDe=i(f),Tc=n(f,"H2",{class:!0});var bOe=s(Tc);nE=n(bOe,"A",{id:!0,class:!0,href:!0});var N6t=s(nE);Z3e=n(N6t,"SPAN",{});var q6t=s(Z3e);T(F9.$$.fragment,q6t),q6t.forEach(t),N6t.forEach(t),z6r=i(bOe),eFe=n(bOe,"SPAN",{});var j6t=s(eFe);W6r=r(j6t,"TFAutoModelForQuestionAnswering"),j6t.forEach(t),bOe.forEach(t),mDe=i(f),ir=n(f,"DIV",{class:!0});var Il=s(ir);T(T9.$$.fragment,Il),Q6r=i(Il),Mc=n(Il,"P",{});var Jee=s(Mc);H6r=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MJ=n(Jee,"A",{href:!0});var D6t=s(MJ);U6r=r(D6t,"from_pretrained()"),D6t.forEach(t),J6r=r(Jee," class method or the "),EJ=n(Jee,"A",{href:!0});var G6t=s(EJ);Y6r=r(G6t,"from_config()"),G6t.forEach(t),K6r=r(Jee,` class
method.`),Jee.forEach(t),Z6r=i(Il),M9=n(Il,"P",{});var vOe=s(M9);eAr=r(vOe,"This class cannot be instantiated directly using "),oFe=n(vOe,"CODE",{});var O6t=s(oFe);oAr=r(O6t,"__init__()"),O6t.forEach(t),rAr=r(vOe," (throws an error)."),vOe.forEach(t),tAr=i(Il),jt=n(Il,"DIV",{class:!0});var tA=s(jt);T(E9.$$.fragment,tA),aAr=i(tA),rFe=n(tA,"P",{});var V6t=s(rFe);nAr=r(V6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),V6t.forEach(t),sAr=i(tA),Ec=n(tA,"P",{});var Yee=s(Ec);lAr=r(Yee,`Note:
Loading a model from its configuration file does `),tFe=n(Yee,"STRONG",{});var X6t=s(tFe);iAr=r(X6t,"not"),X6t.forEach(t),dAr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CJ=n(Yee,"A",{href:!0});var z6t=s(CJ);cAr=r(z6t,"from_pretrained()"),z6t.forEach(t),fAr=r(Yee," to load the model weights."),Yee.forEach(t),mAr=i(tA),T(sE.$$.fragment,tA),tA.forEach(t),gAr=i(Il),Ir=n(Il,"DIV",{class:!0});var Nl=s(Ir);T(C9.$$.fragment,Nl),hAr=i(Nl),aFe=n(Nl,"P",{});var W6t=s(aFe);pAr=r(W6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),W6t.forEach(t),_Ar=i(Nl),fn=n(Nl,"P",{});var aA=s(fn);uAr=r(aA,"The model class to instantiate is selected based on the "),nFe=n(aA,"CODE",{});var Q6t=s(nFe);bAr=r(Q6t,"model_type"),Q6t.forEach(t),vAr=r(aA,` property of the config object (either
passed as an argument or loaded from `),sFe=n(aA,"CODE",{});var H6t=s(sFe);FAr=r(H6t,"pretrained_model_name_or_path"),H6t.forEach(t),TAr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=n(aA,"CODE",{});var U6t=s(lFe);MAr=r(U6t,"pretrained_model_name_or_path"),U6t.forEach(t),EAr=r(aA,":"),aA.forEach(t),CAr=i(Nl),ce=n(Nl,"UL",{});var ge=s(ce);lE=n(ge,"LI",{});var uIe=s(lE);iFe=n(uIe,"STRONG",{});var J6t=s(iFe);wAr=r(J6t,"albert"),J6t.forEach(t),AAr=r(uIe," \u2014 "),wJ=n(uIe,"A",{href:!0});var Y6t=s(wJ);yAr=r(Y6t,"TFAlbertForQuestionAnswering"),Y6t.forEach(t),LAr=r(uIe," (ALBERT model)"),uIe.forEach(t),xAr=i(ge),iE=n(ge,"LI",{});var bIe=s(iE);dFe=n(bIe,"STRONG",{});var K6t=s(dFe);$Ar=r(K6t,"bert"),K6t.forEach(t),kAr=r(bIe," \u2014 "),AJ=n(bIe,"A",{href:!0});var Z6t=s(AJ);SAr=r(Z6t,"TFBertForQuestionAnswering"),Z6t.forEach(t),RAr=r(bIe," (BERT model)"),bIe.forEach(t),PAr=i(ge),dE=n(ge,"LI",{});var vIe=s(dE);cFe=n(vIe,"STRONG",{});var eAt=s(cFe);BAr=r(eAt,"camembert"),eAt.forEach(t),IAr=r(vIe," \u2014 "),yJ=n(vIe,"A",{href:!0});var oAt=s(yJ);NAr=r(oAt,"TFCamembertForQuestionAnswering"),oAt.forEach(t),qAr=r(vIe," (CamemBERT model)"),vIe.forEach(t),jAr=i(ge),cE=n(ge,"LI",{});var FIe=s(cE);fFe=n(FIe,"STRONG",{});var rAt=s(fFe);DAr=r(rAt,"convbert"),rAt.forEach(t),GAr=r(FIe," \u2014 "),LJ=n(FIe,"A",{href:!0});var tAt=s(LJ);OAr=r(tAt,"TFConvBertForQuestionAnswering"),tAt.forEach(t),VAr=r(FIe," (ConvBERT model)"),FIe.forEach(t),XAr=i(ge),fE=n(ge,"LI",{});var TIe=s(fE);mFe=n(TIe,"STRONG",{});var aAt=s(mFe);zAr=r(aAt,"deberta"),aAt.forEach(t),WAr=r(TIe," \u2014 "),xJ=n(TIe,"A",{href:!0});var nAt=s(xJ);QAr=r(nAt,"TFDebertaForQuestionAnswering"),nAt.forEach(t),HAr=r(TIe," (DeBERTa model)"),TIe.forEach(t),UAr=i(ge),mE=n(ge,"LI",{});var MIe=s(mE);gFe=n(MIe,"STRONG",{});var sAt=s(gFe);JAr=r(sAt,"deberta-v2"),sAt.forEach(t),YAr=r(MIe," \u2014 "),$J=n(MIe,"A",{href:!0});var lAt=s($J);KAr=r(lAt,"TFDebertaV2ForQuestionAnswering"),lAt.forEach(t),ZAr=r(MIe," (DeBERTa-v2 model)"),MIe.forEach(t),eyr=i(ge),gE=n(ge,"LI",{});var EIe=s(gE);hFe=n(EIe,"STRONG",{});var iAt=s(hFe);oyr=r(iAt,"distilbert"),iAt.forEach(t),ryr=r(EIe," \u2014 "),kJ=n(EIe,"A",{href:!0});var dAt=s(kJ);tyr=r(dAt,"TFDistilBertForQuestionAnswering"),dAt.forEach(t),ayr=r(EIe," (DistilBERT model)"),EIe.forEach(t),nyr=i(ge),hE=n(ge,"LI",{});var CIe=s(hE);pFe=n(CIe,"STRONG",{});var cAt=s(pFe);syr=r(cAt,"electra"),cAt.forEach(t),lyr=r(CIe," \u2014 "),SJ=n(CIe,"A",{href:!0});var fAt=s(SJ);iyr=r(fAt,"TFElectraForQuestionAnswering"),fAt.forEach(t),dyr=r(CIe," (ELECTRA model)"),CIe.forEach(t),cyr=i(ge),pE=n(ge,"LI",{});var wIe=s(pE);_Fe=n(wIe,"STRONG",{});var mAt=s(_Fe);fyr=r(mAt,"flaubert"),mAt.forEach(t),myr=r(wIe," \u2014 "),RJ=n(wIe,"A",{href:!0});var gAt=s(RJ);gyr=r(gAt,"TFFlaubertForQuestionAnsweringSimple"),gAt.forEach(t),hyr=r(wIe," (FlauBERT model)"),wIe.forEach(t),pyr=i(ge),_E=n(ge,"LI",{});var AIe=s(_E);uFe=n(AIe,"STRONG",{});var hAt=s(uFe);_yr=r(hAt,"funnel"),hAt.forEach(t),uyr=r(AIe," \u2014 "),PJ=n(AIe,"A",{href:!0});var pAt=s(PJ);byr=r(pAt,"TFFunnelForQuestionAnswering"),pAt.forEach(t),vyr=r(AIe," (Funnel Transformer model)"),AIe.forEach(t),Fyr=i(ge),uE=n(ge,"LI",{});var yIe=s(uE);bFe=n(yIe,"STRONG",{});var _At=s(bFe);Tyr=r(_At,"gptj"),_At.forEach(t),Myr=r(yIe," \u2014 "),BJ=n(yIe,"A",{href:!0});var uAt=s(BJ);Eyr=r(uAt,"TFGPTJForQuestionAnswering"),uAt.forEach(t),Cyr=r(yIe," (GPT-J model)"),yIe.forEach(t),wyr=i(ge),bE=n(ge,"LI",{});var LIe=s(bE);vFe=n(LIe,"STRONG",{});var bAt=s(vFe);Ayr=r(bAt,"longformer"),bAt.forEach(t),yyr=r(LIe," \u2014 "),IJ=n(LIe,"A",{href:!0});var vAt=s(IJ);Lyr=r(vAt,"TFLongformerForQuestionAnswering"),vAt.forEach(t),xyr=r(LIe," (Longformer model)"),LIe.forEach(t),$yr=i(ge),vE=n(ge,"LI",{});var xIe=s(vE);FFe=n(xIe,"STRONG",{});var FAt=s(FFe);kyr=r(FAt,"mobilebert"),FAt.forEach(t),Syr=r(xIe," \u2014 "),NJ=n(xIe,"A",{href:!0});var TAt=s(NJ);Ryr=r(TAt,"TFMobileBertForQuestionAnswering"),TAt.forEach(t),Pyr=r(xIe," (MobileBERT model)"),xIe.forEach(t),Byr=i(ge),FE=n(ge,"LI",{});var $Ie=s(FE);TFe=n($Ie,"STRONG",{});var MAt=s(TFe);Iyr=r(MAt,"mpnet"),MAt.forEach(t),Nyr=r($Ie," \u2014 "),qJ=n($Ie,"A",{href:!0});var EAt=s(qJ);qyr=r(EAt,"TFMPNetForQuestionAnswering"),EAt.forEach(t),jyr=r($Ie," (MPNet model)"),$Ie.forEach(t),Dyr=i(ge),TE=n(ge,"LI",{});var kIe=s(TE);MFe=n(kIe,"STRONG",{});var CAt=s(MFe);Gyr=r(CAt,"rembert"),CAt.forEach(t),Oyr=r(kIe," \u2014 "),jJ=n(kIe,"A",{href:!0});var wAt=s(jJ);Vyr=r(wAt,"TFRemBertForQuestionAnswering"),wAt.forEach(t),Xyr=r(kIe," (RemBERT model)"),kIe.forEach(t),zyr=i(ge),ME=n(ge,"LI",{});var SIe=s(ME);EFe=n(SIe,"STRONG",{});var AAt=s(EFe);Wyr=r(AAt,"roberta"),AAt.forEach(t),Qyr=r(SIe," \u2014 "),DJ=n(SIe,"A",{href:!0});var yAt=s(DJ);Hyr=r(yAt,"TFRobertaForQuestionAnswering"),yAt.forEach(t),Uyr=r(SIe," (RoBERTa model)"),SIe.forEach(t),Jyr=i(ge),EE=n(ge,"LI",{});var RIe=s(EE);CFe=n(RIe,"STRONG",{});var LAt=s(CFe);Yyr=r(LAt,"roformer"),LAt.forEach(t),Kyr=r(RIe," \u2014 "),GJ=n(RIe,"A",{href:!0});var xAt=s(GJ);Zyr=r(xAt,"TFRoFormerForQuestionAnswering"),xAt.forEach(t),eLr=r(RIe," (RoFormer model)"),RIe.forEach(t),oLr=i(ge),CE=n(ge,"LI",{});var PIe=s(CE);wFe=n(PIe,"STRONG",{});var $At=s(wFe);rLr=r($At,"xlm"),$At.forEach(t),tLr=r(PIe," \u2014 "),OJ=n(PIe,"A",{href:!0});var kAt=s(OJ);aLr=r(kAt,"TFXLMForQuestionAnsweringSimple"),kAt.forEach(t),nLr=r(PIe," (XLM model)"),PIe.forEach(t),sLr=i(ge),wE=n(ge,"LI",{});var BIe=s(wE);AFe=n(BIe,"STRONG",{});var SAt=s(AFe);lLr=r(SAt,"xlm-roberta"),SAt.forEach(t),iLr=r(BIe," \u2014 "),VJ=n(BIe,"A",{href:!0});var RAt=s(VJ);dLr=r(RAt,"TFXLMRobertaForQuestionAnswering"),RAt.forEach(t),cLr=r(BIe," (XLM-RoBERTa model)"),BIe.forEach(t),fLr=i(ge),AE=n(ge,"LI",{});var IIe=s(AE);yFe=n(IIe,"STRONG",{});var PAt=s(yFe);mLr=r(PAt,"xlnet"),PAt.forEach(t),gLr=r(IIe," \u2014 "),XJ=n(IIe,"A",{href:!0});var BAt=s(XJ);hLr=r(BAt,"TFXLNetForQuestionAnsweringSimple"),BAt.forEach(t),pLr=r(IIe," (XLNet model)"),IIe.forEach(t),ge.forEach(t),_Lr=i(Nl),T(yE.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),gDe=i(f),Cc=n(f,"H2",{class:!0});var FOe=s(Cc);LE=n(FOe,"A",{id:!0,class:!0,href:!0});var IAt=s(LE);LFe=n(IAt,"SPAN",{});var NAt=s(LFe);T(w9.$$.fragment,NAt),NAt.forEach(t),IAt.forEach(t),uLr=i(FOe),xFe=n(FOe,"SPAN",{});var qAt=s(xFe);bLr=r(qAt,"TFAutoModelForVision2Seq"),qAt.forEach(t),FOe.forEach(t),hDe=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(A9.$$.fragment,ql),vLr=i(ql),wc=n(ql,"P",{});var Kee=s(wc);FLr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zJ=n(Kee,"A",{href:!0});var jAt=s(zJ);TLr=r(jAt,"from_pretrained()"),jAt.forEach(t),MLr=r(Kee," class method or the "),WJ=n(Kee,"A",{href:!0});var DAt=s(WJ);ELr=r(DAt,"from_config()"),DAt.forEach(t),CLr=r(Kee,` class
method.`),Kee.forEach(t),wLr=i(ql),y9=n(ql,"P",{});var TOe=s(y9);ALr=r(TOe,"This class cannot be instantiated directly using "),$Fe=n(TOe,"CODE",{});var GAt=s($Fe);yLr=r(GAt,"__init__()"),GAt.forEach(t),LLr=r(TOe," (throws an error)."),TOe.forEach(t),xLr=i(ql),Dt=n(ql,"DIV",{class:!0});var nA=s(Dt);T(L9.$$.fragment,nA),$Lr=i(nA),kFe=n(nA,"P",{});var OAt=s(kFe);kLr=r(OAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OAt.forEach(t),SLr=i(nA),Ac=n(nA,"P",{});var Zee=s(Ac);RLr=r(Zee,`Note:
Loading a model from its configuration file does `),SFe=n(Zee,"STRONG",{});var VAt=s(SFe);PLr=r(VAt,"not"),VAt.forEach(t),BLr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(Zee,"A",{href:!0});var XAt=s(QJ);ILr=r(XAt,"from_pretrained()"),XAt.forEach(t),NLr=r(Zee," to load the model weights."),Zee.forEach(t),qLr=i(nA),T(xE.$$.fragment,nA),nA.forEach(t),jLr=i(ql),Nr=n(ql,"DIV",{class:!0});var jl=s(Nr);T(x9.$$.fragment,jl),DLr=i(jl),RFe=n(jl,"P",{});var zAt=s(RFe);GLr=r(zAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zAt.forEach(t),OLr=i(jl),mn=n(jl,"P",{});var sA=s(mn);VLr=r(sA,"The model class to instantiate is selected based on the "),PFe=n(sA,"CODE",{});var WAt=s(PFe);XLr=r(WAt,"model_type"),WAt.forEach(t),zLr=r(sA,` property of the config object (either
passed as an argument or loaded from `),BFe=n(sA,"CODE",{});var QAt=s(BFe);WLr=r(QAt,"pretrained_model_name_or_path"),QAt.forEach(t),QLr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=n(sA,"CODE",{});var HAt=s(IFe);HLr=r(HAt,"pretrained_model_name_or_path"),HAt.forEach(t),ULr=r(sA,":"),sA.forEach(t),JLr=i(jl),NFe=n(jl,"UL",{});var UAt=s(NFe);$E=n(UAt,"LI",{});var NIe=s($E);qFe=n(NIe,"STRONG",{});var JAt=s(qFe);YLr=r(JAt,"vision-encoder-decoder"),JAt.forEach(t),KLr=r(NIe," \u2014 "),HJ=n(NIe,"A",{href:!0});var YAt=s(HJ);ZLr=r(YAt,"TFVisionEncoderDecoderModel"),YAt.forEach(t),e8r=r(NIe," (Vision Encoder decoder model)"),NIe.forEach(t),UAt.forEach(t),o8r=i(jl),T(kE.$$.fragment,jl),jl.forEach(t),ql.forEach(t),pDe=i(f),yc=n(f,"H2",{class:!0});var MOe=s(yc);SE=n(MOe,"A",{id:!0,class:!0,href:!0});var KAt=s(SE);jFe=n(KAt,"SPAN",{});var ZAt=s(jFe);T($9.$$.fragment,ZAt),ZAt.forEach(t),KAt.forEach(t),r8r=i(MOe),DFe=n(MOe,"SPAN",{});var eyt=s(DFe);t8r=r(eyt,"TFAutoModelForSpeechSeq2Seq"),eyt.forEach(t),MOe.forEach(t),_De=i(f),cr=n(f,"DIV",{class:!0});var Dl=s(cr);T(k9.$$.fragment,Dl),a8r=i(Dl),Lc=n(Dl,"P",{});var eoe=s(Lc);n8r=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),UJ=n(eoe,"A",{href:!0});var oyt=s(UJ);s8r=r(oyt,"from_pretrained()"),oyt.forEach(t),l8r=r(eoe," class method or the "),JJ=n(eoe,"A",{href:!0});var ryt=s(JJ);i8r=r(ryt,"from_config()"),ryt.forEach(t),d8r=r(eoe,` class
method.`),eoe.forEach(t),c8r=i(Dl),S9=n(Dl,"P",{});var EOe=s(S9);f8r=r(EOe,"This class cannot be instantiated directly using "),GFe=n(EOe,"CODE",{});var tyt=s(GFe);m8r=r(tyt,"__init__()"),tyt.forEach(t),g8r=r(EOe," (throws an error)."),EOe.forEach(t),h8r=i(Dl),Gt=n(Dl,"DIV",{class:!0});var lA=s(Gt);T(R9.$$.fragment,lA),p8r=i(lA),OFe=n(lA,"P",{});var ayt=s(OFe);_8r=r(ayt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ayt.forEach(t),u8r=i(lA),xc=n(lA,"P",{});var ooe=s(xc);b8r=r(ooe,`Note:
Loading a model from its configuration file does `),VFe=n(ooe,"STRONG",{});var nyt=s(VFe);v8r=r(nyt,"not"),nyt.forEach(t),F8r=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=n(ooe,"A",{href:!0});var syt=s(YJ);T8r=r(syt,"from_pretrained()"),syt.forEach(t),M8r=r(ooe," to load the model weights."),ooe.forEach(t),E8r=i(lA),T(RE.$$.fragment,lA),lA.forEach(t),C8r=i(Dl),qr=n(Dl,"DIV",{class:!0});var Gl=s(qr);T(P9.$$.fragment,Gl),w8r=i(Gl),XFe=n(Gl,"P",{});var lyt=s(XFe);A8r=r(lyt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),lyt.forEach(t),y8r=i(Gl),gn=n(Gl,"P",{});var iA=s(gn);L8r=r(iA,"The model class to instantiate is selected based on the "),zFe=n(iA,"CODE",{});var iyt=s(zFe);x8r=r(iyt,"model_type"),iyt.forEach(t),$8r=r(iA,` property of the config object (either
passed as an argument or loaded from `),WFe=n(iA,"CODE",{});var dyt=s(WFe);k8r=r(dyt,"pretrained_model_name_or_path"),dyt.forEach(t),S8r=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=n(iA,"CODE",{});var cyt=s(QFe);R8r=r(cyt,"pretrained_model_name_or_path"),cyt.forEach(t),P8r=r(iA,":"),iA.forEach(t),B8r=i(Gl),HFe=n(Gl,"UL",{});var fyt=s(HFe);PE=n(fyt,"LI",{});var qIe=s(PE);UFe=n(qIe,"STRONG",{});var myt=s(UFe);I8r=r(myt,"speech_to_text"),myt.forEach(t),N8r=r(qIe," \u2014 "),KJ=n(qIe,"A",{href:!0});var gyt=s(KJ);q8r=r(gyt,"TFSpeech2TextForConditionalGeneration"),gyt.forEach(t),j8r=r(qIe," (Speech2Text model)"),qIe.forEach(t),fyt.forEach(t),D8r=i(Gl),T(BE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),uDe=i(f),$c=n(f,"H2",{class:!0});var COe=s($c);IE=n(COe,"A",{id:!0,class:!0,href:!0});var hyt=s(IE);JFe=n(hyt,"SPAN",{});var pyt=s(JFe);T(B9.$$.fragment,pyt),pyt.forEach(t),hyt.forEach(t),G8r=i(COe),YFe=n(COe,"SPAN",{});var _yt=s(YFe);O8r=r(_yt,"FlaxAutoModel"),_yt.forEach(t),COe.forEach(t),bDe=i(f),fr=n(f,"DIV",{class:!0});var Ol=s(fr);T(I9.$$.fragment,Ol),V8r=i(Ol),kc=n(Ol,"P",{});var roe=s(kc);X8r=r(roe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZJ=n(roe,"A",{href:!0});var uyt=s(ZJ);z8r=r(uyt,"from_pretrained()"),uyt.forEach(t),W8r=r(roe," class method or the "),eY=n(roe,"A",{href:!0});var byt=s(eY);Q8r=r(byt,"from_config()"),byt.forEach(t),H8r=r(roe,` class
method.`),roe.forEach(t),U8r=i(Ol),N9=n(Ol,"P",{});var wOe=s(N9);J8r=r(wOe,"This class cannot be instantiated directly using "),KFe=n(wOe,"CODE",{});var vyt=s(KFe);Y8r=r(vyt,"__init__()"),vyt.forEach(t),K8r=r(wOe," (throws an error)."),wOe.forEach(t),Z8r=i(Ol),Ot=n(Ol,"DIV",{class:!0});var dA=s(Ot);T(q9.$$.fragment,dA),e9r=i(dA),ZFe=n(dA,"P",{});var Fyt=s(ZFe);o9r=r(Fyt,"Instantiates one of the base model classes of the library from a configuration."),Fyt.forEach(t),r9r=i(dA),Sc=n(dA,"P",{});var toe=s(Sc);t9r=r(toe,`Note:
Loading a model from its configuration file does `),eTe=n(toe,"STRONG",{});var Tyt=s(eTe);a9r=r(Tyt,"not"),Tyt.forEach(t),n9r=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(toe,"A",{href:!0});var Myt=s(oY);s9r=r(Myt,"from_pretrained()"),Myt.forEach(t),l9r=r(toe," to load the model weights."),toe.forEach(t),i9r=i(dA),T(NE.$$.fragment,dA),dA.forEach(t),d9r=i(Ol),jr=n(Ol,"DIV",{class:!0});var Vl=s(jr);T(j9.$$.fragment,Vl),c9r=i(Vl),oTe=n(Vl,"P",{});var Eyt=s(oTe);f9r=r(Eyt,"Instantiate one of the base model classes of the library from a pretrained model."),Eyt.forEach(t),m9r=i(Vl),hn=n(Vl,"P",{});var cA=s(hn);g9r=r(cA,"The model class to instantiate is selected based on the "),rTe=n(cA,"CODE",{});var Cyt=s(rTe);h9r=r(Cyt,"model_type"),Cyt.forEach(t),p9r=r(cA,` property of the config object (either
passed as an argument or loaded from `),tTe=n(cA,"CODE",{});var wyt=s(tTe);_9r=r(wyt,"pretrained_model_name_or_path"),wyt.forEach(t),u9r=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=n(cA,"CODE",{});var Ayt=s(aTe);b9r=r(Ayt,"pretrained_model_name_or_path"),Ayt.forEach(t),v9r=r(cA,":"),cA.forEach(t),F9r=i(Vl),re=n(Vl,"UL",{});var ne=s(re);qE=n(ne,"LI",{});var jIe=s(qE);nTe=n(jIe,"STRONG",{});var yyt=s(nTe);T9r=r(yyt,"albert"),yyt.forEach(t),M9r=r(jIe," \u2014 "),rY=n(jIe,"A",{href:!0});var Lyt=s(rY);E9r=r(Lyt,"FlaxAlbertModel"),Lyt.forEach(t),C9r=r(jIe," (ALBERT model)"),jIe.forEach(t),w9r=i(ne),jE=n(ne,"LI",{});var DIe=s(jE);sTe=n(DIe,"STRONG",{});var xyt=s(sTe);A9r=r(xyt,"bart"),xyt.forEach(t),y9r=r(DIe," \u2014 "),tY=n(DIe,"A",{href:!0});var $yt=s(tY);L9r=r($yt,"FlaxBartModel"),$yt.forEach(t),x9r=r(DIe," (BART model)"),DIe.forEach(t),$9r=i(ne),DE=n(ne,"LI",{});var GIe=s(DE);lTe=n(GIe,"STRONG",{});var kyt=s(lTe);k9r=r(kyt,"beit"),kyt.forEach(t),S9r=r(GIe," \u2014 "),aY=n(GIe,"A",{href:!0});var Syt=s(aY);R9r=r(Syt,"FlaxBeitModel"),Syt.forEach(t),P9r=r(GIe," (BEiT model)"),GIe.forEach(t),B9r=i(ne),GE=n(ne,"LI",{});var OIe=s(GE);iTe=n(OIe,"STRONG",{});var Ryt=s(iTe);I9r=r(Ryt,"bert"),Ryt.forEach(t),N9r=r(OIe," \u2014 "),nY=n(OIe,"A",{href:!0});var Pyt=s(nY);q9r=r(Pyt,"FlaxBertModel"),Pyt.forEach(t),j9r=r(OIe," (BERT model)"),OIe.forEach(t),D9r=i(ne),OE=n(ne,"LI",{});var VIe=s(OE);dTe=n(VIe,"STRONG",{});var Byt=s(dTe);G9r=r(Byt,"big_bird"),Byt.forEach(t),O9r=r(VIe," \u2014 "),sY=n(VIe,"A",{href:!0});var Iyt=s(sY);V9r=r(Iyt,"FlaxBigBirdModel"),Iyt.forEach(t),X9r=r(VIe," (BigBird model)"),VIe.forEach(t),z9r=i(ne),VE=n(ne,"LI",{});var XIe=s(VE);cTe=n(XIe,"STRONG",{});var Nyt=s(cTe);W9r=r(Nyt,"blenderbot"),Nyt.forEach(t),Q9r=r(XIe," \u2014 "),lY=n(XIe,"A",{href:!0});var qyt=s(lY);H9r=r(qyt,"FlaxBlenderbotModel"),qyt.forEach(t),U9r=r(XIe," (Blenderbot model)"),XIe.forEach(t),J9r=i(ne),XE=n(ne,"LI",{});var zIe=s(XE);fTe=n(zIe,"STRONG",{});var jyt=s(fTe);Y9r=r(jyt,"blenderbot-small"),jyt.forEach(t),K9r=r(zIe," \u2014 "),iY=n(zIe,"A",{href:!0});var Dyt=s(iY);Z9r=r(Dyt,"FlaxBlenderbotSmallModel"),Dyt.forEach(t),exr=r(zIe," (BlenderbotSmall model)"),zIe.forEach(t),oxr=i(ne),zE=n(ne,"LI",{});var WIe=s(zE);mTe=n(WIe,"STRONG",{});var Gyt=s(mTe);rxr=r(Gyt,"clip"),Gyt.forEach(t),txr=r(WIe," \u2014 "),dY=n(WIe,"A",{href:!0});var Oyt=s(dY);axr=r(Oyt,"FlaxCLIPModel"),Oyt.forEach(t),nxr=r(WIe," (CLIP model)"),WIe.forEach(t),sxr=i(ne),WE=n(ne,"LI",{});var QIe=s(WE);gTe=n(QIe,"STRONG",{});var Vyt=s(gTe);lxr=r(Vyt,"distilbert"),Vyt.forEach(t),ixr=r(QIe," \u2014 "),cY=n(QIe,"A",{href:!0});var Xyt=s(cY);dxr=r(Xyt,"FlaxDistilBertModel"),Xyt.forEach(t),cxr=r(QIe," (DistilBERT model)"),QIe.forEach(t),fxr=i(ne),QE=n(ne,"LI",{});var HIe=s(QE);hTe=n(HIe,"STRONG",{});var zyt=s(hTe);mxr=r(zyt,"electra"),zyt.forEach(t),gxr=r(HIe," \u2014 "),fY=n(HIe,"A",{href:!0});var Wyt=s(fY);hxr=r(Wyt,"FlaxElectraModel"),Wyt.forEach(t),pxr=r(HIe," (ELECTRA model)"),HIe.forEach(t),_xr=i(ne),HE=n(ne,"LI",{});var UIe=s(HE);pTe=n(UIe,"STRONG",{});var Qyt=s(pTe);uxr=r(Qyt,"gpt2"),Qyt.forEach(t),bxr=r(UIe," \u2014 "),mY=n(UIe,"A",{href:!0});var Hyt=s(mY);vxr=r(Hyt,"FlaxGPT2Model"),Hyt.forEach(t),Fxr=r(UIe," (OpenAI GPT-2 model)"),UIe.forEach(t),Txr=i(ne),UE=n(ne,"LI",{});var JIe=s(UE);_Te=n(JIe,"STRONG",{});var Uyt=s(_Te);Mxr=r(Uyt,"gpt_neo"),Uyt.forEach(t),Exr=r(JIe," \u2014 "),gY=n(JIe,"A",{href:!0});var Jyt=s(gY);Cxr=r(Jyt,"FlaxGPTNeoModel"),Jyt.forEach(t),wxr=r(JIe," (GPT Neo model)"),JIe.forEach(t),Axr=i(ne),JE=n(ne,"LI",{});var YIe=s(JE);uTe=n(YIe,"STRONG",{});var Yyt=s(uTe);yxr=r(Yyt,"gptj"),Yyt.forEach(t),Lxr=r(YIe," \u2014 "),hY=n(YIe,"A",{href:!0});var Kyt=s(hY);xxr=r(Kyt,"FlaxGPTJModel"),Kyt.forEach(t),$xr=r(YIe," (GPT-J model)"),YIe.forEach(t),kxr=i(ne),YE=n(ne,"LI",{});var KIe=s(YE);bTe=n(KIe,"STRONG",{});var Zyt=s(bTe);Sxr=r(Zyt,"marian"),Zyt.forEach(t),Rxr=r(KIe," \u2014 "),pY=n(KIe,"A",{href:!0});var eLt=s(pY);Pxr=r(eLt,"FlaxMarianModel"),eLt.forEach(t),Bxr=r(KIe," (Marian model)"),KIe.forEach(t),Ixr=i(ne),KE=n(ne,"LI",{});var ZIe=s(KE);vTe=n(ZIe,"STRONG",{});var oLt=s(vTe);Nxr=r(oLt,"mbart"),oLt.forEach(t),qxr=r(ZIe," \u2014 "),_Y=n(ZIe,"A",{href:!0});var rLt=s(_Y);jxr=r(rLt,"FlaxMBartModel"),rLt.forEach(t),Dxr=r(ZIe," (mBART model)"),ZIe.forEach(t),Gxr=i(ne),ZE=n(ne,"LI",{});var eNe=s(ZE);FTe=n(eNe,"STRONG",{});var tLt=s(FTe);Oxr=r(tLt,"mt5"),tLt.forEach(t),Vxr=r(eNe," \u2014 "),uY=n(eNe,"A",{href:!0});var aLt=s(uY);Xxr=r(aLt,"FlaxMT5Model"),aLt.forEach(t),zxr=r(eNe," (mT5 model)"),eNe.forEach(t),Wxr=i(ne),eC=n(ne,"LI",{});var oNe=s(eC);TTe=n(oNe,"STRONG",{});var nLt=s(TTe);Qxr=r(nLt,"opt"),nLt.forEach(t),Hxr=r(oNe," \u2014 "),bY=n(oNe,"A",{href:!0});var sLt=s(bY);Uxr=r(sLt,"FlaxOPTModel"),sLt.forEach(t),Jxr=r(oNe," (OPT model)"),oNe.forEach(t),Yxr=i(ne),oC=n(ne,"LI",{});var rNe=s(oC);MTe=n(rNe,"STRONG",{});var lLt=s(MTe);Kxr=r(lLt,"pegasus"),lLt.forEach(t),Zxr=r(rNe," \u2014 "),vY=n(rNe,"A",{href:!0});var iLt=s(vY);e$r=r(iLt,"FlaxPegasusModel"),iLt.forEach(t),o$r=r(rNe," (Pegasus model)"),rNe.forEach(t),r$r=i(ne),rC=n(ne,"LI",{});var tNe=s(rC);ETe=n(tNe,"STRONG",{});var dLt=s(ETe);t$r=r(dLt,"roberta"),dLt.forEach(t),a$r=r(tNe," \u2014 "),FY=n(tNe,"A",{href:!0});var cLt=s(FY);n$r=r(cLt,"FlaxRobertaModel"),cLt.forEach(t),s$r=r(tNe," (RoBERTa model)"),tNe.forEach(t),l$r=i(ne),tC=n(ne,"LI",{});var aNe=s(tC);CTe=n(aNe,"STRONG",{});var fLt=s(CTe);i$r=r(fLt,"roformer"),fLt.forEach(t),d$r=r(aNe," \u2014 "),TY=n(aNe,"A",{href:!0});var mLt=s(TY);c$r=r(mLt,"FlaxRoFormerModel"),mLt.forEach(t),f$r=r(aNe," (RoFormer model)"),aNe.forEach(t),m$r=i(ne),aC=n(ne,"LI",{});var nNe=s(aC);wTe=n(nNe,"STRONG",{});var gLt=s(wTe);g$r=r(gLt,"t5"),gLt.forEach(t),h$r=r(nNe," \u2014 "),MY=n(nNe,"A",{href:!0});var hLt=s(MY);p$r=r(hLt,"FlaxT5Model"),hLt.forEach(t),_$r=r(nNe," (T5 model)"),nNe.forEach(t),u$r=i(ne),nC=n(ne,"LI",{});var sNe=s(nC);ATe=n(sNe,"STRONG",{});var pLt=s(ATe);b$r=r(pLt,"vision-text-dual-encoder"),pLt.forEach(t),v$r=r(sNe," \u2014 "),EY=n(sNe,"A",{href:!0});var _Lt=s(EY);F$r=r(_Lt,"FlaxVisionTextDualEncoderModel"),_Lt.forEach(t),T$r=r(sNe," (VisionTextDualEncoder model)"),sNe.forEach(t),M$r=i(ne),sC=n(ne,"LI",{});var lNe=s(sC);yTe=n(lNe,"STRONG",{});var uLt=s(yTe);E$r=r(uLt,"vit"),uLt.forEach(t),C$r=r(lNe," \u2014 "),CY=n(lNe,"A",{href:!0});var bLt=s(CY);w$r=r(bLt,"FlaxViTModel"),bLt.forEach(t),A$r=r(lNe," (ViT model)"),lNe.forEach(t),y$r=i(ne),lC=n(ne,"LI",{});var iNe=s(lC);LTe=n(iNe,"STRONG",{});var vLt=s(LTe);L$r=r(vLt,"wav2vec2"),vLt.forEach(t),x$r=r(iNe," \u2014 "),wY=n(iNe,"A",{href:!0});var FLt=s(wY);$$r=r(FLt,"FlaxWav2Vec2Model"),FLt.forEach(t),k$r=r(iNe," (Wav2Vec2 model)"),iNe.forEach(t),S$r=i(ne),iC=n(ne,"LI",{});var dNe=s(iC);xTe=n(dNe,"STRONG",{});var TLt=s(xTe);R$r=r(TLt,"xglm"),TLt.forEach(t),P$r=r(dNe," \u2014 "),AY=n(dNe,"A",{href:!0});var MLt=s(AY);B$r=r(MLt,"FlaxXGLMModel"),MLt.forEach(t),I$r=r(dNe," (XGLM model)"),dNe.forEach(t),N$r=i(ne),dC=n(ne,"LI",{});var cNe=s(dC);$Te=n(cNe,"STRONG",{});var ELt=s($Te);q$r=r(ELt,"xlm-roberta"),ELt.forEach(t),j$r=r(cNe," \u2014 "),yY=n(cNe,"A",{href:!0});var CLt=s(yY);D$r=r(CLt,"FlaxXLMRobertaModel"),CLt.forEach(t),G$r=r(cNe," (XLM-RoBERTa model)"),cNe.forEach(t),ne.forEach(t),O$r=i(Vl),T(cC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),vDe=i(f),Rc=n(f,"H2",{class:!0});var AOe=s(Rc);fC=n(AOe,"A",{id:!0,class:!0,href:!0});var wLt=s(fC);kTe=n(wLt,"SPAN",{});var ALt=s(kTe);T(D9.$$.fragment,ALt),ALt.forEach(t),wLt.forEach(t),V$r=i(AOe),STe=n(AOe,"SPAN",{});var yLt=s(STe);X$r=r(yLt,"FlaxAutoModelForCausalLM"),yLt.forEach(t),AOe.forEach(t),FDe=i(f),mr=n(f,"DIV",{class:!0});var Xl=s(mr);T(G9.$$.fragment,Xl),z$r=i(Xl),Pc=n(Xl,"P",{});var aoe=s(Pc);W$r=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),LY=n(aoe,"A",{href:!0});var LLt=s(LY);Q$r=r(LLt,"from_pretrained()"),LLt.forEach(t),H$r=r(aoe," class method or the "),xY=n(aoe,"A",{href:!0});var xLt=s(xY);U$r=r(xLt,"from_config()"),xLt.forEach(t),J$r=r(aoe,` class
method.`),aoe.forEach(t),Y$r=i(Xl),O9=n(Xl,"P",{});var yOe=s(O9);K$r=r(yOe,"This class cannot be instantiated directly using "),RTe=n(yOe,"CODE",{});var $Lt=s(RTe);Z$r=r($Lt,"__init__()"),$Lt.forEach(t),ekr=r(yOe," (throws an error)."),yOe.forEach(t),okr=i(Xl),Vt=n(Xl,"DIV",{class:!0});var fA=s(Vt);T(V9.$$.fragment,fA),rkr=i(fA),PTe=n(fA,"P",{});var kLt=s(PTe);tkr=r(kLt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kLt.forEach(t),akr=i(fA),Bc=n(fA,"P",{});var noe=s(Bc);nkr=r(noe,`Note:
Loading a model from its configuration file does `),BTe=n(noe,"STRONG",{});var SLt=s(BTe);skr=r(SLt,"not"),SLt.forEach(t),lkr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=n(noe,"A",{href:!0});var RLt=s($Y);ikr=r(RLt,"from_pretrained()"),RLt.forEach(t),dkr=r(noe," to load the model weights."),noe.forEach(t),ckr=i(fA),T(mC.$$.fragment,fA),fA.forEach(t),fkr=i(Xl),Dr=n(Xl,"DIV",{class:!0});var zl=s(Dr);T(X9.$$.fragment,zl),mkr=i(zl),ITe=n(zl,"P",{});var PLt=s(ITe);gkr=r(PLt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),PLt.forEach(t),hkr=i(zl),pn=n(zl,"P",{});var mA=s(pn);pkr=r(mA,"The model class to instantiate is selected based on the "),NTe=n(mA,"CODE",{});var BLt=s(NTe);_kr=r(BLt,"model_type"),BLt.forEach(t),ukr=r(mA,` property of the config object (either
passed as an argument or loaded from `),qTe=n(mA,"CODE",{});var ILt=s(qTe);bkr=r(ILt,"pretrained_model_name_or_path"),ILt.forEach(t),vkr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=n(mA,"CODE",{});var NLt=s(jTe);Fkr=r(NLt,"pretrained_model_name_or_path"),NLt.forEach(t),Tkr=r(mA,":"),mA.forEach(t),Mkr=i(zl),Le=n(zl,"UL",{});var Ie=s(Le);gC=n(Ie,"LI",{});var fNe=s(gC);DTe=n(fNe,"STRONG",{});var qLt=s(DTe);Ekr=r(qLt,"bart"),qLt.forEach(t),Ckr=r(fNe," \u2014 "),kY=n(fNe,"A",{href:!0});var jLt=s(kY);wkr=r(jLt,"FlaxBartForCausalLM"),jLt.forEach(t),Akr=r(fNe," (BART model)"),fNe.forEach(t),ykr=i(Ie),hC=n(Ie,"LI",{});var mNe=s(hC);GTe=n(mNe,"STRONG",{});var DLt=s(GTe);Lkr=r(DLt,"bert"),DLt.forEach(t),xkr=r(mNe," \u2014 "),SY=n(mNe,"A",{href:!0});var GLt=s(SY);$kr=r(GLt,"FlaxBertForCausalLM"),GLt.forEach(t),kkr=r(mNe," (BERT model)"),mNe.forEach(t),Skr=i(Ie),pC=n(Ie,"LI",{});var gNe=s(pC);OTe=n(gNe,"STRONG",{});var OLt=s(OTe);Rkr=r(OLt,"big_bird"),OLt.forEach(t),Pkr=r(gNe," \u2014 "),RY=n(gNe,"A",{href:!0});var VLt=s(RY);Bkr=r(VLt,"FlaxBigBirdForCausalLM"),VLt.forEach(t),Ikr=r(gNe," (BigBird model)"),gNe.forEach(t),Nkr=i(Ie),_C=n(Ie,"LI",{});var hNe=s(_C);VTe=n(hNe,"STRONG",{});var XLt=s(VTe);qkr=r(XLt,"electra"),XLt.forEach(t),jkr=r(hNe," \u2014 "),PY=n(hNe,"A",{href:!0});var zLt=s(PY);Dkr=r(zLt,"FlaxElectraForCausalLM"),zLt.forEach(t),Gkr=r(hNe," (ELECTRA model)"),hNe.forEach(t),Okr=i(Ie),uC=n(Ie,"LI",{});var pNe=s(uC);XTe=n(pNe,"STRONG",{});var WLt=s(XTe);Vkr=r(WLt,"gpt2"),WLt.forEach(t),Xkr=r(pNe," \u2014 "),BY=n(pNe,"A",{href:!0});var QLt=s(BY);zkr=r(QLt,"FlaxGPT2LMHeadModel"),QLt.forEach(t),Wkr=r(pNe," (OpenAI GPT-2 model)"),pNe.forEach(t),Qkr=i(Ie),bC=n(Ie,"LI",{});var _Ne=s(bC);zTe=n(_Ne,"STRONG",{});var HLt=s(zTe);Hkr=r(HLt,"gpt_neo"),HLt.forEach(t),Ukr=r(_Ne," \u2014 "),IY=n(_Ne,"A",{href:!0});var ULt=s(IY);Jkr=r(ULt,"FlaxGPTNeoForCausalLM"),ULt.forEach(t),Ykr=r(_Ne," (GPT Neo model)"),_Ne.forEach(t),Kkr=i(Ie),vC=n(Ie,"LI",{});var uNe=s(vC);WTe=n(uNe,"STRONG",{});var JLt=s(WTe);Zkr=r(JLt,"gptj"),JLt.forEach(t),eSr=r(uNe," \u2014 "),NY=n(uNe,"A",{href:!0});var YLt=s(NY);oSr=r(YLt,"FlaxGPTJForCausalLM"),YLt.forEach(t),rSr=r(uNe," (GPT-J model)"),uNe.forEach(t),tSr=i(Ie),FC=n(Ie,"LI",{});var bNe=s(FC);QTe=n(bNe,"STRONG",{});var KLt=s(QTe);aSr=r(KLt,"opt"),KLt.forEach(t),nSr=r(bNe," \u2014 "),qY=n(bNe,"A",{href:!0});var ZLt=s(qY);sSr=r(ZLt,"FlaxOPTForCausalLM"),ZLt.forEach(t),lSr=r(bNe," (OPT model)"),bNe.forEach(t),iSr=i(Ie),TC=n(Ie,"LI",{});var vNe=s(TC);HTe=n(vNe,"STRONG",{});var e8t=s(HTe);dSr=r(e8t,"roberta"),e8t.forEach(t),cSr=r(vNe," \u2014 "),jY=n(vNe,"A",{href:!0});var o8t=s(jY);fSr=r(o8t,"FlaxRobertaForCausalLM"),o8t.forEach(t),mSr=r(vNe," (RoBERTa model)"),vNe.forEach(t),gSr=i(Ie),MC=n(Ie,"LI",{});var FNe=s(MC);UTe=n(FNe,"STRONG",{});var r8t=s(UTe);hSr=r(r8t,"xglm"),r8t.forEach(t),pSr=r(FNe," \u2014 "),DY=n(FNe,"A",{href:!0});var t8t=s(DY);_Sr=r(t8t,"FlaxXGLMForCausalLM"),t8t.forEach(t),uSr=r(FNe," (XGLM model)"),FNe.forEach(t),Ie.forEach(t),bSr=i(zl),T(EC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),TDe=i(f),Ic=n(f,"H2",{class:!0});var LOe=s(Ic);CC=n(LOe,"A",{id:!0,class:!0,href:!0});var a8t=s(CC);JTe=n(a8t,"SPAN",{});var n8t=s(JTe);T(z9.$$.fragment,n8t),n8t.forEach(t),a8t.forEach(t),vSr=i(LOe),YTe=n(LOe,"SPAN",{});var s8t=s(YTe);FSr=r(s8t,"FlaxAutoModelForPreTraining"),s8t.forEach(t),LOe.forEach(t),MDe=i(f),gr=n(f,"DIV",{class:!0});var Wl=s(gr);T(W9.$$.fragment,Wl),TSr=i(Wl),Nc=n(Wl,"P",{});var soe=s(Nc);MSr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GY=n(soe,"A",{href:!0});var l8t=s(GY);ESr=r(l8t,"from_pretrained()"),l8t.forEach(t),CSr=r(soe," class method or the "),OY=n(soe,"A",{href:!0});var i8t=s(OY);wSr=r(i8t,"from_config()"),i8t.forEach(t),ASr=r(soe,` class
method.`),soe.forEach(t),ySr=i(Wl),Q9=n(Wl,"P",{});var xOe=s(Q9);LSr=r(xOe,"This class cannot be instantiated directly using "),KTe=n(xOe,"CODE",{});var d8t=s(KTe);xSr=r(d8t,"__init__()"),d8t.forEach(t),$Sr=r(xOe," (throws an error)."),xOe.forEach(t),kSr=i(Wl),Xt=n(Wl,"DIV",{class:!0});var gA=s(Xt);T(H9.$$.fragment,gA),SSr=i(gA),ZTe=n(gA,"P",{});var c8t=s(ZTe);RSr=r(c8t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),c8t.forEach(t),PSr=i(gA),qc=n(gA,"P",{});var loe=s(qc);BSr=r(loe,`Note:
Loading a model from its configuration file does `),e7e=n(loe,"STRONG",{});var f8t=s(e7e);ISr=r(f8t,"not"),f8t.forEach(t),NSr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=n(loe,"A",{href:!0});var m8t=s(VY);qSr=r(m8t,"from_pretrained()"),m8t.forEach(t),jSr=r(loe," to load the model weights."),loe.forEach(t),DSr=i(gA),T(wC.$$.fragment,gA),gA.forEach(t),GSr=i(Wl),Gr=n(Wl,"DIV",{class:!0});var Ql=s(Gr);T(U9.$$.fragment,Ql),OSr=i(Ql),o7e=n(Ql,"P",{});var g8t=s(o7e);VSr=r(g8t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),g8t.forEach(t),XSr=i(Ql),_n=n(Ql,"P",{});var hA=s(_n);zSr=r(hA,"The model class to instantiate is selected based on the "),r7e=n(hA,"CODE",{});var h8t=s(r7e);WSr=r(h8t,"model_type"),h8t.forEach(t),QSr=r(hA,` property of the config object (either
passed as an argument or loaded from `),t7e=n(hA,"CODE",{});var p8t=s(t7e);HSr=r(p8t,"pretrained_model_name_or_path"),p8t.forEach(t),USr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a7e=n(hA,"CODE",{});var _8t=s(a7e);JSr=r(_8t,"pretrained_model_name_or_path"),_8t.forEach(t),YSr=r(hA,":"),hA.forEach(t),KSr=i(Ql),Ee=n(Ql,"UL",{});var we=s(Ee);AC=n(we,"LI",{});var TNe=s(AC);n7e=n(TNe,"STRONG",{});var u8t=s(n7e);ZSr=r(u8t,"albert"),u8t.forEach(t),eRr=r(TNe," \u2014 "),XY=n(TNe,"A",{href:!0});var b8t=s(XY);oRr=r(b8t,"FlaxAlbertForPreTraining"),b8t.forEach(t),rRr=r(TNe," (ALBERT model)"),TNe.forEach(t),tRr=i(we),yC=n(we,"LI",{});var MNe=s(yC);s7e=n(MNe,"STRONG",{});var v8t=s(s7e);aRr=r(v8t,"bart"),v8t.forEach(t),nRr=r(MNe," \u2014 "),zY=n(MNe,"A",{href:!0});var F8t=s(zY);sRr=r(F8t,"FlaxBartForConditionalGeneration"),F8t.forEach(t),lRr=r(MNe," (BART model)"),MNe.forEach(t),iRr=i(we),LC=n(we,"LI",{});var ENe=s(LC);l7e=n(ENe,"STRONG",{});var T8t=s(l7e);dRr=r(T8t,"bert"),T8t.forEach(t),cRr=r(ENe," \u2014 "),WY=n(ENe,"A",{href:!0});var M8t=s(WY);fRr=r(M8t,"FlaxBertForPreTraining"),M8t.forEach(t),mRr=r(ENe," (BERT model)"),ENe.forEach(t),gRr=i(we),xC=n(we,"LI",{});var CNe=s(xC);i7e=n(CNe,"STRONG",{});var E8t=s(i7e);hRr=r(E8t,"big_bird"),E8t.forEach(t),pRr=r(CNe," \u2014 "),QY=n(CNe,"A",{href:!0});var C8t=s(QY);_Rr=r(C8t,"FlaxBigBirdForPreTraining"),C8t.forEach(t),uRr=r(CNe," (BigBird model)"),CNe.forEach(t),bRr=i(we),$C=n(we,"LI",{});var wNe=s($C);d7e=n(wNe,"STRONG",{});var w8t=s(d7e);vRr=r(w8t,"electra"),w8t.forEach(t),FRr=r(wNe," \u2014 "),HY=n(wNe,"A",{href:!0});var A8t=s(HY);TRr=r(A8t,"FlaxElectraForPreTraining"),A8t.forEach(t),MRr=r(wNe," (ELECTRA model)"),wNe.forEach(t),ERr=i(we),kC=n(we,"LI",{});var ANe=s(kC);c7e=n(ANe,"STRONG",{});var y8t=s(c7e);CRr=r(y8t,"mbart"),y8t.forEach(t),wRr=r(ANe," \u2014 "),UY=n(ANe,"A",{href:!0});var L8t=s(UY);ARr=r(L8t,"FlaxMBartForConditionalGeneration"),L8t.forEach(t),yRr=r(ANe," (mBART model)"),ANe.forEach(t),LRr=i(we),SC=n(we,"LI",{});var yNe=s(SC);f7e=n(yNe,"STRONG",{});var x8t=s(f7e);xRr=r(x8t,"mt5"),x8t.forEach(t),$Rr=r(yNe," \u2014 "),JY=n(yNe,"A",{href:!0});var $8t=s(JY);kRr=r($8t,"FlaxMT5ForConditionalGeneration"),$8t.forEach(t),SRr=r(yNe," (mT5 model)"),yNe.forEach(t),RRr=i(we),RC=n(we,"LI",{});var LNe=s(RC);m7e=n(LNe,"STRONG",{});var k8t=s(m7e);PRr=r(k8t,"roberta"),k8t.forEach(t),BRr=r(LNe," \u2014 "),YY=n(LNe,"A",{href:!0});var S8t=s(YY);IRr=r(S8t,"FlaxRobertaForMaskedLM"),S8t.forEach(t),NRr=r(LNe," (RoBERTa model)"),LNe.forEach(t),qRr=i(we),PC=n(we,"LI",{});var xNe=s(PC);g7e=n(xNe,"STRONG",{});var R8t=s(g7e);jRr=r(R8t,"roformer"),R8t.forEach(t),DRr=r(xNe," \u2014 "),KY=n(xNe,"A",{href:!0});var P8t=s(KY);GRr=r(P8t,"FlaxRoFormerForMaskedLM"),P8t.forEach(t),ORr=r(xNe," (RoFormer model)"),xNe.forEach(t),VRr=i(we),BC=n(we,"LI",{});var $Ne=s(BC);h7e=n($Ne,"STRONG",{});var B8t=s(h7e);XRr=r(B8t,"t5"),B8t.forEach(t),zRr=r($Ne," \u2014 "),ZY=n($Ne,"A",{href:!0});var I8t=s(ZY);WRr=r(I8t,"FlaxT5ForConditionalGeneration"),I8t.forEach(t),QRr=r($Ne," (T5 model)"),$Ne.forEach(t),HRr=i(we),IC=n(we,"LI",{});var kNe=s(IC);p7e=n(kNe,"STRONG",{});var N8t=s(p7e);URr=r(N8t,"wav2vec2"),N8t.forEach(t),JRr=r(kNe," \u2014 "),eK=n(kNe,"A",{href:!0});var q8t=s(eK);YRr=r(q8t,"FlaxWav2Vec2ForPreTraining"),q8t.forEach(t),KRr=r(kNe," (Wav2Vec2 model)"),kNe.forEach(t),ZRr=i(we),NC=n(we,"LI",{});var SNe=s(NC);_7e=n(SNe,"STRONG",{});var j8t=s(_7e);ePr=r(j8t,"xlm-roberta"),j8t.forEach(t),oPr=r(SNe," \u2014 "),oK=n(SNe,"A",{href:!0});var D8t=s(oK);rPr=r(D8t,"FlaxXLMRobertaForMaskedLM"),D8t.forEach(t),tPr=r(SNe," (XLM-RoBERTa model)"),SNe.forEach(t),we.forEach(t),aPr=i(Ql),T(qC.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),EDe=i(f),jc=n(f,"H2",{class:!0});var $Oe=s(jc);jC=n($Oe,"A",{id:!0,class:!0,href:!0});var G8t=s(jC);u7e=n(G8t,"SPAN",{});var O8t=s(u7e);T(J9.$$.fragment,O8t),O8t.forEach(t),G8t.forEach(t),nPr=i($Oe),b7e=n($Oe,"SPAN",{});var V8t=s(b7e);sPr=r(V8t,"FlaxAutoModelForMaskedLM"),V8t.forEach(t),$Oe.forEach(t),CDe=i(f),hr=n(f,"DIV",{class:!0});var Hl=s(hr);T(Y9.$$.fragment,Hl),lPr=i(Hl),Dc=n(Hl,"P",{});var ioe=s(Dc);iPr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rK=n(ioe,"A",{href:!0});var X8t=s(rK);dPr=r(X8t,"from_pretrained()"),X8t.forEach(t),cPr=r(ioe," class method or the "),tK=n(ioe,"A",{href:!0});var z8t=s(tK);fPr=r(z8t,"from_config()"),z8t.forEach(t),mPr=r(ioe,` class
method.`),ioe.forEach(t),gPr=i(Hl),K9=n(Hl,"P",{});var kOe=s(K9);hPr=r(kOe,"This class cannot be instantiated directly using "),v7e=n(kOe,"CODE",{});var W8t=s(v7e);pPr=r(W8t,"__init__()"),W8t.forEach(t),_Pr=r(kOe," (throws an error)."),kOe.forEach(t),uPr=i(Hl),zt=n(Hl,"DIV",{class:!0});var pA=s(zt);T(Z9.$$.fragment,pA),bPr=i(pA),F7e=n(pA,"P",{});var Q8t=s(F7e);vPr=r(Q8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Q8t.forEach(t),FPr=i(pA),Gc=n(pA,"P",{});var doe=s(Gc);TPr=r(doe,`Note:
Loading a model from its configuration file does `),T7e=n(doe,"STRONG",{});var H8t=s(T7e);MPr=r(H8t,"not"),H8t.forEach(t),EPr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(doe,"A",{href:!0});var U8t=s(aK);CPr=r(U8t,"from_pretrained()"),U8t.forEach(t),wPr=r(doe," to load the model weights."),doe.forEach(t),APr=i(pA),T(DC.$$.fragment,pA),pA.forEach(t),yPr=i(Hl),Or=n(Hl,"DIV",{class:!0});var Ul=s(Or);T(ex.$$.fragment,Ul),LPr=i(Ul),M7e=n(Ul,"P",{});var J8t=s(M7e);xPr=r(J8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),J8t.forEach(t),$Pr=i(Ul),un=n(Ul,"P",{});var _A=s(un);kPr=r(_A,"The model class to instantiate is selected based on the "),E7e=n(_A,"CODE",{});var Y8t=s(E7e);SPr=r(Y8t,"model_type"),Y8t.forEach(t),RPr=r(_A,` property of the config object (either
passed as an argument or loaded from `),C7e=n(_A,"CODE",{});var K8t=s(C7e);PPr=r(K8t,"pretrained_model_name_or_path"),K8t.forEach(t),BPr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=n(_A,"CODE",{});var Z8t=s(w7e);IPr=r(Z8t,"pretrained_model_name_or_path"),Z8t.forEach(t),NPr=r(_A,":"),_A.forEach(t),qPr=i(Ul),xe=n(Ul,"UL",{});var Ne=s(xe);GC=n(Ne,"LI",{});var RNe=s(GC);A7e=n(RNe,"STRONG",{});var e9t=s(A7e);jPr=r(e9t,"albert"),e9t.forEach(t),DPr=r(RNe," \u2014 "),nK=n(RNe,"A",{href:!0});var o9t=s(nK);GPr=r(o9t,"FlaxAlbertForMaskedLM"),o9t.forEach(t),OPr=r(RNe," (ALBERT model)"),RNe.forEach(t),VPr=i(Ne),OC=n(Ne,"LI",{});var PNe=s(OC);y7e=n(PNe,"STRONG",{});var r9t=s(y7e);XPr=r(r9t,"bart"),r9t.forEach(t),zPr=r(PNe," \u2014 "),sK=n(PNe,"A",{href:!0});var t9t=s(sK);WPr=r(t9t,"FlaxBartForConditionalGeneration"),t9t.forEach(t),QPr=r(PNe," (BART model)"),PNe.forEach(t),HPr=i(Ne),VC=n(Ne,"LI",{});var BNe=s(VC);L7e=n(BNe,"STRONG",{});var a9t=s(L7e);UPr=r(a9t,"bert"),a9t.forEach(t),JPr=r(BNe," \u2014 "),lK=n(BNe,"A",{href:!0});var n9t=s(lK);YPr=r(n9t,"FlaxBertForMaskedLM"),n9t.forEach(t),KPr=r(BNe," (BERT model)"),BNe.forEach(t),ZPr=i(Ne),XC=n(Ne,"LI",{});var INe=s(XC);x7e=n(INe,"STRONG",{});var s9t=s(x7e);eBr=r(s9t,"big_bird"),s9t.forEach(t),oBr=r(INe," \u2014 "),iK=n(INe,"A",{href:!0});var l9t=s(iK);rBr=r(l9t,"FlaxBigBirdForMaskedLM"),l9t.forEach(t),tBr=r(INe," (BigBird model)"),INe.forEach(t),aBr=i(Ne),zC=n(Ne,"LI",{});var NNe=s(zC);$7e=n(NNe,"STRONG",{});var i9t=s($7e);nBr=r(i9t,"distilbert"),i9t.forEach(t),sBr=r(NNe," \u2014 "),dK=n(NNe,"A",{href:!0});var d9t=s(dK);lBr=r(d9t,"FlaxDistilBertForMaskedLM"),d9t.forEach(t),iBr=r(NNe," (DistilBERT model)"),NNe.forEach(t),dBr=i(Ne),WC=n(Ne,"LI",{});var qNe=s(WC);k7e=n(qNe,"STRONG",{});var c9t=s(k7e);cBr=r(c9t,"electra"),c9t.forEach(t),fBr=r(qNe," \u2014 "),cK=n(qNe,"A",{href:!0});var f9t=s(cK);mBr=r(f9t,"FlaxElectraForMaskedLM"),f9t.forEach(t),gBr=r(qNe," (ELECTRA model)"),qNe.forEach(t),hBr=i(Ne),QC=n(Ne,"LI",{});var jNe=s(QC);S7e=n(jNe,"STRONG",{});var m9t=s(S7e);pBr=r(m9t,"mbart"),m9t.forEach(t),_Br=r(jNe," \u2014 "),fK=n(jNe,"A",{href:!0});var g9t=s(fK);uBr=r(g9t,"FlaxMBartForConditionalGeneration"),g9t.forEach(t),bBr=r(jNe," (mBART model)"),jNe.forEach(t),vBr=i(Ne),HC=n(Ne,"LI",{});var DNe=s(HC);R7e=n(DNe,"STRONG",{});var h9t=s(R7e);FBr=r(h9t,"roberta"),h9t.forEach(t),TBr=r(DNe," \u2014 "),mK=n(DNe,"A",{href:!0});var p9t=s(mK);MBr=r(p9t,"FlaxRobertaForMaskedLM"),p9t.forEach(t),EBr=r(DNe," (RoBERTa model)"),DNe.forEach(t),CBr=i(Ne),UC=n(Ne,"LI",{});var GNe=s(UC);P7e=n(GNe,"STRONG",{});var _9t=s(P7e);wBr=r(_9t,"roformer"),_9t.forEach(t),ABr=r(GNe," \u2014 "),gK=n(GNe,"A",{href:!0});var u9t=s(gK);yBr=r(u9t,"FlaxRoFormerForMaskedLM"),u9t.forEach(t),LBr=r(GNe," (RoFormer model)"),GNe.forEach(t),xBr=i(Ne),JC=n(Ne,"LI",{});var ONe=s(JC);B7e=n(ONe,"STRONG",{});var b9t=s(B7e);$Br=r(b9t,"xlm-roberta"),b9t.forEach(t),kBr=r(ONe," \u2014 "),hK=n(ONe,"A",{href:!0});var v9t=s(hK);SBr=r(v9t,"FlaxXLMRobertaForMaskedLM"),v9t.forEach(t),RBr=r(ONe," (XLM-RoBERTa model)"),ONe.forEach(t),Ne.forEach(t),PBr=i(Ul),T(YC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),wDe=i(f),Oc=n(f,"H2",{class:!0});var SOe=s(Oc);KC=n(SOe,"A",{id:!0,class:!0,href:!0});var F9t=s(KC);I7e=n(F9t,"SPAN",{});var T9t=s(I7e);T(ox.$$.fragment,T9t),T9t.forEach(t),F9t.forEach(t),BBr=i(SOe),N7e=n(SOe,"SPAN",{});var M9t=s(N7e);IBr=r(M9t,"FlaxAutoModelForSeq2SeqLM"),M9t.forEach(t),SOe.forEach(t),ADe=i(f),pr=n(f,"DIV",{class:!0});var Jl=s(pr);T(rx.$$.fragment,Jl),NBr=i(Jl),Vc=n(Jl,"P",{});var coe=s(Vc);qBr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pK=n(coe,"A",{href:!0});var E9t=s(pK);jBr=r(E9t,"from_pretrained()"),E9t.forEach(t),DBr=r(coe," class method or the "),_K=n(coe,"A",{href:!0});var C9t=s(_K);GBr=r(C9t,"from_config()"),C9t.forEach(t),OBr=r(coe,` class
method.`),coe.forEach(t),VBr=i(Jl),tx=n(Jl,"P",{});var ROe=s(tx);XBr=r(ROe,"This class cannot be instantiated directly using "),q7e=n(ROe,"CODE",{});var w9t=s(q7e);zBr=r(w9t,"__init__()"),w9t.forEach(t),WBr=r(ROe," (throws an error)."),ROe.forEach(t),QBr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var uA=s(Wt);T(ax.$$.fragment,uA),HBr=i(uA),j7e=n(uA,"P",{});var A9t=s(j7e);UBr=r(A9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),A9t.forEach(t),JBr=i(uA),Xc=n(uA,"P",{});var foe=s(Xc);YBr=r(foe,`Note:
Loading a model from its configuration file does `),D7e=n(foe,"STRONG",{});var y9t=s(D7e);KBr=r(y9t,"not"),y9t.forEach(t),ZBr=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(foe,"A",{href:!0});var L9t=s(uK);eIr=r(L9t,"from_pretrained()"),L9t.forEach(t),oIr=r(foe," to load the model weights."),foe.forEach(t),rIr=i(uA),T(ZC.$$.fragment,uA),uA.forEach(t),tIr=i(Jl),Vr=n(Jl,"DIV",{class:!0});var Yl=s(Vr);T(nx.$$.fragment,Yl),aIr=i(Yl),G7e=n(Yl,"P",{});var x9t=s(G7e);nIr=r(x9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),x9t.forEach(t),sIr=i(Yl),bn=n(Yl,"P",{});var bA=s(bn);lIr=r(bA,"The model class to instantiate is selected based on the "),O7e=n(bA,"CODE",{});var $9t=s(O7e);iIr=r($9t,"model_type"),$9t.forEach(t),dIr=r(bA,` property of the config object (either
passed as an argument or loaded from `),V7e=n(bA,"CODE",{});var k9t=s(V7e);cIr=r(k9t,"pretrained_model_name_or_path"),k9t.forEach(t),fIr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X7e=n(bA,"CODE",{});var S9t=s(X7e);mIr=r(S9t,"pretrained_model_name_or_path"),S9t.forEach(t),gIr=r(bA,":"),bA.forEach(t),hIr=i(Yl),Pe=n(Yl,"UL",{});var ze=s(Pe);e0=n(ze,"LI",{});var VNe=s(e0);z7e=n(VNe,"STRONG",{});var R9t=s(z7e);pIr=r(R9t,"bart"),R9t.forEach(t),_Ir=r(VNe," \u2014 "),bK=n(VNe,"A",{href:!0});var P9t=s(bK);uIr=r(P9t,"FlaxBartForConditionalGeneration"),P9t.forEach(t),bIr=r(VNe," (BART model)"),VNe.forEach(t),vIr=i(ze),o0=n(ze,"LI",{});var XNe=s(o0);W7e=n(XNe,"STRONG",{});var B9t=s(W7e);FIr=r(B9t,"blenderbot"),B9t.forEach(t),TIr=r(XNe," \u2014 "),vK=n(XNe,"A",{href:!0});var I9t=s(vK);MIr=r(I9t,"FlaxBlenderbotForConditionalGeneration"),I9t.forEach(t),EIr=r(XNe," (Blenderbot model)"),XNe.forEach(t),CIr=i(ze),r0=n(ze,"LI",{});var zNe=s(r0);Q7e=n(zNe,"STRONG",{});var N9t=s(Q7e);wIr=r(N9t,"blenderbot-small"),N9t.forEach(t),AIr=r(zNe," \u2014 "),FK=n(zNe,"A",{href:!0});var q9t=s(FK);yIr=r(q9t,"FlaxBlenderbotSmallForConditionalGeneration"),q9t.forEach(t),LIr=r(zNe," (BlenderbotSmall model)"),zNe.forEach(t),xIr=i(ze),t0=n(ze,"LI",{});var WNe=s(t0);H7e=n(WNe,"STRONG",{});var j9t=s(H7e);$Ir=r(j9t,"encoder-decoder"),j9t.forEach(t),kIr=r(WNe," \u2014 "),TK=n(WNe,"A",{href:!0});var D9t=s(TK);SIr=r(D9t,"FlaxEncoderDecoderModel"),D9t.forEach(t),RIr=r(WNe," (Encoder decoder model)"),WNe.forEach(t),PIr=i(ze),a0=n(ze,"LI",{});var QNe=s(a0);U7e=n(QNe,"STRONG",{});var G9t=s(U7e);BIr=r(G9t,"marian"),G9t.forEach(t),IIr=r(QNe," \u2014 "),MK=n(QNe,"A",{href:!0});var O9t=s(MK);NIr=r(O9t,"FlaxMarianMTModel"),O9t.forEach(t),qIr=r(QNe," (Marian model)"),QNe.forEach(t),jIr=i(ze),n0=n(ze,"LI",{});var HNe=s(n0);J7e=n(HNe,"STRONG",{});var V9t=s(J7e);DIr=r(V9t,"mbart"),V9t.forEach(t),GIr=r(HNe," \u2014 "),EK=n(HNe,"A",{href:!0});var X9t=s(EK);OIr=r(X9t,"FlaxMBartForConditionalGeneration"),X9t.forEach(t),VIr=r(HNe," (mBART model)"),HNe.forEach(t),XIr=i(ze),s0=n(ze,"LI",{});var UNe=s(s0);Y7e=n(UNe,"STRONG",{});var z9t=s(Y7e);zIr=r(z9t,"mt5"),z9t.forEach(t),WIr=r(UNe," \u2014 "),CK=n(UNe,"A",{href:!0});var W9t=s(CK);QIr=r(W9t,"FlaxMT5ForConditionalGeneration"),W9t.forEach(t),HIr=r(UNe," (mT5 model)"),UNe.forEach(t),UIr=i(ze),l0=n(ze,"LI",{});var JNe=s(l0);K7e=n(JNe,"STRONG",{});var Q9t=s(K7e);JIr=r(Q9t,"pegasus"),Q9t.forEach(t),YIr=r(JNe," \u2014 "),wK=n(JNe,"A",{href:!0});var H9t=s(wK);KIr=r(H9t,"FlaxPegasusForConditionalGeneration"),H9t.forEach(t),ZIr=r(JNe," (Pegasus model)"),JNe.forEach(t),eNr=i(ze),i0=n(ze,"LI",{});var YNe=s(i0);Z7e=n(YNe,"STRONG",{});var U9t=s(Z7e);oNr=r(U9t,"t5"),U9t.forEach(t),rNr=r(YNe," \u2014 "),AK=n(YNe,"A",{href:!0});var J9t=s(AK);tNr=r(J9t,"FlaxT5ForConditionalGeneration"),J9t.forEach(t),aNr=r(YNe," (T5 model)"),YNe.forEach(t),ze.forEach(t),nNr=i(Yl),T(d0.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),yDe=i(f),zc=n(f,"H2",{class:!0});var POe=s(zc);c0=n(POe,"A",{id:!0,class:!0,href:!0});var Y9t=s(c0);eMe=n(Y9t,"SPAN",{});var K9t=s(eMe);T(sx.$$.fragment,K9t),K9t.forEach(t),Y9t.forEach(t),sNr=i(POe),oMe=n(POe,"SPAN",{});var Z9t=s(oMe);lNr=r(Z9t,"FlaxAutoModelForSequenceClassification"),Z9t.forEach(t),POe.forEach(t),LDe=i(f),_r=n(f,"DIV",{class:!0});var Kl=s(_r);T(lx.$$.fragment,Kl),iNr=i(Kl),Wc=n(Kl,"P",{});var moe=s(Wc);dNr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yK=n(moe,"A",{href:!0});var ext=s(yK);cNr=r(ext,"from_pretrained()"),ext.forEach(t),fNr=r(moe," class method or the "),LK=n(moe,"A",{href:!0});var oxt=s(LK);mNr=r(oxt,"from_config()"),oxt.forEach(t),gNr=r(moe,` class
method.`),moe.forEach(t),hNr=i(Kl),ix=n(Kl,"P",{});var BOe=s(ix);pNr=r(BOe,"This class cannot be instantiated directly using "),rMe=n(BOe,"CODE",{});var rxt=s(rMe);_Nr=r(rxt,"__init__()"),rxt.forEach(t),uNr=r(BOe," (throws an error)."),BOe.forEach(t),bNr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var vA=s(Qt);T(dx.$$.fragment,vA),vNr=i(vA),tMe=n(vA,"P",{});var txt=s(tMe);FNr=r(txt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),txt.forEach(t),TNr=i(vA),Qc=n(vA,"P",{});var goe=s(Qc);MNr=r(goe,`Note:
Loading a model from its configuration file does `),aMe=n(goe,"STRONG",{});var axt=s(aMe);ENr=r(axt,"not"),axt.forEach(t),CNr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=n(goe,"A",{href:!0});var nxt=s(xK);wNr=r(nxt,"from_pretrained()"),nxt.forEach(t),ANr=r(goe," to load the model weights."),goe.forEach(t),yNr=i(vA),T(f0.$$.fragment,vA),vA.forEach(t),LNr=i(Kl),Xr=n(Kl,"DIV",{class:!0});var Zl=s(Xr);T(cx.$$.fragment,Zl),xNr=i(Zl),nMe=n(Zl,"P",{});var sxt=s(nMe);$Nr=r(sxt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),sxt.forEach(t),kNr=i(Zl),vn=n(Zl,"P",{});var FA=s(vn);SNr=r(FA,"The model class to instantiate is selected based on the "),sMe=n(FA,"CODE",{});var lxt=s(sMe);RNr=r(lxt,"model_type"),lxt.forEach(t),PNr=r(FA,` property of the config object (either
passed as an argument or loaded from `),lMe=n(FA,"CODE",{});var ixt=s(lMe);BNr=r(ixt,"pretrained_model_name_or_path"),ixt.forEach(t),INr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=n(FA,"CODE",{});var dxt=s(iMe);NNr=r(dxt,"pretrained_model_name_or_path"),dxt.forEach(t),qNr=r(FA,":"),FA.forEach(t),jNr=i(Zl),$e=n(Zl,"UL",{});var qe=s($e);m0=n(qe,"LI",{});var KNe=s(m0);dMe=n(KNe,"STRONG",{});var cxt=s(dMe);DNr=r(cxt,"albert"),cxt.forEach(t),GNr=r(KNe," \u2014 "),$K=n(KNe,"A",{href:!0});var fxt=s($K);ONr=r(fxt,"FlaxAlbertForSequenceClassification"),fxt.forEach(t),VNr=r(KNe," (ALBERT model)"),KNe.forEach(t),XNr=i(qe),g0=n(qe,"LI",{});var ZNe=s(g0);cMe=n(ZNe,"STRONG",{});var mxt=s(cMe);zNr=r(mxt,"bart"),mxt.forEach(t),WNr=r(ZNe," \u2014 "),kK=n(ZNe,"A",{href:!0});var gxt=s(kK);QNr=r(gxt,"FlaxBartForSequenceClassification"),gxt.forEach(t),HNr=r(ZNe," (BART model)"),ZNe.forEach(t),UNr=i(qe),h0=n(qe,"LI",{});var eqe=s(h0);fMe=n(eqe,"STRONG",{});var hxt=s(fMe);JNr=r(hxt,"bert"),hxt.forEach(t),YNr=r(eqe," \u2014 "),SK=n(eqe,"A",{href:!0});var pxt=s(SK);KNr=r(pxt,"FlaxBertForSequenceClassification"),pxt.forEach(t),ZNr=r(eqe," (BERT model)"),eqe.forEach(t),eqr=i(qe),p0=n(qe,"LI",{});var oqe=s(p0);mMe=n(oqe,"STRONG",{});var _xt=s(mMe);oqr=r(_xt,"big_bird"),_xt.forEach(t),rqr=r(oqe," \u2014 "),RK=n(oqe,"A",{href:!0});var uxt=s(RK);tqr=r(uxt,"FlaxBigBirdForSequenceClassification"),uxt.forEach(t),aqr=r(oqe," (BigBird model)"),oqe.forEach(t),nqr=i(qe),_0=n(qe,"LI",{});var rqe=s(_0);gMe=n(rqe,"STRONG",{});var bxt=s(gMe);sqr=r(bxt,"distilbert"),bxt.forEach(t),lqr=r(rqe," \u2014 "),PK=n(rqe,"A",{href:!0});var vxt=s(PK);iqr=r(vxt,"FlaxDistilBertForSequenceClassification"),vxt.forEach(t),dqr=r(rqe," (DistilBERT model)"),rqe.forEach(t),cqr=i(qe),u0=n(qe,"LI",{});var tqe=s(u0);hMe=n(tqe,"STRONG",{});var Fxt=s(hMe);fqr=r(Fxt,"electra"),Fxt.forEach(t),mqr=r(tqe," \u2014 "),BK=n(tqe,"A",{href:!0});var Txt=s(BK);gqr=r(Txt,"FlaxElectraForSequenceClassification"),Txt.forEach(t),hqr=r(tqe," (ELECTRA model)"),tqe.forEach(t),pqr=i(qe),b0=n(qe,"LI",{});var aqe=s(b0);pMe=n(aqe,"STRONG",{});var Mxt=s(pMe);_qr=r(Mxt,"mbart"),Mxt.forEach(t),uqr=r(aqe," \u2014 "),IK=n(aqe,"A",{href:!0});var Ext=s(IK);bqr=r(Ext,"FlaxMBartForSequenceClassification"),Ext.forEach(t),vqr=r(aqe," (mBART model)"),aqe.forEach(t),Fqr=i(qe),v0=n(qe,"LI",{});var nqe=s(v0);_Me=n(nqe,"STRONG",{});var Cxt=s(_Me);Tqr=r(Cxt,"roberta"),Cxt.forEach(t),Mqr=r(nqe," \u2014 "),NK=n(nqe,"A",{href:!0});var wxt=s(NK);Eqr=r(wxt,"FlaxRobertaForSequenceClassification"),wxt.forEach(t),Cqr=r(nqe," (RoBERTa model)"),nqe.forEach(t),wqr=i(qe),F0=n(qe,"LI",{});var sqe=s(F0);uMe=n(sqe,"STRONG",{});var Axt=s(uMe);Aqr=r(Axt,"roformer"),Axt.forEach(t),yqr=r(sqe," \u2014 "),qK=n(sqe,"A",{href:!0});var yxt=s(qK);Lqr=r(yxt,"FlaxRoFormerForSequenceClassification"),yxt.forEach(t),xqr=r(sqe," (RoFormer model)"),sqe.forEach(t),$qr=i(qe),T0=n(qe,"LI",{});var lqe=s(T0);bMe=n(lqe,"STRONG",{});var Lxt=s(bMe);kqr=r(Lxt,"xlm-roberta"),Lxt.forEach(t),Sqr=r(lqe," \u2014 "),jK=n(lqe,"A",{href:!0});var xxt=s(jK);Rqr=r(xxt,"FlaxXLMRobertaForSequenceClassification"),xxt.forEach(t),Pqr=r(lqe," (XLM-RoBERTa model)"),lqe.forEach(t),qe.forEach(t),Bqr=i(Zl),T(M0.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),xDe=i(f),Hc=n(f,"H2",{class:!0});var IOe=s(Hc);E0=n(IOe,"A",{id:!0,class:!0,href:!0});var $xt=s(E0);vMe=n($xt,"SPAN",{});var kxt=s(vMe);T(fx.$$.fragment,kxt),kxt.forEach(t),$xt.forEach(t),Iqr=i(IOe),FMe=n(IOe,"SPAN",{});var Sxt=s(FMe);Nqr=r(Sxt,"FlaxAutoModelForQuestionAnswering"),Sxt.forEach(t),IOe.forEach(t),$De=i(f),ur=n(f,"DIV",{class:!0});var ei=s(ur);T(mx.$$.fragment,ei),qqr=i(ei),Uc=n(ei,"P",{});var hoe=s(Uc);jqr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DK=n(hoe,"A",{href:!0});var Rxt=s(DK);Dqr=r(Rxt,"from_pretrained()"),Rxt.forEach(t),Gqr=r(hoe," class method or the "),GK=n(hoe,"A",{href:!0});var Pxt=s(GK);Oqr=r(Pxt,"from_config()"),Pxt.forEach(t),Vqr=r(hoe,` class
method.`),hoe.forEach(t),Xqr=i(ei),gx=n(ei,"P",{});var NOe=s(gx);zqr=r(NOe,"This class cannot be instantiated directly using "),TMe=n(NOe,"CODE",{});var Bxt=s(TMe);Wqr=r(Bxt,"__init__()"),Bxt.forEach(t),Qqr=r(NOe," (throws an error)."),NOe.forEach(t),Hqr=i(ei),Ht=n(ei,"DIV",{class:!0});var TA=s(Ht);T(hx.$$.fragment,TA),Uqr=i(TA),MMe=n(TA,"P",{});var Ixt=s(MMe);Jqr=r(Ixt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ixt.forEach(t),Yqr=i(TA),Jc=n(TA,"P",{});var poe=s(Jc);Kqr=r(poe,`Note:
Loading a model from its configuration file does `),EMe=n(poe,"STRONG",{});var Nxt=s(EMe);Zqr=r(Nxt,"not"),Nxt.forEach(t),ejr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(poe,"A",{href:!0});var qxt=s(OK);ojr=r(qxt,"from_pretrained()"),qxt.forEach(t),rjr=r(poe," to load the model weights."),poe.forEach(t),tjr=i(TA),T(C0.$$.fragment,TA),TA.forEach(t),ajr=i(ei),zr=n(ei,"DIV",{class:!0});var oi=s(zr);T(px.$$.fragment,oi),njr=i(oi),CMe=n(oi,"P",{});var jxt=s(CMe);sjr=r(jxt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jxt.forEach(t),ljr=i(oi),Fn=n(oi,"P",{});var MA=s(Fn);ijr=r(MA,"The model class to instantiate is selected based on the "),wMe=n(MA,"CODE",{});var Dxt=s(wMe);djr=r(Dxt,"model_type"),Dxt.forEach(t),cjr=r(MA,` property of the config object (either
passed as an argument or loaded from `),AMe=n(MA,"CODE",{});var Gxt=s(AMe);fjr=r(Gxt,"pretrained_model_name_or_path"),Gxt.forEach(t),mjr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yMe=n(MA,"CODE",{});var Oxt=s(yMe);gjr=r(Oxt,"pretrained_model_name_or_path"),Oxt.forEach(t),hjr=r(MA,":"),MA.forEach(t),pjr=i(oi),ke=n(oi,"UL",{});var je=s(ke);w0=n(je,"LI",{});var iqe=s(w0);LMe=n(iqe,"STRONG",{});var Vxt=s(LMe);_jr=r(Vxt,"albert"),Vxt.forEach(t),ujr=r(iqe," \u2014 "),VK=n(iqe,"A",{href:!0});var Xxt=s(VK);bjr=r(Xxt,"FlaxAlbertForQuestionAnswering"),Xxt.forEach(t),vjr=r(iqe," (ALBERT model)"),iqe.forEach(t),Fjr=i(je),A0=n(je,"LI",{});var dqe=s(A0);xMe=n(dqe,"STRONG",{});var zxt=s(xMe);Tjr=r(zxt,"bart"),zxt.forEach(t),Mjr=r(dqe," \u2014 "),XK=n(dqe,"A",{href:!0});var Wxt=s(XK);Ejr=r(Wxt,"FlaxBartForQuestionAnswering"),Wxt.forEach(t),Cjr=r(dqe," (BART model)"),dqe.forEach(t),wjr=i(je),y0=n(je,"LI",{});var cqe=s(y0);$Me=n(cqe,"STRONG",{});var Qxt=s($Me);Ajr=r(Qxt,"bert"),Qxt.forEach(t),yjr=r(cqe," \u2014 "),zK=n(cqe,"A",{href:!0});var Hxt=s(zK);Ljr=r(Hxt,"FlaxBertForQuestionAnswering"),Hxt.forEach(t),xjr=r(cqe," (BERT model)"),cqe.forEach(t),$jr=i(je),L0=n(je,"LI",{});var fqe=s(L0);kMe=n(fqe,"STRONG",{});var Uxt=s(kMe);kjr=r(Uxt,"big_bird"),Uxt.forEach(t),Sjr=r(fqe," \u2014 "),WK=n(fqe,"A",{href:!0});var Jxt=s(WK);Rjr=r(Jxt,"FlaxBigBirdForQuestionAnswering"),Jxt.forEach(t),Pjr=r(fqe," (BigBird model)"),fqe.forEach(t),Bjr=i(je),x0=n(je,"LI",{});var mqe=s(x0);SMe=n(mqe,"STRONG",{});var Yxt=s(SMe);Ijr=r(Yxt,"distilbert"),Yxt.forEach(t),Njr=r(mqe," \u2014 "),QK=n(mqe,"A",{href:!0});var Kxt=s(QK);qjr=r(Kxt,"FlaxDistilBertForQuestionAnswering"),Kxt.forEach(t),jjr=r(mqe," (DistilBERT model)"),mqe.forEach(t),Djr=i(je),$0=n(je,"LI",{});var gqe=s($0);RMe=n(gqe,"STRONG",{});var Zxt=s(RMe);Gjr=r(Zxt,"electra"),Zxt.forEach(t),Ojr=r(gqe," \u2014 "),HK=n(gqe,"A",{href:!0});var e$t=s(HK);Vjr=r(e$t,"FlaxElectraForQuestionAnswering"),e$t.forEach(t),Xjr=r(gqe," (ELECTRA model)"),gqe.forEach(t),zjr=i(je),k0=n(je,"LI",{});var hqe=s(k0);PMe=n(hqe,"STRONG",{});var o$t=s(PMe);Wjr=r(o$t,"mbart"),o$t.forEach(t),Qjr=r(hqe," \u2014 "),UK=n(hqe,"A",{href:!0});var r$t=s(UK);Hjr=r(r$t,"FlaxMBartForQuestionAnswering"),r$t.forEach(t),Ujr=r(hqe," (mBART model)"),hqe.forEach(t),Jjr=i(je),S0=n(je,"LI",{});var pqe=s(S0);BMe=n(pqe,"STRONG",{});var t$t=s(BMe);Yjr=r(t$t,"roberta"),t$t.forEach(t),Kjr=r(pqe," \u2014 "),JK=n(pqe,"A",{href:!0});var a$t=s(JK);Zjr=r(a$t,"FlaxRobertaForQuestionAnswering"),a$t.forEach(t),eDr=r(pqe," (RoBERTa model)"),pqe.forEach(t),oDr=i(je),R0=n(je,"LI",{});var _qe=s(R0);IMe=n(_qe,"STRONG",{});var n$t=s(IMe);rDr=r(n$t,"roformer"),n$t.forEach(t),tDr=r(_qe," \u2014 "),YK=n(_qe,"A",{href:!0});var s$t=s(YK);aDr=r(s$t,"FlaxRoFormerForQuestionAnswering"),s$t.forEach(t),nDr=r(_qe," (RoFormer model)"),_qe.forEach(t),sDr=i(je),P0=n(je,"LI",{});var uqe=s(P0);NMe=n(uqe,"STRONG",{});var l$t=s(NMe);lDr=r(l$t,"xlm-roberta"),l$t.forEach(t),iDr=r(uqe," \u2014 "),KK=n(uqe,"A",{href:!0});var i$t=s(KK);dDr=r(i$t,"FlaxXLMRobertaForQuestionAnswering"),i$t.forEach(t),cDr=r(uqe," (XLM-RoBERTa model)"),uqe.forEach(t),je.forEach(t),fDr=i(oi),T(B0.$$.fragment,oi),oi.forEach(t),ei.forEach(t),kDe=i(f),Yc=n(f,"H2",{class:!0});var qOe=s(Yc);I0=n(qOe,"A",{id:!0,class:!0,href:!0});var d$t=s(I0);qMe=n(d$t,"SPAN",{});var c$t=s(qMe);T(_x.$$.fragment,c$t),c$t.forEach(t),d$t.forEach(t),mDr=i(qOe),jMe=n(qOe,"SPAN",{});var f$t=s(jMe);gDr=r(f$t,"FlaxAutoModelForTokenClassification"),f$t.forEach(t),qOe.forEach(t),SDe=i(f),br=n(f,"DIV",{class:!0});var ri=s(br);T(ux.$$.fragment,ri),hDr=i(ri),Kc=n(ri,"P",{});var _oe=s(Kc);pDr=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZK=n(_oe,"A",{href:!0});var m$t=s(ZK);_Dr=r(m$t,"from_pretrained()"),m$t.forEach(t),uDr=r(_oe," class method or the "),eZ=n(_oe,"A",{href:!0});var g$t=s(eZ);bDr=r(g$t,"from_config()"),g$t.forEach(t),vDr=r(_oe,` class
method.`),_oe.forEach(t),FDr=i(ri),bx=n(ri,"P",{});var jOe=s(bx);TDr=r(jOe,"This class cannot be instantiated directly using "),DMe=n(jOe,"CODE",{});var h$t=s(DMe);MDr=r(h$t,"__init__()"),h$t.forEach(t),EDr=r(jOe," (throws an error)."),jOe.forEach(t),CDr=i(ri),Ut=n(ri,"DIV",{class:!0});var EA=s(Ut);T(vx.$$.fragment,EA),wDr=i(EA),GMe=n(EA,"P",{});var p$t=s(GMe);ADr=r(p$t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),p$t.forEach(t),yDr=i(EA),Zc=n(EA,"P",{});var uoe=s(Zc);LDr=r(uoe,`Note:
Loading a model from its configuration file does `),OMe=n(uoe,"STRONG",{});var _$t=s(OMe);xDr=r(_$t,"not"),_$t.forEach(t),$Dr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oZ=n(uoe,"A",{href:!0});var u$t=s(oZ);kDr=r(u$t,"from_pretrained()"),u$t.forEach(t),SDr=r(uoe," to load the model weights."),uoe.forEach(t),RDr=i(EA),T(N0.$$.fragment,EA),EA.forEach(t),PDr=i(ri),Wr=n(ri,"DIV",{class:!0});var ti=s(Wr);T(Fx.$$.fragment,ti),BDr=i(ti),VMe=n(ti,"P",{});var b$t=s(VMe);IDr=r(b$t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),b$t.forEach(t),NDr=i(ti),Tn=n(ti,"P",{});var CA=s(Tn);qDr=r(CA,"The model class to instantiate is selected based on the "),XMe=n(CA,"CODE",{});var v$t=s(XMe);jDr=r(v$t,"model_type"),v$t.forEach(t),DDr=r(CA,` property of the config object (either
passed as an argument or loaded from `),zMe=n(CA,"CODE",{});var F$t=s(zMe);GDr=r(F$t,"pretrained_model_name_or_path"),F$t.forEach(t),ODr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WMe=n(CA,"CODE",{});var T$t=s(WMe);VDr=r(T$t,"pretrained_model_name_or_path"),T$t.forEach(t),XDr=r(CA,":"),CA.forEach(t),zDr=i(ti),Ge=n(ti,"UL",{});var Fo=s(Ge);q0=n(Fo,"LI",{});var bqe=s(q0);QMe=n(bqe,"STRONG",{});var M$t=s(QMe);WDr=r(M$t,"albert"),M$t.forEach(t),QDr=r(bqe," \u2014 "),rZ=n(bqe,"A",{href:!0});var E$t=s(rZ);HDr=r(E$t,"FlaxAlbertForTokenClassification"),E$t.forEach(t),UDr=r(bqe," (ALBERT model)"),bqe.forEach(t),JDr=i(Fo),j0=n(Fo,"LI",{});var vqe=s(j0);HMe=n(vqe,"STRONG",{});var C$t=s(HMe);YDr=r(C$t,"bert"),C$t.forEach(t),KDr=r(vqe," \u2014 "),tZ=n(vqe,"A",{href:!0});var w$t=s(tZ);ZDr=r(w$t,"FlaxBertForTokenClassification"),w$t.forEach(t),eGr=r(vqe," (BERT model)"),vqe.forEach(t),oGr=i(Fo),D0=n(Fo,"LI",{});var Fqe=s(D0);UMe=n(Fqe,"STRONG",{});var A$t=s(UMe);rGr=r(A$t,"big_bird"),A$t.forEach(t),tGr=r(Fqe," \u2014 "),aZ=n(Fqe,"A",{href:!0});var y$t=s(aZ);aGr=r(y$t,"FlaxBigBirdForTokenClassification"),y$t.forEach(t),nGr=r(Fqe," (BigBird model)"),Fqe.forEach(t),sGr=i(Fo),G0=n(Fo,"LI",{});var Tqe=s(G0);JMe=n(Tqe,"STRONG",{});var L$t=s(JMe);lGr=r(L$t,"distilbert"),L$t.forEach(t),iGr=r(Tqe," \u2014 "),nZ=n(Tqe,"A",{href:!0});var x$t=s(nZ);dGr=r(x$t,"FlaxDistilBertForTokenClassification"),x$t.forEach(t),cGr=r(Tqe," (DistilBERT model)"),Tqe.forEach(t),fGr=i(Fo),O0=n(Fo,"LI",{});var Mqe=s(O0);YMe=n(Mqe,"STRONG",{});var $$t=s(YMe);mGr=r($$t,"electra"),$$t.forEach(t),gGr=r(Mqe," \u2014 "),sZ=n(Mqe,"A",{href:!0});var k$t=s(sZ);hGr=r(k$t,"FlaxElectraForTokenClassification"),k$t.forEach(t),pGr=r(Mqe," (ELECTRA model)"),Mqe.forEach(t),_Gr=i(Fo),V0=n(Fo,"LI",{});var Eqe=s(V0);KMe=n(Eqe,"STRONG",{});var S$t=s(KMe);uGr=r(S$t,"roberta"),S$t.forEach(t),bGr=r(Eqe," \u2014 "),lZ=n(Eqe,"A",{href:!0});var R$t=s(lZ);vGr=r(R$t,"FlaxRobertaForTokenClassification"),R$t.forEach(t),FGr=r(Eqe," (RoBERTa model)"),Eqe.forEach(t),TGr=i(Fo),X0=n(Fo,"LI",{});var Cqe=s(X0);ZMe=n(Cqe,"STRONG",{});var P$t=s(ZMe);MGr=r(P$t,"roformer"),P$t.forEach(t),EGr=r(Cqe," \u2014 "),iZ=n(Cqe,"A",{href:!0});var B$t=s(iZ);CGr=r(B$t,"FlaxRoFormerForTokenClassification"),B$t.forEach(t),wGr=r(Cqe," (RoFormer model)"),Cqe.forEach(t),AGr=i(Fo),z0=n(Fo,"LI",{});var wqe=s(z0);eEe=n(wqe,"STRONG",{});var I$t=s(eEe);yGr=r(I$t,"xlm-roberta"),I$t.forEach(t),LGr=r(wqe," \u2014 "),dZ=n(wqe,"A",{href:!0});var N$t=s(dZ);xGr=r(N$t,"FlaxXLMRobertaForTokenClassification"),N$t.forEach(t),$Gr=r(wqe," (XLM-RoBERTa model)"),wqe.forEach(t),Fo.forEach(t),kGr=i(ti),T(W0.$$.fragment,ti),ti.forEach(t),ri.forEach(t),RDe=i(f),ef=n(f,"H2",{class:!0});var DOe=s(ef);Q0=n(DOe,"A",{id:!0,class:!0,href:!0});var q$t=s(Q0);oEe=n(q$t,"SPAN",{});var j$t=s(oEe);T(Tx.$$.fragment,j$t),j$t.forEach(t),q$t.forEach(t),SGr=i(DOe),rEe=n(DOe,"SPAN",{});var D$t=s(rEe);RGr=r(D$t,"FlaxAutoModelForMultipleChoice"),D$t.forEach(t),DOe.forEach(t),PDe=i(f),vr=n(f,"DIV",{class:!0});var ai=s(vr);T(Mx.$$.fragment,ai),PGr=i(ai),of=n(ai,"P",{});var boe=s(of);BGr=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cZ=n(boe,"A",{href:!0});var G$t=s(cZ);IGr=r(G$t,"from_pretrained()"),G$t.forEach(t),NGr=r(boe," class method or the "),fZ=n(boe,"A",{href:!0});var O$t=s(fZ);qGr=r(O$t,"from_config()"),O$t.forEach(t),jGr=r(boe,` class
method.`),boe.forEach(t),DGr=i(ai),Ex=n(ai,"P",{});var GOe=s(Ex);GGr=r(GOe,"This class cannot be instantiated directly using "),tEe=n(GOe,"CODE",{});var V$t=s(tEe);OGr=r(V$t,"__init__()"),V$t.forEach(t),VGr=r(GOe," (throws an error)."),GOe.forEach(t),XGr=i(ai),Jt=n(ai,"DIV",{class:!0});var wA=s(Jt);T(Cx.$$.fragment,wA),zGr=i(wA),aEe=n(wA,"P",{});var X$t=s(aEe);WGr=r(X$t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),X$t.forEach(t),QGr=i(wA),rf=n(wA,"P",{});var voe=s(rf);HGr=r(voe,`Note:
Loading a model from its configuration file does `),nEe=n(voe,"STRONG",{});var z$t=s(nEe);UGr=r(z$t,"not"),z$t.forEach(t),JGr=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=n(voe,"A",{href:!0});var W$t=s(mZ);YGr=r(W$t,"from_pretrained()"),W$t.forEach(t),KGr=r(voe," to load the model weights."),voe.forEach(t),ZGr=i(wA),T(H0.$$.fragment,wA),wA.forEach(t),eOr=i(ai),Qr=n(ai,"DIV",{class:!0});var ni=s(Qr);T(wx.$$.fragment,ni),oOr=i(ni),sEe=n(ni,"P",{});var Q$t=s(sEe);rOr=r(Q$t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Q$t.forEach(t),tOr=i(ni),Mn=n(ni,"P",{});var AA=s(Mn);aOr=r(AA,"The model class to instantiate is selected based on the "),lEe=n(AA,"CODE",{});var H$t=s(lEe);nOr=r(H$t,"model_type"),H$t.forEach(t),sOr=r(AA,` property of the config object (either
passed as an argument or loaded from `),iEe=n(AA,"CODE",{});var U$t=s(iEe);lOr=r(U$t,"pretrained_model_name_or_path"),U$t.forEach(t),iOr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=n(AA,"CODE",{});var J$t=s(dEe);dOr=r(J$t,"pretrained_model_name_or_path"),J$t.forEach(t),cOr=r(AA,":"),AA.forEach(t),fOr=i(ni),Oe=n(ni,"UL",{});var To=s(Oe);U0=n(To,"LI",{});var Aqe=s(U0);cEe=n(Aqe,"STRONG",{});var Y$t=s(cEe);mOr=r(Y$t,"albert"),Y$t.forEach(t),gOr=r(Aqe," \u2014 "),gZ=n(Aqe,"A",{href:!0});var K$t=s(gZ);hOr=r(K$t,"FlaxAlbertForMultipleChoice"),K$t.forEach(t),pOr=r(Aqe," (ALBERT model)"),Aqe.forEach(t),_Or=i(To),J0=n(To,"LI",{});var yqe=s(J0);fEe=n(yqe,"STRONG",{});var Z$t=s(fEe);uOr=r(Z$t,"bert"),Z$t.forEach(t),bOr=r(yqe," \u2014 "),hZ=n(yqe,"A",{href:!0});var ekt=s(hZ);vOr=r(ekt,"FlaxBertForMultipleChoice"),ekt.forEach(t),FOr=r(yqe," (BERT model)"),yqe.forEach(t),TOr=i(To),Y0=n(To,"LI",{});var Lqe=s(Y0);mEe=n(Lqe,"STRONG",{});var okt=s(mEe);MOr=r(okt,"big_bird"),okt.forEach(t),EOr=r(Lqe," \u2014 "),pZ=n(Lqe,"A",{href:!0});var rkt=s(pZ);COr=r(rkt,"FlaxBigBirdForMultipleChoice"),rkt.forEach(t),wOr=r(Lqe," (BigBird model)"),Lqe.forEach(t),AOr=i(To),K0=n(To,"LI",{});var xqe=s(K0);gEe=n(xqe,"STRONG",{});var tkt=s(gEe);yOr=r(tkt,"distilbert"),tkt.forEach(t),LOr=r(xqe," \u2014 "),_Z=n(xqe,"A",{href:!0});var akt=s(_Z);xOr=r(akt,"FlaxDistilBertForMultipleChoice"),akt.forEach(t),$Or=r(xqe," (DistilBERT model)"),xqe.forEach(t),kOr=i(To),Z0=n(To,"LI",{});var $qe=s(Z0);hEe=n($qe,"STRONG",{});var nkt=s(hEe);SOr=r(nkt,"electra"),nkt.forEach(t),ROr=r($qe," \u2014 "),uZ=n($qe,"A",{href:!0});var skt=s(uZ);POr=r(skt,"FlaxElectraForMultipleChoice"),skt.forEach(t),BOr=r($qe," (ELECTRA model)"),$qe.forEach(t),IOr=i(To),ew=n(To,"LI",{});var kqe=s(ew);pEe=n(kqe,"STRONG",{});var lkt=s(pEe);NOr=r(lkt,"roberta"),lkt.forEach(t),qOr=r(kqe," \u2014 "),bZ=n(kqe,"A",{href:!0});var ikt=s(bZ);jOr=r(ikt,"FlaxRobertaForMultipleChoice"),ikt.forEach(t),DOr=r(kqe," (RoBERTa model)"),kqe.forEach(t),GOr=i(To),ow=n(To,"LI",{});var Sqe=s(ow);_Ee=n(Sqe,"STRONG",{});var dkt=s(_Ee);OOr=r(dkt,"roformer"),dkt.forEach(t),VOr=r(Sqe," \u2014 "),vZ=n(Sqe,"A",{href:!0});var ckt=s(vZ);XOr=r(ckt,"FlaxRoFormerForMultipleChoice"),ckt.forEach(t),zOr=r(Sqe," (RoFormer model)"),Sqe.forEach(t),WOr=i(To),rw=n(To,"LI",{});var Rqe=s(rw);uEe=n(Rqe,"STRONG",{});var fkt=s(uEe);QOr=r(fkt,"xlm-roberta"),fkt.forEach(t),HOr=r(Rqe," \u2014 "),FZ=n(Rqe,"A",{href:!0});var mkt=s(FZ);UOr=r(mkt,"FlaxXLMRobertaForMultipleChoice"),mkt.forEach(t),JOr=r(Rqe," (XLM-RoBERTa model)"),Rqe.forEach(t),To.forEach(t),YOr=i(ni),T(tw.$$.fragment,ni),ni.forEach(t),ai.forEach(t),BDe=i(f),tf=n(f,"H2",{class:!0});var OOe=s(tf);aw=n(OOe,"A",{id:!0,class:!0,href:!0});var gkt=s(aw);bEe=n(gkt,"SPAN",{});var hkt=s(bEe);T(Ax.$$.fragment,hkt),hkt.forEach(t),gkt.forEach(t),KOr=i(OOe),vEe=n(OOe,"SPAN",{});var pkt=s(vEe);ZOr=r(pkt,"FlaxAutoModelForNextSentencePrediction"),pkt.forEach(t),OOe.forEach(t),IDe=i(f),Fr=n(f,"DIV",{class:!0});var si=s(Fr);T(yx.$$.fragment,si),eVr=i(si),af=n(si,"P",{});var Foe=s(af);oVr=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),TZ=n(Foe,"A",{href:!0});var _kt=s(TZ);rVr=r(_kt,"from_pretrained()"),_kt.forEach(t),tVr=r(Foe," class method or the "),MZ=n(Foe,"A",{href:!0});var ukt=s(MZ);aVr=r(ukt,"from_config()"),ukt.forEach(t),nVr=r(Foe,` class
method.`),Foe.forEach(t),sVr=i(si),Lx=n(si,"P",{});var VOe=s(Lx);lVr=r(VOe,"This class cannot be instantiated directly using "),FEe=n(VOe,"CODE",{});var bkt=s(FEe);iVr=r(bkt,"__init__()"),bkt.forEach(t),dVr=r(VOe," (throws an error)."),VOe.forEach(t),cVr=i(si),Yt=n(si,"DIV",{class:!0});var yA=s(Yt);T(xx.$$.fragment,yA),fVr=i(yA),TEe=n(yA,"P",{});var vkt=s(TEe);mVr=r(vkt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vkt.forEach(t),gVr=i(yA),nf=n(yA,"P",{});var Toe=s(nf);hVr=r(Toe,`Note:
Loading a model from its configuration file does `),MEe=n(Toe,"STRONG",{});var Fkt=s(MEe);pVr=r(Fkt,"not"),Fkt.forEach(t),_Vr=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=n(Toe,"A",{href:!0});var Tkt=s(EZ);uVr=r(Tkt,"from_pretrained()"),Tkt.forEach(t),bVr=r(Toe," to load the model weights."),Toe.forEach(t),vVr=i(yA),T(nw.$$.fragment,yA),yA.forEach(t),FVr=i(si),Hr=n(si,"DIV",{class:!0});var li=s(Hr);T($x.$$.fragment,li),TVr=i(li),EEe=n(li,"P",{});var Mkt=s(EEe);MVr=r(Mkt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Mkt.forEach(t),EVr=i(li),En=n(li,"P",{});var LA=s(En);CVr=r(LA,"The model class to instantiate is selected based on the "),CEe=n(LA,"CODE",{});var Ekt=s(CEe);wVr=r(Ekt,"model_type"),Ekt.forEach(t),AVr=r(LA,` property of the config object (either
passed as an argument or loaded from `),wEe=n(LA,"CODE",{});var Ckt=s(wEe);yVr=r(Ckt,"pretrained_model_name_or_path"),Ckt.forEach(t),LVr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AEe=n(LA,"CODE",{});var wkt=s(AEe);xVr=r(wkt,"pretrained_model_name_or_path"),wkt.forEach(t),$Vr=r(LA,":"),LA.forEach(t),kVr=i(li),yEe=n(li,"UL",{});var Akt=s(yEe);sw=n(Akt,"LI",{});var Pqe=s(sw);LEe=n(Pqe,"STRONG",{});var ykt=s(LEe);SVr=r(ykt,"bert"),ykt.forEach(t),RVr=r(Pqe," \u2014 "),CZ=n(Pqe,"A",{href:!0});var Lkt=s(CZ);PVr=r(Lkt,"FlaxBertForNextSentencePrediction"),Lkt.forEach(t),BVr=r(Pqe," (BERT model)"),Pqe.forEach(t),Akt.forEach(t),IVr=i(li),T(lw.$$.fragment,li),li.forEach(t),si.forEach(t),NDe=i(f),sf=n(f,"H2",{class:!0});var XOe=s(sf);iw=n(XOe,"A",{id:!0,class:!0,href:!0});var xkt=s(iw);xEe=n(xkt,"SPAN",{});var $kt=s(xEe);T(kx.$$.fragment,$kt),$kt.forEach(t),xkt.forEach(t),NVr=i(XOe),$Ee=n(XOe,"SPAN",{});var kkt=s($Ee);qVr=r(kkt,"FlaxAutoModelForImageClassification"),kkt.forEach(t),XOe.forEach(t),qDe=i(f),Tr=n(f,"DIV",{class:!0});var ii=s(Tr);T(Sx.$$.fragment,ii),jVr=i(ii),lf=n(ii,"P",{});var Moe=s(lf);DVr=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wZ=n(Moe,"A",{href:!0});var Skt=s(wZ);GVr=r(Skt,"from_pretrained()"),Skt.forEach(t),OVr=r(Moe," class method or the "),AZ=n(Moe,"A",{href:!0});var Rkt=s(AZ);VVr=r(Rkt,"from_config()"),Rkt.forEach(t),XVr=r(Moe,` class
method.`),Moe.forEach(t),zVr=i(ii),Rx=n(ii,"P",{});var zOe=s(Rx);WVr=r(zOe,"This class cannot be instantiated directly using "),kEe=n(zOe,"CODE",{});var Pkt=s(kEe);QVr=r(Pkt,"__init__()"),Pkt.forEach(t),HVr=r(zOe," (throws an error)."),zOe.forEach(t),UVr=i(ii),Kt=n(ii,"DIV",{class:!0});var xA=s(Kt);T(Px.$$.fragment,xA),JVr=i(xA),SEe=n(xA,"P",{});var Bkt=s(SEe);YVr=r(Bkt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Bkt.forEach(t),KVr=i(xA),df=n(xA,"P",{});var Eoe=s(df);ZVr=r(Eoe,`Note:
Loading a model from its configuration file does `),REe=n(Eoe,"STRONG",{});var Ikt=s(REe);eXr=r(Ikt,"not"),Ikt.forEach(t),oXr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=n(Eoe,"A",{href:!0});var Nkt=s(yZ);rXr=r(Nkt,"from_pretrained()"),Nkt.forEach(t),tXr=r(Eoe," to load the model weights."),Eoe.forEach(t),aXr=i(xA),T(dw.$$.fragment,xA),xA.forEach(t),nXr=i(ii),Ur=n(ii,"DIV",{class:!0});var di=s(Ur);T(Bx.$$.fragment,di),sXr=i(di),PEe=n(di,"P",{});var qkt=s(PEe);lXr=r(qkt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qkt.forEach(t),iXr=i(di),Cn=n(di,"P",{});var $A=s(Cn);dXr=r($A,"The model class to instantiate is selected based on the "),BEe=n($A,"CODE",{});var jkt=s(BEe);cXr=r(jkt,"model_type"),jkt.forEach(t),fXr=r($A,` property of the config object (either
passed as an argument or loaded from `),IEe=n($A,"CODE",{});var Dkt=s(IEe);mXr=r(Dkt,"pretrained_model_name_or_path"),Dkt.forEach(t),gXr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NEe=n($A,"CODE",{});var Gkt=s(NEe);hXr=r(Gkt,"pretrained_model_name_or_path"),Gkt.forEach(t),pXr=r($A,":"),$A.forEach(t),_Xr=i(di),Ix=n(di,"UL",{});var WOe=s(Ix);cw=n(WOe,"LI",{});var Bqe=s(cw);qEe=n(Bqe,"STRONG",{});var Okt=s(qEe);uXr=r(Okt,"beit"),Okt.forEach(t),bXr=r(Bqe," \u2014 "),LZ=n(Bqe,"A",{href:!0});var Vkt=s(LZ);vXr=r(Vkt,"FlaxBeitForImageClassification"),Vkt.forEach(t),FXr=r(Bqe," (BEiT model)"),Bqe.forEach(t),TXr=i(WOe),fw=n(WOe,"LI",{});var Iqe=s(fw);jEe=n(Iqe,"STRONG",{});var Xkt=s(jEe);MXr=r(Xkt,"vit"),Xkt.forEach(t),EXr=r(Iqe," \u2014 "),xZ=n(Iqe,"A",{href:!0});var zkt=s(xZ);CXr=r(zkt,"FlaxViTForImageClassification"),zkt.forEach(t),wXr=r(Iqe," (ViT model)"),Iqe.forEach(t),WOe.forEach(t),AXr=i(di),T(mw.$$.fragment,di),di.forEach(t),ii.forEach(t),jDe=i(f),cf=n(f,"H2",{class:!0});var QOe=s(cf);gw=n(QOe,"A",{id:!0,class:!0,href:!0});var Wkt=s(gw);DEe=n(Wkt,"SPAN",{});var Qkt=s(DEe);T(Nx.$$.fragment,Qkt),Qkt.forEach(t),Wkt.forEach(t),yXr=i(QOe),GEe=n(QOe,"SPAN",{});var Hkt=s(GEe);LXr=r(Hkt,"FlaxAutoModelForVision2Seq"),Hkt.forEach(t),QOe.forEach(t),DDe=i(f),Mr=n(f,"DIV",{class:!0});var ci=s(Mr);T(qx.$$.fragment,ci),xXr=i(ci),ff=n(ci,"P",{});var Coe=s(ff);$Xr=r(Coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$Z=n(Coe,"A",{href:!0});var Ukt=s($Z);kXr=r(Ukt,"from_pretrained()"),Ukt.forEach(t),SXr=r(Coe," class method or the "),kZ=n(Coe,"A",{href:!0});var Jkt=s(kZ);RXr=r(Jkt,"from_config()"),Jkt.forEach(t),PXr=r(Coe,` class
method.`),Coe.forEach(t),BXr=i(ci),jx=n(ci,"P",{});var HOe=s(jx);IXr=r(HOe,"This class cannot be instantiated directly using "),OEe=n(HOe,"CODE",{});var Ykt=s(OEe);NXr=r(Ykt,"__init__()"),Ykt.forEach(t),qXr=r(HOe," (throws an error)."),HOe.forEach(t),jXr=i(ci),Zt=n(ci,"DIV",{class:!0});var kA=s(Zt);T(Dx.$$.fragment,kA),DXr=i(kA),VEe=n(kA,"P",{});var Kkt=s(VEe);GXr=r(Kkt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Kkt.forEach(t),OXr=i(kA),mf=n(kA,"P",{});var woe=s(mf);VXr=r(woe,`Note:
Loading a model from its configuration file does `),XEe=n(woe,"STRONG",{});var Zkt=s(XEe);XXr=r(Zkt,"not"),Zkt.forEach(t),zXr=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=n(woe,"A",{href:!0});var eSt=s(SZ);WXr=r(eSt,"from_pretrained()"),eSt.forEach(t),QXr=r(woe," to load the model weights."),woe.forEach(t),HXr=i(kA),T(hw.$$.fragment,kA),kA.forEach(t),UXr=i(ci),Jr=n(ci,"DIV",{class:!0});var fi=s(Jr);T(Gx.$$.fragment,fi),JXr=i(fi),zEe=n(fi,"P",{});var oSt=s(zEe);YXr=r(oSt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oSt.forEach(t),KXr=i(fi),wn=n(fi,"P",{});var SA=s(wn);ZXr=r(SA,"The model class to instantiate is selected based on the "),WEe=n(SA,"CODE",{});var rSt=s(WEe);ezr=r(rSt,"model_type"),rSt.forEach(t),ozr=r(SA,` property of the config object (either
passed as an argument or loaded from `),QEe=n(SA,"CODE",{});var tSt=s(QEe);rzr=r(tSt,"pretrained_model_name_or_path"),tSt.forEach(t),tzr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HEe=n(SA,"CODE",{});var aSt=s(HEe);azr=r(aSt,"pretrained_model_name_or_path"),aSt.forEach(t),nzr=r(SA,":"),SA.forEach(t),szr=i(fi),UEe=n(fi,"UL",{});var nSt=s(UEe);pw=n(nSt,"LI",{});var Nqe=s(pw);JEe=n(Nqe,"STRONG",{});var sSt=s(JEe);lzr=r(sSt,"vision-encoder-decoder"),sSt.forEach(t),izr=r(Nqe," \u2014 "),RZ=n(Nqe,"A",{href:!0});var lSt=s(RZ);dzr=r(lSt,"FlaxVisionEncoderDecoderModel"),lSt.forEach(t),czr=r(Nqe," (Vision Encoder decoder model)"),Nqe.forEach(t),nSt.forEach(t),fzr=i(fi),T(_w.$$.fragment,fi),fi.forEach(t),ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(fPt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoTokenizer"),c(bi,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertModel"),c(Ff,"id","extending-the-auto-classes"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#extending-the-auto-classes"),c(vi,"class","relative group"),c(Mf,"id","transformers.AutoConfig"),c(Mf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mf,"href","#transformers.AutoConfig"),c(Fi,"class","relative group"),c(lk,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(ik,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertConfig"),c(dk,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartConfig"),c(ck,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitConfig"),c(fk,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertConfig"),c(mk,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(gk,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdConfig"),c(hk,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(pk,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(_k,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(uk,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertConfig"),c(bk,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineConfig"),c(vk,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPConfig"),c(Fk,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertConfig"),c(Tk,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextConfig"),c(Mk,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLConfig"),c(Ek,"href","/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtConfig"),c(Ck,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(wk,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Ak,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(yk,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaConfig"),c(Lk,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(xk,"href","/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c($k,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTConfig"),c(kk,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrConfig"),c(Sk,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Rk,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRConfig"),c(Pk,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTConfig"),c(Bk,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraConfig"),c(Ik,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Nk,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertConfig"),c(qk,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaConfig"),c(jk,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetConfig"),c(Dk,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTConfig"),c(Gk,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelConfig"),c(Ok,"href","/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNConfig"),c(Vk,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Config"),c(Xk,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(zk,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Wk,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJConfig"),c(Qk,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertConfig"),c(Hk,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertConfig"),c(Uk,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Jk,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Yk,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Kk,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Zk,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDConfig"),c(eS,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerConfig"),c(oS,"href","/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeConfig"),c(rS,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertConfig"),c(tS,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Config"),c(aS,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianConfig"),c(nS,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(sS,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartConfig"),c(lS,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(iS,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(dS,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(cS,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetConfig"),c(fS,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Config"),c(mS,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(gS,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(hS,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTConfig"),c(pS,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusConfig"),c(_S,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverConfig"),c(uS,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartConfig"),c(bS,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(vS,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(FS,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(TS,"href","/docs/transformers/pr_17354/en/model_doc/rag#transformers.RagConfig"),c(MS,"href","/docs/transformers/pr_17354/en/model_doc/realm#transformers.RealmConfig"),c(ES,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerConfig"),c(CS,"href","/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetConfig"),c(wS,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertConfig"),c(AS,"href","/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetConfig"),c(yS,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertConfig"),c(LS,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaConfig"),c(xS,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerConfig"),c($S,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerConfig"),c(kS,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWConfig"),c(SS,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDConfig"),c(RS,"href","/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(PS,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(BS,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(IS,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterConfig"),c(NS,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(qS,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinConfig"),c(jS,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Config"),c(DS,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasConfig"),c(GS,"href","/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(OS,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(VS,"href","/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRConfig"),c(XS,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(zS,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(WS,"href","/docs/transformers/pr_17354/en/model_doc/van#transformers.VanConfig"),c(QS,"href","/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltConfig"),c(HS,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(US,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(JS,"href","/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(YS,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTConfig"),c(KS,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(ZS,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(eR,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(oR,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMConfig"),c(rR,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMConfig"),c(tR,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMConfig"),c(aR,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(nR,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(sR,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(lR,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetConfig"),c(iR,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosConfig"),c(dR,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ag,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yg,"id","transformers.AutoTokenizer"),c(yg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yg,"href","#transformers.AutoTokenizer"),c(Mi,"class","relative group"),c(cR,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(fR,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizer"),c(mR,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(gR,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartTokenizer"),c(hR,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartTokenizerFast"),c(pR,"href","/docs/transformers/pr_17354/en/model_doc/barthez#transformers.BarthezTokenizer"),c(_R,"href","/docs/transformers/pr_17354/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(uR,"href","/docs/transformers/pr_17354/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(bR,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(vR,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(FR,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(TR,"href","/docs/transformers/pr_17354/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(MR,"href","/docs/transformers/pr_17354/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(ER,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(CR,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(wR,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(AR,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(yR,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(LR,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(xR,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c($R,"href","/docs/transformers/pr_17354/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(kR,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertTokenizer"),c(SR,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(RR,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineTokenizer"),c(PR,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPTokenizer"),c(BR,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(IR,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(NR,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(qR,"href","/docs/transformers/pr_17354/en/model_doc/cpm#transformers.CpmTokenizer"),c(jR,"href","/docs/transformers/pr_17354/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(DR,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(GR,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(OR,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VR,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaTokenizer"),c(XR,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(zR,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(WR,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(QR,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(HR,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(UR,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(JR,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(YR,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraTokenizer"),c(KR,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(eP,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetTokenizer"),c(oP,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(rP,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(tP,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelTokenizer"),c(aP,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(nP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(lP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(iP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(dP,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(cP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(fP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(mP,"href","/docs/transformers/pr_17354/en/model_doc/herbert#transformers.HerbertTokenizer"),c(gP,"href","/docs/transformers/pr_17354/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(hP,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(pP,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_P,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(bP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(vP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(FP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(TP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(MP,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(EP,"href","/docs/transformers/pr_17354/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(CP,"href","/docs/transformers/pr_17354/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(wP,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDTokenizer"),c(AP,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDTokenizerFast"),c(yP,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerTokenizer"),c(LP,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(xP,"href","/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeTokenizer"),c($P,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(kP,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(SP,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(RP,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianTokenizer"),c(PP,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartTokenizer"),c(BP,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(IP,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(NP,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(qP,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(jP,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(DP,"href","/docs/transformers/pr_17354/en/model_doc/mluke#transformers.MLukeTokenizer"),c(GP,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(OP,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(VP,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(XP,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(zP,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Tokenizer"),c(WP,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5TokenizerFast"),c(QP,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizer"),c(HP,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(UP,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(JP,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(YP,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(KP,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ZP,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(eB,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(oB,"href","/docs/transformers/pr_17354/en/model_doc/phobert#transformers.PhobertTokenizer"),c(rB,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartTokenizer"),c(tB,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(aB,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(nB,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(sB,"href","/docs/transformers/pr_17354/en/model_doc/rag#transformers.RagTokenizer"),c(lB,"href","/docs/transformers/pr_17354/en/model_doc/realm#transformers.RealmTokenizer"),c(iB,"href","/docs/transformers/pr_17354/en/model_doc/realm#transformers.RealmTokenizerFast"),c(dB,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerTokenizer"),c(cB,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(fB,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertTokenizer"),c(mB,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(gB,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(hB,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(pB,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_B,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uB,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(bB,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(vB,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(FB,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(TB,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterTokenizer"),c(MB,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(EB,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(CB,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(wB,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Tokenizer"),c(AB,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5TokenizerFast"),c(yB,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasTokenizer"),c(LB,"href","/docs/transformers/pr_17354/en/model_doc/tapex#transformers.TapexTokenizer"),c(xB,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c($B,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizer"),c(kB,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertTokenizerFast"),c(SB,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(RB,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(PB,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(BB,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMTokenizer"),c(IB,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(NB,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMTokenizer"),c(qB,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(jB,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(DB,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(GB,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizer"),c(OB,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VB,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(XB,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(zB,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizer"),c(WB,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ih,"id","transformers.AutoFeatureExtractor"),c(ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ih,"href","#transformers.AutoFeatureExtractor"),c(Ei,"class","relative group"),c(QB,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(HB,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(eI,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(nI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(sI,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(lI,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(iI,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(dI,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(gI,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hI,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(pI,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(_I,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(uI,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(bI,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vI,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(FI,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(TI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(MI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(EI,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oh,"id","transformers.AutoProcessor"),c(Oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Oh,"href","#transformers.AutoProcessor"),c(Ci,"class","relative group"),c(CI,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(wI,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPProcessor"),c(AI,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(yI,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(LI,"href","/docs/transformers/pr_17354/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(xI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($I,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kI,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(SI,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(RI,"href","/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRProcessor"),c(PI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(II,"href","/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltProcessor"),c(NI,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(qI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DI,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ip,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dp,"id","transformers.AutoModel"),c(dp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dp,"href","#transformers.AutoModel"),c(Ai,"class","relative group"),c(GI,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OI,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VI,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XI,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertModel"),c(zI,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartModel"),c(WI,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitModel"),c(QI,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertModel"),c(HI,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(UI,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdModel"),c(JI,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(YI,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(KI,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(ZI,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertModel"),c(eN,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineModel"),c(oN,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.CLIPModel"),c(rN,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertModel"),c(tN,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextModel"),c(aN,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLModel"),c(nN,"href","/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtModel"),c(sN,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(lN,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(iN,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(dN,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaModel"),c(cN,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(fN,"href","/docs/transformers/pr_17354/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(mN,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTModel"),c(gN,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrModel"),c(hN,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertModel"),c(pN,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(_N,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTModel"),c(uN,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraModel"),c(bN,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertModel"),c(vN,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaModel"),c(FN,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetModel"),c(TN,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTModel"),c(MN,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelModel"),c(EN,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelBaseModel"),c(CN,"href","/docs/transformers/pr_17354/en/model_doc/glpn#transformers.GLPNModel"),c(wN,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2Model"),c(AN,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(yN,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(LN,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJModel"),c(xN,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertModel"),c($N,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertModel"),c(kN,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(SN,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(RN,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(PN,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(BN,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDModel"),c(IN,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerModel"),c(NN,"href","/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeModel"),c(qN,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertModel"),c(jN,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100Model"),c(DN,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianModel"),c(GN,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerModel"),c(ON,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartModel"),c(VN,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(XN,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertModel"),c(zN,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTModel"),c(WN,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetModel"),c(QN,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5Model"),c(HN,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerModel"),c(UN,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(JN,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTModel"),c(YN,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusModel"),c(KN,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverModel"),c(ZN,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartModel"),c(eq,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerModel"),c(oq,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(rq,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertModel"),c(tq,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModel"),c(aq,"href","/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetModel"),c(nq,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertModel"),c(sq,"href","/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetModel"),c(lq,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel"),c(iq,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaModel"),c(dq,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerModel"),c(cq,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerModel"),c(fq,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWModel"),c(mq,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDModel"),c(gq,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(hq,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterModel"),c(pq,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(_q,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinModel"),c(uq,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5Model"),c(bq,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasModel"),c(vq,"href","/docs/transformers/pr_17354/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Fq,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Tq,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Mq,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Eq,"href","/docs/transformers/pr_17354/en/model_doc/van#transformers.VanModel"),c(Cq,"href","/docs/transformers/pr_17354/en/model_doc/vilt#transformers.ViltModel"),c(wq,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Aq,"href","/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertModel"),c(yq,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTModel"),c(Lq,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(xq,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c($q,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(kq,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMModel"),c(Sq,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMModel"),c(Rq,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMModel"),c(Pq,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Bq,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Iq,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Nq,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetModel"),c(qq,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosModel"),c(jq,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lu,"id","transformers.AutoModelForPreTraining"),c(lu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lu,"href","#transformers.AutoModelForPreTraining"),c(xi,"class","relative group"),c(Dq,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gq,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oq,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vq,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Xq,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(zq,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForPreTraining"),c(Wq,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Qq,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Hq,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Uq,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Jq,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Yq,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Kq,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Zq,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForPreTraining"),c(ej,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(oj,"href","/docs/transformers/pr_17354/en/model_doc/flava#transformers.FlavaForPreTraining"),c(rj,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForPreTraining"),c(tj,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(aj,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(nj,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(sj,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(lj,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ij,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(dj,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(cj,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(fj,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(mj,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(gj,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(hj,"href","/docs/transformers/pr_17354/en/model_doc/retribert#transformers.RetriBertModel"),c(pj,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(_j,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(uj,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(bj,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(vj,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Tj,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Mj,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Ej,"href","/docs/transformers/pr_17354/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Cj,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(wj,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Aj,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(yj,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Lj,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(xj,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c($j,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zu,"id","transformers.AutoModelForCausalLM"),c(Zu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zu,"href","#transformers.AutoModelForCausalLM"),c(Si,"class","relative group"),c(kj,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sj,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rj,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pj,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForCausalLM"),c(Bj,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertLMHeadModel"),c(Ij,"href","/docs/transformers/pr_17354/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Nj,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(qj,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(jj,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Dj,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Gj,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Oj,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Vj,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Xj,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForCausalLM"),c(zj,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Wj,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Qj,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Hj,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Uj,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianForCausalLM"),c(Jj,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Yj,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Kj,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Zj,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.OPTForCausalLM"),c(eD,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(oD,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(rD,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(tD,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(aD,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(nD,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(sD,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(lD,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(iD,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(dD,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(cD,"href","/docs/transformers/pr_17354/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(fD,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(mD,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(gD,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(hD,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(pD,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(_D,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D1,"id","transformers.AutoModelForMaskedLM"),c(D1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D1,"href","#transformers.AutoModelForMaskedLM"),c(Bi,"class","relative group"),c(uD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vD,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FD,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(TD,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(MD,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMaskedLM"),c(ED,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(CD,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(wD,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(AD,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(yD,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(LD,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(xD,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c($D,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(kD,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(SD,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(RD,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(PD,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(BD,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ID,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ND,"href","/docs/transformers/pr_17354/en/model_doc/luke#transformers.LukeForMaskedLM"),c(qD,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(jD,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(DD,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(GD,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(OD,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(VD,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(XD,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(zD,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(WD,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(QD,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(HD,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(UD,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(JD,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(YD,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(KD,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(eG,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ab,"id","transformers.AutoModelForSeq2SeqLM"),c(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ab,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(oG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aG,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(lG,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(iG,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(dG,"href","/docs/transformers/pr_17354/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(cG,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(fG,"href","/docs/transformers/pr_17354/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(mG,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.MarianMTModel"),c(gG,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(hG,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(pG,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(_G,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(uG,"href","/docs/transformers/pr_17354/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(bG,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(vG,"href","/docs/transformers/pr_17354/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wb,"id","transformers.AutoModelForSequenceClassification"),c(Wb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wb,"href","#transformers.AutoModelForSequenceClassification"),c(Gi,"class","relative group"),c(FG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MG,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EG,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForSequenceClassification"),c($G,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17354/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(cO,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(fO,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(mO,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(gO,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(hO,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(pO,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V2,"id","transformers.AutoModelForMultipleChoice"),c(V2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V2,"href","#transformers.AutoModelForMultipleChoice"),c(Xi,"class","relative group"),c(_O,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vO,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(AO,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(LO,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(xO,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c($O,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(IO,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(NO,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(qO,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(jO,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(DO,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(GO,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(OO,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(VO,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(XO,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(zO,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(WO,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(QO,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M4,"id","transformers.AutoModelForNextSentencePrediction"),c(M4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M4,"href","#transformers.AutoModelForNextSentencePrediction"),c(Qi,"class","relative group"),c(HO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JO,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YO,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(KO,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(ZO,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(eV,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(oV,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k4,"id","transformers.AutoModelForTokenClassification"),c(k4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k4,"href","#transformers.AutoModelForTokenClassification"),c(Ji,"class","relative group"),c(rV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nV,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(sV,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForTokenClassification"),c(lV,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(iV,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(dV,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForTokenClassification"),c(cV,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(fV,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(mV,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(gV,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(hV,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(pV,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(_V,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(uV,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(bV,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(vV,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(FV,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(TV,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(MV,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(EV,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(CV,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(wV,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(AV,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(yV,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(LV,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(xV,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c($V,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(kV,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(SV,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(RV,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(PV,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(BV,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(IV,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(NV,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(qV,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p5,"id","transformers.AutoModelForQuestionAnswering"),c(p5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p5,"href","#transformers.AutoModelForQuestionAnswering"),c(Zi,"class","relative group"),c(jV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GV,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OV,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17354/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17354/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(rX,"href","/docs/transformers/pr_17354/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17354/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17354/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17354/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17354/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17354/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_17354/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_17354/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_17354/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(CX,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(yX,"href","/docs/transformers/pr_17354/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nv,"id","transformers.AutoModelForTableQuestionAnswering"),c(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(rd,"class","relative group"),c(LX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cv,"id","transformers.AutoModelForImageClassification"),c(cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cv,"href","#transformers.AutoModelForImageClassification"),c(nd,"class","relative group"),c(SX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForImageClassification"),c(IX,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(NX,"href","/docs/transformers/pr_17354/en/model_doc/cvt#transformers.CvtForImageClassification"),c(qX,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(jX,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassification"),c(DX,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(GX,"href","/docs/transformers/pr_17354/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(OX,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(VX,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(XX,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(zX,"href","/docs/transformers/pr_17354/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(WX,"href","/docs/transformers/pr_17354/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(QX,"href","/docs/transformers/pr_17354/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(HX,"href","/docs/transformers/pr_17354/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(UX,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(JX,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForImageClassification"),c(YX,"href","/docs/transformers/pr_17354/en/model_doc/van#transformers.VanForImageClassification"),c(KX,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yv,"id","transformers.AutoModelForVision2Seq"),c(yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yv,"href","#transformers.AutoModelForVision2Seq"),c(id,"class","relative group"),c(ZX,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sv,"id","transformers.AutoModelForAudioClassification"),c(Sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sv,"href","#transformers.AutoModelForAudioClassification"),c(fd,"class","relative group"),c(tz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(az,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sz,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(lz,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(iz,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(dz,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(cz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(fz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(mz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(gz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(hz,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zv,"id","transformers.AutoModelForAudioFrameClassification"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForAudioFrameClassification"),c(hd,"class","relative group"),c(pz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_z,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bz,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(vz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(Fz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(Tz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(Mz,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e3,"id","transformers.AutoModelForCTC"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(Ez,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Az,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(yz,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.HubertForCTC"),c(Lz,"href","/docs/transformers/pr_17354/en/model_doc/sew#transformers.SEWForCTC"),c(xz,"href","/docs/transformers/pr_17354/en/model_doc/sew-d#transformers.SEWDForCTC"),c($z,"href","/docs/transformers/pr_17354/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(kz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Sz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Rz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Pz,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g3,"id","transformers.AutoModelForSpeechSeq2Seq"),c(g3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g3,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Fd,"class","relative group"),c(Bz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/pr_17354/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(jz,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v3,"id","transformers.AutoModelForAudioXVector"),c(v3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v3,"href","#transformers.AutoModelForAudioXVector"),c(Ed,"class","relative group"),c(Dz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vz,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Xz,"href","/docs/transformers/pr_17354/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(zz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Wz,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Qz,"href","/docs/transformers/pr_17354/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L3,"id","transformers.AutoModelForMaskedImageModeling"),c(L3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L3,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ad,"class","relative group"),c(Hz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jz,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yz,"href","/docs/transformers/pr_17354/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Kz,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Zz,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B3,"id","transformers.AutoModelForObjectDetection"),c(B3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B3,"href","#transformers.AutoModelForObjectDetection"),c($d,"class","relative group"),c(eW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tW,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForObjectDetection"),c(aW,"href","/docs/transformers/pr_17354/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G3,"id","transformers.AutoModelForImageSegmentation"),c(G3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G3,"href","#transformers.AutoModelForImageSegmentation"),c(Rd,"class","relative group"),c(nW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iW,"href","/docs/transformers/pr_17354/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W3,"id","transformers.AutoModelForSemanticSegmentation"),c(W3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W3,"href","#transformers.AutoModelForSemanticSegmentation"),c(Id,"class","relative group"),c(dW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mW,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(gW,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(hW,"href","/docs/transformers/pr_17354/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(pW,"href","/docs/transformers/pr_17354/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(_W,"href","/docs/transformers/pr_17354/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oF,"id","transformers.AutoModelForInstanceSegmentation"),c(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oF,"href","#transformers.AutoModelForInstanceSegmentation"),c(jd,"class","relative group"),c(uW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FW,"href","/docs/transformers/pr_17354/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sF,"id","transformers.TFAutoModel"),c(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sF,"href","#transformers.TFAutoModel"),c(Od,"class","relative group"),c(TW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EW,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CW,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertModel"),c(wW,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartModel"),c(AW,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertModel"),c(yW,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(LW,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(xW,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertModel"),c($W,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.TFCLIPModel"),c(kW,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertModel"),c(SW,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextModel"),c(RW,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLModel"),c(PW,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(BW,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaModel"),c(IW,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(NW,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(qW,"href","/docs/transformers/pr_17354/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(jW,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraModel"),c(DW,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(GW,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelModel"),c(OW,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(VW,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2Model"),c(XW,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJModel"),c(zW,"href","/docs/transformers/pr_17354/en/model_doc/hubert#transformers.TFHubertModel"),c(WW,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(QW,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDModel"),c(HW,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerModel"),c(UW,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertModel"),c(JW,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianModel"),c(YW,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartModel"),c(KW,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(ZW,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetModel"),c(eQ,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5Model"),c(oQ,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(rQ,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.TFOPTModel"),c(tQ,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusModel"),c(aQ,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertModel"),c(nQ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaModel"),c(sQ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerModel"),c(lQ,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(iQ,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinModel"),c(dQ,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5Model"),c(cQ,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasModel"),c(fQ,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(mQ,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTModel"),c(gQ,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(hQ,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(pQ,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMModel"),c(_Q,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(uQ,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oT,"id","transformers.TFAutoModelForPreTraining"),c(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oT,"href","#transformers.TFAutoModelForPreTraining"),c(zd,"class","relative group"),c(bQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TQ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(MQ,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(EQ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForPreTraining"),c(CQ,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(AQ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(yQ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(LQ,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(xQ,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c($Q,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(kQ,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17354/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(RQ,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(PQ,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(IQ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(qQ,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(jQ,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(DQ,"href","/docs/transformers/pr_17354/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(GQ,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(OQ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(VQ,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yT,"id","transformers.TFAutoModelForCausalLM"),c(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yT,"href","#transformers.TFAutoModelForCausalLM"),c(Hd,"class","relative group"),c(XQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WQ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QQ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(HQ,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(UQ,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(JQ,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(YQ,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(KQ,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(ZQ,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(eH,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(oH,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(rH,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(tH,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(aH,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(nH,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VT,"id","transformers.TFAutoModelForImageClassification"),c(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VT,"href","#transformers.TFAutoModelForImageClassification"),c(Yd,"class","relative group"),c(sH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dH,"href","/docs/transformers/pr_17354/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(cH,"href","/docs/transformers/pr_17354/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(fH,"href","/docs/transformers/pr_17354/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(mH,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JT,"id","transformers.TFAutoModelForMaskedLM"),c(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JT,"href","#transformers.TFAutoModelForMaskedLM"),c(ec,"class","relative group"),c(gH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_H,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(uH,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(bH,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(vH,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(FH,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(TH,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(MH,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(EH,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(CH,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(wH,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(AH,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(yH,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(LH,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(xH,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c($H,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(kH,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(SH,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(RH,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(PH,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(BH,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(v7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(tc,"class","relative group"),c(IH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jH,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(DH,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(GH,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(OH,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(VH,"href","/docs/transformers/pr_17354/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(XH,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.TFMarianMTModel"),c(zH,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(WH,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(QH,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(HH,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S7,"id","transformers.TFAutoModelForSequenceClassification"),c(S7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S7,"href","#transformers.TFAutoModelForSequenceClassification"),c(sc,"class","relative group"),c(UH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(eU,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(oU,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(rU,"href","/docs/transformers/pr_17354/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(tU,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(aU,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(nU,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(sU,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(lU,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(iU,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(dU,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(cU,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(fU,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(mU,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(gU,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(hU,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(pU,"href","/docs/transformers/pr_17354/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(_U,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(uU,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(bU,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(vU,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(FU,"href","/docs/transformers/pr_17354/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(TU,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(MU,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(EU,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lM,"id","transformers.TFAutoModelForMultipleChoice"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.TFAutoModelForMultipleChoice"),c(dc,"class","relative group"),c(CU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yU,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(LU,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(xU,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c($U,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(kU,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(SU,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(RU,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(PU,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(BU,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(IU,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(NU,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(qU,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(jU,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(DU,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(GU,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(OU,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(VU,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(yM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(mc,"class","relative group"),c(XU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QU,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(HU,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(SM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(pc,"class","relative group"),c(UU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/pr_17354/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IM,"id","transformers.TFAutoModelForTokenClassification"),c(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IM,"href","#transformers.TFAutoModelForTokenClassification"),c(bc,"class","relative group"),c(ZU,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rJ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(tJ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(aJ,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(nJ,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(sJ,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(lJ,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(iJ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(dJ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(cJ,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(fJ,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(mJ,"href","/docs/transformers/pr_17354/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(gJ,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(hJ,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(pJ,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(_J,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(uJ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(bJ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(vJ,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(FJ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(TJ,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nE,"id","transformers.TFAutoModelForQuestionAnswering"),c(nE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Tc,"class","relative group"),c(MJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wJ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_17354/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_17354/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(xJ,"href","/docs/transformers/pr_17354/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c($J,"href","/docs/transformers/pr_17354/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(kJ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(SJ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(RJ,"href","/docs/transformers/pr_17354/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(PJ,"href","/docs/transformers/pr_17354/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(BJ,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(IJ,"href","/docs/transformers/pr_17354/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(NJ,"href","/docs/transformers/pr_17354/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(qJ,"href","/docs/transformers/pr_17354/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(jJ,"href","/docs/transformers/pr_17354/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(DJ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(GJ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(OJ,"href","/docs/transformers/pr_17354/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(VJ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(XJ,"href","/docs/transformers/pr_17354/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LE,"id","transformers.TFAutoModelForVision2Seq"),c(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LE,"href","#transformers.TFAutoModelForVision2Seq"),c(Cc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(UJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KJ,"href","/docs/transformers/pr_17354/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IE,"id","transformers.FlaxAutoModel"),c(IE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IE,"href","#transformers.FlaxAutoModel"),c($c,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertModel"),c(tY,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartModel"),c(aY,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitModel"),c(nY,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertModel"),c(sY,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(lY,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(iY,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(dY,"href","/docs/transformers/pr_17354/en/model_doc/clip#transformers.FlaxCLIPModel"),c(cY,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(fY,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraModel"),c(mY,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(gY,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(hY,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(pY,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianModel"),c(_Y,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartModel"),c(uY,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5Model"),c(bY,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.FlaxOPTModel"),c(vY,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(FY,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(TY,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(MY,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5Model"),c(EY,"href","/docs/transformers/pr_17354/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(CY,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTModel"),c(wY,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(AY,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(yY,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.FlaxAutoModelForCausalLM"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Rc,"class","relative group"),c(LY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Y,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kY,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(SY,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(RY,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(PY,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(BY,"href","/docs/transformers/pr_17354/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(IY,"href","/docs/transformers/pr_17354/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(NY,"href","/docs/transformers/pr_17354/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(qY,"href","/docs/transformers/pr_17354/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(jY,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(DY,"href","/docs/transformers/pr_17354/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.FlaxAutoModelForPreTraining"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ic,"class","relative group"),c(GY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VY,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XY,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(zY,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(WY,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(QY,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(HY,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(UY,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(JY,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(YY,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(KY,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(ZY,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(eK,"href","/docs/transformers/pr_17354/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(oK,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.FlaxAutoModelForMaskedLM"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(jc,"class","relative group"),c(rK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(sK,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(lK,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(iK,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(dK,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(cK,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(fK,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(mK,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(gK,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(hK,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(KC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Oc,"class","relative group"),c(pK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_K,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(vK,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(FK,"href","/docs/transformers/pr_17354/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(TK,"href","/docs/transformers/pr_17354/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(MK,"href","/docs/transformers/pr_17354/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(EK,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(CK,"href","/docs/transformers/pr_17354/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(wK,"href","/docs/transformers/pr_17354/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(AK,"href","/docs/transformers/pr_17354/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(c0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(zc,"class","relative group"),c(yK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($K,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(kK,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(SK,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(RK,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(PK,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(BK,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(IK,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(NK,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(qK,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(jK,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(E0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Hc,"class","relative group"),c(DK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VK,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(XK,"href","/docs/transformers/pr_17354/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(zK,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(WK,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(QK,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(HK,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(UK,"href","/docs/transformers/pr_17354/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(JK,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(YK,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(KK,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I0,"id","transformers.FlaxAutoModelForTokenClassification"),c(I0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Yc,"class","relative group"),c(ZK,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rZ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(tZ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(aZ,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(nZ,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(sZ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(lZ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(iZ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(dZ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Q0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ef,"class","relative group"),c(cZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gZ,"href","/docs/transformers/pr_17354/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(hZ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(pZ,"href","/docs/transformers/pr_17354/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(_Z,"href","/docs/transformers/pr_17354/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(uZ,"href","/docs/transformers/pr_17354/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(bZ,"href","/docs/transformers/pr_17354/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(vZ,"href","/docs/transformers/pr_17354/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(FZ,"href","/docs/transformers/pr_17354/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(tf,"class","relative group"),c(TZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CZ,"href","/docs/transformers/pr_17354/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iw,"id","transformers.FlaxAutoModelForImageClassification"),c(iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iw,"href","#transformers.FlaxAutoModelForImageClassification"),c(sf,"class","relative group"),c(wZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LZ,"href","/docs/transformers/pr_17354/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(xZ,"href","/docs/transformers/pr_17354/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gw,"id","transformers.FlaxAutoModelForVision2Seq"),c(gw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(cf,"class","relative group"),c($Z,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SZ,"href","/docs/transformers/pr_17354/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RZ,"href","/docs/transformers/pr_17354/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,mi),b(f,_f,u),b(f,tt,u),e(tt,gi),e(tt,hi),e(hi,RA),e(tt,uf),b(f,De,u),b(f,We,u),e(We,pi),e(We,yn),e(yn,PA),e(We,Ln),e(We,xn),e(xn,BA),e(We,_i),e(We,$n),e($n,IA),e(We,ui),b(f,bf,u),M(wa,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,ok),e(Ae,bi),e(bi,rk),e(Ae,tk),b(f,Eo,u),b(f,Aa,u),e(Aa,ak),e(Aa,vf),e(vf,nk),e(Aa,UOe),b(f,qqe,u),b(f,vi,u),e(vi,Ff),e(Ff,Aoe),M(NA,Aoe,null),e(vi,JOe),e(vi,yoe),e(yoe,YOe),b(f,jqe,u),b(f,kn,u),e(kn,KOe),e(kn,Loe),e(Loe,ZOe),e(kn,eVe),e(kn,xoe),e(xoe,oVe),e(kn,rVe),b(f,Dqe,u),M(qA,f,u),b(f,Gqe,u),b(f,sk,u),e(sk,tVe),b(f,Oqe,u),M(Tf,f,u),b(f,Vqe,u),b(f,Fi,u),e(Fi,Mf),e(Mf,$oe),M(jA,$oe,null),e(Fi,aVe),e(Fi,koe),e(koe,nVe),b(f,Xqe,u),b(f,Co,u),M(DA,Co,null),e(Co,sVe),e(Co,GA),e(GA,lVe),e(GA,lk),e(lk,iVe),e(GA,dVe),e(Co,cVe),e(Co,OA),e(OA,fVe),e(OA,Soe),e(Soe,mVe),e(OA,gVe),e(Co,hVe),e(Co,Er),M(VA,Er,null),e(Er,pVe),e(Er,Roe),e(Roe,_Ve),e(Er,uVe),e(Er,Ti),e(Ti,bVe),e(Ti,Poe),e(Poe,vVe),e(Ti,FVe),e(Ti,Boe),e(Boe,TVe),e(Ti,MVe),e(Er,EVe),e(Er,A),e(A,Ef),e(Ef,Ioe),e(Ioe,CVe),e(Ef,wVe),e(Ef,ik),e(ik,AVe),e(Ef,yVe),e(A,LVe),e(A,Cf),e(Cf,Noe),e(Noe,xVe),e(Cf,$Ve),e(Cf,dk),e(dk,kVe),e(Cf,SVe),e(A,RVe),e(A,wf),e(wf,qoe),e(qoe,PVe),e(wf,BVe),e(wf,ck),e(ck,IVe),e(wf,NVe),e(A,qVe),e(A,Af),e(Af,joe),e(joe,jVe),e(Af,DVe),e(Af,fk),e(fk,GVe),e(Af,OVe),e(A,VVe),e(A,yf),e(yf,Doe),e(Doe,XVe),e(yf,zVe),e(yf,mk),e(mk,WVe),e(yf,QVe),e(A,HVe),e(A,Lf),e(Lf,Goe),e(Goe,UVe),e(Lf,JVe),e(Lf,gk),e(gk,YVe),e(Lf,KVe),e(A,ZVe),e(A,xf),e(xf,Ooe),e(Ooe,eXe),e(xf,oXe),e(xf,hk),e(hk,rXe),e(xf,tXe),e(A,aXe),e(A,$f),e($f,Voe),e(Voe,nXe),e($f,sXe),e($f,pk),e(pk,lXe),e($f,iXe),e(A,dXe),e(A,kf),e(kf,Xoe),e(Xoe,cXe),e(kf,fXe),e(kf,_k),e(_k,mXe),e(kf,gXe),e(A,hXe),e(A,Sf),e(Sf,zoe),e(zoe,pXe),e(Sf,_Xe),e(Sf,uk),e(uk,uXe),e(Sf,bXe),e(A,vXe),e(A,Rf),e(Rf,Woe),e(Woe,FXe),e(Rf,TXe),e(Rf,bk),e(bk,MXe),e(Rf,EXe),e(A,CXe),e(A,Pf),e(Pf,Qoe),e(Qoe,wXe),e(Pf,AXe),e(Pf,vk),e(vk,yXe),e(Pf,LXe),e(A,xXe),e(A,Bf),e(Bf,Hoe),e(Hoe,$Xe),e(Bf,kXe),e(Bf,Fk),e(Fk,SXe),e(Bf,RXe),e(A,PXe),e(A,If),e(If,Uoe),e(Uoe,BXe),e(If,IXe),e(If,Tk),e(Tk,NXe),e(If,qXe),e(A,jXe),e(A,Nf),e(Nf,Joe),e(Joe,DXe),e(Nf,GXe),e(Nf,Mk),e(Mk,OXe),e(Nf,VXe),e(A,XXe),e(A,qf),e(qf,Yoe),e(Yoe,zXe),e(qf,WXe),e(qf,Ek),e(Ek,QXe),e(qf,HXe),e(A,UXe),e(A,jf),e(jf,Koe),e(Koe,JXe),e(jf,YXe),e(jf,Ck),e(Ck,KXe),e(jf,ZXe),e(A,eze),e(A,Df),e(Df,Zoe),e(Zoe,oze),e(Df,rze),e(Df,wk),e(wk,tze),e(Df,aze),e(A,nze),e(A,Gf),e(Gf,ere),e(ere,sze),e(Gf,lze),e(Gf,Ak),e(Ak,ize),e(Gf,dze),e(A,cze),e(A,Of),e(Of,ore),e(ore,fze),e(Of,mze),e(Of,yk),e(yk,gze),e(Of,hze),e(A,pze),e(A,Vf),e(Vf,rre),e(rre,_ze),e(Vf,uze),e(Vf,Lk),e(Lk,bze),e(Vf,vze),e(A,Fze),e(A,Xf),e(Xf,tre),e(tre,Tze),e(Xf,Mze),e(Xf,xk),e(xk,Eze),e(Xf,Cze),e(A,wze),e(A,zf),e(zf,are),e(are,Aze),e(zf,yze),e(zf,$k),e($k,Lze),e(zf,xze),e(A,$ze),e(A,Wf),e(Wf,nre),e(nre,kze),e(Wf,Sze),e(Wf,kk),e(kk,Rze),e(Wf,Pze),e(A,Bze),e(A,Qf),e(Qf,sre),e(sre,Ize),e(Qf,Nze),e(Qf,Sk),e(Sk,qze),e(Qf,jze),e(A,Dze),e(A,Hf),e(Hf,lre),e(lre,Gze),e(Hf,Oze),e(Hf,Rk),e(Rk,Vze),e(Hf,Xze),e(A,zze),e(A,Uf),e(Uf,ire),e(ire,Wze),e(Uf,Qze),e(Uf,Pk),e(Pk,Hze),e(Uf,Uze),e(A,Jze),e(A,Jf),e(Jf,dre),e(dre,Yze),e(Jf,Kze),e(Jf,Bk),e(Bk,Zze),e(Jf,eWe),e(A,oWe),e(A,Yf),e(Yf,cre),e(cre,rWe),e(Yf,tWe),e(Yf,Ik),e(Ik,aWe),e(Yf,nWe),e(A,sWe),e(A,Kf),e(Kf,fre),e(fre,lWe),e(Kf,iWe),e(Kf,Nk),e(Nk,dWe),e(Kf,cWe),e(A,fWe),e(A,Zf),e(Zf,mre),e(mre,mWe),e(Zf,gWe),e(Zf,qk),e(qk,hWe),e(Zf,pWe),e(A,_We),e(A,em),e(em,gre),e(gre,uWe),e(em,bWe),e(em,jk),e(jk,vWe),e(em,FWe),e(A,TWe),e(A,om),e(om,hre),e(hre,MWe),e(om,EWe),e(om,Dk),e(Dk,CWe),e(om,wWe),e(A,AWe),e(A,rm),e(rm,pre),e(pre,yWe),e(rm,LWe),e(rm,Gk),e(Gk,xWe),e(rm,$We),e(A,kWe),e(A,tm),e(tm,_re),e(_re,SWe),e(tm,RWe),e(tm,Ok),e(Ok,PWe),e(tm,BWe),e(A,IWe),e(A,am),e(am,ure),e(ure,NWe),e(am,qWe),e(am,Vk),e(Vk,jWe),e(am,DWe),e(A,GWe),e(A,nm),e(nm,bre),e(bre,OWe),e(nm,VWe),e(nm,Xk),e(Xk,XWe),e(nm,zWe),e(A,WWe),e(A,sm),e(sm,vre),e(vre,QWe),e(sm,HWe),e(sm,zk),e(zk,UWe),e(sm,JWe),e(A,YWe),e(A,lm),e(lm,Fre),e(Fre,KWe),e(lm,ZWe),e(lm,Wk),e(Wk,eQe),e(lm,oQe),e(A,rQe),e(A,im),e(im,Tre),e(Tre,tQe),e(im,aQe),e(im,Qk),e(Qk,nQe),e(im,sQe),e(A,lQe),e(A,dm),e(dm,Mre),e(Mre,iQe),e(dm,dQe),e(dm,Hk),e(Hk,cQe),e(dm,fQe),e(A,mQe),e(A,cm),e(cm,Ere),e(Ere,gQe),e(cm,hQe),e(cm,Uk),e(Uk,pQe),e(cm,_Qe),e(A,uQe),e(A,fm),e(fm,Cre),e(Cre,bQe),e(fm,vQe),e(fm,Jk),e(Jk,FQe),e(fm,TQe),e(A,MQe),e(A,mm),e(mm,wre),e(wre,EQe),e(mm,CQe),e(mm,Yk),e(Yk,wQe),e(mm,AQe),e(A,yQe),e(A,gm),e(gm,Are),e(Are,LQe),e(gm,xQe),e(gm,Kk),e(Kk,$Qe),e(gm,kQe),e(A,SQe),e(A,hm),e(hm,yre),e(yre,RQe),e(hm,PQe),e(hm,Zk),e(Zk,BQe),e(hm,IQe),e(A,NQe),e(A,pm),e(pm,Lre),e(Lre,qQe),e(pm,jQe),e(pm,eS),e(eS,DQe),e(pm,GQe),e(A,OQe),e(A,_m),e(_m,xre),e(xre,VQe),e(_m,XQe),e(_m,oS),e(oS,zQe),e(_m,WQe),e(A,QQe),e(A,um),e(um,$re),e($re,HQe),e(um,UQe),e(um,rS),e(rS,JQe),e(um,YQe),e(A,KQe),e(A,bm),e(bm,kre),e(kre,ZQe),e(bm,eHe),e(bm,tS),e(tS,oHe),e(bm,rHe),e(A,tHe),e(A,vm),e(vm,Sre),e(Sre,aHe),e(vm,nHe),e(vm,aS),e(aS,sHe),e(vm,lHe),e(A,iHe),e(A,Fm),e(Fm,Rre),e(Rre,dHe),e(Fm,cHe),e(Fm,nS),e(nS,fHe),e(Fm,mHe),e(A,gHe),e(A,Tm),e(Tm,Pre),e(Pre,hHe),e(Tm,pHe),e(Tm,sS),e(sS,_He),e(Tm,uHe),e(A,bHe),e(A,Mm),e(Mm,Bre),e(Bre,vHe),e(Mm,FHe),e(Mm,lS),e(lS,THe),e(Mm,MHe),e(A,EHe),e(A,Em),e(Em,Ire),e(Ire,CHe),e(Em,wHe),e(Em,iS),e(iS,AHe),e(Em,yHe),e(A,LHe),e(A,Cm),e(Cm,Nre),e(Nre,xHe),e(Cm,$He),e(Cm,dS),e(dS,kHe),e(Cm,SHe),e(A,RHe),e(A,wm),e(wm,qre),e(qre,PHe),e(wm,BHe),e(wm,cS),e(cS,IHe),e(wm,NHe),e(A,qHe),e(A,Am),e(Am,jre),e(jre,jHe),e(Am,DHe),e(Am,fS),e(fS,GHe),e(Am,OHe),e(A,VHe),e(A,ym),e(ym,Dre),e(Dre,XHe),e(ym,zHe),e(ym,mS),e(mS,WHe),e(ym,QHe),e(A,HHe),e(A,Lm),e(Lm,Gre),e(Gre,UHe),e(Lm,JHe),e(Lm,gS),e(gS,YHe),e(Lm,KHe),e(A,ZHe),e(A,xm),e(xm,Ore),e(Ore,eUe),e(xm,oUe),e(xm,hS),e(hS,rUe),e(xm,tUe),e(A,aUe),e(A,$m),e($m,Vre),e(Vre,nUe),e($m,sUe),e($m,pS),e(pS,lUe),e($m,iUe),e(A,dUe),e(A,km),e(km,Xre),e(Xre,cUe),e(km,fUe),e(km,_S),e(_S,mUe),e(km,gUe),e(A,hUe),e(A,Sm),e(Sm,zre),e(zre,pUe),e(Sm,_Ue),e(Sm,uS),e(uS,uUe),e(Sm,bUe),e(A,vUe),e(A,Rm),e(Rm,Wre),e(Wre,FUe),e(Rm,TUe),e(Rm,bS),e(bS,MUe),e(Rm,EUe),e(A,CUe),e(A,Pm),e(Pm,Qre),e(Qre,wUe),e(Pm,AUe),e(Pm,vS),e(vS,yUe),e(Pm,LUe),e(A,xUe),e(A,Bm),e(Bm,Hre),e(Hre,$Ue),e(Bm,kUe),e(Bm,FS),e(FS,SUe),e(Bm,RUe),e(A,PUe),e(A,Im),e(Im,Ure),e(Ure,BUe),e(Im,IUe),e(Im,TS),e(TS,NUe),e(Im,qUe),e(A,jUe),e(A,Nm),e(Nm,Jre),e(Jre,DUe),e(Nm,GUe),e(Nm,MS),e(MS,OUe),e(Nm,VUe),e(A,XUe),e(A,qm),e(qm,Yre),e(Yre,zUe),e(qm,WUe),e(qm,ES),e(ES,QUe),e(qm,HUe),e(A,UUe),e(A,jm),e(jm,Kre),e(Kre,JUe),e(jm,YUe),e(jm,CS),e(CS,KUe),e(jm,ZUe),e(A,eJe),e(A,Dm),e(Dm,Zre),e(Zre,oJe),e(Dm,rJe),e(Dm,wS),e(wS,tJe),e(Dm,aJe),e(A,nJe),e(A,Gm),e(Gm,ete),e(ete,sJe),e(Gm,lJe),e(Gm,AS),e(AS,iJe),e(Gm,dJe),e(A,cJe),e(A,Om),e(Om,ote),e(ote,fJe),e(Om,mJe),e(Om,yS),e(yS,gJe),e(Om,hJe),e(A,pJe),e(A,Vm),e(Vm,rte),e(rte,_Je),e(Vm,uJe),e(Vm,LS),e(LS,bJe),e(Vm,vJe),e(A,FJe),e(A,Xm),e(Xm,tte),e(tte,TJe),e(Xm,MJe),e(Xm,xS),e(xS,EJe),e(Xm,CJe),e(A,wJe),e(A,zm),e(zm,ate),e(ate,AJe),e(zm,yJe),e(zm,$S),e($S,LJe),e(zm,xJe),e(A,$Je),e(A,Wm),e(Wm,nte),e(nte,kJe),e(Wm,SJe),e(Wm,kS),e(kS,RJe),e(Wm,PJe),e(A,BJe),e(A,Qm),e(Qm,ste),e(ste,IJe),e(Qm,NJe),e(Qm,SS),e(SS,qJe),e(Qm,jJe),e(A,DJe),e(A,Hm),e(Hm,lte),e(lte,GJe),e(Hm,OJe),e(Hm,RS),e(RS,VJe),e(Hm,XJe),e(A,zJe),e(A,Um),e(Um,ite),e(ite,WJe),e(Um,QJe),e(Um,PS),e(PS,HJe),e(Um,UJe),e(A,JJe),e(A,Jm),e(Jm,dte),e(dte,YJe),e(Jm,KJe),e(Jm,BS),e(BS,ZJe),e(Jm,eYe),e(A,oYe),e(A,Ym),e(Ym,cte),e(cte,rYe),e(Ym,tYe),e(Ym,IS),e(IS,aYe),e(Ym,nYe),e(A,sYe),e(A,Km),e(Km,fte),e(fte,lYe),e(Km,iYe),e(Km,NS),e(NS,dYe),e(Km,cYe),e(A,fYe),e(A,Zm),e(Zm,mte),e(mte,mYe),e(Zm,gYe),e(Zm,qS),e(qS,hYe),e(Zm,pYe),e(A,_Ye),e(A,eg),e(eg,gte),e(gte,uYe),e(eg,bYe),e(eg,jS),e(jS,vYe),e(eg,FYe),e(A,TYe),e(A,og),e(og,hte),e(hte,MYe),e(og,EYe),e(og,DS),e(DS,CYe),e(og,wYe),e(A,AYe),e(A,rg),e(rg,pte),e(pte,yYe),e(rg,LYe),e(rg,GS),e(GS,xYe),e(rg,$Ye),e(A,kYe),e(A,tg),e(tg,_te),e(_te,SYe),e(tg,RYe),e(tg,OS),e(OS,PYe),e(tg,BYe),e(A,IYe),e(A,ag),e(ag,ute),e(ute,NYe),e(ag,qYe),e(ag,VS),e(VS,jYe),e(ag,DYe),e(A,GYe),e(A,ng),e(ng,bte),e(bte,OYe),e(ng,VYe),e(ng,XS),e(XS,XYe),e(ng,zYe),e(A,WYe),e(A,sg),e(sg,vte),e(vte,QYe),e(sg,HYe),e(sg,zS),e(zS,UYe),e(sg,JYe),e(A,YYe),e(A,lg),e(lg,Fte),e(Fte,KYe),e(lg,ZYe),e(lg,WS),e(WS,eKe),e(lg,oKe),e(A,rKe),e(A,ig),e(ig,Tte),e(Tte,tKe),e(ig,aKe),e(ig,QS),e(QS,nKe),e(ig,sKe),e(A,lKe),e(A,dg),e(dg,Mte),e(Mte,iKe),e(dg,dKe),e(dg,HS),e(HS,cKe),e(dg,fKe),e(A,mKe),e(A,cg),e(cg,Ete),e(Ete,gKe),e(cg,hKe),e(cg,US),e(US,pKe),e(cg,_Ke),e(A,uKe),e(A,fg),e(fg,Cte),e(Cte,bKe),e(fg,vKe),e(fg,JS),e(JS,FKe),e(fg,TKe),e(A,MKe),e(A,mg),e(mg,wte),e(wte,EKe),e(mg,CKe),e(mg,YS),e(YS,wKe),e(mg,AKe),e(A,yKe),e(A,gg),e(gg,Ate),e(Ate,LKe),e(gg,xKe),e(gg,KS),e(KS,$Ke),e(gg,kKe),e(A,SKe),e(A,hg),e(hg,yte),e(yte,RKe),e(hg,PKe),e(hg,ZS),e(ZS,BKe),e(hg,IKe),e(A,NKe),e(A,pg),e(pg,Lte),e(Lte,qKe),e(pg,jKe),e(pg,eR),e(eR,DKe),e(pg,GKe),e(A,OKe),e(A,_g),e(_g,xte),e(xte,VKe),e(_g,XKe),e(_g,oR),e(oR,zKe),e(_g,WKe),e(A,QKe),e(A,ug),e(ug,$te),e($te,HKe),e(ug,UKe),e(ug,rR),e(rR,JKe),e(ug,YKe),e(A,KKe),e(A,bg),e(bg,kte),e(kte,ZKe),e(bg,eZe),e(bg,tR),e(tR,oZe),e(bg,rZe),e(A,tZe),e(A,vg),e(vg,Ste),e(Ste,aZe),e(vg,nZe),e(vg,aR),e(aR,sZe),e(vg,lZe),e(A,iZe),e(A,Fg),e(Fg,Rte),e(Rte,dZe),e(Fg,cZe),e(Fg,nR),e(nR,fZe),e(Fg,mZe),e(A,gZe),e(A,Tg),e(Tg,Pte),e(Pte,hZe),e(Tg,pZe),e(Tg,sR),e(sR,_Ze),e(Tg,uZe),e(A,bZe),e(A,Mg),e(Mg,Bte),e(Bte,vZe),e(Mg,FZe),e(Mg,lR),e(lR,TZe),e(Mg,MZe),e(A,EZe),e(A,Eg),e(Eg,Ite),e(Ite,CZe),e(Eg,wZe),e(Eg,iR),e(iR,AZe),e(Eg,yZe),e(A,LZe),e(A,Cg),e(Cg,Nte),e(Nte,xZe),e(Cg,$Ze),e(Cg,dR),e(dR,kZe),e(Cg,SZe),e(Er,RZe),M(wg,Er,null),e(Co,PZe),e(Co,Ag),M(XA,Ag,null),e(Ag,BZe),e(Ag,qte),e(qte,IZe),b(f,zqe,u),b(f,Mi,u),e(Mi,yg),e(yg,jte),M(zA,jte,null),e(Mi,NZe),e(Mi,Dte),e(Dte,qZe),b(f,Wqe,u),b(f,wo,u),M(WA,wo,null),e(wo,jZe),e(wo,QA),e(QA,DZe),e(QA,cR),e(cR,GZe),e(QA,OZe),e(wo,VZe),e(wo,HA),e(HA,XZe),e(HA,Gte),e(Gte,zZe),e(HA,WZe),e(wo,QZe),e(wo,Cr),M(UA,Cr,null),e(Cr,HZe),e(Cr,Ote),e(Ote,UZe),e(Cr,JZe),e(Cr,ya),e(ya,YZe),e(ya,Vte),e(Vte,KZe),e(ya,ZZe),e(ya,Xte),e(Xte,eeo),e(ya,oeo),e(ya,zte),e(zte,reo),e(ya,teo),e(Cr,aeo),e(Cr,k),e(k,Sn),e(Sn,Wte),e(Wte,neo),e(Sn,seo),e(Sn,fR),e(fR,leo),e(Sn,ieo),e(Sn,mR),e(mR,deo),e(Sn,ceo),e(k,feo),e(k,Rn),e(Rn,Qte),e(Qte,meo),e(Rn,geo),e(Rn,gR),e(gR,heo),e(Rn,peo),e(Rn,hR),e(hR,_eo),e(Rn,ueo),e(k,beo),e(k,Pn),e(Pn,Hte),e(Hte,veo),e(Pn,Feo),e(Pn,pR),e(pR,Teo),e(Pn,Meo),e(Pn,_R),e(_R,Eeo),e(Pn,Ceo),e(k,weo),e(k,Lg),e(Lg,Ute),e(Ute,Aeo),e(Lg,yeo),e(Lg,uR),e(uR,Leo),e(Lg,xeo),e(k,$eo),e(k,Bn),e(Bn,Jte),e(Jte,keo),e(Bn,Seo),e(Bn,bR),e(bR,Reo),e(Bn,Peo),e(Bn,vR),e(vR,Beo),e(Bn,Ieo),e(k,Neo),e(k,xg),e(xg,Yte),e(Yte,qeo),e(xg,jeo),e(xg,FR),e(FR,Deo),e(xg,Geo),e(k,Oeo),e(k,$g),e($g,Kte),e(Kte,Veo),e($g,Xeo),e($g,TR),e(TR,zeo),e($g,Weo),e(k,Qeo),e(k,kg),e(kg,Zte),e(Zte,Heo),e(kg,Ueo),e(kg,MR),e(MR,Jeo),e(kg,Yeo),e(k,Keo),e(k,In),e(In,eae),e(eae,Zeo),e(In,eoo),e(In,ER),e(ER,ooo),e(In,roo),e(In,CR),e(CR,too),e(In,aoo),e(k,noo),e(k,Nn),e(Nn,oae),e(oae,soo),e(Nn,loo),e(Nn,wR),e(wR,ioo),e(Nn,doo),e(Nn,AR),e(AR,coo),e(Nn,foo),e(k,moo),e(k,qn),e(qn,rae),e(rae,goo),e(qn,hoo),e(qn,yR),e(yR,poo),e(qn,_oo),e(qn,LR),e(LR,uoo),e(qn,boo),e(k,voo),e(k,Sg),e(Sg,tae),e(tae,Foo),e(Sg,Too),e(Sg,xR),e(xR,Moo),e(Sg,Eoo),e(k,Coo),e(k,Rg),e(Rg,aae),e(aae,woo),e(Rg,Aoo),e(Rg,$R),e($R,yoo),e(Rg,Loo),e(k,xoo),e(k,jn),e(jn,nae),e(nae,$oo),e(jn,koo),e(jn,kR),e(kR,Soo),e(jn,Roo),e(jn,SR),e(SR,Poo),e(jn,Boo),e(k,Ioo),e(k,Pg),e(Pg,sae),e(sae,Noo),e(Pg,qoo),e(Pg,RR),e(RR,joo),e(Pg,Doo),e(k,Goo),e(k,Dn),e(Dn,lae),e(lae,Ooo),e(Dn,Voo),e(Dn,PR),e(PR,Xoo),e(Dn,zoo),e(Dn,BR),e(BR,Woo),e(Dn,Qoo),e(k,Hoo),e(k,Gn),e(Gn,iae),e(iae,Uoo),e(Gn,Joo),e(Gn,IR),e(IR,Yoo),e(Gn,Koo),e(Gn,NR),e(NR,Zoo),e(Gn,ero),e(k,oro),e(k,On),e(On,dae),e(dae,rro),e(On,tro),e(On,qR),e(qR,aro),e(On,nro),e(On,jR),e(jR,sro),e(On,lro),e(k,iro),e(k,Bg),e(Bg,cae),e(cae,dro),e(Bg,cro),e(Bg,DR),e(DR,fro),e(Bg,mro),e(k,gro),e(k,Vn),e(Vn,fae),e(fae,hro),e(Vn,pro),e(Vn,GR),e(GR,_ro),e(Vn,uro),e(Vn,OR),e(OR,bro),e(Vn,vro),e(k,Fro),e(k,Xn),e(Xn,mae),e(mae,Tro),e(Xn,Mro),e(Xn,VR),e(VR,Ero),e(Xn,Cro),e(Xn,XR),e(XR,wro),e(Xn,Aro),e(k,yro),e(k,zn),e(zn,gae),e(gae,Lro),e(zn,xro),e(zn,zR),e(zR,$ro),e(zn,kro),e(zn,WR),e(WR,Sro),e(zn,Rro),e(k,Pro),e(k,Wn),e(Wn,hae),e(hae,Bro),e(Wn,Iro),e(Wn,QR),e(QR,Nro),e(Wn,qro),e(Wn,HR),e(HR,jro),e(Wn,Dro),e(k,Gro),e(k,Qn),e(Qn,pae),e(pae,Oro),e(Qn,Vro),e(Qn,UR),e(UR,Xro),e(Qn,zro),e(Qn,JR),e(JR,Wro),e(Qn,Qro),e(k,Hro),e(k,Hn),e(Hn,_ae),e(_ae,Uro),e(Hn,Jro),e(Hn,YR),e(YR,Yro),e(Hn,Kro),e(Hn,KR),e(KR,Zro),e(Hn,eto),e(k,oto),e(k,Ig),e(Ig,uae),e(uae,rto),e(Ig,tto),e(Ig,ZR),e(ZR,ato),e(Ig,nto),e(k,sto),e(k,Un),e(Un,bae),e(bae,lto),e(Un,ito),e(Un,eP),e(eP,dto),e(Un,cto),e(Un,oP),e(oP,fto),e(Un,mto),e(k,gto),e(k,Ng),e(Ng,vae),e(vae,hto),e(Ng,pto),e(Ng,rP),e(rP,_to),e(Ng,uto),e(k,bto),e(k,Jn),e(Jn,Fae),e(Fae,vto),e(Jn,Fto),e(Jn,tP),e(tP,Tto),e(Jn,Mto),e(Jn,aP),e(aP,Eto),e(Jn,Cto),e(k,wto),e(k,Yn),e(Yn,Tae),e(Tae,Ato),e(Yn,yto),e(Yn,nP),e(nP,Lto),e(Yn,xto),e(Yn,sP),e(sP,$to),e(Yn,kto),e(k,Sto),e(k,Kn),e(Kn,Mae),e(Mae,Rto),e(Kn,Pto),e(Kn,lP),e(lP,Bto),e(Kn,Ito),e(Kn,iP),e(iP,Nto),e(Kn,qto),e(k,jto),e(k,qg),e(qg,Eae),e(Eae,Dto),e(qg,Gto),e(qg,dP),e(dP,Oto),e(qg,Vto),e(k,Xto),e(k,Zn),e(Zn,Cae),e(Cae,zto),e(Zn,Wto),e(Zn,cP),e(cP,Qto),e(Zn,Hto),e(Zn,fP),e(fP,Uto),e(Zn,Jto),e(k,Yto),e(k,es),e(es,wae),e(wae,Kto),e(es,Zto),e(es,mP),e(mP,eao),e(es,oao),e(es,gP),e(gP,rao),e(es,tao),e(k,aao),e(k,jg),e(jg,Aae),e(Aae,nao),e(jg,sao),e(jg,hP),e(hP,lao),e(jg,iao),e(k,dao),e(k,os),e(os,yae),e(yae,cao),e(os,fao),e(os,pP),e(pP,mao),e(os,gao),e(os,_P),e(_P,hao),e(os,pao),e(k,_ao),e(k,rs),e(rs,Lae),e(Lae,uao),e(rs,bao),e(rs,uP),e(uP,vao),e(rs,Fao),e(rs,bP),e(bP,Tao),e(rs,Mao),e(k,Eao),e(k,ts),e(ts,xae),e(xae,Cao),e(ts,wao),e(ts,vP),e(vP,Aao),e(ts,yao),e(ts,FP),e(FP,Lao),e(ts,xao),e(k,$ao),e(k,as),e(as,$ae),e($ae,kao),e(as,Sao),e(as,TP),e(TP,Rao),e(as,Pao),e(as,MP),e(MP,Bao),e(as,Iao),e(k,Nao),e(k,ns),e(ns,kae),e(kae,qao),e(ns,jao),e(ns,EP),e(EP,Dao),e(ns,Gao),e(ns,CP),e(CP,Oao),e(ns,Vao),e(k,Xao),e(k,ss),e(ss,Sae),e(Sae,zao),e(ss,Wao),e(ss,wP),e(wP,Qao),e(ss,Hao),e(ss,AP),e(AP,Uao),e(ss,Jao),e(k,Yao),e(k,ls),e(ls,Rae),e(Rae,Kao),e(ls,Zao),e(ls,yP),e(yP,eno),e(ls,ono),e(ls,LP),e(LP,rno),e(ls,tno),e(k,ano),e(k,Dg),e(Dg,Pae),e(Pae,nno),e(Dg,sno),e(Dg,xP),e(xP,lno),e(Dg,ino),e(k,dno),e(k,is),e(is,Bae),e(Bae,cno),e(is,fno),e(is,$P),e($P,mno),e(is,gno),e(is,kP),e(kP,hno),e(is,pno),e(k,_no),e(k,Gg),e(Gg,Iae),e(Iae,uno),e(Gg,bno),e(Gg,SP),e(SP,vno),e(Gg,Fno),e(k,Tno),e(k,Og),e(Og,Nae),e(Nae,Mno),e(Og,Eno),e(Og,RP),e(RP,Cno),e(Og,wno),e(k,Ano),e(k,ds),e(ds,qae),e(qae,yno),e(ds,Lno),e(ds,PP),e(PP,xno),e(ds,$no),e(ds,BP),e(BP,kno),e(ds,Sno),e(k,Rno),e(k,cs),e(cs,jae),e(jae,Pno),e(cs,Bno),e(cs,IP),e(IP,Ino),e(cs,Nno),e(cs,NP),e(NP,qno),e(cs,jno),e(k,Dno),e(k,fs),e(fs,Dae),e(Dae,Gno),e(fs,Ono),e(fs,qP),e(qP,Vno),e(fs,Xno),e(fs,jP),e(jP,zno),e(fs,Wno),e(k,Qno),e(k,Vg),e(Vg,Gae),e(Gae,Hno),e(Vg,Uno),e(Vg,DP),e(DP,Jno),e(Vg,Yno),e(k,Kno),e(k,ms),e(ms,Oae),e(Oae,Zno),e(ms,eso),e(ms,GP),e(GP,oso),e(ms,rso),e(ms,OP),e(OP,tso),e(ms,aso),e(k,nso),e(k,gs),e(gs,Vae),e(Vae,sso),e(gs,lso),e(gs,VP),e(VP,iso),e(gs,dso),e(gs,XP),e(XP,cso),e(gs,fso),e(k,mso),e(k,hs),e(hs,Xae),e(Xae,gso),e(hs,hso),e(hs,zP),e(zP,pso),e(hs,_so),e(hs,WP),e(WP,uso),e(hs,bso),e(k,vso),e(k,ps),e(ps,zae),e(zae,Fso),e(ps,Tso),e(ps,QP),e(QP,Mso),e(ps,Eso),e(ps,HP),e(HP,Cso),e(ps,wso),e(k,Aso),e(k,_s),e(_s,Wae),e(Wae,yso),e(_s,Lso),e(_s,UP),e(UP,xso),e(_s,$so),e(_s,JP),e(JP,kso),e(_s,Sso),e(k,Rso),e(k,Xg),e(Xg,Qae),e(Qae,Pso),e(Xg,Bso),e(Xg,YP),e(YP,Iso),e(Xg,Nso),e(k,qso),e(k,us),e(us,Hae),e(Hae,jso),e(us,Dso),e(us,KP),e(KP,Gso),e(us,Oso),e(us,ZP),e(ZP,Vso),e(us,Xso),e(k,zso),e(k,zg),e(zg,Uae),e(Uae,Wso),e(zg,Qso),e(zg,eB),e(eB,Hso),e(zg,Uso),e(k,Jso),e(k,Wg),e(Wg,Jae),e(Jae,Yso),e(Wg,Kso),e(Wg,oB),e(oB,Zso),e(Wg,elo),e(k,olo),e(k,Qg),e(Qg,Yae),e(Yae,rlo),e(Qg,tlo),e(Qg,rB),e(rB,alo),e(Qg,nlo),e(k,slo),e(k,Hg),e(Hg,Kae),e(Kae,llo),e(Hg,ilo),e(Hg,tB),e(tB,dlo),e(Hg,clo),e(k,flo),e(k,bs),e(bs,Zae),e(Zae,mlo),e(bs,glo),e(bs,aB),e(aB,hlo),e(bs,plo),e(bs,nB),e(nB,_lo),e(bs,ulo),e(k,blo),e(k,Ug),e(Ug,ene),e(ene,vlo),e(Ug,Flo),e(Ug,sB),e(sB,Tlo),e(Ug,Mlo),e(k,Elo),e(k,vs),e(vs,one),e(one,Clo),e(vs,wlo),e(vs,lB),e(lB,Alo),e(vs,ylo),e(vs,iB),e(iB,Llo),e(vs,xlo),e(k,$lo),e(k,Fs),e(Fs,rne),e(rne,klo),e(Fs,Slo),e(Fs,dB),e(dB,Rlo),e(Fs,Plo),e(Fs,cB),e(cB,Blo),e(Fs,Ilo),e(k,Nlo),e(k,Ts),e(Ts,tne),e(tne,qlo),e(Ts,jlo),e(Ts,fB),e(fB,Dlo),e(Ts,Glo),e(Ts,mB),e(mB,Olo),e(Ts,Vlo),e(k,Xlo),e(k,Ms),e(Ms,ane),e(ane,zlo),e(Ms,Wlo),e(Ms,gB),e(gB,Qlo),e(Ms,Hlo),e(Ms,hB),e(hB,Ulo),e(Ms,Jlo),e(k,Ylo),e(k,Es),e(Es,nne),e(nne,Klo),e(Es,Zlo),e(Es,pB),e(pB,eio),e(Es,oio),e(Es,_B),e(_B,rio),e(Es,tio),e(k,aio),e(k,Cs),e(Cs,sne),e(sne,nio),e(Cs,sio),e(Cs,uB),e(uB,lio),e(Cs,iio),e(Cs,bB),e(bB,dio),e(Cs,cio),e(k,fio),e(k,Jg),e(Jg,lne),e(lne,mio),e(Jg,gio),e(Jg,vB),e(vB,hio),e(Jg,pio),e(k,_io),e(k,Yg),e(Yg,ine),e(ine,uio),e(Yg,bio),e(Yg,FB),e(FB,vio),e(Yg,Fio),e(k,Tio),e(k,ws),e(ws,dne),e(dne,Mio),e(ws,Eio),e(ws,TB),e(TB,Cio),e(ws,wio),e(ws,MB),e(MB,Aio),e(ws,yio),e(k,Lio),e(k,As),e(As,cne),e(cne,xio),e(As,$io),e(As,EB),e(EB,kio),e(As,Sio),e(As,CB),e(CB,Rio),e(As,Pio),e(k,Bio),e(k,ys),e(ys,fne),e(fne,Iio),e(ys,Nio),e(ys,wB),e(wB,qio),e(ys,jio),e(ys,AB),e(AB,Dio),e(ys,Gio),e(k,Oio),e(k,Kg),e(Kg,mne),e(mne,Vio),e(Kg,Xio),e(Kg,yB),e(yB,zio),e(Kg,Wio),e(k,Qio),e(k,Zg),e(Zg,gne),e(gne,Hio),e(Zg,Uio),e(Zg,LB),e(LB,Jio),e(Zg,Yio),e(k,Kio),e(k,eh),e(eh,hne),e(hne,Zio),e(eh,edo),e(eh,xB),e(xB,odo),e(eh,rdo),e(k,tdo),e(k,Ls),e(Ls,pne),e(pne,ado),e(Ls,ndo),e(Ls,$B),e($B,sdo),e(Ls,ldo),e(Ls,kB),e(kB,ido),e(Ls,ddo),e(k,cdo),e(k,oh),e(oh,_ne),e(_ne,fdo),e(oh,mdo),e(oh,SB),e(SB,gdo),e(oh,hdo),e(k,pdo),e(k,rh),e(rh,une),e(une,_do),e(rh,udo),e(rh,RB),e(RB,bdo),e(rh,vdo),e(k,Fdo),e(k,th),e(th,bne),e(bne,Tdo),e(th,Mdo),e(th,PB),e(PB,Edo),e(th,Cdo),e(k,wdo),e(k,xs),e(xs,vne),e(vne,Ado),e(xs,ydo),e(xs,BB),e(BB,Ldo),e(xs,xdo),e(xs,IB),e(IB,$do),e(xs,kdo),e(k,Sdo),e(k,ah),e(ah,Fne),e(Fne,Rdo),e(ah,Pdo),e(ah,NB),e(NB,Bdo),e(ah,Ido),e(k,Ndo),e(k,nh),e(nh,Tne),e(Tne,qdo),e(nh,jdo),e(nh,qB),e(qB,Ddo),e(nh,Gdo),e(k,Odo),e(k,$s),e($s,Mne),e(Mne,Vdo),e($s,Xdo),e($s,jB),e(jB,zdo),e($s,Wdo),e($s,DB),e(DB,Qdo),e($s,Hdo),e(k,Udo),e(k,ks),e(ks,Ene),e(Ene,Jdo),e(ks,Ydo),e(ks,GB),e(GB,Kdo),e(ks,Zdo),e(ks,OB),e(OB,eco),e(ks,oco),e(k,rco),e(k,Ss),e(Ss,Cne),e(Cne,tco),e(Ss,aco),e(Ss,VB),e(VB,nco),e(Ss,sco),e(Ss,XB),e(XB,lco),e(Ss,ico),e(k,dco),e(k,Rs),e(Rs,wne),e(wne,cco),e(Rs,fco),e(Rs,zB),e(zB,mco),e(Rs,gco),e(Rs,WB),e(WB,hco),e(Rs,pco),e(Cr,_co),M(sh,Cr,null),e(wo,uco),e(wo,lh),M(JA,lh,null),e(lh,bco),e(lh,Ane),e(Ane,vco),b(f,Qqe,u),b(f,Ei,u),e(Ei,ih),e(ih,yne),M(YA,yne,null),e(Ei,Fco),e(Ei,Lne),e(Lne,Tco),b(f,Hqe,u),b(f,Ao,u),M(KA,Ao,null),e(Ao,Mco),e(Ao,ZA),e(ZA,Eco),e(ZA,QB),e(QB,Cco),e(ZA,wco),e(Ao,Aco),e(Ao,ey),e(ey,yco),e(ey,xne),e(xne,Lco),e(ey,xco),e(Ao,$co),e(Ao,He),M(oy,He,null),e(He,kco),e(He,$ne),e($ne,Sco),e(He,Rco),e(He,La),e(La,Pco),e(La,kne),e(kne,Bco),e(La,Ico),e(La,Sne),e(Sne,Nco),e(La,qco),e(La,Rne),e(Rne,jco),e(La,Dco),e(He,Gco),e(He,Y),e(Y,dh),e(dh,Pne),e(Pne,Oco),e(dh,Vco),e(dh,HB),e(HB,Xco),e(dh,zco),e(Y,Wco),e(Y,ch),e(ch,Bne),e(Bne,Qco),e(ch,Hco),e(ch,UB),e(UB,Uco),e(ch,Jco),e(Y,Yco),e(Y,fh),e(fh,Ine),e(Ine,Kco),e(fh,Zco),e(fh,JB),e(JB,efo),e(fh,ofo),e(Y,rfo),e(Y,mh),e(mh,Nne),e(Nne,tfo),e(mh,afo),e(mh,YB),e(YB,nfo),e(mh,sfo),e(Y,lfo),e(Y,gh),e(gh,qne),e(qne,ifo),e(gh,dfo),e(gh,KB),e(KB,cfo),e(gh,ffo),e(Y,mfo),e(Y,hh),e(hh,jne),e(jne,gfo),e(hh,hfo),e(hh,ZB),e(ZB,pfo),e(hh,_fo),e(Y,ufo),e(Y,ph),e(ph,Dne),e(Dne,bfo),e(ph,vfo),e(ph,eI),e(eI,Ffo),e(ph,Tfo),e(Y,Mfo),e(Y,_h),e(_h,Gne),e(Gne,Efo),e(_h,Cfo),e(_h,oI),e(oI,wfo),e(_h,Afo),e(Y,yfo),e(Y,uh),e(uh,One),e(One,Lfo),e(uh,xfo),e(uh,rI),e(rI,$fo),e(uh,kfo),e(Y,Sfo),e(Y,bh),e(bh,Vne),e(Vne,Rfo),e(bh,Pfo),e(bh,tI),e(tI,Bfo),e(bh,Ifo),e(Y,Nfo),e(Y,vh),e(vh,Xne),e(Xne,qfo),e(vh,jfo),e(vh,aI),e(aI,Dfo),e(vh,Gfo),e(Y,Ofo),e(Y,Fh),e(Fh,zne),e(zne,Vfo),e(Fh,Xfo),e(Fh,nI),e(nI,zfo),e(Fh,Wfo),e(Y,Qfo),e(Y,Th),e(Th,Wne),e(Wne,Hfo),e(Th,Ufo),e(Th,sI),e(sI,Jfo),e(Th,Yfo),e(Y,Kfo),e(Y,Mh),e(Mh,Qne),e(Qne,Zfo),e(Mh,emo),e(Mh,lI),e(lI,omo),e(Mh,rmo),e(Y,tmo),e(Y,Eh),e(Eh,Hne),e(Hne,amo),e(Eh,nmo),e(Eh,iI),e(iI,smo),e(Eh,lmo),e(Y,imo),e(Y,Ch),e(Ch,Une),e(Une,dmo),e(Ch,cmo),e(Ch,dI),e(dI,fmo),e(Ch,mmo),e(Y,gmo),e(Y,wh),e(wh,Jne),e(Jne,hmo),e(wh,pmo),e(wh,cI),e(cI,_mo),e(wh,umo),e(Y,bmo),e(Y,Ah),e(Ah,Yne),e(Yne,vmo),e(Ah,Fmo),e(Ah,fI),e(fI,Tmo),e(Ah,Mmo),e(Y,Emo),e(Y,yh),e(yh,Kne),e(Kne,Cmo),e(yh,wmo),e(yh,mI),e(mI,Amo),e(yh,ymo),e(Y,Lmo),e(Y,Lh),e(Lh,Zne),e(Zne,xmo),e(Lh,$mo),e(Lh,gI),e(gI,kmo),e(Lh,Smo),e(Y,Rmo),e(Y,xh),e(xh,ese),e(ese,Pmo),e(xh,Bmo),e(xh,hI),e(hI,Imo),e(xh,Nmo),e(Y,qmo),e(Y,$h),e($h,ose),e(ose,jmo),e($h,Dmo),e($h,pI),e(pI,Gmo),e($h,Omo),e(Y,Vmo),e(Y,kh),e(kh,rse),e(rse,Xmo),e(kh,zmo),e(kh,_I),e(_I,Wmo),e(kh,Qmo),e(Y,Hmo),e(Y,Sh),e(Sh,tse),e(tse,Umo),e(Sh,Jmo),e(Sh,uI),e(uI,Ymo),e(Sh,Kmo),e(Y,Zmo),e(Y,Rh),e(Rh,ase),e(ase,ego),e(Rh,ogo),e(Rh,bI),e(bI,rgo),e(Rh,tgo),e(Y,ago),e(Y,Ph),e(Ph,nse),e(nse,ngo),e(Ph,sgo),e(Ph,vI),e(vI,lgo),e(Ph,igo),e(Y,dgo),e(Y,Bh),e(Bh,sse),e(sse,cgo),e(Bh,fgo),e(Bh,FI),e(FI,mgo),e(Bh,ggo),e(Y,hgo),e(Y,Ih),e(Ih,lse),e(lse,pgo),e(Ih,_go),e(Ih,TI),e(TI,ugo),e(Ih,bgo),e(Y,vgo),e(Y,Nh),e(Nh,ise),e(ise,Fgo),e(Nh,Tgo),e(Nh,MI),e(MI,Mgo),e(Nh,Ego),e(Y,Cgo),e(Y,qh),e(qh,dse),e(dse,wgo),e(qh,Ago),e(qh,EI),e(EI,ygo),e(qh,Lgo),e(He,xgo),M(jh,He,null),e(He,$go),M(Dh,He,null),e(Ao,kgo),e(Ao,Gh),M(ry,Gh,null),e(Gh,Sgo),e(Gh,cse),e(cse,Rgo),b(f,Uqe,u),b(f,Ci,u),e(Ci,Oh),e(Oh,fse),M(ty,fse,null),e(Ci,Pgo),e(Ci,mse),e(mse,Bgo),b(f,Jqe,u),b(f,yo,u),M(ay,yo,null),e(yo,Igo),e(yo,ny),e(ny,Ngo),e(ny,CI),e(CI,qgo),e(ny,jgo),e(yo,Dgo),e(yo,sy),e(sy,Ggo),e(sy,gse),e(gse,Ogo),e(sy,Vgo),e(yo,Xgo),e(yo,Ue),M(ly,Ue,null),e(Ue,zgo),e(Ue,hse),e(hse,Wgo),e(Ue,Qgo),e(Ue,wi),e(wi,Hgo),e(wi,pse),e(pse,Ugo),e(wi,Jgo),e(wi,_se),e(_se,Ygo),e(wi,Kgo),e(Ue,Zgo),e(Ue,he),e(he,Vh),e(Vh,use),e(use,eho),e(Vh,oho),e(Vh,wI),e(wI,rho),e(Vh,tho),e(he,aho),e(he,Xh),e(Xh,bse),e(bse,nho),e(Xh,sho),e(Xh,vse),e(vse,lho),e(Xh,iho),e(he,dho),e(he,zh),e(zh,Fse),e(Fse,cho),e(zh,fho),e(zh,AI),e(AI,mho),e(zh,gho),e(he,hho),e(he,Wh),e(Wh,Tse),e(Tse,pho),e(Wh,_ho),e(Wh,yI),e(yI,uho),e(Wh,bho),e(he,vho),e(he,Qh),e(Qh,Mse),e(Mse,Fho),e(Qh,Tho),e(Qh,LI),e(LI,Mho),e(Qh,Eho),e(he,Cho),e(he,Hh),e(Hh,Ese),e(Ese,who),e(Hh,Aho),e(Hh,xI),e(xI,yho),e(Hh,Lho),e(he,xho),e(he,Uh),e(Uh,Cse),e(Cse,$ho),e(Uh,kho),e(Uh,$I),e($I,Sho),e(Uh,Rho),e(he,Pho),e(he,Jh),e(Jh,wse),e(wse,Bho),e(Jh,Iho),e(Jh,kI),e(kI,Nho),e(Jh,qho),e(he,jho),e(he,Yh),e(Yh,Ase),e(Ase,Dho),e(Yh,Gho),e(Yh,SI),e(SI,Oho),e(Yh,Vho),e(he,Xho),e(he,Kh),e(Kh,yse),e(yse,zho),e(Kh,Who),e(Kh,RI),e(RI,Qho),e(Kh,Hho),e(he,Uho),e(he,Zh),e(Zh,Lse),e(Lse,Jho),e(Zh,Yho),e(Zh,PI),e(PI,Kho),e(Zh,Zho),e(he,epo),e(he,ep),e(ep,xse),e(xse,opo),e(ep,rpo),e(ep,BI),e(BI,tpo),e(ep,apo),e(he,npo),e(he,op),e(op,$se),e($se,spo),e(op,lpo),e(op,II),e(II,ipo),e(op,dpo),e(he,cpo),e(he,rp),e(rp,kse),e(kse,fpo),e(rp,mpo),e(rp,NI),e(NI,gpo),e(rp,hpo),e(he,ppo),e(he,tp),e(tp,Sse),e(Sse,_po),e(tp,upo),e(tp,qI),e(qI,bpo),e(tp,vpo),e(he,Fpo),e(he,ap),e(ap,Rse),e(Rse,Tpo),e(ap,Mpo),e(ap,jI),e(jI,Epo),e(ap,Cpo),e(he,wpo),e(he,np),e(np,Pse),e(Pse,Apo),e(np,ypo),e(np,DI),e(DI,Lpo),e(np,xpo),e(Ue,$po),M(sp,Ue,null),e(Ue,kpo),M(lp,Ue,null),e(yo,Spo),e(yo,ip),M(iy,ip,null),e(ip,Rpo),e(ip,Bse),e(Bse,Ppo),b(f,Yqe,u),b(f,Ai,u),e(Ai,dp),e(dp,Ise),M(dy,Ise,null),e(Ai,Bpo),e(Ai,Nse),e(Nse,Ipo),b(f,Kqe,u),b(f,Lo,u),M(cy,Lo,null),e(Lo,Npo),e(Lo,yi),e(yi,qpo),e(yi,GI),e(GI,jpo),e(yi,Dpo),e(yi,OI),e(OI,Gpo),e(yi,Opo),e(Lo,Vpo),e(Lo,fy),e(fy,Xpo),e(fy,qse),e(qse,zpo),e(fy,Wpo),e(Lo,Qpo),e(Lo,at),M(my,at,null),e(at,Hpo),e(at,jse),e(jse,Upo),e(at,Jpo),e(at,Li),e(Li,Ypo),e(Li,Dse),e(Dse,Kpo),e(Li,Zpo),e(Li,VI),e(VI,e_o),e(Li,o_o),e(at,r_o),M(cp,at,null),e(Lo,t_o),e(Lo,Je),M(gy,Je,null),e(Je,a_o),e(Je,Gse),e(Gse,n_o),e(Je,s_o),e(Je,xa),e(xa,l_o),e(xa,Ose),e(Ose,i_o),e(xa,d_o),e(xa,Vse),e(Vse,c_o),e(xa,f_o),e(xa,Xse),e(Xse,m_o),e(xa,g_o),e(Je,h_o),e(Je,x),e(x,fp),e(fp,zse),e(zse,p_o),e(fp,__o),e(fp,XI),e(XI,u_o),e(fp,b_o),e(x,v_o),e(x,mp),e(mp,Wse),e(Wse,F_o),e(mp,T_o),e(mp,zI),e(zI,M_o),e(mp,E_o),e(x,C_o),e(x,gp),e(gp,Qse),e(Qse,w_o),e(gp,A_o),e(gp,WI),e(WI,y_o),e(gp,L_o),e(x,x_o),e(x,hp),e(hp,Hse),e(Hse,$_o),e(hp,k_o),e(hp,QI),e(QI,S_o),e(hp,R_o),e(x,P_o),e(x,pp),e(pp,Use),e(Use,B_o),e(pp,I_o),e(pp,HI),e(HI,N_o),e(pp,q_o),e(x,j_o),e(x,_p),e(_p,Jse),e(Jse,D_o),e(_p,G_o),e(_p,UI),e(UI,O_o),e(_p,V_o),e(x,X_o),e(x,up),e(up,Yse),e(Yse,z_o),e(up,W_o),e(up,JI),e(JI,Q_o),e(up,H_o),e(x,U_o),e(x,bp),e(bp,Kse),e(Kse,J_o),e(bp,Y_o),e(bp,YI),e(YI,K_o),e(bp,Z_o),e(x,euo),e(x,vp),e(vp,Zse),e(Zse,ouo),e(vp,ruo),e(vp,KI),e(KI,tuo),e(vp,auo),e(x,nuo),e(x,Fp),e(Fp,ele),e(ele,suo),e(Fp,luo),e(Fp,ZI),e(ZI,iuo),e(Fp,duo),e(x,cuo),e(x,Tp),e(Tp,ole),e(ole,fuo),e(Tp,muo),e(Tp,eN),e(eN,guo),e(Tp,huo),e(x,puo),e(x,Mp),e(Mp,rle),e(rle,_uo),e(Mp,uuo),e(Mp,oN),e(oN,buo),e(Mp,vuo),e(x,Fuo),e(x,Ep),e(Ep,tle),e(tle,Tuo),e(Ep,Muo),e(Ep,rN),e(rN,Euo),e(Ep,Cuo),e(x,wuo),e(x,Cp),e(Cp,ale),e(ale,Auo),e(Cp,yuo),e(Cp,tN),e(tN,Luo),e(Cp,xuo),e(x,$uo),e(x,wp),e(wp,nle),e(nle,kuo),e(wp,Suo),e(wp,aN),e(aN,Ruo),e(wp,Puo),e(x,Buo),e(x,Ap),e(Ap,sle),e(sle,Iuo),e(Ap,Nuo),e(Ap,nN),e(nN,quo),e(Ap,juo),e(x,Duo),e(x,yp),e(yp,lle),e(lle,Guo),e(yp,Ouo),e(yp,sN),e(sN,Vuo),e(yp,Xuo),e(x,zuo),e(x,Lp),e(Lp,ile),e(ile,Wuo),e(Lp,Quo),e(Lp,lN),e(lN,Huo),e(Lp,Uuo),e(x,Juo),e(x,xp),e(xp,dle),e(dle,Yuo),e(xp,Kuo),e(xp,iN),e(iN,Zuo),e(xp,e1o),e(x,o1o),e(x,$p),e($p,cle),e(cle,r1o),e($p,t1o),e($p,dN),e(dN,a1o),e($p,n1o),e(x,s1o),e(x,kp),e(kp,fle),e(fle,l1o),e(kp,i1o),e(kp,cN),e(cN,d1o),e(kp,c1o),e(x,f1o),e(x,Sp),e(Sp,mle),e(mle,m1o),e(Sp,g1o),e(Sp,fN),e(fN,h1o),e(Sp,p1o),e(x,_1o),e(x,Rp),e(Rp,gle),e(gle,u1o),e(Rp,b1o),e(Rp,mN),e(mN,v1o),e(Rp,F1o),e(x,T1o),e(x,Pp),e(Pp,hle),e(hle,M1o),e(Pp,E1o),e(Pp,gN),e(gN,C1o),e(Pp,w1o),e(x,A1o),e(x,Bp),e(Bp,ple),e(ple,y1o),e(Bp,L1o),e(Bp,hN),e(hN,x1o),e(Bp,$1o),e(x,k1o),e(x,Ip),e(Ip,_le),e(_le,S1o),e(Ip,R1o),e(Ip,pN),e(pN,P1o),e(Ip,B1o),e(x,I1o),e(x,Np),e(Np,ule),e(ule,N1o),e(Np,q1o),e(Np,_N),e(_N,j1o),e(Np,D1o),e(x,G1o),e(x,qp),e(qp,ble),e(ble,O1o),e(qp,V1o),e(qp,uN),e(uN,X1o),e(qp,z1o),e(x,W1o),e(x,jp),e(jp,vle),e(vle,Q1o),e(jp,H1o),e(jp,bN),e(bN,U1o),e(jp,J1o),e(x,Y1o),e(x,Dp),e(Dp,Fle),e(Fle,K1o),e(Dp,Z1o),e(Dp,vN),e(vN,ebo),e(Dp,obo),e(x,rbo),e(x,Gp),e(Gp,Tle),e(Tle,tbo),e(Gp,abo),e(Gp,FN),e(FN,nbo),e(Gp,sbo),e(x,lbo),e(x,Op),e(Op,Mle),e(Mle,ibo),e(Op,dbo),e(Op,TN),e(TN,cbo),e(Op,fbo),e(x,mbo),e(x,Ps),e(Ps,Ele),e(Ele,gbo),e(Ps,hbo),e(Ps,MN),e(MN,pbo),e(Ps,_bo),e(Ps,EN),e(EN,ubo),e(Ps,bbo),e(x,vbo),e(x,Vp),e(Vp,Cle),e(Cle,Fbo),e(Vp,Tbo),e(Vp,CN),e(CN,Mbo),e(Vp,Ebo),e(x,Cbo),e(x,Xp),e(Xp,wle),e(wle,wbo),e(Xp,Abo),e(Xp,wN),e(wN,ybo),e(Xp,Lbo),e(x,xbo),e(x,zp),e(zp,Ale),e(Ale,$bo),e(zp,kbo),e(zp,AN),e(AN,Sbo),e(zp,Rbo),e(x,Pbo),e(x,Wp),e(Wp,yle),e(yle,Bbo),e(Wp,Ibo),e(Wp,yN),e(yN,Nbo),e(Wp,qbo),e(x,jbo),e(x,Qp),e(Qp,Lle),e(Lle,Dbo),e(Qp,Gbo),e(Qp,LN),e(LN,Obo),e(Qp,Vbo),e(x,Xbo),e(x,Hp),e(Hp,xle),e(xle,zbo),e(Hp,Wbo),e(Hp,xN),e(xN,Qbo),e(Hp,Hbo),e(x,Ubo),e(x,Up),e(Up,$le),e($le,Jbo),e(Up,Ybo),e(Up,$N),e($N,Kbo),e(Up,Zbo),e(x,e2o),e(x,Jp),e(Jp,kle),e(kle,o2o),e(Jp,r2o),e(Jp,kN),e(kN,t2o),e(Jp,a2o),e(x,n2o),e(x,Yp),e(Yp,Sle),e(Sle,s2o),e(Yp,l2o),e(Yp,SN),e(SN,i2o),e(Yp,d2o),e(x,c2o),e(x,Kp),e(Kp,Rle),e(Rle,f2o),e(Kp,m2o),e(Kp,RN),e(RN,g2o),e(Kp,h2o),e(x,p2o),e(x,Zp),e(Zp,Ple),e(Ple,_2o),e(Zp,u2o),e(Zp,PN),e(PN,b2o),e(Zp,v2o),e(x,F2o),e(x,e_),e(e_,Ble),e(Ble,T2o),e(e_,M2o),e(e_,BN),e(BN,E2o),e(e_,C2o),e(x,w2o),e(x,o_),e(o_,Ile),e(Ile,A2o),e(o_,y2o),e(o_,IN),e(IN,L2o),e(o_,x2o),e(x,$2o),e(x,r_),e(r_,Nle),e(Nle,k2o),e(r_,S2o),e(r_,NN),e(NN,R2o),e(r_,P2o),e(x,B2o),e(x,t_),e(t_,qle),e(qle,I2o),e(t_,N2o),e(t_,qN),e(qN,q2o),e(t_,j2o),e(x,D2o),e(x,a_),e(a_,jle),e(jle,G2o),e(a_,O2o),e(a_,jN),e(jN,V2o),e(a_,X2o),e(x,z2o),e(x,n_),e(n_,Dle),e(Dle,W2o),e(n_,Q2o),e(n_,DN),e(DN,H2o),e(n_,U2o),e(x,J2o),e(x,s_),e(s_,Gle),e(Gle,Y2o),e(s_,K2o),e(s_,GN),e(GN,Z2o),e(s_,e4o),e(x,o4o),e(x,l_),e(l_,Ole),e(Ole,r4o),e(l_,t4o),e(l_,ON),e(ON,a4o),e(l_,n4o),e(x,s4o),e(x,i_),e(i_,Vle),e(Vle,l4o),e(i_,i4o),e(i_,VN),e(VN,d4o),e(i_,c4o),e(x,f4o),e(x,d_),e(d_,Xle),e(Xle,m4o),e(d_,g4o),e(d_,XN),e(XN,h4o),e(d_,p4o),e(x,_4o),e(x,c_),e(c_,zle),e(zle,u4o),e(c_,b4o),e(c_,zN),e(zN,v4o),e(c_,F4o),e(x,T4o),e(x,f_),e(f_,Wle),e(Wle,M4o),e(f_,E4o),e(f_,WN),e(WN,C4o),e(f_,w4o),e(x,A4o),e(x,m_),e(m_,Qle),e(Qle,y4o),e(m_,L4o),e(m_,QN),e(QN,x4o),e(m_,$4o),e(x,k4o),e(x,g_),e(g_,Hle),e(Hle,S4o),e(g_,R4o),e(g_,HN),e(HN,P4o),e(g_,B4o),e(x,I4o),e(x,h_),e(h_,Ule),e(Ule,N4o),e(h_,q4o),e(h_,UN),e(UN,j4o),e(h_,D4o),e(x,G4o),e(x,p_),e(p_,Jle),e(Jle,O4o),e(p_,V4o),e(p_,JN),e(JN,X4o),e(p_,z4o),e(x,W4o),e(x,__),e(__,Yle),e(Yle,Q4o),e(__,H4o),e(__,YN),e(YN,U4o),e(__,J4o),e(x,Y4o),e(x,u_),e(u_,Kle),e(Kle,K4o),e(u_,Z4o),e(u_,KN),e(KN,e5o),e(u_,o5o),e(x,r5o),e(x,b_),e(b_,Zle),e(Zle,t5o),e(b_,a5o),e(b_,ZN),e(ZN,n5o),e(b_,s5o),e(x,l5o),e(x,v_),e(v_,eie),e(eie,i5o),e(v_,d5o),e(v_,eq),e(eq,c5o),e(v_,f5o),e(x,m5o),e(x,F_),e(F_,oie),e(oie,g5o),e(F_,h5o),e(F_,oq),e(oq,p5o),e(F_,_5o),e(x,u5o),e(x,T_),e(T_,rie),e(rie,b5o),e(T_,v5o),e(T_,rq),e(rq,F5o),e(T_,T5o),e(x,M5o),e(x,M_),e(M_,tie),e(tie,E5o),e(M_,C5o),e(M_,tq),e(tq,w5o),e(M_,A5o),e(x,y5o),e(x,E_),e(E_,aie),e(aie,L5o),e(E_,x5o),e(E_,aq),e(aq,$5o),e(E_,k5o),e(x,S5o),e(x,C_),e(C_,nie),e(nie,R5o),e(C_,P5o),e(C_,nq),e(nq,B5o),e(C_,I5o),e(x,N5o),e(x,w_),e(w_,sie),e(sie,q5o),e(w_,j5o),e(w_,sq),e(sq,D5o),e(w_,G5o),e(x,O5o),e(x,A_),e(A_,lie),e(lie,V5o),e(A_,X5o),e(A_,lq),e(lq,z5o),e(A_,W5o),e(x,Q5o),e(x,y_),e(y_,iie),e(iie,H5o),e(y_,U5o),e(y_,iq),e(iq,J5o),e(y_,Y5o),e(x,K5o),e(x,L_),e(L_,die),e(die,Z5o),e(L_,evo),e(L_,dq),e(dq,ovo),e(L_,rvo),e(x,tvo),e(x,x_),e(x_,cie),e(cie,avo),e(x_,nvo),e(x_,cq),e(cq,svo),e(x_,lvo),e(x,ivo),e(x,$_),e($_,fie),e(fie,dvo),e($_,cvo),e($_,fq),e(fq,fvo),e($_,mvo),e(x,gvo),e(x,k_),e(k_,mie),e(mie,hvo),e(k_,pvo),e(k_,mq),e(mq,_vo),e(k_,uvo),e(x,bvo),e(x,S_),e(S_,gie),e(gie,vvo),e(S_,Fvo),e(S_,gq),e(gq,Tvo),e(S_,Mvo),e(x,Evo),e(x,R_),e(R_,hie),e(hie,Cvo),e(R_,wvo),e(R_,hq),e(hq,Avo),e(R_,yvo),e(x,Lvo),e(x,P_),e(P_,pie),e(pie,xvo),e(P_,$vo),e(P_,pq),e(pq,kvo),e(P_,Svo),e(x,Rvo),e(x,B_),e(B_,_ie),e(_ie,Pvo),e(B_,Bvo),e(B_,_q),e(_q,Ivo),e(B_,Nvo),e(x,qvo),e(x,I_),e(I_,uie),e(uie,jvo),e(I_,Dvo),e(I_,uq),e(uq,Gvo),e(I_,Ovo),e(x,Vvo),e(x,N_),e(N_,bie),e(bie,Xvo),e(N_,zvo),e(N_,bq),e(bq,Wvo),e(N_,Qvo),e(x,Hvo),e(x,q_),e(q_,vie),e(vie,Uvo),e(q_,Jvo),e(q_,vq),e(vq,Yvo),e(q_,Kvo),e(x,Zvo),e(x,j_),e(j_,Fie),e(Fie,e3o),e(j_,o3o),e(j_,Fq),e(Fq,r3o),e(j_,t3o),e(x,a3o),e(x,D_),e(D_,Tie),e(Tie,n3o),e(D_,s3o),e(D_,Tq),e(Tq,l3o),e(D_,i3o),e(x,d3o),e(x,G_),e(G_,Mie),e(Mie,c3o),e(G_,f3o),e(G_,Mq),e(Mq,m3o),e(G_,g3o),e(x,h3o),e(x,O_),e(O_,Eie),e(Eie,p3o),e(O_,_3o),e(O_,Eq),e(Eq,u3o),e(O_,b3o),e(x,v3o),e(x,V_),e(V_,Cie),e(Cie,F3o),e(V_,T3o),e(V_,Cq),e(Cq,M3o),e(V_,E3o),e(x,C3o),e(x,X_),e(X_,wie),e(wie,w3o),e(X_,A3o),e(X_,wq),e(wq,y3o),e(X_,L3o),e(x,x3o),e(x,z_),e(z_,Aie),e(Aie,$3o),e(z_,k3o),e(z_,Aq),e(Aq,S3o),e(z_,R3o),e(x,P3o),e(x,W_),e(W_,yie),e(yie,B3o),e(W_,I3o),e(W_,yq),e(yq,N3o),e(W_,q3o),e(x,j3o),e(x,Q_),e(Q_,Lie),e(Lie,D3o),e(Q_,G3o),e(Q_,Lq),e(Lq,O3o),e(Q_,V3o),e(x,X3o),e(x,H_),e(H_,xie),e(xie,z3o),e(H_,W3o),e(H_,xq),e(xq,Q3o),e(H_,H3o),e(x,U3o),e(x,U_),e(U_,$ie),e($ie,J3o),e(U_,Y3o),e(U_,$q),e($q,K3o),e(U_,Z3o),e(x,eFo),e(x,J_),e(J_,kie),e(kie,oFo),e(J_,rFo),e(J_,kq),e(kq,tFo),e(J_,aFo),e(x,nFo),e(x,Y_),e(Y_,Sie),e(Sie,sFo),e(Y_,lFo),e(Y_,Sq),e(Sq,iFo),e(Y_,dFo),e(x,cFo),e(x,K_),e(K_,Rie),e(Rie,fFo),e(K_,mFo),e(K_,Rq),e(Rq,gFo),e(K_,hFo),e(x,pFo),e(x,Z_),e(Z_,Pie),e(Pie,_Fo),e(Z_,uFo),e(Z_,Pq),e(Pq,bFo),e(Z_,vFo),e(x,FFo),e(x,eu),e(eu,Bie),e(Bie,TFo),e(eu,MFo),e(eu,Bq),e(Bq,EFo),e(eu,CFo),e(x,wFo),e(x,ou),e(ou,Iie),e(Iie,AFo),e(ou,yFo),e(ou,Iq),e(Iq,LFo),e(ou,xFo),e(x,$Fo),e(x,ru),e(ru,Nie),e(Nie,kFo),e(ru,SFo),e(ru,Nq),e(Nq,RFo),e(ru,PFo),e(x,BFo),e(x,tu),e(tu,qie),e(qie,IFo),e(tu,NFo),e(tu,qq),e(qq,qFo),e(tu,jFo),e(x,DFo),e(x,au),e(au,jie),e(jie,GFo),e(au,OFo),e(au,jq),e(jq,VFo),e(au,XFo),e(Je,zFo),e(Je,nu),e(nu,WFo),e(nu,Die),e(Die,QFo),e(nu,HFo),e(nu,Gie),e(Gie,UFo),e(Je,JFo),M(su,Je,null),b(f,Zqe,u),b(f,xi,u),e(xi,lu),e(lu,Oie),M(hy,Oie,null),e(xi,YFo),e(xi,Vie),e(Vie,KFo),b(f,eje,u),b(f,xo,u),M(py,xo,null),e(xo,ZFo),e(xo,$i),e($i,eTo),e($i,Dq),e(Dq,oTo),e($i,rTo),e($i,Gq),e(Gq,tTo),e($i,aTo),e(xo,nTo),e(xo,_y),e(_y,sTo),e(_y,Xie),e(Xie,lTo),e(_y,iTo),e(xo,dTo),e(xo,nt),M(uy,nt,null),e(nt,cTo),e(nt,zie),e(zie,fTo),e(nt,mTo),e(nt,ki),e(ki,gTo),e(ki,Wie),e(Wie,hTo),e(ki,pTo),e(ki,Oq),e(Oq,_To),e(ki,uTo),e(nt,bTo),M(iu,nt,null),e(xo,vTo),e(xo,Ye),M(by,Ye,null),e(Ye,FTo),e(Ye,Qie),e(Qie,TTo),e(Ye,MTo),e(Ye,$a),e($a,ETo),e($a,Hie),e(Hie,CTo),e($a,wTo),e($a,Uie),e(Uie,ATo),e($a,yTo),e($a,Jie),e(Jie,LTo),e($a,xTo),e(Ye,$To),e(Ye,G),e(G,du),e(du,Yie),e(Yie,kTo),e(du,STo),e(du,Vq),e(Vq,RTo),e(du,PTo),e(G,BTo),e(G,cu),e(cu,Kie),e(Kie,ITo),e(cu,NTo),e(cu,Xq),e(Xq,qTo),e(cu,jTo),e(G,DTo),e(G,fu),e(fu,Zie),e(Zie,GTo),e(fu,OTo),e(fu,zq),e(zq,VTo),e(fu,XTo),e(G,zTo),e(G,mu),e(mu,ede),e(ede,WTo),e(mu,QTo),e(mu,Wq),e(Wq,HTo),e(mu,UTo),e(G,JTo),e(G,gu),e(gu,ode),e(ode,YTo),e(gu,KTo),e(gu,Qq),e(Qq,ZTo),e(gu,e7o),e(G,o7o),e(G,hu),e(hu,rde),e(rde,r7o),e(hu,t7o),e(hu,Hq),e(Hq,a7o),e(hu,n7o),e(G,s7o),e(G,pu),e(pu,tde),e(tde,l7o),e(pu,i7o),e(pu,Uq),e(Uq,d7o),e(pu,c7o),e(G,f7o),e(G,_u),e(_u,ade),e(ade,m7o),e(_u,g7o),e(_u,Jq),e(Jq,h7o),e(_u,p7o),e(G,_7o),e(G,uu),e(uu,nde),e(nde,u7o),e(uu,b7o),e(uu,Yq),e(Yq,v7o),e(uu,F7o),e(G,T7o),e(G,bu),e(bu,sde),e(sde,M7o),e(bu,E7o),e(bu,Kq),e(Kq,C7o),e(bu,w7o),e(G,A7o),e(G,vu),e(vu,lde),e(lde,y7o),e(vu,L7o),e(vu,Zq),e(Zq,x7o),e(vu,$7o),e(G,k7o),e(G,Fu),e(Fu,ide),e(ide,S7o),e(Fu,R7o),e(Fu,ej),e(ej,P7o),e(Fu,B7o),e(G,I7o),e(G,Tu),e(Tu,dde),e(dde,N7o),e(Tu,q7o),e(Tu,oj),e(oj,j7o),e(Tu,D7o),e(G,G7o),e(G,Mu),e(Mu,cde),e(cde,O7o),e(Mu,V7o),e(Mu,rj),e(rj,X7o),e(Mu,z7o),e(G,W7o),e(G,Eu),e(Eu,fde),e(fde,Q7o),e(Eu,H7o),e(Eu,tj),e(tj,U7o),e(Eu,J7o),e(G,Y7o),e(G,Cu),e(Cu,mde),e(mde,K7o),e(Cu,Z7o),e(Cu,aj),e(aj,eMo),e(Cu,oMo),e(G,rMo),e(G,wu),e(wu,gde),e(gde,tMo),e(wu,aMo),e(wu,nj),e(nj,nMo),e(wu,sMo),e(G,lMo),e(G,Au),e(Au,hde),e(hde,iMo),e(Au,dMo),e(Au,sj),e(sj,cMo),e(Au,fMo),e(G,mMo),e(G,yu),e(yu,pde),e(pde,gMo),e(yu,hMo),e(yu,lj),e(lj,pMo),e(yu,_Mo),e(G,uMo),e(G,Lu),e(Lu,_de),e(_de,bMo),e(Lu,vMo),e(Lu,ij),e(ij,FMo),e(Lu,TMo),e(G,MMo),e(G,xu),e(xu,ude),e(ude,EMo),e(xu,CMo),e(xu,dj),e(dj,wMo),e(xu,AMo),e(G,yMo),e(G,$u),e($u,bde),e(bde,LMo),e($u,xMo),e($u,cj),e(cj,$Mo),e($u,kMo),e(G,SMo),e(G,ku),e(ku,vde),e(vde,RMo),e(ku,PMo),e(ku,fj),e(fj,BMo),e(ku,IMo),e(G,NMo),e(G,Su),e(Su,Fde),e(Fde,qMo),e(Su,jMo),e(Su,mj),e(mj,DMo),e(Su,GMo),e(G,OMo),e(G,Ru),e(Ru,Tde),e(Tde,VMo),e(Ru,XMo),e(Ru,gj),e(gj,zMo),e(Ru,WMo),e(G,QMo),e(G,Pu),e(Pu,Mde),e(Mde,HMo),e(Pu,UMo),e(Pu,hj),e(hj,JMo),e(Pu,YMo),e(G,KMo),e(G,Bu),e(Bu,Ede),e(Ede,ZMo),e(Bu,eEo),e(Bu,pj),e(pj,oEo),e(Bu,rEo),e(G,tEo),e(G,Iu),e(Iu,Cde),e(Cde,aEo),e(Iu,nEo),e(Iu,_j),e(_j,sEo),e(Iu,lEo),e(G,iEo),e(G,Nu),e(Nu,wde),e(wde,dEo),e(Nu,cEo),e(Nu,uj),e(uj,fEo),e(Nu,mEo),e(G,gEo),e(G,qu),e(qu,Ade),e(Ade,hEo),e(qu,pEo),e(qu,bj),e(bj,_Eo),e(qu,uEo),e(G,bEo),e(G,ju),e(ju,yde),e(yde,vEo),e(ju,FEo),e(ju,vj),e(vj,TEo),e(ju,MEo),e(G,EEo),e(G,Du),e(Du,Lde),e(Lde,CEo),e(Du,wEo),e(Du,Fj),e(Fj,AEo),e(Du,yEo),e(G,LEo),e(G,Gu),e(Gu,xde),e(xde,xEo),e(Gu,$Eo),e(Gu,Tj),e(Tj,kEo),e(Gu,SEo),e(G,REo),e(G,Ou),e(Ou,$de),e($de,PEo),e(Ou,BEo),e(Ou,Mj),e(Mj,IEo),e(Ou,NEo),e(G,qEo),e(G,Vu),e(Vu,kde),e(kde,jEo),e(Vu,DEo),e(Vu,Ej),e(Ej,GEo),e(Vu,OEo),e(G,VEo),e(G,Xu),e(Xu,Sde),e(Sde,XEo),e(Xu,zEo),e(Xu,Cj),e(Cj,WEo),e(Xu,QEo),e(G,HEo),e(G,zu),e(zu,Rde),e(Rde,UEo),e(zu,JEo),e(zu,wj),e(wj,YEo),e(zu,KEo),e(G,ZEo),e(G,Wu),e(Wu,Pde),e(Pde,eCo),e(Wu,oCo),e(Wu,Aj),e(Aj,rCo),e(Wu,tCo),e(G,aCo),e(G,Qu),e(Qu,Bde),e(Bde,nCo),e(Qu,sCo),e(Qu,yj),e(yj,lCo),e(Qu,iCo),e(G,dCo),e(G,Hu),e(Hu,Ide),e(Ide,cCo),e(Hu,fCo),e(Hu,Lj),e(Lj,mCo),e(Hu,gCo),e(G,hCo),e(G,Uu),e(Uu,Nde),e(Nde,pCo),e(Uu,_Co),e(Uu,xj),e(xj,uCo),e(Uu,bCo),e(G,vCo),e(G,Ju),e(Ju,qde),e(qde,FCo),e(Ju,TCo),e(Ju,$j),e($j,MCo),e(Ju,ECo),e(Ye,CCo),e(Ye,Yu),e(Yu,wCo),e(Yu,jde),e(jde,ACo),e(Yu,yCo),e(Yu,Dde),e(Dde,LCo),e(Ye,xCo),M(Ku,Ye,null),b(f,oje,u),b(f,Si,u),e(Si,Zu),e(Zu,Gde),M(vy,Gde,null),e(Si,$Co),e(Si,Ode),e(Ode,kCo),b(f,rje,u),b(f,$o,u),M(Fy,$o,null),e($o,SCo),e($o,Ri),e(Ri,RCo),e(Ri,kj),e(kj,PCo),e(Ri,BCo),e(Ri,Sj),e(Sj,ICo),e(Ri,NCo),e($o,qCo),e($o,Ty),e(Ty,jCo),e(Ty,Vde),e(Vde,DCo),e(Ty,GCo),e($o,OCo),e($o,st),M(My,st,null),e(st,VCo),e(st,Xde),e(Xde,XCo),e(st,zCo),e(st,Pi),e(Pi,WCo),e(Pi,zde),e(zde,QCo),e(Pi,HCo),e(Pi,Rj),e(Rj,UCo),e(Pi,JCo),e(st,YCo),M(e1,st,null),e($o,KCo),e($o,Ke),M(Ey,Ke,null),e(Ke,ZCo),e(Ke,Wde),e(Wde,e0o),e(Ke,o0o),e(Ke,ka),e(ka,r0o),e(ka,Qde),e(Qde,t0o),e(ka,a0o),e(ka,Hde),e(Hde,n0o),e(ka,s0o),e(ka,Ude),e(Ude,l0o),e(ka,i0o),e(Ke,d0o),e(Ke,z),e(z,o1),e(o1,Jde),e(Jde,c0o),e(o1,f0o),e(o1,Pj),e(Pj,m0o),e(o1,g0o),e(z,h0o),e(z,r1),e(r1,Yde),e(Yde,p0o),e(r1,_0o),e(r1,Bj),e(Bj,u0o),e(r1,b0o),e(z,v0o),e(z,t1),e(t1,Kde),e(Kde,F0o),e(t1,T0o),e(t1,Ij),e(Ij,M0o),e(t1,E0o),e(z,C0o),e(z,a1),e(a1,Zde),e(Zde,w0o),e(a1,A0o),e(a1,Nj),e(Nj,y0o),e(a1,L0o),e(z,x0o),e(z,n1),e(n1,ece),e(ece,$0o),e(n1,k0o),e(n1,qj),e(qj,S0o),e(n1,R0o),e(z,P0o),e(z,s1),e(s1,oce),e(oce,B0o),e(s1,I0o),e(s1,jj),e(jj,N0o),e(s1,q0o),e(z,j0o),e(z,l1),e(l1,rce),e(rce,D0o),e(l1,G0o),e(l1,Dj),e(Dj,O0o),e(l1,V0o),e(z,X0o),e(z,i1),e(i1,tce),e(tce,z0o),e(i1,W0o),e(i1,Gj),e(Gj,Q0o),e(i1,H0o),e(z,U0o),e(z,d1),e(d1,ace),e(ace,J0o),e(d1,Y0o),e(d1,Oj),e(Oj,K0o),e(d1,Z0o),e(z,ewo),e(z,c1),e(c1,nce),e(nce,owo),e(c1,rwo),e(c1,Vj),e(Vj,two),e(c1,awo),e(z,nwo),e(z,f1),e(f1,sce),e(sce,swo),e(f1,lwo),e(f1,Xj),e(Xj,iwo),e(f1,dwo),e(z,cwo),e(z,m1),e(m1,lce),e(lce,fwo),e(m1,mwo),e(m1,zj),e(zj,gwo),e(m1,hwo),e(z,pwo),e(z,g1),e(g1,ice),e(ice,_wo),e(g1,uwo),e(g1,Wj),e(Wj,bwo),e(g1,vwo),e(z,Fwo),e(z,h1),e(h1,dce),e(dce,Two),e(h1,Mwo),e(h1,Qj),e(Qj,Ewo),e(h1,Cwo),e(z,wwo),e(z,p1),e(p1,cce),e(cce,Awo),e(p1,ywo),e(p1,Hj),e(Hj,Lwo),e(p1,xwo),e(z,$wo),e(z,_1),e(_1,fce),e(fce,kwo),e(_1,Swo),e(_1,Uj),e(Uj,Rwo),e(_1,Pwo),e(z,Bwo),e(z,u1),e(u1,mce),e(mce,Iwo),e(u1,Nwo),e(u1,Jj),e(Jj,qwo),e(u1,jwo),e(z,Dwo),e(z,b1),e(b1,gce),e(gce,Gwo),e(b1,Owo),e(b1,Yj),e(Yj,Vwo),e(b1,Xwo),e(z,zwo),e(z,v1),e(v1,hce),e(hce,Wwo),e(v1,Qwo),e(v1,Kj),e(Kj,Hwo),e(v1,Uwo),e(z,Jwo),e(z,F1),e(F1,pce),e(pce,Ywo),e(F1,Kwo),e(F1,Zj),e(Zj,Zwo),e(F1,e6o),e(z,o6o),e(z,T1),e(T1,_ce),e(_ce,r6o),e(T1,t6o),e(T1,eD),e(eD,a6o),e(T1,n6o),e(z,s6o),e(z,M1),e(M1,uce),e(uce,l6o),e(M1,i6o),e(M1,oD),e(oD,d6o),e(M1,c6o),e(z,f6o),e(z,E1),e(E1,bce),e(bce,m6o),e(E1,g6o),e(E1,rD),e(rD,h6o),e(E1,p6o),e(z,_6o),e(z,C1),e(C1,vce),e(vce,u6o),e(C1,b6o),e(C1,tD),e(tD,v6o),e(C1,F6o),e(z,T6o),e(z,w1),e(w1,Fce),e(Fce,M6o),e(w1,E6o),e(w1,aD),e(aD,C6o),e(w1,w6o),e(z,A6o),e(z,A1),e(A1,Tce),e(Tce,y6o),e(A1,L6o),e(A1,nD),e(nD,x6o),e(A1,$6o),e(z,k6o),e(z,y1),e(y1,Mce),e(Mce,S6o),e(y1,R6o),e(y1,sD),e(sD,P6o),e(y1,B6o),e(z,I6o),e(z,L1),e(L1,Ece),e(Ece,N6o),e(L1,q6o),e(L1,lD),e(lD,j6o),e(L1,D6o),e(z,G6o),e(z,x1),e(x1,Cce),e(Cce,O6o),e(x1,V6o),e(x1,iD),e(iD,X6o),e(x1,z6o),e(z,W6o),e(z,$1),e($1,wce),e(wce,Q6o),e($1,H6o),e($1,dD),e(dD,U6o),e($1,J6o),e(z,Y6o),e(z,k1),e(k1,Ace),e(Ace,K6o),e(k1,Z6o),e(k1,cD),e(cD,eAo),e(k1,oAo),e(z,rAo),e(z,S1),e(S1,yce),e(yce,tAo),e(S1,aAo),e(S1,fD),e(fD,nAo),e(S1,sAo),e(z,lAo),e(z,R1),e(R1,Lce),e(Lce,iAo),e(R1,dAo),e(R1,mD),e(mD,cAo),e(R1,fAo),e(z,mAo),e(z,P1),e(P1,xce),e(xce,gAo),e(P1,hAo),e(P1,gD),e(gD,pAo),e(P1,_Ao),e(z,uAo),e(z,B1),e(B1,$ce),e($ce,bAo),e(B1,vAo),e(B1,hD),e(hD,FAo),e(B1,TAo),e(z,MAo),e(z,I1),e(I1,kce),e(kce,EAo),e(I1,CAo),e(I1,pD),e(pD,wAo),e(I1,AAo),e(z,yAo),e(z,N1),e(N1,Sce),e(Sce,LAo),e(N1,xAo),e(N1,_D),e(_D,$Ao),e(N1,kAo),e(Ke,SAo),e(Ke,q1),e(q1,RAo),e(q1,Rce),e(Rce,PAo),e(q1,BAo),e(q1,Pce),e(Pce,IAo),e(Ke,NAo),M(j1,Ke,null),b(f,tje,u),b(f,Bi,u),e(Bi,D1),e(D1,Bce),M(Cy,Bce,null),e(Bi,qAo),e(Bi,Ice),e(Ice,jAo),b(f,aje,u),b(f,ko,u),M(wy,ko,null),e(ko,DAo),e(ko,Ii),e(Ii,GAo),e(Ii,uD),e(uD,OAo),e(Ii,VAo),e(Ii,bD),e(bD,XAo),e(Ii,zAo),e(ko,WAo),e(ko,Ay),e(Ay,QAo),e(Ay,Nce),e(Nce,HAo),e(Ay,UAo),e(ko,JAo),e(ko,lt),M(yy,lt,null),e(lt,YAo),e(lt,qce),e(qce,KAo),e(lt,ZAo),e(lt,Ni),e(Ni,eyo),e(Ni,jce),e(jce,oyo),e(Ni,ryo),e(Ni,vD),e(vD,tyo),e(Ni,ayo),e(lt,nyo),M(G1,lt,null),e(ko,syo),e(ko,Ze),M(Ly,Ze,null),e(Ze,lyo),e(Ze,Dce),e(Dce,iyo),e(Ze,dyo),e(Ze,Sa),e(Sa,cyo),e(Sa,Gce),e(Gce,fyo),e(Sa,myo),e(Sa,Oce),e(Oce,gyo),e(Sa,hyo),e(Sa,Vce),e(Vce,pyo),e(Sa,_yo),e(Ze,uyo),e(Ze,W),e(W,O1),e(O1,Xce),e(Xce,byo),e(O1,vyo),e(O1,FD),e(FD,Fyo),e(O1,Tyo),e(W,Myo),e(W,V1),e(V1,zce),e(zce,Eyo),e(V1,Cyo),e(V1,TD),e(TD,wyo),e(V1,Ayo),e(W,yyo),e(W,X1),e(X1,Wce),e(Wce,Lyo),e(X1,xyo),e(X1,MD),e(MD,$yo),e(X1,kyo),e(W,Syo),e(W,z1),e(z1,Qce),e(Qce,Ryo),e(z1,Pyo),e(z1,ED),e(ED,Byo),e(z1,Iyo),e(W,Nyo),e(W,W1),e(W1,Hce),e(Hce,qyo),e(W1,jyo),e(W1,CD),e(CD,Dyo),e(W1,Gyo),e(W,Oyo),e(W,Q1),e(Q1,Uce),e(Uce,Vyo),e(Q1,Xyo),e(Q1,wD),e(wD,zyo),e(Q1,Wyo),e(W,Qyo),e(W,H1),e(H1,Jce),e(Jce,Hyo),e(H1,Uyo),e(H1,AD),e(AD,Jyo),e(H1,Yyo),e(W,Kyo),e(W,U1),e(U1,Yce),e(Yce,Zyo),e(U1,eLo),e(U1,yD),e(yD,oLo),e(U1,rLo),e(W,tLo),e(W,J1),e(J1,Kce),e(Kce,aLo),e(J1,nLo),e(J1,LD),e(LD,sLo),e(J1,lLo),e(W,iLo),e(W,Y1),e(Y1,Zce),e(Zce,dLo),e(Y1,cLo),e(Y1,xD),e(xD,fLo),e(Y1,mLo),e(W,gLo),e(W,K1),e(K1,efe),e(efe,hLo),e(K1,pLo),e(K1,$D),e($D,_Lo),e(K1,uLo),e(W,bLo),e(W,Z1),e(Z1,ofe),e(ofe,vLo),e(Z1,FLo),e(Z1,kD),e(kD,TLo),e(Z1,MLo),e(W,ELo),e(W,eb),e(eb,rfe),e(rfe,CLo),e(eb,wLo),e(eb,SD),e(SD,ALo),e(eb,yLo),e(W,LLo),e(W,ob),e(ob,tfe),e(tfe,xLo),e(ob,$Lo),e(ob,RD),e(RD,kLo),e(ob,SLo),e(W,RLo),e(W,rb),e(rb,afe),e(afe,PLo),e(rb,BLo),e(rb,PD),e(PD,ILo),e(rb,NLo),e(W,qLo),e(W,tb),e(tb,nfe),e(nfe,jLo),e(tb,DLo),e(tb,BD),e(BD,GLo),e(tb,OLo),e(W,VLo),e(W,ab),e(ab,sfe),e(sfe,XLo),e(ab,zLo),e(ab,ID),e(ID,WLo),e(ab,QLo),e(W,HLo),e(W,nb),e(nb,lfe),e(lfe,ULo),e(nb,JLo),e(nb,ND),e(ND,YLo),e(nb,KLo),e(W,ZLo),e(W,sb),e(sb,ife),e(ife,e8o),e(sb,o8o),e(sb,qD),e(qD,r8o),e(sb,t8o),e(W,a8o),e(W,lb),e(lb,dfe),e(dfe,n8o),e(lb,s8o),e(lb,jD),e(jD,l8o),e(lb,i8o),e(W,d8o),e(W,ib),e(ib,cfe),e(cfe,c8o),e(ib,f8o),e(ib,DD),e(DD,m8o),e(ib,g8o),e(W,h8o),e(W,db),e(db,ffe),e(ffe,p8o),e(db,_8o),e(db,GD),e(GD,u8o),e(db,b8o),e(W,v8o),e(W,cb),e(cb,mfe),e(mfe,F8o),e(cb,T8o),e(cb,OD),e(OD,M8o),e(cb,E8o),e(W,C8o),e(W,fb),e(fb,gfe),e(gfe,w8o),e(fb,A8o),e(fb,VD),e(VD,y8o),e(fb,L8o),e(W,x8o),e(W,mb),e(mb,hfe),e(hfe,$8o),e(mb,k8o),e(mb,XD),e(XD,S8o),e(mb,R8o),e(W,P8o),e(W,gb),e(gb,pfe),e(pfe,B8o),e(gb,I8o),e(gb,zD),e(zD,N8o),e(gb,q8o),e(W,j8o),e(W,hb),e(hb,_fe),e(_fe,D8o),e(hb,G8o),e(hb,WD),e(WD,O8o),e(hb,V8o),e(W,X8o),e(W,pb),e(pb,ufe),e(ufe,z8o),e(pb,W8o),e(pb,QD),e(QD,Q8o),e(pb,H8o),e(W,U8o),e(W,_b),e(_b,bfe),e(bfe,J8o),e(_b,Y8o),e(_b,HD),e(HD,K8o),e(_b,Z8o),e(W,e9o),e(W,ub),e(ub,vfe),e(vfe,o9o),e(ub,r9o),e(ub,UD),e(UD,t9o),e(ub,a9o),e(W,n9o),e(W,bb),e(bb,Ffe),e(Ffe,s9o),e(bb,l9o),e(bb,JD),e(JD,i9o),e(bb,d9o),e(W,c9o),e(W,vb),e(vb,Tfe),e(Tfe,f9o),e(vb,m9o),e(vb,Mfe),e(Mfe,g9o),e(vb,h9o),e(W,p9o),e(W,Fb),e(Fb,Efe),e(Efe,_9o),e(Fb,u9o),e(Fb,YD),e(YD,b9o),e(Fb,v9o),e(W,F9o),e(W,Tb),e(Tb,Cfe),e(Cfe,T9o),e(Tb,M9o),e(Tb,KD),e(KD,E9o),e(Tb,C9o),e(W,w9o),e(W,Mb),e(Mb,wfe),e(wfe,A9o),e(Mb,y9o),e(Mb,ZD),e(ZD,L9o),e(Mb,x9o),e(W,$9o),e(W,Eb),e(Eb,Afe),e(Afe,k9o),e(Eb,S9o),e(Eb,eG),e(eG,R9o),e(Eb,P9o),e(Ze,B9o),e(Ze,Cb),e(Cb,I9o),e(Cb,yfe),e(yfe,N9o),e(Cb,q9o),e(Cb,Lfe),e(Lfe,j9o),e(Ze,D9o),M(wb,Ze,null),b(f,nje,u),b(f,qi,u),e(qi,Ab),e(Ab,xfe),M(xy,xfe,null),e(qi,G9o),e(qi,$fe),e($fe,O9o),b(f,sje,u),b(f,So,u),M($y,So,null),e(So,V9o),e(So,ji),e(ji,X9o),e(ji,oG),e(oG,z9o),e(ji,W9o),e(ji,rG),e(rG,Q9o),e(ji,H9o),e(So,U9o),e(So,ky),e(ky,J9o),e(ky,kfe),e(kfe,Y9o),e(ky,K9o),e(So,Z9o),e(So,it),M(Sy,it,null),e(it,exo),e(it,Sfe),e(Sfe,oxo),e(it,rxo),e(it,Di),e(Di,txo),e(Di,Rfe),e(Rfe,axo),e(Di,nxo),e(Di,tG),e(tG,sxo),e(Di,lxo),e(it,ixo),M(yb,it,null),e(So,dxo),e(So,eo),M(Ry,eo,null),e(eo,cxo),e(eo,Pfe),e(Pfe,fxo),e(eo,mxo),e(eo,Ra),e(Ra,gxo),e(Ra,Bfe),e(Bfe,hxo),e(Ra,pxo),e(Ra,Ife),e(Ife,_xo),e(Ra,uxo),e(Ra,Nfe),e(Nfe,bxo),e(Ra,vxo),e(eo,Fxo),e(eo,_e),e(_e,Lb),e(Lb,qfe),e(qfe,Txo),e(Lb,Mxo),e(Lb,aG),e(aG,Exo),e(Lb,Cxo),e(_e,wxo),e(_e,xb),e(xb,jfe),e(jfe,Axo),e(xb,yxo),e(xb,nG),e(nG,Lxo),e(xb,xxo),e(_e,$xo),e(_e,$b),e($b,Dfe),e(Dfe,kxo),e($b,Sxo),e($b,sG),e(sG,Rxo),e($b,Pxo),e(_e,Bxo),e(_e,kb),e(kb,Gfe),e(Gfe,Ixo),e(kb,Nxo),e(kb,lG),e(lG,qxo),e(kb,jxo),e(_e,Dxo),e(_e,Sb),e(Sb,Ofe),e(Ofe,Gxo),e(Sb,Oxo),e(Sb,iG),e(iG,Vxo),e(Sb,Xxo),e(_e,zxo),e(_e,Rb),e(Rb,Vfe),e(Vfe,Wxo),e(Rb,Qxo),e(Rb,dG),e(dG,Hxo),e(Rb,Uxo),e(_e,Jxo),e(_e,Pb),e(Pb,Xfe),e(Xfe,Yxo),e(Pb,Kxo),e(Pb,cG),e(cG,Zxo),e(Pb,e$o),e(_e,o$o),e(_e,Bb),e(Bb,zfe),e(zfe,r$o),e(Bb,t$o),e(Bb,fG),e(fG,a$o),e(Bb,n$o),e(_e,s$o),e(_e,Ib),e(Ib,Wfe),e(Wfe,l$o),e(Ib,i$o),e(Ib,mG),e(mG,d$o),e(Ib,c$o),e(_e,f$o),e(_e,Nb),e(Nb,Qfe),e(Qfe,m$o),e(Nb,g$o),e(Nb,gG),e(gG,h$o),e(Nb,p$o),e(_e,_$o),e(_e,qb),e(qb,Hfe),e(Hfe,u$o),e(qb,b$o),e(qb,hG),e(hG,v$o),e(qb,F$o),e(_e,T$o),e(_e,jb),e(jb,Ufe),e(Ufe,M$o),e(jb,E$o),e(jb,pG),e(pG,C$o),e(jb,w$o),e(_e,A$o),e(_e,Db),e(Db,Jfe),e(Jfe,y$o),e(Db,L$o),e(Db,_G),e(_G,x$o),e(Db,$$o),e(_e,k$o),e(_e,Gb),e(Gb,Yfe),e(Yfe,S$o),e(Gb,R$o),e(Gb,uG),e(uG,P$o),e(Gb,B$o),e(_e,I$o),e(_e,Ob),e(Ob,Kfe),e(Kfe,N$o),e(Ob,q$o),e(Ob,bG),e(bG,j$o),e(Ob,D$o),e(_e,G$o),e(_e,Vb),e(Vb,Zfe),e(Zfe,O$o),e(Vb,V$o),e(Vb,vG),e(vG,X$o),e(Vb,z$o),e(eo,W$o),e(eo,Xb),e(Xb,Q$o),e(Xb,eme),e(eme,H$o),e(Xb,U$o),e(Xb,ome),e(ome,J$o),e(eo,Y$o),M(zb,eo,null),b(f,lje,u),b(f,Gi,u),e(Gi,Wb),e(Wb,rme),M(Py,rme,null),e(Gi,K$o),e(Gi,tme),e(tme,Z$o),b(f,ije,u),b(f,Ro,u),M(By,Ro,null),e(Ro,eko),e(Ro,Oi),e(Oi,oko),e(Oi,FG),e(FG,rko),e(Oi,tko),e(Oi,TG),e(TG,ako),e(Oi,nko),e(Ro,sko),e(Ro,Iy),e(Iy,lko),e(Iy,ame),e(ame,iko),e(Iy,dko),e(Ro,cko),e(Ro,dt),M(Ny,dt,null),e(dt,fko),e(dt,nme),e(nme,mko),e(dt,gko),e(dt,Vi),e(Vi,hko),e(Vi,sme),e(sme,pko),e(Vi,_ko),e(Vi,MG),e(MG,uko),e(Vi,bko),e(dt,vko),M(Qb,dt,null),e(Ro,Fko),e(Ro,oo),M(qy,oo,null),e(oo,Tko),e(oo,lme),e(lme,Mko),e(oo,Eko),e(oo,Pa),e(Pa,Cko),e(Pa,ime),e(ime,wko),e(Pa,Ako),e(Pa,dme),e(dme,yko),e(Pa,Lko),e(Pa,cme),e(cme,xko),e(Pa,$ko),e(oo,kko),e(oo,N),e(N,Hb),e(Hb,fme),e(fme,Sko),e(Hb,Rko),e(Hb,EG),e(EG,Pko),e(Hb,Bko),e(N,Iko),e(N,Ub),e(Ub,mme),e(mme,Nko),e(Ub,qko),e(Ub,CG),e(CG,jko),e(Ub,Dko),e(N,Gko),e(N,Jb),e(Jb,gme),e(gme,Oko),e(Jb,Vko),e(Jb,wG),e(wG,Xko),e(Jb,zko),e(N,Wko),e(N,Yb),e(Yb,hme),e(hme,Qko),e(Yb,Hko),e(Yb,AG),e(AG,Uko),e(Yb,Jko),e(N,Yko),e(N,Kb),e(Kb,pme),e(pme,Kko),e(Kb,Zko),e(Kb,yG),e(yG,eSo),e(Kb,oSo),e(N,rSo),e(N,Zb),e(Zb,_me),e(_me,tSo),e(Zb,aSo),e(Zb,LG),e(LG,nSo),e(Zb,sSo),e(N,lSo),e(N,e2),e(e2,ume),e(ume,iSo),e(e2,dSo),e(e2,xG),e(xG,cSo),e(e2,fSo),e(N,mSo),e(N,o2),e(o2,bme),e(bme,gSo),e(o2,hSo),e(o2,$G),e($G,pSo),e(o2,_So),e(N,uSo),e(N,r2),e(r2,vme),e(vme,bSo),e(r2,vSo),e(r2,kG),e(kG,FSo),e(r2,TSo),e(N,MSo),e(N,t2),e(t2,Fme),e(Fme,ESo),e(t2,CSo),e(t2,SG),e(SG,wSo),e(t2,ASo),e(N,ySo),e(N,a2),e(a2,Tme),e(Tme,LSo),e(a2,xSo),e(a2,RG),e(RG,$So),e(a2,kSo),e(N,SSo),e(N,n2),e(n2,Mme),e(Mme,RSo),e(n2,PSo),e(n2,PG),e(PG,BSo),e(n2,ISo),e(N,NSo),e(N,s2),e(s2,Eme),e(Eme,qSo),e(s2,jSo),e(s2,BG),e(BG,DSo),e(s2,GSo),e(N,OSo),e(N,l2),e(l2,Cme),e(Cme,VSo),e(l2,XSo),e(l2,IG),e(IG,zSo),e(l2,WSo),e(N,QSo),e(N,i2),e(i2,wme),e(wme,HSo),e(i2,USo),e(i2,NG),e(NG,JSo),e(i2,YSo),e(N,KSo),e(N,d2),e(d2,Ame),e(Ame,ZSo),e(d2,eRo),e(d2,qG),e(qG,oRo),e(d2,rRo),e(N,tRo),e(N,c2),e(c2,yme),e(yme,aRo),e(c2,nRo),e(c2,jG),e(jG,sRo),e(c2,lRo),e(N,iRo),e(N,f2),e(f2,Lme),e(Lme,dRo),e(f2,cRo),e(f2,DG),e(DG,fRo),e(f2,mRo),e(N,gRo),e(N,m2),e(m2,xme),e(xme,hRo),e(m2,pRo),e(m2,GG),e(GG,_Ro),e(m2,uRo),e(N,bRo),e(N,g2),e(g2,$me),e($me,vRo),e(g2,FRo),e(g2,OG),e(OG,TRo),e(g2,MRo),e(N,ERo),e(N,h2),e(h2,kme),e(kme,CRo),e(h2,wRo),e(h2,VG),e(VG,ARo),e(h2,yRo),e(N,LRo),e(N,p2),e(p2,Sme),e(Sme,xRo),e(p2,$Ro),e(p2,XG),e(XG,kRo),e(p2,SRo),e(N,RRo),e(N,_2),e(_2,Rme),e(Rme,PRo),e(_2,BRo),e(_2,zG),e(zG,IRo),e(_2,NRo),e(N,qRo),e(N,u2),e(u2,Pme),e(Pme,jRo),e(u2,DRo),e(u2,WG),e(WG,GRo),e(u2,ORo),e(N,VRo),e(N,b2),e(b2,Bme),e(Bme,XRo),e(b2,zRo),e(b2,QG),e(QG,WRo),e(b2,QRo),e(N,HRo),e(N,v2),e(v2,Ime),e(Ime,URo),e(v2,JRo),e(v2,HG),e(HG,YRo),e(v2,KRo),e(N,ZRo),e(N,F2),e(F2,Nme),e(Nme,ePo),e(F2,oPo),e(F2,UG),e(UG,rPo),e(F2,tPo),e(N,aPo),e(N,T2),e(T2,qme),e(qme,nPo),e(T2,sPo),e(T2,JG),e(JG,lPo),e(T2,iPo),e(N,dPo),e(N,M2),e(M2,jme),e(jme,cPo),e(M2,fPo),e(M2,YG),e(YG,mPo),e(M2,gPo),e(N,hPo),e(N,E2),e(E2,Dme),e(Dme,pPo),e(E2,_Po),e(E2,KG),e(KG,uPo),e(E2,bPo),e(N,vPo),e(N,C2),e(C2,Gme),e(Gme,FPo),e(C2,TPo),e(C2,ZG),e(ZG,MPo),e(C2,EPo),e(N,CPo),e(N,w2),e(w2,Ome),e(Ome,wPo),e(w2,APo),e(w2,eO),e(eO,yPo),e(w2,LPo),e(N,xPo),e(N,A2),e(A2,Vme),e(Vme,$Po),e(A2,kPo),e(A2,oO),e(oO,SPo),e(A2,RPo),e(N,PPo),e(N,y2),e(y2,Xme),e(Xme,BPo),e(y2,IPo),e(y2,rO),e(rO,NPo),e(y2,qPo),e(N,jPo),e(N,L2),e(L2,zme),e(zme,DPo),e(L2,GPo),e(L2,tO),e(tO,OPo),e(L2,VPo),e(N,XPo),e(N,x2),e(x2,Wme),e(Wme,zPo),e(x2,WPo),e(x2,aO),e(aO,QPo),e(x2,HPo),e(N,UPo),e(N,$2),e($2,Qme),e(Qme,JPo),e($2,YPo),e($2,nO),e(nO,KPo),e($2,ZPo),e(N,eBo),e(N,k2),e(k2,Hme),e(Hme,oBo),e(k2,rBo),e(k2,sO),e(sO,tBo),e(k2,aBo),e(N,nBo),e(N,S2),e(S2,Ume),e(Ume,sBo),e(S2,lBo),e(S2,lO),e(lO,iBo),e(S2,dBo),e(N,cBo),e(N,R2),e(R2,Jme),e(Jme,fBo),e(R2,mBo),e(R2,iO),e(iO,gBo),e(R2,hBo),e(N,pBo),e(N,P2),e(P2,Yme),e(Yme,_Bo),e(P2,uBo),e(P2,dO),e(dO,bBo),e(P2,vBo),e(N,FBo),e(N,B2),e(B2,Kme),e(Kme,TBo),e(B2,MBo),e(B2,cO),e(cO,EBo),e(B2,CBo),e(N,wBo),e(N,I2),e(I2,Zme),e(Zme,ABo),e(I2,yBo),e(I2,fO),e(fO,LBo),e(I2,xBo),e(N,$Bo),e(N,N2),e(N2,ege),e(ege,kBo),e(N2,SBo),e(N2,mO),e(mO,RBo),e(N2,PBo),e(N,BBo),e(N,q2),e(q2,oge),e(oge,IBo),e(q2,NBo),e(q2,gO),e(gO,qBo),e(q2,jBo),e(N,DBo),e(N,j2),e(j2,rge),e(rge,GBo),e(j2,OBo),e(j2,hO),e(hO,VBo),e(j2,XBo),e(N,zBo),e(N,D2),e(D2,tge),e(tge,WBo),e(D2,QBo),e(D2,pO),e(pO,HBo),e(D2,UBo),e(oo,JBo),e(oo,G2),e(G2,YBo),e(G2,age),e(age,KBo),e(G2,ZBo),e(G2,nge),e(nge,eIo),e(oo,oIo),M(O2,oo,null),b(f,dje,u),b(f,Xi,u),e(Xi,V2),e(V2,sge),M(jy,sge,null),e(Xi,rIo),e(Xi,lge),e(lge,tIo),b(f,cje,u),b(f,Po,u),M(Dy,Po,null),e(Po,aIo),e(Po,zi),e(zi,nIo),e(zi,_O),e(_O,sIo),e(zi,lIo),e(zi,uO),e(uO,iIo),e(zi,dIo),e(Po,cIo),e(Po,Gy),e(Gy,fIo),e(Gy,ige),e(ige,mIo),e(Gy,gIo),e(Po,hIo),e(Po,ct),M(Oy,ct,null),e(ct,pIo),e(ct,dge),e(dge,_Io),e(ct,uIo),e(ct,Wi),e(Wi,bIo),e(Wi,cge),e(cge,vIo),e(Wi,FIo),e(Wi,bO),e(bO,TIo),e(Wi,MIo),e(ct,EIo),M(X2,ct,null),e(Po,CIo),e(Po,ro),M(Vy,ro,null),e(ro,wIo),e(ro,fge),e(fge,AIo),e(ro,yIo),e(ro,Ba),e(Ba,LIo),e(Ba,mge),e(mge,xIo),e(Ba,$Io),e(Ba,gge),e(gge,kIo),e(Ba,SIo),e(Ba,hge),e(hge,RIo),e(Ba,PIo),e(ro,BIo),e(ro,K),e(K,z2),e(z2,pge),e(pge,IIo),e(z2,NIo),e(z2,vO),e(vO,qIo),e(z2,jIo),e(K,DIo),e(K,W2),e(W2,_ge),e(_ge,GIo),e(W2,OIo),e(W2,FO),e(FO,VIo),e(W2,XIo),e(K,zIo),e(K,Q2),e(Q2,uge),e(uge,WIo),e(Q2,QIo),e(Q2,TO),e(TO,HIo),e(Q2,UIo),e(K,JIo),e(K,H2),e(H2,bge),e(bge,YIo),e(H2,KIo),e(H2,MO),e(MO,ZIo),e(H2,eNo),e(K,oNo),e(K,U2),e(U2,vge),e(vge,rNo),e(U2,tNo),e(U2,EO),e(EO,aNo),e(U2,nNo),e(K,sNo),e(K,J2),e(J2,Fge),e(Fge,lNo),e(J2,iNo),e(J2,CO),e(CO,dNo),e(J2,cNo),e(K,fNo),e(K,Y2),e(Y2,Tge),e(Tge,mNo),e(Y2,gNo),e(Y2,wO),e(wO,hNo),e(Y2,pNo),e(K,_No),e(K,K2),e(K2,Mge),e(Mge,uNo),e(K2,bNo),e(K2,AO),e(AO,vNo),e(K2,FNo),e(K,TNo),e(K,Z2),e(Z2,Ege),e(Ege,MNo),e(Z2,ENo),e(Z2,yO),e(yO,CNo),e(Z2,wNo),e(K,ANo),e(K,e4),e(e4,Cge),e(Cge,yNo),e(e4,LNo),e(e4,LO),e(LO,xNo),e(e4,$No),e(K,kNo),e(K,o4),e(o4,wge),e(wge,SNo),e(o4,RNo),e(o4,xO),e(xO,PNo),e(o4,BNo),e(K,INo),e(K,r4),e(r4,Age),e(Age,NNo),e(r4,qNo),e(r4,$O),e($O,jNo),e(r4,DNo),e(K,GNo),e(K,t4),e(t4,yge),e(yge,ONo),e(t4,VNo),e(t4,kO),e(kO,XNo),e(t4,zNo),e(K,WNo),e(K,a4),e(a4,Lge),e(Lge,QNo),e(a4,HNo),e(a4,SO),e(SO,UNo),e(a4,JNo),e(K,YNo),e(K,n4),e(n4,xge),e(xge,KNo),e(n4,ZNo),e(n4,RO),e(RO,eqo),e(n4,oqo),e(K,rqo),e(K,s4),e(s4,$ge),e($ge,tqo),e(s4,aqo),e(s4,PO),e(PO,nqo),e(s4,sqo),e(K,lqo),e(K,l4),e(l4,kge),e(kge,iqo),e(l4,dqo),e(l4,BO),e(BO,cqo),e(l4,fqo),e(K,mqo),e(K,i4),e(i4,Sge),e(Sge,gqo),e(i4,hqo),e(i4,IO),e(IO,pqo),e(i4,_qo),e(K,uqo),e(K,d4),e(d4,Rge),e(Rge,bqo),e(d4,vqo),e(d4,NO),e(NO,Fqo),e(d4,Tqo),e(K,Mqo),e(K,c4),e(c4,Pge),e(Pge,Eqo),e(c4,Cqo),e(c4,qO),e(qO,wqo),e(c4,Aqo),e(K,yqo),e(K,f4),e(f4,Bge),e(Bge,Lqo),e(f4,xqo),e(f4,jO),e(jO,$qo),e(f4,kqo),e(K,Sqo),e(K,m4),e(m4,Ige),e(Ige,Rqo),e(m4,Pqo),e(m4,DO),e(DO,Bqo),e(m4,Iqo),e(K,Nqo),e(K,g4),e(g4,Nge),e(Nge,qqo),e(g4,jqo),e(g4,GO),e(GO,Dqo),e(g4,Gqo),e(K,Oqo),e(K,h4),e(h4,qge),e(qge,Vqo),e(h4,Xqo),e(h4,OO),e(OO,zqo),e(h4,Wqo),e(K,Qqo),e(K,p4),e(p4,jge),e(jge,Hqo),e(p4,Uqo),e(p4,VO),e(VO,Jqo),e(p4,Yqo),e(K,Kqo),e(K,_4),e(_4,Dge),e(Dge,Zqo),e(_4,ejo),e(_4,XO),e(XO,ojo),e(_4,rjo),e(K,tjo),e(K,u4),e(u4,Gge),e(Gge,ajo),e(u4,njo),e(u4,zO),e(zO,sjo),e(u4,ljo),e(K,ijo),e(K,b4),e(b4,Oge),e(Oge,djo),e(b4,cjo),e(b4,WO),e(WO,fjo),e(b4,mjo),e(K,gjo),e(K,v4),e(v4,Vge),e(Vge,hjo),e(v4,pjo),e(v4,QO),e(QO,_jo),e(v4,ujo),e(ro,bjo),e(ro,F4),e(F4,vjo),e(F4,Xge),e(Xge,Fjo),e(F4,Tjo),e(F4,zge),e(zge,Mjo),e(ro,Ejo),M(T4,ro,null),b(f,fje,u),b(f,Qi,u),e(Qi,M4),e(M4,Wge),M(Xy,Wge,null),e(Qi,Cjo),e(Qi,Qge),e(Qge,wjo),b(f,mje,u),b(f,Bo,u),M(zy,Bo,null),e(Bo,Ajo),e(Bo,Hi),e(Hi,yjo),e(Hi,HO),e(HO,Ljo),e(Hi,xjo),e(Hi,UO),e(UO,$jo),e(Hi,kjo),e(Bo,Sjo),e(Bo,Wy),e(Wy,Rjo),e(Wy,Hge),e(Hge,Pjo),e(Wy,Bjo),e(Bo,Ijo),e(Bo,ft),M(Qy,ft,null),e(ft,Njo),e(ft,Uge),e(Uge,qjo),e(ft,jjo),e(ft,Ui),e(Ui,Djo),e(Ui,Jge),e(Jge,Gjo),e(Ui,Ojo),e(Ui,JO),e(JO,Vjo),e(Ui,Xjo),e(ft,zjo),M(E4,ft,null),e(Bo,Wjo),e(Bo,to),M(Hy,to,null),e(to,Qjo),e(to,Yge),e(Yge,Hjo),e(to,Ujo),e(to,Ia),e(Ia,Jjo),e(Ia,Kge),e(Kge,Yjo),e(Ia,Kjo),e(Ia,Zge),e(Zge,Zjo),e(Ia,eDo),e(Ia,ehe),e(ehe,oDo),e(Ia,rDo),e(to,tDo),e(to,Yr),e(Yr,C4),e(C4,ohe),e(ohe,aDo),e(C4,nDo),e(C4,YO),e(YO,sDo),e(C4,lDo),e(Yr,iDo),e(Yr,w4),e(w4,rhe),e(rhe,dDo),e(w4,cDo),e(w4,KO),e(KO,fDo),e(w4,mDo),e(Yr,gDo),e(Yr,A4),e(A4,the),e(the,hDo),e(A4,pDo),e(A4,ZO),e(ZO,_Do),e(A4,uDo),e(Yr,bDo),e(Yr,y4),e(y4,ahe),e(ahe,vDo),e(y4,FDo),e(y4,eV),e(eV,TDo),e(y4,MDo),e(Yr,EDo),e(Yr,L4),e(L4,nhe),e(nhe,CDo),e(L4,wDo),e(L4,oV),e(oV,ADo),e(L4,yDo),e(to,LDo),e(to,x4),e(x4,xDo),e(x4,she),e(she,$Do),e(x4,kDo),e(x4,lhe),e(lhe,SDo),e(to,RDo),M($4,to,null),b(f,gje,u),b(f,Ji,u),e(Ji,k4),e(k4,ihe),M(Uy,ihe,null),e(Ji,PDo),e(Ji,dhe),e(dhe,BDo),b(f,hje,u),b(f,Io,u),M(Jy,Io,null),e(Io,IDo),e(Io,Yi),e(Yi,NDo),e(Yi,rV),e(rV,qDo),e(Yi,jDo),e(Yi,tV),e(tV,DDo),e(Yi,GDo),e(Io,ODo),e(Io,Yy),e(Yy,VDo),e(Yy,che),e(che,XDo),e(Yy,zDo),e(Io,WDo),e(Io,mt),M(Ky,mt,null),e(mt,QDo),e(mt,fhe),e(fhe,HDo),e(mt,UDo),e(mt,Ki),e(Ki,JDo),e(Ki,mhe),e(mhe,YDo),e(Ki,KDo),e(Ki,aV),e(aV,ZDo),e(Ki,eGo),e(mt,oGo),M(S4,mt,null),e(Io,rGo),e(Io,ao),M(Zy,ao,null),e(ao,tGo),e(ao,ghe),e(ghe,aGo),e(ao,nGo),e(ao,Na),e(Na,sGo),e(Na,hhe),e(hhe,lGo),e(Na,iGo),e(Na,phe),e(phe,dGo),e(Na,cGo),e(Na,_he),e(_he,fGo),e(Na,mGo),e(ao,gGo),e(ao,U),e(U,R4),e(R4,uhe),e(uhe,hGo),e(R4,pGo),e(R4,nV),e(nV,_Go),e(R4,uGo),e(U,bGo),e(U,P4),e(P4,bhe),e(bhe,vGo),e(P4,FGo),e(P4,sV),e(sV,TGo),e(P4,MGo),e(U,EGo),e(U,B4),e(B4,vhe),e(vhe,CGo),e(B4,wGo),e(B4,lV),e(lV,AGo),e(B4,yGo),e(U,LGo),e(U,I4),e(I4,Fhe),e(Fhe,xGo),e(I4,$Go),e(I4,iV),e(iV,kGo),e(I4,SGo),e(U,RGo),e(U,N4),e(N4,The),e(The,PGo),e(N4,BGo),e(N4,dV),e(dV,IGo),e(N4,NGo),e(U,qGo),e(U,q4),e(q4,Mhe),e(Mhe,jGo),e(q4,DGo),e(q4,cV),e(cV,GGo),e(q4,OGo),e(U,VGo),e(U,j4),e(j4,Ehe),e(Ehe,XGo),e(j4,zGo),e(j4,fV),e(fV,WGo),e(j4,QGo),e(U,HGo),e(U,D4),e(D4,Che),e(Che,UGo),e(D4,JGo),e(D4,mV),e(mV,YGo),e(D4,KGo),e(U,ZGo),e(U,G4),e(G4,whe),e(whe,eOo),e(G4,oOo),e(G4,gV),e(gV,rOo),e(G4,tOo),e(U,aOo),e(U,O4),e(O4,Ahe),e(Ahe,nOo),e(O4,sOo),e(O4,hV),e(hV,lOo),e(O4,iOo),e(U,dOo),e(U,V4),e(V4,yhe),e(yhe,cOo),e(V4,fOo),e(V4,pV),e(pV,mOo),e(V4,gOo),e(U,hOo),e(U,X4),e(X4,Lhe),e(Lhe,pOo),e(X4,_Oo),e(X4,_V),e(_V,uOo),e(X4,bOo),e(U,vOo),e(U,z4),e(z4,xhe),e(xhe,FOo),e(z4,TOo),e(z4,uV),e(uV,MOo),e(z4,EOo),e(U,COo),e(U,W4),e(W4,$he),e($he,wOo),e(W4,AOo),e(W4,bV),e(bV,yOo),e(W4,LOo),e(U,xOo),e(U,Q4),e(Q4,khe),e(khe,$Oo),e(Q4,kOo),e(Q4,vV),e(vV,SOo),e(Q4,ROo),e(U,POo),e(U,H4),e(H4,She),e(She,BOo),e(H4,IOo),e(H4,FV),e(FV,NOo),e(H4,qOo),e(U,jOo),e(U,U4),e(U4,Rhe),e(Rhe,DOo),e(U4,GOo),e(U4,TV),e(TV,OOo),e(U4,VOo),e(U,XOo),e(U,J4),e(J4,Phe),e(Phe,zOo),e(J4,WOo),e(J4,MV),e(MV,QOo),e(J4,HOo),e(U,UOo),e(U,Y4),e(Y4,Bhe),e(Bhe,JOo),e(Y4,YOo),e(Y4,EV),e(EV,KOo),e(Y4,ZOo),e(U,eVo),e(U,K4),e(K4,Ihe),e(Ihe,oVo),e(K4,rVo),e(K4,CV),e(CV,tVo),e(K4,aVo),e(U,nVo),e(U,Z4),e(Z4,Nhe),e(Nhe,sVo),e(Z4,lVo),e(Z4,wV),e(wV,iVo),e(Z4,dVo),e(U,cVo),e(U,e5),e(e5,qhe),e(qhe,fVo),e(e5,mVo),e(e5,AV),e(AV,gVo),e(e5,hVo),e(U,pVo),e(U,o5),e(o5,jhe),e(jhe,_Vo),e(o5,uVo),e(o5,yV),e(yV,bVo),e(o5,vVo),e(U,FVo),e(U,r5),e(r5,Dhe),e(Dhe,TVo),e(r5,MVo),e(r5,LV),e(LV,EVo),e(r5,CVo),e(U,wVo),e(U,t5),e(t5,Ghe),e(Ghe,AVo),e(t5,yVo),e(t5,xV),e(xV,LVo),e(t5,xVo),e(U,$Vo),e(U,a5),e(a5,Ohe),e(Ohe,kVo),e(a5,SVo),e(a5,$V),e($V,RVo),e(a5,PVo),e(U,BVo),e(U,n5),e(n5,Vhe),e(Vhe,IVo),e(n5,NVo),e(n5,kV),e(kV,qVo),e(n5,jVo),e(U,DVo),e(U,s5),e(s5,Xhe),e(Xhe,GVo),e(s5,OVo),e(s5,SV),e(SV,VVo),e(s5,XVo),e(U,zVo),e(U,l5),e(l5,zhe),e(zhe,WVo),e(l5,QVo),e(l5,RV),e(RV,HVo),e(l5,UVo),e(U,JVo),e(U,i5),e(i5,Whe),e(Whe,YVo),e(i5,KVo),e(i5,PV),e(PV,ZVo),e(i5,eXo),e(U,oXo),e(U,d5),e(d5,Qhe),e(Qhe,rXo),e(d5,tXo),e(d5,BV),e(BV,aXo),e(d5,nXo),e(U,sXo),e(U,c5),e(c5,Hhe),e(Hhe,lXo),e(c5,iXo),e(c5,IV),e(IV,dXo),e(c5,cXo),e(U,fXo),e(U,f5),e(f5,Uhe),e(Uhe,mXo),e(f5,gXo),e(f5,NV),e(NV,hXo),e(f5,pXo),e(U,_Xo),e(U,m5),e(m5,Jhe),e(Jhe,uXo),e(m5,bXo),e(m5,qV),e(qV,vXo),e(m5,FXo),e(ao,TXo),e(ao,g5),e(g5,MXo),e(g5,Yhe),e(Yhe,EXo),e(g5,CXo),e(g5,Khe),e(Khe,wXo),e(ao,AXo),M(h5,ao,null),b(f,pje,u),b(f,Zi,u),e(Zi,p5),e(p5,Zhe),M(eL,Zhe,null),e(Zi,yXo),e(Zi,epe),e(epe,LXo),b(f,_je,u),b(f,No,u),M(oL,No,null),e(No,xXo),e(No,ed),e(ed,$Xo),e(ed,jV),e(jV,kXo),e(ed,SXo),e(ed,DV),e(DV,RXo),e(ed,PXo),e(No,BXo),e(No,rL),e(rL,IXo),e(rL,ope),e(ope,NXo),e(rL,qXo),e(No,jXo),e(No,gt),M(tL,gt,null),e(gt,DXo),e(gt,rpe),e(rpe,GXo),e(gt,OXo),e(gt,od),e(od,VXo),e(od,tpe),e(tpe,XXo),e(od,zXo),e(od,GV),e(GV,WXo),e(od,QXo),e(gt,HXo),M(_5,gt,null),e(No,UXo),e(No,no),M(aL,no,null),e(no,JXo),e(no,ape),e(ape,YXo),e(no,KXo),e(no,qa),e(qa,ZXo),e(qa,npe),e(npe,ezo),e(qa,ozo),e(qa,spe),e(spe,rzo),e(qa,tzo),e(qa,lpe),e(lpe,azo),e(qa,nzo),e(no,szo),e(no,V),e(V,u5),e(u5,ipe),e(ipe,lzo),e(u5,izo),e(u5,OV),e(OV,dzo),e(u5,czo),e(V,fzo),e(V,b5),e(b5,dpe),e(dpe,mzo),e(b5,gzo),e(b5,VV),e(VV,hzo),e(b5,pzo),e(V,_zo),e(V,v5),e(v5,cpe),e(cpe,uzo),e(v5,bzo),e(v5,XV),e(XV,vzo),e(v5,Fzo),e(V,Tzo),e(V,F5),e(F5,fpe),e(fpe,Mzo),e(F5,Ezo),e(F5,zV),e(zV,Czo),e(F5,wzo),e(V,Azo),e(V,T5),e(T5,mpe),e(mpe,yzo),e(T5,Lzo),e(T5,WV),e(WV,xzo),e(T5,$zo),e(V,kzo),e(V,M5),e(M5,gpe),e(gpe,Szo),e(M5,Rzo),e(M5,QV),e(QV,Pzo),e(M5,Bzo),e(V,Izo),e(V,E5),e(E5,hpe),e(hpe,Nzo),e(E5,qzo),e(E5,HV),e(HV,jzo),e(E5,Dzo),e(V,Gzo),e(V,C5),e(C5,ppe),e(ppe,Ozo),e(C5,Vzo),e(C5,UV),e(UV,Xzo),e(C5,zzo),e(V,Wzo),e(V,w5),e(w5,_pe),e(_pe,Qzo),e(w5,Hzo),e(w5,JV),e(JV,Uzo),e(w5,Jzo),e(V,Yzo),e(V,A5),e(A5,upe),e(upe,Kzo),e(A5,Zzo),e(A5,YV),e(YV,eWo),e(A5,oWo),e(V,rWo),e(V,y5),e(y5,bpe),e(bpe,tWo),e(y5,aWo),e(y5,KV),e(KV,nWo),e(y5,sWo),e(V,lWo),e(V,L5),e(L5,vpe),e(vpe,iWo),e(L5,dWo),e(L5,ZV),e(ZV,cWo),e(L5,fWo),e(V,mWo),e(V,x5),e(x5,Fpe),e(Fpe,gWo),e(x5,hWo),e(x5,eX),e(eX,pWo),e(x5,_Wo),e(V,uWo),e(V,$5),e($5,Tpe),e(Tpe,bWo),e($5,vWo),e($5,oX),e(oX,FWo),e($5,TWo),e(V,MWo),e(V,k5),e(k5,Mpe),e(Mpe,EWo),e(k5,CWo),e(k5,rX),e(rX,wWo),e(k5,AWo),e(V,yWo),e(V,S5),e(S5,Epe),e(Epe,LWo),e(S5,xWo),e(S5,tX),e(tX,$Wo),e(S5,kWo),e(V,SWo),e(V,R5),e(R5,Cpe),e(Cpe,RWo),e(R5,PWo),e(R5,aX),e(aX,BWo),e(R5,IWo),e(V,NWo),e(V,P5),e(P5,wpe),e(wpe,qWo),e(P5,jWo),e(P5,nX),e(nX,DWo),e(P5,GWo),e(V,OWo),e(V,B5),e(B5,Ape),e(Ape,VWo),e(B5,XWo),e(B5,sX),e(sX,zWo),e(B5,WWo),e(V,QWo),e(V,I5),e(I5,ype),e(ype,HWo),e(I5,UWo),e(I5,lX),e(lX,JWo),e(I5,YWo),e(V,KWo),e(V,N5),e(N5,Lpe),e(Lpe,ZWo),e(N5,eQo),e(N5,iX),e(iX,oQo),e(N5,rQo),e(V,tQo),e(V,q5),e(q5,xpe),e(xpe,aQo),e(q5,nQo),e(q5,dX),e(dX,sQo),e(q5,lQo),e(V,iQo),e(V,j5),e(j5,$pe),e($pe,dQo),e(j5,cQo),e(j5,cX),e(cX,fQo),e(j5,mQo),e(V,gQo),e(V,D5),e(D5,kpe),e(kpe,hQo),e(D5,pQo),e(D5,fX),e(fX,_Qo),e(D5,uQo),e(V,bQo),e(V,G5),e(G5,Spe),e(Spe,vQo),e(G5,FQo),e(G5,mX),e(mX,TQo),e(G5,MQo),e(V,EQo),e(V,O5),e(O5,Rpe),e(Rpe,CQo),e(O5,wQo),e(O5,gX),e(gX,AQo),e(O5,yQo),e(V,LQo),e(V,V5),e(V5,Ppe),e(Ppe,xQo),e(V5,$Qo),e(V5,hX),e(hX,kQo),e(V5,SQo),e(V,RQo),e(V,X5),e(X5,Bpe),e(Bpe,PQo),e(X5,BQo),e(X5,pX),e(pX,IQo),e(X5,NQo),e(V,qQo),e(V,z5),e(z5,Ipe),e(Ipe,jQo),e(z5,DQo),e(z5,_X),e(_X,GQo),e(z5,OQo),e(V,VQo),e(V,W5),e(W5,Npe),e(Npe,XQo),e(W5,zQo),e(W5,uX),e(uX,WQo),e(W5,QQo),e(V,HQo),e(V,Q5),e(Q5,qpe),e(qpe,UQo),e(Q5,JQo),e(Q5,bX),e(bX,YQo),e(Q5,KQo),e(V,ZQo),e(V,H5),e(H5,jpe),e(jpe,eHo),e(H5,oHo),e(H5,vX),e(vX,rHo),e(H5,tHo),e(V,aHo),e(V,U5),e(U5,Dpe),e(Dpe,nHo),e(U5,sHo),e(U5,FX),e(FX,lHo),e(U5,iHo),e(V,dHo),e(V,J5),e(J5,Gpe),e(Gpe,cHo),e(J5,fHo),e(J5,TX),e(TX,mHo),e(J5,gHo),e(V,hHo),e(V,Y5),e(Y5,Ope),e(Ope,pHo),e(Y5,_Ho),e(Y5,MX),e(MX,uHo),e(Y5,bHo),e(V,vHo),e(V,K5),e(K5,Vpe),e(Vpe,FHo),e(K5,THo),e(K5,EX),e(EX,MHo),e(K5,EHo),e(V,CHo),e(V,Z5),e(Z5,Xpe),e(Xpe,wHo),e(Z5,AHo),e(Z5,CX),e(CX,yHo),e(Z5,LHo),e(V,xHo),e(V,ev),e(ev,zpe),e(zpe,$Ho),e(ev,kHo),e(ev,wX),e(wX,SHo),e(ev,RHo),e(V,PHo),e(V,ov),e(ov,Wpe),e(Wpe,BHo),e(ov,IHo),e(ov,AX),e(AX,NHo),e(ov,qHo),e(V,jHo),e(V,rv),e(rv,Qpe),e(Qpe,DHo),e(rv,GHo),e(rv,yX),e(yX,OHo),e(rv,VHo),e(no,XHo),e(no,tv),e(tv,zHo),e(tv,Hpe),e(Hpe,WHo),e(tv,QHo),e(tv,Upe),e(Upe,HHo),e(no,UHo),M(av,no,null),b(f,uje,u),b(f,rd,u),e(rd,nv),e(nv,Jpe),M(nL,Jpe,null),e(rd,JHo),e(rd,Ype),e(Ype,YHo),b(f,bje,u),b(f,qo,u),M(sL,qo,null),e(qo,KHo),e(qo,td),e(td,ZHo),e(td,LX),e(LX,eUo),e(td,oUo),e(td,xX),e(xX,rUo),e(td,tUo),e(qo,aUo),e(qo,lL),e(lL,nUo),e(lL,Kpe),e(Kpe,sUo),e(lL,lUo),e(qo,iUo),e(qo,ht),M(iL,ht,null),e(ht,dUo),e(ht,Zpe),e(Zpe,cUo),e(ht,fUo),e(ht,ad),e(ad,mUo),e(ad,e_e),e(e_e,gUo),e(ad,hUo),e(ad,$X),e($X,pUo),e(ad,_Uo),e(ht,uUo),M(sv,ht,null),e(qo,bUo),e(qo,so),M(dL,so,null),e(so,vUo),e(so,o_e),e(o_e,FUo),e(so,TUo),e(so,ja),e(ja,MUo),e(ja,r_e),e(r_e,EUo),e(ja,CUo),e(ja,t_e),e(t_e,wUo),e(ja,AUo),e(ja,a_e),e(a_e,yUo),e(ja,LUo),e(so,xUo),e(so,n_e),e(n_e,lv),e(lv,s_e),e(s_e,$Uo),e(lv,kUo),e(lv,kX),e(kX,SUo),e(lv,RUo),e(so,PUo),e(so,iv),e(iv,BUo),e(iv,l_e),e(l_e,IUo),e(iv,NUo),e(iv,i_e),e(i_e,qUo),e(so,jUo),M(dv,so,null),b(f,vje,u),b(f,nd,u),e(nd,cv),e(cv,d_e),M(cL,d_e,null),e(nd,DUo),e(nd,c_e),e(c_e,GUo),b(f,Fje,u),b(f,jo,u),M(fL,jo,null),e(jo,OUo),e(jo,sd),e(sd,VUo),e(sd,SX),e(SX,XUo),e(sd,zUo),e(sd,RX),e(RX,WUo),e(sd,QUo),e(jo,HUo),e(jo,mL),e(mL,UUo),e(mL,f_e),e(f_e,JUo),e(mL,YUo),e(jo,KUo),e(jo,pt),M(gL,pt,null),e(pt,ZUo),e(pt,m_e),e(m_e,eJo),e(pt,oJo),e(pt,ld),e(ld,rJo),e(ld,g_e),e(g_e,tJo),e(ld,aJo),e(ld,PX),e(PX,nJo),e(ld,sJo),e(pt,lJo),M(fv,pt,null),e(jo,iJo),e(jo,lo),M(hL,lo,null),e(lo,dJo),e(lo,h_e),e(h_e,cJo),e(lo,fJo),e(lo,Da),e(Da,mJo),e(Da,p_e),e(p_e,gJo),e(Da,hJo),e(Da,__e),e(__e,pJo),e(Da,_Jo),e(Da,u_e),e(u_e,uJo),e(Da,bJo),e(lo,vJo),e(lo,ve),e(ve,mv),e(mv,b_e),e(b_e,FJo),e(mv,TJo),e(mv,BX),e(BX,MJo),e(mv,EJo),e(ve,CJo),e(ve,gv),e(gv,v_e),e(v_e,wJo),e(gv,AJo),e(gv,IX),e(IX,yJo),e(gv,LJo),e(ve,xJo),e(ve,hv),e(hv,F_e),e(F_e,$Jo),e(hv,kJo),e(hv,NX),e(NX,SJo),e(hv,RJo),e(ve,PJo),e(ve,pv),e(pv,T_e),e(T_e,BJo),e(pv,IJo),e(pv,qX),e(qX,NJo),e(pv,qJo),e(ve,jJo),e(ve,Bs),e(Bs,M_e),e(M_e,DJo),e(Bs,GJo),e(Bs,jX),e(jX,OJo),e(Bs,VJo),e(Bs,DX),e(DX,XJo),e(Bs,zJo),e(ve,WJo),e(ve,_v),e(_v,E_e),e(E_e,QJo),e(_v,HJo),e(_v,GX),e(GX,UJo),e(_v,JJo),e(ve,YJo),e(ve,uv),e(uv,C_e),e(C_e,KJo),e(uv,ZJo),e(uv,OX),e(OX,eYo),e(uv,oYo),e(ve,rYo),e(ve,_t),e(_t,w_e),e(w_e,tYo),e(_t,aYo),e(_t,VX),e(VX,nYo),e(_t,sYo),e(_t,XX),e(XX,lYo),e(_t,iYo),e(_t,zX),e(zX,dYo),e(_t,cYo),e(ve,fYo),e(ve,bv),e(bv,A_e),e(A_e,mYo),e(bv,gYo),e(bv,WX),e(WX,hYo),e(bv,pYo),e(ve,_Yo),e(ve,vv),e(vv,y_e),e(y_e,uYo),e(vv,bYo),e(vv,QX),e(QX,vYo),e(vv,FYo),e(ve,TYo),e(ve,Fv),e(Fv,L_e),e(L_e,MYo),e(Fv,EYo),e(Fv,HX),e(HX,CYo),e(Fv,wYo),e(ve,AYo),e(ve,Tv),e(Tv,x_e),e(x_e,yYo),e(Tv,LYo),e(Tv,UX),e(UX,xYo),e(Tv,$Yo),e(ve,kYo),e(ve,Mv),e(Mv,$_e),e($_e,SYo),e(Mv,RYo),e(Mv,JX),e(JX,PYo),e(Mv,BYo),e(ve,IYo),e(ve,Ev),e(Ev,k_e),e(k_e,NYo),e(Ev,qYo),e(Ev,YX),e(YX,jYo),e(Ev,DYo),e(ve,GYo),e(ve,Cv),e(Cv,S_e),e(S_e,OYo),e(Cv,VYo),e(Cv,KX),e(KX,XYo),e(Cv,zYo),e(lo,WYo),e(lo,wv),e(wv,QYo),e(wv,R_e),e(R_e,HYo),e(wv,UYo),e(wv,P_e),e(P_e,JYo),e(lo,YYo),M(Av,lo,null),b(f,Tje,u),b(f,id,u),e(id,yv),e(yv,B_e),M(pL,B_e,null),e(id,KYo),e(id,I_e),e(I_e,ZYo),b(f,Mje,u),b(f,Do,u),M(_L,Do,null),e(Do,eKo),e(Do,dd),e(dd,oKo),e(dd,ZX),e(ZX,rKo),e(dd,tKo),e(dd,ez),e(ez,aKo),e(dd,nKo),e(Do,sKo),e(Do,uL),e(uL,lKo),e(uL,N_e),e(N_e,iKo),e(uL,dKo),e(Do,cKo),e(Do,ut),M(bL,ut,null),e(ut,fKo),e(ut,q_e),e(q_e,mKo),e(ut,gKo),e(ut,cd),e(cd,hKo),e(cd,j_e),e(j_e,pKo),e(cd,_Ko),e(cd,oz),e(oz,uKo),e(cd,bKo),e(ut,vKo),M(Lv,ut,null),e(Do,FKo),e(Do,io),M(vL,io,null),e(io,TKo),e(io,D_e),e(D_e,MKo),e(io,EKo),e(io,Ga),e(Ga,CKo),e(Ga,G_e),e(G_e,wKo),e(Ga,AKo),e(Ga,O_e),e(O_e,yKo),e(Ga,LKo),e(Ga,V_e),e(V_e,xKo),e(Ga,$Ko),e(io,kKo),e(io,X_e),e(X_e,xv),e(xv,z_e),e(z_e,SKo),e(xv,RKo),e(xv,rz),e(rz,PKo),e(xv,BKo),e(io,IKo),e(io,$v),e($v,NKo),e($v,W_e),e(W_e,qKo),e($v,jKo),e($v,Q_e),e(Q_e,DKo),e(io,GKo),M(kv,io,null),b(f,Eje,u),b(f,fd,u),e(fd,Sv),e(Sv,H_e),M(FL,H_e,null),e(fd,OKo),e(fd,U_e),e(U_e,VKo),b(f,Cje,u),b(f,Go,u),M(TL,Go,null),e(Go,XKo),e(Go,md),e(md,zKo),e(md,tz),e(tz,WKo),e(md,QKo),e(md,az),e(az,HKo),e(md,UKo),e(Go,JKo),e(Go,ML),e(ML,YKo),e(ML,J_e),e(J_e,KKo),e(ML,ZKo),e(Go,eZo),e(Go,bt),M(EL,bt,null),e(bt,oZo),e(bt,Y_e),e(Y_e,rZo),e(bt,tZo),e(bt,gd),e(gd,aZo),e(gd,K_e),e(K_e,nZo),e(gd,sZo),e(gd,nz),e(nz,lZo),e(gd,iZo),e(bt,dZo),M(Rv,bt,null),e(Go,cZo),e(Go,co),M(CL,co,null),e(co,fZo),e(co,Z_e),e(Z_e,mZo),e(co,gZo),e(co,Oa),e(Oa,hZo),e(Oa,eue),e(eue,pZo),e(Oa,_Zo),e(Oa,oue),e(oue,uZo),e(Oa,bZo),e(Oa,rue),e(rue,vZo),e(Oa,FZo),e(co,TZo),e(co,Se),e(Se,Pv),e(Pv,tue),e(tue,MZo),e(Pv,EZo),e(Pv,sz),e(sz,CZo),e(Pv,wZo),e(Se,AZo),e(Se,Bv),e(Bv,aue),e(aue,yZo),e(Bv,LZo),e(Bv,lz),e(lz,xZo),e(Bv,$Zo),e(Se,kZo),e(Se,Iv),e(Iv,nue),e(nue,SZo),e(Iv,RZo),e(Iv,iz),e(iz,PZo),e(Iv,BZo),e(Se,IZo),e(Se,Nv),e(Nv,sue),e(sue,NZo),e(Nv,qZo),e(Nv,dz),e(dz,jZo),e(Nv,DZo),e(Se,GZo),e(Se,qv),e(qv,lue),e(lue,OZo),e(qv,VZo),e(qv,cz),e(cz,XZo),e(qv,zZo),e(Se,WZo),e(Se,jv),e(jv,iue),e(iue,QZo),e(jv,HZo),e(jv,fz),e(fz,UZo),e(jv,JZo),e(Se,YZo),e(Se,Dv),e(Dv,due),e(due,KZo),e(Dv,ZZo),e(Dv,mz),e(mz,eer),e(Dv,oer),e(Se,rer),e(Se,Gv),e(Gv,cue),e(cue,ter),e(Gv,aer),e(Gv,gz),e(gz,ner),e(Gv,ser),e(Se,ler),e(Se,Ov),e(Ov,fue),e(fue,ier),e(Ov,der),e(Ov,hz),e(hz,cer),e(Ov,fer),e(co,mer),e(co,Vv),e(Vv,ger),e(Vv,mue),e(mue,her),e(Vv,per),e(Vv,gue),e(gue,_er),e(co,uer),M(Xv,co,null),b(f,wje,u),b(f,hd,u),e(hd,zv),e(zv,hue),M(wL,hue,null),e(hd,ber),e(hd,pue),e(pue,ver),b(f,Aje,u),b(f,Oo,u),M(AL,Oo,null),e(Oo,Fer),e(Oo,pd),e(pd,Ter),e(pd,pz),e(pz,Mer),e(pd,Eer),e(pd,_z),e(_z,Cer),e(pd,wer),e(Oo,Aer),e(Oo,yL),e(yL,yer),e(yL,_ue),e(_ue,Ler),e(yL,xer),e(Oo,$er),e(Oo,vt),M(LL,vt,null),e(vt,ker),e(vt,uue),e(uue,Ser),e(vt,Rer),e(vt,_d),e(_d,Per),e(_d,bue),e(bue,Ber),e(_d,Ier),e(_d,uz),e(uz,Ner),e(_d,qer),e(vt,jer),M(Wv,vt,null),e(Oo,Der),e(Oo,fo),M(xL,fo,null),e(fo,Ger),e(fo,vue),e(vue,Oer),e(fo,Ver),e(fo,Va),e(Va,Xer),e(Va,Fue),e(Fue,zer),e(Va,Wer),e(Va,Tue),e(Tue,Qer),e(Va,Her),e(Va,Mue),e(Mue,Uer),e(Va,Jer),e(fo,Yer),e(fo,Kr),e(Kr,Qv),e(Qv,Eue),e(Eue,Ker),e(Qv,Zer),e(Qv,bz),e(bz,eor),e(Qv,oor),e(Kr,ror),e(Kr,Hv),e(Hv,Cue),e(Cue,tor),e(Hv,aor),e(Hv,vz),e(vz,nor),e(Hv,sor),e(Kr,lor),e(Kr,Uv),e(Uv,wue),e(wue,ior),e(Uv,dor),e(Uv,Fz),e(Fz,cor),e(Uv,mor),e(Kr,gor),e(Kr,Jv),e(Jv,Aue),e(Aue,hor),e(Jv,por),e(Jv,Tz),e(Tz,_or),e(Jv,uor),e(Kr,bor),e(Kr,Yv),e(Yv,yue),e(yue,vor),e(Yv,For),e(Yv,Mz),e(Mz,Tor),e(Yv,Mor),e(fo,Eor),e(fo,Kv),e(Kv,Cor),e(Kv,Lue),e(Lue,wor),e(Kv,Aor),e(Kv,xue),e(xue,yor),e(fo,Lor),M(Zv,fo,null),b(f,yje,u),b(f,ud,u),e(ud,e3),e(e3,$ue),M($L,$ue,null),e(ud,xor),e(ud,kue),e(kue,$or),b(f,Lje,u),b(f,Vo,u),M(kL,Vo,null),e(Vo,kor),e(Vo,bd),e(bd,Sor),e(bd,Ez),e(Ez,Ror),e(bd,Por),e(bd,Cz),e(Cz,Bor),e(bd,Ior),e(Vo,Nor),e(Vo,SL),e(SL,qor),e(SL,Sue),e(Sue,jor),e(SL,Dor),e(Vo,Gor),e(Vo,Ft),M(RL,Ft,null),e(Ft,Oor),e(Ft,Rue),e(Rue,Vor),e(Ft,Xor),e(Ft,vd),e(vd,zor),e(vd,Pue),e(Pue,Wor),e(vd,Qor),e(vd,wz),e(wz,Hor),e(vd,Uor),e(Ft,Jor),M(o3,Ft,null),e(Vo,Yor),e(Vo,mo),M(PL,mo,null),e(mo,Kor),e(mo,Bue),e(Bue,Zor),e(mo,err),e(mo,Xa),e(Xa,orr),e(Xa,Iue),e(Iue,rrr),e(Xa,trr),e(Xa,Nue),e(Nue,arr),e(Xa,nrr),e(Xa,que),e(que,srr),e(Xa,lrr),e(mo,irr),e(mo,Re),e(Re,r3),e(r3,jue),e(jue,drr),e(r3,crr),e(r3,Az),e(Az,frr),e(r3,mrr),e(Re,grr),e(Re,t3),e(t3,Due),e(Due,hrr),e(t3,prr),e(t3,yz),e(yz,_rr),e(t3,urr),e(Re,brr),e(Re,a3),e(a3,Gue),e(Gue,vrr),e(a3,Frr),e(a3,Lz),e(Lz,Trr),e(a3,Mrr),e(Re,Err),e(Re,n3),e(n3,Oue),e(Oue,Crr),e(n3,wrr),e(n3,xz),e(xz,Arr),e(n3,yrr),e(Re,Lrr),e(Re,s3),e(s3,Vue),e(Vue,xrr),e(s3,$rr),e(s3,$z),e($z,krr),e(s3,Srr),e(Re,Rrr),e(Re,l3),e(l3,Xue),e(Xue,Prr),e(l3,Brr),e(l3,kz),e(kz,Irr),e(l3,Nrr),e(Re,qrr),e(Re,i3),e(i3,zue),e(zue,jrr),e(i3,Drr),e(i3,Sz),e(Sz,Grr),e(i3,Orr),e(Re,Vrr),e(Re,d3),e(d3,Wue),e(Wue,Xrr),e(d3,zrr),e(d3,Rz),e(Rz,Wrr),e(d3,Qrr),e(Re,Hrr),e(Re,c3),e(c3,Que),e(Que,Urr),e(c3,Jrr),e(c3,Pz),e(Pz,Yrr),e(c3,Krr),e(mo,Zrr),e(mo,f3),e(f3,etr),e(f3,Hue),e(Hue,otr),e(f3,rtr),e(f3,Uue),e(Uue,ttr),e(mo,atr),M(m3,mo,null),b(f,xje,u),b(f,Fd,u),e(Fd,g3),e(g3,Jue),M(BL,Jue,null),e(Fd,ntr),e(Fd,Yue),e(Yue,str),b(f,$je,u),b(f,Xo,u),M(IL,Xo,null),e(Xo,ltr),e(Xo,Td),e(Td,itr),e(Td,Bz),e(Bz,dtr),e(Td,ctr),e(Td,Iz),e(Iz,ftr),e(Td,mtr),e(Xo,gtr),e(Xo,NL),e(NL,htr),e(NL,Kue),e(Kue,ptr),e(NL,_tr),e(Xo,utr),e(Xo,Tt),M(qL,Tt,null),e(Tt,btr),e(Tt,Zue),e(Zue,vtr),e(Tt,Ftr),e(Tt,Md),e(Md,Ttr),e(Md,e1e),e(e1e,Mtr),e(Md,Etr),e(Md,Nz),e(Nz,Ctr),e(Md,wtr),e(Tt,Atr),M(h3,Tt,null),e(Xo,ytr),e(Xo,go),M(jL,go,null),e(go,Ltr),e(go,o1e),e(o1e,xtr),e(go,$tr),e(go,za),e(za,ktr),e(za,r1e),e(r1e,Str),e(za,Rtr),e(za,t1e),e(t1e,Ptr),e(za,Btr),e(za,a1e),e(a1e,Itr),e(za,Ntr),e(go,qtr),e(go,DL),e(DL,p3),e(p3,n1e),e(n1e,jtr),e(p3,Dtr),e(p3,qz),e(qz,Gtr),e(p3,Otr),e(DL,Vtr),e(DL,_3),e(_3,s1e),e(s1e,Xtr),e(_3,ztr),e(_3,jz),e(jz,Wtr),e(_3,Qtr),e(go,Htr),e(go,u3),e(u3,Utr),e(u3,l1e),e(l1e,Jtr),e(u3,Ytr),e(u3,i1e),e(i1e,Ktr),e(go,Ztr),M(b3,go,null),b(f,kje,u),b(f,Ed,u),e(Ed,v3),e(v3,d1e),M(GL,d1e,null),e(Ed,ear),e(Ed,c1e),e(c1e,oar),b(f,Sje,u),b(f,zo,u),M(OL,zo,null),e(zo,rar),e(zo,Cd),e(Cd,tar),e(Cd,Dz),e(Dz,aar),e(Cd,nar),e(Cd,Gz),e(Gz,sar),e(Cd,lar),e(zo,iar),e(zo,VL),e(VL,dar),e(VL,f1e),e(f1e,car),e(VL,far),e(zo,mar),e(zo,Mt),M(XL,Mt,null),e(Mt,gar),e(Mt,m1e),e(m1e,har),e(Mt,par),e(Mt,wd),e(wd,_ar),e(wd,g1e),e(g1e,uar),e(wd,bar),e(wd,Oz),e(Oz,Far),e(wd,Tar),e(Mt,Mar),M(F3,Mt,null),e(zo,Ear),e(zo,ho),M(zL,ho,null),e(ho,Car),e(ho,h1e),e(h1e,war),e(ho,Aar),e(ho,Wa),e(Wa,yar),e(Wa,p1e),e(p1e,Lar),e(Wa,xar),e(Wa,_1e),e(_1e,$ar),e(Wa,kar),e(Wa,u1e),e(u1e,Sar),e(Wa,Rar),e(ho,Par),e(ho,Zr),e(Zr,T3),e(T3,b1e),e(b1e,Bar),e(T3,Iar),e(T3,Vz),e(Vz,Nar),e(T3,qar),e(Zr,jar),e(Zr,M3),e(M3,v1e),e(v1e,Dar),e(M3,Gar),e(M3,Xz),e(Xz,Oar),e(M3,Var),e(Zr,Xar),e(Zr,E3),e(E3,F1e),e(F1e,zar),e(E3,War),e(E3,zz),e(zz,Qar),e(E3,Har),e(Zr,Uar),e(Zr,C3),e(C3,T1e),e(T1e,Jar),e(C3,Yar),e(C3,Wz),e(Wz,Kar),e(C3,Zar),e(Zr,enr),e(Zr,w3),e(w3,M1e),e(M1e,onr),e(w3,rnr),e(w3,Qz),e(Qz,tnr),e(w3,anr),e(ho,nnr),e(ho,A3),e(A3,snr),e(A3,E1e),e(E1e,lnr),e(A3,inr),e(A3,C1e),e(C1e,dnr),e(ho,cnr),M(y3,ho,null),b(f,Rje,u),b(f,Ad,u),e(Ad,L3),e(L3,w1e),M(WL,w1e,null),e(Ad,fnr),e(Ad,A1e),e(A1e,mnr),b(f,Pje,u),b(f,Wo,u),M(QL,Wo,null),e(Wo,gnr),e(Wo,yd),e(yd,hnr),e(yd,Hz),e(Hz,pnr),e(yd,_nr),e(yd,Uz),e(Uz,unr),e(yd,bnr),e(Wo,vnr),e(Wo,HL),e(HL,Fnr),e(HL,y1e),e(y1e,Tnr),e(HL,Mnr),e(Wo,Enr),e(Wo,Et),M(UL,Et,null),e(Et,Cnr),e(Et,L1e),e(L1e,wnr),e(Et,Anr),e(Et,Ld),e(Ld,ynr),e(Ld,x1e),e(x1e,Lnr),e(Ld,xnr),e(Ld,Jz),e(Jz,$nr),e(Ld,knr),e(Et,Snr),M(x3,Et,null),e(Wo,Rnr),e(Wo,po),M(JL,po,null),e(po,Pnr),e(po,$1e),e($1e,Bnr),e(po,Inr),e(po,Qa),e(Qa,Nnr),e(Qa,k1e),e(k1e,qnr),e(Qa,jnr),e(Qa,S1e),e(S1e,Dnr),e(Qa,Gnr),e(Qa,R1e),e(R1e,Onr),e(Qa,Vnr),e(po,Xnr),e(po,xd),e(xd,$3),e($3,P1e),e(P1e,znr),e($3,Wnr),e($3,Yz),e(Yz,Qnr),e($3,Hnr),e(xd,Unr),e(xd,k3),e(k3,B1e),e(B1e,Jnr),e(k3,Ynr),e(k3,Kz),e(Kz,Knr),e(k3,Znr),e(xd,esr),e(xd,S3),e(S3,I1e),e(I1e,osr),e(S3,rsr),e(S3,Zz),e(Zz,tsr),e(S3,asr),e(po,nsr),e(po,R3),e(R3,ssr),e(R3,N1e),e(N1e,lsr),e(R3,isr),e(R3,q1e),e(q1e,dsr),e(po,csr),M(P3,po,null),b(f,Bje,u),b(f,$d,u),e($d,B3),e(B3,j1e),M(YL,j1e,null),e($d,fsr),e($d,D1e),e(D1e,msr),b(f,Ije,u),b(f,Qo,u),M(KL,Qo,null),e(Qo,gsr),e(Qo,kd),e(kd,hsr),e(kd,eW),e(eW,psr),e(kd,_sr),e(kd,oW),e(oW,usr),e(kd,bsr),e(Qo,vsr),e(Qo,ZL),e(ZL,Fsr),e(ZL,G1e),e(G1e,Tsr),e(ZL,Msr),e(Qo,Esr),e(Qo,Ct),M(e8,Ct,null),e(Ct,Csr),e(Ct,O1e),e(O1e,wsr),e(Ct,Asr),e(Ct,Sd),e(Sd,ysr),e(Sd,V1e),e(V1e,Lsr),e(Sd,xsr),e(Sd,rW),e(rW,$sr),e(Sd,ksr),e(Ct,Ssr),M(I3,Ct,null),e(Qo,Rsr),e(Qo,_o),M(o8,_o,null),e(_o,Psr),e(_o,X1e),e(X1e,Bsr),e(_o,Isr),e(_o,Ha),e(Ha,Nsr),e(Ha,z1e),e(z1e,qsr),e(Ha,jsr),e(Ha,W1e),e(W1e,Dsr),e(Ha,Gsr),e(Ha,Q1e),e(Q1e,Osr),e(Ha,Vsr),e(_o,Xsr),e(_o,r8),e(r8,N3),e(N3,H1e),e(H1e,zsr),e(N3,Wsr),e(N3,tW),e(tW,Qsr),e(N3,Hsr),e(r8,Usr),e(r8,q3),e(q3,U1e),e(U1e,Jsr),e(q3,Ysr),e(q3,aW),e(aW,Ksr),e(q3,Zsr),e(_o,elr),e(_o,j3),e(j3,olr),e(j3,J1e),e(J1e,rlr),e(j3,tlr),e(j3,Y1e),e(Y1e,alr),e(_o,nlr),M(D3,_o,null),b(f,Nje,u),b(f,Rd,u),e(Rd,G3),e(G3,K1e),M(t8,K1e,null),e(Rd,slr),e(Rd,Z1e),e(Z1e,llr),b(f,qje,u),b(f,Ho,u),M(a8,Ho,null),e(Ho,ilr),e(Ho,Pd),e(Pd,dlr),e(Pd,nW),e(nW,clr),e(Pd,flr),e(Pd,sW),e(sW,mlr),e(Pd,glr),e(Ho,hlr),e(Ho,n8),e(n8,plr),e(n8,ebe),e(ebe,_lr),e(n8,ulr),e(Ho,blr),e(Ho,wt),M(s8,wt,null),e(wt,vlr),e(wt,obe),e(obe,Flr),e(wt,Tlr),e(wt,Bd),e(Bd,Mlr),e(Bd,rbe),e(rbe,Elr),e(Bd,Clr),e(Bd,lW),e(lW,wlr),e(Bd,Alr),e(wt,ylr),M(O3,wt,null),e(Ho,Llr),e(Ho,uo),M(l8,uo,null),e(uo,xlr),e(uo,tbe),e(tbe,$lr),e(uo,klr),e(uo,Ua),e(Ua,Slr),e(Ua,abe),e(abe,Rlr),e(Ua,Plr),e(Ua,nbe),e(nbe,Blr),e(Ua,Ilr),e(Ua,sbe),e(sbe,Nlr),e(Ua,qlr),e(uo,jlr),e(uo,lbe),e(lbe,V3),e(V3,ibe),e(ibe,Dlr),e(V3,Glr),e(V3,iW),e(iW,Olr),e(V3,Vlr),e(uo,Xlr),e(uo,X3),e(X3,zlr),e(X3,dbe),e(dbe,Wlr),e(X3,Qlr),e(X3,cbe),e(cbe,Hlr),e(uo,Ulr),M(z3,uo,null),b(f,jje,u),b(f,Id,u),e(Id,W3),e(W3,fbe),M(i8,fbe,null),e(Id,Jlr),e(Id,mbe),e(mbe,Ylr),b(f,Dje,u),b(f,Uo,u),M(d8,Uo,null),e(Uo,Klr),e(Uo,Nd),e(Nd,Zlr),e(Nd,dW),e(dW,eir),e(Nd,oir),e(Nd,cW),e(cW,rir),e(Nd,tir),e(Uo,air),e(Uo,c8),e(c8,nir),e(c8,gbe),e(gbe,sir),e(c8,lir),e(Uo,iir),e(Uo,At),M(f8,At,null),e(At,dir),e(At,hbe),e(hbe,cir),e(At,fir),e(At,qd),e(qd,mir),e(qd,pbe),e(pbe,gir),e(qd,hir),e(qd,fW),e(fW,pir),e(qd,_ir),e(At,uir),M(Q3,At,null),e(Uo,bir),e(Uo,bo),M(m8,bo,null),e(bo,vir),e(bo,_be),e(_be,Fir),e(bo,Tir),e(bo,Ja),e(Ja,Mir),e(Ja,ube),e(ube,Eir),e(Ja,Cir),e(Ja,bbe),e(bbe,wir),e(Ja,Air),e(Ja,vbe),e(vbe,yir),e(Ja,Lir),e(bo,xir),e(bo,et),e(et,H3),e(H3,Fbe),e(Fbe,$ir),e(H3,kir),e(H3,mW),e(mW,Sir),e(H3,Rir),e(et,Pir),e(et,U3),e(U3,Tbe),e(Tbe,Bir),e(U3,Iir),e(U3,gW),e(gW,Nir),e(U3,qir),e(et,jir),e(et,J3),e(J3,Mbe),e(Mbe,Dir),e(J3,Gir),e(J3,hW),e(hW,Oir),e(J3,Vir),e(et,Xir),e(et,Y3),e(Y3,Ebe),e(Ebe,zir),e(Y3,Wir),e(Y3,pW),e(pW,Qir),e(Y3,Hir),e(et,Uir),e(et,K3),e(K3,Cbe),e(Cbe,Jir),e(K3,Yir),e(K3,_W),e(_W,Kir),e(K3,Zir),e(bo,edr),e(bo,Z3),e(Z3,odr),e(Z3,wbe),e(wbe,rdr),e(Z3,tdr),e(Z3,Abe),e(Abe,adr),e(bo,ndr),M(eF,bo,null),b(f,Gje,u),b(f,jd,u),e(jd,oF),e(oF,ybe),M(g8,ybe,null),e(jd,sdr),e(jd,Lbe),e(Lbe,ldr),b(f,Oje,u),b(f,Jo,u),M(h8,Jo,null),e(Jo,idr),e(Jo,Dd),e(Dd,ddr),e(Dd,uW),e(uW,cdr),e(Dd,fdr),e(Dd,bW),e(bW,mdr),e(Dd,gdr),e(Jo,hdr),e(Jo,p8),e(p8,pdr),e(p8,xbe),e(xbe,_dr),e(p8,udr),e(Jo,bdr),e(Jo,yt),M(_8,yt,null),e(yt,vdr),e(yt,$be),e($be,Fdr),e(yt,Tdr),e(yt,Gd),e(Gd,Mdr),e(Gd,kbe),e(kbe,Edr),e(Gd,Cdr),e(Gd,vW),e(vW,wdr),e(Gd,Adr),e(yt,ydr),M(rF,yt,null),e(Jo,Ldr),e(Jo,vo),M(u8,vo,null),e(vo,xdr),e(vo,Sbe),e(Sbe,$dr),e(vo,kdr),e(vo,Ya),e(Ya,Sdr),e(Ya,Rbe),e(Rbe,Rdr),e(Ya,Pdr),e(Ya,Pbe),e(Pbe,Bdr),e(Ya,Idr),e(Ya,Bbe),e(Bbe,Ndr),e(Ya,qdr),e(vo,jdr),e(vo,Ibe),e(Ibe,tF),e(tF,Nbe),e(Nbe,Ddr),e(tF,Gdr),e(tF,FW),e(FW,Odr),e(tF,Vdr),e(vo,Xdr),e(vo,aF),e(aF,zdr),e(aF,qbe),e(qbe,Wdr),e(aF,Qdr),e(aF,jbe),e(jbe,Hdr),e(vo,Udr),M(nF,vo,null),b(f,Vje,u),b(f,Od,u),e(Od,sF),e(sF,Dbe),M(b8,Dbe,null),e(Od,Jdr),e(Od,Gbe),e(Gbe,Ydr),b(f,Xje,u),b(f,Yo,u),M(v8,Yo,null),e(Yo,Kdr),e(Yo,Vd),e(Vd,Zdr),e(Vd,TW),e(TW,ecr),e(Vd,ocr),e(Vd,MW),e(MW,rcr),e(Vd,tcr),e(Yo,acr),e(Yo,F8),e(F8,ncr),e(F8,Obe),e(Obe,scr),e(F8,lcr),e(Yo,icr),e(Yo,Lt),M(T8,Lt,null),e(Lt,dcr),e(Lt,Vbe),e(Vbe,ccr),e(Lt,fcr),e(Lt,Xd),e(Xd,mcr),e(Xd,Xbe),e(Xbe,gcr),e(Xd,hcr),e(Xd,EW),e(EW,pcr),e(Xd,_cr),e(Lt,ucr),M(lF,Lt,null),e(Yo,bcr),e(Yo,wr),M(M8,wr,null),e(wr,vcr),e(wr,zbe),e(zbe,Fcr),e(wr,Tcr),e(wr,Ka),e(Ka,Mcr),e(Ka,Wbe),e(Wbe,Ecr),e(Ka,Ccr),e(Ka,Qbe),e(Qbe,wcr),e(Ka,Acr),e(Ka,Hbe),e(Hbe,ycr),e(Ka,Lcr),e(wr,xcr),e(wr,q),e(q,iF),e(iF,Ube),e(Ube,$cr),e(iF,kcr),e(iF,CW),e(CW,Scr),e(iF,Rcr),e(q,Pcr),e(q,dF),e(dF,Jbe),e(Jbe,Bcr),e(dF,Icr),e(dF,wW),e(wW,Ncr),e(dF,qcr),e(q,jcr),e(q,cF),e(cF,Ybe),e(Ybe,Dcr),e(cF,Gcr),e(cF,AW),e(AW,Ocr),e(cF,Vcr),e(q,Xcr),e(q,fF),e(fF,Kbe),e(Kbe,zcr),e(fF,Wcr),e(fF,yW),e(yW,Qcr),e(fF,Hcr),e(q,Ucr),e(q,mF),e(mF,Zbe),e(Zbe,Jcr),e(mF,Ycr),e(mF,LW),e(LW,Kcr),e(mF,Zcr),e(q,efr),e(q,gF),e(gF,e2e),e(e2e,ofr),e(gF,rfr),e(gF,xW),e(xW,tfr),e(gF,afr),e(q,nfr),e(q,hF),e(hF,o2e),e(o2e,sfr),e(hF,lfr),e(hF,$W),e($W,ifr),e(hF,dfr),e(q,cfr),e(q,pF),e(pF,r2e),e(r2e,ffr),e(pF,mfr),e(pF,kW),e(kW,gfr),e(pF,hfr),e(q,pfr),e(q,_F),e(_F,t2e),e(t2e,_fr),e(_F,ufr),e(_F,SW),e(SW,bfr),e(_F,vfr),e(q,Ffr),e(q,uF),e(uF,a2e),e(a2e,Tfr),e(uF,Mfr),e(uF,RW),e(RW,Efr),e(uF,Cfr),e(q,wfr),e(q,bF),e(bF,n2e),e(n2e,Afr),e(bF,yfr),e(bF,PW),e(PW,Lfr),e(bF,xfr),e(q,$fr),e(q,vF),e(vF,s2e),e(s2e,kfr),e(vF,Sfr),e(vF,BW),e(BW,Rfr),e(vF,Pfr),e(q,Bfr),e(q,FF),e(FF,l2e),e(l2e,Ifr),e(FF,Nfr),e(FF,IW),e(IW,qfr),e(FF,jfr),e(q,Dfr),e(q,TF),e(TF,i2e),e(i2e,Gfr),e(TF,Ofr),e(TF,NW),e(NW,Vfr),e(TF,Xfr),e(q,zfr),e(q,MF),e(MF,d2e),e(d2e,Wfr),e(MF,Qfr),e(MF,qW),e(qW,Hfr),e(MF,Ufr),e(q,Jfr),e(q,EF),e(EF,c2e),e(c2e,Yfr),e(EF,Kfr),e(EF,jW),e(jW,Zfr),e(EF,emr),e(q,omr),e(q,CF),e(CF,f2e),e(f2e,rmr),e(CF,tmr),e(CF,DW),e(DW,amr),e(CF,nmr),e(q,smr),e(q,Is),e(Is,m2e),e(m2e,lmr),e(Is,imr),e(Is,GW),e(GW,dmr),e(Is,cmr),e(Is,OW),e(OW,fmr),e(Is,mmr),e(q,gmr),e(q,wF),e(wF,g2e),e(g2e,hmr),e(wF,pmr),e(wF,VW),e(VW,_mr),e(wF,umr),e(q,bmr),e(q,AF),e(AF,h2e),e(h2e,vmr),e(AF,Fmr),e(AF,XW),e(XW,Tmr),e(AF,Mmr),e(q,Emr),e(q,yF),e(yF,p2e),e(p2e,Cmr),e(yF,wmr),e(yF,zW),e(zW,Amr),e(yF,ymr),e(q,Lmr),e(q,LF),e(LF,_2e),e(_2e,xmr),e(LF,$mr),e(LF,WW),e(WW,kmr),e(LF,Smr),e(q,Rmr),e(q,xF),e(xF,u2e),e(u2e,Pmr),e(xF,Bmr),e(xF,QW),e(QW,Imr),e(xF,Nmr),e(q,qmr),e(q,$F),e($F,b2e),e(b2e,jmr),e($F,Dmr),e($F,HW),e(HW,Gmr),e($F,Omr),e(q,Vmr),e(q,kF),e(kF,v2e),e(v2e,Xmr),e(kF,zmr),e(kF,UW),e(UW,Wmr),e(kF,Qmr),e(q,Hmr),e(q,SF),e(SF,F2e),e(F2e,Umr),e(SF,Jmr),e(SF,JW),e(JW,Ymr),e(SF,Kmr),e(q,Zmr),e(q,RF),e(RF,T2e),e(T2e,egr),e(RF,ogr),e(RF,YW),e(YW,rgr),e(RF,tgr),e(q,agr),e(q,PF),e(PF,M2e),e(M2e,ngr),e(PF,sgr),e(PF,KW),e(KW,lgr),e(PF,igr),e(q,dgr),e(q,BF),e(BF,E2e),e(E2e,cgr),e(BF,fgr),e(BF,ZW),e(ZW,mgr),e(BF,ggr),e(q,hgr),e(q,IF),e(IF,C2e),e(C2e,pgr),e(IF,_gr),e(IF,eQ),e(eQ,ugr),e(IF,bgr),e(q,vgr),e(q,NF),e(NF,w2e),e(w2e,Fgr),e(NF,Tgr),e(NF,oQ),e(oQ,Mgr),e(NF,Egr),e(q,Cgr),e(q,qF),e(qF,A2e),e(A2e,wgr),e(qF,Agr),e(qF,rQ),e(rQ,ygr),e(qF,Lgr),e(q,xgr),e(q,jF),e(jF,y2e),e(y2e,$gr),e(jF,kgr),e(jF,tQ),e(tQ,Sgr),e(jF,Rgr),e(q,Pgr),e(q,DF),e(DF,L2e),e(L2e,Bgr),e(DF,Igr),e(DF,aQ),e(aQ,Ngr),e(DF,qgr),e(q,jgr),e(q,GF),e(GF,x2e),e(x2e,Dgr),e(GF,Ggr),e(GF,nQ),e(nQ,Ogr),e(GF,Vgr),e(q,Xgr),e(q,OF),e(OF,$2e),e($2e,zgr),e(OF,Wgr),e(OF,sQ),e(sQ,Qgr),e(OF,Hgr),e(q,Ugr),e(q,VF),e(VF,k2e),e(k2e,Jgr),e(VF,Ygr),e(VF,lQ),e(lQ,Kgr),e(VF,Zgr),e(q,ehr),e(q,XF),e(XF,S2e),e(S2e,ohr),e(XF,rhr),e(XF,iQ),e(iQ,thr),e(XF,ahr),e(q,nhr),e(q,zF),e(zF,R2e),e(R2e,shr),e(zF,lhr),e(zF,dQ),e(dQ,ihr),e(zF,dhr),e(q,chr),e(q,WF),e(WF,P2e),e(P2e,fhr),e(WF,mhr),e(WF,cQ),e(cQ,ghr),e(WF,hhr),e(q,phr),e(q,QF),e(QF,B2e),e(B2e,_hr),e(QF,uhr),e(QF,fQ),e(fQ,bhr),e(QF,vhr),e(q,Fhr),e(q,HF),e(HF,I2e),e(I2e,Thr),e(HF,Mhr),e(HF,mQ),e(mQ,Ehr),e(HF,Chr),e(q,whr),e(q,UF),e(UF,N2e),e(N2e,Ahr),e(UF,yhr),e(UF,gQ),e(gQ,Lhr),e(UF,xhr),e(q,$hr),e(q,JF),e(JF,q2e),e(q2e,khr),e(JF,Shr),e(JF,hQ),e(hQ,Rhr),e(JF,Phr),e(q,Bhr),e(q,YF),e(YF,j2e),e(j2e,Ihr),e(YF,Nhr),e(YF,pQ),e(pQ,qhr),e(YF,jhr),e(q,Dhr),e(q,KF),e(KF,D2e),e(D2e,Ghr),e(KF,Ohr),e(KF,_Q),e(_Q,Vhr),e(KF,Xhr),e(q,zhr),e(q,ZF),e(ZF,G2e),e(G2e,Whr),e(ZF,Qhr),e(ZF,uQ),e(uQ,Hhr),e(ZF,Uhr),e(wr,Jhr),M(eT,wr,null),b(f,zje,u),b(f,zd,u),e(zd,oT),e(oT,O2e),M(E8,O2e,null),e(zd,Yhr),e(zd,V2e),e(V2e,Khr),b(f,Wje,u),b(f,Ko,u),M(C8,Ko,null),e(Ko,Zhr),e(Ko,Wd),e(Wd,epr),e(Wd,bQ),e(bQ,opr),e(Wd,rpr),e(Wd,vQ),e(vQ,tpr),e(Wd,apr),e(Ko,npr),e(Ko,w8),e(w8,spr),e(w8,X2e),e(X2e,lpr),e(w8,ipr),e(Ko,dpr),e(Ko,xt),M(A8,xt,null),e(xt,cpr),e(xt,z2e),e(z2e,fpr),e(xt,mpr),e(xt,Qd),e(Qd,gpr),e(Qd,W2e),e(W2e,hpr),e(Qd,ppr),e(Qd,FQ),e(FQ,_pr),e(Qd,upr),e(xt,bpr),M(rT,xt,null),e(Ko,vpr),e(Ko,Ar),M(y8,Ar,null),e(Ar,Fpr),e(Ar,Q2e),e(Q2e,Tpr),e(Ar,Mpr),e(Ar,Za),e(Za,Epr),e(Za,H2e),e(H2e,Cpr),e(Za,wpr),e(Za,U2e),e(U2e,Apr),e(Za,ypr),e(Za,J2e),e(J2e,Lpr),e(Za,xpr),e(Ar,$pr),e(Ar,se),e(se,tT),e(tT,Y2e),e(Y2e,kpr),e(tT,Spr),e(tT,TQ),e(TQ,Rpr),e(tT,Ppr),e(se,Bpr),e(se,aT),e(aT,K2e),e(K2e,Ipr),e(aT,Npr),e(aT,MQ),e(MQ,qpr),e(aT,jpr),e(se,Dpr),e(se,nT),e(nT,Z2e),e(Z2e,Gpr),e(nT,Opr),e(nT,EQ),e(EQ,Vpr),e(nT,Xpr),e(se,zpr),e(se,sT),e(sT,e4e),e(e4e,Wpr),e(sT,Qpr),e(sT,CQ),e(CQ,Hpr),e(sT,Upr),e(se,Jpr),e(se,lT),e(lT,o4e),e(o4e,Ypr),e(lT,Kpr),e(lT,wQ),e(wQ,Zpr),e(lT,e_r),e(se,o_r),e(se,iT),e(iT,r4e),e(r4e,r_r),e(iT,t_r),e(iT,AQ),e(AQ,a_r),e(iT,n_r),e(se,s_r),e(se,dT),e(dT,t4e),e(t4e,l_r),e(dT,i_r),e(dT,yQ),e(yQ,d_r),e(dT,c_r),e(se,f_r),e(se,cT),e(cT,a4e),e(a4e,m_r),e(cT,g_r),e(cT,LQ),e(LQ,h_r),e(cT,p_r),e(se,__r),e(se,fT),e(fT,n4e),e(n4e,u_r),e(fT,b_r),e(fT,xQ),e(xQ,v_r),e(fT,F_r),e(se,T_r),e(se,mT),e(mT,s4e),e(s4e,M_r),e(mT,E_r),e(mT,$Q),e($Q,C_r),e(mT,w_r),e(se,A_r),e(se,gT),e(gT,l4e),e(l4e,y_r),e(gT,L_r),e(gT,kQ),e(kQ,x_r),e(gT,$_r),e(se,k_r),e(se,hT),e(hT,i4e),e(i4e,S_r),e(hT,R_r),e(hT,SQ),e(SQ,P_r),e(hT,B_r),e(se,I_r),e(se,pT),e(pT,d4e),e(d4e,N_r),e(pT,q_r),e(pT,RQ),e(RQ,j_r),e(pT,D_r),e(se,G_r),e(se,_T),e(_T,c4e),e(c4e,O_r),e(_T,V_r),e(_T,PQ),e(PQ,X_r),e(_T,z_r),e(se,W_r),e(se,uT),e(uT,f4e),e(f4e,Q_r),e(uT,H_r),e(uT,BQ),e(BQ,U_r),e(uT,J_r),e(se,Y_r),e(se,bT),e(bT,m4e),e(m4e,K_r),e(bT,Z_r),e(bT,IQ),e(IQ,eur),e(bT,our),e(se,rur),e(se,vT),e(vT,g4e),e(g4e,tur),e(vT,aur),e(vT,NQ),e(NQ,nur),e(vT,sur),e(se,lur),e(se,FT),e(FT,h4e),e(h4e,iur),e(FT,dur),e(FT,qQ),e(qQ,cur),e(FT,fur),e(se,mur),e(se,TT),e(TT,p4e),e(p4e,gur),e(TT,hur),e(TT,jQ),e(jQ,pur),e(TT,_ur),e(se,uur),e(se,MT),e(MT,_4e),e(_4e,bur),e(MT,vur),e(MT,DQ),e(DQ,Fur),e(MT,Tur),e(se,Mur),e(se,ET),e(ET,u4e),e(u4e,Eur),e(ET,Cur),e(ET,GQ),e(GQ,wur),e(ET,Aur),e(se,yur),e(se,CT),e(CT,b4e),e(b4e,Lur),e(CT,xur),e(CT,OQ),e(OQ,$ur),e(CT,kur),e(se,Sur),e(se,wT),e(wT,v4e),e(v4e,Rur),e(wT,Pur),e(wT,VQ),e(VQ,Bur),e(wT,Iur),e(Ar,Nur),M(AT,Ar,null),b(f,Qje,u),b(f,Hd,u),e(Hd,yT),e(yT,F4e),M(L8,F4e,null),e(Hd,qur),e(Hd,T4e),e(T4e,jur),b(f,Hje,u),b(f,Zo,u),M(x8,Zo,null),e(Zo,Dur),e(Zo,Ud),e(Ud,Gur),e(Ud,XQ),e(XQ,Our),e(Ud,Vur),e(Ud,zQ),e(zQ,Xur),e(Ud,zur),e(Zo,Wur),e(Zo,$8),e($8,Qur),e($8,M4e),e(M4e,Hur),e($8,Uur),e(Zo,Jur),e(Zo,$t),M(k8,$t,null),e($t,Yur),e($t,E4e),e(E4e,Kur),e($t,Zur),e($t,Jd),e(Jd,e1r),e(Jd,C4e),e(C4e,o1r),e(Jd,r1r),e(Jd,WQ),e(WQ,t1r),e(Jd,a1r),e($t,n1r),M(LT,$t,null),e(Zo,s1r),e(Zo,yr),M(S8,yr,null),e(yr,l1r),e(yr,w4e),e(w4e,i1r),e(yr,d1r),e(yr,en),e(en,c1r),e(en,A4e),e(A4e,f1r),e(en,m1r),e(en,y4e),e(y4e,g1r),e(en,h1r),e(en,L4e),e(L4e,p1r),e(en,_1r),e(yr,u1r),e(yr,Me),e(Me,xT),e(xT,x4e),e(x4e,b1r),e(xT,v1r),e(xT,QQ),e(QQ,F1r),e(xT,T1r),e(Me,M1r),e(Me,$T),e($T,$4e),e($4e,E1r),e($T,C1r),e($T,HQ),e(HQ,w1r),e($T,A1r),e(Me,y1r),e(Me,kT),e(kT,k4e),e(k4e,L1r),e(kT,x1r),e(kT,UQ),e(UQ,$1r),e(kT,k1r),e(Me,S1r),e(Me,ST),e(ST,S4e),e(S4e,R1r),e(ST,P1r),e(ST,JQ),e(JQ,B1r),e(ST,I1r),e(Me,N1r),e(Me,RT),e(RT,R4e),e(R4e,q1r),e(RT,j1r),e(RT,YQ),e(YQ,D1r),e(RT,G1r),e(Me,O1r),e(Me,PT),e(PT,P4e),e(P4e,V1r),e(PT,X1r),e(PT,KQ),e(KQ,z1r),e(PT,W1r),e(Me,Q1r),e(Me,BT),e(BT,B4e),e(B4e,H1r),e(BT,U1r),e(BT,ZQ),e(ZQ,J1r),e(BT,Y1r),e(Me,K1r),e(Me,IT),e(IT,I4e),e(I4e,Z1r),e(IT,ebr),e(IT,eH),e(eH,obr),e(IT,rbr),e(Me,tbr),e(Me,NT),e(NT,N4e),e(N4e,abr),e(NT,nbr),e(NT,oH),e(oH,sbr),e(NT,lbr),e(Me,ibr),e(Me,qT),e(qT,q4e),e(q4e,dbr),e(qT,cbr),e(qT,rH),e(rH,fbr),e(qT,mbr),e(Me,gbr),e(Me,jT),e(jT,j4e),e(j4e,hbr),e(jT,pbr),e(jT,tH),e(tH,_br),e(jT,ubr),e(Me,bbr),e(Me,DT),e(DT,D4e),e(D4e,vbr),e(DT,Fbr),e(DT,aH),e(aH,Tbr),e(DT,Mbr),e(Me,Ebr),e(Me,GT),e(GT,G4e),e(G4e,Cbr),e(GT,wbr),e(GT,nH),e(nH,Abr),e(GT,ybr),e(yr,Lbr),M(OT,yr,null),b(f,Uje,u),b(f,Yd,u),e(Yd,VT),e(VT,O4e),M(R8,O4e,null),e(Yd,xbr),e(Yd,V4e),e(V4e,$br),b(f,Jje,u),b(f,er,u),M(P8,er,null),e(er,kbr),e(er,Kd),e(Kd,Sbr),e(Kd,sH),e(sH,Rbr),e(Kd,Pbr),e(Kd,lH),e(lH,Bbr),e(Kd,Ibr),e(er,Nbr),e(er,B8),e(B8,qbr),e(B8,X4e),e(X4e,jbr),e(B8,Dbr),e(er,Gbr),e(er,kt),M(I8,kt,null),e(kt,Obr),e(kt,z4e),e(z4e,Vbr),e(kt,Xbr),e(kt,Zd),e(Zd,zbr),e(Zd,W4e),e(W4e,Wbr),e(Zd,Qbr),e(Zd,iH),e(iH,Hbr),e(Zd,Ubr),e(kt,Jbr),M(XT,kt,null),e(er,Ybr),e(er,Lr),M(N8,Lr,null),e(Lr,Kbr),e(Lr,Q4e),e(Q4e,Zbr),e(Lr,e2r),e(Lr,on),e(on,o2r),e(on,H4e),e(H4e,r2r),e(on,t2r),e(on,U4e),e(U4e,a2r),e(on,n2r),e(on,J4e),e(J4e,s2r),e(on,l2r),e(Lr,i2r),e(Lr,rn),e(rn,zT),e(zT,Y4e),e(Y4e,d2r),e(zT,c2r),e(zT,dH),e(dH,f2r),e(zT,m2r),e(rn,g2r),e(rn,WT),e(WT,K4e),e(K4e,h2r),e(WT,p2r),e(WT,cH),e(cH,_2r),e(WT,u2r),e(rn,b2r),e(rn,QT),e(QT,Z4e),e(Z4e,v2r),e(QT,F2r),e(QT,fH),e(fH,T2r),e(QT,M2r),e(rn,E2r),e(rn,HT),e(HT,e5e),e(e5e,C2r),e(HT,w2r),e(HT,mH),e(mH,A2r),e(HT,y2r),e(Lr,L2r),M(UT,Lr,null),b(f,Yje,u),b(f,ec,u),e(ec,JT),e(JT,o5e),M(q8,o5e,null),e(ec,x2r),e(ec,r5e),e(r5e,$2r),b(f,Kje,u),b(f,or,u),M(j8,or,null),e(or,k2r),e(or,oc),e(oc,S2r),e(oc,gH),e(gH,R2r),e(oc,P2r),e(oc,hH),e(hH,B2r),e(oc,I2r),e(or,N2r),e(or,D8),e(D8,q2r),e(D8,t5e),e(t5e,j2r),e(D8,D2r),e(or,G2r),e(or,St),M(G8,St,null),e(St,O2r),e(St,a5e),e(a5e,V2r),e(St,X2r),e(St,rc),e(rc,z2r),e(rc,n5e),e(n5e,W2r),e(rc,Q2r),e(rc,pH),e(pH,H2r),e(rc,U2r),e(St,J2r),M(YT,St,null),e(or,Y2r),e(or,xr),M(O8,xr,null),e(xr,K2r),e(xr,s5e),e(s5e,Z2r),e(xr,e4r),e(xr,tn),e(tn,o4r),e(tn,l5e),e(l5e,r4r),e(tn,t4r),e(tn,i5e),e(i5e,a4r),e(tn,n4r),e(tn,d5e),e(d5e,s4r),e(tn,l4r),e(xr,i4r),e(xr,ie),e(ie,KT),e(KT,c5e),e(c5e,d4r),e(KT,c4r),e(KT,_H),e(_H,f4r),e(KT,m4r),e(ie,g4r),e(ie,ZT),e(ZT,f5e),e(f5e,h4r),e(ZT,p4r),e(ZT,uH),e(uH,_4r),e(ZT,u4r),e(ie,b4r),e(ie,e7),e(e7,m5e),e(m5e,v4r),e(e7,F4r),e(e7,bH),e(bH,T4r),e(e7,M4r),e(ie,E4r),e(ie,o7),e(o7,g5e),e(g5e,C4r),e(o7,w4r),e(o7,vH),e(vH,A4r),e(o7,y4r),e(ie,L4r),e(ie,r7),e(r7,h5e),e(h5e,x4r),e(r7,$4r),e(r7,FH),e(FH,k4r),e(r7,S4r),e(ie,R4r),e(ie,t7),e(t7,p5e),e(p5e,P4r),e(t7,B4r),e(t7,TH),e(TH,I4r),e(t7,N4r),e(ie,q4r),e(ie,a7),e(a7,_5e),e(_5e,j4r),e(a7,D4r),e(a7,MH),e(MH,G4r),e(a7,O4r),e(ie,V4r),e(ie,n7),e(n7,u5e),e(u5e,X4r),e(n7,z4r),e(n7,EH),e(EH,W4r),e(n7,Q4r),e(ie,H4r),e(ie,s7),e(s7,b5e),e(b5e,U4r),e(s7,J4r),e(s7,CH),e(CH,Y4r),e(s7,K4r),e(ie,Z4r),e(ie,l7),e(l7,v5e),e(v5e,e5r),e(l7,o5r),e(l7,wH),e(wH,r5r),e(l7,t5r),e(ie,a5r),e(ie,i7),e(i7,F5e),e(F5e,n5r),e(i7,s5r),e(i7,AH),e(AH,l5r),e(i7,i5r),e(ie,d5r),e(ie,d7),e(d7,T5e),e(T5e,c5r),e(d7,f5r),e(d7,yH),e(yH,m5r),e(d7,g5r),e(ie,h5r),e(ie,c7),e(c7,M5e),e(M5e,p5r),e(c7,_5r),e(c7,LH),e(LH,u5r),e(c7,b5r),e(ie,v5r),e(ie,f7),e(f7,E5e),e(E5e,F5r),e(f7,T5r),e(f7,xH),e(xH,M5r),e(f7,E5r),e(ie,C5r),e(ie,m7),e(m7,C5e),e(C5e,w5r),e(m7,A5r),e(m7,$H),e($H,y5r),e(m7,L5r),e(ie,x5r),e(ie,g7),e(g7,w5e),e(w5e,$5r),e(g7,k5r),e(g7,kH),e(kH,S5r),e(g7,R5r),e(ie,P5r),e(ie,h7),e(h7,A5e),e(A5e,B5r),e(h7,I5r),e(h7,SH),e(SH,N5r),e(h7,q5r),e(ie,j5r),e(ie,p7),e(p7,y5e),e(y5e,D5r),e(p7,G5r),e(p7,RH),e(RH,O5r),e(p7,V5r),e(ie,X5r),e(ie,_7),e(_7,L5e),e(L5e,z5r),e(_7,W5r),e(_7,PH),e(PH,Q5r),e(_7,H5r),e(ie,U5r),e(ie,u7),e(u7,x5e),e(x5e,J5r),e(u7,Y5r),e(u7,BH),e(BH,K5r),e(u7,Z5r),e(xr,evr),M(b7,xr,null),b(f,Zje,u),b(f,tc,u),e(tc,v7),e(v7,$5e),M(V8,$5e,null),e(tc,ovr),e(tc,k5e),e(k5e,rvr),b(f,eDe,u),b(f,rr,u),M(X8,rr,null),e(rr,tvr),e(rr,ac),e(ac,avr),e(ac,IH),e(IH,nvr),e(ac,svr),e(ac,NH),e(NH,lvr),e(ac,ivr),e(rr,dvr),e(rr,z8),e(z8,cvr),e(z8,S5e),e(S5e,fvr),e(z8,mvr),e(rr,gvr),e(rr,Rt),M(W8,Rt,null),e(Rt,hvr),e(Rt,R5e),e(R5e,pvr),e(Rt,_vr),e(Rt,nc),e(nc,uvr),e(nc,P5e),e(P5e,bvr),e(nc,vvr),e(nc,qH),e(qH,Fvr),e(nc,Tvr),e(Rt,Mvr),M(F7,Rt,null),e(rr,Evr),e(rr,$r),M(Q8,$r,null),e($r,Cvr),e($r,B5e),e(B5e,wvr),e($r,Avr),e($r,an),e(an,yvr),e(an,I5e),e(I5e,Lvr),e(an,xvr),e(an,N5e),e(N5e,$vr),e(an,kvr),e(an,q5e),e(q5e,Svr),e(an,Rvr),e($r,Pvr),e($r,ye),e(ye,T7),e(T7,j5e),e(j5e,Bvr),e(T7,Ivr),e(T7,jH),e(jH,Nvr),e(T7,qvr),e(ye,jvr),e(ye,M7),e(M7,D5e),e(D5e,Dvr),e(M7,Gvr),e(M7,DH),e(DH,Ovr),e(M7,Vvr),e(ye,Xvr),e(ye,E7),e(E7,G5e),e(G5e,zvr),e(E7,Wvr),e(E7,GH),e(GH,Qvr),e(E7,Hvr),e(ye,Uvr),e(ye,C7),e(C7,O5e),e(O5e,Jvr),e(C7,Yvr),e(C7,OH),e(OH,Kvr),e(C7,Zvr),e(ye,e3r),e(ye,w7),e(w7,V5e),e(V5e,o3r),e(w7,r3r),e(w7,VH),e(VH,t3r),e(w7,a3r),e(ye,n3r),e(ye,A7),e(A7,X5e),e(X5e,s3r),e(A7,l3r),e(A7,XH),e(XH,i3r),e(A7,d3r),e(ye,c3r),e(ye,y7),e(y7,z5e),e(z5e,f3r),e(y7,m3r),e(y7,zH),e(zH,g3r),e(y7,h3r),e(ye,p3r),e(ye,L7),e(L7,W5e),e(W5e,_3r),e(L7,u3r),e(L7,WH),e(WH,b3r),e(L7,v3r),e(ye,F3r),e(ye,x7),e(x7,Q5e),e(Q5e,T3r),e(x7,M3r),e(x7,QH),e(QH,E3r),e(x7,C3r),e(ye,w3r),e(ye,$7),e($7,H5e),e(H5e,A3r),e($7,y3r),e($7,HH),e(HH,L3r),e($7,x3r),e($r,$3r),M(k7,$r,null),b(f,oDe,u),b(f,sc,u),e(sc,S7),e(S7,U5e),M(H8,U5e,null),e(sc,k3r),e(sc,J5e),e(J5e,S3r),b(f,rDe,u),b(f,tr,u),M(U8,tr,null),e(tr,R3r),e(tr,lc),e(lc,P3r),e(lc,UH),e(UH,B3r),e(lc,I3r),e(lc,JH),e(JH,N3r),e(lc,q3r),e(tr,j3r),e(tr,J8),e(J8,D3r),e(J8,Y5e),e(Y5e,G3r),e(J8,O3r),e(tr,V3r),e(tr,Pt),M(Y8,Pt,null),e(Pt,X3r),e(Pt,K5e),e(K5e,z3r),e(Pt,W3r),e(Pt,ic),e(ic,Q3r),e(ic,Z5e),e(Z5e,H3r),e(ic,U3r),e(ic,YH),e(YH,J3r),e(ic,Y3r),e(Pt,K3r),M(R7,Pt,null),e(tr,Z3r),e(tr,kr),M(K8,kr,null),e(kr,eFr),e(kr,eve),e(eve,oFr),e(kr,rFr),e(kr,nn),e(nn,tFr),e(nn,ove),e(ove,aFr),e(nn,nFr),e(nn,rve),e(rve,sFr),e(nn,lFr),e(nn,tve),e(tve,iFr),e(nn,dFr),e(kr,cFr),e(kr,oe),e(oe,P7),e(P7,ave),e(ave,fFr),e(P7,mFr),e(P7,KH),e(KH,gFr),e(P7,hFr),e(oe,pFr),e(oe,B7),e(B7,nve),e(nve,_Fr),e(B7,uFr),e(B7,ZH),e(ZH,bFr),e(B7,vFr),e(oe,FFr),e(oe,I7),e(I7,sve),e(sve,TFr),e(I7,MFr),e(I7,eU),e(eU,EFr),e(I7,CFr),e(oe,wFr),e(oe,N7),e(N7,lve),e(lve,AFr),e(N7,yFr),e(N7,oU),e(oU,LFr),e(N7,xFr),e(oe,$Fr),e(oe,q7),e(q7,ive),e(ive,kFr),e(q7,SFr),e(q7,rU),e(rU,RFr),e(q7,PFr),e(oe,BFr),e(oe,j7),e(j7,dve),e(dve,IFr),e(j7,NFr),e(j7,tU),e(tU,qFr),e(j7,jFr),e(oe,DFr),e(oe,D7),e(D7,cve),e(cve,GFr),e(D7,OFr),e(D7,aU),e(aU,VFr),e(D7,XFr),e(oe,zFr),e(oe,G7),e(G7,fve),e(fve,WFr),e(G7,QFr),e(G7,nU),e(nU,HFr),e(G7,UFr),e(oe,JFr),e(oe,O7),e(O7,mve),e(mve,YFr),e(O7,KFr),e(O7,sU),e(sU,ZFr),e(O7,eTr),e(oe,oTr),e(oe,V7),e(V7,gve),e(gve,rTr),e(V7,tTr),e(V7,lU),e(lU,aTr),e(V7,nTr),e(oe,sTr),e(oe,X7),e(X7,hve),e(hve,lTr),e(X7,iTr),e(X7,iU),e(iU,dTr),e(X7,cTr),e(oe,fTr),e(oe,z7),e(z7,pve),e(pve,mTr),e(z7,gTr),e(z7,dU),e(dU,hTr),e(z7,pTr),e(oe,_Tr),e(oe,W7),e(W7,_ve),e(_ve,uTr),e(W7,bTr),e(W7,cU),e(cU,vTr),e(W7,FTr),e(oe,TTr),e(oe,Q7),e(Q7,uve),e(uve,MTr),e(Q7,ETr),e(Q7,fU),e(fU,CTr),e(Q7,wTr),e(oe,ATr),e(oe,H7),e(H7,bve),e(bve,yTr),e(H7,LTr),e(H7,mU),e(mU,xTr),e(H7,$Tr),e(oe,kTr),e(oe,U7),e(U7,vve),e(vve,STr),e(U7,RTr),e(U7,gU),e(gU,PTr),e(U7,BTr),e(oe,ITr),e(oe,J7),e(J7,Fve),e(Fve,NTr),e(J7,qTr),e(J7,hU),e(hU,jTr),e(J7,DTr),e(oe,GTr),e(oe,Y7),e(Y7,Tve),e(Tve,OTr),e(Y7,VTr),e(Y7,pU),e(pU,XTr),e(Y7,zTr),e(oe,WTr),e(oe,K7),e(K7,Mve),e(Mve,QTr),e(K7,HTr),e(K7,_U),e(_U,UTr),e(K7,JTr),e(oe,YTr),e(oe,Z7),e(Z7,Eve),e(Eve,KTr),e(Z7,ZTr),e(Z7,uU),e(uU,e7r),e(Z7,o7r),e(oe,r7r),e(oe,eM),e(eM,Cve),e(Cve,t7r),e(eM,a7r),e(eM,bU),e(bU,n7r),e(eM,s7r),e(oe,l7r),e(oe,oM),e(oM,wve),e(wve,i7r),e(oM,d7r),e(oM,vU),e(vU,c7r),e(oM,f7r),e(oe,m7r),e(oe,rM),e(rM,Ave),e(Ave,g7r),e(rM,h7r),e(rM,FU),e(FU,p7r),e(rM,_7r),e(oe,u7r),e(oe,tM),e(tM,yve),e(yve,b7r),e(tM,v7r),e(tM,TU),e(TU,F7r),e(tM,T7r),e(oe,M7r),e(oe,aM),e(aM,Lve),e(Lve,E7r),e(aM,C7r),e(aM,MU),e(MU,w7r),e(aM,A7r),e(oe,y7r),e(oe,nM),e(nM,xve),e(xve,L7r),e(nM,x7r),e(nM,EU),e(EU,$7r),e(nM,k7r),e(kr,S7r),M(sM,kr,null),b(f,tDe,u),b(f,dc,u),e(dc,lM),e(lM,$ve),M(Z8,$ve,null),e(dc,R7r),e(dc,kve),e(kve,P7r),b(f,aDe,u),b(f,ar,u),M(e9,ar,null),e(ar,B7r),e(ar,cc),e(cc,I7r),e(cc,CU),e(CU,N7r),e(cc,q7r),e(cc,wU),e(wU,j7r),e(cc,D7r),e(ar,G7r),e(ar,o9),e(o9,O7r),e(o9,Sve),e(Sve,V7r),e(o9,X7r),e(ar,z7r),e(ar,Bt),M(r9,Bt,null),e(Bt,W7r),e(Bt,Rve),e(Rve,Q7r),e(Bt,H7r),e(Bt,fc),e(fc,U7r),e(fc,Pve),e(Pve,J7r),e(fc,Y7r),e(fc,AU),e(AU,K7r),e(fc,Z7r),e(Bt,eMr),M(iM,Bt,null),e(ar,oMr),e(ar,Sr),M(t9,Sr,null),e(Sr,rMr),e(Sr,Bve),e(Bve,tMr),e(Sr,aMr),e(Sr,sn),e(sn,nMr),e(sn,Ive),e(Ive,sMr),e(sn,lMr),e(sn,Nve),e(Nve,iMr),e(sn,dMr),e(sn,qve),e(qve,cMr),e(sn,fMr),e(Sr,mMr),e(Sr,pe),e(pe,dM),e(dM,jve),e(jve,gMr),e(dM,hMr),e(dM,yU),e(yU,pMr),e(dM,_Mr),e(pe,uMr),e(pe,cM),e(cM,Dve),e(Dve,bMr),e(cM,vMr),e(cM,LU),e(LU,FMr),e(cM,TMr),e(pe,MMr),e(pe,fM),e(fM,Gve),e(Gve,EMr),e(fM,CMr),e(fM,xU),e(xU,wMr),e(fM,AMr),e(pe,yMr),e(pe,mM),e(mM,Ove),e(Ove,LMr),e(mM,xMr),e(mM,$U),e($U,$Mr),e(mM,kMr),e(pe,SMr),e(pe,gM),e(gM,Vve),e(Vve,RMr),e(gM,PMr),e(gM,kU),e(kU,BMr),e(gM,IMr),e(pe,NMr),e(pe,hM),e(hM,Xve),e(Xve,qMr),e(hM,jMr),e(hM,SU),e(SU,DMr),e(hM,GMr),e(pe,OMr),e(pe,pM),e(pM,zve),e(zve,VMr),e(pM,XMr),e(pM,RU),e(RU,zMr),e(pM,WMr),e(pe,QMr),e(pe,_M),e(_M,Wve),e(Wve,HMr),e(_M,UMr),e(_M,PU),e(PU,JMr),e(_M,YMr),e(pe,KMr),e(pe,uM),e(uM,Qve),e(Qve,ZMr),e(uM,eEr),e(uM,BU),e(BU,oEr),e(uM,rEr),e(pe,tEr),e(pe,bM),e(bM,Hve),e(Hve,aEr),e(bM,nEr),e(bM,IU),e(IU,sEr),e(bM,lEr),e(pe,iEr),e(pe,vM),e(vM,Uve),e(Uve,dEr),e(vM,cEr),e(vM,NU),e(NU,fEr),e(vM,mEr),e(pe,gEr),e(pe,FM),e(FM,Jve),e(Jve,hEr),e(FM,pEr),e(FM,qU),e(qU,_Er),e(FM,uEr),e(pe,bEr),e(pe,TM),e(TM,Yve),e(Yve,vEr),e(TM,FEr),e(TM,jU),e(jU,TEr),e(TM,MEr),e(pe,EEr),e(pe,MM),e(MM,Kve),e(Kve,CEr),e(MM,wEr),e(MM,DU),e(DU,AEr),e(MM,yEr),e(pe,LEr),e(pe,EM),e(EM,Zve),e(Zve,xEr),e(EM,$Er),e(EM,GU),e(GU,kEr),e(EM,SEr),e(pe,REr),e(pe,CM),e(CM,e3e),e(e3e,PEr),e(CM,BEr),e(CM,OU),e(OU,IEr),e(CM,NEr),e(pe,qEr),e(pe,wM),e(wM,o3e),e(o3e,jEr),e(wM,DEr),e(wM,VU),e(VU,GEr),e(wM,OEr),e(Sr,VEr),M(AM,Sr,null),b(f,nDe,u),b(f,mc,u),e(mc,yM),e(yM,r3e),M(a9,r3e,null),e(mc,XEr),e(mc,t3e),e(t3e,zEr),b(f,sDe,u),b(f,nr,u),M(n9,nr,null),e(nr,WEr),e(nr,gc),e(gc,QEr),e(gc,XU),e(XU,HEr),e(gc,UEr),e(gc,zU),e(zU,JEr),e(gc,YEr),e(nr,KEr),e(nr,s9),e(s9,ZEr),e(s9,a3e),e(a3e,eCr),e(s9,oCr),e(nr,rCr),e(nr,It),M(l9,It,null),e(It,tCr),e(It,n3e),e(n3e,aCr),e(It,nCr),e(It,hc),e(hc,sCr),e(hc,s3e),e(s3e,lCr),e(hc,iCr),e(hc,WU),e(WU,dCr),e(hc,cCr),e(It,fCr),M(LM,It,null),e(nr,mCr),e(nr,Rr),M(i9,Rr,null),e(Rr,gCr),e(Rr,l3e),e(l3e,hCr),e(Rr,pCr),e(Rr,ln),e(ln,_Cr),e(ln,i3e),e(i3e,uCr),e(ln,bCr),e(ln,d3e),e(d3e,vCr),e(ln,FCr),e(ln,c3e),e(c3e,TCr),e(ln,MCr),e(Rr,ECr),e(Rr,d9),e(d9,xM),e(xM,f3e),e(f3e,CCr),e(xM,wCr),e(xM,QU),e(QU,ACr),e(xM,yCr),e(d9,LCr),e(d9,$M),e($M,m3e),e(m3e,xCr),e($M,$Cr),e($M,HU),e(HU,kCr),e($M,SCr),e(Rr,RCr),M(kM,Rr,null),b(f,lDe,u),b(f,pc,u),e(pc,SM),e(SM,g3e),M(c9,g3e,null),e(pc,PCr),e(pc,h3e),e(h3e,BCr),b(f,iDe,u),b(f,sr,u),M(f9,sr,null),e(sr,ICr),e(sr,_c),e(_c,NCr),e(_c,UU),e(UU,qCr),e(_c,jCr),e(_c,JU),e(JU,DCr),e(_c,GCr),e(sr,OCr),e(sr,m9),e(m9,VCr),e(m9,p3e),e(p3e,XCr),e(m9,zCr),e(sr,WCr),e(sr,Nt),M(g9,Nt,null),e(Nt,QCr),e(Nt,_3e),e(_3e,HCr),e(Nt,UCr),e(Nt,uc),e(uc,JCr),e(uc,u3e),e(u3e,YCr),e(uc,KCr),e(uc,YU),e(YU,ZCr),e(uc,e0r),e(Nt,o0r),M(RM,Nt,null),e(sr,r0r),e(sr,Pr),M(h9,Pr,null),e(Pr,t0r),e(Pr,b3e),e(b3e,a0r),e(Pr,n0r),e(Pr,dn),e(dn,s0r),e(dn,v3e),e(v3e,l0r),e(dn,i0r),e(dn,F3e),e(F3e,d0r),e(dn,c0r),e(dn,T3e),e(T3e,f0r),e(dn,m0r),e(Pr,g0r),e(Pr,M3e),e(M3e,PM),e(PM,E3e),e(E3e,h0r),e(PM,p0r),e(PM,KU),e(KU,_0r),e(PM,u0r),e(Pr,b0r),M(BM,Pr,null),b(f,dDe,u),b(f,bc,u),e(bc,IM),e(IM,C3e),M(p9,C3e,null),e(bc,v0r),e(bc,w3e),e(w3e,F0r),b(f,cDe,u),b(f,lr,u),M(_9,lr,null),e(lr,T0r),e(lr,vc),e(vc,M0r),e(vc,ZU),e(ZU,E0r),e(vc,C0r),e(vc,eJ),e(eJ,w0r),e(vc,A0r),e(lr,y0r),e(lr,u9),e(u9,L0r),e(u9,A3e),e(A3e,x0r),e(u9,$0r),e(lr,k0r),e(lr,qt),M(b9,qt,null),e(qt,S0r),e(qt,y3e),e(y3e,R0r),e(qt,P0r),e(qt,Fc),e(Fc,B0r),e(Fc,L3e),e(L3e,I0r),e(Fc,N0r),e(Fc,oJ),e(oJ,q0r),e(Fc,j0r),e(qt,D0r),M(NM,qt,null),e(lr,G0r),e(lr,Br),M(v9,Br,null),e(Br,O0r),e(Br,x3e),e(x3e,V0r),e(Br,X0r),e(Br,cn),e(cn,z0r),e(cn,$3e),e($3e,W0r),e(cn,Q0r),e(cn,k3e),e(k3e,H0r),e(cn,U0r),e(cn,S3e),e(S3e,J0r),e(cn,Y0r),e(Br,K0r),e(Br,de),e(de,qM),e(qM,R3e),e(R3e,Z0r),e(qM,ewr),e(qM,rJ),e(rJ,owr),e(qM,rwr),e(de,twr),e(de,jM),e(jM,P3e),e(P3e,awr),e(jM,nwr),e(jM,tJ),e(tJ,swr),e(jM,lwr),e(de,iwr),e(de,DM),e(DM,B3e),e(B3e,dwr),e(DM,cwr),e(DM,aJ),e(aJ,fwr),e(DM,mwr),e(de,gwr),e(de,GM),e(GM,I3e),e(I3e,hwr),e(GM,pwr),e(GM,nJ),e(nJ,_wr),e(GM,uwr),e(de,bwr),e(de,OM),e(OM,N3e),e(N3e,vwr),e(OM,Fwr),e(OM,sJ),e(sJ,Twr),e(OM,Mwr),e(de,Ewr),e(de,VM),e(VM,q3e),e(q3e,Cwr),e(VM,wwr),e(VM,lJ),e(lJ,Awr),e(VM,ywr),e(de,Lwr),e(de,XM),e(XM,j3e),e(j3e,xwr),e(XM,$wr),e(XM,iJ),e(iJ,kwr),e(XM,Swr),e(de,Rwr),e(de,zM),e(zM,D3e),e(D3e,Pwr),e(zM,Bwr),e(zM,dJ),e(dJ,Iwr),e(zM,Nwr),e(de,qwr),e(de,WM),e(WM,G3e),e(G3e,jwr),e(WM,Dwr),e(WM,cJ),e(cJ,Gwr),e(WM,Owr),e(de,Vwr),e(de,QM),e(QM,O3e),e(O3e,Xwr),e(QM,zwr),e(QM,fJ),e(fJ,Wwr),e(QM,Qwr),e(de,Hwr),e(de,HM),e(HM,V3e),e(V3e,Uwr),e(HM,Jwr),e(HM,mJ),e(mJ,Ywr),e(HM,Kwr),e(de,Zwr),e(de,UM),e(UM,X3e),e(X3e,e6r),e(UM,o6r),e(UM,gJ),e(gJ,r6r),e(UM,t6r),e(de,a6r),e(de,JM),e(JM,z3e),e(z3e,n6r),e(JM,s6r),e(JM,hJ),e(hJ,l6r),e(JM,i6r),e(de,d6r),e(de,YM),e(YM,W3e),e(W3e,c6r),e(YM,f6r),e(YM,pJ),e(pJ,m6r),e(YM,g6r),e(de,h6r),e(de,KM),e(KM,Q3e),e(Q3e,p6r),e(KM,_6r),e(KM,_J),e(_J,u6r),e(KM,b6r),e(de,v6r),e(de,ZM),e(ZM,H3e),e(H3e,F6r),e(ZM,T6r),e(ZM,uJ),e(uJ,M6r),e(ZM,E6r),e(de,C6r),e(de,eE),e(eE,U3e),e(U3e,w6r),e(eE,A6r),e(eE,bJ),e(bJ,y6r),e(eE,L6r),e(de,x6r),e(de,oE),e(oE,J3e),e(J3e,$6r),e(oE,k6r),e(oE,vJ),e(vJ,S6r),e(oE,R6r),e(de,P6r),e(de,rE),e(rE,Y3e),e(Y3e,B6r),e(rE,I6r),e(rE,FJ),e(FJ,N6r),e(rE,q6r),e(de,j6r),e(de,tE),e(tE,K3e),e(K3e,D6r),e(tE,G6r),e(tE,TJ),e(TJ,O6r),e(tE,V6r),e(Br,X6r),M(aE,Br,null),b(f,fDe,u),b(f,Tc,u),e(Tc,nE),e(nE,Z3e),M(F9,Z3e,null),e(Tc,z6r),e(Tc,eFe),e(eFe,W6r),b(f,mDe,u),b(f,ir,u),M(T9,ir,null),e(ir,Q6r),e(ir,Mc),e(Mc,H6r),e(Mc,MJ),e(MJ,U6r),e(Mc,J6r),e(Mc,EJ),e(EJ,Y6r),e(Mc,K6r),e(ir,Z6r),e(ir,M9),e(M9,eAr),e(M9,oFe),e(oFe,oAr),e(M9,rAr),e(ir,tAr),e(ir,jt),M(E9,jt,null),e(jt,aAr),e(jt,rFe),e(rFe,nAr),e(jt,sAr),e(jt,Ec),e(Ec,lAr),e(Ec,tFe),e(tFe,iAr),e(Ec,dAr),e(Ec,CJ),e(CJ,cAr),e(Ec,fAr),e(jt,mAr),M(sE,jt,null),e(ir,gAr),e(ir,Ir),M(C9,Ir,null),e(Ir,hAr),e(Ir,aFe),e(aFe,pAr),e(Ir,_Ar),e(Ir,fn),e(fn,uAr),e(fn,nFe),e(nFe,bAr),e(fn,vAr),e(fn,sFe),e(sFe,FAr),e(fn,TAr),e(fn,lFe),e(lFe,MAr),e(fn,EAr),e(Ir,CAr),e(Ir,ce),e(ce,lE),e(lE,iFe),e(iFe,wAr),e(lE,AAr),e(lE,wJ),e(wJ,yAr),e(lE,LAr),e(ce,xAr),e(ce,iE),e(iE,dFe),e(dFe,$Ar),e(iE,kAr),e(iE,AJ),e(AJ,SAr),e(iE,RAr),e(ce,PAr),e(ce,dE),e(dE,cFe),e(cFe,BAr),e(dE,IAr),e(dE,yJ),e(yJ,NAr),e(dE,qAr),e(ce,jAr),e(ce,cE),e(cE,fFe),e(fFe,DAr),e(cE,GAr),e(cE,LJ),e(LJ,OAr),e(cE,VAr),e(ce,XAr),e(ce,fE),e(fE,mFe),e(mFe,zAr),e(fE,WAr),e(fE,xJ),e(xJ,QAr),e(fE,HAr),e(ce,UAr),e(ce,mE),e(mE,gFe),e(gFe,JAr),e(mE,YAr),e(mE,$J),e($J,KAr),e(mE,ZAr),e(ce,eyr),e(ce,gE),e(gE,hFe),e(hFe,oyr),e(gE,ryr),e(gE,kJ),e(kJ,tyr),e(gE,ayr),e(ce,nyr),e(ce,hE),e(hE,pFe),e(pFe,syr),e(hE,lyr),e(hE,SJ),e(SJ,iyr),e(hE,dyr),e(ce,cyr),e(ce,pE),e(pE,_Fe),e(_Fe,fyr),e(pE,myr),e(pE,RJ),e(RJ,gyr),e(pE,hyr),e(ce,pyr),e(ce,_E),e(_E,uFe),e(uFe,_yr),e(_E,uyr),e(_E,PJ),e(PJ,byr),e(_E,vyr),e(ce,Fyr),e(ce,uE),e(uE,bFe),e(bFe,Tyr),e(uE,Myr),e(uE,BJ),e(BJ,Eyr),e(uE,Cyr),e(ce,wyr),e(ce,bE),e(bE,vFe),e(vFe,Ayr),e(bE,yyr),e(bE,IJ),e(IJ,Lyr),e(bE,xyr),e(ce,$yr),e(ce,vE),e(vE,FFe),e(FFe,kyr),e(vE,Syr),e(vE,NJ),e(NJ,Ryr),e(vE,Pyr),e(ce,Byr),e(ce,FE),e(FE,TFe),e(TFe,Iyr),e(FE,Nyr),e(FE,qJ),e(qJ,qyr),e(FE,jyr),e(ce,Dyr),e(ce,TE),e(TE,MFe),e(MFe,Gyr),e(TE,Oyr),e(TE,jJ),e(jJ,Vyr),e(TE,Xyr),e(ce,zyr),e(ce,ME),e(ME,EFe),e(EFe,Wyr),e(ME,Qyr),e(ME,DJ),e(DJ,Hyr),e(ME,Uyr),e(ce,Jyr),e(ce,EE),e(EE,CFe),e(CFe,Yyr),e(EE,Kyr),e(EE,GJ),e(GJ,Zyr),e(EE,eLr),e(ce,oLr),e(ce,CE),e(CE,wFe),e(wFe,rLr),e(CE,tLr),e(CE,OJ),e(OJ,aLr),e(CE,nLr),e(ce,sLr),e(ce,wE),e(wE,AFe),e(AFe,lLr),e(wE,iLr),e(wE,VJ),e(VJ,dLr),e(wE,cLr),e(ce,fLr),e(ce,AE),e(AE,yFe),e(yFe,mLr),e(AE,gLr),e(AE,XJ),e(XJ,hLr),e(AE,pLr),e(Ir,_Lr),M(yE,Ir,null),b(f,gDe,u),b(f,Cc,u),e(Cc,LE),e(LE,LFe),M(w9,LFe,null),e(Cc,uLr),e(Cc,xFe),e(xFe,bLr),b(f,hDe,u),b(f,dr,u),M(A9,dr,null),e(dr,vLr),e(dr,wc),e(wc,FLr),e(wc,zJ),e(zJ,TLr),e(wc,MLr),e(wc,WJ),e(WJ,ELr),e(wc,CLr),e(dr,wLr),e(dr,y9),e(y9,ALr),e(y9,$Fe),e($Fe,yLr),e(y9,LLr),e(dr,xLr),e(dr,Dt),M(L9,Dt,null),e(Dt,$Lr),e(Dt,kFe),e(kFe,kLr),e(Dt,SLr),e(Dt,Ac),e(Ac,RLr),e(Ac,SFe),e(SFe,PLr),e(Ac,BLr),e(Ac,QJ),e(QJ,ILr),e(Ac,NLr),e(Dt,qLr),M(xE,Dt,null),e(dr,jLr),e(dr,Nr),M(x9,Nr,null),e(Nr,DLr),e(Nr,RFe),e(RFe,GLr),e(Nr,OLr),e(Nr,mn),e(mn,VLr),e(mn,PFe),e(PFe,XLr),e(mn,zLr),e(mn,BFe),e(BFe,WLr),e(mn,QLr),e(mn,IFe),e(IFe,HLr),e(mn,ULr),e(Nr,JLr),e(Nr,NFe),e(NFe,$E),e($E,qFe),e(qFe,YLr),e($E,KLr),e($E,HJ),e(HJ,ZLr),e($E,e8r),e(Nr,o8r),M(kE,Nr,null),b(f,pDe,u),b(f,yc,u),e(yc,SE),e(SE,jFe),M($9,jFe,null),e(yc,r8r),e(yc,DFe),e(DFe,t8r),b(f,_De,u),b(f,cr,u),M(k9,cr,null),e(cr,a8r),e(cr,Lc),e(Lc,n8r),e(Lc,UJ),e(UJ,s8r),e(Lc,l8r),e(Lc,JJ),e(JJ,i8r),e(Lc,d8r),e(cr,c8r),e(cr,S9),e(S9,f8r),e(S9,GFe),e(GFe,m8r),e(S9,g8r),e(cr,h8r),e(cr,Gt),M(R9,Gt,null),e(Gt,p8r),e(Gt,OFe),e(OFe,_8r),e(Gt,u8r),e(Gt,xc),e(xc,b8r),e(xc,VFe),e(VFe,v8r),e(xc,F8r),e(xc,YJ),e(YJ,T8r),e(xc,M8r),e(Gt,E8r),M(RE,Gt,null),e(cr,C8r),e(cr,qr),M(P9,qr,null),e(qr,w8r),e(qr,XFe),e(XFe,A8r),e(qr,y8r),e(qr,gn),e(gn,L8r),e(gn,zFe),e(zFe,x8r),e(gn,$8r),e(gn,WFe),e(WFe,k8r),e(gn,S8r),e(gn,QFe),e(QFe,R8r),e(gn,P8r),e(qr,B8r),e(qr,HFe),e(HFe,PE),e(PE,UFe),e(UFe,I8r),e(PE,N8r),e(PE,KJ),e(KJ,q8r),e(PE,j8r),e(qr,D8r),M(BE,qr,null),b(f,uDe,u),b(f,$c,u),e($c,IE),e(IE,JFe),M(B9,JFe,null),e($c,G8r),e($c,YFe),e(YFe,O8r),b(f,bDe,u),b(f,fr,u),M(I9,fr,null),e(fr,V8r),e(fr,kc),e(kc,X8r),e(kc,ZJ),e(ZJ,z8r),e(kc,W8r),e(kc,eY),e(eY,Q8r),e(kc,H8r),e(fr,U8r),e(fr,N9),e(N9,J8r),e(N9,KFe),e(KFe,Y8r),e(N9,K8r),e(fr,Z8r),e(fr,Ot),M(q9,Ot,null),e(Ot,e9r),e(Ot,ZFe),e(ZFe,o9r),e(Ot,r9r),e(Ot,Sc),e(Sc,t9r),e(Sc,eTe),e(eTe,a9r),e(Sc,n9r),e(Sc,oY),e(oY,s9r),e(Sc,l9r),e(Ot,i9r),M(NE,Ot,null),e(fr,d9r),e(fr,jr),M(j9,jr,null),e(jr,c9r),e(jr,oTe),e(oTe,f9r),e(jr,m9r),e(jr,hn),e(hn,g9r),e(hn,rTe),e(rTe,h9r),e(hn,p9r),e(hn,tTe),e(tTe,_9r),e(hn,u9r),e(hn,aTe),e(aTe,b9r),e(hn,v9r),e(jr,F9r),e(jr,re),e(re,qE),e(qE,nTe),e(nTe,T9r),e(qE,M9r),e(qE,rY),e(rY,E9r),e(qE,C9r),e(re,w9r),e(re,jE),e(jE,sTe),e(sTe,A9r),e(jE,y9r),e(jE,tY),e(tY,L9r),e(jE,x9r),e(re,$9r),e(re,DE),e(DE,lTe),e(lTe,k9r),e(DE,S9r),e(DE,aY),e(aY,R9r),e(DE,P9r),e(re,B9r),e(re,GE),e(GE,iTe),e(iTe,I9r),e(GE,N9r),e(GE,nY),e(nY,q9r),e(GE,j9r),e(re,D9r),e(re,OE),e(OE,dTe),e(dTe,G9r),e(OE,O9r),e(OE,sY),e(sY,V9r),e(OE,X9r),e(re,z9r),e(re,VE),e(VE,cTe),e(cTe,W9r),e(VE,Q9r),e(VE,lY),e(lY,H9r),e(VE,U9r),e(re,J9r),e(re,XE),e(XE,fTe),e(fTe,Y9r),e(XE,K9r),e(XE,iY),e(iY,Z9r),e(XE,exr),e(re,oxr),e(re,zE),e(zE,mTe),e(mTe,rxr),e(zE,txr),e(zE,dY),e(dY,axr),e(zE,nxr),e(re,sxr),e(re,WE),e(WE,gTe),e(gTe,lxr),e(WE,ixr),e(WE,cY),e(cY,dxr),e(WE,cxr),e(re,fxr),e(re,QE),e(QE,hTe),e(hTe,mxr),e(QE,gxr),e(QE,fY),e(fY,hxr),e(QE,pxr),e(re,_xr),e(re,HE),e(HE,pTe),e(pTe,uxr),e(HE,bxr),e(HE,mY),e(mY,vxr),e(HE,Fxr),e(re,Txr),e(re,UE),e(UE,_Te),e(_Te,Mxr),e(UE,Exr),e(UE,gY),e(gY,Cxr),e(UE,wxr),e(re,Axr),e(re,JE),e(JE,uTe),e(uTe,yxr),e(JE,Lxr),e(JE,hY),e(hY,xxr),e(JE,$xr),e(re,kxr),e(re,YE),e(YE,bTe),e(bTe,Sxr),e(YE,Rxr),e(YE,pY),e(pY,Pxr),e(YE,Bxr),e(re,Ixr),e(re,KE),e(KE,vTe),e(vTe,Nxr),e(KE,qxr),e(KE,_Y),e(_Y,jxr),e(KE,Dxr),e(re,Gxr),e(re,ZE),e(ZE,FTe),e(FTe,Oxr),e(ZE,Vxr),e(ZE,uY),e(uY,Xxr),e(ZE,zxr),e(re,Wxr),e(re,eC),e(eC,TTe),e(TTe,Qxr),e(eC,Hxr),e(eC,bY),e(bY,Uxr),e(eC,Jxr),e(re,Yxr),e(re,oC),e(oC,MTe),e(MTe,Kxr),e(oC,Zxr),e(oC,vY),e(vY,e$r),e(oC,o$r),e(re,r$r),e(re,rC),e(rC,ETe),e(ETe,t$r),e(rC,a$r),e(rC,FY),e(FY,n$r),e(rC,s$r),e(re,l$r),e(re,tC),e(tC,CTe),e(CTe,i$r),e(tC,d$r),e(tC,TY),e(TY,c$r),e(tC,f$r),e(re,m$r),e(re,aC),e(aC,wTe),e(wTe,g$r),e(aC,h$r),e(aC,MY),e(MY,p$r),e(aC,_$r),e(re,u$r),e(re,nC),e(nC,ATe),e(ATe,b$r),e(nC,v$r),e(nC,EY),e(EY,F$r),e(nC,T$r),e(re,M$r),e(re,sC),e(sC,yTe),e(yTe,E$r),e(sC,C$r),e(sC,CY),e(CY,w$r),e(sC,A$r),e(re,y$r),e(re,lC),e(lC,LTe),e(LTe,L$r),e(lC,x$r),e(lC,wY),e(wY,$$r),e(lC,k$r),e(re,S$r),e(re,iC),e(iC,xTe),e(xTe,R$r),e(iC,P$r),e(iC,AY),e(AY,B$r),e(iC,I$r),e(re,N$r),e(re,dC),e(dC,$Te),e($Te,q$r),e(dC,j$r),e(dC,yY),e(yY,D$r),e(dC,G$r),e(jr,O$r),M(cC,jr,null),b(f,vDe,u),b(f,Rc,u),e(Rc,fC),e(fC,kTe),M(D9,kTe,null),e(Rc,V$r),e(Rc,STe),e(STe,X$r),b(f,FDe,u),b(f,mr,u),M(G9,mr,null),e(mr,z$r),e(mr,Pc),e(Pc,W$r),e(Pc,LY),e(LY,Q$r),e(Pc,H$r),e(Pc,xY),e(xY,U$r),e(Pc,J$r),e(mr,Y$r),e(mr,O9),e(O9,K$r),e(O9,RTe),e(RTe,Z$r),e(O9,ekr),e(mr,okr),e(mr,Vt),M(V9,Vt,null),e(Vt,rkr),e(Vt,PTe),e(PTe,tkr),e(Vt,akr),e(Vt,Bc),e(Bc,nkr),e(Bc,BTe),e(BTe,skr),e(Bc,lkr),e(Bc,$Y),e($Y,ikr),e(Bc,dkr),e(Vt,ckr),M(mC,Vt,null),e(mr,fkr),e(mr,Dr),M(X9,Dr,null),e(Dr,mkr),e(Dr,ITe),e(ITe,gkr),e(Dr,hkr),e(Dr,pn),e(pn,pkr),e(pn,NTe),e(NTe,_kr),e(pn,ukr),e(pn,qTe),e(qTe,bkr),e(pn,vkr),e(pn,jTe),e(jTe,Fkr),e(pn,Tkr),e(Dr,Mkr),e(Dr,Le),e(Le,gC),e(gC,DTe),e(DTe,Ekr),e(gC,Ckr),e(gC,kY),e(kY,wkr),e(gC,Akr),e(Le,ykr),e(Le,hC),e(hC,GTe),e(GTe,Lkr),e(hC,xkr),e(hC,SY),e(SY,$kr),e(hC,kkr),e(Le,Skr),e(Le,pC),e(pC,OTe),e(OTe,Rkr),e(pC,Pkr),e(pC,RY),e(RY,Bkr),e(pC,Ikr),e(Le,Nkr),e(Le,_C),e(_C,VTe),e(VTe,qkr),e(_C,jkr),e(_C,PY),e(PY,Dkr),e(_C,Gkr),e(Le,Okr),e(Le,uC),e(uC,XTe),e(XTe,Vkr),e(uC,Xkr),e(uC,BY),e(BY,zkr),e(uC,Wkr),e(Le,Qkr),e(Le,bC),e(bC,zTe),e(zTe,Hkr),e(bC,Ukr),e(bC,IY),e(IY,Jkr),e(bC,Ykr),e(Le,Kkr),e(Le,vC),e(vC,WTe),e(WTe,Zkr),e(vC,eSr),e(vC,NY),e(NY,oSr),e(vC,rSr),e(Le,tSr),e(Le,FC),e(FC,QTe),e(QTe,aSr),e(FC,nSr),e(FC,qY),e(qY,sSr),e(FC,lSr),e(Le,iSr),e(Le,TC),e(TC,HTe),e(HTe,dSr),e(TC,cSr),e(TC,jY),e(jY,fSr),e(TC,mSr),e(Le,gSr),e(Le,MC),e(MC,UTe),e(UTe,hSr),e(MC,pSr),e(MC,DY),e(DY,_Sr),e(MC,uSr),e(Dr,bSr),M(EC,Dr,null),b(f,TDe,u),b(f,Ic,u),e(Ic,CC),e(CC,JTe),M(z9,JTe,null),e(Ic,vSr),e(Ic,YTe),e(YTe,FSr),b(f,MDe,u),b(f,gr,u),M(W9,gr,null),e(gr,TSr),e(gr,Nc),e(Nc,MSr),e(Nc,GY),e(GY,ESr),e(Nc,CSr),e(Nc,OY),e(OY,wSr),e(Nc,ASr),e(gr,ySr),e(gr,Q9),e(Q9,LSr),e(Q9,KTe),e(KTe,xSr),e(Q9,$Sr),e(gr,kSr),e(gr,Xt),M(H9,Xt,null),e(Xt,SSr),e(Xt,ZTe),e(ZTe,RSr),e(Xt,PSr),e(Xt,qc),e(qc,BSr),e(qc,e7e),e(e7e,ISr),e(qc,NSr),e(qc,VY),e(VY,qSr),e(qc,jSr),e(Xt,DSr),M(wC,Xt,null),e(gr,GSr),e(gr,Gr),M(U9,Gr,null),e(Gr,OSr),e(Gr,o7e),e(o7e,VSr),e(Gr,XSr),e(Gr,_n),e(_n,zSr),e(_n,r7e),e(r7e,WSr),e(_n,QSr),e(_n,t7e),e(t7e,HSr),e(_n,USr),e(_n,a7e),e(a7e,JSr),e(_n,YSr),e(Gr,KSr),e(Gr,Ee),e(Ee,AC),e(AC,n7e),e(n7e,ZSr),e(AC,eRr),e(AC,XY),e(XY,oRr),e(AC,rRr),e(Ee,tRr),e(Ee,yC),e(yC,s7e),e(s7e,aRr),e(yC,nRr),e(yC,zY),e(zY,sRr),e(yC,lRr),e(Ee,iRr),e(Ee,LC),e(LC,l7e),e(l7e,dRr),e(LC,cRr),e(LC,WY),e(WY,fRr),e(LC,mRr),e(Ee,gRr),e(Ee,xC),e(xC,i7e),e(i7e,hRr),e(xC,pRr),e(xC,QY),e(QY,_Rr),e(xC,uRr),e(Ee,bRr),e(Ee,$C),e($C,d7e),e(d7e,vRr),e($C,FRr),e($C,HY),e(HY,TRr),e($C,MRr),e(Ee,ERr),e(Ee,kC),e(kC,c7e),e(c7e,CRr),e(kC,wRr),e(kC,UY),e(UY,ARr),e(kC,yRr),e(Ee,LRr),e(Ee,SC),e(SC,f7e),e(f7e,xRr),e(SC,$Rr),e(SC,JY),e(JY,kRr),e(SC,SRr),e(Ee,RRr),e(Ee,RC),e(RC,m7e),e(m7e,PRr),e(RC,BRr),e(RC,YY),e(YY,IRr),e(RC,NRr),e(Ee,qRr),e(Ee,PC),e(PC,g7e),e(g7e,jRr),e(PC,DRr),e(PC,KY),e(KY,GRr),e(PC,ORr),e(Ee,VRr),e(Ee,BC),e(BC,h7e),e(h7e,XRr),e(BC,zRr),e(BC,ZY),e(ZY,WRr),e(BC,QRr),e(Ee,HRr),e(Ee,IC),e(IC,p7e),e(p7e,URr),e(IC,JRr),e(IC,eK),e(eK,YRr),e(IC,KRr),e(Ee,ZRr),e(Ee,NC),e(NC,_7e),e(_7e,ePr),e(NC,oPr),e(NC,oK),e(oK,rPr),e(NC,tPr),e(Gr,aPr),M(qC,Gr,null),b(f,EDe,u),b(f,jc,u),e(jc,jC),e(jC,u7e),M(J9,u7e,null),e(jc,nPr),e(jc,b7e),e(b7e,sPr),b(f,CDe,u),b(f,hr,u),M(Y9,hr,null),e(hr,lPr),e(hr,Dc),e(Dc,iPr),e(Dc,rK),e(rK,dPr),e(Dc,cPr),e(Dc,tK),e(tK,fPr),e(Dc,mPr),e(hr,gPr),e(hr,K9),e(K9,hPr),e(K9,v7e),e(v7e,pPr),e(K9,_Pr),e(hr,uPr),e(hr,zt),M(Z9,zt,null),e(zt,bPr),e(zt,F7e),e(F7e,vPr),e(zt,FPr),e(zt,Gc),e(Gc,TPr),e(Gc,T7e),e(T7e,MPr),e(Gc,EPr),e(Gc,aK),e(aK,CPr),e(Gc,wPr),e(zt,APr),M(DC,zt,null),e(hr,yPr),e(hr,Or),M(ex,Or,null),e(Or,LPr),e(Or,M7e),e(M7e,xPr),e(Or,$Pr),e(Or,un),e(un,kPr),e(un,E7e),e(E7e,SPr),e(un,RPr),e(un,C7e),e(C7e,PPr),e(un,BPr),e(un,w7e),e(w7e,IPr),e(un,NPr),e(Or,qPr),e(Or,xe),e(xe,GC),e(GC,A7e),e(A7e,jPr),e(GC,DPr),e(GC,nK),e(nK,GPr),e(GC,OPr),e(xe,VPr),e(xe,OC),e(OC,y7e),e(y7e,XPr),e(OC,zPr),e(OC,sK),e(sK,WPr),e(OC,QPr),e(xe,HPr),e(xe,VC),e(VC,L7e),e(L7e,UPr),e(VC,JPr),e(VC,lK),e(lK,YPr),e(VC,KPr),e(xe,ZPr),e(xe,XC),e(XC,x7e),e(x7e,eBr),e(XC,oBr),e(XC,iK),e(iK,rBr),e(XC,tBr),e(xe,aBr),e(xe,zC),e(zC,$7e),e($7e,nBr),e(zC,sBr),e(zC,dK),e(dK,lBr),e(zC,iBr),e(xe,dBr),e(xe,WC),e(WC,k7e),e(k7e,cBr),e(WC,fBr),e(WC,cK),e(cK,mBr),e(WC,gBr),e(xe,hBr),e(xe,QC),e(QC,S7e),e(S7e,pBr),e(QC,_Br),e(QC,fK),e(fK,uBr),e(QC,bBr),e(xe,vBr),e(xe,HC),e(HC,R7e),e(R7e,FBr),e(HC,TBr),e(HC,mK),e(mK,MBr),e(HC,EBr),e(xe,CBr),e(xe,UC),e(UC,P7e),e(P7e,wBr),e(UC,ABr),e(UC,gK),e(gK,yBr),e(UC,LBr),e(xe,xBr),e(xe,JC),e(JC,B7e),e(B7e,$Br),e(JC,kBr),e(JC,hK),e(hK,SBr),e(JC,RBr),e(Or,PBr),M(YC,Or,null),b(f,wDe,u),b(f,Oc,u),e(Oc,KC),e(KC,I7e),M(ox,I7e,null),e(Oc,BBr),e(Oc,N7e),e(N7e,IBr),b(f,ADe,u),b(f,pr,u),M(rx,pr,null),e(pr,NBr),e(pr,Vc),e(Vc,qBr),e(Vc,pK),e(pK,jBr),e(Vc,DBr),e(Vc,_K),e(_K,GBr),e(Vc,OBr),e(pr,VBr),e(pr,tx),e(tx,XBr),e(tx,q7e),e(q7e,zBr),e(tx,WBr),e(pr,QBr),e(pr,Wt),M(ax,Wt,null),e(Wt,HBr),e(Wt,j7e),e(j7e,UBr),e(Wt,JBr),e(Wt,Xc),e(Xc,YBr),e(Xc,D7e),e(D7e,KBr),e(Xc,ZBr),e(Xc,uK),e(uK,eIr),e(Xc,oIr),e(Wt,rIr),M(ZC,Wt,null),e(pr,tIr),e(pr,Vr),M(nx,Vr,null),e(Vr,aIr),e(Vr,G7e),e(G7e,nIr),e(Vr,sIr),e(Vr,bn),e(bn,lIr),e(bn,O7e),e(O7e,iIr),e(bn,dIr),e(bn,V7e),e(V7e,cIr),e(bn,fIr),e(bn,X7e),e(X7e,mIr),e(bn,gIr),e(Vr,hIr),e(Vr,Pe),e(Pe,e0),e(e0,z7e),e(z7e,pIr),e(e0,_Ir),e(e0,bK),e(bK,uIr),e(e0,bIr),e(Pe,vIr),e(Pe,o0),e(o0,W7e),e(W7e,FIr),e(o0,TIr),e(o0,vK),e(vK,MIr),e(o0,EIr),e(Pe,CIr),e(Pe,r0),e(r0,Q7e),e(Q7e,wIr),e(r0,AIr),e(r0,FK),e(FK,yIr),e(r0,LIr),e(Pe,xIr),e(Pe,t0),e(t0,H7e),e(H7e,$Ir),e(t0,kIr),e(t0,TK),e(TK,SIr),e(t0,RIr),e(Pe,PIr),e(Pe,a0),e(a0,U7e),e(U7e,BIr),e(a0,IIr),e(a0,MK),e(MK,NIr),e(a0,qIr),e(Pe,jIr),e(Pe,n0),e(n0,J7e),e(J7e,DIr),e(n0,GIr),e(n0,EK),e(EK,OIr),e(n0,VIr),e(Pe,XIr),e(Pe,s0),e(s0,Y7e),e(Y7e,zIr),e(s0,WIr),e(s0,CK),e(CK,QIr),e(s0,HIr),e(Pe,UIr),e(Pe,l0),e(l0,K7e),e(K7e,JIr),e(l0,YIr),e(l0,wK),e(wK,KIr),e(l0,ZIr),e(Pe,eNr),e(Pe,i0),e(i0,Z7e),e(Z7e,oNr),e(i0,rNr),e(i0,AK),e(AK,tNr),e(i0,aNr),e(Vr,nNr),M(d0,Vr,null),b(f,yDe,u),b(f,zc,u),e(zc,c0),e(c0,eMe),M(sx,eMe,null),e(zc,sNr),e(zc,oMe),e(oMe,lNr),b(f,LDe,u),b(f,_r,u),M(lx,_r,null),e(_r,iNr),e(_r,Wc),e(Wc,dNr),e(Wc,yK),e(yK,cNr),e(Wc,fNr),e(Wc,LK),e(LK,mNr),e(Wc,gNr),e(_r,hNr),e(_r,ix),e(ix,pNr),e(ix,rMe),e(rMe,_Nr),e(ix,uNr),e(_r,bNr),e(_r,Qt),M(dx,Qt,null),e(Qt,vNr),e(Qt,tMe),e(tMe,FNr),e(Qt,TNr),e(Qt,Qc),e(Qc,MNr),e(Qc,aMe),e(aMe,ENr),e(Qc,CNr),e(Qc,xK),e(xK,wNr),e(Qc,ANr),e(Qt,yNr),M(f0,Qt,null),e(_r,LNr),e(_r,Xr),M(cx,Xr,null),e(Xr,xNr),e(Xr,nMe),e(nMe,$Nr),e(Xr,kNr),e(Xr,vn),e(vn,SNr),e(vn,sMe),e(sMe,RNr),e(vn,PNr),e(vn,lMe),e(lMe,BNr),e(vn,INr),e(vn,iMe),e(iMe,NNr),e(vn,qNr),e(Xr,jNr),e(Xr,$e),e($e,m0),e(m0,dMe),e(dMe,DNr),e(m0,GNr),e(m0,$K),e($K,ONr),e(m0,VNr),e($e,XNr),e($e,g0),e(g0,cMe),e(cMe,zNr),e(g0,WNr),e(g0,kK),e(kK,QNr),e(g0,HNr),e($e,UNr),e($e,h0),e(h0,fMe),e(fMe,JNr),e(h0,YNr),e(h0,SK),e(SK,KNr),e(h0,ZNr),e($e,eqr),e($e,p0),e(p0,mMe),e(mMe,oqr),e(p0,rqr),e(p0,RK),e(RK,tqr),e(p0,aqr),e($e,nqr),e($e,_0),e(_0,gMe),e(gMe,sqr),e(_0,lqr),e(_0,PK),e(PK,iqr),e(_0,dqr),e($e,cqr),e($e,u0),e(u0,hMe),e(hMe,fqr),e(u0,mqr),e(u0,BK),e(BK,gqr),e(u0,hqr),e($e,pqr),e($e,b0),e(b0,pMe),e(pMe,_qr),e(b0,uqr),e(b0,IK),e(IK,bqr),e(b0,vqr),e($e,Fqr),e($e,v0),e(v0,_Me),e(_Me,Tqr),e(v0,Mqr),e(v0,NK),e(NK,Eqr),e(v0,Cqr),e($e,wqr),e($e,F0),e(F0,uMe),e(uMe,Aqr),e(F0,yqr),e(F0,qK),e(qK,Lqr),e(F0,xqr),e($e,$qr),e($e,T0),e(T0,bMe),e(bMe,kqr),e(T0,Sqr),e(T0,jK),e(jK,Rqr),e(T0,Pqr),e(Xr,Bqr),M(M0,Xr,null),b(f,xDe,u),b(f,Hc,u),e(Hc,E0),e(E0,vMe),M(fx,vMe,null),e(Hc,Iqr),e(Hc,FMe),e(FMe,Nqr),b(f,$De,u),b(f,ur,u),M(mx,ur,null),e(ur,qqr),e(ur,Uc),e(Uc,jqr),e(Uc,DK),e(DK,Dqr),e(Uc,Gqr),e(Uc,GK),e(GK,Oqr),e(Uc,Vqr),e(ur,Xqr),e(ur,gx),e(gx,zqr),e(gx,TMe),e(TMe,Wqr),e(gx,Qqr),e(ur,Hqr),e(ur,Ht),M(hx,Ht,null),e(Ht,Uqr),e(Ht,MMe),e(MMe,Jqr),e(Ht,Yqr),e(Ht,Jc),e(Jc,Kqr),e(Jc,EMe),e(EMe,Zqr),e(Jc,ejr),e(Jc,OK),e(OK,ojr),e(Jc,rjr),e(Ht,tjr),M(C0,Ht,null),e(ur,ajr),e(ur,zr),M(px,zr,null),e(zr,njr),e(zr,CMe),e(CMe,sjr),e(zr,ljr),e(zr,Fn),e(Fn,ijr),e(Fn,wMe),e(wMe,djr),e(Fn,cjr),e(Fn,AMe),e(AMe,fjr),e(Fn,mjr),e(Fn,yMe),e(yMe,gjr),e(Fn,hjr),e(zr,pjr),e(zr,ke),e(ke,w0),e(w0,LMe),e(LMe,_jr),e(w0,ujr),e(w0,VK),e(VK,bjr),e(w0,vjr),e(ke,Fjr),e(ke,A0),e(A0,xMe),e(xMe,Tjr),e(A0,Mjr),e(A0,XK),e(XK,Ejr),e(A0,Cjr),e(ke,wjr),e(ke,y0),e(y0,$Me),e($Me,Ajr),e(y0,yjr),e(y0,zK),e(zK,Ljr),e(y0,xjr),e(ke,$jr),e(ke,L0),e(L0,kMe),e(kMe,kjr),e(L0,Sjr),e(L0,WK),e(WK,Rjr),e(L0,Pjr),e(ke,Bjr),e(ke,x0),e(x0,SMe),e(SMe,Ijr),e(x0,Njr),e(x0,QK),e(QK,qjr),e(x0,jjr),e(ke,Djr),e(ke,$0),e($0,RMe),e(RMe,Gjr),e($0,Ojr),e($0,HK),e(HK,Vjr),e($0,Xjr),e(ke,zjr),e(ke,k0),e(k0,PMe),e(PMe,Wjr),e(k0,Qjr),e(k0,UK),e(UK,Hjr),e(k0,Ujr),e(ke,Jjr),e(ke,S0),e(S0,BMe),e(BMe,Yjr),e(S0,Kjr),e(S0,JK),e(JK,Zjr),e(S0,eDr),e(ke,oDr),e(ke,R0),e(R0,IMe),e(IMe,rDr),e(R0,tDr),e(R0,YK),e(YK,aDr),e(R0,nDr),e(ke,sDr),e(ke,P0),e(P0,NMe),e(NMe,lDr),e(P0,iDr),e(P0,KK),e(KK,dDr),e(P0,cDr),e(zr,fDr),M(B0,zr,null),b(f,kDe,u),b(f,Yc,u),e(Yc,I0),e(I0,qMe),M(_x,qMe,null),e(Yc,mDr),e(Yc,jMe),e(jMe,gDr),b(f,SDe,u),b(f,br,u),M(ux,br,null),e(br,hDr),e(br,Kc),e(Kc,pDr),e(Kc,ZK),e(ZK,_Dr),e(Kc,uDr),e(Kc,eZ),e(eZ,bDr),e(Kc,vDr),e(br,FDr),e(br,bx),e(bx,TDr),e(bx,DMe),e(DMe,MDr),e(bx,EDr),e(br,CDr),e(br,Ut),M(vx,Ut,null),e(Ut,wDr),e(Ut,GMe),e(GMe,ADr),e(Ut,yDr),e(Ut,Zc),e(Zc,LDr),e(Zc,OMe),e(OMe,xDr),e(Zc,$Dr),e(Zc,oZ),e(oZ,kDr),e(Zc,SDr),e(Ut,RDr),M(N0,Ut,null),e(br,PDr),e(br,Wr),M(Fx,Wr,null),e(Wr,BDr),e(Wr,VMe),e(VMe,IDr),e(Wr,NDr),e(Wr,Tn),e(Tn,qDr),e(Tn,XMe),e(XMe,jDr),e(Tn,DDr),e(Tn,zMe),e(zMe,GDr),e(Tn,ODr),e(Tn,WMe),e(WMe,VDr),e(Tn,XDr),e(Wr,zDr),e(Wr,Ge),e(Ge,q0),e(q0,QMe),e(QMe,WDr),e(q0,QDr),e(q0,rZ),e(rZ,HDr),e(q0,UDr),e(Ge,JDr),e(Ge,j0),e(j0,HMe),e(HMe,YDr),e(j0,KDr),e(j0,tZ),e(tZ,ZDr),e(j0,eGr),e(Ge,oGr),e(Ge,D0),e(D0,UMe),e(UMe,rGr),e(D0,tGr),e(D0,aZ),e(aZ,aGr),e(D0,nGr),e(Ge,sGr),e(Ge,G0),e(G0,JMe),e(JMe,lGr),e(G0,iGr),e(G0,nZ),e(nZ,dGr),e(G0,cGr),e(Ge,fGr),e(Ge,O0),e(O0,YMe),e(YMe,mGr),e(O0,gGr),e(O0,sZ),e(sZ,hGr),e(O0,pGr),e(Ge,_Gr),e(Ge,V0),e(V0,KMe),e(KMe,uGr),e(V0,bGr),e(V0,lZ),e(lZ,vGr),e(V0,FGr),e(Ge,TGr),e(Ge,X0),e(X0,ZMe),e(ZMe,MGr),e(X0,EGr),e(X0,iZ),e(iZ,CGr),e(X0,wGr),e(Ge,AGr),e(Ge,z0),e(z0,eEe),e(eEe,yGr),e(z0,LGr),e(z0,dZ),e(dZ,xGr),e(z0,$Gr),e(Wr,kGr),M(W0,Wr,null),b(f,RDe,u),b(f,ef,u),e(ef,Q0),e(Q0,oEe),M(Tx,oEe,null),e(ef,SGr),e(ef,rEe),e(rEe,RGr),b(f,PDe,u),b(f,vr,u),M(Mx,vr,null),e(vr,PGr),e(vr,of),e(of,BGr),e(of,cZ),e(cZ,IGr),e(of,NGr),e(of,fZ),e(fZ,qGr),e(of,jGr),e(vr,DGr),e(vr,Ex),e(Ex,GGr),e(Ex,tEe),e(tEe,OGr),e(Ex,VGr),e(vr,XGr),e(vr,Jt),M(Cx,Jt,null),e(Jt,zGr),e(Jt,aEe),e(aEe,WGr),e(Jt,QGr),e(Jt,rf),e(rf,HGr),e(rf,nEe),e(nEe,UGr),e(rf,JGr),e(rf,mZ),e(mZ,YGr),e(rf,KGr),e(Jt,ZGr),M(H0,Jt,null),e(vr,eOr),e(vr,Qr),M(wx,Qr,null),e(Qr,oOr),e(Qr,sEe),e(sEe,rOr),e(Qr,tOr),e(Qr,Mn),e(Mn,aOr),e(Mn,lEe),e(lEe,nOr),e(Mn,sOr),e(Mn,iEe),e(iEe,lOr),e(Mn,iOr),e(Mn,dEe),e(dEe,dOr),e(Mn,cOr),e(Qr,fOr),e(Qr,Oe),e(Oe,U0),e(U0,cEe),e(cEe,mOr),e(U0,gOr),e(U0,gZ),e(gZ,hOr),e(U0,pOr),e(Oe,_Or),e(Oe,J0),e(J0,fEe),e(fEe,uOr),e(J0,bOr),e(J0,hZ),e(hZ,vOr),e(J0,FOr),e(Oe,TOr),e(Oe,Y0),e(Y0,mEe),e(mEe,MOr),e(Y0,EOr),e(Y0,pZ),e(pZ,COr),e(Y0,wOr),e(Oe,AOr),e(Oe,K0),e(K0,gEe),e(gEe,yOr),e(K0,LOr),e(K0,_Z),e(_Z,xOr),e(K0,$Or),e(Oe,kOr),e(Oe,Z0),e(Z0,hEe),e(hEe,SOr),e(Z0,ROr),e(Z0,uZ),e(uZ,POr),e(Z0,BOr),e(Oe,IOr),e(Oe,ew),e(ew,pEe),e(pEe,NOr),e(ew,qOr),e(ew,bZ),e(bZ,jOr),e(ew,DOr),e(Oe,GOr),e(Oe,ow),e(ow,_Ee),e(_Ee,OOr),e(ow,VOr),e(ow,vZ),e(vZ,XOr),e(ow,zOr),e(Oe,WOr),e(Oe,rw),e(rw,uEe),e(uEe,QOr),e(rw,HOr),e(rw,FZ),e(FZ,UOr),e(rw,JOr),e(Qr,YOr),M(tw,Qr,null),b(f,BDe,u),b(f,tf,u),e(tf,aw),e(aw,bEe),M(Ax,bEe,null),e(tf,KOr),e(tf,vEe),e(vEe,ZOr),b(f,IDe,u),b(f,Fr,u),M(yx,Fr,null),e(Fr,eVr),e(Fr,af),e(af,oVr),e(af,TZ),e(TZ,rVr),e(af,tVr),e(af,MZ),e(MZ,aVr),e(af,nVr),e(Fr,sVr),e(Fr,Lx),e(Lx,lVr),e(Lx,FEe),e(FEe,iVr),e(Lx,dVr),e(Fr,cVr),e(Fr,Yt),M(xx,Yt,null),e(Yt,fVr),e(Yt,TEe),e(TEe,mVr),e(Yt,gVr),e(Yt,nf),e(nf,hVr),e(nf,MEe),e(MEe,pVr),e(nf,_Vr),e(nf,EZ),e(EZ,uVr),e(nf,bVr),e(Yt,vVr),M(nw,Yt,null),e(Fr,FVr),e(Fr,Hr),M($x,Hr,null),e(Hr,TVr),e(Hr,EEe),e(EEe,MVr),e(Hr,EVr),e(Hr,En),e(En,CVr),e(En,CEe),e(CEe,wVr),e(En,AVr),e(En,wEe),e(wEe,yVr),e(En,LVr),e(En,AEe),e(AEe,xVr),e(En,$Vr),e(Hr,kVr),e(Hr,yEe),e(yEe,sw),e(sw,LEe),e(LEe,SVr),e(sw,RVr),e(sw,CZ),e(CZ,PVr),e(sw,BVr),e(Hr,IVr),M(lw,Hr,null),b(f,NDe,u),b(f,sf,u),e(sf,iw),e(iw,xEe),M(kx,xEe,null),e(sf,NVr),e(sf,$Ee),e($Ee,qVr),b(f,qDe,u),b(f,Tr,u),M(Sx,Tr,null),e(Tr,jVr),e(Tr,lf),e(lf,DVr),e(lf,wZ),e(wZ,GVr),e(lf,OVr),e(lf,AZ),e(AZ,VVr),e(lf,XVr),e(Tr,zVr),e(Tr,Rx),e(Rx,WVr),e(Rx,kEe),e(kEe,QVr),e(Rx,HVr),e(Tr,UVr),e(Tr,Kt),M(Px,Kt,null),e(Kt,JVr),e(Kt,SEe),e(SEe,YVr),e(Kt,KVr),e(Kt,df),e(df,ZVr),e(df,REe),e(REe,eXr),e(df,oXr),e(df,yZ),e(yZ,rXr),e(df,tXr),e(Kt,aXr),M(dw,Kt,null),e(Tr,nXr),e(Tr,Ur),M(Bx,Ur,null),e(Ur,sXr),e(Ur,PEe),e(PEe,lXr),e(Ur,iXr),e(Ur,Cn),e(Cn,dXr),e(Cn,BEe),e(BEe,cXr),e(Cn,fXr),e(Cn,IEe),e(IEe,mXr),e(Cn,gXr),e(Cn,NEe),e(NEe,hXr),e(Cn,pXr),e(Ur,_Xr),e(Ur,Ix),e(Ix,cw),e(cw,qEe),e(qEe,uXr),e(cw,bXr),e(cw,LZ),e(LZ,vXr),e(cw,FXr),e(Ix,TXr),e(Ix,fw),e(fw,jEe),e(jEe,MXr),e(fw,EXr),e(fw,xZ),e(xZ,CXr),e(fw,wXr),e(Ur,AXr),M(mw,Ur,null),b(f,jDe,u),b(f,cf,u),e(cf,gw),e(gw,DEe),M(Nx,DEe,null),e(cf,yXr),e(cf,GEe),e(GEe,LXr),b(f,DDe,u),b(f,Mr,u),M(qx,Mr,null),e(Mr,xXr),e(Mr,ff),e(ff,$Xr),e(ff,$Z),e($Z,kXr),e(ff,SXr),e(ff,kZ),e(kZ,RXr),e(ff,PXr),e(Mr,BXr),e(Mr,jx),e(jx,IXr),e(jx,OEe),e(OEe,NXr),e(jx,qXr),e(Mr,jXr),e(Mr,Zt),M(Dx,Zt,null),e(Zt,DXr),e(Zt,VEe),e(VEe,GXr),e(Zt,OXr),e(Zt,mf),e(mf,VXr),e(mf,XEe),e(XEe,XXr),e(mf,zXr),e(mf,SZ),e(SZ,WXr),e(mf,QXr),e(Zt,HXr),M(hw,Zt,null),e(Mr,UXr),e(Mr,Jr),M(Gx,Jr,null),e(Jr,JXr),e(Jr,zEe),e(zEe,YXr),e(Jr,KXr),e(Jr,wn),e(wn,ZXr),e(wn,WEe),e(WEe,ezr),e(wn,ozr),e(wn,QEe),e(QEe,rzr),e(wn,tzr),e(wn,HEe),e(HEe,azr),e(wn,nzr),e(Jr,szr),e(Jr,UEe),e(UEe,pw),e(pw,JEe),e(JEe,lzr),e(pw,izr),e(pw,RZ),e(RZ,dzr),e(pw,czr),e(Jr,fzr),M(_w,Jr,null),GDe=!0},p(f,[u]){const Ox={};u&2&&(Ox.$$scope={dirty:u,ctx:f}),Tf.$set(Ox);const YEe={};u&2&&(YEe.$$scope={dirty:u,ctx:f}),wg.$set(YEe);const KEe={};u&2&&(KEe.$$scope={dirty:u,ctx:f}),sh.$set(KEe);const ZEe={};u&2&&(ZEe.$$scope={dirty:u,ctx:f}),jh.$set(ZEe);const Vx={};u&2&&(Vx.$$scope={dirty:u,ctx:f}),Dh.$set(Vx);const eCe={};u&2&&(eCe.$$scope={dirty:u,ctx:f}),sp.$set(eCe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),lp.$set(An);const oCe={};u&2&&(oCe.$$scope={dirty:u,ctx:f}),cp.$set(oCe);const rCe={};u&2&&(rCe.$$scope={dirty:u,ctx:f}),su.$set(rCe);const tCe={};u&2&&(tCe.$$scope={dirty:u,ctx:f}),iu.$set(tCe);const Xx={};u&2&&(Xx.$$scope={dirty:u,ctx:f}),Ku.$set(Xx);const aCe={};u&2&&(aCe.$$scope={dirty:u,ctx:f}),e1.$set(aCe);const zx={};u&2&&(zx.$$scope={dirty:u,ctx:f}),j1.$set(zx);const nCe={};u&2&&(nCe.$$scope={dirty:u,ctx:f}),G1.$set(nCe);const Wx={};u&2&&(Wx.$$scope={dirty:u,ctx:f}),wb.$set(Wx);const sCe={};u&2&&(sCe.$$scope={dirty:u,ctx:f}),yb.$set(sCe);const lCe={};u&2&&(lCe.$$scope={dirty:u,ctx:f}),zb.$set(lCe);const iCe={};u&2&&(iCe.$$scope={dirty:u,ctx:f}),Qb.$set(iCe);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),O2.$set(gf);const dCe={};u&2&&(dCe.$$scope={dirty:u,ctx:f}),X2.$set(dCe);const cCe={};u&2&&(cCe.$$scope={dirty:u,ctx:f}),T4.$set(cCe);const fCe={};u&2&&(fCe.$$scope={dirty:u,ctx:f}),E4.$set(fCe);const Qx={};u&2&&(Qx.$$scope={dirty:u,ctx:f}),$4.$set(Qx);const mCe={};u&2&&(mCe.$$scope={dirty:u,ctx:f}),S4.$set(mCe);const gCe={};u&2&&(gCe.$$scope={dirty:u,ctx:f}),h5.$set(gCe);const hCe={};u&2&&(hCe.$$scope={dirty:u,ctx:f}),_5.$set(hCe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),av.$set(ot);const Hx={};u&2&&(Hx.$$scope={dirty:u,ctx:f}),sv.$set(Hx);const pCe={};u&2&&(pCe.$$scope={dirty:u,ctx:f}),dv.$set(pCe);const Ux={};u&2&&(Ux.$$scope={dirty:u,ctx:f}),fv.$set(Ux);const _Ce={};u&2&&(_Ce.$$scope={dirty:u,ctx:f}),Av.$set(_Ce);const rt={};u&2&&(rt.$$scope={dirty:u,ctx:f}),Lv.$set(rt);const uCe={};u&2&&(uCe.$$scope={dirty:u,ctx:f}),kv.$set(uCe);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),Rv.$set(hf);const bCe={};u&2&&(bCe.$$scope={dirty:u,ctx:f}),Xv.$set(bCe);const vCe={};u&2&&(vCe.$$scope={dirty:u,ctx:f}),Wv.$set(vCe);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),Zv.$set(y);const uw={};u&2&&(uw.$$scope={dirty:u,ctx:f}),o3.$set(uw);const FCe={};u&2&&(FCe.$$scope={dirty:u,ctx:f}),m3.$set(FCe);const TCe={};u&2&&(TCe.$$scope={dirty:u,ctx:f}),h3.$set(TCe);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),b3.$set(bw);const MCe={};u&2&&(MCe.$$scope={dirty:u,ctx:f}),F3.$set(MCe);const ECe={};u&2&&(ECe.$$scope={dirty:u,ctx:f}),y3.$set(ECe);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),x3.$set(vw);const CCe={};u&2&&(CCe.$$scope={dirty:u,ctx:f}),P3.$set(CCe);const wCe={};u&2&&(wCe.$$scope={dirty:u,ctx:f}),I3.$set(wCe);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),D3.$set(Fw);const ACe={};u&2&&(ACe.$$scope={dirty:u,ctx:f}),O3.$set(ACe);const yCe={};u&2&&(yCe.$$scope={dirty:u,ctx:f}),z3.$set(yCe);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),Q3.$set(Tw);const LCe={};u&2&&(LCe.$$scope={dirty:u,ctx:f}),eF.$set(LCe);const xCe={};u&2&&(xCe.$$scope={dirty:u,ctx:f}),rF.$set(xCe);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),nF.$set(Mw);const $Ce={};u&2&&($Ce.$$scope={dirty:u,ctx:f}),lF.$set($Ce);const kCe={};u&2&&(kCe.$$scope={dirty:u,ctx:f}),eT.$set(kCe);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),rT.$set(Ew);const SCe={};u&2&&(SCe.$$scope={dirty:u,ctx:f}),AT.$set(SCe);const RCe={};u&2&&(RCe.$$scope={dirty:u,ctx:f}),LT.$set(RCe);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),OT.$set(Cw);const PCe={};u&2&&(PCe.$$scope={dirty:u,ctx:f}),XT.$set(PCe);const BCe={};u&2&&(BCe.$$scope={dirty:u,ctx:f}),UT.$set(BCe);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),YT.$set(ww);const ICe={};u&2&&(ICe.$$scope={dirty:u,ctx:f}),b7.$set(ICe);const NCe={};u&2&&(NCe.$$scope={dirty:u,ctx:f}),F7.$set(NCe);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),k7.$set(Aw);const qCe={};u&2&&(qCe.$$scope={dirty:u,ctx:f}),R7.$set(qCe);const jCe={};u&2&&(jCe.$$scope={dirty:u,ctx:f}),sM.$set(jCe);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),iM.$set(yw);const DCe={};u&2&&(DCe.$$scope={dirty:u,ctx:f}),AM.$set(DCe);const GCe={};u&2&&(GCe.$$scope={dirty:u,ctx:f}),LM.$set(GCe);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),kM.$set(Lw);const OCe={};u&2&&(OCe.$$scope={dirty:u,ctx:f}),RM.$set(OCe);const VCe={};u&2&&(VCe.$$scope={dirty:u,ctx:f}),BM.$set(VCe);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),NM.$set(xw);const XCe={};u&2&&(XCe.$$scope={dirty:u,ctx:f}),aE.$set(XCe);const zCe={};u&2&&(zCe.$$scope={dirty:u,ctx:f}),sE.$set(zCe);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),yE.$set($w);const WCe={};u&2&&(WCe.$$scope={dirty:u,ctx:f}),xE.$set(WCe);const QCe={};u&2&&(QCe.$$scope={dirty:u,ctx:f}),kE.$set(QCe);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),RE.$set(kw);const HCe={};u&2&&(HCe.$$scope={dirty:u,ctx:f}),BE.$set(HCe);const UCe={};u&2&&(UCe.$$scope={dirty:u,ctx:f}),NE.$set(UCe);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),cC.$set(Sw);const JCe={};u&2&&(JCe.$$scope={dirty:u,ctx:f}),mC.$set(JCe);const YCe={};u&2&&(YCe.$$scope={dirty:u,ctx:f}),EC.$set(YCe);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),wC.$set(Rw);const KCe={};u&2&&(KCe.$$scope={dirty:u,ctx:f}),qC.$set(KCe);const ZCe={};u&2&&(ZCe.$$scope={dirty:u,ctx:f}),DC.$set(ZCe);const Pw={};u&2&&(Pw.$$scope={dirty:u,ctx:f}),YC.$set(Pw);const e0e={};u&2&&(e0e.$$scope={dirty:u,ctx:f}),ZC.$set(e0e);const o0e={};u&2&&(o0e.$$scope={dirty:u,ctx:f}),d0.$set(o0e);const Bw={};u&2&&(Bw.$$scope={dirty:u,ctx:f}),f0.$set(Bw);const r0e={};u&2&&(r0e.$$scope={dirty:u,ctx:f}),M0.$set(r0e);const t0e={};u&2&&(t0e.$$scope={dirty:u,ctx:f}),C0.$set(t0e);const Iw={};u&2&&(Iw.$$scope={dirty:u,ctx:f}),B0.$set(Iw);const a0e={};u&2&&(a0e.$$scope={dirty:u,ctx:f}),N0.$set(a0e);const n0e={};u&2&&(n0e.$$scope={dirty:u,ctx:f}),W0.$set(n0e);const Nw={};u&2&&(Nw.$$scope={dirty:u,ctx:f}),H0.$set(Nw);const s0e={};u&2&&(s0e.$$scope={dirty:u,ctx:f}),tw.$set(s0e);const l0e={};u&2&&(l0e.$$scope={dirty:u,ctx:f}),nw.$set(l0e);const qw={};u&2&&(qw.$$scope={dirty:u,ctx:f}),lw.$set(qw);const i0e={};u&2&&(i0e.$$scope={dirty:u,ctx:f}),dw.$set(i0e);const d0e={};u&2&&(d0e.$$scope={dirty:u,ctx:f}),mw.$set(d0e);const jw={};u&2&&(jw.$$scope={dirty:u,ctx:f}),hw.$set(jw);const c0e={};u&2&&(c0e.$$scope={dirty:u,ctx:f}),_w.$set(c0e)},i(f){GDe||(E(d.$$.fragment,f),E(wa.$$.fragment,f),E(NA.$$.fragment,f),E(qA.$$.fragment,f),E(Tf.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(VA.$$.fragment,f),E(wg.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(UA.$$.fragment,f),E(sh.$$.fragment,f),E(JA.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(oy.$$.fragment,f),E(jh.$$.fragment,f),E(Dh.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(ly.$$.fragment,f),E(sp.$$.fragment,f),E(lp.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(cp.$$.fragment,f),E(gy.$$.fragment,f),E(su.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(iu.$$.fragment,f),E(by.$$.fragment,f),E(Ku.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(e1.$$.fragment,f),E(Ey.$$.fragment,f),E(j1.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(G1.$$.fragment,f),E(Ly.$$.fragment,f),E(wb.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(yb.$$.fragment,f),E(Ry.$$.fragment,f),E(zb.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(Qb.$$.fragment,f),E(qy.$$.fragment,f),E(O2.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(X2.$$.fragment,f),E(Vy.$$.fragment,f),E(T4.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(E4.$$.fragment,f),E(Hy.$$.fragment,f),E($4.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(S4.$$.fragment,f),E(Zy.$$.fragment,f),E(h5.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(_5.$$.fragment,f),E(aL.$$.fragment,f),E(av.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(sv.$$.fragment,f),E(dL.$$.fragment,f),E(dv.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(fv.$$.fragment,f),E(hL.$$.fragment,f),E(Av.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(Lv.$$.fragment,f),E(vL.$$.fragment,f),E(kv.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(Rv.$$.fragment,f),E(CL.$$.fragment,f),E(Xv.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(Wv.$$.fragment,f),E(xL.$$.fragment,f),E(Zv.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(o3.$$.fragment,f),E(PL.$$.fragment,f),E(m3.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(h3.$$.fragment,f),E(jL.$$.fragment,f),E(b3.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(F3.$$.fragment,f),E(zL.$$.fragment,f),E(y3.$$.fragment,f),E(WL.$$.fragment,f),E(QL.$$.fragment,f),E(UL.$$.fragment,f),E(x3.$$.fragment,f),E(JL.$$.fragment,f),E(P3.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(e8.$$.fragment,f),E(I3.$$.fragment,f),E(o8.$$.fragment,f),E(D3.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(O3.$$.fragment,f),E(l8.$$.fragment,f),E(z3.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(Q3.$$.fragment,f),E(m8.$$.fragment,f),E(eF.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(_8.$$.fragment,f),E(rF.$$.fragment,f),E(u8.$$.fragment,f),E(nF.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(lF.$$.fragment,f),E(M8.$$.fragment,f),E(eT.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(rT.$$.fragment,f),E(y8.$$.fragment,f),E(AT.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(LT.$$.fragment,f),E(S8.$$.fragment,f),E(OT.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(XT.$$.fragment,f),E(N8.$$.fragment,f),E(UT.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(YT.$$.fragment,f),E(O8.$$.fragment,f),E(b7.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(W8.$$.fragment,f),E(F7.$$.fragment,f),E(Q8.$$.fragment,f),E(k7.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(R7.$$.fragment,f),E(K8.$$.fragment,f),E(sM.$$.fragment,f),E(Z8.$$.fragment,f),E(e9.$$.fragment,f),E(r9.$$.fragment,f),E(iM.$$.fragment,f),E(t9.$$.fragment,f),E(AM.$$.fragment,f),E(a9.$$.fragment,f),E(n9.$$.fragment,f),E(l9.$$.fragment,f),E(LM.$$.fragment,f),E(i9.$$.fragment,f),E(kM.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(RM.$$.fragment,f),E(h9.$$.fragment,f),E(BM.$$.fragment,f),E(p9.$$.fragment,f),E(_9.$$.fragment,f),E(b9.$$.fragment,f),E(NM.$$.fragment,f),E(v9.$$.fragment,f),E(aE.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(sE.$$.fragment,f),E(C9.$$.fragment,f),E(yE.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E(xE.$$.fragment,f),E(x9.$$.fragment,f),E(kE.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(RE.$$.fragment,f),E(P9.$$.fragment,f),E(BE.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(NE.$$.fragment,f),E(j9.$$.fragment,f),E(cC.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(mC.$$.fragment,f),E(X9.$$.fragment,f),E(EC.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(H9.$$.fragment,f),E(wC.$$.fragment,f),E(U9.$$.fragment,f),E(qC.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(DC.$$.fragment,f),E(ex.$$.fragment,f),E(YC.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(ZC.$$.fragment,f),E(nx.$$.fragment,f),E(d0.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(f0.$$.fragment,f),E(cx.$$.fragment,f),E(M0.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(C0.$$.fragment,f),E(px.$$.fragment,f),E(B0.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(N0.$$.fragment,f),E(Fx.$$.fragment,f),E(W0.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(H0.$$.fragment,f),E(wx.$$.fragment,f),E(tw.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(nw.$$.fragment,f),E($x.$$.fragment,f),E(lw.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(dw.$$.fragment,f),E(Bx.$$.fragment,f),E(mw.$$.fragment,f),E(Nx.$$.fragment,f),E(qx.$$.fragment,f),E(Dx.$$.fragment,f),E(hw.$$.fragment,f),E(Gx.$$.fragment,f),E(_w.$$.fragment,f),GDe=!0)},o(f){C(d.$$.fragment,f),C(wa.$$.fragment,f),C(NA.$$.fragment,f),C(qA.$$.fragment,f),C(Tf.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(VA.$$.fragment,f),C(wg.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(UA.$$.fragment,f),C(sh.$$.fragment,f),C(JA.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(oy.$$.fragment,f),C(jh.$$.fragment,f),C(Dh.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(ly.$$.fragment,f),C(sp.$$.fragment,f),C(lp.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(cp.$$.fragment,f),C(gy.$$.fragment,f),C(su.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(iu.$$.fragment,f),C(by.$$.fragment,f),C(Ku.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(e1.$$.fragment,f),C(Ey.$$.fragment,f),C(j1.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(G1.$$.fragment,f),C(Ly.$$.fragment,f),C(wb.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(yb.$$.fragment,f),C(Ry.$$.fragment,f),C(zb.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(Qb.$$.fragment,f),C(qy.$$.fragment,f),C(O2.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(X2.$$.fragment,f),C(Vy.$$.fragment,f),C(T4.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(E4.$$.fragment,f),C(Hy.$$.fragment,f),C($4.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(S4.$$.fragment,f),C(Zy.$$.fragment,f),C(h5.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(_5.$$.fragment,f),C(aL.$$.fragment,f),C(av.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(sv.$$.fragment,f),C(dL.$$.fragment,f),C(dv.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(fv.$$.fragment,f),C(hL.$$.fragment,f),C(Av.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(Lv.$$.fragment,f),C(vL.$$.fragment,f),C(kv.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(Rv.$$.fragment,f),C(CL.$$.fragment,f),C(Xv.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(Wv.$$.fragment,f),C(xL.$$.fragment,f),C(Zv.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(o3.$$.fragment,f),C(PL.$$.fragment,f),C(m3.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(h3.$$.fragment,f),C(jL.$$.fragment,f),C(b3.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(F3.$$.fragment,f),C(zL.$$.fragment,f),C(y3.$$.fragment,f),C(WL.$$.fragment,f),C(QL.$$.fragment,f),C(UL.$$.fragment,f),C(x3.$$.fragment,f),C(JL.$$.fragment,f),C(P3.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(e8.$$.fragment,f),C(I3.$$.fragment,f),C(o8.$$.fragment,f),C(D3.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(O3.$$.fragment,f),C(l8.$$.fragment,f),C(z3.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(Q3.$$.fragment,f),C(m8.$$.fragment,f),C(eF.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(_8.$$.fragment,f),C(rF.$$.fragment,f),C(u8.$$.fragment,f),C(nF.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(lF.$$.fragment,f),C(M8.$$.fragment,f),C(eT.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(rT.$$.fragment,f),C(y8.$$.fragment,f),C(AT.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(LT.$$.fragment,f),C(S8.$$.fragment,f),C(OT.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(XT.$$.fragment,f),C(N8.$$.fragment,f),C(UT.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(YT.$$.fragment,f),C(O8.$$.fragment,f),C(b7.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(W8.$$.fragment,f),C(F7.$$.fragment,f),C(Q8.$$.fragment,f),C(k7.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(R7.$$.fragment,f),C(K8.$$.fragment,f),C(sM.$$.fragment,f),C(Z8.$$.fragment,f),C(e9.$$.fragment,f),C(r9.$$.fragment,f),C(iM.$$.fragment,f),C(t9.$$.fragment,f),C(AM.$$.fragment,f),C(a9.$$.fragment,f),C(n9.$$.fragment,f),C(l9.$$.fragment,f),C(LM.$$.fragment,f),C(i9.$$.fragment,f),C(kM.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(RM.$$.fragment,f),C(h9.$$.fragment,f),C(BM.$$.fragment,f),C(p9.$$.fragment,f),C(_9.$$.fragment,f),C(b9.$$.fragment,f),C(NM.$$.fragment,f),C(v9.$$.fragment,f),C(aE.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(sE.$$.fragment,f),C(C9.$$.fragment,f),C(yE.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C(xE.$$.fragment,f),C(x9.$$.fragment,f),C(kE.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(RE.$$.fragment,f),C(P9.$$.fragment,f),C(BE.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(NE.$$.fragment,f),C(j9.$$.fragment,f),C(cC.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(mC.$$.fragment,f),C(X9.$$.fragment,f),C(EC.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(H9.$$.fragment,f),C(wC.$$.fragment,f),C(U9.$$.fragment,f),C(qC.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(DC.$$.fragment,f),C(ex.$$.fragment,f),C(YC.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(ZC.$$.fragment,f),C(nx.$$.fragment,f),C(d0.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(f0.$$.fragment,f),C(cx.$$.fragment,f),C(M0.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(C0.$$.fragment,f),C(px.$$.fragment,f),C(B0.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(N0.$$.fragment,f),C(Fx.$$.fragment,f),C(W0.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(H0.$$.fragment,f),C(wx.$$.fragment,f),C(tw.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(nw.$$.fragment,f),C($x.$$.fragment,f),C(lw.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(dw.$$.fragment,f),C(Bx.$$.fragment,f),C(mw.$$.fragment,f),C(Nx.$$.fragment,f),C(qx.$$.fragment,f),C(Dx.$$.fragment,f),C(hw.$$.fragment,f),C(Gx.$$.fragment,f),C(_w.$$.fragment,f),GDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(_f),f&&t(tt),f&&t(De),f&&t(We),f&&t(bf),w(wa,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(Aa),f&&t(qqe),f&&t(vi),w(NA),f&&t(jqe),f&&t(kn),f&&t(Dqe),w(qA,f),f&&t(Gqe),f&&t(sk),f&&t(Oqe),w(Tf,f),f&&t(Vqe),f&&t(Fi),w(jA),f&&t(Xqe),f&&t(Co),w(DA),w(VA),w(wg),w(XA),f&&t(zqe),f&&t(Mi),w(zA),f&&t(Wqe),f&&t(wo),w(WA),w(UA),w(sh),w(JA),f&&t(Qqe),f&&t(Ei),w(YA),f&&t(Hqe),f&&t(Ao),w(KA),w(oy),w(jh),w(Dh),w(ry),f&&t(Uqe),f&&t(Ci),w(ty),f&&t(Jqe),f&&t(yo),w(ay),w(ly),w(sp),w(lp),w(iy),f&&t(Yqe),f&&t(Ai),w(dy),f&&t(Kqe),f&&t(Lo),w(cy),w(my),w(cp),w(gy),w(su),f&&t(Zqe),f&&t(xi),w(hy),f&&t(eje),f&&t(xo),w(py),w(uy),w(iu),w(by),w(Ku),f&&t(oje),f&&t(Si),w(vy),f&&t(rje),f&&t($o),w(Fy),w(My),w(e1),w(Ey),w(j1),f&&t(tje),f&&t(Bi),w(Cy),f&&t(aje),f&&t(ko),w(wy),w(yy),w(G1),w(Ly),w(wb),f&&t(nje),f&&t(qi),w(xy),f&&t(sje),f&&t(So),w($y),w(Sy),w(yb),w(Ry),w(zb),f&&t(lje),f&&t(Gi),w(Py),f&&t(ije),f&&t(Ro),w(By),w(Ny),w(Qb),w(qy),w(O2),f&&t(dje),f&&t(Xi),w(jy),f&&t(cje),f&&t(Po),w(Dy),w(Oy),w(X2),w(Vy),w(T4),f&&t(fje),f&&t(Qi),w(Xy),f&&t(mje),f&&t(Bo),w(zy),w(Qy),w(E4),w(Hy),w($4),f&&t(gje),f&&t(Ji),w(Uy),f&&t(hje),f&&t(Io),w(Jy),w(Ky),w(S4),w(Zy),w(h5),f&&t(pje),f&&t(Zi),w(eL),f&&t(_je),f&&t(No),w(oL),w(tL),w(_5),w(aL),w(av),f&&t(uje),f&&t(rd),w(nL),f&&t(bje),f&&t(qo),w(sL),w(iL),w(sv),w(dL),w(dv),f&&t(vje),f&&t(nd),w(cL),f&&t(Fje),f&&t(jo),w(fL),w(gL),w(fv),w(hL),w(Av),f&&t(Tje),f&&t(id),w(pL),f&&t(Mje),f&&t(Do),w(_L),w(bL),w(Lv),w(vL),w(kv),f&&t(Eje),f&&t(fd),w(FL),f&&t(Cje),f&&t(Go),w(TL),w(EL),w(Rv),w(CL),w(Xv),f&&t(wje),f&&t(hd),w(wL),f&&t(Aje),f&&t(Oo),w(AL),w(LL),w(Wv),w(xL),w(Zv),f&&t(yje),f&&t(ud),w($L),f&&t(Lje),f&&t(Vo),w(kL),w(RL),w(o3),w(PL),w(m3),f&&t(xje),f&&t(Fd),w(BL),f&&t($je),f&&t(Xo),w(IL),w(qL),w(h3),w(jL),w(b3),f&&t(kje),f&&t(Ed),w(GL),f&&t(Sje),f&&t(zo),w(OL),w(XL),w(F3),w(zL),w(y3),f&&t(Rje),f&&t(Ad),w(WL),f&&t(Pje),f&&t(Wo),w(QL),w(UL),w(x3),w(JL),w(P3),f&&t(Bje),f&&t($d),w(YL),f&&t(Ije),f&&t(Qo),w(KL),w(e8),w(I3),w(o8),w(D3),f&&t(Nje),f&&t(Rd),w(t8),f&&t(qje),f&&t(Ho),w(a8),w(s8),w(O3),w(l8),w(z3),f&&t(jje),f&&t(Id),w(i8),f&&t(Dje),f&&t(Uo),w(d8),w(f8),w(Q3),w(m8),w(eF),f&&t(Gje),f&&t(jd),w(g8),f&&t(Oje),f&&t(Jo),w(h8),w(_8),w(rF),w(u8),w(nF),f&&t(Vje),f&&t(Od),w(b8),f&&t(Xje),f&&t(Yo),w(v8),w(T8),w(lF),w(M8),w(eT),f&&t(zje),f&&t(zd),w(E8),f&&t(Wje),f&&t(Ko),w(C8),w(A8),w(rT),w(y8),w(AT),f&&t(Qje),f&&t(Hd),w(L8),f&&t(Hje),f&&t(Zo),w(x8),w(k8),w(LT),w(S8),w(OT),f&&t(Uje),f&&t(Yd),w(R8),f&&t(Jje),f&&t(er),w(P8),w(I8),w(XT),w(N8),w(UT),f&&t(Yje),f&&t(ec),w(q8),f&&t(Kje),f&&t(or),w(j8),w(G8),w(YT),w(O8),w(b7),f&&t(Zje),f&&t(tc),w(V8),f&&t(eDe),f&&t(rr),w(X8),w(W8),w(F7),w(Q8),w(k7),f&&t(oDe),f&&t(sc),w(H8),f&&t(rDe),f&&t(tr),w(U8),w(Y8),w(R7),w(K8),w(sM),f&&t(tDe),f&&t(dc),w(Z8),f&&t(aDe),f&&t(ar),w(e9),w(r9),w(iM),w(t9),w(AM),f&&t(nDe),f&&t(mc),w(a9),f&&t(sDe),f&&t(nr),w(n9),w(l9),w(LM),w(i9),w(kM),f&&t(lDe),f&&t(pc),w(c9),f&&t(iDe),f&&t(sr),w(f9),w(g9),w(RM),w(h9),w(BM),f&&t(dDe),f&&t(bc),w(p9),f&&t(cDe),f&&t(lr),w(_9),w(b9),w(NM),w(v9),w(aE),f&&t(fDe),f&&t(Tc),w(F9),f&&t(mDe),f&&t(ir),w(T9),w(E9),w(sE),w(C9),w(yE),f&&t(gDe),f&&t(Cc),w(w9),f&&t(hDe),f&&t(dr),w(A9),w(L9),w(xE),w(x9),w(kE),f&&t(pDe),f&&t(yc),w($9),f&&t(_De),f&&t(cr),w(k9),w(R9),w(RE),w(P9),w(BE),f&&t(uDe),f&&t($c),w(B9),f&&t(bDe),f&&t(fr),w(I9),w(q9),w(NE),w(j9),w(cC),f&&t(vDe),f&&t(Rc),w(D9),f&&t(FDe),f&&t(mr),w(G9),w(V9),w(mC),w(X9),w(EC),f&&t(TDe),f&&t(Ic),w(z9),f&&t(MDe),f&&t(gr),w(W9),w(H9),w(wC),w(U9),w(qC),f&&t(EDe),f&&t(jc),w(J9),f&&t(CDe),f&&t(hr),w(Y9),w(Z9),w(DC),w(ex),w(YC),f&&t(wDe),f&&t(Oc),w(ox),f&&t(ADe),f&&t(pr),w(rx),w(ax),w(ZC),w(nx),w(d0),f&&t(yDe),f&&t(zc),w(sx),f&&t(LDe),f&&t(_r),w(lx),w(dx),w(f0),w(cx),w(M0),f&&t(xDe),f&&t(Hc),w(fx),f&&t($De),f&&t(ur),w(mx),w(hx),w(C0),w(px),w(B0),f&&t(kDe),f&&t(Yc),w(_x),f&&t(SDe),f&&t(br),w(ux),w(vx),w(N0),w(Fx),w(W0),f&&t(RDe),f&&t(ef),w(Tx),f&&t(PDe),f&&t(vr),w(Mx),w(Cx),w(H0),w(wx),w(tw),f&&t(BDe),f&&t(tf),w(Ax),f&&t(IDe),f&&t(Fr),w(yx),w(xx),w(nw),w($x),w(lw),f&&t(NDe),f&&t(sf),w(kx),f&&t(qDe),f&&t(Tr),w(Sx),w(Px),w(dw),w(Bx),w(mw),f&&t(jDe),f&&t(cf),w(Nx),f&&t(DDe),f&&t(Mr),w(qx),w(Dx),w(hw),w(Gx),w(_w)}}}const fPt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function mPt(L){return mSt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class vPt extends iSt{constructor(g){super();dSt(this,g,mPt,cPt,cSt,{})}}export{vPt as default,fPt as metadata};
